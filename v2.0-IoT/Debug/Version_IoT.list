
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca8c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800cc70  0800cc70  0001cc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc4c  0800dc4c  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc4c  0800dc4c  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc4c  0800dc4c  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc4c  0800dc4c  0001dc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc50  0800dc50  0001dc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800dc54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000100  0800dd54  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  0800dd54  000205d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001671d  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034f1  00000000  00000000  00036889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  00039d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e61  00000000  00000000  0003b010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c11b  00000000  00000000  00058516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eeb4  00000000  00000000  00074631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005230  00000000  00000000  001134e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000100 	.word	0x20000100
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cc58 	.word	0x0800cc58

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000104 	.word	0x20000104
 8000220:	0800cc58 	.word	0x0800cc58

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fb74 	bl	800993c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f9ec 	bl	8008634 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000011c 	.word	0x2000011c
 80004bc:	200003a0 	.word	0x200003a0
 80004c0:	200001f1 	.word	0x200001f1
 80004c4:	20000219 	.word	0x20000219
 80004c8:	2000021c 	.word	0x2000021c
 80004cc:	2000021d 	.word	0x2000021d
 80004d0:	2000021e 	.word	0x2000021e
 80004d4:	2000021f 	.word	0x2000021f
 80004d8:	20000220 	.word	0x20000220
 80004dc:	20000221 	.word	0x20000221
 80004e0:	20000231 	.word	0x20000231
 80004e4:	20000222 	.word	0x20000222
 80004e8:	20000232 	.word	0x20000232
 80004ec:	20000223 	.word	0x20000223
 80004f0:	20000233 	.word	0x20000233
 80004f4:	20000226 	.word	0x20000226
 80004f8:	20000227 	.word	0x20000227
 80004fc:	20000228 	.word	0x20000228
 8000500:	20000229 	.word	0x20000229
 8000504:	2000022a 	.word	0x2000022a
 8000508:	2000022b 	.word	0x2000022b
 800050c:	2000022c 	.word	0x2000022c
 8000510:	2000022d 	.word	0x2000022d
 8000514:	2000022e 	.word	0x2000022e
 8000518:	2000022f 	.word	0x2000022f
 800051c:	20000230 	.word	0x20000230
 8000520:	20000234 	.word	0x20000234
 8000524:	20000236 	.word	0x20000236
 8000528:	20000214 	.word	0x20000214
 800052c:	20000215 	.word	0x20000215
 8000530:	20000216 	.word	0x20000216
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000217 	.word	0x20000217
 8000540:	20000239 	.word	0x20000239
 8000544:	20000237 	.word	0x20000237
 8000548:	20000225 	.word	0x20000225
 800054c:	20000238 	.word	0x20000238
 8000550:	20000224 	.word	0x20000224
 8000554:	2000023a 	.word	0x2000023a
 8000558:	2000023b 	.word	0x2000023b
 800055c:	2000023c 	.word	0x2000023c
 8000560:	2000023d 	.word	0x2000023d
 8000564:	2000023e 	.word	0x2000023e
 8000568:	2000023f 	.word	0x2000023f
 800056c:	20000240 	.word	0x20000240
 8000570:	20000241 	.word	0x20000241
 8000574:	20000242 	.word	0x20000242
 8000578:	20000243 	.word	0x20000243
 800057c:	200001f0 	.word	0x200001f0
	}

	if(kapi1AcSure>5) {
 8000580:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <eepromKontrol+0x4a4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b53      	ldr	r3, [pc, #332]	; (80006d8 <eepromKontrol+0x4a4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b53      	ldr	r3, [pc, #332]	; (80006dc <eepromKontrol+0x4a8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b51      	ldr	r3, [pc, #324]	; (80006dc <eepromKontrol+0x4a8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b50      	ldr	r3, [pc, #320]	; (80006e0 <eepromKontrol+0x4ac>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <eepromKontrol+0x4ac>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b4e      	ldr	r3, [pc, #312]	; (80006e4 <eepromKontrol+0x4b0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4c      	ldr	r3, [pc, #304]	; (80006e4 <eepromKontrol+0x4b0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4b      	ldr	r3, [pc, #300]	; (80006e8 <eepromKontrol+0x4b4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b49      	ldr	r3, [pc, #292]	; (80006e8 <eepromKontrol+0x4b4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b49      	ldr	r3, [pc, #292]	; (80006ec <eepromKontrol+0x4b8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b47      	ldr	r3, [pc, #284]	; (80006ec <eepromKontrol+0x4b8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b46      	ldr	r3, [pc, #280]	; (80006f0 <eepromKontrol+0x4bc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b44      	ldr	r3, [pc, #272]	; (80006f0 <eepromKontrol+0x4bc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b44      	ldr	r3, [pc, #272]	; (80006f4 <eepromKontrol+0x4c0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b42      	ldr	r3, [pc, #264]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b41      	ldr	r3, [pc, #260]	; (80006f8 <eepromKontrol+0x4c4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <eepromKontrol+0x4c4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <eepromKontrol+0x4c8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3d      	ldr	r3, [pc, #244]	; (80006fc <eepromKontrol+0x4c8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <eepromKontrol+0x4cc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3a      	ldr	r3, [pc, #232]	; (8000700 <eepromKontrol+0x4cc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3a      	ldr	r3, [pc, #232]	; (8000704 <eepromKontrol+0x4d0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <eepromKontrol+0x4d0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b37      	ldr	r3, [pc, #220]	; (8000708 <eepromKontrol+0x4d4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b35      	ldr	r3, [pc, #212]	; (8000708 <eepromKontrol+0x4d4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b35      	ldr	r3, [pc, #212]	; (800070c <eepromKontrol+0x4d8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b33      	ldr	r3, [pc, #204]	; (800070c <eepromKontrol+0x4d8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b32      	ldr	r3, [pc, #200]	; (8000710 <eepromKontrol+0x4dc>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b30      	ldr	r3, [pc, #192]	; (8000710 <eepromKontrol+0x4dc>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b30      	ldr	r3, [pc, #192]	; (8000714 <eepromKontrol+0x4e0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <eepromKontrol+0x4e0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <eepromKontrol+0x4e4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <eepromKontrol+0x4e4>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <eepromKontrol+0x4e8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <eepromKontrol+0x4e8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <eepromKontrol+0x4ec>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <eepromKontrol+0x4ec>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <eepromKontrol+0x4f0>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <eepromKontrol+0x4f0>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <eepromKontrol+0x4f4>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <eepromKontrol+0x4f4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <eepromKontrol+0x4f8>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <eepromKontrol+0x4f8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <eepromKontrol+0x4fc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <eepromKontrol+0x500>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <eepromKontrol+0x504>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	HAL_Delay(100);
 80006ca:	2064      	movs	r0, #100	; 0x64
 80006cc:	f007 ffb2 	bl	8008634 <HAL_Delay>
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000231 	.word	0x20000231
 80006dc:	20000222 	.word	0x20000222
 80006e0:	20000232 	.word	0x20000232
 80006e4:	20000223 	.word	0x20000223
 80006e8:	20000225 	.word	0x20000225
 80006ec:	20000233 	.word	0x20000233
 80006f0:	20000226 	.word	0x20000226
 80006f4:	20000227 	.word	0x20000227
 80006f8:	20000228 	.word	0x20000228
 80006fc:	20000229 	.word	0x20000229
 8000700:	2000022a 	.word	0x2000022a
 8000704:	2000022b 	.word	0x2000022b
 8000708:	2000022c 	.word	0x2000022c
 800070c:	2000022d 	.word	0x2000022d
 8000710:	2000022e 	.word	0x2000022e
 8000714:	2000022f 	.word	0x2000022f
 8000718:	20000230 	.word	0x20000230
 800071c:	20000234 	.word	0x20000234
 8000720:	20000236 	.word	0x20000236
 8000724:	20000238 	.word	0x20000238
 8000728:	20000239 	.word	0x20000239
 800072c:	20000237 	.word	0x20000237
 8000730:	20000004 	.word	0x20000004
 8000734:	2000011c 	.word	0x2000011c
 8000738:	20000194 	.word	0x20000194

0800073c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <getCharFromCursorPosition+0x1c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000020 	.word	0x20000020

0800075c <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b09f      	sub	sp, #124	; 0x7c
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000768:	4948      	ldr	r1, [pc, #288]	; (800088c <ESP8266_Init+0x130>)
 800076a:	4849      	ldr	r0, [pc, #292]	; (8000890 <ESP8266_Init+0x134>)
 800076c:	f00b fe14 	bl	800c398 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000770:	4847      	ldr	r0, [pc, #284]	; (8000890 <ESP8266_Init+0x134>)
 8000772:	f7ff fd57 	bl	8000224 <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29b      	uxth	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	4944      	ldr	r1, [pc, #272]	; (8000890 <ESP8266_Init+0x134>)
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f00b f824 	bl	800b7cc <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000788:	f007 ff54 	bl	8008634 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 800078c:	4941      	ldr	r1, [pc, #260]	; (8000894 <ESP8266_Init+0x138>)
 800078e:	4840      	ldr	r0, [pc, #256]	; (8000890 <ESP8266_Init+0x134>)
 8000790:	f00b fe02 	bl	800c398 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000794:	483e      	ldr	r0, [pc, #248]	; (8000890 <ESP8266_Init+0x134>)
 8000796:	f7ff fd45 	bl	8000224 <strlen>
 800079a:	4603      	mov	r3, r0
 800079c:	b29b      	uxth	r3, r3
 800079e:	461a      	mov	r2, r3
 80007a0:	493b      	ldr	r1, [pc, #236]	; (8000890 <ESP8266_Init+0x134>)
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f00b f812 	bl	800b7cc <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80007a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ac:	f007 ff42 	bl	8008634 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 80007b0:	4939      	ldr	r1, [pc, #228]	; (8000898 <ESP8266_Init+0x13c>)
 80007b2:	4837      	ldr	r0, [pc, #220]	; (8000890 <ESP8266_Init+0x134>)
 80007b4:	f00b fdf0 	bl	800c398 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80007b8:	4835      	ldr	r0, [pc, #212]	; (8000890 <ESP8266_Init+0x134>)
 80007ba:	f7ff fd33 	bl	8000224 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	4932      	ldr	r1, [pc, #200]	; (8000890 <ESP8266_Init+0x134>)
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	f00b f800 	bl	800b7cc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80007cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007d0:	f007 ff30 	bl	8008634 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80007d4:	4931      	ldr	r1, [pc, #196]	; (800089c <ESP8266_Init+0x140>)
 80007d6:	482e      	ldr	r0, [pc, #184]	; (8000890 <ESP8266_Init+0x134>)
 80007d8:	f00b fdde 	bl	800c398 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80007dc:	482c      	ldr	r0, [pc, #176]	; (8000890 <ESP8266_Init+0x134>)
 80007de:	f7ff fd21 	bl	8000224 <strlen>
 80007e2:	4603      	mov	r3, r0
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	461a      	mov	r2, r3
 80007e8:	4929      	ldr	r1, [pc, #164]	; (8000890 <ESP8266_Init+0x134>)
 80007ea:	68f8      	ldr	r0, [r7, #12]
 80007ec:	f00a ffee 	bl	800b7cc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80007f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007f4:	f007 ff1e 	bl	8008634 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4a28      	ldr	r2, [pc, #160]	; (80008a0 <ESP8266_Init+0x144>)
 80007fe:	461c      	mov	r4, r3
 8000800:	4613      	mov	r3, r2
 8000802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000804:	c407      	stmia	r4!, {r0, r1, r2}
 8000806:	8023      	strh	r3, [r4, #0]
 8000808:	3402      	adds	r4, #2
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	4618      	mov	r0, r3
 8000816:	f00b fe21 	bl	800c45c <strcat>
	strcat(str, "\",\"");
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fd00 	bl	8000224 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4413      	add	r3, r2
 800082e:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <ESP8266_Init+0x148>)
 8000830:	6810      	ldr	r0, [r2, #0]
 8000832:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	4618      	mov	r0, r3
 800083c:	f00b fe0e 	bl	800c45c <strcat>
	strcat(str, "\"\r\n");
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fced 	bl	8000224 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4413      	add	r3, r2
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <ESP8266_Init+0x14c>)
 8000856:	6810      	ldr	r0, [r2, #0]
 8000858:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	461a      	mov	r2, r3
 8000860:	4912      	ldr	r1, [pc, #72]	; (80008ac <ESP8266_Init+0x150>)
 8000862:	480b      	ldr	r0, [pc, #44]	; (8000890 <ESP8266_Init+0x134>)
 8000864:	f00b fd98 	bl	800c398 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <ESP8266_Init+0x134>)
 800086a:	f7ff fcdb 	bl	8000224 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	b29b      	uxth	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <ESP8266_Init+0x134>)
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f00a ffa8 	bl	800b7cc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800087c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000880:	f007 fed8 	bl	8008634 <HAL_Delay>
}
 8000884:	bf00      	nop
 8000886:	377c      	adds	r7, #124	; 0x7c
 8000888:	46bd      	mov	sp, r7
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	0800cc70 	.word	0x0800cc70
 8000890:	2000027c 	.word	0x2000027c
 8000894:	0800cc80 	.word	0x0800cc80
 8000898:	0800cc8c 	.word	0x0800cc8c
 800089c:	0800cc94 	.word	0x0800cc94
 80008a0:	0800cca4 	.word	0x0800cca4
 80008a4:	0800ccb4 	.word	0x0800ccb4
 80008a8:	0800ccb8 	.word	0x0800ccb8
 80008ac:	0800ccbc 	.word	0x0800ccbc

080008b0 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0c6      	sub	sp, #280	; 0x118
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008be:	6018      	str	r0, [r3, #0]
 80008c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008c8:	6019      	str	r1, [r3, #0]
 80008ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008d2:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80008d4:	4a31      	ldr	r2, [pc, #196]	; (800099c <sendMachineData+0xec>)
 80008d6:	4932      	ldr	r1, [pc, #200]	; (80009a0 <sendMachineData+0xf0>)
 80008d8:	4832      	ldr	r0, [pc, #200]	; (80009a4 <sendMachineData+0xf4>)
 80008da:	f00b fd5d 	bl	800c398 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008de:	4831      	ldr	r0, [pc, #196]	; (80009a4 <sendMachineData+0xf4>)
 80008e0:	f7ff fca0 	bl	8000224 <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008f0:	492c      	ldr	r1, [pc, #176]	; (80009a4 <sendMachineData+0xf4>)
 80008f2:	6818      	ldr	r0, [r3, #0]
 80008f4:	f00a ff6a 	bl	800b7cc <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008f8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008fc:	f007 fe9a 	bl	8008634 <HAL_Delay>

	sprintf(local_txA,
 8000900:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000904:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000908:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800090c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000910:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000914:	4924      	ldr	r1, [pc, #144]	; (80009a8 <sendMachineData+0xf8>)
 8000916:	9100      	str	r1, [sp, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6812      	ldr	r2, [r2, #0]
 800091c:	4923      	ldr	r1, [pc, #140]	; (80009ac <sendMachineData+0xfc>)
 800091e:	f00b fd3b 	bl	800c398 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000922:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fc7c 	bl	8000224 <strlen>
 800092c:	4603      	mov	r3, r0
 800092e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800093a:	491d      	ldr	r1, [pc, #116]	; (80009b0 <sendMachineData+0x100>)
 800093c:	4618      	mov	r0, r3
 800093e:	f00b fd2b 	bl	800c398 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fc6c 	bl	8000224 <strlen>
 800094c:	4603      	mov	r3, r0
 800094e:	b29a      	uxth	r2, r3
 8000950:	f107 0110 	add.w	r1, r7, #16
 8000954:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	f00a ff35 	bl	800b7cc <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000962:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000966:	f007 fe65 	bl	8008634 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800096a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fc58 	bl	8000224 <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	b29a      	uxth	r2, r3
 8000978:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800097c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000984:	6818      	ldr	r0, [r3, #0]
 8000986:	f00a ff21 	bl	800b7cc <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 800098a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800098e:	f007 fe51 	bl	8008634 <HAL_Delay>
}
 8000992:	bf00      	nop
 8000994:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	0800ccc0 	.word	0x0800ccc0
 80009a0:	0800ccd0 	.word	0x0800ccd0
 80009a4:	2000027c 	.word	0x2000027c
 80009a8:	0800cd4c 	.word	0x0800cd4c
 80009ac:	0800ccf0 	.word	0x0800ccf0
 80009b0:	0800cd60 	.word	0x0800cd60

080009b4 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af04      	add	r7, sp, #16
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <hata2EEPROM+0xa4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	1e5a      	subs	r2, r3, #1
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <hata2EEPROM+0xa8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <hata2EEPROM+0xac>)
 80009cc:	5cd3      	ldrb	r3, [r2, r3]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009d2:	f000 f92b 	bl	8000c2c <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009d6:	e000      	b.n	80009da <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009d8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e012      	b.n	8000a06 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <hata2EEPROM+0xa8>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <hata2EEPROM+0xac>)
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d107      	bne.n	8000a00 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <hata2EEPROM+0xa8>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	4919      	ldr	r1, [pc, #100]	; (8000a60 <hata2EEPROM+0xac>)
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	54ca      	strb	r2, [r1, r3]
					break;
 80009fe:	e007      	b.n	8000a10 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3301      	adds	r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <hata2EEPROM+0xa4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbe7      	blt.n	80009e0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <hata2EEPROM+0xa8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	b299      	uxth	r1, r3
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <hata2EEPROM+0xa4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	b298      	uxth	r0, r3
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <hata2EEPROM+0xa8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <hata2EEPROM+0xac>)
 8000a22:	4413      	add	r3, r2
 8000a24:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <hata2EEPROM+0xa4>)
 8000a26:	6812      	ldr	r2, [r2, #0]
 8000a28:	b292      	uxth	r2, r2
 8000a2a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000a2e:	9402      	str	r4, [sp, #8]
 8000a30:	9201      	str	r2, [sp, #4]
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4603      	mov	r3, r0
 8000a36:	460a      	mov	r2, r1
 8000a38:	21a0      	movs	r1, #160	; 0xa0
 8000a3a:	480a      	ldr	r0, [pc, #40]	; (8000a64 <hata2EEPROM+0xb0>)
 8000a3c:	f008 fe84 	bl	8009748 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a44:	f007 fdf6 	bl	8008634 <HAL_Delay>
	eepromKontrol(1);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fbf3 	bl	8000234 <eepromKontrol>
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd90      	pop	{r4, r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000009c 	.word	0x2000009c
 8000a5c:	200000a0 	.word	0x200000a0
 8000a60:	2000011c 	.word	0x2000011c
 8000a64:	200003a0 	.word	0x200003a0

08000a68 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d11d      	bne.n	8000ab4 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a78:	4b62      	ldr	r3, [pc, #392]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d105      	bne.n	8000a8c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a80:	4a61      	ldr	r2, [pc, #388]	; (8000c08 <hataKoduLcdGoster+0x1a0>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	2001      	movs	r0, #1
 8000a86:	f007 f87f 	bl	8007b88 <lcd_print>
 8000a8a:	e008      	b.n	8000a9e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a8c:	4b5d      	ldr	r3, [pc, #372]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d104      	bne.n	8000a9e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a94:	4a5d      	ldr	r2, [pc, #372]	; (8000c0c <hataKoduLcdGoster+0x1a4>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f007 f875 	bl	8007b88 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000a9e:	4a5c      	ldr	r2, [pc, #368]	; (8000c10 <hataKoduLcdGoster+0x1a8>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f007 f870 	bl	8007b88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aa8:	4a5a      	ldr	r2, [pc, #360]	; (8000c14 <hataKoduLcdGoster+0x1ac>)
 8000aaa:	2107      	movs	r1, #7
 8000aac:	2002      	movs	r0, #2
 8000aae:	f007 f86b 	bl	8007b88 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000ab2:	e0a3      	b.n	8000bfc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d11d      	bne.n	8000af6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000aba:	4b52      	ldr	r3, [pc, #328]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d105      	bne.n	8000ace <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000ac2:	4a51      	ldr	r2, [pc, #324]	; (8000c08 <hataKoduLcdGoster+0x1a0>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f007 f85e 	bl	8007b88 <lcd_print>
 8000acc:	e008      	b.n	8000ae0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000ace:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d104      	bne.n	8000ae0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000ad6:	4a4d      	ldr	r2, [pc, #308]	; (8000c0c <hataKoduLcdGoster+0x1a4>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	2001      	movs	r0, #1
 8000adc:	f007 f854 	bl	8007b88 <lcd_print>
		lcd_print(2, 2, "2");
 8000ae0:	4a4d      	ldr	r2, [pc, #308]	; (8000c18 <hataKoduLcdGoster+0x1b0>)
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f007 f84f 	bl	8007b88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aea:	4a4a      	ldr	r2, [pc, #296]	; (8000c14 <hataKoduLcdGoster+0x1ac>)
 8000aec:	2107      	movs	r1, #7
 8000aee:	2002      	movs	r0, #2
 8000af0:	f007 f84a 	bl	8007b88 <lcd_print>
}
 8000af4:	e082      	b.n	8000bfc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d11d      	bne.n	8000b38 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000afc:	4b41      	ldr	r3, [pc, #260]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d105      	bne.n	8000b10 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000b04:	4a40      	ldr	r2, [pc, #256]	; (8000c08 <hataKoduLcdGoster+0x1a0>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f007 f83d 	bl	8007b88 <lcd_print>
 8000b0e:	e008      	b.n	8000b22 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000b10:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d104      	bne.n	8000b22 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000b18:	4a3c      	ldr	r2, [pc, #240]	; (8000c0c <hataKoduLcdGoster+0x1a4>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f007 f833 	bl	8007b88 <lcd_print>
		lcd_print(2, 3, "3");
 8000b22:	4a3e      	ldr	r2, [pc, #248]	; (8000c1c <hataKoduLcdGoster+0x1b4>)
 8000b24:	2103      	movs	r1, #3
 8000b26:	2002      	movs	r0, #2
 8000b28:	f007 f82e 	bl	8007b88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b2c:	4a39      	ldr	r2, [pc, #228]	; (8000c14 <hataKoduLcdGoster+0x1ac>)
 8000b2e:	2107      	movs	r1, #7
 8000b30:	2002      	movs	r0, #2
 8000b32:	f007 f829 	bl	8007b88 <lcd_print>
}
 8000b36:	e061      	b.n	8000bfc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d11d      	bne.n	8000b7a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000b3e:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d105      	bne.n	8000b52 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000b46:	4a30      	ldr	r2, [pc, #192]	; (8000c08 <hataKoduLcdGoster+0x1a0>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f007 f81c 	bl	8007b88 <lcd_print>
 8000b50:	e008      	b.n	8000b64 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d104      	bne.n	8000b64 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b5a:	4a2c      	ldr	r2, [pc, #176]	; (8000c0c <hataKoduLcdGoster+0x1a4>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f007 f812 	bl	8007b88 <lcd_print>
		lcd_print(2, 4, "4");
 8000b64:	4a2e      	ldr	r2, [pc, #184]	; (8000c20 <hataKoduLcdGoster+0x1b8>)
 8000b66:	2104      	movs	r1, #4
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f007 f80d 	bl	8007b88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b6e:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <hataKoduLcdGoster+0x1ac>)
 8000b70:	2107      	movs	r1, #7
 8000b72:	2002      	movs	r0, #2
 8000b74:	f007 f808 	bl	8007b88 <lcd_print>
}
 8000b78:	e040      	b.n	8000bfc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b05      	cmp	r3, #5
 8000b7e:	d11d      	bne.n	8000bbc <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b80:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d105      	bne.n	8000b94 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b88:	4a1f      	ldr	r2, [pc, #124]	; (8000c08 <hataKoduLcdGoster+0x1a0>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f006 fffb 	bl	8007b88 <lcd_print>
 8000b92:	e008      	b.n	8000ba6 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d104      	bne.n	8000ba6 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	; (8000c0c <hataKoduLcdGoster+0x1a4>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f006 fff1 	bl	8007b88 <lcd_print>
		lcd_print(2, 5, "5");
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <hataKoduLcdGoster+0x1bc>)
 8000ba8:	2105      	movs	r1, #5
 8000baa:	2002      	movs	r0, #2
 8000bac:	f006 ffec 	bl	8007b88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bb0:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <hataKoduLcdGoster+0x1ac>)
 8000bb2:	2107      	movs	r1, #7
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f006 ffe7 	bl	8007b88 <lcd_print>
}
 8000bba:	e01f      	b.n	8000bfc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d11c      	bne.n	8000bfc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d105      	bne.n	8000bd6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <hataKoduLcdGoster+0x1a0>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f006 ffda 	bl	8007b88 <lcd_print>
 8000bd4:	e008      	b.n	8000be8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <hataKoduLcdGoster+0x19c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d104      	bne.n	8000be8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <hataKoduLcdGoster+0x1a4>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	2001      	movs	r0, #1
 8000be4:	f006 ffd0 	bl	8007b88 <lcd_print>
		lcd_print(2, 6, "6");
 8000be8:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <hataKoduLcdGoster+0x1c0>)
 8000bea:	2106      	movs	r1, #6
 8000bec:	2002      	movs	r0, #2
 8000bee:	f006 ffcb 	bl	8007b88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <hataKoduLcdGoster+0x1ac>)
 8000bf4:	2107      	movs	r1, #7
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f006 ffc6 	bl	8007b88 <lcd_print>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000239 	.word	0x20000239
 8000c08:	0800cdec 	.word	0x0800cdec
 8000c0c:	0800cdfc 	.word	0x0800cdfc
 8000c10:	0800ce0c 	.word	0x0800ce0c
 8000c14:	0800ce10 	.word	0x0800ce10
 8000c18:	0800ce1c 	.word	0x0800ce1c
 8000c1c:	0800ce20 	.word	0x0800ce20
 8000c20:	0800ce24 	.word	0x0800ce24
 8000c24:	0800ce28 	.word	0x0800ce28
 8000c28:	0800ce2c 	.word	0x0800ce2c

08000c2c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e009      	b.n	8000c4c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <eepromDataFillWithEmpty+0x38>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <eepromDataFillWithEmpty+0x3c>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <eepromDataFillWithEmpty+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dbf0      	blt.n	8000c38 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c56:	bf00      	nop
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000074 	.word	0x20000074
 8000c68:	2000011c 	.word	0x2000011c
 8000c6c:	2000009c 	.word	0x2000009c

08000c70 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c82:	4b50      	ldr	r3, [pc, #320]	; (8000dc4 <i2cTest+0x154>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <i2cTest+0x154>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f022 0201 	bic.w	r2, r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c92:	484c      	ldr	r0, [pc, #304]	; (8000dc4 <i2cTest+0x154>)
 8000c94:	f008 fc2a 	bl	80094ec <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c98:	23c0      	movs	r3, #192	; 0xc0
 8000c9a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c9c:	2311      	movs	r3, #17
 8000c9e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4846      	ldr	r0, [pc, #280]	; (8000dc8 <i2cTest+0x158>)
 8000cae:	f008 f831 	bl	8008d14 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2140      	movs	r1, #64	; 0x40
 8000cb6:	4844      	ldr	r0, [pc, #272]	; (8000dc8 <i2cTest+0x158>)
 8000cb8:	f008 faa3 	bl	8009202 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	4841      	ldr	r0, [pc, #260]	; (8000dc8 <i2cTest+0x158>)
 8000cc2:	f008 fa9e 	bl	8009202 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000cc6:	200a      	movs	r0, #10
 8000cc8:	f007 fcb4 	bl	8008634 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000ccc:	bf00      	nop
 8000cce:	2140      	movs	r1, #64	; 0x40
 8000cd0:	483d      	ldr	r0, [pc, #244]	; (8000dc8 <i2cTest+0x158>)
 8000cd2:	f008 fa7f 	bl	80091d4 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d006      	beq.n	8000cea <i2cTest+0x7a>
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	483a      	ldr	r0, [pc, #232]	; (8000dc8 <i2cTest+0x158>)
 8000ce0:	f008 fa78 	bl	80091d4 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1f1      	bne.n	8000cce <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <i2cTest+0x158>)
 8000cf0:	f008 fa87 	bl	8009202 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f007 fc9d 	bl	8008634 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cfa:	bf00      	nop
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	4832      	ldr	r0, [pc, #200]	; (8000dc8 <i2cTest+0x158>)
 8000d00:	f008 fa68 	bl	80091d4 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d0f8      	beq.n	8000cfc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2140      	movs	r1, #64	; 0x40
 8000d0e:	482e      	ldr	r0, [pc, #184]	; (8000dc8 <i2cTest+0x158>)
 8000d10:	f008 fa77 	bl	8009202 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d14:	200a      	movs	r0, #10
 8000d16:	f007 fc8d 	bl	8008634 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d1a:	bf00      	nop
 8000d1c:	2140      	movs	r1, #64	; 0x40
 8000d1e:	482a      	ldr	r0, [pc, #168]	; (8000dc8 <i2cTest+0x158>)
 8000d20:	f008 fa58 	bl	80091d4 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d0f8      	beq.n	8000d1c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4826      	ldr	r0, [pc, #152]	; (8000dc8 <i2cTest+0x158>)
 8000d30:	f008 fa67 	bl	8009202 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d34:	200a      	movs	r0, #10
 8000d36:	f007 fc7d 	bl	8008634 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000d3a:	bf00      	nop
 8000d3c:	2140      	movs	r1, #64	; 0x40
 8000d3e:	4822      	ldr	r0, [pc, #136]	; (8000dc8 <i2cTest+0x158>)
 8000d40:	f008 fa48 	bl	80091d4 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d1f8      	bne.n	8000d3c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <i2cTest+0x158>)
 8000d50:	f008 fa57 	bl	8009202 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d54:	200a      	movs	r0, #10
 8000d56:	f007 fc6d 	bl	8008634 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d5a:	bf00      	nop
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	481a      	ldr	r0, [pc, #104]	; (8000dc8 <i2cTest+0x158>)
 8000d60:	f008 fa38 	bl	80091d4 <HAL_GPIO_ReadPin>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d1f8      	bne.n	8000d5c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d6a:	23c0      	movs	r3, #192	; 0xc0
 8000d6c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <i2cTest+0x158>)
 8000d80:	f007 ffc8 	bl	8008d14 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <i2cTest+0x154>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <i2cTest+0x154>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d92:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <i2cTest+0x154>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <i2cTest+0x154>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000da2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <i2cTest+0x154>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <i2cTest+0x154>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0201 	orr.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <i2cTest+0x154>)
 8000db6:	f008 fa55 	bl	8009264 <HAL_I2C_Init>
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200003a0 	.word	0x200003a0
 8000dc8:	40010c00 	.word	0x40010c00

08000dcc <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000dd6:	20c8      	movs	r0, #200	; 0xc8
 8000dd8:	f007 fc2c 	bl	8008634 <HAL_Delay>
	lcd_clear();
 8000ddc:	f006 ff00 	bl	8007be0 <lcd_clear>
	if(type == 1 && page == 0) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d143      	bne.n	8000e6e <printTemplate+0xa2>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d140      	bne.n	8000e6e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000dec:	4a9d      	ldr	r2, [pc, #628]	; (8001064 <printTemplate+0x298>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	2001      	movs	r0, #1
 8000df2:	f006 fec9 	bl	8007b88 <lcd_print>
		lcd_print(2, 3, "0");
 8000df6:	4a9c      	ldr	r2, [pc, #624]	; (8001068 <printTemplate+0x29c>)
 8000df8:	2103      	movs	r1, #3
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f006 fec4 	bl	8007b88 <lcd_print>
		lcd_print(2, 4, "1");
 8000e00:	4a9a      	ldr	r2, [pc, #616]	; (800106c <printTemplate+0x2a0>)
 8000e02:	2104      	movs	r1, #4
 8000e04:	2002      	movs	r0, #2
 8000e06:	f006 febf 	bl	8007b88 <lcd_print>
		lcd_print(2, 5, "2");
 8000e0a:	4a99      	ldr	r2, [pc, #612]	; (8001070 <printTemplate+0x2a4>)
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f006 feba 	bl	8007b88 <lcd_print>
		lcd_print(2, 6, "3");
 8000e14:	4a97      	ldr	r2, [pc, #604]	; (8001074 <printTemplate+0x2a8>)
 8000e16:	2106      	movs	r1, #6
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f006 feb5 	bl	8007b88 <lcd_print>
		lcd_print(2, 7, "4");
 8000e1e:	4a96      	ldr	r2, [pc, #600]	; (8001078 <printTemplate+0x2ac>)
 8000e20:	2107      	movs	r1, #7
 8000e22:	2002      	movs	r0, #2
 8000e24:	f006 feb0 	bl	8007b88 <lcd_print>
		lcd_print(2, 10, "5");
 8000e28:	4a94      	ldr	r2, [pc, #592]	; (800107c <printTemplate+0x2b0>)
 8000e2a:	210a      	movs	r1, #10
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f006 feab 	bl	8007b88 <lcd_print>
		lcd_print(2, 11, "6");
 8000e32:	4a93      	ldr	r2, [pc, #588]	; (8001080 <printTemplate+0x2b4>)
 8000e34:	210b      	movs	r1, #11
 8000e36:	2002      	movs	r0, #2
 8000e38:	f006 fea6 	bl	8007b88 <lcd_print>
		lcd_print(2, 12, "7");
 8000e3c:	4a91      	ldr	r2, [pc, #580]	; (8001084 <printTemplate+0x2b8>)
 8000e3e:	210c      	movs	r1, #12
 8000e40:	2002      	movs	r0, #2
 8000e42:	f006 fea1 	bl	8007b88 <lcd_print>
		lcd_print(2, 13, "8");
 8000e46:	4a90      	ldr	r2, [pc, #576]	; (8001088 <printTemplate+0x2bc>)
 8000e48:	210d      	movs	r1, #13
 8000e4a:	2002      	movs	r0, #2
 8000e4c:	f006 fe9c 	bl	8007b88 <lcd_print>
		lcd_print(2, 14, "9");
 8000e50:	4a8e      	ldr	r2, [pc, #568]	; (800108c <printTemplate+0x2c0>)
 8000e52:	210e      	movs	r1, #14
 8000e54:	2002      	movs	r0, #2
 8000e56:	f006 fe97 	bl	8007b88 <lcd_print>
		lcd_print(1, 5, machineID);
 8000e5a:	4a8d      	ldr	r2, [pc, #564]	; (8001090 <printTemplate+0x2c4>)
 8000e5c:	2105      	movs	r1, #5
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f006 fe92 	bl	8007b88 <lcd_print>
		lcd_gotoxy(2, 3);
 8000e64:	2103      	movs	r1, #3
 8000e66:	2002      	movs	r0, #2
 8000e68:	f006 fe6f 	bl	8007b4a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e6c:	e0f5      	b.n	800105a <printTemplate+0x28e>
	} else if(type == 2) {
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d178      	bne.n	8000f66 <printTemplate+0x19a>
		if(page == 1) {
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d114      	bne.n	8000ea4 <printTemplate+0xd8>
			lcd_clear();
 8000e7a:	f006 feb1 	bl	8007be0 <lcd_clear>
			HAL_Delay(100);
 8000e7e:	2064      	movs	r0, #100	; 0x64
 8000e80:	f007 fbd8 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e84:	4a83      	ldr	r2, [pc, #524]	; (8001094 <printTemplate+0x2c8>)
 8000e86:	2101      	movs	r1, #1
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f006 fe7d 	bl	8007b88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e8e:	4a82      	ldr	r2, [pc, #520]	; (8001098 <printTemplate+0x2cc>)
 8000e90:	2107      	movs	r1, #7
 8000e92:	2001      	movs	r0, #1
 8000e94:	f006 fe78 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e98:	4a80      	ldr	r2, [pc, #512]	; (800109c <printTemplate+0x2d0>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f006 fe73 	bl	8007b88 <lcd_print>
}
 8000ea2:	e0da      	b.n	800105a <printTemplate+0x28e>
		} else if(page == 2) {
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d114      	bne.n	8000ed4 <printTemplate+0x108>
			lcd_clear();
 8000eaa:	f006 fe99 	bl	8007be0 <lcd_clear>
			HAL_Delay(100);
 8000eae:	2064      	movs	r0, #100	; 0x64
 8000eb0:	f007 fbc0 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000eb4:	4a77      	ldr	r2, [pc, #476]	; (8001094 <printTemplate+0x2c8>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f006 fe65 	bl	8007b88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ebe:	4a76      	ldr	r2, [pc, #472]	; (8001098 <printTemplate+0x2cc>)
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f006 fe60 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ec8:	4a75      	ldr	r2, [pc, #468]	; (80010a0 <printTemplate+0x2d4>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f006 fe5b 	bl	8007b88 <lcd_print>
}
 8000ed2:	e0c2      	b.n	800105a <printTemplate+0x28e>
		} else if(page == 3) {
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d114      	bne.n	8000f04 <printTemplate+0x138>
			lcd_clear();
 8000eda:	f006 fe81 	bl	8007be0 <lcd_clear>
			HAL_Delay(100);
 8000ede:	2064      	movs	r0, #100	; 0x64
 8000ee0:	f007 fba8 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ee4:	4a6b      	ldr	r2, [pc, #428]	; (8001094 <printTemplate+0x2c8>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f006 fe4d 	bl	8007b88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000eee:	4a6a      	ldr	r2, [pc, #424]	; (8001098 <printTemplate+0x2cc>)
 8000ef0:	2107      	movs	r1, #7
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f006 fe48 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000ef8:	4a6a      	ldr	r2, [pc, #424]	; (80010a4 <printTemplate+0x2d8>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	2002      	movs	r0, #2
 8000efe:	f006 fe43 	bl	8007b88 <lcd_print>
}
 8000f02:	e0aa      	b.n	800105a <printTemplate+0x28e>
		} else if(page == 4) {
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d114      	bne.n	8000f34 <printTemplate+0x168>
			lcd_clear();
 8000f0a:	f006 fe69 	bl	8007be0 <lcd_clear>
			HAL_Delay(100);
 8000f0e:	2064      	movs	r0, #100	; 0x64
 8000f10:	f007 fb90 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f14:	4a5f      	ldr	r2, [pc, #380]	; (8001094 <printTemplate+0x2c8>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f006 fe35 	bl	8007b88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f1e:	4a5e      	ldr	r2, [pc, #376]	; (8001098 <printTemplate+0x2cc>)
 8000f20:	2107      	movs	r1, #7
 8000f22:	2001      	movs	r0, #1
 8000f24:	f006 fe30 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f28:	4a5f      	ldr	r2, [pc, #380]	; (80010a8 <printTemplate+0x2dc>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f006 fe2b 	bl	8007b88 <lcd_print>
}
 8000f32:	e092      	b.n	800105a <printTemplate+0x28e>
		} else if(page == 5) {
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b05      	cmp	r3, #5
 8000f38:	f040 808f 	bne.w	800105a <printTemplate+0x28e>
			lcd_clear();
 8000f3c:	f006 fe50 	bl	8007be0 <lcd_clear>
			HAL_Delay(100);
 8000f40:	2064      	movs	r0, #100	; 0x64
 8000f42:	f007 fb77 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f46:	4a53      	ldr	r2, [pc, #332]	; (8001094 <printTemplate+0x2c8>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f006 fe1c 	bl	8007b88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f50:	4a51      	ldr	r2, [pc, #324]	; (8001098 <printTemplate+0x2cc>)
 8000f52:	2107      	movs	r1, #7
 8000f54:	2001      	movs	r0, #1
 8000f56:	f006 fe17 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f5a:	4a54      	ldr	r2, [pc, #336]	; (80010ac <printTemplate+0x2e0>)
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f006 fe12 	bl	8007b88 <lcd_print>
}
 8000f64:	e079      	b.n	800105a <printTemplate+0x28e>
	} else if(type == 3) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d176      	bne.n	800105a <printTemplate+0x28e>
		if(page == 1) {
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d114      	bne.n	8000f9c <printTemplate+0x1d0>
			lcd_clear();
 8000f72:	f006 fe35 	bl	8007be0 <lcd_clear>
			HAL_Delay(100);
 8000f76:	2064      	movs	r0, #100	; 0x64
 8000f78:	f007 fb5c 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f7c:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <printTemplate+0x2e4>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2001      	movs	r0, #1
 8000f82:	f006 fe01 	bl	8007b88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f86:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <printTemplate+0x2e8>)
 8000f88:	2107      	movs	r1, #7
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f006 fdfc 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f90:	4a42      	ldr	r2, [pc, #264]	; (800109c <printTemplate+0x2d0>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	2002      	movs	r0, #2
 8000f96:	f006 fdf7 	bl	8007b88 <lcd_print>
}
 8000f9a:	e05e      	b.n	800105a <printTemplate+0x28e>
		} else if(page == 2) {
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d114      	bne.n	8000fcc <printTemplate+0x200>
			lcd_clear();
 8000fa2:	f006 fe1d 	bl	8007be0 <lcd_clear>
			HAL_Delay(100);
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f007 fb44 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fac:	4a40      	ldr	r2, [pc, #256]	; (80010b0 <printTemplate+0x2e4>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f006 fde9 	bl	8007b88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fb6:	4a3f      	ldr	r2, [pc, #252]	; (80010b4 <printTemplate+0x2e8>)
 8000fb8:	2107      	movs	r1, #7
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f006 fde4 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fc0:	4a37      	ldr	r2, [pc, #220]	; (80010a0 <printTemplate+0x2d4>)
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f006 fddf 	bl	8007b88 <lcd_print>
}
 8000fca:	e046      	b.n	800105a <printTemplate+0x28e>
		} else if(page == 3) {
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d114      	bne.n	8000ffc <printTemplate+0x230>
			lcd_clear();
 8000fd2:	f006 fe05 	bl	8007be0 <lcd_clear>
			HAL_Delay(100);
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	f007 fb2c 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fdc:	4a34      	ldr	r2, [pc, #208]	; (80010b0 <printTemplate+0x2e4>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f006 fdd1 	bl	8007b88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fe6:	4a33      	ldr	r2, [pc, #204]	; (80010b4 <printTemplate+0x2e8>)
 8000fe8:	2107      	movs	r1, #7
 8000fea:	2001      	movs	r0, #1
 8000fec:	f006 fdcc 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000ff0:	4a2c      	ldr	r2, [pc, #176]	; (80010a4 <printTemplate+0x2d8>)
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f006 fdc7 	bl	8007b88 <lcd_print>
}
 8000ffa:	e02e      	b.n	800105a <printTemplate+0x28e>
		} else if(page == 4) {
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d114      	bne.n	800102c <printTemplate+0x260>
			lcd_clear();
 8001002:	f006 fded 	bl	8007be0 <lcd_clear>
			HAL_Delay(100);
 8001006:	2064      	movs	r0, #100	; 0x64
 8001008:	f007 fb14 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800100c:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <printTemplate+0x2e4>)
 800100e:	2101      	movs	r1, #1
 8001010:	2001      	movs	r0, #1
 8001012:	f006 fdb9 	bl	8007b88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001016:	4a27      	ldr	r2, [pc, #156]	; (80010b4 <printTemplate+0x2e8>)
 8001018:	2107      	movs	r1, #7
 800101a:	2001      	movs	r0, #1
 800101c:	f006 fdb4 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <printTemplate+0x2dc>)
 8001022:	2101      	movs	r1, #1
 8001024:	2002      	movs	r0, #2
 8001026:	f006 fdaf 	bl	8007b88 <lcd_print>
}
 800102a:	e016      	b.n	800105a <printTemplate+0x28e>
		} else if(page == 5) {
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d113      	bne.n	800105a <printTemplate+0x28e>
			lcd_clear();
 8001032:	f006 fdd5 	bl	8007be0 <lcd_clear>
			HAL_Delay(100);
 8001036:	2064      	movs	r0, #100	; 0x64
 8001038:	f007 fafc 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800103c:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <printTemplate+0x2e4>)
 800103e:	2101      	movs	r1, #1
 8001040:	2001      	movs	r0, #1
 8001042:	f006 fda1 	bl	8007b88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001046:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <printTemplate+0x2e8>)
 8001048:	2107      	movs	r1, #7
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fd9c 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001050:	4a16      	ldr	r2, [pc, #88]	; (80010ac <printTemplate+0x2e0>)
 8001052:	2101      	movs	r1, #1
 8001054:	2002      	movs	r0, #2
 8001056:	f006 fd97 	bl	8007b88 <lcd_print>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	0800ce30 	.word	0x0800ce30
 8001068:	0800ce38 	.word	0x0800ce38
 800106c:	0800ce3c 	.word	0x0800ce3c
 8001070:	0800ce40 	.word	0x0800ce40
 8001074:	0800ce44 	.word	0x0800ce44
 8001078:	0800ce48 	.word	0x0800ce48
 800107c:	0800ce4c 	.word	0x0800ce4c
 8001080:	0800ce50 	.word	0x0800ce50
 8001084:	0800ce54 	.word	0x0800ce54
 8001088:	0800ce58 	.word	0x0800ce58
 800108c:	0800ce5c 	.word	0x0800ce5c
 8001090:	20000194 	.word	0x20000194
 8001094:	0800ce60 	.word	0x0800ce60
 8001098:	200001a0 	.word	0x200001a0
 800109c:	0800ce68 	.word	0x0800ce68
 80010a0:	0800ce7c 	.word	0x0800ce7c
 80010a4:	0800ce90 	.word	0x0800ce90
 80010a8:	0800cea4 	.word	0x0800cea4
 80010ac:	0800ceb8 	.word	0x0800ceb8
 80010b0:	0800cecc 	.word	0x0800cecc
 80010b4:	200001b4 	.word	0x200001b4

080010b8 <checkSlideVal>:

int checkSlideVal(int state) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d111      	bne.n	80010ea <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80010c6:	2101      	movs	r1, #1
 80010c8:	4813      	ldr	r0, [pc, #76]	; (8001118 <checkSlideVal+0x60>)
 80010ca:	f008 f883 	bl	80091d4 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <checkSlideVal+0x20>
			return 34;
 80010d4:	2322      	movs	r3, #34	; 0x22
 80010d6:	e01b      	b.n	8001110 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010d8:	2108      	movs	r1, #8
 80010da:	4810      	ldr	r0, [pc, #64]	; (800111c <checkSlideVal+0x64>)
 80010dc:	f008 f87a 	bl	80091d4 <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d113      	bne.n	800110e <checkSlideVal+0x56>
			return 32;
 80010e6:	2320      	movs	r3, #32
 80010e8:	e012      	b.n	8001110 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80010ea:	2101      	movs	r1, #1
 80010ec:	480a      	ldr	r0, [pc, #40]	; (8001118 <checkSlideVal+0x60>)
 80010ee:	f008 f871 	bl	80091d4 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <checkSlideVal+0x44>
			return 35;
 80010f8:	2323      	movs	r3, #35	; 0x23
 80010fa:	e009      	b.n	8001110 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010fc:	2108      	movs	r1, #8
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <checkSlideVal+0x64>)
 8001100:	f008 f868 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <checkSlideVal+0x56>
			return 33;
 800110a:	2321      	movs	r3, #33	; 0x21
 800110c:	e000      	b.n	8001110 <checkSlideVal+0x58>
		}
	}
	return 0;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40010800 	.word	0x40010800
 800111c:	40011000 	.word	0x40011000

08001120 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f7ff f878 	bl	8000224 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 800113c:	e08a      	b.n	8001254 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	f7ff ffba 	bl	80010b8 <checkSlideVal>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	dd07      	ble.n	800115a <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800114a:	6838      	ldr	r0, [r7, #0]
 800114c:	f7ff ffb4 	bl	80010b8 <checkSlideVal>
 8001150:	4603      	mov	r3, r0
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b44      	ldr	r3, [pc, #272]	; (8001268 <slideText+0x148>)
 8001156:	701a      	strb	r2, [r3, #0]
			break;
 8001158:	e081      	b.n	800125e <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	e075      	b.n	800124c <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f7ff ffa9 	bl	80010b8 <checkSlideVal>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	dd09      	ble.n	8001180 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 800116c:	6838      	ldr	r0, [r7, #0]
 800116e:	f7ff ffa3 	bl	80010b8 <checkSlideVal>
 8001172:	4603      	mov	r3, r0
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <slideText+0x148>)
 8001178:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800117e:	e069      	b.n	8001254 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	4413      	add	r3, r2
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	e029      	b.n	80011de <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800118a:	6838      	ldr	r0, [r7, #0]
 800118c:	f7ff ff94 	bl	80010b8 <checkSlideVal>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd0b      	ble.n	80011ae <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f7ff ff8e 	bl	80010b8 <checkSlideVal>
 800119c:	4603      	mov	r3, r0
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <slideText+0x148>)
 80011a2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80011ac:	e01d      	b.n	80011ea <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	b2d9      	uxtb	r1, r3
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	f006 fcf0 	bl	8007bb2 <lcd_print_char>
				HAL_Delay(30);
 80011d2:	201e      	movs	r0, #30
 80011d4:	f007 fa2e 	bl	8008634 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	3301      	adds	r3, #1
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	7dfa      	ldrb	r2, [r7, #23]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	4413      	add	r3, r2
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbcf      	blt.n	800118a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	e023      	b.n	800123a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80011f2:	6838      	ldr	r0, [r7, #0]
 80011f4:	f7ff ff60 	bl	80010b8 <checkSlideVal>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd0b      	ble.n	8001216 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80011fe:	6838      	ldr	r0, [r7, #0]
 8001200:	f7ff ff5a 	bl	80010b8 <checkSlideVal>
 8001204:	4603      	mov	r3, r0
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <slideText+0x148>)
 800120a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001214:	e017      	b.n	8001246 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	429a      	cmp	r2, r3
 800121c:	db0a      	blt.n	8001234 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	b2d1      	uxtb	r1, r2
 8001226:	2220      	movs	r2, #32
 8001228:	4618      	mov	r0, r3
 800122a:	f006 fcc2 	bl	8007bb2 <lcd_print_char>
			    	 HAL_Delay(30);
 800122e:	201e      	movs	r0, #30
 8001230:	f007 fa00 	bl	8008634 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	3b01      	subs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	7dfa      	ldrb	r2, [r7, #23]
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	429a      	cmp	r2, r3
 8001244:	dad5      	bge.n	80011f2 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	3301      	adds	r3, #1
 800124a:	623b      	str	r3, [r7, #32]
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	6a3a      	ldr	r2, [r7, #32]
 8001250:	429a      	cmp	r2, r3
 8001252:	db85      	blt.n	8001160 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	2b01      	cmp	r3, #1
 8001258:	f43f af71 	beq.w	800113e <slideText+0x1e>
			     }
			}
		}
	}
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	; 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000218 	.word	0x20000218

0800126c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001270:	f3bf 8f4f 	dsb	sy
}
 8001274:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <__NVIC_SystemReset+0x24>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800127e:	4904      	ldr	r1, [pc, #16]	; (8001290 <__NVIC_SystemReset+0x24>)
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_SystemReset+0x28>)
 8001282:	4313      	orrs	r3, r2
 8001284:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001286:	f3bf 8f4f 	dsb	sy
}
 800128a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <__NVIC_SystemReset+0x20>
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	05fa0004 	.word	0x05fa0004

08001298 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800129e:	2101      	movs	r1, #1
 80012a0:	488e      	ldr	r0, [pc, #568]	; (80014dc <menu+0x244>)
 80012a2:	f007 ff97 	bl	80091d4 <HAL_GPIO_ReadPin>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	f040 808e 	bne.w	80013ca <menu+0x132>
 80012ae:	4b8c      	ldr	r3, [pc, #560]	; (80014e0 <menu+0x248>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 8086 	beq.w	80013ca <menu+0x132>
		menuSayac = menuSayac+1;
 80012be:	4b89      	ldr	r3, [pc, #548]	; (80014e4 <menu+0x24c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b87      	ldr	r3, [pc, #540]	; (80014e4 <menu+0x24c>)
 80012c8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80012ca:	4b86      	ldr	r3, [pc, #536]	; (80014e4 <menu+0x24c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b24      	cmp	r3, #36	; 0x24
 80012d0:	d102      	bne.n	80012d8 <menu+0x40>
			menuSayac = 1;
 80012d2:	4b84      	ldr	r3, [pc, #528]	; (80014e4 <menu+0x24c>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80012d8:	4b82      	ldr	r3, [pc, #520]	; (80014e4 <menu+0x24c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b12      	cmp	r3, #18
 80012de:	d106      	bne.n	80012ee <menu+0x56>
 80012e0:	4b81      	ldr	r3, [pc, #516]	; (80014e8 <menu+0x250>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <menu+0x56>
			menuSayac = 21;
 80012e8:	4b7e      	ldr	r3, [pc, #504]	; (80014e4 <menu+0x24c>)
 80012ea:	2215      	movs	r2, #21
 80012ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80012ee:	4b7d      	ldr	r3, [pc, #500]	; (80014e4 <menu+0x24c>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d106      	bne.n	8001304 <menu+0x6c>
 80012f6:	4b7d      	ldr	r3, [pc, #500]	; (80014ec <menu+0x254>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <menu+0x6c>
			menuSayac = 16;
 80012fe:	4b79      	ldr	r3, [pc, #484]	; (80014e4 <menu+0x24c>)
 8001300:	2210      	movs	r2, #16
 8001302:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001304:	4b77      	ldr	r3, [pc, #476]	; (80014e4 <menu+0x24c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b0d      	cmp	r3, #13
 800130a:	d106      	bne.n	800131a <menu+0x82>
 800130c:	4b77      	ldr	r3, [pc, #476]	; (80014ec <menu+0x254>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d102      	bne.n	800131a <menu+0x82>
			menuSayac = 16;
 8001314:	4b73      	ldr	r3, [pc, #460]	; (80014e4 <menu+0x24c>)
 8001316:	2210      	movs	r2, #16
 8001318:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800131a:	4b72      	ldr	r3, [pc, #456]	; (80014e4 <menu+0x24c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b09      	cmp	r3, #9
 8001320:	d106      	bne.n	8001330 <menu+0x98>
 8001322:	4b72      	ldr	r3, [pc, #456]	; (80014ec <menu+0x254>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d102      	bne.n	8001330 <menu+0x98>
			menuSayac = 13;
 800132a:	4b6e      	ldr	r3, [pc, #440]	; (80014e4 <menu+0x24c>)
 800132c:	220d      	movs	r2, #13
 800132e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001330:	4b6c      	ldr	r3, [pc, #432]	; (80014e4 <menu+0x24c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b0a      	cmp	r3, #10
 8001336:	d10a      	bne.n	800134e <menu+0xb6>
 8001338:	4b6d      	ldr	r3, [pc, #436]	; (80014f0 <menu+0x258>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d003      	beq.n	8001348 <menu+0xb0>
 8001340:	4b6b      	ldr	r3, [pc, #428]	; (80014f0 <menu+0x258>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d102      	bne.n	800134e <menu+0xb6>
			menuSayac = 11;
 8001348:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <menu+0x24c>)
 800134a:	220b      	movs	r2, #11
 800134c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800134e:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <menu+0x24c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b0c      	cmp	r3, #12
 8001354:	d10e      	bne.n	8001374 <menu+0xdc>
 8001356:	4b67      	ldr	r3, [pc, #412]	; (80014f4 <menu+0x25c>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d003      	beq.n	8001366 <menu+0xce>
 800135e:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <menu+0x25c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d106      	bne.n	8001374 <menu+0xdc>
 8001366:	4b61      	ldr	r3, [pc, #388]	; (80014ec <menu+0x254>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d102      	bne.n	8001374 <menu+0xdc>
			menuSayac = 16;
 800136e:	4b5d      	ldr	r3, [pc, #372]	; (80014e4 <menu+0x24c>)
 8001370:	2210      	movs	r2, #16
 8001372:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001374:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <menu+0x24c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d10e      	bne.n	800139a <menu+0x102>
 800137c:	4b5d      	ldr	r3, [pc, #372]	; (80014f4 <menu+0x25c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d003      	beq.n	800138c <menu+0xf4>
 8001384:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <menu+0x25c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d106      	bne.n	800139a <menu+0x102>
 800138c:	4b57      	ldr	r3, [pc, #348]	; (80014ec <menu+0x254>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b03      	cmp	r3, #3
 8001392:	d102      	bne.n	800139a <menu+0x102>
			menuSayac = 13;
 8001394:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <menu+0x24c>)
 8001396:	220d      	movs	r2, #13
 8001398:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800139a:	4b52      	ldr	r3, [pc, #328]	; (80014e4 <menu+0x24c>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	d106      	bne.n	80013b0 <menu+0x118>
 80013a2:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <menu+0x260>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <menu+0x118>
			menuSayac = 16;
 80013aa:	4b4e      	ldr	r3, [pc, #312]	; (80014e4 <menu+0x24c>)
 80013ac:	2210      	movs	r2, #16
 80013ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80013b0:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <menu+0x24c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b18      	cmp	r3, #24
 80013b6:	d106      	bne.n	80013c6 <menu+0x12e>
 80013b8:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <menu+0x250>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <menu+0x12e>
			menuSayac = 26;
 80013c0:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <menu+0x24c>)
 80013c2:	221a      	movs	r2, #26
 80013c4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013c6:	f003 fb33 	bl	8004a30 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013ca:	2108      	movs	r1, #8
 80013cc:	484b      	ldr	r0, [pc, #300]	; (80014fc <menu+0x264>)
 80013ce:	f007 ff01 	bl	80091d4 <HAL_GPIO_ReadPin>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d175      	bne.n	80014c4 <menu+0x22c>
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <menu+0x248>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	f083 0301 	eor.w	r3, r3, #1
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d06e      	beq.n	80014c4 <menu+0x22c>
		if (menuSayac <= 1) {
 80013e6:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <menu+0x24c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d802      	bhi.n	80013f4 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <menu+0x24c>)
 80013f0:	2224      	movs	r2, #36	; 0x24
 80013f2:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80013f4:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <menu+0x24c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <menu+0x24c>)
 80013fe:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001400:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <menu+0x24c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b14      	cmp	r3, #20
 8001406:	d106      	bne.n	8001416 <menu+0x17e>
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <menu+0x250>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <menu+0x17e>
			menuSayac = 17;
 8001410:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <menu+0x24c>)
 8001412:	2211      	movs	r2, #17
 8001414:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <menu+0x24c>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b0f      	cmp	r3, #15
 800141c:	d106      	bne.n	800142c <menu+0x194>
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <menu+0x254>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <menu+0x194>
			menuSayac = 7;
 8001426:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <menu+0x24c>)
 8001428:	2207      	movs	r2, #7
 800142a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800142c:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <menu+0x24c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d106      	bne.n	8001442 <menu+0x1aa>
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <menu+0x254>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d102      	bne.n	8001442 <menu+0x1aa>
			menuSayac = 12;
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <menu+0x24c>)
 800143e:	220c      	movs	r2, #12
 8001440:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <menu+0x24c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b0c      	cmp	r3, #12
 8001448:	d106      	bne.n	8001458 <menu+0x1c0>
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <menu+0x254>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d102      	bne.n	8001458 <menu+0x1c0>
			menuSayac = 8;
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <menu+0x24c>)
 8001454:	2208      	movs	r2, #8
 8001456:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <menu+0x24c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b0a      	cmp	r3, #10
 800145e:	d10a      	bne.n	8001476 <menu+0x1de>
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <menu+0x258>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d003      	beq.n	8001470 <menu+0x1d8>
 8001468:	4b21      	ldr	r3, [pc, #132]	; (80014f0 <menu+0x258>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d102      	bne.n	8001476 <menu+0x1de>
			menuSayac = 9;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <menu+0x24c>)
 8001472:	2209      	movs	r2, #9
 8001474:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <menu+0x24c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d10a      	bne.n	8001494 <menu+0x1fc>
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <menu+0x25c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d003      	beq.n	800148e <menu+0x1f6>
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <menu+0x25c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d102      	bne.n	8001494 <menu+0x1fc>
			menuSayac = 11;
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <menu+0x24c>)
 8001490:	220b      	movs	r2, #11
 8001492:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <menu+0x24c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d106      	bne.n	80014aa <menu+0x212>
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <menu+0x260>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d102      	bne.n	80014aa <menu+0x212>
			menuSayac = 14;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <menu+0x24c>)
 80014a6:	220e      	movs	r2, #14
 80014a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <menu+0x24c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b19      	cmp	r3, #25
 80014b0:	d106      	bne.n	80014c0 <menu+0x228>
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <menu+0x250>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <menu+0x228>
			menuSayac = 23;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <menu+0x24c>)
 80014bc:	2217      	movs	r2, #23
 80014be:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014c0:	f003 fab6 	bl	8004a30 <bekle>
	}

	if (menuSayac == 0) {
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <menu+0x24c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d133      	bne.n	8001534 <menu+0x29c>
		if(dilSecim == 0) {
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <menu+0x268>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d121      	bne.n	8001518 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <menu+0x26c>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	2001      	movs	r0, #1
 80014da:	e015      	b.n	8001508 <menu+0x270>
 80014dc:	40010800 	.word	0x40010800
 80014e0:	20000247 	.word	0x20000247
 80014e4:	20000218 	.word	0x20000218
 80014e8:	20000227 	.word	0x20000227
 80014ec:	20000220 	.word	0x20000220
 80014f0:	20000221 	.word	0x20000221
 80014f4:	20000222 	.word	0x20000222
 80014f8:	20000223 	.word	0x20000223
 80014fc:	40011000 	.word	0x40011000
 8001500:	20000239 	.word	0x20000239
 8001504:	0800ced4 	.word	0x0800ced4
 8001508:	f006 fb3e 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 800150c:	4a94      	ldr	r2, [pc, #592]	; (8001760 <menu+0x4c8>)
 800150e:	2101      	movs	r1, #1
 8001510:	2002      	movs	r0, #2
 8001512:	f006 fb39 	bl	8007b88 <lcd_print>
 8001516:	e00d      	b.n	8001534 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001518:	4b92      	ldr	r3, [pc, #584]	; (8001764 <menu+0x4cc>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d109      	bne.n	8001534 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001520:	4a91      	ldr	r2, [pc, #580]	; (8001768 <menu+0x4d0>)
 8001522:	2101      	movs	r1, #1
 8001524:	2001      	movs	r0, #1
 8001526:	f006 fb2f 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800152a:	4a90      	ldr	r2, [pc, #576]	; (800176c <menu+0x4d4>)
 800152c:	2101      	movs	r1, #1
 800152e:	2002      	movs	r0, #2
 8001530:	f006 fb2a 	bl	8007b88 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001534:	4b8e      	ldr	r3, [pc, #568]	; (8001770 <menu+0x4d8>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	f040 82b5 	bne.w	8001aa8 <menu+0x810>
		if(dilSecim == 0) {
 800153e:	4b89      	ldr	r3, [pc, #548]	; (8001764 <menu+0x4cc>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d105      	bne.n	8001552 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001546:	4a8b      	ldr	r2, [pc, #556]	; (8001774 <menu+0x4dc>)
 8001548:	2101      	movs	r1, #1
 800154a:	2001      	movs	r0, #1
 800154c:	f006 fb1c 	bl	8007b88 <lcd_print>
 8001550:	e008      	b.n	8001564 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8001552:	4b84      	ldr	r3, [pc, #528]	; (8001764 <menu+0x4cc>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d104      	bne.n	8001564 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800155a:	4a87      	ldr	r2, [pc, #540]	; (8001778 <menu+0x4e0>)
 800155c:	2101      	movs	r1, #1
 800155e:	2001      	movs	r0, #1
 8001560:	f006 fb12 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001564:	4b85      	ldr	r3, [pc, #532]	; (800177c <menu+0x4e4>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d123      	bne.n	80015b4 <menu+0x31c>
			if(dilSecim == 0) {
 800156c:	4b7d      	ldr	r3, [pc, #500]	; (8001764 <menu+0x4cc>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001574:	4a82      	ldr	r2, [pc, #520]	; (8001780 <menu+0x4e8>)
 8001576:	2101      	movs	r1, #1
 8001578:	2002      	movs	r0, #2
 800157a:	f006 fb05 	bl	8007b88 <lcd_print>
 800157e:	e008      	b.n	8001592 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001580:	4b78      	ldr	r3, [pc, #480]	; (8001764 <menu+0x4cc>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d104      	bne.n	8001592 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001588:	4a7e      	ldr	r2, [pc, #504]	; (8001784 <menu+0x4ec>)
 800158a:	2101      	movs	r1, #1
 800158c:	2002      	movs	r0, #2
 800158e:	f006 fafb 	bl	8007b88 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001592:	4a7d      	ldr	r2, [pc, #500]	; (8001788 <menu+0x4f0>)
 8001594:	210f      	movs	r1, #15
 8001596:	2002      	movs	r0, #2
 8001598:	f006 faf6 	bl	8007b88 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800159c:	4b7b      	ldr	r3, [pc, #492]	; (800178c <menu+0x4f4>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	220a      	movs	r2, #10
 80015a2:	497b      	ldr	r1, [pc, #492]	; (8001790 <menu+0x4f8>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00a fe41 	bl	800c22c <itoa>
			lcd_print(2, 14, snum);
 80015aa:	4a79      	ldr	r2, [pc, #484]	; (8001790 <menu+0x4f8>)
 80015ac:	210e      	movs	r1, #14
 80015ae:	2002      	movs	r0, #2
 80015b0:	f006 faea 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80015b4:	4b71      	ldr	r3, [pc, #452]	; (800177c <menu+0x4e4>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d123      	bne.n	8001604 <menu+0x36c>
			if(dilSecim == 0) {
 80015bc:	4b69      	ldr	r3, [pc, #420]	; (8001764 <menu+0x4cc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80015c4:	4a73      	ldr	r2, [pc, #460]	; (8001794 <menu+0x4fc>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	2002      	movs	r0, #2
 80015ca:	f006 fadd 	bl	8007b88 <lcd_print>
 80015ce:	e008      	b.n	80015e2 <menu+0x34a>
			} else if(dilSecim == 1) {
 80015d0:	4b64      	ldr	r3, [pc, #400]	; (8001764 <menu+0x4cc>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d104      	bne.n	80015e2 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80015d8:	4a6f      	ldr	r2, [pc, #444]	; (8001798 <menu+0x500>)
 80015da:	2101      	movs	r1, #1
 80015dc:	2002      	movs	r0, #2
 80015de:	f006 fad3 	bl	8007b88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015e2:	4a6e      	ldr	r2, [pc, #440]	; (800179c <menu+0x504>)
 80015e4:	210f      	movs	r1, #15
 80015e6:	2002      	movs	r0, #2
 80015e8:	f006 face 	bl	8007b88 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80015ec:	4b6c      	ldr	r3, [pc, #432]	; (80017a0 <menu+0x508>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	220a      	movs	r2, #10
 80015f2:	4967      	ldr	r1, [pc, #412]	; (8001790 <menu+0x4f8>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f00a fe19 	bl	800c22c <itoa>
			lcd_print(2, 14, snum);
 80015fa:	4a65      	ldr	r2, [pc, #404]	; (8001790 <menu+0x4f8>)
 80015fc:	210e      	movs	r1, #14
 80015fe:	2002      	movs	r0, #2
 8001600:	f006 fac2 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001604:	4b5d      	ldr	r3, [pc, #372]	; (800177c <menu+0x4e4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d123      	bne.n	8001654 <menu+0x3bc>
			if(dilSecim == 0) {
 800160c:	4b55      	ldr	r3, [pc, #340]	; (8001764 <menu+0x4cc>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001614:	4a63      	ldr	r2, [pc, #396]	; (80017a4 <menu+0x50c>)
 8001616:	2101      	movs	r1, #1
 8001618:	2002      	movs	r0, #2
 800161a:	f006 fab5 	bl	8007b88 <lcd_print>
 800161e:	e008      	b.n	8001632 <menu+0x39a>
			} else if(dilSecim == 1) {
 8001620:	4b50      	ldr	r3, [pc, #320]	; (8001764 <menu+0x4cc>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d104      	bne.n	8001632 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001628:	4a5f      	ldr	r2, [pc, #380]	; (80017a8 <menu+0x510>)
 800162a:	2101      	movs	r1, #1
 800162c:	2002      	movs	r0, #2
 800162e:	f006 faab 	bl	8007b88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001632:	4a5a      	ldr	r2, [pc, #360]	; (800179c <menu+0x504>)
 8001634:	210f      	movs	r1, #15
 8001636:	2002      	movs	r0, #2
 8001638:	f006 faa6 	bl	8007b88 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800163c:	4b5b      	ldr	r3, [pc, #364]	; (80017ac <menu+0x514>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	220a      	movs	r2, #10
 8001642:	4953      	ldr	r1, [pc, #332]	; (8001790 <menu+0x4f8>)
 8001644:	4618      	mov	r0, r3
 8001646:	f00a fdf1 	bl	800c22c <itoa>
			lcd_print(2, 14, snum);
 800164a:	4a51      	ldr	r2, [pc, #324]	; (8001790 <menu+0x4f8>)
 800164c:	210e      	movs	r1, #14
 800164e:	2002      	movs	r0, #2
 8001650:	f006 fa9a 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001654:	4b49      	ldr	r3, [pc, #292]	; (800177c <menu+0x4e4>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b03      	cmp	r3, #3
 800165a:	d123      	bne.n	80016a4 <menu+0x40c>
			if(dilSecim == 0) {
 800165c:	4b41      	ldr	r3, [pc, #260]	; (8001764 <menu+0x4cc>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001664:	4a52      	ldr	r2, [pc, #328]	; (80017b0 <menu+0x518>)
 8001666:	2101      	movs	r1, #1
 8001668:	2002      	movs	r0, #2
 800166a:	f006 fa8d 	bl	8007b88 <lcd_print>
 800166e:	e008      	b.n	8001682 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001670:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <menu+0x4cc>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d104      	bne.n	8001682 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001678:	4a4e      	ldr	r2, [pc, #312]	; (80017b4 <menu+0x51c>)
 800167a:	2101      	movs	r1, #1
 800167c:	2002      	movs	r0, #2
 800167e:	f006 fa83 	bl	8007b88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001682:	4a46      	ldr	r2, [pc, #280]	; (800179c <menu+0x504>)
 8001684:	210f      	movs	r1, #15
 8001686:	2002      	movs	r0, #2
 8001688:	f006 fa7e 	bl	8007b88 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800168c:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <menu+0x520>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	220a      	movs	r2, #10
 8001692:	493f      	ldr	r1, [pc, #252]	; (8001790 <menu+0x4f8>)
 8001694:	4618      	mov	r0, r3
 8001696:	f00a fdc9 	bl	800c22c <itoa>
			lcd_print(2, 14, snum);
 800169a:	4a3d      	ldr	r2, [pc, #244]	; (8001790 <menu+0x4f8>)
 800169c:	210e      	movs	r1, #14
 800169e:	2002      	movs	r0, #2
 80016a0:	f006 fa72 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <menu+0x4e4>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d123      	bne.n	80016f4 <menu+0x45c>
			if(dilSecim == 0) {
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <menu+0x4cc>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80016b4:	4a41      	ldr	r2, [pc, #260]	; (80017bc <menu+0x524>)
 80016b6:	2101      	movs	r1, #1
 80016b8:	2002      	movs	r0, #2
 80016ba:	f006 fa65 	bl	8007b88 <lcd_print>
 80016be:	e008      	b.n	80016d2 <menu+0x43a>
			} else if(dilSecim == 1) {
 80016c0:	4b28      	ldr	r3, [pc, #160]	; (8001764 <menu+0x4cc>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d104      	bne.n	80016d2 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80016c8:	4a3d      	ldr	r2, [pc, #244]	; (80017c0 <menu+0x528>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	2002      	movs	r0, #2
 80016ce:	f006 fa5b 	bl	8007b88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016d2:	4a32      	ldr	r2, [pc, #200]	; (800179c <menu+0x504>)
 80016d4:	210f      	movs	r1, #15
 80016d6:	2002      	movs	r0, #2
 80016d8:	f006 fa56 	bl	8007b88 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80016dc:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <menu+0x52c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	220a      	movs	r2, #10
 80016e2:	492b      	ldr	r1, [pc, #172]	; (8001790 <menu+0x4f8>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00a fda1 	bl	800c22c <itoa>
			lcd_print(2, 14, snum);
 80016ea:	4a29      	ldr	r2, [pc, #164]	; (8001790 <menu+0x4f8>)
 80016ec:	210e      	movs	r1, #14
 80016ee:	2002      	movs	r0, #2
 80016f0:	f006 fa4a 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <menu+0x4e4>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d123      	bne.n	8001744 <menu+0x4ac>
			if(dilSecim == 0) {
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <menu+0x4cc>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001704:	4a30      	ldr	r2, [pc, #192]	; (80017c8 <menu+0x530>)
 8001706:	2101      	movs	r1, #1
 8001708:	2002      	movs	r0, #2
 800170a:	f006 fa3d 	bl	8007b88 <lcd_print>
 800170e:	e008      	b.n	8001722 <menu+0x48a>
			} else if(dilSecim == 1) {
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <menu+0x4cc>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d104      	bne.n	8001722 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001718:	4a2c      	ldr	r2, [pc, #176]	; (80017cc <menu+0x534>)
 800171a:	2101      	movs	r1, #1
 800171c:	2002      	movs	r0, #2
 800171e:	f006 fa33 	bl	8007b88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <menu+0x504>)
 8001724:	210f      	movs	r1, #15
 8001726:	2002      	movs	r0, #2
 8001728:	f006 fa2e 	bl	8007b88 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <menu+0x538>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	220a      	movs	r2, #10
 8001732:	4917      	ldr	r1, [pc, #92]	; (8001790 <menu+0x4f8>)
 8001734:	4618      	mov	r0, r3
 8001736:	f00a fd79 	bl	800c22c <itoa>
			lcd_print(2, 14, snum);
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <menu+0x4f8>)
 800173c:	210e      	movs	r1, #14
 800173e:	2002      	movs	r0, #2
 8001740:	f006 fa22 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <menu+0x4e4>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b06      	cmp	r3, #6
 800174a:	d15f      	bne.n	800180c <menu+0x574>
			if(dilSecim == 0) {
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <menu+0x4cc>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d141      	bne.n	80017d8 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001754:	4a1f      	ldr	r2, [pc, #124]	; (80017d4 <menu+0x53c>)
 8001756:	2101      	movs	r1, #1
 8001758:	2002      	movs	r0, #2
 800175a:	f006 fa15 	bl	8007b88 <lcd_print>
 800175e:	e044      	b.n	80017ea <menu+0x552>
 8001760:	0800cee8 	.word	0x0800cee8
 8001764:	20000239 	.word	0x20000239
 8001768:	0800cefc 	.word	0x0800cefc
 800176c:	0800cf10 	.word	0x0800cf10
 8001770:	20000218 	.word	0x20000218
 8001774:	0800cf24 	.word	0x0800cf24
 8001778:	0800cf38 	.word	0x0800cf38
 800177c:	2000021a 	.word	0x2000021a
 8001780:	0800cf4c 	.word	0x0800cf4c
 8001784:	0800cf5c 	.word	0x0800cf5c
 8001788:	0800cf6c 	.word	0x0800cf6c
 800178c:	2000023a 	.word	0x2000023a
 8001790:	2000018c 	.word	0x2000018c
 8001794:	0800cf70 	.word	0x0800cf70
 8001798:	0800cf80 	.word	0x0800cf80
 800179c:	0800cf90 	.word	0x0800cf90
 80017a0:	2000023b 	.word	0x2000023b
 80017a4:	0800cf94 	.word	0x0800cf94
 80017a8:	0800cfa4 	.word	0x0800cfa4
 80017ac:	2000023c 	.word	0x2000023c
 80017b0:	0800cfb4 	.word	0x0800cfb4
 80017b4:	0800cfc4 	.word	0x0800cfc4
 80017b8:	2000023d 	.word	0x2000023d
 80017bc:	0800cfd4 	.word	0x0800cfd4
 80017c0:	0800cfe4 	.word	0x0800cfe4
 80017c4:	2000023e 	.word	0x2000023e
 80017c8:	0800cff4 	.word	0x0800cff4
 80017cc:	0800d004 	.word	0x0800d004
 80017d0:	2000023f 	.word	0x2000023f
 80017d4:	0800d014 	.word	0x0800d014
			} else if(dilSecim == 1) {
 80017d8:	4b4f      	ldr	r3, [pc, #316]	; (8001918 <menu+0x680>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d104      	bne.n	80017ea <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80017e0:	4a4e      	ldr	r2, [pc, #312]	; (800191c <menu+0x684>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f006 f9cf 	bl	8007b88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017ea:	4a4d      	ldr	r2, [pc, #308]	; (8001920 <menu+0x688>)
 80017ec:	210f      	movs	r1, #15
 80017ee:	2002      	movs	r0, #2
 80017f0:	f006 f9ca 	bl	8007b88 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80017f4:	4b4b      	ldr	r3, [pc, #300]	; (8001924 <menu+0x68c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	220a      	movs	r2, #10
 80017fa:	494b      	ldr	r1, [pc, #300]	; (8001928 <menu+0x690>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00a fd15 	bl	800c22c <itoa>
			lcd_print(2, 14, snum);
 8001802:	4a49      	ldr	r2, [pc, #292]	; (8001928 <menu+0x690>)
 8001804:	210e      	movs	r1, #14
 8001806:	2002      	movs	r0, #2
 8001808:	f006 f9be 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 800180c:	4b47      	ldr	r3, [pc, #284]	; (800192c <menu+0x694>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b07      	cmp	r3, #7
 8001812:	d123      	bne.n	800185c <menu+0x5c4>
			if(dilSecim == 0) {
 8001814:	4b40      	ldr	r3, [pc, #256]	; (8001918 <menu+0x680>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 800181c:	4a44      	ldr	r2, [pc, #272]	; (8001930 <menu+0x698>)
 800181e:	2101      	movs	r1, #1
 8001820:	2002      	movs	r0, #2
 8001822:	f006 f9b1 	bl	8007b88 <lcd_print>
 8001826:	e008      	b.n	800183a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001828:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <menu+0x680>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d104      	bne.n	800183a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001830:	4a40      	ldr	r2, [pc, #256]	; (8001934 <menu+0x69c>)
 8001832:	2101      	movs	r1, #1
 8001834:	2002      	movs	r0, #2
 8001836:	f006 f9a7 	bl	8007b88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800183a:	4a39      	ldr	r2, [pc, #228]	; (8001920 <menu+0x688>)
 800183c:	210f      	movs	r1, #15
 800183e:	2002      	movs	r0, #2
 8001840:	f006 f9a2 	bl	8007b88 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001844:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <menu+0x6a0>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	220a      	movs	r2, #10
 800184a:	4937      	ldr	r1, [pc, #220]	; (8001928 <menu+0x690>)
 800184c:	4618      	mov	r0, r3
 800184e:	f00a fced 	bl	800c22c <itoa>
			lcd_print(2, 14, snum);
 8001852:	4a35      	ldr	r2, [pc, #212]	; (8001928 <menu+0x690>)
 8001854:	210e      	movs	r1, #14
 8001856:	2002      	movs	r0, #2
 8001858:	f006 f996 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 800185c:	4b33      	ldr	r3, [pc, #204]	; (800192c <menu+0x694>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b08      	cmp	r3, #8
 8001862:	d123      	bne.n	80018ac <menu+0x614>
			if(dilSecim == 0) {
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <menu+0x680>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 800186c:	4a33      	ldr	r2, [pc, #204]	; (800193c <menu+0x6a4>)
 800186e:	2101      	movs	r1, #1
 8001870:	2002      	movs	r0, #2
 8001872:	f006 f989 	bl	8007b88 <lcd_print>
 8001876:	e008      	b.n	800188a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <menu+0x680>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d104      	bne.n	800188a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001880:	4a2f      	ldr	r2, [pc, #188]	; (8001940 <menu+0x6a8>)
 8001882:	2101      	movs	r1, #1
 8001884:	2002      	movs	r0, #2
 8001886:	f006 f97f 	bl	8007b88 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800188a:	4a25      	ldr	r2, [pc, #148]	; (8001920 <menu+0x688>)
 800188c:	210f      	movs	r1, #15
 800188e:	2002      	movs	r0, #2
 8001890:	f006 f97a 	bl	8007b88 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <menu+0x6ac>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	220a      	movs	r2, #10
 800189a:	4923      	ldr	r1, [pc, #140]	; (8001928 <menu+0x690>)
 800189c:	4618      	mov	r0, r3
 800189e:	f00a fcc5 	bl	800c22c <itoa>
			lcd_print(2, 14, snum);
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <menu+0x690>)
 80018a4:	210e      	movs	r1, #14
 80018a6:	2002      	movs	r0, #2
 80018a8:	f006 f96e 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <menu+0x694>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b09      	cmp	r3, #9
 80018b2:	d123      	bne.n	80018fc <menu+0x664>
			if(dilSecim == 0) {
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <menu+0x680>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80018bc:	4a22      	ldr	r2, [pc, #136]	; (8001948 <menu+0x6b0>)
 80018be:	2101      	movs	r1, #1
 80018c0:	2002      	movs	r0, #2
 80018c2:	f006 f961 	bl	8007b88 <lcd_print>
 80018c6:	e008      	b.n	80018da <menu+0x642>
			} else if(dilSecim == 1) {
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <menu+0x680>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d104      	bne.n	80018da <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80018d0:	4a1e      	ldr	r2, [pc, #120]	; (800194c <menu+0x6b4>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	2002      	movs	r0, #2
 80018d6:	f006 f957 	bl	8007b88 <lcd_print>
			}
			lcd_print(2, 16, " ");
 80018da:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <menu+0x6b8>)
 80018dc:	2110      	movs	r1, #16
 80018de:	2002      	movs	r0, #2
 80018e0:	f006 f952 	bl	8007b88 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <menu+0x6bc>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	220a      	movs	r2, #10
 80018ea:	490f      	ldr	r1, [pc, #60]	; (8001928 <menu+0x690>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00a fc9d 	bl	800c22c <itoa>
			lcd_print(2, 15, snum);
 80018f2:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <menu+0x690>)
 80018f4:	210f      	movs	r1, #15
 80018f6:	2002      	movs	r0, #2
 80018f8:	f006 f946 	bl	8007b88 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <menu+0x694>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b0a      	cmp	r3, #10
 8001902:	d134      	bne.n	800196e <menu+0x6d6>
			if(dilSecim == 0) {
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <menu+0x680>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d127      	bne.n	800195c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <menu+0x6c0>)
 800190e:	2101      	movs	r1, #1
 8001910:	2002      	movs	r0, #2
 8001912:	f006 f939 	bl	8007b88 <lcd_print>
 8001916:	e02a      	b.n	800196e <menu+0x6d6>
 8001918:	20000239 	.word	0x20000239
 800191c:	0800d024 	.word	0x0800d024
 8001920:	0800cf90 	.word	0x0800cf90
 8001924:	20000240 	.word	0x20000240
 8001928:	2000018c 	.word	0x2000018c
 800192c:	2000021a 	.word	0x2000021a
 8001930:	0800d034 	.word	0x0800d034
 8001934:	0800d044 	.word	0x0800d044
 8001938:	20000241 	.word	0x20000241
 800193c:	0800d054 	.word	0x0800d054
 8001940:	0800d064 	.word	0x0800d064
 8001944:	20000242 	.word	0x20000242
 8001948:	0800d074 	.word	0x0800d074
 800194c:	0800d084 	.word	0x0800d084
 8001950:	0800d094 	.word	0x0800d094
 8001954:	20000243 	.word	0x20000243
 8001958:	0800d098 	.word	0x0800d098
			} else if(dilSecim == 1) {
 800195c:	4b82      	ldr	r3, [pc, #520]	; (8001b68 <menu+0x8d0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d104      	bne.n	800196e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001964:	4a81      	ldr	r2, [pc, #516]	; (8001b6c <menu+0x8d4>)
 8001966:	2101      	movs	r1, #1
 8001968:	2002      	movs	r0, #2
 800196a:	f006 f90d 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800196e:	2102      	movs	r1, #2
 8001970:	487f      	ldr	r0, [pc, #508]	; (8001b70 <menu+0x8d8>)
 8001972:	f007 fc2f 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	2b01      	cmp	r3, #1
 800197a:	d119      	bne.n	80019b0 <menu+0x718>
 800197c:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <menu+0x8dc>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	f083 0301 	eor.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d012      	beq.n	80019b0 <menu+0x718>
 800198a:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <menu+0x8e0>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10e      	bne.n	80019b0 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001992:	4b7a      	ldr	r3, [pc, #488]	; (8001b7c <menu+0x8e4>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b78      	ldr	r3, [pc, #480]	; (8001b7c <menu+0x8e4>)
 800199c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800199e:	4b77      	ldr	r3, [pc, #476]	; (8001b7c <menu+0x8e4>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b0a      	cmp	r3, #10
 80019a4:	d902      	bls.n	80019ac <menu+0x714>
				hataGostermeSirasi = 0;
 80019a6:	4b75      	ldr	r3, [pc, #468]	; (8001b7c <menu+0x8e4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019ac:	f003 f840 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019b0:	2104      	movs	r1, #4
 80019b2:	486f      	ldr	r0, [pc, #444]	; (8001b70 <menu+0x8d8>)
 80019b4:	f007 fc0e 	bl	80091d4 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d119      	bne.n	80019f2 <menu+0x75a>
 80019be:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <menu+0x8dc>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f083 0301 	eor.w	r3, r3, #1
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <menu+0x75a>
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <menu+0x8e0>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10e      	bne.n	80019f2 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80019d4:	4b69      	ldr	r3, [pc, #420]	; (8001b7c <menu+0x8e4>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	3b01      	subs	r3, #1
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b67      	ldr	r3, [pc, #412]	; (8001b7c <menu+0x8e4>)
 80019de:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80019e0:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <menu+0x8e4>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b0b      	cmp	r3, #11
 80019e6:	d902      	bls.n	80019ee <menu+0x756>
	    		hataGostermeSirasi = 10;
 80019e8:	4b64      	ldr	r3, [pc, #400]	; (8001b7c <menu+0x8e4>)
 80019ea:	220a      	movs	r2, #10
 80019ec:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80019ee:	f003 f81f 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 80019f2:	2108      	movs	r1, #8
 80019f4:	485e      	ldr	r0, [pc, #376]	; (8001b70 <menu+0x8d8>)
 80019f6:	f007 fbed 	bl	80091d4 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d153      	bne.n	8001aa8 <menu+0x810>
 8001a00:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <menu+0x8dc>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	f083 0301 	eor.w	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d04c      	beq.n	8001aa8 <menu+0x810>
 8001a0e:	4b5b      	ldr	r3, [pc, #364]	; (8001b7c <menu+0x8e4>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b0a      	cmp	r3, #10
 8001a14:	d148      	bne.n	8001aa8 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a16:	4b5a      	ldr	r3, [pc, #360]	; (8001b80 <menu+0x8e8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <menu+0x8ec>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001a24:	4b58      	ldr	r3, [pc, #352]	; (8001b88 <menu+0x8f0>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <menu+0x8ec>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001a32:	4b56      	ldr	r3, [pc, #344]	; (8001b8c <menu+0x8f4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <menu+0x8ec>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001a40:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <menu+0x8f8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
 8001a46:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <menu+0x8ec>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001a4e:	4b51      	ldr	r3, [pc, #324]	; (8001b94 <menu+0x8fc>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <menu+0x8ec>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001a5c:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <menu+0x900>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
 8001a62:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <menu+0x8ec>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <menu+0x904>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	4b44      	ldr	r3, [pc, #272]	; (8001b84 <menu+0x8ec>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001a78:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <menu+0x908>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <menu+0x8ec>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <menu+0x90c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	; (8001b84 <menu+0x8ec>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001a94:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <menu+0x910>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <menu+0x8ec>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001aa2:	4b42      	ldr	r3, [pc, #264]	; (8001bac <menu+0x914>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001aa8:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <menu+0x918>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	f040 80fc 	bne.w	8001caa <menu+0xa12>
		if(dilSecim == 0) {
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <menu+0x8d0>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001aba:	4a3e      	ldr	r2, [pc, #248]	; (8001bb4 <menu+0x91c>)
 8001abc:	2101      	movs	r1, #1
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f006 f862 	bl	8007b88 <lcd_print>
 8001ac4:	e008      	b.n	8001ad8 <menu+0x840>
		} else if(dilSecim == 1) {
 8001ac6:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <menu+0x8d0>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d104      	bne.n	8001ad8 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001ace:	4a3a      	ldr	r2, [pc, #232]	; (8001bb8 <menu+0x920>)
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f006 f858 	bl	8007b88 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001ad8:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <menu+0x8e0>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d003      	beq.n	8001ae8 <menu+0x850>
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <menu+0x8e0>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d112      	bne.n	8001b0e <menu+0x876>
			if(dilSecim == 0) {
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <menu+0x8d0>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001af0:	4a32      	ldr	r2, [pc, #200]	; (8001bbc <menu+0x924>)
 8001af2:	2101      	movs	r1, #1
 8001af4:	2002      	movs	r0, #2
 8001af6:	f006 f847 	bl	8007b88 <lcd_print>
 8001afa:	e008      	b.n	8001b0e <menu+0x876>
			} else if(dilSecim == 1) {
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <menu+0x8d0>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d104      	bne.n	8001b0e <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001b04:	4a2e      	ldr	r2, [pc, #184]	; (8001bc0 <menu+0x928>)
 8001b06:	2101      	movs	r1, #1
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f006 f83d 	bl	8007b88 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <menu+0x92c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d116      	bne.n	8001b44 <menu+0x8ac>
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <menu+0x8e0>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d112      	bne.n	8001b44 <menu+0x8ac>
			if(dilSecim == 0) {
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <menu+0x8d0>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001b26:	4a28      	ldr	r2, [pc, #160]	; (8001bc8 <menu+0x930>)
 8001b28:	2101      	movs	r1, #1
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f006 f82c 	bl	8007b88 <lcd_print>
 8001b30:	e008      	b.n	8001b44 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001b32:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <menu+0x8d0>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d104      	bne.n	8001b44 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001b3a:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <menu+0x934>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f006 f822 	bl	8007b88 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <menu+0x92c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d14c      	bne.n	8001be6 <menu+0x94e>
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <menu+0x8e0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d148      	bne.n	8001be6 <menu+0x94e>
			if(dilSecim == 0) {
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <menu+0x8d0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d13b      	bne.n	8001bd4 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001b5c:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <menu+0x938>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	2002      	movs	r0, #2
 8001b62:	f006 f811 	bl	8007b88 <lcd_print>
 8001b66:	e03e      	b.n	8001be6 <menu+0x94e>
 8001b68:	20000239 	.word	0x20000239
 8001b6c:	0800d0ac 	.word	0x0800d0ac
 8001b70:	40010800 	.word	0x40010800
 8001b74:	20000247 	.word	0x20000247
 8001b78:	20000227 	.word	0x20000227
 8001b7c:	2000021a 	.word	0x2000021a
 8001b80:	2000023a 	.word	0x2000023a
 8001b84:	2000011c 	.word	0x2000011c
 8001b88:	2000023b 	.word	0x2000023b
 8001b8c:	2000023c 	.word	0x2000023c
 8001b90:	2000023d 	.word	0x2000023d
 8001b94:	2000023e 	.word	0x2000023e
 8001b98:	2000023f 	.word	0x2000023f
 8001b9c:	20000240 	.word	0x20000240
 8001ba0:	20000241 	.word	0x20000241
 8001ba4:	20000242 	.word	0x20000242
 8001ba8:	20000243 	.word	0x20000243
 8001bac:	20000244 	.word	0x20000244
 8001bb0:	20000218 	.word	0x20000218
 8001bb4:	0800d0c0 	.word	0x0800d0c0
 8001bb8:	0800d0d4 	.word	0x0800d0d4
 8001bbc:	0800d0e8 	.word	0x0800d0e8
 8001bc0:	0800d0fc 	.word	0x0800d0fc
 8001bc4:	20000219 	.word	0x20000219
 8001bc8:	0800d110 	.word	0x0800d110
 8001bcc:	0800d120 	.word	0x0800d120
 8001bd0:	0800d130 	.word	0x0800d130
			} else if(dilSecim == 1) {
 8001bd4:	4b98      	ldr	r3, [pc, #608]	; (8001e38 <menu+0xba0>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d104      	bne.n	8001be6 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001bdc:	4a97      	ldr	r2, [pc, #604]	; (8001e3c <menu+0xba4>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	2002      	movs	r0, #2
 8001be2:	f005 ffd1 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001be6:	2102      	movs	r1, #2
 8001be8:	4895      	ldr	r0, [pc, #596]	; (8001e40 <menu+0xba8>)
 8001bea:	f007 faf3 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d119      	bne.n	8001c28 <menu+0x990>
 8001bf4:	4b93      	ldr	r3, [pc, #588]	; (8001e44 <menu+0xbac>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	f083 0301 	eor.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d012      	beq.n	8001c28 <menu+0x990>
 8001c02:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <menu+0xbb0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10e      	bne.n	8001c28 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001c0a:	4b90      	ldr	r3, [pc, #576]	; (8001e4c <menu+0xbb4>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b8e      	ldr	r3, [pc, #568]	; (8001e4c <menu+0xbb4>)
 8001c14:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c16:	4b8d      	ldr	r3, [pc, #564]	; (8001e4c <menu+0xbb4>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d902      	bls.n	8001c24 <menu+0x98c>
				calismaSekli = 0;
 8001c1e:	4b8b      	ldr	r3, [pc, #556]	; (8001e4c <menu+0xbb4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c24:	f002 ff04 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c28:	2104      	movs	r1, #4
 8001c2a:	4885      	ldr	r0, [pc, #532]	; (8001e40 <menu+0xba8>)
 8001c2c:	f007 fad2 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d119      	bne.n	8001c6a <menu+0x9d2>
 8001c36:	4b83      	ldr	r3, [pc, #524]	; (8001e44 <menu+0xbac>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	f083 0301 	eor.w	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d012      	beq.n	8001c6a <menu+0x9d2>
 8001c44:	4b80      	ldr	r3, [pc, #512]	; (8001e48 <menu+0xbb0>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10e      	bne.n	8001c6a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001c4c:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <menu+0xbb4>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <menu+0xbb4>)
 8001c56:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001c58:	4b7c      	ldr	r3, [pc, #496]	; (8001e4c <menu+0xbb4>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <menu+0x9ce>
	    		calismaSekli = 1;
 8001c60:	4b7a      	ldr	r3, [pc, #488]	; (8001e4c <menu+0xbb4>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c66:	f002 fee3 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c6a:	2108      	movs	r1, #8
 8001c6c:	4874      	ldr	r0, [pc, #464]	; (8001e40 <menu+0xba8>)
 8001c6e:	f007 fab1 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d118      	bne.n	8001caa <menu+0xa12>
 8001c78:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <menu+0xbac>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d011      	beq.n	8001caa <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001c86:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <menu+0xbb4>)
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <menu+0xbb8>)
 8001c8c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001c8e:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <menu+0xbb4>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d106      	bne.n	8001ca4 <menu+0xa0c>
				altLimit = 1;
 8001c96:	4b6f      	ldr	r3, [pc, #444]	; (8001e54 <menu+0xbbc>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001c9c:	4b6d      	ldr	r3, [pc, #436]	; (8001e54 <menu+0xbbc>)
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <menu+0xbb8>)
 8001ca2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ca4:	4b6c      	ldr	r3, [pc, #432]	; (8001e58 <menu+0xbc0>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001caa:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <menu+0xbc4>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	f040 8083 	bne.w	8001dba <menu+0xb22>
		if(dilSecim == 0) {
 8001cb4:	4b60      	ldr	r3, [pc, #384]	; (8001e38 <menu+0xba0>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001cbc:	4a68      	ldr	r2, [pc, #416]	; (8001e60 <menu+0xbc8>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f005 ff61 	bl	8007b88 <lcd_print>
 8001cc6:	e008      	b.n	8001cda <menu+0xa42>
		} else if(dilSecim == 1) {
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <menu+0xba0>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d104      	bne.n	8001cda <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001cd0:	4a64      	ldr	r2, [pc, #400]	; (8001e64 <menu+0xbcc>)
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f005 ff57 	bl	8007b88 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <menu+0xbd0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d113      	bne.n	8001d0a <menu+0xa72>
			if(dilSecim == 0) {
 8001ce2:	4b55      	ldr	r3, [pc, #340]	; (8001e38 <menu+0xba0>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001cea:	4a60      	ldr	r2, [pc, #384]	; (8001e6c <menu+0xbd4>)
 8001cec:	2101      	movs	r1, #1
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f005 ff4a 	bl	8007b88 <lcd_print>
 8001cf4:	e012      	b.n	8001d1c <menu+0xa84>
			} else if(dilSecim == 1) {
 8001cf6:	4b50      	ldr	r3, [pc, #320]	; (8001e38 <menu+0xba0>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d10e      	bne.n	8001d1c <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001cfe:	4a5c      	ldr	r2, [pc, #368]	; (8001e70 <menu+0xbd8>)
 8001d00:	2101      	movs	r1, #1
 8001d02:	2002      	movs	r0, #2
 8001d04:	f005 ff40 	bl	8007b88 <lcd_print>
 8001d08:	e008      	b.n	8001d1c <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001d0a:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <menu+0xbd0>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d104      	bne.n	8001d1c <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001d12:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <menu+0xbdc>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	2002      	movs	r0, #2
 8001d18:	f005 ff36 	bl	8007b88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	4848      	ldr	r0, [pc, #288]	; (8001e40 <menu+0xba8>)
 8001d20:	f007 fa58 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d115      	bne.n	8001d56 <menu+0xabe>
 8001d2a:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <menu+0xbac>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	f083 0301 	eor.w	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00e      	beq.n	8001d56 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001d38:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <menu+0xbd0>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b49      	ldr	r3, [pc, #292]	; (8001e68 <menu+0xbd0>)
 8001d42:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001d44:	4b48      	ldr	r3, [pc, #288]	; (8001e68 <menu+0xbd0>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d902      	bls.n	8001d52 <menu+0xaba>
				emniyetCercevesi = 0;
 8001d4c:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <menu+0xbd0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d52:	f002 fe6d 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d56:	2104      	movs	r1, #4
 8001d58:	4839      	ldr	r0, [pc, #228]	; (8001e40 <menu+0xba8>)
 8001d5a:	f007 fa3b 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d115      	bne.n	8001d90 <menu+0xaf8>
 8001d64:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <menu+0xbac>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	f083 0301 	eor.w	r3, r3, #1
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00e      	beq.n	8001d90 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <menu+0xbd0>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <menu+0xbd0>)
 8001d7c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <menu+0xbd0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001d86:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <menu+0xbd0>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d8c:	f002 fe50 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001d90:	2108      	movs	r1, #8
 8001d92:	482b      	ldr	r0, [pc, #172]	; (8001e40 <menu+0xba8>)
 8001d94:	f007 fa1e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10d      	bne.n	8001dba <menu+0xb22>
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <menu+0xbac>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	f083 0301 	eor.w	r3, r3, #1
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001dac:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <menu+0xbd0>)
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <menu+0xbb8>)
 8001db2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <menu+0xbc0>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <menu+0xbc4>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	f040 80ba 	bne.w	8001f38 <menu+0xca0>
		if(dilSecim == 0) {
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <menu+0xba0>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001dcc:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <menu+0xbe0>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f005 fed9 	bl	8007b88 <lcd_print>
 8001dd6:	e008      	b.n	8001dea <menu+0xb52>
		} else if(dilSecim == 1) {
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <menu+0xba0>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d104      	bne.n	8001dea <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001de0:	4a26      	ldr	r2, [pc, #152]	; (8001e7c <menu+0xbe4>)
 8001de2:	2101      	movs	r1, #1
 8001de4:	2001      	movs	r0, #1
 8001de6:	f005 fecf 	bl	8007b88 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001dea:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <menu+0xbe8>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d113      	bne.n	8001e1a <menu+0xb82>
			if(dilSecim == 0) {
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <menu+0xba0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d105      	bne.n	8001e06 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <menu+0xbd4>)
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	2002      	movs	r0, #2
 8001e00:	f005 fec2 	bl	8007b88 <lcd_print>
 8001e04:	e049      	b.n	8001e9a <menu+0xc02>
			} else if(dilSecim == 1) {
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <menu+0xba0>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d145      	bne.n	8001e9a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001e0e:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <menu+0xbd8>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	2002      	movs	r0, #2
 8001e14:	f005 feb8 	bl	8007b88 <lcd_print>
 8001e18:	e03f      	b.n	8001e9a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001e1a:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <menu+0xbe8>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d13b      	bne.n	8001e9a <menu+0xc02>
			if(dilSecim == 0) {
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <menu+0xba0>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d12e      	bne.n	8001e88 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <menu+0xbec>)
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f005 feaa 	bl	8007b88 <lcd_print>
 8001e34:	e031      	b.n	8001e9a <menu+0xc02>
 8001e36:	bf00      	nop
 8001e38:	20000239 	.word	0x20000239
 8001e3c:	0800d140 	.word	0x0800d140
 8001e40:	40010800 	.word	0x40010800
 8001e44:	20000247 	.word	0x20000247
 8001e48:	20000227 	.word	0x20000227
 8001e4c:	20000219 	.word	0x20000219
 8001e50:	2000011c 	.word	0x2000011c
 8001e54:	2000021e 	.word	0x2000021e
 8001e58:	20000244 	.word	0x20000244
 8001e5c:	20000218 	.word	0x20000218
 8001e60:	0800d150 	.word	0x0800d150
 8001e64:	0800d164 	.word	0x0800d164
 8001e68:	2000021c 	.word	0x2000021c
 8001e6c:	0800d178 	.word	0x0800d178
 8001e70:	0800d18c 	.word	0x0800d18c
 8001e74:	0800d1a0 	.word	0x0800d1a0
 8001e78:	0800d1b0 	.word	0x0800d1b0
 8001e7c:	0800d1c4 	.word	0x0800d1c4
 8001e80:	2000021d 	.word	0x2000021d
 8001e84:	0800d1d8 	.word	0x0800d1d8
			} else if(dilSecim == 1) {
 8001e88:	4b92      	ldr	r3, [pc, #584]	; (80020d4 <menu+0xe3c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d104      	bne.n	8001e9a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001e90:	4a91      	ldr	r2, [pc, #580]	; (80020d8 <menu+0xe40>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	2002      	movs	r0, #2
 8001e96:	f005 fe77 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	488f      	ldr	r0, [pc, #572]	; (80020dc <menu+0xe44>)
 8001e9e:	f007 f999 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d115      	bne.n	8001ed4 <menu+0xc3c>
 8001ea8:	4b8d      	ldr	r3, [pc, #564]	; (80020e0 <menu+0xe48>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00e      	beq.n	8001ed4 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <menu+0xe4c>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <menu+0xe4c>)
 8001ec0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001ec2:	4b88      	ldr	r3, [pc, #544]	; (80020e4 <menu+0xe4c>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d902      	bls.n	8001ed0 <menu+0xc38>
				yavaslamaLimit = 0;
 8001eca:	4b86      	ldr	r3, [pc, #536]	; (80020e4 <menu+0xe4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ed0:	f002 fdae 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ed4:	2104      	movs	r1, #4
 8001ed6:	4881      	ldr	r0, [pc, #516]	; (80020dc <menu+0xe44>)
 8001ed8:	f007 f97c 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d115      	bne.n	8001f0e <menu+0xc76>
 8001ee2:	4b7f      	ldr	r3, [pc, #508]	; (80020e0 <menu+0xe48>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	f083 0301 	eor.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001ef0:	4b7c      	ldr	r3, [pc, #496]	; (80020e4 <menu+0xe4c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	4b7a      	ldr	r3, [pc, #488]	; (80020e4 <menu+0xe4c>)
 8001efa:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001efc:	4b79      	ldr	r3, [pc, #484]	; (80020e4 <menu+0xe4c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001f04:	4b77      	ldr	r3, [pc, #476]	; (80020e4 <menu+0xe4c>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f0a:	f002 fd91 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f0e:	2108      	movs	r1, #8
 8001f10:	4872      	ldr	r0, [pc, #456]	; (80020dc <menu+0xe44>)
 8001f12:	f007 f95f 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d10d      	bne.n	8001f38 <menu+0xca0>
 8001f1c:	4b70      	ldr	r3, [pc, #448]	; (80020e0 <menu+0xe48>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001f2a:	4b6e      	ldr	r3, [pc, #440]	; (80020e4 <menu+0xe4c>)
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	4b6e      	ldr	r3, [pc, #440]	; (80020e8 <menu+0xe50>)
 8001f30:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f32:	4b6e      	ldr	r3, [pc, #440]	; (80020ec <menu+0xe54>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f38:	4b6d      	ldr	r3, [pc, #436]	; (80020f0 <menu+0xe58>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	f040 80b9 	bne.w	80020b4 <menu+0xe1c>
		if(dilSecim == 0) {
 8001f42:	4b64      	ldr	r3, [pc, #400]	; (80020d4 <menu+0xe3c>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001f4a:	4a6a      	ldr	r2, [pc, #424]	; (80020f4 <menu+0xe5c>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f005 fe1a 	bl	8007b88 <lcd_print>
 8001f54:	e008      	b.n	8001f68 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001f56:	4b5f      	ldr	r3, [pc, #380]	; (80020d4 <menu+0xe3c>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d104      	bne.n	8001f68 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001f5e:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <menu+0xe60>)
 8001f60:	2101      	movs	r1, #1
 8001f62:	2001      	movs	r0, #1
 8001f64:	f005 fe10 	bl	8007b88 <lcd_print>
		}

		if(altLimit == 0) {
 8001f68:	4b64      	ldr	r3, [pc, #400]	; (80020fc <menu+0xe64>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d113      	bne.n	8001f98 <menu+0xd00>
			if(dilSecim == 0) {
 8001f70:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <menu+0xe3c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001f78:	4a61      	ldr	r2, [pc, #388]	; (8002100 <menu+0xe68>)
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	2002      	movs	r0, #2
 8001f7e:	f005 fe03 	bl	8007b88 <lcd_print>
 8001f82:	e020      	b.n	8001fc6 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001f84:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <menu+0xe3c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d11c      	bne.n	8001fc6 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001f8c:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <menu+0xe6c>)
 8001f8e:	2101      	movs	r1, #1
 8001f90:	2002      	movs	r0, #2
 8001f92:	f005 fdf9 	bl	8007b88 <lcd_print>
 8001f96:	e016      	b.n	8001fc6 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001f98:	4b58      	ldr	r3, [pc, #352]	; (80020fc <menu+0xe64>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d112      	bne.n	8001fc6 <menu+0xd2e>
			if(dilSecim == 0){
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <menu+0xe3c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001fa8:	4a57      	ldr	r2, [pc, #348]	; (8002108 <menu+0xe70>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	2002      	movs	r0, #2
 8001fae:	f005 fdeb 	bl	8007b88 <lcd_print>
 8001fb2:	e008      	b.n	8001fc6 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001fb4:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <menu+0xe3c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d104      	bne.n	8001fc6 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001fbc:	4a46      	ldr	r2, [pc, #280]	; (80020d8 <menu+0xe40>)
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	f005 fde1 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	4844      	ldr	r0, [pc, #272]	; (80020dc <menu+0xe44>)
 8001fca:	f007 f903 	bl	80091d4 <HAL_GPIO_ReadPin>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d119      	bne.n	8002008 <menu+0xd70>
 8001fd4:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <menu+0xe48>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d012      	beq.n	8002008 <menu+0xd70>
 8001fe2:	4b4a      	ldr	r3, [pc, #296]	; (800210c <menu+0xe74>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10e      	bne.n	8002008 <menu+0xd70>
			altLimit = altLimit + 1;
 8001fea:	4b44      	ldr	r3, [pc, #272]	; (80020fc <menu+0xe64>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b42      	ldr	r3, [pc, #264]	; (80020fc <menu+0xe64>)
 8001ff4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <menu+0xe64>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d902      	bls.n	8002004 <menu+0xd6c>
				altLimit = 0;
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <menu+0xe64>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002004:	f002 fd14 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002008:	2104      	movs	r1, #4
 800200a:	4834      	ldr	r0, [pc, #208]	; (80020dc <menu+0xe44>)
 800200c:	f007 f8e2 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002010:	4603      	mov	r3, r0
 8002012:	2b01      	cmp	r3, #1
 8002014:	d119      	bne.n	800204a <menu+0xdb2>
 8002016:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <menu+0xe48>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f083 0301 	eor.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d012      	beq.n	800204a <menu+0xdb2>
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <menu+0xe74>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10e      	bne.n	800204a <menu+0xdb2>
			altLimit = altLimit - 1;
 800202c:	4b33      	ldr	r3, [pc, #204]	; (80020fc <menu+0xe64>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	3b01      	subs	r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <menu+0xe64>)
 8002036:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <menu+0xe64>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <menu+0xdae>
		   		altLimit = 1;
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <menu+0xe64>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002046:	f002 fcf3 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800204a:	2108      	movs	r1, #8
 800204c:	4823      	ldr	r0, [pc, #140]	; (80020dc <menu+0xe44>)
 800204e:	f007 f8c1 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002052:	4603      	mov	r3, r0
 8002054:	2b01      	cmp	r3, #1
 8002056:	d12d      	bne.n	80020b4 <menu+0xe1c>
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <menu+0xe48>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d026      	beq.n	80020b4 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <menu+0xe64>)
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <menu+0xe50>)
 800206c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <menu+0xe64>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d110      	bne.n	8002098 <menu+0xe00>
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <menu+0xe78>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <menu+0xdee>
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <menu+0xe78>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d108      	bne.n	8002098 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <menu+0xe78>)
 8002088:	2203      	movs	r2, #3
 800208a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800208c:	4b20      	ldr	r3, [pc, #128]	; (8002110 <menu+0xe78>)
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <menu+0xe50>)
 8002092:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002096:	e00a      	b.n	80020ae <menu+0xe16>
			} else if(altLimit == 0) {
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <menu+0xe64>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <menu+0xe16>
				platformSilindirTipi = 0;
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <menu+0xe7c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <menu+0xe7c>)
 80020a8:	781a      	ldrb	r2, [r3, #0]
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <menu+0xe50>)
 80020ac:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <menu+0xe54>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <menu+0xe58>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b06      	cmp	r3, #6
 80020ba:	f040 80b6 	bne.w	800222a <menu+0xf92>
		if(dilSecim == 0) {
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <menu+0xe3c>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d12a      	bne.n	800211c <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80020c6:	4a14      	ldr	r2, [pc, #80]	; (8002118 <menu+0xe80>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	2001      	movs	r0, #1
 80020cc:	f005 fd5c 	bl	8007b88 <lcd_print>
 80020d0:	e02d      	b.n	800212e <menu+0xe96>
 80020d2:	bf00      	nop
 80020d4:	20000239 	.word	0x20000239
 80020d8:	0800d1ec 	.word	0x0800d1ec
 80020dc:	40010800 	.word	0x40010800
 80020e0:	20000247 	.word	0x20000247
 80020e4:	2000021d 	.word	0x2000021d
 80020e8:	2000011c 	.word	0x2000011c
 80020ec:	20000244 	.word	0x20000244
 80020f0:	20000218 	.word	0x20000218
 80020f4:	0800d200 	.word	0x0800d200
 80020f8:	0800d214 	.word	0x0800d214
 80020fc:	2000021e 	.word	0x2000021e
 8002100:	0800d178 	.word	0x0800d178
 8002104:	0800d18c 	.word	0x0800d18c
 8002108:	0800d1d8 	.word	0x0800d1d8
 800210c:	20000219 	.word	0x20000219
 8002110:	20000225 	.word	0x20000225
 8002114:	2000022b 	.word	0x2000022b
 8002118:	0800d228 	.word	0x0800d228
		} else if(dilSecim == 1){
 800211c:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <menu+0x1070>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d104      	bne.n	800212e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002124:	4a79      	ldr	r2, [pc, #484]	; (800230c <menu+0x1074>)
 8002126:	2101      	movs	r1, #1
 8002128:	2001      	movs	r0, #1
 800212a:	f005 fd2d 	bl	8007b88 <lcd_print>
		}
		if(basincSalteri == 0){
 800212e:	4b78      	ldr	r3, [pc, #480]	; (8002310 <menu+0x1078>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d113      	bne.n	800215e <menu+0xec6>
			if(dilSecim == 0) {
 8002136:	4b74      	ldr	r3, [pc, #464]	; (8002308 <menu+0x1070>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800213e:	4a75      	ldr	r2, [pc, #468]	; (8002314 <menu+0x107c>)
 8002140:	2101      	movs	r1, #1
 8002142:	2002      	movs	r0, #2
 8002144:	f005 fd20 	bl	8007b88 <lcd_print>
 8002148:	e020      	b.n	800218c <menu+0xef4>
			} else if(dilSecim == 1){
 800214a:	4b6f      	ldr	r3, [pc, #444]	; (8002308 <menu+0x1070>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d11c      	bne.n	800218c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8002152:	4a71      	ldr	r2, [pc, #452]	; (8002318 <menu+0x1080>)
 8002154:	2101      	movs	r1, #1
 8002156:	2002      	movs	r0, #2
 8002158:	f005 fd16 	bl	8007b88 <lcd_print>
 800215c:	e016      	b.n	800218c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800215e:	4b6c      	ldr	r3, [pc, #432]	; (8002310 <menu+0x1078>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d112      	bne.n	800218c <menu+0xef4>
			if(dilSecim == 0) {
 8002166:	4b68      	ldr	r3, [pc, #416]	; (8002308 <menu+0x1070>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800216e:	4a6b      	ldr	r2, [pc, #428]	; (800231c <menu+0x1084>)
 8002170:	2101      	movs	r1, #1
 8002172:	2002      	movs	r0, #2
 8002174:	f005 fd08 	bl	8007b88 <lcd_print>
 8002178:	e008      	b.n	800218c <menu+0xef4>
			} else if(dilSecim == 1) {
 800217a:	4b63      	ldr	r3, [pc, #396]	; (8002308 <menu+0x1070>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d104      	bne.n	800218c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002182:	4a67      	ldr	r2, [pc, #412]	; (8002320 <menu+0x1088>)
 8002184:	2101      	movs	r1, #1
 8002186:	2002      	movs	r0, #2
 8002188:	f005 fcfe 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800218c:	2102      	movs	r1, #2
 800218e:	4865      	ldr	r0, [pc, #404]	; (8002324 <menu+0x108c>)
 8002190:	f007 f820 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002194:	4603      	mov	r3, r0
 8002196:	2b01      	cmp	r3, #1
 8002198:	d115      	bne.n	80021c6 <menu+0xf2e>
 800219a:	4b63      	ldr	r3, [pc, #396]	; (8002328 <menu+0x1090>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	f083 0301 	eor.w	r3, r3, #1
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00e      	beq.n	80021c6 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80021a8:	4b59      	ldr	r3, [pc, #356]	; (8002310 <menu+0x1078>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b57      	ldr	r3, [pc, #348]	; (8002310 <menu+0x1078>)
 80021b2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80021b4:	4b56      	ldr	r3, [pc, #344]	; (8002310 <menu+0x1078>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d902      	bls.n	80021c2 <menu+0xf2a>
				basincSalteri = 0;
 80021bc:	4b54      	ldr	r3, [pc, #336]	; (8002310 <menu+0x1078>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021c2:	f002 fc35 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021c6:	2104      	movs	r1, #4
 80021c8:	4856      	ldr	r0, [pc, #344]	; (8002324 <menu+0x108c>)
 80021ca:	f007 f803 	bl	80091d4 <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d115      	bne.n	8002200 <menu+0xf68>
 80021d4:	4b54      	ldr	r3, [pc, #336]	; (8002328 <menu+0x1090>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	f083 0301 	eor.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00e      	beq.n	8002200 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80021e2:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <menu+0x1078>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b49      	ldr	r3, [pc, #292]	; (8002310 <menu+0x1078>)
 80021ec:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80021ee:	4b48      	ldr	r3, [pc, #288]	; (8002310 <menu+0x1078>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <menu+0xf64>
		   		basincSalteri = 1;
 80021f6:	4b46      	ldr	r3, [pc, #280]	; (8002310 <menu+0x1078>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021fc:	f002 fc18 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002200:	2108      	movs	r1, #8
 8002202:	4848      	ldr	r0, [pc, #288]	; (8002324 <menu+0x108c>)
 8002204:	f006 ffe6 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002208:	4603      	mov	r3, r0
 800220a:	2b01      	cmp	r3, #1
 800220c:	d10d      	bne.n	800222a <menu+0xf92>
 800220e:	4b46      	ldr	r3, [pc, #280]	; (8002328 <menu+0x1090>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <menu+0xf92>
			eepromData[6] = basincSalteri;
 800221c:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <menu+0x1078>)
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	4b42      	ldr	r3, [pc, #264]	; (800232c <menu+0x1094>)
 8002222:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002224:	4b42      	ldr	r3, [pc, #264]	; (8002330 <menu+0x1098>)
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800222a:	4b42      	ldr	r3, [pc, #264]	; (8002334 <menu+0x109c>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b07      	cmp	r3, #7
 8002230:	f040 80f5 	bne.w	800241e <menu+0x1186>
		if(dilSecim == 0) {
 8002234:	4b34      	ldr	r3, [pc, #208]	; (8002308 <menu+0x1070>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800223c:	4a3e      	ldr	r2, [pc, #248]	; (8002338 <menu+0x10a0>)
 800223e:	2101      	movs	r1, #1
 8002240:	2001      	movs	r0, #1
 8002242:	f005 fca1 	bl	8007b88 <lcd_print>
 8002246:	e008      	b.n	800225a <menu+0xfc2>
		} else if(dilSecim == 1){
 8002248:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <menu+0x1070>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d104      	bne.n	800225a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002250:	4a3a      	ldr	r2, [pc, #232]	; (800233c <menu+0x10a4>)
 8002252:	2101      	movs	r1, #1
 8002254:	2001      	movs	r0, #1
 8002256:	f005 fc97 	bl	8007b88 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800225a:	4b39      	ldr	r3, [pc, #228]	; (8002340 <menu+0x10a8>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d113      	bne.n	800228a <menu+0xff2>
			if(dilSecim == 0) {
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <menu+0x1070>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800226a:	4a2a      	ldr	r2, [pc, #168]	; (8002314 <menu+0x107c>)
 800226c:	2101      	movs	r1, #1
 800226e:	2002      	movs	r0, #2
 8002270:	f005 fc8a 	bl	8007b88 <lcd_print>
 8002274:	e079      	b.n	800236a <menu+0x10d2>
			} else if(dilSecim == 1){
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <menu+0x1070>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d175      	bne.n	800236a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800227e:	4a26      	ldr	r2, [pc, #152]	; (8002318 <menu+0x1080>)
 8002280:	2101      	movs	r1, #1
 8002282:	2002      	movs	r0, #2
 8002284:	f005 fc80 	bl	8007b88 <lcd_print>
 8002288:	e06f      	b.n	800236a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <menu+0x10a8>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d113      	bne.n	80022ba <menu+0x1022>
			if(dilSecim == 0) {
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <menu+0x1070>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800229a:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <menu+0x10ac>)
 800229c:	2101      	movs	r1, #1
 800229e:	2002      	movs	r0, #2
 80022a0:	f005 fc72 	bl	8007b88 <lcd_print>
 80022a4:	e061      	b.n	800236a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <menu+0x1070>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d15d      	bne.n	800236a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80022ae:	4a26      	ldr	r2, [pc, #152]	; (8002348 <menu+0x10b0>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	2002      	movs	r0, #2
 80022b4:	f005 fc68 	bl	8007b88 <lcd_print>
 80022b8:	e057      	b.n	800236a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <menu+0x10a8>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d113      	bne.n	80022ea <menu+0x1052>
			if(dilSecim == 0) {
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <menu+0x1070>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80022ca:	4a20      	ldr	r2, [pc, #128]	; (800234c <menu+0x10b4>)
 80022cc:	2101      	movs	r1, #1
 80022ce:	2002      	movs	r0, #2
 80022d0:	f005 fc5a 	bl	8007b88 <lcd_print>
 80022d4:	e049      	b.n	800236a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <menu+0x1070>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d145      	bne.n	800236a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <menu+0x10b8>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	2002      	movs	r0, #2
 80022e4:	f005 fc50 	bl	8007b88 <lcd_print>
 80022e8:	e03f      	b.n	800236a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <menu+0x10a8>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d13b      	bne.n	800236a <menu+0x10d2>
			if(dilSecim == 0) {
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <menu+0x1070>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d12e      	bne.n	8002358 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80022fa:	4a16      	ldr	r2, [pc, #88]	; (8002354 <menu+0x10bc>)
 80022fc:	2101      	movs	r1, #1
 80022fe:	2002      	movs	r0, #2
 8002300:	f005 fc42 	bl	8007b88 <lcd_print>
 8002304:	e031      	b.n	800236a <menu+0x10d2>
 8002306:	bf00      	nop
 8002308:	20000239 	.word	0x20000239
 800230c:	0800d238 	.word	0x0800d238
 8002310:	2000021f 	.word	0x2000021f
 8002314:	0800d178 	.word	0x0800d178
 8002318:	0800d18c 	.word	0x0800d18c
 800231c:	0800d1d8 	.word	0x0800d1d8
 8002320:	0800d1ec 	.word	0x0800d1ec
 8002324:	40010800 	.word	0x40010800
 8002328:	20000247 	.word	0x20000247
 800232c:	2000011c 	.word	0x2000011c
 8002330:	20000244 	.word	0x20000244
 8002334:	20000218 	.word	0x20000218
 8002338:	0800d248 	.word	0x0800d248
 800233c:	0800d25c 	.word	0x0800d25c
 8002340:	20000220 	.word	0x20000220
 8002344:	0800d270 	.word	0x0800d270
 8002348:	0800d284 	.word	0x0800d284
 800234c:	0800d298 	.word	0x0800d298
 8002350:	0800d2ac 	.word	0x0800d2ac
 8002354:	0800d2c0 	.word	0x0800d2c0
			} else if(dilSecim == 1){
 8002358:	4b99      	ldr	r3, [pc, #612]	; (80025c0 <menu+0x1328>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d104      	bne.n	800236a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002360:	4a98      	ldr	r2, [pc, #608]	; (80025c4 <menu+0x132c>)
 8002362:	2101      	movs	r1, #1
 8002364:	2002      	movs	r0, #2
 8002366:	f005 fc0f 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800236a:	2102      	movs	r1, #2
 800236c:	4896      	ldr	r0, [pc, #600]	; (80025c8 <menu+0x1330>)
 800236e:	f006 ff31 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	2b01      	cmp	r3, #1
 8002376:	d115      	bne.n	80023a4 <menu+0x110c>
 8002378:	4b94      	ldr	r3, [pc, #592]	; (80025cc <menu+0x1334>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00e      	beq.n	80023a4 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002386:	4b92      	ldr	r3, [pc, #584]	; (80025d0 <menu+0x1338>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	3301      	adds	r3, #1
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b90      	ldr	r3, [pc, #576]	; (80025d0 <menu+0x1338>)
 8002390:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002392:	4b8f      	ldr	r3, [pc, #572]	; (80025d0 <menu+0x1338>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d902      	bls.n	80023a0 <menu+0x1108>
				kapiSecimleri = 0;
 800239a:	4b8d      	ldr	r3, [pc, #564]	; (80025d0 <menu+0x1338>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023a0:	f002 fb46 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023a4:	2104      	movs	r1, #4
 80023a6:	4888      	ldr	r0, [pc, #544]	; (80025c8 <menu+0x1330>)
 80023a8:	f006 ff14 	bl	80091d4 <HAL_GPIO_ReadPin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d115      	bne.n	80023de <menu+0x1146>
 80023b2:	4b86      	ldr	r3, [pc, #536]	; (80025cc <menu+0x1334>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f083 0301 	eor.w	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00e      	beq.n	80023de <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80023c0:	4b83      	ldr	r3, [pc, #524]	; (80025d0 <menu+0x1338>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <menu+0x1338>)
 80023ca:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80023cc:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <menu+0x1338>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d902      	bls.n	80023da <menu+0x1142>
		   		kapiSecimleri = 3;
 80023d4:	4b7e      	ldr	r3, [pc, #504]	; (80025d0 <menu+0x1338>)
 80023d6:	2203      	movs	r2, #3
 80023d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023da:	f002 fb29 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023de:	2108      	movs	r1, #8
 80023e0:	4879      	ldr	r0, [pc, #484]	; (80025c8 <menu+0x1330>)
 80023e2:	f006 fef7 	bl	80091d4 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d118      	bne.n	800241e <menu+0x1186>
 80023ec:	4b77      	ldr	r3, [pc, #476]	; (80025cc <menu+0x1334>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d011      	beq.n	800241e <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80023fa:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <menu+0x1338>)
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	4b75      	ldr	r3, [pc, #468]	; (80025d4 <menu+0x133c>)
 8002400:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002402:	4b73      	ldr	r3, [pc, #460]	; (80025d0 <menu+0x1338>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <menu+0x1180>
				altLimit = 1;
 800240a:	4b73      	ldr	r3, [pc, #460]	; (80025d8 <menu+0x1340>)
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002410:	4b71      	ldr	r3, [pc, #452]	; (80025d8 <menu+0x1340>)
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	4b6f      	ldr	r3, [pc, #444]	; (80025d4 <menu+0x133c>)
 8002416:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002418:	4b70      	ldr	r3, [pc, #448]	; (80025dc <menu+0x1344>)
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800241e:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <menu+0x1348>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b08      	cmp	r3, #8
 8002424:	f040 8092 	bne.w	800254c <menu+0x12b4>
		if(dilSecim == 0) {
 8002428:	4b65      	ldr	r3, [pc, #404]	; (80025c0 <menu+0x1328>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002430:	4a6c      	ldr	r2, [pc, #432]	; (80025e4 <menu+0x134c>)
 8002432:	2101      	movs	r1, #1
 8002434:	2001      	movs	r0, #1
 8002436:	f005 fba7 	bl	8007b88 <lcd_print>
 800243a:	e008      	b.n	800244e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800243c:	4b60      	ldr	r3, [pc, #384]	; (80025c0 <menu+0x1328>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d104      	bne.n	800244e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002444:	4a68      	ldr	r2, [pc, #416]	; (80025e8 <menu+0x1350>)
 8002446:	2101      	movs	r1, #1
 8002448:	2001      	movs	r0, #1
 800244a:	f005 fb9d 	bl	8007b88 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <menu+0x1354>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d113      	bne.n	800247e <menu+0x11e6>
			if(dilSecim == 0) {
 8002456:	4b5a      	ldr	r3, [pc, #360]	; (80025c0 <menu+0x1328>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800245e:	4a64      	ldr	r2, [pc, #400]	; (80025f0 <menu+0x1358>)
 8002460:	2101      	movs	r1, #1
 8002462:	2002      	movs	r0, #2
 8002464:	f005 fb90 	bl	8007b88 <lcd_print>
 8002468:	e020      	b.n	80024ac <menu+0x1214>
			} else if(dilSecim == 1) {
 800246a:	4b55      	ldr	r3, [pc, #340]	; (80025c0 <menu+0x1328>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d11c      	bne.n	80024ac <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002472:	4a60      	ldr	r2, [pc, #384]	; (80025f4 <menu+0x135c>)
 8002474:	2101      	movs	r1, #1
 8002476:	2002      	movs	r0, #2
 8002478:	f005 fb86 	bl	8007b88 <lcd_print>
 800247c:	e016      	b.n	80024ac <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800247e:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <menu+0x1354>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d112      	bne.n	80024ac <menu+0x1214>
			if(dilSecim == 0){
 8002486:	4b4e      	ldr	r3, [pc, #312]	; (80025c0 <menu+0x1328>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800248e:	4a5a      	ldr	r2, [pc, #360]	; (80025f8 <menu+0x1360>)
 8002490:	2101      	movs	r1, #1
 8002492:	2002      	movs	r0, #2
 8002494:	f005 fb78 	bl	8007b88 <lcd_print>
 8002498:	e008      	b.n	80024ac <menu+0x1214>
			} else if(dilSecim == 1){
 800249a:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <menu+0x1328>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d104      	bne.n	80024ac <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80024a2:	4a56      	ldr	r2, [pc, #344]	; (80025fc <menu+0x1364>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	2002      	movs	r0, #2
 80024a8:	f005 fb6e 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ac:	2102      	movs	r1, #2
 80024ae:	4846      	ldr	r0, [pc, #280]	; (80025c8 <menu+0x1330>)
 80024b0:	f006 fe90 	bl	80091d4 <HAL_GPIO_ReadPin>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d115      	bne.n	80024e6 <menu+0x124e>
 80024ba:	4b44      	ldr	r3, [pc, #272]	; (80025cc <menu+0x1334>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00e      	beq.n	80024e6 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80024c8:	4b48      	ldr	r3, [pc, #288]	; (80025ec <menu+0x1354>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b46      	ldr	r3, [pc, #280]	; (80025ec <menu+0x1354>)
 80024d2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80024d4:	4b45      	ldr	r3, [pc, #276]	; (80025ec <menu+0x1354>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d902      	bls.n	80024e2 <menu+0x124a>
				kapiAcTipi = 0;
 80024dc:	4b43      	ldr	r3, [pc, #268]	; (80025ec <menu+0x1354>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024e2:	f002 faa5 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024e6:	2104      	movs	r1, #4
 80024e8:	4837      	ldr	r0, [pc, #220]	; (80025c8 <menu+0x1330>)
 80024ea:	f006 fe73 	bl	80091d4 <HAL_GPIO_ReadPin>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d115      	bne.n	8002520 <menu+0x1288>
 80024f4:	4b35      	ldr	r3, [pc, #212]	; (80025cc <menu+0x1334>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f083 0301 	eor.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00e      	beq.n	8002520 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8002502:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <menu+0x1354>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	3b01      	subs	r3, #1
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b38      	ldr	r3, [pc, #224]	; (80025ec <menu+0x1354>)
 800250c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800250e:	4b37      	ldr	r3, [pc, #220]	; (80025ec <menu+0x1354>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <menu+0x1284>
		   		kapiAcTipi = 1;
 8002516:	4b35      	ldr	r3, [pc, #212]	; (80025ec <menu+0x1354>)
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800251c:	f002 fa88 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002520:	2108      	movs	r1, #8
 8002522:	4829      	ldr	r0, [pc, #164]	; (80025c8 <menu+0x1330>)
 8002524:	f006 fe56 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002528:	4603      	mov	r3, r0
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10e      	bne.n	800254c <menu+0x12b4>
 800252e:	4b27      	ldr	r3, [pc, #156]	; (80025cc <menu+0x1334>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	f083 0301 	eor.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <menu+0x1354>)
 800253e:	781a      	ldrb	r2, [r3, #0]
 8002540:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <menu+0x133c>)
 8002542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002546:	4b25      	ldr	r3, [pc, #148]	; (80025dc <menu+0x1344>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <menu+0x1348>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b09      	cmp	r3, #9
 8002552:	f040 80b9 	bne.w	80026c8 <menu+0x1430>
		if(dilSecim == 0){
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <menu+0x1328>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800255e:	4a28      	ldr	r2, [pc, #160]	; (8002600 <menu+0x1368>)
 8002560:	2101      	movs	r1, #1
 8002562:	2001      	movs	r0, #1
 8002564:	f005 fb10 	bl	8007b88 <lcd_print>
 8002568:	e008      	b.n	800257c <menu+0x12e4>
		} else if(dilSecim == 1) {
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <menu+0x1328>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d104      	bne.n	800257c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002572:	4a24      	ldr	r2, [pc, #144]	; (8002604 <menu+0x136c>)
 8002574:	2101      	movs	r1, #1
 8002576:	2001      	movs	r0, #1
 8002578:	f005 fb06 	bl	8007b88 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <menu+0x1370>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002584:	4a21      	ldr	r2, [pc, #132]	; (800260c <menu+0x1374>)
 8002586:	2101      	movs	r1, #1
 8002588:	2002      	movs	r0, #2
 800258a:	f005 fafd 	bl	8007b88 <lcd_print>
 800258e:	e04c      	b.n	800262a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <menu+0x1370>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d13f      	bne.n	8002618 <menu+0x1380>
			if(dilSecim == 0){
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <menu+0x1328>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <menu+0x1378>)
 80025a2:	2101      	movs	r1, #1
 80025a4:	2002      	movs	r0, #2
 80025a6:	f005 faef 	bl	8007b88 <lcd_print>
 80025aa:	e03e      	b.n	800262a <menu+0x1392>
			} else if(dilSecim == 1) {
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <menu+0x1328>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d13a      	bne.n	800262a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80025b4:	4a17      	ldr	r2, [pc, #92]	; (8002614 <menu+0x137c>)
 80025b6:	2101      	movs	r1, #1
 80025b8:	2002      	movs	r0, #2
 80025ba:	f005 fae5 	bl	8007b88 <lcd_print>
 80025be:	e034      	b.n	800262a <menu+0x1392>
 80025c0:	20000239 	.word	0x20000239
 80025c4:	0800d2d4 	.word	0x0800d2d4
 80025c8:	40010800 	.word	0x40010800
 80025cc:	20000247 	.word	0x20000247
 80025d0:	20000220 	.word	0x20000220
 80025d4:	2000011c 	.word	0x2000011c
 80025d8:	2000021e 	.word	0x2000021e
 80025dc:	20000244 	.word	0x20000244
 80025e0:	20000218 	.word	0x20000218
 80025e4:	0800d2e8 	.word	0x0800d2e8
 80025e8:	0800d2fc 	.word	0x0800d2fc
 80025ec:	20000224 	.word	0x20000224
 80025f0:	0800d310 	.word	0x0800d310
 80025f4:	0800d320 	.word	0x0800d320
 80025f8:	0800d330 	.word	0x0800d330
 80025fc:	0800d344 	.word	0x0800d344
 8002600:	0800d358 	.word	0x0800d358
 8002604:	0800d36c 	.word	0x0800d36c
 8002608:	20000221 	.word	0x20000221
 800260c:	0800d380 	.word	0x0800d380
 8002610:	0800d394 	.word	0x0800d394
 8002614:	0800d3a4 	.word	0x0800d3a4
			}
		} else if(kapi1Tip == 2) {
 8002618:	4b8a      	ldr	r3, [pc, #552]	; (8002844 <menu+0x15ac>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d104      	bne.n	800262a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002620:	4a89      	ldr	r2, [pc, #548]	; (8002848 <menu+0x15b0>)
 8002622:	2101      	movs	r1, #1
 8002624:	2002      	movs	r0, #2
 8002626:	f005 faaf 	bl	8007b88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800262a:	2102      	movs	r1, #2
 800262c:	4887      	ldr	r0, [pc, #540]	; (800284c <menu+0x15b4>)
 800262e:	f006 fdd1 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	2b01      	cmp	r3, #1
 8002636:	d115      	bne.n	8002664 <menu+0x13cc>
 8002638:	4b85      	ldr	r3, [pc, #532]	; (8002850 <menu+0x15b8>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	f083 0301 	eor.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00e      	beq.n	8002664 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002646:	4b7f      	ldr	r3, [pc, #508]	; (8002844 <menu+0x15ac>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b7d      	ldr	r3, [pc, #500]	; (8002844 <menu+0x15ac>)
 8002650:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002652:	4b7c      	ldr	r3, [pc, #496]	; (8002844 <menu+0x15ac>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <menu+0x13c8>
				kapi1Tip = 0;
 800265a:	4b7a      	ldr	r3, [pc, #488]	; (8002844 <menu+0x15ac>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002660:	f002 f9e6 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002664:	2104      	movs	r1, #4
 8002666:	4879      	ldr	r0, [pc, #484]	; (800284c <menu+0x15b4>)
 8002668:	f006 fdb4 	bl	80091d4 <HAL_GPIO_ReadPin>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d115      	bne.n	800269e <menu+0x1406>
 8002672:	4b77      	ldr	r3, [pc, #476]	; (8002850 <menu+0x15b8>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	f083 0301 	eor.w	r3, r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002680:	4b70      	ldr	r3, [pc, #448]	; (8002844 <menu+0x15ac>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	3b01      	subs	r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b6e      	ldr	r3, [pc, #440]	; (8002844 <menu+0x15ac>)
 800268a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800268c:	4b6d      	ldr	r3, [pc, #436]	; (8002844 <menu+0x15ac>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d902      	bls.n	800269a <menu+0x1402>
		   		kapi1Tip = 2;
 8002694:	4b6b      	ldr	r3, [pc, #428]	; (8002844 <menu+0x15ac>)
 8002696:	2202      	movs	r2, #2
 8002698:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800269a:	f002 f9c9 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800269e:	2108      	movs	r1, #8
 80026a0:	486a      	ldr	r0, [pc, #424]	; (800284c <menu+0x15b4>)
 80026a2:	f006 fd97 	bl	80091d4 <HAL_GPIO_ReadPin>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10d      	bne.n	80026c8 <menu+0x1430>
 80026ac:	4b68      	ldr	r3, [pc, #416]	; (8002850 <menu+0x15b8>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80026ba:	4b62      	ldr	r3, [pc, #392]	; (8002844 <menu+0x15ac>)
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	4b65      	ldr	r3, [pc, #404]	; (8002854 <menu+0x15bc>)
 80026c0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80026c2:	4b65      	ldr	r3, [pc, #404]	; (8002858 <menu+0x15c0>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80026c8:	4b64      	ldr	r3, [pc, #400]	; (800285c <menu+0x15c4>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b0a      	cmp	r3, #10
 80026ce:	d17f      	bne.n	80027d0 <menu+0x1538>
		if(dilSecim == 0) {
 80026d0:	4b63      	ldr	r3, [pc, #396]	; (8002860 <menu+0x15c8>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80026d8:	4a62      	ldr	r2, [pc, #392]	; (8002864 <menu+0x15cc>)
 80026da:	2101      	movs	r1, #1
 80026dc:	2001      	movs	r0, #1
 80026de:	f005 fa53 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80026e2:	4a61      	ldr	r2, [pc, #388]	; (8002868 <menu+0x15d0>)
 80026e4:	2101      	movs	r1, #1
 80026e6:	2002      	movs	r0, #2
 80026e8:	f005 fa4e 	bl	8007b88 <lcd_print>
 80026ec:	e00d      	b.n	800270a <menu+0x1472>
		} else if(dilSecim == 1) {
 80026ee:	4b5c      	ldr	r3, [pc, #368]	; (8002860 <menu+0x15c8>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d109      	bne.n	800270a <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80026f6:	4a5d      	ldr	r2, [pc, #372]	; (800286c <menu+0x15d4>)
 80026f8:	2101      	movs	r1, #1
 80026fa:	2001      	movs	r0, #1
 80026fc:	f005 fa44 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002700:	4a5b      	ldr	r2, [pc, #364]	; (8002870 <menu+0x15d8>)
 8002702:	2101      	movs	r1, #1
 8002704:	2002      	movs	r0, #2
 8002706:	f005 fa3f 	bl	8007b88 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800270a:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <menu+0x15dc>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	220a      	movs	r2, #10
 8002710:	4959      	ldr	r1, [pc, #356]	; (8002878 <menu+0x15e0>)
 8002712:	4618      	mov	r0, r3
 8002714:	f009 fd8a 	bl	800c22c <itoa>
		lcd_print(2,16,snum);
 8002718:	4a57      	ldr	r2, [pc, #348]	; (8002878 <menu+0x15e0>)
 800271a:	2110      	movs	r1, #16
 800271c:	2002      	movs	r0, #2
 800271e:	f005 fa33 	bl	8007b88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002722:	2102      	movs	r1, #2
 8002724:	4849      	ldr	r0, [pc, #292]	; (800284c <menu+0x15b4>)
 8002726:	f006 fd55 	bl	80091d4 <HAL_GPIO_ReadPin>
 800272a:	4603      	mov	r3, r0
 800272c:	2b01      	cmp	r3, #1
 800272e:	d119      	bne.n	8002764 <menu+0x14cc>
 8002730:	4b47      	ldr	r3, [pc, #284]	; (8002850 <menu+0x15b8>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	f083 0301 	eor.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d012      	beq.n	8002764 <menu+0x14cc>
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <menu+0x15ac>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10e      	bne.n	8002764 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002746:	4b4b      	ldr	r3, [pc, #300]	; (8002874 <menu+0x15dc>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4b49      	ldr	r3, [pc, #292]	; (8002874 <menu+0x15dc>)
 8002750:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002752:	4b48      	ldr	r3, [pc, #288]	; (8002874 <menu+0x15dc>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d902      	bls.n	8002760 <menu+0x14c8>
				kapi1AcSure = 0;
 800275a:	4b46      	ldr	r3, [pc, #280]	; (8002874 <menu+0x15dc>)
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002760:	f002 f966 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002764:	2104      	movs	r1, #4
 8002766:	4839      	ldr	r0, [pc, #228]	; (800284c <menu+0x15b4>)
 8002768:	f006 fd34 	bl	80091d4 <HAL_GPIO_ReadPin>
 800276c:	4603      	mov	r3, r0
 800276e:	2b01      	cmp	r3, #1
 8002770:	d119      	bne.n	80027a6 <menu+0x150e>
 8002772:	4b37      	ldr	r3, [pc, #220]	; (8002850 <menu+0x15b8>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	f083 0301 	eor.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d012      	beq.n	80027a6 <menu+0x150e>
 8002780:	4b30      	ldr	r3, [pc, #192]	; (8002844 <menu+0x15ac>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10e      	bne.n	80027a6 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002788:	4b3a      	ldr	r3, [pc, #232]	; (8002874 <menu+0x15dc>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	3b01      	subs	r3, #1
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b38      	ldr	r3, [pc, #224]	; (8002874 <menu+0x15dc>)
 8002792:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002794:	4b37      	ldr	r3, [pc, #220]	; (8002874 <menu+0x15dc>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b06      	cmp	r3, #6
 800279a:	d902      	bls.n	80027a2 <menu+0x150a>
		   		kapi1AcSure = 5;
 800279c:	4b35      	ldr	r3, [pc, #212]	; (8002874 <menu+0x15dc>)
 800279e:	2205      	movs	r2, #5
 80027a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027a2:	f002 f945 	bl	8004a30 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027a6:	2108      	movs	r1, #8
 80027a8:	4828      	ldr	r0, [pc, #160]	; (800284c <menu+0x15b4>)
 80027aa:	f006 fd13 	bl	80091d4 <HAL_GPIO_ReadPin>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d10d      	bne.n	80027d0 <menu+0x1538>
 80027b4:	4b26      	ldr	r3, [pc, #152]	; (8002850 <menu+0x15b8>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d006      	beq.n	80027d0 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <menu+0x15dc>)
 80027c4:	781a      	ldrb	r2, [r3, #0]
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <menu+0x15bc>)
 80027c8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80027ca:	4b23      	ldr	r3, [pc, #140]	; (8002858 <menu+0x15c0>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80027d0:	4b22      	ldr	r3, [pc, #136]	; (800285c <menu+0x15c4>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b0b      	cmp	r3, #11
 80027d6:	f040 80b5 	bne.w	8002944 <menu+0x16ac>
		if(dilSecim == 0) {
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <menu+0x15c8>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80027e2:	4a26      	ldr	r2, [pc, #152]	; (800287c <menu+0x15e4>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	2001      	movs	r0, #1
 80027e8:	f005 f9ce 	bl	8007b88 <lcd_print>
 80027ec:	e008      	b.n	8002800 <menu+0x1568>
		} else if(dilSecim == 1) {
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <menu+0x15c8>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d104      	bne.n	8002800 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80027f6:	4a22      	ldr	r2, [pc, #136]	; (8002880 <menu+0x15e8>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	2001      	movs	r0, #1
 80027fc:	f005 f9c4 	bl	8007b88 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <menu+0x15ec>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002808:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <menu+0x15f0>)
 800280a:	2101      	movs	r1, #1
 800280c:	2002      	movs	r0, #2
 800280e:	f005 f9bb 	bl	8007b88 <lcd_print>
 8002812:	e048      	b.n	80028a6 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <menu+0x15ec>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d13b      	bne.n	8002894 <menu+0x15fc>
			if(dilSecim == 0) {
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <menu+0x15c8>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002824:	4a19      	ldr	r2, [pc, #100]	; (800288c <menu+0x15f4>)
 8002826:	2101      	movs	r1, #1
 8002828:	2002      	movs	r0, #2
 800282a:	f005 f9ad 	bl	8007b88 <lcd_print>
 800282e:	e03a      	b.n	80028a6 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <menu+0x15c8>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d136      	bne.n	80028a6 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002838:	4a15      	ldr	r2, [pc, #84]	; (8002890 <menu+0x15f8>)
 800283a:	2101      	movs	r1, #1
 800283c:	2002      	movs	r0, #2
 800283e:	f005 f9a3 	bl	8007b88 <lcd_print>
 8002842:	e030      	b.n	80028a6 <menu+0x160e>
 8002844:	20000221 	.word	0x20000221
 8002848:	0800d3b8 	.word	0x0800d3b8
 800284c:	40010800 	.word	0x40010800
 8002850:	20000247 	.word	0x20000247
 8002854:	2000011c 	.word	0x2000011c
 8002858:	20000244 	.word	0x20000244
 800285c:	20000218 	.word	0x20000218
 8002860:	20000239 	.word	0x20000239
 8002864:	0800d3c8 	.word	0x0800d3c8
 8002868:	0800d3dc 	.word	0x0800d3dc
 800286c:	0800d3ec 	.word	0x0800d3ec
 8002870:	0800d400 	.word	0x0800d400
 8002874:	20000231 	.word	0x20000231
 8002878:	2000018c 	.word	0x2000018c
 800287c:	0800d410 	.word	0x0800d410
 8002880:	0800d424 	.word	0x0800d424
 8002884:	20000222 	.word	0x20000222
 8002888:	0800d380 	.word	0x0800d380
 800288c:	0800d394 	.word	0x0800d394
 8002890:	0800d3a4 	.word	0x0800d3a4
			}
		} else if(kapi2Tip == 2) {
 8002894:	4b8a      	ldr	r3, [pc, #552]	; (8002ac0 <menu+0x1828>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d104      	bne.n	80028a6 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 800289c:	4a89      	ldr	r2, [pc, #548]	; (8002ac4 <menu+0x182c>)
 800289e:	2101      	movs	r1, #1
 80028a0:	2002      	movs	r0, #2
 80028a2:	f005 f971 	bl	8007b88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028a6:	2102      	movs	r1, #2
 80028a8:	4887      	ldr	r0, [pc, #540]	; (8002ac8 <menu+0x1830>)
 80028aa:	f006 fc93 	bl	80091d4 <HAL_GPIO_ReadPin>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d115      	bne.n	80028e0 <menu+0x1648>
 80028b4:	4b85      	ldr	r3, [pc, #532]	; (8002acc <menu+0x1834>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	f083 0301 	eor.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00e      	beq.n	80028e0 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80028c2:	4b7f      	ldr	r3, [pc, #508]	; (8002ac0 <menu+0x1828>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b7d      	ldr	r3, [pc, #500]	; (8002ac0 <menu+0x1828>)
 80028cc:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80028ce:	4b7c      	ldr	r3, [pc, #496]	; (8002ac0 <menu+0x1828>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d902      	bls.n	80028dc <menu+0x1644>
				kapi2Tip = 0;
 80028d6:	4b7a      	ldr	r3, [pc, #488]	; (8002ac0 <menu+0x1828>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028dc:	f002 f8a8 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028e0:	2104      	movs	r1, #4
 80028e2:	4879      	ldr	r0, [pc, #484]	; (8002ac8 <menu+0x1830>)
 80028e4:	f006 fc76 	bl	80091d4 <HAL_GPIO_ReadPin>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d115      	bne.n	800291a <menu+0x1682>
 80028ee:	4b77      	ldr	r3, [pc, #476]	; (8002acc <menu+0x1834>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00e      	beq.n	800291a <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80028fc:	4b70      	ldr	r3, [pc, #448]	; (8002ac0 <menu+0x1828>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	3b01      	subs	r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b6e      	ldr	r3, [pc, #440]	; (8002ac0 <menu+0x1828>)
 8002906:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002908:	4b6d      	ldr	r3, [pc, #436]	; (8002ac0 <menu+0x1828>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d902      	bls.n	8002916 <menu+0x167e>
		   		kapi2Tip = 2;
 8002910:	4b6b      	ldr	r3, [pc, #428]	; (8002ac0 <menu+0x1828>)
 8002912:	2202      	movs	r2, #2
 8002914:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002916:	f002 f88b 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800291a:	2108      	movs	r1, #8
 800291c:	486a      	ldr	r0, [pc, #424]	; (8002ac8 <menu+0x1830>)
 800291e:	f006 fc59 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d10d      	bne.n	8002944 <menu+0x16ac>
 8002928:	4b68      	ldr	r3, [pc, #416]	; (8002acc <menu+0x1834>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	f083 0301 	eor.w	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002936:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <menu+0x1828>)
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <menu+0x1838>)
 800293c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800293e:	4b65      	ldr	r3, [pc, #404]	; (8002ad4 <menu+0x183c>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002944:	4b64      	ldr	r3, [pc, #400]	; (8002ad8 <menu+0x1840>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b0c      	cmp	r3, #12
 800294a:	d17f      	bne.n	8002a4c <menu+0x17b4>
		if(dilSecim == 0) {
 800294c:	4b63      	ldr	r3, [pc, #396]	; (8002adc <menu+0x1844>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002954:	4a62      	ldr	r2, [pc, #392]	; (8002ae0 <menu+0x1848>)
 8002956:	2101      	movs	r1, #1
 8002958:	2001      	movs	r0, #1
 800295a:	f005 f915 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800295e:	4a61      	ldr	r2, [pc, #388]	; (8002ae4 <menu+0x184c>)
 8002960:	2101      	movs	r1, #1
 8002962:	2002      	movs	r0, #2
 8002964:	f005 f910 	bl	8007b88 <lcd_print>
 8002968:	e00d      	b.n	8002986 <menu+0x16ee>
		} else if(dilSecim == 1) {
 800296a:	4b5c      	ldr	r3, [pc, #368]	; (8002adc <menu+0x1844>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d109      	bne.n	8002986 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002972:	4a5d      	ldr	r2, [pc, #372]	; (8002ae8 <menu+0x1850>)
 8002974:	2101      	movs	r1, #1
 8002976:	2001      	movs	r0, #1
 8002978:	f005 f906 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800297c:	4a5b      	ldr	r2, [pc, #364]	; (8002aec <menu+0x1854>)
 800297e:	2101      	movs	r1, #1
 8002980:	2002      	movs	r0, #2
 8002982:	f005 f901 	bl	8007b88 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002986:	4b5a      	ldr	r3, [pc, #360]	; (8002af0 <menu+0x1858>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	220a      	movs	r2, #10
 800298c:	4959      	ldr	r1, [pc, #356]	; (8002af4 <menu+0x185c>)
 800298e:	4618      	mov	r0, r3
 8002990:	f009 fc4c 	bl	800c22c <itoa>
		lcd_print(2,16,snum);
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <menu+0x185c>)
 8002996:	2110      	movs	r1, #16
 8002998:	2002      	movs	r0, #2
 800299a:	f005 f8f5 	bl	8007b88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800299e:	2102      	movs	r1, #2
 80029a0:	4849      	ldr	r0, [pc, #292]	; (8002ac8 <menu+0x1830>)
 80029a2:	f006 fc17 	bl	80091d4 <HAL_GPIO_ReadPin>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d119      	bne.n	80029e0 <menu+0x1748>
 80029ac:	4b47      	ldr	r3, [pc, #284]	; (8002acc <menu+0x1834>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d012      	beq.n	80029e0 <menu+0x1748>
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <menu+0x1828>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10e      	bne.n	80029e0 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 80029c2:	4b4b      	ldr	r3, [pc, #300]	; (8002af0 <menu+0x1858>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	3301      	adds	r3, #1
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <menu+0x1858>)
 80029cc:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80029ce:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <menu+0x1858>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d902      	bls.n	80029dc <menu+0x1744>
				kapi2AcSure = 0;
 80029d6:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <menu+0x1858>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029dc:	f002 f828 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80029e0:	2104      	movs	r1, #4
 80029e2:	4839      	ldr	r0, [pc, #228]	; (8002ac8 <menu+0x1830>)
 80029e4:	f006 fbf6 	bl	80091d4 <HAL_GPIO_ReadPin>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d119      	bne.n	8002a22 <menu+0x178a>
 80029ee:	4b37      	ldr	r3, [pc, #220]	; (8002acc <menu+0x1834>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f083 0301 	eor.w	r3, r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <menu+0x178a>
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <menu+0x1828>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10e      	bne.n	8002a22 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002a04:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <menu+0x1858>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <menu+0x1858>)
 8002a0e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a10:	4b37      	ldr	r3, [pc, #220]	; (8002af0 <menu+0x1858>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b06      	cmp	r3, #6
 8002a16:	d902      	bls.n	8002a1e <menu+0x1786>
		   		kapi2AcSure = 5;
 8002a18:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <menu+0x1858>)
 8002a1a:	2205      	movs	r2, #5
 8002a1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a1e:	f002 f807 	bl	8004a30 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a22:	2108      	movs	r1, #8
 8002a24:	4828      	ldr	r0, [pc, #160]	; (8002ac8 <menu+0x1830>)
 8002a26:	f006 fbd5 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d10d      	bne.n	8002a4c <menu+0x17b4>
 8002a30:	4b26      	ldr	r3, [pc, #152]	; (8002acc <menu+0x1834>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	f083 0301 	eor.w	r3, r3, #1
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002a3e:	4b2c      	ldr	r3, [pc, #176]	; (8002af0 <menu+0x1858>)
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <menu+0x1838>)
 8002a44:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002a46:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <menu+0x183c>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002a4c:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <menu+0x1840>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b0d      	cmp	r3, #13
 8002a52:	f040 80b5 	bne.w	8002bc0 <menu+0x1928>
		if(dilSecim == 0) {
 8002a56:	4b21      	ldr	r3, [pc, #132]	; (8002adc <menu+0x1844>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002a5e:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <menu+0x1860>)
 8002a60:	2101      	movs	r1, #1
 8002a62:	2001      	movs	r0, #1
 8002a64:	f005 f890 	bl	8007b88 <lcd_print>
 8002a68:	e008      	b.n	8002a7c <menu+0x17e4>
		} else if(dilSecim == 1){
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <menu+0x1844>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d104      	bne.n	8002a7c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002a72:	4a22      	ldr	r2, [pc, #136]	; (8002afc <menu+0x1864>)
 8002a74:	2101      	movs	r1, #1
 8002a76:	2001      	movs	r0, #1
 8002a78:	f005 f886 	bl	8007b88 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <menu+0x1868>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002a84:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <menu+0x186c>)
 8002a86:	2101      	movs	r1, #1
 8002a88:	2002      	movs	r0, #2
 8002a8a:	f005 f87d 	bl	8007b88 <lcd_print>
 8002a8e:	e048      	b.n	8002b22 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <menu+0x1868>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d13b      	bne.n	8002b10 <menu+0x1878>
			if(dilSecim == 0) {
 8002a98:	4b10      	ldr	r3, [pc, #64]	; (8002adc <menu+0x1844>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002aa0:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <menu+0x1870>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f005 f86f 	bl	8007b88 <lcd_print>
 8002aaa:	e03a      	b.n	8002b22 <menu+0x188a>
			} else if(dilSecim == 1) {
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <menu+0x1844>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d136      	bne.n	8002b22 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002ab4:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <menu+0x1874>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f005 f865 	bl	8007b88 <lcd_print>
 8002abe:	e030      	b.n	8002b22 <menu+0x188a>
 8002ac0:	20000222 	.word	0x20000222
 8002ac4:	0800d3b8 	.word	0x0800d3b8
 8002ac8:	40010800 	.word	0x40010800
 8002acc:	20000247 	.word	0x20000247
 8002ad0:	2000011c 	.word	0x2000011c
 8002ad4:	20000244 	.word	0x20000244
 8002ad8:	20000218 	.word	0x20000218
 8002adc:	20000239 	.word	0x20000239
 8002ae0:	0800d438 	.word	0x0800d438
 8002ae4:	0800d3dc 	.word	0x0800d3dc
 8002ae8:	0800d44c 	.word	0x0800d44c
 8002aec:	0800d400 	.word	0x0800d400
 8002af0:	20000232 	.word	0x20000232
 8002af4:	2000018c 	.word	0x2000018c
 8002af8:	0800d460 	.word	0x0800d460
 8002afc:	0800d474 	.word	0x0800d474
 8002b00:	20000223 	.word	0x20000223
 8002b04:	0800d380 	.word	0x0800d380
 8002b08:	0800d394 	.word	0x0800d394
 8002b0c:	0800d3a4 	.word	0x0800d3a4
			}
		} else if(kapitablaTip == 2) {
 8002b10:	4b5b      	ldr	r3, [pc, #364]	; (8002c80 <menu+0x19e8>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d104      	bne.n	8002b22 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002b18:	4a5a      	ldr	r2, [pc, #360]	; (8002c84 <menu+0x19ec>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f005 f833 	bl	8007b88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b22:	2102      	movs	r1, #2
 8002b24:	4858      	ldr	r0, [pc, #352]	; (8002c88 <menu+0x19f0>)
 8002b26:	f006 fb55 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d115      	bne.n	8002b5c <menu+0x18c4>
 8002b30:	4b56      	ldr	r3, [pc, #344]	; (8002c8c <menu+0x19f4>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	f083 0301 	eor.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00e      	beq.n	8002b5c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002b3e:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <menu+0x19e8>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4b4e      	ldr	r3, [pc, #312]	; (8002c80 <menu+0x19e8>)
 8002b48:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002b4a:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <menu+0x19e8>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d902      	bls.n	8002b58 <menu+0x18c0>
				kapitablaTip = 0;
 8002b52:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <menu+0x19e8>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b58:	f001 ff6a 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	484a      	ldr	r0, [pc, #296]	; (8002c88 <menu+0x19f0>)
 8002b60:	f006 fb38 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d115      	bne.n	8002b96 <menu+0x18fe>
 8002b6a:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <menu+0x19f4>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	f083 0301 	eor.w	r3, r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00e      	beq.n	8002b96 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002b78:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <menu+0x19e8>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <menu+0x19e8>)
 8002b82:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002b84:	4b3e      	ldr	r3, [pc, #248]	; (8002c80 <menu+0x19e8>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d902      	bls.n	8002b92 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002b8c:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <menu+0x19e8>)
 8002b8e:	2202      	movs	r2, #2
 8002b90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b92:	f001 ff4d 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b96:	2108      	movs	r1, #8
 8002b98:	483b      	ldr	r0, [pc, #236]	; (8002c88 <menu+0x19f0>)
 8002b9a:	f006 fb1b 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10d      	bne.n	8002bc0 <menu+0x1928>
 8002ba4:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <menu+0x19f4>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	f083 0301 	eor.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d006      	beq.n	8002bc0 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002bb2:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <menu+0x19e8>)
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <menu+0x19f8>)
 8002bb8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <menu+0x19fc>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002bc0:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <menu+0x1a00>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b0e      	cmp	r3, #14
 8002bc6:	f040 80f2 	bne.w	8002dae <menu+0x1b16>
		if(dilSecim == 0) {
 8002bca:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <menu+0x1a04>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002bd2:	4a33      	ldr	r2, [pc, #204]	; (8002ca0 <menu+0x1a08>)
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f004 ffd6 	bl	8007b88 <lcd_print>
 8002bdc:	e008      	b.n	8002bf0 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <menu+0x1a04>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d104      	bne.n	8002bf0 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002be6:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <menu+0x1a0c>)
 8002be8:	2101      	movs	r1, #1
 8002bea:	2001      	movs	r0, #1
 8002bec:	f004 ffcc 	bl	8007b88 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <menu+0x1a10>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d113      	bne.n	8002c20 <menu+0x1988>
			if(dilSecim == 0){
 8002bf8:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <menu+0x1a04>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002c00:	4a2a      	ldr	r2, [pc, #168]	; (8002cac <menu+0x1a14>)
 8002c02:	2101      	movs	r1, #1
 8002c04:	2002      	movs	r0, #2
 8002c06:	f004 ffbf 	bl	8007b88 <lcd_print>
 8002c0a:	e071      	b.n	8002cf0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c0c:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <menu+0x1a04>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d16d      	bne.n	8002cf0 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002c14:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <menu+0x1a18>)
 8002c16:	2101      	movs	r1, #1
 8002c18:	2002      	movs	r0, #2
 8002c1a:	f004 ffb5 	bl	8007b88 <lcd_print>
 8002c1e:	e067      	b.n	8002cf0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <menu+0x1a10>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d112      	bne.n	8002c4e <menu+0x19b6>
			if(dilSecim == 0){
 8002c28:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <menu+0x1a04>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d104      	bne.n	8002c3a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002c30:	4a20      	ldr	r2, [pc, #128]	; (8002cb4 <menu+0x1a1c>)
 8002c32:	2101      	movs	r1, #1
 8002c34:	2002      	movs	r0, #2
 8002c36:	f004 ffa7 	bl	8007b88 <lcd_print>
			}
			if(dilSecim == 1){
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <menu+0x1a04>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d156      	bne.n	8002cf0 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002c42:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <menu+0x1a20>)
 8002c44:	2101      	movs	r1, #1
 8002c46:	2002      	movs	r0, #2
 8002c48:	f004 ff9e 	bl	8007b88 <lcd_print>
 8002c4c:	e050      	b.n	8002cf0 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <menu+0x1a10>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d136      	bne.n	8002cc4 <menu+0x1a2c>
			if(dilSecim == 0){
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <menu+0x1a04>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d105      	bne.n	8002c6a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002c5e:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <menu+0x1a24>)
 8002c60:	2101      	movs	r1, #1
 8002c62:	2002      	movs	r0, #2
 8002c64:	f004 ff90 	bl	8007b88 <lcd_print>
 8002c68:	e042      	b.n	8002cf0 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <menu+0x1a04>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d13e      	bne.n	8002cf0 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002c72:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <menu+0x1a28>)
 8002c74:	2101      	movs	r1, #1
 8002c76:	2002      	movs	r0, #2
 8002c78:	f004 ff86 	bl	8007b88 <lcd_print>
 8002c7c:	e038      	b.n	8002cf0 <menu+0x1a58>
 8002c7e:	bf00      	nop
 8002c80:	20000223 	.word	0x20000223
 8002c84:	0800d3b8 	.word	0x0800d3b8
 8002c88:	40010800 	.word	0x40010800
 8002c8c:	20000247 	.word	0x20000247
 8002c90:	2000011c 	.word	0x2000011c
 8002c94:	20000244 	.word	0x20000244
 8002c98:	20000218 	.word	0x20000218
 8002c9c:	20000239 	.word	0x20000239
 8002ca0:	0800d488 	.word	0x0800d488
 8002ca4:	0800d49c 	.word	0x0800d49c
 8002ca8:	20000225 	.word	0x20000225
 8002cac:	0800d4b0 	.word	0x0800d4b0
 8002cb0:	0800d4c0 	.word	0x0800d4c0
 8002cb4:	0800d4d0 	.word	0x0800d4d0
 8002cb8:	0800d4e0 	.word	0x0800d4e0
 8002cbc:	0800d4f0 	.word	0x0800d4f0
 8002cc0:	0800d504 	.word	0x0800d504
			}
		} else if(kapiTablaAcKonum == 3) {
 8002cc4:	4b9b      	ldr	r3, [pc, #620]	; (8002f34 <menu+0x1c9c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d111      	bne.n	8002cf0 <menu+0x1a58>
			if(dilSecim == 0) {
 8002ccc:	4b9a      	ldr	r3, [pc, #616]	; (8002f38 <menu+0x1ca0>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d104      	bne.n	8002cde <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002cd4:	4a99      	ldr	r2, [pc, #612]	; (8002f3c <menu+0x1ca4>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2002      	movs	r0, #2
 8002cda:	f004 ff55 	bl	8007b88 <lcd_print>
			}
			if(dilSecim == 1) {
 8002cde:	4b96      	ldr	r3, [pc, #600]	; (8002f38 <menu+0x1ca0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d104      	bne.n	8002cf0 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002ce6:	4a96      	ldr	r2, [pc, #600]	; (8002f40 <menu+0x1ca8>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2002      	movs	r0, #2
 8002cec:	f004 ff4c 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	4894      	ldr	r0, [pc, #592]	; (8002f44 <menu+0x1cac>)
 8002cf4:	f006 fa6e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d115      	bne.n	8002d2a <menu+0x1a92>
 8002cfe:	4b92      	ldr	r3, [pc, #584]	; (8002f48 <menu+0x1cb0>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	f083 0301 	eor.w	r3, r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002d0c:	4b89      	ldr	r3, [pc, #548]	; (8002f34 <menu+0x1c9c>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b87      	ldr	r3, [pc, #540]	; (8002f34 <menu+0x1c9c>)
 8002d16:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002d18:	4b86      	ldr	r3, [pc, #536]	; (8002f34 <menu+0x1c9c>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d902      	bls.n	8002d26 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002d20:	4b84      	ldr	r3, [pc, #528]	; (8002f34 <menu+0x1c9c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d26:	f001 fe83 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	4885      	ldr	r0, [pc, #532]	; (8002f44 <menu+0x1cac>)
 8002d2e:	f006 fa51 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d115      	bne.n	8002d64 <menu+0x1acc>
 8002d38:	4b83      	ldr	r3, [pc, #524]	; (8002f48 <menu+0x1cb0>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	f083 0301 	eor.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00e      	beq.n	8002d64 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002d46:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <menu+0x1c9c>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <menu+0x1c9c>)
 8002d50:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002d52:	4b78      	ldr	r3, [pc, #480]	; (8002f34 <menu+0x1c9c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d902      	bls.n	8002d60 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002d5a:	4b76      	ldr	r3, [pc, #472]	; (8002f34 <menu+0x1c9c>)
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d60:	f001 fe66 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d64:	2108      	movs	r1, #8
 8002d66:	4877      	ldr	r0, [pc, #476]	; (8002f44 <menu+0x1cac>)
 8002d68:	f006 fa34 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d11d      	bne.n	8002dae <menu+0x1b16>
 8002d72:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <menu+0x1cb0>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	f083 0301 	eor.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d016      	beq.n	8002dae <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002d80:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <menu+0x1c9c>)
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	4b71      	ldr	r3, [pc, #452]	; (8002f4c <menu+0x1cb4>)
 8002d86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <menu+0x1c9c>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <menu+0x1b02>
 8002d92:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <menu+0x1c9c>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d106      	bne.n	8002da8 <menu+0x1b10>
				altLimit = 1;
 8002d9a:	4b6d      	ldr	r3, [pc, #436]	; (8002f50 <menu+0x1cb8>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002da0:	4b6b      	ldr	r3, [pc, #428]	; (8002f50 <menu+0x1cb8>)
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	4b69      	ldr	r3, [pc, #420]	; (8002f4c <menu+0x1cb4>)
 8002da6:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002da8:	4b6a      	ldr	r3, [pc, #424]	; (8002f54 <menu+0x1cbc>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002dae:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <menu+0x1cc0>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b0f      	cmp	r3, #15
 8002db4:	d17f      	bne.n	8002eb6 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002db6:	4b60      	ldr	r3, [pc, #384]	; (8002f38 <menu+0x1ca0>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002dbe:	4a67      	ldr	r2, [pc, #412]	; (8002f5c <menu+0x1cc4>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f004 fee0 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002dc8:	4a65      	ldr	r2, [pc, #404]	; (8002f60 <menu+0x1cc8>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	2002      	movs	r0, #2
 8002dce:	f004 fedb 	bl	8007b88 <lcd_print>
 8002dd2:	e00d      	b.n	8002df0 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002dd4:	4b58      	ldr	r3, [pc, #352]	; (8002f38 <menu+0x1ca0>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d109      	bne.n	8002df0 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002ddc:	4a61      	ldr	r2, [pc, #388]	; (8002f64 <menu+0x1ccc>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	2001      	movs	r0, #1
 8002de2:	f004 fed1 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002de6:	4a60      	ldr	r2, [pc, #384]	; (8002f68 <menu+0x1cd0>)
 8002de8:	2101      	movs	r1, #1
 8002dea:	2002      	movs	r0, #2
 8002dec:	f004 fecc 	bl	8007b88 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002df0:	4b5e      	ldr	r3, [pc, #376]	; (8002f6c <menu+0x1cd4>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	220a      	movs	r2, #10
 8002df6:	495e      	ldr	r1, [pc, #376]	; (8002f70 <menu+0x1cd8>)
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f009 fa17 	bl	800c22c <itoa>
		lcd_print(2,16,snum);
 8002dfe:	4a5c      	ldr	r2, [pc, #368]	; (8002f70 <menu+0x1cd8>)
 8002e00:	2110      	movs	r1, #16
 8002e02:	2002      	movs	r0, #2
 8002e04:	f004 fec0 	bl	8007b88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e08:	2102      	movs	r1, #2
 8002e0a:	484e      	ldr	r0, [pc, #312]	; (8002f44 <menu+0x1cac>)
 8002e0c:	f006 f9e2 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d119      	bne.n	8002e4a <menu+0x1bb2>
 8002e16:	4b4c      	ldr	r3, [pc, #304]	; (8002f48 <menu+0x1cb0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f083 0301 	eor.w	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <menu+0x1bb2>
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <menu+0x1cdc>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10e      	bne.n	8002e4a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <menu+0x1cd4>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	4b4d      	ldr	r3, [pc, #308]	; (8002f6c <menu+0x1cd4>)
 8002e36:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002e38:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <menu+0x1cd4>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d902      	bls.n	8002e46 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <menu+0x1cd4>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e46:	f001 fdf3 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	483d      	ldr	r0, [pc, #244]	; (8002f44 <menu+0x1cac>)
 8002e4e:	f006 f9c1 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d119      	bne.n	8002e8c <menu+0x1bf4>
 8002e58:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <menu+0x1cb0>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	f083 0301 	eor.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d012      	beq.n	8002e8c <menu+0x1bf4>
 8002e66:	4b43      	ldr	r3, [pc, #268]	; (8002f74 <menu+0x1cdc>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10e      	bne.n	8002e8c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002e6e:	4b3f      	ldr	r3, [pc, #252]	; (8002f6c <menu+0x1cd4>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <menu+0x1cd4>)
 8002e78:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002e7a:	4b3c      	ldr	r3, [pc, #240]	; (8002f6c <menu+0x1cd4>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002e82:	4b3a      	ldr	r3, [pc, #232]	; (8002f6c <menu+0x1cd4>)
 8002e84:	2205      	movs	r2, #5
 8002e86:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002e88:	f001 fdd2 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e8c:	2108      	movs	r1, #8
 8002e8e:	482d      	ldr	r0, [pc, #180]	; (8002f44 <menu+0x1cac>)
 8002e90:	f006 f9a0 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10d      	bne.n	8002eb6 <menu+0x1c1e>
 8002e9a:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <menu+0x1cb0>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	f083 0301 	eor.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <menu+0x1cd4>)
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <menu+0x1cb4>)
 8002eae:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002eb0:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <menu+0x1cbc>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002eb6:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <menu+0x1cc0>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	f040 80bc 	bne.w	8003038 <menu+0x1da0>
		if(dilSecim == 0) {
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <menu+0x1ca0>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002ec8:	4a2b      	ldr	r2, [pc, #172]	; (8002f78 <menu+0x1ce0>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f004 fe5b 	bl	8007b88 <lcd_print>
 8002ed2:	e008      	b.n	8002ee6 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <menu+0x1ca0>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d104      	bne.n	8002ee6 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002edc:	4a27      	ldr	r2, [pc, #156]	; (8002f7c <menu+0x1ce4>)
 8002ede:	2101      	movs	r1, #1
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f004 fe51 	bl	8007b88 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <menu+0x1ce8>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d113      	bne.n	8002f16 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <menu+0x1ca0>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d105      	bne.n	8002f02 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002ef6:	4a11      	ldr	r2, [pc, #68]	; (8002f3c <menu+0x1ca4>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	2002      	movs	r0, #2
 8002efc:	f004 fe44 	bl	8007b88 <lcd_print>
 8002f00:	e04b      	b.n	8002f9a <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <menu+0x1ca0>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d147      	bne.n	8002f9a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <menu+0x1ca8>)
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f004 fe3a 	bl	8007b88 <lcd_print>
 8002f14:	e041      	b.n	8002f9a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002f16:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <menu+0x1ce8>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d13d      	bne.n	8002f9a <menu+0x1d02>
			if(dilSecim == 0) {
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <menu+0x1ca0>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d130      	bne.n	8002f88 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002f26:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <menu+0x1cec>)
 8002f28:	2101      	movs	r1, #1
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	f004 fe2c 	bl	8007b88 <lcd_print>
 8002f30:	e033      	b.n	8002f9a <menu+0x1d02>
 8002f32:	bf00      	nop
 8002f34:	20000225 	.word	0x20000225
 8002f38:	20000239 	.word	0x20000239
 8002f3c:	0800d178 	.word	0x0800d178
 8002f40:	0800d18c 	.word	0x0800d18c
 8002f44:	40010800 	.word	0x40010800
 8002f48:	20000247 	.word	0x20000247
 8002f4c:	2000011c 	.word	0x2000011c
 8002f50:	2000021e 	.word	0x2000021e
 8002f54:	20000244 	.word	0x20000244
 8002f58:	20000218 	.word	0x20000218
 8002f5c:	0800d518 	.word	0x0800d518
 8002f60:	0800d3dc 	.word	0x0800d3dc
 8002f64:	0800d52c 	.word	0x0800d52c
 8002f68:	0800d400 	.word	0x0800d400
 8002f6c:	20000233 	.word	0x20000233
 8002f70:	2000018c 	.word	0x2000018c
 8002f74:	20000223 	.word	0x20000223
 8002f78:	0800d540 	.word	0x0800d540
 8002f7c:	0800d554 	.word	0x0800d554
 8002f80:	20000226 	.word	0x20000226
 8002f84:	0800d1d8 	.word	0x0800d1d8
			} else if(dilSecim == 1) {
 8002f88:	4b99      	ldr	r3, [pc, #612]	; (80031f0 <menu+0x1f58>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d104      	bne.n	8002f9a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002f90:	4a98      	ldr	r2, [pc, #608]	; (80031f4 <menu+0x1f5c>)
 8002f92:	2101      	movs	r1, #1
 8002f94:	2002      	movs	r0, #2
 8002f96:	f004 fdf7 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	4896      	ldr	r0, [pc, #600]	; (80031f8 <menu+0x1f60>)
 8002f9e:	f006 f919 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d115      	bne.n	8002fd4 <menu+0x1d3c>
 8002fa8:	4b94      	ldr	r3, [pc, #592]	; (80031fc <menu+0x1f64>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	f083 0301 	eor.w	r3, r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00e      	beq.n	8002fd4 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002fb6:	4b92      	ldr	r3, [pc, #584]	; (8003200 <menu+0x1f68>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4b90      	ldr	r3, [pc, #576]	; (8003200 <menu+0x1f68>)
 8002fc0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002fc2:	4b8f      	ldr	r3, [pc, #572]	; (8003200 <menu+0x1f68>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d902      	bls.n	8002fd0 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002fca:	4b8d      	ldr	r3, [pc, #564]	; (8003200 <menu+0x1f68>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fd0:	f001 fd2e 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fd4:	2104      	movs	r1, #4
 8002fd6:	4888      	ldr	r0, [pc, #544]	; (80031f8 <menu+0x1f60>)
 8002fd8:	f006 f8fc 	bl	80091d4 <HAL_GPIO_ReadPin>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d115      	bne.n	800300e <menu+0x1d76>
 8002fe2:	4b86      	ldr	r3, [pc, #536]	; (80031fc <menu+0x1f64>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	f083 0301 	eor.w	r3, r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00e      	beq.n	800300e <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002ff0:	4b83      	ldr	r3, [pc, #524]	; (8003200 <menu+0x1f68>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	4b81      	ldr	r3, [pc, #516]	; (8003200 <menu+0x1f68>)
 8002ffa:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002ffc:	4b80      	ldr	r3, [pc, #512]	; (8003200 <menu+0x1f68>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8003004:	4b7e      	ldr	r3, [pc, #504]	; (8003200 <menu+0x1f68>)
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800300a:	f001 fd11 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800300e:	2108      	movs	r1, #8
 8003010:	4879      	ldr	r0, [pc, #484]	; (80031f8 <menu+0x1f60>)
 8003012:	f006 f8df 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003016:	4603      	mov	r3, r0
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10d      	bne.n	8003038 <menu+0x1da0>
 800301c:	4b77      	ldr	r3, [pc, #476]	; (80031fc <menu+0x1f64>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	f083 0301 	eor.w	r3, r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800302a:	4b75      	ldr	r3, [pc, #468]	; (8003200 <menu+0x1f68>)
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	4b75      	ldr	r3, [pc, #468]	; (8003204 <menu+0x1f6c>)
 8003030:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003032:	4b75      	ldr	r3, [pc, #468]	; (8003208 <menu+0x1f70>)
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003038:	4b74      	ldr	r3, [pc, #464]	; (800320c <menu+0x1f74>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b11      	cmp	r3, #17
 800303e:	f040 80c3 	bne.w	80031c8 <menu+0x1f30>
		if(dilSecim == 0) {
 8003042:	4b6b      	ldr	r3, [pc, #428]	; (80031f0 <menu+0x1f58>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800304a:	4a71      	ldr	r2, [pc, #452]	; (8003210 <menu+0x1f78>)
 800304c:	2101      	movs	r1, #1
 800304e:	2001      	movs	r0, #1
 8003050:	f004 fd9a 	bl	8007b88 <lcd_print>
 8003054:	e008      	b.n	8003068 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003056:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <menu+0x1f58>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d104      	bne.n	8003068 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800305e:	4a6d      	ldr	r2, [pc, #436]	; (8003214 <menu+0x1f7c>)
 8003060:	2101      	movs	r1, #1
 8003062:	2001      	movs	r0, #1
 8003064:	f004 fd90 	bl	8007b88 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003068:	4b6b      	ldr	r3, [pc, #428]	; (8003218 <menu+0x1f80>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d113      	bne.n	8003098 <menu+0x1e00>
			if(dilSecim == 0){
 8003070:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <menu+0x1f58>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003078:	4a68      	ldr	r2, [pc, #416]	; (800321c <menu+0x1f84>)
 800307a:	2101      	movs	r1, #1
 800307c:	2002      	movs	r0, #2
 800307e:	f004 fd83 	bl	8007b88 <lcd_print>
 8003082:	e038      	b.n	80030f6 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003084:	4b5a      	ldr	r3, [pc, #360]	; (80031f0 <menu+0x1f58>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d134      	bne.n	80030f6 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 800308c:	4a64      	ldr	r2, [pc, #400]	; (8003220 <menu+0x1f88>)
 800308e:	2101      	movs	r1, #1
 8003090:	2002      	movs	r0, #2
 8003092:	f004 fd79 	bl	8007b88 <lcd_print>
 8003096:	e02e      	b.n	80030f6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003098:	4b5f      	ldr	r3, [pc, #380]	; (8003218 <menu+0x1f80>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d113      	bne.n	80030c8 <menu+0x1e30>
			if(dilSecim == 0){
 80030a0:	4b53      	ldr	r3, [pc, #332]	; (80031f0 <menu+0x1f58>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80030a8:	4a5e      	ldr	r2, [pc, #376]	; (8003224 <menu+0x1f8c>)
 80030aa:	2101      	movs	r1, #1
 80030ac:	2002      	movs	r0, #2
 80030ae:	f004 fd6b 	bl	8007b88 <lcd_print>
 80030b2:	e020      	b.n	80030f6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80030b4:	4b4e      	ldr	r3, [pc, #312]	; (80031f0 <menu+0x1f58>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d11c      	bne.n	80030f6 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80030bc:	4a5a      	ldr	r2, [pc, #360]	; (8003228 <menu+0x1f90>)
 80030be:	2101      	movs	r1, #1
 80030c0:	2002      	movs	r0, #2
 80030c2:	f004 fd61 	bl	8007b88 <lcd_print>
 80030c6:	e016      	b.n	80030f6 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80030c8:	4b53      	ldr	r3, [pc, #332]	; (8003218 <menu+0x1f80>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d112      	bne.n	80030f6 <menu+0x1e5e>
			if(dilSecim == 0) {
 80030d0:	4b47      	ldr	r3, [pc, #284]	; (80031f0 <menu+0x1f58>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80030d8:	4a54      	ldr	r2, [pc, #336]	; (800322c <menu+0x1f94>)
 80030da:	2101      	movs	r1, #1
 80030dc:	2002      	movs	r0, #2
 80030de:	f004 fd53 	bl	8007b88 <lcd_print>
 80030e2:	e008      	b.n	80030f6 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80030e4:	4b42      	ldr	r3, [pc, #264]	; (80031f0 <menu+0x1f58>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d104      	bne.n	80030f6 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80030ec:	4a50      	ldr	r2, [pc, #320]	; (8003230 <menu+0x1f98>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	2002      	movs	r0, #2
 80030f2:	f004 fd49 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030f6:	2102      	movs	r1, #2
 80030f8:	483f      	ldr	r0, [pc, #252]	; (80031f8 <menu+0x1f60>)
 80030fa:	f006 f86b 	bl	80091d4 <HAL_GPIO_ReadPin>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b01      	cmp	r3, #1
 8003102:	d115      	bne.n	8003130 <menu+0x1e98>
 8003104:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <menu+0x1f64>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	f083 0301 	eor.w	r3, r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00e      	beq.n	8003130 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003112:	4b41      	ldr	r3, [pc, #260]	; (8003218 <menu+0x1f80>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <menu+0x1f80>)
 800311c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800311e:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <menu+0x1f80>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d902      	bls.n	800312c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8003126:	4b3c      	ldr	r3, [pc, #240]	; (8003218 <menu+0x1f80>)
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800312c:	f001 fc80 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003130:	2104      	movs	r1, #4
 8003132:	4831      	ldr	r0, [pc, #196]	; (80031f8 <menu+0x1f60>)
 8003134:	f006 f84e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003138:	4603      	mov	r3, r0
 800313a:	2b01      	cmp	r3, #1
 800313c:	d115      	bne.n	800316a <menu+0x1ed2>
 800313e:	4b2f      	ldr	r3, [pc, #188]	; (80031fc <menu+0x1f64>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	f083 0301 	eor.w	r3, r3, #1
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00e      	beq.n	800316a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800314c:	4b32      	ldr	r3, [pc, #200]	; (8003218 <menu+0x1f80>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	3b01      	subs	r3, #1
 8003152:	b2da      	uxtb	r2, r3
 8003154:	4b30      	ldr	r3, [pc, #192]	; (8003218 <menu+0x1f80>)
 8003156:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003158:	4b2f      	ldr	r3, [pc, #188]	; (8003218 <menu+0x1f80>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d902      	bls.n	8003166 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <menu+0x1f80>)
 8003162:	2202      	movs	r2, #2
 8003164:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003166:	f001 fc63 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800316a:	2108      	movs	r1, #8
 800316c:	4822      	ldr	r0, [pc, #136]	; (80031f8 <menu+0x1f60>)
 800316e:	f006 f831 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003172:	4603      	mov	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d127      	bne.n	80031c8 <menu+0x1f30>
 8003178:	4b20      	ldr	r3, [pc, #128]	; (80031fc <menu+0x1f64>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	f083 0301 	eor.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d020      	beq.n	80031c8 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003186:	4b24      	ldr	r3, [pc, #144]	; (8003218 <menu+0x1f80>)
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <menu+0x1f6c>)
 800318c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800318e:	4b22      	ldr	r3, [pc, #136]	; (8003218 <menu+0x1f80>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d003      	beq.n	800319e <menu+0x1f06>
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <menu+0x1f80>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d106      	bne.n	80031ac <menu+0x1f14>
				calismaSekli = 0;
 800319e:	4b25      	ldr	r3, [pc, #148]	; (8003234 <menu+0x1f9c>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <menu+0x1f9c>)
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	4b16      	ldr	r3, [pc, #88]	; (8003204 <menu+0x1f6c>)
 80031aa:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <menu+0x1f80>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <menu+0x1fa0>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80031ba:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <menu+0x1fa0>)
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <menu+0x1f6c>)
 80031c0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <menu+0x1f70>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <menu+0x1f74>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b12      	cmp	r3, #18
 80031ce:	f040 80d5 	bne.w	800337c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <menu+0x1f80>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d13c      	bne.n	8003254 <menu+0x1fbc>
			if(dilSecim == 0) {
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <menu+0x1f58>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d12e      	bne.n	8003240 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80031e2:	4a16      	ldr	r2, [pc, #88]	; (800323c <menu+0x1fa4>)
 80031e4:	2101      	movs	r1, #1
 80031e6:	2001      	movs	r0, #1
 80031e8:	f004 fcce 	bl	8007b88 <lcd_print>
 80031ec:	e048      	b.n	8003280 <menu+0x1fe8>
 80031ee:	bf00      	nop
 80031f0:	20000239 	.word	0x20000239
 80031f4:	0800d1ec 	.word	0x0800d1ec
 80031f8:	40010800 	.word	0x40010800
 80031fc:	20000247 	.word	0x20000247
 8003200:	20000226 	.word	0x20000226
 8003204:	2000011c 	.word	0x2000011c
 8003208:	20000244 	.word	0x20000244
 800320c:	20000218 	.word	0x20000218
 8003210:	0800d568 	.word	0x0800d568
 8003214:	0800d57c 	.word	0x0800d57c
 8003218:	20000227 	.word	0x20000227
 800321c:	0800d590 	.word	0x0800d590
 8003220:	0800d5a0 	.word	0x0800d5a0
 8003224:	0800d5b0 	.word	0x0800d5b0
 8003228:	0800d5c0 	.word	0x0800d5c0
 800322c:	0800d178 	.word	0x0800d178
 8003230:	0800d18c 	.word	0x0800d18c
 8003234:	20000219 	.word	0x20000219
 8003238:	2000022a 	.word	0x2000022a
 800323c:	0800d5d0 	.word	0x0800d5d0
			} else if(dilSecim == 1) {
 8003240:	4b7b      	ldr	r3, [pc, #492]	; (8003430 <menu+0x2198>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d11b      	bne.n	8003280 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003248:	4a7a      	ldr	r2, [pc, #488]	; (8003434 <menu+0x219c>)
 800324a:	2101      	movs	r1, #1
 800324c:	2001      	movs	r0, #1
 800324e:	f004 fc9b 	bl	8007b88 <lcd_print>
 8003252:	e015      	b.n	8003280 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003254:	4b78      	ldr	r3, [pc, #480]	; (8003438 <menu+0x21a0>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d111      	bne.n	8003280 <menu+0x1fe8>
			if(dilSecim == 0){
 800325c:	4b74      	ldr	r3, [pc, #464]	; (8003430 <menu+0x2198>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d104      	bne.n	800326e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003264:	4a75      	ldr	r2, [pc, #468]	; (800343c <menu+0x21a4>)
 8003266:	2101      	movs	r1, #1
 8003268:	2001      	movs	r0, #1
 800326a:	f004 fc8d 	bl	8007b88 <lcd_print>
			}
			if(dilSecim == 1){
 800326e:	4b70      	ldr	r3, [pc, #448]	; (8003430 <menu+0x2198>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d104      	bne.n	8003280 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003276:	4a72      	ldr	r2, [pc, #456]	; (8003440 <menu+0x21a8>)
 8003278:	2101      	movs	r1, #1
 800327a:	2001      	movs	r0, #1
 800327c:	f004 fc84 	bl	8007b88 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003280:	4b70      	ldr	r3, [pc, #448]	; (8003444 <menu+0x21ac>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d113      	bne.n	80032b0 <menu+0x2018>
			if(dilSecim == 0) {
 8003288:	4b69      	ldr	r3, [pc, #420]	; (8003430 <menu+0x2198>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003290:	4a6d      	ldr	r2, [pc, #436]	; (8003448 <menu+0x21b0>)
 8003292:	2101      	movs	r1, #1
 8003294:	2002      	movs	r0, #2
 8003296:	f004 fc77 	bl	8007b88 <lcd_print>
 800329a:	e020      	b.n	80032de <menu+0x2046>
			} else if(dilSecim == 1){
 800329c:	4b64      	ldr	r3, [pc, #400]	; (8003430 <menu+0x2198>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d11c      	bne.n	80032de <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80032a4:	4a69      	ldr	r2, [pc, #420]	; (800344c <menu+0x21b4>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	2002      	movs	r0, #2
 80032aa:	f004 fc6d 	bl	8007b88 <lcd_print>
 80032ae:	e016      	b.n	80032de <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80032b0:	4b64      	ldr	r3, [pc, #400]	; (8003444 <menu+0x21ac>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d112      	bne.n	80032de <menu+0x2046>
			if(dilSecim == 0){
 80032b8:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <menu+0x2198>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80032c0:	4a63      	ldr	r2, [pc, #396]	; (8003450 <menu+0x21b8>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	2002      	movs	r0, #2
 80032c6:	f004 fc5f 	bl	8007b88 <lcd_print>
 80032ca:	e008      	b.n	80032de <menu+0x2046>
			} else if(dilSecim == 1){
 80032cc:	4b58      	ldr	r3, [pc, #352]	; (8003430 <menu+0x2198>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d104      	bne.n	80032de <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80032d4:	4a5f      	ldr	r2, [pc, #380]	; (8003454 <menu+0x21bc>)
 80032d6:	2101      	movs	r1, #1
 80032d8:	2002      	movs	r0, #2
 80032da:	f004 fc55 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032de:	2102      	movs	r1, #2
 80032e0:	485d      	ldr	r0, [pc, #372]	; (8003458 <menu+0x21c0>)
 80032e2:	f005 ff77 	bl	80091d4 <HAL_GPIO_ReadPin>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d115      	bne.n	8003318 <menu+0x2080>
 80032ec:	4b5b      	ldr	r3, [pc, #364]	; (800345c <menu+0x21c4>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	f083 0301 	eor.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00e      	beq.n	8003318 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80032fa:	4b52      	ldr	r3, [pc, #328]	; (8003444 <menu+0x21ac>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4b50      	ldr	r3, [pc, #320]	; (8003444 <menu+0x21ac>)
 8003304:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003306:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <menu+0x21ac>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d902      	bls.n	8003314 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800330e:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <menu+0x21ac>)
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003314:	f001 fb8c 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003318:	2104      	movs	r1, #4
 800331a:	484f      	ldr	r0, [pc, #316]	; (8003458 <menu+0x21c0>)
 800331c:	f005 ff5a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003320:	4603      	mov	r3, r0
 8003322:	2b01      	cmp	r3, #1
 8003324:	d115      	bne.n	8003352 <menu+0x20ba>
 8003326:	4b4d      	ldr	r3, [pc, #308]	; (800345c <menu+0x21c4>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00e      	beq.n	8003352 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003334:	4b43      	ldr	r3, [pc, #268]	; (8003444 <menu+0x21ac>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	3b01      	subs	r3, #1
 800333a:	b2da      	uxtb	r2, r3
 800333c:	4b41      	ldr	r3, [pc, #260]	; (8003444 <menu+0x21ac>)
 800333e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003340:	4b40      	ldr	r3, [pc, #256]	; (8003444 <menu+0x21ac>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003348:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <menu+0x21ac>)
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800334e:	f001 fb6f 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003352:	2108      	movs	r1, #8
 8003354:	4840      	ldr	r0, [pc, #256]	; (8003458 <menu+0x21c0>)
 8003356:	f005 ff3d 	bl	80091d4 <HAL_GPIO_ReadPin>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d10d      	bne.n	800337c <menu+0x20e4>
 8003360:	4b3e      	ldr	r3, [pc, #248]	; (800345c <menu+0x21c4>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	f083 0301 	eor.w	r3, r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800336e:	4b35      	ldr	r3, [pc, #212]	; (8003444 <menu+0x21ac>)
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <menu+0x21c8>)
 8003374:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <menu+0x21cc>)
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800337c:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <menu+0x21d0>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b13      	cmp	r3, #19
 8003382:	f040 80d5 	bne.w	8003530 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003386:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <menu+0x21a0>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d113      	bne.n	80033b6 <menu+0x211e>
			if(dilSecim == 0) {
 800338e:	4b28      	ldr	r3, [pc, #160]	; (8003430 <menu+0x2198>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d105      	bne.n	80033a2 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003396:	4a35      	ldr	r2, [pc, #212]	; (800346c <menu+0x21d4>)
 8003398:	2101      	movs	r1, #1
 800339a:	2001      	movs	r0, #1
 800339c:	f004 fbf4 	bl	8007b88 <lcd_print>
 80033a0:	e01f      	b.n	80033e2 <menu+0x214a>
			} else if(dilSecim == 1) {
 80033a2:	4b23      	ldr	r3, [pc, #140]	; (8003430 <menu+0x2198>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d11b      	bne.n	80033e2 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80033aa:	4a31      	ldr	r2, [pc, #196]	; (8003470 <menu+0x21d8>)
 80033ac:	2101      	movs	r1, #1
 80033ae:	2001      	movs	r0, #1
 80033b0:	f004 fbea 	bl	8007b88 <lcd_print>
 80033b4:	e015      	b.n	80033e2 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <menu+0x21a0>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d111      	bne.n	80033e2 <menu+0x214a>
			if(dilSecim == 0) {
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <menu+0x2198>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80033c6:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <menu+0x21dc>)
 80033c8:	2101      	movs	r1, #1
 80033ca:	2001      	movs	r0, #1
 80033cc:	f004 fbdc 	bl	8007b88 <lcd_print>
			}
			if(dilSecim == 1) {
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <menu+0x2198>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d104      	bne.n	80033e2 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80033d8:	4a27      	ldr	r2, [pc, #156]	; (8003478 <menu+0x21e0>)
 80033da:	2101      	movs	r1, #1
 80033dc:	2001      	movs	r0, #1
 80033de:	f004 fbd3 	bl	8007b88 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <menu+0x21e4>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d113      	bne.n	8003412 <menu+0x217a>
			if(dilSecim == 0) {
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <menu+0x2198>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d105      	bne.n	80033fe <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80033f2:	4a15      	ldr	r2, [pc, #84]	; (8003448 <menu+0x21b0>)
 80033f4:	2101      	movs	r1, #1
 80033f6:	2002      	movs	r0, #2
 80033f8:	f004 fbc6 	bl	8007b88 <lcd_print>
 80033fc:	e049      	b.n	8003492 <menu+0x21fa>
			} else if(dilSecim == 1) {
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <menu+0x2198>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d145      	bne.n	8003492 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8003406:	4a11      	ldr	r2, [pc, #68]	; (800344c <menu+0x21b4>)
 8003408:	2101      	movs	r1, #1
 800340a:	2002      	movs	r0, #2
 800340c:	f004 fbbc 	bl	8007b88 <lcd_print>
 8003410:	e03f      	b.n	8003492 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <menu+0x21e4>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d13b      	bne.n	8003492 <menu+0x21fa>
			if(dilSecim == 0) {
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <menu+0x2198>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d12e      	bne.n	8003480 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8003422:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <menu+0x21b8>)
 8003424:	2101      	movs	r1, #1
 8003426:	2002      	movs	r0, #2
 8003428:	f004 fbae 	bl	8007b88 <lcd_print>
 800342c:	e031      	b.n	8003492 <menu+0x21fa>
 800342e:	bf00      	nop
 8003430:	20000239 	.word	0x20000239
 8003434:	0800d5e4 	.word	0x0800d5e4
 8003438:	20000227 	.word	0x20000227
 800343c:	0800d5f4 	.word	0x0800d5f4
 8003440:	0800d608 	.word	0x0800d608
 8003444:	20000228 	.word	0x20000228
 8003448:	0800d178 	.word	0x0800d178
 800344c:	0800d18c 	.word	0x0800d18c
 8003450:	0800d1d8 	.word	0x0800d1d8
 8003454:	0800d1ec 	.word	0x0800d1ec
 8003458:	40010800 	.word	0x40010800
 800345c:	20000247 	.word	0x20000247
 8003460:	2000011c 	.word	0x2000011c
 8003464:	20000244 	.word	0x20000244
 8003468:	20000218 	.word	0x20000218
 800346c:	0800d61c 	.word	0x0800d61c
 8003470:	0800d630 	.word	0x0800d630
 8003474:	0800d644 	.word	0x0800d644
 8003478:	0800d658 	.word	0x0800d658
 800347c:	20000229 	.word	0x20000229
			} else if(dilSecim == 1) {
 8003480:	4b90      	ldr	r3, [pc, #576]	; (80036c4 <menu+0x242c>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d104      	bne.n	8003492 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003488:	4a8f      	ldr	r2, [pc, #572]	; (80036c8 <menu+0x2430>)
 800348a:	2101      	movs	r1, #1
 800348c:	2002      	movs	r0, #2
 800348e:	f004 fb7b 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003492:	2102      	movs	r1, #2
 8003494:	488d      	ldr	r0, [pc, #564]	; (80036cc <menu+0x2434>)
 8003496:	f005 fe9d 	bl	80091d4 <HAL_GPIO_ReadPin>
 800349a:	4603      	mov	r3, r0
 800349c:	2b01      	cmp	r3, #1
 800349e:	d115      	bne.n	80034cc <menu+0x2234>
 80034a0:	4b8b      	ldr	r3, [pc, #556]	; (80036d0 <menu+0x2438>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	f083 0301 	eor.w	r3, r3, #1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00e      	beq.n	80034cc <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80034ae:	4b89      	ldr	r3, [pc, #548]	; (80036d4 <menu+0x243c>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	3301      	adds	r3, #1
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4b87      	ldr	r3, [pc, #540]	; (80036d4 <menu+0x243c>)
 80034b8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80034ba:	4b86      	ldr	r3, [pc, #536]	; (80036d4 <menu+0x243c>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d902      	bls.n	80034c8 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80034c2:	4b84      	ldr	r3, [pc, #528]	; (80036d4 <menu+0x243c>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034c8:	f001 fab2 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034cc:	2104      	movs	r1, #4
 80034ce:	487f      	ldr	r0, [pc, #508]	; (80036cc <menu+0x2434>)
 80034d0:	f005 fe80 	bl	80091d4 <HAL_GPIO_ReadPin>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d115      	bne.n	8003506 <menu+0x226e>
 80034da:	4b7d      	ldr	r3, [pc, #500]	; (80036d0 <menu+0x2438>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	f083 0301 	eor.w	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00e      	beq.n	8003506 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80034e8:	4b7a      	ldr	r3, [pc, #488]	; (80036d4 <menu+0x243c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	4b78      	ldr	r3, [pc, #480]	; (80036d4 <menu+0x243c>)
 80034f2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80034f4:	4b77      	ldr	r3, [pc, #476]	; (80036d4 <menu+0x243c>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80034fc:	4b75      	ldr	r3, [pc, #468]	; (80036d4 <menu+0x243c>)
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003502:	f001 fa95 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003506:	2108      	movs	r1, #8
 8003508:	4870      	ldr	r0, [pc, #448]	; (80036cc <menu+0x2434>)
 800350a:	f005 fe63 	bl	80091d4 <HAL_GPIO_ReadPin>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10d      	bne.n	8003530 <menu+0x2298>
 8003514:	4b6e      	ldr	r3, [pc, #440]	; (80036d0 <menu+0x2438>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003522:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <menu+0x243c>)
 8003524:	781a      	ldrb	r2, [r3, #0]
 8003526:	4b6c      	ldr	r3, [pc, #432]	; (80036d8 <menu+0x2440>)
 8003528:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800352a:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <menu+0x2444>)
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003530:	4b6b      	ldr	r3, [pc, #428]	; (80036e0 <menu+0x2448>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b14      	cmp	r3, #20
 8003536:	f040 80b5 	bne.w	80036a4 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 800353a:	4b6a      	ldr	r3, [pc, #424]	; (80036e4 <menu+0x244c>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d113      	bne.n	800356a <menu+0x22d2>
			if(dilSecim == 0) {
 8003542:	4b60      	ldr	r3, [pc, #384]	; (80036c4 <menu+0x242c>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800354a:	4a67      	ldr	r2, [pc, #412]	; (80036e8 <menu+0x2450>)
 800354c:	2101      	movs	r1, #1
 800354e:	2001      	movs	r0, #1
 8003550:	f004 fb1a 	bl	8007b88 <lcd_print>
 8003554:	e020      	b.n	8003598 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003556:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <menu+0x242c>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d11c      	bne.n	8003598 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800355e:	4a63      	ldr	r2, [pc, #396]	; (80036ec <menu+0x2454>)
 8003560:	2101      	movs	r1, #1
 8003562:	2001      	movs	r0, #1
 8003564:	f004 fb10 	bl	8007b88 <lcd_print>
 8003568:	e016      	b.n	8003598 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800356a:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <menu+0x244c>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d112      	bne.n	8003598 <menu+0x2300>
			if(dilSecim == 0) {
 8003572:	4b54      	ldr	r3, [pc, #336]	; (80036c4 <menu+0x242c>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800357a:	4a5d      	ldr	r2, [pc, #372]	; (80036f0 <menu+0x2458>)
 800357c:	2101      	movs	r1, #1
 800357e:	2001      	movs	r0, #1
 8003580:	f004 fb02 	bl	8007b88 <lcd_print>
 8003584:	e008      	b.n	8003598 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003586:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <menu+0x242c>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d104      	bne.n	8003598 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800358e:	4a59      	ldr	r2, [pc, #356]	; (80036f4 <menu+0x245c>)
 8003590:	2101      	movs	r1, #1
 8003592:	2001      	movs	r0, #1
 8003594:	f004 faf8 	bl	8007b88 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003598:	4b57      	ldr	r3, [pc, #348]	; (80036f8 <menu+0x2460>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d113      	bne.n	80035c8 <menu+0x2330>
			if(dilSecim == 0) {
 80035a0:	4b48      	ldr	r3, [pc, #288]	; (80036c4 <menu+0x242c>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80035a8:	4a54      	ldr	r2, [pc, #336]	; (80036fc <menu+0x2464>)
 80035aa:	2101      	movs	r1, #1
 80035ac:	2002      	movs	r0, #2
 80035ae:	f004 faeb 	bl	8007b88 <lcd_print>
 80035b2:	e020      	b.n	80035f6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80035b4:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <menu+0x242c>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d11c      	bne.n	80035f6 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80035bc:	4a50      	ldr	r2, [pc, #320]	; (8003700 <menu+0x2468>)
 80035be:	2101      	movs	r1, #1
 80035c0:	2002      	movs	r0, #2
 80035c2:	f004 fae1 	bl	8007b88 <lcd_print>
 80035c6:	e016      	b.n	80035f6 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <menu+0x2460>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d112      	bne.n	80035f6 <menu+0x235e>
			if(dilSecim == 0) {
 80035d0:	4b3c      	ldr	r3, [pc, #240]	; (80036c4 <menu+0x242c>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80035d8:	4a4a      	ldr	r2, [pc, #296]	; (8003704 <menu+0x246c>)
 80035da:	2101      	movs	r1, #1
 80035dc:	2002      	movs	r0, #2
 80035de:	f004 fad3 	bl	8007b88 <lcd_print>
 80035e2:	e008      	b.n	80035f6 <menu+0x235e>
			} else if(dilSecim == 1) {
 80035e4:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <menu+0x242c>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d104      	bne.n	80035f6 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80035ec:	4a46      	ldr	r2, [pc, #280]	; (8003708 <menu+0x2470>)
 80035ee:	2101      	movs	r1, #1
 80035f0:	2002      	movs	r0, #2
 80035f2:	f004 fac9 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80035f6:	2102      	movs	r1, #2
 80035f8:	4834      	ldr	r0, [pc, #208]	; (80036cc <menu+0x2434>)
 80035fa:	f005 fdeb 	bl	80091d4 <HAL_GPIO_ReadPin>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d119      	bne.n	8003638 <menu+0x23a0>
 8003604:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <menu+0x2438>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f083 0301 	eor.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <menu+0x23a0>
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <menu+0x244c>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d10e      	bne.n	8003638 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800361a:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <menu+0x2460>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <menu+0x2460>)
 8003624:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003626:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <menu+0x2460>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d902      	bls.n	8003634 <menu+0x239c>
				devirmeSilindirTipi = 0;
 800362e:	4b32      	ldr	r3, [pc, #200]	; (80036f8 <menu+0x2460>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003634:	f001 f9fc 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003638:	2104      	movs	r1, #4
 800363a:	4824      	ldr	r0, [pc, #144]	; (80036cc <menu+0x2434>)
 800363c:	f005 fdca 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d119      	bne.n	800367a <menu+0x23e2>
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <menu+0x2438>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	f083 0301 	eor.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d012      	beq.n	800367a <menu+0x23e2>
 8003654:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <menu+0x244c>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d10e      	bne.n	800367a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800365c:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <menu+0x2460>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	3b01      	subs	r3, #1
 8003662:	b2da      	uxtb	r2, r3
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <menu+0x2460>)
 8003666:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003668:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <menu+0x2460>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003670:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <menu+0x2460>)
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003676:	f001 f9db 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800367a:	2108      	movs	r1, #8
 800367c:	4813      	ldr	r0, [pc, #76]	; (80036cc <menu+0x2434>)
 800367e:	f005 fda9 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003682:	4603      	mov	r3, r0
 8003684:	2b01      	cmp	r3, #1
 8003686:	d10d      	bne.n	80036a4 <menu+0x240c>
 8003688:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <menu+0x2438>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	f083 0301 	eor.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d006      	beq.n	80036a4 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003696:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <menu+0x2460>)
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <menu+0x2440>)
 800369c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <menu+0x2444>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <menu+0x2448>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b15      	cmp	r3, #21
 80036aa:	f040 80c2 	bne.w	8003832 <menu+0x259a>
		if(dilSecim == 0) {
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <menu+0x242c>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d12c      	bne.n	8003710 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80036b6:	4a15      	ldr	r2, [pc, #84]	; (800370c <menu+0x2474>)
 80036b8:	2101      	movs	r1, #1
 80036ba:	2001      	movs	r0, #1
 80036bc:	f004 fa64 	bl	8007b88 <lcd_print>
 80036c0:	e02f      	b.n	8003722 <menu+0x248a>
 80036c2:	bf00      	nop
 80036c4:	20000239 	.word	0x20000239
 80036c8:	0800d1ec 	.word	0x0800d1ec
 80036cc:	40010800 	.word	0x40010800
 80036d0:	20000247 	.word	0x20000247
 80036d4:	20000229 	.word	0x20000229
 80036d8:	2000011c 	.word	0x2000011c
 80036dc:	20000244 	.word	0x20000244
 80036e0:	20000218 	.word	0x20000218
 80036e4:	20000227 	.word	0x20000227
 80036e8:	0800d66c 	.word	0x0800d66c
 80036ec:	0800d680 	.word	0x0800d680
 80036f0:	0800d694 	.word	0x0800d694
 80036f4:	0800d6a8 	.word	0x0800d6a8
 80036f8:	2000022a 	.word	0x2000022a
 80036fc:	0800d6bc 	.word	0x0800d6bc
 8003700:	0800d6d0 	.word	0x0800d6d0
 8003704:	0800d6e0 	.word	0x0800d6e0
 8003708:	0800d6f4 	.word	0x0800d6f4
 800370c:	0800d704 	.word	0x0800d704
		} else if(dilSecim == 1) {
 8003710:	4b9c      	ldr	r3, [pc, #624]	; (8003984 <menu+0x26ec>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d104      	bne.n	8003722 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003718:	4a9b      	ldr	r2, [pc, #620]	; (8003988 <menu+0x26f0>)
 800371a:	2101      	movs	r1, #1
 800371c:	2001      	movs	r0, #1
 800371e:	f004 fa33 	bl	8007b88 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003722:	4b9a      	ldr	r3, [pc, #616]	; (800398c <menu+0x26f4>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d112      	bne.n	8003750 <menu+0x24b8>
			if(dilSecim == 0) {
 800372a:	4b96      	ldr	r3, [pc, #600]	; (8003984 <menu+0x26ec>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d104      	bne.n	800373c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003732:	4a97      	ldr	r2, [pc, #604]	; (8003990 <menu+0x26f8>)
 8003734:	2101      	movs	r1, #1
 8003736:	2002      	movs	r0, #2
 8003738:	f004 fa26 	bl	8007b88 <lcd_print>
			}
			if(dilSecim == 1) {
 800373c:	4b91      	ldr	r3, [pc, #580]	; (8003984 <menu+0x26ec>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d11c      	bne.n	800377e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003744:	4a93      	ldr	r2, [pc, #588]	; (8003994 <menu+0x26fc>)
 8003746:	2101      	movs	r1, #1
 8003748:	2002      	movs	r0, #2
 800374a:	f004 fa1d 	bl	8007b88 <lcd_print>
 800374e:	e016      	b.n	800377e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003750:	4b8e      	ldr	r3, [pc, #568]	; (800398c <menu+0x26f4>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d112      	bne.n	800377e <menu+0x24e6>
			if(dilSecim == 0) {
 8003758:	4b8a      	ldr	r3, [pc, #552]	; (8003984 <menu+0x26ec>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003760:	4a8d      	ldr	r2, [pc, #564]	; (8003998 <menu+0x2700>)
 8003762:	2101      	movs	r1, #1
 8003764:	2002      	movs	r0, #2
 8003766:	f004 fa0f 	bl	8007b88 <lcd_print>
 800376a:	e008      	b.n	800377e <menu+0x24e6>
			} else if(dilSecim == 1) {
 800376c:	4b85      	ldr	r3, [pc, #532]	; (8003984 <menu+0x26ec>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d104      	bne.n	800377e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003774:	4a89      	ldr	r2, [pc, #548]	; (800399c <menu+0x2704>)
 8003776:	2101      	movs	r1, #1
 8003778:	2002      	movs	r0, #2
 800377a:	f004 fa05 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800377e:	2102      	movs	r1, #2
 8003780:	4887      	ldr	r0, [pc, #540]	; (80039a0 <menu+0x2708>)
 8003782:	f005 fd27 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003786:	4603      	mov	r3, r0
 8003788:	2b01      	cmp	r3, #1
 800378a:	d115      	bne.n	80037b8 <menu+0x2520>
 800378c:	4b85      	ldr	r3, [pc, #532]	; (80039a4 <menu+0x270c>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	f083 0301 	eor.w	r3, r3, #1
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00e      	beq.n	80037b8 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800379a:	4b7c      	ldr	r3, [pc, #496]	; (800398c <menu+0x26f4>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4b7a      	ldr	r3, [pc, #488]	; (800398c <menu+0x26f4>)
 80037a4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80037a6:	4b79      	ldr	r3, [pc, #484]	; (800398c <menu+0x26f4>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d902      	bls.n	80037b4 <menu+0x251c>
				platformSilindirTipi = 0;
 80037ae:	4b77      	ldr	r3, [pc, #476]	; (800398c <menu+0x26f4>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037b4:	f001 f93c 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037b8:	2104      	movs	r1, #4
 80037ba:	4879      	ldr	r0, [pc, #484]	; (80039a0 <menu+0x2708>)
 80037bc:	f005 fd0a 	bl	80091d4 <HAL_GPIO_ReadPin>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d115      	bne.n	80037f2 <menu+0x255a>
 80037c6:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <menu+0x270c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	f083 0301 	eor.w	r3, r3, #1
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80037d4:	4b6d      	ldr	r3, [pc, #436]	; (800398c <menu+0x26f4>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	3b01      	subs	r3, #1
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	4b6b      	ldr	r3, [pc, #428]	; (800398c <menu+0x26f4>)
 80037de:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <menu+0x26f4>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <menu+0x2556>
		   		platformSilindirTipi = 1;
 80037e8:	4b68      	ldr	r3, [pc, #416]	; (800398c <menu+0x26f4>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037ee:	f001 f91f 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037f2:	2108      	movs	r1, #8
 80037f4:	486a      	ldr	r0, [pc, #424]	; (80039a0 <menu+0x2708>)
 80037f6:	f005 fced 	bl	80091d4 <HAL_GPIO_ReadPin>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d118      	bne.n	8003832 <menu+0x259a>
 8003800:	4b68      	ldr	r3, [pc, #416]	; (80039a4 <menu+0x270c>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	f083 0301 	eor.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d011      	beq.n	8003832 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 800380e:	4b5f      	ldr	r3, [pc, #380]	; (800398c <menu+0x26f4>)
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <menu+0x2710>)
 8003814:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003816:	4b5d      	ldr	r3, [pc, #372]	; (800398c <menu+0x26f4>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d106      	bne.n	800382c <menu+0x2594>
				altLimit = 1;
 800381e:	4b63      	ldr	r3, [pc, #396]	; (80039ac <menu+0x2714>)
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003824:	4b61      	ldr	r3, [pc, #388]	; (80039ac <menu+0x2714>)
 8003826:	781a      	ldrb	r2, [r3, #0]
 8003828:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <menu+0x2710>)
 800382a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800382c:	4b60      	ldr	r3, [pc, #384]	; (80039b0 <menu+0x2718>)
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003832:	4b60      	ldr	r3, [pc, #384]	; (80039b4 <menu+0x271c>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b16      	cmp	r3, #22
 8003838:	f040 8081 	bne.w	800393e <menu+0x26a6>
		if(dilSecim == 0) {
 800383c:	4b51      	ldr	r3, [pc, #324]	; (8003984 <menu+0x26ec>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003844:	4a5c      	ldr	r2, [pc, #368]	; (80039b8 <menu+0x2720>)
 8003846:	2101      	movs	r1, #1
 8003848:	2001      	movs	r0, #1
 800384a:	f004 f99d 	bl	8007b88 <lcd_print>
 800384e:	e008      	b.n	8003862 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003850:	4b4c      	ldr	r3, [pc, #304]	; (8003984 <menu+0x26ec>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d104      	bne.n	8003862 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003858:	4a58      	ldr	r2, [pc, #352]	; (80039bc <menu+0x2724>)
 800385a:	2101      	movs	r1, #1
 800385c:	2001      	movs	r0, #1
 800385e:	f004 f993 	bl	8007b88 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003862:	4b48      	ldr	r3, [pc, #288]	; (8003984 <menu+0x26ec>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d105      	bne.n	8003876 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800386a:	4a55      	ldr	r2, [pc, #340]	; (80039c0 <menu+0x2728>)
 800386c:	2101      	movs	r1, #1
 800386e:	2002      	movs	r0, #2
 8003870:	f004 f98a 	bl	8007b88 <lcd_print>
 8003874:	e008      	b.n	8003888 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003876:	4b43      	ldr	r3, [pc, #268]	; (8003984 <menu+0x26ec>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d104      	bne.n	8003888 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800387e:	4a51      	ldr	r2, [pc, #324]	; (80039c4 <menu+0x272c>)
 8003880:	2101      	movs	r1, #1
 8003882:	2002      	movs	r0, #2
 8003884:	f004 f980 	bl	8007b88 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <menu+0x2730>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	220a      	movs	r2, #10
 800388e:	494f      	ldr	r1, [pc, #316]	; (80039cc <menu+0x2734>)
 8003890:	4618      	mov	r0, r3
 8003892:	f008 fccb 	bl	800c22c <itoa>
		lcd_print(2,16,snum);
 8003896:	4a4d      	ldr	r2, [pc, #308]	; (80039cc <menu+0x2734>)
 8003898:	2110      	movs	r1, #16
 800389a:	2002      	movs	r0, #2
 800389c:	f004 f974 	bl	8007b88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038a0:	2102      	movs	r1, #2
 80038a2:	483f      	ldr	r0, [pc, #252]	; (80039a0 <menu+0x2708>)
 80038a4:	f005 fc96 	bl	80091d4 <HAL_GPIO_ReadPin>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d115      	bne.n	80038da <menu+0x2642>
 80038ae:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <menu+0x270c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	f083 0301 	eor.w	r3, r3, #1
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80038bc:	4b42      	ldr	r3, [pc, #264]	; (80039c8 <menu+0x2730>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b40      	ldr	r3, [pc, #256]	; (80039c8 <menu+0x2730>)
 80038c6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80038c8:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <menu+0x2730>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d902      	bls.n	80038d6 <menu+0x263e>
				yukariValfTmr = 0;
 80038d0:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <menu+0x2730>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038d6:	f001 f8ab 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038da:	2104      	movs	r1, #4
 80038dc:	4830      	ldr	r0, [pc, #192]	; (80039a0 <menu+0x2708>)
 80038de:	f005 fc79 	bl	80091d4 <HAL_GPIO_ReadPin>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d115      	bne.n	8003914 <menu+0x267c>
 80038e8:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <menu+0x270c>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	f083 0301 	eor.w	r3, r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00e      	beq.n	8003914 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 80038f6:	4b34      	ldr	r3, [pc, #208]	; (80039c8 <menu+0x2730>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <menu+0x2730>)
 8003900:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003902:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <menu+0x2730>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b06      	cmp	r3, #6
 8003908:	d902      	bls.n	8003910 <menu+0x2678>
		   		yukariValfTmr = 5;
 800390a:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <menu+0x2730>)
 800390c:	2205      	movs	r2, #5
 800390e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003910:	f001 f88e 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003914:	2108      	movs	r1, #8
 8003916:	4822      	ldr	r0, [pc, #136]	; (80039a0 <menu+0x2708>)
 8003918:	f005 fc5c 	bl	80091d4 <HAL_GPIO_ReadPin>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10d      	bne.n	800393e <menu+0x26a6>
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <menu+0x270c>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	f083 0301 	eor.w	r3, r3, #1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d006      	beq.n	800393e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <menu+0x2730>)
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <menu+0x2710>)
 8003936:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <menu+0x2718>)
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 800393e:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <menu+0x271c>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b17      	cmp	r3, #23
 8003944:	f040 80ac 	bne.w	8003aa0 <menu+0x2808>
		if(dilSecim == 0) {
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <menu+0x26ec>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003950:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <menu+0x2738>)
 8003952:	2101      	movs	r1, #1
 8003954:	2001      	movs	r0, #1
 8003956:	f004 f917 	bl	8007b88 <lcd_print>
 800395a:	e008      	b.n	800396e <menu+0x26d6>
		} else if(dilSecim == 1) {
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <menu+0x26ec>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d104      	bne.n	800396e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003964:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <menu+0x273c>)
 8003966:	2101      	movs	r1, #1
 8003968:	2001      	movs	r0, #1
 800396a:	f004 f90d 	bl	8007b88 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <menu+0x26ec>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d130      	bne.n	80039d8 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003976:	4a12      	ldr	r2, [pc, #72]	; (80039c0 <menu+0x2728>)
 8003978:	2101      	movs	r1, #1
 800397a:	2002      	movs	r0, #2
 800397c:	f004 f904 	bl	8007b88 <lcd_print>
 8003980:	e033      	b.n	80039ea <menu+0x2752>
 8003982:	bf00      	nop
 8003984:	20000239 	.word	0x20000239
 8003988:	0800d718 	.word	0x0800d718
 800398c:	2000022b 	.word	0x2000022b
 8003990:	0800d6bc 	.word	0x0800d6bc
 8003994:	0800d6d0 	.word	0x0800d6d0
 8003998:	0800d6e0 	.word	0x0800d6e0
 800399c:	0800d6f4 	.word	0x0800d6f4
 80039a0:	40010800 	.word	0x40010800
 80039a4:	20000247 	.word	0x20000247
 80039a8:	2000011c 	.word	0x2000011c
 80039ac:	2000021e 	.word	0x2000021e
 80039b0:	20000244 	.word	0x20000244
 80039b4:	20000218 	.word	0x20000218
 80039b8:	0800d728 	.word	0x0800d728
 80039bc:	0800d73c 	.word	0x0800d73c
 80039c0:	0800d3dc 	.word	0x0800d3dc
 80039c4:	0800d750 	.word	0x0800d750
 80039c8:	2000022c 	.word	0x2000022c
 80039cc:	2000018c 	.word	0x2000018c
 80039d0:	0800d760 	.word	0x0800d760
 80039d4:	0800d774 	.word	0x0800d774
			} else if(dilSecim == 1) {
 80039d8:	4b98      	ldr	r3, [pc, #608]	; (8003c3c <menu+0x29a4>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d104      	bne.n	80039ea <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 80039e0:	4a97      	ldr	r2, [pc, #604]	; (8003c40 <menu+0x29a8>)
 80039e2:	2101      	movs	r1, #1
 80039e4:	2002      	movs	r0, #2
 80039e6:	f004 f8cf 	bl	8007b88 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 80039ea:	4b96      	ldr	r3, [pc, #600]	; (8003c44 <menu+0x29ac>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	220a      	movs	r2, #10
 80039f0:	4995      	ldr	r1, [pc, #596]	; (8003c48 <menu+0x29b0>)
 80039f2:	4618      	mov	r0, r3
 80039f4:	f008 fc1a 	bl	800c22c <itoa>
		lcd_print(2,16,snum);
 80039f8:	4a93      	ldr	r2, [pc, #588]	; (8003c48 <menu+0x29b0>)
 80039fa:	2110      	movs	r1, #16
 80039fc:	2002      	movs	r0, #2
 80039fe:	f004 f8c3 	bl	8007b88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a02:	2102      	movs	r1, #2
 8003a04:	4891      	ldr	r0, [pc, #580]	; (8003c4c <menu+0x29b4>)
 8003a06:	f005 fbe5 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d115      	bne.n	8003a3c <menu+0x27a4>
 8003a10:	4b8f      	ldr	r3, [pc, #572]	; (8003c50 <menu+0x29b8>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	f083 0301 	eor.w	r3, r3, #1
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00e      	beq.n	8003a3c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003a1e:	4b89      	ldr	r3, [pc, #548]	; (8003c44 <menu+0x29ac>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4b87      	ldr	r3, [pc, #540]	; (8003c44 <menu+0x29ac>)
 8003a28:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003a2a:	4b86      	ldr	r3, [pc, #536]	; (8003c44 <menu+0x29ac>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d902      	bls.n	8003a38 <menu+0x27a0>
				asagiValfTmr = 0;
 8003a32:	4b84      	ldr	r3, [pc, #528]	; (8003c44 <menu+0x29ac>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a38:	f000 fffa 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	4883      	ldr	r0, [pc, #524]	; (8003c4c <menu+0x29b4>)
 8003a40:	f005 fbc8 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d115      	bne.n	8003a76 <menu+0x27de>
 8003a4a:	4b81      	ldr	r3, [pc, #516]	; (8003c50 <menu+0x29b8>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	f083 0301 	eor.w	r3, r3, #1
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003a58:	4b7a      	ldr	r3, [pc, #488]	; (8003c44 <menu+0x29ac>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	4b78      	ldr	r3, [pc, #480]	; (8003c44 <menu+0x29ac>)
 8003a62:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003a64:	4b77      	ldr	r3, [pc, #476]	; (8003c44 <menu+0x29ac>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b06      	cmp	r3, #6
 8003a6a:	d902      	bls.n	8003a72 <menu+0x27da>
		   		asagiValfTmr = 5;
 8003a6c:	4b75      	ldr	r3, [pc, #468]	; (8003c44 <menu+0x29ac>)
 8003a6e:	2205      	movs	r2, #5
 8003a70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a72:	f000 ffdd 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a76:	2108      	movs	r1, #8
 8003a78:	4874      	ldr	r0, [pc, #464]	; (8003c4c <menu+0x29b4>)
 8003a7a:	f005 fbab 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d10d      	bne.n	8003aa0 <menu+0x2808>
 8003a84:	4b72      	ldr	r3, [pc, #456]	; (8003c50 <menu+0x29b8>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	f083 0301 	eor.w	r3, r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003a92:	4b6c      	ldr	r3, [pc, #432]	; (8003c44 <menu+0x29ac>)
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	4b6f      	ldr	r3, [pc, #444]	; (8003c54 <menu+0x29bc>)
 8003a98:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003a9a:	4b6f      	ldr	r3, [pc, #444]	; (8003c58 <menu+0x29c0>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003aa0:	4b6e      	ldr	r3, [pc, #440]	; (8003c5c <menu+0x29c4>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b18      	cmp	r3, #24
 8003aa6:	f040 809d 	bne.w	8003be4 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003aaa:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <menu+0x29c8>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d113      	bne.n	8003ada <menu+0x2842>
			if(dilSecim == 0) {
 8003ab2:	4b62      	ldr	r3, [pc, #392]	; (8003c3c <menu+0x29a4>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003aba:	4a6a      	ldr	r2, [pc, #424]	; (8003c64 <menu+0x29cc>)
 8003abc:	2101      	movs	r1, #1
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f004 f862 	bl	8007b88 <lcd_print>
 8003ac4:	e020      	b.n	8003b08 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003ac6:	4b5d      	ldr	r3, [pc, #372]	; (8003c3c <menu+0x29a4>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d11c      	bne.n	8003b08 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003ace:	4a66      	ldr	r2, [pc, #408]	; (8003c68 <menu+0x29d0>)
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f004 f858 	bl	8007b88 <lcd_print>
 8003ad8:	e016      	b.n	8003b08 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003ada:	4b61      	ldr	r3, [pc, #388]	; (8003c60 <menu+0x29c8>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d112      	bne.n	8003b08 <menu+0x2870>
			if(dilSecim == 0) {
 8003ae2:	4b56      	ldr	r3, [pc, #344]	; (8003c3c <menu+0x29a4>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003aea:	4a60      	ldr	r2, [pc, #384]	; (8003c6c <menu+0x29d4>)
 8003aec:	2101      	movs	r1, #1
 8003aee:	2001      	movs	r0, #1
 8003af0:	f004 f84a 	bl	8007b88 <lcd_print>
 8003af4:	e008      	b.n	8003b08 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003af6:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <menu+0x29a4>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d104      	bne.n	8003b08 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003afe:	4a5c      	ldr	r2, [pc, #368]	; (8003c70 <menu+0x29d8>)
 8003b00:	2101      	movs	r1, #1
 8003b02:	2001      	movs	r0, #1
 8003b04:	f004 f840 	bl	8007b88 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003b08:	4b4c      	ldr	r3, [pc, #304]	; (8003c3c <menu+0x29a4>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d105      	bne.n	8003b1c <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b10:	4a58      	ldr	r2, [pc, #352]	; (8003c74 <menu+0x29dc>)
 8003b12:	2101      	movs	r1, #1
 8003b14:	2002      	movs	r0, #2
 8003b16:	f004 f837 	bl	8007b88 <lcd_print>
 8003b1a:	e008      	b.n	8003b2e <menu+0x2896>
			} else if(dilSecim == 1) {
 8003b1c:	4b47      	ldr	r3, [pc, #284]	; (8003c3c <menu+0x29a4>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d104      	bne.n	8003b2e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003b24:	4a46      	ldr	r2, [pc, #280]	; (8003c40 <menu+0x29a8>)
 8003b26:	2101      	movs	r1, #1
 8003b28:	2002      	movs	r0, #2
 8003b2a:	f004 f82d 	bl	8007b88 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003b2e:	4b52      	ldr	r3, [pc, #328]	; (8003c78 <menu+0x29e0>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	220a      	movs	r2, #10
 8003b34:	4944      	ldr	r1, [pc, #272]	; (8003c48 <menu+0x29b0>)
 8003b36:	4618      	mov	r0, r3
 8003b38:	f008 fb78 	bl	800c22c <itoa>
		lcd_print(2, 16, snum);
 8003b3c:	4a42      	ldr	r2, [pc, #264]	; (8003c48 <menu+0x29b0>)
 8003b3e:	2110      	movs	r1, #16
 8003b40:	2002      	movs	r0, #2
 8003b42:	f004 f821 	bl	8007b88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b46:	2102      	movs	r1, #2
 8003b48:	4840      	ldr	r0, [pc, #256]	; (8003c4c <menu+0x29b4>)
 8003b4a:	f005 fb43 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d115      	bne.n	8003b80 <menu+0x28e8>
 8003b54:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <menu+0x29b8>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	f083 0301 	eor.w	r3, r3, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00e      	beq.n	8003b80 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003b62:	4b45      	ldr	r3, [pc, #276]	; (8003c78 <menu+0x29e0>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	3301      	adds	r3, #1
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <menu+0x29e0>)
 8003b6c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003b6e:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <menu+0x29e0>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d902      	bls.n	8003b7c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003b76:	4b40      	ldr	r3, [pc, #256]	; (8003c78 <menu+0x29e0>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b7c:	f000 ff58 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b80:	2104      	movs	r1, #4
 8003b82:	4832      	ldr	r0, [pc, #200]	; (8003c4c <menu+0x29b4>)
 8003b84:	f005 fb26 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d115      	bne.n	8003bba <menu+0x2922>
 8003b8e:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <menu+0x29b8>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	f083 0301 	eor.w	r3, r3, #1
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00e      	beq.n	8003bba <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <menu+0x29e0>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <menu+0x29e0>)
 8003ba6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003ba8:	4b33      	ldr	r3, [pc, #204]	; (8003c78 <menu+0x29e0>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b06      	cmp	r3, #6
 8003bae:	d902      	bls.n	8003bb6 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003bb0:	4b31      	ldr	r3, [pc, #196]	; (8003c78 <menu+0x29e0>)
 8003bb2:	2205      	movs	r2, #5
 8003bb4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003bb6:	f000 ff3b 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bba:	2108      	movs	r1, #8
 8003bbc:	4823      	ldr	r0, [pc, #140]	; (8003c4c <menu+0x29b4>)
 8003bbe:	f005 fb09 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d10d      	bne.n	8003be4 <menu+0x294c>
 8003bc8:	4b21      	ldr	r3, [pc, #132]	; (8003c50 <menu+0x29b8>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	f083 0301 	eor.w	r3, r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003bd6:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <menu+0x29e0>)
 8003bd8:	781a      	ldrb	r2, [r3, #0]
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <menu+0x29bc>)
 8003bdc:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003bde:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <menu+0x29c0>)
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <menu+0x29c4>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b19      	cmp	r3, #25
 8003bea:	f040 80c4 	bne.w	8003d76 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <menu+0x29c8>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d113      	bne.n	8003c1e <menu+0x2986>
			if(dilSecim == 0) {
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <menu+0x29a4>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003bfe:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <menu+0x29e4>)
 8003c00:	2101      	movs	r1, #1
 8003c02:	2001      	movs	r0, #1
 8003c04:	f003 ffc0 	bl	8007b88 <lcd_print>
 8003c08:	e047      	b.n	8003c9a <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003c0a:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <menu+0x29a4>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d143      	bne.n	8003c9a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003c12:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <menu+0x29e8>)
 8003c14:	2101      	movs	r1, #1
 8003c16:	2001      	movs	r0, #1
 8003c18:	f003 ffb6 	bl	8007b88 <lcd_print>
 8003c1c:	e03d      	b.n	8003c9a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003c1e:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <menu+0x29c8>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d139      	bne.n	8003c9a <menu+0x2a02>
			if(dilSecim == 0) {
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <menu+0x29a4>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d12c      	bne.n	8003c88 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003c2e:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <menu+0x29ec>)
 8003c30:	2101      	movs	r1, #1
 8003c32:	2001      	movs	r0, #1
 8003c34:	f003 ffa8 	bl	8007b88 <lcd_print>
 8003c38:	e02f      	b.n	8003c9a <menu+0x2a02>
 8003c3a:	bf00      	nop
 8003c3c:	20000239 	.word	0x20000239
 8003c40:	0800d750 	.word	0x0800d750
 8003c44:	2000022d 	.word	0x2000022d
 8003c48:	2000018c 	.word	0x2000018c
 8003c4c:	40010800 	.word	0x40010800
 8003c50:	20000247 	.word	0x20000247
 8003c54:	2000011c 	.word	0x2000011c
 8003c58:	20000244 	.word	0x20000244
 8003c5c:	20000218 	.word	0x20000218
 8003c60:	20000227 	.word	0x20000227
 8003c64:	0800d788 	.word	0x0800d788
 8003c68:	0800d79c 	.word	0x0800d79c
 8003c6c:	0800d7b0 	.word	0x0800d7b0
 8003c70:	0800d7c4 	.word	0x0800d7c4
 8003c74:	0800d3dc 	.word	0x0800d3dc
 8003c78:	2000022e 	.word	0x2000022e
 8003c7c:	0800d7d8 	.word	0x0800d7d8
 8003c80:	0800d7ec 	.word	0x0800d7ec
 8003c84:	0800d800 	.word	0x0800d800
			} else if(dilSecim == 1) {
 8003c88:	4b73      	ldr	r3, [pc, #460]	; (8003e58 <menu+0x2bc0>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d104      	bne.n	8003c9a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003c90:	4a72      	ldr	r2, [pc, #456]	; (8003e5c <menu+0x2bc4>)
 8003c92:	2101      	movs	r1, #1
 8003c94:	2001      	movs	r0, #1
 8003c96:	f003 ff77 	bl	8007b88 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003c9a:	4b6f      	ldr	r3, [pc, #444]	; (8003e58 <menu+0x2bc0>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d105      	bne.n	8003cae <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ca2:	4a6f      	ldr	r2, [pc, #444]	; (8003e60 <menu+0x2bc8>)
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	2002      	movs	r0, #2
 8003ca8:	f003 ff6e 	bl	8007b88 <lcd_print>
 8003cac:	e008      	b.n	8003cc0 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003cae:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <menu+0x2bc0>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d104      	bne.n	8003cc0 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003cb6:	4a6b      	ldr	r2, [pc, #428]	; (8003e64 <menu+0x2bcc>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	2002      	movs	r0, #2
 8003cbc:	f003 ff64 	bl	8007b88 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003cc0:	4b69      	ldr	r3, [pc, #420]	; (8003e68 <menu+0x2bd0>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	220a      	movs	r2, #10
 8003cc6:	4969      	ldr	r1, [pc, #420]	; (8003e6c <menu+0x2bd4>)
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f008 faaf 	bl	800c22c <itoa>
		lcd_print(2,16,snum);
 8003cce:	4a67      	ldr	r2, [pc, #412]	; (8003e6c <menu+0x2bd4>)
 8003cd0:	2110      	movs	r1, #16
 8003cd2:	2002      	movs	r0, #2
 8003cd4:	f003 ff58 	bl	8007b88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4865      	ldr	r0, [pc, #404]	; (8003e70 <menu+0x2bd8>)
 8003cdc:	f005 fa7a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d115      	bne.n	8003d12 <menu+0x2a7a>
 8003ce6:	4b63      	ldr	r3, [pc, #396]	; (8003e74 <menu+0x2bdc>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	f083 0301 	eor.w	r3, r3, #1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003cf4:	4b5c      	ldr	r3, [pc, #368]	; (8003e68 <menu+0x2bd0>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	4b5a      	ldr	r3, [pc, #360]	; (8003e68 <menu+0x2bd0>)
 8003cfe:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003d00:	4b59      	ldr	r3, [pc, #356]	; (8003e68 <menu+0x2bd0>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d902      	bls.n	8003d0e <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003d08:	4b57      	ldr	r3, [pc, #348]	; (8003e68 <menu+0x2bd0>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d0e:	f000 fe8f 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d12:	2104      	movs	r1, #4
 8003d14:	4856      	ldr	r0, [pc, #344]	; (8003e70 <menu+0x2bd8>)
 8003d16:	f005 fa5d 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d115      	bne.n	8003d4c <menu+0x2ab4>
 8003d20:	4b54      	ldr	r3, [pc, #336]	; (8003e74 <menu+0x2bdc>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	f083 0301 	eor.w	r3, r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00e      	beq.n	8003d4c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003d2e:	4b4e      	ldr	r3, [pc, #312]	; (8003e68 <menu+0x2bd0>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	4b4c      	ldr	r3, [pc, #304]	; (8003e68 <menu+0x2bd0>)
 8003d38:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003d3a:	4b4b      	ldr	r3, [pc, #300]	; (8003e68 <menu+0x2bd0>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d902      	bls.n	8003d48 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003d42:	4b49      	ldr	r3, [pc, #292]	; (8003e68 <menu+0x2bd0>)
 8003d44:	2205      	movs	r2, #5
 8003d46:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d48:	f000 fe72 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d4c:	2108      	movs	r1, #8
 8003d4e:	4848      	ldr	r0, [pc, #288]	; (8003e70 <menu+0x2bd8>)
 8003d50:	f005 fa40 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d10d      	bne.n	8003d76 <menu+0x2ade>
 8003d5a:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <menu+0x2bdc>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	f083 0301 	eor.w	r3, r3, #1
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d006      	beq.n	8003d76 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003d68:	4b3f      	ldr	r3, [pc, #252]	; (8003e68 <menu+0x2bd0>)
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	4b42      	ldr	r3, [pc, #264]	; (8003e78 <menu+0x2be0>)
 8003d6e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003d70:	4b42      	ldr	r3, [pc, #264]	; (8003e7c <menu+0x2be4>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003d76:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <menu+0x2be8>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b1a      	cmp	r3, #26
 8003d7c:	f040 80ec 	bne.w	8003f58 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003d80:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <menu+0x2bc0>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003d88:	4a3e      	ldr	r2, [pc, #248]	; (8003e84 <menu+0x2bec>)
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f003 fefb 	bl	8007b88 <lcd_print>
 8003d92:	e008      	b.n	8003da6 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003d94:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <menu+0x2bc0>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d104      	bne.n	8003da6 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003d9c:	4a3a      	ldr	r2, [pc, #232]	; (8003e88 <menu+0x2bf0>)
 8003d9e:	2101      	movs	r1, #1
 8003da0:	2001      	movs	r0, #1
 8003da2:	f003 fef1 	bl	8007b88 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003da6:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <menu+0x2bf4>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b63      	cmp	r3, #99	; 0x63
 8003dac:	d91e      	bls.n	8003dec <menu+0x2b54>
			if(dilSecim == 0) {
 8003dae:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <menu+0x2bc0>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003db6:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <menu+0x2bc8>)
 8003db8:	2101      	movs	r1, #1
 8003dba:	2002      	movs	r0, #2
 8003dbc:	f003 fee4 	bl	8007b88 <lcd_print>
			}
			if(dilSecim == 1) {
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <menu+0x2bc0>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d104      	bne.n	8003dd2 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003dc8:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <menu+0x2bcc>)
 8003dca:	2101      	movs	r1, #1
 8003dcc:	2002      	movs	r0, #2
 8003dce:	f003 fedb 	bl	8007b88 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003dd2:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <menu+0x2bf4>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	220a      	movs	r2, #10
 8003dd8:	4924      	ldr	r1, [pc, #144]	; (8003e6c <menu+0x2bd4>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f008 fa26 	bl	800c22c <itoa>
			lcd_print(2,14,snum);
 8003de0:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <menu+0x2bd4>)
 8003de2:	210e      	movs	r1, #14
 8003de4:	2002      	movs	r0, #2
 8003de6:	f003 fecf 	bl	8007b88 <lcd_print>
 8003dea:	e066      	b.n	8003eba <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003dec:	4b27      	ldr	r3, [pc, #156]	; (8003e8c <menu+0x2bf4>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b09      	cmp	r3, #9
 8003df2:	d923      	bls.n	8003e3c <menu+0x2ba4>
 8003df4:	4b25      	ldr	r3, [pc, #148]	; (8003e8c <menu+0x2bf4>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b63      	cmp	r3, #99	; 0x63
 8003dfa:	d81f      	bhi.n	8003e3c <menu+0x2ba4>
			if(dilSecim == 0) {
 8003dfc:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <menu+0x2bc0>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e04:	4a16      	ldr	r2, [pc, #88]	; (8003e60 <menu+0x2bc8>)
 8003e06:	2101      	movs	r1, #1
 8003e08:	2002      	movs	r0, #2
 8003e0a:	f003 febd 	bl	8007b88 <lcd_print>
 8003e0e:	e008      	b.n	8003e22 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <menu+0x2bc0>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d104      	bne.n	8003e22 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003e18:	4a12      	ldr	r2, [pc, #72]	; (8003e64 <menu+0x2bcc>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f003 feb3 	bl	8007b88 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e22:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <menu+0x2bf4>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	220a      	movs	r2, #10
 8003e28:	4910      	ldr	r1, [pc, #64]	; (8003e6c <menu+0x2bd4>)
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f008 f9fe 	bl	800c22c <itoa>
			lcd_print(2, 15, snum);
 8003e30:	4a0e      	ldr	r2, [pc, #56]	; (8003e6c <menu+0x2bd4>)
 8003e32:	210f      	movs	r1, #15
 8003e34:	2002      	movs	r0, #2
 8003e36:	f003 fea7 	bl	8007b88 <lcd_print>
 8003e3a:	e03e      	b.n	8003eba <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <menu+0x2bf4>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b09      	cmp	r3, #9
 8003e42:	d83a      	bhi.n	8003eba <menu+0x2c22>
			if(dilSecim == 0) {
 8003e44:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <menu+0x2bc0>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d121      	bne.n	8003e90 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <menu+0x2bc8>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	2002      	movs	r0, #2
 8003e52:	f003 fe99 	bl	8007b88 <lcd_print>
 8003e56:	e024      	b.n	8003ea2 <menu+0x2c0a>
 8003e58:	20000239 	.word	0x20000239
 8003e5c:	0800d814 	.word	0x0800d814
 8003e60:	0800d3dc 	.word	0x0800d3dc
 8003e64:	0800d750 	.word	0x0800d750
 8003e68:	2000022f 	.word	0x2000022f
 8003e6c:	2000018c 	.word	0x2000018c
 8003e70:	40010800 	.word	0x40010800
 8003e74:	20000247 	.word	0x20000247
 8003e78:	2000011c 	.word	0x2000011c
 8003e7c:	20000244 	.word	0x20000244
 8003e80:	20000218 	.word	0x20000218
 8003e84:	0800d828 	.word	0x0800d828
 8003e88:	0800d83c 	.word	0x0800d83c
 8003e8c:	20000230 	.word	0x20000230
			} else if(dilSecim == 1) {
 8003e90:	4b8f      	ldr	r3, [pc, #572]	; (80040d0 <menu+0x2e38>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d104      	bne.n	8003ea2 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003e98:	4a8e      	ldr	r2, [pc, #568]	; (80040d4 <menu+0x2e3c>)
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	2002      	movs	r0, #2
 8003e9e:	f003 fe73 	bl	8007b88 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003ea2:	4b8d      	ldr	r3, [pc, #564]	; (80040d8 <menu+0x2e40>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	220a      	movs	r2, #10
 8003ea8:	498c      	ldr	r1, [pc, #560]	; (80040dc <menu+0x2e44>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f008 f9be 	bl	800c22c <itoa>
			lcd_print(2, 16, snum);
 8003eb0:	4a8a      	ldr	r2, [pc, #552]	; (80040dc <menu+0x2e44>)
 8003eb2:	2110      	movs	r1, #16
 8003eb4:	2002      	movs	r0, #2
 8003eb6:	f003 fe67 	bl	8007b88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4888      	ldr	r0, [pc, #544]	; (80040e0 <menu+0x2e48>)
 8003ebe:	f005 f989 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d115      	bne.n	8003ef4 <menu+0x2c5c>
 8003ec8:	4b86      	ldr	r3, [pc, #536]	; (80040e4 <menu+0x2e4c>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f083 0301 	eor.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00e      	beq.n	8003ef4 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003ed6:	4b80      	ldr	r3, [pc, #512]	; (80040d8 <menu+0x2e40>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	3301      	adds	r3, #1
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	4b7e      	ldr	r3, [pc, #504]	; (80040d8 <menu+0x2e40>)
 8003ee0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003ee2:	4b7d      	ldr	r3, [pc, #500]	; (80040d8 <menu+0x2e40>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2bb4      	cmp	r3, #180	; 0xb4
 8003ee8:	d902      	bls.n	8003ef0 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003eea:	4b7b      	ldr	r3, [pc, #492]	; (80040d8 <menu+0x2e40>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ef0:	f000 fd9e 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ef4:	2104      	movs	r1, #4
 8003ef6:	487a      	ldr	r0, [pc, #488]	; (80040e0 <menu+0x2e48>)
 8003ef8:	f005 f96c 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d115      	bne.n	8003f2e <menu+0x2c96>
 8003f02:	4b78      	ldr	r3, [pc, #480]	; (80040e4 <menu+0x2e4c>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	f083 0301 	eor.w	r3, r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00e      	beq.n	8003f2e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003f10:	4b71      	ldr	r3, [pc, #452]	; (80040d8 <menu+0x2e40>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	4b6f      	ldr	r3, [pc, #444]	; (80040d8 <menu+0x2e40>)
 8003f1a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003f1c:	4b6e      	ldr	r3, [pc, #440]	; (80040d8 <menu+0x2e40>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2bb5      	cmp	r3, #181	; 0xb5
 8003f22:	d902      	bls.n	8003f2a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003f24:	4b6c      	ldr	r3, [pc, #432]	; (80040d8 <menu+0x2e40>)
 8003f26:	22b4      	movs	r2, #180	; 0xb4
 8003f28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f2a:	f000 fd81 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f2e:	2108      	movs	r1, #8
 8003f30:	486b      	ldr	r0, [pc, #428]	; (80040e0 <menu+0x2e48>)
 8003f32:	f005 f94f 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d10d      	bne.n	8003f58 <menu+0x2cc0>
 8003f3c:	4b69      	ldr	r3, [pc, #420]	; (80040e4 <menu+0x2e4c>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	f083 0301 	eor.w	r3, r3, #1
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d006      	beq.n	8003f58 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003f4a:	4b63      	ldr	r3, [pc, #396]	; (80040d8 <menu+0x2e40>)
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	4b66      	ldr	r3, [pc, #408]	; (80040e8 <menu+0x2e50>)
 8003f50:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003f52:	4b66      	ldr	r3, [pc, #408]	; (80040ec <menu+0x2e54>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003f58:	4b65      	ldr	r3, [pc, #404]	; (80040f0 <menu+0x2e58>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b1b      	cmp	r3, #27
 8003f5e:	f040 8083 	bne.w	8004068 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003f62:	4a64      	ldr	r2, [pc, #400]	; (80040f4 <menu+0x2e5c>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	2001      	movs	r0, #1
 8003f68:	f003 fe0e 	bl	8007b88 <lcd_print>

		if(buzzer == 0) {
 8003f6c:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <menu+0x2e60>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d113      	bne.n	8003f9c <menu+0x2d04>
			if(dilSecim == 0) {
 8003f74:	4b56      	ldr	r3, [pc, #344]	; (80040d0 <menu+0x2e38>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003f7c:	4a5f      	ldr	r2, [pc, #380]	; (80040fc <menu+0x2e64>)
 8003f7e:	2101      	movs	r1, #1
 8003f80:	2002      	movs	r0, #2
 8003f82:	f003 fe01 	bl	8007b88 <lcd_print>
 8003f86:	e020      	b.n	8003fca <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003f88:	4b51      	ldr	r3, [pc, #324]	; (80040d0 <menu+0x2e38>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d11c      	bne.n	8003fca <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003f90:	4a5b      	ldr	r2, [pc, #364]	; (8004100 <menu+0x2e68>)
 8003f92:	2101      	movs	r1, #1
 8003f94:	2002      	movs	r0, #2
 8003f96:	f003 fdf7 	bl	8007b88 <lcd_print>
 8003f9a:	e016      	b.n	8003fca <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003f9c:	4b56      	ldr	r3, [pc, #344]	; (80040f8 <menu+0x2e60>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d112      	bne.n	8003fca <menu+0x2d32>
			if(dilSecim == 0) {
 8003fa4:	4b4a      	ldr	r3, [pc, #296]	; (80040d0 <menu+0x2e38>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003fac:	4a55      	ldr	r2, [pc, #340]	; (8004104 <menu+0x2e6c>)
 8003fae:	2101      	movs	r1, #1
 8003fb0:	2002      	movs	r0, #2
 8003fb2:	f003 fde9 	bl	8007b88 <lcd_print>
 8003fb6:	e008      	b.n	8003fca <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003fb8:	4b45      	ldr	r3, [pc, #276]	; (80040d0 <menu+0x2e38>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d104      	bne.n	8003fca <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003fc0:	4a51      	ldr	r2, [pc, #324]	; (8004108 <menu+0x2e70>)
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f003 fddf 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fca:	2102      	movs	r1, #2
 8003fcc:	4844      	ldr	r0, [pc, #272]	; (80040e0 <menu+0x2e48>)
 8003fce:	f005 f901 	bl	80091d4 <HAL_GPIO_ReadPin>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d115      	bne.n	8004004 <menu+0x2d6c>
 8003fd8:	4b42      	ldr	r3, [pc, #264]	; (80040e4 <menu+0x2e4c>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	f083 0301 	eor.w	r3, r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00e      	beq.n	8004004 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003fe6:	4b44      	ldr	r3, [pc, #272]	; (80040f8 <menu+0x2e60>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	3301      	adds	r3, #1
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <menu+0x2e60>)
 8003ff0:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <menu+0x2e60>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d902      	bls.n	8004000 <menu+0x2d68>
				buzzer = 0;
 8003ffa:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <menu+0x2e60>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004000:	f000 fd16 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004004:	2104      	movs	r1, #4
 8004006:	4836      	ldr	r0, [pc, #216]	; (80040e0 <menu+0x2e48>)
 8004008:	f005 f8e4 	bl	80091d4 <HAL_GPIO_ReadPin>
 800400c:	4603      	mov	r3, r0
 800400e:	2b01      	cmp	r3, #1
 8004010:	d115      	bne.n	800403e <menu+0x2da6>
 8004012:	4b34      	ldr	r3, [pc, #208]	; (80040e4 <menu+0x2e4c>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	f083 0301 	eor.w	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00e      	beq.n	800403e <menu+0x2da6>
			buzzer = buzzer - 1;
 8004020:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <menu+0x2e60>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	3b01      	subs	r3, #1
 8004026:	b2da      	uxtb	r2, r3
 8004028:	4b33      	ldr	r3, [pc, #204]	; (80040f8 <menu+0x2e60>)
 800402a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800402c:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <menu+0x2e60>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <menu+0x2da2>
		   		buzzer = 1;
 8004034:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <menu+0x2e60>)
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800403a:	f000 fcf9 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800403e:	2108      	movs	r1, #8
 8004040:	4827      	ldr	r0, [pc, #156]	; (80040e0 <menu+0x2e48>)
 8004042:	f005 f8c7 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004046:	4603      	mov	r3, r0
 8004048:	2b01      	cmp	r3, #1
 800404a:	d10d      	bne.n	8004068 <menu+0x2dd0>
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <menu+0x2e4c>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	f083 0301 	eor.w	r3, r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <menu+0x2dd0>
			eepromData[25] = buzzer;
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <menu+0x2e60>)
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <menu+0x2e50>)
 8004060:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004062:	4b22      	ldr	r3, [pc, #136]	; (80040ec <menu+0x2e54>)
 8004064:	2201      	movs	r2, #1
 8004066:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <menu+0x2e58>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b1c      	cmp	r3, #28
 800406e:	f040 80ab 	bne.w	80041c8 <menu+0x2f30>
		calismaSayModu = 0;
 8004072:	4b26      	ldr	r3, [pc, #152]	; (800410c <menu+0x2e74>)
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004078:	4a25      	ldr	r2, [pc, #148]	; (8004110 <menu+0x2e78>)
 800407a:	2101      	movs	r1, #1
 800407c:	2001      	movs	r0, #1
 800407e:	f003 fd83 	bl	8007b88 <lcd_print>

		if(demoMode == 0) {
 8004082:	4b24      	ldr	r3, [pc, #144]	; (8004114 <menu+0x2e7c>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d113      	bne.n	80040b2 <menu+0x2e1a>
			if(dilSecim == 0) {
 800408a:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <menu+0x2e38>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8004092:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <menu+0x2e64>)
 8004094:	2101      	movs	r1, #1
 8004096:	2002      	movs	r0, #2
 8004098:	f003 fd76 	bl	8007b88 <lcd_print>
 800409c:	e045      	b.n	800412a <menu+0x2e92>
			} else if(dilSecim == 1) {
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <menu+0x2e38>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d141      	bne.n	800412a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <menu+0x2e68>)
 80040a8:	2101      	movs	r1, #1
 80040aa:	2002      	movs	r0, #2
 80040ac:	f003 fd6c 	bl	8007b88 <lcd_print>
 80040b0:	e03b      	b.n	800412a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <menu+0x2e7c>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d137      	bne.n	800412a <menu+0x2e92>
			if(dilSecim == 0){
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <menu+0x2e38>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d12a      	bne.n	8004118 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80040c2:	4a10      	ldr	r2, [pc, #64]	; (8004104 <menu+0x2e6c>)
 80040c4:	2101      	movs	r1, #1
 80040c6:	2002      	movs	r0, #2
 80040c8:	f003 fd5e 	bl	8007b88 <lcd_print>
 80040cc:	e02d      	b.n	800412a <menu+0x2e92>
 80040ce:	bf00      	nop
 80040d0:	20000239 	.word	0x20000239
 80040d4:	0800d750 	.word	0x0800d750
 80040d8:	20000230 	.word	0x20000230
 80040dc:	2000018c 	.word	0x2000018c
 80040e0:	40010800 	.word	0x40010800
 80040e4:	20000247 	.word	0x20000247
 80040e8:	2000011c 	.word	0x2000011c
 80040ec:	20000244 	.word	0x20000244
 80040f0:	20000218 	.word	0x20000218
 80040f4:	0800d850 	.word	0x0800d850
 80040f8:	20000234 	.word	0x20000234
 80040fc:	0800d178 	.word	0x0800d178
 8004100:	0800d18c 	.word	0x0800d18c
 8004104:	0800d1d8 	.word	0x0800d1d8
 8004108:	0800d1ec 	.word	0x0800d1ec
 800410c:	20000238 	.word	0x20000238
 8004110:	0800d864 	.word	0x0800d864
 8004114:	20000236 	.word	0x20000236
			} else if(dilSecim == 1) {
 8004118:	4b71      	ldr	r3, [pc, #452]	; (80042e0 <menu+0x3048>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d104      	bne.n	800412a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004120:	4a70      	ldr	r2, [pc, #448]	; (80042e4 <menu+0x304c>)
 8004122:	2101      	movs	r1, #1
 8004124:	2002      	movs	r0, #2
 8004126:	f003 fd2f 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800412a:	2102      	movs	r1, #2
 800412c:	486e      	ldr	r0, [pc, #440]	; (80042e8 <menu+0x3050>)
 800412e:	f005 f851 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004132:	4603      	mov	r3, r0
 8004134:	2b01      	cmp	r3, #1
 8004136:	d115      	bne.n	8004164 <menu+0x2ecc>
 8004138:	4b6c      	ldr	r3, [pc, #432]	; (80042ec <menu+0x3054>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	f083 0301 	eor.w	r3, r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00e      	beq.n	8004164 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004146:	4b6a      	ldr	r3, [pc, #424]	; (80042f0 <menu+0x3058>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	3301      	adds	r3, #1
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4b68      	ldr	r3, [pc, #416]	; (80042f0 <menu+0x3058>)
 8004150:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004152:	4b67      	ldr	r3, [pc, #412]	; (80042f0 <menu+0x3058>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d902      	bls.n	8004160 <menu+0x2ec8>
				demoMode = 0;
 800415a:	4b65      	ldr	r3, [pc, #404]	; (80042f0 <menu+0x3058>)
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004160:	f000 fc66 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004164:	2104      	movs	r1, #4
 8004166:	4860      	ldr	r0, [pc, #384]	; (80042e8 <menu+0x3050>)
 8004168:	f005 f834 	bl	80091d4 <HAL_GPIO_ReadPin>
 800416c:	4603      	mov	r3, r0
 800416e:	2b01      	cmp	r3, #1
 8004170:	d115      	bne.n	800419e <menu+0x2f06>
 8004172:	4b5e      	ldr	r3, [pc, #376]	; (80042ec <menu+0x3054>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	f083 0301 	eor.w	r3, r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00e      	beq.n	800419e <menu+0x2f06>
			demoMode = demoMode - 1;
 8004180:	4b5b      	ldr	r3, [pc, #364]	; (80042f0 <menu+0x3058>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	3b01      	subs	r3, #1
 8004186:	b2da      	uxtb	r2, r3
 8004188:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <menu+0x3058>)
 800418a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800418c:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <menu+0x3058>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <menu+0x2f02>
		   		demoMode = 1;
 8004194:	4b56      	ldr	r3, [pc, #344]	; (80042f0 <menu+0x3058>)
 8004196:	2201      	movs	r2, #1
 8004198:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800419a:	f000 fc49 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800419e:	2108      	movs	r1, #8
 80041a0:	4851      	ldr	r0, [pc, #324]	; (80042e8 <menu+0x3050>)
 80041a2:	f005 f817 	bl	80091d4 <HAL_GPIO_ReadPin>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d10d      	bne.n	80041c8 <menu+0x2f30>
 80041ac:	4b4f      	ldr	r3, [pc, #316]	; (80042ec <menu+0x3054>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	f083 0301 	eor.w	r3, r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <menu+0x2f30>
			eepromData[26] = demoMode;
 80041ba:	4b4d      	ldr	r3, [pc, #308]	; (80042f0 <menu+0x3058>)
 80041bc:	781a      	ldrb	r2, [r3, #0]
 80041be:	4b4d      	ldr	r3, [pc, #308]	; (80042f4 <menu+0x305c>)
 80041c0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80041c2:	4b4d      	ldr	r3, [pc, #308]	; (80042f8 <menu+0x3060>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80041c8:	4b4c      	ldr	r3, [pc, #304]	; (80042fc <menu+0x3064>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b1d      	cmp	r3, #29
 80041ce:	f040 8132 	bne.w	8004436 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80041d2:	4b4b      	ldr	r3, [pc, #300]	; (8004300 <menu+0x3068>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d113      	bne.n	8004202 <menu+0x2f6a>
 80041da:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <menu+0x306c>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <menu+0x2f6a>
 80041e2:	4b49      	ldr	r3, [pc, #292]	; (8004308 <menu+0x3070>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <menu+0x2f6a>
 80041ea:	4b48      	ldr	r3, [pc, #288]	; (800430c <menu+0x3074>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d107      	bne.n	8004202 <menu+0x2f6a>
 80041f2:	4b47      	ldr	r3, [pc, #284]	; (8004310 <menu+0x3078>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <menu+0x2f6a>
			calismaSayisiYar = 0;
 80041fa:	4b46      	ldr	r3, [pc, #280]	; (8004314 <menu+0x307c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e002      	b.n	8004208 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8004202:	4b44      	ldr	r3, [pc, #272]	; (8004314 <menu+0x307c>)
 8004204:	2201      	movs	r2, #1
 8004206:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004208:	4b43      	ldr	r3, [pc, #268]	; (8004318 <menu+0x3080>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d154      	bne.n	80042ba <menu+0x3022>
			if(dilSecim == 0) {
 8004210:	4b33      	ldr	r3, [pc, #204]	; (80042e0 <menu+0x3048>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004218:	4a40      	ldr	r2, [pc, #256]	; (800431c <menu+0x3084>)
 800421a:	2101      	movs	r1, #1
 800421c:	2001      	movs	r0, #1
 800421e:	f003 fcb3 	bl	8007b88 <lcd_print>
 8004222:	e008      	b.n	8004236 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8004224:	4b2e      	ldr	r3, [pc, #184]	; (80042e0 <menu+0x3048>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d104      	bne.n	8004236 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800422c:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <menu+0x3088>)
 800422e:	2101      	movs	r1, #1
 8004230:	2001      	movs	r0, #1
 8004232:	f003 fca9 	bl	8007b88 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <menu+0x3078>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	220a      	movs	r2, #10
 800423c:	4939      	ldr	r1, [pc, #228]	; (8004324 <menu+0x308c>)
 800423e:	4618      	mov	r0, r3
 8004240:	f007 fff4 	bl	800c22c <itoa>
			lcd_print(2, 12, snum);
 8004244:	4a37      	ldr	r2, [pc, #220]	; (8004324 <menu+0x308c>)
 8004246:	210c      	movs	r1, #12
 8004248:	2002      	movs	r0, #2
 800424a:	f003 fc9d 	bl	8007b88 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800424e:	4b2f      	ldr	r3, [pc, #188]	; (800430c <menu+0x3074>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	220a      	movs	r2, #10
 8004254:	4933      	ldr	r1, [pc, #204]	; (8004324 <menu+0x308c>)
 8004256:	4618      	mov	r0, r3
 8004258:	f007 ffe8 	bl	800c22c <itoa>
			lcd_print(2, 13, snum);
 800425c:	4a31      	ldr	r2, [pc, #196]	; (8004324 <menu+0x308c>)
 800425e:	210d      	movs	r1, #13
 8004260:	2002      	movs	r0, #2
 8004262:	f003 fc91 	bl	8007b88 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <menu+0x3070>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	220a      	movs	r2, #10
 800426c:	492d      	ldr	r1, [pc, #180]	; (8004324 <menu+0x308c>)
 800426e:	4618      	mov	r0, r3
 8004270:	f007 ffdc 	bl	800c22c <itoa>
			lcd_print(2, 14, snum);
 8004274:	4a2b      	ldr	r2, [pc, #172]	; (8004324 <menu+0x308c>)
 8004276:	210e      	movs	r1, #14
 8004278:	2002      	movs	r0, #2
 800427a:	f003 fc85 	bl	8007b88 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800427e:	4b21      	ldr	r3, [pc, #132]	; (8004304 <menu+0x306c>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	220a      	movs	r2, #10
 8004284:	4927      	ldr	r1, [pc, #156]	; (8004324 <menu+0x308c>)
 8004286:	4618      	mov	r0, r3
 8004288:	f007 ffd0 	bl	800c22c <itoa>
			lcd_print(2, 15, snum);
 800428c:	4a25      	ldr	r2, [pc, #148]	; (8004324 <menu+0x308c>)
 800428e:	210f      	movs	r1, #15
 8004290:	2002      	movs	r0, #2
 8004292:	f003 fc79 	bl	8007b88 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <menu+0x3068>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	220a      	movs	r2, #10
 800429c:	4921      	ldr	r1, [pc, #132]	; (8004324 <menu+0x308c>)
 800429e:	4618      	mov	r0, r3
 80042a0:	f007 ffc4 	bl	800c22c <itoa>
			lcd_print(2, 16, snum);
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <menu+0x308c>)
 80042a6:	2110      	movs	r1, #16
 80042a8:	2002      	movs	r0, #2
 80042aa:	f003 fc6d 	bl	8007b88 <lcd_print>

			lcd_print(2, 1, "           ");
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <menu+0x3090>)
 80042b0:	2101      	movs	r1, #1
 80042b2:	2002      	movs	r0, #2
 80042b4:	f003 fc68 	bl	8007b88 <lcd_print>
 80042b8:	e048      	b.n	800434c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80042ba:	4b17      	ldr	r3, [pc, #92]	; (8004318 <menu+0x3080>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d144      	bne.n	800434c <menu+0x30b4>
			if(dilSecim == 0) {
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <menu+0x3048>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d132      	bne.n	8004330 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80042ca:	4a14      	ldr	r2, [pc, #80]	; (800431c <menu+0x3084>)
 80042cc:	2101      	movs	r1, #1
 80042ce:	2001      	movs	r0, #1
 80042d0:	f003 fc5a 	bl	8007b88 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80042d4:	4a15      	ldr	r2, [pc, #84]	; (800432c <menu+0x3094>)
 80042d6:	2101      	movs	r1, #1
 80042d8:	2002      	movs	r0, #2
 80042da:	f003 fc55 	bl	8007b88 <lcd_print>
 80042de:	e035      	b.n	800434c <menu+0x30b4>
 80042e0:	20000239 	.word	0x20000239
 80042e4:	0800d1ec 	.word	0x0800d1ec
 80042e8:	40010800 	.word	0x40010800
 80042ec:	20000247 	.word	0x20000247
 80042f0:	20000236 	.word	0x20000236
 80042f4:	2000011c 	.word	0x2000011c
 80042f8:	20000244 	.word	0x20000244
 80042fc:	20000218 	.word	0x20000218
 8004300:	20000215 	.word	0x20000215
 8004304:	20000216 	.word	0x20000216
 8004308:	20000000 	.word	0x20000000
 800430c:	20000001 	.word	0x20000001
 8004310:	20000217 	.word	0x20000217
 8004314:	20000259 	.word	0x20000259
 8004318:	20000238 	.word	0x20000238
 800431c:	0800d874 	.word	0x0800d874
 8004320:	0800d888 	.word	0x0800d888
 8004324:	2000018c 	.word	0x2000018c
 8004328:	0800d89c 	.word	0x0800d89c
 800432c:	0800d8a8 	.word	0x0800d8a8
			} else if(dilSecim == 1) {
 8004330:	4b94      	ldr	r3, [pc, #592]	; (8004584 <menu+0x32ec>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d109      	bne.n	800434c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004338:	4a93      	ldr	r2, [pc, #588]	; (8004588 <menu+0x32f0>)
 800433a:	2101      	movs	r1, #1
 800433c:	2001      	movs	r0, #1
 800433e:	f003 fc23 	bl	8007b88 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004342:	4a92      	ldr	r2, [pc, #584]	; (800458c <menu+0x32f4>)
 8004344:	2101      	movs	r1, #1
 8004346:	2002      	movs	r0, #2
 8004348:	f003 fc1e 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800434c:	2102      	movs	r1, #2
 800434e:	4890      	ldr	r0, [pc, #576]	; (8004590 <menu+0x32f8>)
 8004350:	f004 ff40 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004354:	4603      	mov	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d119      	bne.n	800438e <menu+0x30f6>
 800435a:	4b8e      	ldr	r3, [pc, #568]	; (8004594 <menu+0x32fc>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	f083 0301 	eor.w	r3, r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d012      	beq.n	800438e <menu+0x30f6>
 8004368:	4b8b      	ldr	r3, [pc, #556]	; (8004598 <menu+0x3300>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00e      	beq.n	800438e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004370:	4b8a      	ldr	r3, [pc, #552]	; (800459c <menu+0x3304>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	b2da      	uxtb	r2, r3
 8004378:	4b88      	ldr	r3, [pc, #544]	; (800459c <menu+0x3304>)
 800437a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800437c:	4b87      	ldr	r3, [pc, #540]	; (800459c <menu+0x3304>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d902      	bls.n	800438a <menu+0x30f2>
				calismaSayModu = 0;
 8004384:	4b85      	ldr	r3, [pc, #532]	; (800459c <menu+0x3304>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800438a:	f000 fb51 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800438e:	2104      	movs	r1, #4
 8004390:	487f      	ldr	r0, [pc, #508]	; (8004590 <menu+0x32f8>)
 8004392:	f004 ff1f 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004396:	4603      	mov	r3, r0
 8004398:	2b01      	cmp	r3, #1
 800439a:	d119      	bne.n	80043d0 <menu+0x3138>
 800439c:	4b7d      	ldr	r3, [pc, #500]	; (8004594 <menu+0x32fc>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	f083 0301 	eor.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d012      	beq.n	80043d0 <menu+0x3138>
 80043aa:	4b7b      	ldr	r3, [pc, #492]	; (8004598 <menu+0x3300>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00e      	beq.n	80043d0 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80043b2:	4b7a      	ldr	r3, [pc, #488]	; (800459c <menu+0x3304>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4b78      	ldr	r3, [pc, #480]	; (800459c <menu+0x3304>)
 80043bc:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80043be:	4b77      	ldr	r3, [pc, #476]	; (800459c <menu+0x3304>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <menu+0x3134>
		   		calismaSayModu = 1;
 80043c6:	4b75      	ldr	r3, [pc, #468]	; (800459c <menu+0x3304>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043cc:	f000 fb30 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043d0:	2108      	movs	r1, #8
 80043d2:	486f      	ldr	r0, [pc, #444]	; (8004590 <menu+0x32f8>)
 80043d4:	f004 fefe 	bl	80091d4 <HAL_GPIO_ReadPin>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d12b      	bne.n	8004436 <menu+0x319e>
 80043de:	4b6d      	ldr	r3, [pc, #436]	; (8004594 <menu+0x32fc>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	f083 0301 	eor.w	r3, r3, #1
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d024      	beq.n	8004436 <menu+0x319e>
			eepromData[32] = 0;
 80043ec:	4b6c      	ldr	r3, [pc, #432]	; (80045a0 <menu+0x3308>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80043f4:	4b6a      	ldr	r3, [pc, #424]	; (80045a0 <menu+0x3308>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80043fa:	4b69      	ldr	r3, [pc, #420]	; (80045a0 <menu+0x3308>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004400:	4b67      	ldr	r3, [pc, #412]	; (80045a0 <menu+0x3308>)
 8004402:	2200      	movs	r2, #0
 8004404:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004406:	4b66      	ldr	r3, [pc, #408]	; (80045a0 <menu+0x3308>)
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800440c:	4b65      	ldr	r3, [pc, #404]	; (80045a4 <menu+0x330c>)
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004412:	4b65      	ldr	r3, [pc, #404]	; (80045a8 <menu+0x3310>)
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004418:	4b64      	ldr	r3, [pc, #400]	; (80045ac <menu+0x3314>)
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800441e:	4b64      	ldr	r3, [pc, #400]	; (80045b0 <menu+0x3318>)
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004424:	4b63      	ldr	r3, [pc, #396]	; (80045b4 <menu+0x331c>)
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800442a:	4b5c      	ldr	r3, [pc, #368]	; (800459c <menu+0x3304>)
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004430:	4b61      	ldr	r3, [pc, #388]	; (80045b8 <menu+0x3320>)
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004436:	4b61      	ldr	r3, [pc, #388]	; (80045bc <menu+0x3324>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b1e      	cmp	r3, #30
 800443c:	d16f      	bne.n	800451e <menu+0x3286>
		calismaSayModu = 0;
 800443e:	4b57      	ldr	r3, [pc, #348]	; (800459c <menu+0x3304>)
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004444:	4b4f      	ldr	r3, [pc, #316]	; (8004584 <menu+0x32ec>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10a      	bne.n	8004462 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800444c:	4a5c      	ldr	r2, [pc, #368]	; (80045c0 <menu+0x3328>)
 800444e:	2101      	movs	r1, #1
 8004450:	2001      	movs	r0, #1
 8004452:	f003 fb99 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004456:	4a5b      	ldr	r2, [pc, #364]	; (80045c4 <menu+0x332c>)
 8004458:	2101      	movs	r1, #1
 800445a:	2002      	movs	r0, #2
 800445c:	f003 fb94 	bl	8007b88 <lcd_print>
 8004460:	e00d      	b.n	800447e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004462:	4b48      	ldr	r3, [pc, #288]	; (8004584 <menu+0x32ec>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d109      	bne.n	800447e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800446a:	4a57      	ldr	r2, [pc, #348]	; (80045c8 <menu+0x3330>)
 800446c:	2101      	movs	r1, #1
 800446e:	2001      	movs	r0, #1
 8004470:	f003 fb8a 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004474:	4a55      	ldr	r2, [pc, #340]	; (80045cc <menu+0x3334>)
 8004476:	2101      	movs	r1, #1
 8004478:	2002      	movs	r0, #2
 800447a:	f003 fb85 	bl	8007b88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800447e:	2102      	movs	r1, #2
 8004480:	4843      	ldr	r0, [pc, #268]	; (8004590 <menu+0x32f8>)
 8004482:	f004 fea7 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004486:	4603      	mov	r3, r0
 8004488:	2b01      	cmp	r3, #1
 800448a:	d115      	bne.n	80044b8 <menu+0x3220>
 800448c:	4b41      	ldr	r3, [pc, #260]	; (8004594 <menu+0x32fc>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	f083 0301 	eor.w	r3, r3, #1
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00e      	beq.n	80044b8 <menu+0x3220>
			dilSecim = dilSecim + 1;
 800449a:	4b3a      	ldr	r3, [pc, #232]	; (8004584 <menu+0x32ec>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4b38      	ldr	r3, [pc, #224]	; (8004584 <menu+0x32ec>)
 80044a4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80044a6:	4b37      	ldr	r3, [pc, #220]	; (8004584 <menu+0x32ec>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d902      	bls.n	80044b4 <menu+0x321c>
				dilSecim = 0;
 80044ae:	4b35      	ldr	r3, [pc, #212]	; (8004584 <menu+0x32ec>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80044b4:	f000 fabc 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044b8:	2104      	movs	r1, #4
 80044ba:	4835      	ldr	r0, [pc, #212]	; (8004590 <menu+0x32f8>)
 80044bc:	f004 fe8a 	bl	80091d4 <HAL_GPIO_ReadPin>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d115      	bne.n	80044f2 <menu+0x325a>
 80044c6:	4b33      	ldr	r3, [pc, #204]	; (8004594 <menu+0x32fc>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	f083 0301 	eor.w	r3, r3, #1
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00e      	beq.n	80044f2 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80044d4:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <menu+0x32ec>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	3b01      	subs	r3, #1
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	4b29      	ldr	r3, [pc, #164]	; (8004584 <menu+0x32ec>)
 80044de:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80044e0:	4b28      	ldr	r3, [pc, #160]	; (8004584 <menu+0x32ec>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <menu+0x3256>
		   		dilSecim = 1;
 80044e8:	4b26      	ldr	r3, [pc, #152]	; (8004584 <menu+0x32ec>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80044ee:	f000 fa9f 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044f2:	2108      	movs	r1, #8
 80044f4:	4826      	ldr	r0, [pc, #152]	; (8004590 <menu+0x32f8>)
 80044f6:	f004 fe6d 	bl	80091d4 <HAL_GPIO_ReadPin>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d10e      	bne.n	800451e <menu+0x3286>
 8004500:	4b24      	ldr	r3, [pc, #144]	; (8004594 <menu+0x32fc>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	f083 0301 	eor.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <menu+0x3286>
			eepromData[33] = dilSecim;
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <menu+0x32ec>)
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <menu+0x3308>)
 8004514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004518:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <menu+0x3320>)
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800451e:	4b27      	ldr	r3, [pc, #156]	; (80045bc <menu+0x3324>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b1f      	cmp	r3, #31
 8004524:	f040 80b7 	bne.w	8004696 <menu+0x33fe>
		calismaSayModu = 0;
 8004528:	4b1c      	ldr	r3, [pc, #112]	; (800459c <menu+0x3304>)
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800452e:	4a28      	ldr	r2, [pc, #160]	; (80045d0 <menu+0x3338>)
 8004530:	2101      	movs	r1, #1
 8004532:	2001      	movs	r0, #1
 8004534:	f003 fb28 	bl	8007b88 <lcd_print>

		if(iotMode == 0) {
 8004538:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <menu+0x333c>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d113      	bne.n	8004568 <menu+0x32d0>
			if(dilSecim == 0) {
 8004540:	4b10      	ldr	r3, [pc, #64]	; (8004584 <menu+0x32ec>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004548:	4a23      	ldr	r2, [pc, #140]	; (80045d8 <menu+0x3340>)
 800454a:	2101      	movs	r1, #1
 800454c:	2002      	movs	r0, #2
 800454e:	f003 fb1b 	bl	8007b88 <lcd_print>
 8004552:	e050      	b.n	80045f6 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <menu+0x32ec>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d14c      	bne.n	80045f6 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <menu+0x3344>)
 800455e:	2101      	movs	r1, #1
 8004560:	2002      	movs	r0, #2
 8004562:	f003 fb11 	bl	8007b88 <lcd_print>
 8004566:	e046      	b.n	80045f6 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004568:	4b1a      	ldr	r3, [pc, #104]	; (80045d4 <menu+0x333c>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d142      	bne.n	80045f6 <menu+0x335e>
			if(dilSecim == 0) {
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <menu+0x32ec>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d135      	bne.n	80045e4 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004578:	4a19      	ldr	r2, [pc, #100]	; (80045e0 <menu+0x3348>)
 800457a:	2101      	movs	r1, #1
 800457c:	2002      	movs	r0, #2
 800457e:	f003 fb03 	bl	8007b88 <lcd_print>
 8004582:	e038      	b.n	80045f6 <menu+0x335e>
 8004584:	20000239 	.word	0x20000239
 8004588:	0800d888 	.word	0x0800d888
 800458c:	0800d8bc 	.word	0x0800d8bc
 8004590:	40010800 	.word	0x40010800
 8004594:	20000247 	.word	0x20000247
 8004598:	20000259 	.word	0x20000259
 800459c:	20000238 	.word	0x20000238
 80045a0:	2000011c 	.word	0x2000011c
 80045a4:	20000217 	.word	0x20000217
 80045a8:	20000001 	.word	0x20000001
 80045ac:	20000000 	.word	0x20000000
 80045b0:	20000216 	.word	0x20000216
 80045b4:	20000215 	.word	0x20000215
 80045b8:	20000244 	.word	0x20000244
 80045bc:	20000218 	.word	0x20000218
 80045c0:	0800d8d0 	.word	0x0800d8d0
 80045c4:	0800d8e4 	.word	0x0800d8e4
 80045c8:	0800d8f8 	.word	0x0800d8f8
 80045cc:	0800d90c 	.word	0x0800d90c
 80045d0:	0800d920 	.word	0x0800d920
 80045d4:	20000237 	.word	0x20000237
 80045d8:	0800d178 	.word	0x0800d178
 80045dc:	0800d18c 	.word	0x0800d18c
 80045e0:	0800d1d8 	.word	0x0800d1d8
			} else if(dilSecim == 1) {
 80045e4:	4bab      	ldr	r3, [pc, #684]	; (8004894 <menu+0x35fc>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d104      	bne.n	80045f6 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80045ec:	4aaa      	ldr	r2, [pc, #680]	; (8004898 <menu+0x3600>)
 80045ee:	2101      	movs	r1, #1
 80045f0:	2002      	movs	r0, #2
 80045f2:	f003 fac9 	bl	8007b88 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80045f6:	2102      	movs	r1, #2
 80045f8:	48a8      	ldr	r0, [pc, #672]	; (800489c <menu+0x3604>)
 80045fa:	f004 fdeb 	bl	80091d4 <HAL_GPIO_ReadPin>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b01      	cmp	r3, #1
 8004602:	d115      	bne.n	8004630 <menu+0x3398>
 8004604:	4ba6      	ldr	r3, [pc, #664]	; (80048a0 <menu+0x3608>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f083 0301 	eor.w	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00e      	beq.n	8004630 <menu+0x3398>
			iotMode = iotMode + 1;
 8004612:	4ba4      	ldr	r3, [pc, #656]	; (80048a4 <menu+0x360c>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4ba2      	ldr	r3, [pc, #648]	; (80048a4 <menu+0x360c>)
 800461c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800461e:	4ba1      	ldr	r3, [pc, #644]	; (80048a4 <menu+0x360c>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d902      	bls.n	800462c <menu+0x3394>
				iotMode = 0;
 8004626:	4b9f      	ldr	r3, [pc, #636]	; (80048a4 <menu+0x360c>)
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800462c:	f000 fa00 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004630:	2104      	movs	r1, #4
 8004632:	489a      	ldr	r0, [pc, #616]	; (800489c <menu+0x3604>)
 8004634:	f004 fdce 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d115      	bne.n	800466a <menu+0x33d2>
 800463e:	4b98      	ldr	r3, [pc, #608]	; (80048a0 <menu+0x3608>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	f083 0301 	eor.w	r3, r3, #1
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00e      	beq.n	800466a <menu+0x33d2>
			iotMode = iotMode - 1;
 800464c:	4b95      	ldr	r3, [pc, #596]	; (80048a4 <menu+0x360c>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	3b01      	subs	r3, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	4b93      	ldr	r3, [pc, #588]	; (80048a4 <menu+0x360c>)
 8004656:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004658:	4b92      	ldr	r3, [pc, #584]	; (80048a4 <menu+0x360c>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <menu+0x33ce>
		   		iotMode = 1;
 8004660:	4b90      	ldr	r3, [pc, #576]	; (80048a4 <menu+0x360c>)
 8004662:	2201      	movs	r2, #1
 8004664:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004666:	f000 f9e3 	bl	8004a30 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800466a:	2108      	movs	r1, #8
 800466c:	488b      	ldr	r0, [pc, #556]	; (800489c <menu+0x3604>)
 800466e:	f004 fdb1 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004672:	4603      	mov	r3, r0
 8004674:	2b01      	cmp	r3, #1
 8004676:	d10e      	bne.n	8004696 <menu+0x33fe>
 8004678:	4b89      	ldr	r3, [pc, #548]	; (80048a0 <menu+0x3608>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f083 0301 	eor.w	r3, r3, #1
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004686:	4b87      	ldr	r3, [pc, #540]	; (80048a4 <menu+0x360c>)
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	4b87      	ldr	r3, [pc, #540]	; (80048a8 <menu+0x3610>)
 800468c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004690:	4b86      	ldr	r3, [pc, #536]	; (80048ac <menu+0x3614>)
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004696:	4b86      	ldr	r3, [pc, #536]	; (80048b0 <menu+0x3618>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b20      	cmp	r3, #32
 800469c:	d13f      	bne.n	800471e <menu+0x3486>
		calismaSayModu = 0;
 800469e:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <menu+0x361c>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80046a4:	4b7b      	ldr	r3, [pc, #492]	; (8004894 <menu+0x35fc>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80046ac:	4a82      	ldr	r2, [pc, #520]	; (80048b8 <menu+0x3620>)
 80046ae:	2101      	movs	r1, #1
 80046b0:	2001      	movs	r0, #1
 80046b2:	f003 fa69 	bl	8007b88 <lcd_print>
 80046b6:	e004      	b.n	80046c2 <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80046b8:	4a80      	ldr	r2, [pc, #512]	; (80048bc <menu+0x3624>)
 80046ba:	2101      	movs	r1, #1
 80046bc:	2001      	movs	r0, #1
 80046be:	f003 fa63 	bl	8007b88 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80046c2:	4a7f      	ldr	r2, [pc, #508]	; (80048c0 <menu+0x3628>)
 80046c4:	2101      	movs	r1, #1
 80046c6:	2002      	movs	r0, #2
 80046c8:	f003 fa5e 	bl	8007b88 <lcd_print>
		lcd_print(2, 13, "    ");
 80046cc:	4a7d      	ldr	r2, [pc, #500]	; (80048c4 <menu+0x362c>)
 80046ce:	210d      	movs	r1, #13
 80046d0:	2002      	movs	r0, #2
 80046d2:	f003 fa59 	bl	8007b88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046d6:	2102      	movs	r1, #2
 80046d8:	4870      	ldr	r0, [pc, #448]	; (800489c <menu+0x3604>)
 80046da:	f004 fd7b 	bl	80091d4 <HAL_GPIO_ReadPin>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d11c      	bne.n	800471e <menu+0x3486>
 80046e4:	2104      	movs	r1, #4
 80046e6:	486d      	ldr	r0, [pc, #436]	; (800489c <menu+0x3604>)
 80046e8:	f004 fd74 	bl	80091d4 <HAL_GPIO_ReadPin>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d115      	bne.n	800471e <menu+0x3486>
 80046f2:	4b6b      	ldr	r3, [pc, #428]	; (80048a0 <menu+0x3608>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	f083 0301 	eor.w	r3, r3, #1
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <menu+0x3486>
			takeMachineID();
 8004700:	f002 faa2 	bl	8006c48 <takeMachineID>

			HAL_Delay(250);
 8004704:	20fa      	movs	r0, #250	; 0xfa
 8004706:	f003 ff95 	bl	8008634 <HAL_Delay>
			lcd_print(2, 1, machineID);
 800470a:	4a6d      	ldr	r2, [pc, #436]	; (80048c0 <menu+0x3628>)
 800470c:	2101      	movs	r1, #1
 800470e:	2002      	movs	r0, #2
 8004710:	f003 fa3a 	bl	8007b88 <lcd_print>
			lcd_print(2, 13, "    ");
 8004714:	4a6b      	ldr	r2, [pc, #428]	; (80048c4 <menu+0x362c>)
 8004716:	210d      	movs	r1, #13
 8004718:	2002      	movs	r0, #2
 800471a:	f003 fa35 	bl	8007b88 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 800471e:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <menu+0x3618>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b21      	cmp	r3, #33	; 0x21
 8004724:	d14f      	bne.n	80047c6 <menu+0x352e>
		calismaSayModu = 0;
 8004726:	4b63      	ldr	r3, [pc, #396]	; (80048b4 <menu+0x361c>)
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 800472c:	4866      	ldr	r0, [pc, #408]	; (80048c8 <menu+0x3630>)
 800472e:	f7fb fd79 	bl	8000224 <strlen>
 8004732:	4603      	mov	r3, r0
 8004734:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 8004736:	4a65      	ldr	r2, [pc, #404]	; (80048cc <menu+0x3634>)
 8004738:	2101      	movs	r1, #1
 800473a:	2001      	movs	r0, #1
 800473c:	f003 fa24 	bl	8007b88 <lcd_print>

		if(ssidLength <=16) {
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b10      	cmp	r3, #16
 8004744:	dc0e      	bgt.n	8004764 <menu+0x34cc>
			lcd_print(2, 1, wifiSSID);
 8004746:	4a60      	ldr	r2, [pc, #384]	; (80048c8 <menu+0x3630>)
 8004748:	2101      	movs	r1, #1
 800474a:	2002      	movs	r0, #2
 800474c:	f003 fa1c 	bl	8007b88 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	3301      	adds	r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	4a5d      	ldr	r2, [pc, #372]	; (80048d0 <menu+0x3638>)
 800475a:	4619      	mov	r1, r3
 800475c:	2002      	movs	r0, #2
 800475e:	f003 fa13 	bl	8007b88 <lcd_print>
 8004762:	e005      	b.n	8004770 <menu+0x34d8>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004764:	2300      	movs	r3, #0
 8004766:	2202      	movs	r2, #2
 8004768:	2101      	movs	r1, #1
 800476a:	4857      	ldr	r0, [pc, #348]	; (80048c8 <menu+0x3630>)
 800476c:	f7fc fcd8 	bl	8001120 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004770:	2102      	movs	r1, #2
 8004772:	484a      	ldr	r0, [pc, #296]	; (800489c <menu+0x3604>)
 8004774:	f004 fd2e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004778:	4603      	mov	r3, r0
 800477a:	2b01      	cmp	r3, #1
 800477c:	d123      	bne.n	80047c6 <menu+0x352e>
 800477e:	2104      	movs	r1, #4
 8004780:	4846      	ldr	r0, [pc, #280]	; (800489c <menu+0x3604>)
 8004782:	f004 fd27 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004786:	4603      	mov	r3, r0
 8004788:	2b01      	cmp	r3, #1
 800478a:	d11c      	bne.n	80047c6 <menu+0x352e>
 800478c:	4b44      	ldr	r3, [pc, #272]	; (80048a0 <menu+0x3608>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	f083 0301 	eor.w	r3, r3, #1
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d015      	beq.n	80047c6 <menu+0x352e>
			takeWifiSSID();
 800479a:	f002 fbab 	bl	8006ef4 <takeWifiSSID>

			HAL_Delay(250);
 800479e:	20fa      	movs	r0, #250	; 0xfa
 80047a0:	f003 ff48 	bl	8008634 <HAL_Delay>
			lcd_print(2, 1, wifiSSID);
 80047a4:	4a48      	ldr	r2, [pc, #288]	; (80048c8 <menu+0x3630>)
 80047a6:	2101      	movs	r1, #1
 80047a8:	2002      	movs	r0, #2
 80047aa:	f003 f9ed 	bl	8007b88 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80047ae:	4846      	ldr	r0, [pc, #280]	; (80048c8 <menu+0x3630>)
 80047b0:	f7fb fd38 	bl	8000224 <strlen>
 80047b4:	4603      	mov	r3, r0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	4a44      	ldr	r2, [pc, #272]	; (80048d0 <menu+0x3638>)
 80047be:	4619      	mov	r1, r3
 80047c0:	2002      	movs	r0, #2
 80047c2:	f003 f9e1 	bl	8007b88 <lcd_print>
		}
	}

	if (menuSayac == 34) {
 80047c6:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <menu+0x3618>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b22      	cmp	r3, #34	; 0x22
 80047cc:	d14f      	bne.n	800486e <menu+0x35d6>
		calismaSayModu = 0;
 80047ce:	4b39      	ldr	r3, [pc, #228]	; (80048b4 <menu+0x361c>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 80047d4:	483f      	ldr	r0, [pc, #252]	; (80048d4 <menu+0x363c>)
 80047d6:	f7fb fd25 	bl	8000224 <strlen>
 80047da:	4603      	mov	r3, r0
 80047dc:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80047de:	4a3e      	ldr	r2, [pc, #248]	; (80048d8 <menu+0x3640>)
 80047e0:	2101      	movs	r1, #1
 80047e2:	2001      	movs	r0, #1
 80047e4:	f003 f9d0 	bl	8007b88 <lcd_print>

		if(passLength <= 16) {
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b10      	cmp	r3, #16
 80047ec:	dc0e      	bgt.n	800480c <menu+0x3574>
			lcd_print(2, 1, wifiPass);
 80047ee:	4a39      	ldr	r2, [pc, #228]	; (80048d4 <menu+0x363c>)
 80047f0:	2101      	movs	r1, #1
 80047f2:	2002      	movs	r0, #2
 80047f4:	f003 f9c8 	bl	8007b88 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	4a33      	ldr	r2, [pc, #204]	; (80048d0 <menu+0x3638>)
 8004802:	4619      	mov	r1, r3
 8004804:	2002      	movs	r0, #2
 8004806:	f003 f9bf 	bl	8007b88 <lcd_print>
 800480a:	e005      	b.n	8004818 <menu+0x3580>
		} else {
			slideText(wifiPass, 1, 2, 1);
 800480c:	2301      	movs	r3, #1
 800480e:	2202      	movs	r2, #2
 8004810:	2101      	movs	r1, #1
 8004812:	4830      	ldr	r0, [pc, #192]	; (80048d4 <menu+0x363c>)
 8004814:	f7fc fc84 	bl	8001120 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004818:	2102      	movs	r1, #2
 800481a:	4820      	ldr	r0, [pc, #128]	; (800489c <menu+0x3604>)
 800481c:	f004 fcda 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004820:	4603      	mov	r3, r0
 8004822:	2b01      	cmp	r3, #1
 8004824:	d123      	bne.n	800486e <menu+0x35d6>
 8004826:	2104      	movs	r1, #4
 8004828:	481c      	ldr	r0, [pc, #112]	; (800489c <menu+0x3604>)
 800482a:	f004 fcd3 	bl	80091d4 <HAL_GPIO_ReadPin>
 800482e:	4603      	mov	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d11c      	bne.n	800486e <menu+0x35d6>
 8004834:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <menu+0x3608>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	f083 0301 	eor.w	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d015      	beq.n	800486e <menu+0x35d6>
			takeWifiPass();
 8004842:	f002 fcf5 	bl	8007230 <takeWifiPass>

			HAL_Delay(250);
 8004846:	20fa      	movs	r0, #250	; 0xfa
 8004848:	f003 fef4 	bl	8008634 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 800484c:	4a21      	ldr	r2, [pc, #132]	; (80048d4 <menu+0x363c>)
 800484e:	2101      	movs	r1, #1
 8004850:	2002      	movs	r0, #2
 8004852:	f003 f999 	bl	8007b88 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004856:	481f      	ldr	r0, [pc, #124]	; (80048d4 <menu+0x363c>)
 8004858:	f7fb fce4 	bl	8000224 <strlen>
 800485c:	4603      	mov	r3, r0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	3301      	adds	r3, #1
 8004862:	b2db      	uxtb	r3, r3
 8004864:	4a1a      	ldr	r2, [pc, #104]	; (80048d0 <menu+0x3638>)
 8004866:	4619      	mov	r1, r3
 8004868:	2002      	movs	r0, #2
 800486a:	f003 f98d 	bl	8007b88 <lcd_print>
		}
	}

	if (menuSayac == 35) {
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <menu+0x3618>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b23      	cmp	r3, #35	; 0x23
 8004874:	d175      	bne.n	8004962 <menu+0x36ca>
		if(dilSecim == 0) {
 8004876:	4b07      	ldr	r3, [pc, #28]	; (8004894 <menu+0x35fc>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d132      	bne.n	80048e4 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800487e:	4a17      	ldr	r2, [pc, #92]	; (80048dc <menu+0x3644>)
 8004880:	2101      	movs	r1, #1
 8004882:	2001      	movs	r0, #1
 8004884:	f003 f980 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <menu+0x3648>)
 800488a:	2101      	movs	r1, #1
 800488c:	2002      	movs	r0, #2
 800488e:	f003 f97b 	bl	8007b88 <lcd_print>
 8004892:	e035      	b.n	8004900 <menu+0x3668>
 8004894:	20000239 	.word	0x20000239
 8004898:	0800d1ec 	.word	0x0800d1ec
 800489c:	40010800 	.word	0x40010800
 80048a0:	20000247 	.word	0x20000247
 80048a4:	20000237 	.word	0x20000237
 80048a8:	2000011c 	.word	0x2000011c
 80048ac:	20000244 	.word	0x20000244
 80048b0:	20000218 	.word	0x20000218
 80048b4:	20000238 	.word	0x20000238
 80048b8:	0800d934 	.word	0x0800d934
 80048bc:	0800d948 	.word	0x0800d948
 80048c0:	20000194 	.word	0x20000194
 80048c4:	0800d95c 	.word	0x0800d95c
 80048c8:	200001a0 	.word	0x200001a0
 80048cc:	0800d964 	.word	0x0800d964
 80048d0:	2000000c 	.word	0x2000000c
 80048d4:	200001b4 	.word	0x200001b4
 80048d8:	0800d978 	.word	0x0800d978
 80048dc:	0800d98c 	.word	0x0800d98c
 80048e0:	0800d9a0 	.word	0x0800d9a0
		} else if(dilSecim == 1) {
 80048e4:	4b21      	ldr	r3, [pc, #132]	; (800496c <menu+0x36d4>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d109      	bne.n	8004900 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80048ec:	4a20      	ldr	r2, [pc, #128]	; (8004970 <menu+0x36d8>)
 80048ee:	2101      	movs	r1, #1
 80048f0:	2001      	movs	r0, #1
 80048f2:	f003 f949 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80048f6:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <menu+0x36dc>)
 80048f8:	2101      	movs	r1, #1
 80048fa:	2002      	movs	r0, #2
 80048fc:	f003 f944 	bl	8007b88 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004900:	2108      	movs	r1, #8
 8004902:	481d      	ldr	r0, [pc, #116]	; (8004978 <menu+0x36e0>)
 8004904:	f004 fc66 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004908:	4603      	mov	r3, r0
 800490a:	2b01      	cmp	r3, #1
 800490c:	d129      	bne.n	8004962 <menu+0x36ca>
			menuGiris = 0;
 800490e:	4b1b      	ldr	r3, [pc, #108]	; (800497c <menu+0x36e4>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8004914:	bf00      	nop
 8004916:	481a      	ldr	r0, [pc, #104]	; (8004980 <menu+0x36e8>)
 8004918:	f005 fa85 	bl	8009e26 <HAL_I2C_GetError>
 800491c:	4603      	mov	r3, r0
 800491e:	2b04      	cmp	r3, #4
 8004920:	d0f9      	beq.n	8004916 <menu+0x367e>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8004922:	bf00      	nop
 8004924:	4816      	ldr	r0, [pc, #88]	; (8004980 <menu+0x36e8>)
 8004926:	f005 fa71 	bl	8009e0c <HAL_I2C_GetState>
 800492a:	4603      	mov	r3, r0
 800492c:	2b20      	cmp	r3, #32
 800492e:	d1f9      	bne.n	8004924 <menu+0x368c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004930:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004934:	9302      	str	r3, [sp, #8]
 8004936:	236e      	movs	r3, #110	; 0x6e
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <menu+0x36ec>)
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	236e      	movs	r3, #110	; 0x6e
 8004940:	2200      	movs	r2, #0
 8004942:	21a0      	movs	r1, #160	; 0xa0
 8004944:	480e      	ldr	r0, [pc, #56]	; (8004980 <menu+0x36e8>)
 8004946:	f004 feff 	bl	8009748 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 800494a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800494e:	f003 fe71 	bl	8008634 <HAL_Delay>

			lcd_clear();
 8004952:	f003 f945 	bl	8007be0 <lcd_clear>
			HAL_Delay(500);
 8004956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800495a:	f003 fe6b 	bl	8008634 <HAL_Delay>
			NVIC_SystemReset();
 800495e:	f7fc fc85 	bl	800126c <__NVIC_SystemReset>
		}
	}
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000239 	.word	0x20000239
 8004970:	0800d9b4 	.word	0x0800d9b4
 8004974:	0800d9c8 	.word	0x0800d9c8
 8004978:	40010800 	.word	0x40010800
 800497c:	20000235 	.word	0x20000235
 8004980:	200003a0 	.word	0x200003a0
 8004984:	2000011c 	.word	0x2000011c

08004988 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d105      	bne.n	80049a4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004998:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <lcdUpdate+0x9c>)
 800499a:	2101      	movs	r1, #1
 800499c:	2002      	movs	r0, #2
 800499e:	f003 f8f3 	bl	8007b88 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 80049a2:	e03b      	b.n	8004a1c <lcdUpdate+0x94>
	} else if(y==2) {
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d105      	bne.n	80049b6 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <lcdUpdate+0x9c>)
 80049ac:	2102      	movs	r1, #2
 80049ae:	2002      	movs	r0, #2
 80049b0:	f003 f8ea 	bl	8007b88 <lcd_print>
}
 80049b4:	e032      	b.n	8004a1c <lcdUpdate+0x94>
	} else if(y==3) {
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d105      	bne.n	80049c8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80049bc:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <lcdUpdate+0x9c>)
 80049be:	2103      	movs	r1, #3
 80049c0:	2002      	movs	r0, #2
 80049c2:	f003 f8e1 	bl	8007b88 <lcd_print>
}
 80049c6:	e029      	b.n	8004a1c <lcdUpdate+0x94>
	} else if(y==4) {
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d105      	bne.n	80049da <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80049ce:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <lcdUpdate+0x9c>)
 80049d0:	2104      	movs	r1, #4
 80049d2:	2002      	movs	r0, #2
 80049d4:	f003 f8d8 	bl	8007b88 <lcd_print>
}
 80049d8:	e020      	b.n	8004a1c <lcdUpdate+0x94>
	} else if(y==5) {
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d105      	bne.n	80049ec <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80049e0:	4a10      	ldr	r2, [pc, #64]	; (8004a24 <lcdUpdate+0x9c>)
 80049e2:	2105      	movs	r1, #5
 80049e4:	2002      	movs	r0, #2
 80049e6:	f003 f8cf 	bl	8007b88 <lcd_print>
}
 80049ea:	e017      	b.n	8004a1c <lcdUpdate+0x94>
	} else if(y==6) {
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	2b06      	cmp	r3, #6
 80049f0:	d105      	bne.n	80049fe <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80049f2:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <lcdUpdate+0x9c>)
 80049f4:	2106      	movs	r1, #6
 80049f6:	2002      	movs	r0, #2
 80049f8:	f003 f8c6 	bl	8007b88 <lcd_print>
}
 80049fc:	e00e      	b.n	8004a1c <lcdUpdate+0x94>
	} else if (y==7) {
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	2b07      	cmp	r3, #7
 8004a02:	d10b      	bne.n	8004a1c <lcdUpdate+0x94>
		lcd_clear();
 8004a04:	f003 f8ec 	bl	8007be0 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004a08:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <lcdUpdate+0xa0>)
 8004a0a:	2104      	movs	r1, #4
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	f003 f8bb 	bl	8007b88 <lcd_print>
		lcd_print(2, 6, "RUN");
 8004a12:	4a06      	ldr	r2, [pc, #24]	; (8004a2c <lcdUpdate+0xa4>)
 8004a14:	2106      	movs	r1, #6
 8004a16:	2002      	movs	r0, #2
 8004a18:	f003 f8b6 	bl	8007b88 <lcd_print>
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	0800d9dc 	.word	0x0800d9dc
 8004a28:	0800d9e0 	.word	0x0800d9e0
 8004a2c:	0800d9e8 	.word	0x0800d9e8

08004a30 <bekle>:

void bekle() {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
	timer1=millis;
 8004a34:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <bekle+0x124>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a47      	ldr	r2, [pc, #284]	; (8004b58 <bekle+0x128>)
 8004a3a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a3c:	e002      	b.n	8004a44 <bekle+0x14>
    	butonKontrol = 1;
 8004a3e:	4b47      	ldr	r3, [pc, #284]	; (8004b5c <bekle+0x12c>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a44:	2101      	movs	r1, #1
 8004a46:	4846      	ldr	r0, [pc, #280]	; (8004b60 <bekle+0x130>)
 8004a48:	f004 fbc4 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d109      	bne.n	8004a66 <bekle+0x36>
 8004a52:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <bekle+0x124>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b40      	ldr	r3, [pc, #256]	; (8004b58 <bekle+0x128>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d0ef      	beq.n	8004a3e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a5e:	e002      	b.n	8004a66 <bekle+0x36>
    	butonKontrol = 1;
 8004a60:	4b3e      	ldr	r3, [pc, #248]	; (8004b5c <bekle+0x12c>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a66:	2108      	movs	r1, #8
 8004a68:	483e      	ldr	r0, [pc, #248]	; (8004b64 <bekle+0x134>)
 8004a6a:	f004 fbb3 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d109      	bne.n	8004a88 <bekle+0x58>
 8004a74:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <bekle+0x124>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b37      	ldr	r3, [pc, #220]	; (8004b58 <bekle+0x128>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d0ef      	beq.n	8004a60 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a80:	e002      	b.n	8004a88 <bekle+0x58>
    	butonKontrol = 1;
 8004a82:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <bekle+0x12c>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a88:	2102      	movs	r1, #2
 8004a8a:	4835      	ldr	r0, [pc, #212]	; (8004b60 <bekle+0x130>)
 8004a8c:	f004 fba2 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d109      	bne.n	8004aaa <bekle+0x7a>
 8004a96:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <bekle+0x124>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <bekle+0x128>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d0ef      	beq.n	8004a82 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004aa2:	e002      	b.n	8004aaa <bekle+0x7a>
    	butonKontrol = 1;
 8004aa4:	4b2d      	ldr	r3, [pc, #180]	; (8004b5c <bekle+0x12c>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004aaa:	2104      	movs	r1, #4
 8004aac:	482c      	ldr	r0, [pc, #176]	; (8004b60 <bekle+0x130>)
 8004aae:	f004 fb91 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d109      	bne.n	8004acc <bekle+0x9c>
 8004ab8:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <bekle+0x124>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <bekle+0x128>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d0ef      	beq.n	8004aa4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ac4:	e002      	b.n	8004acc <bekle+0x9c>
    	butonKontrol = 1;
 8004ac6:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <bekle+0x12c>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004acc:	2108      	movs	r1, #8
 8004ace:	4824      	ldr	r0, [pc, #144]	; (8004b60 <bekle+0x130>)
 8004ad0:	f004 fb80 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d109      	bne.n	8004aee <bekle+0xbe>
 8004ada:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <bekle+0x124>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <bekle+0x128>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d0ef      	beq.n	8004ac6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ae6:	e002      	b.n	8004aee <bekle+0xbe>
    	butonKontrol = 1;
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	; (8004b5c <bekle+0x12c>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004aee:	2180      	movs	r1, #128	; 0x80
 8004af0:	481c      	ldr	r0, [pc, #112]	; (8004b64 <bekle+0x134>)
 8004af2:	f004 fb6f 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d109      	bne.n	8004b10 <bekle+0xe0>
 8004afc:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <bekle+0x124>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b15      	ldr	r3, [pc, #84]	; (8004b58 <bekle+0x128>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d0ef      	beq.n	8004ae8 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b08:	e002      	b.n	8004b10 <bekle+0xe0>
    	butonKontrol = 1;
 8004b0a:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <bekle+0x12c>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b14:	4813      	ldr	r0, [pc, #76]	; (8004b64 <bekle+0x134>)
 8004b16:	f004 fb5d 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <bekle+0x104>
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <bekle+0x124>)
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <bekle+0x128>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d0ee      	beq.n	8004b0a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b2c:	e002      	b.n	8004b34 <bekle+0x104>
    	butonKontrol = 1;
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <bekle+0x12c>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b38:	480a      	ldr	r0, [pc, #40]	; (8004b64 <bekle+0x134>)
 8004b3a:	f004 fb4b 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <bekle+0x120>
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <bekle+0x124>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <bekle+0x128>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d0ee      	beq.n	8004b2e <bekle+0xfe>
    }

}
 8004b50:	bf00      	nop
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	200001f4 	.word	0x200001f4
 8004b58:	200001fc 	.word	0x200001fc
 8004b5c:	20000247 	.word	0x20000247
 8004b60:	40010800 	.word	0x40010800
 8004b64:	40011000 	.word	0x40011000

08004b68 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <checkLCDBacklight+0x24>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <checkLCDBacklight+0x28>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b3b      	cmp	r3, #59	; 0x3b
 8004b78:	d903      	bls.n	8004b82 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	f003 f850 	bl	8007c20 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004b80:	e002      	b.n	8004b88 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004b82:	2001      	movs	r0, #1
 8004b84:	f003 f84c 	bl	8007c20 <lcd_backlight>
}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	200001f4 	.word	0x200001f4
 8004b90:	20000210 	.word	0x20000210

08004b94 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <checkBasincSalteri+0x54>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <checkBasincSalteri+0x12>
		basincVar=1;
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <checkBasincSalteri+0x58>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004ba6:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <checkBasincSalteri+0x54>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d119      	bne.n	8004be2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bb2:	480f      	ldr	r0, [pc, #60]	; (8004bf0 <checkBasincSalteri+0x5c>)
 8004bb4:	f004 fb0e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <checkBasincSalteri+0x60>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <checkBasincSalteri+0x64>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d90a      	bls.n	8004be2 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004bcc:	4b07      	ldr	r3, [pc, #28]	; (8004bec <checkBasincSalteri+0x58>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004bd2:	e006      	b.n	8004be2 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <checkBasincSalteri+0x60>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a07      	ldr	r2, [pc, #28]	; (8004bf8 <checkBasincSalteri+0x64>)
 8004bda:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <checkBasincSalteri+0x58>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	2000021f 	.word	0x2000021f
 8004bec:	2000021b 	.word	0x2000021b
 8004bf0:	40011000 	.word	0x40011000
 8004bf4:	200001f4 	.word	0x200001f4
 8004bf8:	2000020c 	.word	0x2000020c

08004bfc <checkBasGonder>:

void checkBasGonder() {
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c00:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <checkBasGonder+0x74>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d10b      	bne.n	8004c20 <checkBasGonder+0x24>
 8004c08:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <checkBasGonder+0x78>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <checkBasGonder+0x24>
 8004c10:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <checkBasGonder+0x7c>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004c18:	4b18      	ldr	r3, [pc, #96]	; (8004c7c <checkBasGonder+0x80>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e009      	b.n	8004c34 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <checkBasGonder+0x78>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f083 0301 	eor.w	r3, r3, #1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004c2e:	4b13      	ldr	r3, [pc, #76]	; (8004c7c <checkBasGonder+0x80>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004c34:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <checkBasGonder+0x74>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d10b      	bne.n	8004c54 <checkBasGonder+0x58>
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <checkBasGonder+0x84>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <checkBasGonder+0x58>
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <checkBasGonder+0x7c>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d103      	bne.n	8004c54 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <checkBasGonder+0x88>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004c52:	e009      	b.n	8004c68 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <checkBasGonder+0x84>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f083 0301 	eor.w	r3, r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <checkBasGonder+0x88>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr
 8004c70:	20000219 	.word	0x20000219
 8004c74:	2000024d 	.word	0x2000024d
 8004c78:	20000227 	.word	0x20000227
 8004c7c:	20000254 	.word	0x20000254
 8004c80:	20000250 	.word	0x20000250
 8004c84:	20000255 	.word	0x20000255

08004c88 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004c8c:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <checkKapiSecimleri+0x98>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004c94:	4b23      	ldr	r3, [pc, #140]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004c9a:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <checkKapiSecimleri+0x98>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10e      	bne.n	8004cc0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ca6:	4820      	ldr	r0, [pc, #128]	; (8004d28 <checkKapiSecimleri+0xa0>)
 8004ca8:	f004 fa94 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004cb2:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	e002      	b.n	8004cc0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004cba:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <checkKapiSecimleri+0x98>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d10e      	bne.n	8004ce6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ccc:	4816      	ldr	r0, [pc, #88]	; (8004d28 <checkKapiSecimleri+0xa0>)
 8004cce:	f004 fa81 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004cd8:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e002      	b.n	8004ce6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004ce0:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <checkKapiSecimleri+0x98>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d116      	bne.n	8004d1c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf2:	480d      	ldr	r0, [pc, #52]	; (8004d28 <checkKapiSecimleri+0xa0>)
 8004cf4:	f004 fa6e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <checkKapiSecimleri+0x8e>
 8004cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d02:	4809      	ldr	r0, [pc, #36]	; (8004d28 <checkKapiSecimleri+0xa0>)
 8004d04:	f004 fa66 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d103      	bne.n	8004d16 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004d14:	e002      	b.n	8004d1c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004d16:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <checkKapiSecimleri+0x9c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
}
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000220 	.word	0x20000220
 8004d24:	2000026b 	.word	0x2000026b
 8004d28:	40010800 	.word	0x40010800

08004d2c <checkAktifCalisma>:

void checkAktifCalisma() {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004d30:	4b62      	ldr	r3, [pc, #392]	; (8004ebc <checkAktifCalisma+0x190>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f041 833e 	bne.w	80063b6 <checkAktifCalisma+0x168a>
 8004d3a:	4b61      	ldr	r3, [pc, #388]	; (8004ec0 <checkAktifCalisma+0x194>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f041 8339 	bne.w	80063b6 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004d44:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <checkAktifCalisma+0x198>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11a      	bne.n	8004d82 <checkAktifCalisma+0x56>
 8004d4c:	4b5e      	ldr	r3, [pc, #376]	; (8004ec8 <checkAktifCalisma+0x19c>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d116      	bne.n	8004d82 <checkAktifCalisma+0x56>
 8004d54:	4b5d      	ldr	r3, [pc, #372]	; (8004ecc <checkAktifCalisma+0x1a0>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <checkAktifCalisma+0x46>
 8004d5c:	4b5c      	ldr	r3, [pc, #368]	; (8004ed0 <checkAktifCalisma+0x1a4>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f083 0301 	eor.w	r3, r3, #1
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <checkAktifCalisma+0x46>
 8004d6a:	4b5a      	ldr	r3, [pc, #360]	; (8004ed4 <checkAktifCalisma+0x1a8>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d007      	beq.n	8004d82 <checkAktifCalisma+0x56>
 8004d72:	4b59      	ldr	r3, [pc, #356]	; (8004ed8 <checkAktifCalisma+0x1ac>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d018      	beq.n	8004dac <checkAktifCalisma+0x80>
 8004d7a:	4b58      	ldr	r3, [pc, #352]	; (8004edc <checkAktifCalisma+0x1b0>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d114      	bne.n	8004dac <checkAktifCalisma+0x80>
 8004d82:	4b57      	ldr	r3, [pc, #348]	; (8004ee0 <checkAktifCalisma+0x1b4>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d010      	beq.n	8004dac <checkAktifCalisma+0x80>
 8004d8a:	4b56      	ldr	r3, [pc, #344]	; (8004ee4 <checkAktifCalisma+0x1b8>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00c      	beq.n	8004dac <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004d92:	2201      	movs	r2, #1
 8004d94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d98:	4853      	ldr	r0, [pc, #332]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004d9a:	f004 fa32 	bl	8009202 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004d9e:	4b53      	ldr	r3, [pc, #332]	; (8004eec <checkAktifCalisma+0x1c0>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004da4:	4b52      	ldr	r3, [pc, #328]	; (8004ef0 <checkAktifCalisma+0x1c4>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e008      	b.n	8004dbe <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004db2:	484d      	ldr	r0, [pc, #308]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004db4:	f004 fa25 	bl	8009202 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004db8:	4b4c      	ldr	r3, [pc, #304]	; (8004eec <checkAktifCalisma+0x1c0>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004dbe:	4b40      	ldr	r3, [pc, #256]	; (8004ec0 <checkAktifCalisma+0x194>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d160      	bne.n	8004e88 <checkAktifCalisma+0x15c>
 8004dc6:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <checkAktifCalisma+0x1b4>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d05c      	beq.n	8004e88 <checkAktifCalisma+0x15c>
 8004dce:	4b45      	ldr	r3, [pc, #276]	; (8004ee4 <checkAktifCalisma+0x1b8>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d058      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dda:	4843      	ldr	r0, [pc, #268]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004ddc:	f004 f9fa 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <checkAktifCalisma+0xc2>
 8004de6:	4b43      	ldr	r3, [pc, #268]	; (8004ef4 <checkAktifCalisma+0x1c8>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d04c      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004dee:	2102      	movs	r1, #2
 8004df0:	4841      	ldr	r0, [pc, #260]	; (8004ef8 <checkAktifCalisma+0x1cc>)
 8004df2:	f004 f9ef 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d145      	bne.n	8004e88 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004dfc:	4b3f      	ldr	r3, [pc, #252]	; (8004efc <checkAktifCalisma+0x1d0>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d041      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e08:	4837      	ldr	r0, [pc, #220]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004e0a:	f004 f9e3 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d10e      	bne.n	8004e32 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e18:	4833      	ldr	r0, [pc, #204]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004e1a:	f004 f9db 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d106      	bne.n	8004e32 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	4834      	ldr	r0, [pc, #208]	; (8004ef8 <checkAktifCalisma+0x1cc>)
 8004e28:	f004 f9d4 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d003      	beq.n	8004e3a <checkAktifCalisma+0x10e>
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <checkAktifCalisma+0x198>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d026      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004e3a:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <checkAktifCalisma+0x1a0>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	f083 0301 	eor.w	r3, r3, #1
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01f      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004e48:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <checkAktifCalisma+0x19c>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	f083 0301 	eor.w	r3, r3, #1
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d018      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <checkAktifCalisma+0x1ac>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	f083 0301 	eor.w	r3, r3, #1
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d011      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004e64:	4b26      	ldr	r3, [pc, #152]	; (8004f00 <checkAktifCalisma+0x1d4>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f083 0301 	eor.w	r3, r3, #1
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <checkAktifCalisma+0x1d8>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	f083 0301 	eor.w	r3, r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004e80:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <checkAktifCalisma+0x198>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e002      	b.n	8004e8e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004e88:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <checkAktifCalisma+0x198>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <checkAktifCalisma+0x198>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d03a      	beq.n	8004f0c <checkAktifCalisma+0x1e0>
 8004e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e9a:	4817      	ldr	r0, [pc, #92]	; (8004ef8 <checkAktifCalisma+0x1cc>)
 8004e9c:	f004 f99a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d132      	bne.n	8004f0c <checkAktifCalisma+0x1e0>
 8004ea6:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <checkAktifCalisma+0x1dc>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d02e      	beq.n	8004f0c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eb4:	480c      	ldr	r0, [pc, #48]	; (8004ee8 <checkAktifCalisma+0x1bc>)
 8004eb6:	f004 f9a4 	bl	8009202 <HAL_GPIO_WritePin>
 8004eba:	e02d      	b.n	8004f18 <checkAktifCalisma+0x1ec>
 8004ebc:	20000236 	.word	0x20000236
 8004ec0:	20000235 	.word	0x20000235
 8004ec4:	2000024d 	.word	0x2000024d
 8004ec8:	2000024e 	.word	0x2000024e
 8004ecc:	20000250 	.word	0x20000250
 8004ed0:	20000248 	.word	0x20000248
 8004ed4:	2000022b 	.word	0x2000022b
 8004ed8:	2000024f 	.word	0x2000024f
 8004edc:	2000022a 	.word	0x2000022a
 8004ee0:	2000026a 	.word	0x2000026a
 8004ee4:	2000026b 	.word	0x2000026b
 8004ee8:	40010c00 	.word	0x40010c00
 8004eec:	2000026c 	.word	0x2000026c
 8004ef0:	20000257 	.word	0x20000257
 8004ef4:	20000254 	.word	0x20000254
 8004ef8:	40011000 	.word	0x40011000
 8004efc:	2000021b 	.word	0x2000021b
 8004f00:	20000252 	.word	0x20000252
 8004f04:	20000253 	.word	0x20000253
 8004f08:	20000226 	.word	0x20000226
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f12:	4860      	ldr	r0, [pc, #384]	; (8005094 <checkAktifCalisma+0x368>)
 8004f14:	f004 f975 	bl	8009202 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004f18:	4b5f      	ldr	r3, [pc, #380]	; (8005098 <checkAktifCalisma+0x36c>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <checkAktifCalisma+0x21c>
 8004f20:	4b5e      	ldr	r3, [pc, #376]	; (800509c <checkAktifCalisma+0x370>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d007      	beq.n	8004f38 <checkAktifCalisma+0x20c>
 8004f28:	4b5c      	ldr	r3, [pc, #368]	; (800509c <checkAktifCalisma+0x370>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d003      	beq.n	8004f38 <checkAktifCalisma+0x20c>
 8004f30:	4b5b      	ldr	r3, [pc, #364]	; (80050a0 <checkAktifCalisma+0x374>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d107      	bne.n	8004f48 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	4855      	ldr	r0, [pc, #340]	; (8005094 <checkAktifCalisma+0x368>)
 8004f3e:	f004 f960 	bl	8009202 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004f42:	4b58      	ldr	r3, [pc, #352]	; (80050a4 <checkAktifCalisma+0x378>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004f48:	4b56      	ldr	r3, [pc, #344]	; (80050a4 <checkAktifCalisma+0x378>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02f      	beq.n	8004fb0 <checkAktifCalisma+0x284>
 8004f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f54:	484f      	ldr	r0, [pc, #316]	; (8005094 <checkAktifCalisma+0x368>)
 8004f56:	f004 f93d 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d106      	bne.n	8004f6e <checkAktifCalisma+0x242>
 8004f60:	4b51      	ldr	r3, [pc, #324]	; (80050a8 <checkAktifCalisma+0x37c>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	f083 0301 	eor.w	r3, r3, #1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <checkAktifCalisma+0x250>
 8004f6e:	2102      	movs	r1, #2
 8004f70:	484e      	ldr	r0, [pc, #312]	; (80050ac <checkAktifCalisma+0x380>)
 8004f72:	f004 f92f 	bl	80091d4 <HAL_GPIO_ReadPin>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d119      	bne.n	8004fb0 <checkAktifCalisma+0x284>
 8004f7c:	4b4c      	ldr	r3, [pc, #304]	; (80050b0 <checkAktifCalisma+0x384>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d015      	beq.n	8004fb0 <checkAktifCalisma+0x284>
 8004f84:	4b4b      	ldr	r3, [pc, #300]	; (80050b4 <checkAktifCalisma+0x388>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d011      	beq.n	8004fb0 <checkAktifCalisma+0x284>
 8004f8c:	4b4a      	ldr	r3, [pc, #296]	; (80050b8 <checkAktifCalisma+0x38c>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <checkAktifCalisma+0x284>
 8004f94:	4b49      	ldr	r3, [pc, #292]	; (80050bc <checkAktifCalisma+0x390>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f083 0301 	eor.w	r3, r3, #1
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d006      	beq.n	8004fb0 <checkAktifCalisma+0x284>
			timer2=millis;
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <checkAktifCalisma+0x394>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a47      	ldr	r2, [pc, #284]	; (80050c4 <checkAktifCalisma+0x398>)
 8004fa8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004faa:	4b44      	ldr	r3, [pc, #272]	; (80050bc <checkAktifCalisma+0x390>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004fb0:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <checkAktifCalisma+0x394>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b43      	ldr	r3, [pc, #268]	; (80050c4 <checkAktifCalisma+0x398>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	4a43      	ldr	r2, [pc, #268]	; (80050c8 <checkAktifCalisma+0x39c>)
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d303      	bcc.n	8004fca <checkAktifCalisma+0x29e>
 8004fc2:	4b3e      	ldr	r3, [pc, #248]	; (80050bc <checkAktifCalisma+0x390>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d111      	bne.n	8004fee <checkAktifCalisma+0x2c2>
 8004fca:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <checkAktifCalisma+0x384>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	f083 0301 	eor.w	r3, r3, #1
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <checkAktifCalisma+0x2c2>
 8004fd8:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <checkAktifCalisma+0x388>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	f083 0301 	eor.w	r3, r3, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d103      	bne.n	8004fee <checkAktifCalisma+0x2c2>
 8004fe6:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <checkAktifCalisma+0x38c>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2104      	movs	r1, #4
 8004ff2:	4828      	ldr	r0, [pc, #160]	; (8005094 <checkAktifCalisma+0x368>)
 8004ff4:	f004 f905 	bl	8009202 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004ff8:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <checkAktifCalisma+0x378>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004ffe:	4b2f      	ldr	r3, [pc, #188]	; (80050bc <checkAktifCalisma+0x390>)
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005004:	4b31      	ldr	r3, [pc, #196]	; (80050cc <checkAktifCalisma+0x3a0>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 800500c:	4b30      	ldr	r3, [pc, #192]	; (80050d0 <checkAktifCalisma+0x3a4>)
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005012:	4b2e      	ldr	r3, [pc, #184]	; (80050cc <checkAktifCalisma+0x3a0>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d116      	bne.n	8005048 <checkAktifCalisma+0x31c>
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <checkAktifCalisma+0x3a8>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d112      	bne.n	8005048 <checkAktifCalisma+0x31c>
 8005022:	2101      	movs	r1, #1
 8005024:	4821      	ldr	r0, [pc, #132]	; (80050ac <checkAktifCalisma+0x380>)
 8005026:	f004 f8d5 	bl	80091d4 <HAL_GPIO_ReadPin>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10b      	bne.n	8005048 <checkAktifCalisma+0x31c>
 8005030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005034:	4817      	ldr	r0, [pc, #92]	; (8005094 <checkAktifCalisma+0x368>)
 8005036:	f004 f8cd 	bl	80091d4 <HAL_GPIO_ReadPin>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005040:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <checkAktifCalisma+0x3a4>)
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e011      	b.n	800506c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005048:	4b20      	ldr	r3, [pc, #128]	; (80050cc <checkAktifCalisma+0x3a0>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10d      	bne.n	800506c <checkAktifCalisma+0x340>
 8005050:	2101      	movs	r1, #1
 8005052:	4816      	ldr	r0, [pc, #88]	; (80050ac <checkAktifCalisma+0x380>)
 8005054:	f004 f8be 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005058:	4603      	mov	r3, r0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d106      	bne.n	800506c <checkAktifCalisma+0x340>
 800505e:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <checkAktifCalisma+0x3a8>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <checkAktifCalisma+0x3a4>)
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800506c:	4b17      	ldr	r3, [pc, #92]	; (80050cc <checkAktifCalisma+0x3a0>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d134      	bne.n	80050de <checkAktifCalisma+0x3b2>
 8005074:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <checkAktifCalisma+0x3a8>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d130      	bne.n	80050de <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800507c:	2101      	movs	r1, #1
 800507e:	480b      	ldr	r0, [pc, #44]	; (80050ac <checkAktifCalisma+0x380>)
 8005080:	f004 f8a8 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d126      	bne.n	80050d8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800508a:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <checkAktifCalisma+0x3a4>)
 800508c:	2201      	movs	r2, #1
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e025      	b.n	80050de <checkAktifCalisma+0x3b2>
 8005092:	bf00      	nop
 8005094:	40010c00 	.word	0x40010c00
 8005098:	2000024d 	.word	0x2000024d
 800509c:	20000227 	.word	0x20000227
 80050a0:	2000022b 	.word	0x2000022b
 80050a4:	20000251 	.word	0x20000251
 80050a8:	20000254 	.word	0x20000254
 80050ac:	40011000 	.word	0x40011000
 80050b0:	2000026a 	.word	0x2000026a
 80050b4:	2000026b 	.word	0x2000026b
 80050b8:	2000021b 	.word	0x2000021b
 80050bc:	20000249 	.word	0x20000249
 80050c0:	200001f4 	.word	0x200001f4
 80050c4:	20000200 	.word	0x20000200
 80050c8:	2000022c 	.word	0x2000022c
 80050cc:	2000021c 	.word	0x2000021c
 80050d0:	2000026f 	.word	0x2000026f
 80050d4:	20000219 	.word	0x20000219
			} else {
				cerceveVar=0;
 80050d8:	4b7f      	ldr	r3, [pc, #508]	; (80052d8 <checkAktifCalisma+0x5ac>)
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80050de:	4b7f      	ldr	r3, [pc, #508]	; (80052dc <checkAktifCalisma+0x5b0>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d17c      	bne.n	80051e0 <checkAktifCalisma+0x4b4>
 80050e6:	4b7e      	ldr	r3, [pc, #504]	; (80052e0 <checkAktifCalisma+0x5b4>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d078      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
 80050ee:	4b7d      	ldr	r3, [pc, #500]	; (80052e4 <checkAktifCalisma+0x5b8>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d074      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80050f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050fa:	487b      	ldr	r0, [pc, #492]	; (80052e8 <checkAktifCalisma+0x5bc>)
 80050fc:	f004 f86a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <checkAktifCalisma+0x3e2>
 8005106:	4b79      	ldr	r3, [pc, #484]	; (80052ec <checkAktifCalisma+0x5c0>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d068      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800510e:	4b72      	ldr	r3, [pc, #456]	; (80052d8 <checkAktifCalisma+0x5ac>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d064      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
 8005116:	4b76      	ldr	r3, [pc, #472]	; (80052f0 <checkAktifCalisma+0x5c4>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	f083 0301 	eor.w	r3, r3, #1
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d05d      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005124:	2104      	movs	r1, #4
 8005126:	4873      	ldr	r0, [pc, #460]	; (80052f4 <checkAktifCalisma+0x5c8>)
 8005128:	f004 f854 	bl	80091d4 <HAL_GPIO_ReadPin>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <checkAktifCalisma+0x40e>
 8005132:	4b71      	ldr	r3, [pc, #452]	; (80052f8 <checkAktifCalisma+0x5cc>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d152      	bne.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800513a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800513e:	486a      	ldr	r0, [pc, #424]	; (80052e8 <checkAktifCalisma+0x5bc>)
 8005140:	f004 f848 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005144:	4603      	mov	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d10e      	bne.n	8005168 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800514a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800514e:	4866      	ldr	r0, [pc, #408]	; (80052e8 <checkAktifCalisma+0x5bc>)
 8005150:	f004 f840 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005154:	4603      	mov	r3, r0
 8005156:	2b01      	cmp	r3, #1
 8005158:	d106      	bne.n	8005168 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800515a:	2140      	movs	r1, #64	; 0x40
 800515c:	4865      	ldr	r0, [pc, #404]	; (80052f4 <checkAktifCalisma+0x5c8>)
 800515e:	f004 f839 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d003      	beq.n	8005170 <checkAktifCalisma+0x444>
 8005168:	4b64      	ldr	r3, [pc, #400]	; (80052fc <checkAktifCalisma+0x5d0>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d037      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005170:	4b63      	ldr	r3, [pc, #396]	; (8005300 <checkAktifCalisma+0x5d4>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	f083 0301 	eor.w	r3, r3, #1
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d030      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800517e:	4b61      	ldr	r3, [pc, #388]	; (8005304 <checkAktifCalisma+0x5d8>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	f083 0301 	eor.w	r3, r3, #1
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d029      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800518c:	4b5e      	ldr	r3, [pc, #376]	; (8005308 <checkAktifCalisma+0x5dc>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	f083 0301 	eor.w	r3, r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d022      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800519a:	4b5c      	ldr	r3, [pc, #368]	; (800530c <checkAktifCalisma+0x5e0>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	f083 0301 	eor.w	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80051a8:	4b59      	ldr	r3, [pc, #356]	; (8005310 <checkAktifCalisma+0x5e4>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f083 0301 	eor.w	r3, r3, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d014      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80051b6:	4b57      	ldr	r3, [pc, #348]	; (8005314 <checkAktifCalisma+0x5e8>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	f083 0301 	eor.w	r3, r3, #1
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80051c4:	2201      	movs	r2, #1
 80051c6:	2102      	movs	r1, #2
 80051c8:	4847      	ldr	r0, [pc, #284]	; (80052e8 <checkAktifCalisma+0x5bc>)
 80051ca:	f004 f81a 	bl	8009202 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80051ce:	4b4b      	ldr	r3, [pc, #300]	; (80052fc <checkAktifCalisma+0x5d0>)
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80051d4:	4b50      	ldr	r3, [pc, #320]	; (8005318 <checkAktifCalisma+0x5ec>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80051da:	4b50      	ldr	r3, [pc, #320]	; (800531c <checkAktifCalisma+0x5f0>)
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80051e0:	4b46      	ldr	r3, [pc, #280]	; (80052fc <checkAktifCalisma+0x5d0>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d033      	beq.n	8005250 <checkAktifCalisma+0x524>
 80051e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051ec:	483e      	ldr	r0, [pc, #248]	; (80052e8 <checkAktifCalisma+0x5bc>)
 80051ee:	f003 fff1 	bl	80091d4 <HAL_GPIO_ReadPin>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d106      	bne.n	8005206 <checkAktifCalisma+0x4da>
 80051f8:	4b3c      	ldr	r3, [pc, #240]	; (80052ec <checkAktifCalisma+0x5c0>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f083 0301 	eor.w	r3, r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <checkAktifCalisma+0x4f0>
 8005206:	2104      	movs	r1, #4
 8005208:	483a      	ldr	r0, [pc, #232]	; (80052f4 <checkAktifCalisma+0x5c8>)
 800520a:	f003 ffe3 	bl	80091d4 <HAL_GPIO_ReadPin>
 800520e:	4603      	mov	r3, r0
 8005210:	2b01      	cmp	r3, #1
 8005212:	d11d      	bne.n	8005250 <checkAktifCalisma+0x524>
 8005214:	4b38      	ldr	r3, [pc, #224]	; (80052f8 <checkAktifCalisma+0x5cc>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d019      	beq.n	8005250 <checkAktifCalisma+0x524>
 800521c:	4b30      	ldr	r3, [pc, #192]	; (80052e0 <checkAktifCalisma+0x5b4>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d015      	beq.n	8005250 <checkAktifCalisma+0x524>
 8005224:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <checkAktifCalisma+0x5b8>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d011      	beq.n	8005250 <checkAktifCalisma+0x524>
 800522c:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <checkAktifCalisma+0x5ac>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00d      	beq.n	8005250 <checkAktifCalisma+0x524>
 8005234:	4b3a      	ldr	r3, [pc, #232]	; (8005320 <checkAktifCalisma+0x5f4>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	f083 0301 	eor.w	r3, r3, #1
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <checkAktifCalisma+0x524>
			timer2=millis;
 8005242:	4b38      	ldr	r3, [pc, #224]	; (8005324 <checkAktifCalisma+0x5f8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a38      	ldr	r2, [pc, #224]	; (8005328 <checkAktifCalisma+0x5fc>)
 8005248:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800524a:	4b35      	ldr	r3, [pc, #212]	; (8005320 <checkAktifCalisma+0x5f4>)
 800524c:	2201      	movs	r2, #1
 800524e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005250:	4b34      	ldr	r3, [pc, #208]	; (8005324 <checkAktifCalisma+0x5f8>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4b34      	ldr	r3, [pc, #208]	; (8005328 <checkAktifCalisma+0x5fc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	4a34      	ldr	r2, [pc, #208]	; (800532c <checkAktifCalisma+0x600>)
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	4293      	cmp	r3, r2
 8005260:	d303      	bcc.n	800526a <checkAktifCalisma+0x53e>
 8005262:	4b2f      	ldr	r3, [pc, #188]	; (8005320 <checkAktifCalisma+0x5f4>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d114      	bne.n	8005294 <checkAktifCalisma+0x568>
 800526a:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <checkAktifCalisma+0x5b4>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f083 0301 	eor.w	r3, r3, #1
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10d      	bne.n	8005294 <checkAktifCalisma+0x568>
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <checkAktifCalisma+0x5b8>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f083 0301 	eor.w	r3, r3, #1
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <checkAktifCalisma+0x568>
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <checkAktifCalisma+0x5ac>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f083 0301 	eor.w	r3, r3, #1
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005294:	2200      	movs	r2, #0
 8005296:	2102      	movs	r1, #2
 8005298:	4813      	ldr	r0, [pc, #76]	; (80052e8 <checkAktifCalisma+0x5bc>)
 800529a:	f003 ffb2 	bl	8009202 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800529e:	4b17      	ldr	r3, [pc, #92]	; (80052fc <checkAktifCalisma+0x5d0>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80052a4:	4b1e      	ldr	r3, [pc, #120]	; (8005320 <checkAktifCalisma+0x5f4>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <checkAktifCalisma+0x5d0>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d040      	beq.n	8005334 <checkAktifCalisma+0x608>
 80052b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052b6:	480f      	ldr	r0, [pc, #60]	; (80052f4 <checkAktifCalisma+0x5c8>)
 80052b8:	f003 ff8c 	bl	80091d4 <HAL_GPIO_ReadPin>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d138      	bne.n	8005334 <checkAktifCalisma+0x608>
 80052c2:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <checkAktifCalisma+0x604>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d034      	beq.n	8005334 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80052ca:	2201      	movs	r2, #1
 80052cc:	2101      	movs	r1, #1
 80052ce:	4806      	ldr	r0, [pc, #24]	; (80052e8 <checkAktifCalisma+0x5bc>)
 80052d0:	f003 ff97 	bl	8009202 <HAL_GPIO_WritePin>
 80052d4:	e033      	b.n	800533e <checkAktifCalisma+0x612>
 80052d6:	bf00      	nop
 80052d8:	2000026f 	.word	0x2000026f
 80052dc:	20000235 	.word	0x20000235
 80052e0:	2000026a 	.word	0x2000026a
 80052e4:	2000026b 	.word	0x2000026b
 80052e8:	40010c00 	.word	0x40010c00
 80052ec:	20000255 	.word	0x20000255
 80052f0:	20000269 	.word	0x20000269
 80052f4:	40011000 	.word	0x40011000
 80052f8:	2000021e 	.word	0x2000021e
 80052fc:	20000250 	.word	0x20000250
 8005300:	2000024d 	.word	0x2000024d
 8005304:	20000251 	.word	0x20000251
 8005308:	2000024e 	.word	0x2000024e
 800530c:	2000024f 	.word	0x2000024f
 8005310:	20000252 	.word	0x20000252
 8005314:	20000253 	.word	0x20000253
 8005318:	20000258 	.word	0x20000258
 800531c:	20000279 	.word	0x20000279
 8005320:	20000248 	.word	0x20000248
 8005324:	200001f4 	.word	0x200001f4
 8005328:	20000200 	.word	0x20000200
 800532c:	2000022d 	.word	0x2000022d
 8005330:	2000021d 	.word	0x2000021d
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005334:	2200      	movs	r2, #0
 8005336:	2101      	movs	r1, #1
 8005338:	4836      	ldr	r0, [pc, #216]	; (8005414 <checkAktifCalisma+0x6e8>)
 800533a:	f003 ff62 	bl	8009202 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800533e:	4b36      	ldr	r3, [pc, #216]	; (8005418 <checkAktifCalisma+0x6ec>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 8080 	bne.w	8005448 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005348:	4b34      	ldr	r3, [pc, #208]	; (800541c <checkAktifCalisma+0x6f0>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d003      	beq.n	8005358 <checkAktifCalisma+0x62c>
 8005350:	4b32      	ldr	r3, [pc, #200]	; (800541c <checkAktifCalisma+0x6f0>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d177      	bne.n	8005448 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005358:	4b31      	ldr	r3, [pc, #196]	; (8005420 <checkAktifCalisma+0x6f4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d073      	beq.n	8005448 <checkAktifCalisma+0x71c>
 8005360:	4b30      	ldr	r3, [pc, #192]	; (8005424 <checkAktifCalisma+0x6f8>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d06f      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800536c:	4829      	ldr	r0, [pc, #164]	; (8005414 <checkAktifCalisma+0x6e8>)
 800536e:	f003 ff31 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d167      	bne.n	8005448 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005378:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800537c:	482a      	ldr	r0, [pc, #168]	; (8005428 <checkAktifCalisma+0x6fc>)
 800537e:	f003 ff29 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <checkAktifCalisma+0x664>
 8005388:	4b28      	ldr	r3, [pc, #160]	; (800542c <checkAktifCalisma+0x700>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d15b      	bne.n	8005448 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005390:	2140      	movs	r1, #64	; 0x40
 8005392:	4825      	ldr	r0, [pc, #148]	; (8005428 <checkAktifCalisma+0x6fc>)
 8005394:	f003 ff1e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d10f      	bne.n	80053be <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800539e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053a2:	481c      	ldr	r0, [pc, #112]	; (8005414 <checkAktifCalisma+0x6e8>)
 80053a4:	f003 ff16 	bl	80091d4 <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d107      	bne.n	80053be <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80053ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053b2:	4818      	ldr	r0, [pc, #96]	; (8005414 <checkAktifCalisma+0x6e8>)
 80053b4:	f003 ff0e 	bl	80091d4 <HAL_GPIO_ReadPin>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d003      	beq.n	80053c6 <checkAktifCalisma+0x69a>
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <checkAktifCalisma+0x704>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d040      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80053c6:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <checkAktifCalisma+0x708>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f083 0301 	eor.w	r3, r3, #1
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d039      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80053d4:	4b18      	ldr	r3, [pc, #96]	; (8005438 <checkAktifCalisma+0x70c>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	f083 0301 	eor.w	r3, r3, #1
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d032      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80053e2:	4b16      	ldr	r3, [pc, #88]	; (800543c <checkAktifCalisma+0x710>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	f083 0301 	eor.w	r3, r3, #1
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d02b      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <checkAktifCalisma+0x714>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f083 0301 	eor.w	r3, r3, #1
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d024      	beq.n	8005448 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80053fe:	4b11      	ldr	r3, [pc, #68]	; (8005444 <checkAktifCalisma+0x718>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	f083 0301 	eor.w	r3, r3, #1
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01d      	beq.n	8005448 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 800540c:	4b08      	ldr	r3, [pc, #32]	; (8005430 <checkAktifCalisma+0x704>)
 800540e:	2201      	movs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e01c      	b.n	800544e <checkAktifCalisma+0x722>
 8005414:	40010c00 	.word	0x40010c00
 8005418:	20000235 	.word	0x20000235
 800541c:	20000227 	.word	0x20000227
 8005420:	2000026a 	.word	0x2000026a
 8005424:	2000026b 	.word	0x2000026b
 8005428:	40011000 	.word	0x40011000
 800542c:	20000228 	.word	0x20000228
 8005430:	2000024e 	.word	0x2000024e
 8005434:	2000024d 	.word	0x2000024d
 8005438:	20000251 	.word	0x20000251
 800543c:	20000250 	.word	0x20000250
 8005440:	2000024f 	.word	0x2000024f
 8005444:	20000253 	.word	0x20000253
		} else {
			devmotoryukaricalisiyor=0;
 8005448:	4b64      	ldr	r3, [pc, #400]	; (80055dc <checkAktifCalisma+0x8b0>)
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800544e:	4b63      	ldr	r3, [pc, #396]	; (80055dc <checkAktifCalisma+0x8b0>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005456:	2201      	movs	r2, #1
 8005458:	2120      	movs	r1, #32
 800545a:	4861      	ldr	r0, [pc, #388]	; (80055e0 <checkAktifCalisma+0x8b4>)
 800545c:	f003 fed1 	bl	8009202 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005460:	4b60      	ldr	r3, [pc, #384]	; (80055e4 <checkAktifCalisma+0x8b8>)
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005466:	4b5f      	ldr	r3, [pc, #380]	; (80055e4 <checkAktifCalisma+0x8b8>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d025      	beq.n	80054ba <checkAktifCalisma+0x78e>
 800546e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005472:	485d      	ldr	r0, [pc, #372]	; (80055e8 <checkAktifCalisma+0x8bc>)
 8005474:	f003 feae 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d007      	beq.n	800548e <checkAktifCalisma+0x762>
 800547e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005482:	4857      	ldr	r0, [pc, #348]	; (80055e0 <checkAktifCalisma+0x8b4>)
 8005484:	f003 fea6 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005488:	4603      	mov	r3, r0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d115      	bne.n	80054ba <checkAktifCalisma+0x78e>
 800548e:	4b57      	ldr	r3, [pc, #348]	; (80055ec <checkAktifCalisma+0x8c0>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d011      	beq.n	80054ba <checkAktifCalisma+0x78e>
 8005496:	4b56      	ldr	r3, [pc, #344]	; (80055f0 <checkAktifCalisma+0x8c4>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <checkAktifCalisma+0x78e>
 800549e:	4b55      	ldr	r3, [pc, #340]	; (80055f4 <checkAktifCalisma+0x8c8>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f083 0301 	eor.w	r3, r3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d006      	beq.n	80054ba <checkAktifCalisma+0x78e>
			timer2=millis;
 80054ac:	4b52      	ldr	r3, [pc, #328]	; (80055f8 <checkAktifCalisma+0x8cc>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a52      	ldr	r2, [pc, #328]	; (80055fc <checkAktifCalisma+0x8d0>)
 80054b2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80054b4:	4b4f      	ldr	r3, [pc, #316]	; (80055f4 <checkAktifCalisma+0x8c8>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80054ba:	4b4f      	ldr	r3, [pc, #316]	; (80055f8 <checkAktifCalisma+0x8cc>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b4f      	ldr	r3, [pc, #316]	; (80055fc <checkAktifCalisma+0x8d0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	4a4e      	ldr	r2, [pc, #312]	; (8005600 <checkAktifCalisma+0x8d4>)
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d303      	bcc.n	80054d4 <checkAktifCalisma+0x7a8>
 80054cc:	4b49      	ldr	r3, [pc, #292]	; (80055f4 <checkAktifCalisma+0x8c8>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10d      	bne.n	80054f0 <checkAktifCalisma+0x7c4>
 80054d4:	4b45      	ldr	r3, [pc, #276]	; (80055ec <checkAktifCalisma+0x8c0>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f083 0301 	eor.w	r3, r3, #1
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <checkAktifCalisma+0x7c4>
 80054e2:	4b43      	ldr	r3, [pc, #268]	; (80055f0 <checkAktifCalisma+0x8c4>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f083 0301 	eor.w	r3, r3, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80054f0:	2200      	movs	r2, #0
 80054f2:	2120      	movs	r1, #32
 80054f4:	483a      	ldr	r0, [pc, #232]	; (80055e0 <checkAktifCalisma+0x8b4>)
 80054f6:	f003 fe84 	bl	8009202 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80054fa:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <checkAktifCalisma+0x8b8>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005500:	4b3c      	ldr	r3, [pc, #240]	; (80055f4 <checkAktifCalisma+0x8c8>)
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8005506:	4b3f      	ldr	r3, [pc, #252]	; (8005604 <checkAktifCalisma+0x8d8>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 8088 	bne.w	8005620 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005510:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <checkAktifCalisma+0x8dc>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d003      	beq.n	8005520 <checkAktifCalisma+0x7f4>
 8005518:	4b3b      	ldr	r3, [pc, #236]	; (8005608 <checkAktifCalisma+0x8dc>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d17f      	bne.n	8005620 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005520:	4b32      	ldr	r3, [pc, #200]	; (80055ec <checkAktifCalisma+0x8c0>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d07b      	beq.n	8005620 <checkAktifCalisma+0x8f4>
 8005528:	4b31      	ldr	r3, [pc, #196]	; (80055f0 <checkAktifCalisma+0x8c4>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d077      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005530:	2140      	movs	r1, #64	; 0x40
 8005532:	482b      	ldr	r0, [pc, #172]	; (80055e0 <checkAktifCalisma+0x8b4>)
 8005534:	f003 fe4e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d170      	bne.n	8005620 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800553e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005542:	4827      	ldr	r0, [pc, #156]	; (80055e0 <checkAktifCalisma+0x8b4>)
 8005544:	f003 fe46 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <checkAktifCalisma+0x82a>
 800554e:	4b2f      	ldr	r3, [pc, #188]	; (800560c <checkAktifCalisma+0x8e0>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d164      	bne.n	8005620 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005556:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800555a:	4823      	ldr	r0, [pc, #140]	; (80055e8 <checkAktifCalisma+0x8bc>)
 800555c:	f003 fe3a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005560:	4603      	mov	r3, r0
 8005562:	2b01      	cmp	r3, #1
 8005564:	d10f      	bne.n	8005586 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800556a:	481f      	ldr	r0, [pc, #124]	; (80055e8 <checkAktifCalisma+0x8bc>)
 800556c:	f003 fe32 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d107      	bne.n	8005586 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800557a:	481b      	ldr	r0, [pc, #108]	; (80055e8 <checkAktifCalisma+0x8bc>)
 800557c:	f003 fe2a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005580:	4603      	mov	r3, r0
 8005582:	2b01      	cmp	r3, #1
 8005584:	d003      	beq.n	800558e <checkAktifCalisma+0x862>
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <checkAktifCalisma+0x8e4>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d048      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800558e:	4b21      	ldr	r3, [pc, #132]	; (8005614 <checkAktifCalisma+0x8e8>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f083 0301 	eor.w	r3, r3, #1
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d041      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800559c:	4b1e      	ldr	r3, [pc, #120]	; (8005618 <checkAktifCalisma+0x8ec>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f083 0301 	eor.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d03a      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80055aa:	4b1c      	ldr	r3, [pc, #112]	; (800561c <checkAktifCalisma+0x8f0>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	f083 0301 	eor.w	r3, r3, #1
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d033      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <checkAktifCalisma+0x8b8>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f083 0301 	eor.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d02c      	beq.n	8005620 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80055c6:	4b05      	ldr	r3, [pc, #20]	; (80055dc <checkAktifCalisma+0x8b0>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	f083 0301 	eor.w	r3, r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d025      	beq.n	8005620 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <checkAktifCalisma+0x8e4>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e024      	b.n	8005626 <checkAktifCalisma+0x8fa>
 80055dc:	2000024e 	.word	0x2000024e
 80055e0:	40011000 	.word	0x40011000
 80055e4:	20000252 	.word	0x20000252
 80055e8:	40010c00 	.word	0x40010c00
 80055ec:	2000026a 	.word	0x2000026a
 80055f0:	2000026b 	.word	0x2000026b
 80055f4:	2000024a 	.word	0x2000024a
 80055f8:	200001f4 	.word	0x200001f4
 80055fc:	20000200 	.word	0x20000200
 8005600:	2000022e 	.word	0x2000022e
 8005604:	20000235 	.word	0x20000235
 8005608:	20000227 	.word	0x20000227
 800560c:	20000229 	.word	0x20000229
 8005610:	2000024f 	.word	0x2000024f
 8005614:	2000024d 	.word	0x2000024d
 8005618:	20000251 	.word	0x20000251
 800561c:	20000250 	.word	0x20000250
		} else {
			devmotorasagicalisiyor=0;
 8005620:	4b96      	ldr	r3, [pc, #600]	; (800587c <checkAktifCalisma+0xb50>)
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005626:	4b95      	ldr	r3, [pc, #596]	; (800587c <checkAktifCalisma+0xb50>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800562e:	2201      	movs	r2, #1
 8005630:	2110      	movs	r1, #16
 8005632:	4893      	ldr	r0, [pc, #588]	; (8005880 <checkAktifCalisma+0xb54>)
 8005634:	f003 fde5 	bl	8009202 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005638:	4b92      	ldr	r3, [pc, #584]	; (8005884 <checkAktifCalisma+0xb58>)
 800563a:	2201      	movs	r2, #1
 800563c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800563e:	4b91      	ldr	r3, [pc, #580]	; (8005884 <checkAktifCalisma+0xb58>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d024      	beq.n	8005690 <checkAktifCalisma+0x964>
 8005646:	2140      	movs	r1, #64	; 0x40
 8005648:	488d      	ldr	r0, [pc, #564]	; (8005880 <checkAktifCalisma+0xb54>)
 800564a:	f003 fdc3 	bl	80091d4 <HAL_GPIO_ReadPin>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d007      	beq.n	8005664 <checkAktifCalisma+0x938>
 8005654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005658:	4889      	ldr	r0, [pc, #548]	; (8005880 <checkAktifCalisma+0xb54>)
 800565a:	f003 fdbb 	bl	80091d4 <HAL_GPIO_ReadPin>
 800565e:	4603      	mov	r3, r0
 8005660:	2b01      	cmp	r3, #1
 8005662:	d115      	bne.n	8005690 <checkAktifCalisma+0x964>
 8005664:	4b88      	ldr	r3, [pc, #544]	; (8005888 <checkAktifCalisma+0xb5c>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d011      	beq.n	8005690 <checkAktifCalisma+0x964>
 800566c:	4b87      	ldr	r3, [pc, #540]	; (800588c <checkAktifCalisma+0xb60>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00d      	beq.n	8005690 <checkAktifCalisma+0x964>
 8005674:	4b86      	ldr	r3, [pc, #536]	; (8005890 <checkAktifCalisma+0xb64>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	f083 0301 	eor.w	r3, r3, #1
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d006      	beq.n	8005690 <checkAktifCalisma+0x964>
			timer2=millis;
 8005682:	4b84      	ldr	r3, [pc, #528]	; (8005894 <checkAktifCalisma+0xb68>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a84      	ldr	r2, [pc, #528]	; (8005898 <checkAktifCalisma+0xb6c>)
 8005688:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800568a:	4b81      	ldr	r3, [pc, #516]	; (8005890 <checkAktifCalisma+0xb64>)
 800568c:	2201      	movs	r2, #1
 800568e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005690:	4b80      	ldr	r3, [pc, #512]	; (8005894 <checkAktifCalisma+0xb68>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	4b80      	ldr	r3, [pc, #512]	; (8005898 <checkAktifCalisma+0xb6c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	4a80      	ldr	r2, [pc, #512]	; (800589c <checkAktifCalisma+0xb70>)
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	4293      	cmp	r3, r2
 80056a0:	d303      	bcc.n	80056aa <checkAktifCalisma+0x97e>
 80056a2:	4b7b      	ldr	r3, [pc, #492]	; (8005890 <checkAktifCalisma+0xb64>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10d      	bne.n	80056c6 <checkAktifCalisma+0x99a>
 80056aa:	4b77      	ldr	r3, [pc, #476]	; (8005888 <checkAktifCalisma+0xb5c>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	f083 0301 	eor.w	r3, r3, #1
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d106      	bne.n	80056c6 <checkAktifCalisma+0x99a>
 80056b8:	4b74      	ldr	r3, [pc, #464]	; (800588c <checkAktifCalisma+0xb60>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	f083 0301 	eor.w	r3, r3, #1
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80056c6:	2200      	movs	r2, #0
 80056c8:	2110      	movs	r1, #16
 80056ca:	486d      	ldr	r0, [pc, #436]	; (8005880 <checkAktifCalisma+0xb54>)
 80056cc:	f003 fd99 	bl	8009202 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80056d0:	4b6c      	ldr	r3, [pc, #432]	; (8005884 <checkAktifCalisma+0xb58>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80056d6:	4b6e      	ldr	r3, [pc, #440]	; (8005890 <checkAktifCalisma+0xb64>)
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80056dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056e0:	486f      	ldr	r0, [pc, #444]	; (80058a0 <checkAktifCalisma+0xb74>)
 80056e2:	f003 fd77 	bl	80091d4 <HAL_GPIO_ReadPin>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d120      	bne.n	800572e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80056ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056f0:	486b      	ldr	r0, [pc, #428]	; (80058a0 <checkAktifCalisma+0xb74>)
 80056f2:	f003 fd6f 	bl	80091d4 <HAL_GPIO_ReadPin>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d118      	bne.n	800572e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80056fc:	2104      	movs	r1, #4
 80056fe:	4868      	ldr	r0, [pc, #416]	; (80058a0 <checkAktifCalisma+0xb74>)
 8005700:	f003 fd68 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d111      	bne.n	800572e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800570a:	2102      	movs	r1, #2
 800570c:	4864      	ldr	r0, [pc, #400]	; (80058a0 <checkAktifCalisma+0xb74>)
 800570e:	f003 fd61 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005718:	2101      	movs	r1, #1
 800571a:	4861      	ldr	r0, [pc, #388]	; (80058a0 <checkAktifCalisma+0xb74>)
 800571c:	f003 fd5a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d103      	bne.n	800572e <checkAktifCalisma+0xa02>
			makineStop=1;
 8005726:	4b5f      	ldr	r3, [pc, #380]	; (80058a4 <checkAktifCalisma+0xb78>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e002      	b.n	8005734 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800572e:	4b5d      	ldr	r3, [pc, #372]	; (80058a4 <checkAktifCalisma+0xb78>)
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005734:	4b5c      	ldr	r3, [pc, #368]	; (80058a8 <checkAktifCalisma+0xb7c>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d144      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
 800573c:	4b5b      	ldr	r3, [pc, #364]	; (80058ac <checkAktifCalisma+0xb80>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d003      	beq.n	800574c <checkAktifCalisma+0xa20>
 8005744:	4b59      	ldr	r3, [pc, #356]	; (80058ac <checkAktifCalisma+0xb80>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d13c      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800574c:	2180      	movs	r1, #128	; 0x80
 800574e:	484c      	ldr	r0, [pc, #304]	; (8005880 <checkAktifCalisma+0xb54>)
 8005750:	f003 fd40 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <checkAktifCalisma+0xa36>
 800575a:	4b55      	ldr	r3, [pc, #340]	; (80058b0 <checkAktifCalisma+0xb84>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <checkAktifCalisma+0xa4e>
 8005762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005766:	484e      	ldr	r0, [pc, #312]	; (80058a0 <checkAktifCalisma+0xb74>)
 8005768:	f003 fd34 	bl	80091d4 <HAL_GPIO_ReadPin>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d129      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
 8005772:	4b4f      	ldr	r3, [pc, #316]	; (80058b0 <checkAktifCalisma+0xb84>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d125      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800577a:	2104      	movs	r1, #4
 800577c:	4840      	ldr	r0, [pc, #256]	; (8005880 <checkAktifCalisma+0xb54>)
 800577e:	f003 fd29 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d003      	beq.n	8005790 <checkAktifCalisma+0xa64>
 8005788:	4b4a      	ldr	r3, [pc, #296]	; (80058b4 <checkAktifCalisma+0xb88>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d11a      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005790:	2102      	movs	r1, #2
 8005792:	483b      	ldr	r0, [pc, #236]	; (8005880 <checkAktifCalisma+0xb54>)
 8005794:	f003 fd1e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d113      	bne.n	80057c6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800579e:	4b46      	ldr	r3, [pc, #280]	; (80058b8 <checkAktifCalisma+0xb8c>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	f083 0301 	eor.w	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00c      	beq.n	80057c6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80057ac:	4b3d      	ldr	r3, [pc, #244]	; (80058a4 <checkAktifCalisma+0xb78>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80057b4:	4b41      	ldr	r3, [pc, #260]	; (80058bc <checkAktifCalisma+0xb90>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80057ba:	4b36      	ldr	r3, [pc, #216]	; (8005894 <checkAktifCalisma+0xb68>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a40      	ldr	r2, [pc, #256]	; (80058c0 <checkAktifCalisma+0xb94>)
 80057c0:	6013      	str	r3, [r2, #0]
			bekle();
 80057c2:	f7ff f935 	bl	8004a30 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80057c6:	4b33      	ldr	r3, [pc, #204]	; (8005894 <checkAktifCalisma+0xb68>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b3d      	ldr	r3, [pc, #244]	; (80058c0 <checkAktifCalisma+0xb94>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	4a3c      	ldr	r2, [pc, #240]	; (80058c4 <checkAktifCalisma+0xb98>)
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d211      	bcs.n	80057fc <checkAktifCalisma+0xad0>
 80057d8:	2104      	movs	r1, #4
 80057da:	4829      	ldr	r0, [pc, #164]	; (8005880 <checkAktifCalisma+0xb54>)
 80057dc:	f003 fcfa 	bl	80091d4 <HAL_GPIO_ReadPin>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <checkAktifCalisma+0xad0>
 80057e6:	4b33      	ldr	r3, [pc, #204]	; (80058b4 <checkAktifCalisma+0xb88>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <checkAktifCalisma+0xad0>
 80057ee:	4b2d      	ldr	r3, [pc, #180]	; (80058a4 <checkAktifCalisma+0xb78>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	f083 0301 	eor.w	r3, r3, #1
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80057fc:	4b2f      	ldr	r3, [pc, #188]	; (80058bc <checkAktifCalisma+0xb90>)
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005802:	4b29      	ldr	r3, [pc, #164]	; (80058a8 <checkAktifCalisma+0xb7c>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d160      	bne.n	80058cc <checkAktifCalisma+0xba0>
 800580a:	4b28      	ldr	r3, [pc, #160]	; (80058ac <checkAktifCalisma+0xb80>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d003      	beq.n	800581a <checkAktifCalisma+0xaee>
 8005812:	4b26      	ldr	r3, [pc, #152]	; (80058ac <checkAktifCalisma+0xb80>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d158      	bne.n	80058cc <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800581a:	2104      	movs	r1, #4
 800581c:	4818      	ldr	r0, [pc, #96]	; (8005880 <checkAktifCalisma+0xb54>)
 800581e:	f003 fcd9 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005822:	4603      	mov	r3, r0
 8005824:	2b01      	cmp	r3, #1
 8005826:	d003      	beq.n	8005830 <checkAktifCalisma+0xb04>
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <checkAktifCalisma+0xb88>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d14d      	bne.n	80058cc <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005830:	2102      	movs	r1, #2
 8005832:	4813      	ldr	r0, [pc, #76]	; (8005880 <checkAktifCalisma+0xb54>)
 8005834:	f003 fcce 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d146      	bne.n	80058cc <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800583e:	2180      	movs	r1, #128	; 0x80
 8005840:	480f      	ldr	r0, [pc, #60]	; (8005880 <checkAktifCalisma+0xb54>)
 8005842:	f003 fcc7 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <checkAktifCalisma+0xb28>
 800584c:	4b18      	ldr	r3, [pc, #96]	; (80058b0 <checkAktifCalisma+0xb84>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00b      	beq.n	800586c <checkAktifCalisma+0xb40>
 8005854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005858:	4811      	ldr	r0, [pc, #68]	; (80058a0 <checkAktifCalisma+0xb74>)
 800585a:	f003 fcbb 	bl	80091d4 <HAL_GPIO_ReadPin>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d133      	bne.n	80058cc <checkAktifCalisma+0xba0>
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <checkAktifCalisma+0xb84>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d12f      	bne.n	80058cc <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800586c:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <checkAktifCalisma+0xb78>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d02b      	beq.n	80058cc <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005874:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <checkAktifCalisma+0xb9c>)
 8005876:	2201      	movs	r2, #1
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e02a      	b.n	80058d2 <checkAktifCalisma+0xba6>
 800587c:	2000024f 	.word	0x2000024f
 8005880:	40011000 	.word	0x40011000
 8005884:	20000253 	.word	0x20000253
 8005888:	2000026a 	.word	0x2000026a
 800588c:	2000026b 	.word	0x2000026b
 8005890:	2000024b 	.word	0x2000024b
 8005894:	200001f4 	.word	0x200001f4
 8005898:	20000200 	.word	0x20000200
 800589c:	2000022e 	.word	0x2000022e
 80058a0:	40010c00 	.word	0x40010c00
 80058a4:	2000025a 	.word	0x2000025a
 80058a8:	20000221 	.word	0x20000221
 80058ac:	20000220 	.word	0x20000220
 80058b0:	20000224 	.word	0x20000224
 80058b4:	2000021e 	.word	0x2000021e
 80058b8:	20000247 	.word	0x20000247
 80058bc:	2000025b 	.word	0x2000025b
 80058c0:	200001f8 	.word	0x200001f8
 80058c4:	20000231 	.word	0x20000231
 80058c8:	2000025c 	.word	0x2000025c
		} else {
			kapi1butonkontrol=0;
 80058cc:	4b8b      	ldr	r3, [pc, #556]	; (8005afc <checkAktifCalisma+0xdd0>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058d2:	4b8b      	ldr	r3, [pc, #556]	; (8005b00 <checkAktifCalisma+0xdd4>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d121      	bne.n	800591e <checkAktifCalisma+0xbf2>
 80058da:	4b8a      	ldr	r3, [pc, #552]	; (8005b04 <checkAktifCalisma+0xdd8>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d003      	beq.n	80058ea <checkAktifCalisma+0xbbe>
 80058e2:	4b88      	ldr	r3, [pc, #544]	; (8005b04 <checkAktifCalisma+0xdd8>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d119      	bne.n	800591e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058ea:	2104      	movs	r1, #4
 80058ec:	4886      	ldr	r0, [pc, #536]	; (8005b08 <checkAktifCalisma+0xddc>)
 80058ee:	f003 fc71 	bl	80091d4 <HAL_GPIO_ReadPin>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d003      	beq.n	8005900 <checkAktifCalisma+0xbd4>
 80058f8:	4b84      	ldr	r3, [pc, #528]	; (8005b0c <checkAktifCalisma+0xde0>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10e      	bne.n	800591e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005900:	2102      	movs	r1, #2
 8005902:	4881      	ldr	r0, [pc, #516]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005904:	f003 fc66 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d107      	bne.n	800591e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800590e:	4b80      	ldr	r3, [pc, #512]	; (8005b10 <checkAktifCalisma+0xde4>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8005916:	4b7f      	ldr	r3, [pc, #508]	; (8005b14 <checkAktifCalisma+0xde8>)
 8005918:	2201      	movs	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	e002      	b.n	8005924 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800591e:	4b7d      	ldr	r3, [pc, #500]	; (8005b14 <checkAktifCalisma+0xde8>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005924:	4b75      	ldr	r3, [pc, #468]	; (8005afc <checkAktifCalisma+0xdd0>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d107      	bne.n	800593c <checkAktifCalisma+0xc10>
 800592c:	4b79      	ldr	r3, [pc, #484]	; (8005b14 <checkAktifCalisma+0xde8>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <checkAktifCalisma+0xc10>
 8005934:	4b78      	ldr	r3, [pc, #480]	; (8005b18 <checkAktifCalisma+0xdec>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800593c:	2201      	movs	r2, #1
 800593e:	2180      	movs	r1, #128	; 0x80
 8005940:	4876      	ldr	r0, [pc, #472]	; (8005b1c <checkAktifCalisma+0xdf0>)
 8005942:	f003 fc5e 	bl	8009202 <HAL_GPIO_WritePin>
 8005946:	e004      	b.n	8005952 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005948:	2200      	movs	r2, #0
 800594a:	2180      	movs	r1, #128	; 0x80
 800594c:	4873      	ldr	r0, [pc, #460]	; (8005b1c <checkAktifCalisma+0xdf0>)
 800594e:	f003 fc58 	bl	8009202 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005952:	4b73      	ldr	r3, [pc, #460]	; (8005b20 <checkAktifCalisma+0xdf4>)
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d141      	bne.n	80059de <checkAktifCalisma+0xcb2>
 800595a:	4b6a      	ldr	r3, [pc, #424]	; (8005b04 <checkAktifCalisma+0xdd8>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d003      	beq.n	800596a <checkAktifCalisma+0xc3e>
 8005962:	4b68      	ldr	r3, [pc, #416]	; (8005b04 <checkAktifCalisma+0xdd8>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b03      	cmp	r3, #3
 8005968:	d139      	bne.n	80059de <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800596a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800596e:	4866      	ldr	r0, [pc, #408]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005970:	f003 fc30 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <checkAktifCalisma+0xc56>
 800597a:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <checkAktifCalisma+0xdf8>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00b      	beq.n	800599a <checkAktifCalisma+0xc6e>
 8005982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005986:	4868      	ldr	r0, [pc, #416]	; (8005b28 <checkAktifCalisma+0xdfc>)
 8005988:	f003 fc24 	bl	80091d4 <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d125      	bne.n	80059de <checkAktifCalisma+0xcb2>
 8005992:	4b64      	ldr	r3, [pc, #400]	; (8005b24 <checkAktifCalisma+0xdf8>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d121      	bne.n	80059de <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800599a:	2102      	movs	r1, #2
 800599c:	485a      	ldr	r0, [pc, #360]	; (8005b08 <checkAktifCalisma+0xddc>)
 800599e:	f003 fc19 	bl	80091d4 <HAL_GPIO_ReadPin>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d11a      	bne.n	80059de <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80059a8:	2104      	movs	r1, #4
 80059aa:	4857      	ldr	r0, [pc, #348]	; (8005b08 <checkAktifCalisma+0xddc>)
 80059ac:	f003 fc12 	bl	80091d4 <HAL_GPIO_ReadPin>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d113      	bne.n	80059de <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80059b6:	4b56      	ldr	r3, [pc, #344]	; (8005b10 <checkAktifCalisma+0xde4>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00f      	beq.n	80059de <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80059be:	4b5b      	ldr	r3, [pc, #364]	; (8005b2c <checkAktifCalisma+0xe00>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	f083 0301 	eor.w	r3, r3, #1
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80059cc:	4b58      	ldr	r3, [pc, #352]	; (8005b30 <checkAktifCalisma+0xe04>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80059d2:	4b58      	ldr	r3, [pc, #352]	; (8005b34 <checkAktifCalisma+0xe08>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a58      	ldr	r2, [pc, #352]	; (8005b38 <checkAktifCalisma+0xe0c>)
 80059d8:	6013      	str	r3, [r2, #0]
			bekle();
 80059da:	f7ff f829 	bl	8004a30 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80059de:	4b55      	ldr	r3, [pc, #340]	; (8005b34 <checkAktifCalisma+0xe08>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b55      	ldr	r3, [pc, #340]	; (8005b38 <checkAktifCalisma+0xe0c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	4a54      	ldr	r2, [pc, #336]	; (8005b3c <checkAktifCalisma+0xe10>)
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d20d      	bcs.n	8005a0c <checkAktifCalisma+0xce0>
 80059f0:	2102      	movs	r1, #2
 80059f2:	4845      	ldr	r0, [pc, #276]	; (8005b08 <checkAktifCalisma+0xddc>)
 80059f4:	f003 fbee 	bl	80091d4 <HAL_GPIO_ReadPin>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d006      	beq.n	8005a0c <checkAktifCalisma+0xce0>
 80059fe:	4b44      	ldr	r3, [pc, #272]	; (8005b10 <checkAktifCalisma+0xde4>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	f083 0301 	eor.w	r3, r3, #1
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005a0c:	4b48      	ldr	r3, [pc, #288]	; (8005b30 <checkAktifCalisma+0xe04>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a12:	4b43      	ldr	r3, [pc, #268]	; (8005b20 <checkAktifCalisma+0xdf4>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d135      	bne.n	8005a86 <checkAktifCalisma+0xd5a>
 8005a1a:	4b3a      	ldr	r3, [pc, #232]	; (8005b04 <checkAktifCalisma+0xdd8>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d003      	beq.n	8005a2a <checkAktifCalisma+0xcfe>
 8005a22:	4b38      	ldr	r3, [pc, #224]	; (8005b04 <checkAktifCalisma+0xdd8>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d12d      	bne.n	8005a86 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a2e:	4836      	ldr	r0, [pc, #216]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005a30:	f003 fbd0 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <checkAktifCalisma+0xd16>
 8005a3a:	4b3a      	ldr	r3, [pc, #232]	; (8005b24 <checkAktifCalisma+0xdf8>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <checkAktifCalisma+0xd2e>
 8005a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a46:	4838      	ldr	r0, [pc, #224]	; (8005b28 <checkAktifCalisma+0xdfc>)
 8005a48:	f003 fbc4 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d119      	bne.n	8005a86 <checkAktifCalisma+0xd5a>
 8005a52:	4b34      	ldr	r3, [pc, #208]	; (8005b24 <checkAktifCalisma+0xdf8>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d115      	bne.n	8005a86 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	482a      	ldr	r0, [pc, #168]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005a5e:	f003 fbb9 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d10e      	bne.n	8005a86 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a68:	2104      	movs	r1, #4
 8005a6a:	4827      	ldr	r0, [pc, #156]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005a6c:	f003 fbb2 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005a76:	4b26      	ldr	r3, [pc, #152]	; (8005b10 <checkAktifCalisma+0xde4>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005a7e:	4b30      	ldr	r3, [pc, #192]	; (8005b40 <checkAktifCalisma+0xe14>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	e002      	b.n	8005a8c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005a86:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <checkAktifCalisma+0xe14>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a8c:	4b24      	ldr	r3, [pc, #144]	; (8005b20 <checkAktifCalisma+0xdf4>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d11d      	bne.n	8005ad0 <checkAktifCalisma+0xda4>
 8005a94:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <checkAktifCalisma+0xdd8>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d003      	beq.n	8005aa4 <checkAktifCalisma+0xd78>
 8005a9c:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <checkAktifCalisma+0xdd8>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d115      	bne.n	8005ad0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	4818      	ldr	r0, [pc, #96]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005aa8:	f003 fb94 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d10e      	bne.n	8005ad0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	4814      	ldr	r0, [pc, #80]	; (8005b08 <checkAktifCalisma+0xddc>)
 8005ab6:	f003 fb8d 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d107      	bne.n	8005ad0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <checkAktifCalisma+0xde4>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005ac8:	4b1e      	ldr	r3, [pc, #120]	; (8005b44 <checkAktifCalisma+0xe18>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e002      	b.n	8005ad6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005ad0:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <checkAktifCalisma+0xe18>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <checkAktifCalisma+0xe14>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <checkAktifCalisma+0xdc2>
 8005ade:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <checkAktifCalisma+0xe18>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <checkAktifCalisma+0xdc2>
 8005ae6:	4b12      	ldr	r3, [pc, #72]	; (8005b30 <checkAktifCalisma+0xe04>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d02c      	beq.n	8005b48 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005aee:	2201      	movs	r2, #1
 8005af0:	2140      	movs	r1, #64	; 0x40
 8005af2:	480a      	ldr	r0, [pc, #40]	; (8005b1c <checkAktifCalisma+0xdf0>)
 8005af4:	f003 fb85 	bl	8009202 <HAL_GPIO_WritePin>
 8005af8:	e02b      	b.n	8005b52 <checkAktifCalisma+0xe26>
 8005afa:	bf00      	nop
 8005afc:	2000025c 	.word	0x2000025c
 8005b00:	20000221 	.word	0x20000221
 8005b04:	20000220 	.word	0x20000220
 8005b08:	40011000 	.word	0x40011000
 8005b0c:	2000021e 	.word	0x2000021e
 8005b10:	2000025a 	.word	0x2000025a
 8005b14:	2000025d 	.word	0x2000025d
 8005b18:	2000025b 	.word	0x2000025b
 8005b1c:	40010800 	.word	0x40010800
 8005b20:	20000222 	.word	0x20000222
 8005b24:	20000224 	.word	0x20000224
 8005b28:	40010c00 	.word	0x40010c00
 8005b2c:	20000247 	.word	0x20000247
 8005b30:	2000025e 	.word	0x2000025e
 8005b34:	200001f4 	.word	0x200001f4
 8005b38:	200001f8 	.word	0x200001f8
 8005b3c:	20000232 	.word	0x20000232
 8005b40:	2000025f 	.word	0x2000025f
 8005b44:	20000260 	.word	0x20000260
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2140      	movs	r1, #64	; 0x40
 8005b4c:	488d      	ldr	r0, [pc, #564]	; (8005d84 <checkAktifCalisma+0x1058>)
 8005b4e:	f003 fb58 	bl	8009202 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005b52:	4b8d      	ldr	r3, [pc, #564]	; (8005d88 <checkAktifCalisma+0x105c>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <checkAktifCalisma+0xe36>
 8005b5a:	4b8b      	ldr	r3, [pc, #556]	; (8005d88 <checkAktifCalisma+0x105c>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d115      	bne.n	8005b8e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b62:	2104      	movs	r1, #4
 8005b64:	4889      	ldr	r0, [pc, #548]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005b66:	f003 fb35 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d003      	beq.n	8005b78 <checkAktifCalisma+0xe4c>
 8005b70:	4b87      	ldr	r3, [pc, #540]	; (8005d90 <checkAktifCalisma+0x1064>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005b78:	2102      	movs	r1, #2
 8005b7a:	4884      	ldr	r0, [pc, #528]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005b7c:	f003 fb2a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005b86:	4b83      	ldr	r3, [pc, #524]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	e002      	b.n	8005b94 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005b8e:	4b81      	ldr	r3, [pc, #516]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005b94:	4b7c      	ldr	r3, [pc, #496]	; (8005d88 <checkAktifCalisma+0x105c>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d003      	beq.n	8005ba4 <checkAktifCalisma+0xe78>
 8005b9c:	4b7a      	ldr	r3, [pc, #488]	; (8005d88 <checkAktifCalisma+0x105c>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d111      	bne.n	8005bc8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ba4:	2102      	movs	r1, #2
 8005ba6:	4879      	ldr	r0, [pc, #484]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005ba8:	f003 fb14 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d10a      	bne.n	8005bc8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005bb2:	2104      	movs	r1, #4
 8005bb4:	4875      	ldr	r0, [pc, #468]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005bb6:	f003 fb0d 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005bc0:	4b75      	ldr	r3, [pc, #468]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005bc8:	4b73      	ldr	r3, [pc, #460]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005bce:	4b71      	ldr	r3, [pc, #452]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00f      	beq.n	8005bf6 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005bd6:	4b71      	ldr	r3, [pc, #452]	; (8005d9c <checkAktifCalisma+0x1070>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d10b      	bne.n	8005bf6 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005be2:	486f      	ldr	r0, [pc, #444]	; (8005da0 <checkAktifCalisma+0x1074>)
 8005be4:	f003 faf6 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005bee:	4b6d      	ldr	r3, [pc, #436]	; (8005da4 <checkAktifCalisma+0x1078>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	701a      	strb	r2, [r3, #0]
 8005bf4:	e002      	b.n	8005bfc <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005bf6:	4b6b      	ldr	r3, [pc, #428]	; (8005da4 <checkAktifCalisma+0x1078>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005bfc:	4b66      	ldr	r3, [pc, #408]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00f      	beq.n	8005c24 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005c04:	4b65      	ldr	r3, [pc, #404]	; (8005d9c <checkAktifCalisma+0x1070>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d10b      	bne.n	8005c24 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c10:	4863      	ldr	r0, [pc, #396]	; (8005da0 <checkAktifCalisma+0x1074>)
 8005c12:	f003 fadf 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d103      	bne.n	8005c24 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005c1c:	4b62      	ldr	r3, [pc, #392]	; (8005da8 <checkAktifCalisma+0x107c>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	e002      	b.n	8005c2a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005c24:	4b60      	ldr	r3, [pc, #384]	; (8005da8 <checkAktifCalisma+0x107c>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c2a:	4b60      	ldr	r3, [pc, #384]	; (8005dac <checkAktifCalisma+0x1080>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d137      	bne.n	8005ca2 <checkAktifCalisma+0xf76>
 8005c32:	4b5f      	ldr	r3, [pc, #380]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d003      	beq.n	8005c42 <checkAktifCalisma+0xf16>
 8005c3a:	4b5d      	ldr	r3, [pc, #372]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d12f      	bne.n	8005ca2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c42:	4b54      	ldr	r3, [pc, #336]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <checkAktifCalisma+0xf26>
 8005c4a:	4b53      	ldr	r3, [pc, #332]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d027      	beq.n	8005ca2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005c52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c56:	484d      	ldr	r0, [pc, #308]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005c58:	f003 fabc 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <checkAktifCalisma+0xf3e>
 8005c62:	4b4e      	ldr	r3, [pc, #312]	; (8005d9c <checkAktifCalisma+0x1070>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c6a:	4b4e      	ldr	r3, [pc, #312]	; (8005da4 <checkAktifCalisma+0x1078>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <checkAktifCalisma+0xf4e>
 8005c72:	4b4d      	ldr	r3, [pc, #308]	; (8005da8 <checkAktifCalisma+0x107c>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d013      	beq.n	8005ca2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005c7a:	4b4e      	ldr	r3, [pc, #312]	; (8005db4 <checkAktifCalisma+0x1088>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00f      	beq.n	8005ca2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005c82:	4b4d      	ldr	r3, [pc, #308]	; (8005db8 <checkAktifCalisma+0x108c>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f083 0301 	eor.w	r3, r3, #1
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005c90:	4b4a      	ldr	r3, [pc, #296]	; (8005dbc <checkAktifCalisma+0x1090>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005c96:	4b4a      	ldr	r3, [pc, #296]	; (8005dc0 <checkAktifCalisma+0x1094>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a4a      	ldr	r2, [pc, #296]	; (8005dc4 <checkAktifCalisma+0x1098>)
 8005c9c:	6013      	str	r3, [r2, #0]
			bekle();
 8005c9e:	f7fe fec7 	bl	8004a30 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005ca2:	4b47      	ldr	r3, [pc, #284]	; (8005dc0 <checkAktifCalisma+0x1094>)
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b47      	ldr	r3, [pc, #284]	; (8005dc4 <checkAktifCalisma+0x1098>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	4a46      	ldr	r2, [pc, #280]	; (8005dc8 <checkAktifCalisma+0x109c>)
 8005cae:	7812      	ldrb	r2, [r2, #0]
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d214      	bcs.n	8005cde <checkAktifCalisma+0xfb2>
 8005cb4:	4b37      	ldr	r3, [pc, #220]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f083 0301 	eor.w	r3, r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d006      	beq.n	8005cd0 <checkAktifCalisma+0xfa4>
 8005cc2:	4b35      	ldr	r3, [pc, #212]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f083 0301 	eor.w	r3, r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <checkAktifCalisma+0xfb2>
 8005cd0:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <checkAktifCalisma+0x1088>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f083 0301 	eor.w	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005cde:	4b37      	ldr	r3, [pc, #220]	; (8005dbc <checkAktifCalisma+0x1090>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005ce4:	4b31      	ldr	r3, [pc, #196]	; (8005dac <checkAktifCalisma+0x1080>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d12b      	bne.n	8005d44 <checkAktifCalisma+0x1018>
 8005cec:	4b30      	ldr	r3, [pc, #192]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d003      	beq.n	8005cfc <checkAktifCalisma+0xfd0>
 8005cf4:	4b2e      	ldr	r3, [pc, #184]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d123      	bne.n	8005d44 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cfc:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <checkAktifCalisma+0xfe0>
 8005d04:	4b24      	ldr	r3, [pc, #144]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01b      	beq.n	8005d44 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d10:	481e      	ldr	r0, [pc, #120]	; (8005d8c <checkAktifCalisma+0x1060>)
 8005d12:	f003 fa5f 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d103      	bne.n	8005d24 <checkAktifCalisma+0xff8>
 8005d1c:	4b1f      	ldr	r3, [pc, #124]	; (8005d9c <checkAktifCalisma+0x1070>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d24:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <checkAktifCalisma+0x1078>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <checkAktifCalisma+0x1008>
 8005d2c:	4b1e      	ldr	r3, [pc, #120]	; (8005da8 <checkAktifCalisma+0x107c>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005d34:	4b1f      	ldr	r3, [pc, #124]	; (8005db4 <checkAktifCalisma+0x1088>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005d3c:	4b23      	ldr	r3, [pc, #140]	; (8005dcc <checkAktifCalisma+0x10a0>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005d44:	4b21      	ldr	r3, [pc, #132]	; (8005dcc <checkAktifCalisma+0x10a0>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d4a:	4b18      	ldr	r3, [pc, #96]	; (8005dac <checkAktifCalisma+0x1080>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d140      	bne.n	8005dd4 <checkAktifCalisma+0x10a8>
 8005d52:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d003      	beq.n	8005d62 <checkAktifCalisma+0x1036>
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <checkAktifCalisma+0x1084>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d138      	bne.n	8005dd4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <checkAktifCalisma+0x1068>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <checkAktifCalisma+0x1046>
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <checkAktifCalisma+0x106c>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d030      	beq.n	8005dd4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005d72:	4b10      	ldr	r3, [pc, #64]	; (8005db4 <checkAktifCalisma+0x1088>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d02c      	beq.n	8005dd4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005d7a:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <checkAktifCalisma+0x10a4>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
 8005d80:	e02b      	b.n	8005dda <checkAktifCalisma+0x10ae>
 8005d82:	bf00      	nop
 8005d84:	40010800 	.word	0x40010800
 8005d88:	20000225 	.word	0x20000225
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	2000021e 	.word	0x2000021e
 8005d94:	20000264 	.word	0x20000264
 8005d98:	20000265 	.word	0x20000265
 8005d9c:	20000224 	.word	0x20000224
 8005da0:	40010c00 	.word	0x40010c00
 8005da4:	20000274 	.word	0x20000274
 8005da8:	20000275 	.word	0x20000275
 8005dac:	20000223 	.word	0x20000223
 8005db0:	20000220 	.word	0x20000220
 8005db4:	2000025a 	.word	0x2000025a
 8005db8:	20000247 	.word	0x20000247
 8005dbc:	20000261 	.word	0x20000261
 8005dc0:	200001f4 	.word	0x200001f4
 8005dc4:	200001f8 	.word	0x200001f8
 8005dc8:	20000233 	.word	0x20000233
 8005dcc:	20000262 	.word	0x20000262
 8005dd0:	20000263 	.word	0x20000263
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005dd4:	4b8b      	ldr	r3, [pc, #556]	; (8006004 <checkAktifCalisma+0x12d8>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005dda:	4b8b      	ldr	r3, [pc, #556]	; (8006008 <checkAktifCalisma+0x12dc>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d107      	bne.n	8005df2 <checkAktifCalisma+0x10c6>
 8005de2:	4b8a      	ldr	r3, [pc, #552]	; (800600c <checkAktifCalisma+0x12e0>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d103      	bne.n	8005df2 <checkAktifCalisma+0x10c6>
 8005dea:	4b86      	ldr	r3, [pc, #536]	; (8006004 <checkAktifCalisma+0x12d8>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005df2:	2201      	movs	r2, #1
 8005df4:	2120      	movs	r1, #32
 8005df6:	4886      	ldr	r0, [pc, #536]	; (8006010 <checkAktifCalisma+0x12e4>)
 8005df8:	f003 fa03 	bl	8009202 <HAL_GPIO_WritePin>
 8005dfc:	e004      	b.n	8005e08 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2120      	movs	r1, #32
 8005e02:	4883      	ldr	r0, [pc, #524]	; (8006010 <checkAktifCalisma+0x12e4>)
 8005e04:	f003 f9fd 	bl	8009202 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005e08:	4b82      	ldr	r3, [pc, #520]	; (8006014 <checkAktifCalisma+0x12e8>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00e      	beq.n	8005e2e <checkAktifCalisma+0x1102>
 8005e10:	2102      	movs	r1, #2
 8005e12:	4881      	ldr	r0, [pc, #516]	; (8006018 <checkAktifCalisma+0x12ec>)
 8005e14:	f003 f9de 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d107      	bne.n	8005e2e <checkAktifCalisma+0x1102>
 8005e1e:	4b7f      	ldr	r3, [pc, #508]	; (800601c <checkAktifCalisma+0x12f0>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <checkAktifCalisma+0x1102>
 8005e26:	4b7e      	ldr	r3, [pc, #504]	; (8006020 <checkAktifCalisma+0x12f4>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d112      	bne.n	8005e54 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005e2e:	4b7d      	ldr	r3, [pc, #500]	; (8006024 <checkAktifCalisma+0x12f8>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d066      	beq.n	8005f04 <checkAktifCalisma+0x11d8>
 8005e36:	2104      	movs	r1, #4
 8005e38:	4877      	ldr	r0, [pc, #476]	; (8006018 <checkAktifCalisma+0x12ec>)
 8005e3a:	f003 f9cb 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d15f      	bne.n	8005f04 <checkAktifCalisma+0x11d8>
 8005e44:	4b75      	ldr	r3, [pc, #468]	; (800601c <checkAktifCalisma+0x12f0>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d05b      	beq.n	8005f04 <checkAktifCalisma+0x11d8>
 8005e4c:	4b74      	ldr	r3, [pc, #464]	; (8006020 <checkAktifCalisma+0x12f4>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d057      	beq.n	8005f04 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005e54:	4b74      	ldr	r3, [pc, #464]	; (8006028 <checkAktifCalisma+0x12fc>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	4b72      	ldr	r3, [pc, #456]	; (8006028 <checkAktifCalisma+0x12fc>)
 8005e5e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005e60:	4b71      	ldr	r3, [pc, #452]	; (8006028 <checkAktifCalisma+0x12fc>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b09      	cmp	r3, #9
 8005e66:	d908      	bls.n	8005e7a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005e68:	4b6f      	ldr	r3, [pc, #444]	; (8006028 <checkAktifCalisma+0x12fc>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005e6e:	4b6f      	ldr	r3, [pc, #444]	; (800602c <checkAktifCalisma+0x1300>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	4b6d      	ldr	r3, [pc, #436]	; (800602c <checkAktifCalisma+0x1300>)
 8005e78:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005e7a:	4b6c      	ldr	r3, [pc, #432]	; (800602c <checkAktifCalisma+0x1300>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d908      	bls.n	8005e94 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005e82:	4b6a      	ldr	r3, [pc, #424]	; (800602c <checkAktifCalisma+0x1300>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005e88:	4b69      	ldr	r3, [pc, #420]	; (8006030 <checkAktifCalisma+0x1304>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	4b67      	ldr	r3, [pc, #412]	; (8006030 <checkAktifCalisma+0x1304>)
 8005e92:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005e94:	4b66      	ldr	r3, [pc, #408]	; (8006030 <checkAktifCalisma+0x1304>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b09      	cmp	r3, #9
 8005e9a:	d908      	bls.n	8005eae <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005e9c:	4b64      	ldr	r3, [pc, #400]	; (8006030 <checkAktifCalisma+0x1304>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005ea2:	4b64      	ldr	r3, [pc, #400]	; (8006034 <checkAktifCalisma+0x1308>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	4b62      	ldr	r3, [pc, #392]	; (8006034 <checkAktifCalisma+0x1308>)
 8005eac:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005eae:	4b61      	ldr	r3, [pc, #388]	; (8006034 <checkAktifCalisma+0x1308>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b09      	cmp	r3, #9
 8005eb4:	d908      	bls.n	8005ec8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005eb6:	4b5f      	ldr	r3, [pc, #380]	; (8006034 <checkAktifCalisma+0x1308>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005ebc:	4b5e      	ldr	r3, [pc, #376]	; (8006038 <checkAktifCalisma+0x130c>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	4b5c      	ldr	r3, [pc, #368]	; (8006038 <checkAktifCalisma+0x130c>)
 8005ec6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005ec8:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <checkAktifCalisma+0x130c>)
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	4b5b      	ldr	r3, [pc, #364]	; (800603c <checkAktifCalisma+0x1310>)
 8005ece:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005ed2:	4b58      	ldr	r3, [pc, #352]	; (8006034 <checkAktifCalisma+0x1308>)
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	4b59      	ldr	r3, [pc, #356]	; (800603c <checkAktifCalisma+0x1310>)
 8005ed8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005eda:	4b55      	ldr	r3, [pc, #340]	; (8006030 <checkAktifCalisma+0x1304>)
 8005edc:	781a      	ldrb	r2, [r3, #0]
 8005ede:	4b57      	ldr	r3, [pc, #348]	; (800603c <checkAktifCalisma+0x1310>)
 8005ee0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005ee2:	4b52      	ldr	r3, [pc, #328]	; (800602c <checkAktifCalisma+0x1300>)
 8005ee4:	781a      	ldrb	r2, [r3, #0]
 8005ee6:	4b55      	ldr	r3, [pc, #340]	; (800603c <checkAktifCalisma+0x1310>)
 8005ee8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005eea:	4b4f      	ldr	r3, [pc, #316]	; (8006028 <checkAktifCalisma+0x12fc>)
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	4b53      	ldr	r3, [pc, #332]	; (800603c <checkAktifCalisma+0x1310>)
 8005ef0:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005ef2:	4b53      	ldr	r3, [pc, #332]	; (8006040 <checkAktifCalisma+0x1314>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005ef8:	4b46      	ldr	r3, [pc, #280]	; (8006014 <checkAktifCalisma+0x12e8>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005efe:	4b49      	ldr	r3, [pc, #292]	; (8006024 <checkAktifCalisma+0x12f8>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f08:	484e      	ldr	r0, [pc, #312]	; (8006044 <checkAktifCalisma+0x1318>)
 8005f0a:	f003 f963 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d016      	beq.n	8005f42 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f18:	484a      	ldr	r0, [pc, #296]	; (8006044 <checkAktifCalisma+0x1318>)
 8005f1a:	f003 f95b 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00e      	beq.n	8005f42 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f28:	4846      	ldr	r0, [pc, #280]	; (8006044 <checkAktifCalisma+0x1318>)
 8005f2a:	f003 f953 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d006      	beq.n	8005f42 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005f34:	2140      	movs	r1, #64	; 0x40
 8005f36:	4838      	ldr	r0, [pc, #224]	; (8006018 <checkAktifCalisma+0x12ec>)
 8005f38:	f003 f94c 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <checkAktifCalisma+0x121e>
			startBasili=1;
 8005f42:	4b41      	ldr	r3, [pc, #260]	; (8006048 <checkAktifCalisma+0x131c>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	e002      	b.n	8005f50 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005f4a:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <checkAktifCalisma+0x131c>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005f50:	4b3d      	ldr	r3, [pc, #244]	; (8006048 <checkAktifCalisma+0x131c>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d016      	beq.n	8005f86 <checkAktifCalisma+0x125a>
 8005f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f5c:	4839      	ldr	r0, [pc, #228]	; (8006044 <checkAktifCalisma+0x1318>)
 8005f5e:	f003 f939 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d10e      	bne.n	8005f86 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005f68:	4b38      	ldr	r3, [pc, #224]	; (800604c <checkAktifCalisma+0x1320>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005f6e:	2001      	movs	r0, #1
 8005f70:	f7fa fd7a 	bl	8000a68 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005f74:	2001      	movs	r0, #1
 8005f76:	f7fa fd1d 	bl	80009b4 <hata2EEPROM>
			convertAndSendData();
 8005f7a:	f001 fbfd 	bl	8007778 <convertAndSendData>
			acilstophatasi=1;
 8005f7e:	4b34      	ldr	r3, [pc, #208]	; (8006050 <checkAktifCalisma+0x1324>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	e018      	b.n	8005fb8 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005f86:	4b32      	ldr	r3, [pc, #200]	; (8006050 <checkAktifCalisma+0x1324>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d014      	beq.n	8005fb8 <checkAktifCalisma+0x128c>
 8005f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f92:	482c      	ldr	r0, [pc, #176]	; (8006044 <checkAktifCalisma+0x1318>)
 8005f94:	f003 f91e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10c      	bne.n	8005fb8 <checkAktifCalisma+0x128c>
 8005f9e:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <checkAktifCalisma+0x131c>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f083 0301 	eor.w	r3, r3, #1
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005fac:	4b28      	ldr	r3, [pc, #160]	; (8006050 <checkAktifCalisma+0x1324>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	f7fe fce8 	bl	8004988 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005fb8:	4b26      	ldr	r3, [pc, #152]	; (8006054 <checkAktifCalisma+0x1328>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f083 0301 	eor.w	r3, r3, #1
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d04e      	beq.n	8006064 <checkAktifCalisma+0x1338>
 8005fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fca:	481e      	ldr	r0, [pc, #120]	; (8006044 <checkAktifCalisma+0x1318>)
 8005fcc:	f003 f902 	bl	80091d4 <HAL_GPIO_ReadPin>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <checkAktifCalisma+0x12b2>
 8005fd6:	4b20      	ldr	r3, [pc, #128]	; (8006058 <checkAktifCalisma+0x132c>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d042      	beq.n	8006064 <checkAktifCalisma+0x1338>
 8005fde:	4b1f      	ldr	r3, [pc, #124]	; (800605c <checkAktifCalisma+0x1330>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d13e      	bne.n	8006064 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005fe6:	4b19      	ldr	r3, [pc, #100]	; (800604c <checkAktifCalisma+0x1320>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005fec:	2002      	movs	r0, #2
 8005fee:	f7fa fd3b 	bl	8000a68 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005ff2:	2002      	movs	r0, #2
 8005ff4:	f7fa fcde 	bl	80009b4 <hata2EEPROM>
			convertAndSendData();
 8005ff8:	f001 fbbe 	bl	8007778 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005ffc:	4b18      	ldr	r3, [pc, #96]	; (8006060 <checkAktifCalisma+0x1334>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	e047      	b.n	8006094 <checkAktifCalisma+0x1368>
 8006004:	20000263 	.word	0x20000263
 8006008:	20000262 	.word	0x20000262
 800600c:	20000261 	.word	0x20000261
 8006010:	40010800 	.word	0x40010800
 8006014:	20000257 	.word	0x20000257
 8006018:	40011000 	.word	0x40011000
 800601c:	2000021e 	.word	0x2000021e
 8006020:	2000025a 	.word	0x2000025a
 8006024:	20000258 	.word	0x20000258
 8006028:	20000215 	.word	0x20000215
 800602c:	20000216 	.word	0x20000216
 8006030:	20000000 	.word	0x20000000
 8006034:	20000001 	.word	0x20000001
 8006038:	20000217 	.word	0x20000217
 800603c:	2000011c 	.word	0x2000011c
 8006040:	20000244 	.word	0x20000244
 8006044:	40010c00 	.word	0x40010c00
 8006048:	20000266 	.word	0x20000266
 800604c:	2000026d 	.word	0x2000026d
 8006050:	20000268 	.word	0x20000268
 8006054:	2000026f 	.word	0x2000026f
 8006058:	20000279 	.word	0x20000279
 800605c:	2000021c 	.word	0x2000021c
 8006060:	20000269 	.word	0x20000269
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006064:	4b9b      	ldr	r3, [pc, #620]	; (80062d4 <checkAktifCalisma+0x15a8>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d013      	beq.n	8006094 <checkAktifCalisma+0x1368>
 800606c:	4b9a      	ldr	r3, [pc, #616]	; (80062d8 <checkAktifCalisma+0x15ac>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00f      	beq.n	8006094 <checkAktifCalisma+0x1368>
 8006074:	4b99      	ldr	r3, [pc, #612]	; (80062dc <checkAktifCalisma+0x15b0>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f083 0301 	eor.w	r3, r3, #1
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d008      	beq.n	8006094 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006082:	4b94      	ldr	r3, [pc, #592]	; (80062d4 <checkAktifCalisma+0x15a8>)
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006088:	4b95      	ldr	r3, [pc, #596]	; (80062e0 <checkAktifCalisma+0x15b4>)
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800608e:	2002      	movs	r0, #2
 8006090:	f7fe fc7a 	bl	8004988 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006094:	4b93      	ldr	r3, [pc, #588]	; (80062e4 <checkAktifCalisma+0x15b8>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d11e      	bne.n	80060da <checkAktifCalisma+0x13ae>
 800609c:	4b92      	ldr	r3, [pc, #584]	; (80062e8 <checkAktifCalisma+0x15bc>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d11a      	bne.n	80060da <checkAktifCalisma+0x13ae>
 80060a4:	4b91      	ldr	r3, [pc, #580]	; (80062ec <checkAktifCalisma+0x15c0>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d016      	beq.n	80060da <checkAktifCalisma+0x13ae>
 80060ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060b0:	488f      	ldr	r0, [pc, #572]	; (80062f0 <checkAktifCalisma+0x15c4>)
 80060b2:	f003 f88f 	bl	80091d4 <HAL_GPIO_ReadPin>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d10e      	bne.n	80060da <checkAktifCalisma+0x13ae>
			hataVar=1;
 80060bc:	4b8d      	ldr	r3, [pc, #564]	; (80062f4 <checkAktifCalisma+0x15c8>)
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80060c2:	2003      	movs	r0, #3
 80060c4:	f7fa fcd0 	bl	8000a68 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80060c8:	2003      	movs	r0, #3
 80060ca:	f7fa fc73 	bl	80009b4 <hata2EEPROM>
			convertAndSendData();
 80060ce:	f001 fb53 	bl	8007778 <convertAndSendData>
			basinchatasi=1;
 80060d2:	4b89      	ldr	r3, [pc, #548]	; (80062f8 <checkAktifCalisma+0x15cc>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e015      	b.n	8006106 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80060da:	4b87      	ldr	r3, [pc, #540]	; (80062f8 <checkAktifCalisma+0x15cc>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d011      	beq.n	8006106 <checkAktifCalisma+0x13da>
 80060e2:	4b80      	ldr	r3, [pc, #512]	; (80062e4 <checkAktifCalisma+0x15b8>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d10d      	bne.n	8006106 <checkAktifCalisma+0x13da>
 80060ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060ee:	4883      	ldr	r0, [pc, #524]	; (80062fc <checkAktifCalisma+0x15d0>)
 80060f0:	f003 f870 	bl	80091d4 <HAL_GPIO_ReadPin>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d105      	bne.n	8006106 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80060fa:	4b7f      	ldr	r3, [pc, #508]	; (80062f8 <checkAktifCalisma+0x15cc>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006100:	2003      	movs	r0, #3
 8006102:	f7fe fc41 	bl	8004988 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006106:	4b7e      	ldr	r3, [pc, #504]	; (8006300 <checkAktifCalisma+0x15d4>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <checkAktifCalisma+0x13ea>
 800610e:	4b7d      	ldr	r3, [pc, #500]	; (8006304 <checkAktifCalisma+0x15d8>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01e      	beq.n	8006154 <checkAktifCalisma+0x1428>
 8006116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800611a:	487b      	ldr	r0, [pc, #492]	; (8006308 <checkAktifCalisma+0x15dc>)
 800611c:	f003 f85a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006120:	4603      	mov	r3, r0
 8006122:	2b01      	cmp	r3, #1
 8006124:	d116      	bne.n	8006154 <checkAktifCalisma+0x1428>
 8006126:	4b79      	ldr	r3, [pc, #484]	; (800630c <checkAktifCalisma+0x15e0>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d003      	beq.n	8006136 <checkAktifCalisma+0x140a>
 800612e:	4b77      	ldr	r3, [pc, #476]	; (800630c <checkAktifCalisma+0x15e0>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b03      	cmp	r3, #3
 8006134:	d10e      	bne.n	8006154 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006136:	4b6f      	ldr	r3, [pc, #444]	; (80062f4 <checkAktifCalisma+0x15c8>)
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800613c:	2004      	movs	r0, #4
 800613e:	f7fa fc93 	bl	8000a68 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006142:	2004      	movs	r0, #4
 8006144:	f7fa fc36 	bl	80009b4 <hata2EEPROM>
			convertAndSendData();
 8006148:	f001 fb16 	bl	8007778 <convertAndSendData>
			katkapisivicihatasi=1;
 800614c:	4b70      	ldr	r3, [pc, #448]	; (8006310 <checkAktifCalisma+0x15e4>)
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	e01f      	b.n	8006194 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006154:	4b6e      	ldr	r3, [pc, #440]	; (8006310 <checkAktifCalisma+0x15e4>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01b      	beq.n	8006194 <checkAktifCalisma+0x1468>
 800615c:	4b6d      	ldr	r3, [pc, #436]	; (8006314 <checkAktifCalisma+0x15e8>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d017      	beq.n	8006194 <checkAktifCalisma+0x1468>
 8006164:	4b66      	ldr	r3, [pc, #408]	; (8006300 <checkAktifCalisma+0x15d4>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	f083 0301 	eor.w	r3, r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d010      	beq.n	8006194 <checkAktifCalisma+0x1468>
 8006172:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006176:	4864      	ldr	r0, [pc, #400]	; (8006308 <checkAktifCalisma+0x15dc>)
 8006178:	f003 f82c 	bl	80091d4 <HAL_GPIO_ReadPin>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d108      	bne.n	8006194 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006182:	4b63      	ldr	r3, [pc, #396]	; (8006310 <checkAktifCalisma+0x15e4>)
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006188:	4b5e      	ldr	r3, [pc, #376]	; (8006304 <checkAktifCalisma+0x15d8>)
 800618a:	2200      	movs	r2, #0
 800618c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800618e:	2004      	movs	r0, #4
 8006190:	f7fe fbfa 	bl	8004988 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006194:	4b5a      	ldr	r3, [pc, #360]	; (8006300 <checkAktifCalisma+0x15d4>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d103      	bne.n	80061a4 <checkAktifCalisma+0x1478>
 800619c:	4b5e      	ldr	r3, [pc, #376]	; (8006318 <checkAktifCalisma+0x15ec>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01e      	beq.n	80061e2 <checkAktifCalisma+0x14b6>
 80061a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061a8:	4857      	ldr	r0, [pc, #348]	; (8006308 <checkAktifCalisma+0x15dc>)
 80061aa:	f003 f813 	bl	80091d4 <HAL_GPIO_ReadPin>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d116      	bne.n	80061e2 <checkAktifCalisma+0x14b6>
 80061b4:	4b55      	ldr	r3, [pc, #340]	; (800630c <checkAktifCalisma+0x15e0>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d003      	beq.n	80061c4 <checkAktifCalisma+0x1498>
 80061bc:	4b53      	ldr	r3, [pc, #332]	; (800630c <checkAktifCalisma+0x15e0>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d10e      	bne.n	80061e2 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80061c4:	4b4b      	ldr	r3, [pc, #300]	; (80062f4 <checkAktifCalisma+0x15c8>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80061ca:	2005      	movs	r0, #5
 80061cc:	f7fa fc4c 	bl	8000a68 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80061d0:	2005      	movs	r0, #5
 80061d2:	f7fa fbef 	bl	80009b4 <hata2EEPROM>
			convertAndSendData();
 80061d6:	f001 facf 	bl	8007778 <convertAndSendData>
			tablakapisivicihatasi=1;
 80061da:	4b50      	ldr	r3, [pc, #320]	; (800631c <checkAktifCalisma+0x15f0>)
 80061dc:	2201      	movs	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e023      	b.n	800622a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80061e2:	4b4e      	ldr	r3, [pc, #312]	; (800631c <checkAktifCalisma+0x15f0>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01f      	beq.n	800622a <checkAktifCalisma+0x14fe>
 80061ea:	4b4a      	ldr	r3, [pc, #296]	; (8006314 <checkAktifCalisma+0x15e8>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01b      	beq.n	800622a <checkAktifCalisma+0x14fe>
 80061f2:	4b43      	ldr	r3, [pc, #268]	; (8006300 <checkAktifCalisma+0x15d4>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	f083 0301 	eor.w	r3, r3, #1
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d014      	beq.n	800622a <checkAktifCalisma+0x14fe>
 8006200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006204:	4840      	ldr	r0, [pc, #256]	; (8006308 <checkAktifCalisma+0x15dc>)
 8006206:	f002 ffe5 	bl	80091d4 <HAL_GPIO_ReadPin>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10c      	bne.n	800622a <checkAktifCalisma+0x14fe>
 8006210:	4b40      	ldr	r3, [pc, #256]	; (8006314 <checkAktifCalisma+0x15e8>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006218:	4b40      	ldr	r3, [pc, #256]	; (800631c <checkAktifCalisma+0x15f0>)
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800621e:	4b3e      	ldr	r3, [pc, #248]	; (8006318 <checkAktifCalisma+0x15ec>)
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006224:	2005      	movs	r0, #5
 8006226:	f7fe fbaf 	bl	8004988 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800622a:	4b30      	ldr	r3, [pc, #192]	; (80062ec <checkAktifCalisma+0x15c0>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d107      	bne.n	8006242 <checkAktifCalisma+0x1516>
 8006232:	4b2a      	ldr	r3, [pc, #168]	; (80062dc <checkAktifCalisma+0x15b0>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <checkAktifCalisma+0x1516>
 800623a:	4b39      	ldr	r3, [pc, #228]	; (8006320 <checkAktifCalisma+0x15f4>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d016      	beq.n	8006270 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006242:	4b38      	ldr	r3, [pc, #224]	; (8006324 <checkAktifCalisma+0x15f8>)
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b38      	ldr	r3, [pc, #224]	; (8006328 <checkAktifCalisma+0x15fc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	4a37      	ldr	r2, [pc, #220]	; (800632c <checkAktifCalisma+0x1600>)
 800624e:	7812      	ldrb	r2, [r2, #0]
 8006250:	4293      	cmp	r3, r2
 8006252:	d30d      	bcc.n	8006270 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006254:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <checkAktifCalisma+0x15c8>)
 8006256:	2201      	movs	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800625a:	2006      	movs	r0, #6
 800625c:	f7fa fc04 	bl	8000a68 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006260:	2006      	movs	r0, #6
 8006262:	f7fa fba7 	bl	80009b4 <hata2EEPROM>
			  	convertAndSendData();
 8006266:	f001 fa87 	bl	8007778 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800626a:	4b31      	ldr	r3, [pc, #196]	; (8006330 <checkAktifCalisma+0x1604>)
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006270:	4b2f      	ldr	r3, [pc, #188]	; (8006330 <checkAktifCalisma+0x1604>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <checkAktifCalisma+0x1574>
 8006278:	2108      	movs	r1, #8
 800627a:	4823      	ldr	r0, [pc, #140]	; (8006308 <checkAktifCalisma+0x15dc>)
 800627c:	f002 ffaa 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <checkAktifCalisma+0x1574>
 8006286:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <checkAktifCalisma+0x15d4>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	f083 0301 	eor.w	r3, r3, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006294:	4b26      	ldr	r3, [pc, #152]	; (8006330 <checkAktifCalisma+0x1604>)
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800629a:	2006      	movs	r0, #6
 800629c:	f7fe fb74 	bl	8004988 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80062a0:	4b24      	ldr	r3, [pc, #144]	; (8006334 <checkAktifCalisma+0x1608>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10b      	bne.n	80062c0 <checkAktifCalisma+0x1594>
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <checkAktifCalisma+0x15b0>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d107      	bne.n	80062c0 <checkAktifCalisma+0x1594>
 80062b0:	4b21      	ldr	r3, [pc, #132]	; (8006338 <checkAktifCalisma+0x160c>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <checkAktifCalisma+0x1594>
 80062b8:	4b19      	ldr	r3, [pc, #100]	; (8006320 <checkAktifCalisma+0x15f4>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d03f      	beq.n	8006340 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80062c0:	4b1e      	ldr	r3, [pc, #120]	; (800633c <checkAktifCalisma+0x1610>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80062c6:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <checkAktifCalisma+0x15d8>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <checkAktifCalisma+0x15ec>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	e03c      	b.n	800634e <checkAktifCalisma+0x1622>
 80062d4:	20000269 	.word	0x20000269
 80062d8:	2000026f 	.word	0x2000026f
 80062dc:	20000250 	.word	0x20000250
 80062e0:	20000279 	.word	0x20000279
 80062e4:	2000021b 	.word	0x2000021b
 80062e8:	2000021f 	.word	0x2000021f
 80062ec:	2000026c 	.word	0x2000026c
 80062f0:	40011000 	.word	0x40011000
 80062f4:	2000026d 	.word	0x2000026d
 80062f8:	20000276 	.word	0x20000276
 80062fc:	40010c00 	.word	0x40010c00
 8006300:	20000266 	.word	0x20000266
 8006304:	2000027a 	.word	0x2000027a
 8006308:	40010800 	.word	0x40010800
 800630c:	20000220 	.word	0x20000220
 8006310:	20000277 	.word	0x20000277
 8006314:	2000025a 	.word	0x2000025a
 8006318:	2000027b 	.word	0x2000027b
 800631c:	20000278 	.word	0x20000278
 8006320:	2000024f 	.word	0x2000024f
 8006324:	200001f4 	.word	0x200001f4
 8006328:	20000208 	.word	0x20000208
 800632c:	20000230 	.word	0x20000230
 8006330:	20000267 	.word	0x20000267
 8006334:	2000024d 	.word	0x2000024d
 8006338:	2000024e 	.word	0x2000024e
 800633c:	2000026e 	.word	0x2000026e
		} else {
			makineCalisiyor=1;
 8006340:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <checkAktifCalisma+0x1690>)
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006346:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <checkAktifCalisma+0x1694>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1e      	ldr	r2, [pc, #120]	; (80063c4 <checkAktifCalisma+0x1698>)
 800634c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800634e:	4b1e      	ldr	r3, [pc, #120]	; (80063c8 <checkAktifCalisma+0x169c>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02f      	beq.n	80063b6 <checkAktifCalisma+0x168a>
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <checkAktifCalisma+0x16a0>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f083 0301 	eor.w	r3, r3, #1
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d028      	beq.n	80063b6 <checkAktifCalisma+0x168a>
 8006364:	4b1a      	ldr	r3, [pc, #104]	; (80063d0 <checkAktifCalisma+0x16a4>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	f083 0301 	eor.w	r3, r3, #1
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d021      	beq.n	80063b6 <checkAktifCalisma+0x168a>
 8006372:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <checkAktifCalisma+0x16a8>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	f083 0301 	eor.w	r3, r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01a      	beq.n	80063b6 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006380:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <checkAktifCalisma+0x16ac>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f083 0301 	eor.w	r3, r3, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d013      	beq.n	80063b6 <checkAktifCalisma+0x168a>
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <checkAktifCalisma+0x16b0>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	f083 0301 	eor.w	r3, r3, #1
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00c      	beq.n	80063b6 <checkAktifCalisma+0x168a>
 800639c:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <checkAktifCalisma+0x16b4>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	f083 0301 	eor.w	r3, r3, #1
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <checkAktifCalisma+0x168a>
			hataVar=0;
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <checkAktifCalisma+0x169c>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80063b0:	2007      	movs	r0, #7
 80063b2:	f7fe fae9 	bl	8004988 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80063b6:	bf00      	nop
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	2000026e 	.word	0x2000026e
 80063c0:	200001f4 	.word	0x200001f4
 80063c4:	20000208 	.word	0x20000208
 80063c8:	2000026d 	.word	0x2000026d
 80063cc:	20000268 	.word	0x20000268
 80063d0:	20000269 	.word	0x20000269
 80063d4:	20000276 	.word	0x20000276
 80063d8:	20000277 	.word	0x20000277
 80063dc:	20000278 	.word	0x20000278
 80063e0:	20000267 	.word	0x20000267

080063e4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80063e8:	4b8b      	ldr	r3, [pc, #556]	; (8006618 <checkDemoModCalisma+0x234>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	f040 8229 	bne.w	8006844 <checkDemoModCalisma+0x460>
 80063f2:	4b8a      	ldr	r3, [pc, #552]	; (800661c <checkDemoModCalisma+0x238>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 8224 	beq.w	8006844 <checkDemoModCalisma+0x460>
 80063fc:	4b88      	ldr	r3, [pc, #544]	; (8006620 <checkDemoModCalisma+0x23c>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f040 821f 	bne.w	8006844 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006406:	2102      	movs	r1, #2
 8006408:	4886      	ldr	r0, [pc, #536]	; (8006624 <checkDemoModCalisma+0x240>)
 800640a:	f002 fee3 	bl	80091d4 <HAL_GPIO_ReadPin>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11d      	bne.n	8006450 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006414:	4b84      	ldr	r3, [pc, #528]	; (8006628 <checkDemoModCalisma+0x244>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f083 0301 	eor.w	r3, r3, #1
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006422:	4b82      	ldr	r3, [pc, #520]	; (800662c <checkDemoModCalisma+0x248>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f083 0301 	eor.w	r3, r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00f      	beq.n	8006450 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006430:	4b7f      	ldr	r3, [pc, #508]	; (8006630 <checkDemoModCalisma+0x24c>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f083 0301 	eor.w	r3, r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d008      	beq.n	8006450 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800643e:	2201      	movs	r2, #1
 8006440:	2104      	movs	r1, #4
 8006442:	487c      	ldr	r0, [pc, #496]	; (8006634 <checkDemoModCalisma+0x250>)
 8006444:	f002 fedd 	bl	8009202 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006448:	4b7b      	ldr	r3, [pc, #492]	; (8006638 <checkDemoModCalisma+0x254>)
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e00e      	b.n	800646e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006450:	2102      	movs	r1, #2
 8006452:	4874      	ldr	r0, [pc, #464]	; (8006624 <checkDemoModCalisma+0x240>)
 8006454:	f002 febe 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006458:	4603      	mov	r3, r0
 800645a:	2b01      	cmp	r3, #1
 800645c:	d107      	bne.n	800646e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800645e:	2200      	movs	r2, #0
 8006460:	2104      	movs	r1, #4
 8006462:	4874      	ldr	r0, [pc, #464]	; (8006634 <checkDemoModCalisma+0x250>)
 8006464:	f002 fecd 	bl	8009202 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006468:	4b73      	ldr	r3, [pc, #460]	; (8006638 <checkDemoModCalisma+0x254>)
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800646e:	4b72      	ldr	r3, [pc, #456]	; (8006638 <checkDemoModCalisma+0x254>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <checkDemoModCalisma+0xaa>
 8006476:	4b6d      	ldr	r3, [pc, #436]	; (800662c <checkDemoModCalisma+0x248>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <checkDemoModCalisma+0xaa>
 800647e:	4b6c      	ldr	r3, [pc, #432]	; (8006630 <checkDemoModCalisma+0x24c>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <checkDemoModCalisma+0xaa>
 8006486:	4b68      	ldr	r3, [pc, #416]	; (8006628 <checkDemoModCalisma+0x244>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00c      	beq.n	80064a8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800648e:	2201      	movs	r2, #1
 8006490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006494:	4867      	ldr	r0, [pc, #412]	; (8006634 <checkDemoModCalisma+0x250>)
 8006496:	f002 feb4 	bl	8009202 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800649a:	2201      	movs	r2, #1
 800649c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064a0:	4864      	ldr	r0, [pc, #400]	; (8006634 <checkDemoModCalisma+0x250>)
 80064a2:	f002 feae 	bl	8009202 <HAL_GPIO_WritePin>
 80064a6:	e00b      	b.n	80064c0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80064a8:	2200      	movs	r2, #0
 80064aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064ae:	4861      	ldr	r0, [pc, #388]	; (8006634 <checkDemoModCalisma+0x250>)
 80064b0:	f002 fea7 	bl	8009202 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80064b4:	2200      	movs	r2, #0
 80064b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064ba:	485e      	ldr	r0, [pc, #376]	; (8006634 <checkDemoModCalisma+0x250>)
 80064bc:	f002 fea1 	bl	8009202 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064c0:	2102      	movs	r1, #2
 80064c2:	4858      	ldr	r0, [pc, #352]	; (8006624 <checkDemoModCalisma+0x240>)
 80064c4:	f002 fe86 	bl	80091d4 <HAL_GPIO_ReadPin>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10d      	bne.n	80064ea <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80064ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064d2:	4854      	ldr	r0, [pc, #336]	; (8006624 <checkDemoModCalisma+0x240>)
 80064d4:	f002 fe7e 	bl	80091d4 <HAL_GPIO_ReadPin>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d105      	bne.n	80064ea <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80064de:	4b56      	ldr	r3, [pc, #344]	; (8006638 <checkDemoModCalisma+0x254>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f083 0301 	eor.w	r3, r3, #1
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064ea:	2102      	movs	r1, #2
 80064ec:	484d      	ldr	r0, [pc, #308]	; (8006624 <checkDemoModCalisma+0x240>)
 80064ee:	f002 fe71 	bl	80091d4 <HAL_GPIO_ReadPin>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d125      	bne.n	8006544 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80064f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064fc:	4849      	ldr	r0, [pc, #292]	; (8006624 <checkDemoModCalisma+0x240>)
 80064fe:	f002 fe69 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11d      	bne.n	8006544 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006508:	4b4b      	ldr	r3, [pc, #300]	; (8006638 <checkDemoModCalisma+0x254>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	f083 0301 	eor.w	r3, r3, #1
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d016      	beq.n	8006544 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8006516:	4b44      	ldr	r3, [pc, #272]	; (8006628 <checkDemoModCalisma+0x244>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f083 0301 	eor.w	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00f      	beq.n	8006544 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006524:	4b42      	ldr	r3, [pc, #264]	; (8006630 <checkDemoModCalisma+0x24c>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f083 0301 	eor.w	r3, r3, #1
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006532:	2201      	movs	r2, #1
 8006534:	2120      	movs	r1, #32
 8006536:	483b      	ldr	r0, [pc, #236]	; (8006624 <checkDemoModCalisma+0x240>)
 8006538:	f002 fe63 	bl	8009202 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800653c:	4b3b      	ldr	r3, [pc, #236]	; (800662c <checkDemoModCalisma+0x248>)
 800653e:	2201      	movs	r2, #1
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e007      	b.n	8006554 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006544:	2200      	movs	r2, #0
 8006546:	2120      	movs	r1, #32
 8006548:	4836      	ldr	r0, [pc, #216]	; (8006624 <checkDemoModCalisma+0x240>)
 800654a:	f002 fe5a 	bl	8009202 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800654e:	4b37      	ldr	r3, [pc, #220]	; (800662c <checkDemoModCalisma+0x248>)
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006554:	2102      	movs	r1, #2
 8006556:	4833      	ldr	r0, [pc, #204]	; (8006624 <checkDemoModCalisma+0x240>)
 8006558:	f002 fe3c 	bl	80091d4 <HAL_GPIO_ReadPin>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d125      	bne.n	80065ae <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006566:	482f      	ldr	r0, [pc, #188]	; (8006624 <checkDemoModCalisma+0x240>)
 8006568:	f002 fe34 	bl	80091d4 <HAL_GPIO_ReadPin>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d11d      	bne.n	80065ae <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006572:	4b31      	ldr	r3, [pc, #196]	; (8006638 <checkDemoModCalisma+0x254>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	f083 0301 	eor.w	r3, r3, #1
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d016      	beq.n	80065ae <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006580:	4b2a      	ldr	r3, [pc, #168]	; (800662c <checkDemoModCalisma+0x248>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f083 0301 	eor.w	r3, r3, #1
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00f      	beq.n	80065ae <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800658e:	4b26      	ldr	r3, [pc, #152]	; (8006628 <checkDemoModCalisma+0x244>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	f083 0301 	eor.w	r3, r3, #1
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800659c:	2201      	movs	r2, #1
 800659e:	2110      	movs	r1, #16
 80065a0:	4820      	ldr	r0, [pc, #128]	; (8006624 <checkDemoModCalisma+0x240>)
 80065a2:	f002 fe2e 	bl	8009202 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80065a6:	4b22      	ldr	r3, [pc, #136]	; (8006630 <checkDemoModCalisma+0x24c>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	e007      	b.n	80065be <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80065ae:	2200      	movs	r2, #0
 80065b0:	2110      	movs	r1, #16
 80065b2:	481c      	ldr	r0, [pc, #112]	; (8006624 <checkDemoModCalisma+0x240>)
 80065b4:	f002 fe25 	bl	8009202 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80065b8:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <checkDemoModCalisma+0x24c>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80065be:	2104      	movs	r1, #4
 80065c0:	4818      	ldr	r0, [pc, #96]	; (8006624 <checkDemoModCalisma+0x240>)
 80065c2:	f002 fe07 	bl	80091d4 <HAL_GPIO_ReadPin>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d139      	bne.n	8006640 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80065cc:	4b1a      	ldr	r3, [pc, #104]	; (8006638 <checkDemoModCalisma+0x254>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	f083 0301 	eor.w	r3, r3, #1
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d032      	beq.n	8006640 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80065da:	4b15      	ldr	r3, [pc, #84]	; (8006630 <checkDemoModCalisma+0x24c>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f083 0301 	eor.w	r3, r3, #1
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d02b      	beq.n	8006640 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80065e8:	4b10      	ldr	r3, [pc, #64]	; (800662c <checkDemoModCalisma+0x248>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f083 0301 	eor.w	r3, r3, #1
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d024      	beq.n	8006640 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80065f6:	2201      	movs	r2, #1
 80065f8:	2102      	movs	r1, #2
 80065fa:	480e      	ldr	r0, [pc, #56]	; (8006634 <checkDemoModCalisma+0x250>)
 80065fc:	f002 fe01 	bl	8009202 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006600:	2201      	movs	r2, #1
 8006602:	2101      	movs	r1, #1
 8006604:	480b      	ldr	r0, [pc, #44]	; (8006634 <checkDemoModCalisma+0x250>)
 8006606:	f002 fdfc 	bl	8009202 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <checkDemoModCalisma+0x244>)
 800660c:	2201      	movs	r2, #1
 800660e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <checkDemoModCalisma+0x258>)
 8006612:	2201      	movs	r2, #1
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	e027      	b.n	8006668 <checkDemoModCalisma+0x284>
 8006618:	20000236 	.word	0x20000236
 800661c:	2000026a 	.word	0x2000026a
 8006620:	20000235 	.word	0x20000235
 8006624:	40011000 	.word	0x40011000
 8006628:	20000271 	.word	0x20000271
 800662c:	20000272 	.word	0x20000272
 8006630:	20000273 	.word	0x20000273
 8006634:	40010c00 	.word	0x40010c00
 8006638:	20000270 	.word	0x20000270
 800663c:	20000256 	.word	0x20000256
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006640:	2104      	movs	r1, #4
 8006642:	48a0      	ldr	r0, [pc, #640]	; (80068c4 <checkDemoModCalisma+0x4e0>)
 8006644:	f002 fdc6 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d10c      	bne.n	8006668 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800664e:	2200      	movs	r2, #0
 8006650:	2102      	movs	r1, #2
 8006652:	489d      	ldr	r0, [pc, #628]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 8006654:	f002 fdd5 	bl	8009202 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006658:	2200      	movs	r2, #0
 800665a:	2101      	movs	r1, #1
 800665c:	489a      	ldr	r0, [pc, #616]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 800665e:	f002 fdd0 	bl	8009202 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006662:	4b9a      	ldr	r3, [pc, #616]	; (80068cc <checkDemoModCalisma+0x4e8>)
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006668:	2104      	movs	r1, #4
 800666a:	4896      	ldr	r0, [pc, #600]	; (80068c4 <checkDemoModCalisma+0x4e0>)
 800666c:	f002 fdb2 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d10d      	bne.n	8006692 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006676:	2201      	movs	r2, #1
 8006678:	2180      	movs	r1, #128	; 0x80
 800667a:	4895      	ldr	r0, [pc, #596]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 800667c:	f002 fdc1 	bl	8009202 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006680:	2201      	movs	r2, #1
 8006682:	2120      	movs	r1, #32
 8006684:	4892      	ldr	r0, [pc, #584]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 8006686:	f002 fdbc 	bl	8009202 <HAL_GPIO_WritePin>
			timer3 = millis;
 800668a:	4b92      	ldr	r3, [pc, #584]	; (80068d4 <checkDemoModCalisma+0x4f0>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a92      	ldr	r2, [pc, #584]	; (80068d8 <checkDemoModCalisma+0x4f4>)
 8006690:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006692:	4b90      	ldr	r3, [pc, #576]	; (80068d4 <checkDemoModCalisma+0x4f0>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b90      	ldr	r3, [pc, #576]	; (80068d8 <checkDemoModCalisma+0x4f4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b04      	cmp	r3, #4
 800669e:	d909      	bls.n	80066b4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80066a0:	2200      	movs	r2, #0
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	488a      	ldr	r0, [pc, #552]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80066a6:	f002 fdac 	bl	8009202 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80066aa:	2200      	movs	r2, #0
 80066ac:	2120      	movs	r1, #32
 80066ae:	4888      	ldr	r0, [pc, #544]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80066b0:	f002 fda7 	bl	8009202 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80066b4:	2102      	movs	r1, #2
 80066b6:	4883      	ldr	r0, [pc, #524]	; (80068c4 <checkDemoModCalisma+0x4e0>)
 80066b8:	f002 fd8c 	bl	80091d4 <HAL_GPIO_ReadPin>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d108      	bne.n	80066d4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80066c2:	2201      	movs	r2, #1
 80066c4:	2140      	movs	r1, #64	; 0x40
 80066c6:	4882      	ldr	r0, [pc, #520]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80066c8:	f002 fd9b 	bl	8009202 <HAL_GPIO_WritePin>
			timer3 = millis;
 80066cc:	4b81      	ldr	r3, [pc, #516]	; (80068d4 <checkDemoModCalisma+0x4f0>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a81      	ldr	r2, [pc, #516]	; (80068d8 <checkDemoModCalisma+0x4f4>)
 80066d2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80066d4:	4b7f      	ldr	r3, [pc, #508]	; (80068d4 <checkDemoModCalisma+0x4f0>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	4b7f      	ldr	r3, [pc, #508]	; (80068d8 <checkDemoModCalisma+0x4f4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d904      	bls.n	80066ec <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80066e2:	2200      	movs	r2, #0
 80066e4:	2140      	movs	r1, #64	; 0x40
 80066e6:	487a      	ldr	r0, [pc, #488]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80066e8:	f002 fd8b 	bl	8009202 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80066ec:	4b7b      	ldr	r3, [pc, #492]	; (80068dc <checkDemoModCalisma+0x4f8>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d058      	beq.n	80067a6 <checkDemoModCalisma+0x3c2>
 80066f4:	4b7a      	ldr	r3, [pc, #488]	; (80068e0 <checkDemoModCalisma+0x4fc>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d054      	beq.n	80067a6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80066fc:	4b79      	ldr	r3, [pc, #484]	; (80068e4 <checkDemoModCalisma+0x500>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	3301      	adds	r3, #1
 8006702:	b2da      	uxtb	r2, r3
 8006704:	4b77      	ldr	r3, [pc, #476]	; (80068e4 <checkDemoModCalisma+0x500>)
 8006706:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006708:	4b76      	ldr	r3, [pc, #472]	; (80068e4 <checkDemoModCalisma+0x500>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b09      	cmp	r3, #9
 800670e:	d908      	bls.n	8006722 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006710:	4b74      	ldr	r3, [pc, #464]	; (80068e4 <checkDemoModCalisma+0x500>)
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8006716:	4b74      	ldr	r3, [pc, #464]	; (80068e8 <checkDemoModCalisma+0x504>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	3301      	adds	r3, #1
 800671c:	b2da      	uxtb	r2, r3
 800671e:	4b72      	ldr	r3, [pc, #456]	; (80068e8 <checkDemoModCalisma+0x504>)
 8006720:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006722:	4b71      	ldr	r3, [pc, #452]	; (80068e8 <checkDemoModCalisma+0x504>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b09      	cmp	r3, #9
 8006728:	d908      	bls.n	800673c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800672a:	4b6f      	ldr	r3, [pc, #444]	; (80068e8 <checkDemoModCalisma+0x504>)
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006730:	4b6e      	ldr	r3, [pc, #440]	; (80068ec <checkDemoModCalisma+0x508>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	3301      	adds	r3, #1
 8006736:	b2da      	uxtb	r2, r3
 8006738:	4b6c      	ldr	r3, [pc, #432]	; (80068ec <checkDemoModCalisma+0x508>)
 800673a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800673c:	4b6b      	ldr	r3, [pc, #428]	; (80068ec <checkDemoModCalisma+0x508>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b09      	cmp	r3, #9
 8006742:	d908      	bls.n	8006756 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006744:	4b69      	ldr	r3, [pc, #420]	; (80068ec <checkDemoModCalisma+0x508>)
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800674a:	4b69      	ldr	r3, [pc, #420]	; (80068f0 <checkDemoModCalisma+0x50c>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	3301      	adds	r3, #1
 8006750:	b2da      	uxtb	r2, r3
 8006752:	4b67      	ldr	r3, [pc, #412]	; (80068f0 <checkDemoModCalisma+0x50c>)
 8006754:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006756:	4b66      	ldr	r3, [pc, #408]	; (80068f0 <checkDemoModCalisma+0x50c>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b09      	cmp	r3, #9
 800675c:	d908      	bls.n	8006770 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800675e:	4b64      	ldr	r3, [pc, #400]	; (80068f0 <checkDemoModCalisma+0x50c>)
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006764:	4b63      	ldr	r3, [pc, #396]	; (80068f4 <checkDemoModCalisma+0x510>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	3301      	adds	r3, #1
 800676a:	b2da      	uxtb	r2, r3
 800676c:	4b61      	ldr	r3, [pc, #388]	; (80068f4 <checkDemoModCalisma+0x510>)
 800676e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006770:	4b60      	ldr	r3, [pc, #384]	; (80068f4 <checkDemoModCalisma+0x510>)
 8006772:	781a      	ldrb	r2, [r3, #0]
 8006774:	4b60      	ldr	r3, [pc, #384]	; (80068f8 <checkDemoModCalisma+0x514>)
 8006776:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800677a:	4b5d      	ldr	r3, [pc, #372]	; (80068f0 <checkDemoModCalisma+0x50c>)
 800677c:	781a      	ldrb	r2, [r3, #0]
 800677e:	4b5e      	ldr	r3, [pc, #376]	; (80068f8 <checkDemoModCalisma+0x514>)
 8006780:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006782:	4b5a      	ldr	r3, [pc, #360]	; (80068ec <checkDemoModCalisma+0x508>)
 8006784:	781a      	ldrb	r2, [r3, #0]
 8006786:	4b5c      	ldr	r3, [pc, #368]	; (80068f8 <checkDemoModCalisma+0x514>)
 8006788:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800678a:	4b57      	ldr	r3, [pc, #348]	; (80068e8 <checkDemoModCalisma+0x504>)
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	4b5a      	ldr	r3, [pc, #360]	; (80068f8 <checkDemoModCalisma+0x514>)
 8006790:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006792:	4b54      	ldr	r3, [pc, #336]	; (80068e4 <checkDemoModCalisma+0x500>)
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	4b58      	ldr	r3, [pc, #352]	; (80068f8 <checkDemoModCalisma+0x514>)
 8006798:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800679a:	4b58      	ldr	r3, [pc, #352]	; (80068fc <checkDemoModCalisma+0x518>)
 800679c:	2201      	movs	r2, #1
 800679e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 80067a0:	4b4f      	ldr	r3, [pc, #316]	; (80068e0 <checkDemoModCalisma+0x4fc>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 80067a6:	4b56      	ldr	r3, [pc, #344]	; (8006900 <checkDemoModCalisma+0x51c>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 8087 	bne.w	80068be <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80067b0:	4a54      	ldr	r2, [pc, #336]	; (8006904 <checkDemoModCalisma+0x520>)
 80067b2:	2101      	movs	r1, #1
 80067b4:	2002      	movs	r0, #2
 80067b6:	f001 f9e7 	bl	8007b88 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80067ba:	4a53      	ldr	r2, [pc, #332]	; (8006908 <checkDemoModCalisma+0x524>)
 80067bc:	2101      	movs	r1, #1
 80067be:	2001      	movs	r0, #1
 80067c0:	f001 f9e2 	bl	8007b88 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80067c4:	4b4b      	ldr	r3, [pc, #300]	; (80068f4 <checkDemoModCalisma+0x510>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	220a      	movs	r2, #10
 80067ca:	4950      	ldr	r1, [pc, #320]	; (800690c <checkDemoModCalisma+0x528>)
 80067cc:	4618      	mov	r0, r3
 80067ce:	f005 fd2d 	bl	800c22c <itoa>
			lcd_print(2,12,snum);
 80067d2:	4a4e      	ldr	r2, [pc, #312]	; (800690c <checkDemoModCalisma+0x528>)
 80067d4:	210c      	movs	r1, #12
 80067d6:	2002      	movs	r0, #2
 80067d8:	f001 f9d6 	bl	8007b88 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80067dc:	4b44      	ldr	r3, [pc, #272]	; (80068f0 <checkDemoModCalisma+0x50c>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	220a      	movs	r2, #10
 80067e2:	494a      	ldr	r1, [pc, #296]	; (800690c <checkDemoModCalisma+0x528>)
 80067e4:	4618      	mov	r0, r3
 80067e6:	f005 fd21 	bl	800c22c <itoa>
			lcd_print(2,13,snum);
 80067ea:	4a48      	ldr	r2, [pc, #288]	; (800690c <checkDemoModCalisma+0x528>)
 80067ec:	210d      	movs	r1, #13
 80067ee:	2002      	movs	r0, #2
 80067f0:	f001 f9ca 	bl	8007b88 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80067f4:	4b3d      	ldr	r3, [pc, #244]	; (80068ec <checkDemoModCalisma+0x508>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	220a      	movs	r2, #10
 80067fa:	4944      	ldr	r1, [pc, #272]	; (800690c <checkDemoModCalisma+0x528>)
 80067fc:	4618      	mov	r0, r3
 80067fe:	f005 fd15 	bl	800c22c <itoa>
			lcd_print(2,14,snum);
 8006802:	4a42      	ldr	r2, [pc, #264]	; (800690c <checkDemoModCalisma+0x528>)
 8006804:	210e      	movs	r1, #14
 8006806:	2002      	movs	r0, #2
 8006808:	f001 f9be 	bl	8007b88 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800680c:	4b36      	ldr	r3, [pc, #216]	; (80068e8 <checkDemoModCalisma+0x504>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	220a      	movs	r2, #10
 8006812:	493e      	ldr	r1, [pc, #248]	; (800690c <checkDemoModCalisma+0x528>)
 8006814:	4618      	mov	r0, r3
 8006816:	f005 fd09 	bl	800c22c <itoa>
			lcd_print(2,15,snum);
 800681a:	4a3c      	ldr	r2, [pc, #240]	; (800690c <checkDemoModCalisma+0x528>)
 800681c:	210f      	movs	r1, #15
 800681e:	2002      	movs	r0, #2
 8006820:	f001 f9b2 	bl	8007b88 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006824:	4b2f      	ldr	r3, [pc, #188]	; (80068e4 <checkDemoModCalisma+0x500>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	220a      	movs	r2, #10
 800682a:	4938      	ldr	r1, [pc, #224]	; (800690c <checkDemoModCalisma+0x528>)
 800682c:	4618      	mov	r0, r3
 800682e:	f005 fcfd 	bl	800c22c <itoa>
			lcd_print(2,16,snum);
 8006832:	4a36      	ldr	r2, [pc, #216]	; (800690c <checkDemoModCalisma+0x528>)
 8006834:	2110      	movs	r1, #16
 8006836:	2002      	movs	r0, #2
 8006838:	f001 f9a6 	bl	8007b88 <lcd_print>
			mesajYazildi=1;
 800683c:	4b34      	ldr	r3, [pc, #208]	; (8006910 <checkDemoModCalisma+0x52c>)
 800683e:	2201      	movs	r2, #1
 8006840:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006842:	e03c      	b.n	80068be <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006844:	4b33      	ldr	r3, [pc, #204]	; (8006914 <checkDemoModCalisma+0x530>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d003      	beq.n	8006854 <checkDemoModCalisma+0x470>
 800684c:	4b2c      	ldr	r3, [pc, #176]	; (8006900 <checkDemoModCalisma+0x51c>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d134      	bne.n	80068be <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006854:	2200      	movs	r2, #0
 8006856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800685a:	481b      	ldr	r0, [pc, #108]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 800685c:	f002 fcd1 	bl	8009202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006860:	2200      	movs	r2, #0
 8006862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006866:	4818      	ldr	r0, [pc, #96]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 8006868:	f002 fccb 	bl	8009202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800686c:	2200      	movs	r2, #0
 800686e:	2104      	movs	r1, #4
 8006870:	4815      	ldr	r0, [pc, #84]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 8006872:	f002 fcc6 	bl	8009202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006876:	2200      	movs	r2, #0
 8006878:	2102      	movs	r1, #2
 800687a:	4813      	ldr	r0, [pc, #76]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 800687c:	f002 fcc1 	bl	8009202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006880:	2200      	movs	r2, #0
 8006882:	2101      	movs	r1, #1
 8006884:	4810      	ldr	r0, [pc, #64]	; (80068c8 <checkDemoModCalisma+0x4e4>)
 8006886:	f002 fcbc 	bl	8009202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800688a:	2200      	movs	r2, #0
 800688c:	2120      	movs	r1, #32
 800688e:	480d      	ldr	r0, [pc, #52]	; (80068c4 <checkDemoModCalisma+0x4e0>)
 8006890:	f002 fcb7 	bl	8009202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006894:	2200      	movs	r2, #0
 8006896:	2110      	movs	r1, #16
 8006898:	480a      	ldr	r0, [pc, #40]	; (80068c4 <checkDemoModCalisma+0x4e0>)
 800689a:	f002 fcb2 	bl	8009202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800689e:	2200      	movs	r2, #0
 80068a0:	2180      	movs	r1, #128	; 0x80
 80068a2:	480b      	ldr	r0, [pc, #44]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80068a4:	f002 fcad 	bl	8009202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80068a8:	2200      	movs	r2, #0
 80068aa:	2140      	movs	r1, #64	; 0x40
 80068ac:	4808      	ldr	r0, [pc, #32]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80068ae:	f002 fca8 	bl	8009202 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80068b2:	2200      	movs	r2, #0
 80068b4:	2120      	movs	r1, #32
 80068b6:	4806      	ldr	r0, [pc, #24]	; (80068d0 <checkDemoModCalisma+0x4ec>)
 80068b8:	f002 fca3 	bl	8009202 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80068bc:	e7ff      	b.n	80068be <checkDemoModCalisma+0x4da>
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40011000 	.word	0x40011000
 80068c8:	40010c00 	.word	0x40010c00
 80068cc:	20000271 	.word	0x20000271
 80068d0:	40010800 	.word	0x40010800
 80068d4:	200001f4 	.word	0x200001f4
 80068d8:	20000204 	.word	0x20000204
 80068dc:	20000270 	.word	0x20000270
 80068e0:	20000256 	.word	0x20000256
 80068e4:	20000215 	.word	0x20000215
 80068e8:	20000216 	.word	0x20000216
 80068ec:	20000000 	.word	0x20000000
 80068f0:	20000001 	.word	0x20000001
 80068f4:	20000217 	.word	0x20000217
 80068f8:	2000011c 	.word	0x2000011c
 80068fc:	20000244 	.word	0x20000244
 8006900:	20000235 	.word	0x20000235
 8006904:	0800d9ec 	.word	0x0800d9ec
 8006908:	0800d9f8 	.word	0x0800d9f8
 800690c:	2000018c 	.word	0x2000018c
 8006910:	2000024c 	.word	0x2000024c
 8006914:	20000236 	.word	0x20000236

08006918 <mainLoop>:

void mainLoop() {
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800691e:	f7fe f923 	bl	8004b68 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006922:	2101      	movs	r1, #1
 8006924:	48ac      	ldr	r0, [pc, #688]	; (8006bd8 <mainLoop+0x2c0>)
 8006926:	f002 fc55 	bl	80091d4 <HAL_GPIO_ReadPin>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d136      	bne.n	800699e <mainLoop+0x86>
 8006930:	2108      	movs	r1, #8
 8006932:	48aa      	ldr	r0, [pc, #680]	; (8006bdc <mainLoop+0x2c4>)
 8006934:	f002 fc4e 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d12f      	bne.n	800699e <mainLoop+0x86>
 800693e:	2102      	movs	r1, #2
 8006940:	48a5      	ldr	r0, [pc, #660]	; (8006bd8 <mainLoop+0x2c0>)
 8006942:	f002 fc47 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d128      	bne.n	800699e <mainLoop+0x86>
 800694c:	2104      	movs	r1, #4
 800694e:	48a2      	ldr	r0, [pc, #648]	; (8006bd8 <mainLoop+0x2c0>)
 8006950:	f002 fc40 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d121      	bne.n	800699e <mainLoop+0x86>
 800695a:	2108      	movs	r1, #8
 800695c:	489e      	ldr	r0, [pc, #632]	; (8006bd8 <mainLoop+0x2c0>)
 800695e:	f002 fc39 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11a      	bne.n	800699e <mainLoop+0x86>
 8006968:	2180      	movs	r1, #128	; 0x80
 800696a:	489c      	ldr	r0, [pc, #624]	; (8006bdc <mainLoop+0x2c4>)
 800696c:	f002 fc32 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006970:	4603      	mov	r3, r0
 8006972:	2b01      	cmp	r3, #1
 8006974:	d113      	bne.n	800699e <mainLoop+0x86>
 8006976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800697a:	4898      	ldr	r0, [pc, #608]	; (8006bdc <mainLoop+0x2c4>)
 800697c:	f002 fc2a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006980:	4603      	mov	r3, r0
 8006982:	2b01      	cmp	r3, #1
 8006984:	d10b      	bne.n	800699e <mainLoop+0x86>
 8006986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800698a:	4894      	ldr	r0, [pc, #592]	; (8006bdc <mainLoop+0x2c4>)
 800698c:	f002 fc22 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006990:	4603      	mov	r3, r0
 8006992:	2b01      	cmp	r3, #1
 8006994:	d103      	bne.n	800699e <mainLoop+0x86>
			butonKontrol=0;
 8006996:	4b92      	ldr	r3, [pc, #584]	; (8006be0 <mainLoop+0x2c8>)
 8006998:	2200      	movs	r2, #0
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	e003      	b.n	80069a6 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800699e:	4b91      	ldr	r3, [pc, #580]	; (8006be4 <mainLoop+0x2cc>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a91      	ldr	r2, [pc, #580]	; (8006be8 <mainLoop+0x2d0>)
 80069a4:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80069a6:	4b91      	ldr	r3, [pc, #580]	; (8006bec <mainLoop+0x2d4>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d03a      	beq.n	8006a24 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80069ae:	bf00      	nop
 80069b0:	488f      	ldr	r0, [pc, #572]	; (8006bf0 <mainLoop+0x2d8>)
 80069b2:	f003 fa38 	bl	8009e26 <HAL_I2C_GetError>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d0f9      	beq.n	80069b0 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80069bc:	bf00      	nop
 80069be:	488c      	ldr	r0, [pc, #560]	; (8006bf0 <mainLoop+0x2d8>)
 80069c0:	f003 fa24 	bl	8009e0c <HAL_I2C_GetState>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d1f9      	bne.n	80069be <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80069ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80069ce:	9302      	str	r3, [sp, #8]
 80069d0:	236e      	movs	r3, #110	; 0x6e
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	4b87      	ldr	r3, [pc, #540]	; (8006bf4 <mainLoop+0x2dc>)
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	236e      	movs	r3, #110	; 0x6e
 80069da:	2200      	movs	r2, #0
 80069dc:	21a0      	movs	r1, #160	; 0xa0
 80069de:	4884      	ldr	r0, [pc, #528]	; (8006bf0 <mainLoop+0x2d8>)
 80069e0:	f002 feb2 	bl	8009748 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80069e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069e8:	f001 fe24 	bl	8008634 <HAL_Delay>

		  hafizaYaz=0;
 80069ec:	4b7f      	ldr	r3, [pc, #508]	; (8006bec <mainLoop+0x2d4>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80069f2:	4b81      	ldr	r3, [pc, #516]	; (8006bf8 <mainLoop+0x2e0>)
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80069fa:	4a80      	ldr	r2, [pc, #512]	; (8006bfc <mainLoop+0x2e4>)
 80069fc:	2101      	movs	r1, #1
 80069fe:	2002      	movs	r0, #2
 8006a00:	f001 f8c2 	bl	8007b88 <lcd_print>
 8006a04:	e008      	b.n	8006a18 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006a06:	4b7c      	ldr	r3, [pc, #496]	; (8006bf8 <mainLoop+0x2e0>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d104      	bne.n	8006a18 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006a0e:	4a7c      	ldr	r2, [pc, #496]	; (8006c00 <mainLoop+0x2e8>)
 8006a10:	2101      	movs	r1, #1
 8006a12:	2002      	movs	r0, #2
 8006a14:	f001 f8b8 	bl	8007b88 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006a18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a1c:	f001 fe0a 	bl	8008634 <HAL_Delay>
		  lcd_clear();
 8006a20:	f001 f8de 	bl	8007be0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006a24:	4b77      	ldr	r3, [pc, #476]	; (8006c04 <mainLoop+0x2ec>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	f083 0301 	eor.w	r3, r3, #1
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d06d      	beq.n	8006b0e <mainLoop+0x1f6>
 8006a32:	486f      	ldr	r0, [pc, #444]	; (8006bf0 <mainLoop+0x2d8>)
 8006a34:	f003 f9ea 	bl	8009e0c <HAL_I2C_GetState>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d167      	bne.n	8006b0e <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006a3e:	4b72      	ldr	r3, [pc, #456]	; (8006c08 <mainLoop+0x2f0>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f083 0301 	eor.w	r3, r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d044      	beq.n	8006ad6 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006a4c:	4a6f      	ldr	r2, [pc, #444]	; (8006c0c <mainLoop+0x2f4>)
 8006a4e:	2101      	movs	r1, #1
 8006a50:	2001      	movs	r0, #1
 8006a52:	f001 f899 	bl	8007b88 <lcd_print>
			  if(dilSecim==0) {
 8006a56:	4b68      	ldr	r3, [pc, #416]	; (8006bf8 <mainLoop+0x2e0>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d105      	bne.n	8006a6a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006a5e:	4a6c      	ldr	r2, [pc, #432]	; (8006c10 <mainLoop+0x2f8>)
 8006a60:	2101      	movs	r1, #1
 8006a62:	2002      	movs	r0, #2
 8006a64:	f001 f890 	bl	8007b88 <lcd_print>
 8006a68:	e008      	b.n	8006a7c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006a6a:	4b63      	ldr	r3, [pc, #396]	; (8006bf8 <mainLoop+0x2e0>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d104      	bne.n	8006a7c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006a72:	4a68      	ldr	r2, [pc, #416]	; (8006c14 <mainLoop+0x2fc>)
 8006a74:	2101      	movs	r1, #1
 8006a76:	2002      	movs	r0, #2
 8006a78:	f001 f886 	bl	8007b88 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a80:	f001 fdd8 	bl	8008634 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a84:	bf00      	nop
 8006a86:	485a      	ldr	r0, [pc, #360]	; (8006bf0 <mainLoop+0x2d8>)
 8006a88:	f003 f9cd 	bl	8009e26 <HAL_I2C_GetError>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d0f9      	beq.n	8006a86 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a92:	e003      	b.n	8006a9c <mainLoop+0x184>
				  HAL_Delay(1000);
 8006a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a98:	f001 fdcc 	bl	8008634 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a9c:	4854      	ldr	r0, [pc, #336]	; (8006bf0 <mainLoop+0x2d8>)
 8006a9e:	f003 f9b5 	bl	8009e0c <HAL_I2C_GetState>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d1f5      	bne.n	8006a94 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006aa8:	4b53      	ldr	r3, [pc, #332]	; (8006bf8 <mainLoop+0x2e0>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006ab0:	4a59      	ldr	r2, [pc, #356]	; (8006c18 <mainLoop+0x300>)
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	2002      	movs	r0, #2
 8006ab6:	f001 f867 	bl	8007b88 <lcd_print>
 8006aba:	e008      	b.n	8006ace <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006abc:	4b4e      	ldr	r3, [pc, #312]	; (8006bf8 <mainLoop+0x2e0>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d104      	bne.n	8006ace <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006ac4:	4a55      	ldr	r2, [pc, #340]	; (8006c1c <mainLoop+0x304>)
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	2002      	movs	r0, #2
 8006aca:	f001 f85d 	bl	8007b88 <lcd_print>
			  }

			  ilkOkuma=1;
 8006ace:	4b4e      	ldr	r3, [pc, #312]	; (8006c08 <mainLoop+0x2f0>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e014      	b.n	8006b00 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006ad6:	4b48      	ldr	r3, [pc, #288]	; (8006bf8 <mainLoop+0x2e0>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006ade:	4a50      	ldr	r2, [pc, #320]	; (8006c20 <mainLoop+0x308>)
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	2002      	movs	r0, #2
 8006ae4:	f001 f850 	bl	8007b88 <lcd_print>
 8006ae8:	e008      	b.n	8006afc <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006aea:	4b43      	ldr	r3, [pc, #268]	; (8006bf8 <mainLoop+0x2e0>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d104      	bne.n	8006afc <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006af2:	4a4c      	ldr	r2, [pc, #304]	; (8006c24 <mainLoop+0x30c>)
 8006af4:	2101      	movs	r1, #1
 8006af6:	2002      	movs	r0, #2
 8006af8:	f001 f846 	bl	8007b88 <lcd_print>
			  }
			  lcd_clear();
 8006afc:	f001 f870 	bl	8007be0 <lcd_clear>
		  }

		  lcd_clear();
 8006b00:	f001 f86e 	bl	8007be0 <lcd_clear>

		  eepromKontrol();
 8006b04:	f7f9 fb96 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006b08:	4b3e      	ldr	r3, [pc, #248]	; (8006c04 <mainLoop+0x2ec>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006b0e:	4b46      	ldr	r3, [pc, #280]	; (8006c28 <mainLoop+0x310>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d11c      	bne.n	8006b50 <mainLoop+0x238>
 8006b16:	4b45      	ldr	r3, [pc, #276]	; (8006c2c <mainLoop+0x314>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	f083 0301 	eor.w	r3, r3, #1
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d015      	beq.n	8006b50 <mainLoop+0x238>
 8006b24:	4b42      	ldr	r3, [pc, #264]	; (8006c30 <mainLoop+0x318>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d111      	bne.n	8006b50 <mainLoop+0x238>
			lcd_clear();
 8006b2c:	f001 f858 	bl	8007be0 <lcd_clear>
			HAL_Delay(10);
 8006b30:	200a      	movs	r0, #10
 8006b32:	f001 fd7f 	bl	8008634 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006b36:	4a3f      	ldr	r2, [pc, #252]	; (8006c34 <mainLoop+0x31c>)
 8006b38:	2101      	movs	r1, #1
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	f001 f824 	bl	8007b88 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006b40:	4a3d      	ldr	r2, [pc, #244]	; (8006c38 <mainLoop+0x320>)
 8006b42:	2101      	movs	r1, #1
 8006b44:	2002      	movs	r0, #2
 8006b46:	f001 f81f 	bl	8007b88 <lcd_print>
			mesajYazildi=1;
 8006b4a:	4b38      	ldr	r3, [pc, #224]	; (8006c2c <mainLoop+0x314>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006b50:	4b35      	ldr	r3, [pc, #212]	; (8006c28 <mainLoop+0x310>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d112      	bne.n	8006b7e <mainLoop+0x266>
 8006b58:	2102      	movs	r1, #2
 8006b5a:	481f      	ldr	r0, [pc, #124]	; (8006bd8 <mainLoop+0x2c0>)
 8006b5c:	f002 fb3a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d10b      	bne.n	8006b7e <mainLoop+0x266>
 8006b66:	2104      	movs	r1, #4
 8006b68:	481b      	ldr	r0, [pc, #108]	; (8006bd8 <mainLoop+0x2c0>)
 8006b6a:	f002 fb33 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d104      	bne.n	8006b7e <mainLoop+0x266>
			menuGiris=1;
 8006b74:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <mainLoop+0x310>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006b7a:	f001 f831 	bl	8007be0 <lcd_clear>
		}

		if(menuGiris==1) {
 8006b7e:	4b2a      	ldr	r3, [pc, #168]	; (8006c28 <mainLoop+0x310>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <mainLoop+0x272>
			menu();
 8006b86:	f7fa fb87 	bl	8001298 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b8e:	4813      	ldr	r0, [pc, #76]	; (8006bdc <mainLoop+0x2c4>)
 8006b90:	f002 fb4f 	bl	8009232 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b98:	4828      	ldr	r0, [pc, #160]	; (8006c3c <mainLoop+0x324>)
 8006b9a:	f002 fb1b 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <mainLoop+0x2a2>
 8006ba4:	4b26      	ldr	r3, [pc, #152]	; (8006c40 <mainLoop+0x328>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	f083 0301 	eor.w	r3, r3, #1
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <mainLoop+0x2a2>
			stopVar=1;
 8006bb2:	4b24      	ldr	r3, [pc, #144]	; (8006c44 <mainLoop+0x32c>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	e002      	b.n	8006bc0 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006bba:	4b22      	ldr	r3, [pc, #136]	; (8006c44 <mainLoop+0x32c>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006bc0:	f7fd ffe8 	bl	8004b94 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006bc4:	f7fe f81a 	bl	8004bfc <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006bc8:	f7fe f85e 	bl	8004c88 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006bcc:	f7fe f8ae 	bl	8004d2c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006bd0:	f7ff fc08 	bl	80063e4 <checkDemoModCalisma>
		checkLCDBacklight();
 8006bd4:	e6a3      	b.n	800691e <mainLoop+0x6>
 8006bd6:	bf00      	nop
 8006bd8:	40010800 	.word	0x40010800
 8006bdc:	40011000 	.word	0x40011000
 8006be0:	20000247 	.word	0x20000247
 8006be4:	200001f4 	.word	0x200001f4
 8006be8:	20000210 	.word	0x20000210
 8006bec:	20000244 	.word	0x20000244
 8006bf0:	200003a0 	.word	0x200003a0
 8006bf4:	2000011c 	.word	0x2000011c
 8006bf8:	20000239 	.word	0x20000239
 8006bfc:	0800da0c 	.word	0x0800da0c
 8006c00:	0800da20 	.word	0x0800da20
 8006c04:	20000245 	.word	0x20000245
 8006c08:	20000246 	.word	0x20000246
 8006c0c:	0800da34 	.word	0x0800da34
 8006c10:	0800da48 	.word	0x0800da48
 8006c14:	0800da5c 	.word	0x0800da5c
 8006c18:	0800da70 	.word	0x0800da70
 8006c1c:	0800da84 	.word	0x0800da84
 8006c20:	0800da98 	.word	0x0800da98
 8006c24:	0800daac 	.word	0x0800daac
 8006c28:	20000235 	.word	0x20000235
 8006c2c:	2000024c 	.word	0x2000024c
 8006c30:	20000236 	.word	0x20000236
 8006c34:	0800dac0 	.word	0x0800dac0
 8006c38:	0800dad4 	.word	0x0800dad4
 8006c3c:	40010c00 	.word	0x40010c00
 8006c40:	2000026d 	.word	0x2000026d
 8006c44:	2000026a 	.word	0x2000026a

08006c48 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006c4e:	2001      	movs	r0, #1
 8006c50:	f000 fff8 	bl	8007c44 <lcd_cursor>

    int cursorPosition = 3;
 8006c54:	2303      	movs	r3, #3
 8006c56:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006c5c:	2305      	movs	r3, #5
 8006c5e:	607b      	str	r3, [r7, #4]

    memset(machineID, 0, sizeof(machineID));
 8006c60:	220c      	movs	r2, #12
 8006c62:	2100      	movs	r1, #0
 8006c64:	489b      	ldr	r0, [pc, #620]	; (8006ed4 <takeMachineID+0x28c>)
 8006c66:	f005 fc08 	bl	800c47a <memset>
    HAL_Delay(100);
 8006c6a:	2064      	movs	r0, #100	; 0x64
 8006c6c:	f001 fce2 	bl	8008634 <HAL_Delay>

    printTemplate(1, 0);
 8006c70:	2100      	movs	r1, #0
 8006c72:	2001      	movs	r0, #1
 8006c74:	f7fa f8aa 	bl	8000dcc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006c78:	2108      	movs	r1, #8
 8006c7a:	4897      	ldr	r0, [pc, #604]	; (8006ed8 <takeMachineID+0x290>)
 8006c7c:	f002 faaa 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d139      	bne.n	8006cfa <takeMachineID+0xb2>
        	lcd_cursor(0);
 8006c86:	2000      	movs	r0, #0
 8006c88:	f000 ffdc 	bl	8007c44 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006c8c:	4891      	ldr	r0, [pc, #580]	; (8006ed4 <takeMachineID+0x28c>)
 8006c8e:	f7f9 fac9 	bl	8000224 <strlen>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b0c      	cmp	r3, #12
 8006c96:	d010      	beq.n	8006cba <takeMachineID+0x72>
        		lcd_clear();
 8006c98:	f000 ffa2 	bl	8007be0 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006c9c:	4a8f      	ldr	r2, [pc, #572]	; (8006edc <takeMachineID+0x294>)
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	f000 ff71 	bl	8007b88 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006ca6:	4a8e      	ldr	r2, [pc, #568]	; (8006ee0 <takeMachineID+0x298>)
 8006ca8:	2101      	movs	r1, #1
 8006caa:	2002      	movs	r0, #2
 8006cac:	f000 ff6c 	bl	8007b88 <lcd_print>
        		HAL_Delay(1200);
 8006cb0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006cb4:	f001 fcbe 	bl	8008634 <HAL_Delay>
        		goto mainSection;
 8006cb8:	e7c9      	b.n	8006c4e <takeMachineID+0x6>
        	}

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8006cba:	4b8a      	ldr	r3, [pc, #552]	; (8006ee4 <takeMachineID+0x29c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a8a      	ldr	r2, [pc, #552]	; (8006ee8 <takeMachineID+0x2a0>)
 8006cc0:	4413      	add	r3, r2
 8006cc2:	4a84      	ldr	r2, [pc, #528]	; (8006ed4 <takeMachineID+0x28c>)
 8006cc4:	6810      	ldr	r0, [r2, #0]
 8006cc6:	6851      	ldr	r1, [r2, #4]
 8006cc8:	6892      	ldr	r2, [r2, #8]
 8006cca:	6018      	str	r0, [r3, #0]
 8006ccc:	6059      	str	r1, [r3, #4]
 8006cce:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006cd0:	20c8      	movs	r0, #200	; 0xc8
 8006cd2:	f001 fcaf 	bl	8008634 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006cd6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006cda:	9302      	str	r3, [sp, #8]
 8006cdc:	236e      	movs	r3, #110	; 0x6e
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	4b81      	ldr	r3, [pc, #516]	; (8006ee8 <takeMachineID+0x2a0>)
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	236e      	movs	r3, #110	; 0x6e
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	21a0      	movs	r1, #160	; 0xa0
 8006cea:	4880      	ldr	r0, [pc, #512]	; (8006eec <takeMachineID+0x2a4>)
 8006cec:	f002 fd2c 	bl	8009748 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006cf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cf4:	f001 fc9e 	bl	8008634 <HAL_Delay>

            break;
 8006cf8:	e0e7      	b.n	8006eca <takeMachineID+0x282>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	4876      	ldr	r0, [pc, #472]	; (8006ed8 <takeMachineID+0x290>)
 8006cfe:	f002 fa69 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d111      	bne.n	8006d2c <takeMachineID+0xe4>
        	if(cursorPosition == 7) {
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b07      	cmp	r3, #7
 8006d0c:	d102      	bne.n	8006d14 <takeMachineID+0xcc>
        		cursorPosition = 10;
 8006d0e:	230a      	movs	r3, #10
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e008      	b.n	8006d26 <takeMachineID+0xde>
        	} else if (cursorPosition == 14) {
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b0e      	cmp	r3, #14
 8006d18:	d102      	bne.n	8006d20 <takeMachineID+0xd8>
                cursorPosition = 3;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e002      	b.n	8006d26 <takeMachineID+0xde>
            } else {
            	cursorPosition++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(150);
 8006d26:	2096      	movs	r0, #150	; 0x96
 8006d28:	f001 fc84 	bl	8008634 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006d2c:	2108      	movs	r1, #8
 8006d2e:	4870      	ldr	r0, [pc, #448]	; (8006ef0 <takeMachineID+0x2a8>)
 8006d30:	f002 fa50 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d111      	bne.n	8006d5e <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d102      	bne.n	8006d46 <takeMachineID+0xfe>
                cursorPosition = 14;
 8006d40:	230e      	movs	r3, #14
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e008      	b.n	8006d58 <takeMachineID+0x110>
            } else if(cursorPosition == 10) {
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b0a      	cmp	r3, #10
 8006d4a:	d102      	bne.n	8006d52 <takeMachineID+0x10a>
            	cursorPosition = 7;
 8006d4c:	2307      	movs	r3, #7
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e002      	b.n	8006d58 <takeMachineID+0x110>
            } else {
            	cursorPosition--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006d58:	2096      	movs	r0, #150	; 0x96
 8006d5a:	f001 fc6b 	bl	8008634 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006d5e:	2102      	movs	r1, #2
 8006d60:	485d      	ldr	r0, [pc, #372]	; (8006ed8 <takeMachineID+0x290>)
 8006d62:	f002 fa37 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d171      	bne.n	8006e50 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d105      	bne.n	8006d7e <takeMachineID+0x136>
        		machineID[machineIDLoc] = '0';
 8006d72:	4a58      	ldr	r2, [pc, #352]	; (8006ed4 <takeMachineID+0x28c>)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4413      	add	r3, r2
 8006d78:	2230      	movs	r2, #48	; 0x30
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	e04f      	b.n	8006e1e <takeMachineID+0x1d6>
        	} else if(cursorPosition == 4) {
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d105      	bne.n	8006d90 <takeMachineID+0x148>
        		machineID[machineIDLoc] = '1';
 8006d84:	4a53      	ldr	r2, [pc, #332]	; (8006ed4 <takeMachineID+0x28c>)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	4413      	add	r3, r2
 8006d8a:	2231      	movs	r2, #49	; 0x31
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	e046      	b.n	8006e1e <takeMachineID+0x1d6>
        	} else if(cursorPosition == 5) {
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	d105      	bne.n	8006da2 <takeMachineID+0x15a>
        		machineID[machineIDLoc] = '2';
 8006d96:	4a4f      	ldr	r2, [pc, #316]	; (8006ed4 <takeMachineID+0x28c>)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	2232      	movs	r2, #50	; 0x32
 8006d9e:	701a      	strb	r2, [r3, #0]
 8006da0:	e03d      	b.n	8006e1e <takeMachineID+0x1d6>
        	} else if(cursorPosition == 6) {
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d105      	bne.n	8006db4 <takeMachineID+0x16c>
        		machineID[machineIDLoc] = '3';
 8006da8:	4a4a      	ldr	r2, [pc, #296]	; (8006ed4 <takeMachineID+0x28c>)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4413      	add	r3, r2
 8006dae:	2233      	movs	r2, #51	; 0x33
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	e034      	b.n	8006e1e <takeMachineID+0x1d6>
        	} else if(cursorPosition == 7) {
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b07      	cmp	r3, #7
 8006db8:	d105      	bne.n	8006dc6 <takeMachineID+0x17e>
        		machineID[machineIDLoc] = '4';
 8006dba:	4a46      	ldr	r2, [pc, #280]	; (8006ed4 <takeMachineID+0x28c>)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	2234      	movs	r2, #52	; 0x34
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	e02b      	b.n	8006e1e <takeMachineID+0x1d6>
        	} else if(cursorPosition == 10) {
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b0a      	cmp	r3, #10
 8006dca:	d105      	bne.n	8006dd8 <takeMachineID+0x190>
        		machineID[machineIDLoc] = '5';
 8006dcc:	4a41      	ldr	r2, [pc, #260]	; (8006ed4 <takeMachineID+0x28c>)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	2235      	movs	r2, #53	; 0x35
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	e022      	b.n	8006e1e <takeMachineID+0x1d6>
        	} else if(cursorPosition == 11) {
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2b0b      	cmp	r3, #11
 8006ddc:	d105      	bne.n	8006dea <takeMachineID+0x1a2>
        		machineID[machineIDLoc] = '6';
 8006dde:	4a3d      	ldr	r2, [pc, #244]	; (8006ed4 <takeMachineID+0x28c>)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4413      	add	r3, r2
 8006de4:	2236      	movs	r2, #54	; 0x36
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	e019      	b.n	8006e1e <takeMachineID+0x1d6>
        	} else if(cursorPosition == 12) {
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b0c      	cmp	r3, #12
 8006dee:	d105      	bne.n	8006dfc <takeMachineID+0x1b4>
        		machineID[machineIDLoc] = '7';
 8006df0:	4a38      	ldr	r2, [pc, #224]	; (8006ed4 <takeMachineID+0x28c>)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	4413      	add	r3, r2
 8006df6:	2237      	movs	r2, #55	; 0x37
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	e010      	b.n	8006e1e <takeMachineID+0x1d6>
        	} else if(cursorPosition == 13) {
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b0d      	cmp	r3, #13
 8006e00:	d105      	bne.n	8006e0e <takeMachineID+0x1c6>
        		machineID[machineIDLoc] = '8';
 8006e02:	4a34      	ldr	r2, [pc, #208]	; (8006ed4 <takeMachineID+0x28c>)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	4413      	add	r3, r2
 8006e08:	2238      	movs	r2, #56	; 0x38
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e007      	b.n	8006e1e <takeMachineID+0x1d6>
        	} else if(cursorPosition == 14) {
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b0e      	cmp	r3, #14
 8006e12:	d104      	bne.n	8006e1e <takeMachineID+0x1d6>
        		machineID[machineIDLoc] = '9';
 8006e14:	4a2f      	ldr	r2, [pc, #188]	; (8006ed4 <takeMachineID+0x28c>)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	4413      	add	r3, r2
 8006e1a:	2239      	movs	r2, #57	; 0x39
 8006e1c:	701a      	strb	r2, [r3, #0]
        	}

        	if(machineIDLoc == machineIDCharacterLimit - 1) {
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b0b      	cmp	r3, #11
 8006e22:	d102      	bne.n	8006e2a <takeMachineID+0x1e2>
        		machineID[machineIDCharacterLimit] = '\0';
 8006e24:	4b2b      	ldr	r3, [pc, #172]	; (8006ed4 <takeMachineID+0x28c>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	b2d9      	uxtb	r1, r3
 8006e2e:	4a29      	ldr	r2, [pc, #164]	; (8006ed4 <takeMachineID+0x28c>)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4413      	add	r3, r2
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	2001      	movs	r0, #1
 8006e3a:	f000 feba 	bl	8007bb2 <lcd_print_char>

        	writeLoc++;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3301      	adds	r3, #1
 8006e42:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	3301      	adds	r3, #1
 8006e48:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8006e4a:	2096      	movs	r0, #150	; 0x96
 8006e4c:	f001 fbf2 	bl	8008634 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006e50:	2104      	movs	r1, #4
 8006e52:	4821      	ldr	r0, [pc, #132]	; (8006ed8 <takeMachineID+0x290>)
 8006e54:	f002 f9be 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d12e      	bne.n	8006ebc <takeMachineID+0x274>
            if(strlen(machineID) >= 1) {
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	; (8006ed4 <takeMachineID+0x28c>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d027      	beq.n	8006eb6 <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8006e66:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <takeMachineID+0x28c>)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	3304      	adds	r3, #4
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	4619      	mov	r1, r3
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	f000 feba 	bl	8007bf4 <lcd_delete_char>
                HAL_Delay(50);
 8006e80:	2032      	movs	r0, #50	; 0x32
 8006e82:	f001 fbd7 	bl	8008634 <HAL_Delay>

                if(writeLoc > 5) {
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b05      	cmp	r3, #5
 8006e8a:	dd03      	ble.n	8006e94 <takeMachineID+0x24c>
                	writeLoc--;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	607b      	str	r3, [r7, #4]
 8006e92:	e004      	b.n	8006e9e <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	dc01      	bgt.n	8006e9e <takeMachineID+0x256>
                	writeLoc = 5;
 8006e9a:	2305      	movs	r3, #5
 8006e9c:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dd03      	ble.n	8006eac <takeMachineID+0x264>
                	machineIDLoc--;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	60bb      	str	r3, [r7, #8]
 8006eaa:	e004      	b.n	8006eb6 <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	da01      	bge.n	8006eb6 <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(150);
 8006eb6:	2096      	movs	r0, #150	; 0x96
 8006eb8:	f001 fbbc 	bl	8008634 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	2002      	movs	r0, #2
 8006ec4:	f000 fe41 	bl	8007b4a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006ec8:	e6d6      	b.n	8006c78 <takeMachineID+0x30>
    }
}
 8006eca:	bf00      	nop
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000194 	.word	0x20000194
 8006ed8:	40010800 	.word	0x40010800
 8006edc:	0800dae8 	.word	0x0800dae8
 8006ee0:	0800dafc 	.word	0x0800dafc
 8006ee4:	20000004 	.word	0x20000004
 8006ee8:	2000011c 	.word	0x2000011c
 8006eec:	200003a0 	.word	0x200003a0
 8006ef0:	40011000 	.word	0x40011000

08006ef4 <takeWifiSSID>:

void takeWifiSSID() {
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b08b      	sub	sp, #44	; 0x2c
 8006ef8:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006efa:	2001      	movs	r0, #1
 8006efc:	f000 fea2 	bl	8007c44 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006f00:	2214      	movs	r2, #20
 8006f02:	2100      	movs	r1, #0
 8006f04:	4880      	ldr	r0, [pc, #512]	; (8007108 <takeWifiSSID+0x214>)
 8006f06:	f005 fab8 	bl	800c47a <memset>
    HAL_Delay(100);
 8006f0a:	2064      	movs	r0, #100	; 0x64
 8006f0c:	f001 fb92 	bl	8008634 <HAL_Delay>

    int realCharPos = 1;
 8006f10:	2301      	movs	r3, #1
 8006f12:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8006f14:	2301      	movs	r3, #1
 8006f16:	613b      	str	r3, [r7, #16]
    int page = 1;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
    int wifiNameLoc = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006f20:	2307      	movs	r3, #7
 8006f22:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006f24:	2101      	movs	r1, #1
 8006f26:	2002      	movs	r0, #2
 8006f28:	f7f9 ff50 	bl	8000dcc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006f2c:	2108      	movs	r1, #8
 8006f2e:	4877      	ldr	r0, [pc, #476]	; (800710c <takeWifiSSID+0x218>)
 8006f30:	f002 f950 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d140      	bne.n	8006fbc <takeWifiSSID+0xc8>
            lcd_cursor(0);
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f000 fe82 	bl	8007c44 <lcd_cursor>

            wifiSSIDInt[wifiNameLoc + 1] = '\0';
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	3301      	adds	r3, #1
 8006f44:	4a72      	ldr	r2, [pc, #456]	; (8007110 <takeWifiSSID+0x21c>)
 8006f46:	2100      	movs	r1, #0
 8006f48:	54d1      	strb	r1, [r2, r3]

            memcpy(&eepromData[ssidStartPos], wifiSSIDInt, strlen(wifiSSIDInt));
 8006f4a:	4b72      	ldr	r3, [pc, #456]	; (8007114 <takeWifiSSID+0x220>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a72      	ldr	r2, [pc, #456]	; (8007118 <takeWifiSSID+0x224>)
 8006f50:	189c      	adds	r4, r3, r2
 8006f52:	486f      	ldr	r0, [pc, #444]	; (8007110 <takeWifiSSID+0x21c>)
 8006f54:	f7f9 f966 	bl	8000224 <strlen>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	496c      	ldr	r1, [pc, #432]	; (8007110 <takeWifiSSID+0x21c>)
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f005 fad0 	bl	800c504 <memcpy>
            HAL_Delay(200);
 8006f64:	20c8      	movs	r0, #200	; 0xc8
 8006f66:	f001 fb65 	bl	8008634 <HAL_Delay>

            if(strlen(wifiSSID) > 20) {
 8006f6a:	4867      	ldr	r0, [pc, #412]	; (8007108 <takeWifiSSID+0x214>)
 8006f6c:	f7f9 f95a 	bl	8000224 <strlen>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b14      	cmp	r3, #20
 8006f74:	d910      	bls.n	8006f98 <takeWifiSSID+0xa4>
                lcd_clear();
 8006f76:	f000 fe33 	bl	8007be0 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006f7a:	4a68      	ldr	r2, [pc, #416]	; (800711c <takeWifiSSID+0x228>)
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	2001      	movs	r0, #1
 8006f80:	f000 fe02 	bl	8007b88 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006f84:	4a66      	ldr	r2, [pc, #408]	; (8007120 <takeWifiSSID+0x22c>)
 8006f86:	2101      	movs	r1, #1
 8006f88:	2002      	movs	r0, #2
 8006f8a:	f000 fdfd 	bl	8007b88 <lcd_print>
                HAL_Delay(1200);
 8006f8e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006f92:	f001 fb4f 	bl	8008634 <HAL_Delay>
                goto mainSSIDSection;
 8006f96:	e7b0      	b.n	8006efa <takeWifiSSID+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006f98:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f9c:	9302      	str	r3, [sp, #8]
 8006f9e:	236e      	movs	r3, #110	; 0x6e
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	4b5d      	ldr	r3, [pc, #372]	; (8007118 <takeWifiSSID+0x224>)
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	236e      	movs	r3, #110	; 0x6e
 8006fa8:	2200      	movs	r2, #0
 8006faa:	21a0      	movs	r1, #160	; 0xa0
 8006fac:	485d      	ldr	r0, [pc, #372]	; (8007124 <takeWifiSSID+0x230>)
 8006fae:	f002 fbcb 	bl	8009748 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8006fb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006fb6:	f001 fb3d 	bl	8008634 <HAL_Delay>

            break;
 8006fba:	e12e      	b.n	800721a <takeWifiSSID+0x326>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	4853      	ldr	r0, [pc, #332]	; (800710c <takeWifiSSID+0x218>)
 8006fc0:	f002 f908 	bl	80091d4 <HAL_GPIO_ReadPin>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d150      	bne.n	800706c <takeWifiSSID+0x178>
        	realCharPos++;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2b50      	cmp	r3, #80	; 0x50
 8006fd4:	dd01      	ble.n	8006fda <takeWifiSSID+0xe6>
        		realCharPos = 1;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b10      	cmp	r3, #16
 8006fde:	d13f      	bne.n	8007060 <takeWifiSSID+0x16c>
            	if(page == 1) {
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d109      	bne.n	8006ffa <takeWifiSSID+0x106>
            		cursorPosition = 1;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	613b      	str	r3, [r7, #16]
            		page++;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8006ff0:	2102      	movs	r1, #2
 8006ff2:	2002      	movs	r0, #2
 8006ff4:	f7f9 feea 	bl	8000dcc <printTemplate>
 8006ff8:	e035      	b.n	8007066 <takeWifiSSID+0x172>
            	} else if(page == 2) {
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d109      	bne.n	8007014 <takeWifiSSID+0x120>
            		cursorPosition = 1;
 8007000:	2301      	movs	r3, #1
 8007002:	613b      	str	r3, [r7, #16]
            		page++;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3301      	adds	r3, #1
 8007008:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 800700a:	2103      	movs	r1, #3
 800700c:	2002      	movs	r0, #2
 800700e:	f7f9 fedd 	bl	8000dcc <printTemplate>
 8007012:	e028      	b.n	8007066 <takeWifiSSID+0x172>
            	} else if(page == 3) {
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b03      	cmp	r3, #3
 8007018:	d109      	bne.n	800702e <takeWifiSSID+0x13a>
            		cursorPosition = 1;
 800701a:	2301      	movs	r3, #1
 800701c:	613b      	str	r3, [r7, #16]
            		page++;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8007024:	2104      	movs	r1, #4
 8007026:	2002      	movs	r0, #2
 8007028:	f7f9 fed0 	bl	8000dcc <printTemplate>
 800702c:	e01b      	b.n	8007066 <takeWifiSSID+0x172>
            	} else if(page == 4) {
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b04      	cmp	r3, #4
 8007032:	d109      	bne.n	8007048 <takeWifiSSID+0x154>
            		cursorPosition = 1;
 8007034:	2301      	movs	r3, #1
 8007036:	613b      	str	r3, [r7, #16]
            		page++;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3301      	adds	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 800703e:	2105      	movs	r1, #5
 8007040:	2002      	movs	r0, #2
 8007042:	f7f9 fec3 	bl	8000dcc <printTemplate>
 8007046:	e00e      	b.n	8007066 <takeWifiSSID+0x172>
            	} else if(page == 5) {
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b05      	cmp	r3, #5
 800704c:	d10b      	bne.n	8007066 <takeWifiSSID+0x172>
            		cursorPosition = 1;
 800704e:	2301      	movs	r3, #1
 8007050:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007052:	2301      	movs	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8007056:	2101      	movs	r1, #1
 8007058:	2002      	movs	r0, #2
 800705a:	f7f9 feb7 	bl	8000dcc <printTemplate>
 800705e:	e002      	b.n	8007066 <takeWifiSSID+0x172>
            	}
            } else {
            	cursorPosition++;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	3301      	adds	r3, #1
 8007064:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007066:	2096      	movs	r0, #150	; 0x96
 8007068:	f001 fae4 	bl	8008634 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800706c:	2108      	movs	r1, #8
 800706e:	482e      	ldr	r0, [pc, #184]	; (8007128 <takeWifiSSID+0x234>)
 8007070:	f002 f8b0 	bl	80091d4 <HAL_GPIO_ReadPin>
 8007074:	4603      	mov	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d15e      	bne.n	8007138 <takeWifiSSID+0x244>
        	realCharPos--;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	3b01      	subs	r3, #1
 800707e:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	dc01      	bgt.n	800708a <takeWifiSSID+0x196>
        		realCharPos = 80;
 8007086:	2350      	movs	r3, #80	; 0x50
 8007088:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d14d      	bne.n	800712c <takeWifiSSID+0x238>
            	if(page == 1) {
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d108      	bne.n	80070a8 <takeWifiSSID+0x1b4>
            		cursorPosition = 16;
 8007096:	2310      	movs	r3, #16
 8007098:	613b      	str	r3, [r7, #16]
            		page = 5;
 800709a:	2305      	movs	r3, #5
 800709c:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 800709e:	2105      	movs	r1, #5
 80070a0:	2002      	movs	r0, #2
 80070a2:	f7f9 fe93 	bl	8000dcc <printTemplate>
 80070a6:	e044      	b.n	8007132 <takeWifiSSID+0x23e>
            	} else if(page == 2) {
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d108      	bne.n	80070c0 <takeWifiSSID+0x1cc>
            		cursorPosition = 16;
 80070ae:	2310      	movs	r3, #16
 80070b0:	613b      	str	r3, [r7, #16]
            		page = 1;
 80070b2:	2301      	movs	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 80070b6:	2101      	movs	r1, #1
 80070b8:	2002      	movs	r0, #2
 80070ba:	f7f9 fe87 	bl	8000dcc <printTemplate>
 80070be:	e038      	b.n	8007132 <takeWifiSSID+0x23e>
            	} else if(page == 3) {
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d108      	bne.n	80070d8 <takeWifiSSID+0x1e4>
            		cursorPosition = 16;
 80070c6:	2310      	movs	r3, #16
 80070c8:	613b      	str	r3, [r7, #16]
            		page = 2;
 80070ca:	2302      	movs	r3, #2
 80070cc:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 80070ce:	2102      	movs	r1, #2
 80070d0:	2002      	movs	r0, #2
 80070d2:	f7f9 fe7b 	bl	8000dcc <printTemplate>
 80070d6:	e02c      	b.n	8007132 <takeWifiSSID+0x23e>
            	} else if(page == 4) {
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d108      	bne.n	80070f0 <takeWifiSSID+0x1fc>
            		cursorPosition = 16;
 80070de:	2310      	movs	r3, #16
 80070e0:	613b      	str	r3, [r7, #16]
            		page = 3;
 80070e2:	2303      	movs	r3, #3
 80070e4:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 80070e6:	2103      	movs	r1, #3
 80070e8:	2002      	movs	r0, #2
 80070ea:	f7f9 fe6f 	bl	8000dcc <printTemplate>
 80070ee:	e020      	b.n	8007132 <takeWifiSSID+0x23e>
            	} else if(page == 5) {
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	d11d      	bne.n	8007132 <takeWifiSSID+0x23e>
            		cursorPosition = 16;
 80070f6:	2310      	movs	r3, #16
 80070f8:	613b      	str	r3, [r7, #16]
            		page = 4;
 80070fa:	2304      	movs	r3, #4
 80070fc:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 80070fe:	2104      	movs	r1, #4
 8007100:	2002      	movs	r0, #2
 8007102:	f7f9 fe63 	bl	8000dcc <printTemplate>
 8007106:	e014      	b.n	8007132 <takeWifiSSID+0x23e>
 8007108:	200001a0 	.word	0x200001a0
 800710c:	40010800 	.word	0x40010800
 8007110:	200001c8 	.word	0x200001c8
 8007114:	20000008 	.word	0x20000008
 8007118:	2000011c 	.word	0x2000011c
 800711c:	0800db10 	.word	0x0800db10
 8007120:	0800db24 	.word	0x0800db24
 8007124:	200003a0 	.word	0x200003a0
 8007128:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	3b01      	subs	r3, #1
 8007130:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007132:	2096      	movs	r0, #150	; 0x96
 8007134:	f001 fa7e 	bl	8008634 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007138:	2102      	movs	r1, #2
 800713a:	483a      	ldr	r0, [pc, #232]	; (8007224 <takeWifiSSID+0x330>)
 800713c:	f002 f84a 	bl	80091d4 <HAL_GPIO_ReadPin>
 8007140:	4603      	mov	r3, r0
 8007142:	2b01      	cmp	r3, #1
 8007144:	d127      	bne.n	8007196 <takeWifiSSID+0x2a2>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	3b01      	subs	r3, #1
 800714a:	4618      	mov	r0, r3
 800714c:	f7f9 faf6 	bl	800073c <getCharFromCursorPosition>
 8007150:	4603      	mov	r3, r0
 8007152:	4619      	mov	r1, r3
 8007154:	4a34      	ldr	r2, [pc, #208]	; (8007228 <takeWifiSSID+0x334>)
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4413      	add	r3, r2
 800715a:	460a      	mov	r2, r1
 800715c:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[wifiNameLoc] = realCharPos - 1;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b2d9      	uxtb	r1, r3
 8007166:	4a31      	ldr	r2, [pc, #196]	; (800722c <takeWifiSSID+0x338>)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4413      	add	r3, r2
 800716c:	460a      	mov	r2, r1
 800716e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	b2d9      	uxtb	r1, r3
 8007174:	4a2c      	ldr	r2, [pc, #176]	; (8007228 <takeWifiSSID+0x334>)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	4413      	add	r3, r2
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	461a      	mov	r2, r3
 800717e:	2001      	movs	r0, #1
 8007180:	f000 fd17 	bl	8007bb2 <lcd_print_char>

            writeLoc++;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3301      	adds	r3, #1
 8007188:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	3301      	adds	r3, #1
 800718e:	60bb      	str	r3, [r7, #8]

            HAL_Delay(150);
 8007190:	2096      	movs	r0, #150	; 0x96
 8007192:	f001 fa4f 	bl	8008634 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007196:	2104      	movs	r1, #4
 8007198:	4822      	ldr	r0, [pc, #136]	; (8007224 <takeWifiSSID+0x330>)
 800719a:	f002 f81b 	bl	80091d4 <HAL_GPIO_ReadPin>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d133      	bne.n	800720c <takeWifiSSID+0x318>
        	if(strlen(wifiSSID) >= 1) {
 80071a4:	4b20      	ldr	r3, [pc, #128]	; (8007228 <takeWifiSSID+0x334>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d02c      	beq.n	8007206 <takeWifiSSID+0x312>
        		wifiSSID[wifiNameLoc] = '\0';
 80071ac:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <takeWifiSSID+0x334>)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	4413      	add	r3, r2
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[wifiNameLoc] = '\0';
 80071b6:	4a1d      	ldr	r2, [pc, #116]	; (800722c <takeWifiSSID+0x338>)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4413      	add	r3, r2
 80071bc:	2200      	movs	r2, #0
 80071be:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	3306      	adds	r3, #6
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	4619      	mov	r1, r3
 80071ca:	2001      	movs	r0, #1
 80071cc:	f000 fd12 	bl	8007bf4 <lcd_delete_char>
        		HAL_Delay(50);
 80071d0:	2032      	movs	r0, #50	; 0x32
 80071d2:	f001 fa2f 	bl	8008634 <HAL_Delay>
        		if(writeLoc > 7) {
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b07      	cmp	r3, #7
 80071da:	dd03      	ble.n	80071e4 <takeWifiSSID+0x2f0>
        			writeLoc--;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3b01      	subs	r3, #1
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	e004      	b.n	80071ee <takeWifiSSID+0x2fa>
        		} else if(writeLoc < 7) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b06      	cmp	r3, #6
 80071e8:	dc01      	bgt.n	80071ee <takeWifiSSID+0x2fa>
        			writeLoc = 7;
 80071ea:	2307      	movs	r3, #7
 80071ec:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	dd03      	ble.n	80071fc <takeWifiSSID+0x308>
        			wifiNameLoc--;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	e004      	b.n	8007206 <takeWifiSSID+0x312>
        		} else if(wifiNameLoc < 0) {
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	da01      	bge.n	8007206 <takeWifiSSID+0x312>
        			wifiNameLoc = 0;
 8007202:	2300      	movs	r3, #0
 8007204:	60bb      	str	r3, [r7, #8]
        		}
        	}

        	HAL_Delay(150);
 8007206:	2096      	movs	r0, #150	; 0x96
 8007208:	f001 fa14 	bl	8008634 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	4619      	mov	r1, r3
 8007212:	2002      	movs	r0, #2
 8007214:	f000 fc99 	bl	8007b4a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007218:	e688      	b.n	8006f2c <takeWifiSSID+0x38>
    }
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	bd90      	pop	{r4, r7, pc}
 8007222:	bf00      	nop
 8007224:	40010800 	.word	0x40010800
 8007228:	200001a0 	.word	0x200001a0
 800722c:	200001c8 	.word	0x200001c8

08007230 <takeWifiPass>:

void takeWifiPass() {
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	; 0x28
 8007234:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 8007236:	2001      	movs	r0, #1
 8007238:	f000 fd04 	bl	8007c44 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 800723c:	2214      	movs	r2, #20
 800723e:	2100      	movs	r1, #0
 8007240:	48aa      	ldr	r0, [pc, #680]	; (80074ec <takeWifiPass+0x2bc>)
 8007242:	f005 f91a 	bl	800c47a <memset>
    HAL_Delay(100);
 8007246:	2064      	movs	r0, #100	; 0x64
 8007248:	f001 f9f4 	bl	8008634 <HAL_Delay>

    int realCharPos = 1;
 800724c:	2301      	movs	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8007250:	2301      	movs	r3, #1
 8007252:	613b      	str	r3, [r7, #16]
    int page = 1;
 8007254:	2301      	movs	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
    int wifiPassLoc = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 800725c:	2307      	movs	r3, #7
 800725e:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007260:	2101      	movs	r1, #1
 8007262:	2003      	movs	r0, #3
 8007264:	f7f9 fdb2 	bl	8000dcc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007268:	2108      	movs	r1, #8
 800726a:	48a1      	ldr	r0, [pc, #644]	; (80074f0 <takeWifiPass+0x2c0>)
 800726c:	f001 ffb2 	bl	80091d4 <HAL_GPIO_ReadPin>
 8007270:	4603      	mov	r3, r0
 8007272:	2b01      	cmp	r3, #1
 8007274:	d12b      	bne.n	80072ce <takeWifiPass+0x9e>
            lcd_cursor(0);
 8007276:	2000      	movs	r0, #0
 8007278:	f000 fce4 	bl	8007c44 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 800727c:	489b      	ldr	r0, [pc, #620]	; (80074ec <takeWifiPass+0x2bc>)
 800727e:	f7f8 ffd1 	bl	8000224 <strlen>
 8007282:	4603      	mov	r3, r0
 8007284:	2b14      	cmp	r3, #20
 8007286:	d910      	bls.n	80072aa <takeWifiPass+0x7a>
                lcd_clear();
 8007288:	f000 fcaa 	bl	8007be0 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 800728c:	4a99      	ldr	r2, [pc, #612]	; (80074f4 <takeWifiPass+0x2c4>)
 800728e:	2101      	movs	r1, #1
 8007290:	2001      	movs	r0, #1
 8007292:	f000 fc79 	bl	8007b88 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8007296:	4a98      	ldr	r2, [pc, #608]	; (80074f8 <takeWifiPass+0x2c8>)
 8007298:	2101      	movs	r1, #1
 800729a:	2002      	movs	r0, #2
 800729c:	f000 fc74 	bl	8007b88 <lcd_print>
                HAL_Delay(1200);
 80072a0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80072a4:	f001 f9c6 	bl	8008634 <HAL_Delay>
                goto mainPASSSection;
 80072a8:	e7c5      	b.n	8007236 <takeWifiPass+0x6>
            }

            //memcpy(&eepromData[passStartPos], wifiPassInt, strlen(wifiPassInt));
            //HAL_Delay(200);

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80072aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80072ae:	9302      	str	r3, [sp, #8]
 80072b0:	236e      	movs	r3, #110	; 0x6e
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	4b91      	ldr	r3, [pc, #580]	; (80074fc <takeWifiPass+0x2cc>)
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	236e      	movs	r3, #110	; 0x6e
 80072ba:	2200      	movs	r2, #0
 80072bc:	21a0      	movs	r1, #160	; 0xa0
 80072be:	4890      	ldr	r0, [pc, #576]	; (8007500 <takeWifiPass+0x2d0>)
 80072c0:	f002 fa42 	bl	8009748 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 80072c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072c8:	f001 f9b4 	bl	8008634 <HAL_Delay>

            break;
 80072cc:	e12d      	b.n	800752a <takeWifiPass+0x2fa>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80072ce:	2101      	movs	r1, #1
 80072d0:	4887      	ldr	r0, [pc, #540]	; (80074f0 <takeWifiPass+0x2c0>)
 80072d2:	f001 ff7f 	bl	80091d4 <HAL_GPIO_ReadPin>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d150      	bne.n	800737e <takeWifiPass+0x14e>
        	realCharPos++;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	3301      	adds	r3, #1
 80072e0:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b50      	cmp	r3, #80	; 0x50
 80072e6:	dd01      	ble.n	80072ec <takeWifiPass+0xbc>
        	    realCharPos = 1;
 80072e8:	2301      	movs	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2b10      	cmp	r3, #16
 80072f0:	d13f      	bne.n	8007372 <takeWifiPass+0x142>
            	if(page == 1) {
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d109      	bne.n	800730c <takeWifiPass+0xdc>
            		cursorPosition = 1;
 80072f8:	2301      	movs	r3, #1
 80072fa:	613b      	str	r3, [r7, #16]
            		page++;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3301      	adds	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 8007302:	2102      	movs	r1, #2
 8007304:	2003      	movs	r0, #3
 8007306:	f7f9 fd61 	bl	8000dcc <printTemplate>
 800730a:	e035      	b.n	8007378 <takeWifiPass+0x148>
            	} else if(page == 2) {
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d109      	bne.n	8007326 <takeWifiPass+0xf6>
            		cursorPosition = 1;
 8007312:	2301      	movs	r3, #1
 8007314:	613b      	str	r3, [r7, #16]
            		page++;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 800731c:	2103      	movs	r1, #3
 800731e:	2003      	movs	r0, #3
 8007320:	f7f9 fd54 	bl	8000dcc <printTemplate>
 8007324:	e028      	b.n	8007378 <takeWifiPass+0x148>
            	} else if(page == 3) {
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b03      	cmp	r3, #3
 800732a:	d109      	bne.n	8007340 <takeWifiPass+0x110>
            		cursorPosition = 1;
 800732c:	2301      	movs	r3, #1
 800732e:	613b      	str	r3, [r7, #16]
            		page++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 8007336:	2104      	movs	r1, #4
 8007338:	2003      	movs	r0, #3
 800733a:	f7f9 fd47 	bl	8000dcc <printTemplate>
 800733e:	e01b      	b.n	8007378 <takeWifiPass+0x148>
            	} else if(page == 4) {
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b04      	cmp	r3, #4
 8007344:	d109      	bne.n	800735a <takeWifiPass+0x12a>
            		cursorPosition = 1;
 8007346:	2301      	movs	r3, #1
 8007348:	613b      	str	r3, [r7, #16]
            		page++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3301      	adds	r3, #1
 800734e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 8007350:	2105      	movs	r1, #5
 8007352:	2003      	movs	r0, #3
 8007354:	f7f9 fd3a 	bl	8000dcc <printTemplate>
 8007358:	e00e      	b.n	8007378 <takeWifiPass+0x148>
            	} else if(page == 5) {
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b05      	cmp	r3, #5
 800735e:	d10b      	bne.n	8007378 <takeWifiPass+0x148>
            		cursorPosition = 1;
 8007360:	2301      	movs	r3, #1
 8007362:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007364:	2301      	movs	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 8007368:	2101      	movs	r1, #1
 800736a:	2003      	movs	r0, #3
 800736c:	f7f9 fd2e 	bl	8000dcc <printTemplate>
 8007370:	e002      	b.n	8007378 <takeWifiPass+0x148>
            	}
            } else {
            	cursorPosition++;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	3301      	adds	r3, #1
 8007376:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007378:	2096      	movs	r0, #150	; 0x96
 800737a:	f001 f95b 	bl	8008634 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800737e:	2108      	movs	r1, #8
 8007380:	4860      	ldr	r0, [pc, #384]	; (8007504 <takeWifiPass+0x2d4>)
 8007382:	f001 ff27 	bl	80091d4 <HAL_GPIO_ReadPin>
 8007386:	4603      	mov	r3, r0
 8007388:	2b01      	cmp	r3, #1
 800738a:	d14c      	bne.n	8007426 <takeWifiPass+0x1f6>
        	realCharPos--;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	3b01      	subs	r3, #1
 8007390:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	dc01      	bgt.n	800739c <takeWifiPass+0x16c>
        	    realCharPos = 80;
 8007398:	2350      	movs	r3, #80	; 0x50
 800739a:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d13b      	bne.n	800741a <takeWifiPass+0x1ea>
            	if(page == 1) {
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d108      	bne.n	80073ba <takeWifiPass+0x18a>
            		cursorPosition = 16;
 80073a8:	2310      	movs	r3, #16
 80073aa:	613b      	str	r3, [r7, #16]
            		page = 5;
 80073ac:	2305      	movs	r3, #5
 80073ae:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 80073b0:	2105      	movs	r1, #5
 80073b2:	2003      	movs	r0, #3
 80073b4:	f7f9 fd0a 	bl	8000dcc <printTemplate>
 80073b8:	e032      	b.n	8007420 <takeWifiPass+0x1f0>
            	} else if(page == 2) {
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d108      	bne.n	80073d2 <takeWifiPass+0x1a2>
            		cursorPosition = 16;
 80073c0:	2310      	movs	r3, #16
 80073c2:	613b      	str	r3, [r7, #16]
            		page = 1;
 80073c4:	2301      	movs	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 80073c8:	2101      	movs	r1, #1
 80073ca:	2003      	movs	r0, #3
 80073cc:	f7f9 fcfe 	bl	8000dcc <printTemplate>
 80073d0:	e026      	b.n	8007420 <takeWifiPass+0x1f0>
            	} else if(page == 3) {
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d108      	bne.n	80073ea <takeWifiPass+0x1ba>
            		cursorPosition = 16;
 80073d8:	2310      	movs	r3, #16
 80073da:	613b      	str	r3, [r7, #16]
            		page = 2;
 80073dc:	2302      	movs	r3, #2
 80073de:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 80073e0:	2102      	movs	r1, #2
 80073e2:	2003      	movs	r0, #3
 80073e4:	f7f9 fcf2 	bl	8000dcc <printTemplate>
 80073e8:	e01a      	b.n	8007420 <takeWifiPass+0x1f0>
            	} else if(page == 4) {
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d108      	bne.n	8007402 <takeWifiPass+0x1d2>
            		cursorPosition = 16;
 80073f0:	2310      	movs	r3, #16
 80073f2:	613b      	str	r3, [r7, #16]
            		page = 3;
 80073f4:	2303      	movs	r3, #3
 80073f6:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 80073f8:	2103      	movs	r1, #3
 80073fa:	2003      	movs	r0, #3
 80073fc:	f7f9 fce6 	bl	8000dcc <printTemplate>
 8007400:	e00e      	b.n	8007420 <takeWifiPass+0x1f0>
            	} else if(page == 5) {
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2b05      	cmp	r3, #5
 8007406:	d10b      	bne.n	8007420 <takeWifiPass+0x1f0>
            		cursorPosition = 16;
 8007408:	2310      	movs	r3, #16
 800740a:	613b      	str	r3, [r7, #16]
            		page = 4;
 800740c:	2304      	movs	r3, #4
 800740e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 8007410:	2104      	movs	r1, #4
 8007412:	2003      	movs	r0, #3
 8007414:	f7f9 fcda 	bl	8000dcc <printTemplate>
 8007418:	e002      	b.n	8007420 <takeWifiPass+0x1f0>
            	}
            } else {
            	cursorPosition--;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	3b01      	subs	r3, #1
 800741e:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007420:	2096      	movs	r0, #150	; 0x96
 8007422:	f001 f907 	bl	8008634 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007426:	2102      	movs	r1, #2
 8007428:	4831      	ldr	r0, [pc, #196]	; (80074f0 <takeWifiPass+0x2c0>)
 800742a:	f001 fed3 	bl	80091d4 <HAL_GPIO_ReadPin>
 800742e:	4603      	mov	r3, r0
 8007430:	2b01      	cmp	r3, #1
 8007432:	d127      	bne.n	8007484 <takeWifiPass+0x254>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	3b01      	subs	r3, #1
 8007438:	4618      	mov	r0, r3
 800743a:	f7f9 f97f 	bl	800073c <getCharFromCursorPosition>
 800743e:	4603      	mov	r3, r0
 8007440:	4619      	mov	r1, r3
 8007442:	4a2a      	ldr	r2, [pc, #168]	; (80074ec <takeWifiPass+0x2bc>)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4413      	add	r3, r2
 8007448:	460a      	mov	r2, r1
 800744a:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[wifiPassLoc] = realCharPos - 1;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b2d9      	uxtb	r1, r3
 8007454:	4a2c      	ldr	r2, [pc, #176]	; (8007508 <takeWifiPass+0x2d8>)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	4413      	add	r3, r2
 800745a:	460a      	mov	r2, r1
 800745c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	b2d9      	uxtb	r1, r3
 8007462:	4a22      	ldr	r2, [pc, #136]	; (80074ec <takeWifiPass+0x2bc>)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4413      	add	r3, r2
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	2001      	movs	r0, #1
 800746e:	f000 fba0 	bl	8007bb2 <lcd_print_char>

            writeLoc++;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3301      	adds	r3, #1
 8007476:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	3301      	adds	r3, #1
 800747c:	60bb      	str	r3, [r7, #8]

            HAL_Delay(150);
 800747e:	2096      	movs	r0, #150	; 0x96
 8007480:	f001 f8d8 	bl	8008634 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007484:	2104      	movs	r1, #4
 8007486:	481a      	ldr	r0, [pc, #104]	; (80074f0 <takeWifiPass+0x2c0>)
 8007488:	f001 fea4 	bl	80091d4 <HAL_GPIO_ReadPin>
 800748c:	4603      	mov	r3, r0
 800748e:	2b01      	cmp	r3, #1
 8007490:	d144      	bne.n	800751c <takeWifiPass+0x2ec>
            if(strlen(wifiPass) >= 1) {
 8007492:	4b16      	ldr	r3, [pc, #88]	; (80074ec <takeWifiPass+0x2bc>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d03d      	beq.n	8007516 <takeWifiPass+0x2e6>
            	wifiPass[wifiPassLoc] = '\0';
 800749a:	4a14      	ldr	r2, [pc, #80]	; (80074ec <takeWifiPass+0x2bc>)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4413      	add	r3, r2
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
            	wifiPassInt[wifiPassLoc] = '\0';
 80074a4:	4a18      	ldr	r2, [pc, #96]	; (8007508 <takeWifiPass+0x2d8>)
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	4413      	add	r3, r2
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	3306      	adds	r3, #6
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	4619      	mov	r1, r3
 80074b8:	2001      	movs	r0, #1
 80074ba:	f000 fb9b 	bl	8007bf4 <lcd_delete_char>
            	HAL_Delay(50);
 80074be:	2032      	movs	r0, #50	; 0x32
 80074c0:	f001 f8b8 	bl	8008634 <HAL_Delay>

            	if(writeLoc > 7) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b07      	cmp	r3, #7
 80074c8:	dd03      	ble.n	80074d2 <takeWifiPass+0x2a2>
            		writeLoc--;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	607b      	str	r3, [r7, #4]
 80074d0:	e004      	b.n	80074dc <takeWifiPass+0x2ac>
            	} else if(writeLoc < 7) {
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b06      	cmp	r3, #6
 80074d6:	dc01      	bgt.n	80074dc <takeWifiPass+0x2ac>
            		writeLoc = 7;
 80074d8:	2307      	movs	r3, #7
 80074da:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	dd14      	ble.n	800750c <takeWifiPass+0x2dc>
            		wifiPassLoc--;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	60bb      	str	r3, [r7, #8]
 80074e8:	e015      	b.n	8007516 <takeWifiPass+0x2e6>
 80074ea:	bf00      	nop
 80074ec:	200001b4 	.word	0x200001b4
 80074f0:	40010800 	.word	0x40010800
 80074f4:	0800db10 	.word	0x0800db10
 80074f8:	0800db38 	.word	0x0800db38
 80074fc:	2000011c 	.word	0x2000011c
 8007500:	200003a0 	.word	0x200003a0
 8007504:	40011000 	.word	0x40011000
 8007508:	200001dc 	.word	0x200001dc
            	} else if(wifiPassLoc < 0) {
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	da01      	bge.n	8007516 <takeWifiPass+0x2e6>
            		wifiPassLoc = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	60bb      	str	r3, [r7, #8]
            	}
            }

            HAL_Delay(150);
 8007516:	2096      	movs	r0, #150	; 0x96
 8007518:	f001 f88c 	bl	8008634 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	4619      	mov	r1, r3
 8007522:	2002      	movs	r0, #2
 8007524:	f000 fb11 	bl	8007b4a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007528:	e69e      	b.n	8007268 <takeWifiPass+0x38>
    }
}
 800752a:	bf00      	nop
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop

08007534 <mergeData>:

char* mergeData() {
 8007534:	b580      	push	{r7, lr}
 8007536:	b09c      	sub	sp, #112	; 0x70
 8007538:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800753a:	2300      	movs	r3, #0
 800753c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800753e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007542:	2228      	movs	r2, #40	; 0x28
 8007544:	2100      	movs	r1, #0
 8007546:	4618      	mov	r0, r3
 8007548:	f004 ff97 	bl	800c47a <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 800754c:	4b67      	ldr	r3, [pc, #412]	; (80076ec <mergeData+0x1b8>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	713b      	strb	r3, [r7, #4]
 8007552:	4b67      	ldr	r3, [pc, #412]	; (80076f0 <mergeData+0x1bc>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	717b      	strb	r3, [r7, #5]
 8007558:	4b66      	ldr	r3, [pc, #408]	; (80076f4 <mergeData+0x1c0>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	71bb      	strb	r3, [r7, #6]
 800755e:	4b66      	ldr	r3, [pc, #408]	; (80076f8 <mergeData+0x1c4>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	71fb      	strb	r3, [r7, #7]
 8007564:	4b65      	ldr	r3, [pc, #404]	; (80076fc <mergeData+0x1c8>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	723b      	strb	r3, [r7, #8]
 800756a:	4b65      	ldr	r3, [pc, #404]	; (8007700 <mergeData+0x1cc>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	727b      	strb	r3, [r7, #9]
 8007570:	4b64      	ldr	r3, [pc, #400]	; (8007704 <mergeData+0x1d0>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	72bb      	strb	r3, [r7, #10]
 8007576:	4b64      	ldr	r3, [pc, #400]	; (8007708 <mergeData+0x1d4>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	72fb      	strb	r3, [r7, #11]
 800757c:	4b63      	ldr	r3, [pc, #396]	; (800770c <mergeData+0x1d8>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	733b      	strb	r3, [r7, #12]
 8007582:	4b63      	ldr	r3, [pc, #396]	; (8007710 <mergeData+0x1dc>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	737b      	strb	r3, [r7, #13]
 8007588:	4b62      	ldr	r3, [pc, #392]	; (8007714 <mergeData+0x1e0>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	73bb      	strb	r3, [r7, #14]
 800758e:	4b62      	ldr	r3, [pc, #392]	; (8007718 <mergeData+0x1e4>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	73fb      	strb	r3, [r7, #15]
 8007594:	4b61      	ldr	r3, [pc, #388]	; (800771c <mergeData+0x1e8>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	743b      	strb	r3, [r7, #16]
 800759a:	4b61      	ldr	r3, [pc, #388]	; (8007720 <mergeData+0x1ec>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	747b      	strb	r3, [r7, #17]
 80075a0:	4b60      	ldr	r3, [pc, #384]	; (8007724 <mergeData+0x1f0>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	74bb      	strb	r3, [r7, #18]
 80075a6:	4b60      	ldr	r3, [pc, #384]	; (8007728 <mergeData+0x1f4>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	74fb      	strb	r3, [r7, #19]
 80075ac:	4b5f      	ldr	r3, [pc, #380]	; (800772c <mergeData+0x1f8>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	753b      	strb	r3, [r7, #20]
 80075b2:	4b5f      	ldr	r3, [pc, #380]	; (8007730 <mergeData+0x1fc>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	757b      	strb	r3, [r7, #21]
 80075b8:	4b5e      	ldr	r3, [pc, #376]	; (8007734 <mergeData+0x200>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	75bb      	strb	r3, [r7, #22]
 80075be:	4b5e      	ldr	r3, [pc, #376]	; (8007738 <mergeData+0x204>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	75fb      	strb	r3, [r7, #23]
 80075c4:	4b5d      	ldr	r3, [pc, #372]	; (800773c <mergeData+0x208>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	763b      	strb	r3, [r7, #24]
 80075ca:	4b5d      	ldr	r3, [pc, #372]	; (8007740 <mergeData+0x20c>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	767b      	strb	r3, [r7, #25]
 80075d0:	4b5c      	ldr	r3, [pc, #368]	; (8007744 <mergeData+0x210>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	76bb      	strb	r3, [r7, #26]
 80075d6:	4b5c      	ldr	r3, [pc, #368]	; (8007748 <mergeData+0x214>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	76fb      	strb	r3, [r7, #27]
 80075dc:	4b5b      	ldr	r3, [pc, #364]	; (800774c <mergeData+0x218>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	773b      	strb	r3, [r7, #28]
 80075e2:	4b5b      	ldr	r3, [pc, #364]	; (8007750 <mergeData+0x21c>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	777b      	strb	r3, [r7, #29]
 80075e8:	4b5a      	ldr	r3, [pc, #360]	; (8007754 <mergeData+0x220>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	77bb      	strb	r3, [r7, #30]
 80075ee:	4b5a      	ldr	r3, [pc, #360]	; (8007758 <mergeData+0x224>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	77fb      	strb	r3, [r7, #31]
 80075f4:	4b59      	ldr	r3, [pc, #356]	; (800775c <mergeData+0x228>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	f887 3020 	strb.w	r3, [r7, #32]
 80075fc:	4b58      	ldr	r3, [pc, #352]	; (8007760 <mergeData+0x22c>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007604:	4b57      	ldr	r3, [pc, #348]	; (8007764 <mergeData+0x230>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800760c:	4b56      	ldr	r3, [pc, #344]	; (8007768 <mergeData+0x234>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007614:	4b55      	ldr	r3, [pc, #340]	; (800776c <mergeData+0x238>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800761c:	4b54      	ldr	r3, [pc, #336]	; (8007770 <mergeData+0x23c>)
 800761e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007622:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007626:	4b52      	ldr	r3, [pc, #328]	; (8007770 <mergeData+0x23c>)
 8007628:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800762c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007630:	4b4f      	ldr	r3, [pc, #316]	; (8007770 <mergeData+0x23c>)
 8007632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800763a:	4b4d      	ldr	r3, [pc, #308]	; (8007770 <mergeData+0x23c>)
 800763c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007640:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8007644:	4b4a      	ldr	r3, [pc, #296]	; (8007770 <mergeData+0x23c>)
 8007646:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800764a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 800764e:	4b48      	ldr	r3, [pc, #288]	; (8007770 <mergeData+0x23c>)
 8007650:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8007654:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007658:	4b45      	ldr	r3, [pc, #276]	; (8007770 <mergeData+0x23c>)
 800765a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800765e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007662:	4b43      	ldr	r3, [pc, #268]	; (8007770 <mergeData+0x23c>)
 8007664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007668:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 800766c:	4b40      	ldr	r3, [pc, #256]	; (8007770 <mergeData+0x23c>)
 800766e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007672:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007676:	4b3e      	ldr	r3, [pc, #248]	; (8007770 <mergeData+0x23c>)
 8007678:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800767c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007680:	2306      	movs	r3, #6
 8007682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007686:	2300      	movs	r3, #0
 8007688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800768a:	e015      	b.n	80076b8 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 800768c:	1d3a      	adds	r2, r7, #4
 800768e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007690:	4413      	add	r3, r2
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800769a:	4936      	ldr	r1, [pc, #216]	; (8007774 <mergeData+0x240>)
 800769c:	4618      	mov	r0, r3
 800769e:	f004 fe7b 	bl	800c398 <siprintf>
	    strcat(combinedString, temp);
 80076a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80076a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076aa:	4611      	mov	r1, r2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f004 fed5 	bl	800c45c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80076b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b4:	3301      	adds	r3, #1
 80076b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ba:	2b2b      	cmp	r3, #43	; 0x2b
 80076bc:	d9e6      	bls.n	800768c <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80076be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7f8 fdae 	bl	8000224 <strlen>
 80076c8:	4603      	mov	r3, r0
 80076ca:	3301      	adds	r3, #1
 80076cc:	4618      	mov	r0, r3
 80076ce:	f004 fdaf 	bl	800c230 <malloc>
 80076d2:	4603      	mov	r3, r0
 80076d4:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80076d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076da:	4619      	mov	r1, r3
 80076dc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80076de:	f004 ff1f 	bl	800c520 <strcpy>
	return result;
 80076e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3770      	adds	r7, #112	; 0x70
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000227 	.word	0x20000227
 80076f0:	20000219 	.word	0x20000219
 80076f4:	2000021c 	.word	0x2000021c
 80076f8:	2000021d 	.word	0x2000021d
 80076fc:	2000021e 	.word	0x2000021e
 8007700:	20000225 	.word	0x20000225
 8007704:	2000021f 	.word	0x2000021f
 8007708:	20000220 	.word	0x20000220
 800770c:	20000224 	.word	0x20000224
 8007710:	20000221 	.word	0x20000221
 8007714:	20000231 	.word	0x20000231
 8007718:	20000222 	.word	0x20000222
 800771c:	20000232 	.word	0x20000232
 8007720:	20000223 	.word	0x20000223
 8007724:	20000233 	.word	0x20000233
 8007728:	20000226 	.word	0x20000226
 800772c:	20000228 	.word	0x20000228
 8007730:	20000229 	.word	0x20000229
 8007734:	2000022a 	.word	0x2000022a
 8007738:	2000022b 	.word	0x2000022b
 800773c:	2000022c 	.word	0x2000022c
 8007740:	2000022d 	.word	0x2000022d
 8007744:	2000022e 	.word	0x2000022e
 8007748:	2000022f 	.word	0x2000022f
 800774c:	20000230 	.word	0x20000230
 8007750:	20000234 	.word	0x20000234
 8007754:	20000236 	.word	0x20000236
 8007758:	20000215 	.word	0x20000215
 800775c:	20000216 	.word	0x20000216
 8007760:	20000000 	.word	0x20000000
 8007764:	20000001 	.word	0x20000001
 8007768:	20000217 	.word	0x20000217
 800776c:	20000239 	.word	0x20000239
 8007770:	2000011c 	.word	0x2000011c
 8007774:	0800db4c 	.word	0x0800db4c

08007778 <convertAndSendData>:

void convertAndSendData() {
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 800777c:	4b14      	ldr	r3, [pc, #80]	; (80077d0 <convertAndSendData+0x58>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10a      	bne.n	800779a <convertAndSendData+0x22>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007784:	4a13      	ldr	r2, [pc, #76]	; (80077d4 <convertAndSendData+0x5c>)
 8007786:	2101      	movs	r1, #1
 8007788:	2001      	movs	r0, #1
 800778a:	f000 f9fd 	bl	8007b88 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 800778e:	4a12      	ldr	r2, [pc, #72]	; (80077d8 <convertAndSendData+0x60>)
 8007790:	2101      	movs	r1, #1
 8007792:	2002      	movs	r0, #2
 8007794:	f000 f9f8 	bl	8007b88 <lcd_print>
 8007798:	e009      	b.n	80077ae <convertAndSendData+0x36>
	} else {
		lcd_print(1, 1, " Syncronization ");
 800779a:	4a10      	ldr	r2, [pc, #64]	; (80077dc <convertAndSendData+0x64>)
 800779c:	2101      	movs	r1, #1
 800779e:	2001      	movs	r0, #1
 80077a0:	f000 f9f2 	bl	8007b88 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80077a4:	4a0e      	ldr	r2, [pc, #56]	; (80077e0 <convertAndSendData+0x68>)
 80077a6:	2101      	movs	r1, #1
 80077a8:	2002      	movs	r0, #2
 80077aa:	f000 f9ed 	bl	8007b88 <lcd_print>
	}

	sendMachineData(&huart1, machineID, mergeData());
 80077ae:	f7ff fec1 	bl	8007534 <mergeData>
 80077b2:	4603      	mov	r3, r0
 80077b4:	461a      	mov	r2, r3
 80077b6:	490b      	ldr	r1, [pc, #44]	; (80077e4 <convertAndSendData+0x6c>)
 80077b8:	480b      	ldr	r0, [pc, #44]	; (80077e8 <convertAndSendData+0x70>)
 80077ba:	f7f9 f879 	bl	80008b0 <sendMachineData>

	HAL_Delay(500);
 80077be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077c2:	f000 ff37 	bl	8008634 <HAL_Delay>
	lcd_clear();
 80077c6:	f000 fa0b 	bl	8007be0 <lcd_clear>
}
 80077ca:	bf00      	nop
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20000239 	.word	0x20000239
 80077d4:	0800db50 	.word	0x0800db50
 80077d8:	0800db64 	.word	0x0800db64
 80077dc:	0800db78 	.word	0x0800db78
 80077e0:	0800db8c 	.word	0x0800db8c
 80077e4:	20000194 	.word	0x20000194
 80077e8:	2000043c 	.word	0x2000043c

080077ec <iotSetup>:

void iotSetup() {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80077f0:	4b14      	ldr	r3, [pc, #80]	; (8007844 <iotSetup+0x58>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d017      	beq.n	8007828 <iotSetup+0x3c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 80077f8:	4813      	ldr	r0, [pc, #76]	; (8007848 <iotSetup+0x5c>)
 80077fa:	f7f8 fd13 	bl	8000224 <strlen>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b0c      	cmp	r3, #12
 8007802:	d001      	beq.n	8007808 <iotSetup+0x1c>
			takeMachineID();
 8007804:	f7ff fa20 	bl	8006c48 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8007808:	4810      	ldr	r0, [pc, #64]	; (800784c <iotSetup+0x60>)
 800780a:	f7f8 fd0b 	bl	8000224 <strlen>
 800780e:	4603      	mov	r3, r0
 8007810:	2b01      	cmp	r3, #1
 8007812:	d801      	bhi.n	8007818 <iotSetup+0x2c>
			takeWifiSSID();
 8007814:	f7ff fb6e 	bl	8006ef4 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8007818:	480d      	ldr	r0, [pc, #52]	; (8007850 <iotSetup+0x64>)
 800781a:	f7f8 fd03 	bl	8000224 <strlen>
 800781e:	4603      	mov	r3, r0
 8007820:	2b01      	cmp	r3, #1
 8007822:	d801      	bhi.n	8007828 <iotSetup+0x3c>
			takeWifiPass();
 8007824:	f7ff fd04 	bl	8007230 <takeWifiPass>
		}
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007828:	4a09      	ldr	r2, [pc, #36]	; (8007850 <iotSetup+0x64>)
 800782a:	4908      	ldr	r1, [pc, #32]	; (800784c <iotSetup+0x60>)
 800782c:	4809      	ldr	r0, [pc, #36]	; (8007854 <iotSetup+0x68>)
 800782e:	f7f8 ff95 	bl	800075c <ESP8266_Init>
	HAL_Delay(500);
 8007832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007836:	f000 fefd 	bl	8008634 <HAL_Delay>
	convertAndSendData();
 800783a:	f7ff ff9d 	bl	8007778 <convertAndSendData>
}
 800783e:	bf00      	nop
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000237 	.word	0x20000237
 8007848:	20000194 	.word	0x20000194
 800784c:	200001a0 	.word	0x200001a0
 8007850:	200001b4 	.word	0x200001b4
 8007854:	2000043c 	.word	0x2000043c

08007858 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af02      	add	r7, sp, #8
 800785e:	4603      	mov	r3, r0
 8007860:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	f023 030f 	bic.w	r3, r3, #15
 8007868:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	011b      	lsls	r3, r3, #4
 800786e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007870:	7b7b      	ldrb	r3, [r7, #13]
 8007872:	f043 030c 	orr.w	r3, r3, #12
 8007876:	b2db      	uxtb	r3, r3
 8007878:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800787a:	7b7b      	ldrb	r3, [r7, #13]
 800787c:	f043 0308 	orr.w	r3, r3, #8
 8007880:	b2db      	uxtb	r3, r3
 8007882:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007884:	7b3b      	ldrb	r3, [r7, #12]
 8007886:	f043 030c 	orr.w	r3, r3, #12
 800788a:	b2db      	uxtb	r3, r3
 800788c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800788e:	7b3b      	ldrb	r3, [r7, #12]
 8007890:	f043 0308 	orr.w	r3, r3, #8
 8007894:	b2db      	uxtb	r3, r3
 8007896:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007898:	bf00      	nop
 800789a:	4825      	ldr	r0, [pc, #148]	; (8007930 <lcd_send_cmd+0xd8>)
 800789c:	f002 fac3 	bl	8009e26 <HAL_I2C_GetError>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d0f9      	beq.n	800789a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80078a6:	bf00      	nop
 80078a8:	4821      	ldr	r0, [pc, #132]	; (8007930 <lcd_send_cmd+0xd8>)
 80078aa:	f002 faaf 	bl	8009e0c <HAL_I2C_GetState>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d1f9      	bne.n	80078a8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80078b4:	4b1f      	ldr	r3, [pc, #124]	; (8007934 <lcd_send_cmd+0xdc>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d116      	bne.n	80078ea <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]
 80078c0:	e00f      	b.n	80078e2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	3310      	adds	r3, #16
 80078c6:	443b      	add	r3, r7
 80078c8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	f022 0208 	bic.w	r2, r2, #8
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	3310      	adds	r3, #16
 80078d6:	443b      	add	r3, r7
 80078d8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	3301      	adds	r3, #1
 80078e0:	73fb      	strb	r3, [r7, #15]
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d9ec      	bls.n	80078c2 <lcd_send_cmd+0x6a>
 80078e8:	e015      	b.n	8007916 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80078ea:	2300      	movs	r3, #0
 80078ec:	73bb      	strb	r3, [r7, #14]
 80078ee:	e00f      	b.n	8007910 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	3310      	adds	r3, #16
 80078f4:	443b      	add	r3, r7
 80078f6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	f042 0208 	orr.w	r2, r2, #8
 8007900:	b2d2      	uxtb	r2, r2
 8007902:	3310      	adds	r3, #16
 8007904:	443b      	add	r3, r7
 8007906:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	3301      	adds	r3, #1
 800790e:	73bb      	strb	r3, [r7, #14]
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	2b03      	cmp	r3, #3
 8007914:	d9ec      	bls.n	80078f0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007916:	f107 0208 	add.w	r2, r7, #8
 800791a:	2364      	movs	r3, #100	; 0x64
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	2304      	movs	r3, #4
 8007920:	214e      	movs	r1, #78	; 0x4e
 8007922:	4803      	ldr	r0, [pc, #12]	; (8007930 <lcd_send_cmd+0xd8>)
 8007924:	f001 fe12 	bl	800954c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	200003a0 	.word	0x200003a0
 8007934:	20000376 	.word	0x20000376

08007938 <lcd_send_data>:

void lcd_send_data (char data) {
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af02      	add	r7, sp, #8
 800793e:	4603      	mov	r3, r0
 8007940:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	f023 030f 	bic.w	r3, r3, #15
 8007948:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007950:	7b7b      	ldrb	r3, [r7, #13]
 8007952:	f043 030d 	orr.w	r3, r3, #13
 8007956:	b2db      	uxtb	r3, r3
 8007958:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800795a:	7b7b      	ldrb	r3, [r7, #13]
 800795c:	f043 0309 	orr.w	r3, r3, #9
 8007960:	b2db      	uxtb	r3, r3
 8007962:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007964:	7b3b      	ldrb	r3, [r7, #12]
 8007966:	f043 030d 	orr.w	r3, r3, #13
 800796a:	b2db      	uxtb	r3, r3
 800796c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800796e:	7b3b      	ldrb	r3, [r7, #12]
 8007970:	f043 0309 	orr.w	r3, r3, #9
 8007974:	b2db      	uxtb	r3, r3
 8007976:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007978:	bf00      	nop
 800797a:	4825      	ldr	r0, [pc, #148]	; (8007a10 <lcd_send_data+0xd8>)
 800797c:	f002 fa53 	bl	8009e26 <HAL_I2C_GetError>
 8007980:	4603      	mov	r3, r0
 8007982:	2b04      	cmp	r3, #4
 8007984:	d0f9      	beq.n	800797a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007986:	bf00      	nop
 8007988:	4821      	ldr	r0, [pc, #132]	; (8007a10 <lcd_send_data+0xd8>)
 800798a:	f002 fa3f 	bl	8009e0c <HAL_I2C_GetState>
 800798e:	4603      	mov	r3, r0
 8007990:	2b20      	cmp	r3, #32
 8007992:	d1f9      	bne.n	8007988 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007994:	4b1f      	ldr	r3, [pc, #124]	; (8007a14 <lcd_send_data+0xdc>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d116      	bne.n	80079ca <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
 80079a0:	e00f      	b.n	80079c2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	3310      	adds	r3, #16
 80079a6:	443b      	add	r3, r7
 80079a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	f022 0208 	bic.w	r2, r2, #8
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	3310      	adds	r3, #16
 80079b6:	443b      	add	r3, r7
 80079b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	3301      	adds	r3, #1
 80079c0:	73fb      	strb	r3, [r7, #15]
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d9ec      	bls.n	80079a2 <lcd_send_data+0x6a>
 80079c8:	e015      	b.n	80079f6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80079ca:	2300      	movs	r3, #0
 80079cc:	73bb      	strb	r3, [r7, #14]
 80079ce:	e00f      	b.n	80079f0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80079d0:	7bbb      	ldrb	r3, [r7, #14]
 80079d2:	3310      	adds	r3, #16
 80079d4:	443b      	add	r3, r7
 80079d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	f042 0208 	orr.w	r2, r2, #8
 80079e0:	b2d2      	uxtb	r2, r2
 80079e2:	3310      	adds	r3, #16
 80079e4:	443b      	add	r3, r7
 80079e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	3301      	adds	r3, #1
 80079ee:	73bb      	strb	r3, [r7, #14]
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d9ec      	bls.n	80079d0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80079f6:	f107 0208 	add.w	r2, r7, #8
 80079fa:	2364      	movs	r3, #100	; 0x64
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2304      	movs	r3, #4
 8007a00:	214e      	movs	r1, #78	; 0x4e
 8007a02:	4803      	ldr	r0, [pc, #12]	; (8007a10 <lcd_send_data+0xd8>)
 8007a04:	f001 fda2 	bl	800954c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200003a0 	.word	0x200003a0
 8007a14:	20000376 	.word	0x20000376

08007a18 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007a20:	e006      	b.n	8007a30 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff ff84 	bl	8007938 <lcd_send_data>
	while (*str) {
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1f4      	bne.n	8007a22 <lcd_send_string+0xa>
	}
}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	f023 030f 	bic.w	r3, r3, #15
 8007a54:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007a5c:	7b7b      	ldrb	r3, [r7, #13]
 8007a5e:	f043 030d 	orr.w	r3, r3, #13
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007a66:	7b7b      	ldrb	r3, [r7, #13]
 8007a68:	f043 0309 	orr.w	r3, r3, #9
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007a70:	7b3b      	ldrb	r3, [r7, #12]
 8007a72:	f043 030d 	orr.w	r3, r3, #13
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007a7a:	7b3b      	ldrb	r3, [r7, #12]
 8007a7c:	f043 0309 	orr.w	r3, r3, #9
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a84:	bf00      	nop
 8007a86:	4825      	ldr	r0, [pc, #148]	; (8007b1c <lcd_send_char+0xd8>)
 8007a88:	f002 f9cd 	bl	8009e26 <HAL_I2C_GetError>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d0f9      	beq.n	8007a86 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a92:	bf00      	nop
 8007a94:	4821      	ldr	r0, [pc, #132]	; (8007b1c <lcd_send_char+0xd8>)
 8007a96:	f002 f9b9 	bl	8009e0c <HAL_I2C_GetState>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	d1f9      	bne.n	8007a94 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007aa0:	4b1f      	ldr	r3, [pc, #124]	; (8007b20 <lcd_send_char+0xdc>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d116      	bne.n	8007ad6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
 8007aac:	e00f      	b.n	8007ace <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
 8007ab0:	3310      	adds	r3, #16
 8007ab2:	443b      	add	r3, r7
 8007ab4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	f022 0208 	bic.w	r2, r2, #8
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	3310      	adds	r3, #16
 8007ac2:	443b      	add	r3, r7
 8007ac4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	3301      	adds	r3, #1
 8007acc:	73fb      	strb	r3, [r7, #15]
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d9ec      	bls.n	8007aae <lcd_send_char+0x6a>
 8007ad4:	e015      	b.n	8007b02 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73bb      	strb	r3, [r7, #14]
 8007ada:	e00f      	b.n	8007afc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	3310      	adds	r3, #16
 8007ae0:	443b      	add	r3, r7
 8007ae2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	f042 0208 	orr.w	r2, r2, #8
 8007aec:	b2d2      	uxtb	r2, r2
 8007aee:	3310      	adds	r3, #16
 8007af0:	443b      	add	r3, r7
 8007af2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	3301      	adds	r3, #1
 8007afa:	73bb      	strb	r3, [r7, #14]
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d9ec      	bls.n	8007adc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007b02:	f107 0208 	add.w	r2, r7, #8
 8007b06:	2364      	movs	r3, #100	; 0x64
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	2304      	movs	r3, #4
 8007b0c:	214e      	movs	r1, #78	; 0x4e
 8007b0e:	4803      	ldr	r0, [pc, #12]	; (8007b1c <lcd_send_char+0xd8>)
 8007b10:	f001 fd1c 	bl	800954c <HAL_I2C_Master_Transmit>
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	200003a0 	.word	0x200003a0
 8007b20:	20000376 	.word	0x20000376

08007b24 <lcd_init>:

void lcd_init (void) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007b28:	2002      	movs	r0, #2
 8007b2a:	f7ff fe95 	bl	8007858 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007b2e:	2028      	movs	r0, #40	; 0x28
 8007b30:	f7ff fe92 	bl	8007858 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007b34:	200c      	movs	r0, #12
 8007b36:	f7ff fe8f 	bl	8007858 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007b3a:	2080      	movs	r0, #128	; 0x80
 8007b3c:	f7ff fe8c 	bl	8007858 <lcd_send_cmd>
	lcd_backlight(1);
 8007b40:	2001      	movs	r0, #1
 8007b42:	f000 f86d 	bl	8007c20 <lcd_backlight>
}
 8007b46:	bf00      	nop
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	4603      	mov	r3, r0
 8007b52:	460a      	mov	r2, r1
 8007b54:	71fb      	strb	r3, [r7, #7]
 8007b56:	4613      	mov	r3, r2
 8007b58:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d106      	bne.n	8007b6e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007b60:	79bb      	ldrb	r3, [r7, #6]
 8007b62:	337f      	adds	r3, #127	; 0x7f
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff fe76 	bl	8007858 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007b6c:	e008      	b.n	8007b80 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d105      	bne.n	8007b80 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007b74:	79bb      	ldrb	r3, [r7, #6]
 8007b76:	3b41      	subs	r3, #65	; 0x41
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fe6c 	bl	8007858 <lcd_send_cmd>
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	603a      	str	r2, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
 8007b94:	460b      	mov	r3, r1
 8007b96:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007b98:	79ba      	ldrb	r2, [r7, #6]
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff ffd3 	bl	8007b4a <lcd_gotoxy>
	lcd_send_string(str);
 8007ba4:	6838      	ldr	r0, [r7, #0]
 8007ba6:	f7ff ff37 	bl	8007a18 <lcd_send_string>
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	4603      	mov	r3, r0
 8007bba:	71fb      	strb	r3, [r7, #7]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	71bb      	strb	r3, [r7, #6]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007bc4:	79ba      	ldrb	r2, [r7, #6]
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7ff ffbd 	bl	8007b4a <lcd_gotoxy>
    lcd_send_char(ch);
 8007bd0:	797b      	ldrb	r3, [r7, #5]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff ff36 	bl	8007a44 <lcd_send_char>
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <lcd_clear>:

void lcd_clear(void) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007be4:	2001      	movs	r0, #1
 8007be6:	f7ff fe37 	bl	8007858 <lcd_send_cmd>
    HAL_Delay(2);
 8007bea:	2002      	movs	r0, #2
 8007bec:	f000 fd22 	bl	8008634 <HAL_Delay>
}
 8007bf0:	bf00      	nop
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	460a      	mov	r2, r1
 8007bfe:	71fb      	strb	r3, [r7, #7]
 8007c00:	4613      	mov	r3, r2
 8007c02:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007c04:	79ba      	ldrb	r2, [r7, #6]
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7ff ff9d 	bl	8007b4a <lcd_gotoxy>

    lcd_send_char(' ');
 8007c10:	2020      	movs	r0, #32
 8007c12:	f7ff ff17 	bl	8007a44 <lcd_send_char>
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007c2a:	4a05      	ldr	r2, [pc, #20]	; (8007c40 <lcd_backlight+0x20>)
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007c30:	2000      	movs	r0, #0
 8007c32:	f7ff fe11 	bl	8007858 <lcd_send_cmd>
}
 8007c36:	bf00      	nop
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000376 	.word	0x20000376

08007c44 <lcd_cursor>:

void lcd_cursor(int state) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d106      	bne.n	8007c60 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007c52:	200e      	movs	r0, #14
 8007c54:	f7ff fe00 	bl	8007858 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007c58:	200f      	movs	r0, #15
 8007c5a:	f7ff fdfd 	bl	8007858 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007c5e:	e002      	b.n	8007c66 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007c60:	200c      	movs	r0, #12
 8007c62:	f7ff fdf9 	bl	8007858 <lcd_send_cmd>
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007c78:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	4a03      	ldr	r2, [pc, #12]	; (8007c8c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007c80:	6013      	str	r3, [r2, #0]
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bc80      	pop	{r7}
 8007c8a:	4770      	bx	lr
 8007c8c:	200001f4 	.word	0x200001f4

08007c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c94:	f000 fc6c 	bl	8008570 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c9c:	f000 fcca 	bl	8008634 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ca0:	f000 f89c 	bl	8007ddc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ca4:	f000 f9be 	bl	8008024 <MX_GPIO_Init>
  MX_CAN_Init();
 8007ca8:	f000 f8de 	bl	8007e68 <MX_CAN_Init>
  MX_I2C1_Init();
 8007cac:	f000 f910 	bl	8007ed0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007cb0:	f000 f93c 	bl	8007f2c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007cb4:	f000 f98c 	bl	8007fd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007cb8:	2201      	movs	r2, #1
 8007cba:	2140      	movs	r1, #64	; 0x40
 8007cbc:	483e      	ldr	r0, [pc, #248]	; (8007db8 <main+0x128>)
 8007cbe:	f001 faa0 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	2180      	movs	r1, #128	; 0x80
 8007cc6:	483c      	ldr	r0, [pc, #240]	; (8007db8 <main+0x128>)
 8007cc8:	f001 fa9b 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007ccc:	200a      	movs	r0, #10
 8007cce:	f000 fcb1 	bl	8008634 <HAL_Delay>
  lcd_init();
 8007cd2:	f7ff ff27 	bl	8007b24 <lcd_init>
  HAL_Delay(10);
 8007cd6:	200a      	movs	r0, #10
 8007cd8:	f000 fcac 	bl	8008634 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007cdc:	4837      	ldr	r0, [pc, #220]	; (8007dbc <main+0x12c>)
 8007cde:	f003 f943 	bl	800af68 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ce2:	bf00      	nop
 8007ce4:	4836      	ldr	r0, [pc, #216]	; (8007dc0 <main+0x130>)
 8007ce6:	f002 f89e 	bl	8009e26 <HAL_I2C_GetError>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d0f9      	beq.n	8007ce4 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007cf0:	bf00      	nop
 8007cf2:	4833      	ldr	r0, [pc, #204]	; (8007dc0 <main+0x130>)
 8007cf4:	f002 f88a 	bl	8009e0c <HAL_I2C_GetState>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d1f9      	bne.n	8007cf2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d04:	482c      	ldr	r0, [pc, #176]	; (8007db8 <main+0x128>)
 8007d06:	f001 fa7c 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d10:	4829      	ldr	r0, [pc, #164]	; (8007db8 <main+0x128>)
 8007d12:	f001 fa76 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007d16:	2200      	movs	r2, #0
 8007d18:	2104      	movs	r1, #4
 8007d1a:	4827      	ldr	r0, [pc, #156]	; (8007db8 <main+0x128>)
 8007d1c:	f001 fa71 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007d20:	2200      	movs	r2, #0
 8007d22:	2102      	movs	r1, #2
 8007d24:	4824      	ldr	r0, [pc, #144]	; (8007db8 <main+0x128>)
 8007d26:	f001 fa6c 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	4822      	ldr	r0, [pc, #136]	; (8007db8 <main+0x128>)
 8007d30:	f001 fa67 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007d34:	2200      	movs	r2, #0
 8007d36:	2120      	movs	r1, #32
 8007d38:	4822      	ldr	r0, [pc, #136]	; (8007dc4 <main+0x134>)
 8007d3a:	f001 fa62 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007d3e:	2200      	movs	r2, #0
 8007d40:	2110      	movs	r1, #16
 8007d42:	4820      	ldr	r0, [pc, #128]	; (8007dc4 <main+0x134>)
 8007d44:	f001 fa5d 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2180      	movs	r1, #128	; 0x80
 8007d4c:	481e      	ldr	r0, [pc, #120]	; (8007dc8 <main+0x138>)
 8007d4e:	f001 fa58 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007d52:	2200      	movs	r2, #0
 8007d54:	2140      	movs	r1, #64	; 0x40
 8007d56:	481c      	ldr	r0, [pc, #112]	; (8007dc8 <main+0x138>)
 8007d58:	f001 fa53 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2120      	movs	r1, #32
 8007d60:	4819      	ldr	r0, [pc, #100]	; (8007dc8 <main+0x138>)
 8007d62:	f001 fa4e 	bl	8009202 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007d66:	2200      	movs	r2, #0
 8007d68:	2110      	movs	r1, #16
 8007d6a:	4817      	ldr	r0, [pc, #92]	; (8007dc8 <main+0x138>)
 8007d6c:	f001 fa49 	bl	8009202 <HAL_GPIO_WritePin>

  i2cTest();
 8007d70:	f7f8 ff7e 	bl	8000c70 <i2cTest>
  HAL_Delay(100);
 8007d74:	2064      	movs	r0, #100	; 0x64
 8007d76:	f000 fc5d 	bl	8008634 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007d7a:	4a14      	ldr	r2, [pc, #80]	; (8007dcc <main+0x13c>)
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	2001      	movs	r0, #1
 8007d80:	f7ff ff02 	bl	8007b88 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007d84:	4a12      	ldr	r2, [pc, #72]	; (8007dd0 <main+0x140>)
 8007d86:	2101      	movs	r1, #1
 8007d88:	2002      	movs	r0, #2
 8007d8a:	f7ff fefd 	bl	8007b88 <lcd_print>
  HAL_Delay(1000);
 8007d8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d92:	f000 fc4f 	bl	8008634 <HAL_Delay>
  lcd_clear();
 8007d96:	f7ff ff23 	bl	8007be0 <lcd_clear>

  eepromKontrol();
 8007d9a:	f7f8 fa4b 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007d9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007da2:	f000 fc47 	bl	8008634 <HAL_Delay>

  backLightTimer = millis;
 8007da6:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <main+0x144>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a0b      	ldr	r2, [pc, #44]	; (8007dd8 <main+0x148>)
 8007dac:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007dae:	f7ff fd1d 	bl	80077ec <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007db2:	f7fe fdb1 	bl	8006918 <mainLoop>
 8007db6:	e7fc      	b.n	8007db2 <main+0x122>
 8007db8:	40010c00 	.word	0x40010c00
 8007dbc:	200003f4 	.word	0x200003f4
 8007dc0:	200003a0 	.word	0x200003a0
 8007dc4:	40011000 	.word	0x40011000
 8007dc8:	40010800 	.word	0x40010800
 8007dcc:	0800dba0 	.word	0x0800dba0
 8007dd0:	0800dbb4 	.word	0x0800dbb4
 8007dd4:	200001f4 	.word	0x200001f4
 8007dd8:	20000210 	.word	0x20000210

08007ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b090      	sub	sp, #64	; 0x40
 8007de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007de2:	f107 0318 	add.w	r3, r7, #24
 8007de6:	2228      	movs	r2, #40	; 0x28
 8007de8:	2100      	movs	r1, #0
 8007dea:	4618      	mov	r0, r3
 8007dec:	f004 fb45 	bl	800c47a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007df0:	1d3b      	adds	r3, r7, #4
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	605a      	str	r2, [r3, #4]
 8007df8:	609a      	str	r2, [r3, #8]
 8007dfa:	60da      	str	r2, [r3, #12]
 8007dfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e10:	2302      	movs	r3, #2
 8007e12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007e1a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e20:	f107 0318 	add.w	r3, r7, #24
 8007e24:	4618      	mov	r0, r3
 8007e26:	f002 fc3f 	bl	800a6a8 <HAL_RCC_OscConfig>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007e30:	f000 f9a2 	bl	8008178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e34:	230f      	movs	r3, #15
 8007e36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007e46:	2300      	movs	r3, #0
 8007e48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007e4a:	1d3b      	adds	r3, r7, #4
 8007e4c:	2102      	movs	r1, #2
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f002 feac 	bl	800abac <HAL_RCC_ClockConfig>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007e5a:	f000 f98d 	bl	8008178 <Error_Handler>
  }
}
 8007e5e:	bf00      	nop
 8007e60:	3740      	adds	r7, #64	; 0x40
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007e6c:	4b16      	ldr	r3, [pc, #88]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007e6e:	4a17      	ldr	r2, [pc, #92]	; (8007ecc <MX_CAN_Init+0x64>)
 8007e70:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007e72:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007e74:	2210      	movs	r2, #16
 8007e76:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007e78:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007e7e:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007e84:	4b10      	ldr	r3, [pc, #64]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007e8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007e90:	4b0d      	ldr	r3, [pc, #52]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007e96:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007ea2:	4b09      	ldr	r3, [pc, #36]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007ea8:	4b07      	ldr	r3, [pc, #28]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007eae:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007eb4:	4804      	ldr	r0, [pc, #16]	; (8007ec8 <MX_CAN_Init+0x60>)
 8007eb6:	f000 fbe1 	bl	800867c <HAL_CAN_Init>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007ec0:	f000 f95a 	bl	8008178 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007ec4:	bf00      	nop
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20000378 	.word	0x20000378
 8007ecc:	40006400 	.word	0x40006400

08007ed0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007ed4:	4b12      	ldr	r3, [pc, #72]	; (8007f20 <MX_I2C1_Init+0x50>)
 8007ed6:	4a13      	ldr	r2, [pc, #76]	; (8007f24 <MX_I2C1_Init+0x54>)
 8007ed8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007eda:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <MX_I2C1_Init+0x50>)
 8007edc:	4a12      	ldr	r2, [pc, #72]	; (8007f28 <MX_I2C1_Init+0x58>)
 8007ede:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007ee0:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <MX_I2C1_Init+0x50>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007ee6:	4b0e      	ldr	r3, [pc, #56]	; (8007f20 <MX_I2C1_Init+0x50>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007eec:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <MX_I2C1_Init+0x50>)
 8007eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007ef2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	; (8007f20 <MX_I2C1_Init+0x50>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007efa:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <MX_I2C1_Init+0x50>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <MX_I2C1_Init+0x50>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f06:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <MX_I2C1_Init+0x50>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f0c:	4804      	ldr	r0, [pc, #16]	; (8007f20 <MX_I2C1_Init+0x50>)
 8007f0e:	f001 f9a9 	bl	8009264 <HAL_I2C_Init>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007f18:	f000 f92e 	bl	8008178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007f1c:	bf00      	nop
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	200003a0 	.word	0x200003a0
 8007f24:	40005400 	.word	0x40005400
 8007f28:	00061a80 	.word	0x00061a80

08007f2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f32:	f107 0308 	add.w	r3, r7, #8
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	605a      	str	r2, [r3, #4]
 8007f3c:	609a      	str	r2, [r3, #8]
 8007f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f40:	463b      	mov	r3, r7
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007f48:	4b1f      	ldr	r3, [pc, #124]	; (8007fc8 <MX_TIM1_Init+0x9c>)
 8007f4a:	4a20      	ldr	r2, [pc, #128]	; (8007fcc <MX_TIM1_Init+0xa0>)
 8007f4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007f4e:	4b1e      	ldr	r3, [pc, #120]	; (8007fc8 <MX_TIM1_Init+0x9c>)
 8007f50:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007f54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f56:	4b1c      	ldr	r3, [pc, #112]	; (8007fc8 <MX_TIM1_Init+0x9c>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007f5c:	4b1a      	ldr	r3, [pc, #104]	; (8007fc8 <MX_TIM1_Init+0x9c>)
 8007f5e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007f62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f64:	4b18      	ldr	r3, [pc, #96]	; (8007fc8 <MX_TIM1_Init+0x9c>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007f6a:	4b17      	ldr	r3, [pc, #92]	; (8007fc8 <MX_TIM1_Init+0x9c>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f70:	4b15      	ldr	r3, [pc, #84]	; (8007fc8 <MX_TIM1_Init+0x9c>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007f76:	4814      	ldr	r0, [pc, #80]	; (8007fc8 <MX_TIM1_Init+0x9c>)
 8007f78:	f002 ffa6 	bl	800aec8 <HAL_TIM_Base_Init>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007f82:	f000 f8f9 	bl	8008178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007f8c:	f107 0308 	add.w	r3, r7, #8
 8007f90:	4619      	mov	r1, r3
 8007f92:	480d      	ldr	r0, [pc, #52]	; (8007fc8 <MX_TIM1_Init+0x9c>)
 8007f94:	f003 f950 	bl	800b238 <HAL_TIM_ConfigClockSource>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d001      	beq.n	8007fa2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007f9e:	f000 f8eb 	bl	8008178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007faa:	463b      	mov	r3, r7
 8007fac:	4619      	mov	r1, r3
 8007fae:	4806      	ldr	r0, [pc, #24]	; (8007fc8 <MX_TIM1_Init+0x9c>)
 8007fb0:	f003 fb3e 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007fba:	f000 f8dd 	bl	8008178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007fbe:	bf00      	nop
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	200003f4 	.word	0x200003f4
 8007fcc:	40012c00 	.word	0x40012c00

08007fd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007fd4:	4b11      	ldr	r3, [pc, #68]	; (800801c <MX_USART1_UART_Init+0x4c>)
 8007fd6:	4a12      	ldr	r2, [pc, #72]	; (8008020 <MX_USART1_UART_Init+0x50>)
 8007fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007fda:	4b10      	ldr	r3, [pc, #64]	; (800801c <MX_USART1_UART_Init+0x4c>)
 8007fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	; (800801c <MX_USART1_UART_Init+0x4c>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007fe8:	4b0c      	ldr	r3, [pc, #48]	; (800801c <MX_USART1_UART_Init+0x4c>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007fee:	4b0b      	ldr	r3, [pc, #44]	; (800801c <MX_USART1_UART_Init+0x4c>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007ff4:	4b09      	ldr	r3, [pc, #36]	; (800801c <MX_USART1_UART_Init+0x4c>)
 8007ff6:	220c      	movs	r2, #12
 8007ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ffa:	4b08      	ldr	r3, [pc, #32]	; (800801c <MX_USART1_UART_Init+0x4c>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008000:	4b06      	ldr	r3, [pc, #24]	; (800801c <MX_USART1_UART_Init+0x4c>)
 8008002:	2200      	movs	r2, #0
 8008004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008006:	4805      	ldr	r0, [pc, #20]	; (800801c <MX_USART1_UART_Init+0x4c>)
 8008008:	f003 fb90 	bl	800b72c <HAL_UART_Init>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008012:	f000 f8b1 	bl	8008178 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008016:	bf00      	nop
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	2000043c 	.word	0x2000043c
 8008020:	40013800 	.word	0x40013800

08008024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800802a:	f107 0310 	add.w	r3, r7, #16
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	605a      	str	r2, [r3, #4]
 8008034:	609a      	str	r2, [r3, #8]
 8008036:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008038:	4b4b      	ldr	r3, [pc, #300]	; (8008168 <MX_GPIO_Init+0x144>)
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	4a4a      	ldr	r2, [pc, #296]	; (8008168 <MX_GPIO_Init+0x144>)
 800803e:	f043 0310 	orr.w	r3, r3, #16
 8008042:	6193      	str	r3, [r2, #24]
 8008044:	4b48      	ldr	r3, [pc, #288]	; (8008168 <MX_GPIO_Init+0x144>)
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008050:	4b45      	ldr	r3, [pc, #276]	; (8008168 <MX_GPIO_Init+0x144>)
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	4a44      	ldr	r2, [pc, #272]	; (8008168 <MX_GPIO_Init+0x144>)
 8008056:	f043 0320 	orr.w	r3, r3, #32
 800805a:	6193      	str	r3, [r2, #24]
 800805c:	4b42      	ldr	r3, [pc, #264]	; (8008168 <MX_GPIO_Init+0x144>)
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f003 0320 	and.w	r3, r3, #32
 8008064:	60bb      	str	r3, [r7, #8]
 8008066:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008068:	4b3f      	ldr	r3, [pc, #252]	; (8008168 <MX_GPIO_Init+0x144>)
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	4a3e      	ldr	r2, [pc, #248]	; (8008168 <MX_GPIO_Init+0x144>)
 800806e:	f043 0304 	orr.w	r3, r3, #4
 8008072:	6193      	str	r3, [r2, #24]
 8008074:	4b3c      	ldr	r3, [pc, #240]	; (8008168 <MX_GPIO_Init+0x144>)
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	f003 0304 	and.w	r3, r3, #4
 800807c:	607b      	str	r3, [r7, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008080:	4b39      	ldr	r3, [pc, #228]	; (8008168 <MX_GPIO_Init+0x144>)
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	4a38      	ldr	r2, [pc, #224]	; (8008168 <MX_GPIO_Init+0x144>)
 8008086:	f043 0308 	orr.w	r3, r3, #8
 800808a:	6193      	str	r3, [r2, #24]
 800808c:	4b36      	ldr	r3, [pc, #216]	; (8008168 <MX_GPIO_Init+0x144>)
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	603b      	str	r3, [r7, #0]
 8008096:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008098:	2200      	movs	r2, #0
 800809a:	21f0      	movs	r1, #240	; 0xf0
 800809c:	4833      	ldr	r0, [pc, #204]	; (800816c <MX_GPIO_Init+0x148>)
 800809e:	f001 f8b0 	bl	8009202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80080a2:	2200      	movs	r2, #0
 80080a4:	f241 0130 	movw	r1, #4144	; 0x1030
 80080a8:	4831      	ldr	r0, [pc, #196]	; (8008170 <MX_GPIO_Init+0x14c>)
 80080aa:	f001 f8aa 	bl	8009202 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80080ae:	2200      	movs	r2, #0
 80080b0:	f640 4107 	movw	r1, #3079	; 0xc07
 80080b4:	482f      	ldr	r0, [pc, #188]	; (8008174 <MX_GPIO_Init+0x150>)
 80080b6:	f001 f8a4 	bl	8009202 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80080ba:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80080be:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080c8:	f107 0310 	add.w	r3, r7, #16
 80080cc:	4619      	mov	r1, r3
 80080ce:	4828      	ldr	r0, [pc, #160]	; (8008170 <MX_GPIO_Init+0x14c>)
 80080d0:	f000 fe20 	bl	8008d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80080d4:	f248 130f 	movw	r3, #33039	; 0x810f
 80080d8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080e2:	f107 0310 	add.w	r3, r7, #16
 80080e6:	4619      	mov	r1, r3
 80080e8:	4820      	ldr	r0, [pc, #128]	; (800816c <MX_GPIO_Init+0x148>)
 80080ea:	f000 fe13 	bl	8008d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80080ee:	23f0      	movs	r3, #240	; 0xf0
 80080f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080f2:	2301      	movs	r3, #1
 80080f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080fa:	2302      	movs	r3, #2
 80080fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080fe:	f107 0310 	add.w	r3, r7, #16
 8008102:	4619      	mov	r1, r3
 8008104:	4819      	ldr	r0, [pc, #100]	; (800816c <MX_GPIO_Init+0x148>)
 8008106:	f000 fe05 	bl	8008d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800810a:	f241 0330 	movw	r3, #4144	; 0x1030
 800810e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008110:	2301      	movs	r3, #1
 8008112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008114:	2300      	movs	r3, #0
 8008116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008118:	2302      	movs	r3, #2
 800811a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800811c:	f107 0310 	add.w	r3, r7, #16
 8008120:	4619      	mov	r1, r3
 8008122:	4813      	ldr	r0, [pc, #76]	; (8008170 <MX_GPIO_Init+0x14c>)
 8008124:	f000 fdf6 	bl	8008d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008128:	f640 4307 	movw	r3, #3079	; 0xc07
 800812c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800812e:	2301      	movs	r3, #1
 8008130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008132:	2300      	movs	r3, #0
 8008134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008136:	2302      	movs	r3, #2
 8008138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800813a:	f107 0310 	add.w	r3, r7, #16
 800813e:	4619      	mov	r1, r3
 8008140:	480c      	ldr	r0, [pc, #48]	; (8008174 <MX_GPIO_Init+0x150>)
 8008142:	f000 fde7 	bl	8008d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008146:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800814a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008150:	2300      	movs	r3, #0
 8008152:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008154:	f107 0310 	add.w	r3, r7, #16
 8008158:	4619      	mov	r1, r3
 800815a:	4806      	ldr	r0, [pc, #24]	; (8008174 <MX_GPIO_Init+0x150>)
 800815c:	f000 fdda 	bl	8008d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008160:	bf00      	nop
 8008162:	3720      	adds	r7, #32
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40021000 	.word	0x40021000
 800816c:	40010800 	.word	0x40010800
 8008170:	40011000 	.word	0x40011000
 8008174:	40010c00 	.word	0x40010c00

08008178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800817c:	bf00      	nop
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr

08008184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800818a:	4b15      	ldr	r3, [pc, #84]	; (80081e0 <HAL_MspInit+0x5c>)
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	4a14      	ldr	r2, [pc, #80]	; (80081e0 <HAL_MspInit+0x5c>)
 8008190:	f043 0301 	orr.w	r3, r3, #1
 8008194:	6193      	str	r3, [r2, #24]
 8008196:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <HAL_MspInit+0x5c>)
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	60bb      	str	r3, [r7, #8]
 80081a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80081a2:	4b0f      	ldr	r3, [pc, #60]	; (80081e0 <HAL_MspInit+0x5c>)
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	4a0e      	ldr	r2, [pc, #56]	; (80081e0 <HAL_MspInit+0x5c>)
 80081a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ac:	61d3      	str	r3, [r2, #28]
 80081ae:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <HAL_MspInit+0x5c>)
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081b6:	607b      	str	r3, [r7, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80081ba:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <HAL_MspInit+0x60>)
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	4a04      	ldr	r2, [pc, #16]	; (80081e4 <HAL_MspInit+0x60>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081d6:	bf00      	nop
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	bc80      	pop	{r7}
 80081de:	4770      	bx	lr
 80081e0:	40021000 	.word	0x40021000
 80081e4:	40010000 	.word	0x40010000

080081e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081f0:	f107 0310 	add.w	r3, r7, #16
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	605a      	str	r2, [r3, #4]
 80081fa:	609a      	str	r2, [r3, #8]
 80081fc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a1c      	ldr	r2, [pc, #112]	; (8008274 <HAL_CAN_MspInit+0x8c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d131      	bne.n	800826c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008208:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <HAL_CAN_MspInit+0x90>)
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	4a1a      	ldr	r2, [pc, #104]	; (8008278 <HAL_CAN_MspInit+0x90>)
 800820e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008212:	61d3      	str	r3, [r2, #28]
 8008214:	4b18      	ldr	r3, [pc, #96]	; (8008278 <HAL_CAN_MspInit+0x90>)
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008220:	4b15      	ldr	r3, [pc, #84]	; (8008278 <HAL_CAN_MspInit+0x90>)
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	4a14      	ldr	r2, [pc, #80]	; (8008278 <HAL_CAN_MspInit+0x90>)
 8008226:	f043 0304 	orr.w	r3, r3, #4
 800822a:	6193      	str	r3, [r2, #24]
 800822c:	4b12      	ldr	r3, [pc, #72]	; (8008278 <HAL_CAN_MspInit+0x90>)
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	60bb      	str	r3, [r7, #8]
 8008236:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800823c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800823e:	2300      	movs	r3, #0
 8008240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008242:	2300      	movs	r3, #0
 8008244:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008246:	f107 0310 	add.w	r3, r7, #16
 800824a:	4619      	mov	r1, r3
 800824c:	480b      	ldr	r0, [pc, #44]	; (800827c <HAL_CAN_MspInit+0x94>)
 800824e:	f000 fd61 	bl	8008d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008258:	2302      	movs	r3, #2
 800825a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800825c:	2303      	movs	r3, #3
 800825e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008260:	f107 0310 	add.w	r3, r7, #16
 8008264:	4619      	mov	r1, r3
 8008266:	4805      	ldr	r0, [pc, #20]	; (800827c <HAL_CAN_MspInit+0x94>)
 8008268:	f000 fd54 	bl	8008d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800826c:	bf00      	nop
 800826e:	3720      	adds	r7, #32
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	40006400 	.word	0x40006400
 8008278:	40021000 	.word	0x40021000
 800827c:	40010800 	.word	0x40010800

08008280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008288:	f107 0310 	add.w	r3, r7, #16
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	605a      	str	r2, [r3, #4]
 8008292:	609a      	str	r2, [r3, #8]
 8008294:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a15      	ldr	r2, [pc, #84]	; (80082f0 <HAL_I2C_MspInit+0x70>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d123      	bne.n	80082e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082a0:	4b14      	ldr	r3, [pc, #80]	; (80082f4 <HAL_I2C_MspInit+0x74>)
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	4a13      	ldr	r2, [pc, #76]	; (80082f4 <HAL_I2C_MspInit+0x74>)
 80082a6:	f043 0308 	orr.w	r3, r3, #8
 80082aa:	6193      	str	r3, [r2, #24]
 80082ac:	4b11      	ldr	r3, [pc, #68]	; (80082f4 <HAL_I2C_MspInit+0x74>)
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80082b8:	23c0      	movs	r3, #192	; 0xc0
 80082ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80082bc:	2312      	movs	r3, #18
 80082be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082c0:	2303      	movs	r3, #3
 80082c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082c4:	f107 0310 	add.w	r3, r7, #16
 80082c8:	4619      	mov	r1, r3
 80082ca:	480b      	ldr	r0, [pc, #44]	; (80082f8 <HAL_I2C_MspInit+0x78>)
 80082cc:	f000 fd22 	bl	8008d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80082d0:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <HAL_I2C_MspInit+0x74>)
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	4a07      	ldr	r2, [pc, #28]	; (80082f4 <HAL_I2C_MspInit+0x74>)
 80082d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082da:	61d3      	str	r3, [r2, #28]
 80082dc:	4b05      	ldr	r3, [pc, #20]	; (80082f4 <HAL_I2C_MspInit+0x74>)
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082e4:	60bb      	str	r3, [r7, #8]
 80082e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80082e8:	bf00      	nop
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40005400 	.word	0x40005400
 80082f4:	40021000 	.word	0x40021000
 80082f8:	40010c00 	.word	0x40010c00

080082fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a0a      	ldr	r2, [pc, #40]	; (8008334 <HAL_I2C_MspDeInit+0x38>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d10d      	bne.n	800832a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800830e:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <HAL_I2C_MspDeInit+0x3c>)
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	4a09      	ldr	r2, [pc, #36]	; (8008338 <HAL_I2C_MspDeInit+0x3c>)
 8008314:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008318:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800831a:	2140      	movs	r1, #64	; 0x40
 800831c:	4807      	ldr	r0, [pc, #28]	; (800833c <HAL_I2C_MspDeInit+0x40>)
 800831e:	f000 fe8d 	bl	800903c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008322:	2180      	movs	r1, #128	; 0x80
 8008324:	4805      	ldr	r0, [pc, #20]	; (800833c <HAL_I2C_MspDeInit+0x40>)
 8008326:	f000 fe89 	bl	800903c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800832a:	bf00      	nop
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	40005400 	.word	0x40005400
 8008338:	40021000 	.word	0x40021000
 800833c:	40010c00 	.word	0x40010c00

08008340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a0d      	ldr	r2, [pc, #52]	; (8008384 <HAL_TIM_Base_MspInit+0x44>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d113      	bne.n	800837a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008352:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <HAL_TIM_Base_MspInit+0x48>)
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	4a0c      	ldr	r2, [pc, #48]	; (8008388 <HAL_TIM_Base_MspInit+0x48>)
 8008358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800835c:	6193      	str	r3, [r2, #24]
 800835e:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <HAL_TIM_Base_MspInit+0x48>)
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800836a:	2200      	movs	r2, #0
 800836c:	2100      	movs	r1, #0
 800836e:	2019      	movs	r0, #25
 8008370:	f000 fb57 	bl	8008a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008374:	2019      	movs	r0, #25
 8008376:	f000 fb70 	bl	8008a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	40012c00 	.word	0x40012c00
 8008388:	40021000 	.word	0x40021000

0800838c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008394:	f107 0310 	add.w	r3, r7, #16
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	605a      	str	r2, [r3, #4]
 800839e:	609a      	str	r2, [r3, #8]
 80083a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a20      	ldr	r2, [pc, #128]	; (8008428 <HAL_UART_MspInit+0x9c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d139      	bne.n	8008420 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80083ac:	4b1f      	ldr	r3, [pc, #124]	; (800842c <HAL_UART_MspInit+0xa0>)
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	4a1e      	ldr	r2, [pc, #120]	; (800842c <HAL_UART_MspInit+0xa0>)
 80083b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083b6:	6193      	str	r3, [r2, #24]
 80083b8:	4b1c      	ldr	r3, [pc, #112]	; (800842c <HAL_UART_MspInit+0xa0>)
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083c4:	4b19      	ldr	r3, [pc, #100]	; (800842c <HAL_UART_MspInit+0xa0>)
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	4a18      	ldr	r2, [pc, #96]	; (800842c <HAL_UART_MspInit+0xa0>)
 80083ca:	f043 0304 	orr.w	r3, r3, #4
 80083ce:	6193      	str	r3, [r2, #24]
 80083d0:	4b16      	ldr	r3, [pc, #88]	; (800842c <HAL_UART_MspInit+0xa0>)
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	60bb      	str	r3, [r7, #8]
 80083da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80083dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e2:	2302      	movs	r3, #2
 80083e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083e6:	2303      	movs	r3, #3
 80083e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ea:	f107 0310 	add.w	r3, r7, #16
 80083ee:	4619      	mov	r1, r3
 80083f0:	480f      	ldr	r0, [pc, #60]	; (8008430 <HAL_UART_MspInit+0xa4>)
 80083f2:	f000 fc8f 	bl	8008d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80083f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083fc:	2300      	movs	r3, #0
 80083fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008400:	2300      	movs	r3, #0
 8008402:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008404:	f107 0310 	add.w	r3, r7, #16
 8008408:	4619      	mov	r1, r3
 800840a:	4809      	ldr	r0, [pc, #36]	; (8008430 <HAL_UART_MspInit+0xa4>)
 800840c:	f000 fc82 	bl	8008d14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008410:	2200      	movs	r2, #0
 8008412:	2100      	movs	r1, #0
 8008414:	2025      	movs	r0, #37	; 0x25
 8008416:	f000 fb04 	bl	8008a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800841a:	2025      	movs	r0, #37	; 0x25
 800841c:	f000 fb1d 	bl	8008a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008420:	bf00      	nop
 8008422:	3720      	adds	r7, #32
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40013800 	.word	0x40013800
 800842c:	40021000 	.word	0x40021000
 8008430:	40010800 	.word	0x40010800

08008434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008438:	e7fe      	b.n	8008438 <NMI_Handler+0x4>

0800843a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800843a:	b480      	push	{r7}
 800843c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800843e:	e7fe      	b.n	800843e <HardFault_Handler+0x4>

08008440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008444:	e7fe      	b.n	8008444 <MemManage_Handler+0x4>

08008446 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008446:	b480      	push	{r7}
 8008448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800844a:	e7fe      	b.n	800844a <BusFault_Handler+0x4>

0800844c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008450:	e7fe      	b.n	8008450 <UsageFault_Handler+0x4>

08008452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008452:	b480      	push	{r7}
 8008454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008456:	bf00      	nop
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr

0800845e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800845e:	b480      	push	{r7}
 8008460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008462:	bf00      	nop
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr

0800846a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800846a:	b480      	push	{r7}
 800846c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800846e:	bf00      	nop
 8008470:	46bd      	mov	sp, r7
 8008472:	bc80      	pop	{r7}
 8008474:	4770      	bx	lr

08008476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800847a:	f000 f8bf 	bl	80085fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800847e:	bf00      	nop
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008488:	4802      	ldr	r0, [pc, #8]	; (8008494 <TIM1_UP_IRQHandler+0x10>)
 800848a:	f002 fdcd 	bl	800b028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800848e:	bf00      	nop
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	200003f4 	.word	0x200003f4

08008498 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800849c:	4802      	ldr	r0, [pc, #8]	; (80084a8 <USART1_IRQHandler+0x10>)
 800849e:	f003 f9cb 	bl	800b838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	2000043c 	.word	0x2000043c

080084ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80084b4:	4a14      	ldr	r2, [pc, #80]	; (8008508 <_sbrk+0x5c>)
 80084b6:	4b15      	ldr	r3, [pc, #84]	; (800850c <_sbrk+0x60>)
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80084c0:	4b13      	ldr	r3, [pc, #76]	; (8008510 <_sbrk+0x64>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80084c8:	4b11      	ldr	r3, [pc, #68]	; (8008510 <_sbrk+0x64>)
 80084ca:	4a12      	ldr	r2, [pc, #72]	; (8008514 <_sbrk+0x68>)
 80084cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80084ce:	4b10      	ldr	r3, [pc, #64]	; (8008510 <_sbrk+0x64>)
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4413      	add	r3, r2
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d207      	bcs.n	80084ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80084dc:	f003 ffe6 	bl	800c4ac <__errno>
 80084e0:	4603      	mov	r3, r0
 80084e2:	220c      	movs	r2, #12
 80084e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80084e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084ea:	e009      	b.n	8008500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80084ec:	4b08      	ldr	r3, [pc, #32]	; (8008510 <_sbrk+0x64>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <_sbrk+0x64>)
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4413      	add	r3, r2
 80084fa:	4a05      	ldr	r2, [pc, #20]	; (8008510 <_sbrk+0x64>)
 80084fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80084fe:	68fb      	ldr	r3, [r7, #12]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	2000c000 	.word	0x2000c000
 800850c:	00000400 	.word	0x00000400
 8008510:	20000484 	.word	0x20000484
 8008514:	200005d8 	.word	0x200005d8

08008518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800851c:	bf00      	nop
 800851e:	46bd      	mov	sp, r7
 8008520:	bc80      	pop	{r7}
 8008522:	4770      	bx	lr

08008524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008524:	480c      	ldr	r0, [pc, #48]	; (8008558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008526:	490d      	ldr	r1, [pc, #52]	; (800855c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008528:	4a0d      	ldr	r2, [pc, #52]	; (8008560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800852a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800852c:	e002      	b.n	8008534 <LoopCopyDataInit>

0800852e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800852e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008532:	3304      	adds	r3, #4

08008534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008538:	d3f9      	bcc.n	800852e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800853a:	4a0a      	ldr	r2, [pc, #40]	; (8008564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800853c:	4c0a      	ldr	r4, [pc, #40]	; (8008568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800853e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008540:	e001      	b.n	8008546 <LoopFillZerobss>

08008542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008544:	3204      	adds	r2, #4

08008546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008548:	d3fb      	bcc.n	8008542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800854a:	f7ff ffe5 	bl	8008518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800854e:	f003 ffb3 	bl	800c4b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008552:	f7ff fb9d 	bl	8007c90 <main>
  bx lr
 8008556:	4770      	bx	lr
  ldr r0, =_sdata
 8008558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800855c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8008560:	0800dc54 	.word	0x0800dc54
  ldr r2, =_sbss
 8008564:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8008568:	200005d4 	.word	0x200005d4

0800856c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800856c:	e7fe      	b.n	800856c <ADC1_2_IRQHandler>
	...

08008570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008574:	4b08      	ldr	r3, [pc, #32]	; (8008598 <HAL_Init+0x28>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a07      	ldr	r2, [pc, #28]	; (8008598 <HAL_Init+0x28>)
 800857a:	f043 0310 	orr.w	r3, r3, #16
 800857e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008580:	2003      	movs	r0, #3
 8008582:	f000 fa43 	bl	8008a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008586:	200f      	movs	r0, #15
 8008588:	f000 f808 	bl	800859c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800858c:	f7ff fdfa 	bl	8008184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	40022000 	.word	0x40022000

0800859c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80085a4:	4b12      	ldr	r3, [pc, #72]	; (80085f0 <HAL_InitTick+0x54>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <HAL_InitTick+0x58>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	4619      	mov	r1, r3
 80085ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80085b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 fa5b 	bl	8008a76 <HAL_SYSTICK_Config>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e00e      	b.n	80085e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b0f      	cmp	r3, #15
 80085ce:	d80a      	bhi.n	80085e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085d0:	2200      	movs	r2, #0
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085d8:	f000 fa23 	bl	8008a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80085dc:	4a06      	ldr	r2, [pc, #24]	; (80085f8 <HAL_InitTick+0x5c>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	e000      	b.n	80085e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	200000a4 	.word	0x200000a4
 80085f4:	200000ac 	.word	0x200000ac
 80085f8:	200000a8 	.word	0x200000a8

080085fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008600:	4b05      	ldr	r3, [pc, #20]	; (8008618 <HAL_IncTick+0x1c>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <HAL_IncTick+0x20>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4413      	add	r3, r2
 800860c:	4a03      	ldr	r2, [pc, #12]	; (800861c <HAL_IncTick+0x20>)
 800860e:	6013      	str	r3, [r2, #0]
}
 8008610:	bf00      	nop
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr
 8008618:	200000ac 	.word	0x200000ac
 800861c:	20000488 	.word	0x20000488

08008620 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
  return uwTick;
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <HAL_GetTick+0x10>)
 8008626:	681b      	ldr	r3, [r3, #0]
}
 8008628:	4618      	mov	r0, r3
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr
 8008630:	20000488 	.word	0x20000488

08008634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800863c:	f7ff fff0 	bl	8008620 <HAL_GetTick>
 8008640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800864c:	d005      	beq.n	800865a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800864e:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <HAL_Delay+0x44>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4413      	add	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800865a:	bf00      	nop
 800865c:	f7ff ffe0 	bl	8008620 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	429a      	cmp	r2, r3
 800866a:	d8f7      	bhi.n	800865c <HAL_Delay+0x28>
  {
  }
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	200000ac 	.word	0x200000ac

0800867c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e0ed      	b.n	800886a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d102      	bne.n	80086a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fda4 	bl	80081e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f042 0201 	orr.w	r2, r2, #1
 80086ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086b0:	f7ff ffb6 	bl	8008620 <HAL_GetTick>
 80086b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80086b6:	e012      	b.n	80086de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80086b8:	f7ff ffb2 	bl	8008620 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b0a      	cmp	r3, #10
 80086c4:	d90b      	bls.n	80086de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2205      	movs	r2, #5
 80086d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e0c5      	b.n	800886a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0e5      	beq.n	80086b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 0202 	bic.w	r2, r2, #2
 80086fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086fc:	f7ff ff90 	bl	8008620 <HAL_GetTick>
 8008700:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008702:	e012      	b.n	800872a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008704:	f7ff ff8c 	bl	8008620 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b0a      	cmp	r3, #10
 8008710:	d90b      	bls.n	800872a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2205      	movs	r2, #5
 8008722:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e09f      	b.n	800886a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e5      	bne.n	8008704 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	7e1b      	ldrb	r3, [r3, #24]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d108      	bne.n	8008752 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	e007      	b.n	8008762 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008760:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	7e5b      	ldrb	r3, [r3, #25]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d108      	bne.n	800877c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008778:	601a      	str	r2, [r3, #0]
 800877a:	e007      	b.n	800878c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800878a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7e9b      	ldrb	r3, [r3, #26]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d108      	bne.n	80087a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0220 	orr.w	r2, r2, #32
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e007      	b.n	80087b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0220 	bic.w	r2, r2, #32
 80087b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7edb      	ldrb	r3, [r3, #27]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d108      	bne.n	80087d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f022 0210 	bic.w	r2, r2, #16
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e007      	b.n	80087e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0210 	orr.w	r2, r2, #16
 80087de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7f1b      	ldrb	r3, [r3, #28]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d108      	bne.n	80087fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0208 	orr.w	r2, r2, #8
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	e007      	b.n	800880a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0208 	bic.w	r2, r2, #8
 8008808:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7f5b      	ldrb	r3, [r3, #29]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d108      	bne.n	8008824 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f042 0204 	orr.w	r2, r2, #4
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	e007      	b.n	8008834 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0204 	bic.w	r2, r2, #4
 8008832:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	431a      	orrs	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	ea42 0103 	orr.w	r1, r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	1e5a      	subs	r2, r3, #1
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <__NVIC_SetPriorityGrouping>:
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008884:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <__NVIC_SetPriorityGrouping+0x44>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008890:	4013      	ands	r3, r2
 8008892:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800889c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80088a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80088a6:	4a04      	ldr	r2, [pc, #16]	; (80088b8 <__NVIC_SetPriorityGrouping+0x44>)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	60d3      	str	r3, [r2, #12]
}
 80088ac:	bf00      	nop
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	e000ed00 	.word	0xe000ed00

080088bc <__NVIC_GetPriorityGrouping>:
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088c0:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <__NVIC_GetPriorityGrouping+0x18>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	0a1b      	lsrs	r3, r3, #8
 80088c6:	f003 0307 	and.w	r3, r3, #7
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bc80      	pop	{r7}
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	e000ed00 	.word	0xe000ed00

080088d8 <__NVIC_EnableIRQ>:
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	db0b      	blt.n	8008902 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	f003 021f 	and.w	r2, r3, #31
 80088f0:	4906      	ldr	r1, [pc, #24]	; (800890c <__NVIC_EnableIRQ+0x34>)
 80088f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088f6:	095b      	lsrs	r3, r3, #5
 80088f8:	2001      	movs	r0, #1
 80088fa:	fa00 f202 	lsl.w	r2, r0, r2
 80088fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008902:	bf00      	nop
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	bc80      	pop	{r7}
 800890a:	4770      	bx	lr
 800890c:	e000e100 	.word	0xe000e100

08008910 <__NVIC_SetPriority>:
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	6039      	str	r1, [r7, #0]
 800891a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800891c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008920:	2b00      	cmp	r3, #0
 8008922:	db0a      	blt.n	800893a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	b2da      	uxtb	r2, r3
 8008928:	490c      	ldr	r1, [pc, #48]	; (800895c <__NVIC_SetPriority+0x4c>)
 800892a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800892e:	0112      	lsls	r2, r2, #4
 8008930:	b2d2      	uxtb	r2, r2
 8008932:	440b      	add	r3, r1
 8008934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008938:	e00a      	b.n	8008950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	b2da      	uxtb	r2, r3
 800893e:	4908      	ldr	r1, [pc, #32]	; (8008960 <__NVIC_SetPriority+0x50>)
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	3b04      	subs	r3, #4
 8008948:	0112      	lsls	r2, r2, #4
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	440b      	add	r3, r1
 800894e:	761a      	strb	r2, [r3, #24]
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	bc80      	pop	{r7}
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	e000e100 	.word	0xe000e100
 8008960:	e000ed00 	.word	0xe000ed00

08008964 <NVIC_EncodePriority>:
{
 8008964:	b480      	push	{r7}
 8008966:	b089      	sub	sp, #36	; 0x24
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	f1c3 0307 	rsb	r3, r3, #7
 800897e:	2b04      	cmp	r3, #4
 8008980:	bf28      	it	cs
 8008982:	2304      	movcs	r3, #4
 8008984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	3304      	adds	r3, #4
 800898a:	2b06      	cmp	r3, #6
 800898c:	d902      	bls.n	8008994 <NVIC_EncodePriority+0x30>
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	3b03      	subs	r3, #3
 8008992:	e000      	b.n	8008996 <NVIC_EncodePriority+0x32>
 8008994:	2300      	movs	r3, #0
 8008996:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	fa02 f303 	lsl.w	r3, r2, r3
 80089a2:	43da      	mvns	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	401a      	ands	r2, r3
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	fa01 f303 	lsl.w	r3, r1, r3
 80089b6:	43d9      	mvns	r1, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089bc:	4313      	orrs	r3, r2
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3724      	adds	r7, #36	; 0x24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089d8:	d301      	bcc.n	80089de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80089da:	2301      	movs	r3, #1
 80089dc:	e00f      	b.n	80089fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80089de:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <SysTick_Config+0x40>)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80089e6:	210f      	movs	r1, #15
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ec:	f7ff ff90 	bl	8008910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089f0:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <SysTick_Config+0x40>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089f6:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <SysTick_Config+0x40>)
 80089f8:	2207      	movs	r2, #7
 80089fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	e000e010 	.word	0xe000e010

08008a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7ff ff2d 	bl	8008874 <__NVIC_SetPriorityGrouping>
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b086      	sub	sp, #24
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	4603      	mov	r3, r0
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	607a      	str	r2, [r7, #4]
 8008a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a34:	f7ff ff42 	bl	80088bc <__NVIC_GetPriorityGrouping>
 8008a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	6978      	ldr	r0, [r7, #20]
 8008a40:	f7ff ff90 	bl	8008964 <NVIC_EncodePriority>
 8008a44:	4602      	mov	r2, r0
 8008a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff ff5f 	bl	8008910 <__NVIC_SetPriority>
}
 8008a52:	bf00      	nop
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	4603      	mov	r3, r0
 8008a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff ff35 	bl	80088d8 <__NVIC_EnableIRQ>
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff ffa2 	bl	80089c8 <SysTick_Config>
 8008a84:	4603      	mov	r3, r0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b085      	sub	sp, #20
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d008      	beq.n	8008ab8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e020      	b.n	8008afa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f022 020e 	bic.w	r2, r2, #14
 8008ac6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f022 0201 	bic.w	r2, r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8008ae6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr

08008b04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d005      	beq.n	8008b28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2204      	movs	r2, #4
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	73fb      	strb	r3, [r7, #15]
 8008b26:	e0d6      	b.n	8008cd6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 020e 	bic.w	r2, r2, #14
 8008b36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0201 	bic.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	4b64      	ldr	r3, [pc, #400]	; (8008ce0 <HAL_DMA_Abort_IT+0x1dc>)
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d958      	bls.n	8008c06 <HAL_DMA_Abort_IT+0x102>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a62      	ldr	r2, [pc, #392]	; (8008ce4 <HAL_DMA_Abort_IT+0x1e0>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d04f      	beq.n	8008bfe <HAL_DMA_Abort_IT+0xfa>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a61      	ldr	r2, [pc, #388]	; (8008ce8 <HAL_DMA_Abort_IT+0x1e4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d048      	beq.n	8008bfa <HAL_DMA_Abort_IT+0xf6>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a5f      	ldr	r2, [pc, #380]	; (8008cec <HAL_DMA_Abort_IT+0x1e8>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d040      	beq.n	8008bf4 <HAL_DMA_Abort_IT+0xf0>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a5e      	ldr	r2, [pc, #376]	; (8008cf0 <HAL_DMA_Abort_IT+0x1ec>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d038      	beq.n	8008bee <HAL_DMA_Abort_IT+0xea>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a5c      	ldr	r2, [pc, #368]	; (8008cf4 <HAL_DMA_Abort_IT+0x1f0>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d030      	beq.n	8008be8 <HAL_DMA_Abort_IT+0xe4>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a5b      	ldr	r2, [pc, #364]	; (8008cf8 <HAL_DMA_Abort_IT+0x1f4>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d028      	beq.n	8008be2 <HAL_DMA_Abort_IT+0xde>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a52      	ldr	r2, [pc, #328]	; (8008ce0 <HAL_DMA_Abort_IT+0x1dc>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d020      	beq.n	8008bdc <HAL_DMA_Abort_IT+0xd8>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a57      	ldr	r2, [pc, #348]	; (8008cfc <HAL_DMA_Abort_IT+0x1f8>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d019      	beq.n	8008bd8 <HAL_DMA_Abort_IT+0xd4>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a55      	ldr	r2, [pc, #340]	; (8008d00 <HAL_DMA_Abort_IT+0x1fc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d012      	beq.n	8008bd4 <HAL_DMA_Abort_IT+0xd0>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a54      	ldr	r2, [pc, #336]	; (8008d04 <HAL_DMA_Abort_IT+0x200>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d00a      	beq.n	8008bce <HAL_DMA_Abort_IT+0xca>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a52      	ldr	r2, [pc, #328]	; (8008d08 <HAL_DMA_Abort_IT+0x204>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d102      	bne.n	8008bc8 <HAL_DMA_Abort_IT+0xc4>
 8008bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bc6:	e01b      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bcc:	e018      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bd2:	e015      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	e013      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e011      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008be0:	e00e      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008be2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008be6:	e00b      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bec:	e008      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bf2:	e005      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bf8:	e002      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008bfa:	2310      	movs	r3, #16
 8008bfc:	e000      	b.n	8008c00 <HAL_DMA_Abort_IT+0xfc>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4a42      	ldr	r2, [pc, #264]	; (8008d0c <HAL_DMA_Abort_IT+0x208>)
 8008c02:	6053      	str	r3, [r2, #4]
 8008c04:	e057      	b.n	8008cb6 <HAL_DMA_Abort_IT+0x1b2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a36      	ldr	r2, [pc, #216]	; (8008ce4 <HAL_DMA_Abort_IT+0x1e0>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d04f      	beq.n	8008cb0 <HAL_DMA_Abort_IT+0x1ac>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a34      	ldr	r2, [pc, #208]	; (8008ce8 <HAL_DMA_Abort_IT+0x1e4>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d048      	beq.n	8008cac <HAL_DMA_Abort_IT+0x1a8>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a33      	ldr	r2, [pc, #204]	; (8008cec <HAL_DMA_Abort_IT+0x1e8>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d040      	beq.n	8008ca6 <HAL_DMA_Abort_IT+0x1a2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a31      	ldr	r2, [pc, #196]	; (8008cf0 <HAL_DMA_Abort_IT+0x1ec>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d038      	beq.n	8008ca0 <HAL_DMA_Abort_IT+0x19c>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a30      	ldr	r2, [pc, #192]	; (8008cf4 <HAL_DMA_Abort_IT+0x1f0>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d030      	beq.n	8008c9a <HAL_DMA_Abort_IT+0x196>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a2e      	ldr	r2, [pc, #184]	; (8008cf8 <HAL_DMA_Abort_IT+0x1f4>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d028      	beq.n	8008c94 <HAL_DMA_Abort_IT+0x190>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a26      	ldr	r2, [pc, #152]	; (8008ce0 <HAL_DMA_Abort_IT+0x1dc>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d020      	beq.n	8008c8e <HAL_DMA_Abort_IT+0x18a>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a2a      	ldr	r2, [pc, #168]	; (8008cfc <HAL_DMA_Abort_IT+0x1f8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d019      	beq.n	8008c8a <HAL_DMA_Abort_IT+0x186>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a29      	ldr	r2, [pc, #164]	; (8008d00 <HAL_DMA_Abort_IT+0x1fc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d012      	beq.n	8008c86 <HAL_DMA_Abort_IT+0x182>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a27      	ldr	r2, [pc, #156]	; (8008d04 <HAL_DMA_Abort_IT+0x200>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00a      	beq.n	8008c80 <HAL_DMA_Abort_IT+0x17c>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a26      	ldr	r2, [pc, #152]	; (8008d08 <HAL_DMA_Abort_IT+0x204>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d102      	bne.n	8008c7a <HAL_DMA_Abort_IT+0x176>
 8008c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c78:	e01b      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c7e:	e018      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c84:	e015      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008c86:	2310      	movs	r3, #16
 8008c88:	e013      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e011      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c92:	e00e      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008c94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c98:	e00b      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008c9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c9e:	e008      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ca4:	e005      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008caa:	e002      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008cac:	2310      	movs	r3, #16
 8008cae:	e000      	b.n	8008cb2 <HAL_DMA_Abort_IT+0x1ae>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	4a17      	ldr	r2, [pc, #92]	; (8008d10 <HAL_DMA_Abort_IT+0x20c>)
 8008cb4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	4798      	blx	r3
    } 
  }
  return status;
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	40020080 	.word	0x40020080
 8008ce4:	40020008 	.word	0x40020008
 8008ce8:	4002001c 	.word	0x4002001c
 8008cec:	40020030 	.word	0x40020030
 8008cf0:	40020044 	.word	0x40020044
 8008cf4:	40020058 	.word	0x40020058
 8008cf8:	4002006c 	.word	0x4002006c
 8008cfc:	40020408 	.word	0x40020408
 8008d00:	4002041c 	.word	0x4002041c
 8008d04:	40020430 	.word	0x40020430
 8008d08:	40020444 	.word	0x40020444
 8008d0c:	40020400 	.word	0x40020400
 8008d10:	40020000 	.word	0x40020000

08008d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b08b      	sub	sp, #44	; 0x2c
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008d22:	2300      	movs	r3, #0
 8008d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d26:	e179      	b.n	800901c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008d28:	2201      	movs	r2, #1
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	69fa      	ldr	r2, [r7, #28]
 8008d38:	4013      	ands	r3, r2
 8008d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	f040 8168 	bne.w	8009016 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	4a96      	ldr	r2, [pc, #600]	; (8008fa4 <HAL_GPIO_Init+0x290>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d05e      	beq.n	8008e0e <HAL_GPIO_Init+0xfa>
 8008d50:	4a94      	ldr	r2, [pc, #592]	; (8008fa4 <HAL_GPIO_Init+0x290>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d875      	bhi.n	8008e42 <HAL_GPIO_Init+0x12e>
 8008d56:	4a94      	ldr	r2, [pc, #592]	; (8008fa8 <HAL_GPIO_Init+0x294>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d058      	beq.n	8008e0e <HAL_GPIO_Init+0xfa>
 8008d5c:	4a92      	ldr	r2, [pc, #584]	; (8008fa8 <HAL_GPIO_Init+0x294>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d86f      	bhi.n	8008e42 <HAL_GPIO_Init+0x12e>
 8008d62:	4a92      	ldr	r2, [pc, #584]	; (8008fac <HAL_GPIO_Init+0x298>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d052      	beq.n	8008e0e <HAL_GPIO_Init+0xfa>
 8008d68:	4a90      	ldr	r2, [pc, #576]	; (8008fac <HAL_GPIO_Init+0x298>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d869      	bhi.n	8008e42 <HAL_GPIO_Init+0x12e>
 8008d6e:	4a90      	ldr	r2, [pc, #576]	; (8008fb0 <HAL_GPIO_Init+0x29c>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d04c      	beq.n	8008e0e <HAL_GPIO_Init+0xfa>
 8008d74:	4a8e      	ldr	r2, [pc, #568]	; (8008fb0 <HAL_GPIO_Init+0x29c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d863      	bhi.n	8008e42 <HAL_GPIO_Init+0x12e>
 8008d7a:	4a8e      	ldr	r2, [pc, #568]	; (8008fb4 <HAL_GPIO_Init+0x2a0>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d046      	beq.n	8008e0e <HAL_GPIO_Init+0xfa>
 8008d80:	4a8c      	ldr	r2, [pc, #560]	; (8008fb4 <HAL_GPIO_Init+0x2a0>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d85d      	bhi.n	8008e42 <HAL_GPIO_Init+0x12e>
 8008d86:	2b12      	cmp	r3, #18
 8008d88:	d82a      	bhi.n	8008de0 <HAL_GPIO_Init+0xcc>
 8008d8a:	2b12      	cmp	r3, #18
 8008d8c:	d859      	bhi.n	8008e42 <HAL_GPIO_Init+0x12e>
 8008d8e:	a201      	add	r2, pc, #4	; (adr r2, 8008d94 <HAL_GPIO_Init+0x80>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008e0f 	.word	0x08008e0f
 8008d98:	08008de9 	.word	0x08008de9
 8008d9c:	08008dfb 	.word	0x08008dfb
 8008da0:	08008e3d 	.word	0x08008e3d
 8008da4:	08008e43 	.word	0x08008e43
 8008da8:	08008e43 	.word	0x08008e43
 8008dac:	08008e43 	.word	0x08008e43
 8008db0:	08008e43 	.word	0x08008e43
 8008db4:	08008e43 	.word	0x08008e43
 8008db8:	08008e43 	.word	0x08008e43
 8008dbc:	08008e43 	.word	0x08008e43
 8008dc0:	08008e43 	.word	0x08008e43
 8008dc4:	08008e43 	.word	0x08008e43
 8008dc8:	08008e43 	.word	0x08008e43
 8008dcc:	08008e43 	.word	0x08008e43
 8008dd0:	08008e43 	.word	0x08008e43
 8008dd4:	08008e43 	.word	0x08008e43
 8008dd8:	08008df1 	.word	0x08008df1
 8008ddc:	08008e05 	.word	0x08008e05
 8008de0:	4a75      	ldr	r2, [pc, #468]	; (8008fb8 <HAL_GPIO_Init+0x2a4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d013      	beq.n	8008e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008de6:	e02c      	b.n	8008e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	623b      	str	r3, [r7, #32]
          break;
 8008dee:	e029      	b.n	8008e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	3304      	adds	r3, #4
 8008df6:	623b      	str	r3, [r7, #32]
          break;
 8008df8:	e024      	b.n	8008e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	3308      	adds	r3, #8
 8008e00:	623b      	str	r3, [r7, #32]
          break;
 8008e02:	e01f      	b.n	8008e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	330c      	adds	r3, #12
 8008e0a:	623b      	str	r3, [r7, #32]
          break;
 8008e0c:	e01a      	b.n	8008e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d102      	bne.n	8008e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008e16:	2304      	movs	r3, #4
 8008e18:	623b      	str	r3, [r7, #32]
          break;
 8008e1a:	e013      	b.n	8008e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d105      	bne.n	8008e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e24:	2308      	movs	r3, #8
 8008e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	611a      	str	r2, [r3, #16]
          break;
 8008e2e:	e009      	b.n	8008e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e30:	2308      	movs	r3, #8
 8008e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	615a      	str	r2, [r3, #20]
          break;
 8008e3a:	e003      	b.n	8008e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	623b      	str	r3, [r7, #32]
          break;
 8008e40:	e000      	b.n	8008e44 <HAL_GPIO_Init+0x130>
          break;
 8008e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	2bff      	cmp	r3, #255	; 0xff
 8008e48:	d801      	bhi.n	8008e4e <HAL_GPIO_Init+0x13a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	e001      	b.n	8008e52 <HAL_GPIO_Init+0x13e>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3304      	adds	r3, #4
 8008e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	2bff      	cmp	r3, #255	; 0xff
 8008e58:	d802      	bhi.n	8008e60 <HAL_GPIO_Init+0x14c>
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	e002      	b.n	8008e66 <HAL_GPIO_Init+0x152>
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	3b08      	subs	r3, #8
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	210f      	movs	r1, #15
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	fa01 f303 	lsl.w	r3, r1, r3
 8008e74:	43db      	mvns	r3, r3
 8008e76:	401a      	ands	r2, r3
 8008e78:	6a39      	ldr	r1, [r7, #32]
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e80:	431a      	orrs	r2, r3
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 80c1 	beq.w	8009016 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008e94:	4b49      	ldr	r3, [pc, #292]	; (8008fbc <HAL_GPIO_Init+0x2a8>)
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	4a48      	ldr	r2, [pc, #288]	; (8008fbc <HAL_GPIO_Init+0x2a8>)
 8008e9a:	f043 0301 	orr.w	r3, r3, #1
 8008e9e:	6193      	str	r3, [r2, #24]
 8008ea0:	4b46      	ldr	r3, [pc, #280]	; (8008fbc <HAL_GPIO_Init+0x2a8>)
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	60bb      	str	r3, [r7, #8]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008eac:	4a44      	ldr	r2, [pc, #272]	; (8008fc0 <HAL_GPIO_Init+0x2ac>)
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	089b      	lsrs	r3, r3, #2
 8008eb2:	3302      	adds	r3, #2
 8008eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	f003 0303 	and.w	r3, r3, #3
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	220f      	movs	r2, #15
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a3c      	ldr	r2, [pc, #240]	; (8008fc4 <HAL_GPIO_Init+0x2b0>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d01f      	beq.n	8008f18 <HAL_GPIO_Init+0x204>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a3b      	ldr	r2, [pc, #236]	; (8008fc8 <HAL_GPIO_Init+0x2b4>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d019      	beq.n	8008f14 <HAL_GPIO_Init+0x200>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a3a      	ldr	r2, [pc, #232]	; (8008fcc <HAL_GPIO_Init+0x2b8>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d013      	beq.n	8008f10 <HAL_GPIO_Init+0x1fc>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a39      	ldr	r2, [pc, #228]	; (8008fd0 <HAL_GPIO_Init+0x2bc>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d00d      	beq.n	8008f0c <HAL_GPIO_Init+0x1f8>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a38      	ldr	r2, [pc, #224]	; (8008fd4 <HAL_GPIO_Init+0x2c0>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d007      	beq.n	8008f08 <HAL_GPIO_Init+0x1f4>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a37      	ldr	r2, [pc, #220]	; (8008fd8 <HAL_GPIO_Init+0x2c4>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d101      	bne.n	8008f04 <HAL_GPIO_Init+0x1f0>
 8008f00:	2305      	movs	r3, #5
 8008f02:	e00a      	b.n	8008f1a <HAL_GPIO_Init+0x206>
 8008f04:	2306      	movs	r3, #6
 8008f06:	e008      	b.n	8008f1a <HAL_GPIO_Init+0x206>
 8008f08:	2304      	movs	r3, #4
 8008f0a:	e006      	b.n	8008f1a <HAL_GPIO_Init+0x206>
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e004      	b.n	8008f1a <HAL_GPIO_Init+0x206>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e002      	b.n	8008f1a <HAL_GPIO_Init+0x206>
 8008f14:	2301      	movs	r3, #1
 8008f16:	e000      	b.n	8008f1a <HAL_GPIO_Init+0x206>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1c:	f002 0203 	and.w	r2, r2, #3
 8008f20:	0092      	lsls	r2, r2, #2
 8008f22:	4093      	lsls	r3, r2
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008f2a:	4925      	ldr	r1, [pc, #148]	; (8008fc0 <HAL_GPIO_Init+0x2ac>)
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	089b      	lsrs	r3, r3, #2
 8008f30:	3302      	adds	r3, #2
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d006      	beq.n	8008f52 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008f44:	4b25      	ldr	r3, [pc, #148]	; (8008fdc <HAL_GPIO_Init+0x2c8>)
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	4924      	ldr	r1, [pc, #144]	; (8008fdc <HAL_GPIO_Init+0x2c8>)
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	608b      	str	r3, [r1, #8]
 8008f50:	e006      	b.n	8008f60 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008f52:	4b22      	ldr	r3, [pc, #136]	; (8008fdc <HAL_GPIO_Init+0x2c8>)
 8008f54:	689a      	ldr	r2, [r3, #8]
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	43db      	mvns	r3, r3
 8008f5a:	4920      	ldr	r1, [pc, #128]	; (8008fdc <HAL_GPIO_Init+0x2c8>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d006      	beq.n	8008f7a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008f6c:	4b1b      	ldr	r3, [pc, #108]	; (8008fdc <HAL_GPIO_Init+0x2c8>)
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	491a      	ldr	r1, [pc, #104]	; (8008fdc <HAL_GPIO_Init+0x2c8>)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	60cb      	str	r3, [r1, #12]
 8008f78:	e006      	b.n	8008f88 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008f7a:	4b18      	ldr	r3, [pc, #96]	; (8008fdc <HAL_GPIO_Init+0x2c8>)
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	4916      	ldr	r1, [pc, #88]	; (8008fdc <HAL_GPIO_Init+0x2c8>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d025      	beq.n	8008fe0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008f94:	4b11      	ldr	r3, [pc, #68]	; (8008fdc <HAL_GPIO_Init+0x2c8>)
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	4910      	ldr	r1, [pc, #64]	; (8008fdc <HAL_GPIO_Init+0x2c8>)
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	604b      	str	r3, [r1, #4]
 8008fa0:	e025      	b.n	8008fee <HAL_GPIO_Init+0x2da>
 8008fa2:	bf00      	nop
 8008fa4:	10320000 	.word	0x10320000
 8008fa8:	10310000 	.word	0x10310000
 8008fac:	10220000 	.word	0x10220000
 8008fb0:	10210000 	.word	0x10210000
 8008fb4:	10120000 	.word	0x10120000
 8008fb8:	10110000 	.word	0x10110000
 8008fbc:	40021000 	.word	0x40021000
 8008fc0:	40010000 	.word	0x40010000
 8008fc4:	40010800 	.word	0x40010800
 8008fc8:	40010c00 	.word	0x40010c00
 8008fcc:	40011000 	.word	0x40011000
 8008fd0:	40011400 	.word	0x40011400
 8008fd4:	40011800 	.word	0x40011800
 8008fd8:	40011c00 	.word	0x40011c00
 8008fdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008fe0:	4b15      	ldr	r3, [pc, #84]	; (8009038 <HAL_GPIO_Init+0x324>)
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	43db      	mvns	r3, r3
 8008fe8:	4913      	ldr	r1, [pc, #76]	; (8009038 <HAL_GPIO_Init+0x324>)
 8008fea:	4013      	ands	r3, r2
 8008fec:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d006      	beq.n	8009008 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008ffa:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <HAL_GPIO_Init+0x324>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	490e      	ldr	r1, [pc, #56]	; (8009038 <HAL_GPIO_Init+0x324>)
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	4313      	orrs	r3, r2
 8009004:	600b      	str	r3, [r1, #0]
 8009006:	e006      	b.n	8009016 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009008:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <HAL_GPIO_Init+0x324>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	43db      	mvns	r3, r3
 8009010:	4909      	ldr	r1, [pc, #36]	; (8009038 <HAL_GPIO_Init+0x324>)
 8009012:	4013      	ands	r3, r2
 8009014:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	3301      	adds	r3, #1
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	fa22 f303 	lsr.w	r3, r2, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	f47f ae7e 	bne.w	8008d28 <HAL_GPIO_Init+0x14>
  }
}
 800902c:	bf00      	nop
 800902e:	bf00      	nop
 8009030:	372c      	adds	r7, #44	; 0x2c
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr
 8009038:	40010400 	.word	0x40010400

0800903c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800903c:	b480      	push	{r7}
 800903e:	b089      	sub	sp, #36	; 0x24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009046:	2300      	movs	r3, #0
 8009048:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800904a:	e0a6      	b.n	800919a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800904c:	2201      	movs	r2, #1
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	4013      	ands	r3, r2
 8009058:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 8099 	beq.w	8009194 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009062:	4a54      	ldr	r2, [pc, #336]	; (80091b4 <HAL_GPIO_DeInit+0x178>)
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	089b      	lsrs	r3, r3, #2
 8009068:	3302      	adds	r3, #2
 800906a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800906e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f003 0303 	and.w	r3, r3, #3
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	220f      	movs	r2, #15
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	4013      	ands	r3, r2
 8009082:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a4c      	ldr	r2, [pc, #304]	; (80091b8 <HAL_GPIO_DeInit+0x17c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d01f      	beq.n	80090cc <HAL_GPIO_DeInit+0x90>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a4b      	ldr	r2, [pc, #300]	; (80091bc <HAL_GPIO_DeInit+0x180>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d019      	beq.n	80090c8 <HAL_GPIO_DeInit+0x8c>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a4a      	ldr	r2, [pc, #296]	; (80091c0 <HAL_GPIO_DeInit+0x184>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d013      	beq.n	80090c4 <HAL_GPIO_DeInit+0x88>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a49      	ldr	r2, [pc, #292]	; (80091c4 <HAL_GPIO_DeInit+0x188>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d00d      	beq.n	80090c0 <HAL_GPIO_DeInit+0x84>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a48      	ldr	r2, [pc, #288]	; (80091c8 <HAL_GPIO_DeInit+0x18c>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d007      	beq.n	80090bc <HAL_GPIO_DeInit+0x80>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a47      	ldr	r2, [pc, #284]	; (80091cc <HAL_GPIO_DeInit+0x190>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d101      	bne.n	80090b8 <HAL_GPIO_DeInit+0x7c>
 80090b4:	2305      	movs	r3, #5
 80090b6:	e00a      	b.n	80090ce <HAL_GPIO_DeInit+0x92>
 80090b8:	2306      	movs	r3, #6
 80090ba:	e008      	b.n	80090ce <HAL_GPIO_DeInit+0x92>
 80090bc:	2304      	movs	r3, #4
 80090be:	e006      	b.n	80090ce <HAL_GPIO_DeInit+0x92>
 80090c0:	2303      	movs	r3, #3
 80090c2:	e004      	b.n	80090ce <HAL_GPIO_DeInit+0x92>
 80090c4:	2302      	movs	r3, #2
 80090c6:	e002      	b.n	80090ce <HAL_GPIO_DeInit+0x92>
 80090c8:	2301      	movs	r3, #1
 80090ca:	e000      	b.n	80090ce <HAL_GPIO_DeInit+0x92>
 80090cc:	2300      	movs	r3, #0
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	f002 0203 	and.w	r2, r2, #3
 80090d4:	0092      	lsls	r2, r2, #2
 80090d6:	4093      	lsls	r3, r2
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d132      	bne.n	8009144 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80090de:	4b3c      	ldr	r3, [pc, #240]	; (80091d0 <HAL_GPIO_DeInit+0x194>)
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	43db      	mvns	r3, r3
 80090e6:	493a      	ldr	r1, [pc, #232]	; (80091d0 <HAL_GPIO_DeInit+0x194>)
 80090e8:	4013      	ands	r3, r2
 80090ea:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80090ec:	4b38      	ldr	r3, [pc, #224]	; (80091d0 <HAL_GPIO_DeInit+0x194>)
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	43db      	mvns	r3, r3
 80090f4:	4936      	ldr	r1, [pc, #216]	; (80091d0 <HAL_GPIO_DeInit+0x194>)
 80090f6:	4013      	ands	r3, r2
 80090f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80090fa:	4b35      	ldr	r3, [pc, #212]	; (80091d0 <HAL_GPIO_DeInit+0x194>)
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	43db      	mvns	r3, r3
 8009102:	4933      	ldr	r1, [pc, #204]	; (80091d0 <HAL_GPIO_DeInit+0x194>)
 8009104:	4013      	ands	r3, r2
 8009106:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009108:	4b31      	ldr	r3, [pc, #196]	; (80091d0 <HAL_GPIO_DeInit+0x194>)
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	43db      	mvns	r3, r3
 8009110:	492f      	ldr	r1, [pc, #188]	; (80091d0 <HAL_GPIO_DeInit+0x194>)
 8009112:	4013      	ands	r3, r2
 8009114:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	f003 0303 	and.w	r3, r3, #3
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	220f      	movs	r2, #15
 8009120:	fa02 f303 	lsl.w	r3, r2, r3
 8009124:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009126:	4a23      	ldr	r2, [pc, #140]	; (80091b4 <HAL_GPIO_DeInit+0x178>)
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	089b      	lsrs	r3, r3, #2
 800912c:	3302      	adds	r3, #2
 800912e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	43da      	mvns	r2, r3
 8009136:	481f      	ldr	r0, [pc, #124]	; (80091b4 <HAL_GPIO_DeInit+0x178>)
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	089b      	lsrs	r3, r3, #2
 800913c:	400a      	ands	r2, r1
 800913e:	3302      	adds	r3, #2
 8009140:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	2bff      	cmp	r3, #255	; 0xff
 8009148:	d801      	bhi.n	800914e <HAL_GPIO_DeInit+0x112>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	e001      	b.n	8009152 <HAL_GPIO_DeInit+0x116>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	3304      	adds	r3, #4
 8009152:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	2bff      	cmp	r3, #255	; 0xff
 8009158:	d802      	bhi.n	8009160 <HAL_GPIO_DeInit+0x124>
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	e002      	b.n	8009166 <HAL_GPIO_DeInit+0x12a>
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	3b08      	subs	r3, #8
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	210f      	movs	r1, #15
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	fa01 f303 	lsl.w	r3, r1, r3
 8009174:	43db      	mvns	r3, r3
 8009176:	401a      	ands	r2, r3
 8009178:	2104      	movs	r1, #4
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	fa01 f303 	lsl.w	r3, r1, r3
 8009180:	431a      	orrs	r2, r3
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	43db      	mvns	r3, r3
 800918e:	401a      	ands	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	3301      	adds	r3, #1
 8009198:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	fa22 f303 	lsr.w	r3, r2, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f47f af52 	bne.w	800904c <HAL_GPIO_DeInit+0x10>
  }
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	3724      	adds	r7, #36	; 0x24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bc80      	pop	{r7}
 80091b2:	4770      	bx	lr
 80091b4:	40010000 	.word	0x40010000
 80091b8:	40010800 	.word	0x40010800
 80091bc:	40010c00 	.word	0x40010c00
 80091c0:	40011000 	.word	0x40011000
 80091c4:	40011400 	.word	0x40011400
 80091c8:	40011800 	.word	0x40011800
 80091cc:	40011c00 	.word	0x40011c00
 80091d0:	40010400 	.word	0x40010400

080091d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	887b      	ldrh	r3, [r7, #2]
 80091e6:	4013      	ands	r3, r2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80091ec:	2301      	movs	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
 80091f0:	e001      	b.n	80091f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bc80      	pop	{r7}
 8009200:	4770      	bx	lr

08009202 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	460b      	mov	r3, r1
 800920c:	807b      	strh	r3, [r7, #2]
 800920e:	4613      	mov	r3, r2
 8009210:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009212:	787b      	ldrb	r3, [r7, #1]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009218:	887a      	ldrh	r2, [r7, #2]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800921e:	e003      	b.n	8009228 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009220:	887b      	ldrh	r3, [r7, #2]
 8009222:	041a      	lsls	r2, r3, #16
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	611a      	str	r2, [r3, #16]
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	bc80      	pop	{r7}
 8009230:	4770      	bx	lr

08009232 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009244:	887a      	ldrh	r2, [r7, #2]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	4013      	ands	r3, r2
 800924a:	041a      	lsls	r2, r3, #16
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	43d9      	mvns	r1, r3
 8009250:	887b      	ldrh	r3, [r7, #2]
 8009252:	400b      	ands	r3, r1
 8009254:	431a      	orrs	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	611a      	str	r2, [r3, #16]
}
 800925a:	bf00      	nop
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	bc80      	pop	{r7}
 8009262:	4770      	bx	lr

08009264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e12b      	b.n	80094ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fe fff8 	bl	8008280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2224      	movs	r2, #36	; 0x24
 8009294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0201 	bic.w	r2, r2, #1
 80092a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80092c8:	f001 fdb8 	bl	800ae3c <HAL_RCC_GetPCLK1Freq>
 80092cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	4a81      	ldr	r2, [pc, #516]	; (80094d8 <HAL_I2C_Init+0x274>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d807      	bhi.n	80092e8 <HAL_I2C_Init+0x84>
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4a80      	ldr	r2, [pc, #512]	; (80094dc <HAL_I2C_Init+0x278>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	bf94      	ite	ls
 80092e0:	2301      	movls	r3, #1
 80092e2:	2300      	movhi	r3, #0
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	e006      	b.n	80092f6 <HAL_I2C_Init+0x92>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4a7d      	ldr	r2, [pc, #500]	; (80094e0 <HAL_I2C_Init+0x27c>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	bf94      	ite	ls
 80092f0:	2301      	movls	r3, #1
 80092f2:	2300      	movhi	r3, #0
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e0e7      	b.n	80094ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4a78      	ldr	r2, [pc, #480]	; (80094e4 <HAL_I2C_Init+0x280>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	0c9b      	lsrs	r3, r3, #18
 8009308:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	430a      	orrs	r2, r1
 800931c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	4a6a      	ldr	r2, [pc, #424]	; (80094d8 <HAL_I2C_Init+0x274>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d802      	bhi.n	8009338 <HAL_I2C_Init+0xd4>
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	3301      	adds	r3, #1
 8009336:	e009      	b.n	800934c <HAL_I2C_Init+0xe8>
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800933e:	fb02 f303 	mul.w	r3, r2, r3
 8009342:	4a69      	ldr	r2, [pc, #420]	; (80094e8 <HAL_I2C_Init+0x284>)
 8009344:	fba2 2303 	umull	r2, r3, r2, r3
 8009348:	099b      	lsrs	r3, r3, #6
 800934a:	3301      	adds	r3, #1
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	6812      	ldr	r2, [r2, #0]
 8009350:	430b      	orrs	r3, r1
 8009352:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800935e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	495c      	ldr	r1, [pc, #368]	; (80094d8 <HAL_I2C_Init+0x274>)
 8009368:	428b      	cmp	r3, r1
 800936a:	d819      	bhi.n	80093a0 <HAL_I2C_Init+0x13c>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	1e59      	subs	r1, r3, #1
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	fbb1 f3f3 	udiv	r3, r1, r3
 800937a:	1c59      	adds	r1, r3, #1
 800937c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009380:	400b      	ands	r3, r1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <HAL_I2C_Init+0x138>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	1e59      	subs	r1, r3, #1
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	005b      	lsls	r3, r3, #1
 8009390:	fbb1 f3f3 	udiv	r3, r1, r3
 8009394:	3301      	adds	r3, #1
 8009396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800939a:	e051      	b.n	8009440 <HAL_I2C_Init+0x1dc>
 800939c:	2304      	movs	r3, #4
 800939e:	e04f      	b.n	8009440 <HAL_I2C_Init+0x1dc>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d111      	bne.n	80093cc <HAL_I2C_Init+0x168>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	1e58      	subs	r0, r3, #1
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6859      	ldr	r1, [r3, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	440b      	add	r3, r1
 80093b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80093ba:	3301      	adds	r3, #1
 80093bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bf0c      	ite	eq
 80093c4:	2301      	moveq	r3, #1
 80093c6:	2300      	movne	r3, #0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	e012      	b.n	80093f2 <HAL_I2C_Init+0x18e>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	1e58      	subs	r0, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6859      	ldr	r1, [r3, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	440b      	add	r3, r1
 80093da:	0099      	lsls	r1, r3, #2
 80093dc:	440b      	add	r3, r1
 80093de:	fbb0 f3f3 	udiv	r3, r0, r3
 80093e2:	3301      	adds	r3, #1
 80093e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bf0c      	ite	eq
 80093ec:	2301      	moveq	r3, #1
 80093ee:	2300      	movne	r3, #0
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <HAL_I2C_Init+0x196>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e022      	b.n	8009440 <HAL_I2C_Init+0x1dc>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10e      	bne.n	8009420 <HAL_I2C_Init+0x1bc>
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	1e58      	subs	r0, r3, #1
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6859      	ldr	r1, [r3, #4]
 800940a:	460b      	mov	r3, r1
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	440b      	add	r3, r1
 8009410:	fbb0 f3f3 	udiv	r3, r0, r3
 8009414:	3301      	adds	r3, #1
 8009416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800941a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800941e:	e00f      	b.n	8009440 <HAL_I2C_Init+0x1dc>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	1e58      	subs	r0, r3, #1
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6859      	ldr	r1, [r3, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	440b      	add	r3, r1
 800942e:	0099      	lsls	r1, r3, #2
 8009430:	440b      	add	r3, r1
 8009432:	fbb0 f3f3 	udiv	r3, r0, r3
 8009436:	3301      	adds	r3, #1
 8009438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800943c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	6809      	ldr	r1, [r1, #0]
 8009444:	4313      	orrs	r3, r2
 8009446:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	69da      	ldr	r2, [r3, #28]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	431a      	orrs	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800946e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6911      	ldr	r1, [r2, #16]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	68d2      	ldr	r2, [r2, #12]
 800947a:	4311      	orrs	r1, r2
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	6812      	ldr	r2, [r2, #0]
 8009480:	430b      	orrs	r3, r1
 8009482:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	695a      	ldr	r2, [r3, #20]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 0201 	orr.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	000186a0 	.word	0x000186a0
 80094dc:	001e847f 	.word	0x001e847f
 80094e0:	003d08ff 	.word	0x003d08ff
 80094e4:	431bde83 	.word	0x431bde83
 80094e8:	10624dd3 	.word	0x10624dd3

080094ec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e021      	b.n	8009542 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2224      	movs	r2, #36	; 0x24
 8009502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0201 	bic.w	r2, r2, #1
 8009514:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fe fef0 	bl	80082fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af02      	add	r7, sp, #8
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	607a      	str	r2, [r7, #4]
 8009556:	461a      	mov	r2, r3
 8009558:	460b      	mov	r3, r1
 800955a:	817b      	strh	r3, [r7, #10]
 800955c:	4613      	mov	r3, r2
 800955e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009560:	f7ff f85e 	bl	8008620 <HAL_GetTick>
 8009564:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b20      	cmp	r3, #32
 8009570:	f040 80e0 	bne.w	8009734 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	2319      	movs	r3, #25
 800957a:	2201      	movs	r2, #1
 800957c:	4970      	ldr	r1, [pc, #448]	; (8009740 <HAL_I2C_Master_Transmit+0x1f4>)
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 fe5c 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800958a:	2302      	movs	r3, #2
 800958c:	e0d3      	b.n	8009736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <HAL_I2C_Master_Transmit+0x50>
 8009598:	2302      	movs	r3, #2
 800959a:	e0cc      	b.n	8009736 <HAL_I2C_Master_Transmit+0x1ea>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d007      	beq.n	80095c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0201 	orr.w	r2, r2, #1
 80095c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2221      	movs	r2, #33	; 0x21
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2210      	movs	r2, #16
 80095de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	893a      	ldrh	r2, [r7, #8]
 80095f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	4a50      	ldr	r2, [pc, #320]	; (8009744 <HAL_I2C_Master_Transmit+0x1f8>)
 8009602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009604:	8979      	ldrh	r1, [r7, #10]
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	6a3a      	ldr	r2, [r7, #32]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 fc16 	bl	8009e3c <I2C_MasterRequestWrite>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e08d      	b.n	8009736 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800961a:	2300      	movs	r3, #0
 800961c:	613b      	str	r3, [r7, #16]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	613b      	str	r3, [r7, #16]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	613b      	str	r3, [r7, #16]
 800962e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009630:	e066      	b.n	8009700 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	6a39      	ldr	r1, [r7, #32]
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 ff1a 	bl	800a470 <I2C_WaitOnTXEFlagUntilTimeout>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d00d      	beq.n	800965e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009646:	2b04      	cmp	r3, #4
 8009648:	d107      	bne.n	800965a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009658:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e06b      	b.n	8009736 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009662:	781a      	ldrb	r2, [r3, #0]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009678:	b29b      	uxth	r3, r3
 800967a:	3b01      	subs	r3, #1
 800967c:	b29a      	uxth	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009686:	3b01      	subs	r3, #1
 8009688:	b29a      	uxth	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	f003 0304 	and.w	r3, r3, #4
 8009698:	2b04      	cmp	r3, #4
 800969a:	d11b      	bne.n	80096d4 <HAL_I2C_Master_Transmit+0x188>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d017      	beq.n	80096d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	781a      	ldrb	r2, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096be:	b29b      	uxth	r3, r3
 80096c0:	3b01      	subs	r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096cc:	3b01      	subs	r3, #1
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	6a39      	ldr	r1, [r7, #32]
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 ff11 	bl	800a500 <I2C_WaitOnBTFFlagUntilTimeout>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00d      	beq.n	8009700 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d107      	bne.n	80096fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e01a      	b.n	8009736 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009704:	2b00      	cmp	r3, #0
 8009706:	d194      	bne.n	8009632 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2220      	movs	r2, #32
 800971c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	e000      	b.n	8009736 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009734:	2302      	movs	r3, #2
  }
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	00100002 	.word	0x00100002
 8009744:	ffff0000 	.word	0xffff0000

08009748 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	4608      	mov	r0, r1
 8009752:	4611      	mov	r1, r2
 8009754:	461a      	mov	r2, r3
 8009756:	4603      	mov	r3, r0
 8009758:	817b      	strh	r3, [r7, #10]
 800975a:	460b      	mov	r3, r1
 800975c:	813b      	strh	r3, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009762:	f7fe ff5d 	bl	8008620 <HAL_GetTick>
 8009766:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b20      	cmp	r3, #32
 8009772:	f040 80d9 	bne.w	8009928 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	2319      	movs	r3, #25
 800977c:	2201      	movs	r2, #1
 800977e:	496d      	ldr	r1, [pc, #436]	; (8009934 <HAL_I2C_Mem_Write+0x1ec>)
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f000 fd5b 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800978c:	2302      	movs	r3, #2
 800978e:	e0cc      	b.n	800992a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <HAL_I2C_Mem_Write+0x56>
 800979a:	2302      	movs	r3, #2
 800979c:	e0c5      	b.n	800992a <HAL_I2C_Mem_Write+0x1e2>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d007      	beq.n	80097c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f042 0201 	orr.w	r2, r2, #1
 80097c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2221      	movs	r2, #33	; 0x21
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2240      	movs	r2, #64	; 0x40
 80097e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6a3a      	ldr	r2, [r7, #32]
 80097ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80097f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a4d      	ldr	r2, [pc, #308]	; (8009938 <HAL_I2C_Mem_Write+0x1f0>)
 8009804:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009806:	88f8      	ldrh	r0, [r7, #6]
 8009808:	893a      	ldrh	r2, [r7, #8]
 800980a:	8979      	ldrh	r1, [r7, #10]
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	4603      	mov	r3, r0
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fb92 	bl	8009f40 <I2C_RequestMemoryWrite>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d052      	beq.n	80098c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e081      	b.n	800992a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fe20 	bl	800a470 <I2C_WaitOnTXEFlagUntilTimeout>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00d      	beq.n	8009852 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983a:	2b04      	cmp	r3, #4
 800983c:	d107      	bne.n	800984e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800984c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e06b      	b.n	800992a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	781a      	ldrb	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800986c:	3b01      	subs	r3, #1
 800986e:	b29a      	uxth	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009878:	b29b      	uxth	r3, r3
 800987a:	3b01      	subs	r3, #1
 800987c:	b29a      	uxth	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	f003 0304 	and.w	r3, r3, #4
 800988c:	2b04      	cmp	r3, #4
 800988e:	d11b      	bne.n	80098c8 <HAL_I2C_Mem_Write+0x180>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009894:	2b00      	cmp	r3, #0
 8009896:	d017      	beq.n	80098c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	781a      	ldrb	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	1c5a      	adds	r2, r3, #1
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b2:	3b01      	subs	r3, #1
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1aa      	bne.n	8009826 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f000 fe13 	bl	800a500 <I2C_WaitOnBTFFlagUntilTimeout>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00d      	beq.n	80098fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	d107      	bne.n	80098f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e016      	b.n	800992a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800990a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2220      	movs	r2, #32
 8009910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	e000      	b.n	800992a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009928:	2302      	movs	r3, #2
  }
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	00100002 	.word	0x00100002
 8009938:	ffff0000 	.word	0xffff0000

0800993c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08c      	sub	sp, #48	; 0x30
 8009940:	af02      	add	r7, sp, #8
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	461a      	mov	r2, r3
 800994a:	4603      	mov	r3, r0
 800994c:	817b      	strh	r3, [r7, #10]
 800994e:	460b      	mov	r3, r1
 8009950:	813b      	strh	r3, [r7, #8]
 8009952:	4613      	mov	r3, r2
 8009954:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009956:	2300      	movs	r3, #0
 8009958:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800995a:	f7fe fe61 	bl	8008620 <HAL_GetTick>
 800995e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009966:	b2db      	uxtb	r3, r3
 8009968:	2b20      	cmp	r3, #32
 800996a:	f040 8244 	bne.w	8009df6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	2319      	movs	r3, #25
 8009974:	2201      	movs	r2, #1
 8009976:	4982      	ldr	r1, [pc, #520]	; (8009b80 <HAL_I2C_Mem_Read+0x244>)
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 fc5f 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009984:	2302      	movs	r3, #2
 8009986:	e237      	b.n	8009df8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998e:	2b01      	cmp	r3, #1
 8009990:	d101      	bne.n	8009996 <HAL_I2C_Mem_Read+0x5a>
 8009992:	2302      	movs	r3, #2
 8009994:	e230      	b.n	8009df8 <HAL_I2C_Mem_Read+0x4bc>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d007      	beq.n	80099bc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f042 0201 	orr.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2222      	movs	r2, #34	; 0x22
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2240      	movs	r2, #64	; 0x40
 80099d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80099ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4a62      	ldr	r2, [pc, #392]	; (8009b84 <HAL_I2C_Mem_Read+0x248>)
 80099fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099fe:	88f8      	ldrh	r0, [r7, #6]
 8009a00:	893a      	ldrh	r2, [r7, #8]
 8009a02:	8979      	ldrh	r1, [r7, #10]
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fb2c 	bl	800a06c <I2C_RequestMemoryRead>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e1ec      	b.n	8009df8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d113      	bne.n	8009a4e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a26:	2300      	movs	r3, #0
 8009a28:	61fb      	str	r3, [r7, #28]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	61fb      	str	r3, [r7, #28]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	61fb      	str	r3, [r7, #28]
 8009a3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	e1c0      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d11e      	bne.n	8009a94 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a66:	b672      	cpsid	i
}
 8009a68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	61bb      	str	r3, [r7, #24]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	61bb      	str	r3, [r7, #24]
 8009a7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009a90:	b662      	cpsie	i
}
 8009a92:	e035      	b.n	8009b00 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d11e      	bne.n	8009ada <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009aac:	b672      	cpsid	i
}
 8009aae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ad4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009ad6:	b662      	cpsie	i
}
 8009ad8:	e012      	b.n	8009b00 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ae8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aea:	2300      	movs	r3, #0
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	695b      	ldr	r3, [r3, #20]
 8009af4:	613b      	str	r3, [r7, #16]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	613b      	str	r3, [r7, #16]
 8009afe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009b00:	e166      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	f200 811f 	bhi.w	8009d4a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d123      	bne.n	8009b5c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f000 fd39 	bl	800a590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e167      	b.n	8009df8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	691a      	ldr	r2, [r3, #16]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	b2d2      	uxtb	r2, r2
 8009b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b44:	3b01      	subs	r3, #1
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b5a:	e139      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d152      	bne.n	8009c0a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	4906      	ldr	r1, [pc, #24]	; (8009b88 <HAL_I2C_Mem_Read+0x24c>)
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f000 fb64 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d008      	beq.n	8009b8c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e13c      	b.n	8009df8 <HAL_I2C_Mem_Read+0x4bc>
 8009b7e:	bf00      	nop
 8009b80:	00100002 	.word	0x00100002
 8009b84:	ffff0000 	.word	0xffff0000
 8009b88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009b8c:	b672      	cpsid	i
}
 8009b8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	691a      	ldr	r2, [r3, #16]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	b2d2      	uxtb	r2, r2
 8009bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009bd2:	b662      	cpsie	i
}
 8009bd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	691a      	ldr	r2, [r3, #16]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be0:	b2d2      	uxtb	r2, r2
 8009be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c08:	e0e2      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c10:	2200      	movs	r2, #0
 8009c12:	497b      	ldr	r1, [pc, #492]	; (8009e00 <HAL_I2C_Mem_Read+0x4c4>)
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f000 fb11 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e0e9      	b.n	8009df8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c34:	b672      	cpsid	i
}
 8009c36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	691a      	ldr	r2, [r3, #16]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	b2d2      	uxtb	r2, r2
 8009c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	1c5a      	adds	r2, r3, #1
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009c6a:	4b66      	ldr	r3, [pc, #408]	; (8009e04 <HAL_I2C_Mem_Read+0x4c8>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	08db      	lsrs	r3, r3, #3
 8009c70:	4a65      	ldr	r2, [pc, #404]	; (8009e08 <HAL_I2C_Mem_Read+0x4cc>)
 8009c72:	fba2 2303 	umull	r2, r3, r2, r3
 8009c76:	0a1a      	lsrs	r2, r3, #8
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	00da      	lsls	r2, r3, #3
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009c8a:	6a3b      	ldr	r3, [r7, #32]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d118      	bne.n	8009cc2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	f043 0220 	orr.w	r2, r3, #32
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009cb2:	b662      	cpsie	i
}
 8009cb4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e09a      	b.n	8009df8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b04      	cmp	r3, #4
 8009cce:	d1d9      	bne.n	8009c84 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	691a      	ldr	r2, [r3, #16]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cea:	b2d2      	uxtb	r2, r2
 8009cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d12:	b662      	cpsie	i
}
 8009d14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	b2d2      	uxtb	r2, r2
 8009d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d48:	e042      	b.n	8009dd0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 fc1e 	bl	800a590 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e04c      	b.n	8009df8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	691a      	ldr	r2, [r3, #16]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	b2d2      	uxtb	r2, r2
 8009d6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	d118      	bne.n	8009dd0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	691a      	ldr	r2, [r3, #16]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f47f ae94 	bne.w	8009b02 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2220      	movs	r2, #32
 8009dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	e000      	b.n	8009df8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009df6:	2302      	movs	r3, #2
  }
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3728      	adds	r7, #40	; 0x28
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	00010004 	.word	0x00010004
 8009e04:	200000a4 	.word	0x200000a4
 8009e08:	14f8b589 	.word	0x14f8b589

08009e0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e1a:	b2db      	uxtb	r3, r3
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bc80      	pop	{r7}
 8009e24:	4770      	bx	lr

08009e26 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr

08009e3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b088      	sub	sp, #32
 8009e40:	af02      	add	r7, sp, #8
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	607a      	str	r2, [r7, #4]
 8009e46:	603b      	str	r3, [r7, #0]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b08      	cmp	r3, #8
 8009e56:	d006      	beq.n	8009e66 <I2C_MasterRequestWrite+0x2a>
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d003      	beq.n	8009e66 <I2C_MasterRequestWrite+0x2a>
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e64:	d108      	bne.n	8009e78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	e00b      	b.n	8009e90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e7c:	2b12      	cmp	r3, #18
 8009e7e:	d107      	bne.n	8009e90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 f9cd 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00d      	beq.n	8009ec4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb6:	d103      	bne.n	8009ec0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e035      	b.n	8009f30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ecc:	d108      	bne.n	8009ee0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ece:	897b      	ldrh	r3, [r7, #10]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009edc:	611a      	str	r2, [r3, #16]
 8009ede:	e01b      	b.n	8009f18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009ee0:	897b      	ldrh	r3, [r7, #10]
 8009ee2:	11db      	asrs	r3, r3, #7
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	f003 0306 	and.w	r3, r3, #6
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	f063 030f 	orn	r3, r3, #15
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	490e      	ldr	r1, [pc, #56]	; (8009f38 <I2C_MasterRequestWrite+0xfc>)
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 fa16 	bl	800a330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e010      	b.n	8009f30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009f0e:	897b      	ldrh	r3, [r7, #10]
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	4907      	ldr	r1, [pc, #28]	; (8009f3c <I2C_MasterRequestWrite+0x100>)
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 fa06 	bl	800a330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e000      	b.n	8009f30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3718      	adds	r7, #24
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	00010008 	.word	0x00010008
 8009f3c:	00010002 	.word	0x00010002

08009f40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af02      	add	r7, sp, #8
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	4608      	mov	r0, r1
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4603      	mov	r3, r0
 8009f50:	817b      	strh	r3, [r7, #10]
 8009f52:	460b      	mov	r3, r1
 8009f54:	813b      	strh	r3, [r7, #8]
 8009f56:	4613      	mov	r3, r2
 8009f58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 f960 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00d      	beq.n	8009f9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f90:	d103      	bne.n	8009f9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e05f      	b.n	800a05e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f9e:	897b      	ldrh	r3, [r7, #10]
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	6a3a      	ldr	r2, [r7, #32]
 8009fb2:	492d      	ldr	r1, [pc, #180]	; (800a068 <I2C_RequestMemoryWrite+0x128>)
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 f9bb 	bl	800a330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e04c      	b.n	800a05e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	617b      	str	r3, [r7, #20]
 8009fd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fdc:	6a39      	ldr	r1, [r7, #32]
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f000 fa46 	bl	800a470 <I2C_WaitOnTXEFlagUntilTimeout>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00d      	beq.n	800a006 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d107      	bne.n	800a002 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a000:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e02b      	b.n	800a05e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a006:	88fb      	ldrh	r3, [r7, #6]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d105      	bne.n	800a018 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a00c:	893b      	ldrh	r3, [r7, #8]
 800a00e:	b2da      	uxtb	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	611a      	str	r2, [r3, #16]
 800a016:	e021      	b.n	800a05c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a018:	893b      	ldrh	r3, [r7, #8]
 800a01a:	0a1b      	lsrs	r3, r3, #8
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a028:	6a39      	ldr	r1, [r7, #32]
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fa20 	bl	800a470 <I2C_WaitOnTXEFlagUntilTimeout>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00d      	beq.n	800a052 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	d107      	bne.n	800a04e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a04c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e005      	b.n	800a05e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a052:	893b      	ldrh	r3, [r7, #8]
 800a054:	b2da      	uxtb	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3718      	adds	r7, #24
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	00010002 	.word	0x00010002

0800a06c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b088      	sub	sp, #32
 800a070:	af02      	add	r7, sp, #8
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	4608      	mov	r0, r1
 800a076:	4611      	mov	r1, r2
 800a078:	461a      	mov	r2, r3
 800a07a:	4603      	mov	r3, r0
 800a07c:	817b      	strh	r3, [r7, #10]
 800a07e:	460b      	mov	r3, r1
 800a080:	813b      	strh	r3, [r7, #8]
 800a082:	4613      	mov	r3, r2
 800a084:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a094:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 f8c2 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00d      	beq.n	800a0da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0cc:	d103      	bne.n	800a0d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e0aa      	b.n	800a230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a0da:	897b      	ldrh	r3, [r7, #10]
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	461a      	mov	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	6a3a      	ldr	r2, [r7, #32]
 800a0ee:	4952      	ldr	r1, [pc, #328]	; (800a238 <I2C_RequestMemoryRead+0x1cc>)
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 f91d 	bl	800a330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e097      	b.n	800a230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a118:	6a39      	ldr	r1, [r7, #32]
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 f9a8 	bl	800a470 <I2C_WaitOnTXEFlagUntilTimeout>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00d      	beq.n	800a142 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	2b04      	cmp	r3, #4
 800a12c:	d107      	bne.n	800a13e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a13c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e076      	b.n	800a230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a142:	88fb      	ldrh	r3, [r7, #6]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d105      	bne.n	800a154 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a148:	893b      	ldrh	r3, [r7, #8]
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	611a      	str	r2, [r3, #16]
 800a152:	e021      	b.n	800a198 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a154:	893b      	ldrh	r3, [r7, #8]
 800a156:	0a1b      	lsrs	r3, r3, #8
 800a158:	b29b      	uxth	r3, r3
 800a15a:	b2da      	uxtb	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a164:	6a39      	ldr	r1, [r7, #32]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 f982 	bl	800a470 <I2C_WaitOnTXEFlagUntilTimeout>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00d      	beq.n	800a18e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	2b04      	cmp	r3, #4
 800a178:	d107      	bne.n	800a18a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a188:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e050      	b.n	800a230 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a18e:	893b      	ldrh	r3, [r7, #8]
 800a190:	b2da      	uxtb	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a19a:	6a39      	ldr	r1, [r7, #32]
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 f967 	bl	800a470 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00d      	beq.n	800a1c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d107      	bne.n	800a1c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e035      	b.n	800a230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	6a3b      	ldr	r3, [r7, #32]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f000 f82b 	bl	800a23c <I2C_WaitOnFlagUntilTimeout>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00d      	beq.n	800a208 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1fa:	d103      	bne.n	800a204 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a202:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e013      	b.n	800a230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a208:	897b      	ldrh	r3, [r7, #10]
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	f043 0301 	orr.w	r3, r3, #1
 800a210:	b2da      	uxtb	r2, r3
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	6a3a      	ldr	r2, [r7, #32]
 800a21c:	4906      	ldr	r1, [pc, #24]	; (800a238 <I2C_RequestMemoryRead+0x1cc>)
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f000 f886 	bl	800a330 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e000      	b.n	800a230 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	00010002 	.word	0x00010002

0800a23c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	4613      	mov	r3, r2
 800a24a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a24c:	e048      	b.n	800a2e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a254:	d044      	beq.n	800a2e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a256:	f7fe f9e3 	bl	8008620 <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	429a      	cmp	r2, r3
 800a264:	d302      	bcc.n	800a26c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d139      	bne.n	800a2e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	0c1b      	lsrs	r3, r3, #16
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b01      	cmp	r3, #1
 800a274:	d10d      	bne.n	800a292 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	43da      	mvns	r2, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	4013      	ands	r3, r2
 800a282:	b29b      	uxth	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	bf0c      	ite	eq
 800a288:	2301      	moveq	r3, #1
 800a28a:	2300      	movne	r3, #0
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	461a      	mov	r2, r3
 800a290:	e00c      	b.n	800a2ac <I2C_WaitOnFlagUntilTimeout+0x70>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	43da      	mvns	r2, r3
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	4013      	ands	r3, r2
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	bf0c      	ite	eq
 800a2a4:	2301      	moveq	r3, #1
 800a2a6:	2300      	movne	r3, #0
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d116      	bne.n	800a2e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2220      	movs	r2, #32
 800a2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2cc:	f043 0220 	orr.w	r2, r3, #32
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e023      	b.n	800a328 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	0c1b      	lsrs	r3, r3, #16
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d10d      	bne.n	800a306 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	43da      	mvns	r2, r3
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	bf0c      	ite	eq
 800a2fc:	2301      	moveq	r3, #1
 800a2fe:	2300      	movne	r3, #0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	461a      	mov	r2, r3
 800a304:	e00c      	b.n	800a320 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	43da      	mvns	r2, r3
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	4013      	ands	r3, r2
 800a312:	b29b      	uxth	r3, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	bf0c      	ite	eq
 800a318:	2301      	moveq	r3, #1
 800a31a:	2300      	movne	r3, #0
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	461a      	mov	r2, r3
 800a320:	79fb      	ldrb	r3, [r7, #7]
 800a322:	429a      	cmp	r2, r3
 800a324:	d093      	beq.n	800a24e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a33e:	e071      	b.n	800a424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a34a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a34e:	d123      	bne.n	800a398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a35e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2220      	movs	r2, #32
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a384:	f043 0204 	orr.w	r2, r3, #4
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e067      	b.n	800a468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a39e:	d041      	beq.n	800a424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3a0:	f7fe f93e 	bl	8008620 <HAL_GetTick>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d302      	bcc.n	800a3b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d136      	bne.n	800a424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	0c1b      	lsrs	r3, r3, #16
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d10c      	bne.n	800a3da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	43da      	mvns	r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	bf14      	ite	ne
 800a3d2:	2301      	movne	r3, #1
 800a3d4:	2300      	moveq	r3, #0
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	e00b      	b.n	800a3f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	43da      	mvns	r2, r3
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	bf14      	ite	ne
 800a3ec:	2301      	movne	r3, #1
 800a3ee:	2300      	moveq	r3, #0
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d016      	beq.n	800a424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a410:	f043 0220 	orr.w	r2, r3, #32
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e021      	b.n	800a468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	0c1b      	lsrs	r3, r3, #16
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d10c      	bne.n	800a448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	695b      	ldr	r3, [r3, #20]
 800a434:	43da      	mvns	r2, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	4013      	ands	r3, r2
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	bf14      	ite	ne
 800a440:	2301      	movne	r3, #1
 800a442:	2300      	moveq	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	e00b      	b.n	800a460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	43da      	mvns	r2, r3
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	4013      	ands	r3, r2
 800a454:	b29b      	uxth	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	bf14      	ite	ne
 800a45a:	2301      	movne	r3, #1
 800a45c:	2300      	moveq	r3, #0
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	2b00      	cmp	r3, #0
 800a462:	f47f af6d 	bne.w	800a340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a47c:	e034      	b.n	800a4e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f8e3 	bl	800a64a <I2C_IsAcknowledgeFailed>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e034      	b.n	800a4f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a494:	d028      	beq.n	800a4e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a496:	f7fe f8c3 	bl	8008620 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d302      	bcc.n	800a4ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d11d      	bne.n	800a4e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4b6:	2b80      	cmp	r3, #128	; 0x80
 800a4b8:	d016      	beq.n	800a4e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d4:	f043 0220 	orr.w	r2, r3, #32
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e007      	b.n	800a4f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4f2:	2b80      	cmp	r3, #128	; 0x80
 800a4f4:	d1c3      	bne.n	800a47e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a50c:	e034      	b.n	800a578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 f89b 	bl	800a64a <I2C_IsAcknowledgeFailed>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d001      	beq.n	800a51e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e034      	b.n	800a588 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a524:	d028      	beq.n	800a578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a526:	f7fe f87b 	bl	8008620 <HAL_GetTick>
 800a52a:	4602      	mov	r2, r0
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	429a      	cmp	r2, r3
 800a534:	d302      	bcc.n	800a53c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d11d      	bne.n	800a578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	f003 0304 	and.w	r3, r3, #4
 800a546:	2b04      	cmp	r3, #4
 800a548:	d016      	beq.n	800a578 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2220      	movs	r2, #32
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	f043 0220 	orr.w	r2, r3, #32
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e007      	b.n	800a588 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	f003 0304 	and.w	r3, r3, #4
 800a582:	2b04      	cmp	r3, #4
 800a584:	d1c3      	bne.n	800a50e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a59c:	e049      	b.n	800a632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	f003 0310 	and.w	r3, r3, #16
 800a5a8:	2b10      	cmp	r3, #16
 800a5aa:	d119      	bne.n	800a5e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f06f 0210 	mvn.w	r2, #16
 800a5b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2220      	movs	r2, #32
 800a5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e030      	b.n	800a642 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e0:	f7fe f81e 	bl	8008620 <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d302      	bcc.n	800a5f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d11d      	bne.n	800a632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a600:	2b40      	cmp	r3, #64	; 0x40
 800a602:	d016      	beq.n	800a632 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61e:	f043 0220 	orr.w	r2, r3, #32
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e007      	b.n	800a642 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a63c:	2b40      	cmp	r3, #64	; 0x40
 800a63e:	d1ae      	bne.n	800a59e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a64a:	b480      	push	{r7}
 800a64c:	b083      	sub	sp, #12
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a65c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a660:	d11b      	bne.n	800a69a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a66a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2220      	movs	r2, #32
 800a676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a686:	f043 0204 	orr.w	r2, r3, #4
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bc80      	pop	{r7}
 800a6a4:	4770      	bx	lr
	...

0800a6a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e272      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 8087 	beq.w	800a7d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a6c8:	4b92      	ldr	r3, [pc, #584]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	f003 030c 	and.w	r3, r3, #12
 800a6d0:	2b04      	cmp	r3, #4
 800a6d2:	d00c      	beq.n	800a6ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a6d4:	4b8f      	ldr	r3, [pc, #572]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f003 030c 	and.w	r3, r3, #12
 800a6dc:	2b08      	cmp	r3, #8
 800a6de:	d112      	bne.n	800a706 <HAL_RCC_OscConfig+0x5e>
 800a6e0:	4b8c      	ldr	r3, [pc, #560]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6ec:	d10b      	bne.n	800a706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6ee:	4b89      	ldr	r3, [pc, #548]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d06c      	beq.n	800a7d4 <HAL_RCC_OscConfig+0x12c>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d168      	bne.n	800a7d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e24c      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a70e:	d106      	bne.n	800a71e <HAL_RCC_OscConfig+0x76>
 800a710:	4b80      	ldr	r3, [pc, #512]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a7f      	ldr	r2, [pc, #508]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	e02e      	b.n	800a77c <HAL_RCC_OscConfig+0xd4>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10c      	bne.n	800a740 <HAL_RCC_OscConfig+0x98>
 800a726:	4b7b      	ldr	r3, [pc, #492]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a7a      	ldr	r2, [pc, #488]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a72c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	4b78      	ldr	r3, [pc, #480]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a77      	ldr	r2, [pc, #476]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a73c:	6013      	str	r3, [r2, #0]
 800a73e:	e01d      	b.n	800a77c <HAL_RCC_OscConfig+0xd4>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a748:	d10c      	bne.n	800a764 <HAL_RCC_OscConfig+0xbc>
 800a74a:	4b72      	ldr	r3, [pc, #456]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a71      	ldr	r2, [pc, #452]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	4b6f      	ldr	r3, [pc, #444]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a6e      	ldr	r2, [pc, #440]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a75c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	e00b      	b.n	800a77c <HAL_RCC_OscConfig+0xd4>
 800a764:	4b6b      	ldr	r3, [pc, #428]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a6a      	ldr	r2, [pc, #424]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a76a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	4b68      	ldr	r3, [pc, #416]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a67      	ldr	r2, [pc, #412]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a77a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d013      	beq.n	800a7ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a784:	f7fd ff4c 	bl	8008620 <HAL_GetTick>
 800a788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a78a:	e008      	b.n	800a79e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a78c:	f7fd ff48 	bl	8008620 <HAL_GetTick>
 800a790:	4602      	mov	r2, r0
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	2b64      	cmp	r3, #100	; 0x64
 800a798:	d901      	bls.n	800a79e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e200      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a79e:	4b5d      	ldr	r3, [pc, #372]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0f0      	beq.n	800a78c <HAL_RCC_OscConfig+0xe4>
 800a7aa:	e014      	b.n	800a7d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7ac:	f7fd ff38 	bl	8008620 <HAL_GetTick>
 800a7b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7b4:	f7fd ff34 	bl	8008620 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b64      	cmp	r3, #100	; 0x64
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e1ec      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7c6:	4b53      	ldr	r3, [pc, #332]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1f0      	bne.n	800a7b4 <HAL_RCC_OscConfig+0x10c>
 800a7d2:	e000      	b.n	800a7d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0302 	and.w	r3, r3, #2
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d063      	beq.n	800a8aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a7e2:	4b4c      	ldr	r3, [pc, #304]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f003 030c 	and.w	r3, r3, #12
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a7ee:	4b49      	ldr	r3, [pc, #292]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	f003 030c 	and.w	r3, r3, #12
 800a7f6:	2b08      	cmp	r3, #8
 800a7f8:	d11c      	bne.n	800a834 <HAL_RCC_OscConfig+0x18c>
 800a7fa:	4b46      	ldr	r3, [pc, #280]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d116      	bne.n	800a834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a806:	4b43      	ldr	r3, [pc, #268]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d005      	beq.n	800a81e <HAL_RCC_OscConfig+0x176>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d001      	beq.n	800a81e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e1c0      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a81e:	4b3d      	ldr	r3, [pc, #244]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	4939      	ldr	r1, [pc, #228]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a832:	e03a      	b.n	800a8aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d020      	beq.n	800a87e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a83c:	4b36      	ldr	r3, [pc, #216]	; (800a918 <HAL_RCC_OscConfig+0x270>)
 800a83e:	2201      	movs	r2, #1
 800a840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a842:	f7fd feed 	bl	8008620 <HAL_GetTick>
 800a846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a848:	e008      	b.n	800a85c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a84a:	f7fd fee9 	bl	8008620 <HAL_GetTick>
 800a84e:	4602      	mov	r2, r0
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	2b02      	cmp	r3, #2
 800a856:	d901      	bls.n	800a85c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a858:	2303      	movs	r3, #3
 800a85a:	e1a1      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a85c:	4b2d      	ldr	r3, [pc, #180]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0302 	and.w	r3, r3, #2
 800a864:	2b00      	cmp	r3, #0
 800a866:	d0f0      	beq.n	800a84a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a868:	4b2a      	ldr	r3, [pc, #168]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	00db      	lsls	r3, r3, #3
 800a876:	4927      	ldr	r1, [pc, #156]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	600b      	str	r3, [r1, #0]
 800a87c:	e015      	b.n	800a8aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a87e:	4b26      	ldr	r3, [pc, #152]	; (800a918 <HAL_RCC_OscConfig+0x270>)
 800a880:	2200      	movs	r2, #0
 800a882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a884:	f7fd fecc 	bl	8008620 <HAL_GetTick>
 800a888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a88a:	e008      	b.n	800a89e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a88c:	f7fd fec8 	bl	8008620 <HAL_GetTick>
 800a890:	4602      	mov	r2, r0
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	2b02      	cmp	r3, #2
 800a898:	d901      	bls.n	800a89e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a89a:	2303      	movs	r3, #3
 800a89c:	e180      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a89e:	4b1d      	ldr	r3, [pc, #116]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 0302 	and.w	r3, r3, #2
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1f0      	bne.n	800a88c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f003 0308 	and.w	r3, r3, #8
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d03a      	beq.n	800a92c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d019      	beq.n	800a8f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8be:	4b17      	ldr	r3, [pc, #92]	; (800a91c <HAL_RCC_OscConfig+0x274>)
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8c4:	f7fd feac 	bl	8008620 <HAL_GetTick>
 800a8c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8ca:	e008      	b.n	800a8de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8cc:	f7fd fea8 	bl	8008620 <HAL_GetTick>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d901      	bls.n	800a8de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e160      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8de:	4b0d      	ldr	r3, [pc, #52]	; (800a914 <HAL_RCC_OscConfig+0x26c>)
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	f003 0302 	and.w	r3, r3, #2
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d0f0      	beq.n	800a8cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	f000 face 	bl	800ae8c <RCC_Delay>
 800a8f0:	e01c      	b.n	800a92c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8f2:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <HAL_RCC_OscConfig+0x274>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8f8:	f7fd fe92 	bl	8008620 <HAL_GetTick>
 800a8fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a8fe:	e00f      	b.n	800a920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a900:	f7fd fe8e 	bl	8008620 <HAL_GetTick>
 800a904:	4602      	mov	r2, r0
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d908      	bls.n	800a920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a90e:	2303      	movs	r3, #3
 800a910:	e146      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
 800a912:	bf00      	nop
 800a914:	40021000 	.word	0x40021000
 800a918:	42420000 	.word	0x42420000
 800a91c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a920:	4b92      	ldr	r3, [pc, #584]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1e9      	bne.n	800a900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 80a6 	beq.w	800aa86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a93a:	2300      	movs	r3, #0
 800a93c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a93e:	4b8b      	ldr	r3, [pc, #556]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10d      	bne.n	800a966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a94a:	4b88      	ldr	r3, [pc, #544]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	4a87      	ldr	r2, [pc, #540]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a954:	61d3      	str	r3, [r2, #28]
 800a956:	4b85      	ldr	r3, [pc, #532]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a95e:	60bb      	str	r3, [r7, #8]
 800a960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a962:	2301      	movs	r3, #1
 800a964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a966:	4b82      	ldr	r3, [pc, #520]	; (800ab70 <HAL_RCC_OscConfig+0x4c8>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d118      	bne.n	800a9a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a972:	4b7f      	ldr	r3, [pc, #508]	; (800ab70 <HAL_RCC_OscConfig+0x4c8>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a7e      	ldr	r2, [pc, #504]	; (800ab70 <HAL_RCC_OscConfig+0x4c8>)
 800a978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a97c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a97e:	f7fd fe4f 	bl	8008620 <HAL_GetTick>
 800a982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a984:	e008      	b.n	800a998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a986:	f7fd fe4b 	bl	8008620 <HAL_GetTick>
 800a98a:	4602      	mov	r2, r0
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	2b64      	cmp	r3, #100	; 0x64
 800a992:	d901      	bls.n	800a998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e103      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a998:	4b75      	ldr	r3, [pc, #468]	; (800ab70 <HAL_RCC_OscConfig+0x4c8>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d0f0      	beq.n	800a986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d106      	bne.n	800a9ba <HAL_RCC_OscConfig+0x312>
 800a9ac:	4b6f      	ldr	r3, [pc, #444]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	4a6e      	ldr	r2, [pc, #440]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a9b2:	f043 0301 	orr.w	r3, r3, #1
 800a9b6:	6213      	str	r3, [r2, #32]
 800a9b8:	e02d      	b.n	800aa16 <HAL_RCC_OscConfig+0x36e>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10c      	bne.n	800a9dc <HAL_RCC_OscConfig+0x334>
 800a9c2:	4b6a      	ldr	r3, [pc, #424]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	4a69      	ldr	r2, [pc, #420]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	6213      	str	r3, [r2, #32]
 800a9ce:	4b67      	ldr	r3, [pc, #412]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a9d0:	6a1b      	ldr	r3, [r3, #32]
 800a9d2:	4a66      	ldr	r2, [pc, #408]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a9d4:	f023 0304 	bic.w	r3, r3, #4
 800a9d8:	6213      	str	r3, [r2, #32]
 800a9da:	e01c      	b.n	800aa16 <HAL_RCC_OscConfig+0x36e>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	2b05      	cmp	r3, #5
 800a9e2:	d10c      	bne.n	800a9fe <HAL_RCC_OscConfig+0x356>
 800a9e4:	4b61      	ldr	r3, [pc, #388]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	4a60      	ldr	r2, [pc, #384]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a9ea:	f043 0304 	orr.w	r3, r3, #4
 800a9ee:	6213      	str	r3, [r2, #32]
 800a9f0:	4b5e      	ldr	r3, [pc, #376]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	4a5d      	ldr	r2, [pc, #372]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800a9f6:	f043 0301 	orr.w	r3, r3, #1
 800a9fa:	6213      	str	r3, [r2, #32]
 800a9fc:	e00b      	b.n	800aa16 <HAL_RCC_OscConfig+0x36e>
 800a9fe:	4b5b      	ldr	r3, [pc, #364]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	4a5a      	ldr	r2, [pc, #360]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aa04:	f023 0301 	bic.w	r3, r3, #1
 800aa08:	6213      	str	r3, [r2, #32]
 800aa0a:	4b58      	ldr	r3, [pc, #352]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	4a57      	ldr	r2, [pc, #348]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aa10:	f023 0304 	bic.w	r3, r3, #4
 800aa14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d015      	beq.n	800aa4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa1e:	f7fd fdff 	bl	8008620 <HAL_GetTick>
 800aa22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa24:	e00a      	b.n	800aa3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa26:	f7fd fdfb 	bl	8008620 <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d901      	bls.n	800aa3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e0b1      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa3c:	4b4b      	ldr	r3, [pc, #300]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	f003 0302 	and.w	r3, r3, #2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d0ee      	beq.n	800aa26 <HAL_RCC_OscConfig+0x37e>
 800aa48:	e014      	b.n	800aa74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa4a:	f7fd fde9 	bl	8008620 <HAL_GetTick>
 800aa4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa50:	e00a      	b.n	800aa68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa52:	f7fd fde5 	bl	8008620 <HAL_GetTick>
 800aa56:	4602      	mov	r2, r0
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d901      	bls.n	800aa68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e09b      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa68:	4b40      	ldr	r3, [pc, #256]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	f003 0302 	and.w	r3, r3, #2
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1ee      	bne.n	800aa52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aa74:	7dfb      	ldrb	r3, [r7, #23]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d105      	bne.n	800aa86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa7a:	4b3c      	ldr	r3, [pc, #240]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	4a3b      	ldr	r2, [pc, #236]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aa80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 8087 	beq.w	800ab9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa90:	4b36      	ldr	r3, [pc, #216]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	f003 030c 	and.w	r3, r3, #12
 800aa98:	2b08      	cmp	r3, #8
 800aa9a:	d061      	beq.n	800ab60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d146      	bne.n	800ab32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaa4:	4b33      	ldr	r3, [pc, #204]	; (800ab74 <HAL_RCC_OscConfig+0x4cc>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaaa:	f7fd fdb9 	bl	8008620 <HAL_GetTick>
 800aaae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aab0:	e008      	b.n	800aac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aab2:	f7fd fdb5 	bl	8008620 <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d901      	bls.n	800aac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aac0:	2303      	movs	r3, #3
 800aac2:	e06d      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aac4:	4b29      	ldr	r3, [pc, #164]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1f0      	bne.n	800aab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a1b      	ldr	r3, [r3, #32]
 800aad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aad8:	d108      	bne.n	800aaec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800aada:	4b24      	ldr	r3, [pc, #144]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	4921      	ldr	r1, [pc, #132]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aae8:	4313      	orrs	r3, r2
 800aaea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aaec:	4b1f      	ldr	r3, [pc, #124]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a19      	ldr	r1, [r3, #32]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	430b      	orrs	r3, r1
 800aafe:	491b      	ldr	r1, [pc, #108]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800ab00:	4313      	orrs	r3, r2
 800ab02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab04:	4b1b      	ldr	r3, [pc, #108]	; (800ab74 <HAL_RCC_OscConfig+0x4cc>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab0a:	f7fd fd89 	bl	8008620 <HAL_GetTick>
 800ab0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab10:	e008      	b.n	800ab24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab12:	f7fd fd85 	bl	8008620 <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d901      	bls.n	800ab24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e03d      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab24:	4b11      	ldr	r3, [pc, #68]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0f0      	beq.n	800ab12 <HAL_RCC_OscConfig+0x46a>
 800ab30:	e035      	b.n	800ab9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab32:	4b10      	ldr	r3, [pc, #64]	; (800ab74 <HAL_RCC_OscConfig+0x4cc>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab38:	f7fd fd72 	bl	8008620 <HAL_GetTick>
 800ab3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab3e:	e008      	b.n	800ab52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab40:	f7fd fd6e 	bl	8008620 <HAL_GetTick>
 800ab44:	4602      	mov	r2, r0
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d901      	bls.n	800ab52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	e026      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab52:	4b06      	ldr	r3, [pc, #24]	; (800ab6c <HAL_RCC_OscConfig+0x4c4>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1f0      	bne.n	800ab40 <HAL_RCC_OscConfig+0x498>
 800ab5e:	e01e      	b.n	800ab9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	69db      	ldr	r3, [r3, #28]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d107      	bne.n	800ab78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e019      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
 800ab6c:	40021000 	.word	0x40021000
 800ab70:	40007000 	.word	0x40007000
 800ab74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ab78:	4b0b      	ldr	r3, [pc, #44]	; (800aba8 <HAL_RCC_OscConfig+0x500>)
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a1b      	ldr	r3, [r3, #32]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d106      	bne.n	800ab9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d001      	beq.n	800ab9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3718      	adds	r7, #24
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	40021000 	.word	0x40021000

0800abac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d101      	bne.n	800abc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	e0d0      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800abc0:	4b6a      	ldr	r3, [pc, #424]	; (800ad6c <HAL_RCC_ClockConfig+0x1c0>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0307 	and.w	r3, r3, #7
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d910      	bls.n	800abf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abce:	4b67      	ldr	r3, [pc, #412]	; (800ad6c <HAL_RCC_ClockConfig+0x1c0>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f023 0207 	bic.w	r2, r3, #7
 800abd6:	4965      	ldr	r1, [pc, #404]	; (800ad6c <HAL_RCC_ClockConfig+0x1c0>)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	4313      	orrs	r3, r2
 800abdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abde:	4b63      	ldr	r3, [pc, #396]	; (800ad6c <HAL_RCC_ClockConfig+0x1c0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d001      	beq.n	800abf0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e0b8      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0302 	and.w	r3, r3, #2
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d020      	beq.n	800ac3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d005      	beq.n	800ac14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac08:	4b59      	ldr	r3, [pc, #356]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	4a58      	ldr	r2, [pc, #352]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ac12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0308 	and.w	r3, r3, #8
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac20:	4b53      	ldr	r3, [pc, #332]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	4a52      	ldr	r2, [pc, #328]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ac2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac2c:	4b50      	ldr	r3, [pc, #320]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	494d      	ldr	r1, [pc, #308]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d040      	beq.n	800accc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d107      	bne.n	800ac62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac52:	4b47      	ldr	r3, [pc, #284]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d115      	bne.n	800ac8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e07f      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d107      	bne.n	800ac7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac6a:	4b41      	ldr	r3, [pc, #260]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d109      	bne.n	800ac8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e073      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac7a:	4b3d      	ldr	r3, [pc, #244]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 0302 	and.w	r3, r3, #2
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e06b      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac8a:	4b39      	ldr	r3, [pc, #228]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	f023 0203 	bic.w	r2, r3, #3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	4936      	ldr	r1, [pc, #216]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac9c:	f7fd fcc0 	bl	8008620 <HAL_GetTick>
 800aca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aca2:	e00a      	b.n	800acba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aca4:	f7fd fcbc 	bl	8008620 <HAL_GetTick>
 800aca8:	4602      	mov	r2, r0
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	f241 3288 	movw	r2, #5000	; 0x1388
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d901      	bls.n	800acba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800acb6:	2303      	movs	r3, #3
 800acb8:	e053      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acba:	4b2d      	ldr	r3, [pc, #180]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f003 020c 	and.w	r2, r3, #12
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	429a      	cmp	r2, r3
 800acca:	d1eb      	bne.n	800aca4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800accc:	4b27      	ldr	r3, [pc, #156]	; (800ad6c <HAL_RCC_ClockConfig+0x1c0>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0307 	and.w	r3, r3, #7
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d210      	bcs.n	800acfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acda:	4b24      	ldr	r3, [pc, #144]	; (800ad6c <HAL_RCC_ClockConfig+0x1c0>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f023 0207 	bic.w	r2, r3, #7
 800ace2:	4922      	ldr	r1, [pc, #136]	; (800ad6c <HAL_RCC_ClockConfig+0x1c0>)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acea:	4b20      	ldr	r3, [pc, #128]	; (800ad6c <HAL_RCC_ClockConfig+0x1c0>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 0307 	and.w	r3, r3, #7
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d001      	beq.n	800acfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e032      	b.n	800ad62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d008      	beq.n	800ad1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad08:	4b19      	ldr	r3, [pc, #100]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	4916      	ldr	r1, [pc, #88]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ad16:	4313      	orrs	r3, r2
 800ad18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f003 0308 	and.w	r3, r3, #8
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d009      	beq.n	800ad3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad26:	4b12      	ldr	r3, [pc, #72]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	00db      	lsls	r3, r3, #3
 800ad34:	490e      	ldr	r1, [pc, #56]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad3a:	f000 f821 	bl	800ad80 <HAL_RCC_GetSysClockFreq>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	4b0b      	ldr	r3, [pc, #44]	; (800ad70 <HAL_RCC_ClockConfig+0x1c4>)
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	091b      	lsrs	r3, r3, #4
 800ad46:	f003 030f 	and.w	r3, r3, #15
 800ad4a:	490a      	ldr	r1, [pc, #40]	; (800ad74 <HAL_RCC_ClockConfig+0x1c8>)
 800ad4c:	5ccb      	ldrb	r3, [r1, r3]
 800ad4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad52:	4a09      	ldr	r2, [pc, #36]	; (800ad78 <HAL_RCC_ClockConfig+0x1cc>)
 800ad54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ad56:	4b09      	ldr	r3, [pc, #36]	; (800ad7c <HAL_RCC_ClockConfig+0x1d0>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fd fc1e 	bl	800859c <HAL_InitTick>

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	40022000 	.word	0x40022000
 800ad70:	40021000 	.word	0x40021000
 800ad74:	0800dbc8 	.word	0x0800dbc8
 800ad78:	200000a4 	.word	0x200000a4
 800ad7c:	200000a8 	.word	0x200000a8

0800ad80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b087      	sub	sp, #28
 800ad84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60fb      	str	r3, [r7, #12]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60bb      	str	r3, [r7, #8]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	617b      	str	r3, [r7, #20]
 800ad92:	2300      	movs	r3, #0
 800ad94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ad9a:	4b1e      	ldr	r3, [pc, #120]	; (800ae14 <HAL_RCC_GetSysClockFreq+0x94>)
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f003 030c 	and.w	r3, r3, #12
 800ada6:	2b04      	cmp	r3, #4
 800ada8:	d002      	beq.n	800adb0 <HAL_RCC_GetSysClockFreq+0x30>
 800adaa:	2b08      	cmp	r3, #8
 800adac:	d003      	beq.n	800adb6 <HAL_RCC_GetSysClockFreq+0x36>
 800adae:	e027      	b.n	800ae00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800adb0:	4b19      	ldr	r3, [pc, #100]	; (800ae18 <HAL_RCC_GetSysClockFreq+0x98>)
 800adb2:	613b      	str	r3, [r7, #16]
      break;
 800adb4:	e027      	b.n	800ae06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	0c9b      	lsrs	r3, r3, #18
 800adba:	f003 030f 	and.w	r3, r3, #15
 800adbe:	4a17      	ldr	r2, [pc, #92]	; (800ae1c <HAL_RCC_GetSysClockFreq+0x9c>)
 800adc0:	5cd3      	ldrb	r3, [r2, r3]
 800adc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d010      	beq.n	800adf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800adce:	4b11      	ldr	r3, [pc, #68]	; (800ae14 <HAL_RCC_GetSysClockFreq+0x94>)
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	0c5b      	lsrs	r3, r3, #17
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	4a11      	ldr	r2, [pc, #68]	; (800ae20 <HAL_RCC_GetSysClockFreq+0xa0>)
 800adda:	5cd3      	ldrb	r3, [r2, r3]
 800addc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a0d      	ldr	r2, [pc, #52]	; (800ae18 <HAL_RCC_GetSysClockFreq+0x98>)
 800ade2:	fb03 f202 	mul.w	r2, r3, r2
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	fbb2 f3f3 	udiv	r3, r2, r3
 800adec:	617b      	str	r3, [r7, #20]
 800adee:	e004      	b.n	800adfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a0c      	ldr	r2, [pc, #48]	; (800ae24 <HAL_RCC_GetSysClockFreq+0xa4>)
 800adf4:	fb02 f303 	mul.w	r3, r2, r3
 800adf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	613b      	str	r3, [r7, #16]
      break;
 800adfe:	e002      	b.n	800ae06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ae00:	4b05      	ldr	r3, [pc, #20]	; (800ae18 <HAL_RCC_GetSysClockFreq+0x98>)
 800ae02:	613b      	str	r3, [r7, #16]
      break;
 800ae04:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae06:	693b      	ldr	r3, [r7, #16]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bc80      	pop	{r7}
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	40021000 	.word	0x40021000
 800ae18:	007a1200 	.word	0x007a1200
 800ae1c:	0800dbe0 	.word	0x0800dbe0
 800ae20:	0800dbf0 	.word	0x0800dbf0
 800ae24:	003d0900 	.word	0x003d0900

0800ae28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae2c:	4b02      	ldr	r3, [pc, #8]	; (800ae38 <HAL_RCC_GetHCLKFreq+0x10>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bc80      	pop	{r7}
 800ae36:	4770      	bx	lr
 800ae38:	200000a4 	.word	0x200000a4

0800ae3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae40:	f7ff fff2 	bl	800ae28 <HAL_RCC_GetHCLKFreq>
 800ae44:	4602      	mov	r2, r0
 800ae46:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	0a1b      	lsrs	r3, r3, #8
 800ae4c:	f003 0307 	and.w	r3, r3, #7
 800ae50:	4903      	ldr	r1, [pc, #12]	; (800ae60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae52:	5ccb      	ldrb	r3, [r1, r3]
 800ae54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	40021000 	.word	0x40021000
 800ae60:	0800dbd8 	.word	0x0800dbd8

0800ae64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ae68:	f7ff ffde 	bl	800ae28 <HAL_RCC_GetHCLKFreq>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	4b05      	ldr	r3, [pc, #20]	; (800ae84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	0adb      	lsrs	r3, r3, #11
 800ae74:	f003 0307 	and.w	r3, r3, #7
 800ae78:	4903      	ldr	r1, [pc, #12]	; (800ae88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ae7a:	5ccb      	ldrb	r3, [r1, r3]
 800ae7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	40021000 	.word	0x40021000
 800ae88:	0800dbd8 	.word	0x0800dbd8

0800ae8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ae94:	4b0a      	ldr	r3, [pc, #40]	; (800aec0 <RCC_Delay+0x34>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a0a      	ldr	r2, [pc, #40]	; (800aec4 <RCC_Delay+0x38>)
 800ae9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae9e:	0a5b      	lsrs	r3, r3, #9
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	fb02 f303 	mul.w	r3, r2, r3
 800aea6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aea8:	bf00      	nop
  }
  while (Delay --);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	1e5a      	subs	r2, r3, #1
 800aeae:	60fa      	str	r2, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1f9      	bne.n	800aea8 <RCC_Delay+0x1c>
}
 800aeb4:	bf00      	nop
 800aeb6:	bf00      	nop
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr
 800aec0:	200000a4 	.word	0x200000a4
 800aec4:	10624dd3 	.word	0x10624dd3

0800aec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e041      	b.n	800af5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d106      	bne.n	800aef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7fd fa26 	bl	8008340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2202      	movs	r2, #2
 800aef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	3304      	adds	r3, #4
 800af04:	4619      	mov	r1, r3
 800af06:	4610      	mov	r0, r2
 800af08:	f000 fa82 	bl	800b410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2201      	movs	r2, #1
 800af18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d001      	beq.n	800af80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e044      	b.n	800b00a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2202      	movs	r2, #2
 800af84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68da      	ldr	r2, [r3, #12]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f042 0201 	orr.w	r2, r2, #1
 800af96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a1d      	ldr	r2, [pc, #116]	; (800b014 <HAL_TIM_Base_Start_IT+0xac>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d018      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x6c>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a1c      	ldr	r2, [pc, #112]	; (800b018 <HAL_TIM_Base_Start_IT+0xb0>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d013      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x6c>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afb4:	d00e      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x6c>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a18      	ldr	r2, [pc, #96]	; (800b01c <HAL_TIM_Base_Start_IT+0xb4>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d009      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x6c>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a16      	ldr	r2, [pc, #88]	; (800b020 <HAL_TIM_Base_Start_IT+0xb8>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d004      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x6c>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a15      	ldr	r2, [pc, #84]	; (800b024 <HAL_TIM_Base_Start_IT+0xbc>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d111      	bne.n	800aff8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f003 0307 	and.w	r3, r3, #7
 800afde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b06      	cmp	r3, #6
 800afe4:	d010      	beq.n	800b008 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f042 0201 	orr.w	r2, r2, #1
 800aff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aff6:	e007      	b.n	800b008 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f042 0201 	orr.w	r2, r2, #1
 800b006:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	bc80      	pop	{r7}
 800b012:	4770      	bx	lr
 800b014:	40012c00 	.word	0x40012c00
 800b018:	40013400 	.word	0x40013400
 800b01c:	40000400 	.word	0x40000400
 800b020:	40000800 	.word	0x40000800
 800b024:	40000c00 	.word	0x40000c00

0800b028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	f003 0302 	and.w	r3, r3, #2
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d122      	bne.n	800b084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	f003 0302 	and.w	r3, r3, #2
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d11b      	bne.n	800b084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f06f 0202 	mvn.w	r2, #2
 800b054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	699b      	ldr	r3, [r3, #24]
 800b062:	f003 0303 	and.w	r3, r3, #3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f9b4 	bl	800b3d8 <HAL_TIM_IC_CaptureCallback>
 800b070:	e005      	b.n	800b07e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f9a7 	bl	800b3c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f9b6 	bl	800b3ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	f003 0304 	and.w	r3, r3, #4
 800b08e:	2b04      	cmp	r3, #4
 800b090:	d122      	bne.n	800b0d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	f003 0304 	and.w	r3, r3, #4
 800b09c:	2b04      	cmp	r3, #4
 800b09e:	d11b      	bne.n	800b0d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f06f 0204 	mvn.w	r2, #4
 800b0a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2202      	movs	r2, #2
 800b0ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d003      	beq.n	800b0c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f98a 	bl	800b3d8 <HAL_TIM_IC_CaptureCallback>
 800b0c4:	e005      	b.n	800b0d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f97d 	bl	800b3c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f98c 	bl	800b3ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	f003 0308 	and.w	r3, r3, #8
 800b0e2:	2b08      	cmp	r3, #8
 800b0e4:	d122      	bne.n	800b12c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	f003 0308 	and.w	r3, r3, #8
 800b0f0:	2b08      	cmp	r3, #8
 800b0f2:	d11b      	bne.n	800b12c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f06f 0208 	mvn.w	r2, #8
 800b0fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2204      	movs	r2, #4
 800b102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	f003 0303 	and.w	r3, r3, #3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f960 	bl	800b3d8 <HAL_TIM_IC_CaptureCallback>
 800b118:	e005      	b.n	800b126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f953 	bl	800b3c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f962 	bl	800b3ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	f003 0310 	and.w	r3, r3, #16
 800b136:	2b10      	cmp	r3, #16
 800b138:	d122      	bne.n	800b180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	f003 0310 	and.w	r3, r3, #16
 800b144:	2b10      	cmp	r3, #16
 800b146:	d11b      	bne.n	800b180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f06f 0210 	mvn.w	r2, #16
 800b150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2208      	movs	r2, #8
 800b156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f936 	bl	800b3d8 <HAL_TIM_IC_CaptureCallback>
 800b16c:	e005      	b.n	800b17a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f929 	bl	800b3c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f938 	bl	800b3ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d10e      	bne.n	800b1ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	f003 0301 	and.w	r3, r3, #1
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d107      	bne.n	800b1ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f06f 0201 	mvn.w	r2, #1
 800b1a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7fc fd62 	bl	8007c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1b6:	2b80      	cmp	r3, #128	; 0x80
 800b1b8:	d10e      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c4:	2b80      	cmp	r3, #128	; 0x80
 800b1c6:	d107      	bne.n	800b1d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b1d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 faa1 	bl	800b71a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e2:	2b40      	cmp	r3, #64	; 0x40
 800b1e4:	d10e      	bne.n	800b204 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f0:	2b40      	cmp	r3, #64	; 0x40
 800b1f2:	d107      	bne.n	800b204 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b1fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f8fc 	bl	800b3fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	f003 0320 	and.w	r3, r3, #32
 800b20e:	2b20      	cmp	r3, #32
 800b210:	d10e      	bne.n	800b230 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f003 0320 	and.w	r3, r3, #32
 800b21c:	2b20      	cmp	r3, #32
 800b21e:	d107      	bne.n	800b230 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f06f 0220 	mvn.w	r2, #32
 800b228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fa6c 	bl	800b708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d101      	bne.n	800b254 <HAL_TIM_ConfigClockSource+0x1c>
 800b250:	2302      	movs	r3, #2
 800b252:	e0b4      	b.n	800b3be <HAL_TIM_ConfigClockSource+0x186>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2202      	movs	r2, #2
 800b260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b27a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b28c:	d03e      	beq.n	800b30c <HAL_TIM_ConfigClockSource+0xd4>
 800b28e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b292:	f200 8087 	bhi.w	800b3a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b29a:	f000 8086 	beq.w	800b3aa <HAL_TIM_ConfigClockSource+0x172>
 800b29e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a2:	d87f      	bhi.n	800b3a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2a4:	2b70      	cmp	r3, #112	; 0x70
 800b2a6:	d01a      	beq.n	800b2de <HAL_TIM_ConfigClockSource+0xa6>
 800b2a8:	2b70      	cmp	r3, #112	; 0x70
 800b2aa:	d87b      	bhi.n	800b3a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2ac:	2b60      	cmp	r3, #96	; 0x60
 800b2ae:	d050      	beq.n	800b352 <HAL_TIM_ConfigClockSource+0x11a>
 800b2b0:	2b60      	cmp	r3, #96	; 0x60
 800b2b2:	d877      	bhi.n	800b3a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2b4:	2b50      	cmp	r3, #80	; 0x50
 800b2b6:	d03c      	beq.n	800b332 <HAL_TIM_ConfigClockSource+0xfa>
 800b2b8:	2b50      	cmp	r3, #80	; 0x50
 800b2ba:	d873      	bhi.n	800b3a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2bc:	2b40      	cmp	r3, #64	; 0x40
 800b2be:	d058      	beq.n	800b372 <HAL_TIM_ConfigClockSource+0x13a>
 800b2c0:	2b40      	cmp	r3, #64	; 0x40
 800b2c2:	d86f      	bhi.n	800b3a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2c4:	2b30      	cmp	r3, #48	; 0x30
 800b2c6:	d064      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x15a>
 800b2c8:	2b30      	cmp	r3, #48	; 0x30
 800b2ca:	d86b      	bhi.n	800b3a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2cc:	2b20      	cmp	r3, #32
 800b2ce:	d060      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x15a>
 800b2d0:	2b20      	cmp	r3, #32
 800b2d2:	d867      	bhi.n	800b3a4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d05c      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x15a>
 800b2d8:	2b10      	cmp	r3, #16
 800b2da:	d05a      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x15a>
 800b2dc:	e062      	b.n	800b3a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2ee:	f000 f980 	bl	800b5f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b300:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	609a      	str	r2, [r3, #8]
      break;
 800b30a:	e04f      	b.n	800b3ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b31c:	f000 f969 	bl	800b5f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	689a      	ldr	r2, [r3, #8]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b32e:	609a      	str	r2, [r3, #8]
      break;
 800b330:	e03c      	b.n	800b3ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b33e:	461a      	mov	r2, r3
 800b340:	f000 f8e0 	bl	800b504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2150      	movs	r1, #80	; 0x50
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 f937 	bl	800b5be <TIM_ITRx_SetConfig>
      break;
 800b350:	e02c      	b.n	800b3ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b35e:	461a      	mov	r2, r3
 800b360:	f000 f8fe 	bl	800b560 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2160      	movs	r1, #96	; 0x60
 800b36a:	4618      	mov	r0, r3
 800b36c:	f000 f927 	bl	800b5be <TIM_ITRx_SetConfig>
      break;
 800b370:	e01c      	b.n	800b3ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b37e:	461a      	mov	r2, r3
 800b380:	f000 f8c0 	bl	800b504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2140      	movs	r1, #64	; 0x40
 800b38a:	4618      	mov	r0, r3
 800b38c:	f000 f917 	bl	800b5be <TIM_ITRx_SetConfig>
      break;
 800b390:	e00c      	b.n	800b3ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4619      	mov	r1, r3
 800b39c:	4610      	mov	r0, r2
 800b39e:	f000 f90e 	bl	800b5be <TIM_ITRx_SetConfig>
      break;
 800b3a2:	e003      	b.n	800b3ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b3a8:	e000      	b.n	800b3ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b3aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3ce:	bf00      	nop
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bc80      	pop	{r7}
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bc80      	pop	{r7}
 800b3e8:	4770      	bx	lr

0800b3ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3f2:	bf00      	nop
 800b3f4:	370c      	adds	r7, #12
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bc80      	pop	{r7}
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	bc80      	pop	{r7}
 800b40c:	4770      	bx	lr
	...

0800b410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a33      	ldr	r2, [pc, #204]	; (800b4f0 <TIM_Base_SetConfig+0xe0>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d013      	beq.n	800b450 <TIM_Base_SetConfig+0x40>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a32      	ldr	r2, [pc, #200]	; (800b4f4 <TIM_Base_SetConfig+0xe4>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d00f      	beq.n	800b450 <TIM_Base_SetConfig+0x40>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b436:	d00b      	beq.n	800b450 <TIM_Base_SetConfig+0x40>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a2f      	ldr	r2, [pc, #188]	; (800b4f8 <TIM_Base_SetConfig+0xe8>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d007      	beq.n	800b450 <TIM_Base_SetConfig+0x40>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a2e      	ldr	r2, [pc, #184]	; (800b4fc <TIM_Base_SetConfig+0xec>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d003      	beq.n	800b450 <TIM_Base_SetConfig+0x40>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a2d      	ldr	r2, [pc, #180]	; (800b500 <TIM_Base_SetConfig+0xf0>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d108      	bne.n	800b462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4313      	orrs	r3, r2
 800b460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a22      	ldr	r2, [pc, #136]	; (800b4f0 <TIM_Base_SetConfig+0xe0>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d013      	beq.n	800b492 <TIM_Base_SetConfig+0x82>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a21      	ldr	r2, [pc, #132]	; (800b4f4 <TIM_Base_SetConfig+0xe4>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d00f      	beq.n	800b492 <TIM_Base_SetConfig+0x82>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b478:	d00b      	beq.n	800b492 <TIM_Base_SetConfig+0x82>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a1e      	ldr	r2, [pc, #120]	; (800b4f8 <TIM_Base_SetConfig+0xe8>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d007      	beq.n	800b492 <TIM_Base_SetConfig+0x82>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a1d      	ldr	r2, [pc, #116]	; (800b4fc <TIM_Base_SetConfig+0xec>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d003      	beq.n	800b492 <TIM_Base_SetConfig+0x82>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a1c      	ldr	r2, [pc, #112]	; (800b500 <TIM_Base_SetConfig+0xf0>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d108      	bne.n	800b4a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	689a      	ldr	r2, [r3, #8]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a09      	ldr	r2, [pc, #36]	; (800b4f0 <TIM_Base_SetConfig+0xe0>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d003      	beq.n	800b4d8 <TIM_Base_SetConfig+0xc8>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4a08      	ldr	r2, [pc, #32]	; (800b4f4 <TIM_Base_SetConfig+0xe4>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d103      	bne.n	800b4e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	691a      	ldr	r2, [r3, #16]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	615a      	str	r2, [r3, #20]
}
 800b4e6:	bf00      	nop
 800b4e8:	3714      	adds	r7, #20
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bc80      	pop	{r7}
 800b4ee:	4770      	bx	lr
 800b4f0:	40012c00 	.word	0x40012c00
 800b4f4:	40013400 	.word	0x40013400
 800b4f8:	40000400 	.word	0x40000400
 800b4fc:	40000800 	.word	0x40000800
 800b500:	40000c00 	.word	0x40000c00

0800b504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6a1b      	ldr	r3, [r3, #32]
 800b514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	f023 0201 	bic.w	r2, r3, #1
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	699b      	ldr	r3, [r3, #24]
 800b526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b52e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	011b      	lsls	r3, r3, #4
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	4313      	orrs	r3, r2
 800b538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f023 030a 	bic.w	r3, r3, #10
 800b540:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	4313      	orrs	r3, r2
 800b548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	621a      	str	r2, [r3, #32]
}
 800b556:	bf00      	nop
 800b558:	371c      	adds	r7, #28
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bc80      	pop	{r7}
 800b55e:	4770      	bx	lr

0800b560 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6a1b      	ldr	r3, [r3, #32]
 800b570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	f023 0210 	bic.w	r2, r3, #16
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b58a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	031b      	lsls	r3, r3, #12
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	4313      	orrs	r3, r2
 800b594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b59c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	011b      	lsls	r3, r3, #4
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	621a      	str	r2, [r3, #32]
}
 800b5b4:	bf00      	nop
 800b5b6:	371c      	adds	r7, #28
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bc80      	pop	{r7}
 800b5bc:	4770      	bx	lr

0800b5be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b085      	sub	sp, #20
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	f043 0307 	orr.w	r3, r3, #7
 800b5e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	609a      	str	r2, [r3, #8]
}
 800b5e8:	bf00      	nop
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bc80      	pop	{r7}
 800b5f0:	4770      	bx	lr

0800b5f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5f2:	b480      	push	{r7}
 800b5f4:	b087      	sub	sp, #28
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	60f8      	str	r0, [r7, #12]
 800b5fa:	60b9      	str	r1, [r7, #8]
 800b5fc:	607a      	str	r2, [r7, #4]
 800b5fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b60c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	021a      	lsls	r2, r3, #8
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	431a      	orrs	r2, r3
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	4313      	orrs	r3, r2
 800b61a:	697a      	ldr	r2, [r7, #20]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	609a      	str	r2, [r3, #8]
}
 800b626:	bf00      	nop
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bc80      	pop	{r7}
 800b62e:	4770      	bx	lr

0800b630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b640:	2b01      	cmp	r3, #1
 800b642:	d101      	bne.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b644:	2302      	movs	r3, #2
 800b646:	e050      	b.n	800b6ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2202      	movs	r2, #2
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b66e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	4313      	orrs	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a1b      	ldr	r2, [pc, #108]	; (800b6f4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d018      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a19      	ldr	r2, [pc, #100]	; (800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d013      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b69e:	d00e      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a15      	ldr	r2, [pc, #84]	; (800b6fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d009      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a14      	ldr	r2, [pc, #80]	; (800b700 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d004      	beq.n	800b6be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a12      	ldr	r2, [pc, #72]	; (800b704 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d10c      	bne.n	800b6d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bc80      	pop	{r7}
 800b6f2:	4770      	bx	lr
 800b6f4:	40012c00 	.word	0x40012c00
 800b6f8:	40013400 	.word	0x40013400
 800b6fc:	40000400 	.word	0x40000400
 800b700:	40000800 	.word	0x40000800
 800b704:	40000c00 	.word	0x40000c00

0800b708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	bc80      	pop	{r7}
 800b718:	4770      	bx	lr

0800b71a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b083      	sub	sp, #12
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b722:	bf00      	nop
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	bc80      	pop	{r7}
 800b72a:	4770      	bx	lr

0800b72c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d101      	bne.n	800b73e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	e042      	b.n	800b7c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b00      	cmp	r3, #0
 800b748:	d106      	bne.n	800b758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7fc fe1a 	bl	800838c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2224      	movs	r2, #36	; 0x24
 800b75c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68da      	ldr	r2, [r3, #12]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b76e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 fcb5 	bl	800c0e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	691a      	ldr	r2, [r3, #16]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	695a      	ldr	r2, [r3, #20]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2220      	movs	r2, #32
 800b7b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b20      	cmp	r3, #32
 800b7e4:	d121      	bne.n	800b82a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <HAL_UART_Transmit_IT+0x26>
 800b7ec:	88fb      	ldrh	r3, [r7, #6]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e01a      	b.n	800b82c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	88fa      	ldrh	r2, [r7, #6]
 800b800:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	88fa      	ldrh	r2, [r7, #6]
 800b806:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2200      	movs	r2, #0
 800b80c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2221      	movs	r2, #33	; 0x21
 800b812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68da      	ldr	r2, [r3, #12]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b824:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	e000      	b.n	800b82c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b82a:	2302      	movs	r3, #2
  }
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	bc80      	pop	{r7}
 800b834:	4770      	bx	lr
	...

0800b838 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b0ba      	sub	sp, #232	; 0xe8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	695b      	ldr	r3, [r3, #20]
 800b85a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b85e:	2300      	movs	r3, #0
 800b860:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b864:	2300      	movs	r3, #0
 800b866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b86e:	f003 030f 	and.w	r3, r3, #15
 800b872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10f      	bne.n	800b89e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b882:	f003 0320 	and.w	r3, r3, #32
 800b886:	2b00      	cmp	r3, #0
 800b888:	d009      	beq.n	800b89e <HAL_UART_IRQHandler+0x66>
 800b88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b88e:	f003 0320 	and.w	r3, r3, #32
 800b892:	2b00      	cmp	r3, #0
 800b894:	d003      	beq.n	800b89e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fb63 	bl	800bf62 <UART_Receive_IT>
      return;
 800b89c:	e25b      	b.n	800bd56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b89e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f000 80de 	beq.w	800ba64 <HAL_UART_IRQHandler+0x22c>
 800b8a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ac:	f003 0301 	and.w	r3, r3, #1
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d106      	bne.n	800b8c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 80d1 	beq.w	800ba64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b8c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00b      	beq.n	800b8e6 <HAL_UART_IRQHandler+0xae>
 800b8ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d005      	beq.n	800b8e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8de:	f043 0201 	orr.w	r2, r3, #1
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8ea:	f003 0304 	and.w	r3, r3, #4
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00b      	beq.n	800b90a <HAL_UART_IRQHandler+0xd2>
 800b8f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8f6:	f003 0301 	and.w	r3, r3, #1
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d005      	beq.n	800b90a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b902:	f043 0202 	orr.w	r2, r3, #2
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b90e:	f003 0302 	and.w	r3, r3, #2
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00b      	beq.n	800b92e <HAL_UART_IRQHandler+0xf6>
 800b916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b91a:	f003 0301 	and.w	r3, r3, #1
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d005      	beq.n	800b92e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b926:	f043 0204 	orr.w	r2, r3, #4
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b92e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b932:	f003 0308 	and.w	r3, r3, #8
 800b936:	2b00      	cmp	r3, #0
 800b938:	d011      	beq.n	800b95e <HAL_UART_IRQHandler+0x126>
 800b93a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b93e:	f003 0320 	and.w	r3, r3, #32
 800b942:	2b00      	cmp	r3, #0
 800b944:	d105      	bne.n	800b952 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d005      	beq.n	800b95e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b956:	f043 0208 	orr.w	r2, r3, #8
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 81f2 	beq.w	800bd4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b96c:	f003 0320 	and.w	r3, r3, #32
 800b970:	2b00      	cmp	r3, #0
 800b972:	d008      	beq.n	800b986 <HAL_UART_IRQHandler+0x14e>
 800b974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b978:	f003 0320 	and.w	r3, r3, #32
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 faee 	bl	800bf62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b990:	2b00      	cmp	r3, #0
 800b992:	bf14      	ite	ne
 800b994:	2301      	movne	r3, #1
 800b996:	2300      	moveq	r3, #0
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a2:	f003 0308 	and.w	r3, r3, #8
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d103      	bne.n	800b9b2 <HAL_UART_IRQHandler+0x17a>
 800b9aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d04f      	beq.n	800ba52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f9f8 	bl	800bda8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	695b      	ldr	r3, [r3, #20]
 800b9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d041      	beq.n	800ba4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3314      	adds	r3, #20
 800b9cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b9d4:	e853 3f00 	ldrex	r3, [r3]
 800b9d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b9dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	3314      	adds	r3, #20
 800b9ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b9f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b9f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b9fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ba02:	e841 2300 	strex	r3, r2, [r1]
 800ba06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ba0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1d9      	bne.n	800b9c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d013      	beq.n	800ba42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba1e:	4a7e      	ldr	r2, [pc, #504]	; (800bc18 <HAL_UART_IRQHandler+0x3e0>)
 800ba20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fd f86c 	bl	8008b04 <HAL_DMA_Abort_IT>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d016      	beq.n	800ba60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba40:	e00e      	b.n	800ba60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f99c 	bl	800bd80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba48:	e00a      	b.n	800ba60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f998 	bl	800bd80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba50:	e006      	b.n	800ba60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f994 	bl	800bd80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800ba5e:	e175      	b.n	800bd4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba60:	bf00      	nop
    return;
 800ba62:	e173      	b.n	800bd4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	f040 814f 	bne.w	800bd0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ba6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba72:	f003 0310 	and.w	r3, r3, #16
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 8148 	beq.w	800bd0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ba7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba80:	f003 0310 	and.w	r3, r3, #16
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 8141 	beq.w	800bd0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60bb      	str	r3, [r7, #8]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60bb      	str	r3, [r7, #8]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	60bb      	str	r3, [r7, #8]
 800ba9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f000 80b6 	beq.w	800bc1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800babc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f000 8145 	beq.w	800bd50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800baca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bace:	429a      	cmp	r2, r3
 800bad0:	f080 813e 	bcs.w	800bd50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bada:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae0:	699b      	ldr	r3, [r3, #24]
 800bae2:	2b20      	cmp	r3, #32
 800bae4:	f000 8088 	beq.w	800bbf8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	330c      	adds	r3, #12
 800baee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800baf6:	e853 3f00 	ldrex	r3, [r3]
 800bafa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bafe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	330c      	adds	r3, #12
 800bb10:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bb14:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bb20:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb24:	e841 2300 	strex	r3, r2, [r1]
 800bb28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bb2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d1d9      	bne.n	800bae8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3314      	adds	r3, #20
 800bb3a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb3e:	e853 3f00 	ldrex	r3, [r3]
 800bb42:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bb44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb46:	f023 0301 	bic.w	r3, r3, #1
 800bb4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3314      	adds	r3, #20
 800bb54:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb58:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb5c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb64:	e841 2300 	strex	r3, r2, [r1]
 800bb68:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1e1      	bne.n	800bb34 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3314      	adds	r3, #20
 800bb76:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb7a:	e853 3f00 	ldrex	r3, [r3]
 800bb7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	3314      	adds	r3, #20
 800bb90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb94:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb9c:	e841 2300 	strex	r3, r2, [r1]
 800bba0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1e3      	bne.n	800bb70 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2220      	movs	r2, #32
 800bbac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	330c      	adds	r3, #12
 800bbbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bbc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbc8:	f023 0310 	bic.w	r3, r3, #16
 800bbcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	330c      	adds	r3, #12
 800bbd6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bbda:	65ba      	str	r2, [r7, #88]	; 0x58
 800bbdc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bbe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bbe2:	e841 2300 	strex	r3, r2, [r1]
 800bbe6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bbe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1e3      	bne.n	800bbb6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fc ff4b 	bl	8008a8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2202      	movs	r2, #2
 800bbfc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f8bf 	bl	800bd92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc14:	e09c      	b.n	800bd50 <HAL_UART_IRQHandler+0x518>
 800bc16:	bf00      	nop
 800bc18:	0800be6d 	.word	0x0800be6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 808e 	beq.w	800bd54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bc38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8089 	beq.w	800bd54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	330c      	adds	r3, #12
 800bc48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4c:	e853 3f00 	ldrex	r3, [r3]
 800bc50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	330c      	adds	r3, #12
 800bc62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bc66:	647a      	str	r2, [r7, #68]	; 0x44
 800bc68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc6e:	e841 2300 	strex	r3, r2, [r1]
 800bc72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1e3      	bne.n	800bc42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3314      	adds	r3, #20
 800bc80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc84:	e853 3f00 	ldrex	r3, [r3]
 800bc88:	623b      	str	r3, [r7, #32]
   return(result);
 800bc8a:	6a3b      	ldr	r3, [r7, #32]
 800bc8c:	f023 0301 	bic.w	r3, r3, #1
 800bc90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3314      	adds	r3, #20
 800bc9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc9e:	633a      	str	r2, [r7, #48]	; 0x30
 800bca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bca6:	e841 2300 	strex	r3, r2, [r1]
 800bcaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1e3      	bne.n	800bc7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2220      	movs	r2, #32
 800bcb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	330c      	adds	r3, #12
 800bcc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	e853 3f00 	ldrex	r3, [r3]
 800bcce:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f023 0310 	bic.w	r3, r3, #16
 800bcd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	330c      	adds	r3, #12
 800bce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bce4:	61fa      	str	r2, [r7, #28]
 800bce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce8:	69b9      	ldr	r1, [r7, #24]
 800bcea:	69fa      	ldr	r2, [r7, #28]
 800bcec:	e841 2300 	strex	r3, r2, [r1]
 800bcf0:	617b      	str	r3, [r7, #20]
   return(result);
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1e3      	bne.n	800bcc0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bcfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd02:	4619      	mov	r1, r3
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f844 	bl	800bd92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd0a:	e023      	b.n	800bd54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bd0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d009      	beq.n	800bd2c <HAL_UART_IRQHandler+0x4f4>
 800bd18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d003      	beq.n	800bd2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f8b5 	bl	800be94 <UART_Transmit_IT>
    return;
 800bd2a:	e014      	b.n	800bd56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bd2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00e      	beq.n	800bd56 <HAL_UART_IRQHandler+0x51e>
 800bd38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d008      	beq.n	800bd56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f8f4 	bl	800bf32 <UART_EndTransmit_IT>
    return;
 800bd4a:	e004      	b.n	800bd56 <HAL_UART_IRQHandler+0x51e>
    return;
 800bd4c:	bf00      	nop
 800bd4e:	e002      	b.n	800bd56 <HAL_UART_IRQHandler+0x51e>
      return;
 800bd50:	bf00      	nop
 800bd52:	e000      	b.n	800bd56 <HAL_UART_IRQHandler+0x51e>
      return;
 800bd54:	bf00      	nop
  }
}
 800bd56:	37e8      	adds	r7, #232	; 0xe8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bc80      	pop	{r7}
 800bd6c:	4770      	bx	lr

0800bd6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd6e:	b480      	push	{r7}
 800bd70:	b083      	sub	sp, #12
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bd76:	bf00      	nop
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bc80      	pop	{r7}
 800bd7e:	4770      	bx	lr

0800bd80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bc80      	pop	{r7}
 800bd90:	4770      	bx	lr

0800bd92 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b083      	sub	sp, #12
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	460b      	mov	r3, r1
 800bd9c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd9e:	bf00      	nop
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bc80      	pop	{r7}
 800bda6:	4770      	bx	lr

0800bda8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b095      	sub	sp, #84	; 0x54
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	330c      	adds	r3, #12
 800bdb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdba:	e853 3f00 	ldrex	r3, [r3]
 800bdbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	330c      	adds	r3, #12
 800bdce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdd0:	643a      	str	r2, [r7, #64]	; 0x40
 800bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bdd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdd8:	e841 2300 	strex	r3, r2, [r1]
 800bddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1e5      	bne.n	800bdb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3314      	adds	r3, #20
 800bdea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdec:	6a3b      	ldr	r3, [r7, #32]
 800bdee:	e853 3f00 	ldrex	r3, [r3]
 800bdf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	f023 0301 	bic.w	r3, r3, #1
 800bdfa:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	3314      	adds	r3, #20
 800be02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be04:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be0c:	e841 2300 	strex	r3, r2, [r1]
 800be10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1e5      	bne.n	800bde4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d119      	bne.n	800be54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	330c      	adds	r3, #12
 800be26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	e853 3f00 	ldrex	r3, [r3]
 800be2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	f023 0310 	bic.w	r3, r3, #16
 800be36:	647b      	str	r3, [r7, #68]	; 0x44
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	330c      	adds	r3, #12
 800be3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be40:	61ba      	str	r2, [r7, #24]
 800be42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be44:	6979      	ldr	r1, [r7, #20]
 800be46:	69ba      	ldr	r2, [r7, #24]
 800be48:	e841 2300 	strex	r3, r2, [r1]
 800be4c:	613b      	str	r3, [r7, #16]
   return(result);
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1e5      	bne.n	800be20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2220      	movs	r2, #32
 800be58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	631a      	str	r2, [r3, #48]	; 0x30
}
 800be62:	bf00      	nop
 800be64:	3754      	adds	r7, #84	; 0x54
 800be66:	46bd      	mov	sp, r7
 800be68:	bc80      	pop	{r7}
 800be6a:	4770      	bx	lr

0800be6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f7ff ff7a 	bl	800bd80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be8c:	bf00      	nop
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	2b21      	cmp	r3, #33	; 0x21
 800bea6:	d13e      	bne.n	800bf26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beb0:	d114      	bne.n	800bedc <UART_Transmit_IT+0x48>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d110      	bne.n	800bedc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a1b      	ldr	r3, [r3, #32]
 800bebe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	461a      	mov	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bece:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a1b      	ldr	r3, [r3, #32]
 800bed4:	1c9a      	adds	r2, r3, #2
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	621a      	str	r2, [r3, #32]
 800beda:	e008      	b.n	800beee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	1c59      	adds	r1, r3, #1
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	6211      	str	r1, [r2, #32]
 800bee6:	781a      	ldrb	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	3b01      	subs	r3, #1
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	4619      	mov	r1, r3
 800befc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10f      	bne.n	800bf22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68da      	ldr	r2, [r3, #12]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68da      	ldr	r2, [r3, #12]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf22:	2300      	movs	r3, #0
 800bf24:	e000      	b.n	800bf28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf26:	2302      	movs	r3, #2
  }
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3714      	adds	r7, #20
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bc80      	pop	{r7}
 800bf30:	4770      	bx	lr

0800bf32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b082      	sub	sp, #8
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68da      	ldr	r2, [r3, #12]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2220      	movs	r2, #32
 800bf4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7ff ff02 	bl	800bd5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b08c      	sub	sp, #48	; 0x30
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b22      	cmp	r3, #34	; 0x22
 800bf74:	f040 80ae 	bne.w	800c0d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf80:	d117      	bne.n	800bfb2 <UART_Receive_IT+0x50>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d113      	bne.n	800bfb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfaa:	1c9a      	adds	r2, r3, #2
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	629a      	str	r2, [r3, #40]	; 0x28
 800bfb0:	e026      	b.n	800c000 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfc4:	d007      	beq.n	800bfd6 <UART_Receive_IT+0x74>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10a      	bne.n	800bfe4 <UART_Receive_IT+0x82>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d106      	bne.n	800bfe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	b2da      	uxtb	r2, r3
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe0:	701a      	strb	r2, [r3, #0]
 800bfe2:	e008      	b.n	800bff6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c004:	b29b      	uxth	r3, r3
 800c006:	3b01      	subs	r3, #1
 800c008:	b29b      	uxth	r3, r3
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	4619      	mov	r1, r3
 800c00e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c010:	2b00      	cmp	r3, #0
 800c012:	d15d      	bne.n	800c0d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68da      	ldr	r2, [r3, #12]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f022 0220 	bic.w	r2, r2, #32
 800c022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68da      	ldr	r2, [r3, #12]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	695a      	ldr	r2, [r3, #20]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f022 0201 	bic.w	r2, r2, #1
 800c042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2220      	movs	r2, #32
 800c048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c056:	2b01      	cmp	r3, #1
 800c058:	d135      	bne.n	800c0c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	330c      	adds	r3, #12
 800c066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	e853 3f00 	ldrex	r3, [r3]
 800c06e:	613b      	str	r3, [r7, #16]
   return(result);
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	f023 0310 	bic.w	r3, r3, #16
 800c076:	627b      	str	r3, [r7, #36]	; 0x24
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	330c      	adds	r3, #12
 800c07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c080:	623a      	str	r2, [r7, #32]
 800c082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c084:	69f9      	ldr	r1, [r7, #28]
 800c086:	6a3a      	ldr	r2, [r7, #32]
 800c088:	e841 2300 	strex	r3, r2, [r1]
 800c08c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1e5      	bne.n	800c060 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 0310 	and.w	r3, r3, #16
 800c09e:	2b10      	cmp	r3, #16
 800c0a0:	d10a      	bne.n	800c0b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	60fb      	str	r3, [r7, #12]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	60fb      	str	r3, [r7, #12]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff fe67 	bl	800bd92 <HAL_UARTEx_RxEventCallback>
 800c0c4:	e002      	b.n	800c0cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff fe51 	bl	800bd6e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	e002      	b.n	800c0d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e000      	b.n	800c0d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c0d4:	2302      	movs	r3, #2
  }
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3730      	adds	r7, #48	; 0x30
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
	...

0800c0e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	68da      	ldr	r2, [r3, #12]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	430a      	orrs	r2, r1
 800c0fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	689a      	ldr	r2, [r3, #8]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	691b      	ldr	r3, [r3, #16]
 800c106:	431a      	orrs	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	695b      	ldr	r3, [r3, #20]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c11a:	f023 030c 	bic.w	r3, r3, #12
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	6812      	ldr	r2, [r2, #0]
 800c122:	68b9      	ldr	r1, [r7, #8]
 800c124:	430b      	orrs	r3, r1
 800c126:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	699a      	ldr	r2, [r3, #24]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	430a      	orrs	r2, r1
 800c13c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a2c      	ldr	r2, [pc, #176]	; (800c1f4 <UART_SetConfig+0x114>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d103      	bne.n	800c150 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c148:	f7fe fe8c 	bl	800ae64 <HAL_RCC_GetPCLK2Freq>
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	e002      	b.n	800c156 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c150:	f7fe fe74 	bl	800ae3c <HAL_RCC_GetPCLK1Freq>
 800c154:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009a      	lsls	r2, r3, #2
 800c160:	441a      	add	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	fbb2 f3f3 	udiv	r3, r2, r3
 800c16c:	4a22      	ldr	r2, [pc, #136]	; (800c1f8 <UART_SetConfig+0x118>)
 800c16e:	fba2 2303 	umull	r2, r3, r2, r3
 800c172:	095b      	lsrs	r3, r3, #5
 800c174:	0119      	lsls	r1, r3, #4
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	4613      	mov	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4413      	add	r3, r2
 800c17e:	009a      	lsls	r2, r3, #2
 800c180:	441a      	add	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	fbb2 f2f3 	udiv	r2, r2, r3
 800c18c:	4b1a      	ldr	r3, [pc, #104]	; (800c1f8 <UART_SetConfig+0x118>)
 800c18e:	fba3 0302 	umull	r0, r3, r3, r2
 800c192:	095b      	lsrs	r3, r3, #5
 800c194:	2064      	movs	r0, #100	; 0x64
 800c196:	fb00 f303 	mul.w	r3, r0, r3
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	011b      	lsls	r3, r3, #4
 800c19e:	3332      	adds	r3, #50	; 0x32
 800c1a0:	4a15      	ldr	r2, [pc, #84]	; (800c1f8 <UART_SetConfig+0x118>)
 800c1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a6:	095b      	lsrs	r3, r3, #5
 800c1a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1ac:	4419      	add	r1, r3
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009a      	lsls	r2, r3, #2
 800c1b8:	441a      	add	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c1c4:	4b0c      	ldr	r3, [pc, #48]	; (800c1f8 <UART_SetConfig+0x118>)
 800c1c6:	fba3 0302 	umull	r0, r3, r3, r2
 800c1ca:	095b      	lsrs	r3, r3, #5
 800c1cc:	2064      	movs	r0, #100	; 0x64
 800c1ce:	fb00 f303 	mul.w	r3, r0, r3
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	011b      	lsls	r3, r3, #4
 800c1d6:	3332      	adds	r3, #50	; 0x32
 800c1d8:	4a07      	ldr	r2, [pc, #28]	; (800c1f8 <UART_SetConfig+0x118>)
 800c1da:	fba2 2303 	umull	r2, r3, r2, r3
 800c1de:	095b      	lsrs	r3, r3, #5
 800c1e0:	f003 020f 	and.w	r2, r3, #15
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	440a      	add	r2, r1
 800c1ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c1ec:	bf00      	nop
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	40013800 	.word	0x40013800
 800c1f8:	51eb851f 	.word	0x51eb851f

0800c1fc <__itoa>:
 800c1fc:	1e93      	subs	r3, r2, #2
 800c1fe:	2b22      	cmp	r3, #34	; 0x22
 800c200:	b510      	push	{r4, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	d904      	bls.n	800c210 <__itoa+0x14>
 800c206:	2300      	movs	r3, #0
 800c208:	461c      	mov	r4, r3
 800c20a:	700b      	strb	r3, [r1, #0]
 800c20c:	4620      	mov	r0, r4
 800c20e:	bd10      	pop	{r4, pc}
 800c210:	2a0a      	cmp	r2, #10
 800c212:	d109      	bne.n	800c228 <__itoa+0x2c>
 800c214:	2800      	cmp	r0, #0
 800c216:	da07      	bge.n	800c228 <__itoa+0x2c>
 800c218:	232d      	movs	r3, #45	; 0x2d
 800c21a:	700b      	strb	r3, [r1, #0]
 800c21c:	2101      	movs	r1, #1
 800c21e:	4240      	negs	r0, r0
 800c220:	4421      	add	r1, r4
 800c222:	f000 f8d9 	bl	800c3d8 <__utoa>
 800c226:	e7f1      	b.n	800c20c <__itoa+0x10>
 800c228:	2100      	movs	r1, #0
 800c22a:	e7f9      	b.n	800c220 <__itoa+0x24>

0800c22c <itoa>:
 800c22c:	f7ff bfe6 	b.w	800c1fc <__itoa>

0800c230 <malloc>:
 800c230:	4b02      	ldr	r3, [pc, #8]	; (800c23c <malloc+0xc>)
 800c232:	4601      	mov	r1, r0
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	f000 b823 	b.w	800c280 <_malloc_r>
 800c23a:	bf00      	nop
 800c23c:	200000fc 	.word	0x200000fc

0800c240 <sbrk_aligned>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	4e0e      	ldr	r6, [pc, #56]	; (800c27c <sbrk_aligned+0x3c>)
 800c244:	460c      	mov	r4, r1
 800c246:	6831      	ldr	r1, [r6, #0]
 800c248:	4605      	mov	r5, r0
 800c24a:	b911      	cbnz	r1, 800c252 <sbrk_aligned+0x12>
 800c24c:	f000 f91e 	bl	800c48c <_sbrk_r>
 800c250:	6030      	str	r0, [r6, #0]
 800c252:	4621      	mov	r1, r4
 800c254:	4628      	mov	r0, r5
 800c256:	f000 f919 	bl	800c48c <_sbrk_r>
 800c25a:	1c43      	adds	r3, r0, #1
 800c25c:	d00a      	beq.n	800c274 <sbrk_aligned+0x34>
 800c25e:	1cc4      	adds	r4, r0, #3
 800c260:	f024 0403 	bic.w	r4, r4, #3
 800c264:	42a0      	cmp	r0, r4
 800c266:	d007      	beq.n	800c278 <sbrk_aligned+0x38>
 800c268:	1a21      	subs	r1, r4, r0
 800c26a:	4628      	mov	r0, r5
 800c26c:	f000 f90e 	bl	800c48c <_sbrk_r>
 800c270:	3001      	adds	r0, #1
 800c272:	d101      	bne.n	800c278 <sbrk_aligned+0x38>
 800c274:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c278:	4620      	mov	r0, r4
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	20000490 	.word	0x20000490

0800c280 <_malloc_r>:
 800c280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c284:	1ccd      	adds	r5, r1, #3
 800c286:	f025 0503 	bic.w	r5, r5, #3
 800c28a:	3508      	adds	r5, #8
 800c28c:	2d0c      	cmp	r5, #12
 800c28e:	bf38      	it	cc
 800c290:	250c      	movcc	r5, #12
 800c292:	2d00      	cmp	r5, #0
 800c294:	4607      	mov	r7, r0
 800c296:	db01      	blt.n	800c29c <_malloc_r+0x1c>
 800c298:	42a9      	cmp	r1, r5
 800c29a:	d905      	bls.n	800c2a8 <_malloc_r+0x28>
 800c29c:	230c      	movs	r3, #12
 800c29e:	2600      	movs	r6, #0
 800c2a0:	603b      	str	r3, [r7, #0]
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c37c <_malloc_r+0xfc>
 800c2ac:	f000 f868 	bl	800c380 <__malloc_lock>
 800c2b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c2b4:	461c      	mov	r4, r3
 800c2b6:	bb5c      	cbnz	r4, 800c310 <_malloc_r+0x90>
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7ff ffc0 	bl	800c240 <sbrk_aligned>
 800c2c0:	1c43      	adds	r3, r0, #1
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	d155      	bne.n	800c372 <_malloc_r+0xf2>
 800c2c6:	f8d8 4000 	ldr.w	r4, [r8]
 800c2ca:	4626      	mov	r6, r4
 800c2cc:	2e00      	cmp	r6, #0
 800c2ce:	d145      	bne.n	800c35c <_malloc_r+0xdc>
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	d048      	beq.n	800c366 <_malloc_r+0xe6>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	4631      	mov	r1, r6
 800c2d8:	4638      	mov	r0, r7
 800c2da:	eb04 0903 	add.w	r9, r4, r3
 800c2de:	f000 f8d5 	bl	800c48c <_sbrk_r>
 800c2e2:	4581      	cmp	r9, r0
 800c2e4:	d13f      	bne.n	800c366 <_malloc_r+0xe6>
 800c2e6:	6821      	ldr	r1, [r4, #0]
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	1a6d      	subs	r5, r5, r1
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	f7ff ffa7 	bl	800c240 <sbrk_aligned>
 800c2f2:	3001      	adds	r0, #1
 800c2f4:	d037      	beq.n	800c366 <_malloc_r+0xe6>
 800c2f6:	6823      	ldr	r3, [r4, #0]
 800c2f8:	442b      	add	r3, r5
 800c2fa:	6023      	str	r3, [r4, #0]
 800c2fc:	f8d8 3000 	ldr.w	r3, [r8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d038      	beq.n	800c376 <_malloc_r+0xf6>
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	42a2      	cmp	r2, r4
 800c308:	d12b      	bne.n	800c362 <_malloc_r+0xe2>
 800c30a:	2200      	movs	r2, #0
 800c30c:	605a      	str	r2, [r3, #4]
 800c30e:	e00f      	b.n	800c330 <_malloc_r+0xb0>
 800c310:	6822      	ldr	r2, [r4, #0]
 800c312:	1b52      	subs	r2, r2, r5
 800c314:	d41f      	bmi.n	800c356 <_malloc_r+0xd6>
 800c316:	2a0b      	cmp	r2, #11
 800c318:	d917      	bls.n	800c34a <_malloc_r+0xca>
 800c31a:	1961      	adds	r1, r4, r5
 800c31c:	42a3      	cmp	r3, r4
 800c31e:	6025      	str	r5, [r4, #0]
 800c320:	bf18      	it	ne
 800c322:	6059      	strne	r1, [r3, #4]
 800c324:	6863      	ldr	r3, [r4, #4]
 800c326:	bf08      	it	eq
 800c328:	f8c8 1000 	streq.w	r1, [r8]
 800c32c:	5162      	str	r2, [r4, r5]
 800c32e:	604b      	str	r3, [r1, #4]
 800c330:	4638      	mov	r0, r7
 800c332:	f104 060b 	add.w	r6, r4, #11
 800c336:	f000 f829 	bl	800c38c <__malloc_unlock>
 800c33a:	f026 0607 	bic.w	r6, r6, #7
 800c33e:	1d23      	adds	r3, r4, #4
 800c340:	1af2      	subs	r2, r6, r3
 800c342:	d0ae      	beq.n	800c2a2 <_malloc_r+0x22>
 800c344:	1b9b      	subs	r3, r3, r6
 800c346:	50a3      	str	r3, [r4, r2]
 800c348:	e7ab      	b.n	800c2a2 <_malloc_r+0x22>
 800c34a:	42a3      	cmp	r3, r4
 800c34c:	6862      	ldr	r2, [r4, #4]
 800c34e:	d1dd      	bne.n	800c30c <_malloc_r+0x8c>
 800c350:	f8c8 2000 	str.w	r2, [r8]
 800c354:	e7ec      	b.n	800c330 <_malloc_r+0xb0>
 800c356:	4623      	mov	r3, r4
 800c358:	6864      	ldr	r4, [r4, #4]
 800c35a:	e7ac      	b.n	800c2b6 <_malloc_r+0x36>
 800c35c:	4634      	mov	r4, r6
 800c35e:	6876      	ldr	r6, [r6, #4]
 800c360:	e7b4      	b.n	800c2cc <_malloc_r+0x4c>
 800c362:	4613      	mov	r3, r2
 800c364:	e7cc      	b.n	800c300 <_malloc_r+0x80>
 800c366:	230c      	movs	r3, #12
 800c368:	4638      	mov	r0, r7
 800c36a:	603b      	str	r3, [r7, #0]
 800c36c:	f000 f80e 	bl	800c38c <__malloc_unlock>
 800c370:	e797      	b.n	800c2a2 <_malloc_r+0x22>
 800c372:	6025      	str	r5, [r4, #0]
 800c374:	e7dc      	b.n	800c330 <_malloc_r+0xb0>
 800c376:	605b      	str	r3, [r3, #4]
 800c378:	deff      	udf	#255	; 0xff
 800c37a:	bf00      	nop
 800c37c:	2000048c 	.word	0x2000048c

0800c380 <__malloc_lock>:
 800c380:	4801      	ldr	r0, [pc, #4]	; (800c388 <__malloc_lock+0x8>)
 800c382:	f000 b8bd 	b.w	800c500 <__retarget_lock_acquire_recursive>
 800c386:	bf00      	nop
 800c388:	200005cc 	.word	0x200005cc

0800c38c <__malloc_unlock>:
 800c38c:	4801      	ldr	r0, [pc, #4]	; (800c394 <__malloc_unlock+0x8>)
 800c38e:	f000 b8b8 	b.w	800c502 <__retarget_lock_release_recursive>
 800c392:	bf00      	nop
 800c394:	200005cc 	.word	0x200005cc

0800c398 <siprintf>:
 800c398:	b40e      	push	{r1, r2, r3}
 800c39a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c39e:	b500      	push	{lr}
 800c3a0:	b09c      	sub	sp, #112	; 0x70
 800c3a2:	ab1d      	add	r3, sp, #116	; 0x74
 800c3a4:	9002      	str	r0, [sp, #8]
 800c3a6:	9006      	str	r0, [sp, #24]
 800c3a8:	9107      	str	r1, [sp, #28]
 800c3aa:	9104      	str	r1, [sp, #16]
 800c3ac:	4808      	ldr	r0, [pc, #32]	; (800c3d0 <siprintf+0x38>)
 800c3ae:	4909      	ldr	r1, [pc, #36]	; (800c3d4 <siprintf+0x3c>)
 800c3b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b4:	9105      	str	r1, [sp, #20]
 800c3b6:	6800      	ldr	r0, [r0, #0]
 800c3b8:	a902      	add	r1, sp, #8
 800c3ba:	9301      	str	r3, [sp, #4]
 800c3bc:	f000 f95a 	bl	800c674 <_svfiprintf_r>
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	9b02      	ldr	r3, [sp, #8]
 800c3c4:	701a      	strb	r2, [r3, #0]
 800c3c6:	b01c      	add	sp, #112	; 0x70
 800c3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3cc:	b003      	add	sp, #12
 800c3ce:	4770      	bx	lr
 800c3d0:	200000fc 	.word	0x200000fc
 800c3d4:	ffff0208 	.word	0xffff0208

0800c3d8 <__utoa>:
 800c3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3da:	b08b      	sub	sp, #44	; 0x2c
 800c3dc:	4605      	mov	r5, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	466e      	mov	r6, sp
 800c3e2:	4c1d      	ldr	r4, [pc, #116]	; (800c458 <__utoa+0x80>)
 800c3e4:	f104 0c20 	add.w	ip, r4, #32
 800c3e8:	4637      	mov	r7, r6
 800c3ea:	6820      	ldr	r0, [r4, #0]
 800c3ec:	6861      	ldr	r1, [r4, #4]
 800c3ee:	3408      	adds	r4, #8
 800c3f0:	c703      	stmia	r7!, {r0, r1}
 800c3f2:	4564      	cmp	r4, ip
 800c3f4:	463e      	mov	r6, r7
 800c3f6:	d1f7      	bne.n	800c3e8 <__utoa+0x10>
 800c3f8:	7921      	ldrb	r1, [r4, #4]
 800c3fa:	6820      	ldr	r0, [r4, #0]
 800c3fc:	7139      	strb	r1, [r7, #4]
 800c3fe:	1e91      	subs	r1, r2, #2
 800c400:	2922      	cmp	r1, #34	; 0x22
 800c402:	6038      	str	r0, [r7, #0]
 800c404:	f04f 0100 	mov.w	r1, #0
 800c408:	d904      	bls.n	800c414 <__utoa+0x3c>
 800c40a:	7019      	strb	r1, [r3, #0]
 800c40c:	460b      	mov	r3, r1
 800c40e:	4618      	mov	r0, r3
 800c410:	b00b      	add	sp, #44	; 0x2c
 800c412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c414:	1e58      	subs	r0, r3, #1
 800c416:	4684      	mov	ip, r0
 800c418:	fbb5 f7f2 	udiv	r7, r5, r2
 800c41c:	fb02 5617 	mls	r6, r2, r7, r5
 800c420:	3628      	adds	r6, #40	; 0x28
 800c422:	446e      	add	r6, sp
 800c424:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c428:	460c      	mov	r4, r1
 800c42a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c42e:	462e      	mov	r6, r5
 800c430:	42b2      	cmp	r2, r6
 800c432:	463d      	mov	r5, r7
 800c434:	f101 0101 	add.w	r1, r1, #1
 800c438:	d9ee      	bls.n	800c418 <__utoa+0x40>
 800c43a:	2200      	movs	r2, #0
 800c43c:	545a      	strb	r2, [r3, r1]
 800c43e:	1919      	adds	r1, r3, r4
 800c440:	1aa5      	subs	r5, r4, r2
 800c442:	42aa      	cmp	r2, r5
 800c444:	dae3      	bge.n	800c40e <__utoa+0x36>
 800c446:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c44a:	780e      	ldrb	r6, [r1, #0]
 800c44c:	3201      	adds	r2, #1
 800c44e:	7006      	strb	r6, [r0, #0]
 800c450:	f801 5901 	strb.w	r5, [r1], #-1
 800c454:	e7f4      	b.n	800c440 <__utoa+0x68>
 800c456:	bf00      	nop
 800c458:	0800dbf2 	.word	0x0800dbf2

0800c45c <strcat>:
 800c45c:	4602      	mov	r2, r0
 800c45e:	b510      	push	{r4, lr}
 800c460:	7814      	ldrb	r4, [r2, #0]
 800c462:	4613      	mov	r3, r2
 800c464:	3201      	adds	r2, #1
 800c466:	2c00      	cmp	r4, #0
 800c468:	d1fa      	bne.n	800c460 <strcat+0x4>
 800c46a:	3b01      	subs	r3, #1
 800c46c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c470:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c474:	2a00      	cmp	r2, #0
 800c476:	d1f9      	bne.n	800c46c <strcat+0x10>
 800c478:	bd10      	pop	{r4, pc}

0800c47a <memset>:
 800c47a:	4603      	mov	r3, r0
 800c47c:	4402      	add	r2, r0
 800c47e:	4293      	cmp	r3, r2
 800c480:	d100      	bne.n	800c484 <memset+0xa>
 800c482:	4770      	bx	lr
 800c484:	f803 1b01 	strb.w	r1, [r3], #1
 800c488:	e7f9      	b.n	800c47e <memset+0x4>
	...

0800c48c <_sbrk_r>:
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	2300      	movs	r3, #0
 800c490:	4d05      	ldr	r5, [pc, #20]	; (800c4a8 <_sbrk_r+0x1c>)
 800c492:	4604      	mov	r4, r0
 800c494:	4608      	mov	r0, r1
 800c496:	602b      	str	r3, [r5, #0]
 800c498:	f7fc f808 	bl	80084ac <_sbrk>
 800c49c:	1c43      	adds	r3, r0, #1
 800c49e:	d102      	bne.n	800c4a6 <_sbrk_r+0x1a>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	b103      	cbz	r3, 800c4a6 <_sbrk_r+0x1a>
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	bd38      	pop	{r3, r4, r5, pc}
 800c4a8:	200005d0 	.word	0x200005d0

0800c4ac <__errno>:
 800c4ac:	4b01      	ldr	r3, [pc, #4]	; (800c4b4 <__errno+0x8>)
 800c4ae:	6818      	ldr	r0, [r3, #0]
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	200000fc 	.word	0x200000fc

0800c4b8 <__libc_init_array>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	2600      	movs	r6, #0
 800c4bc:	4d0c      	ldr	r5, [pc, #48]	; (800c4f0 <__libc_init_array+0x38>)
 800c4be:	4c0d      	ldr	r4, [pc, #52]	; (800c4f4 <__libc_init_array+0x3c>)
 800c4c0:	1b64      	subs	r4, r4, r5
 800c4c2:	10a4      	asrs	r4, r4, #2
 800c4c4:	42a6      	cmp	r6, r4
 800c4c6:	d109      	bne.n	800c4dc <__libc_init_array+0x24>
 800c4c8:	f000 fbc6 	bl	800cc58 <_init>
 800c4cc:	2600      	movs	r6, #0
 800c4ce:	4d0a      	ldr	r5, [pc, #40]	; (800c4f8 <__libc_init_array+0x40>)
 800c4d0:	4c0a      	ldr	r4, [pc, #40]	; (800c4fc <__libc_init_array+0x44>)
 800c4d2:	1b64      	subs	r4, r4, r5
 800c4d4:	10a4      	asrs	r4, r4, #2
 800c4d6:	42a6      	cmp	r6, r4
 800c4d8:	d105      	bne.n	800c4e6 <__libc_init_array+0x2e>
 800c4da:	bd70      	pop	{r4, r5, r6, pc}
 800c4dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4e0:	4798      	blx	r3
 800c4e2:	3601      	adds	r6, #1
 800c4e4:	e7ee      	b.n	800c4c4 <__libc_init_array+0xc>
 800c4e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4ea:	4798      	blx	r3
 800c4ec:	3601      	adds	r6, #1
 800c4ee:	e7f2      	b.n	800c4d6 <__libc_init_array+0x1e>
 800c4f0:	0800dc4c 	.word	0x0800dc4c
 800c4f4:	0800dc4c 	.word	0x0800dc4c
 800c4f8:	0800dc4c 	.word	0x0800dc4c
 800c4fc:	0800dc50 	.word	0x0800dc50

0800c500 <__retarget_lock_acquire_recursive>:
 800c500:	4770      	bx	lr

0800c502 <__retarget_lock_release_recursive>:
 800c502:	4770      	bx	lr

0800c504 <memcpy>:
 800c504:	440a      	add	r2, r1
 800c506:	4291      	cmp	r1, r2
 800c508:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c50c:	d100      	bne.n	800c510 <memcpy+0xc>
 800c50e:	4770      	bx	lr
 800c510:	b510      	push	{r4, lr}
 800c512:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c516:	4291      	cmp	r1, r2
 800c518:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c51c:	d1f9      	bne.n	800c512 <memcpy+0xe>
 800c51e:	bd10      	pop	{r4, pc}

0800c520 <strcpy>:
 800c520:	4603      	mov	r3, r0
 800c522:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c526:	f803 2b01 	strb.w	r2, [r3], #1
 800c52a:	2a00      	cmp	r2, #0
 800c52c:	d1f9      	bne.n	800c522 <strcpy+0x2>
 800c52e:	4770      	bx	lr

0800c530 <_free_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4605      	mov	r5, r0
 800c534:	2900      	cmp	r1, #0
 800c536:	d040      	beq.n	800c5ba <_free_r+0x8a>
 800c538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c53c:	1f0c      	subs	r4, r1, #4
 800c53e:	2b00      	cmp	r3, #0
 800c540:	bfb8      	it	lt
 800c542:	18e4      	addlt	r4, r4, r3
 800c544:	f7ff ff1c 	bl	800c380 <__malloc_lock>
 800c548:	4a1c      	ldr	r2, [pc, #112]	; (800c5bc <_free_r+0x8c>)
 800c54a:	6813      	ldr	r3, [r2, #0]
 800c54c:	b933      	cbnz	r3, 800c55c <_free_r+0x2c>
 800c54e:	6063      	str	r3, [r4, #4]
 800c550:	6014      	str	r4, [r2, #0]
 800c552:	4628      	mov	r0, r5
 800c554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c558:	f7ff bf18 	b.w	800c38c <__malloc_unlock>
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	d908      	bls.n	800c572 <_free_r+0x42>
 800c560:	6820      	ldr	r0, [r4, #0]
 800c562:	1821      	adds	r1, r4, r0
 800c564:	428b      	cmp	r3, r1
 800c566:	bf01      	itttt	eq
 800c568:	6819      	ldreq	r1, [r3, #0]
 800c56a:	685b      	ldreq	r3, [r3, #4]
 800c56c:	1809      	addeq	r1, r1, r0
 800c56e:	6021      	streq	r1, [r4, #0]
 800c570:	e7ed      	b.n	800c54e <_free_r+0x1e>
 800c572:	461a      	mov	r2, r3
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	b10b      	cbz	r3, 800c57c <_free_r+0x4c>
 800c578:	42a3      	cmp	r3, r4
 800c57a:	d9fa      	bls.n	800c572 <_free_r+0x42>
 800c57c:	6811      	ldr	r1, [r2, #0]
 800c57e:	1850      	adds	r0, r2, r1
 800c580:	42a0      	cmp	r0, r4
 800c582:	d10b      	bne.n	800c59c <_free_r+0x6c>
 800c584:	6820      	ldr	r0, [r4, #0]
 800c586:	4401      	add	r1, r0
 800c588:	1850      	adds	r0, r2, r1
 800c58a:	4283      	cmp	r3, r0
 800c58c:	6011      	str	r1, [r2, #0]
 800c58e:	d1e0      	bne.n	800c552 <_free_r+0x22>
 800c590:	6818      	ldr	r0, [r3, #0]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	4408      	add	r0, r1
 800c596:	6010      	str	r0, [r2, #0]
 800c598:	6053      	str	r3, [r2, #4]
 800c59a:	e7da      	b.n	800c552 <_free_r+0x22>
 800c59c:	d902      	bls.n	800c5a4 <_free_r+0x74>
 800c59e:	230c      	movs	r3, #12
 800c5a0:	602b      	str	r3, [r5, #0]
 800c5a2:	e7d6      	b.n	800c552 <_free_r+0x22>
 800c5a4:	6820      	ldr	r0, [r4, #0]
 800c5a6:	1821      	adds	r1, r4, r0
 800c5a8:	428b      	cmp	r3, r1
 800c5aa:	bf01      	itttt	eq
 800c5ac:	6819      	ldreq	r1, [r3, #0]
 800c5ae:	685b      	ldreq	r3, [r3, #4]
 800c5b0:	1809      	addeq	r1, r1, r0
 800c5b2:	6021      	streq	r1, [r4, #0]
 800c5b4:	6063      	str	r3, [r4, #4]
 800c5b6:	6054      	str	r4, [r2, #4]
 800c5b8:	e7cb      	b.n	800c552 <_free_r+0x22>
 800c5ba:	bd38      	pop	{r3, r4, r5, pc}
 800c5bc:	2000048c 	.word	0x2000048c

0800c5c0 <__ssputs_r>:
 800c5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c4:	461f      	mov	r7, r3
 800c5c6:	688e      	ldr	r6, [r1, #8]
 800c5c8:	4682      	mov	sl, r0
 800c5ca:	42be      	cmp	r6, r7
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	4690      	mov	r8, r2
 800c5d0:	680b      	ldr	r3, [r1, #0]
 800c5d2:	d82c      	bhi.n	800c62e <__ssputs_r+0x6e>
 800c5d4:	898a      	ldrh	r2, [r1, #12]
 800c5d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5da:	d026      	beq.n	800c62a <__ssputs_r+0x6a>
 800c5dc:	6965      	ldr	r5, [r4, #20]
 800c5de:	6909      	ldr	r1, [r1, #16]
 800c5e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5e4:	eba3 0901 	sub.w	r9, r3, r1
 800c5e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5ec:	1c7b      	adds	r3, r7, #1
 800c5ee:	444b      	add	r3, r9
 800c5f0:	106d      	asrs	r5, r5, #1
 800c5f2:	429d      	cmp	r5, r3
 800c5f4:	bf38      	it	cc
 800c5f6:	461d      	movcc	r5, r3
 800c5f8:	0553      	lsls	r3, r2, #21
 800c5fa:	d527      	bpl.n	800c64c <__ssputs_r+0x8c>
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	f7ff fe3f 	bl	800c280 <_malloc_r>
 800c602:	4606      	mov	r6, r0
 800c604:	b360      	cbz	r0, 800c660 <__ssputs_r+0xa0>
 800c606:	464a      	mov	r2, r9
 800c608:	6921      	ldr	r1, [r4, #16]
 800c60a:	f7ff ff7b 	bl	800c504 <memcpy>
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c618:	81a3      	strh	r3, [r4, #12]
 800c61a:	6126      	str	r6, [r4, #16]
 800c61c:	444e      	add	r6, r9
 800c61e:	6026      	str	r6, [r4, #0]
 800c620:	463e      	mov	r6, r7
 800c622:	6165      	str	r5, [r4, #20]
 800c624:	eba5 0509 	sub.w	r5, r5, r9
 800c628:	60a5      	str	r5, [r4, #8]
 800c62a:	42be      	cmp	r6, r7
 800c62c:	d900      	bls.n	800c630 <__ssputs_r+0x70>
 800c62e:	463e      	mov	r6, r7
 800c630:	4632      	mov	r2, r6
 800c632:	4641      	mov	r1, r8
 800c634:	6820      	ldr	r0, [r4, #0]
 800c636:	f000 fade 	bl	800cbf6 <memmove>
 800c63a:	2000      	movs	r0, #0
 800c63c:	68a3      	ldr	r3, [r4, #8]
 800c63e:	1b9b      	subs	r3, r3, r6
 800c640:	60a3      	str	r3, [r4, #8]
 800c642:	6823      	ldr	r3, [r4, #0]
 800c644:	4433      	add	r3, r6
 800c646:	6023      	str	r3, [r4, #0]
 800c648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c64c:	462a      	mov	r2, r5
 800c64e:	f000 faa3 	bl	800cb98 <_realloc_r>
 800c652:	4606      	mov	r6, r0
 800c654:	2800      	cmp	r0, #0
 800c656:	d1e0      	bne.n	800c61a <__ssputs_r+0x5a>
 800c658:	4650      	mov	r0, sl
 800c65a:	6921      	ldr	r1, [r4, #16]
 800c65c:	f7ff ff68 	bl	800c530 <_free_r>
 800c660:	230c      	movs	r3, #12
 800c662:	f8ca 3000 	str.w	r3, [sl]
 800c666:	89a3      	ldrh	r3, [r4, #12]
 800c668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c670:	81a3      	strh	r3, [r4, #12]
 800c672:	e7e9      	b.n	800c648 <__ssputs_r+0x88>

0800c674 <_svfiprintf_r>:
 800c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	4698      	mov	r8, r3
 800c67a:	898b      	ldrh	r3, [r1, #12]
 800c67c:	4607      	mov	r7, r0
 800c67e:	061b      	lsls	r3, r3, #24
 800c680:	460d      	mov	r5, r1
 800c682:	4614      	mov	r4, r2
 800c684:	b09d      	sub	sp, #116	; 0x74
 800c686:	d50e      	bpl.n	800c6a6 <_svfiprintf_r+0x32>
 800c688:	690b      	ldr	r3, [r1, #16]
 800c68a:	b963      	cbnz	r3, 800c6a6 <_svfiprintf_r+0x32>
 800c68c:	2140      	movs	r1, #64	; 0x40
 800c68e:	f7ff fdf7 	bl	800c280 <_malloc_r>
 800c692:	6028      	str	r0, [r5, #0]
 800c694:	6128      	str	r0, [r5, #16]
 800c696:	b920      	cbnz	r0, 800c6a2 <_svfiprintf_r+0x2e>
 800c698:	230c      	movs	r3, #12
 800c69a:	603b      	str	r3, [r7, #0]
 800c69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6a0:	e0d0      	b.n	800c844 <_svfiprintf_r+0x1d0>
 800c6a2:	2340      	movs	r3, #64	; 0x40
 800c6a4:	616b      	str	r3, [r5, #20]
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c6aa:	2320      	movs	r3, #32
 800c6ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6b0:	2330      	movs	r3, #48	; 0x30
 800c6b2:	f04f 0901 	mov.w	r9, #1
 800c6b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6ba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c85c <_svfiprintf_r+0x1e8>
 800c6be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6c2:	4623      	mov	r3, r4
 800c6c4:	469a      	mov	sl, r3
 800c6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ca:	b10a      	cbz	r2, 800c6d0 <_svfiprintf_r+0x5c>
 800c6cc:	2a25      	cmp	r2, #37	; 0x25
 800c6ce:	d1f9      	bne.n	800c6c4 <_svfiprintf_r+0x50>
 800c6d0:	ebba 0b04 	subs.w	fp, sl, r4
 800c6d4:	d00b      	beq.n	800c6ee <_svfiprintf_r+0x7a>
 800c6d6:	465b      	mov	r3, fp
 800c6d8:	4622      	mov	r2, r4
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f7ff ff6f 	bl	800c5c0 <__ssputs_r>
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	f000 80a9 	beq.w	800c83a <_svfiprintf_r+0x1c6>
 800c6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6ea:	445a      	add	r2, fp
 800c6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 80a1 	beq.w	800c83a <_svfiprintf_r+0x1c6>
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c702:	f10a 0a01 	add.w	sl, sl, #1
 800c706:	9304      	str	r3, [sp, #16]
 800c708:	9307      	str	r3, [sp, #28]
 800c70a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c70e:	931a      	str	r3, [sp, #104]	; 0x68
 800c710:	4654      	mov	r4, sl
 800c712:	2205      	movs	r2, #5
 800c714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c718:	4850      	ldr	r0, [pc, #320]	; (800c85c <_svfiprintf_r+0x1e8>)
 800c71a:	f000 fa86 	bl	800cc2a <memchr>
 800c71e:	9a04      	ldr	r2, [sp, #16]
 800c720:	b9d8      	cbnz	r0, 800c75a <_svfiprintf_r+0xe6>
 800c722:	06d0      	lsls	r0, r2, #27
 800c724:	bf44      	itt	mi
 800c726:	2320      	movmi	r3, #32
 800c728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c72c:	0711      	lsls	r1, r2, #28
 800c72e:	bf44      	itt	mi
 800c730:	232b      	movmi	r3, #43	; 0x2b
 800c732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c736:	f89a 3000 	ldrb.w	r3, [sl]
 800c73a:	2b2a      	cmp	r3, #42	; 0x2a
 800c73c:	d015      	beq.n	800c76a <_svfiprintf_r+0xf6>
 800c73e:	4654      	mov	r4, sl
 800c740:	2000      	movs	r0, #0
 800c742:	f04f 0c0a 	mov.w	ip, #10
 800c746:	9a07      	ldr	r2, [sp, #28]
 800c748:	4621      	mov	r1, r4
 800c74a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c74e:	3b30      	subs	r3, #48	; 0x30
 800c750:	2b09      	cmp	r3, #9
 800c752:	d94d      	bls.n	800c7f0 <_svfiprintf_r+0x17c>
 800c754:	b1b0      	cbz	r0, 800c784 <_svfiprintf_r+0x110>
 800c756:	9207      	str	r2, [sp, #28]
 800c758:	e014      	b.n	800c784 <_svfiprintf_r+0x110>
 800c75a:	eba0 0308 	sub.w	r3, r0, r8
 800c75e:	fa09 f303 	lsl.w	r3, r9, r3
 800c762:	4313      	orrs	r3, r2
 800c764:	46a2      	mov	sl, r4
 800c766:	9304      	str	r3, [sp, #16]
 800c768:	e7d2      	b.n	800c710 <_svfiprintf_r+0x9c>
 800c76a:	9b03      	ldr	r3, [sp, #12]
 800c76c:	1d19      	adds	r1, r3, #4
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	9103      	str	r1, [sp, #12]
 800c772:	2b00      	cmp	r3, #0
 800c774:	bfbb      	ittet	lt
 800c776:	425b      	neglt	r3, r3
 800c778:	f042 0202 	orrlt.w	r2, r2, #2
 800c77c:	9307      	strge	r3, [sp, #28]
 800c77e:	9307      	strlt	r3, [sp, #28]
 800c780:	bfb8      	it	lt
 800c782:	9204      	strlt	r2, [sp, #16]
 800c784:	7823      	ldrb	r3, [r4, #0]
 800c786:	2b2e      	cmp	r3, #46	; 0x2e
 800c788:	d10c      	bne.n	800c7a4 <_svfiprintf_r+0x130>
 800c78a:	7863      	ldrb	r3, [r4, #1]
 800c78c:	2b2a      	cmp	r3, #42	; 0x2a
 800c78e:	d134      	bne.n	800c7fa <_svfiprintf_r+0x186>
 800c790:	9b03      	ldr	r3, [sp, #12]
 800c792:	3402      	adds	r4, #2
 800c794:	1d1a      	adds	r2, r3, #4
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	9203      	str	r2, [sp, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	bfb8      	it	lt
 800c79e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c7a2:	9305      	str	r3, [sp, #20]
 800c7a4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c860 <_svfiprintf_r+0x1ec>
 800c7a8:	2203      	movs	r2, #3
 800c7aa:	4650      	mov	r0, sl
 800c7ac:	7821      	ldrb	r1, [r4, #0]
 800c7ae:	f000 fa3c 	bl	800cc2a <memchr>
 800c7b2:	b138      	cbz	r0, 800c7c4 <_svfiprintf_r+0x150>
 800c7b4:	2240      	movs	r2, #64	; 0x40
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	eba0 000a 	sub.w	r0, r0, sl
 800c7bc:	4082      	lsls	r2, r0
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	3401      	adds	r4, #1
 800c7c2:	9304      	str	r3, [sp, #16]
 800c7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c8:	2206      	movs	r2, #6
 800c7ca:	4826      	ldr	r0, [pc, #152]	; (800c864 <_svfiprintf_r+0x1f0>)
 800c7cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7d0:	f000 fa2b 	bl	800cc2a <memchr>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d038      	beq.n	800c84a <_svfiprintf_r+0x1d6>
 800c7d8:	4b23      	ldr	r3, [pc, #140]	; (800c868 <_svfiprintf_r+0x1f4>)
 800c7da:	bb1b      	cbnz	r3, 800c824 <_svfiprintf_r+0x1b0>
 800c7dc:	9b03      	ldr	r3, [sp, #12]
 800c7de:	3307      	adds	r3, #7
 800c7e0:	f023 0307 	bic.w	r3, r3, #7
 800c7e4:	3308      	adds	r3, #8
 800c7e6:	9303      	str	r3, [sp, #12]
 800c7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7ea:	4433      	add	r3, r6
 800c7ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ee:	e768      	b.n	800c6c2 <_svfiprintf_r+0x4e>
 800c7f0:	460c      	mov	r4, r1
 800c7f2:	2001      	movs	r0, #1
 800c7f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7f8:	e7a6      	b.n	800c748 <_svfiprintf_r+0xd4>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	f04f 0c0a 	mov.w	ip, #10
 800c800:	4619      	mov	r1, r3
 800c802:	3401      	adds	r4, #1
 800c804:	9305      	str	r3, [sp, #20]
 800c806:	4620      	mov	r0, r4
 800c808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c80c:	3a30      	subs	r2, #48	; 0x30
 800c80e:	2a09      	cmp	r2, #9
 800c810:	d903      	bls.n	800c81a <_svfiprintf_r+0x1a6>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d0c6      	beq.n	800c7a4 <_svfiprintf_r+0x130>
 800c816:	9105      	str	r1, [sp, #20]
 800c818:	e7c4      	b.n	800c7a4 <_svfiprintf_r+0x130>
 800c81a:	4604      	mov	r4, r0
 800c81c:	2301      	movs	r3, #1
 800c81e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c822:	e7f0      	b.n	800c806 <_svfiprintf_r+0x192>
 800c824:	ab03      	add	r3, sp, #12
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	462a      	mov	r2, r5
 800c82a:	4638      	mov	r0, r7
 800c82c:	4b0f      	ldr	r3, [pc, #60]	; (800c86c <_svfiprintf_r+0x1f8>)
 800c82e:	a904      	add	r1, sp, #16
 800c830:	f3af 8000 	nop.w
 800c834:	1c42      	adds	r2, r0, #1
 800c836:	4606      	mov	r6, r0
 800c838:	d1d6      	bne.n	800c7e8 <_svfiprintf_r+0x174>
 800c83a:	89ab      	ldrh	r3, [r5, #12]
 800c83c:	065b      	lsls	r3, r3, #25
 800c83e:	f53f af2d 	bmi.w	800c69c <_svfiprintf_r+0x28>
 800c842:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c844:	b01d      	add	sp, #116	; 0x74
 800c846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84a:	ab03      	add	r3, sp, #12
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	462a      	mov	r2, r5
 800c850:	4638      	mov	r0, r7
 800c852:	4b06      	ldr	r3, [pc, #24]	; (800c86c <_svfiprintf_r+0x1f8>)
 800c854:	a904      	add	r1, sp, #16
 800c856:	f000 f87d 	bl	800c954 <_printf_i>
 800c85a:	e7eb      	b.n	800c834 <_svfiprintf_r+0x1c0>
 800c85c:	0800dc17 	.word	0x0800dc17
 800c860:	0800dc1d 	.word	0x0800dc1d
 800c864:	0800dc21 	.word	0x0800dc21
 800c868:	00000000 	.word	0x00000000
 800c86c:	0800c5c1 	.word	0x0800c5c1

0800c870 <_printf_common>:
 800c870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c874:	4616      	mov	r6, r2
 800c876:	4699      	mov	r9, r3
 800c878:	688a      	ldr	r2, [r1, #8]
 800c87a:	690b      	ldr	r3, [r1, #16]
 800c87c:	4607      	mov	r7, r0
 800c87e:	4293      	cmp	r3, r2
 800c880:	bfb8      	it	lt
 800c882:	4613      	movlt	r3, r2
 800c884:	6033      	str	r3, [r6, #0]
 800c886:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c88a:	460c      	mov	r4, r1
 800c88c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c890:	b10a      	cbz	r2, 800c896 <_printf_common+0x26>
 800c892:	3301      	adds	r3, #1
 800c894:	6033      	str	r3, [r6, #0]
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	0699      	lsls	r1, r3, #26
 800c89a:	bf42      	ittt	mi
 800c89c:	6833      	ldrmi	r3, [r6, #0]
 800c89e:	3302      	addmi	r3, #2
 800c8a0:	6033      	strmi	r3, [r6, #0]
 800c8a2:	6825      	ldr	r5, [r4, #0]
 800c8a4:	f015 0506 	ands.w	r5, r5, #6
 800c8a8:	d106      	bne.n	800c8b8 <_printf_common+0x48>
 800c8aa:	f104 0a19 	add.w	sl, r4, #25
 800c8ae:	68e3      	ldr	r3, [r4, #12]
 800c8b0:	6832      	ldr	r2, [r6, #0]
 800c8b2:	1a9b      	subs	r3, r3, r2
 800c8b4:	42ab      	cmp	r3, r5
 800c8b6:	dc2b      	bgt.n	800c910 <_printf_common+0xa0>
 800c8b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8bc:	1e13      	subs	r3, r2, #0
 800c8be:	6822      	ldr	r2, [r4, #0]
 800c8c0:	bf18      	it	ne
 800c8c2:	2301      	movne	r3, #1
 800c8c4:	0692      	lsls	r2, r2, #26
 800c8c6:	d430      	bmi.n	800c92a <_printf_common+0xba>
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	4638      	mov	r0, r7
 800c8cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8d0:	47c0      	blx	r8
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	d023      	beq.n	800c91e <_printf_common+0xae>
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	6922      	ldr	r2, [r4, #16]
 800c8da:	f003 0306 	and.w	r3, r3, #6
 800c8de:	2b04      	cmp	r3, #4
 800c8e0:	bf14      	ite	ne
 800c8e2:	2500      	movne	r5, #0
 800c8e4:	6833      	ldreq	r3, [r6, #0]
 800c8e6:	f04f 0600 	mov.w	r6, #0
 800c8ea:	bf08      	it	eq
 800c8ec:	68e5      	ldreq	r5, [r4, #12]
 800c8ee:	f104 041a 	add.w	r4, r4, #26
 800c8f2:	bf08      	it	eq
 800c8f4:	1aed      	subeq	r5, r5, r3
 800c8f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c8fa:	bf08      	it	eq
 800c8fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c900:	4293      	cmp	r3, r2
 800c902:	bfc4      	itt	gt
 800c904:	1a9b      	subgt	r3, r3, r2
 800c906:	18ed      	addgt	r5, r5, r3
 800c908:	42b5      	cmp	r5, r6
 800c90a:	d11a      	bne.n	800c942 <_printf_common+0xd2>
 800c90c:	2000      	movs	r0, #0
 800c90e:	e008      	b.n	800c922 <_printf_common+0xb2>
 800c910:	2301      	movs	r3, #1
 800c912:	4652      	mov	r2, sl
 800c914:	4649      	mov	r1, r9
 800c916:	4638      	mov	r0, r7
 800c918:	47c0      	blx	r8
 800c91a:	3001      	adds	r0, #1
 800c91c:	d103      	bne.n	800c926 <_printf_common+0xb6>
 800c91e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c926:	3501      	adds	r5, #1
 800c928:	e7c1      	b.n	800c8ae <_printf_common+0x3e>
 800c92a:	2030      	movs	r0, #48	; 0x30
 800c92c:	18e1      	adds	r1, r4, r3
 800c92e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c932:	1c5a      	adds	r2, r3, #1
 800c934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c938:	4422      	add	r2, r4
 800c93a:	3302      	adds	r3, #2
 800c93c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c940:	e7c2      	b.n	800c8c8 <_printf_common+0x58>
 800c942:	2301      	movs	r3, #1
 800c944:	4622      	mov	r2, r4
 800c946:	4649      	mov	r1, r9
 800c948:	4638      	mov	r0, r7
 800c94a:	47c0      	blx	r8
 800c94c:	3001      	adds	r0, #1
 800c94e:	d0e6      	beq.n	800c91e <_printf_common+0xae>
 800c950:	3601      	adds	r6, #1
 800c952:	e7d9      	b.n	800c908 <_printf_common+0x98>

0800c954 <_printf_i>:
 800c954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c958:	7e0f      	ldrb	r7, [r1, #24]
 800c95a:	4691      	mov	r9, r2
 800c95c:	2f78      	cmp	r7, #120	; 0x78
 800c95e:	4680      	mov	r8, r0
 800c960:	460c      	mov	r4, r1
 800c962:	469a      	mov	sl, r3
 800c964:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c96a:	d807      	bhi.n	800c97c <_printf_i+0x28>
 800c96c:	2f62      	cmp	r7, #98	; 0x62
 800c96e:	d80a      	bhi.n	800c986 <_printf_i+0x32>
 800c970:	2f00      	cmp	r7, #0
 800c972:	f000 80d5 	beq.w	800cb20 <_printf_i+0x1cc>
 800c976:	2f58      	cmp	r7, #88	; 0x58
 800c978:	f000 80c1 	beq.w	800cafe <_printf_i+0x1aa>
 800c97c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c984:	e03a      	b.n	800c9fc <_printf_i+0xa8>
 800c986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c98a:	2b15      	cmp	r3, #21
 800c98c:	d8f6      	bhi.n	800c97c <_printf_i+0x28>
 800c98e:	a101      	add	r1, pc, #4	; (adr r1, 800c994 <_printf_i+0x40>)
 800c990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c994:	0800c9ed 	.word	0x0800c9ed
 800c998:	0800ca01 	.word	0x0800ca01
 800c99c:	0800c97d 	.word	0x0800c97d
 800c9a0:	0800c97d 	.word	0x0800c97d
 800c9a4:	0800c97d 	.word	0x0800c97d
 800c9a8:	0800c97d 	.word	0x0800c97d
 800c9ac:	0800ca01 	.word	0x0800ca01
 800c9b0:	0800c97d 	.word	0x0800c97d
 800c9b4:	0800c97d 	.word	0x0800c97d
 800c9b8:	0800c97d 	.word	0x0800c97d
 800c9bc:	0800c97d 	.word	0x0800c97d
 800c9c0:	0800cb07 	.word	0x0800cb07
 800c9c4:	0800ca2d 	.word	0x0800ca2d
 800c9c8:	0800cac1 	.word	0x0800cac1
 800c9cc:	0800c97d 	.word	0x0800c97d
 800c9d0:	0800c97d 	.word	0x0800c97d
 800c9d4:	0800cb29 	.word	0x0800cb29
 800c9d8:	0800c97d 	.word	0x0800c97d
 800c9dc:	0800ca2d 	.word	0x0800ca2d
 800c9e0:	0800c97d 	.word	0x0800c97d
 800c9e4:	0800c97d 	.word	0x0800c97d
 800c9e8:	0800cac9 	.word	0x0800cac9
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	1d1a      	adds	r2, r3, #4
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	602a      	str	r2, [r5, #0]
 800c9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e0a0      	b.n	800cb42 <_printf_i+0x1ee>
 800ca00:	6820      	ldr	r0, [r4, #0]
 800ca02:	682b      	ldr	r3, [r5, #0]
 800ca04:	0607      	lsls	r7, r0, #24
 800ca06:	f103 0104 	add.w	r1, r3, #4
 800ca0a:	6029      	str	r1, [r5, #0]
 800ca0c:	d501      	bpl.n	800ca12 <_printf_i+0xbe>
 800ca0e:	681e      	ldr	r6, [r3, #0]
 800ca10:	e003      	b.n	800ca1a <_printf_i+0xc6>
 800ca12:	0646      	lsls	r6, r0, #25
 800ca14:	d5fb      	bpl.n	800ca0e <_printf_i+0xba>
 800ca16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ca1a:	2e00      	cmp	r6, #0
 800ca1c:	da03      	bge.n	800ca26 <_printf_i+0xd2>
 800ca1e:	232d      	movs	r3, #45	; 0x2d
 800ca20:	4276      	negs	r6, r6
 800ca22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca26:	230a      	movs	r3, #10
 800ca28:	4859      	ldr	r0, [pc, #356]	; (800cb90 <_printf_i+0x23c>)
 800ca2a:	e012      	b.n	800ca52 <_printf_i+0xfe>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	6820      	ldr	r0, [r4, #0]
 800ca30:	1d19      	adds	r1, r3, #4
 800ca32:	6029      	str	r1, [r5, #0]
 800ca34:	0605      	lsls	r5, r0, #24
 800ca36:	d501      	bpl.n	800ca3c <_printf_i+0xe8>
 800ca38:	681e      	ldr	r6, [r3, #0]
 800ca3a:	e002      	b.n	800ca42 <_printf_i+0xee>
 800ca3c:	0641      	lsls	r1, r0, #25
 800ca3e:	d5fb      	bpl.n	800ca38 <_printf_i+0xe4>
 800ca40:	881e      	ldrh	r6, [r3, #0]
 800ca42:	2f6f      	cmp	r7, #111	; 0x6f
 800ca44:	bf0c      	ite	eq
 800ca46:	2308      	moveq	r3, #8
 800ca48:	230a      	movne	r3, #10
 800ca4a:	4851      	ldr	r0, [pc, #324]	; (800cb90 <_printf_i+0x23c>)
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca52:	6865      	ldr	r5, [r4, #4]
 800ca54:	2d00      	cmp	r5, #0
 800ca56:	bfa8      	it	ge
 800ca58:	6821      	ldrge	r1, [r4, #0]
 800ca5a:	60a5      	str	r5, [r4, #8]
 800ca5c:	bfa4      	itt	ge
 800ca5e:	f021 0104 	bicge.w	r1, r1, #4
 800ca62:	6021      	strge	r1, [r4, #0]
 800ca64:	b90e      	cbnz	r6, 800ca6a <_printf_i+0x116>
 800ca66:	2d00      	cmp	r5, #0
 800ca68:	d04b      	beq.n	800cb02 <_printf_i+0x1ae>
 800ca6a:	4615      	mov	r5, r2
 800ca6c:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca70:	fb03 6711 	mls	r7, r3, r1, r6
 800ca74:	5dc7      	ldrb	r7, [r0, r7]
 800ca76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca7a:	4637      	mov	r7, r6
 800ca7c:	42bb      	cmp	r3, r7
 800ca7e:	460e      	mov	r6, r1
 800ca80:	d9f4      	bls.n	800ca6c <_printf_i+0x118>
 800ca82:	2b08      	cmp	r3, #8
 800ca84:	d10b      	bne.n	800ca9e <_printf_i+0x14a>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	07de      	lsls	r6, r3, #31
 800ca8a:	d508      	bpl.n	800ca9e <_printf_i+0x14a>
 800ca8c:	6923      	ldr	r3, [r4, #16]
 800ca8e:	6861      	ldr	r1, [r4, #4]
 800ca90:	4299      	cmp	r1, r3
 800ca92:	bfde      	ittt	le
 800ca94:	2330      	movle	r3, #48	; 0x30
 800ca96:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca9a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ca9e:	1b52      	subs	r2, r2, r5
 800caa0:	6122      	str	r2, [r4, #16]
 800caa2:	464b      	mov	r3, r9
 800caa4:	4621      	mov	r1, r4
 800caa6:	4640      	mov	r0, r8
 800caa8:	f8cd a000 	str.w	sl, [sp]
 800caac:	aa03      	add	r2, sp, #12
 800caae:	f7ff fedf 	bl	800c870 <_printf_common>
 800cab2:	3001      	adds	r0, #1
 800cab4:	d14a      	bne.n	800cb4c <_printf_i+0x1f8>
 800cab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caba:	b004      	add	sp, #16
 800cabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	f043 0320 	orr.w	r3, r3, #32
 800cac6:	6023      	str	r3, [r4, #0]
 800cac8:	2778      	movs	r7, #120	; 0x78
 800caca:	4832      	ldr	r0, [pc, #200]	; (800cb94 <_printf_i+0x240>)
 800cacc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cad0:	6823      	ldr	r3, [r4, #0]
 800cad2:	6829      	ldr	r1, [r5, #0]
 800cad4:	061f      	lsls	r7, r3, #24
 800cad6:	f851 6b04 	ldr.w	r6, [r1], #4
 800cada:	d402      	bmi.n	800cae2 <_printf_i+0x18e>
 800cadc:	065f      	lsls	r7, r3, #25
 800cade:	bf48      	it	mi
 800cae0:	b2b6      	uxthmi	r6, r6
 800cae2:	07df      	lsls	r7, r3, #31
 800cae4:	bf48      	it	mi
 800cae6:	f043 0320 	orrmi.w	r3, r3, #32
 800caea:	6029      	str	r1, [r5, #0]
 800caec:	bf48      	it	mi
 800caee:	6023      	strmi	r3, [r4, #0]
 800caf0:	b91e      	cbnz	r6, 800cafa <_printf_i+0x1a6>
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	f023 0320 	bic.w	r3, r3, #32
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	2310      	movs	r3, #16
 800cafc:	e7a6      	b.n	800ca4c <_printf_i+0xf8>
 800cafe:	4824      	ldr	r0, [pc, #144]	; (800cb90 <_printf_i+0x23c>)
 800cb00:	e7e4      	b.n	800cacc <_printf_i+0x178>
 800cb02:	4615      	mov	r5, r2
 800cb04:	e7bd      	b.n	800ca82 <_printf_i+0x12e>
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	6826      	ldr	r6, [r4, #0]
 800cb0a:	1d18      	adds	r0, r3, #4
 800cb0c:	6961      	ldr	r1, [r4, #20]
 800cb0e:	6028      	str	r0, [r5, #0]
 800cb10:	0635      	lsls	r5, r6, #24
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	d501      	bpl.n	800cb1a <_printf_i+0x1c6>
 800cb16:	6019      	str	r1, [r3, #0]
 800cb18:	e002      	b.n	800cb20 <_printf_i+0x1cc>
 800cb1a:	0670      	lsls	r0, r6, #25
 800cb1c:	d5fb      	bpl.n	800cb16 <_printf_i+0x1c2>
 800cb1e:	8019      	strh	r1, [r3, #0]
 800cb20:	2300      	movs	r3, #0
 800cb22:	4615      	mov	r5, r2
 800cb24:	6123      	str	r3, [r4, #16]
 800cb26:	e7bc      	b.n	800caa2 <_printf_i+0x14e>
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	1d1a      	adds	r2, r3, #4
 800cb2e:	602a      	str	r2, [r5, #0]
 800cb30:	681d      	ldr	r5, [r3, #0]
 800cb32:	6862      	ldr	r2, [r4, #4]
 800cb34:	4628      	mov	r0, r5
 800cb36:	f000 f878 	bl	800cc2a <memchr>
 800cb3a:	b108      	cbz	r0, 800cb40 <_printf_i+0x1ec>
 800cb3c:	1b40      	subs	r0, r0, r5
 800cb3e:	6060      	str	r0, [r4, #4]
 800cb40:	6863      	ldr	r3, [r4, #4]
 800cb42:	6123      	str	r3, [r4, #16]
 800cb44:	2300      	movs	r3, #0
 800cb46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb4a:	e7aa      	b.n	800caa2 <_printf_i+0x14e>
 800cb4c:	462a      	mov	r2, r5
 800cb4e:	4649      	mov	r1, r9
 800cb50:	4640      	mov	r0, r8
 800cb52:	6923      	ldr	r3, [r4, #16]
 800cb54:	47d0      	blx	sl
 800cb56:	3001      	adds	r0, #1
 800cb58:	d0ad      	beq.n	800cab6 <_printf_i+0x162>
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	079b      	lsls	r3, r3, #30
 800cb5e:	d413      	bmi.n	800cb88 <_printf_i+0x234>
 800cb60:	68e0      	ldr	r0, [r4, #12]
 800cb62:	9b03      	ldr	r3, [sp, #12]
 800cb64:	4298      	cmp	r0, r3
 800cb66:	bfb8      	it	lt
 800cb68:	4618      	movlt	r0, r3
 800cb6a:	e7a6      	b.n	800caba <_printf_i+0x166>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	4632      	mov	r2, r6
 800cb70:	4649      	mov	r1, r9
 800cb72:	4640      	mov	r0, r8
 800cb74:	47d0      	blx	sl
 800cb76:	3001      	adds	r0, #1
 800cb78:	d09d      	beq.n	800cab6 <_printf_i+0x162>
 800cb7a:	3501      	adds	r5, #1
 800cb7c:	68e3      	ldr	r3, [r4, #12]
 800cb7e:	9903      	ldr	r1, [sp, #12]
 800cb80:	1a5b      	subs	r3, r3, r1
 800cb82:	42ab      	cmp	r3, r5
 800cb84:	dcf2      	bgt.n	800cb6c <_printf_i+0x218>
 800cb86:	e7eb      	b.n	800cb60 <_printf_i+0x20c>
 800cb88:	2500      	movs	r5, #0
 800cb8a:	f104 0619 	add.w	r6, r4, #25
 800cb8e:	e7f5      	b.n	800cb7c <_printf_i+0x228>
 800cb90:	0800dc28 	.word	0x0800dc28
 800cb94:	0800dc39 	.word	0x0800dc39

0800cb98 <_realloc_r>:
 800cb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	4680      	mov	r8, r0
 800cb9e:	4614      	mov	r4, r2
 800cba0:	460e      	mov	r6, r1
 800cba2:	b921      	cbnz	r1, 800cbae <_realloc_r+0x16>
 800cba4:	4611      	mov	r1, r2
 800cba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbaa:	f7ff bb69 	b.w	800c280 <_malloc_r>
 800cbae:	b92a      	cbnz	r2, 800cbbc <_realloc_r+0x24>
 800cbb0:	f7ff fcbe 	bl	800c530 <_free_r>
 800cbb4:	4625      	mov	r5, r4
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbbc:	f000 f843 	bl	800cc46 <_malloc_usable_size_r>
 800cbc0:	4284      	cmp	r4, r0
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	d802      	bhi.n	800cbcc <_realloc_r+0x34>
 800cbc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbca:	d812      	bhi.n	800cbf2 <_realloc_r+0x5a>
 800cbcc:	4621      	mov	r1, r4
 800cbce:	4640      	mov	r0, r8
 800cbd0:	f7ff fb56 	bl	800c280 <_malloc_r>
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d0ed      	beq.n	800cbb6 <_realloc_r+0x1e>
 800cbda:	42bc      	cmp	r4, r7
 800cbdc:	4622      	mov	r2, r4
 800cbde:	4631      	mov	r1, r6
 800cbe0:	bf28      	it	cs
 800cbe2:	463a      	movcs	r2, r7
 800cbe4:	f7ff fc8e 	bl	800c504 <memcpy>
 800cbe8:	4631      	mov	r1, r6
 800cbea:	4640      	mov	r0, r8
 800cbec:	f7ff fca0 	bl	800c530 <_free_r>
 800cbf0:	e7e1      	b.n	800cbb6 <_realloc_r+0x1e>
 800cbf2:	4635      	mov	r5, r6
 800cbf4:	e7df      	b.n	800cbb6 <_realloc_r+0x1e>

0800cbf6 <memmove>:
 800cbf6:	4288      	cmp	r0, r1
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	eb01 0402 	add.w	r4, r1, r2
 800cbfe:	d902      	bls.n	800cc06 <memmove+0x10>
 800cc00:	4284      	cmp	r4, r0
 800cc02:	4623      	mov	r3, r4
 800cc04:	d807      	bhi.n	800cc16 <memmove+0x20>
 800cc06:	1e43      	subs	r3, r0, #1
 800cc08:	42a1      	cmp	r1, r4
 800cc0a:	d008      	beq.n	800cc1e <memmove+0x28>
 800cc0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc10:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc14:	e7f8      	b.n	800cc08 <memmove+0x12>
 800cc16:	4601      	mov	r1, r0
 800cc18:	4402      	add	r2, r0
 800cc1a:	428a      	cmp	r2, r1
 800cc1c:	d100      	bne.n	800cc20 <memmove+0x2a>
 800cc1e:	bd10      	pop	{r4, pc}
 800cc20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc28:	e7f7      	b.n	800cc1a <memmove+0x24>

0800cc2a <memchr>:
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	b510      	push	{r4, lr}
 800cc2e:	b2c9      	uxtb	r1, r1
 800cc30:	4402      	add	r2, r0
 800cc32:	4293      	cmp	r3, r2
 800cc34:	4618      	mov	r0, r3
 800cc36:	d101      	bne.n	800cc3c <memchr+0x12>
 800cc38:	2000      	movs	r0, #0
 800cc3a:	e003      	b.n	800cc44 <memchr+0x1a>
 800cc3c:	7804      	ldrb	r4, [r0, #0]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	428c      	cmp	r4, r1
 800cc42:	d1f6      	bne.n	800cc32 <memchr+0x8>
 800cc44:	bd10      	pop	{r4, pc}

0800cc46 <_malloc_usable_size_r>:
 800cc46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc4a:	1f18      	subs	r0, r3, #4
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	bfbc      	itt	lt
 800cc50:	580b      	ldrlt	r3, [r1, r0]
 800cc52:	18c0      	addlt	r0, r0, r3
 800cc54:	4770      	bx	lr
	...

0800cc58 <_init>:
 800cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5a:	bf00      	nop
 800cc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5e:	bc08      	pop	{r3}
 800cc60:	469e      	mov	lr, r3
 800cc62:	4770      	bx	lr

0800cc64 <_fini>:
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc66:	bf00      	nop
 800cc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6a:	bc08      	pop	{r3}
 800cc6c:	469e      	mov	lr, r3
 800cc6e:	4770      	bx	lr
