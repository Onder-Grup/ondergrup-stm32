
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccb8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fcc  0800ce9c  0800ce9c  0001ce9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de68  0800de68  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800de68  0800de68  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de68  0800de68  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de68  0800de68  0001de68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de6c  0800de6c  0001de6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800de70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000110  0800df80  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  0800df80  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001672f  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e7  00000000  00000000  000368ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e67  00000000  00000000  0003b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c102  00000000  00000000  0005853c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eeba  00000000  00000000  0007463e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052dc  00000000  00000000  001134f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001187d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ce84 	.word	0x0800ce84

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	0800ce84 	.word	0x0800ce84

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc56 	bl	8009b00 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 face 	bl	80087f8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	200002b8 	.word	0x200002b8
 80004c0:	20000201 	.word	0x20000201
 80004c4:	20000229 	.word	0x20000229
 80004c8:	2000022c 	.word	0x2000022c
 80004cc:	2000022d 	.word	0x2000022d
 80004d0:	2000022e 	.word	0x2000022e
 80004d4:	2000022f 	.word	0x2000022f
 80004d8:	20000230 	.word	0x20000230
 80004dc:	20000231 	.word	0x20000231
 80004e0:	20000241 	.word	0x20000241
 80004e4:	20000232 	.word	0x20000232
 80004e8:	20000242 	.word	0x20000242
 80004ec:	20000233 	.word	0x20000233
 80004f0:	20000243 	.word	0x20000243
 80004f4:	20000236 	.word	0x20000236
 80004f8:	20000237 	.word	0x20000237
 80004fc:	20000238 	.word	0x20000238
 8000500:	20000239 	.word	0x20000239
 8000504:	2000023a 	.word	0x2000023a
 8000508:	2000023b 	.word	0x2000023b
 800050c:	2000023c 	.word	0x2000023c
 8000510:	2000023d 	.word	0x2000023d
 8000514:	2000023e 	.word	0x2000023e
 8000518:	2000023f 	.word	0x2000023f
 800051c:	20000240 	.word	0x20000240
 8000520:	20000244 	.word	0x20000244
 8000524:	20000246 	.word	0x20000246
 8000528:	20000224 	.word	0x20000224
 800052c:	20000225 	.word	0x20000225
 8000530:	20000226 	.word	0x20000226
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	20000227 	.word	0x20000227
 8000540:	20000249 	.word	0x20000249
 8000544:	20000247 	.word	0x20000247
 8000548:	20000235 	.word	0x20000235
 800054c:	20000248 	.word	0x20000248
 8000550:	20000234 	.word	0x20000234
 8000554:	2000024a 	.word	0x2000024a
 8000558:	2000024b 	.word	0x2000024b
 800055c:	2000024c 	.word	0x2000024c
 8000560:	2000024d 	.word	0x2000024d
 8000564:	2000024e 	.word	0x2000024e
 8000568:	2000024f 	.word	0x2000024f
 800056c:	20000250 	.word	0x20000250
 8000570:	20000251 	.word	0x20000251
 8000574:	20000252 	.word	0x20000252
 8000578:	20000253 	.word	0x20000253
 800057c:	20000200 	.word	0x20000200
	}

	if(kapi1AcSure>5) {
 8000580:	4b6d      	ldr	r3, [pc, #436]	; (8000738 <eepromKontrol+0x504>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b6b      	ldr	r3, [pc, #428]	; (8000738 <eepromKontrol+0x504>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b6b      	ldr	r3, [pc, #428]	; (800073c <eepromKontrol+0x508>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b69      	ldr	r3, [pc, #420]	; (800073c <eepromKontrol+0x508>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b68      	ldr	r3, [pc, #416]	; (8000740 <eepromKontrol+0x50c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b66      	ldr	r3, [pc, #408]	; (8000740 <eepromKontrol+0x50c>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b66      	ldr	r3, [pc, #408]	; (8000744 <eepromKontrol+0x510>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b64      	ldr	r3, [pc, #400]	; (8000744 <eepromKontrol+0x510>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b63      	ldr	r3, [pc, #396]	; (8000748 <eepromKontrol+0x514>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b61      	ldr	r3, [pc, #388]	; (8000748 <eepromKontrol+0x514>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b61      	ldr	r3, [pc, #388]	; (800074c <eepromKontrol+0x518>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b5f      	ldr	r3, [pc, #380]	; (800074c <eepromKontrol+0x518>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b5e      	ldr	r3, [pc, #376]	; (8000750 <eepromKontrol+0x51c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5c      	ldr	r3, [pc, #368]	; (8000750 <eepromKontrol+0x51c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5c      	ldr	r3, [pc, #368]	; (8000754 <eepromKontrol+0x520>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b5a      	ldr	r3, [pc, #360]	; (8000754 <eepromKontrol+0x520>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b59      	ldr	r3, [pc, #356]	; (8000758 <eepromKontrol+0x524>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b57      	ldr	r3, [pc, #348]	; (8000758 <eepromKontrol+0x524>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b57      	ldr	r3, [pc, #348]	; (800075c <eepromKontrol+0x528>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b55      	ldr	r3, [pc, #340]	; (800075c <eepromKontrol+0x528>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b54      	ldr	r3, [pc, #336]	; (8000760 <eepromKontrol+0x52c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b52      	ldr	r3, [pc, #328]	; (8000760 <eepromKontrol+0x52c>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b52      	ldr	r3, [pc, #328]	; (8000764 <eepromKontrol+0x530>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b50      	ldr	r3, [pc, #320]	; (8000764 <eepromKontrol+0x530>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <eepromKontrol+0x534>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4d      	ldr	r3, [pc, #308]	; (8000768 <eepromKontrol+0x534>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4d      	ldr	r3, [pc, #308]	; (800076c <eepromKontrol+0x538>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b4b      	ldr	r3, [pc, #300]	; (800076c <eepromKontrol+0x538>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <eepromKontrol+0x53c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b48      	ldr	r3, [pc, #288]	; (8000770 <eepromKontrol+0x53c>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b48      	ldr	r3, [pc, #288]	; (8000774 <eepromKontrol+0x540>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b46      	ldr	r3, [pc, #280]	; (8000774 <eepromKontrol+0x540>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b45      	ldr	r3, [pc, #276]	; (8000778 <eepromKontrol+0x544>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b43      	ldr	r3, [pc, #268]	; (8000778 <eepromKontrol+0x544>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b43      	ldr	r3, [pc, #268]	; (800077c <eepromKontrol+0x548>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b41      	ldr	r3, [pc, #260]	; (800077c <eepromKontrol+0x548>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <eepromKontrol+0x54c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b3e      	ldr	r3, [pc, #248]	; (8000780 <eepromKontrol+0x54c>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <eepromKontrol+0x550>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3c      	ldr	r3, [pc, #240]	; (8000784 <eepromKontrol+0x550>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <eepromKontrol+0x554>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <eepromKontrol+0x554>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b39      	ldr	r3, [pc, #228]	; (800078c <eepromKontrol+0x558>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <eepromKontrol+0x558>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <eepromKontrol+0x55c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a36      	ldr	r2, [pc, #216]	; (8000794 <eepromKontrol+0x560>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <eepromKontrol+0x564>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	HAL_Delay(500);
 80006ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ce:	f008 f893 	bl	80087f8 <HAL_Delay>
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], wifiCharacterLimit);
 80006d2:	4b32      	ldr	r3, [pc, #200]	; (800079c <eepromKontrol+0x568>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <eepromKontrol+0x560>)
 80006d8:	441a      	add	r2, r3
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <eepromKontrol+0x56c>)
 80006dc:	6811      	ldr	r1, [r2, #0]
 80006de:	6855      	ldr	r5, [r2, #4]
 80006e0:	6894      	ldr	r4, [r2, #8]
 80006e2:	68d0      	ldr	r0, [r2, #12]
 80006e4:	6019      	str	r1, [r3, #0]
 80006e6:	605d      	str	r5, [r3, #4]
 80006e8:	609c      	str	r4, [r3, #8]
 80006ea:	60d8      	str	r0, [r3, #12]
 80006ec:	6911      	ldr	r1, [r2, #16]
 80006ee:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f4:	f008 f880 	bl	80087f8 <HAL_Delay>
	memcpy(wifiPassInt, &eepromData[passStartPos], wifiCharacterLimit);
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <eepromKontrol+0x570>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <eepromKontrol+0x560>)
 80006fe:	441a      	add	r2, r3
 8000700:	4b29      	ldr	r3, [pc, #164]	; (80007a8 <eepromKontrol+0x574>)
 8000702:	6811      	ldr	r1, [r2, #0]
 8000704:	6855      	ldr	r5, [r2, #4]
 8000706:	6894      	ldr	r4, [r2, #8]
 8000708:	68d0      	ldr	r0, [r2, #12]
 800070a:	6019      	str	r1, [r3, #0]
 800070c:	605d      	str	r5, [r3, #4]
 800070e:	609c      	str	r4, [r3, #8]
 8000710:	60d8      	str	r0, [r3, #12]
 8000712:	6911      	ldr	r1, [r2, #16]
 8000714:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f008 f86d 	bl	80087f8 <HAL_Delay>
	readFromEEPROM(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f000 f864 	bl	80007ec <readFromEEPROM>
	HAL_Delay(200);
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f008 f867 	bl	80087f8 <HAL_Delay>
	readFromEEPROM(2);
 800072a:	2002      	movs	r0, #2
 800072c:	f000 f85e 	bl	80007ec <readFromEEPROM>
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bdb0      	pop	{r4, r5, r7, pc}
 8000736:	bf00      	nop
 8000738:	20000241 	.word	0x20000241
 800073c:	20000232 	.word	0x20000232
 8000740:	20000242 	.word	0x20000242
 8000744:	20000233 	.word	0x20000233
 8000748:	20000235 	.word	0x20000235
 800074c:	20000243 	.word	0x20000243
 8000750:	20000236 	.word	0x20000236
 8000754:	20000237 	.word	0x20000237
 8000758:	20000238 	.word	0x20000238
 800075c:	20000239 	.word	0x20000239
 8000760:	2000023a 	.word	0x2000023a
 8000764:	2000023b 	.word	0x2000023b
 8000768:	2000023c 	.word	0x2000023c
 800076c:	2000023d 	.word	0x2000023d
 8000770:	2000023e 	.word	0x2000023e
 8000774:	2000023f 	.word	0x2000023f
 8000778:	20000240 	.word	0x20000240
 800077c:	20000244 	.word	0x20000244
 8000780:	20000246 	.word	0x20000246
 8000784:	20000248 	.word	0x20000248
 8000788:	20000249 	.word	0x20000249
 800078c:	20000247 	.word	0x20000247
 8000790:	20000004 	.word	0x20000004
 8000794:	2000012c 	.word	0x2000012c
 8000798:	200001a4 	.word	0x200001a4
 800079c:	20000008 	.word	0x20000008
 80007a0:	200001d8 	.word	0x200001d8
 80007a4:	2000000c 	.word	0x2000000c
 80007a8:	200001ec 	.word	0x200001ec

080007ac <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <getCharFromCursorPosition+0x1c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000030 	.word	0x20000030

080007cc <getIDCharFromCursorPosition>:

char getIDCharFromCursorPosition(uint8_t selectedInt) {
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	return idCharactersArray[selectedInt];
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4a03      	ldr	r2, [pc, #12]	; (80007e8 <getIDCharFromCursorPosition+0x1c>)
 80007da:	5cd3      	ldrb	r3, [r2, r3]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000024 	.word	0x20000024

080007ec <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d117      	bne.n	800082a <readFromEEPROM+0x3e>
		//Wifi SSID Okuma
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	e010      	b.n	8000822 <readFromEEPROM+0x36>
			wifiSSID[i] = getCharFromCursorPosition(wifiSSIDInt[i]);
 8000800:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <readFromEEPROM+0xb8>)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ffcf 	bl	80007ac <getCharFromCursorPosition>
 800080e:	4603      	mov	r3, r0
 8000810:	4619      	mov	r1, r3
 8000812:	4a25      	ldr	r2, [pc, #148]	; (80008a8 <readFromEEPROM+0xbc>)
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	4413      	add	r3, r2
 8000818:	460a      	mov	r2, r1
 800081a:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	3301      	adds	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	2b13      	cmp	r3, #19
 8000826:	ddeb      	ble.n	8000800 <readFromEEPROM+0x14>
		for(int i=0; i<wifiCharacterLimit; i++) {
			machineID[i] = getIDCharFromCursorPosition(eepromData[machineIDTempLoc]);
			machineIDTempLoc++;
		}
	}
}
 8000828:	e037      	b.n	800089a <readFromEEPROM+0xae>
	} else if(state == 2) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d117      	bne.n	8000860 <readFromEEPROM+0x74>
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	e010      	b.n	8000858 <readFromEEPROM+0x6c>
			wifiPass[i] = getCharFromCursorPosition(wifiPassInt[i]);
 8000836:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <readFromEEPROM+0xc0>)
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffb4 	bl	80007ac <getCharFromCursorPosition>
 8000844:	4603      	mov	r3, r0
 8000846:	4619      	mov	r1, r3
 8000848:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <readFromEEPROM+0xc4>)
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	4413      	add	r3, r2
 800084e:	460a      	mov	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	3301      	adds	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	2b13      	cmp	r3, #19
 800085c:	ddeb      	ble.n	8000836 <readFromEEPROM+0x4a>
}
 800085e:	e01c      	b.n	800089a <readFromEEPROM+0xae>
		int machineIDTempLoc = idStartPos;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <readFromEEPROM+0xc8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	e013      	b.n	8000894 <readFromEEPROM+0xa8>
			machineID[i] = getIDCharFromCursorPosition(eepromData[machineIDTempLoc]);
 800086c:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <readFromEEPROM+0xcc>)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ffa9 	bl	80007cc <getIDCharFromCursorPosition>
 800087a:	4603      	mov	r3, r0
 800087c:	4619      	mov	r1, r3
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <readFromEEPROM+0xd0>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4413      	add	r3, r2
 8000884:	460a      	mov	r2, r1
 8000886:	701a      	strb	r2, [r3, #0]
			machineIDTempLoc++;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	2b13      	cmp	r3, #19
 8000898:	dde8      	ble.n	800086c <readFromEEPROM+0x80>
}
 800089a:	bf00      	nop
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200001d8 	.word	0x200001d8
 80008a8:	200001b0 	.word	0x200001b0
 80008ac:	200001ec 	.word	0x200001ec
 80008b0:	200001c4 	.word	0x200001c4
 80008b4:	20000004 	.word	0x20000004
 80008b8:	2000012c 	.word	0x2000012c
 80008bc:	200001a4 	.word	0x200001a4

080008c0 <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	4613      	mov	r3, r2
 80008cc:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 80008ce:	68b8      	ldr	r0, [r7, #8]
 80008d0:	f7ff fca8 	bl	8000224 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f00b f857 	bl	800b990 <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 80008e2:	88fb      	ldrh	r3, [r7, #6]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f007 ff87 	bl	80087f8 <HAL_Delay>
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <ESP8266_Init>:

void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b0a0      	sub	sp, #128	; 0x80
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
    sendATCommand(huart, "AT+RESTORE\r\n", 1000);
 8000900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000904:	4915      	ldr	r1, [pc, #84]	; (800095c <ESP8266_Init+0x68>)
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f7ff ffda 	bl	80008c0 <sendATCommand>
    sendATCommand(huart, "AT+RST\r\n", 1000);
 800090c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000910:	4913      	ldr	r1, [pc, #76]	; (8000960 <ESP8266_Init+0x6c>)
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f7ff ffd4 	bl	80008c0 <sendATCommand>
    sendATCommand(huart, "AT\r\n", 2000);
 8000918:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800091c:	4911      	ldr	r1, [pc, #68]	; (8000964 <ESP8266_Init+0x70>)
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	f7ff ffce 	bl	80008c0 <sendATCommand>
    sendATCommand(huart, "AT+CWMODE=1\r\n", 2000);
 8000924:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000928:	490f      	ldr	r1, [pc, #60]	; (8000968 <ESP8266_Init+0x74>)
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ffc8 	bl	80008c0 <sendATCommand>

    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
 8000930:	f107 0014 	add.w	r0, r7, #20
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4a0c      	ldr	r2, [pc, #48]	; (800096c <ESP8266_Init+0x78>)
 800093c:	2164      	movs	r1, #100	; 0x64
 800093e:	f00b fe01 	bl	800c544 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f7ff ffb7 	bl	80008c0 <sendATCommand>
}
 8000952:	bf00      	nop
 8000954:	3778      	adds	r7, #120	; 0x78
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	0800ce9c 	.word	0x0800ce9c
 8000960:	0800ceac 	.word	0x0800ceac
 8000964:	0800ceb8 	.word	0x0800ceb8
 8000968:	0800cec0 	.word	0x0800cec0
 800096c:	0800ced0 	.word	0x0800ced0

08000970 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b0c6      	sub	sp, #280	; 0x118
 8000974:	af02      	add	r7, sp, #8
 8000976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800097a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800097e:	6018      	str	r0, [r3, #0]
 8000980:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000988:	6019      	str	r1, [r3, #0]
 800098a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000992:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000994:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <sendMachineData+0xb8>)
 800099a:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <sendMachineData+0xbc>)
 800099c:	21c8      	movs	r1, #200	; 0xc8
 800099e:	f00b fdd1 	bl	800c544 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 80009a2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80009a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009ae:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	f7ff ff84 	bl	80008c0 <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 80009b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009c0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80009c4:	4a1a      	ldr	r2, [pc, #104]	; (8000a30 <sendMachineData+0xc0>)
 80009c6:	9201      	str	r2, [sp, #4]
 80009c8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009cc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80009d0:	6812      	ldr	r2, [r2, #0]
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <sendMachineData+0xc4>)
 80009d8:	21c8      	movs	r1, #200	; 0xc8
 80009da:	f00b fdb3 	bl	800c544 <sniprintf>
 80009de:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 80009e2:	f107 0010 	add.w	r0, r7, #16
 80009e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <sendMachineData+0xc8>)
 80009ec:	2132      	movs	r1, #50	; 0x32
 80009ee:	f00b fda9 	bl	800c544 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 80009f2:	f107 0110 	add.w	r1, r7, #16
 80009f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009fe:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	f7ff ff5c 	bl	80008c0 <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 8000a08:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a14:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	f7ff ff51 	bl	80008c0 <sendATCommand>
}
 8000a1e:	bf00      	nop
 8000a20:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	0800ceec 	.word	0x0800ceec
 8000a2c:	0800cefc 	.word	0x0800cefc
 8000a30:	0800cf78 	.word	0x0800cf78
 8000a34:	0800cf1c 	.word	0x0800cf1c
 8000a38:	0800cf8c 	.word	0x0800cf8c

08000a3c <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af04      	add	r7, sp, #16
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <hata2EEPROM+0xa4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	1e5a      	subs	r2, r3, #1
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <hata2EEPROM+0xa8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <hata2EEPROM+0xac>)
 8000a54:	5cd3      	ldrb	r3, [r2, r3]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a5a:	f000 f92b 	bl	8000cb4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a5e:	e000      	b.n	8000a62 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a60:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e012      	b.n	8000a8e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <hata2EEPROM+0xa8>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <hata2EEPROM+0xac>)
 8000a72:	5cd3      	ldrb	r3, [r2, r3]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d107      	bne.n	8000a88 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <hata2EEPROM+0xa8>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4919      	ldr	r1, [pc, #100]	; (8000ae8 <hata2EEPROM+0xac>)
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	54ca      	strb	r2, [r1, r3]
					break;
 8000a86:	e007      	b.n	8000a98 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <hata2EEPROM+0xa4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbe7      	blt.n	8000a68 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <hata2EEPROM+0xa8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <hata2EEPROM+0xa4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b298      	uxth	r0, r3
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <hata2EEPROM+0xa8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <hata2EEPROM+0xac>)
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <hata2EEPROM+0xa4>)
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	b292      	uxth	r2, r2
 8000ab2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000ab6:	9402      	str	r4, [sp, #8]
 8000ab8:	9201      	str	r2, [sp, #4]
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	4603      	mov	r3, r0
 8000abe:	460a      	mov	r2, r1
 8000ac0:	21a0      	movs	r1, #160	; 0xa0
 8000ac2:	480a      	ldr	r0, [pc, #40]	; (8000aec <hata2EEPROM+0xb0>)
 8000ac4:	f008 ff22 	bl	800990c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000ac8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000acc:	f007 fe94 	bl	80087f8 <HAL_Delay>
	eepromKontrol(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f7ff fbaf 	bl	8000234 <eepromKontrol>
}
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000ac 	.word	0x200000ac
 8000ae4:	200000b0 	.word	0x200000b0
 8000ae8:	2000012c 	.word	0x2000012c
 8000aec:	200002b8 	.word	0x200002b8

08000af0 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d11d      	bne.n	8000b3c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b00:	4b62      	ldr	r3, [pc, #392]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d105      	bne.n	8000b14 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b08:	4a61      	ldr	r2, [pc, #388]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f007 f91d 	bl	8007d4c <lcd_print>
 8000b12:	e008      	b.n	8000b26 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000b14:	4b5d      	ldr	r3, [pc, #372]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d104      	bne.n	8000b26 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000b1c:	4a5d      	ldr	r2, [pc, #372]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2001      	movs	r0, #1
 8000b22:	f007 f913 	bl	8007d4c <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000b26:	4a5c      	ldr	r2, [pc, #368]	; (8000c98 <hataKoduLcdGoster+0x1a8>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f007 f90e 	bl	8007d4c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b30:	4a5a      	ldr	r2, [pc, #360]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000b32:	2107      	movs	r1, #7
 8000b34:	2002      	movs	r0, #2
 8000b36:	f007 f909 	bl	8007d4c <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b3a:	e0a3      	b.n	8000c84 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d11d      	bne.n	8000b7e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000b42:	4b52      	ldr	r3, [pc, #328]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d105      	bne.n	8000b56 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000b4a:	4a51      	ldr	r2, [pc, #324]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f007 f8fc 	bl	8007d4c <lcd_print>
 8000b54:	e008      	b.n	8000b68 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000b56:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000b5e:	4a4d      	ldr	r2, [pc, #308]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	2001      	movs	r0, #1
 8000b64:	f007 f8f2 	bl	8007d4c <lcd_print>
		lcd_print(2, 2, "2");
 8000b68:	4a4d      	ldr	r2, [pc, #308]	; (8000ca0 <hataKoduLcdGoster+0x1b0>)
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f007 f8ed 	bl	8007d4c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b72:	4a4a      	ldr	r2, [pc, #296]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000b74:	2107      	movs	r1, #7
 8000b76:	2002      	movs	r0, #2
 8000b78:	f007 f8e8 	bl	8007d4c <lcd_print>
}
 8000b7c:	e082      	b.n	8000c84 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d11d      	bne.n	8000bc0 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000b84:	4b41      	ldr	r3, [pc, #260]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d105      	bne.n	8000b98 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000b8c:	4a40      	ldr	r2, [pc, #256]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2001      	movs	r0, #1
 8000b92:	f007 f8db 	bl	8007d4c <lcd_print>
 8000b96:	e008      	b.n	8000baa <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000b98:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d104      	bne.n	8000baa <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000ba0:	4a3c      	ldr	r2, [pc, #240]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f007 f8d1 	bl	8007d4c <lcd_print>
		lcd_print(2, 3, "3");
 8000baa:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <hataKoduLcdGoster+0x1b4>)
 8000bac:	2103      	movs	r1, #3
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f007 f8cc 	bl	8007d4c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bb4:	4a39      	ldr	r2, [pc, #228]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000bb6:	2107      	movs	r1, #7
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f007 f8c7 	bl	8007d4c <lcd_print>
}
 8000bbe:	e061      	b.n	8000c84 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d11d      	bne.n	8000c02 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d105      	bne.n	8000bda <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000bce:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f007 f8ba 	bl	8007d4c <lcd_print>
 8000bd8:	e008      	b.n	8000bec <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d104      	bne.n	8000bec <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000be2:	4a2c      	ldr	r2, [pc, #176]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	2001      	movs	r0, #1
 8000be8:	f007 f8b0 	bl	8007d4c <lcd_print>
		lcd_print(2, 4, "4");
 8000bec:	4a2e      	ldr	r2, [pc, #184]	; (8000ca8 <hataKoduLcdGoster+0x1b8>)
 8000bee:	2104      	movs	r1, #4
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f007 f8ab 	bl	8007d4c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bf6:	4a29      	ldr	r2, [pc, #164]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000bf8:	2107      	movs	r1, #7
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f007 f8a6 	bl	8007d4c <lcd_print>
}
 8000c00:	e040      	b.n	8000c84 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b05      	cmp	r3, #5
 8000c06:	d11d      	bne.n	8000c44 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000c10:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	2001      	movs	r0, #1
 8000c16:	f007 f899 	bl	8007d4c <lcd_print>
 8000c1a:	e008      	b.n	8000c2e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d104      	bne.n	8000c2e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f007 f88f 	bl	8007d4c <lcd_print>
		lcd_print(2, 5, "5");
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <hataKoduLcdGoster+0x1bc>)
 8000c30:	2105      	movs	r1, #5
 8000c32:	2002      	movs	r0, #2
 8000c34:	f007 f88a 	bl	8007d4c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c38:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000c3a:	2107      	movs	r1, #7
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f007 f885 	bl	8007d4c <lcd_print>
}
 8000c42:	e01f      	b.n	8000c84 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d11c      	bne.n	8000c84 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d105      	bne.n	8000c5e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <hataKoduLcdGoster+0x1a0>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	2001      	movs	r0, #1
 8000c58:	f007 f878 	bl	8007d4c <lcd_print>
 8000c5c:	e008      	b.n	8000c70 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <hataKoduLcdGoster+0x19c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d104      	bne.n	8000c70 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <hataKoduLcdGoster+0x1a4>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f007 f86e 	bl	8007d4c <lcd_print>
		lcd_print(2, 6, "6");
 8000c70:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <hataKoduLcdGoster+0x1c0>)
 8000c72:	2106      	movs	r1, #6
 8000c74:	2002      	movs	r0, #2
 8000c76:	f007 f869 	bl	8007d4c <lcd_print>
		lcd_print(2, 7, "          ");
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <hataKoduLcdGoster+0x1ac>)
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f007 f864 	bl	8007d4c <lcd_print>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000249 	.word	0x20000249
 8000c90:	0800d018 	.word	0x0800d018
 8000c94:	0800d028 	.word	0x0800d028
 8000c98:	0800d038 	.word	0x0800d038
 8000c9c:	0800d03c 	.word	0x0800d03c
 8000ca0:	0800d048 	.word	0x0800d048
 8000ca4:	0800d04c 	.word	0x0800d04c
 8000ca8:	0800d050 	.word	0x0800d050
 8000cac:	0800d054 	.word	0x0800d054
 8000cb0:	0800d058 	.word	0x0800d058

08000cb4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	e009      	b.n	8000cd4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <eepromDataFillWithEmpty+0x38>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc8:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <eepromDataFillWithEmpty+0x3c>)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <eepromDataFillWithEmpty+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dbf0      	blt.n	8000cc0 <eepromDataFillWithEmpty+0xc>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000084 	.word	0x20000084
 8000cf0:	2000012c 	.word	0x2000012c
 8000cf4:	200000ac 	.word	0x200000ac

08000cf8 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000cfe:	463b      	mov	r3, r7
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d0a:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <i2cTest+0x154>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b4e      	ldr	r3, [pc, #312]	; (8000e4c <i2cTest+0x154>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0201 	bic.w	r2, r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000d1a:	484c      	ldr	r0, [pc, #304]	; (8000e4c <i2cTest+0x154>)
 8000d1c:	f008 fcc8 	bl	80096b0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d20:	23c0      	movs	r3, #192	; 0xc0
 8000d22:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000d24:	2311      	movs	r3, #17
 8000d26:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	4846      	ldr	r0, [pc, #280]	; (8000e50 <i2cTest+0x158>)
 8000d36:	f008 f8cf 	bl	8008ed8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2140      	movs	r1, #64	; 0x40
 8000d3e:	4844      	ldr	r0, [pc, #272]	; (8000e50 <i2cTest+0x158>)
 8000d40:	f008 fb41 	bl	80093c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	4841      	ldr	r0, [pc, #260]	; (8000e50 <i2cTest+0x158>)
 8000d4a:	f008 fb3c 	bl	80093c6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000d4e:	200a      	movs	r0, #10
 8000d50:	f007 fd52 	bl	80087f8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d54:	bf00      	nop
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	483d      	ldr	r0, [pc, #244]	; (8000e50 <i2cTest+0x158>)
 8000d5a:	f008 fb1d 	bl	8009398 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d006      	beq.n	8000d72 <i2cTest+0x7a>
 8000d64:	2180      	movs	r1, #128	; 0x80
 8000d66:	483a      	ldr	r0, [pc, #232]	; (8000e50 <i2cTest+0x158>)
 8000d68:	f008 fb16 	bl	8009398 <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d1f1      	bne.n	8000d56 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	4836      	ldr	r0, [pc, #216]	; (8000e50 <i2cTest+0x158>)
 8000d78:	f008 fb25 	bl	80093c6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000d7c:	200a      	movs	r0, #10
 8000d7e:	f007 fd3b 	bl	80087f8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000d82:	bf00      	nop
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	4832      	ldr	r0, [pc, #200]	; (8000e50 <i2cTest+0x158>)
 8000d88:	f008 fb06 	bl	8009398 <HAL_GPIO_ReadPin>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d0f8      	beq.n	8000d84 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	482e      	ldr	r0, [pc, #184]	; (8000e50 <i2cTest+0x158>)
 8000d98:	f008 fb15 	bl	80093c6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f007 fd2b 	bl	80087f8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000da2:	bf00      	nop
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	482a      	ldr	r0, [pc, #168]	; (8000e50 <i2cTest+0x158>)
 8000da8:	f008 faf6 	bl	8009398 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d0f8      	beq.n	8000da4 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4826      	ldr	r0, [pc, #152]	; (8000e50 <i2cTest+0x158>)
 8000db8:	f008 fb05 	bl	80093c6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000dbc:	200a      	movs	r0, #10
 8000dbe:	f007 fd1b 	bl	80087f8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000dc2:	bf00      	nop
 8000dc4:	2140      	movs	r1, #64	; 0x40
 8000dc6:	4822      	ldr	r0, [pc, #136]	; (8000e50 <i2cTest+0x158>)
 8000dc8:	f008 fae6 	bl	8009398 <HAL_GPIO_ReadPin>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d1f8      	bne.n	8000dc4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	481e      	ldr	r0, [pc, #120]	; (8000e50 <i2cTest+0x158>)
 8000dd8:	f008 faf5 	bl	80093c6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f007 fd0b 	bl	80087f8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000de2:	bf00      	nop
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	481a      	ldr	r0, [pc, #104]	; (8000e50 <i2cTest+0x158>)
 8000de8:	f008 fad6 	bl	8009398 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d1f8      	bne.n	8000de4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df2:	23c0      	movs	r3, #192	; 0xc0
 8000df4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e02:	463b      	mov	r3, r7
 8000e04:	4619      	mov	r1, r3
 8000e06:	4812      	ldr	r0, [pc, #72]	; (8000e50 <i2cTest+0x158>)
 8000e08:	f008 f866 	bl	8008ed8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <i2cTest+0x154>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <i2cTest+0x154>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e1a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <i2cTest+0x154>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <i2cTest+0x154>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e2a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <i2cTest+0x154>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <i2cTest+0x154>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0201 	orr.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <i2cTest+0x154>)
 8000e3e:	f008 faf3 	bl	8009428 <HAL_I2C_Init>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200002b8 	.word	0x200002b8
 8000e50:	40010c00 	.word	0x40010c00

08000e54 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000e5e:	20c8      	movs	r0, #200	; 0xc8
 8000e60:	f007 fcca 	bl	80087f8 <HAL_Delay>
	lcd_clear();
 8000e64:	f006 ff9e 	bl	8007da4 <lcd_clear>
	if(type == 1 && page == 0) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d143      	bne.n	8000ef6 <printTemplate+0xa2>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d140      	bne.n	8000ef6 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000e74:	4a9d      	ldr	r2, [pc, #628]	; (80010ec <printTemplate+0x298>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f006 ff67 	bl	8007d4c <lcd_print>
		lcd_print(2, 3, "0");
 8000e7e:	4a9c      	ldr	r2, [pc, #624]	; (80010f0 <printTemplate+0x29c>)
 8000e80:	2103      	movs	r1, #3
 8000e82:	2002      	movs	r0, #2
 8000e84:	f006 ff62 	bl	8007d4c <lcd_print>
		lcd_print(2, 4, "1");
 8000e88:	4a9a      	ldr	r2, [pc, #616]	; (80010f4 <printTemplate+0x2a0>)
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f006 ff5d 	bl	8007d4c <lcd_print>
		lcd_print(2, 5, "2");
 8000e92:	4a99      	ldr	r2, [pc, #612]	; (80010f8 <printTemplate+0x2a4>)
 8000e94:	2105      	movs	r1, #5
 8000e96:	2002      	movs	r0, #2
 8000e98:	f006 ff58 	bl	8007d4c <lcd_print>
		lcd_print(2, 6, "3");
 8000e9c:	4a97      	ldr	r2, [pc, #604]	; (80010fc <printTemplate+0x2a8>)
 8000e9e:	2106      	movs	r1, #6
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f006 ff53 	bl	8007d4c <lcd_print>
		lcd_print(2, 7, "4");
 8000ea6:	4a96      	ldr	r2, [pc, #600]	; (8001100 <printTemplate+0x2ac>)
 8000ea8:	2107      	movs	r1, #7
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f006 ff4e 	bl	8007d4c <lcd_print>
		lcd_print(2, 10, "5");
 8000eb0:	4a94      	ldr	r2, [pc, #592]	; (8001104 <printTemplate+0x2b0>)
 8000eb2:	210a      	movs	r1, #10
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f006 ff49 	bl	8007d4c <lcd_print>
		lcd_print(2, 11, "6");
 8000eba:	4a93      	ldr	r2, [pc, #588]	; (8001108 <printTemplate+0x2b4>)
 8000ebc:	210b      	movs	r1, #11
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f006 ff44 	bl	8007d4c <lcd_print>
		lcd_print(2, 12, "7");
 8000ec4:	4a91      	ldr	r2, [pc, #580]	; (800110c <printTemplate+0x2b8>)
 8000ec6:	210c      	movs	r1, #12
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f006 ff3f 	bl	8007d4c <lcd_print>
		lcd_print(2, 13, "8");
 8000ece:	4a90      	ldr	r2, [pc, #576]	; (8001110 <printTemplate+0x2bc>)
 8000ed0:	210d      	movs	r1, #13
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f006 ff3a 	bl	8007d4c <lcd_print>
		lcd_print(2, 14, "9");
 8000ed8:	4a8e      	ldr	r2, [pc, #568]	; (8001114 <printTemplate+0x2c0>)
 8000eda:	210e      	movs	r1, #14
 8000edc:	2002      	movs	r0, #2
 8000ede:	f006 ff35 	bl	8007d4c <lcd_print>
		lcd_print(1, 5, machineID);
 8000ee2:	4a8d      	ldr	r2, [pc, #564]	; (8001118 <printTemplate+0x2c4>)
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f006 ff30 	bl	8007d4c <lcd_print>
		lcd_gotoxy(2, 3);
 8000eec:	2103      	movs	r1, #3
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f006 ff0d 	bl	8007d0e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000ef4:	e0f5      	b.n	80010e2 <printTemplate+0x28e>
	} else if(type == 2) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d178      	bne.n	8000fee <printTemplate+0x19a>
		if(page == 1) {
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d114      	bne.n	8000f2c <printTemplate+0xd8>
			lcd_clear();
 8000f02:	f006 ff4f 	bl	8007da4 <lcd_clear>
			HAL_Delay(100);
 8000f06:	2064      	movs	r0, #100	; 0x64
 8000f08:	f007 fc76 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f0c:	4a83      	ldr	r2, [pc, #524]	; (800111c <printTemplate+0x2c8>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2001      	movs	r0, #1
 8000f12:	f006 ff1b 	bl	8007d4c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f16:	4a82      	ldr	r2, [pc, #520]	; (8001120 <printTemplate+0x2cc>)
 8000f18:	2107      	movs	r1, #7
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f006 ff16 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f20:	4a80      	ldr	r2, [pc, #512]	; (8001124 <printTemplate+0x2d0>)
 8000f22:	2101      	movs	r1, #1
 8000f24:	2002      	movs	r0, #2
 8000f26:	f006 ff11 	bl	8007d4c <lcd_print>
}
 8000f2a:	e0da      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 2) {
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d114      	bne.n	8000f5c <printTemplate+0x108>
			lcd_clear();
 8000f32:	f006 ff37 	bl	8007da4 <lcd_clear>
			HAL_Delay(100);
 8000f36:	2064      	movs	r0, #100	; 0x64
 8000f38:	f007 fc5e 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f3c:	4a77      	ldr	r2, [pc, #476]	; (800111c <printTemplate+0x2c8>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2001      	movs	r0, #1
 8000f42:	f006 ff03 	bl	8007d4c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f46:	4a76      	ldr	r2, [pc, #472]	; (8001120 <printTemplate+0x2cc>)
 8000f48:	2107      	movs	r1, #7
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f006 fefe 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f50:	4a75      	ldr	r2, [pc, #468]	; (8001128 <printTemplate+0x2d4>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	2002      	movs	r0, #2
 8000f56:	f006 fef9 	bl	8007d4c <lcd_print>
}
 8000f5a:	e0c2      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 3) {
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d114      	bne.n	8000f8c <printTemplate+0x138>
			lcd_clear();
 8000f62:	f006 ff1f 	bl	8007da4 <lcd_clear>
			HAL_Delay(100);
 8000f66:	2064      	movs	r0, #100	; 0x64
 8000f68:	f007 fc46 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f6c:	4a6b      	ldr	r2, [pc, #428]	; (800111c <printTemplate+0x2c8>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2001      	movs	r0, #1
 8000f72:	f006 feeb 	bl	8007d4c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f76:	4a6a      	ldr	r2, [pc, #424]	; (8001120 <printTemplate+0x2cc>)
 8000f78:	2107      	movs	r1, #7
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f006 fee6 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000f80:	4a6a      	ldr	r2, [pc, #424]	; (800112c <printTemplate+0x2d8>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2002      	movs	r0, #2
 8000f86:	f006 fee1 	bl	8007d4c <lcd_print>
}
 8000f8a:	e0aa      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 4) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d114      	bne.n	8000fbc <printTemplate+0x168>
			lcd_clear();
 8000f92:	f006 ff07 	bl	8007da4 <lcd_clear>
			HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f007 fc2e 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f9c:	4a5f      	ldr	r2, [pc, #380]	; (800111c <printTemplate+0x2c8>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f006 fed3 	bl	8007d4c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fa6:	4a5e      	ldr	r2, [pc, #376]	; (8001120 <printTemplate+0x2cc>)
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2001      	movs	r0, #1
 8000fac:	f006 fece 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000fb0:	4a5f      	ldr	r2, [pc, #380]	; (8001130 <printTemplate+0x2dc>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f006 fec9 	bl	8007d4c <lcd_print>
}
 8000fba:	e092      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 5) {
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	f040 808f 	bne.w	80010e2 <printTemplate+0x28e>
			lcd_clear();
 8000fc4:	f006 feee 	bl	8007da4 <lcd_clear>
			HAL_Delay(100);
 8000fc8:	2064      	movs	r0, #100	; 0x64
 8000fca:	f007 fc15 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fce:	4a53      	ldr	r2, [pc, #332]	; (800111c <printTemplate+0x2c8>)
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f006 feba 	bl	8007d4c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fd8:	4a51      	ldr	r2, [pc, #324]	; (8001120 <printTemplate+0x2cc>)
 8000fda:	2107      	movs	r1, #7
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f006 feb5 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000fe2:	4a54      	ldr	r2, [pc, #336]	; (8001134 <printTemplate+0x2e0>)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f006 feb0 	bl	8007d4c <lcd_print>
}
 8000fec:	e079      	b.n	80010e2 <printTemplate+0x28e>
	} else if(type == 3) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d176      	bne.n	80010e2 <printTemplate+0x28e>
		if(page == 1) {
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d114      	bne.n	8001024 <printTemplate+0x1d0>
			lcd_clear();
 8000ffa:	f006 fed3 	bl	8007da4 <lcd_clear>
			HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	; 0x64
 8001000:	f007 fbfa 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <printTemplate+0x2e4>)
 8001006:	2101      	movs	r1, #1
 8001008:	2001      	movs	r0, #1
 800100a:	f006 fe9f 	bl	8007d4c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800100e:	4a4b      	ldr	r2, [pc, #300]	; (800113c <printTemplate+0x2e8>)
 8001010:	2107      	movs	r1, #7
 8001012:	2001      	movs	r0, #1
 8001014:	f006 fe9a 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001018:	4a42      	ldr	r2, [pc, #264]	; (8001124 <printTemplate+0x2d0>)
 800101a:	2101      	movs	r1, #1
 800101c:	2002      	movs	r0, #2
 800101e:	f006 fe95 	bl	8007d4c <lcd_print>
}
 8001022:	e05e      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 2) {
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d114      	bne.n	8001054 <printTemplate+0x200>
			lcd_clear();
 800102a:	f006 febb 	bl	8007da4 <lcd_clear>
			HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f007 fbe2 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001034:	4a40      	ldr	r2, [pc, #256]	; (8001138 <printTemplate+0x2e4>)
 8001036:	2101      	movs	r1, #1
 8001038:	2001      	movs	r0, #1
 800103a:	f006 fe87 	bl	8007d4c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800103e:	4a3f      	ldr	r2, [pc, #252]	; (800113c <printTemplate+0x2e8>)
 8001040:	2107      	movs	r1, #7
 8001042:	2001      	movs	r0, #1
 8001044:	f006 fe82 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001048:	4a37      	ldr	r2, [pc, #220]	; (8001128 <printTemplate+0x2d4>)
 800104a:	2101      	movs	r1, #1
 800104c:	2002      	movs	r0, #2
 800104e:	f006 fe7d 	bl	8007d4c <lcd_print>
}
 8001052:	e046      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 3) {
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d114      	bne.n	8001084 <printTemplate+0x230>
			lcd_clear();
 800105a:	f006 fea3 	bl	8007da4 <lcd_clear>
			HAL_Delay(100);
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f007 fbca 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001064:	4a34      	ldr	r2, [pc, #208]	; (8001138 <printTemplate+0x2e4>)
 8001066:	2101      	movs	r1, #1
 8001068:	2001      	movs	r0, #1
 800106a:	f006 fe6f 	bl	8007d4c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800106e:	4a33      	ldr	r2, [pc, #204]	; (800113c <printTemplate+0x2e8>)
 8001070:	2107      	movs	r1, #7
 8001072:	2001      	movs	r0, #1
 8001074:	f006 fe6a 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001078:	4a2c      	ldr	r2, [pc, #176]	; (800112c <printTemplate+0x2d8>)
 800107a:	2101      	movs	r1, #1
 800107c:	2002      	movs	r0, #2
 800107e:	f006 fe65 	bl	8007d4c <lcd_print>
}
 8001082:	e02e      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 4) {
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d114      	bne.n	80010b4 <printTemplate+0x260>
			lcd_clear();
 800108a:	f006 fe8b 	bl	8007da4 <lcd_clear>
			HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f007 fbb2 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <printTemplate+0x2e4>)
 8001096:	2101      	movs	r1, #1
 8001098:	2001      	movs	r0, #1
 800109a:	f006 fe57 	bl	8007d4c <lcd_print>
			lcd_print(1, 7, wifiPass);
 800109e:	4a27      	ldr	r2, [pc, #156]	; (800113c <printTemplate+0x2e8>)
 80010a0:	2107      	movs	r1, #7
 80010a2:	2001      	movs	r0, #1
 80010a4:	f006 fe52 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80010a8:	4a21      	ldr	r2, [pc, #132]	; (8001130 <printTemplate+0x2dc>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	2002      	movs	r0, #2
 80010ae:	f006 fe4d 	bl	8007d4c <lcd_print>
}
 80010b2:	e016      	b.n	80010e2 <printTemplate+0x28e>
		} else if(page == 5) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	d113      	bne.n	80010e2 <printTemplate+0x28e>
			lcd_clear();
 80010ba:	f006 fe73 	bl	8007da4 <lcd_clear>
			HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f007 fb9a 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c4:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <printTemplate+0x2e4>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	2001      	movs	r0, #1
 80010ca:	f006 fe3f 	bl	8007d4c <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010ce:	4a1b      	ldr	r2, [pc, #108]	; (800113c <printTemplate+0x2e8>)
 80010d0:	2107      	movs	r1, #7
 80010d2:	2001      	movs	r0, #1
 80010d4:	f006 fe3a 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <printTemplate+0x2e0>)
 80010da:	2101      	movs	r1, #1
 80010dc:	2002      	movs	r0, #2
 80010de:	f006 fe35 	bl	8007d4c <lcd_print>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0800d05c 	.word	0x0800d05c
 80010f0:	0800d064 	.word	0x0800d064
 80010f4:	0800d068 	.word	0x0800d068
 80010f8:	0800d06c 	.word	0x0800d06c
 80010fc:	0800d070 	.word	0x0800d070
 8001100:	0800d074 	.word	0x0800d074
 8001104:	0800d078 	.word	0x0800d078
 8001108:	0800d07c 	.word	0x0800d07c
 800110c:	0800d080 	.word	0x0800d080
 8001110:	0800d084 	.word	0x0800d084
 8001114:	0800d088 	.word	0x0800d088
 8001118:	200001a4 	.word	0x200001a4
 800111c:	0800d08c 	.word	0x0800d08c
 8001120:	200001b0 	.word	0x200001b0
 8001124:	0800d094 	.word	0x0800d094
 8001128:	0800d0a8 	.word	0x0800d0a8
 800112c:	0800d0bc 	.word	0x0800d0bc
 8001130:	0800d0d0 	.word	0x0800d0d0
 8001134:	0800d0e4 	.word	0x0800d0e4
 8001138:	0800d0f8 	.word	0x0800d0f8
 800113c:	200001c4 	.word	0x200001c4

08001140 <checkSlideVal>:

int checkSlideVal(int state) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d111      	bne.n	8001172 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800114e:	2101      	movs	r1, #1
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <checkSlideVal+0x60>)
 8001152:	f008 f921 	bl	8009398 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <checkSlideVal+0x20>
			return 34;
 800115c:	2322      	movs	r3, #34	; 0x22
 800115e:	e01b      	b.n	8001198 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001160:	2108      	movs	r1, #8
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <checkSlideVal+0x64>)
 8001164:	f008 f918 	bl	8009398 <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d113      	bne.n	8001196 <checkSlideVal+0x56>
			return 32;
 800116e:	2320      	movs	r3, #32
 8001170:	e012      	b.n	8001198 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001172:	2101      	movs	r1, #1
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <checkSlideVal+0x60>)
 8001176:	f008 f90f 	bl	8009398 <HAL_GPIO_ReadPin>
 800117a:	4603      	mov	r3, r0
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <checkSlideVal+0x44>
			return 35;
 8001180:	2323      	movs	r3, #35	; 0x23
 8001182:	e009      	b.n	8001198 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001184:	2108      	movs	r1, #8
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <checkSlideVal+0x64>)
 8001188:	f008 f906 	bl	8009398 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <checkSlideVal+0x56>
			return 33;
 8001192:	2321      	movs	r3, #33	; 0x21
 8001194:	e000      	b.n	8001198 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40011000 	.word	0x40011000

080011a8 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff f834 	bl	8000224 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80011c4:	e08a      	b.n	80012dc <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80011c6:	6838      	ldr	r0, [r7, #0]
 80011c8:	f7ff ffba 	bl	8001140 <checkSlideVal>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd07      	ble.n	80011e2 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80011d2:	6838      	ldr	r0, [r7, #0]
 80011d4:	f7ff ffb4 	bl	8001140 <checkSlideVal>
 80011d8:	4603      	mov	r3, r0
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <slideText+0x148>)
 80011de:	701a      	strb	r2, [r3, #0]
			break;
 80011e0:	e081      	b.n	80012e6 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	e075      	b.n	80012d4 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f7ff ffa9 	bl	8001140 <checkSlideVal>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	dd09      	ble.n	8001208 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80011f4:	6838      	ldr	r0, [r7, #0]
 80011f6:	f7ff ffa3 	bl	8001140 <checkSlideVal>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <slideText+0x148>)
 8001200:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001206:	e069      	b.n	80012dc <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	4413      	add	r3, r2
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	e029      	b.n	8001266 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001212:	6838      	ldr	r0, [r7, #0]
 8001214:	f7ff ff94 	bl	8001140 <checkSlideVal>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	dd0b      	ble.n	8001236 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f7ff ff8e 	bl	8001140 <checkSlideVal>
 8001224:	4603      	mov	r3, r0
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <slideText+0x148>)
 800122a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001234:	e01d      	b.n	8001272 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	b2d8      	uxtb	r0, r3
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b2d9      	uxtb	r1, r3
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	461a      	mov	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	f006 fd8e 	bl	8007d76 <lcd_print_char>
				HAL_Delay(30);
 800125a:	201e      	movs	r0, #30
 800125c:	f007 facc 	bl	80087f8 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	3301      	adds	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	7dfa      	ldrb	r2, [r7, #23]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4413      	add	r3, r2
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	429a      	cmp	r2, r3
 8001270:	dbcf      	blt.n	8001212 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	3b01      	subs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	e023      	b.n	80012c2 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f7ff ff60 	bl	8001140 <checkSlideVal>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	dd0b      	ble.n	800129e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001286:	6838      	ldr	r0, [r7, #0]
 8001288:	f7ff ff5a 	bl	8001140 <checkSlideVal>
 800128c:	4603      	mov	r3, r0
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <slideText+0x148>)
 8001292:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800129c:	e017      	b.n	80012ce <slideText+0x126>
				}
			     if(j >= startPos) {
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	db0a      	blt.n	80012bc <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	b2d1      	uxtb	r1, r2
 80012ae:	2220      	movs	r2, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 fd60 	bl	8007d76 <lcd_print_char>
			    	 HAL_Delay(30);
 80012b6:	201e      	movs	r0, #30
 80012b8:	f007 fa9e 	bl	80087f8 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	3b01      	subs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	7dfa      	ldrb	r2, [r7, #23]
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	dad5      	bge.n	800127a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	3301      	adds	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	6a3a      	ldr	r2, [r7, #32]
 80012d8:	429a      	cmp	r2, r3
 80012da:	db85      	blt.n	80011e8 <slideText+0x40>
	while(mainLoopVal == 1) {
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	2b01      	cmp	r3, #1
 80012e0:	f43f af71 	beq.w	80011c6 <slideText+0x1e>
			     }
			}
		}
	}
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000228 	.word	0x20000228

080012f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012f8:	f3bf 8f4f 	dsb	sy
}
 80012fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <__NVIC_SystemReset+0x24>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001306:	4904      	ldr	r1, [pc, #16]	; (8001318 <__NVIC_SystemReset+0x24>)
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_SystemReset+0x28>)
 800130a:	4313      	orrs	r3, r2
 800130c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <__NVIC_SystemReset+0x20>
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	05fa0004 	.word	0x05fa0004

08001320 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001326:	2101      	movs	r1, #1
 8001328:	488e      	ldr	r0, [pc, #568]	; (8001564 <menu+0x244>)
 800132a:	f008 f835 	bl	8009398 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	f040 808e 	bne.w	8001452 <menu+0x132>
 8001336:	4b8c      	ldr	r3, [pc, #560]	; (8001568 <menu+0x248>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f083 0301 	eor.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 8086 	beq.w	8001452 <menu+0x132>
		menuSayac = menuSayac+1;
 8001346:	4b89      	ldr	r3, [pc, #548]	; (800156c <menu+0x24c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b87      	ldr	r3, [pc, #540]	; (800156c <menu+0x24c>)
 8001350:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001352:	4b86      	ldr	r3, [pc, #536]	; (800156c <menu+0x24c>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b24      	cmp	r3, #36	; 0x24
 8001358:	d102      	bne.n	8001360 <menu+0x40>
			menuSayac = 1;
 800135a:	4b84      	ldr	r3, [pc, #528]	; (800156c <menu+0x24c>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001360:	4b82      	ldr	r3, [pc, #520]	; (800156c <menu+0x24c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b12      	cmp	r3, #18
 8001366:	d106      	bne.n	8001376 <menu+0x56>
 8001368:	4b81      	ldr	r3, [pc, #516]	; (8001570 <menu+0x250>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <menu+0x56>
			menuSayac = 21;
 8001370:	4b7e      	ldr	r3, [pc, #504]	; (800156c <menu+0x24c>)
 8001372:	2215      	movs	r2, #21
 8001374:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001376:	4b7d      	ldr	r3, [pc, #500]	; (800156c <menu+0x24c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b08      	cmp	r3, #8
 800137c:	d106      	bne.n	800138c <menu+0x6c>
 800137e:	4b7d      	ldr	r3, [pc, #500]	; (8001574 <menu+0x254>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <menu+0x6c>
			menuSayac = 16;
 8001386:	4b79      	ldr	r3, [pc, #484]	; (800156c <menu+0x24c>)
 8001388:	2210      	movs	r2, #16
 800138a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800138c:	4b77      	ldr	r3, [pc, #476]	; (800156c <menu+0x24c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b0d      	cmp	r3, #13
 8001392:	d106      	bne.n	80013a2 <menu+0x82>
 8001394:	4b77      	ldr	r3, [pc, #476]	; (8001574 <menu+0x254>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <menu+0x82>
			menuSayac = 16;
 800139c:	4b73      	ldr	r3, [pc, #460]	; (800156c <menu+0x24c>)
 800139e:	2210      	movs	r2, #16
 80013a0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80013a2:	4b72      	ldr	r3, [pc, #456]	; (800156c <menu+0x24c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b09      	cmp	r3, #9
 80013a8:	d106      	bne.n	80013b8 <menu+0x98>
 80013aa:	4b72      	ldr	r3, [pc, #456]	; (8001574 <menu+0x254>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d102      	bne.n	80013b8 <menu+0x98>
			menuSayac = 13;
 80013b2:	4b6e      	ldr	r3, [pc, #440]	; (800156c <menu+0x24c>)
 80013b4:	220d      	movs	r2, #13
 80013b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013b8:	4b6c      	ldr	r3, [pc, #432]	; (800156c <menu+0x24c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b0a      	cmp	r3, #10
 80013be:	d10a      	bne.n	80013d6 <menu+0xb6>
 80013c0:	4b6d      	ldr	r3, [pc, #436]	; (8001578 <menu+0x258>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d003      	beq.n	80013d0 <menu+0xb0>
 80013c8:	4b6b      	ldr	r3, [pc, #428]	; (8001578 <menu+0x258>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d102      	bne.n	80013d6 <menu+0xb6>
			menuSayac = 11;
 80013d0:	4b66      	ldr	r3, [pc, #408]	; (800156c <menu+0x24c>)
 80013d2:	220b      	movs	r2, #11
 80013d4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80013d6:	4b65      	ldr	r3, [pc, #404]	; (800156c <menu+0x24c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	d10e      	bne.n	80013fc <menu+0xdc>
 80013de:	4b67      	ldr	r3, [pc, #412]	; (800157c <menu+0x25c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d003      	beq.n	80013ee <menu+0xce>
 80013e6:	4b65      	ldr	r3, [pc, #404]	; (800157c <menu+0x25c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d106      	bne.n	80013fc <menu+0xdc>
 80013ee:	4b61      	ldr	r3, [pc, #388]	; (8001574 <menu+0x254>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d102      	bne.n	80013fc <menu+0xdc>
			menuSayac = 16;
 80013f6:	4b5d      	ldr	r3, [pc, #372]	; (800156c <menu+0x24c>)
 80013f8:	2210      	movs	r2, #16
 80013fa:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80013fc:	4b5b      	ldr	r3, [pc, #364]	; (800156c <menu+0x24c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b0c      	cmp	r3, #12
 8001402:	d10e      	bne.n	8001422 <menu+0x102>
 8001404:	4b5d      	ldr	r3, [pc, #372]	; (800157c <menu+0x25c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d003      	beq.n	8001414 <menu+0xf4>
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <menu+0x25c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d106      	bne.n	8001422 <menu+0x102>
 8001414:	4b57      	ldr	r3, [pc, #348]	; (8001574 <menu+0x254>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d102      	bne.n	8001422 <menu+0x102>
			menuSayac = 13;
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <menu+0x24c>)
 800141e:	220d      	movs	r2, #13
 8001420:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001422:	4b52      	ldr	r3, [pc, #328]	; (800156c <menu+0x24c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	d106      	bne.n	8001438 <menu+0x118>
 800142a:	4b55      	ldr	r3, [pc, #340]	; (8001580 <menu+0x260>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d102      	bne.n	8001438 <menu+0x118>
			menuSayac = 16;
 8001432:	4b4e      	ldr	r3, [pc, #312]	; (800156c <menu+0x24c>)
 8001434:	2210      	movs	r2, #16
 8001436:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001438:	4b4c      	ldr	r3, [pc, #304]	; (800156c <menu+0x24c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b18      	cmp	r3, #24
 800143e:	d106      	bne.n	800144e <menu+0x12e>
 8001440:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <menu+0x250>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <menu+0x12e>
			menuSayac = 26;
 8001448:	4b48      	ldr	r3, [pc, #288]	; (800156c <menu+0x24c>)
 800144a:	221a      	movs	r2, #26
 800144c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800144e:	f003 fb47 	bl	8004ae0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001452:	2108      	movs	r1, #8
 8001454:	484b      	ldr	r0, [pc, #300]	; (8001584 <menu+0x264>)
 8001456:	f007 ff9f 	bl	8009398 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	d175      	bne.n	800154c <menu+0x22c>
 8001460:	4b41      	ldr	r3, [pc, #260]	; (8001568 <menu+0x248>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	f083 0301 	eor.w	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d06e      	beq.n	800154c <menu+0x22c>
		if (menuSayac <= 1) {
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <menu+0x24c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d802      	bhi.n	800147c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001476:	4b3d      	ldr	r3, [pc, #244]	; (800156c <menu+0x24c>)
 8001478:	2224      	movs	r2, #36	; 0x24
 800147a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800147c:	4b3b      	ldr	r3, [pc, #236]	; (800156c <menu+0x24c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b39      	ldr	r3, [pc, #228]	; (800156c <menu+0x24c>)
 8001486:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001488:	4b38      	ldr	r3, [pc, #224]	; (800156c <menu+0x24c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b14      	cmp	r3, #20
 800148e:	d106      	bne.n	800149e <menu+0x17e>
 8001490:	4b37      	ldr	r3, [pc, #220]	; (8001570 <menu+0x250>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <menu+0x17e>
			menuSayac = 17;
 8001498:	4b34      	ldr	r3, [pc, #208]	; (800156c <menu+0x24c>)
 800149a:	2211      	movs	r2, #17
 800149c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800149e:	4b33      	ldr	r3, [pc, #204]	; (800156c <menu+0x24c>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b0f      	cmp	r3, #15
 80014a4:	d106      	bne.n	80014b4 <menu+0x194>
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <menu+0x254>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <menu+0x194>
			menuSayac = 7;
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <menu+0x24c>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <menu+0x24c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d106      	bne.n	80014ca <menu+0x1aa>
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <menu+0x254>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d102      	bne.n	80014ca <menu+0x1aa>
			menuSayac = 12;
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <menu+0x24c>)
 80014c6:	220c      	movs	r2, #12
 80014c8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <menu+0x24c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d106      	bne.n	80014e0 <menu+0x1c0>
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <menu+0x254>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d102      	bne.n	80014e0 <menu+0x1c0>
			menuSayac = 8;
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <menu+0x24c>)
 80014dc:	2208      	movs	r2, #8
 80014de:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <menu+0x24c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b0a      	cmp	r3, #10
 80014e6:	d10a      	bne.n	80014fe <menu+0x1de>
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <menu+0x258>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d003      	beq.n	80014f8 <menu+0x1d8>
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <menu+0x258>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d102      	bne.n	80014fe <menu+0x1de>
			menuSayac = 9;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <menu+0x24c>)
 80014fa:	2209      	movs	r2, #9
 80014fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <menu+0x24c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d10a      	bne.n	800151c <menu+0x1fc>
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <menu+0x25c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d003      	beq.n	8001516 <menu+0x1f6>
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <menu+0x25c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d102      	bne.n	800151c <menu+0x1fc>
			menuSayac = 11;
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <menu+0x24c>)
 8001518:	220b      	movs	r2, #11
 800151a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <menu+0x24c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d106      	bne.n	8001532 <menu+0x212>
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <menu+0x260>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d102      	bne.n	8001532 <menu+0x212>
			menuSayac = 14;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <menu+0x24c>)
 800152e:	220e      	movs	r2, #14
 8001530:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <menu+0x24c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b19      	cmp	r3, #25
 8001538:	d106      	bne.n	8001548 <menu+0x228>
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <menu+0x250>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <menu+0x228>
			menuSayac = 23;
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <menu+0x24c>)
 8001544:	2217      	movs	r2, #23
 8001546:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001548:	f003 faca 	bl	8004ae0 <bekle>
	}

	if (menuSayac == 0) {
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <menu+0x24c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d133      	bne.n	80015bc <menu+0x29c>
		if(dilSecim == 0) {
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <menu+0x268>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d121      	bne.n	80015a0 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800155c:	4a0b      	ldr	r2, [pc, #44]	; (800158c <menu+0x26c>)
 800155e:	2101      	movs	r1, #1
 8001560:	2001      	movs	r0, #1
 8001562:	e015      	b.n	8001590 <menu+0x270>
 8001564:	40010800 	.word	0x40010800
 8001568:	20000257 	.word	0x20000257
 800156c:	20000228 	.word	0x20000228
 8001570:	20000237 	.word	0x20000237
 8001574:	20000230 	.word	0x20000230
 8001578:	20000231 	.word	0x20000231
 800157c:	20000232 	.word	0x20000232
 8001580:	20000233 	.word	0x20000233
 8001584:	40011000 	.word	0x40011000
 8001588:	20000249 	.word	0x20000249
 800158c:	0800d100 	.word	0x0800d100
 8001590:	f006 fbdc 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001594:	4a94      	ldr	r2, [pc, #592]	; (80017e8 <menu+0x4c8>)
 8001596:	2101      	movs	r1, #1
 8001598:	2002      	movs	r0, #2
 800159a:	f006 fbd7 	bl	8007d4c <lcd_print>
 800159e:	e00d      	b.n	80015bc <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80015a0:	4b92      	ldr	r3, [pc, #584]	; (80017ec <menu+0x4cc>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d109      	bne.n	80015bc <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80015a8:	4a91      	ldr	r2, [pc, #580]	; (80017f0 <menu+0x4d0>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	2001      	movs	r0, #1
 80015ae:	f006 fbcd 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80015b2:	4a90      	ldr	r2, [pc, #576]	; (80017f4 <menu+0x4d4>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	2002      	movs	r0, #2
 80015b8:	f006 fbc8 	bl	8007d4c <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80015bc:	4b8e      	ldr	r3, [pc, #568]	; (80017f8 <menu+0x4d8>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 82b5 	bne.w	8001b30 <menu+0x810>
		if(dilSecim == 0) {
 80015c6:	4b89      	ldr	r3, [pc, #548]	; (80017ec <menu+0x4cc>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80015ce:	4a8b      	ldr	r2, [pc, #556]	; (80017fc <menu+0x4dc>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	2001      	movs	r0, #1
 80015d4:	f006 fbba 	bl	8007d4c <lcd_print>
 80015d8:	e008      	b.n	80015ec <menu+0x2cc>
		} else if(dilSecim == 1) {
 80015da:	4b84      	ldr	r3, [pc, #528]	; (80017ec <menu+0x4cc>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d104      	bne.n	80015ec <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80015e2:	4a87      	ldr	r2, [pc, #540]	; (8001800 <menu+0x4e0>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	2001      	movs	r0, #1
 80015e8:	f006 fbb0 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80015ec:	4b85      	ldr	r3, [pc, #532]	; (8001804 <menu+0x4e4>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d123      	bne.n	800163c <menu+0x31c>
			if(dilSecim == 0) {
 80015f4:	4b7d      	ldr	r3, [pc, #500]	; (80017ec <menu+0x4cc>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d105      	bne.n	8001608 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80015fc:	4a82      	ldr	r2, [pc, #520]	; (8001808 <menu+0x4e8>)
 80015fe:	2101      	movs	r1, #1
 8001600:	2002      	movs	r0, #2
 8001602:	f006 fba3 	bl	8007d4c <lcd_print>
 8001606:	e008      	b.n	800161a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001608:	4b78      	ldr	r3, [pc, #480]	; (80017ec <menu+0x4cc>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d104      	bne.n	800161a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001610:	4a7e      	ldr	r2, [pc, #504]	; (800180c <menu+0x4ec>)
 8001612:	2101      	movs	r1, #1
 8001614:	2002      	movs	r0, #2
 8001616:	f006 fb99 	bl	8007d4c <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800161a:	4a7d      	ldr	r2, [pc, #500]	; (8001810 <menu+0x4f0>)
 800161c:	210f      	movs	r1, #15
 800161e:	2002      	movs	r0, #2
 8001620:	f006 fb94 	bl	8007d4c <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001624:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <menu+0x4f4>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	220a      	movs	r2, #10
 800162a:	497b      	ldr	r1, [pc, #492]	; (8001818 <menu+0x4f8>)
 800162c:	4618      	mov	r0, r3
 800162e:	f00a fedf 	bl	800c3f0 <itoa>
			lcd_print(2, 14, snum);
 8001632:	4a79      	ldr	r2, [pc, #484]	; (8001818 <menu+0x4f8>)
 8001634:	210e      	movs	r1, #14
 8001636:	2002      	movs	r0, #2
 8001638:	f006 fb88 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800163c:	4b71      	ldr	r3, [pc, #452]	; (8001804 <menu+0x4e4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d123      	bne.n	800168c <menu+0x36c>
			if(dilSecim == 0) {
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <menu+0x4cc>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d105      	bne.n	8001658 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800164c:	4a73      	ldr	r2, [pc, #460]	; (800181c <menu+0x4fc>)
 800164e:	2101      	movs	r1, #1
 8001650:	2002      	movs	r0, #2
 8001652:	f006 fb7b 	bl	8007d4c <lcd_print>
 8001656:	e008      	b.n	800166a <menu+0x34a>
			} else if(dilSecim == 1) {
 8001658:	4b64      	ldr	r3, [pc, #400]	; (80017ec <menu+0x4cc>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d104      	bne.n	800166a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001660:	4a6f      	ldr	r2, [pc, #444]	; (8001820 <menu+0x500>)
 8001662:	2101      	movs	r1, #1
 8001664:	2002      	movs	r0, #2
 8001666:	f006 fb71 	bl	8007d4c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800166a:	4a6e      	ldr	r2, [pc, #440]	; (8001824 <menu+0x504>)
 800166c:	210f      	movs	r1, #15
 800166e:	2002      	movs	r0, #2
 8001670:	f006 fb6c 	bl	8007d4c <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001674:	4b6c      	ldr	r3, [pc, #432]	; (8001828 <menu+0x508>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	220a      	movs	r2, #10
 800167a:	4967      	ldr	r1, [pc, #412]	; (8001818 <menu+0x4f8>)
 800167c:	4618      	mov	r0, r3
 800167e:	f00a feb7 	bl	800c3f0 <itoa>
			lcd_print(2, 14, snum);
 8001682:	4a65      	ldr	r2, [pc, #404]	; (8001818 <menu+0x4f8>)
 8001684:	210e      	movs	r1, #14
 8001686:	2002      	movs	r0, #2
 8001688:	f006 fb60 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <menu+0x4e4>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d123      	bne.n	80016dc <menu+0x3bc>
			if(dilSecim == 0) {
 8001694:	4b55      	ldr	r3, [pc, #340]	; (80017ec <menu+0x4cc>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800169c:	4a63      	ldr	r2, [pc, #396]	; (800182c <menu+0x50c>)
 800169e:	2101      	movs	r1, #1
 80016a0:	2002      	movs	r0, #2
 80016a2:	f006 fb53 	bl	8007d4c <lcd_print>
 80016a6:	e008      	b.n	80016ba <menu+0x39a>
			} else if(dilSecim == 1) {
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <menu+0x4cc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d104      	bne.n	80016ba <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80016b0:	4a5f      	ldr	r2, [pc, #380]	; (8001830 <menu+0x510>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	2002      	movs	r0, #2
 80016b6:	f006 fb49 	bl	8007d4c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016ba:	4a5a      	ldr	r2, [pc, #360]	; (8001824 <menu+0x504>)
 80016bc:	210f      	movs	r1, #15
 80016be:	2002      	movs	r0, #2
 80016c0:	f006 fb44 	bl	8007d4c <lcd_print>
			itoa(hataKayit3, snum, 10);
 80016c4:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <menu+0x514>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	220a      	movs	r2, #10
 80016ca:	4953      	ldr	r1, [pc, #332]	; (8001818 <menu+0x4f8>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00a fe8f 	bl	800c3f0 <itoa>
			lcd_print(2, 14, snum);
 80016d2:	4a51      	ldr	r2, [pc, #324]	; (8001818 <menu+0x4f8>)
 80016d4:	210e      	movs	r1, #14
 80016d6:	2002      	movs	r0, #2
 80016d8:	f006 fb38 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80016dc:	4b49      	ldr	r3, [pc, #292]	; (8001804 <menu+0x4e4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d123      	bne.n	800172c <menu+0x40c>
			if(dilSecim == 0) {
 80016e4:	4b41      	ldr	r3, [pc, #260]	; (80017ec <menu+0x4cc>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <menu+0x518>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	2002      	movs	r0, #2
 80016f2:	f006 fb2b 	bl	8007d4c <lcd_print>
 80016f6:	e008      	b.n	800170a <menu+0x3ea>
			} else if(dilSecim == 1) {
 80016f8:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <menu+0x4cc>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d104      	bne.n	800170a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001700:	4a4e      	ldr	r2, [pc, #312]	; (800183c <menu+0x51c>)
 8001702:	2101      	movs	r1, #1
 8001704:	2002      	movs	r0, #2
 8001706:	f006 fb21 	bl	8007d4c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800170a:	4a46      	ldr	r2, [pc, #280]	; (8001824 <menu+0x504>)
 800170c:	210f      	movs	r1, #15
 800170e:	2002      	movs	r0, #2
 8001710:	f006 fb1c 	bl	8007d4c <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001714:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <menu+0x520>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	220a      	movs	r2, #10
 800171a:	493f      	ldr	r1, [pc, #252]	; (8001818 <menu+0x4f8>)
 800171c:	4618      	mov	r0, r3
 800171e:	f00a fe67 	bl	800c3f0 <itoa>
			lcd_print(2, 14, snum);
 8001722:	4a3d      	ldr	r2, [pc, #244]	; (8001818 <menu+0x4f8>)
 8001724:	210e      	movs	r1, #14
 8001726:	2002      	movs	r0, #2
 8001728:	f006 fb10 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800172c:	4b35      	ldr	r3, [pc, #212]	; (8001804 <menu+0x4e4>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d123      	bne.n	800177c <menu+0x45c>
			if(dilSecim == 0) {
 8001734:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <menu+0x4cc>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800173c:	4a41      	ldr	r2, [pc, #260]	; (8001844 <menu+0x524>)
 800173e:	2101      	movs	r1, #1
 8001740:	2002      	movs	r0, #2
 8001742:	f006 fb03 	bl	8007d4c <lcd_print>
 8001746:	e008      	b.n	800175a <menu+0x43a>
			} else if(dilSecim == 1) {
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <menu+0x4cc>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d104      	bne.n	800175a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001750:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <menu+0x528>)
 8001752:	2101      	movs	r1, #1
 8001754:	2002      	movs	r0, #2
 8001756:	f006 faf9 	bl	8007d4c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800175a:	4a32      	ldr	r2, [pc, #200]	; (8001824 <menu+0x504>)
 800175c:	210f      	movs	r1, #15
 800175e:	2002      	movs	r0, #2
 8001760:	f006 faf4 	bl	8007d4c <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001764:	4b39      	ldr	r3, [pc, #228]	; (800184c <menu+0x52c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	220a      	movs	r2, #10
 800176a:	492b      	ldr	r1, [pc, #172]	; (8001818 <menu+0x4f8>)
 800176c:	4618      	mov	r0, r3
 800176e:	f00a fe3f 	bl	800c3f0 <itoa>
			lcd_print(2, 14, snum);
 8001772:	4a29      	ldr	r2, [pc, #164]	; (8001818 <menu+0x4f8>)
 8001774:	210e      	movs	r1, #14
 8001776:	2002      	movs	r0, #2
 8001778:	f006 fae8 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <menu+0x4e4>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b05      	cmp	r3, #5
 8001782:	d123      	bne.n	80017cc <menu+0x4ac>
			if(dilSecim == 0) {
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <menu+0x4cc>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d105      	bne.n	8001798 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800178c:	4a30      	ldr	r2, [pc, #192]	; (8001850 <menu+0x530>)
 800178e:	2101      	movs	r1, #1
 8001790:	2002      	movs	r0, #2
 8001792:	f006 fadb 	bl	8007d4c <lcd_print>
 8001796:	e008      	b.n	80017aa <menu+0x48a>
			} else if(dilSecim == 1) {
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <menu+0x4cc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d104      	bne.n	80017aa <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80017a0:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <menu+0x534>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	2002      	movs	r0, #2
 80017a6:	f006 fad1 	bl	8007d4c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <menu+0x504>)
 80017ac:	210f      	movs	r1, #15
 80017ae:	2002      	movs	r0, #2
 80017b0:	f006 facc 	bl	8007d4c <lcd_print>
			itoa(hataKayit6, snum, 10);
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <menu+0x538>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	220a      	movs	r2, #10
 80017ba:	4917      	ldr	r1, [pc, #92]	; (8001818 <menu+0x4f8>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f00a fe17 	bl	800c3f0 <itoa>
			lcd_print(2, 14, snum);
 80017c2:	4a15      	ldr	r2, [pc, #84]	; (8001818 <menu+0x4f8>)
 80017c4:	210e      	movs	r1, #14
 80017c6:	2002      	movs	r0, #2
 80017c8:	f006 fac0 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <menu+0x4e4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b06      	cmp	r3, #6
 80017d2:	d15f      	bne.n	8001894 <menu+0x574>
			if(dilSecim == 0) {
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <menu+0x4cc>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d141      	bne.n	8001860 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <menu+0x53c>)
 80017de:	2101      	movs	r1, #1
 80017e0:	2002      	movs	r0, #2
 80017e2:	f006 fab3 	bl	8007d4c <lcd_print>
 80017e6:	e044      	b.n	8001872 <menu+0x552>
 80017e8:	0800d114 	.word	0x0800d114
 80017ec:	20000249 	.word	0x20000249
 80017f0:	0800d128 	.word	0x0800d128
 80017f4:	0800d13c 	.word	0x0800d13c
 80017f8:	20000228 	.word	0x20000228
 80017fc:	0800d150 	.word	0x0800d150
 8001800:	0800d164 	.word	0x0800d164
 8001804:	2000022a 	.word	0x2000022a
 8001808:	0800d178 	.word	0x0800d178
 800180c:	0800d188 	.word	0x0800d188
 8001810:	0800d198 	.word	0x0800d198
 8001814:	2000024a 	.word	0x2000024a
 8001818:	2000019c 	.word	0x2000019c
 800181c:	0800d19c 	.word	0x0800d19c
 8001820:	0800d1ac 	.word	0x0800d1ac
 8001824:	0800d1bc 	.word	0x0800d1bc
 8001828:	2000024b 	.word	0x2000024b
 800182c:	0800d1c0 	.word	0x0800d1c0
 8001830:	0800d1d0 	.word	0x0800d1d0
 8001834:	2000024c 	.word	0x2000024c
 8001838:	0800d1e0 	.word	0x0800d1e0
 800183c:	0800d1f0 	.word	0x0800d1f0
 8001840:	2000024d 	.word	0x2000024d
 8001844:	0800d200 	.word	0x0800d200
 8001848:	0800d210 	.word	0x0800d210
 800184c:	2000024e 	.word	0x2000024e
 8001850:	0800d220 	.word	0x0800d220
 8001854:	0800d230 	.word	0x0800d230
 8001858:	2000024f 	.word	0x2000024f
 800185c:	0800d240 	.word	0x0800d240
			} else if(dilSecim == 1) {
 8001860:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <menu+0x680>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d104      	bne.n	8001872 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001868:	4a4e      	ldr	r2, [pc, #312]	; (80019a4 <menu+0x684>)
 800186a:	2101      	movs	r1, #1
 800186c:	2002      	movs	r0, #2
 800186e:	f006 fa6d 	bl	8007d4c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001872:	4a4d      	ldr	r2, [pc, #308]	; (80019a8 <menu+0x688>)
 8001874:	210f      	movs	r1, #15
 8001876:	2002      	movs	r0, #2
 8001878:	f006 fa68 	bl	8007d4c <lcd_print>
			itoa(hataKayit7, snum, 10);
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <menu+0x68c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	220a      	movs	r2, #10
 8001882:	494b      	ldr	r1, [pc, #300]	; (80019b0 <menu+0x690>)
 8001884:	4618      	mov	r0, r3
 8001886:	f00a fdb3 	bl	800c3f0 <itoa>
			lcd_print(2, 14, snum);
 800188a:	4a49      	ldr	r2, [pc, #292]	; (80019b0 <menu+0x690>)
 800188c:	210e      	movs	r1, #14
 800188e:	2002      	movs	r0, #2
 8001890:	f006 fa5c 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001894:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <menu+0x694>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b07      	cmp	r3, #7
 800189a:	d123      	bne.n	80018e4 <menu+0x5c4>
			if(dilSecim == 0) {
 800189c:	4b40      	ldr	r3, [pc, #256]	; (80019a0 <menu+0x680>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80018a4:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <menu+0x698>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	2002      	movs	r0, #2
 80018aa:	f006 fa4f 	bl	8007d4c <lcd_print>
 80018ae:	e008      	b.n	80018c2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 80018b0:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <menu+0x680>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d104      	bne.n	80018c2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80018b8:	4a40      	ldr	r2, [pc, #256]	; (80019bc <menu+0x69c>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	2002      	movs	r0, #2
 80018be:	f006 fa45 	bl	8007d4c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018c2:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <menu+0x688>)
 80018c4:	210f      	movs	r1, #15
 80018c6:	2002      	movs	r0, #2
 80018c8:	f006 fa40 	bl	8007d4c <lcd_print>
			itoa(hataKayit8, snum, 10);
 80018cc:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <menu+0x6a0>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	220a      	movs	r2, #10
 80018d2:	4937      	ldr	r1, [pc, #220]	; (80019b0 <menu+0x690>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00a fd8b 	bl	800c3f0 <itoa>
			lcd_print(2, 14, snum);
 80018da:	4a35      	ldr	r2, [pc, #212]	; (80019b0 <menu+0x690>)
 80018dc:	210e      	movs	r1, #14
 80018de:	2002      	movs	r0, #2
 80018e0:	f006 fa34 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <menu+0x694>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d123      	bne.n	8001934 <menu+0x614>
			if(dilSecim == 0) {
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <menu+0x680>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80018f4:	4a33      	ldr	r2, [pc, #204]	; (80019c4 <menu+0x6a4>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	2002      	movs	r0, #2
 80018fa:	f006 fa27 	bl	8007d4c <lcd_print>
 80018fe:	e008      	b.n	8001912 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <menu+0x680>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d104      	bne.n	8001912 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001908:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <menu+0x6a8>)
 800190a:	2101      	movs	r1, #1
 800190c:	2002      	movs	r0, #2
 800190e:	f006 fa1d 	bl	8007d4c <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001912:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <menu+0x688>)
 8001914:	210f      	movs	r1, #15
 8001916:	2002      	movs	r0, #2
 8001918:	f006 fa18 	bl	8007d4c <lcd_print>
			itoa(hataKayit9, snum, 10);
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <menu+0x6ac>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	220a      	movs	r2, #10
 8001922:	4923      	ldr	r1, [pc, #140]	; (80019b0 <menu+0x690>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00a fd63 	bl	800c3f0 <itoa>
			lcd_print(2, 14, snum);
 800192a:	4a21      	ldr	r2, [pc, #132]	; (80019b0 <menu+0x690>)
 800192c:	210e      	movs	r1, #14
 800192e:	2002      	movs	r0, #2
 8001930:	f006 fa0c 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <menu+0x694>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b09      	cmp	r3, #9
 800193a:	d123      	bne.n	8001984 <menu+0x664>
			if(dilSecim == 0) {
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <menu+0x680>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001944:	4a22      	ldr	r2, [pc, #136]	; (80019d0 <menu+0x6b0>)
 8001946:	2101      	movs	r1, #1
 8001948:	2002      	movs	r0, #2
 800194a:	f006 f9ff 	bl	8007d4c <lcd_print>
 800194e:	e008      	b.n	8001962 <menu+0x642>
			} else if(dilSecim == 1) {
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <menu+0x680>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d104      	bne.n	8001962 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001958:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <menu+0x6b4>)
 800195a:	2101      	movs	r1, #1
 800195c:	2002      	movs	r0, #2
 800195e:	f006 f9f5 	bl	8007d4c <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001962:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <menu+0x6b8>)
 8001964:	2110      	movs	r1, #16
 8001966:	2002      	movs	r0, #2
 8001968:	f006 f9f0 	bl	8007d4c <lcd_print>
			itoa(hataKayit10, snum, 10);
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <menu+0x6bc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	220a      	movs	r2, #10
 8001972:	490f      	ldr	r1, [pc, #60]	; (80019b0 <menu+0x690>)
 8001974:	4618      	mov	r0, r3
 8001976:	f00a fd3b 	bl	800c3f0 <itoa>
			lcd_print(2, 15, snum);
 800197a:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <menu+0x690>)
 800197c:	210f      	movs	r1, #15
 800197e:	2002      	movs	r0, #2
 8001980:	f006 f9e4 	bl	8007d4c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <menu+0x694>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b0a      	cmp	r3, #10
 800198a:	d134      	bne.n	80019f6 <menu+0x6d6>
			if(dilSecim == 0) {
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <menu+0x680>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d127      	bne.n	80019e4 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001994:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <menu+0x6c0>)
 8001996:	2101      	movs	r1, #1
 8001998:	2002      	movs	r0, #2
 800199a:	f006 f9d7 	bl	8007d4c <lcd_print>
 800199e:	e02a      	b.n	80019f6 <menu+0x6d6>
 80019a0:	20000249 	.word	0x20000249
 80019a4:	0800d250 	.word	0x0800d250
 80019a8:	0800d1bc 	.word	0x0800d1bc
 80019ac:	20000250 	.word	0x20000250
 80019b0:	2000019c 	.word	0x2000019c
 80019b4:	2000022a 	.word	0x2000022a
 80019b8:	0800d260 	.word	0x0800d260
 80019bc:	0800d270 	.word	0x0800d270
 80019c0:	20000251 	.word	0x20000251
 80019c4:	0800d280 	.word	0x0800d280
 80019c8:	0800d290 	.word	0x0800d290
 80019cc:	20000252 	.word	0x20000252
 80019d0:	0800d2a0 	.word	0x0800d2a0
 80019d4:	0800d2b0 	.word	0x0800d2b0
 80019d8:	0800d2c0 	.word	0x0800d2c0
 80019dc:	20000253 	.word	0x20000253
 80019e0:	0800d2c4 	.word	0x0800d2c4
			} else if(dilSecim == 1) {
 80019e4:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <menu+0x8d0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d104      	bne.n	80019f6 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80019ec:	4a81      	ldr	r2, [pc, #516]	; (8001bf4 <menu+0x8d4>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	2002      	movs	r0, #2
 80019f2:	f006 f9ab 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019f6:	2102      	movs	r1, #2
 80019f8:	487f      	ldr	r0, [pc, #508]	; (8001bf8 <menu+0x8d8>)
 80019fa:	f007 fccd 	bl	8009398 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d119      	bne.n	8001a38 <menu+0x718>
 8001a04:	4b7d      	ldr	r3, [pc, #500]	; (8001bfc <menu+0x8dc>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f083 0301 	eor.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d012      	beq.n	8001a38 <menu+0x718>
 8001a12:	4b7b      	ldr	r3, [pc, #492]	; (8001c00 <menu+0x8e0>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10e      	bne.n	8001a38 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a1a:	4b7a      	ldr	r3, [pc, #488]	; (8001c04 <menu+0x8e4>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <menu+0x8e4>)
 8001a24:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001a26:	4b77      	ldr	r3, [pc, #476]	; (8001c04 <menu+0x8e4>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d902      	bls.n	8001a34 <menu+0x714>
				hataGostermeSirasi = 0;
 8001a2e:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <menu+0x8e4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a34:	f003 f854 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a38:	2104      	movs	r1, #4
 8001a3a:	486f      	ldr	r0, [pc, #444]	; (8001bf8 <menu+0x8d8>)
 8001a3c:	f007 fcac 	bl	8009398 <HAL_GPIO_ReadPin>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d119      	bne.n	8001a7a <menu+0x75a>
 8001a46:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <menu+0x8dc>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f083 0301 	eor.w	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d012      	beq.n	8001a7a <menu+0x75a>
 8001a54:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <menu+0x8e0>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10e      	bne.n	8001a7a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001a5c:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <menu+0x8e4>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <menu+0x8e4>)
 8001a66:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001a68:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <menu+0x8e4>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b0b      	cmp	r3, #11
 8001a6e:	d902      	bls.n	8001a76 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001a70:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <menu+0x8e4>)
 8001a72:	220a      	movs	r2, #10
 8001a74:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a76:	f003 f833 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001a7a:	2108      	movs	r1, #8
 8001a7c:	485e      	ldr	r0, [pc, #376]	; (8001bf8 <menu+0x8d8>)
 8001a7e:	f007 fc8b 	bl	8009398 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d153      	bne.n	8001b30 <menu+0x810>
 8001a88:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <menu+0x8dc>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	f083 0301 	eor.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d04c      	beq.n	8001b30 <menu+0x810>
 8001a96:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <menu+0x8e4>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d148      	bne.n	8001b30 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	; (8001c08 <menu+0x8e8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <menu+0x8ec>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001aac:	4b58      	ldr	r3, [pc, #352]	; (8001c10 <menu+0x8f0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <menu+0x8ec>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001aba:	4b56      	ldr	r3, [pc, #344]	; (8001c14 <menu+0x8f4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	4b52      	ldr	r3, [pc, #328]	; (8001c0c <menu+0x8ec>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <menu+0x8f8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <menu+0x8ec>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001ad6:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <menu+0x8fc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	4b4b      	ldr	r3, [pc, #300]	; (8001c0c <menu+0x8ec>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001ae4:	4b4e      	ldr	r3, [pc, #312]	; (8001c20 <menu+0x900>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	4b48      	ldr	r3, [pc, #288]	; (8001c0c <menu+0x8ec>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001af2:	4b4c      	ldr	r3, [pc, #304]	; (8001c24 <menu+0x904>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <menu+0x8ec>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001b00:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <menu+0x908>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <menu+0x8ec>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001b0e:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <menu+0x90c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <menu+0x8ec>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001b1c:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <menu+0x910>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <menu+0x8ec>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <menu+0x914>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001b30:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <menu+0x918>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	f040 80fc 	bne.w	8001d32 <menu+0xa12>
		if(dilSecim == 0) {
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <menu+0x8d0>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d105      	bne.n	8001b4e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001b42:	4a3e      	ldr	r2, [pc, #248]	; (8001c3c <menu+0x91c>)
 8001b44:	2101      	movs	r1, #1
 8001b46:	2001      	movs	r0, #1
 8001b48:	f006 f900 	bl	8007d4c <lcd_print>
 8001b4c:	e008      	b.n	8001b60 <menu+0x840>
		} else if(dilSecim == 1) {
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <menu+0x8d0>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d104      	bne.n	8001b60 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001b56:	4a3a      	ldr	r2, [pc, #232]	; (8001c40 <menu+0x920>)
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	f006 f8f6 	bl	8007d4c <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <menu+0x8e0>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d003      	beq.n	8001b70 <menu+0x850>
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <menu+0x8e0>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d112      	bne.n	8001b96 <menu+0x876>
			if(dilSecim == 0) {
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <menu+0x8d0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001b78:	4a32      	ldr	r2, [pc, #200]	; (8001c44 <menu+0x924>)
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f006 f8e5 	bl	8007d4c <lcd_print>
 8001b82:	e008      	b.n	8001b96 <menu+0x876>
			} else if(dilSecim == 1) {
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <menu+0x8d0>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d104      	bne.n	8001b96 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001b8c:	4a2e      	ldr	r2, [pc, #184]	; (8001c48 <menu+0x928>)
 8001b8e:	2101      	movs	r1, #1
 8001b90:	2002      	movs	r0, #2
 8001b92:	f006 f8db 	bl	8007d4c <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <menu+0x92c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d116      	bne.n	8001bcc <menu+0x8ac>
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <menu+0x8e0>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d112      	bne.n	8001bcc <menu+0x8ac>
			if(dilSecim == 0) {
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <menu+0x8d0>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d105      	bne.n	8001bba <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001bae:	4a28      	ldr	r2, [pc, #160]	; (8001c50 <menu+0x930>)
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f006 f8ca 	bl	8007d4c <lcd_print>
 8001bb8:	e008      	b.n	8001bcc <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <menu+0x8d0>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d104      	bne.n	8001bcc <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001bc2:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <menu+0x934>)
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f006 f8c0 	bl	8007d4c <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <menu+0x92c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d14c      	bne.n	8001c6e <menu+0x94e>
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <menu+0x8e0>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d148      	bne.n	8001c6e <menu+0x94e>
			if(dilSecim == 0) {
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <menu+0x8d0>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d13b      	bne.n	8001c5c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001be4:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <menu+0x938>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	2002      	movs	r0, #2
 8001bea:	f006 f8af 	bl	8007d4c <lcd_print>
 8001bee:	e03e      	b.n	8001c6e <menu+0x94e>
 8001bf0:	20000249 	.word	0x20000249
 8001bf4:	0800d2d8 	.word	0x0800d2d8
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	20000257 	.word	0x20000257
 8001c00:	20000237 	.word	0x20000237
 8001c04:	2000022a 	.word	0x2000022a
 8001c08:	2000024a 	.word	0x2000024a
 8001c0c:	2000012c 	.word	0x2000012c
 8001c10:	2000024b 	.word	0x2000024b
 8001c14:	2000024c 	.word	0x2000024c
 8001c18:	2000024d 	.word	0x2000024d
 8001c1c:	2000024e 	.word	0x2000024e
 8001c20:	2000024f 	.word	0x2000024f
 8001c24:	20000250 	.word	0x20000250
 8001c28:	20000251 	.word	0x20000251
 8001c2c:	20000252 	.word	0x20000252
 8001c30:	20000253 	.word	0x20000253
 8001c34:	20000254 	.word	0x20000254
 8001c38:	20000228 	.word	0x20000228
 8001c3c:	0800d2ec 	.word	0x0800d2ec
 8001c40:	0800d300 	.word	0x0800d300
 8001c44:	0800d314 	.word	0x0800d314
 8001c48:	0800d328 	.word	0x0800d328
 8001c4c:	20000229 	.word	0x20000229
 8001c50:	0800d33c 	.word	0x0800d33c
 8001c54:	0800d34c 	.word	0x0800d34c
 8001c58:	0800d35c 	.word	0x0800d35c
			} else if(dilSecim == 1) {
 8001c5c:	4b98      	ldr	r3, [pc, #608]	; (8001ec0 <menu+0xba0>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d104      	bne.n	8001c6e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001c64:	4a97      	ldr	r2, [pc, #604]	; (8001ec4 <menu+0xba4>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f006 f86f 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c6e:	2102      	movs	r1, #2
 8001c70:	4895      	ldr	r0, [pc, #596]	; (8001ec8 <menu+0xba8>)
 8001c72:	f007 fb91 	bl	8009398 <HAL_GPIO_ReadPin>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d119      	bne.n	8001cb0 <menu+0x990>
 8001c7c:	4b93      	ldr	r3, [pc, #588]	; (8001ecc <menu+0xbac>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	f083 0301 	eor.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d012      	beq.n	8001cb0 <menu+0x990>
 8001c8a:	4b91      	ldr	r3, [pc, #580]	; (8001ed0 <menu+0xbb0>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10e      	bne.n	8001cb0 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001c92:	4b90      	ldr	r3, [pc, #576]	; (8001ed4 <menu+0xbb4>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b8e      	ldr	r3, [pc, #568]	; (8001ed4 <menu+0xbb4>)
 8001c9c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001c9e:	4b8d      	ldr	r3, [pc, #564]	; (8001ed4 <menu+0xbb4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d902      	bls.n	8001cac <menu+0x98c>
				calismaSekli = 0;
 8001ca6:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <menu+0xbb4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cac:	f002 ff18 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	4885      	ldr	r0, [pc, #532]	; (8001ec8 <menu+0xba8>)
 8001cb4:	f007 fb70 	bl	8009398 <HAL_GPIO_ReadPin>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d119      	bne.n	8001cf2 <menu+0x9d2>
 8001cbe:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <menu+0xbac>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	f083 0301 	eor.w	r3, r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d012      	beq.n	8001cf2 <menu+0x9d2>
 8001ccc:	4b80      	ldr	r3, [pc, #512]	; (8001ed0 <menu+0xbb0>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10e      	bne.n	8001cf2 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001cd4:	4b7f      	ldr	r3, [pc, #508]	; (8001ed4 <menu+0xbb4>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b7d      	ldr	r3, [pc, #500]	; (8001ed4 <menu+0xbb4>)
 8001cde:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001ce0:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <menu+0xbb4>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <menu+0x9ce>
	    		calismaSekli = 1;
 8001ce8:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <menu+0xbb4>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cee:	f002 fef7 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cf2:	2108      	movs	r1, #8
 8001cf4:	4874      	ldr	r0, [pc, #464]	; (8001ec8 <menu+0xba8>)
 8001cf6:	f007 fb4f 	bl	8009398 <HAL_GPIO_ReadPin>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d118      	bne.n	8001d32 <menu+0xa12>
 8001d00:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <menu+0xbac>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	f083 0301 	eor.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d011      	beq.n	8001d32 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001d0e:	4b71      	ldr	r3, [pc, #452]	; (8001ed4 <menu+0xbb4>)
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	4b71      	ldr	r3, [pc, #452]	; (8001ed8 <menu+0xbb8>)
 8001d14:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d16:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <menu+0xbb4>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d106      	bne.n	8001d2c <menu+0xa0c>
				altLimit = 1;
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	; (8001edc <menu+0xbbc>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d24:	4b6d      	ldr	r3, [pc, #436]	; (8001edc <menu+0xbbc>)
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	4b6b      	ldr	r3, [pc, #428]	; (8001ed8 <menu+0xbb8>)
 8001d2a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <menu+0xbc0>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d32:	4b6c      	ldr	r3, [pc, #432]	; (8001ee4 <menu+0xbc4>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	f040 8083 	bne.w	8001e42 <menu+0xb22>
		if(dilSecim == 0) {
 8001d3c:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <menu+0xba0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001d44:	4a68      	ldr	r2, [pc, #416]	; (8001ee8 <menu+0xbc8>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f005 ffff 	bl	8007d4c <lcd_print>
 8001d4e:	e008      	b.n	8001d62 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001d50:	4b5b      	ldr	r3, [pc, #364]	; (8001ec0 <menu+0xba0>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d104      	bne.n	8001d62 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001d58:	4a64      	ldr	r2, [pc, #400]	; (8001eec <menu+0xbcc>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f005 fff5 	bl	8007d4c <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <menu+0xbd0>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d113      	bne.n	8001d92 <menu+0xa72>
			if(dilSecim == 0) {
 8001d6a:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <menu+0xba0>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d105      	bne.n	8001d7e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001d72:	4a60      	ldr	r2, [pc, #384]	; (8001ef4 <menu+0xbd4>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	2002      	movs	r0, #2
 8001d78:	f005 ffe8 	bl	8007d4c <lcd_print>
 8001d7c:	e012      	b.n	8001da4 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001d7e:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <menu+0xba0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d10e      	bne.n	8001da4 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001d86:	4a5c      	ldr	r2, [pc, #368]	; (8001ef8 <menu+0xbd8>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f005 ffde 	bl	8007d4c <lcd_print>
 8001d90:	e008      	b.n	8001da4 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001d92:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <menu+0xbd0>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d104      	bne.n	8001da4 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001d9a:	4a58      	ldr	r2, [pc, #352]	; (8001efc <menu+0xbdc>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f005 ffd4 	bl	8007d4c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001da4:	2102      	movs	r1, #2
 8001da6:	4848      	ldr	r0, [pc, #288]	; (8001ec8 <menu+0xba8>)
 8001da8:	f007 faf6 	bl	8009398 <HAL_GPIO_ReadPin>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d115      	bne.n	8001dde <menu+0xabe>
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <menu+0xbac>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	f083 0301 	eor.w	r3, r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00e      	beq.n	8001dde <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <menu+0xbd0>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <menu+0xbd0>)
 8001dca:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001dcc:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <menu+0xbd0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d902      	bls.n	8001dda <menu+0xaba>
				emniyetCercevesi = 0;
 8001dd4:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <menu+0xbd0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dda:	f002 fe81 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dde:	2104      	movs	r1, #4
 8001de0:	4839      	ldr	r0, [pc, #228]	; (8001ec8 <menu+0xba8>)
 8001de2:	f007 fad9 	bl	8009398 <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d115      	bne.n	8001e18 <menu+0xaf8>
 8001dec:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <menu+0xbac>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	f083 0301 	eor.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00e      	beq.n	8001e18 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <menu+0xbd0>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <menu+0xbd0>)
 8001e04:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e06:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <menu+0xbd0>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001e0e:	4b38      	ldr	r3, [pc, #224]	; (8001ef0 <menu+0xbd0>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e14:	f002 fe64 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e18:	2108      	movs	r1, #8
 8001e1a:	482b      	ldr	r0, [pc, #172]	; (8001ec8 <menu+0xba8>)
 8001e1c:	f007 fabc 	bl	8009398 <HAL_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10d      	bne.n	8001e42 <menu+0xb22>
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <menu+0xbac>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f083 0301 	eor.w	r3, r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <menu+0xbd0>)
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <menu+0xbb8>)
 8001e3a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <menu+0xbc0>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <menu+0xbc4>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	f040 80ba 	bne.w	8001fc0 <menu+0xca0>
		if(dilSecim == 0) {
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <menu+0xba0>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001e54:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <menu+0xbe0>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f005 ff77 	bl	8007d4c <lcd_print>
 8001e5e:	e008      	b.n	8001e72 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <menu+0xba0>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d104      	bne.n	8001e72 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001e68:	4a26      	ldr	r2, [pc, #152]	; (8001f04 <menu+0xbe4>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f005 ff6d 	bl	8007d4c <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <menu+0xbe8>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d113      	bne.n	8001ea2 <menu+0xb82>
			if(dilSecim == 0) {
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <menu+0xba0>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001e82:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <menu+0xbd4>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	2002      	movs	r0, #2
 8001e88:	f005 ff60 	bl	8007d4c <lcd_print>
 8001e8c:	e049      	b.n	8001f22 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <menu+0xba0>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d145      	bne.n	8001f22 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <menu+0xbd8>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f005 ff56 	bl	8007d4c <lcd_print>
 8001ea0:	e03f      	b.n	8001f22 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <menu+0xbe8>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d13b      	bne.n	8001f22 <menu+0xc02>
			if(dilSecim == 0) {
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <menu+0xba0>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d12e      	bne.n	8001f10 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001eb2:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <menu+0xbec>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	f005 ff48 	bl	8007d4c <lcd_print>
 8001ebc:	e031      	b.n	8001f22 <menu+0xc02>
 8001ebe:	bf00      	nop
 8001ec0:	20000249 	.word	0x20000249
 8001ec4:	0800d36c 	.word	0x0800d36c
 8001ec8:	40010800 	.word	0x40010800
 8001ecc:	20000257 	.word	0x20000257
 8001ed0:	20000237 	.word	0x20000237
 8001ed4:	20000229 	.word	0x20000229
 8001ed8:	2000012c 	.word	0x2000012c
 8001edc:	2000022e 	.word	0x2000022e
 8001ee0:	20000254 	.word	0x20000254
 8001ee4:	20000228 	.word	0x20000228
 8001ee8:	0800d37c 	.word	0x0800d37c
 8001eec:	0800d390 	.word	0x0800d390
 8001ef0:	2000022c 	.word	0x2000022c
 8001ef4:	0800d3a4 	.word	0x0800d3a4
 8001ef8:	0800d3b8 	.word	0x0800d3b8
 8001efc:	0800d3cc 	.word	0x0800d3cc
 8001f00:	0800d3dc 	.word	0x0800d3dc
 8001f04:	0800d3f0 	.word	0x0800d3f0
 8001f08:	2000022d 	.word	0x2000022d
 8001f0c:	0800d404 	.word	0x0800d404
			} else if(dilSecim == 1) {
 8001f10:	4b92      	ldr	r3, [pc, #584]	; (800215c <menu+0xe3c>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d104      	bne.n	8001f22 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001f18:	4a91      	ldr	r2, [pc, #580]	; (8002160 <menu+0xe40>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f005 ff15 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f22:	2102      	movs	r1, #2
 8001f24:	488f      	ldr	r0, [pc, #572]	; (8002164 <menu+0xe44>)
 8001f26:	f007 fa37 	bl	8009398 <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d115      	bne.n	8001f5c <menu+0xc3c>
 8001f30:	4b8d      	ldr	r3, [pc, #564]	; (8002168 <menu+0xe48>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	f083 0301 	eor.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00e      	beq.n	8001f5c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	; (800216c <menu+0xe4c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b89      	ldr	r3, [pc, #548]	; (800216c <menu+0xe4c>)
 8001f48:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <menu+0xe4c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d902      	bls.n	8001f58 <menu+0xc38>
				yavaslamaLimit = 0;
 8001f52:	4b86      	ldr	r3, [pc, #536]	; (800216c <menu+0xe4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f58:	f002 fdc2 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4881      	ldr	r0, [pc, #516]	; (8002164 <menu+0xe44>)
 8001f60:	f007 fa1a 	bl	8009398 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d115      	bne.n	8001f96 <menu+0xc76>
 8001f6a:	4b7f      	ldr	r3, [pc, #508]	; (8002168 <menu+0xe48>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f78:	4b7c      	ldr	r3, [pc, #496]	; (800216c <menu+0xe4c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b7a      	ldr	r3, [pc, #488]	; (800216c <menu+0xe4c>)
 8001f82:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f84:	4b79      	ldr	r3, [pc, #484]	; (800216c <menu+0xe4c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001f8c:	4b77      	ldr	r3, [pc, #476]	; (800216c <menu+0xe4c>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f92:	f002 fda5 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f96:	2108      	movs	r1, #8
 8001f98:	4872      	ldr	r0, [pc, #456]	; (8002164 <menu+0xe44>)
 8001f9a:	f007 f9fd 	bl	8009398 <HAL_GPIO_ReadPin>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10d      	bne.n	8001fc0 <menu+0xca0>
 8001fa4:	4b70      	ldr	r3, [pc, #448]	; (8002168 <menu+0xe48>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	f083 0301 	eor.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001fb2:	4b6e      	ldr	r3, [pc, #440]	; (800216c <menu+0xe4c>)
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	4b6e      	ldr	r3, [pc, #440]	; (8002170 <menu+0xe50>)
 8001fb8:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001fba:	4b6e      	ldr	r3, [pc, #440]	; (8002174 <menu+0xe54>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001fc0:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <menu+0xe58>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	f040 80b9 	bne.w	800213c <menu+0xe1c>
		if(dilSecim == 0) {
 8001fca:	4b64      	ldr	r3, [pc, #400]	; (800215c <menu+0xe3c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001fd2:	4a6a      	ldr	r2, [pc, #424]	; (800217c <menu+0xe5c>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f005 feb8 	bl	8007d4c <lcd_print>
 8001fdc:	e008      	b.n	8001ff0 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001fde:	4b5f      	ldr	r3, [pc, #380]	; (800215c <menu+0xe3c>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d104      	bne.n	8001ff0 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001fe6:	4a66      	ldr	r2, [pc, #408]	; (8002180 <menu+0xe60>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	2001      	movs	r0, #1
 8001fec:	f005 feae 	bl	8007d4c <lcd_print>
		}

		if(altLimit == 0) {
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <menu+0xe64>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d113      	bne.n	8002020 <menu+0xd00>
			if(dilSecim == 0) {
 8001ff8:	4b58      	ldr	r3, [pc, #352]	; (800215c <menu+0xe3c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002000:	4a61      	ldr	r2, [pc, #388]	; (8002188 <menu+0xe68>)
 8002002:	2101      	movs	r1, #1
 8002004:	2002      	movs	r0, #2
 8002006:	f005 fea1 	bl	8007d4c <lcd_print>
 800200a:	e020      	b.n	800204e <menu+0xd2e>
			} else if(dilSecim == 1) {
 800200c:	4b53      	ldr	r3, [pc, #332]	; (800215c <menu+0xe3c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d11c      	bne.n	800204e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002014:	4a5d      	ldr	r2, [pc, #372]	; (800218c <menu+0xe6c>)
 8002016:	2101      	movs	r1, #1
 8002018:	2002      	movs	r0, #2
 800201a:	f005 fe97 	bl	8007d4c <lcd_print>
 800201e:	e016      	b.n	800204e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002020:	4b58      	ldr	r3, [pc, #352]	; (8002184 <menu+0xe64>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d112      	bne.n	800204e <menu+0xd2e>
			if(dilSecim == 0){
 8002028:	4b4c      	ldr	r3, [pc, #304]	; (800215c <menu+0xe3c>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002030:	4a57      	ldr	r2, [pc, #348]	; (8002190 <menu+0xe70>)
 8002032:	2101      	movs	r1, #1
 8002034:	2002      	movs	r0, #2
 8002036:	f005 fe89 	bl	8007d4c <lcd_print>
 800203a:	e008      	b.n	800204e <menu+0xd2e>
			} else if(dilSecim == 1){
 800203c:	4b47      	ldr	r3, [pc, #284]	; (800215c <menu+0xe3c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d104      	bne.n	800204e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002044:	4a46      	ldr	r2, [pc, #280]	; (8002160 <menu+0xe40>)
 8002046:	2101      	movs	r1, #1
 8002048:	2002      	movs	r0, #2
 800204a:	f005 fe7f 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800204e:	2102      	movs	r1, #2
 8002050:	4844      	ldr	r0, [pc, #272]	; (8002164 <menu+0xe44>)
 8002052:	f007 f9a1 	bl	8009398 <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d119      	bne.n	8002090 <menu+0xd70>
 800205c:	4b42      	ldr	r3, [pc, #264]	; (8002168 <menu+0xe48>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	f083 0301 	eor.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <menu+0xd70>
 800206a:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <menu+0xe74>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10e      	bne.n	8002090 <menu+0xd70>
			altLimit = altLimit + 1;
 8002072:	4b44      	ldr	r3, [pc, #272]	; (8002184 <menu+0xe64>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b42      	ldr	r3, [pc, #264]	; (8002184 <menu+0xe64>)
 800207c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <menu+0xe64>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d902      	bls.n	800208c <menu+0xd6c>
				altLimit = 0;
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <menu+0xe64>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800208c:	f002 fd28 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002090:	2104      	movs	r1, #4
 8002092:	4834      	ldr	r0, [pc, #208]	; (8002164 <menu+0xe44>)
 8002094:	f007 f980 	bl	8009398 <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d119      	bne.n	80020d2 <menu+0xdb2>
 800209e:	4b32      	ldr	r3, [pc, #200]	; (8002168 <menu+0xe48>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f083 0301 	eor.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <menu+0xdb2>
 80020ac:	4b39      	ldr	r3, [pc, #228]	; (8002194 <menu+0xe74>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10e      	bne.n	80020d2 <menu+0xdb2>
			altLimit = altLimit - 1;
 80020b4:	4b33      	ldr	r3, [pc, #204]	; (8002184 <menu+0xe64>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b31      	ldr	r3, [pc, #196]	; (8002184 <menu+0xe64>)
 80020be:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80020c0:	4b30      	ldr	r3, [pc, #192]	; (8002184 <menu+0xe64>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <menu+0xdae>
		   		altLimit = 1;
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <menu+0xe64>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020ce:	f002 fd07 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020d2:	2108      	movs	r1, #8
 80020d4:	4823      	ldr	r0, [pc, #140]	; (8002164 <menu+0xe44>)
 80020d6:	f007 f95f 	bl	8009398 <HAL_GPIO_ReadPin>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d12d      	bne.n	800213c <menu+0xe1c>
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <menu+0xe48>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d026      	beq.n	800213c <menu+0xe1c>
			eepromData[5] = altLimit;
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <menu+0xe64>)
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <menu+0xe50>)
 80020f4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <menu+0xe64>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d110      	bne.n	8002120 <menu+0xe00>
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <menu+0xe78>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <menu+0xdee>
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <menu+0xe78>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d108      	bne.n	8002120 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <menu+0xe78>)
 8002110:	2203      	movs	r2, #3
 8002112:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <menu+0xe78>)
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <menu+0xe50>)
 800211a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800211e:	e00a      	b.n	8002136 <menu+0xe16>
			} else if(altLimit == 0) {
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <menu+0xe64>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <menu+0xe16>
				platformSilindirTipi = 0;
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <menu+0xe7c>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <menu+0xe7c>)
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <menu+0xe50>)
 8002134:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <menu+0xe54>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <menu+0xe58>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b06      	cmp	r3, #6
 8002142:	f040 80b6 	bne.w	80022b2 <menu+0xf92>
		if(dilSecim == 0) {
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <menu+0xe3c>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d12a      	bne.n	80021a4 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800214e:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <menu+0xe80>)
 8002150:	2101      	movs	r1, #1
 8002152:	2001      	movs	r0, #1
 8002154:	f005 fdfa 	bl	8007d4c <lcd_print>
 8002158:	e02d      	b.n	80021b6 <menu+0xe96>
 800215a:	bf00      	nop
 800215c:	20000249 	.word	0x20000249
 8002160:	0800d418 	.word	0x0800d418
 8002164:	40010800 	.word	0x40010800
 8002168:	20000257 	.word	0x20000257
 800216c:	2000022d 	.word	0x2000022d
 8002170:	2000012c 	.word	0x2000012c
 8002174:	20000254 	.word	0x20000254
 8002178:	20000228 	.word	0x20000228
 800217c:	0800d42c 	.word	0x0800d42c
 8002180:	0800d440 	.word	0x0800d440
 8002184:	2000022e 	.word	0x2000022e
 8002188:	0800d3a4 	.word	0x0800d3a4
 800218c:	0800d3b8 	.word	0x0800d3b8
 8002190:	0800d404 	.word	0x0800d404
 8002194:	20000229 	.word	0x20000229
 8002198:	20000235 	.word	0x20000235
 800219c:	2000023b 	.word	0x2000023b
 80021a0:	0800d454 	.word	0x0800d454
		} else if(dilSecim == 1){
 80021a4:	4b7a      	ldr	r3, [pc, #488]	; (8002390 <menu+0x1070>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d104      	bne.n	80021b6 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80021ac:	4a79      	ldr	r2, [pc, #484]	; (8002394 <menu+0x1074>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	2001      	movs	r0, #1
 80021b2:	f005 fdcb 	bl	8007d4c <lcd_print>
		}
		if(basincSalteri == 0){
 80021b6:	4b78      	ldr	r3, [pc, #480]	; (8002398 <menu+0x1078>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d113      	bne.n	80021e6 <menu+0xec6>
			if(dilSecim == 0) {
 80021be:	4b74      	ldr	r3, [pc, #464]	; (8002390 <menu+0x1070>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80021c6:	4a75      	ldr	r2, [pc, #468]	; (800239c <menu+0x107c>)
 80021c8:	2101      	movs	r1, #1
 80021ca:	2002      	movs	r0, #2
 80021cc:	f005 fdbe 	bl	8007d4c <lcd_print>
 80021d0:	e020      	b.n	8002214 <menu+0xef4>
			} else if(dilSecim == 1){
 80021d2:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <menu+0x1070>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d11c      	bne.n	8002214 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80021da:	4a71      	ldr	r2, [pc, #452]	; (80023a0 <menu+0x1080>)
 80021dc:	2101      	movs	r1, #1
 80021de:	2002      	movs	r0, #2
 80021e0:	f005 fdb4 	bl	8007d4c <lcd_print>
 80021e4:	e016      	b.n	8002214 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80021e6:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <menu+0x1078>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d112      	bne.n	8002214 <menu+0xef4>
			if(dilSecim == 0) {
 80021ee:	4b68      	ldr	r3, [pc, #416]	; (8002390 <menu+0x1070>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80021f6:	4a6b      	ldr	r2, [pc, #428]	; (80023a4 <menu+0x1084>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	2002      	movs	r0, #2
 80021fc:	f005 fda6 	bl	8007d4c <lcd_print>
 8002200:	e008      	b.n	8002214 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <menu+0x1070>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d104      	bne.n	8002214 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800220a:	4a67      	ldr	r2, [pc, #412]	; (80023a8 <menu+0x1088>)
 800220c:	2101      	movs	r1, #1
 800220e:	2002      	movs	r0, #2
 8002210:	f005 fd9c 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002214:	2102      	movs	r1, #2
 8002216:	4865      	ldr	r0, [pc, #404]	; (80023ac <menu+0x108c>)
 8002218:	f007 f8be 	bl	8009398 <HAL_GPIO_ReadPin>
 800221c:	4603      	mov	r3, r0
 800221e:	2b01      	cmp	r3, #1
 8002220:	d115      	bne.n	800224e <menu+0xf2e>
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <menu+0x1090>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f083 0301 	eor.w	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002230:	4b59      	ldr	r3, [pc, #356]	; (8002398 <menu+0x1078>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b57      	ldr	r3, [pc, #348]	; (8002398 <menu+0x1078>)
 800223a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800223c:	4b56      	ldr	r3, [pc, #344]	; (8002398 <menu+0x1078>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d902      	bls.n	800224a <menu+0xf2a>
				basincSalteri = 0;
 8002244:	4b54      	ldr	r3, [pc, #336]	; (8002398 <menu+0x1078>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800224a:	f002 fc49 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800224e:	2104      	movs	r1, #4
 8002250:	4856      	ldr	r0, [pc, #344]	; (80023ac <menu+0x108c>)
 8002252:	f007 f8a1 	bl	8009398 <HAL_GPIO_ReadPin>
 8002256:	4603      	mov	r3, r0
 8002258:	2b01      	cmp	r3, #1
 800225a:	d115      	bne.n	8002288 <menu+0xf68>
 800225c:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <menu+0x1090>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	f083 0301 	eor.w	r3, r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00e      	beq.n	8002288 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800226a:	4b4b      	ldr	r3, [pc, #300]	; (8002398 <menu+0x1078>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	3b01      	subs	r3, #1
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <menu+0x1078>)
 8002274:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002276:	4b48      	ldr	r3, [pc, #288]	; (8002398 <menu+0x1078>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <menu+0xf64>
		   		basincSalteri = 1;
 800227e:	4b46      	ldr	r3, [pc, #280]	; (8002398 <menu+0x1078>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002284:	f002 fc2c 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002288:	2108      	movs	r1, #8
 800228a:	4848      	ldr	r0, [pc, #288]	; (80023ac <menu+0x108c>)
 800228c:	f007 f884 	bl	8009398 <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10d      	bne.n	80022b2 <menu+0xf92>
 8002296:	4b46      	ldr	r3, [pc, #280]	; (80023b0 <menu+0x1090>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80022a4:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <menu+0x1078>)
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <menu+0x1094>)
 80022aa:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80022ac:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <menu+0x1098>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80022b2:	4b42      	ldr	r3, [pc, #264]	; (80023bc <menu+0x109c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b07      	cmp	r3, #7
 80022b8:	f040 80f5 	bne.w	80024a6 <menu+0x1186>
		if(dilSecim == 0) {
 80022bc:	4b34      	ldr	r3, [pc, #208]	; (8002390 <menu+0x1070>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80022c4:	4a3e      	ldr	r2, [pc, #248]	; (80023c0 <menu+0x10a0>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	2001      	movs	r0, #1
 80022ca:	f005 fd3f 	bl	8007d4c <lcd_print>
 80022ce:	e008      	b.n	80022e2 <menu+0xfc2>
		} else if(dilSecim == 1){
 80022d0:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <menu+0x1070>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d104      	bne.n	80022e2 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80022d8:	4a3a      	ldr	r2, [pc, #232]	; (80023c4 <menu+0x10a4>)
 80022da:	2101      	movs	r1, #1
 80022dc:	2001      	movs	r0, #1
 80022de:	f005 fd35 	bl	8007d4c <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <menu+0x10a8>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d113      	bne.n	8002312 <menu+0xff2>
			if(dilSecim == 0) {
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <menu+0x1070>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80022f2:	4a2a      	ldr	r2, [pc, #168]	; (800239c <menu+0x107c>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	2002      	movs	r0, #2
 80022f8:	f005 fd28 	bl	8007d4c <lcd_print>
 80022fc:	e079      	b.n	80023f2 <menu+0x10d2>
			} else if(dilSecim == 1){
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <menu+0x1070>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d175      	bne.n	80023f2 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002306:	4a26      	ldr	r2, [pc, #152]	; (80023a0 <menu+0x1080>)
 8002308:	2101      	movs	r1, #1
 800230a:	2002      	movs	r0, #2
 800230c:	f005 fd1e 	bl	8007d4c <lcd_print>
 8002310:	e06f      	b.n	80023f2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <menu+0x10a8>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d113      	bne.n	8002342 <menu+0x1022>
			if(dilSecim == 0) {
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <menu+0x1070>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002322:	4a2a      	ldr	r2, [pc, #168]	; (80023cc <menu+0x10ac>)
 8002324:	2101      	movs	r1, #1
 8002326:	2002      	movs	r0, #2
 8002328:	f005 fd10 	bl	8007d4c <lcd_print>
 800232c:	e061      	b.n	80023f2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <menu+0x1070>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d15d      	bne.n	80023f2 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002336:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <menu+0x10b0>)
 8002338:	2101      	movs	r1, #1
 800233a:	2002      	movs	r0, #2
 800233c:	f005 fd06 	bl	8007d4c <lcd_print>
 8002340:	e057      	b.n	80023f2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <menu+0x10a8>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d113      	bne.n	8002372 <menu+0x1052>
			if(dilSecim == 0) {
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <menu+0x1070>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002352:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <menu+0x10b4>)
 8002354:	2101      	movs	r1, #1
 8002356:	2002      	movs	r0, #2
 8002358:	f005 fcf8 	bl	8007d4c <lcd_print>
 800235c:	e049      	b.n	80023f2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <menu+0x1070>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d145      	bne.n	80023f2 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002366:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <menu+0x10b8>)
 8002368:	2101      	movs	r1, #1
 800236a:	2002      	movs	r0, #2
 800236c:	f005 fcee 	bl	8007d4c <lcd_print>
 8002370:	e03f      	b.n	80023f2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <menu+0x10a8>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d13b      	bne.n	80023f2 <menu+0x10d2>
			if(dilSecim == 0) {
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <menu+0x1070>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12e      	bne.n	80023e0 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002382:	4a16      	ldr	r2, [pc, #88]	; (80023dc <menu+0x10bc>)
 8002384:	2101      	movs	r1, #1
 8002386:	2002      	movs	r0, #2
 8002388:	f005 fce0 	bl	8007d4c <lcd_print>
 800238c:	e031      	b.n	80023f2 <menu+0x10d2>
 800238e:	bf00      	nop
 8002390:	20000249 	.word	0x20000249
 8002394:	0800d464 	.word	0x0800d464
 8002398:	2000022f 	.word	0x2000022f
 800239c:	0800d3a4 	.word	0x0800d3a4
 80023a0:	0800d3b8 	.word	0x0800d3b8
 80023a4:	0800d404 	.word	0x0800d404
 80023a8:	0800d418 	.word	0x0800d418
 80023ac:	40010800 	.word	0x40010800
 80023b0:	20000257 	.word	0x20000257
 80023b4:	2000012c 	.word	0x2000012c
 80023b8:	20000254 	.word	0x20000254
 80023bc:	20000228 	.word	0x20000228
 80023c0:	0800d474 	.word	0x0800d474
 80023c4:	0800d488 	.word	0x0800d488
 80023c8:	20000230 	.word	0x20000230
 80023cc:	0800d49c 	.word	0x0800d49c
 80023d0:	0800d4b0 	.word	0x0800d4b0
 80023d4:	0800d4c4 	.word	0x0800d4c4
 80023d8:	0800d4d8 	.word	0x0800d4d8
 80023dc:	0800d4ec 	.word	0x0800d4ec
			} else if(dilSecim == 1){
 80023e0:	4b99      	ldr	r3, [pc, #612]	; (8002648 <menu+0x1328>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d104      	bne.n	80023f2 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80023e8:	4a98      	ldr	r2, [pc, #608]	; (800264c <menu+0x132c>)
 80023ea:	2101      	movs	r1, #1
 80023ec:	2002      	movs	r0, #2
 80023ee:	f005 fcad 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f2:	2102      	movs	r1, #2
 80023f4:	4896      	ldr	r0, [pc, #600]	; (8002650 <menu+0x1330>)
 80023f6:	f006 ffcf 	bl	8009398 <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d115      	bne.n	800242c <menu+0x110c>
 8002400:	4b94      	ldr	r3, [pc, #592]	; (8002654 <menu+0x1334>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	f083 0301 	eor.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800240e:	4b92      	ldr	r3, [pc, #584]	; (8002658 <menu+0x1338>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	3301      	adds	r3, #1
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4b90      	ldr	r3, [pc, #576]	; (8002658 <menu+0x1338>)
 8002418:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800241a:	4b8f      	ldr	r3, [pc, #572]	; (8002658 <menu+0x1338>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d902      	bls.n	8002428 <menu+0x1108>
				kapiSecimleri = 0;
 8002422:	4b8d      	ldr	r3, [pc, #564]	; (8002658 <menu+0x1338>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002428:	f002 fb5a 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800242c:	2104      	movs	r1, #4
 800242e:	4888      	ldr	r0, [pc, #544]	; (8002650 <menu+0x1330>)
 8002430:	f006 ffb2 	bl	8009398 <HAL_GPIO_ReadPin>
 8002434:	4603      	mov	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d115      	bne.n	8002466 <menu+0x1146>
 800243a:	4b86      	ldr	r3, [pc, #536]	; (8002654 <menu+0x1334>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00e      	beq.n	8002466 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002448:	4b83      	ldr	r3, [pc, #524]	; (8002658 <menu+0x1338>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	3b01      	subs	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b81      	ldr	r3, [pc, #516]	; (8002658 <menu+0x1338>)
 8002452:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002454:	4b80      	ldr	r3, [pc, #512]	; (8002658 <menu+0x1338>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d902      	bls.n	8002462 <menu+0x1142>
		   		kapiSecimleri = 3;
 800245c:	4b7e      	ldr	r3, [pc, #504]	; (8002658 <menu+0x1338>)
 800245e:	2203      	movs	r2, #3
 8002460:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002462:	f002 fb3d 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002466:	2108      	movs	r1, #8
 8002468:	4879      	ldr	r0, [pc, #484]	; (8002650 <menu+0x1330>)
 800246a:	f006 ff95 	bl	8009398 <HAL_GPIO_ReadPin>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d118      	bne.n	80024a6 <menu+0x1186>
 8002474:	4b77      	ldr	r3, [pc, #476]	; (8002654 <menu+0x1334>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	f083 0301 	eor.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d011      	beq.n	80024a6 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002482:	4b75      	ldr	r3, [pc, #468]	; (8002658 <menu+0x1338>)
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	4b75      	ldr	r3, [pc, #468]	; (800265c <menu+0x133c>)
 8002488:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800248a:	4b73      	ldr	r3, [pc, #460]	; (8002658 <menu+0x1338>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <menu+0x1180>
				altLimit = 1;
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <menu+0x1340>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002498:	4b71      	ldr	r3, [pc, #452]	; (8002660 <menu+0x1340>)
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	4b6f      	ldr	r3, [pc, #444]	; (800265c <menu+0x133c>)
 800249e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80024a0:	4b70      	ldr	r3, [pc, #448]	; (8002664 <menu+0x1344>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80024a6:	4b70      	ldr	r3, [pc, #448]	; (8002668 <menu+0x1348>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	f040 8092 	bne.w	80025d4 <menu+0x12b4>
		if(dilSecim == 0) {
 80024b0:	4b65      	ldr	r3, [pc, #404]	; (8002648 <menu+0x1328>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80024b8:	4a6c      	ldr	r2, [pc, #432]	; (800266c <menu+0x134c>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	2001      	movs	r0, #1
 80024be:	f005 fc45 	bl	8007d4c <lcd_print>
 80024c2:	e008      	b.n	80024d6 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80024c4:	4b60      	ldr	r3, [pc, #384]	; (8002648 <menu+0x1328>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d104      	bne.n	80024d6 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80024cc:	4a68      	ldr	r2, [pc, #416]	; (8002670 <menu+0x1350>)
 80024ce:	2101      	movs	r1, #1
 80024d0:	2001      	movs	r0, #1
 80024d2:	f005 fc3b 	bl	8007d4c <lcd_print>
		}

		if(kapiAcTipi == 0){
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <menu+0x1354>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d113      	bne.n	8002506 <menu+0x11e6>
			if(dilSecim == 0) {
 80024de:	4b5a      	ldr	r3, [pc, #360]	; (8002648 <menu+0x1328>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80024e6:	4a64      	ldr	r2, [pc, #400]	; (8002678 <menu+0x1358>)
 80024e8:	2101      	movs	r1, #1
 80024ea:	2002      	movs	r0, #2
 80024ec:	f005 fc2e 	bl	8007d4c <lcd_print>
 80024f0:	e020      	b.n	8002534 <menu+0x1214>
			} else if(dilSecim == 1) {
 80024f2:	4b55      	ldr	r3, [pc, #340]	; (8002648 <menu+0x1328>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d11c      	bne.n	8002534 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80024fa:	4a60      	ldr	r2, [pc, #384]	; (800267c <menu+0x135c>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	2002      	movs	r0, #2
 8002500:	f005 fc24 	bl	8007d4c <lcd_print>
 8002504:	e016      	b.n	8002534 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002506:	4b5b      	ldr	r3, [pc, #364]	; (8002674 <menu+0x1354>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d112      	bne.n	8002534 <menu+0x1214>
			if(dilSecim == 0){
 800250e:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <menu+0x1328>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002516:	4a5a      	ldr	r2, [pc, #360]	; (8002680 <menu+0x1360>)
 8002518:	2101      	movs	r1, #1
 800251a:	2002      	movs	r0, #2
 800251c:	f005 fc16 	bl	8007d4c <lcd_print>
 8002520:	e008      	b.n	8002534 <menu+0x1214>
			} else if(dilSecim == 1){
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <menu+0x1328>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d104      	bne.n	8002534 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800252a:	4a56      	ldr	r2, [pc, #344]	; (8002684 <menu+0x1364>)
 800252c:	2101      	movs	r1, #1
 800252e:	2002      	movs	r0, #2
 8002530:	f005 fc0c 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002534:	2102      	movs	r1, #2
 8002536:	4846      	ldr	r0, [pc, #280]	; (8002650 <menu+0x1330>)
 8002538:	f006 ff2e 	bl	8009398 <HAL_GPIO_ReadPin>
 800253c:	4603      	mov	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	d115      	bne.n	800256e <menu+0x124e>
 8002542:	4b44      	ldr	r3, [pc, #272]	; (8002654 <menu+0x1334>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	f083 0301 	eor.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00e      	beq.n	800256e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002550:	4b48      	ldr	r3, [pc, #288]	; (8002674 <menu+0x1354>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	3301      	adds	r3, #1
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b46      	ldr	r3, [pc, #280]	; (8002674 <menu+0x1354>)
 800255a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800255c:	4b45      	ldr	r3, [pc, #276]	; (8002674 <menu+0x1354>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d902      	bls.n	800256a <menu+0x124a>
				kapiAcTipi = 0;
 8002564:	4b43      	ldr	r3, [pc, #268]	; (8002674 <menu+0x1354>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800256a:	f002 fab9 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800256e:	2104      	movs	r1, #4
 8002570:	4837      	ldr	r0, [pc, #220]	; (8002650 <menu+0x1330>)
 8002572:	f006 ff11 	bl	8009398 <HAL_GPIO_ReadPin>
 8002576:	4603      	mov	r3, r0
 8002578:	2b01      	cmp	r3, #1
 800257a:	d115      	bne.n	80025a8 <menu+0x1288>
 800257c:	4b35      	ldr	r3, [pc, #212]	; (8002654 <menu+0x1334>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f083 0301 	eor.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00e      	beq.n	80025a8 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800258a:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <menu+0x1354>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	3b01      	subs	r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b38      	ldr	r3, [pc, #224]	; (8002674 <menu+0x1354>)
 8002594:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002596:	4b37      	ldr	r3, [pc, #220]	; (8002674 <menu+0x1354>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <menu+0x1284>
		   		kapiAcTipi = 1;
 800259e:	4b35      	ldr	r3, [pc, #212]	; (8002674 <menu+0x1354>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025a4:	f002 fa9c 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025a8:	2108      	movs	r1, #8
 80025aa:	4829      	ldr	r0, [pc, #164]	; (8002650 <menu+0x1330>)
 80025ac:	f006 fef4 	bl	8009398 <HAL_GPIO_ReadPin>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10e      	bne.n	80025d4 <menu+0x12b4>
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <menu+0x1334>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	f083 0301 	eor.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80025c4:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <menu+0x1354>)
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <menu+0x133c>)
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <menu+0x1344>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80025d4:	4b24      	ldr	r3, [pc, #144]	; (8002668 <menu+0x1348>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b09      	cmp	r3, #9
 80025da:	f040 80b9 	bne.w	8002750 <menu+0x1430>
		if(dilSecim == 0){
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <menu+0x1328>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80025e6:	4a28      	ldr	r2, [pc, #160]	; (8002688 <menu+0x1368>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	2001      	movs	r0, #1
 80025ec:	f005 fbae 	bl	8007d4c <lcd_print>
 80025f0:	e008      	b.n	8002604 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <menu+0x1328>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d104      	bne.n	8002604 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80025fa:	4a24      	ldr	r2, [pc, #144]	; (800268c <menu+0x136c>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	2001      	movs	r0, #1
 8002600:	f005 fba4 	bl	8007d4c <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <menu+0x1370>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800260c:	4a21      	ldr	r2, [pc, #132]	; (8002694 <menu+0x1374>)
 800260e:	2101      	movs	r1, #1
 8002610:	2002      	movs	r0, #2
 8002612:	f005 fb9b 	bl	8007d4c <lcd_print>
 8002616:	e04c      	b.n	80026b2 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <menu+0x1370>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d13f      	bne.n	80026a0 <menu+0x1380>
			if(dilSecim == 0){
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <menu+0x1328>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d105      	bne.n	8002634 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002628:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <menu+0x1378>)
 800262a:	2101      	movs	r1, #1
 800262c:	2002      	movs	r0, #2
 800262e:	f005 fb8d 	bl	8007d4c <lcd_print>
 8002632:	e03e      	b.n	80026b2 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <menu+0x1328>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d13a      	bne.n	80026b2 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800263c:	4a17      	ldr	r2, [pc, #92]	; (800269c <menu+0x137c>)
 800263e:	2101      	movs	r1, #1
 8002640:	2002      	movs	r0, #2
 8002642:	f005 fb83 	bl	8007d4c <lcd_print>
 8002646:	e034      	b.n	80026b2 <menu+0x1392>
 8002648:	20000249 	.word	0x20000249
 800264c:	0800d500 	.word	0x0800d500
 8002650:	40010800 	.word	0x40010800
 8002654:	20000257 	.word	0x20000257
 8002658:	20000230 	.word	0x20000230
 800265c:	2000012c 	.word	0x2000012c
 8002660:	2000022e 	.word	0x2000022e
 8002664:	20000254 	.word	0x20000254
 8002668:	20000228 	.word	0x20000228
 800266c:	0800d514 	.word	0x0800d514
 8002670:	0800d528 	.word	0x0800d528
 8002674:	20000234 	.word	0x20000234
 8002678:	0800d53c 	.word	0x0800d53c
 800267c:	0800d54c 	.word	0x0800d54c
 8002680:	0800d55c 	.word	0x0800d55c
 8002684:	0800d570 	.word	0x0800d570
 8002688:	0800d584 	.word	0x0800d584
 800268c:	0800d598 	.word	0x0800d598
 8002690:	20000231 	.word	0x20000231
 8002694:	0800d5ac 	.word	0x0800d5ac
 8002698:	0800d5c0 	.word	0x0800d5c0
 800269c:	0800d5d0 	.word	0x0800d5d0
			}
		} else if(kapi1Tip == 2) {
 80026a0:	4b8a      	ldr	r3, [pc, #552]	; (80028cc <menu+0x15ac>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d104      	bne.n	80026b2 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80026a8:	4a89      	ldr	r2, [pc, #548]	; (80028d0 <menu+0x15b0>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	2002      	movs	r0, #2
 80026ae:	f005 fb4d 	bl	8007d4c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b2:	2102      	movs	r1, #2
 80026b4:	4887      	ldr	r0, [pc, #540]	; (80028d4 <menu+0x15b4>)
 80026b6:	f006 fe6f 	bl	8009398 <HAL_GPIO_ReadPin>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d115      	bne.n	80026ec <menu+0x13cc>
 80026c0:	4b85      	ldr	r3, [pc, #532]	; (80028d8 <menu+0x15b8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	f083 0301 	eor.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00e      	beq.n	80026ec <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80026ce:	4b7f      	ldr	r3, [pc, #508]	; (80028cc <menu+0x15ac>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <menu+0x15ac>)
 80026d8:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80026da:	4b7c      	ldr	r3, [pc, #496]	; (80028cc <menu+0x15ac>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <menu+0x13c8>
				kapi1Tip = 0;
 80026e2:	4b7a      	ldr	r3, [pc, #488]	; (80028cc <menu+0x15ac>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026e8:	f002 f9fa 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ec:	2104      	movs	r1, #4
 80026ee:	4879      	ldr	r0, [pc, #484]	; (80028d4 <menu+0x15b4>)
 80026f0:	f006 fe52 	bl	8009398 <HAL_GPIO_ReadPin>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d115      	bne.n	8002726 <menu+0x1406>
 80026fa:	4b77      	ldr	r3, [pc, #476]	; (80028d8 <menu+0x15b8>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002708:	4b70      	ldr	r3, [pc, #448]	; (80028cc <menu+0x15ac>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b6e      	ldr	r3, [pc, #440]	; (80028cc <menu+0x15ac>)
 8002712:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002714:	4b6d      	ldr	r3, [pc, #436]	; (80028cc <menu+0x15ac>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d902      	bls.n	8002722 <menu+0x1402>
		   		kapi1Tip = 2;
 800271c:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <menu+0x15ac>)
 800271e:	2202      	movs	r2, #2
 8002720:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002722:	f002 f9dd 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002726:	2108      	movs	r1, #8
 8002728:	486a      	ldr	r0, [pc, #424]	; (80028d4 <menu+0x15b4>)
 800272a:	f006 fe35 	bl	8009398 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10d      	bne.n	8002750 <menu+0x1430>
 8002734:	4b68      	ldr	r3, [pc, #416]	; (80028d8 <menu+0x15b8>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002742:	4b62      	ldr	r3, [pc, #392]	; (80028cc <menu+0x15ac>)
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	4b65      	ldr	r3, [pc, #404]	; (80028dc <menu+0x15bc>)
 8002748:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800274a:	4b65      	ldr	r3, [pc, #404]	; (80028e0 <menu+0x15c0>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002750:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <menu+0x15c4>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b0a      	cmp	r3, #10
 8002756:	d17f      	bne.n	8002858 <menu+0x1538>
		if(dilSecim == 0) {
 8002758:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <menu+0x15c8>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002760:	4a62      	ldr	r2, [pc, #392]	; (80028ec <menu+0x15cc>)
 8002762:	2101      	movs	r1, #1
 8002764:	2001      	movs	r0, #1
 8002766:	f005 faf1 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800276a:	4a61      	ldr	r2, [pc, #388]	; (80028f0 <menu+0x15d0>)
 800276c:	2101      	movs	r1, #1
 800276e:	2002      	movs	r0, #2
 8002770:	f005 faec 	bl	8007d4c <lcd_print>
 8002774:	e00d      	b.n	8002792 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002776:	4b5c      	ldr	r3, [pc, #368]	; (80028e8 <menu+0x15c8>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d109      	bne.n	8002792 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800277e:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <menu+0x15d4>)
 8002780:	2101      	movs	r1, #1
 8002782:	2001      	movs	r0, #1
 8002784:	f005 fae2 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002788:	4a5b      	ldr	r2, [pc, #364]	; (80028f8 <menu+0x15d8>)
 800278a:	2101      	movs	r1, #1
 800278c:	2002      	movs	r0, #2
 800278e:	f005 fadd 	bl	8007d4c <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002792:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <menu+0x15dc>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	220a      	movs	r2, #10
 8002798:	4959      	ldr	r1, [pc, #356]	; (8002900 <menu+0x15e0>)
 800279a:	4618      	mov	r0, r3
 800279c:	f009 fe28 	bl	800c3f0 <itoa>
		lcd_print(2,16,snum);
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <menu+0x15e0>)
 80027a2:	2110      	movs	r1, #16
 80027a4:	2002      	movs	r0, #2
 80027a6:	f005 fad1 	bl	8007d4c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027aa:	2102      	movs	r1, #2
 80027ac:	4849      	ldr	r0, [pc, #292]	; (80028d4 <menu+0x15b4>)
 80027ae:	f006 fdf3 	bl	8009398 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d119      	bne.n	80027ec <menu+0x14cc>
 80027b8:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <menu+0x15b8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f083 0301 	eor.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d012      	beq.n	80027ec <menu+0x14cc>
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <menu+0x15ac>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10e      	bne.n	80027ec <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80027ce:	4b4b      	ldr	r3, [pc, #300]	; (80028fc <menu+0x15dc>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	3301      	adds	r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b49      	ldr	r3, [pc, #292]	; (80028fc <menu+0x15dc>)
 80027d8:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80027da:	4b48      	ldr	r3, [pc, #288]	; (80028fc <menu+0x15dc>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d902      	bls.n	80027e8 <menu+0x14c8>
				kapi1AcSure = 0;
 80027e2:	4b46      	ldr	r3, [pc, #280]	; (80028fc <menu+0x15dc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027e8:	f002 f97a 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80027ec:	2104      	movs	r1, #4
 80027ee:	4839      	ldr	r0, [pc, #228]	; (80028d4 <menu+0x15b4>)
 80027f0:	f006 fdd2 	bl	8009398 <HAL_GPIO_ReadPin>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d119      	bne.n	800282e <menu+0x150e>
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <menu+0x15b8>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	f083 0301 	eor.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <menu+0x150e>
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <menu+0x15ac>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10e      	bne.n	800282e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002810:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <menu+0x15dc>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b38      	ldr	r3, [pc, #224]	; (80028fc <menu+0x15dc>)
 800281a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <menu+0x15dc>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d902      	bls.n	800282a <menu+0x150a>
		   		kapi1AcSure = 5;
 8002824:	4b35      	ldr	r3, [pc, #212]	; (80028fc <menu+0x15dc>)
 8002826:	2205      	movs	r2, #5
 8002828:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800282a:	f002 f959 	bl	8004ae0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800282e:	2108      	movs	r1, #8
 8002830:	4828      	ldr	r0, [pc, #160]	; (80028d4 <menu+0x15b4>)
 8002832:	f006 fdb1 	bl	8009398 <HAL_GPIO_ReadPin>
 8002836:	4603      	mov	r3, r0
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10d      	bne.n	8002858 <menu+0x1538>
 800283c:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <menu+0x15b8>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d006      	beq.n	8002858 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <menu+0x15dc>)
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <menu+0x15bc>)
 8002850:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <menu+0x15c0>)
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002858:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <menu+0x15c4>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b0b      	cmp	r3, #11
 800285e:	f040 80b5 	bne.w	80029cc <menu+0x16ac>
		if(dilSecim == 0) {
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <menu+0x15c8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800286a:	4a26      	ldr	r2, [pc, #152]	; (8002904 <menu+0x15e4>)
 800286c:	2101      	movs	r1, #1
 800286e:	2001      	movs	r0, #1
 8002870:	f005 fa6c 	bl	8007d4c <lcd_print>
 8002874:	e008      	b.n	8002888 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <menu+0x15c8>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d104      	bne.n	8002888 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <menu+0x15e8>)
 8002880:	2101      	movs	r1, #1
 8002882:	2001      	movs	r0, #1
 8002884:	f005 fa62 	bl	8007d4c <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <menu+0x15ec>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002890:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <menu+0x15f0>)
 8002892:	2101      	movs	r1, #1
 8002894:	2002      	movs	r0, #2
 8002896:	f005 fa59 	bl	8007d4c <lcd_print>
 800289a:	e048      	b.n	800292e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <menu+0x15ec>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d13b      	bne.n	800291c <menu+0x15fc>
			if(dilSecim == 0) {
 80028a4:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <menu+0x15c8>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80028ac:	4a19      	ldr	r2, [pc, #100]	; (8002914 <menu+0x15f4>)
 80028ae:	2101      	movs	r1, #1
 80028b0:	2002      	movs	r0, #2
 80028b2:	f005 fa4b 	bl	8007d4c <lcd_print>
 80028b6:	e03a      	b.n	800292e <menu+0x160e>
			} else if(dilSecim == 1) {
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <menu+0x15c8>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d136      	bne.n	800292e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80028c0:	4a15      	ldr	r2, [pc, #84]	; (8002918 <menu+0x15f8>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	2002      	movs	r0, #2
 80028c6:	f005 fa41 	bl	8007d4c <lcd_print>
 80028ca:	e030      	b.n	800292e <menu+0x160e>
 80028cc:	20000231 	.word	0x20000231
 80028d0:	0800d5e4 	.word	0x0800d5e4
 80028d4:	40010800 	.word	0x40010800
 80028d8:	20000257 	.word	0x20000257
 80028dc:	2000012c 	.word	0x2000012c
 80028e0:	20000254 	.word	0x20000254
 80028e4:	20000228 	.word	0x20000228
 80028e8:	20000249 	.word	0x20000249
 80028ec:	0800d5f4 	.word	0x0800d5f4
 80028f0:	0800d608 	.word	0x0800d608
 80028f4:	0800d618 	.word	0x0800d618
 80028f8:	0800d62c 	.word	0x0800d62c
 80028fc:	20000241 	.word	0x20000241
 8002900:	2000019c 	.word	0x2000019c
 8002904:	0800d63c 	.word	0x0800d63c
 8002908:	0800d650 	.word	0x0800d650
 800290c:	20000232 	.word	0x20000232
 8002910:	0800d5ac 	.word	0x0800d5ac
 8002914:	0800d5c0 	.word	0x0800d5c0
 8002918:	0800d5d0 	.word	0x0800d5d0
			}
		} else if(kapi2Tip == 2) {
 800291c:	4b8a      	ldr	r3, [pc, #552]	; (8002b48 <menu+0x1828>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d104      	bne.n	800292e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002924:	4a89      	ldr	r2, [pc, #548]	; (8002b4c <menu+0x182c>)
 8002926:	2101      	movs	r1, #1
 8002928:	2002      	movs	r0, #2
 800292a:	f005 fa0f 	bl	8007d4c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800292e:	2102      	movs	r1, #2
 8002930:	4887      	ldr	r0, [pc, #540]	; (8002b50 <menu+0x1830>)
 8002932:	f006 fd31 	bl	8009398 <HAL_GPIO_ReadPin>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d115      	bne.n	8002968 <menu+0x1648>
 800293c:	4b85      	ldr	r3, [pc, #532]	; (8002b54 <menu+0x1834>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	f083 0301 	eor.w	r3, r3, #1
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00e      	beq.n	8002968 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 800294a:	4b7f      	ldr	r3, [pc, #508]	; (8002b48 <menu+0x1828>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b7d      	ldr	r3, [pc, #500]	; (8002b48 <menu+0x1828>)
 8002954:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002956:	4b7c      	ldr	r3, [pc, #496]	; (8002b48 <menu+0x1828>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <menu+0x1644>
				kapi2Tip = 0;
 800295e:	4b7a      	ldr	r3, [pc, #488]	; (8002b48 <menu+0x1828>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002964:	f002 f8bc 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002968:	2104      	movs	r1, #4
 800296a:	4879      	ldr	r0, [pc, #484]	; (8002b50 <menu+0x1830>)
 800296c:	f006 fd14 	bl	8009398 <HAL_GPIO_ReadPin>
 8002970:	4603      	mov	r3, r0
 8002972:	2b01      	cmp	r3, #1
 8002974:	d115      	bne.n	80029a2 <menu+0x1682>
 8002976:	4b77      	ldr	r3, [pc, #476]	; (8002b54 <menu+0x1834>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f083 0301 	eor.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002984:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <menu+0x1828>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	b2da      	uxtb	r2, r3
 800298c:	4b6e      	ldr	r3, [pc, #440]	; (8002b48 <menu+0x1828>)
 800298e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002990:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <menu+0x1828>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d902      	bls.n	800299e <menu+0x167e>
		   		kapi2Tip = 2;
 8002998:	4b6b      	ldr	r3, [pc, #428]	; (8002b48 <menu+0x1828>)
 800299a:	2202      	movs	r2, #2
 800299c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800299e:	f002 f89f 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029a2:	2108      	movs	r1, #8
 80029a4:	486a      	ldr	r0, [pc, #424]	; (8002b50 <menu+0x1830>)
 80029a6:	f006 fcf7 	bl	8009398 <HAL_GPIO_ReadPin>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d10d      	bne.n	80029cc <menu+0x16ac>
 80029b0:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <menu+0x1834>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80029be:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <menu+0x1828>)
 80029c0:	781a      	ldrb	r2, [r3, #0]
 80029c2:	4b65      	ldr	r3, [pc, #404]	; (8002b58 <menu+0x1838>)
 80029c4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <menu+0x183c>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80029cc:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <menu+0x1840>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	d17f      	bne.n	8002ad4 <menu+0x17b4>
		if(dilSecim == 0) {
 80029d4:	4b63      	ldr	r3, [pc, #396]	; (8002b64 <menu+0x1844>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80029dc:	4a62      	ldr	r2, [pc, #392]	; (8002b68 <menu+0x1848>)
 80029de:	2101      	movs	r1, #1
 80029e0:	2001      	movs	r0, #1
 80029e2:	f005 f9b3 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80029e6:	4a61      	ldr	r2, [pc, #388]	; (8002b6c <menu+0x184c>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	2002      	movs	r0, #2
 80029ec:	f005 f9ae 	bl	8007d4c <lcd_print>
 80029f0:	e00d      	b.n	8002a0e <menu+0x16ee>
		} else if(dilSecim == 1) {
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <menu+0x1844>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d109      	bne.n	8002a0e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80029fa:	4a5d      	ldr	r2, [pc, #372]	; (8002b70 <menu+0x1850>)
 80029fc:	2101      	movs	r1, #1
 80029fe:	2001      	movs	r0, #1
 8002a00:	f005 f9a4 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a04:	4a5b      	ldr	r2, [pc, #364]	; (8002b74 <menu+0x1854>)
 8002a06:	2101      	movs	r1, #1
 8002a08:	2002      	movs	r0, #2
 8002a0a:	f005 f99f 	bl	8007d4c <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002a0e:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <menu+0x1858>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	220a      	movs	r2, #10
 8002a14:	4959      	ldr	r1, [pc, #356]	; (8002b7c <menu+0x185c>)
 8002a16:	4618      	mov	r0, r3
 8002a18:	f009 fcea 	bl	800c3f0 <itoa>
		lcd_print(2,16,snum);
 8002a1c:	4a57      	ldr	r2, [pc, #348]	; (8002b7c <menu+0x185c>)
 8002a1e:	2110      	movs	r1, #16
 8002a20:	2002      	movs	r0, #2
 8002a22:	f005 f993 	bl	8007d4c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a26:	2102      	movs	r1, #2
 8002a28:	4849      	ldr	r0, [pc, #292]	; (8002b50 <menu+0x1830>)
 8002a2a:	f006 fcb5 	bl	8009398 <HAL_GPIO_ReadPin>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d119      	bne.n	8002a68 <menu+0x1748>
 8002a34:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <menu+0x1834>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d012      	beq.n	8002a68 <menu+0x1748>
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <menu+0x1828>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10e      	bne.n	8002a68 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002a4a:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <menu+0x1858>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b49      	ldr	r3, [pc, #292]	; (8002b78 <menu+0x1858>)
 8002a54:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002a56:	4b48      	ldr	r3, [pc, #288]	; (8002b78 <menu+0x1858>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d902      	bls.n	8002a64 <menu+0x1744>
				kapi2AcSure = 0;
 8002a5e:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <menu+0x1858>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a64:	f002 f83c 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002a68:	2104      	movs	r1, #4
 8002a6a:	4839      	ldr	r0, [pc, #228]	; (8002b50 <menu+0x1830>)
 8002a6c:	f006 fc94 	bl	8009398 <HAL_GPIO_ReadPin>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d119      	bne.n	8002aaa <menu+0x178a>
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <menu+0x1834>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	f083 0301 	eor.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d012      	beq.n	8002aaa <menu+0x178a>
 8002a84:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <menu+0x1828>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10e      	bne.n	8002aaa <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002a8c:	4b3a      	ldr	r3, [pc, #232]	; (8002b78 <menu+0x1858>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <menu+0x1858>)
 8002a96:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002a98:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <menu+0x1858>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b06      	cmp	r3, #6
 8002a9e:	d902      	bls.n	8002aa6 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002aa0:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <menu+0x1858>)
 8002aa2:	2205      	movs	r2, #5
 8002aa4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aa6:	f002 f81b 	bl	8004ae0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aaa:	2108      	movs	r1, #8
 8002aac:	4828      	ldr	r0, [pc, #160]	; (8002b50 <menu+0x1830>)
 8002aae:	f006 fc73 	bl	8009398 <HAL_GPIO_ReadPin>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10d      	bne.n	8002ad4 <menu+0x17b4>
 8002ab8:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <menu+0x1834>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f083 0301 	eor.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <menu+0x1858>)
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <menu+0x1838>)
 8002acc:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <menu+0x183c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002ad4:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <menu+0x1840>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b0d      	cmp	r3, #13
 8002ada:	f040 80b5 	bne.w	8002c48 <menu+0x1928>
		if(dilSecim == 0) {
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <menu+0x1844>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d105      	bne.n	8002af2 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002ae6:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <menu+0x1860>)
 8002ae8:	2101      	movs	r1, #1
 8002aea:	2001      	movs	r0, #1
 8002aec:	f005 f92e 	bl	8007d4c <lcd_print>
 8002af0:	e008      	b.n	8002b04 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <menu+0x1844>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d104      	bne.n	8002b04 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002afa:	4a22      	ldr	r2, [pc, #136]	; (8002b84 <menu+0x1864>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	2001      	movs	r0, #1
 8002b00:	f005 f924 	bl	8007d4c <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <menu+0x1868>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <menu+0x186c>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	2002      	movs	r0, #2
 8002b12:	f005 f91b 	bl	8007d4c <lcd_print>
 8002b16:	e048      	b.n	8002baa <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <menu+0x1868>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d13b      	bne.n	8002b98 <menu+0x1878>
			if(dilSecim == 0) {
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <menu+0x1844>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002b28:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <menu+0x1870>)
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f005 f90d 	bl	8007d4c <lcd_print>
 8002b32:	e03a      	b.n	8002baa <menu+0x188a>
			} else if(dilSecim == 1) {
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <menu+0x1844>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d136      	bne.n	8002baa <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002b3c:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <menu+0x1874>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2002      	movs	r0, #2
 8002b42:	f005 f903 	bl	8007d4c <lcd_print>
 8002b46:	e030      	b.n	8002baa <menu+0x188a>
 8002b48:	20000232 	.word	0x20000232
 8002b4c:	0800d5e4 	.word	0x0800d5e4
 8002b50:	40010800 	.word	0x40010800
 8002b54:	20000257 	.word	0x20000257
 8002b58:	2000012c 	.word	0x2000012c
 8002b5c:	20000254 	.word	0x20000254
 8002b60:	20000228 	.word	0x20000228
 8002b64:	20000249 	.word	0x20000249
 8002b68:	0800d664 	.word	0x0800d664
 8002b6c:	0800d608 	.word	0x0800d608
 8002b70:	0800d678 	.word	0x0800d678
 8002b74:	0800d62c 	.word	0x0800d62c
 8002b78:	20000242 	.word	0x20000242
 8002b7c:	2000019c 	.word	0x2000019c
 8002b80:	0800d68c 	.word	0x0800d68c
 8002b84:	0800d6a0 	.word	0x0800d6a0
 8002b88:	20000233 	.word	0x20000233
 8002b8c:	0800d5ac 	.word	0x0800d5ac
 8002b90:	0800d5c0 	.word	0x0800d5c0
 8002b94:	0800d5d0 	.word	0x0800d5d0
			}
		} else if(kapitablaTip == 2) {
 8002b98:	4b5b      	ldr	r3, [pc, #364]	; (8002d08 <menu+0x19e8>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d104      	bne.n	8002baa <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002ba0:	4a5a      	ldr	r2, [pc, #360]	; (8002d0c <menu+0x19ec>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	f005 f8d1 	bl	8007d4c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002baa:	2102      	movs	r1, #2
 8002bac:	4858      	ldr	r0, [pc, #352]	; (8002d10 <menu+0x19f0>)
 8002bae:	f006 fbf3 	bl	8009398 <HAL_GPIO_ReadPin>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d115      	bne.n	8002be4 <menu+0x18c4>
 8002bb8:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <menu+0x19f4>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	f083 0301 	eor.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00e      	beq.n	8002be4 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002bc6:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <menu+0x19e8>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <menu+0x19e8>)
 8002bd0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002bd2:	4b4d      	ldr	r3, [pc, #308]	; (8002d08 <menu+0x19e8>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d902      	bls.n	8002be0 <menu+0x18c0>
				kapitablaTip = 0;
 8002bda:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <menu+0x19e8>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002be0:	f001 ff7e 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be4:	2104      	movs	r1, #4
 8002be6:	484a      	ldr	r0, [pc, #296]	; (8002d10 <menu+0x19f0>)
 8002be8:	f006 fbd6 	bl	8009398 <HAL_GPIO_ReadPin>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d115      	bne.n	8002c1e <menu+0x18fe>
 8002bf2:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <menu+0x19f4>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00e      	beq.n	8002c1e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002c00:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <menu+0x19e8>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <menu+0x19e8>)
 8002c0a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002c0c:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <menu+0x19e8>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d902      	bls.n	8002c1a <menu+0x18fa>
		   		kapitablaTip = 2;
 8002c14:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <menu+0x19e8>)
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c1a:	f001 ff61 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c1e:	2108      	movs	r1, #8
 8002c20:	483b      	ldr	r0, [pc, #236]	; (8002d10 <menu+0x19f0>)
 8002c22:	f006 fbb9 	bl	8009398 <HAL_GPIO_ReadPin>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d10d      	bne.n	8002c48 <menu+0x1928>
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <menu+0x19f4>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	f083 0301 	eor.w	r3, r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002c3a:	4b33      	ldr	r3, [pc, #204]	; (8002d08 <menu+0x19e8>)
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <menu+0x19f8>)
 8002c40:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002c42:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <menu+0x19fc>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <menu+0x1a00>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b0e      	cmp	r3, #14
 8002c4e:	f040 80f2 	bne.w	8002e36 <menu+0x1b16>
		if(dilSecim == 0) {
 8002c52:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <menu+0x1a04>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002c5a:	4a33      	ldr	r2, [pc, #204]	; (8002d28 <menu+0x1a08>)
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f005 f874 	bl	8007d4c <lcd_print>
 8002c64:	e008      	b.n	8002c78 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002c66:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <menu+0x1a04>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d104      	bne.n	8002c78 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002c6e:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <menu+0x1a0c>)
 8002c70:	2101      	movs	r1, #1
 8002c72:	2001      	movs	r0, #1
 8002c74:	f005 f86a 	bl	8007d4c <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002c78:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <menu+0x1a10>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d113      	bne.n	8002ca8 <menu+0x1988>
			if(dilSecim == 0){
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <menu+0x1a04>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002c88:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <menu+0x1a14>)
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f005 f85d 	bl	8007d4c <lcd_print>
 8002c92:	e071      	b.n	8002d78 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c94:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <menu+0x1a04>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d16d      	bne.n	8002d78 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002c9c:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <menu+0x1a18>)
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	2002      	movs	r0, #2
 8002ca2:	f005 f853 	bl	8007d4c <lcd_print>
 8002ca6:	e067      	b.n	8002d78 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002ca8:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <menu+0x1a10>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d112      	bne.n	8002cd6 <menu+0x19b6>
			if(dilSecim == 0){
 8002cb0:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <menu+0x1a04>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d104      	bne.n	8002cc2 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <menu+0x1a1c>)
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2002      	movs	r0, #2
 8002cbe:	f005 f845 	bl	8007d4c <lcd_print>
			}
			if(dilSecim == 1){
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <menu+0x1a04>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d156      	bne.n	8002d78 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002cca:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <menu+0x1a20>)
 8002ccc:	2101      	movs	r1, #1
 8002cce:	2002      	movs	r0, #2
 8002cd0:	f005 f83c 	bl	8007d4c <lcd_print>
 8002cd4:	e050      	b.n	8002d78 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002cd6:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <menu+0x1a10>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d136      	bne.n	8002d4c <menu+0x1a2c>
			if(dilSecim == 0){
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <menu+0x1a04>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <menu+0x1a24>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2002      	movs	r0, #2
 8002cec:	f005 f82e 	bl	8007d4c <lcd_print>
 8002cf0:	e042      	b.n	8002d78 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <menu+0x1a04>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d13e      	bne.n	8002d78 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002cfa:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <menu+0x1a28>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f005 f824 	bl	8007d4c <lcd_print>
 8002d04:	e038      	b.n	8002d78 <menu+0x1a58>
 8002d06:	bf00      	nop
 8002d08:	20000233 	.word	0x20000233
 8002d0c:	0800d5e4 	.word	0x0800d5e4
 8002d10:	40010800 	.word	0x40010800
 8002d14:	20000257 	.word	0x20000257
 8002d18:	2000012c 	.word	0x2000012c
 8002d1c:	20000254 	.word	0x20000254
 8002d20:	20000228 	.word	0x20000228
 8002d24:	20000249 	.word	0x20000249
 8002d28:	0800d6b4 	.word	0x0800d6b4
 8002d2c:	0800d6c8 	.word	0x0800d6c8
 8002d30:	20000235 	.word	0x20000235
 8002d34:	0800d6dc 	.word	0x0800d6dc
 8002d38:	0800d6ec 	.word	0x0800d6ec
 8002d3c:	0800d6fc 	.word	0x0800d6fc
 8002d40:	0800d70c 	.word	0x0800d70c
 8002d44:	0800d71c 	.word	0x0800d71c
 8002d48:	0800d730 	.word	0x0800d730
			}
		} else if(kapiTablaAcKonum == 3) {
 8002d4c:	4b9b      	ldr	r3, [pc, #620]	; (8002fbc <menu+0x1c9c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d111      	bne.n	8002d78 <menu+0x1a58>
			if(dilSecim == 0) {
 8002d54:	4b9a      	ldr	r3, [pc, #616]	; (8002fc0 <menu+0x1ca0>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002d5c:	4a99      	ldr	r2, [pc, #612]	; (8002fc4 <menu+0x1ca4>)
 8002d5e:	2101      	movs	r1, #1
 8002d60:	2002      	movs	r0, #2
 8002d62:	f004 fff3 	bl	8007d4c <lcd_print>
			}
			if(dilSecim == 1) {
 8002d66:	4b96      	ldr	r3, [pc, #600]	; (8002fc0 <menu+0x1ca0>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d104      	bne.n	8002d78 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002d6e:	4a96      	ldr	r2, [pc, #600]	; (8002fc8 <menu+0x1ca8>)
 8002d70:	2101      	movs	r1, #1
 8002d72:	2002      	movs	r0, #2
 8002d74:	f004 ffea 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d78:	2102      	movs	r1, #2
 8002d7a:	4894      	ldr	r0, [pc, #592]	; (8002fcc <menu+0x1cac>)
 8002d7c:	f006 fb0c 	bl	8009398 <HAL_GPIO_ReadPin>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d115      	bne.n	8002db2 <menu+0x1a92>
 8002d86:	4b92      	ldr	r3, [pc, #584]	; (8002fd0 <menu+0x1cb0>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002d94:	4b89      	ldr	r3, [pc, #548]	; (8002fbc <menu+0x1c9c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b87      	ldr	r3, [pc, #540]	; (8002fbc <menu+0x1c9c>)
 8002d9e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002da0:	4b86      	ldr	r3, [pc, #536]	; (8002fbc <menu+0x1c9c>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d902      	bls.n	8002dae <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002da8:	4b84      	ldr	r3, [pc, #528]	; (8002fbc <menu+0x1c9c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dae:	f001 fe97 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002db2:	2104      	movs	r1, #4
 8002db4:	4885      	ldr	r0, [pc, #532]	; (8002fcc <menu+0x1cac>)
 8002db6:	f006 faef 	bl	8009398 <HAL_GPIO_ReadPin>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d115      	bne.n	8002dec <menu+0x1acc>
 8002dc0:	4b83      	ldr	r3, [pc, #524]	; (8002fd0 <menu+0x1cb0>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f083 0301 	eor.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00e      	beq.n	8002dec <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002dce:	4b7b      	ldr	r3, [pc, #492]	; (8002fbc <menu+0x1c9c>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b79      	ldr	r3, [pc, #484]	; (8002fbc <menu+0x1c9c>)
 8002dd8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002dda:	4b78      	ldr	r3, [pc, #480]	; (8002fbc <menu+0x1c9c>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d902      	bls.n	8002de8 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002de2:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <menu+0x1c9c>)
 8002de4:	2202      	movs	r2, #2
 8002de6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002de8:	f001 fe7a 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dec:	2108      	movs	r1, #8
 8002dee:	4877      	ldr	r0, [pc, #476]	; (8002fcc <menu+0x1cac>)
 8002df0:	f006 fad2 	bl	8009398 <HAL_GPIO_ReadPin>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d11d      	bne.n	8002e36 <menu+0x1b16>
 8002dfa:	4b75      	ldr	r3, [pc, #468]	; (8002fd0 <menu+0x1cb0>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	f083 0301 	eor.w	r3, r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d016      	beq.n	8002e36 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e08:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <menu+0x1c9c>)
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	4b71      	ldr	r3, [pc, #452]	; (8002fd4 <menu+0x1cb4>)
 8002e0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002e12:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <menu+0x1c9c>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <menu+0x1b02>
 8002e1a:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <menu+0x1c9c>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d106      	bne.n	8002e30 <menu+0x1b10>
				altLimit = 1;
 8002e22:	4b6d      	ldr	r3, [pc, #436]	; (8002fd8 <menu+0x1cb8>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002e28:	4b6b      	ldr	r3, [pc, #428]	; (8002fd8 <menu+0x1cb8>)
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <menu+0x1cb4>)
 8002e2e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002e30:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <menu+0x1cbc>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002e36:	4b6a      	ldr	r3, [pc, #424]	; (8002fe0 <menu+0x1cc0>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d17f      	bne.n	8002f3e <menu+0x1c1e>
		if(dilSecim == 0) {
 8002e3e:	4b60      	ldr	r3, [pc, #384]	; (8002fc0 <menu+0x1ca0>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002e46:	4a67      	ldr	r2, [pc, #412]	; (8002fe4 <menu+0x1cc4>)
 8002e48:	2101      	movs	r1, #1
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f004 ff7e 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002e50:	4a65      	ldr	r2, [pc, #404]	; (8002fe8 <menu+0x1cc8>)
 8002e52:	2101      	movs	r1, #1
 8002e54:	2002      	movs	r0, #2
 8002e56:	f004 ff79 	bl	8007d4c <lcd_print>
 8002e5a:	e00d      	b.n	8002e78 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002e5c:	4b58      	ldr	r3, [pc, #352]	; (8002fc0 <menu+0x1ca0>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d109      	bne.n	8002e78 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002e64:	4a61      	ldr	r2, [pc, #388]	; (8002fec <menu+0x1ccc>)
 8002e66:	2101      	movs	r1, #1
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f004 ff6f 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002e6e:	4a60      	ldr	r2, [pc, #384]	; (8002ff0 <menu+0x1cd0>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	2002      	movs	r0, #2
 8002e74:	f004 ff6a 	bl	8007d4c <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002e78:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <menu+0x1cd4>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	495e      	ldr	r1, [pc, #376]	; (8002ff8 <menu+0x1cd8>)
 8002e80:	4618      	mov	r0, r3
 8002e82:	f009 fab5 	bl	800c3f0 <itoa>
		lcd_print(2,16,snum);
 8002e86:	4a5c      	ldr	r2, [pc, #368]	; (8002ff8 <menu+0x1cd8>)
 8002e88:	2110      	movs	r1, #16
 8002e8a:	2002      	movs	r0, #2
 8002e8c:	f004 ff5e 	bl	8007d4c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002e90:	2102      	movs	r1, #2
 8002e92:	484e      	ldr	r0, [pc, #312]	; (8002fcc <menu+0x1cac>)
 8002e94:	f006 fa80 	bl	8009398 <HAL_GPIO_ReadPin>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d119      	bne.n	8002ed2 <menu+0x1bb2>
 8002e9e:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <menu+0x1cb0>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f083 0301 	eor.w	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d012      	beq.n	8002ed2 <menu+0x1bb2>
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <menu+0x1cdc>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10e      	bne.n	8002ed2 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <menu+0x1cd4>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <menu+0x1cd4>)
 8002ebe:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <menu+0x1cd4>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d902      	bls.n	8002ece <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <menu+0x1cd4>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ece:	f001 fe07 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ed2:	2104      	movs	r1, #4
 8002ed4:	483d      	ldr	r0, [pc, #244]	; (8002fcc <menu+0x1cac>)
 8002ed6:	f006 fa5f 	bl	8009398 <HAL_GPIO_ReadPin>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d119      	bne.n	8002f14 <menu+0x1bf4>
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <menu+0x1cb0>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	f083 0301 	eor.w	r3, r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <menu+0x1bf4>
 8002eee:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <menu+0x1cdc>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10e      	bne.n	8002f14 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002ef6:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <menu+0x1cd4>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <menu+0x1cd4>)
 8002f00:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002f02:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <menu+0x1cd4>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d902      	bls.n	8002f10 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <menu+0x1cd4>)
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002f10:	f001 fde6 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f14:	2108      	movs	r1, #8
 8002f16:	482d      	ldr	r0, [pc, #180]	; (8002fcc <menu+0x1cac>)
 8002f18:	f006 fa3e 	bl	8009398 <HAL_GPIO_ReadPin>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d10d      	bne.n	8002f3e <menu+0x1c1e>
 8002f22:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <menu+0x1cb0>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	f083 0301 	eor.w	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002f30:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <menu+0x1cd4>)
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <menu+0x1cb4>)
 8002f36:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002f38:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <menu+0x1cbc>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <menu+0x1cc0>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	f040 80bc 	bne.w	80030c0 <menu+0x1da0>
		if(dilSecim == 0) {
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <menu+0x1ca0>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002f50:	4a2b      	ldr	r2, [pc, #172]	; (8003000 <menu+0x1ce0>)
 8002f52:	2101      	movs	r1, #1
 8002f54:	2001      	movs	r0, #1
 8002f56:	f004 fef9 	bl	8007d4c <lcd_print>
 8002f5a:	e008      	b.n	8002f6e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <menu+0x1ca0>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d104      	bne.n	8002f6e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002f64:	4a27      	ldr	r2, [pc, #156]	; (8003004 <menu+0x1ce4>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	2001      	movs	r0, #1
 8002f6a:	f004 feef 	bl	8007d4c <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <menu+0x1ce8>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d113      	bne.n	8002f9e <menu+0x1c7e>
			if(dilSecim == 0) {
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <menu+0x1ca0>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002f7e:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <menu+0x1ca4>)
 8002f80:	2101      	movs	r1, #1
 8002f82:	2002      	movs	r0, #2
 8002f84:	f004 fee2 	bl	8007d4c <lcd_print>
 8002f88:	e04b      	b.n	8003022 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <menu+0x1ca0>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d147      	bne.n	8003022 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002f92:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <menu+0x1ca8>)
 8002f94:	2101      	movs	r1, #1
 8002f96:	2002      	movs	r0, #2
 8002f98:	f004 fed8 	bl	8007d4c <lcd_print>
 8002f9c:	e041      	b.n	8003022 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <menu+0x1ce8>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d13d      	bne.n	8003022 <menu+0x1d02>
			if(dilSecim == 0) {
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <menu+0x1ca0>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d130      	bne.n	8003010 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <menu+0x1cec>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	f004 feca 	bl	8007d4c <lcd_print>
 8002fb8:	e033      	b.n	8003022 <menu+0x1d02>
 8002fba:	bf00      	nop
 8002fbc:	20000235 	.word	0x20000235
 8002fc0:	20000249 	.word	0x20000249
 8002fc4:	0800d3a4 	.word	0x0800d3a4
 8002fc8:	0800d3b8 	.word	0x0800d3b8
 8002fcc:	40010800 	.word	0x40010800
 8002fd0:	20000257 	.word	0x20000257
 8002fd4:	2000012c 	.word	0x2000012c
 8002fd8:	2000022e 	.word	0x2000022e
 8002fdc:	20000254 	.word	0x20000254
 8002fe0:	20000228 	.word	0x20000228
 8002fe4:	0800d744 	.word	0x0800d744
 8002fe8:	0800d608 	.word	0x0800d608
 8002fec:	0800d758 	.word	0x0800d758
 8002ff0:	0800d62c 	.word	0x0800d62c
 8002ff4:	20000243 	.word	0x20000243
 8002ff8:	2000019c 	.word	0x2000019c
 8002ffc:	20000233 	.word	0x20000233
 8003000:	0800d76c 	.word	0x0800d76c
 8003004:	0800d780 	.word	0x0800d780
 8003008:	20000236 	.word	0x20000236
 800300c:	0800d404 	.word	0x0800d404
			} else if(dilSecim == 1) {
 8003010:	4b99      	ldr	r3, [pc, #612]	; (8003278 <menu+0x1f58>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d104      	bne.n	8003022 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003018:	4a98      	ldr	r2, [pc, #608]	; (800327c <menu+0x1f5c>)
 800301a:	2101      	movs	r1, #1
 800301c:	2002      	movs	r0, #2
 800301e:	f004 fe95 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003022:	2102      	movs	r1, #2
 8003024:	4896      	ldr	r0, [pc, #600]	; (8003280 <menu+0x1f60>)
 8003026:	f006 f9b7 	bl	8009398 <HAL_GPIO_ReadPin>
 800302a:	4603      	mov	r3, r0
 800302c:	2b01      	cmp	r3, #1
 800302e:	d115      	bne.n	800305c <menu+0x1d3c>
 8003030:	4b94      	ldr	r3, [pc, #592]	; (8003284 <menu+0x1f64>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 800303e:	4b92      	ldr	r3, [pc, #584]	; (8003288 <menu+0x1f68>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b90      	ldr	r3, [pc, #576]	; (8003288 <menu+0x1f68>)
 8003048:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800304a:	4b8f      	ldr	r3, [pc, #572]	; (8003288 <menu+0x1f68>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d902      	bls.n	8003058 <menu+0x1d38>
				yukariYavasLimit = 0;
 8003052:	4b8d      	ldr	r3, [pc, #564]	; (8003288 <menu+0x1f68>)
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003058:	f001 fd42 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800305c:	2104      	movs	r1, #4
 800305e:	4888      	ldr	r0, [pc, #544]	; (8003280 <menu+0x1f60>)
 8003060:	f006 f99a 	bl	8009398 <HAL_GPIO_ReadPin>
 8003064:	4603      	mov	r3, r0
 8003066:	2b01      	cmp	r3, #1
 8003068:	d115      	bne.n	8003096 <menu+0x1d76>
 800306a:	4b86      	ldr	r3, [pc, #536]	; (8003284 <menu+0x1f64>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	f083 0301 	eor.w	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00e      	beq.n	8003096 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003078:	4b83      	ldr	r3, [pc, #524]	; (8003288 <menu+0x1f68>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	3b01      	subs	r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	4b81      	ldr	r3, [pc, #516]	; (8003288 <menu+0x1f68>)
 8003082:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003084:	4b80      	ldr	r3, [pc, #512]	; (8003288 <menu+0x1f68>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800308c:	4b7e      	ldr	r3, [pc, #504]	; (8003288 <menu+0x1f68>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003092:	f001 fd25 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003096:	2108      	movs	r1, #8
 8003098:	4879      	ldr	r0, [pc, #484]	; (8003280 <menu+0x1f60>)
 800309a:	f006 f97d 	bl	8009398 <HAL_GPIO_ReadPin>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10d      	bne.n	80030c0 <menu+0x1da0>
 80030a4:	4b77      	ldr	r3, [pc, #476]	; (8003284 <menu+0x1f64>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	f083 0301 	eor.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80030b2:	4b75      	ldr	r3, [pc, #468]	; (8003288 <menu+0x1f68>)
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	4b75      	ldr	r3, [pc, #468]	; (800328c <menu+0x1f6c>)
 80030b8:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80030ba:	4b75      	ldr	r3, [pc, #468]	; (8003290 <menu+0x1f70>)
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80030c0:	4b74      	ldr	r3, [pc, #464]	; (8003294 <menu+0x1f74>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b11      	cmp	r3, #17
 80030c6:	f040 80c3 	bne.w	8003250 <menu+0x1f30>
		if(dilSecim == 0) {
 80030ca:	4b6b      	ldr	r3, [pc, #428]	; (8003278 <menu+0x1f58>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80030d2:	4a71      	ldr	r2, [pc, #452]	; (8003298 <menu+0x1f78>)
 80030d4:	2101      	movs	r1, #1
 80030d6:	2001      	movs	r0, #1
 80030d8:	f004 fe38 	bl	8007d4c <lcd_print>
 80030dc:	e008      	b.n	80030f0 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 80030de:	4b66      	ldr	r3, [pc, #408]	; (8003278 <menu+0x1f58>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d104      	bne.n	80030f0 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80030e6:	4a6d      	ldr	r2, [pc, #436]	; (800329c <menu+0x1f7c>)
 80030e8:	2101      	movs	r1, #1
 80030ea:	2001      	movs	r0, #1
 80030ec:	f004 fe2e 	bl	8007d4c <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80030f0:	4b6b      	ldr	r3, [pc, #428]	; (80032a0 <menu+0x1f80>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d113      	bne.n	8003120 <menu+0x1e00>
			if(dilSecim == 0){
 80030f8:	4b5f      	ldr	r3, [pc, #380]	; (8003278 <menu+0x1f58>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003100:	4a68      	ldr	r2, [pc, #416]	; (80032a4 <menu+0x1f84>)
 8003102:	2101      	movs	r1, #1
 8003104:	2002      	movs	r0, #2
 8003106:	f004 fe21 	bl	8007d4c <lcd_print>
 800310a:	e038      	b.n	800317e <menu+0x1e5e>
			} else if(dilSecim == 1){
 800310c:	4b5a      	ldr	r3, [pc, #360]	; (8003278 <menu+0x1f58>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d134      	bne.n	800317e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003114:	4a64      	ldr	r2, [pc, #400]	; (80032a8 <menu+0x1f88>)
 8003116:	2101      	movs	r1, #1
 8003118:	2002      	movs	r0, #2
 800311a:	f004 fe17 	bl	8007d4c <lcd_print>
 800311e:	e02e      	b.n	800317e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003120:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <menu+0x1f80>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d113      	bne.n	8003150 <menu+0x1e30>
			if(dilSecim == 0){
 8003128:	4b53      	ldr	r3, [pc, #332]	; (8003278 <menu+0x1f58>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003130:	4a5e      	ldr	r2, [pc, #376]	; (80032ac <menu+0x1f8c>)
 8003132:	2101      	movs	r1, #1
 8003134:	2002      	movs	r0, #2
 8003136:	f004 fe09 	bl	8007d4c <lcd_print>
 800313a:	e020      	b.n	800317e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800313c:	4b4e      	ldr	r3, [pc, #312]	; (8003278 <menu+0x1f58>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d11c      	bne.n	800317e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003144:	4a5a      	ldr	r2, [pc, #360]	; (80032b0 <menu+0x1f90>)
 8003146:	2101      	movs	r1, #1
 8003148:	2002      	movs	r0, #2
 800314a:	f004 fdff 	bl	8007d4c <lcd_print>
 800314e:	e016      	b.n	800317e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <menu+0x1f80>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d112      	bne.n	800317e <menu+0x1e5e>
			if(dilSecim == 0) {
 8003158:	4b47      	ldr	r3, [pc, #284]	; (8003278 <menu+0x1f58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003160:	4a54      	ldr	r2, [pc, #336]	; (80032b4 <menu+0x1f94>)
 8003162:	2101      	movs	r1, #1
 8003164:	2002      	movs	r0, #2
 8003166:	f004 fdf1 	bl	8007d4c <lcd_print>
 800316a:	e008      	b.n	800317e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800316c:	4b42      	ldr	r3, [pc, #264]	; (8003278 <menu+0x1f58>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d104      	bne.n	800317e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003174:	4a50      	ldr	r2, [pc, #320]	; (80032b8 <menu+0x1f98>)
 8003176:	2101      	movs	r1, #1
 8003178:	2002      	movs	r0, #2
 800317a:	f004 fde7 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800317e:	2102      	movs	r1, #2
 8003180:	483f      	ldr	r0, [pc, #252]	; (8003280 <menu+0x1f60>)
 8003182:	f006 f909 	bl	8009398 <HAL_GPIO_ReadPin>
 8003186:	4603      	mov	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d115      	bne.n	80031b8 <menu+0x1e98>
 800318c:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <menu+0x1f64>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	f083 0301 	eor.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00e      	beq.n	80031b8 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <menu+0x1f80>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <menu+0x1f80>)
 80031a4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80031a6:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <menu+0x1f80>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d902      	bls.n	80031b4 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80031ae:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <menu+0x1f80>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031b4:	f001 fc94 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b8:	2104      	movs	r1, #4
 80031ba:	4831      	ldr	r0, [pc, #196]	; (8003280 <menu+0x1f60>)
 80031bc:	f006 f8ec 	bl	8009398 <HAL_GPIO_ReadPin>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d115      	bne.n	80031f2 <menu+0x1ed2>
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <menu+0x1f64>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00e      	beq.n	80031f2 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <menu+0x1f80>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	3b01      	subs	r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <menu+0x1f80>)
 80031de:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80031e0:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <menu+0x1f80>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d902      	bls.n	80031ee <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80031e8:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <menu+0x1f80>)
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031ee:	f001 fc77 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f2:	2108      	movs	r1, #8
 80031f4:	4822      	ldr	r0, [pc, #136]	; (8003280 <menu+0x1f60>)
 80031f6:	f006 f8cf 	bl	8009398 <HAL_GPIO_ReadPin>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d127      	bne.n	8003250 <menu+0x1f30>
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <menu+0x1f64>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	f083 0301 	eor.w	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d020      	beq.n	8003250 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <menu+0x1f80>)
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <menu+0x1f6c>)
 8003214:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003216:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <menu+0x1f80>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d003      	beq.n	8003226 <menu+0x1f06>
 800321e:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <menu+0x1f80>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d106      	bne.n	8003234 <menu+0x1f14>
				calismaSekli = 0;
 8003226:	4b25      	ldr	r3, [pc, #148]	; (80032bc <menu+0x1f9c>)
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800322c:	4b23      	ldr	r3, [pc, #140]	; (80032bc <menu+0x1f9c>)
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <menu+0x1f6c>)
 8003232:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <menu+0x1f80>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d106      	bne.n	800324a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800323c:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <menu+0x1fa0>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003242:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <menu+0x1fa0>)
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <menu+0x1f6c>)
 8003248:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <menu+0x1f70>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <menu+0x1f74>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b12      	cmp	r3, #18
 8003256:	f040 80d5 	bne.w	8003404 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <menu+0x1f80>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d13c      	bne.n	80032dc <menu+0x1fbc>
			if(dilSecim == 0) {
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <menu+0x1f58>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d12e      	bne.n	80032c8 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800326a:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <menu+0x1fa4>)
 800326c:	2101      	movs	r1, #1
 800326e:	2001      	movs	r0, #1
 8003270:	f004 fd6c 	bl	8007d4c <lcd_print>
 8003274:	e048      	b.n	8003308 <menu+0x1fe8>
 8003276:	bf00      	nop
 8003278:	20000249 	.word	0x20000249
 800327c:	0800d418 	.word	0x0800d418
 8003280:	40010800 	.word	0x40010800
 8003284:	20000257 	.word	0x20000257
 8003288:	20000236 	.word	0x20000236
 800328c:	2000012c 	.word	0x2000012c
 8003290:	20000254 	.word	0x20000254
 8003294:	20000228 	.word	0x20000228
 8003298:	0800d794 	.word	0x0800d794
 800329c:	0800d7a8 	.word	0x0800d7a8
 80032a0:	20000237 	.word	0x20000237
 80032a4:	0800d7bc 	.word	0x0800d7bc
 80032a8:	0800d7cc 	.word	0x0800d7cc
 80032ac:	0800d7dc 	.word	0x0800d7dc
 80032b0:	0800d7ec 	.word	0x0800d7ec
 80032b4:	0800d3a4 	.word	0x0800d3a4
 80032b8:	0800d3b8 	.word	0x0800d3b8
 80032bc:	20000229 	.word	0x20000229
 80032c0:	2000023a 	.word	0x2000023a
 80032c4:	0800d7fc 	.word	0x0800d7fc
			} else if(dilSecim == 1) {
 80032c8:	4b7b      	ldr	r3, [pc, #492]	; (80034b8 <menu+0x2198>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d11b      	bne.n	8003308 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80032d0:	4a7a      	ldr	r2, [pc, #488]	; (80034bc <menu+0x219c>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	2001      	movs	r0, #1
 80032d6:	f004 fd39 	bl	8007d4c <lcd_print>
 80032da:	e015      	b.n	8003308 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032dc:	4b78      	ldr	r3, [pc, #480]	; (80034c0 <menu+0x21a0>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d111      	bne.n	8003308 <menu+0x1fe8>
			if(dilSecim == 0){
 80032e4:	4b74      	ldr	r3, [pc, #464]	; (80034b8 <menu+0x2198>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80032ec:	4a75      	ldr	r2, [pc, #468]	; (80034c4 <menu+0x21a4>)
 80032ee:	2101      	movs	r1, #1
 80032f0:	2001      	movs	r0, #1
 80032f2:	f004 fd2b 	bl	8007d4c <lcd_print>
			}
			if(dilSecim == 1){
 80032f6:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <menu+0x2198>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d104      	bne.n	8003308 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80032fe:	4a72      	ldr	r2, [pc, #456]	; (80034c8 <menu+0x21a8>)
 8003300:	2101      	movs	r1, #1
 8003302:	2001      	movs	r0, #1
 8003304:	f004 fd22 	bl	8007d4c <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003308:	4b70      	ldr	r3, [pc, #448]	; (80034cc <menu+0x21ac>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d113      	bne.n	8003338 <menu+0x2018>
			if(dilSecim == 0) {
 8003310:	4b69      	ldr	r3, [pc, #420]	; (80034b8 <menu+0x2198>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003318:	4a6d      	ldr	r2, [pc, #436]	; (80034d0 <menu+0x21b0>)
 800331a:	2101      	movs	r1, #1
 800331c:	2002      	movs	r0, #2
 800331e:	f004 fd15 	bl	8007d4c <lcd_print>
 8003322:	e020      	b.n	8003366 <menu+0x2046>
			} else if(dilSecim == 1){
 8003324:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <menu+0x2198>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d11c      	bne.n	8003366 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800332c:	4a69      	ldr	r2, [pc, #420]	; (80034d4 <menu+0x21b4>)
 800332e:	2101      	movs	r1, #1
 8003330:	2002      	movs	r0, #2
 8003332:	f004 fd0b 	bl	8007d4c <lcd_print>
 8003336:	e016      	b.n	8003366 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003338:	4b64      	ldr	r3, [pc, #400]	; (80034cc <menu+0x21ac>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d112      	bne.n	8003366 <menu+0x2046>
			if(dilSecim == 0){
 8003340:	4b5d      	ldr	r3, [pc, #372]	; (80034b8 <menu+0x2198>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003348:	4a63      	ldr	r2, [pc, #396]	; (80034d8 <menu+0x21b8>)
 800334a:	2101      	movs	r1, #1
 800334c:	2002      	movs	r0, #2
 800334e:	f004 fcfd 	bl	8007d4c <lcd_print>
 8003352:	e008      	b.n	8003366 <menu+0x2046>
			} else if(dilSecim == 1){
 8003354:	4b58      	ldr	r3, [pc, #352]	; (80034b8 <menu+0x2198>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d104      	bne.n	8003366 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800335c:	4a5f      	ldr	r2, [pc, #380]	; (80034dc <menu+0x21bc>)
 800335e:	2101      	movs	r1, #1
 8003360:	2002      	movs	r0, #2
 8003362:	f004 fcf3 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003366:	2102      	movs	r1, #2
 8003368:	485d      	ldr	r0, [pc, #372]	; (80034e0 <menu+0x21c0>)
 800336a:	f006 f815 	bl	8009398 <HAL_GPIO_ReadPin>
 800336e:	4603      	mov	r3, r0
 8003370:	2b01      	cmp	r3, #1
 8003372:	d115      	bne.n	80033a0 <menu+0x2080>
 8003374:	4b5b      	ldr	r3, [pc, #364]	; (80034e4 <menu+0x21c4>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	f083 0301 	eor.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00e      	beq.n	80033a0 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003382:	4b52      	ldr	r3, [pc, #328]	; (80034cc <menu+0x21ac>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b50      	ldr	r3, [pc, #320]	; (80034cc <menu+0x21ac>)
 800338c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800338e:	4b4f      	ldr	r3, [pc, #316]	; (80034cc <menu+0x21ac>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d902      	bls.n	800339c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003396:	4b4d      	ldr	r3, [pc, #308]	; (80034cc <menu+0x21ac>)
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800339c:	f001 fba0 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033a0:	2104      	movs	r1, #4
 80033a2:	484f      	ldr	r0, [pc, #316]	; (80034e0 <menu+0x21c0>)
 80033a4:	f005 fff8 	bl	8009398 <HAL_GPIO_ReadPin>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d115      	bne.n	80033da <menu+0x20ba>
 80033ae:	4b4d      	ldr	r3, [pc, #308]	; (80034e4 <menu+0x21c4>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	f083 0301 	eor.w	r3, r3, #1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00e      	beq.n	80033da <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80033bc:	4b43      	ldr	r3, [pc, #268]	; (80034cc <menu+0x21ac>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	4b41      	ldr	r3, [pc, #260]	; (80034cc <menu+0x21ac>)
 80033c6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80033c8:	4b40      	ldr	r3, [pc, #256]	; (80034cc <menu+0x21ac>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80033d0:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <menu+0x21ac>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033d6:	f001 fb83 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033da:	2108      	movs	r1, #8
 80033dc:	4840      	ldr	r0, [pc, #256]	; (80034e0 <menu+0x21c0>)
 80033de:	f005 ffdb 	bl	8009398 <HAL_GPIO_ReadPin>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10d      	bne.n	8003404 <menu+0x20e4>
 80033e8:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <menu+0x21c4>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	f083 0301 	eor.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80033f6:	4b35      	ldr	r3, [pc, #212]	; (80034cc <menu+0x21ac>)
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <menu+0x21c8>)
 80033fc:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <menu+0x21cc>)
 8003400:	2201      	movs	r2, #1
 8003402:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003404:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <menu+0x21d0>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b13      	cmp	r3, #19
 800340a:	f040 80d5 	bne.w	80035b8 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800340e:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <menu+0x21a0>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d113      	bne.n	800343e <menu+0x211e>
			if(dilSecim == 0) {
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <menu+0x2198>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d105      	bne.n	800342a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800341e:	4a35      	ldr	r2, [pc, #212]	; (80034f4 <menu+0x21d4>)
 8003420:	2101      	movs	r1, #1
 8003422:	2001      	movs	r0, #1
 8003424:	f004 fc92 	bl	8007d4c <lcd_print>
 8003428:	e01f      	b.n	800346a <menu+0x214a>
			} else if(dilSecim == 1) {
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <menu+0x2198>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d11b      	bne.n	800346a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003432:	4a31      	ldr	r2, [pc, #196]	; (80034f8 <menu+0x21d8>)
 8003434:	2101      	movs	r1, #1
 8003436:	2001      	movs	r0, #1
 8003438:	f004 fc88 	bl	8007d4c <lcd_print>
 800343c:	e015      	b.n	800346a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <menu+0x21a0>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d111      	bne.n	800346a <menu+0x214a>
			if(dilSecim == 0) {
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <menu+0x2198>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d104      	bne.n	8003458 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800344e:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <menu+0x21dc>)
 8003450:	2101      	movs	r1, #1
 8003452:	2001      	movs	r0, #1
 8003454:	f004 fc7a 	bl	8007d4c <lcd_print>
			}
			if(dilSecim == 1) {
 8003458:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <menu+0x2198>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d104      	bne.n	800346a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003460:	4a27      	ldr	r2, [pc, #156]	; (8003500 <menu+0x21e0>)
 8003462:	2101      	movs	r1, #1
 8003464:	2001      	movs	r0, #1
 8003466:	f004 fc71 	bl	8007d4c <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800346a:	4b26      	ldr	r3, [pc, #152]	; (8003504 <menu+0x21e4>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d113      	bne.n	800349a <menu+0x217a>
			if(dilSecim == 0) {
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <menu+0x2198>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800347a:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <menu+0x21b0>)
 800347c:	2101      	movs	r1, #1
 800347e:	2002      	movs	r0, #2
 8003480:	f004 fc64 	bl	8007d4c <lcd_print>
 8003484:	e049      	b.n	800351a <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003486:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <menu+0x2198>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d145      	bne.n	800351a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800348e:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <menu+0x21b4>)
 8003490:	2101      	movs	r1, #1
 8003492:	2002      	movs	r0, #2
 8003494:	f004 fc5a 	bl	8007d4c <lcd_print>
 8003498:	e03f      	b.n	800351a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <menu+0x21e4>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d13b      	bne.n	800351a <menu+0x21fa>
			if(dilSecim == 0) {
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <menu+0x2198>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d12e      	bne.n	8003508 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80034aa:	4a0b      	ldr	r2, [pc, #44]	; (80034d8 <menu+0x21b8>)
 80034ac:	2101      	movs	r1, #1
 80034ae:	2002      	movs	r0, #2
 80034b0:	f004 fc4c 	bl	8007d4c <lcd_print>
 80034b4:	e031      	b.n	800351a <menu+0x21fa>
 80034b6:	bf00      	nop
 80034b8:	20000249 	.word	0x20000249
 80034bc:	0800d810 	.word	0x0800d810
 80034c0:	20000237 	.word	0x20000237
 80034c4:	0800d820 	.word	0x0800d820
 80034c8:	0800d834 	.word	0x0800d834
 80034cc:	20000238 	.word	0x20000238
 80034d0:	0800d3a4 	.word	0x0800d3a4
 80034d4:	0800d3b8 	.word	0x0800d3b8
 80034d8:	0800d404 	.word	0x0800d404
 80034dc:	0800d418 	.word	0x0800d418
 80034e0:	40010800 	.word	0x40010800
 80034e4:	20000257 	.word	0x20000257
 80034e8:	2000012c 	.word	0x2000012c
 80034ec:	20000254 	.word	0x20000254
 80034f0:	20000228 	.word	0x20000228
 80034f4:	0800d848 	.word	0x0800d848
 80034f8:	0800d85c 	.word	0x0800d85c
 80034fc:	0800d870 	.word	0x0800d870
 8003500:	0800d884 	.word	0x0800d884
 8003504:	20000239 	.word	0x20000239
			} else if(dilSecim == 1) {
 8003508:	4b90      	ldr	r3, [pc, #576]	; (800374c <menu+0x242c>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d104      	bne.n	800351a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003510:	4a8f      	ldr	r2, [pc, #572]	; (8003750 <menu+0x2430>)
 8003512:	2101      	movs	r1, #1
 8003514:	2002      	movs	r0, #2
 8003516:	f004 fc19 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800351a:	2102      	movs	r1, #2
 800351c:	488d      	ldr	r0, [pc, #564]	; (8003754 <menu+0x2434>)
 800351e:	f005 ff3b 	bl	8009398 <HAL_GPIO_ReadPin>
 8003522:	4603      	mov	r3, r0
 8003524:	2b01      	cmp	r3, #1
 8003526:	d115      	bne.n	8003554 <menu+0x2234>
 8003528:	4b8b      	ldr	r3, [pc, #556]	; (8003758 <menu+0x2438>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	f083 0301 	eor.w	r3, r3, #1
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00e      	beq.n	8003554 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003536:	4b89      	ldr	r3, [pc, #548]	; (800375c <menu+0x243c>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b87      	ldr	r3, [pc, #540]	; (800375c <menu+0x243c>)
 8003540:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003542:	4b86      	ldr	r3, [pc, #536]	; (800375c <menu+0x243c>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d902      	bls.n	8003550 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800354a:	4b84      	ldr	r3, [pc, #528]	; (800375c <menu+0x243c>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003550:	f001 fac6 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003554:	2104      	movs	r1, #4
 8003556:	487f      	ldr	r0, [pc, #508]	; (8003754 <menu+0x2434>)
 8003558:	f005 ff1e 	bl	8009398 <HAL_GPIO_ReadPin>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d115      	bne.n	800358e <menu+0x226e>
 8003562:	4b7d      	ldr	r3, [pc, #500]	; (8003758 <menu+0x2438>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	f083 0301 	eor.w	r3, r3, #1
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003570:	4b7a      	ldr	r3, [pc, #488]	; (800375c <menu+0x243c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	3b01      	subs	r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b78      	ldr	r3, [pc, #480]	; (800375c <menu+0x243c>)
 800357a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800357c:	4b77      	ldr	r3, [pc, #476]	; (800375c <menu+0x243c>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003584:	4b75      	ldr	r3, [pc, #468]	; (800375c <menu+0x243c>)
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800358a:	f001 faa9 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800358e:	2108      	movs	r1, #8
 8003590:	4870      	ldr	r0, [pc, #448]	; (8003754 <menu+0x2434>)
 8003592:	f005 ff01 	bl	8009398 <HAL_GPIO_ReadPin>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10d      	bne.n	80035b8 <menu+0x2298>
 800359c:	4b6e      	ldr	r3, [pc, #440]	; (8003758 <menu+0x2438>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	f083 0301 	eor.w	r3, r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80035aa:	4b6c      	ldr	r3, [pc, #432]	; (800375c <menu+0x243c>)
 80035ac:	781a      	ldrb	r2, [r3, #0]
 80035ae:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <menu+0x2440>)
 80035b0:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80035b2:	4b6c      	ldr	r3, [pc, #432]	; (8003764 <menu+0x2444>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80035b8:	4b6b      	ldr	r3, [pc, #428]	; (8003768 <menu+0x2448>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b14      	cmp	r3, #20
 80035be:	f040 80b5 	bne.w	800372c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80035c2:	4b6a      	ldr	r3, [pc, #424]	; (800376c <menu+0x244c>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d113      	bne.n	80035f2 <menu+0x22d2>
			if(dilSecim == 0) {
 80035ca:	4b60      	ldr	r3, [pc, #384]	; (800374c <menu+0x242c>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d105      	bne.n	80035de <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80035d2:	4a67      	ldr	r2, [pc, #412]	; (8003770 <menu+0x2450>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	2001      	movs	r0, #1
 80035d8:	f004 fbb8 	bl	8007d4c <lcd_print>
 80035dc:	e020      	b.n	8003620 <menu+0x2300>
			} else if(dilSecim == 1) {
 80035de:	4b5b      	ldr	r3, [pc, #364]	; (800374c <menu+0x242c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d11c      	bne.n	8003620 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80035e6:	4a63      	ldr	r2, [pc, #396]	; (8003774 <menu+0x2454>)
 80035e8:	2101      	movs	r1, #1
 80035ea:	2001      	movs	r0, #1
 80035ec:	f004 fbae 	bl	8007d4c <lcd_print>
 80035f0:	e016      	b.n	8003620 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80035f2:	4b5e      	ldr	r3, [pc, #376]	; (800376c <menu+0x244c>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d112      	bne.n	8003620 <menu+0x2300>
			if(dilSecim == 0) {
 80035fa:	4b54      	ldr	r3, [pc, #336]	; (800374c <menu+0x242c>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003602:	4a5d      	ldr	r2, [pc, #372]	; (8003778 <menu+0x2458>)
 8003604:	2101      	movs	r1, #1
 8003606:	2001      	movs	r0, #1
 8003608:	f004 fba0 	bl	8007d4c <lcd_print>
 800360c:	e008      	b.n	8003620 <menu+0x2300>
			} else if(dilSecim == 1) {
 800360e:	4b4f      	ldr	r3, [pc, #316]	; (800374c <menu+0x242c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d104      	bne.n	8003620 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003616:	4a59      	ldr	r2, [pc, #356]	; (800377c <menu+0x245c>)
 8003618:	2101      	movs	r1, #1
 800361a:	2001      	movs	r0, #1
 800361c:	f004 fb96 	bl	8007d4c <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003620:	4b57      	ldr	r3, [pc, #348]	; (8003780 <menu+0x2460>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d113      	bne.n	8003650 <menu+0x2330>
			if(dilSecim == 0) {
 8003628:	4b48      	ldr	r3, [pc, #288]	; (800374c <menu+0x242c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d105      	bne.n	800363c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003630:	4a54      	ldr	r2, [pc, #336]	; (8003784 <menu+0x2464>)
 8003632:	2101      	movs	r1, #1
 8003634:	2002      	movs	r0, #2
 8003636:	f004 fb89 	bl	8007d4c <lcd_print>
 800363a:	e020      	b.n	800367e <menu+0x235e>
			} else if(dilSecim == 1) {
 800363c:	4b43      	ldr	r3, [pc, #268]	; (800374c <menu+0x242c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d11c      	bne.n	800367e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003644:	4a50      	ldr	r2, [pc, #320]	; (8003788 <menu+0x2468>)
 8003646:	2101      	movs	r1, #1
 8003648:	2002      	movs	r0, #2
 800364a:	f004 fb7f 	bl	8007d4c <lcd_print>
 800364e:	e016      	b.n	800367e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003650:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <menu+0x2460>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d112      	bne.n	800367e <menu+0x235e>
			if(dilSecim == 0) {
 8003658:	4b3c      	ldr	r3, [pc, #240]	; (800374c <menu+0x242c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003660:	4a4a      	ldr	r2, [pc, #296]	; (800378c <menu+0x246c>)
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f004 fb71 	bl	8007d4c <lcd_print>
 800366a:	e008      	b.n	800367e <menu+0x235e>
			} else if(dilSecim == 1) {
 800366c:	4b37      	ldr	r3, [pc, #220]	; (800374c <menu+0x242c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d104      	bne.n	800367e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003674:	4a46      	ldr	r2, [pc, #280]	; (8003790 <menu+0x2470>)
 8003676:	2101      	movs	r1, #1
 8003678:	2002      	movs	r0, #2
 800367a:	f004 fb67 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800367e:	2102      	movs	r1, #2
 8003680:	4834      	ldr	r0, [pc, #208]	; (8003754 <menu+0x2434>)
 8003682:	f005 fe89 	bl	8009398 <HAL_GPIO_ReadPin>
 8003686:	4603      	mov	r3, r0
 8003688:	2b01      	cmp	r3, #1
 800368a:	d119      	bne.n	80036c0 <menu+0x23a0>
 800368c:	4b32      	ldr	r3, [pc, #200]	; (8003758 <menu+0x2438>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	f083 0301 	eor.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d012      	beq.n	80036c0 <menu+0x23a0>
 800369a:	4b34      	ldr	r3, [pc, #208]	; (800376c <menu+0x244c>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d10e      	bne.n	80036c0 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80036a2:	4b37      	ldr	r3, [pc, #220]	; (8003780 <menu+0x2460>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b35      	ldr	r3, [pc, #212]	; (8003780 <menu+0x2460>)
 80036ac:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <menu+0x2460>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d902      	bls.n	80036bc <menu+0x239c>
				devirmeSilindirTipi = 0;
 80036b6:	4b32      	ldr	r3, [pc, #200]	; (8003780 <menu+0x2460>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036bc:	f001 fa10 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80036c0:	2104      	movs	r1, #4
 80036c2:	4824      	ldr	r0, [pc, #144]	; (8003754 <menu+0x2434>)
 80036c4:	f005 fe68 	bl	8009398 <HAL_GPIO_ReadPin>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d119      	bne.n	8003702 <menu+0x23e2>
 80036ce:	4b22      	ldr	r3, [pc, #136]	; (8003758 <menu+0x2438>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	f083 0301 	eor.w	r3, r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d012      	beq.n	8003702 <menu+0x23e2>
 80036dc:	4b23      	ldr	r3, [pc, #140]	; (800376c <menu+0x244c>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d10e      	bne.n	8003702 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80036e4:	4b26      	ldr	r3, [pc, #152]	; (8003780 <menu+0x2460>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <menu+0x2460>)
 80036ee:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <menu+0x2460>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80036f8:	4b21      	ldr	r3, [pc, #132]	; (8003780 <menu+0x2460>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036fe:	f001 f9ef 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003702:	2108      	movs	r1, #8
 8003704:	4813      	ldr	r0, [pc, #76]	; (8003754 <menu+0x2434>)
 8003706:	f005 fe47 	bl	8009398 <HAL_GPIO_ReadPin>
 800370a:	4603      	mov	r3, r0
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10d      	bne.n	800372c <menu+0x240c>
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <menu+0x2438>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	f083 0301 	eor.w	r3, r3, #1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d006      	beq.n	800372c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <menu+0x2460>)
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <menu+0x2440>)
 8003724:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <menu+0x2444>)
 8003728:	2201      	movs	r2, #1
 800372a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <menu+0x2448>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b15      	cmp	r3, #21
 8003732:	f040 80c2 	bne.w	80038ba <menu+0x259a>
		if(dilSecim == 0) {
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <menu+0x242c>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d12c      	bne.n	8003798 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <menu+0x2474>)
 8003740:	2101      	movs	r1, #1
 8003742:	2001      	movs	r0, #1
 8003744:	f004 fb02 	bl	8007d4c <lcd_print>
 8003748:	e02f      	b.n	80037aa <menu+0x248a>
 800374a:	bf00      	nop
 800374c:	20000249 	.word	0x20000249
 8003750:	0800d418 	.word	0x0800d418
 8003754:	40010800 	.word	0x40010800
 8003758:	20000257 	.word	0x20000257
 800375c:	20000239 	.word	0x20000239
 8003760:	2000012c 	.word	0x2000012c
 8003764:	20000254 	.word	0x20000254
 8003768:	20000228 	.word	0x20000228
 800376c:	20000237 	.word	0x20000237
 8003770:	0800d898 	.word	0x0800d898
 8003774:	0800d8ac 	.word	0x0800d8ac
 8003778:	0800d8c0 	.word	0x0800d8c0
 800377c:	0800d8d4 	.word	0x0800d8d4
 8003780:	2000023a 	.word	0x2000023a
 8003784:	0800d8e8 	.word	0x0800d8e8
 8003788:	0800d8fc 	.word	0x0800d8fc
 800378c:	0800d90c 	.word	0x0800d90c
 8003790:	0800d920 	.word	0x0800d920
 8003794:	0800d930 	.word	0x0800d930
		} else if(dilSecim == 1) {
 8003798:	4b9c      	ldr	r3, [pc, #624]	; (8003a0c <menu+0x26ec>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d104      	bne.n	80037aa <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80037a0:	4a9b      	ldr	r2, [pc, #620]	; (8003a10 <menu+0x26f0>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	2001      	movs	r0, #1
 80037a6:	f004 fad1 	bl	8007d4c <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80037aa:	4b9a      	ldr	r3, [pc, #616]	; (8003a14 <menu+0x26f4>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d112      	bne.n	80037d8 <menu+0x24b8>
			if(dilSecim == 0) {
 80037b2:	4b96      	ldr	r3, [pc, #600]	; (8003a0c <menu+0x26ec>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80037ba:	4a97      	ldr	r2, [pc, #604]	; (8003a18 <menu+0x26f8>)
 80037bc:	2101      	movs	r1, #1
 80037be:	2002      	movs	r0, #2
 80037c0:	f004 fac4 	bl	8007d4c <lcd_print>
			}
			if(dilSecim == 1) {
 80037c4:	4b91      	ldr	r3, [pc, #580]	; (8003a0c <menu+0x26ec>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d11c      	bne.n	8003806 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80037cc:	4a93      	ldr	r2, [pc, #588]	; (8003a1c <menu+0x26fc>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	2002      	movs	r0, #2
 80037d2:	f004 fabb 	bl	8007d4c <lcd_print>
 80037d6:	e016      	b.n	8003806 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80037d8:	4b8e      	ldr	r3, [pc, #568]	; (8003a14 <menu+0x26f4>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d112      	bne.n	8003806 <menu+0x24e6>
			if(dilSecim == 0) {
 80037e0:	4b8a      	ldr	r3, [pc, #552]	; (8003a0c <menu+0x26ec>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80037e8:	4a8d      	ldr	r2, [pc, #564]	; (8003a20 <menu+0x2700>)
 80037ea:	2101      	movs	r1, #1
 80037ec:	2002      	movs	r0, #2
 80037ee:	f004 faad 	bl	8007d4c <lcd_print>
 80037f2:	e008      	b.n	8003806 <menu+0x24e6>
			} else if(dilSecim == 1) {
 80037f4:	4b85      	ldr	r3, [pc, #532]	; (8003a0c <menu+0x26ec>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d104      	bne.n	8003806 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80037fc:	4a89      	ldr	r2, [pc, #548]	; (8003a24 <menu+0x2704>)
 80037fe:	2101      	movs	r1, #1
 8003800:	2002      	movs	r0, #2
 8003802:	f004 faa3 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003806:	2102      	movs	r1, #2
 8003808:	4887      	ldr	r0, [pc, #540]	; (8003a28 <menu+0x2708>)
 800380a:	f005 fdc5 	bl	8009398 <HAL_GPIO_ReadPin>
 800380e:	4603      	mov	r3, r0
 8003810:	2b01      	cmp	r3, #1
 8003812:	d115      	bne.n	8003840 <menu+0x2520>
 8003814:	4b85      	ldr	r3, [pc, #532]	; (8003a2c <menu+0x270c>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	f083 0301 	eor.w	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00e      	beq.n	8003840 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003822:	4b7c      	ldr	r3, [pc, #496]	; (8003a14 <menu+0x26f4>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	3301      	adds	r3, #1
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4b7a      	ldr	r3, [pc, #488]	; (8003a14 <menu+0x26f4>)
 800382c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800382e:	4b79      	ldr	r3, [pc, #484]	; (8003a14 <menu+0x26f4>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d902      	bls.n	800383c <menu+0x251c>
				platformSilindirTipi = 0;
 8003836:	4b77      	ldr	r3, [pc, #476]	; (8003a14 <menu+0x26f4>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800383c:	f001 f950 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003840:	2104      	movs	r1, #4
 8003842:	4879      	ldr	r0, [pc, #484]	; (8003a28 <menu+0x2708>)
 8003844:	f005 fda8 	bl	8009398 <HAL_GPIO_ReadPin>
 8003848:	4603      	mov	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	d115      	bne.n	800387a <menu+0x255a>
 800384e:	4b77      	ldr	r3, [pc, #476]	; (8003a2c <menu+0x270c>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	f083 0301 	eor.w	r3, r3, #1
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00e      	beq.n	800387a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 800385c:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <menu+0x26f4>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b6b      	ldr	r3, [pc, #428]	; (8003a14 <menu+0x26f4>)
 8003866:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <menu+0x26f4>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003870:	4b68      	ldr	r3, [pc, #416]	; (8003a14 <menu+0x26f4>)
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003876:	f001 f933 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800387a:	2108      	movs	r1, #8
 800387c:	486a      	ldr	r0, [pc, #424]	; (8003a28 <menu+0x2708>)
 800387e:	f005 fd8b 	bl	8009398 <HAL_GPIO_ReadPin>
 8003882:	4603      	mov	r3, r0
 8003884:	2b01      	cmp	r3, #1
 8003886:	d118      	bne.n	80038ba <menu+0x259a>
 8003888:	4b68      	ldr	r3, [pc, #416]	; (8003a2c <menu+0x270c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	f083 0301 	eor.w	r3, r3, #1
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d011      	beq.n	80038ba <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003896:	4b5f      	ldr	r3, [pc, #380]	; (8003a14 <menu+0x26f4>)
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <menu+0x2710>)
 800389c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800389e:	4b5d      	ldr	r3, [pc, #372]	; (8003a14 <menu+0x26f4>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d106      	bne.n	80038b4 <menu+0x2594>
				altLimit = 1;
 80038a6:	4b63      	ldr	r3, [pc, #396]	; (8003a34 <menu+0x2714>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80038ac:	4b61      	ldr	r3, [pc, #388]	; (8003a34 <menu+0x2714>)
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	4b5f      	ldr	r3, [pc, #380]	; (8003a30 <menu+0x2710>)
 80038b2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80038b4:	4b60      	ldr	r3, [pc, #384]	; (8003a38 <menu+0x2718>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80038ba:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <menu+0x271c>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b16      	cmp	r3, #22
 80038c0:	f040 8081 	bne.w	80039c6 <menu+0x26a6>
		if(dilSecim == 0) {
 80038c4:	4b51      	ldr	r3, [pc, #324]	; (8003a0c <menu+0x26ec>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80038cc:	4a5c      	ldr	r2, [pc, #368]	; (8003a40 <menu+0x2720>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	2001      	movs	r0, #1
 80038d2:	f004 fa3b 	bl	8007d4c <lcd_print>
 80038d6:	e008      	b.n	80038ea <menu+0x25ca>
		} else if(dilSecim == 1) {
 80038d8:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <menu+0x26ec>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d104      	bne.n	80038ea <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80038e0:	4a58      	ldr	r2, [pc, #352]	; (8003a44 <menu+0x2724>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	2001      	movs	r0, #1
 80038e6:	f004 fa31 	bl	8007d4c <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80038ea:	4b48      	ldr	r3, [pc, #288]	; (8003a0c <menu+0x26ec>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80038f2:	4a55      	ldr	r2, [pc, #340]	; (8003a48 <menu+0x2728>)
 80038f4:	2101      	movs	r1, #1
 80038f6:	2002      	movs	r0, #2
 80038f8:	f004 fa28 	bl	8007d4c <lcd_print>
 80038fc:	e008      	b.n	8003910 <menu+0x25f0>
			} else if(dilSecim == 1){
 80038fe:	4b43      	ldr	r3, [pc, #268]	; (8003a0c <menu+0x26ec>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d104      	bne.n	8003910 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003906:	4a51      	ldr	r2, [pc, #324]	; (8003a4c <menu+0x272c>)
 8003908:	2101      	movs	r1, #1
 800390a:	2002      	movs	r0, #2
 800390c:	f004 fa1e 	bl	8007d4c <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003910:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <menu+0x2730>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	220a      	movs	r2, #10
 8003916:	494f      	ldr	r1, [pc, #316]	; (8003a54 <menu+0x2734>)
 8003918:	4618      	mov	r0, r3
 800391a:	f008 fd69 	bl	800c3f0 <itoa>
		lcd_print(2,16,snum);
 800391e:	4a4d      	ldr	r2, [pc, #308]	; (8003a54 <menu+0x2734>)
 8003920:	2110      	movs	r1, #16
 8003922:	2002      	movs	r0, #2
 8003924:	f004 fa12 	bl	8007d4c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003928:	2102      	movs	r1, #2
 800392a:	483f      	ldr	r0, [pc, #252]	; (8003a28 <menu+0x2708>)
 800392c:	f005 fd34 	bl	8009398 <HAL_GPIO_ReadPin>
 8003930:	4603      	mov	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d115      	bne.n	8003962 <menu+0x2642>
 8003936:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <menu+0x270c>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	f083 0301 	eor.w	r3, r3, #1
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003944:	4b42      	ldr	r3, [pc, #264]	; (8003a50 <menu+0x2730>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	3301      	adds	r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <menu+0x2730>)
 800394e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003950:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <menu+0x2730>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d902      	bls.n	800395e <menu+0x263e>
				yukariValfTmr = 0;
 8003958:	4b3d      	ldr	r3, [pc, #244]	; (8003a50 <menu+0x2730>)
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800395e:	f001 f8bf 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003962:	2104      	movs	r1, #4
 8003964:	4830      	ldr	r0, [pc, #192]	; (8003a28 <menu+0x2708>)
 8003966:	f005 fd17 	bl	8009398 <HAL_GPIO_ReadPin>
 800396a:	4603      	mov	r3, r0
 800396c:	2b01      	cmp	r3, #1
 800396e:	d115      	bne.n	800399c <menu+0x267c>
 8003970:	4b2e      	ldr	r3, [pc, #184]	; (8003a2c <menu+0x270c>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	f083 0301 	eor.w	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800397e:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <menu+0x2730>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <menu+0x2730>)
 8003988:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800398a:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <menu+0x2730>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b06      	cmp	r3, #6
 8003990:	d902      	bls.n	8003998 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003992:	4b2f      	ldr	r3, [pc, #188]	; (8003a50 <menu+0x2730>)
 8003994:	2205      	movs	r2, #5
 8003996:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003998:	f001 f8a2 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800399c:	2108      	movs	r1, #8
 800399e:	4822      	ldr	r0, [pc, #136]	; (8003a28 <menu+0x2708>)
 80039a0:	f005 fcfa 	bl	8009398 <HAL_GPIO_ReadPin>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d10d      	bne.n	80039c6 <menu+0x26a6>
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <menu+0x270c>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	f083 0301 	eor.w	r3, r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d006      	beq.n	80039c6 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <menu+0x2730>)
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <menu+0x2710>)
 80039be:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <menu+0x2718>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <menu+0x271c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b17      	cmp	r3, #23
 80039cc:	f040 80ac 	bne.w	8003b28 <menu+0x2808>
		if(dilSecim == 0) {
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <menu+0x26ec>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80039d8:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <menu+0x2738>)
 80039da:	2101      	movs	r1, #1
 80039dc:	2001      	movs	r0, #1
 80039de:	f004 f9b5 	bl	8007d4c <lcd_print>
 80039e2:	e008      	b.n	80039f6 <menu+0x26d6>
		} else if(dilSecim == 1) {
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <menu+0x26ec>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d104      	bne.n	80039f6 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <menu+0x273c>)
 80039ee:	2101      	movs	r1, #1
 80039f0:	2001      	movs	r0, #1
 80039f2:	f004 f9ab 	bl	8007d4c <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <menu+0x26ec>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d130      	bne.n	8003a60 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <menu+0x2728>)
 8003a00:	2101      	movs	r1, #1
 8003a02:	2002      	movs	r0, #2
 8003a04:	f004 f9a2 	bl	8007d4c <lcd_print>
 8003a08:	e033      	b.n	8003a72 <menu+0x2752>
 8003a0a:	bf00      	nop
 8003a0c:	20000249 	.word	0x20000249
 8003a10:	0800d944 	.word	0x0800d944
 8003a14:	2000023b 	.word	0x2000023b
 8003a18:	0800d8e8 	.word	0x0800d8e8
 8003a1c:	0800d8fc 	.word	0x0800d8fc
 8003a20:	0800d90c 	.word	0x0800d90c
 8003a24:	0800d920 	.word	0x0800d920
 8003a28:	40010800 	.word	0x40010800
 8003a2c:	20000257 	.word	0x20000257
 8003a30:	2000012c 	.word	0x2000012c
 8003a34:	2000022e 	.word	0x2000022e
 8003a38:	20000254 	.word	0x20000254
 8003a3c:	20000228 	.word	0x20000228
 8003a40:	0800d954 	.word	0x0800d954
 8003a44:	0800d968 	.word	0x0800d968
 8003a48:	0800d608 	.word	0x0800d608
 8003a4c:	0800d97c 	.word	0x0800d97c
 8003a50:	2000023c 	.word	0x2000023c
 8003a54:	2000019c 	.word	0x2000019c
 8003a58:	0800d98c 	.word	0x0800d98c
 8003a5c:	0800d9a0 	.word	0x0800d9a0
			} else if(dilSecim == 1) {
 8003a60:	4b98      	ldr	r3, [pc, #608]	; (8003cc4 <menu+0x29a4>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d104      	bne.n	8003a72 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003a68:	4a97      	ldr	r2, [pc, #604]	; (8003cc8 <menu+0x29a8>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2002      	movs	r0, #2
 8003a6e:	f004 f96d 	bl	8007d4c <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003a72:	4b96      	ldr	r3, [pc, #600]	; (8003ccc <menu+0x29ac>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	220a      	movs	r2, #10
 8003a78:	4995      	ldr	r1, [pc, #596]	; (8003cd0 <menu+0x29b0>)
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f008 fcb8 	bl	800c3f0 <itoa>
		lcd_print(2,16,snum);
 8003a80:	4a93      	ldr	r2, [pc, #588]	; (8003cd0 <menu+0x29b0>)
 8003a82:	2110      	movs	r1, #16
 8003a84:	2002      	movs	r0, #2
 8003a86:	f004 f961 	bl	8007d4c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4891      	ldr	r0, [pc, #580]	; (8003cd4 <menu+0x29b4>)
 8003a8e:	f005 fc83 	bl	8009398 <HAL_GPIO_ReadPin>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d115      	bne.n	8003ac4 <menu+0x27a4>
 8003a98:	4b8f      	ldr	r3, [pc, #572]	; (8003cd8 <menu+0x29b8>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	f083 0301 	eor.w	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00e      	beq.n	8003ac4 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003aa6:	4b89      	ldr	r3, [pc, #548]	; (8003ccc <menu+0x29ac>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4b87      	ldr	r3, [pc, #540]	; (8003ccc <menu+0x29ac>)
 8003ab0:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003ab2:	4b86      	ldr	r3, [pc, #536]	; (8003ccc <menu+0x29ac>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d902      	bls.n	8003ac0 <menu+0x27a0>
				asagiValfTmr = 0;
 8003aba:	4b84      	ldr	r3, [pc, #528]	; (8003ccc <menu+0x29ac>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ac0:	f001 f80e 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	4883      	ldr	r0, [pc, #524]	; (8003cd4 <menu+0x29b4>)
 8003ac8:	f005 fc66 	bl	8009398 <HAL_GPIO_ReadPin>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d115      	bne.n	8003afe <menu+0x27de>
 8003ad2:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <menu+0x29b8>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	f083 0301 	eor.w	r3, r3, #1
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003ae0:	4b7a      	ldr	r3, [pc, #488]	; (8003ccc <menu+0x29ac>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	4b78      	ldr	r3, [pc, #480]	; (8003ccc <menu+0x29ac>)
 8003aea:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003aec:	4b77      	ldr	r3, [pc, #476]	; (8003ccc <menu+0x29ac>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b06      	cmp	r3, #6
 8003af2:	d902      	bls.n	8003afa <menu+0x27da>
		   		asagiValfTmr = 5;
 8003af4:	4b75      	ldr	r3, [pc, #468]	; (8003ccc <menu+0x29ac>)
 8003af6:	2205      	movs	r2, #5
 8003af8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003afa:	f000 fff1 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003afe:	2108      	movs	r1, #8
 8003b00:	4874      	ldr	r0, [pc, #464]	; (8003cd4 <menu+0x29b4>)
 8003b02:	f005 fc49 	bl	8009398 <HAL_GPIO_ReadPin>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10d      	bne.n	8003b28 <menu+0x2808>
 8003b0c:	4b72      	ldr	r3, [pc, #456]	; (8003cd8 <menu+0x29b8>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	f083 0301 	eor.w	r3, r3, #1
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003b1a:	4b6c      	ldr	r3, [pc, #432]	; (8003ccc <menu+0x29ac>)
 8003b1c:	781a      	ldrb	r2, [r3, #0]
 8003b1e:	4b6f      	ldr	r3, [pc, #444]	; (8003cdc <menu+0x29bc>)
 8003b20:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003b22:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <menu+0x29c0>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003b28:	4b6e      	ldr	r3, [pc, #440]	; (8003ce4 <menu+0x29c4>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b18      	cmp	r3, #24
 8003b2e:	f040 809d 	bne.w	8003c6c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003b32:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <menu+0x29c8>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d113      	bne.n	8003b62 <menu+0x2842>
			if(dilSecim == 0) {
 8003b3a:	4b62      	ldr	r3, [pc, #392]	; (8003cc4 <menu+0x29a4>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003b42:	4a6a      	ldr	r2, [pc, #424]	; (8003cec <menu+0x29cc>)
 8003b44:	2101      	movs	r1, #1
 8003b46:	2001      	movs	r0, #1
 8003b48:	f004 f900 	bl	8007d4c <lcd_print>
 8003b4c:	e020      	b.n	8003b90 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b4e:	4b5d      	ldr	r3, [pc, #372]	; (8003cc4 <menu+0x29a4>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d11c      	bne.n	8003b90 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003b56:	4a66      	ldr	r2, [pc, #408]	; (8003cf0 <menu+0x29d0>)
 8003b58:	2101      	movs	r1, #1
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	f004 f8f6 	bl	8007d4c <lcd_print>
 8003b60:	e016      	b.n	8003b90 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b62:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <menu+0x29c8>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d112      	bne.n	8003b90 <menu+0x2870>
			if(dilSecim == 0) {
 8003b6a:	4b56      	ldr	r3, [pc, #344]	; (8003cc4 <menu+0x29a4>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003b72:	4a60      	ldr	r2, [pc, #384]	; (8003cf4 <menu+0x29d4>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	2001      	movs	r0, #1
 8003b78:	f004 f8e8 	bl	8007d4c <lcd_print>
 8003b7c:	e008      	b.n	8003b90 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003b7e:	4b51      	ldr	r3, [pc, #324]	; (8003cc4 <menu+0x29a4>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d104      	bne.n	8003b90 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003b86:	4a5c      	ldr	r2, [pc, #368]	; (8003cf8 <menu+0x29d8>)
 8003b88:	2101      	movs	r1, #1
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	f004 f8de 	bl	8007d4c <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003b90:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <menu+0x29a4>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b98:	4a58      	ldr	r2, [pc, #352]	; (8003cfc <menu+0x29dc>)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	2002      	movs	r0, #2
 8003b9e:	f004 f8d5 	bl	8007d4c <lcd_print>
 8003ba2:	e008      	b.n	8003bb6 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003ba4:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <menu+0x29a4>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d104      	bne.n	8003bb6 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003bac:	4a46      	ldr	r2, [pc, #280]	; (8003cc8 <menu+0x29a8>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	f004 f8cb 	bl	8007d4c <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003bb6:	4b52      	ldr	r3, [pc, #328]	; (8003d00 <menu+0x29e0>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	220a      	movs	r2, #10
 8003bbc:	4944      	ldr	r1, [pc, #272]	; (8003cd0 <menu+0x29b0>)
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f008 fc16 	bl	800c3f0 <itoa>
		lcd_print(2, 16, snum);
 8003bc4:	4a42      	ldr	r2, [pc, #264]	; (8003cd0 <menu+0x29b0>)
 8003bc6:	2110      	movs	r1, #16
 8003bc8:	2002      	movs	r0, #2
 8003bca:	f004 f8bf 	bl	8007d4c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bce:	2102      	movs	r1, #2
 8003bd0:	4840      	ldr	r0, [pc, #256]	; (8003cd4 <menu+0x29b4>)
 8003bd2:	f005 fbe1 	bl	8009398 <HAL_GPIO_ReadPin>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d115      	bne.n	8003c08 <menu+0x28e8>
 8003bdc:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <menu+0x29b8>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	f083 0301 	eor.w	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00e      	beq.n	8003c08 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003bea:	4b45      	ldr	r3, [pc, #276]	; (8003d00 <menu+0x29e0>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b43      	ldr	r3, [pc, #268]	; (8003d00 <menu+0x29e0>)
 8003bf4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003bf6:	4b42      	ldr	r3, [pc, #264]	; (8003d00 <menu+0x29e0>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d902      	bls.n	8003c04 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003bfe:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <menu+0x29e0>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c04:	f000 ff6c 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c08:	2104      	movs	r1, #4
 8003c0a:	4832      	ldr	r0, [pc, #200]	; (8003cd4 <menu+0x29b4>)
 8003c0c:	f005 fbc4 	bl	8009398 <HAL_GPIO_ReadPin>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d115      	bne.n	8003c42 <menu+0x2922>
 8003c16:	4b30      	ldr	r3, [pc, #192]	; (8003cd8 <menu+0x29b8>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	f083 0301 	eor.w	r3, r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003c24:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <menu+0x29e0>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <menu+0x29e0>)
 8003c2e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003c30:	4b33      	ldr	r3, [pc, #204]	; (8003d00 <menu+0x29e0>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d902      	bls.n	8003c3e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <menu+0x29e0>)
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c3e:	f000 ff4f 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c42:	2108      	movs	r1, #8
 8003c44:	4823      	ldr	r0, [pc, #140]	; (8003cd4 <menu+0x29b4>)
 8003c46:	f005 fba7 	bl	8009398 <HAL_GPIO_ReadPin>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d10d      	bne.n	8003c6c <menu+0x294c>
 8003c50:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <menu+0x29b8>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	f083 0301 	eor.w	r3, r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003c5e:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <menu+0x29e0>)
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <menu+0x29bc>)
 8003c64:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <menu+0x29c0>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <menu+0x29c4>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b19      	cmp	r3, #25
 8003c72:	f040 80c4 	bne.w	8003dfe <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003c76:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <menu+0x29c8>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d113      	bne.n	8003ca6 <menu+0x2986>
			if(dilSecim == 0) {
 8003c7e:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <menu+0x29a4>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003c86:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <menu+0x29e4>)
 8003c88:	2101      	movs	r1, #1
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	f004 f85e 	bl	8007d4c <lcd_print>
 8003c90:	e047      	b.n	8003d22 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <menu+0x29a4>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d143      	bne.n	8003d22 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	; (8003d08 <menu+0x29e8>)
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f004 f854 	bl	8007d4c <lcd_print>
 8003ca4:	e03d      	b.n	8003d22 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <menu+0x29c8>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d139      	bne.n	8003d22 <menu+0x2a02>
			if(dilSecim == 0) {
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <menu+0x29a4>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d12c      	bne.n	8003d10 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003cb6:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <menu+0x29ec>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f004 f846 	bl	8007d4c <lcd_print>
 8003cc0:	e02f      	b.n	8003d22 <menu+0x2a02>
 8003cc2:	bf00      	nop
 8003cc4:	20000249 	.word	0x20000249
 8003cc8:	0800d97c 	.word	0x0800d97c
 8003ccc:	2000023d 	.word	0x2000023d
 8003cd0:	2000019c 	.word	0x2000019c
 8003cd4:	40010800 	.word	0x40010800
 8003cd8:	20000257 	.word	0x20000257
 8003cdc:	2000012c 	.word	0x2000012c
 8003ce0:	20000254 	.word	0x20000254
 8003ce4:	20000228 	.word	0x20000228
 8003ce8:	20000237 	.word	0x20000237
 8003cec:	0800d9b4 	.word	0x0800d9b4
 8003cf0:	0800d9c8 	.word	0x0800d9c8
 8003cf4:	0800d9dc 	.word	0x0800d9dc
 8003cf8:	0800d9f0 	.word	0x0800d9f0
 8003cfc:	0800d608 	.word	0x0800d608
 8003d00:	2000023e 	.word	0x2000023e
 8003d04:	0800da04 	.word	0x0800da04
 8003d08:	0800da18 	.word	0x0800da18
 8003d0c:	0800da2c 	.word	0x0800da2c
			} else if(dilSecim == 1) {
 8003d10:	4b73      	ldr	r3, [pc, #460]	; (8003ee0 <menu+0x2bc0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d104      	bne.n	8003d22 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003d18:	4a72      	ldr	r2, [pc, #456]	; (8003ee4 <menu+0x2bc4>)
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f004 f815 	bl	8007d4c <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003d22:	4b6f      	ldr	r3, [pc, #444]	; (8003ee0 <menu+0x2bc0>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d105      	bne.n	8003d36 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d2a:	4a6f      	ldr	r2, [pc, #444]	; (8003ee8 <menu+0x2bc8>)
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f004 f80c 	bl	8007d4c <lcd_print>
 8003d34:	e008      	b.n	8003d48 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003d36:	4b6a      	ldr	r3, [pc, #424]	; (8003ee0 <menu+0x2bc0>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d104      	bne.n	8003d48 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003d3e:	4a6b      	ldr	r2, [pc, #428]	; (8003eec <menu+0x2bcc>)
 8003d40:	2101      	movs	r1, #1
 8003d42:	2002      	movs	r0, #2
 8003d44:	f004 f802 	bl	8007d4c <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003d48:	4b69      	ldr	r3, [pc, #420]	; (8003ef0 <menu+0x2bd0>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	220a      	movs	r2, #10
 8003d4e:	4969      	ldr	r1, [pc, #420]	; (8003ef4 <menu+0x2bd4>)
 8003d50:	4618      	mov	r0, r3
 8003d52:	f008 fb4d 	bl	800c3f0 <itoa>
		lcd_print(2,16,snum);
 8003d56:	4a67      	ldr	r2, [pc, #412]	; (8003ef4 <menu+0x2bd4>)
 8003d58:	2110      	movs	r1, #16
 8003d5a:	2002      	movs	r0, #2
 8003d5c:	f003 fff6 	bl	8007d4c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d60:	2102      	movs	r1, #2
 8003d62:	4865      	ldr	r0, [pc, #404]	; (8003ef8 <menu+0x2bd8>)
 8003d64:	f005 fb18 	bl	8009398 <HAL_GPIO_ReadPin>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d115      	bne.n	8003d9a <menu+0x2a7a>
 8003d6e:	4b63      	ldr	r3, [pc, #396]	; (8003efc <menu+0x2bdc>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	f083 0301 	eor.w	r3, r3, #1
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003d7c:	4b5c      	ldr	r3, [pc, #368]	; (8003ef0 <menu+0x2bd0>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	4b5a      	ldr	r3, [pc, #360]	; (8003ef0 <menu+0x2bd0>)
 8003d86:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003d88:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <menu+0x2bd0>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d902      	bls.n	8003d96 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003d90:	4b57      	ldr	r3, [pc, #348]	; (8003ef0 <menu+0x2bd0>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d96:	f000 fea3 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d9a:	2104      	movs	r1, #4
 8003d9c:	4856      	ldr	r0, [pc, #344]	; (8003ef8 <menu+0x2bd8>)
 8003d9e:	f005 fafb 	bl	8009398 <HAL_GPIO_ReadPin>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d115      	bne.n	8003dd4 <menu+0x2ab4>
 8003da8:	4b54      	ldr	r3, [pc, #336]	; (8003efc <menu+0x2bdc>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f083 0301 	eor.w	r3, r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00e      	beq.n	8003dd4 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003db6:	4b4e      	ldr	r3, [pc, #312]	; (8003ef0 <menu+0x2bd0>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <menu+0x2bd0>)
 8003dc0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003dc2:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <menu+0x2bd0>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b06      	cmp	r3, #6
 8003dc8:	d902      	bls.n	8003dd0 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003dca:	4b49      	ldr	r3, [pc, #292]	; (8003ef0 <menu+0x2bd0>)
 8003dcc:	2205      	movs	r2, #5
 8003dce:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dd0:	f000 fe86 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dd4:	2108      	movs	r1, #8
 8003dd6:	4848      	ldr	r0, [pc, #288]	; (8003ef8 <menu+0x2bd8>)
 8003dd8:	f005 fade 	bl	8009398 <HAL_GPIO_ReadPin>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d10d      	bne.n	8003dfe <menu+0x2ade>
 8003de2:	4b46      	ldr	r3, [pc, #280]	; (8003efc <menu+0x2bdc>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	f083 0301 	eor.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d006      	beq.n	8003dfe <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003df0:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <menu+0x2bd0>)
 8003df2:	781a      	ldrb	r2, [r3, #0]
 8003df4:	4b42      	ldr	r3, [pc, #264]	; (8003f00 <menu+0x2be0>)
 8003df6:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003df8:	4b42      	ldr	r3, [pc, #264]	; (8003f04 <menu+0x2be4>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003dfe:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <menu+0x2be8>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b1a      	cmp	r3, #26
 8003e04:	f040 80ec 	bne.w	8003fe0 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e08:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <menu+0x2bc0>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d105      	bne.n	8003e1c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003e10:	4a3e      	ldr	r2, [pc, #248]	; (8003f0c <menu+0x2bec>)
 8003e12:	2101      	movs	r1, #1
 8003e14:	2001      	movs	r0, #1
 8003e16:	f003 ff99 	bl	8007d4c <lcd_print>
 8003e1a:	e008      	b.n	8003e2e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003e1c:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <menu+0x2bc0>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d104      	bne.n	8003e2e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003e24:	4a3a      	ldr	r2, [pc, #232]	; (8003f10 <menu+0x2bf0>)
 8003e26:	2101      	movs	r1, #1
 8003e28:	2001      	movs	r0, #1
 8003e2a:	f003 ff8f 	bl	8007d4c <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003e2e:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <menu+0x2bf4>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b63      	cmp	r3, #99	; 0x63
 8003e34:	d91e      	bls.n	8003e74 <menu+0x2b54>
			if(dilSecim == 0) {
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <menu+0x2bc0>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d104      	bne.n	8003e48 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <menu+0x2bc8>)
 8003e40:	2101      	movs	r1, #1
 8003e42:	2002      	movs	r0, #2
 8003e44:	f003 ff82 	bl	8007d4c <lcd_print>
			}
			if(dilSecim == 1) {
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <menu+0x2bc0>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d104      	bne.n	8003e5a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003e50:	4a26      	ldr	r2, [pc, #152]	; (8003eec <menu+0x2bcc>)
 8003e52:	2101      	movs	r1, #1
 8003e54:	2002      	movs	r0, #2
 8003e56:	f003 ff79 	bl	8007d4c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e5a:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <menu+0x2bf4>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	220a      	movs	r2, #10
 8003e60:	4924      	ldr	r1, [pc, #144]	; (8003ef4 <menu+0x2bd4>)
 8003e62:	4618      	mov	r0, r3
 8003e64:	f008 fac4 	bl	800c3f0 <itoa>
			lcd_print(2,14,snum);
 8003e68:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <menu+0x2bd4>)
 8003e6a:	210e      	movs	r1, #14
 8003e6c:	2002      	movs	r0, #2
 8003e6e:	f003 ff6d 	bl	8007d4c <lcd_print>
 8003e72:	e066      	b.n	8003f42 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003e74:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <menu+0x2bf4>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b09      	cmp	r3, #9
 8003e7a:	d923      	bls.n	8003ec4 <menu+0x2ba4>
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <menu+0x2bf4>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b63      	cmp	r3, #99	; 0x63
 8003e82:	d81f      	bhi.n	8003ec4 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003e84:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <menu+0x2bc0>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e8c:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <menu+0x2bc8>)
 8003e8e:	2101      	movs	r1, #1
 8003e90:	2002      	movs	r0, #2
 8003e92:	f003 ff5b 	bl	8007d4c <lcd_print>
 8003e96:	e008      	b.n	8003eaa <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <menu+0x2bc0>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d104      	bne.n	8003eaa <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003ea0:	4a12      	ldr	r2, [pc, #72]	; (8003eec <menu+0x2bcc>)
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	2002      	movs	r0, #2
 8003ea6:	f003 ff51 	bl	8007d4c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <menu+0x2bf4>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	220a      	movs	r2, #10
 8003eb0:	4910      	ldr	r1, [pc, #64]	; (8003ef4 <menu+0x2bd4>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f008 fa9c 	bl	800c3f0 <itoa>
			lcd_print(2, 15, snum);
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <menu+0x2bd4>)
 8003eba:	210f      	movs	r1, #15
 8003ebc:	2002      	movs	r0, #2
 8003ebe:	f003 ff45 	bl	8007d4c <lcd_print>
 8003ec2:	e03e      	b.n	8003f42 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003ec4:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <menu+0x2bf4>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b09      	cmp	r3, #9
 8003eca:	d83a      	bhi.n	8003f42 <menu+0x2c22>
			if(dilSecim == 0) {
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <menu+0x2bc0>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d121      	bne.n	8003f18 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <menu+0x2bc8>)
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	2002      	movs	r0, #2
 8003eda:	f003 ff37 	bl	8007d4c <lcd_print>
 8003ede:	e024      	b.n	8003f2a <menu+0x2c0a>
 8003ee0:	20000249 	.word	0x20000249
 8003ee4:	0800da40 	.word	0x0800da40
 8003ee8:	0800d608 	.word	0x0800d608
 8003eec:	0800d97c 	.word	0x0800d97c
 8003ef0:	2000023f 	.word	0x2000023f
 8003ef4:	2000019c 	.word	0x2000019c
 8003ef8:	40010800 	.word	0x40010800
 8003efc:	20000257 	.word	0x20000257
 8003f00:	2000012c 	.word	0x2000012c
 8003f04:	20000254 	.word	0x20000254
 8003f08:	20000228 	.word	0x20000228
 8003f0c:	0800da54 	.word	0x0800da54
 8003f10:	0800da68 	.word	0x0800da68
 8003f14:	20000240 	.word	0x20000240
			} else if(dilSecim == 1) {
 8003f18:	4b8f      	ldr	r3, [pc, #572]	; (8004158 <menu+0x2e38>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d104      	bne.n	8003f2a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003f20:	4a8e      	ldr	r2, [pc, #568]	; (800415c <menu+0x2e3c>)
 8003f22:	2101      	movs	r1, #1
 8003f24:	2002      	movs	r0, #2
 8003f26:	f003 ff11 	bl	8007d4c <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f2a:	4b8d      	ldr	r3, [pc, #564]	; (8004160 <menu+0x2e40>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	220a      	movs	r2, #10
 8003f30:	498c      	ldr	r1, [pc, #560]	; (8004164 <menu+0x2e44>)
 8003f32:	4618      	mov	r0, r3
 8003f34:	f008 fa5c 	bl	800c3f0 <itoa>
			lcd_print(2, 16, snum);
 8003f38:	4a8a      	ldr	r2, [pc, #552]	; (8004164 <menu+0x2e44>)
 8003f3a:	2110      	movs	r1, #16
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	f003 ff05 	bl	8007d4c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f42:	2102      	movs	r1, #2
 8003f44:	4888      	ldr	r0, [pc, #544]	; (8004168 <menu+0x2e48>)
 8003f46:	f005 fa27 	bl	8009398 <HAL_GPIO_ReadPin>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d115      	bne.n	8003f7c <menu+0x2c5c>
 8003f50:	4b86      	ldr	r3, [pc, #536]	; (800416c <menu+0x2e4c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	f083 0301 	eor.w	r3, r3, #1
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00e      	beq.n	8003f7c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003f5e:	4b80      	ldr	r3, [pc, #512]	; (8004160 <menu+0x2e40>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	3301      	adds	r3, #1
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4b7e      	ldr	r3, [pc, #504]	; (8004160 <menu+0x2e40>)
 8003f68:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003f6a:	4b7d      	ldr	r3, [pc, #500]	; (8004160 <menu+0x2e40>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2bb4      	cmp	r3, #180	; 0xb4
 8003f70:	d902      	bls.n	8003f78 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003f72:	4b7b      	ldr	r3, [pc, #492]	; (8004160 <menu+0x2e40>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f78:	f000 fdb2 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	487a      	ldr	r0, [pc, #488]	; (8004168 <menu+0x2e48>)
 8003f80:	f005 fa0a 	bl	8009398 <HAL_GPIO_ReadPin>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d115      	bne.n	8003fb6 <menu+0x2c96>
 8003f8a:	4b78      	ldr	r3, [pc, #480]	; (800416c <menu+0x2e4c>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	f083 0301 	eor.w	r3, r3, #1
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003f98:	4b71      	ldr	r3, [pc, #452]	; (8004160 <menu+0x2e40>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <menu+0x2e40>)
 8003fa2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003fa4:	4b6e      	ldr	r3, [pc, #440]	; (8004160 <menu+0x2e40>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2bb5      	cmp	r3, #181	; 0xb5
 8003faa:	d902      	bls.n	8003fb2 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003fac:	4b6c      	ldr	r3, [pc, #432]	; (8004160 <menu+0x2e40>)
 8003fae:	22b4      	movs	r2, #180	; 0xb4
 8003fb0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fb2:	f000 fd95 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fb6:	2108      	movs	r1, #8
 8003fb8:	486b      	ldr	r0, [pc, #428]	; (8004168 <menu+0x2e48>)
 8003fba:	f005 f9ed 	bl	8009398 <HAL_GPIO_ReadPin>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d10d      	bne.n	8003fe0 <menu+0x2cc0>
 8003fc4:	4b69      	ldr	r3, [pc, #420]	; (800416c <menu+0x2e4c>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	f083 0301 	eor.w	r3, r3, #1
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003fd2:	4b63      	ldr	r3, [pc, #396]	; (8004160 <menu+0x2e40>)
 8003fd4:	781a      	ldrb	r2, [r3, #0]
 8003fd6:	4b66      	ldr	r3, [pc, #408]	; (8004170 <menu+0x2e50>)
 8003fd8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003fda:	4b66      	ldr	r3, [pc, #408]	; (8004174 <menu+0x2e54>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003fe0:	4b65      	ldr	r3, [pc, #404]	; (8004178 <menu+0x2e58>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b1b      	cmp	r3, #27
 8003fe6:	f040 8083 	bne.w	80040f0 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003fea:	4a64      	ldr	r2, [pc, #400]	; (800417c <menu+0x2e5c>)
 8003fec:	2101      	movs	r1, #1
 8003fee:	2001      	movs	r0, #1
 8003ff0:	f003 feac 	bl	8007d4c <lcd_print>

		if(buzzer == 0) {
 8003ff4:	4b62      	ldr	r3, [pc, #392]	; (8004180 <menu+0x2e60>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d113      	bne.n	8004024 <menu+0x2d04>
			if(dilSecim == 0) {
 8003ffc:	4b56      	ldr	r3, [pc, #344]	; (8004158 <menu+0x2e38>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004004:	4a5f      	ldr	r2, [pc, #380]	; (8004184 <menu+0x2e64>)
 8004006:	2101      	movs	r1, #1
 8004008:	2002      	movs	r0, #2
 800400a:	f003 fe9f 	bl	8007d4c <lcd_print>
 800400e:	e020      	b.n	8004052 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004010:	4b51      	ldr	r3, [pc, #324]	; (8004158 <menu+0x2e38>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d11c      	bne.n	8004052 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004018:	4a5b      	ldr	r2, [pc, #364]	; (8004188 <menu+0x2e68>)
 800401a:	2101      	movs	r1, #1
 800401c:	2002      	movs	r0, #2
 800401e:	f003 fe95 	bl	8007d4c <lcd_print>
 8004022:	e016      	b.n	8004052 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004024:	4b56      	ldr	r3, [pc, #344]	; (8004180 <menu+0x2e60>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d112      	bne.n	8004052 <menu+0x2d32>
			if(dilSecim == 0) {
 800402c:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <menu+0x2e38>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d105      	bne.n	8004040 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004034:	4a55      	ldr	r2, [pc, #340]	; (800418c <menu+0x2e6c>)
 8004036:	2101      	movs	r1, #1
 8004038:	2002      	movs	r0, #2
 800403a:	f003 fe87 	bl	8007d4c <lcd_print>
 800403e:	e008      	b.n	8004052 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004040:	4b45      	ldr	r3, [pc, #276]	; (8004158 <menu+0x2e38>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d104      	bne.n	8004052 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8004048:	4a51      	ldr	r2, [pc, #324]	; (8004190 <menu+0x2e70>)
 800404a:	2101      	movs	r1, #1
 800404c:	2002      	movs	r0, #2
 800404e:	f003 fe7d 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004052:	2102      	movs	r1, #2
 8004054:	4844      	ldr	r0, [pc, #272]	; (8004168 <menu+0x2e48>)
 8004056:	f005 f99f 	bl	8009398 <HAL_GPIO_ReadPin>
 800405a:	4603      	mov	r3, r0
 800405c:	2b01      	cmp	r3, #1
 800405e:	d115      	bne.n	800408c <menu+0x2d6c>
 8004060:	4b42      	ldr	r3, [pc, #264]	; (800416c <menu+0x2e4c>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	f083 0301 	eor.w	r3, r3, #1
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00e      	beq.n	800408c <menu+0x2d6c>
			buzzer = buzzer + 1;
 800406e:	4b44      	ldr	r3, [pc, #272]	; (8004180 <menu+0x2e60>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4b42      	ldr	r3, [pc, #264]	; (8004180 <menu+0x2e60>)
 8004078:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800407a:	4b41      	ldr	r3, [pc, #260]	; (8004180 <menu+0x2e60>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d902      	bls.n	8004088 <menu+0x2d68>
				buzzer = 0;
 8004082:	4b3f      	ldr	r3, [pc, #252]	; (8004180 <menu+0x2e60>)
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004088:	f000 fd2a 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800408c:	2104      	movs	r1, #4
 800408e:	4836      	ldr	r0, [pc, #216]	; (8004168 <menu+0x2e48>)
 8004090:	f005 f982 	bl	8009398 <HAL_GPIO_ReadPin>
 8004094:	4603      	mov	r3, r0
 8004096:	2b01      	cmp	r3, #1
 8004098:	d115      	bne.n	80040c6 <menu+0x2da6>
 800409a:	4b34      	ldr	r3, [pc, #208]	; (800416c <menu+0x2e4c>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	f083 0301 	eor.w	r3, r3, #1
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <menu+0x2da6>
			buzzer = buzzer - 1;
 80040a8:	4b35      	ldr	r3, [pc, #212]	; (8004180 <menu+0x2e60>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	4b33      	ldr	r3, [pc, #204]	; (8004180 <menu+0x2e60>)
 80040b2:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <menu+0x2e60>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <menu+0x2da2>
		   		buzzer = 1;
 80040bc:	4b30      	ldr	r3, [pc, #192]	; (8004180 <menu+0x2e60>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80040c2:	f000 fd0d 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80040c6:	2108      	movs	r1, #8
 80040c8:	4827      	ldr	r0, [pc, #156]	; (8004168 <menu+0x2e48>)
 80040ca:	f005 f965 	bl	8009398 <HAL_GPIO_ReadPin>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10d      	bne.n	80040f0 <menu+0x2dd0>
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <menu+0x2e4c>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	f083 0301 	eor.w	r3, r3, #1
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d006      	beq.n	80040f0 <menu+0x2dd0>
			eepromData[25] = buzzer;
 80040e2:	4b27      	ldr	r3, [pc, #156]	; (8004180 <menu+0x2e60>)
 80040e4:	781a      	ldrb	r2, [r3, #0]
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <menu+0x2e50>)
 80040e8:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80040ea:	4b22      	ldr	r3, [pc, #136]	; (8004174 <menu+0x2e54>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80040f0:	4b21      	ldr	r3, [pc, #132]	; (8004178 <menu+0x2e58>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b1c      	cmp	r3, #28
 80040f6:	f040 80ab 	bne.w	8004250 <menu+0x2f30>
		calismaSayModu = 0;
 80040fa:	4b26      	ldr	r3, [pc, #152]	; (8004194 <menu+0x2e74>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004100:	4a25      	ldr	r2, [pc, #148]	; (8004198 <menu+0x2e78>)
 8004102:	2101      	movs	r1, #1
 8004104:	2001      	movs	r0, #1
 8004106:	f003 fe21 	bl	8007d4c <lcd_print>

		if(demoMode == 0) {
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <menu+0x2e7c>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d113      	bne.n	800413a <menu+0x2e1a>
			if(dilSecim == 0) {
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <menu+0x2e38>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d105      	bne.n	8004126 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800411a:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <menu+0x2e64>)
 800411c:	2101      	movs	r1, #1
 800411e:	2002      	movs	r0, #2
 8004120:	f003 fe14 	bl	8007d4c <lcd_print>
 8004124:	e045      	b.n	80041b2 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <menu+0x2e38>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d141      	bne.n	80041b2 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <menu+0x2e68>)
 8004130:	2101      	movs	r1, #1
 8004132:	2002      	movs	r0, #2
 8004134:	f003 fe0a 	bl	8007d4c <lcd_print>
 8004138:	e03b      	b.n	80041b2 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800413a:	4b18      	ldr	r3, [pc, #96]	; (800419c <menu+0x2e7c>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d137      	bne.n	80041b2 <menu+0x2e92>
			if(dilSecim == 0){
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <menu+0x2e38>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d12a      	bne.n	80041a0 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800414a:	4a10      	ldr	r2, [pc, #64]	; (800418c <menu+0x2e6c>)
 800414c:	2101      	movs	r1, #1
 800414e:	2002      	movs	r0, #2
 8004150:	f003 fdfc 	bl	8007d4c <lcd_print>
 8004154:	e02d      	b.n	80041b2 <menu+0x2e92>
 8004156:	bf00      	nop
 8004158:	20000249 	.word	0x20000249
 800415c:	0800d97c 	.word	0x0800d97c
 8004160:	20000240 	.word	0x20000240
 8004164:	2000019c 	.word	0x2000019c
 8004168:	40010800 	.word	0x40010800
 800416c:	20000257 	.word	0x20000257
 8004170:	2000012c 	.word	0x2000012c
 8004174:	20000254 	.word	0x20000254
 8004178:	20000228 	.word	0x20000228
 800417c:	0800da7c 	.word	0x0800da7c
 8004180:	20000244 	.word	0x20000244
 8004184:	0800d3a4 	.word	0x0800d3a4
 8004188:	0800d3b8 	.word	0x0800d3b8
 800418c:	0800d404 	.word	0x0800d404
 8004190:	0800d418 	.word	0x0800d418
 8004194:	20000248 	.word	0x20000248
 8004198:	0800da90 	.word	0x0800da90
 800419c:	20000246 	.word	0x20000246
			} else if(dilSecim == 1) {
 80041a0:	4b71      	ldr	r3, [pc, #452]	; (8004368 <menu+0x3048>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d104      	bne.n	80041b2 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80041a8:	4a70      	ldr	r2, [pc, #448]	; (800436c <menu+0x304c>)
 80041aa:	2101      	movs	r1, #1
 80041ac:	2002      	movs	r0, #2
 80041ae:	f003 fdcd 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041b2:	2102      	movs	r1, #2
 80041b4:	486e      	ldr	r0, [pc, #440]	; (8004370 <menu+0x3050>)
 80041b6:	f005 f8ef 	bl	8009398 <HAL_GPIO_ReadPin>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d115      	bne.n	80041ec <menu+0x2ecc>
 80041c0:	4b6c      	ldr	r3, [pc, #432]	; (8004374 <menu+0x3054>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	f083 0301 	eor.w	r3, r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00e      	beq.n	80041ec <menu+0x2ecc>
			demoMode = demoMode + 1;
 80041ce:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <menu+0x3058>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	3301      	adds	r3, #1
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	4b68      	ldr	r3, [pc, #416]	; (8004378 <menu+0x3058>)
 80041d8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80041da:	4b67      	ldr	r3, [pc, #412]	; (8004378 <menu+0x3058>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d902      	bls.n	80041e8 <menu+0x2ec8>
				demoMode = 0;
 80041e2:	4b65      	ldr	r3, [pc, #404]	; (8004378 <menu+0x3058>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041e8:	f000 fc7a 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041ec:	2104      	movs	r1, #4
 80041ee:	4860      	ldr	r0, [pc, #384]	; (8004370 <menu+0x3050>)
 80041f0:	f005 f8d2 	bl	8009398 <HAL_GPIO_ReadPin>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d115      	bne.n	8004226 <menu+0x2f06>
 80041fa:	4b5e      	ldr	r3, [pc, #376]	; (8004374 <menu+0x3054>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	f083 0301 	eor.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004208:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <menu+0x3058>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	3b01      	subs	r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	4b59      	ldr	r3, [pc, #356]	; (8004378 <menu+0x3058>)
 8004212:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004214:	4b58      	ldr	r3, [pc, #352]	; (8004378 <menu+0x3058>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <menu+0x2f02>
		   		demoMode = 1;
 800421c:	4b56      	ldr	r3, [pc, #344]	; (8004378 <menu+0x3058>)
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004222:	f000 fc5d 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004226:	2108      	movs	r1, #8
 8004228:	4851      	ldr	r0, [pc, #324]	; (8004370 <menu+0x3050>)
 800422a:	f005 f8b5 	bl	8009398 <HAL_GPIO_ReadPin>
 800422e:	4603      	mov	r3, r0
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10d      	bne.n	8004250 <menu+0x2f30>
 8004234:	4b4f      	ldr	r3, [pc, #316]	; (8004374 <menu+0x3054>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	f083 0301 	eor.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d006      	beq.n	8004250 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004242:	4b4d      	ldr	r3, [pc, #308]	; (8004378 <menu+0x3058>)
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	4b4d      	ldr	r3, [pc, #308]	; (800437c <menu+0x305c>)
 8004248:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800424a:	4b4d      	ldr	r3, [pc, #308]	; (8004380 <menu+0x3060>)
 800424c:	2201      	movs	r2, #1
 800424e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004250:	4b4c      	ldr	r3, [pc, #304]	; (8004384 <menu+0x3064>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b1d      	cmp	r3, #29
 8004256:	f040 8132 	bne.w	80044be <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800425a:	4b4b      	ldr	r3, [pc, #300]	; (8004388 <menu+0x3068>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d113      	bne.n	800428a <menu+0x2f6a>
 8004262:	4b4a      	ldr	r3, [pc, #296]	; (800438c <menu+0x306c>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <menu+0x2f6a>
 800426a:	4b49      	ldr	r3, [pc, #292]	; (8004390 <menu+0x3070>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <menu+0x2f6a>
 8004272:	4b48      	ldr	r3, [pc, #288]	; (8004394 <menu+0x3074>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d107      	bne.n	800428a <menu+0x2f6a>
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <menu+0x3078>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004282:	4b46      	ldr	r3, [pc, #280]	; (800439c <menu+0x307c>)
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e002      	b.n	8004290 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800428a:	4b44      	ldr	r3, [pc, #272]	; (800439c <menu+0x307c>)
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <menu+0x3080>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d154      	bne.n	8004342 <menu+0x3022>
			if(dilSecim == 0) {
 8004298:	4b33      	ldr	r3, [pc, #204]	; (8004368 <menu+0x3048>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80042a0:	4a40      	ldr	r2, [pc, #256]	; (80043a4 <menu+0x3084>)
 80042a2:	2101      	movs	r1, #1
 80042a4:	2001      	movs	r0, #1
 80042a6:	f003 fd51 	bl	8007d4c <lcd_print>
 80042aa:	e008      	b.n	80042be <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80042ac:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <menu+0x3048>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d104      	bne.n	80042be <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80042b4:	4a3c      	ldr	r2, [pc, #240]	; (80043a8 <menu+0x3088>)
 80042b6:	2101      	movs	r1, #1
 80042b8:	2001      	movs	r0, #1
 80042ba:	f003 fd47 	bl	8007d4c <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <menu+0x3078>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	220a      	movs	r2, #10
 80042c4:	4939      	ldr	r1, [pc, #228]	; (80043ac <menu+0x308c>)
 80042c6:	4618      	mov	r0, r3
 80042c8:	f008 f892 	bl	800c3f0 <itoa>
			lcd_print(2, 12, snum);
 80042cc:	4a37      	ldr	r2, [pc, #220]	; (80043ac <menu+0x308c>)
 80042ce:	210c      	movs	r1, #12
 80042d0:	2002      	movs	r0, #2
 80042d2:	f003 fd3b 	bl	8007d4c <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80042d6:	4b2f      	ldr	r3, [pc, #188]	; (8004394 <menu+0x3074>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	220a      	movs	r2, #10
 80042dc:	4933      	ldr	r1, [pc, #204]	; (80043ac <menu+0x308c>)
 80042de:	4618      	mov	r0, r3
 80042e0:	f008 f886 	bl	800c3f0 <itoa>
			lcd_print(2, 13, snum);
 80042e4:	4a31      	ldr	r2, [pc, #196]	; (80043ac <menu+0x308c>)
 80042e6:	210d      	movs	r1, #13
 80042e8:	2002      	movs	r0, #2
 80042ea:	f003 fd2f 	bl	8007d4c <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80042ee:	4b28      	ldr	r3, [pc, #160]	; (8004390 <menu+0x3070>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	220a      	movs	r2, #10
 80042f4:	492d      	ldr	r1, [pc, #180]	; (80043ac <menu+0x308c>)
 80042f6:	4618      	mov	r0, r3
 80042f8:	f008 f87a 	bl	800c3f0 <itoa>
			lcd_print(2, 14, snum);
 80042fc:	4a2b      	ldr	r2, [pc, #172]	; (80043ac <menu+0x308c>)
 80042fe:	210e      	movs	r1, #14
 8004300:	2002      	movs	r0, #2
 8004302:	f003 fd23 	bl	8007d4c <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004306:	4b21      	ldr	r3, [pc, #132]	; (800438c <menu+0x306c>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	220a      	movs	r2, #10
 800430c:	4927      	ldr	r1, [pc, #156]	; (80043ac <menu+0x308c>)
 800430e:	4618      	mov	r0, r3
 8004310:	f008 f86e 	bl	800c3f0 <itoa>
			lcd_print(2, 15, snum);
 8004314:	4a25      	ldr	r2, [pc, #148]	; (80043ac <menu+0x308c>)
 8004316:	210f      	movs	r1, #15
 8004318:	2002      	movs	r0, #2
 800431a:	f003 fd17 	bl	8007d4c <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <menu+0x3068>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	220a      	movs	r2, #10
 8004324:	4921      	ldr	r1, [pc, #132]	; (80043ac <menu+0x308c>)
 8004326:	4618      	mov	r0, r3
 8004328:	f008 f862 	bl	800c3f0 <itoa>
			lcd_print(2, 16, snum);
 800432c:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <menu+0x308c>)
 800432e:	2110      	movs	r1, #16
 8004330:	2002      	movs	r0, #2
 8004332:	f003 fd0b 	bl	8007d4c <lcd_print>

			lcd_print(2, 1, "           ");
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <menu+0x3090>)
 8004338:	2101      	movs	r1, #1
 800433a:	2002      	movs	r0, #2
 800433c:	f003 fd06 	bl	8007d4c <lcd_print>
 8004340:	e048      	b.n	80043d4 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004342:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <menu+0x3080>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d144      	bne.n	80043d4 <menu+0x30b4>
			if(dilSecim == 0) {
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <menu+0x3048>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d132      	bne.n	80043b8 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004352:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <menu+0x3084>)
 8004354:	2101      	movs	r1, #1
 8004356:	2001      	movs	r0, #1
 8004358:	f003 fcf8 	bl	8007d4c <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800435c:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <menu+0x3094>)
 800435e:	2101      	movs	r1, #1
 8004360:	2002      	movs	r0, #2
 8004362:	f003 fcf3 	bl	8007d4c <lcd_print>
 8004366:	e035      	b.n	80043d4 <menu+0x30b4>
 8004368:	20000249 	.word	0x20000249
 800436c:	0800d418 	.word	0x0800d418
 8004370:	40010800 	.word	0x40010800
 8004374:	20000257 	.word	0x20000257
 8004378:	20000246 	.word	0x20000246
 800437c:	2000012c 	.word	0x2000012c
 8004380:	20000254 	.word	0x20000254
 8004384:	20000228 	.word	0x20000228
 8004388:	20000225 	.word	0x20000225
 800438c:	20000226 	.word	0x20000226
 8004390:	20000000 	.word	0x20000000
 8004394:	20000001 	.word	0x20000001
 8004398:	20000227 	.word	0x20000227
 800439c:	20000269 	.word	0x20000269
 80043a0:	20000248 	.word	0x20000248
 80043a4:	0800daa0 	.word	0x0800daa0
 80043a8:	0800dab4 	.word	0x0800dab4
 80043ac:	2000019c 	.word	0x2000019c
 80043b0:	0800dac8 	.word	0x0800dac8
 80043b4:	0800dad4 	.word	0x0800dad4
			} else if(dilSecim == 1) {
 80043b8:	4b94      	ldr	r3, [pc, #592]	; (800460c <menu+0x32ec>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d109      	bne.n	80043d4 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80043c0:	4a93      	ldr	r2, [pc, #588]	; (8004610 <menu+0x32f0>)
 80043c2:	2101      	movs	r1, #1
 80043c4:	2001      	movs	r0, #1
 80043c6:	f003 fcc1 	bl	8007d4c <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80043ca:	4a92      	ldr	r2, [pc, #584]	; (8004614 <menu+0x32f4>)
 80043cc:	2101      	movs	r1, #1
 80043ce:	2002      	movs	r0, #2
 80043d0:	f003 fcbc 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80043d4:	2102      	movs	r1, #2
 80043d6:	4890      	ldr	r0, [pc, #576]	; (8004618 <menu+0x32f8>)
 80043d8:	f004 ffde 	bl	8009398 <HAL_GPIO_ReadPin>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d119      	bne.n	8004416 <menu+0x30f6>
 80043e2:	4b8e      	ldr	r3, [pc, #568]	; (800461c <menu+0x32fc>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d012      	beq.n	8004416 <menu+0x30f6>
 80043f0:	4b8b      	ldr	r3, [pc, #556]	; (8004620 <menu+0x3300>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00e      	beq.n	8004416 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80043f8:	4b8a      	ldr	r3, [pc, #552]	; (8004624 <menu+0x3304>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	4b88      	ldr	r3, [pc, #544]	; (8004624 <menu+0x3304>)
 8004402:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004404:	4b87      	ldr	r3, [pc, #540]	; (8004624 <menu+0x3304>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d902      	bls.n	8004412 <menu+0x30f2>
				calismaSayModu = 0;
 800440c:	4b85      	ldr	r3, [pc, #532]	; (8004624 <menu+0x3304>)
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004412:	f000 fb65 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004416:	2104      	movs	r1, #4
 8004418:	487f      	ldr	r0, [pc, #508]	; (8004618 <menu+0x32f8>)
 800441a:	f004 ffbd 	bl	8009398 <HAL_GPIO_ReadPin>
 800441e:	4603      	mov	r3, r0
 8004420:	2b01      	cmp	r3, #1
 8004422:	d119      	bne.n	8004458 <menu+0x3138>
 8004424:	4b7d      	ldr	r3, [pc, #500]	; (800461c <menu+0x32fc>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f083 0301 	eor.w	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d012      	beq.n	8004458 <menu+0x3138>
 8004432:	4b7b      	ldr	r3, [pc, #492]	; (8004620 <menu+0x3300>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00e      	beq.n	8004458 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800443a:	4b7a      	ldr	r3, [pc, #488]	; (8004624 <menu+0x3304>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	3b01      	subs	r3, #1
 8004440:	b2da      	uxtb	r2, r3
 8004442:	4b78      	ldr	r3, [pc, #480]	; (8004624 <menu+0x3304>)
 8004444:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004446:	4b77      	ldr	r3, [pc, #476]	; (8004624 <menu+0x3304>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <menu+0x3134>
		   		calismaSayModu = 1;
 800444e:	4b75      	ldr	r3, [pc, #468]	; (8004624 <menu+0x3304>)
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004454:	f000 fb44 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004458:	2108      	movs	r1, #8
 800445a:	486f      	ldr	r0, [pc, #444]	; (8004618 <menu+0x32f8>)
 800445c:	f004 ff9c 	bl	8009398 <HAL_GPIO_ReadPin>
 8004460:	4603      	mov	r3, r0
 8004462:	2b01      	cmp	r3, #1
 8004464:	d12b      	bne.n	80044be <menu+0x319e>
 8004466:	4b6d      	ldr	r3, [pc, #436]	; (800461c <menu+0x32fc>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	f083 0301 	eor.w	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d024      	beq.n	80044be <menu+0x319e>
			eepromData[32] = 0;
 8004474:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <menu+0x3308>)
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800447c:	4b6a      	ldr	r3, [pc, #424]	; (8004628 <menu+0x3308>)
 800447e:	2200      	movs	r2, #0
 8004480:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004482:	4b69      	ldr	r3, [pc, #420]	; (8004628 <menu+0x3308>)
 8004484:	2200      	movs	r2, #0
 8004486:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004488:	4b67      	ldr	r3, [pc, #412]	; (8004628 <menu+0x3308>)
 800448a:	2200      	movs	r2, #0
 800448c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800448e:	4b66      	ldr	r3, [pc, #408]	; (8004628 <menu+0x3308>)
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004494:	4b65      	ldr	r3, [pc, #404]	; (800462c <menu+0x330c>)
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800449a:	4b65      	ldr	r3, [pc, #404]	; (8004630 <menu+0x3310>)
 800449c:	2200      	movs	r2, #0
 800449e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80044a0:	4b64      	ldr	r3, [pc, #400]	; (8004634 <menu+0x3314>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80044a6:	4b64      	ldr	r3, [pc, #400]	; (8004638 <menu+0x3318>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80044ac:	4b63      	ldr	r3, [pc, #396]	; (800463c <menu+0x331c>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <menu+0x3304>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80044b8:	4b61      	ldr	r3, [pc, #388]	; (8004640 <menu+0x3320>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80044be:	4b61      	ldr	r3, [pc, #388]	; (8004644 <menu+0x3324>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b1e      	cmp	r3, #30
 80044c4:	d16f      	bne.n	80045a6 <menu+0x3286>
		calismaSayModu = 0;
 80044c6:	4b57      	ldr	r3, [pc, #348]	; (8004624 <menu+0x3304>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80044cc:	4b4f      	ldr	r3, [pc, #316]	; (800460c <menu+0x32ec>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80044d4:	4a5c      	ldr	r2, [pc, #368]	; (8004648 <menu+0x3328>)
 80044d6:	2101      	movs	r1, #1
 80044d8:	2001      	movs	r0, #1
 80044da:	f003 fc37 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80044de:	4a5b      	ldr	r2, [pc, #364]	; (800464c <menu+0x332c>)
 80044e0:	2101      	movs	r1, #1
 80044e2:	2002      	movs	r0, #2
 80044e4:	f003 fc32 	bl	8007d4c <lcd_print>
 80044e8:	e00d      	b.n	8004506 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80044ea:	4b48      	ldr	r3, [pc, #288]	; (800460c <menu+0x32ec>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d109      	bne.n	8004506 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80044f2:	4a57      	ldr	r2, [pc, #348]	; (8004650 <menu+0x3330>)
 80044f4:	2101      	movs	r1, #1
 80044f6:	2001      	movs	r0, #1
 80044f8:	f003 fc28 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80044fc:	4a55      	ldr	r2, [pc, #340]	; (8004654 <menu+0x3334>)
 80044fe:	2101      	movs	r1, #1
 8004500:	2002      	movs	r0, #2
 8004502:	f003 fc23 	bl	8007d4c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004506:	2102      	movs	r1, #2
 8004508:	4843      	ldr	r0, [pc, #268]	; (8004618 <menu+0x32f8>)
 800450a:	f004 ff45 	bl	8009398 <HAL_GPIO_ReadPin>
 800450e:	4603      	mov	r3, r0
 8004510:	2b01      	cmp	r3, #1
 8004512:	d115      	bne.n	8004540 <menu+0x3220>
 8004514:	4b41      	ldr	r3, [pc, #260]	; (800461c <menu+0x32fc>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f083 0301 	eor.w	r3, r3, #1
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00e      	beq.n	8004540 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004522:	4b3a      	ldr	r3, [pc, #232]	; (800460c <menu+0x32ec>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	b2da      	uxtb	r2, r3
 800452a:	4b38      	ldr	r3, [pc, #224]	; (800460c <menu+0x32ec>)
 800452c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800452e:	4b37      	ldr	r3, [pc, #220]	; (800460c <menu+0x32ec>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d902      	bls.n	800453c <menu+0x321c>
				dilSecim = 0;
 8004536:	4b35      	ldr	r3, [pc, #212]	; (800460c <menu+0x32ec>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800453c:	f000 fad0 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004540:	2104      	movs	r1, #4
 8004542:	4835      	ldr	r0, [pc, #212]	; (8004618 <menu+0x32f8>)
 8004544:	f004 ff28 	bl	8009398 <HAL_GPIO_ReadPin>
 8004548:	4603      	mov	r3, r0
 800454a:	2b01      	cmp	r3, #1
 800454c:	d115      	bne.n	800457a <menu+0x325a>
 800454e:	4b33      	ldr	r3, [pc, #204]	; (800461c <menu+0x32fc>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	f083 0301 	eor.w	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00e      	beq.n	800457a <menu+0x325a>
			dilSecim = dilSecim - 1;
 800455c:	4b2b      	ldr	r3, [pc, #172]	; (800460c <menu+0x32ec>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	3b01      	subs	r3, #1
 8004562:	b2da      	uxtb	r2, r3
 8004564:	4b29      	ldr	r3, [pc, #164]	; (800460c <menu+0x32ec>)
 8004566:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004568:	4b28      	ldr	r3, [pc, #160]	; (800460c <menu+0x32ec>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <menu+0x3256>
		   		dilSecim = 1;
 8004570:	4b26      	ldr	r3, [pc, #152]	; (800460c <menu+0x32ec>)
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004576:	f000 fab3 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800457a:	2108      	movs	r1, #8
 800457c:	4826      	ldr	r0, [pc, #152]	; (8004618 <menu+0x32f8>)
 800457e:	f004 ff0b 	bl	8009398 <HAL_GPIO_ReadPin>
 8004582:	4603      	mov	r3, r0
 8004584:	2b01      	cmp	r3, #1
 8004586:	d10e      	bne.n	80045a6 <menu+0x3286>
 8004588:	4b24      	ldr	r3, [pc, #144]	; (800461c <menu+0x32fc>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	f083 0301 	eor.w	r3, r3, #1
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d007      	beq.n	80045a6 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <menu+0x32ec>)
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	4b23      	ldr	r3, [pc, #140]	; (8004628 <menu+0x3308>)
 800459c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80045a0:	4b27      	ldr	r3, [pc, #156]	; (8004640 <menu+0x3320>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80045a6:	4b27      	ldr	r3, [pc, #156]	; (8004644 <menu+0x3324>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b1f      	cmp	r3, #31
 80045ac:	f040 80b7 	bne.w	800471e <menu+0x33fe>
		calismaSayModu = 0;
 80045b0:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <menu+0x3304>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80045b6:	4a28      	ldr	r2, [pc, #160]	; (8004658 <menu+0x3338>)
 80045b8:	2101      	movs	r1, #1
 80045ba:	2001      	movs	r0, #1
 80045bc:	f003 fbc6 	bl	8007d4c <lcd_print>

		if(iotMode == 0) {
 80045c0:	4b26      	ldr	r3, [pc, #152]	; (800465c <menu+0x333c>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d113      	bne.n	80045f0 <menu+0x32d0>
			if(dilSecim == 0) {
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <menu+0x32ec>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80045d0:	4a23      	ldr	r2, [pc, #140]	; (8004660 <menu+0x3340>)
 80045d2:	2101      	movs	r1, #1
 80045d4:	2002      	movs	r0, #2
 80045d6:	f003 fbb9 	bl	8007d4c <lcd_print>
 80045da:	e050      	b.n	800467e <menu+0x335e>
			} else if(dilSecim == 1) {
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <menu+0x32ec>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d14c      	bne.n	800467e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <menu+0x3344>)
 80045e6:	2101      	movs	r1, #1
 80045e8:	2002      	movs	r0, #2
 80045ea:	f003 fbaf 	bl	8007d4c <lcd_print>
 80045ee:	e046      	b.n	800467e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <menu+0x333c>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d142      	bne.n	800467e <menu+0x335e>
			if(dilSecim == 0) {
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <menu+0x32ec>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d135      	bne.n	800466c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004600:	4a19      	ldr	r2, [pc, #100]	; (8004668 <menu+0x3348>)
 8004602:	2101      	movs	r1, #1
 8004604:	2002      	movs	r0, #2
 8004606:	f003 fba1 	bl	8007d4c <lcd_print>
 800460a:	e038      	b.n	800467e <menu+0x335e>
 800460c:	20000249 	.word	0x20000249
 8004610:	0800dab4 	.word	0x0800dab4
 8004614:	0800dae8 	.word	0x0800dae8
 8004618:	40010800 	.word	0x40010800
 800461c:	20000257 	.word	0x20000257
 8004620:	20000269 	.word	0x20000269
 8004624:	20000248 	.word	0x20000248
 8004628:	2000012c 	.word	0x2000012c
 800462c:	20000227 	.word	0x20000227
 8004630:	20000001 	.word	0x20000001
 8004634:	20000000 	.word	0x20000000
 8004638:	20000226 	.word	0x20000226
 800463c:	20000225 	.word	0x20000225
 8004640:	20000254 	.word	0x20000254
 8004644:	20000228 	.word	0x20000228
 8004648:	0800dafc 	.word	0x0800dafc
 800464c:	0800db10 	.word	0x0800db10
 8004650:	0800db24 	.word	0x0800db24
 8004654:	0800db38 	.word	0x0800db38
 8004658:	0800db4c 	.word	0x0800db4c
 800465c:	20000247 	.word	0x20000247
 8004660:	0800d3a4 	.word	0x0800d3a4
 8004664:	0800d3b8 	.word	0x0800d3b8
 8004668:	0800d404 	.word	0x0800d404
			} else if(dilSecim == 1) {
 800466c:	4b90      	ldr	r3, [pc, #576]	; (80048b0 <menu+0x3590>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d104      	bne.n	800467e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004674:	4a8f      	ldr	r2, [pc, #572]	; (80048b4 <menu+0x3594>)
 8004676:	2101      	movs	r1, #1
 8004678:	2002      	movs	r0, #2
 800467a:	f003 fb67 	bl	8007d4c <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800467e:	2102      	movs	r1, #2
 8004680:	488d      	ldr	r0, [pc, #564]	; (80048b8 <menu+0x3598>)
 8004682:	f004 fe89 	bl	8009398 <HAL_GPIO_ReadPin>
 8004686:	4603      	mov	r3, r0
 8004688:	2b01      	cmp	r3, #1
 800468a:	d115      	bne.n	80046b8 <menu+0x3398>
 800468c:	4b8b      	ldr	r3, [pc, #556]	; (80048bc <menu+0x359c>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	f083 0301 	eor.w	r3, r3, #1
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00e      	beq.n	80046b8 <menu+0x3398>
			iotMode = iotMode + 1;
 800469a:	4b89      	ldr	r3, [pc, #548]	; (80048c0 <menu+0x35a0>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	4b87      	ldr	r3, [pc, #540]	; (80048c0 <menu+0x35a0>)
 80046a4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80046a6:	4b86      	ldr	r3, [pc, #536]	; (80048c0 <menu+0x35a0>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d902      	bls.n	80046b4 <menu+0x3394>
				iotMode = 0;
 80046ae:	4b84      	ldr	r3, [pc, #528]	; (80048c0 <menu+0x35a0>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046b4:	f000 fa14 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046b8:	2104      	movs	r1, #4
 80046ba:	487f      	ldr	r0, [pc, #508]	; (80048b8 <menu+0x3598>)
 80046bc:	f004 fe6c 	bl	8009398 <HAL_GPIO_ReadPin>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d115      	bne.n	80046f2 <menu+0x33d2>
 80046c6:	4b7d      	ldr	r3, [pc, #500]	; (80048bc <menu+0x359c>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	f083 0301 	eor.w	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00e      	beq.n	80046f2 <menu+0x33d2>
			iotMode = iotMode - 1;
 80046d4:	4b7a      	ldr	r3, [pc, #488]	; (80048c0 <menu+0x35a0>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	3b01      	subs	r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	4b78      	ldr	r3, [pc, #480]	; (80048c0 <menu+0x35a0>)
 80046de:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80046e0:	4b77      	ldr	r3, [pc, #476]	; (80048c0 <menu+0x35a0>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <menu+0x33ce>
		   		iotMode = 1;
 80046e8:	4b75      	ldr	r3, [pc, #468]	; (80048c0 <menu+0x35a0>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80046ee:	f000 f9f7 	bl	8004ae0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046f2:	2108      	movs	r1, #8
 80046f4:	4870      	ldr	r0, [pc, #448]	; (80048b8 <menu+0x3598>)
 80046f6:	f004 fe4f 	bl	8009398 <HAL_GPIO_ReadPin>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d10e      	bne.n	800471e <menu+0x33fe>
 8004700:	4b6e      	ldr	r3, [pc, #440]	; (80048bc <menu+0x359c>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	f083 0301 	eor.w	r3, r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d007      	beq.n	800471e <menu+0x33fe>
			eepromData[48] = iotMode;
 800470e:	4b6c      	ldr	r3, [pc, #432]	; (80048c0 <menu+0x35a0>)
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	4b6c      	ldr	r3, [pc, #432]	; (80048c4 <menu+0x35a4>)
 8004714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004718:	4b6b      	ldr	r3, [pc, #428]	; (80048c8 <menu+0x35a8>)
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800471e:	4b6b      	ldr	r3, [pc, #428]	; (80048cc <menu+0x35ac>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b20      	cmp	r3, #32
 8004724:	d14d      	bne.n	80047c2 <menu+0x34a2>
		calismaSayModu = 0;
 8004726:	4b6a      	ldr	r3, [pc, #424]	; (80048d0 <menu+0x35b0>)
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800472c:	4b60      	ldr	r3, [pc, #384]	; (80048b0 <menu+0x3590>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d105      	bne.n	8004740 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 8004734:	4a67      	ldr	r2, [pc, #412]	; (80048d4 <menu+0x35b4>)
 8004736:	2101      	movs	r1, #1
 8004738:	2001      	movs	r0, #1
 800473a:	f003 fb07 	bl	8007d4c <lcd_print>
 800473e:	e004      	b.n	800474a <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004740:	4a65      	ldr	r2, [pc, #404]	; (80048d8 <menu+0x35b8>)
 8004742:	2101      	movs	r1, #1
 8004744:	2001      	movs	r0, #1
 8004746:	f003 fb01 	bl	8007d4c <lcd_print>
		}

		lcd_print(2, 1, machineID);
 800474a:	4a64      	ldr	r2, [pc, #400]	; (80048dc <menu+0x35bc>)
 800474c:	2101      	movs	r1, #1
 800474e:	2002      	movs	r0, #2
 8004750:	f003 fafc 	bl	8007d4c <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 8004754:	4861      	ldr	r0, [pc, #388]	; (80048dc <menu+0x35bc>)
 8004756:	f7fb fd65 	bl	8000224 <strlen>
 800475a:	4603      	mov	r3, r0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	3301      	adds	r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	4a5f      	ldr	r2, [pc, #380]	; (80048e0 <menu+0x35c0>)
 8004764:	4619      	mov	r1, r3
 8004766:	2002      	movs	r0, #2
 8004768:	f003 faf0 	bl	8007d4c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800476c:	2102      	movs	r1, #2
 800476e:	4852      	ldr	r0, [pc, #328]	; (80048b8 <menu+0x3598>)
 8004770:	f004 fe12 	bl	8009398 <HAL_GPIO_ReadPin>
 8004774:	4603      	mov	r3, r0
 8004776:	2b01      	cmp	r3, #1
 8004778:	d123      	bne.n	80047c2 <menu+0x34a2>
 800477a:	2104      	movs	r1, #4
 800477c:	484e      	ldr	r0, [pc, #312]	; (80048b8 <menu+0x3598>)
 800477e:	f004 fe0b 	bl	8009398 <HAL_GPIO_ReadPin>
 8004782:	4603      	mov	r3, r0
 8004784:	2b01      	cmp	r3, #1
 8004786:	d11c      	bne.n	80047c2 <menu+0x34a2>
 8004788:	4b4c      	ldr	r3, [pc, #304]	; (80048bc <menu+0x359c>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	f083 0301 	eor.w	r3, r3, #1
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d015      	beq.n	80047c2 <menu+0x34a2>
			takeMachineID();
 8004796:	f002 faaf 	bl	8006cf8 <takeMachineID>

			HAL_Delay(250);
 800479a:	20fa      	movs	r0, #250	; 0xfa
 800479c:	f004 f82c 	bl	80087f8 <HAL_Delay>
			lcd_print(2, 1, machineID);
 80047a0:	4a4e      	ldr	r2, [pc, #312]	; (80048dc <menu+0x35bc>)
 80047a2:	2101      	movs	r1, #1
 80047a4:	2002      	movs	r0, #2
 80047a6:	f003 fad1 	bl	8007d4c <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 80047aa:	484c      	ldr	r0, [pc, #304]	; (80048dc <menu+0x35bc>)
 80047ac:	f7fb fd3a 	bl	8000224 <strlen>
 80047b0:	4603      	mov	r3, r0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	3301      	adds	r3, #1
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4a49      	ldr	r2, [pc, #292]	; (80048e0 <menu+0x35c0>)
 80047ba:	4619      	mov	r1, r3
 80047bc:	2002      	movs	r0, #2
 80047be:	f003 fac5 	bl	8007d4c <lcd_print>
		}
	}

	if (menuSayac == 33) {
 80047c2:	4b42      	ldr	r3, [pc, #264]	; (80048cc <menu+0x35ac>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b21      	cmp	r3, #33	; 0x21
 80047c8:	d14f      	bne.n	800486a <menu+0x354a>
		calismaSayModu = 0;
 80047ca:	4b41      	ldr	r3, [pc, #260]	; (80048d0 <menu+0x35b0>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 80047d0:	4844      	ldr	r0, [pc, #272]	; (80048e4 <menu+0x35c4>)
 80047d2:	f7fb fd27 	bl	8000224 <strlen>
 80047d6:	4603      	mov	r3, r0
 80047d8:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 80047da:	4a43      	ldr	r2, [pc, #268]	; (80048e8 <menu+0x35c8>)
 80047dc:	2101      	movs	r1, #1
 80047de:	2001      	movs	r0, #1
 80047e0:	f003 fab4 	bl	8007d4c <lcd_print>

		if(ssidLength <=16) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	dc0e      	bgt.n	8004808 <menu+0x34e8>
			lcd_print(2, 1, wifiSSID);
 80047ea:	4a3e      	ldr	r2, [pc, #248]	; (80048e4 <menu+0x35c4>)
 80047ec:	2101      	movs	r1, #1
 80047ee:	2002      	movs	r0, #2
 80047f0:	f003 faac 	bl	8007d4c <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	4a38      	ldr	r2, [pc, #224]	; (80048e0 <menu+0x35c0>)
 80047fe:	4619      	mov	r1, r3
 8004800:	2002      	movs	r0, #2
 8004802:	f003 faa3 	bl	8007d4c <lcd_print>
 8004806:	e005      	b.n	8004814 <menu+0x34f4>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004808:	2300      	movs	r3, #0
 800480a:	2202      	movs	r2, #2
 800480c:	2101      	movs	r1, #1
 800480e:	4835      	ldr	r0, [pc, #212]	; (80048e4 <menu+0x35c4>)
 8004810:	f7fc fcca 	bl	80011a8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004814:	2102      	movs	r1, #2
 8004816:	4828      	ldr	r0, [pc, #160]	; (80048b8 <menu+0x3598>)
 8004818:	f004 fdbe 	bl	8009398 <HAL_GPIO_ReadPin>
 800481c:	4603      	mov	r3, r0
 800481e:	2b01      	cmp	r3, #1
 8004820:	d123      	bne.n	800486a <menu+0x354a>
 8004822:	2104      	movs	r1, #4
 8004824:	4824      	ldr	r0, [pc, #144]	; (80048b8 <menu+0x3598>)
 8004826:	f004 fdb7 	bl	8009398 <HAL_GPIO_ReadPin>
 800482a:	4603      	mov	r3, r0
 800482c:	2b01      	cmp	r3, #1
 800482e:	d11c      	bne.n	800486a <menu+0x354a>
 8004830:	4b22      	ldr	r3, [pc, #136]	; (80048bc <menu+0x359c>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	f083 0301 	eor.w	r3, r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d015      	beq.n	800486a <menu+0x354a>
			takeWifiSSID();
 800483e:	f002 fbef 	bl	8007020 <takeWifiSSID>

			HAL_Delay(250);
 8004842:	20fa      	movs	r0, #250	; 0xfa
 8004844:	f003 ffd8 	bl	80087f8 <HAL_Delay>
			lcd_print(2, 1, wifiSSID);
 8004848:	4a26      	ldr	r2, [pc, #152]	; (80048e4 <menu+0x35c4>)
 800484a:	2101      	movs	r1, #1
 800484c:	2002      	movs	r0, #2
 800484e:	f003 fa7d 	bl	8007d4c <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004852:	4824      	ldr	r0, [pc, #144]	; (80048e4 <menu+0x35c4>)
 8004854:	f7fb fce6 	bl	8000224 <strlen>
 8004858:	4603      	mov	r3, r0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	3301      	adds	r3, #1
 800485e:	b2db      	uxtb	r3, r3
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <menu+0x35c0>)
 8004862:	4619      	mov	r1, r3
 8004864:	2002      	movs	r0, #2
 8004866:	f003 fa71 	bl	8007d4c <lcd_print>
		}
	}

	if (menuSayac == 34) {
 800486a:	4b18      	ldr	r3, [pc, #96]	; (80048cc <menu+0x35ac>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b22      	cmp	r3, #34	; 0x22
 8004870:	d171      	bne.n	8004956 <menu+0x3636>
		calismaSayModu = 0;
 8004872:	4b17      	ldr	r3, [pc, #92]	; (80048d0 <menu+0x35b0>)
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 8004878:	481c      	ldr	r0, [pc, #112]	; (80048ec <menu+0x35cc>)
 800487a:	f7fb fcd3 	bl	8000224 <strlen>
 800487e:	4603      	mov	r3, r0
 8004880:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004882:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <menu+0x35d0>)
 8004884:	2101      	movs	r1, #1
 8004886:	2001      	movs	r0, #1
 8004888:	f003 fa60 	bl	8007d4c <lcd_print>

		if(passLength <= 16) {
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b10      	cmp	r3, #16
 8004890:	dc30      	bgt.n	80048f4 <menu+0x35d4>
			lcd_print(2, 1, wifiPass);
 8004892:	4a16      	ldr	r2, [pc, #88]	; (80048ec <menu+0x35cc>)
 8004894:	2101      	movs	r1, #1
 8004896:	2002      	movs	r0, #2
 8004898:	f003 fa58 	bl	8007d4c <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	3301      	adds	r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <menu+0x35c0>)
 80048a6:	4619      	mov	r1, r3
 80048a8:	2002      	movs	r0, #2
 80048aa:	f003 fa4f 	bl	8007d4c <lcd_print>
 80048ae:	e027      	b.n	8004900 <menu+0x35e0>
 80048b0:	20000249 	.word	0x20000249
 80048b4:	0800d418 	.word	0x0800d418
 80048b8:	40010800 	.word	0x40010800
 80048bc:	20000257 	.word	0x20000257
 80048c0:	20000247 	.word	0x20000247
 80048c4:	2000012c 	.word	0x2000012c
 80048c8:	20000254 	.word	0x20000254
 80048cc:	20000228 	.word	0x20000228
 80048d0:	20000248 	.word	0x20000248
 80048d4:	0800db60 	.word	0x0800db60
 80048d8:	0800db74 	.word	0x0800db74
 80048dc:	200001a4 	.word	0x200001a4
 80048e0:	20000010 	.word	0x20000010
 80048e4:	200001b0 	.word	0x200001b0
 80048e8:	0800db88 	.word	0x0800db88
 80048ec:	200001c4 	.word	0x200001c4
 80048f0:	0800db9c 	.word	0x0800db9c
		} else {
			slideText(wifiPass, 1, 2, 1);
 80048f4:	2301      	movs	r3, #1
 80048f6:	2202      	movs	r2, #2
 80048f8:	2101      	movs	r1, #1
 80048fa:	4842      	ldr	r0, [pc, #264]	; (8004a04 <menu+0x36e4>)
 80048fc:	f7fc fc54 	bl	80011a8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004900:	2102      	movs	r1, #2
 8004902:	4841      	ldr	r0, [pc, #260]	; (8004a08 <menu+0x36e8>)
 8004904:	f004 fd48 	bl	8009398 <HAL_GPIO_ReadPin>
 8004908:	4603      	mov	r3, r0
 800490a:	2b01      	cmp	r3, #1
 800490c:	d123      	bne.n	8004956 <menu+0x3636>
 800490e:	2104      	movs	r1, #4
 8004910:	483d      	ldr	r0, [pc, #244]	; (8004a08 <menu+0x36e8>)
 8004912:	f004 fd41 	bl	8009398 <HAL_GPIO_ReadPin>
 8004916:	4603      	mov	r3, r0
 8004918:	2b01      	cmp	r3, #1
 800491a:	d11c      	bne.n	8004956 <menu+0x3636>
 800491c:	4b3b      	ldr	r3, [pc, #236]	; (8004a0c <menu+0x36ec>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f083 0301 	eor.w	r3, r3, #1
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d015      	beq.n	8004956 <menu+0x3636>
			takeWifiPass();
 800492a:	f002 fd27 	bl	800737c <takeWifiPass>

			HAL_Delay(250);
 800492e:	20fa      	movs	r0, #250	; 0xfa
 8004930:	f003 ff62 	bl	80087f8 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004934:	4a33      	ldr	r2, [pc, #204]	; (8004a04 <menu+0x36e4>)
 8004936:	2101      	movs	r1, #1
 8004938:	2002      	movs	r0, #2
 800493a:	f003 fa07 	bl	8007d4c <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 800493e:	4831      	ldr	r0, [pc, #196]	; (8004a04 <menu+0x36e4>)
 8004940:	f7fb fc70 	bl	8000224 <strlen>
 8004944:	4603      	mov	r3, r0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	3301      	adds	r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	4a30      	ldr	r2, [pc, #192]	; (8004a10 <menu+0x36f0>)
 800494e:	4619      	mov	r1, r3
 8004950:	2002      	movs	r0, #2
 8004952:	f003 f9fb 	bl	8007d4c <lcd_print>
		}
	}

	if (menuSayac == 35) {
 8004956:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <menu+0x36f4>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b23      	cmp	r3, #35	; 0x23
 800495c:	d14d      	bne.n	80049fa <menu+0x36da>
		if(dilSecim == 0) {
 800495e:	4b2e      	ldr	r3, [pc, #184]	; (8004a18 <menu+0x36f8>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <menu+0x365c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004966:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <menu+0x36fc>)
 8004968:	2101      	movs	r1, #1
 800496a:	2001      	movs	r0, #1
 800496c:	f003 f9ee 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004970:	4a2b      	ldr	r2, [pc, #172]	; (8004a20 <menu+0x3700>)
 8004972:	2101      	movs	r1, #1
 8004974:	2002      	movs	r0, #2
 8004976:	f003 f9e9 	bl	8007d4c <lcd_print>
 800497a:	e00d      	b.n	8004998 <menu+0x3678>
		} else if(dilSecim == 1) {
 800497c:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <menu+0x36f8>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d109      	bne.n	8004998 <menu+0x3678>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004984:	4a27      	ldr	r2, [pc, #156]	; (8004a24 <menu+0x3704>)
 8004986:	2101      	movs	r1, #1
 8004988:	2001      	movs	r0, #1
 800498a:	f003 f9df 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800498e:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <menu+0x3708>)
 8004990:	2101      	movs	r1, #1
 8004992:	2002      	movs	r0, #2
 8004994:	f003 f9da 	bl	8007d4c <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004998:	2108      	movs	r1, #8
 800499a:	481b      	ldr	r0, [pc, #108]	; (8004a08 <menu+0x36e8>)
 800499c:	f004 fcfc 	bl	8009398 <HAL_GPIO_ReadPin>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d129      	bne.n	80049fa <menu+0x36da>
			menuGiris = 0;
 80049a6:	4b21      	ldr	r3, [pc, #132]	; (8004a2c <menu+0x370c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80049ac:	bf00      	nop
 80049ae:	4820      	ldr	r0, [pc, #128]	; (8004a30 <menu+0x3710>)
 80049b0:	f005 fb1b 	bl	8009fea <HAL_I2C_GetError>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d0f9      	beq.n	80049ae <menu+0x368e>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80049ba:	bf00      	nop
 80049bc:	481c      	ldr	r0, [pc, #112]	; (8004a30 <menu+0x3710>)
 80049be:	f005 fb07 	bl	8009fd0 <HAL_I2C_GetState>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d1f9      	bne.n	80049bc <menu+0x369c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80049c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80049cc:	9302      	str	r3, [sp, #8]
 80049ce:	236e      	movs	r3, #110	; 0x6e
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <menu+0x3714>)
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	236e      	movs	r3, #110	; 0x6e
 80049d8:	2200      	movs	r2, #0
 80049da:	21a0      	movs	r1, #160	; 0xa0
 80049dc:	4814      	ldr	r0, [pc, #80]	; (8004a30 <menu+0x3710>)
 80049de:	f004 ff95 	bl	800990c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80049e2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80049e6:	f003 ff07 	bl	80087f8 <HAL_Delay>

			lcd_clear();
 80049ea:	f003 f9db 	bl	8007da4 <lcd_clear>
			HAL_Delay(500);
 80049ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049f2:	f003 ff01 	bl	80087f8 <HAL_Delay>
			NVIC_SystemReset();
 80049f6:	f7fc fc7d 	bl	80012f4 <__NVIC_SystemReset>
		}
	}
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200001c4 	.word	0x200001c4
 8004a08:	40010800 	.word	0x40010800
 8004a0c:	20000257 	.word	0x20000257
 8004a10:	20000010 	.word	0x20000010
 8004a14:	20000228 	.word	0x20000228
 8004a18:	20000249 	.word	0x20000249
 8004a1c:	0800dbb0 	.word	0x0800dbb0
 8004a20:	0800dbc4 	.word	0x0800dbc4
 8004a24:	0800dbd8 	.word	0x0800dbd8
 8004a28:	0800dbec 	.word	0x0800dbec
 8004a2c:	20000245 	.word	0x20000245
 8004a30:	200002b8 	.word	0x200002b8
 8004a34:	2000012c 	.word	0x2000012c

08004a38 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a48:	4a22      	ldr	r2, [pc, #136]	; (8004ad4 <lcdUpdate+0x9c>)
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	2002      	movs	r0, #2
 8004a4e:	f003 f97d 	bl	8007d4c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a52:	e03b      	b.n	8004acc <lcdUpdate+0x94>
	} else if(y==2) {
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d105      	bne.n	8004a66 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <lcdUpdate+0x9c>)
 8004a5c:	2102      	movs	r1, #2
 8004a5e:	2002      	movs	r0, #2
 8004a60:	f003 f974 	bl	8007d4c <lcd_print>
}
 8004a64:	e032      	b.n	8004acc <lcdUpdate+0x94>
	} else if(y==3) {
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d105      	bne.n	8004a78 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004a6c:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <lcdUpdate+0x9c>)
 8004a6e:	2103      	movs	r1, #3
 8004a70:	2002      	movs	r0, #2
 8004a72:	f003 f96b 	bl	8007d4c <lcd_print>
}
 8004a76:	e029      	b.n	8004acc <lcdUpdate+0x94>
	} else if(y==4) {
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d105      	bne.n	8004a8a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <lcdUpdate+0x9c>)
 8004a80:	2104      	movs	r1, #4
 8004a82:	2002      	movs	r0, #2
 8004a84:	f003 f962 	bl	8007d4c <lcd_print>
}
 8004a88:	e020      	b.n	8004acc <lcdUpdate+0x94>
	} else if(y==5) {
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	2b05      	cmp	r3, #5
 8004a8e:	d105      	bne.n	8004a9c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004a90:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <lcdUpdate+0x9c>)
 8004a92:	2105      	movs	r1, #5
 8004a94:	2002      	movs	r0, #2
 8004a96:	f003 f959 	bl	8007d4c <lcd_print>
}
 8004a9a:	e017      	b.n	8004acc <lcdUpdate+0x94>
	} else if(y==6) {
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	2b06      	cmp	r3, #6
 8004aa0:	d105      	bne.n	8004aae <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004aa2:	4a0c      	ldr	r2, [pc, #48]	; (8004ad4 <lcdUpdate+0x9c>)
 8004aa4:	2106      	movs	r1, #6
 8004aa6:	2002      	movs	r0, #2
 8004aa8:	f003 f950 	bl	8007d4c <lcd_print>
}
 8004aac:	e00e      	b.n	8004acc <lcdUpdate+0x94>
	} else if (y==7) {
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	2b07      	cmp	r3, #7
 8004ab2:	d10b      	bne.n	8004acc <lcdUpdate+0x94>
		lcd_clear();
 8004ab4:	f003 f976 	bl	8007da4 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004ab8:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <lcdUpdate+0xa0>)
 8004aba:	2104      	movs	r1, #4
 8004abc:	2001      	movs	r0, #1
 8004abe:	f003 f945 	bl	8007d4c <lcd_print>
		lcd_print(2, 6, "RUN");
 8004ac2:	4a06      	ldr	r2, [pc, #24]	; (8004adc <lcdUpdate+0xa4>)
 8004ac4:	2106      	movs	r1, #6
 8004ac6:	2002      	movs	r0, #2
 8004ac8:	f003 f940 	bl	8007d4c <lcd_print>
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	0800dc00 	.word	0x0800dc00
 8004ad8:	0800dc04 	.word	0x0800dc04
 8004adc:	0800dc0c 	.word	0x0800dc0c

08004ae0 <bekle>:

void bekle() {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
	timer1=millis;
 8004ae4:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <bekle+0x124>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a47      	ldr	r2, [pc, #284]	; (8004c08 <bekle+0x128>)
 8004aea:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004aec:	e002      	b.n	8004af4 <bekle+0x14>
    	butonKontrol = 1;
 8004aee:	4b47      	ldr	r3, [pc, #284]	; (8004c0c <bekle+0x12c>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004af4:	2101      	movs	r1, #1
 8004af6:	4846      	ldr	r0, [pc, #280]	; (8004c10 <bekle+0x130>)
 8004af8:	f004 fc4e 	bl	8009398 <HAL_GPIO_ReadPin>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d109      	bne.n	8004b16 <bekle+0x36>
 8004b02:	4b40      	ldr	r3, [pc, #256]	; (8004c04 <bekle+0x124>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b40      	ldr	r3, [pc, #256]	; (8004c08 <bekle+0x128>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d0ef      	beq.n	8004aee <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b0e:	e002      	b.n	8004b16 <bekle+0x36>
    	butonKontrol = 1;
 8004b10:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <bekle+0x12c>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b16:	2108      	movs	r1, #8
 8004b18:	483e      	ldr	r0, [pc, #248]	; (8004c14 <bekle+0x134>)
 8004b1a:	f004 fc3d 	bl	8009398 <HAL_GPIO_ReadPin>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d109      	bne.n	8004b38 <bekle+0x58>
 8004b24:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <bekle+0x124>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b37      	ldr	r3, [pc, #220]	; (8004c08 <bekle+0x128>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d0ef      	beq.n	8004b10 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b30:	e002      	b.n	8004b38 <bekle+0x58>
    	butonKontrol = 1;
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <bekle+0x12c>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b38:	2102      	movs	r1, #2
 8004b3a:	4835      	ldr	r0, [pc, #212]	; (8004c10 <bekle+0x130>)
 8004b3c:	f004 fc2c 	bl	8009398 <HAL_GPIO_ReadPin>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d109      	bne.n	8004b5a <bekle+0x7a>
 8004b46:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <bekle+0x124>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b2f      	ldr	r3, [pc, #188]	; (8004c08 <bekle+0x128>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d0ef      	beq.n	8004b32 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b52:	e002      	b.n	8004b5a <bekle+0x7a>
    	butonKontrol = 1;
 8004b54:	4b2d      	ldr	r3, [pc, #180]	; (8004c0c <bekle+0x12c>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b5a:	2104      	movs	r1, #4
 8004b5c:	482c      	ldr	r0, [pc, #176]	; (8004c10 <bekle+0x130>)
 8004b5e:	f004 fc1b 	bl	8009398 <HAL_GPIO_ReadPin>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d109      	bne.n	8004b7c <bekle+0x9c>
 8004b68:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <bekle+0x124>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4b26      	ldr	r3, [pc, #152]	; (8004c08 <bekle+0x128>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d0ef      	beq.n	8004b54 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b74:	e002      	b.n	8004b7c <bekle+0x9c>
    	butonKontrol = 1;
 8004b76:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <bekle+0x12c>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b7c:	2108      	movs	r1, #8
 8004b7e:	4824      	ldr	r0, [pc, #144]	; (8004c10 <bekle+0x130>)
 8004b80:	f004 fc0a 	bl	8009398 <HAL_GPIO_ReadPin>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d109      	bne.n	8004b9e <bekle+0xbe>
 8004b8a:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <bekle+0x124>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <bekle+0x128>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d0ef      	beq.n	8004b76 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b96:	e002      	b.n	8004b9e <bekle+0xbe>
    	butonKontrol = 1;
 8004b98:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <bekle+0x12c>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004b9e:	2180      	movs	r1, #128	; 0x80
 8004ba0:	481c      	ldr	r0, [pc, #112]	; (8004c14 <bekle+0x134>)
 8004ba2:	f004 fbf9 	bl	8009398 <HAL_GPIO_ReadPin>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <bekle+0xe0>
 8004bac:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <bekle+0x124>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <bekle+0x128>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d0ef      	beq.n	8004b98 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bb8:	e002      	b.n	8004bc0 <bekle+0xe0>
    	butonKontrol = 1;
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <bekle+0x12c>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bc4:	4813      	ldr	r0, [pc, #76]	; (8004c14 <bekle+0x134>)
 8004bc6:	f004 fbe7 	bl	8009398 <HAL_GPIO_ReadPin>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d109      	bne.n	8004be4 <bekle+0x104>
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <bekle+0x124>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <bekle+0x128>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0ee      	beq.n	8004bba <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bdc:	e002      	b.n	8004be4 <bekle+0x104>
    	butonKontrol = 1;
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <bekle+0x12c>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004be8:	480a      	ldr	r0, [pc, #40]	; (8004c14 <bekle+0x134>)
 8004bea:	f004 fbd5 	bl	8009398 <HAL_GPIO_ReadPin>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <bekle+0x120>
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <bekle+0x124>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <bekle+0x128>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d0ee      	beq.n	8004bde <bekle+0xfe>
    }

}
 8004c00:	bf00      	nop
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000204 	.word	0x20000204
 8004c08:	2000020c 	.word	0x2000020c
 8004c0c:	20000257 	.word	0x20000257
 8004c10:	40010800 	.word	0x40010800
 8004c14:	40011000 	.word	0x40011000

08004c18 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <checkLCDBacklight+0x24>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <checkLCDBacklight+0x28>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b3b      	cmp	r3, #59	; 0x3b
 8004c28:	d903      	bls.n	8004c32 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f003 f8da 	bl	8007de4 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c30:	e002      	b.n	8004c38 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c32:	2001      	movs	r0, #1
 8004c34:	f003 f8d6 	bl	8007de4 <lcd_backlight>
}
 8004c38:	bf00      	nop
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20000204 	.word	0x20000204
 8004c40:	20000220 	.word	0x20000220

08004c44 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004c48:	4b13      	ldr	r3, [pc, #76]	; (8004c98 <checkBasincSalteri+0x54>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <checkBasincSalteri+0x12>
		basincVar=1;
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <checkBasincSalteri+0x58>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <checkBasincSalteri+0x54>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d119      	bne.n	8004c92 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c62:	480f      	ldr	r0, [pc, #60]	; (8004ca0 <checkBasincSalteri+0x5c>)
 8004c64:	f004 fb98 	bl	8009398 <HAL_GPIO_ReadPin>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <checkBasincSalteri+0x60>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <checkBasincSalteri+0x64>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d90a      	bls.n	8004c92 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004c7c:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <checkBasincSalteri+0x58>)
 8004c7e:	2201      	movs	r2, #1
 8004c80:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004c82:	e006      	b.n	8004c92 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <checkBasincSalteri+0x60>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a07      	ldr	r2, [pc, #28]	; (8004ca8 <checkBasincSalteri+0x64>)
 8004c8a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <checkBasincSalteri+0x58>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
}
 8004c92:	bf00      	nop
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	2000022f 	.word	0x2000022f
 8004c9c:	2000022b 	.word	0x2000022b
 8004ca0:	40011000 	.word	0x40011000
 8004ca4:	20000204 	.word	0x20000204
 8004ca8:	2000021c 	.word	0x2000021c

08004cac <checkBasGonder>:

void checkBasGonder() {
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <checkBasGonder+0x74>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d10b      	bne.n	8004cd0 <checkBasGonder+0x24>
 8004cb8:	4b1a      	ldr	r3, [pc, #104]	; (8004d24 <checkBasGonder+0x78>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <checkBasGonder+0x24>
 8004cc0:	4b19      	ldr	r3, [pc, #100]	; (8004d28 <checkBasGonder+0x7c>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d103      	bne.n	8004cd0 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <checkBasGonder+0x80>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e009      	b.n	8004ce4 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004cd0:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <checkBasGonder+0x78>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f083 0301 	eor.w	r3, r3, #1
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <checkBasGonder+0x80>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <checkBasGonder+0x74>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10b      	bne.n	8004d04 <checkBasGonder+0x58>
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <checkBasGonder+0x84>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <checkBasGonder+0x58>
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <checkBasGonder+0x7c>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <checkBasGonder+0x88>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004d02:	e009      	b.n	8004d18 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <checkBasGonder+0x84>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	f083 0301 	eor.w	r3, r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <checkBasGonder+0x88>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr
 8004d20:	20000229 	.word	0x20000229
 8004d24:	2000025d 	.word	0x2000025d
 8004d28:	20000237 	.word	0x20000237
 8004d2c:	20000264 	.word	0x20000264
 8004d30:	20000260 	.word	0x20000260
 8004d34:	20000265 	.word	0x20000265

08004d38 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d3c:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <checkKapiSecimleri+0x98>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <checkKapiSecimleri+0x9c>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004d4a:	4b21      	ldr	r3, [pc, #132]	; (8004dd0 <checkKapiSecimleri+0x98>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10e      	bne.n	8004d70 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d56:	4820      	ldr	r0, [pc, #128]	; (8004dd8 <checkKapiSecimleri+0xa0>)
 8004d58:	f004 fb1e 	bl	8009398 <HAL_GPIO_ReadPin>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <checkKapiSecimleri+0x9c>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	e002      	b.n	8004d70 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004d6a:	4b1a      	ldr	r3, [pc, #104]	; (8004dd4 <checkKapiSecimleri+0x9c>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004d70:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <checkKapiSecimleri+0x98>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d10e      	bne.n	8004d96 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d7c:	4816      	ldr	r0, [pc, #88]	; (8004dd8 <checkKapiSecimleri+0xa0>)
 8004d7e:	f004 fb0b 	bl	8009398 <HAL_GPIO_ReadPin>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004d88:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <checkKapiSecimleri+0x9c>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e002      	b.n	8004d96 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <checkKapiSecimleri+0x9c>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <checkKapiSecimleri+0x98>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d116      	bne.n	8004dcc <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004da2:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <checkKapiSecimleri+0xa0>)
 8004da4:	f004 faf8 	bl	8009398 <HAL_GPIO_ReadPin>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <checkKapiSecimleri+0x8e>
 8004dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004db2:	4809      	ldr	r0, [pc, #36]	; (8004dd8 <checkKapiSecimleri+0xa0>)
 8004db4:	f004 faf0 	bl	8009398 <HAL_GPIO_ReadPin>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <checkKapiSecimleri+0x9c>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004dc4:	e002      	b.n	8004dcc <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004dc6:	4b03      	ldr	r3, [pc, #12]	; (8004dd4 <checkKapiSecimleri+0x9c>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000230 	.word	0x20000230
 8004dd4:	2000027b 	.word	0x2000027b
 8004dd8:	40010800 	.word	0x40010800

08004ddc <checkAktifCalisma>:

void checkAktifCalisma() {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004de0:	4b62      	ldr	r3, [pc, #392]	; (8004f6c <checkAktifCalisma+0x190>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f041 833e 	bne.w	8006466 <checkAktifCalisma+0x168a>
 8004dea:	4b61      	ldr	r3, [pc, #388]	; (8004f70 <checkAktifCalisma+0x194>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f041 8339 	bne.w	8006466 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004df4:	4b5f      	ldr	r3, [pc, #380]	; (8004f74 <checkAktifCalisma+0x198>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11a      	bne.n	8004e32 <checkAktifCalisma+0x56>
 8004dfc:	4b5e      	ldr	r3, [pc, #376]	; (8004f78 <checkAktifCalisma+0x19c>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d116      	bne.n	8004e32 <checkAktifCalisma+0x56>
 8004e04:	4b5d      	ldr	r3, [pc, #372]	; (8004f7c <checkAktifCalisma+0x1a0>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <checkAktifCalisma+0x46>
 8004e0c:	4b5c      	ldr	r3, [pc, #368]	; (8004f80 <checkAktifCalisma+0x1a4>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f083 0301 	eor.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <checkAktifCalisma+0x46>
 8004e1a:	4b5a      	ldr	r3, [pc, #360]	; (8004f84 <checkAktifCalisma+0x1a8>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d007      	beq.n	8004e32 <checkAktifCalisma+0x56>
 8004e22:	4b59      	ldr	r3, [pc, #356]	; (8004f88 <checkAktifCalisma+0x1ac>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d018      	beq.n	8004e5c <checkAktifCalisma+0x80>
 8004e2a:	4b58      	ldr	r3, [pc, #352]	; (8004f8c <checkAktifCalisma+0x1b0>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d114      	bne.n	8004e5c <checkAktifCalisma+0x80>
 8004e32:	4b57      	ldr	r3, [pc, #348]	; (8004f90 <checkAktifCalisma+0x1b4>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d010      	beq.n	8004e5c <checkAktifCalisma+0x80>
 8004e3a:	4b56      	ldr	r3, [pc, #344]	; (8004f94 <checkAktifCalisma+0x1b8>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e42:	2201      	movs	r2, #1
 8004e44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e48:	4853      	ldr	r0, [pc, #332]	; (8004f98 <checkAktifCalisma+0x1bc>)
 8004e4a:	f004 fabc 	bl	80093c6 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004e4e:	4b53      	ldr	r3, [pc, #332]	; (8004f9c <checkAktifCalisma+0x1c0>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004e54:	4b52      	ldr	r3, [pc, #328]	; (8004fa0 <checkAktifCalisma+0x1c4>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]
 8004e5a:	e008      	b.n	8004e6e <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e62:	484d      	ldr	r0, [pc, #308]	; (8004f98 <checkAktifCalisma+0x1bc>)
 8004e64:	f004 faaf 	bl	80093c6 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004e68:	4b4c      	ldr	r3, [pc, #304]	; (8004f9c <checkAktifCalisma+0x1c0>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004e6e:	4b40      	ldr	r3, [pc, #256]	; (8004f70 <checkAktifCalisma+0x194>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d160      	bne.n	8004f38 <checkAktifCalisma+0x15c>
 8004e76:	4b46      	ldr	r3, [pc, #280]	; (8004f90 <checkAktifCalisma+0x1b4>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d05c      	beq.n	8004f38 <checkAktifCalisma+0x15c>
 8004e7e:	4b45      	ldr	r3, [pc, #276]	; (8004f94 <checkAktifCalisma+0x1b8>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d058      	beq.n	8004f38 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e8a:	4843      	ldr	r0, [pc, #268]	; (8004f98 <checkAktifCalisma+0x1bc>)
 8004e8c:	f004 fa84 	bl	8009398 <HAL_GPIO_ReadPin>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <checkAktifCalisma+0xc2>
 8004e96:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <checkAktifCalisma+0x1c8>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d04c      	beq.n	8004f38 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e9e:	2102      	movs	r1, #2
 8004ea0:	4841      	ldr	r0, [pc, #260]	; (8004fa8 <checkAktifCalisma+0x1cc>)
 8004ea2:	f004 fa79 	bl	8009398 <HAL_GPIO_ReadPin>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d145      	bne.n	8004f38 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004eac:	4b3f      	ldr	r3, [pc, #252]	; (8004fac <checkAktifCalisma+0x1d0>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d041      	beq.n	8004f38 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004eb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004eb8:	4837      	ldr	r0, [pc, #220]	; (8004f98 <checkAktifCalisma+0x1bc>)
 8004eba:	f004 fa6d 	bl	8009398 <HAL_GPIO_ReadPin>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d10e      	bne.n	8004ee2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ec8:	4833      	ldr	r0, [pc, #204]	; (8004f98 <checkAktifCalisma+0x1bc>)
 8004eca:	f004 fa65 	bl	8009398 <HAL_GPIO_ReadPin>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d106      	bne.n	8004ee2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004ed4:	2140      	movs	r1, #64	; 0x40
 8004ed6:	4834      	ldr	r0, [pc, #208]	; (8004fa8 <checkAktifCalisma+0x1cc>)
 8004ed8:	f004 fa5e 	bl	8009398 <HAL_GPIO_ReadPin>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d003      	beq.n	8004eea <checkAktifCalisma+0x10e>
 8004ee2:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <checkAktifCalisma+0x198>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d026      	beq.n	8004f38 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <checkAktifCalisma+0x1a0>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f083 0301 	eor.w	r3, r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01f      	beq.n	8004f38 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004ef8:	4b1f      	ldr	r3, [pc, #124]	; (8004f78 <checkAktifCalisma+0x19c>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	f083 0301 	eor.w	r3, r3, #1
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d018      	beq.n	8004f38 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004f06:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <checkAktifCalisma+0x1ac>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f083 0301 	eor.w	r3, r3, #1
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d011      	beq.n	8004f38 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004f14:	4b26      	ldr	r3, [pc, #152]	; (8004fb0 <checkAktifCalisma+0x1d4>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f083 0301 	eor.w	r3, r3, #1
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <checkAktifCalisma+0x1d8>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	f083 0301 	eor.w	r3, r3, #1
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f30:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <checkAktifCalisma+0x198>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	701a      	strb	r2, [r3, #0]
 8004f36:	e002      	b.n	8004f3e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004f38:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <checkAktifCalisma+0x198>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	; (8004f74 <checkAktifCalisma+0x198>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d03a      	beq.n	8004fbc <checkAktifCalisma+0x1e0>
 8004f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f4a:	4817      	ldr	r0, [pc, #92]	; (8004fa8 <checkAktifCalisma+0x1cc>)
 8004f4c:	f004 fa24 	bl	8009398 <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d132      	bne.n	8004fbc <checkAktifCalisma+0x1e0>
 8004f56:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <checkAktifCalisma+0x1dc>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d02e      	beq.n	8004fbc <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f64:	480c      	ldr	r0, [pc, #48]	; (8004f98 <checkAktifCalisma+0x1bc>)
 8004f66:	f004 fa2e 	bl	80093c6 <HAL_GPIO_WritePin>
 8004f6a:	e02d      	b.n	8004fc8 <checkAktifCalisma+0x1ec>
 8004f6c:	20000246 	.word	0x20000246
 8004f70:	20000245 	.word	0x20000245
 8004f74:	2000025d 	.word	0x2000025d
 8004f78:	2000025e 	.word	0x2000025e
 8004f7c:	20000260 	.word	0x20000260
 8004f80:	20000258 	.word	0x20000258
 8004f84:	2000023b 	.word	0x2000023b
 8004f88:	2000025f 	.word	0x2000025f
 8004f8c:	2000023a 	.word	0x2000023a
 8004f90:	2000027a 	.word	0x2000027a
 8004f94:	2000027b 	.word	0x2000027b
 8004f98:	40010c00 	.word	0x40010c00
 8004f9c:	2000027c 	.word	0x2000027c
 8004fa0:	20000267 	.word	0x20000267
 8004fa4:	20000264 	.word	0x20000264
 8004fa8:	40011000 	.word	0x40011000
 8004fac:	2000022b 	.word	0x2000022b
 8004fb0:	20000262 	.word	0x20000262
 8004fb4:	20000263 	.word	0x20000263
 8004fb8:	20000236 	.word	0x20000236
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fc2:	4860      	ldr	r0, [pc, #384]	; (8005144 <checkAktifCalisma+0x368>)
 8004fc4:	f004 f9ff 	bl	80093c6 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004fc8:	4b5f      	ldr	r3, [pc, #380]	; (8005148 <checkAktifCalisma+0x36c>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d013      	beq.n	8004ff8 <checkAktifCalisma+0x21c>
 8004fd0:	4b5e      	ldr	r3, [pc, #376]	; (800514c <checkAktifCalisma+0x370>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d007      	beq.n	8004fe8 <checkAktifCalisma+0x20c>
 8004fd8:	4b5c      	ldr	r3, [pc, #368]	; (800514c <checkAktifCalisma+0x370>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d003      	beq.n	8004fe8 <checkAktifCalisma+0x20c>
 8004fe0:	4b5b      	ldr	r3, [pc, #364]	; (8005150 <checkAktifCalisma+0x374>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d107      	bne.n	8004ff8 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004fe8:	2201      	movs	r2, #1
 8004fea:	2104      	movs	r1, #4
 8004fec:	4855      	ldr	r0, [pc, #340]	; (8005144 <checkAktifCalisma+0x368>)
 8004fee:	f004 f9ea 	bl	80093c6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004ff2:	4b58      	ldr	r3, [pc, #352]	; (8005154 <checkAktifCalisma+0x378>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004ff8:	4b56      	ldr	r3, [pc, #344]	; (8005154 <checkAktifCalisma+0x378>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d02f      	beq.n	8005060 <checkAktifCalisma+0x284>
 8005000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005004:	484f      	ldr	r0, [pc, #316]	; (8005144 <checkAktifCalisma+0x368>)
 8005006:	f004 f9c7 	bl	8009398 <HAL_GPIO_ReadPin>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	d106      	bne.n	800501e <checkAktifCalisma+0x242>
 8005010:	4b51      	ldr	r3, [pc, #324]	; (8005158 <checkAktifCalisma+0x37c>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f083 0301 	eor.w	r3, r3, #1
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <checkAktifCalisma+0x250>
 800501e:	2102      	movs	r1, #2
 8005020:	484e      	ldr	r0, [pc, #312]	; (800515c <checkAktifCalisma+0x380>)
 8005022:	f004 f9b9 	bl	8009398 <HAL_GPIO_ReadPin>
 8005026:	4603      	mov	r3, r0
 8005028:	2b01      	cmp	r3, #1
 800502a:	d119      	bne.n	8005060 <checkAktifCalisma+0x284>
 800502c:	4b4c      	ldr	r3, [pc, #304]	; (8005160 <checkAktifCalisma+0x384>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <checkAktifCalisma+0x284>
 8005034:	4b4b      	ldr	r3, [pc, #300]	; (8005164 <checkAktifCalisma+0x388>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d011      	beq.n	8005060 <checkAktifCalisma+0x284>
 800503c:	4b4a      	ldr	r3, [pc, #296]	; (8005168 <checkAktifCalisma+0x38c>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00d      	beq.n	8005060 <checkAktifCalisma+0x284>
 8005044:	4b49      	ldr	r3, [pc, #292]	; (800516c <checkAktifCalisma+0x390>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f083 0301 	eor.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d006      	beq.n	8005060 <checkAktifCalisma+0x284>
			timer2=millis;
 8005052:	4b47      	ldr	r3, [pc, #284]	; (8005170 <checkAktifCalisma+0x394>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a47      	ldr	r2, [pc, #284]	; (8005174 <checkAktifCalisma+0x398>)
 8005058:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800505a:	4b44      	ldr	r3, [pc, #272]	; (800516c <checkAktifCalisma+0x390>)
 800505c:	2201      	movs	r2, #1
 800505e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005060:	4b43      	ldr	r3, [pc, #268]	; (8005170 <checkAktifCalisma+0x394>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4b43      	ldr	r3, [pc, #268]	; (8005174 <checkAktifCalisma+0x398>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	4a43      	ldr	r2, [pc, #268]	; (8005178 <checkAktifCalisma+0x39c>)
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	4293      	cmp	r3, r2
 8005070:	d303      	bcc.n	800507a <checkAktifCalisma+0x29e>
 8005072:	4b3e      	ldr	r3, [pc, #248]	; (800516c <checkAktifCalisma+0x390>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d111      	bne.n	800509e <checkAktifCalisma+0x2c2>
 800507a:	4b39      	ldr	r3, [pc, #228]	; (8005160 <checkAktifCalisma+0x384>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f083 0301 	eor.w	r3, r3, #1
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <checkAktifCalisma+0x2c2>
 8005088:	4b36      	ldr	r3, [pc, #216]	; (8005164 <checkAktifCalisma+0x388>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	f083 0301 	eor.w	r3, r3, #1
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <checkAktifCalisma+0x2c2>
 8005096:	4b34      	ldr	r3, [pc, #208]	; (8005168 <checkAktifCalisma+0x38c>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800509e:	2200      	movs	r2, #0
 80050a0:	2104      	movs	r1, #4
 80050a2:	4828      	ldr	r0, [pc, #160]	; (8005144 <checkAktifCalisma+0x368>)
 80050a4:	f004 f98f 	bl	80093c6 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80050a8:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <checkAktifCalisma+0x378>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80050ae:	4b2f      	ldr	r3, [pc, #188]	; (800516c <checkAktifCalisma+0x390>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80050b4:	4b31      	ldr	r3, [pc, #196]	; (800517c <checkAktifCalisma+0x3a0>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80050bc:	4b30      	ldr	r3, [pc, #192]	; (8005180 <checkAktifCalisma+0x3a4>)
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80050c2:	4b2e      	ldr	r3, [pc, #184]	; (800517c <checkAktifCalisma+0x3a0>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d116      	bne.n	80050f8 <checkAktifCalisma+0x31c>
 80050ca:	4b2e      	ldr	r3, [pc, #184]	; (8005184 <checkAktifCalisma+0x3a8>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d112      	bne.n	80050f8 <checkAktifCalisma+0x31c>
 80050d2:	2101      	movs	r1, #1
 80050d4:	4821      	ldr	r0, [pc, #132]	; (800515c <checkAktifCalisma+0x380>)
 80050d6:	f004 f95f 	bl	8009398 <HAL_GPIO_ReadPin>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <checkAktifCalisma+0x31c>
 80050e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050e4:	4817      	ldr	r0, [pc, #92]	; (8005144 <checkAktifCalisma+0x368>)
 80050e6:	f004 f957 	bl	8009398 <HAL_GPIO_ReadPin>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 80050f0:	4b23      	ldr	r3, [pc, #140]	; (8005180 <checkAktifCalisma+0x3a4>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	e011      	b.n	800511c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80050f8:	4b20      	ldr	r3, [pc, #128]	; (800517c <checkAktifCalisma+0x3a0>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d10d      	bne.n	800511c <checkAktifCalisma+0x340>
 8005100:	2101      	movs	r1, #1
 8005102:	4816      	ldr	r0, [pc, #88]	; (800515c <checkAktifCalisma+0x380>)
 8005104:	f004 f948 	bl	8009398 <HAL_GPIO_ReadPin>
 8005108:	4603      	mov	r3, r0
 800510a:	2b01      	cmp	r3, #1
 800510c:	d106      	bne.n	800511c <checkAktifCalisma+0x340>
 800510e:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <checkAktifCalisma+0x3a8>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d102      	bne.n	800511c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <checkAktifCalisma+0x3a4>)
 8005118:	2200      	movs	r2, #0
 800511a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800511c:	4b17      	ldr	r3, [pc, #92]	; (800517c <checkAktifCalisma+0x3a0>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d134      	bne.n	800518e <checkAktifCalisma+0x3b2>
 8005124:	4b17      	ldr	r3, [pc, #92]	; (8005184 <checkAktifCalisma+0x3a8>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d130      	bne.n	800518e <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800512c:	2101      	movs	r1, #1
 800512e:	480b      	ldr	r0, [pc, #44]	; (800515c <checkAktifCalisma+0x380>)
 8005130:	f004 f932 	bl	8009398 <HAL_GPIO_ReadPin>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d126      	bne.n	8005188 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800513a:	4b11      	ldr	r3, [pc, #68]	; (8005180 <checkAktifCalisma+0x3a4>)
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e025      	b.n	800518e <checkAktifCalisma+0x3b2>
 8005142:	bf00      	nop
 8005144:	40010c00 	.word	0x40010c00
 8005148:	2000025d 	.word	0x2000025d
 800514c:	20000237 	.word	0x20000237
 8005150:	2000023b 	.word	0x2000023b
 8005154:	20000261 	.word	0x20000261
 8005158:	20000264 	.word	0x20000264
 800515c:	40011000 	.word	0x40011000
 8005160:	2000027a 	.word	0x2000027a
 8005164:	2000027b 	.word	0x2000027b
 8005168:	2000022b 	.word	0x2000022b
 800516c:	20000259 	.word	0x20000259
 8005170:	20000204 	.word	0x20000204
 8005174:	20000210 	.word	0x20000210
 8005178:	2000023c 	.word	0x2000023c
 800517c:	2000022c 	.word	0x2000022c
 8005180:	2000027f 	.word	0x2000027f
 8005184:	20000229 	.word	0x20000229
			} else {
				cerceveVar=0;
 8005188:	4b7f      	ldr	r3, [pc, #508]	; (8005388 <checkAktifCalisma+0x5ac>)
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800518e:	4b7f      	ldr	r3, [pc, #508]	; (800538c <checkAktifCalisma+0x5b0>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d17c      	bne.n	8005290 <checkAktifCalisma+0x4b4>
 8005196:	4b7e      	ldr	r3, [pc, #504]	; (8005390 <checkAktifCalisma+0x5b4>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d078      	beq.n	8005290 <checkAktifCalisma+0x4b4>
 800519e:	4b7d      	ldr	r3, [pc, #500]	; (8005394 <checkAktifCalisma+0x5b8>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d074      	beq.n	8005290 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80051a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051aa:	487b      	ldr	r0, [pc, #492]	; (8005398 <checkAktifCalisma+0x5bc>)
 80051ac:	f004 f8f4 	bl	8009398 <HAL_GPIO_ReadPin>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <checkAktifCalisma+0x3e2>
 80051b6:	4b79      	ldr	r3, [pc, #484]	; (800539c <checkAktifCalisma+0x5c0>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d068      	beq.n	8005290 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80051be:	4b72      	ldr	r3, [pc, #456]	; (8005388 <checkAktifCalisma+0x5ac>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d064      	beq.n	8005290 <checkAktifCalisma+0x4b4>
 80051c6:	4b76      	ldr	r3, [pc, #472]	; (80053a0 <checkAktifCalisma+0x5c4>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	f083 0301 	eor.w	r3, r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d05d      	beq.n	8005290 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80051d4:	2104      	movs	r1, #4
 80051d6:	4873      	ldr	r0, [pc, #460]	; (80053a4 <checkAktifCalisma+0x5c8>)
 80051d8:	f004 f8de 	bl	8009398 <HAL_GPIO_ReadPin>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <checkAktifCalisma+0x40e>
 80051e2:	4b71      	ldr	r3, [pc, #452]	; (80053a8 <checkAktifCalisma+0x5cc>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d152      	bne.n	8005290 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80051ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051ee:	486a      	ldr	r0, [pc, #424]	; (8005398 <checkAktifCalisma+0x5bc>)
 80051f0:	f004 f8d2 	bl	8009398 <HAL_GPIO_ReadPin>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d10e      	bne.n	8005218 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80051fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051fe:	4866      	ldr	r0, [pc, #408]	; (8005398 <checkAktifCalisma+0x5bc>)
 8005200:	f004 f8ca 	bl	8009398 <HAL_GPIO_ReadPin>
 8005204:	4603      	mov	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d106      	bne.n	8005218 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800520a:	2140      	movs	r1, #64	; 0x40
 800520c:	4865      	ldr	r0, [pc, #404]	; (80053a4 <checkAktifCalisma+0x5c8>)
 800520e:	f004 f8c3 	bl	8009398 <HAL_GPIO_ReadPin>
 8005212:	4603      	mov	r3, r0
 8005214:	2b01      	cmp	r3, #1
 8005216:	d003      	beq.n	8005220 <checkAktifCalisma+0x444>
 8005218:	4b64      	ldr	r3, [pc, #400]	; (80053ac <checkAktifCalisma+0x5d0>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d037      	beq.n	8005290 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005220:	4b63      	ldr	r3, [pc, #396]	; (80053b0 <checkAktifCalisma+0x5d4>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	f083 0301 	eor.w	r3, r3, #1
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d030      	beq.n	8005290 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800522e:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <checkAktifCalisma+0x5d8>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	f083 0301 	eor.w	r3, r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d029      	beq.n	8005290 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800523c:	4b5e      	ldr	r3, [pc, #376]	; (80053b8 <checkAktifCalisma+0x5dc>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	f083 0301 	eor.w	r3, r3, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d022      	beq.n	8005290 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800524a:	4b5c      	ldr	r3, [pc, #368]	; (80053bc <checkAktifCalisma+0x5e0>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	f083 0301 	eor.w	r3, r3, #1
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d01b      	beq.n	8005290 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005258:	4b59      	ldr	r3, [pc, #356]	; (80053c0 <checkAktifCalisma+0x5e4>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	f083 0301 	eor.w	r3, r3, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d014      	beq.n	8005290 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005266:	4b57      	ldr	r3, [pc, #348]	; (80053c4 <checkAktifCalisma+0x5e8>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	f083 0301 	eor.w	r3, r3, #1
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00d      	beq.n	8005290 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005274:	2201      	movs	r2, #1
 8005276:	2102      	movs	r1, #2
 8005278:	4847      	ldr	r0, [pc, #284]	; (8005398 <checkAktifCalisma+0x5bc>)
 800527a:	f004 f8a4 	bl	80093c6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800527e:	4b4b      	ldr	r3, [pc, #300]	; (80053ac <checkAktifCalisma+0x5d0>)
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005284:	4b50      	ldr	r3, [pc, #320]	; (80053c8 <checkAktifCalisma+0x5ec>)
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800528a:	4b50      	ldr	r3, [pc, #320]	; (80053cc <checkAktifCalisma+0x5f0>)
 800528c:	2201      	movs	r2, #1
 800528e:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005290:	4b46      	ldr	r3, [pc, #280]	; (80053ac <checkAktifCalisma+0x5d0>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d033      	beq.n	8005300 <checkAktifCalisma+0x524>
 8005298:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800529c:	483e      	ldr	r0, [pc, #248]	; (8005398 <checkAktifCalisma+0x5bc>)
 800529e:	f004 f87b 	bl	8009398 <HAL_GPIO_ReadPin>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d106      	bne.n	80052b6 <checkAktifCalisma+0x4da>
 80052a8:	4b3c      	ldr	r3, [pc, #240]	; (800539c <checkAktifCalisma+0x5c0>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	f083 0301 	eor.w	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <checkAktifCalisma+0x4f0>
 80052b6:	2104      	movs	r1, #4
 80052b8:	483a      	ldr	r0, [pc, #232]	; (80053a4 <checkAktifCalisma+0x5c8>)
 80052ba:	f004 f86d 	bl	8009398 <HAL_GPIO_ReadPin>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d11d      	bne.n	8005300 <checkAktifCalisma+0x524>
 80052c4:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <checkAktifCalisma+0x5cc>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d019      	beq.n	8005300 <checkAktifCalisma+0x524>
 80052cc:	4b30      	ldr	r3, [pc, #192]	; (8005390 <checkAktifCalisma+0x5b4>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d015      	beq.n	8005300 <checkAktifCalisma+0x524>
 80052d4:	4b2f      	ldr	r3, [pc, #188]	; (8005394 <checkAktifCalisma+0x5b8>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d011      	beq.n	8005300 <checkAktifCalisma+0x524>
 80052dc:	4b2a      	ldr	r3, [pc, #168]	; (8005388 <checkAktifCalisma+0x5ac>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00d      	beq.n	8005300 <checkAktifCalisma+0x524>
 80052e4:	4b3a      	ldr	r3, [pc, #232]	; (80053d0 <checkAktifCalisma+0x5f4>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	f083 0301 	eor.w	r3, r3, #1
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <checkAktifCalisma+0x524>
			timer2=millis;
 80052f2:	4b38      	ldr	r3, [pc, #224]	; (80053d4 <checkAktifCalisma+0x5f8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a38      	ldr	r2, [pc, #224]	; (80053d8 <checkAktifCalisma+0x5fc>)
 80052f8:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80052fa:	4b35      	ldr	r3, [pc, #212]	; (80053d0 <checkAktifCalisma+0x5f4>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005300:	4b34      	ldr	r3, [pc, #208]	; (80053d4 <checkAktifCalisma+0x5f8>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4b34      	ldr	r3, [pc, #208]	; (80053d8 <checkAktifCalisma+0x5fc>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	4a34      	ldr	r2, [pc, #208]	; (80053dc <checkAktifCalisma+0x600>)
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	4293      	cmp	r3, r2
 8005310:	d303      	bcc.n	800531a <checkAktifCalisma+0x53e>
 8005312:	4b2f      	ldr	r3, [pc, #188]	; (80053d0 <checkAktifCalisma+0x5f4>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d114      	bne.n	8005344 <checkAktifCalisma+0x568>
 800531a:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <checkAktifCalisma+0x5b4>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	f083 0301 	eor.w	r3, r3, #1
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10d      	bne.n	8005344 <checkAktifCalisma+0x568>
 8005328:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <checkAktifCalisma+0x5b8>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	f083 0301 	eor.w	r3, r3, #1
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <checkAktifCalisma+0x568>
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <checkAktifCalisma+0x5ac>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f083 0301 	eor.w	r3, r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005344:	2200      	movs	r2, #0
 8005346:	2102      	movs	r1, #2
 8005348:	4813      	ldr	r0, [pc, #76]	; (8005398 <checkAktifCalisma+0x5bc>)
 800534a:	f004 f83c 	bl	80093c6 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800534e:	4b17      	ldr	r3, [pc, #92]	; (80053ac <checkAktifCalisma+0x5d0>)
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005354:	4b1e      	ldr	r3, [pc, #120]	; (80053d0 <checkAktifCalisma+0x5f4>)
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800535a:	4b14      	ldr	r3, [pc, #80]	; (80053ac <checkAktifCalisma+0x5d0>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d040      	beq.n	80053e4 <checkAktifCalisma+0x608>
 8005362:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005366:	480f      	ldr	r0, [pc, #60]	; (80053a4 <checkAktifCalisma+0x5c8>)
 8005368:	f004 f816 	bl	8009398 <HAL_GPIO_ReadPin>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d138      	bne.n	80053e4 <checkAktifCalisma+0x608>
 8005372:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <checkAktifCalisma+0x604>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d034      	beq.n	80053e4 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800537a:	2201      	movs	r2, #1
 800537c:	2101      	movs	r1, #1
 800537e:	4806      	ldr	r0, [pc, #24]	; (8005398 <checkAktifCalisma+0x5bc>)
 8005380:	f004 f821 	bl	80093c6 <HAL_GPIO_WritePin>
 8005384:	e033      	b.n	80053ee <checkAktifCalisma+0x612>
 8005386:	bf00      	nop
 8005388:	2000027f 	.word	0x2000027f
 800538c:	20000245 	.word	0x20000245
 8005390:	2000027a 	.word	0x2000027a
 8005394:	2000027b 	.word	0x2000027b
 8005398:	40010c00 	.word	0x40010c00
 800539c:	20000265 	.word	0x20000265
 80053a0:	20000279 	.word	0x20000279
 80053a4:	40011000 	.word	0x40011000
 80053a8:	2000022e 	.word	0x2000022e
 80053ac:	20000260 	.word	0x20000260
 80053b0:	2000025d 	.word	0x2000025d
 80053b4:	20000261 	.word	0x20000261
 80053b8:	2000025e 	.word	0x2000025e
 80053bc:	2000025f 	.word	0x2000025f
 80053c0:	20000262 	.word	0x20000262
 80053c4:	20000263 	.word	0x20000263
 80053c8:	20000268 	.word	0x20000268
 80053cc:	20000289 	.word	0x20000289
 80053d0:	20000258 	.word	0x20000258
 80053d4:	20000204 	.word	0x20000204
 80053d8:	20000210 	.word	0x20000210
 80053dc:	2000023d 	.word	0x2000023d
 80053e0:	2000022d 	.word	0x2000022d
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80053e4:	2200      	movs	r2, #0
 80053e6:	2101      	movs	r1, #1
 80053e8:	4836      	ldr	r0, [pc, #216]	; (80054c4 <checkAktifCalisma+0x6e8>)
 80053ea:	f003 ffec 	bl	80093c6 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80053ee:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <checkAktifCalisma+0x6ec>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f040 8080 	bne.w	80054f8 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053f8:	4b34      	ldr	r3, [pc, #208]	; (80054cc <checkAktifCalisma+0x6f0>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d003      	beq.n	8005408 <checkAktifCalisma+0x62c>
 8005400:	4b32      	ldr	r3, [pc, #200]	; (80054cc <checkAktifCalisma+0x6f0>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d177      	bne.n	80054f8 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005408:	4b31      	ldr	r3, [pc, #196]	; (80054d0 <checkAktifCalisma+0x6f4>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d073      	beq.n	80054f8 <checkAktifCalisma+0x71c>
 8005410:	4b30      	ldr	r3, [pc, #192]	; (80054d4 <checkAktifCalisma+0x6f8>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d06f      	beq.n	80054f8 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005418:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800541c:	4829      	ldr	r0, [pc, #164]	; (80054c4 <checkAktifCalisma+0x6e8>)
 800541e:	f003 ffbb 	bl	8009398 <HAL_GPIO_ReadPin>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d167      	bne.n	80054f8 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800542c:	482a      	ldr	r0, [pc, #168]	; (80054d8 <checkAktifCalisma+0x6fc>)
 800542e:	f003 ffb3 	bl	8009398 <HAL_GPIO_ReadPin>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <checkAktifCalisma+0x664>
 8005438:	4b28      	ldr	r3, [pc, #160]	; (80054dc <checkAktifCalisma+0x700>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d15b      	bne.n	80054f8 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005440:	2140      	movs	r1, #64	; 0x40
 8005442:	4825      	ldr	r0, [pc, #148]	; (80054d8 <checkAktifCalisma+0x6fc>)
 8005444:	f003 ffa8 	bl	8009398 <HAL_GPIO_ReadPin>
 8005448:	4603      	mov	r3, r0
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10f      	bne.n	800546e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800544e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005452:	481c      	ldr	r0, [pc, #112]	; (80054c4 <checkAktifCalisma+0x6e8>)
 8005454:	f003 ffa0 	bl	8009398 <HAL_GPIO_ReadPin>
 8005458:	4603      	mov	r3, r0
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800545e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005462:	4818      	ldr	r0, [pc, #96]	; (80054c4 <checkAktifCalisma+0x6e8>)
 8005464:	f003 ff98 	bl	8009398 <HAL_GPIO_ReadPin>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d003      	beq.n	8005476 <checkAktifCalisma+0x69a>
 800546e:	4b1c      	ldr	r3, [pc, #112]	; (80054e0 <checkAktifCalisma+0x704>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d040      	beq.n	80054f8 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005476:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <checkAktifCalisma+0x708>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f083 0301 	eor.w	r3, r3, #1
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d039      	beq.n	80054f8 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005484:	4b18      	ldr	r3, [pc, #96]	; (80054e8 <checkAktifCalisma+0x70c>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f083 0301 	eor.w	r3, r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d032      	beq.n	80054f8 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005492:	4b16      	ldr	r3, [pc, #88]	; (80054ec <checkAktifCalisma+0x710>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f083 0301 	eor.w	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d02b      	beq.n	80054f8 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <checkAktifCalisma+0x714>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	f083 0301 	eor.w	r3, r3, #1
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d024      	beq.n	80054f8 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80054ae:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <checkAktifCalisma+0x718>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f083 0301 	eor.w	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01d      	beq.n	80054f8 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80054bc:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <checkAktifCalisma+0x704>)
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e01c      	b.n	80054fe <checkAktifCalisma+0x722>
 80054c4:	40010c00 	.word	0x40010c00
 80054c8:	20000245 	.word	0x20000245
 80054cc:	20000237 	.word	0x20000237
 80054d0:	2000027a 	.word	0x2000027a
 80054d4:	2000027b 	.word	0x2000027b
 80054d8:	40011000 	.word	0x40011000
 80054dc:	20000238 	.word	0x20000238
 80054e0:	2000025e 	.word	0x2000025e
 80054e4:	2000025d 	.word	0x2000025d
 80054e8:	20000261 	.word	0x20000261
 80054ec:	20000260 	.word	0x20000260
 80054f0:	2000025f 	.word	0x2000025f
 80054f4:	20000263 	.word	0x20000263
		} else {
			devmotoryukaricalisiyor=0;
 80054f8:	4b64      	ldr	r3, [pc, #400]	; (800568c <checkAktifCalisma+0x8b0>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80054fe:	4b63      	ldr	r3, [pc, #396]	; (800568c <checkAktifCalisma+0x8b0>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005506:	2201      	movs	r2, #1
 8005508:	2120      	movs	r1, #32
 800550a:	4861      	ldr	r0, [pc, #388]	; (8005690 <checkAktifCalisma+0x8b4>)
 800550c:	f003 ff5b 	bl	80093c6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005510:	4b60      	ldr	r3, [pc, #384]	; (8005694 <checkAktifCalisma+0x8b8>)
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005516:	4b5f      	ldr	r3, [pc, #380]	; (8005694 <checkAktifCalisma+0x8b8>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d025      	beq.n	800556a <checkAktifCalisma+0x78e>
 800551e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005522:	485d      	ldr	r0, [pc, #372]	; (8005698 <checkAktifCalisma+0x8bc>)
 8005524:	f003 ff38 	bl	8009398 <HAL_GPIO_ReadPin>
 8005528:	4603      	mov	r3, r0
 800552a:	2b01      	cmp	r3, #1
 800552c:	d007      	beq.n	800553e <checkAktifCalisma+0x762>
 800552e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005532:	4857      	ldr	r0, [pc, #348]	; (8005690 <checkAktifCalisma+0x8b4>)
 8005534:	f003 ff30 	bl	8009398 <HAL_GPIO_ReadPin>
 8005538:	4603      	mov	r3, r0
 800553a:	2b01      	cmp	r3, #1
 800553c:	d115      	bne.n	800556a <checkAktifCalisma+0x78e>
 800553e:	4b57      	ldr	r3, [pc, #348]	; (800569c <checkAktifCalisma+0x8c0>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d011      	beq.n	800556a <checkAktifCalisma+0x78e>
 8005546:	4b56      	ldr	r3, [pc, #344]	; (80056a0 <checkAktifCalisma+0x8c4>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <checkAktifCalisma+0x78e>
 800554e:	4b55      	ldr	r3, [pc, #340]	; (80056a4 <checkAktifCalisma+0x8c8>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	f083 0301 	eor.w	r3, r3, #1
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <checkAktifCalisma+0x78e>
			timer2=millis;
 800555c:	4b52      	ldr	r3, [pc, #328]	; (80056a8 <checkAktifCalisma+0x8cc>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a52      	ldr	r2, [pc, #328]	; (80056ac <checkAktifCalisma+0x8d0>)
 8005562:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005564:	4b4f      	ldr	r3, [pc, #316]	; (80056a4 <checkAktifCalisma+0x8c8>)
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800556a:	4b4f      	ldr	r3, [pc, #316]	; (80056a8 <checkAktifCalisma+0x8cc>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4b4f      	ldr	r3, [pc, #316]	; (80056ac <checkAktifCalisma+0x8d0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	4a4e      	ldr	r2, [pc, #312]	; (80056b0 <checkAktifCalisma+0x8d4>)
 8005576:	7812      	ldrb	r2, [r2, #0]
 8005578:	4293      	cmp	r3, r2
 800557a:	d303      	bcc.n	8005584 <checkAktifCalisma+0x7a8>
 800557c:	4b49      	ldr	r3, [pc, #292]	; (80056a4 <checkAktifCalisma+0x8c8>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10d      	bne.n	80055a0 <checkAktifCalisma+0x7c4>
 8005584:	4b45      	ldr	r3, [pc, #276]	; (800569c <checkAktifCalisma+0x8c0>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f083 0301 	eor.w	r3, r3, #1
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <checkAktifCalisma+0x7c4>
 8005592:	4b43      	ldr	r3, [pc, #268]	; (80056a0 <checkAktifCalisma+0x8c4>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f083 0301 	eor.w	r3, r3, #1
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80055a0:	2200      	movs	r2, #0
 80055a2:	2120      	movs	r1, #32
 80055a4:	483a      	ldr	r0, [pc, #232]	; (8005690 <checkAktifCalisma+0x8b4>)
 80055a6:	f003 ff0e 	bl	80093c6 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80055aa:	4b3a      	ldr	r3, [pc, #232]	; (8005694 <checkAktifCalisma+0x8b8>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80055b0:	4b3c      	ldr	r3, [pc, #240]	; (80056a4 <checkAktifCalisma+0x8c8>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80055b6:	4b3f      	ldr	r3, [pc, #252]	; (80056b4 <checkAktifCalisma+0x8d8>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f040 8088 	bne.w	80056d0 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80055c0:	4b3d      	ldr	r3, [pc, #244]	; (80056b8 <checkAktifCalisma+0x8dc>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d003      	beq.n	80055d0 <checkAktifCalisma+0x7f4>
 80055c8:	4b3b      	ldr	r3, [pc, #236]	; (80056b8 <checkAktifCalisma+0x8dc>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d17f      	bne.n	80056d0 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80055d0:	4b32      	ldr	r3, [pc, #200]	; (800569c <checkAktifCalisma+0x8c0>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d07b      	beq.n	80056d0 <checkAktifCalisma+0x8f4>
 80055d8:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <checkAktifCalisma+0x8c4>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d077      	beq.n	80056d0 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80055e0:	2140      	movs	r1, #64	; 0x40
 80055e2:	482b      	ldr	r0, [pc, #172]	; (8005690 <checkAktifCalisma+0x8b4>)
 80055e4:	f003 fed8 	bl	8009398 <HAL_GPIO_ReadPin>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d170      	bne.n	80056d0 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80055ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055f2:	4827      	ldr	r0, [pc, #156]	; (8005690 <checkAktifCalisma+0x8b4>)
 80055f4:	f003 fed0 	bl	8009398 <HAL_GPIO_ReadPin>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <checkAktifCalisma+0x82a>
 80055fe:	4b2f      	ldr	r3, [pc, #188]	; (80056bc <checkAktifCalisma+0x8e0>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d164      	bne.n	80056d0 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800560a:	4823      	ldr	r0, [pc, #140]	; (8005698 <checkAktifCalisma+0x8bc>)
 800560c:	f003 fec4 	bl	8009398 <HAL_GPIO_ReadPin>
 8005610:	4603      	mov	r3, r0
 8005612:	2b01      	cmp	r3, #1
 8005614:	d10f      	bne.n	8005636 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800561a:	481f      	ldr	r0, [pc, #124]	; (8005698 <checkAktifCalisma+0x8bc>)
 800561c:	f003 febc 	bl	8009398 <HAL_GPIO_ReadPin>
 8005620:	4603      	mov	r3, r0
 8005622:	2b01      	cmp	r3, #1
 8005624:	d107      	bne.n	8005636 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800562a:	481b      	ldr	r0, [pc, #108]	; (8005698 <checkAktifCalisma+0x8bc>)
 800562c:	f003 feb4 	bl	8009398 <HAL_GPIO_ReadPin>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d003      	beq.n	800563e <checkAktifCalisma+0x862>
 8005636:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <checkAktifCalisma+0x8e4>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d048      	beq.n	80056d0 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800563e:	4b21      	ldr	r3, [pc, #132]	; (80056c4 <checkAktifCalisma+0x8e8>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	f083 0301 	eor.w	r3, r3, #1
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d041      	beq.n	80056d0 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800564c:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <checkAktifCalisma+0x8ec>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	f083 0301 	eor.w	r3, r3, #1
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d03a      	beq.n	80056d0 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800565a:	4b1c      	ldr	r3, [pc, #112]	; (80056cc <checkAktifCalisma+0x8f0>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	f083 0301 	eor.w	r3, r3, #1
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d033      	beq.n	80056d0 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <checkAktifCalisma+0x8b8>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f083 0301 	eor.w	r3, r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d02c      	beq.n	80056d0 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <checkAktifCalisma+0x8b0>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	f083 0301 	eor.w	r3, r3, #1
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d025      	beq.n	80056d0 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005684:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <checkAktifCalisma+0x8e4>)
 8005686:	2201      	movs	r2, #1
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	e024      	b.n	80056d6 <checkAktifCalisma+0x8fa>
 800568c:	2000025e 	.word	0x2000025e
 8005690:	40011000 	.word	0x40011000
 8005694:	20000262 	.word	0x20000262
 8005698:	40010c00 	.word	0x40010c00
 800569c:	2000027a 	.word	0x2000027a
 80056a0:	2000027b 	.word	0x2000027b
 80056a4:	2000025a 	.word	0x2000025a
 80056a8:	20000204 	.word	0x20000204
 80056ac:	20000210 	.word	0x20000210
 80056b0:	2000023e 	.word	0x2000023e
 80056b4:	20000245 	.word	0x20000245
 80056b8:	20000237 	.word	0x20000237
 80056bc:	20000239 	.word	0x20000239
 80056c0:	2000025f 	.word	0x2000025f
 80056c4:	2000025d 	.word	0x2000025d
 80056c8:	20000261 	.word	0x20000261
 80056cc:	20000260 	.word	0x20000260
		} else {
			devmotorasagicalisiyor=0;
 80056d0:	4b96      	ldr	r3, [pc, #600]	; (800592c <checkAktifCalisma+0xb50>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80056d6:	4b95      	ldr	r3, [pc, #596]	; (800592c <checkAktifCalisma+0xb50>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80056de:	2201      	movs	r2, #1
 80056e0:	2110      	movs	r1, #16
 80056e2:	4893      	ldr	r0, [pc, #588]	; (8005930 <checkAktifCalisma+0xb54>)
 80056e4:	f003 fe6f 	bl	80093c6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80056e8:	4b92      	ldr	r3, [pc, #584]	; (8005934 <checkAktifCalisma+0xb58>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80056ee:	4b91      	ldr	r3, [pc, #580]	; (8005934 <checkAktifCalisma+0xb58>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d024      	beq.n	8005740 <checkAktifCalisma+0x964>
 80056f6:	2140      	movs	r1, #64	; 0x40
 80056f8:	488d      	ldr	r0, [pc, #564]	; (8005930 <checkAktifCalisma+0xb54>)
 80056fa:	f003 fe4d 	bl	8009398 <HAL_GPIO_ReadPin>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b01      	cmp	r3, #1
 8005702:	d007      	beq.n	8005714 <checkAktifCalisma+0x938>
 8005704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005708:	4889      	ldr	r0, [pc, #548]	; (8005930 <checkAktifCalisma+0xb54>)
 800570a:	f003 fe45 	bl	8009398 <HAL_GPIO_ReadPin>
 800570e:	4603      	mov	r3, r0
 8005710:	2b01      	cmp	r3, #1
 8005712:	d115      	bne.n	8005740 <checkAktifCalisma+0x964>
 8005714:	4b88      	ldr	r3, [pc, #544]	; (8005938 <checkAktifCalisma+0xb5c>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d011      	beq.n	8005740 <checkAktifCalisma+0x964>
 800571c:	4b87      	ldr	r3, [pc, #540]	; (800593c <checkAktifCalisma+0xb60>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00d      	beq.n	8005740 <checkAktifCalisma+0x964>
 8005724:	4b86      	ldr	r3, [pc, #536]	; (8005940 <checkAktifCalisma+0xb64>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f083 0301 	eor.w	r3, r3, #1
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d006      	beq.n	8005740 <checkAktifCalisma+0x964>
			timer2=millis;
 8005732:	4b84      	ldr	r3, [pc, #528]	; (8005944 <checkAktifCalisma+0xb68>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a84      	ldr	r2, [pc, #528]	; (8005948 <checkAktifCalisma+0xb6c>)
 8005738:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800573a:	4b81      	ldr	r3, [pc, #516]	; (8005940 <checkAktifCalisma+0xb64>)
 800573c:	2201      	movs	r2, #1
 800573e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005740:	4b80      	ldr	r3, [pc, #512]	; (8005944 <checkAktifCalisma+0xb68>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4b80      	ldr	r3, [pc, #512]	; (8005948 <checkAktifCalisma+0xb6c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	4a80      	ldr	r2, [pc, #512]	; (800594c <checkAktifCalisma+0xb70>)
 800574c:	7812      	ldrb	r2, [r2, #0]
 800574e:	4293      	cmp	r3, r2
 8005750:	d303      	bcc.n	800575a <checkAktifCalisma+0x97e>
 8005752:	4b7b      	ldr	r3, [pc, #492]	; (8005940 <checkAktifCalisma+0xb64>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10d      	bne.n	8005776 <checkAktifCalisma+0x99a>
 800575a:	4b77      	ldr	r3, [pc, #476]	; (8005938 <checkAktifCalisma+0xb5c>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f083 0301 	eor.w	r3, r3, #1
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d106      	bne.n	8005776 <checkAktifCalisma+0x99a>
 8005768:	4b74      	ldr	r3, [pc, #464]	; (800593c <checkAktifCalisma+0xb60>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f083 0301 	eor.w	r3, r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005776:	2200      	movs	r2, #0
 8005778:	2110      	movs	r1, #16
 800577a:	486d      	ldr	r0, [pc, #436]	; (8005930 <checkAktifCalisma+0xb54>)
 800577c:	f003 fe23 	bl	80093c6 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005780:	4b6c      	ldr	r3, [pc, #432]	; (8005934 <checkAktifCalisma+0xb58>)
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005786:	4b6e      	ldr	r3, [pc, #440]	; (8005940 <checkAktifCalisma+0xb64>)
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800578c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005790:	486f      	ldr	r0, [pc, #444]	; (8005950 <checkAktifCalisma+0xb74>)
 8005792:	f003 fe01 	bl	8009398 <HAL_GPIO_ReadPin>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d120      	bne.n	80057de <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800579c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057a0:	486b      	ldr	r0, [pc, #428]	; (8005950 <checkAktifCalisma+0xb74>)
 80057a2:	f003 fdf9 	bl	8009398 <HAL_GPIO_ReadPin>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d118      	bne.n	80057de <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80057ac:	2104      	movs	r1, #4
 80057ae:	4868      	ldr	r0, [pc, #416]	; (8005950 <checkAktifCalisma+0xb74>)
 80057b0:	f003 fdf2 	bl	8009398 <HAL_GPIO_ReadPin>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d111      	bne.n	80057de <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80057ba:	2102      	movs	r1, #2
 80057bc:	4864      	ldr	r0, [pc, #400]	; (8005950 <checkAktifCalisma+0xb74>)
 80057be:	f003 fdeb 	bl	8009398 <HAL_GPIO_ReadPin>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80057c8:	2101      	movs	r1, #1
 80057ca:	4861      	ldr	r0, [pc, #388]	; (8005950 <checkAktifCalisma+0xb74>)
 80057cc:	f003 fde4 	bl	8009398 <HAL_GPIO_ReadPin>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d103      	bne.n	80057de <checkAktifCalisma+0xa02>
			makineStop=1;
 80057d6:	4b5f      	ldr	r3, [pc, #380]	; (8005954 <checkAktifCalisma+0xb78>)
 80057d8:	2201      	movs	r2, #1
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e002      	b.n	80057e4 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80057de:	4b5d      	ldr	r3, [pc, #372]	; (8005954 <checkAktifCalisma+0xb78>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057e4:	4b5c      	ldr	r3, [pc, #368]	; (8005958 <checkAktifCalisma+0xb7c>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d144      	bne.n	8005876 <checkAktifCalisma+0xa9a>
 80057ec:	4b5b      	ldr	r3, [pc, #364]	; (800595c <checkAktifCalisma+0xb80>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d003      	beq.n	80057fc <checkAktifCalisma+0xa20>
 80057f4:	4b59      	ldr	r3, [pc, #356]	; (800595c <checkAktifCalisma+0xb80>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d13c      	bne.n	8005876 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057fc:	2180      	movs	r1, #128	; 0x80
 80057fe:	484c      	ldr	r0, [pc, #304]	; (8005930 <checkAktifCalisma+0xb54>)
 8005800:	f003 fdca 	bl	8009398 <HAL_GPIO_ReadPin>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d103      	bne.n	8005812 <checkAktifCalisma+0xa36>
 800580a:	4b55      	ldr	r3, [pc, #340]	; (8005960 <checkAktifCalisma+0xb84>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00b      	beq.n	800582a <checkAktifCalisma+0xa4e>
 8005812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005816:	484e      	ldr	r0, [pc, #312]	; (8005950 <checkAktifCalisma+0xb74>)
 8005818:	f003 fdbe 	bl	8009398 <HAL_GPIO_ReadPin>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d129      	bne.n	8005876 <checkAktifCalisma+0xa9a>
 8005822:	4b4f      	ldr	r3, [pc, #316]	; (8005960 <checkAktifCalisma+0xb84>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d125      	bne.n	8005876 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800582a:	2104      	movs	r1, #4
 800582c:	4840      	ldr	r0, [pc, #256]	; (8005930 <checkAktifCalisma+0xb54>)
 800582e:	f003 fdb3 	bl	8009398 <HAL_GPIO_ReadPin>
 8005832:	4603      	mov	r3, r0
 8005834:	2b01      	cmp	r3, #1
 8005836:	d003      	beq.n	8005840 <checkAktifCalisma+0xa64>
 8005838:	4b4a      	ldr	r3, [pc, #296]	; (8005964 <checkAktifCalisma+0xb88>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d11a      	bne.n	8005876 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005840:	2102      	movs	r1, #2
 8005842:	483b      	ldr	r0, [pc, #236]	; (8005930 <checkAktifCalisma+0xb54>)
 8005844:	f003 fda8 	bl	8009398 <HAL_GPIO_ReadPin>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d113      	bne.n	8005876 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800584e:	4b46      	ldr	r3, [pc, #280]	; (8005968 <checkAktifCalisma+0xb8c>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f083 0301 	eor.w	r3, r3, #1
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00c      	beq.n	8005876 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 800585c:	4b3d      	ldr	r3, [pc, #244]	; (8005954 <checkAktifCalisma+0xb78>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005864:	4b41      	ldr	r3, [pc, #260]	; (800596c <checkAktifCalisma+0xb90>)
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800586a:	4b36      	ldr	r3, [pc, #216]	; (8005944 <checkAktifCalisma+0xb68>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a40      	ldr	r2, [pc, #256]	; (8005970 <checkAktifCalisma+0xb94>)
 8005870:	6013      	str	r3, [r2, #0]
			bekle();
 8005872:	f7ff f935 	bl	8004ae0 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005876:	4b33      	ldr	r3, [pc, #204]	; (8005944 <checkAktifCalisma+0xb68>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b3d      	ldr	r3, [pc, #244]	; (8005970 <checkAktifCalisma+0xb94>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <checkAktifCalisma+0xb98>)
 8005882:	7812      	ldrb	r2, [r2, #0]
 8005884:	4293      	cmp	r3, r2
 8005886:	d211      	bcs.n	80058ac <checkAktifCalisma+0xad0>
 8005888:	2104      	movs	r1, #4
 800588a:	4829      	ldr	r0, [pc, #164]	; (8005930 <checkAktifCalisma+0xb54>)
 800588c:	f003 fd84 	bl	8009398 <HAL_GPIO_ReadPin>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <checkAktifCalisma+0xad0>
 8005896:	4b33      	ldr	r3, [pc, #204]	; (8005964 <checkAktifCalisma+0xb88>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <checkAktifCalisma+0xad0>
 800589e:	4b2d      	ldr	r3, [pc, #180]	; (8005954 <checkAktifCalisma+0xb78>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	f083 0301 	eor.w	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80058ac:	4b2f      	ldr	r3, [pc, #188]	; (800596c <checkAktifCalisma+0xb90>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058b2:	4b29      	ldr	r3, [pc, #164]	; (8005958 <checkAktifCalisma+0xb7c>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d160      	bne.n	800597c <checkAktifCalisma+0xba0>
 80058ba:	4b28      	ldr	r3, [pc, #160]	; (800595c <checkAktifCalisma+0xb80>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d003      	beq.n	80058ca <checkAktifCalisma+0xaee>
 80058c2:	4b26      	ldr	r3, [pc, #152]	; (800595c <checkAktifCalisma+0xb80>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d158      	bne.n	800597c <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058ca:	2104      	movs	r1, #4
 80058cc:	4818      	ldr	r0, [pc, #96]	; (8005930 <checkAktifCalisma+0xb54>)
 80058ce:	f003 fd63 	bl	8009398 <HAL_GPIO_ReadPin>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d003      	beq.n	80058e0 <checkAktifCalisma+0xb04>
 80058d8:	4b22      	ldr	r3, [pc, #136]	; (8005964 <checkAktifCalisma+0xb88>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d14d      	bne.n	800597c <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058e0:	2102      	movs	r1, #2
 80058e2:	4813      	ldr	r0, [pc, #76]	; (8005930 <checkAktifCalisma+0xb54>)
 80058e4:	f003 fd58 	bl	8009398 <HAL_GPIO_ReadPin>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d146      	bne.n	800597c <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058ee:	2180      	movs	r1, #128	; 0x80
 80058f0:	480f      	ldr	r0, [pc, #60]	; (8005930 <checkAktifCalisma+0xb54>)
 80058f2:	f003 fd51 	bl	8009398 <HAL_GPIO_ReadPin>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <checkAktifCalisma+0xb28>
 80058fc:	4b18      	ldr	r3, [pc, #96]	; (8005960 <checkAktifCalisma+0xb84>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <checkAktifCalisma+0xb40>
 8005904:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005908:	4811      	ldr	r0, [pc, #68]	; (8005950 <checkAktifCalisma+0xb74>)
 800590a:	f003 fd45 	bl	8009398 <HAL_GPIO_ReadPin>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d133      	bne.n	800597c <checkAktifCalisma+0xba0>
 8005914:	4b12      	ldr	r3, [pc, #72]	; (8005960 <checkAktifCalisma+0xb84>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d12f      	bne.n	800597c <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800591c:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <checkAktifCalisma+0xb78>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d02b      	beq.n	800597c <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005924:	4b14      	ldr	r3, [pc, #80]	; (8005978 <checkAktifCalisma+0xb9c>)
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e02a      	b.n	8005982 <checkAktifCalisma+0xba6>
 800592c:	2000025f 	.word	0x2000025f
 8005930:	40011000 	.word	0x40011000
 8005934:	20000263 	.word	0x20000263
 8005938:	2000027a 	.word	0x2000027a
 800593c:	2000027b 	.word	0x2000027b
 8005940:	2000025b 	.word	0x2000025b
 8005944:	20000204 	.word	0x20000204
 8005948:	20000210 	.word	0x20000210
 800594c:	2000023e 	.word	0x2000023e
 8005950:	40010c00 	.word	0x40010c00
 8005954:	2000026a 	.word	0x2000026a
 8005958:	20000231 	.word	0x20000231
 800595c:	20000230 	.word	0x20000230
 8005960:	20000234 	.word	0x20000234
 8005964:	2000022e 	.word	0x2000022e
 8005968:	20000257 	.word	0x20000257
 800596c:	2000026b 	.word	0x2000026b
 8005970:	20000208 	.word	0x20000208
 8005974:	20000241 	.word	0x20000241
 8005978:	2000026c 	.word	0x2000026c
		} else {
			kapi1butonkontrol=0;
 800597c:	4b8b      	ldr	r3, [pc, #556]	; (8005bac <checkAktifCalisma+0xdd0>)
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005982:	4b8b      	ldr	r3, [pc, #556]	; (8005bb0 <checkAktifCalisma+0xdd4>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d121      	bne.n	80059ce <checkAktifCalisma+0xbf2>
 800598a:	4b8a      	ldr	r3, [pc, #552]	; (8005bb4 <checkAktifCalisma+0xdd8>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d003      	beq.n	800599a <checkAktifCalisma+0xbbe>
 8005992:	4b88      	ldr	r3, [pc, #544]	; (8005bb4 <checkAktifCalisma+0xdd8>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d119      	bne.n	80059ce <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800599a:	2104      	movs	r1, #4
 800599c:	4886      	ldr	r0, [pc, #536]	; (8005bb8 <checkAktifCalisma+0xddc>)
 800599e:	f003 fcfb 	bl	8009398 <HAL_GPIO_ReadPin>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d003      	beq.n	80059b0 <checkAktifCalisma+0xbd4>
 80059a8:	4b84      	ldr	r3, [pc, #528]	; (8005bbc <checkAktifCalisma+0xde0>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10e      	bne.n	80059ce <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059b0:	2102      	movs	r1, #2
 80059b2:	4881      	ldr	r0, [pc, #516]	; (8005bb8 <checkAktifCalisma+0xddc>)
 80059b4:	f003 fcf0 	bl	8009398 <HAL_GPIO_ReadPin>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80059be:	4b80      	ldr	r3, [pc, #512]	; (8005bc0 <checkAktifCalisma+0xde4>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80059c6:	4b7f      	ldr	r3, [pc, #508]	; (8005bc4 <checkAktifCalisma+0xde8>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	e002      	b.n	80059d4 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80059ce:	4b7d      	ldr	r3, [pc, #500]	; (8005bc4 <checkAktifCalisma+0xde8>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80059d4:	4b75      	ldr	r3, [pc, #468]	; (8005bac <checkAktifCalisma+0xdd0>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d107      	bne.n	80059ec <checkAktifCalisma+0xc10>
 80059dc:	4b79      	ldr	r3, [pc, #484]	; (8005bc4 <checkAktifCalisma+0xde8>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d103      	bne.n	80059ec <checkAktifCalisma+0xc10>
 80059e4:	4b78      	ldr	r3, [pc, #480]	; (8005bc8 <checkAktifCalisma+0xdec>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80059ec:	2201      	movs	r2, #1
 80059ee:	2180      	movs	r1, #128	; 0x80
 80059f0:	4876      	ldr	r0, [pc, #472]	; (8005bcc <checkAktifCalisma+0xdf0>)
 80059f2:	f003 fce8 	bl	80093c6 <HAL_GPIO_WritePin>
 80059f6:	e004      	b.n	8005a02 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80059f8:	2200      	movs	r2, #0
 80059fa:	2180      	movs	r1, #128	; 0x80
 80059fc:	4873      	ldr	r0, [pc, #460]	; (8005bcc <checkAktifCalisma+0xdf0>)
 80059fe:	f003 fce2 	bl	80093c6 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a02:	4b73      	ldr	r3, [pc, #460]	; (8005bd0 <checkAktifCalisma+0xdf4>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d141      	bne.n	8005a8e <checkAktifCalisma+0xcb2>
 8005a0a:	4b6a      	ldr	r3, [pc, #424]	; (8005bb4 <checkAktifCalisma+0xdd8>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d003      	beq.n	8005a1a <checkAktifCalisma+0xc3e>
 8005a12:	4b68      	ldr	r3, [pc, #416]	; (8005bb4 <checkAktifCalisma+0xdd8>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d139      	bne.n	8005a8e <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a1e:	4866      	ldr	r0, [pc, #408]	; (8005bb8 <checkAktifCalisma+0xddc>)
 8005a20:	f003 fcba 	bl	8009398 <HAL_GPIO_ReadPin>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <checkAktifCalisma+0xc56>
 8005a2a:	4b6a      	ldr	r3, [pc, #424]	; (8005bd4 <checkAktifCalisma+0xdf8>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00b      	beq.n	8005a4a <checkAktifCalisma+0xc6e>
 8005a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a36:	4868      	ldr	r0, [pc, #416]	; (8005bd8 <checkAktifCalisma+0xdfc>)
 8005a38:	f003 fcae 	bl	8009398 <HAL_GPIO_ReadPin>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d125      	bne.n	8005a8e <checkAktifCalisma+0xcb2>
 8005a42:	4b64      	ldr	r3, [pc, #400]	; (8005bd4 <checkAktifCalisma+0xdf8>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d121      	bne.n	8005a8e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	485a      	ldr	r0, [pc, #360]	; (8005bb8 <checkAktifCalisma+0xddc>)
 8005a4e:	f003 fca3 	bl	8009398 <HAL_GPIO_ReadPin>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d11a      	bne.n	8005a8e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a58:	2104      	movs	r1, #4
 8005a5a:	4857      	ldr	r0, [pc, #348]	; (8005bb8 <checkAktifCalisma+0xddc>)
 8005a5c:	f003 fc9c 	bl	8009398 <HAL_GPIO_ReadPin>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d113      	bne.n	8005a8e <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005a66:	4b56      	ldr	r3, [pc, #344]	; (8005bc0 <checkAktifCalisma+0xde4>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00f      	beq.n	8005a8e <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005a6e:	4b5b      	ldr	r3, [pc, #364]	; (8005bdc <checkAktifCalisma+0xe00>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f083 0301 	eor.w	r3, r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005a7c:	4b58      	ldr	r3, [pc, #352]	; (8005be0 <checkAktifCalisma+0xe04>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a82:	4b58      	ldr	r3, [pc, #352]	; (8005be4 <checkAktifCalisma+0xe08>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a58      	ldr	r2, [pc, #352]	; (8005be8 <checkAktifCalisma+0xe0c>)
 8005a88:	6013      	str	r3, [r2, #0]
			bekle();
 8005a8a:	f7ff f829 	bl	8004ae0 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005a8e:	4b55      	ldr	r3, [pc, #340]	; (8005be4 <checkAktifCalisma+0xe08>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b55      	ldr	r3, [pc, #340]	; (8005be8 <checkAktifCalisma+0xe0c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	4a54      	ldr	r2, [pc, #336]	; (8005bec <checkAktifCalisma+0xe10>)
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d20d      	bcs.n	8005abc <checkAktifCalisma+0xce0>
 8005aa0:	2102      	movs	r1, #2
 8005aa2:	4845      	ldr	r0, [pc, #276]	; (8005bb8 <checkAktifCalisma+0xddc>)
 8005aa4:	f003 fc78 	bl	8009398 <HAL_GPIO_ReadPin>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d006      	beq.n	8005abc <checkAktifCalisma+0xce0>
 8005aae:	4b44      	ldr	r3, [pc, #272]	; (8005bc0 <checkAktifCalisma+0xde4>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	f083 0301 	eor.w	r3, r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005abc:	4b48      	ldr	r3, [pc, #288]	; (8005be0 <checkAktifCalisma+0xe04>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ac2:	4b43      	ldr	r3, [pc, #268]	; (8005bd0 <checkAktifCalisma+0xdf4>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d135      	bne.n	8005b36 <checkAktifCalisma+0xd5a>
 8005aca:	4b3a      	ldr	r3, [pc, #232]	; (8005bb4 <checkAktifCalisma+0xdd8>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d003      	beq.n	8005ada <checkAktifCalisma+0xcfe>
 8005ad2:	4b38      	ldr	r3, [pc, #224]	; (8005bb4 <checkAktifCalisma+0xdd8>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d12d      	bne.n	8005b36 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ada:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ade:	4836      	ldr	r0, [pc, #216]	; (8005bb8 <checkAktifCalisma+0xddc>)
 8005ae0:	f003 fc5a 	bl	8009398 <HAL_GPIO_ReadPin>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <checkAktifCalisma+0xd16>
 8005aea:	4b3a      	ldr	r3, [pc, #232]	; (8005bd4 <checkAktifCalisma+0xdf8>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <checkAktifCalisma+0xd2e>
 8005af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005af6:	4838      	ldr	r0, [pc, #224]	; (8005bd8 <checkAktifCalisma+0xdfc>)
 8005af8:	f003 fc4e 	bl	8009398 <HAL_GPIO_ReadPin>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d119      	bne.n	8005b36 <checkAktifCalisma+0xd5a>
 8005b02:	4b34      	ldr	r3, [pc, #208]	; (8005bd4 <checkAktifCalisma+0xdf8>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d115      	bne.n	8005b36 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	482a      	ldr	r0, [pc, #168]	; (8005bb8 <checkAktifCalisma+0xddc>)
 8005b0e:	f003 fc43 	bl	8009398 <HAL_GPIO_ReadPin>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d10e      	bne.n	8005b36 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b18:	2104      	movs	r1, #4
 8005b1a:	4827      	ldr	r0, [pc, #156]	; (8005bb8 <checkAktifCalisma+0xddc>)
 8005b1c:	f003 fc3c 	bl	8009398 <HAL_GPIO_ReadPin>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d107      	bne.n	8005b36 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005b26:	4b26      	ldr	r3, [pc, #152]	; (8005bc0 <checkAktifCalisma+0xde4>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b2e:	4b30      	ldr	r3, [pc, #192]	; (8005bf0 <checkAktifCalisma+0xe14>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	e002      	b.n	8005b3c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b36:	4b2e      	ldr	r3, [pc, #184]	; (8005bf0 <checkAktifCalisma+0xe14>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b3c:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <checkAktifCalisma+0xdf4>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d11d      	bne.n	8005b80 <checkAktifCalisma+0xda4>
 8005b44:	4b1b      	ldr	r3, [pc, #108]	; (8005bb4 <checkAktifCalisma+0xdd8>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d003      	beq.n	8005b54 <checkAktifCalisma+0xd78>
 8005b4c:	4b19      	ldr	r3, [pc, #100]	; (8005bb4 <checkAktifCalisma+0xdd8>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d115      	bne.n	8005b80 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b54:	2102      	movs	r1, #2
 8005b56:	4818      	ldr	r0, [pc, #96]	; (8005bb8 <checkAktifCalisma+0xddc>)
 8005b58:	f003 fc1e 	bl	8009398 <HAL_GPIO_ReadPin>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d10e      	bne.n	8005b80 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b62:	2104      	movs	r1, #4
 8005b64:	4814      	ldr	r0, [pc, #80]	; (8005bb8 <checkAktifCalisma+0xddc>)
 8005b66:	f003 fc17 	bl	8009398 <HAL_GPIO_ReadPin>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d107      	bne.n	8005b80 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005b70:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <checkAktifCalisma+0xde4>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005b78:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <checkAktifCalisma+0xe18>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	e002      	b.n	8005b86 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005b80:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <checkAktifCalisma+0xe18>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005b86:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <checkAktifCalisma+0xe14>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <checkAktifCalisma+0xdc2>
 8005b8e:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <checkAktifCalisma+0xe18>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d103      	bne.n	8005b9e <checkAktifCalisma+0xdc2>
 8005b96:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <checkAktifCalisma+0xe04>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d02c      	beq.n	8005bf8 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	2140      	movs	r1, #64	; 0x40
 8005ba2:	480a      	ldr	r0, [pc, #40]	; (8005bcc <checkAktifCalisma+0xdf0>)
 8005ba4:	f003 fc0f 	bl	80093c6 <HAL_GPIO_WritePin>
 8005ba8:	e02b      	b.n	8005c02 <checkAktifCalisma+0xe26>
 8005baa:	bf00      	nop
 8005bac:	2000026c 	.word	0x2000026c
 8005bb0:	20000231 	.word	0x20000231
 8005bb4:	20000230 	.word	0x20000230
 8005bb8:	40011000 	.word	0x40011000
 8005bbc:	2000022e 	.word	0x2000022e
 8005bc0:	2000026a 	.word	0x2000026a
 8005bc4:	2000026d 	.word	0x2000026d
 8005bc8:	2000026b 	.word	0x2000026b
 8005bcc:	40010800 	.word	0x40010800
 8005bd0:	20000232 	.word	0x20000232
 8005bd4:	20000234 	.word	0x20000234
 8005bd8:	40010c00 	.word	0x40010c00
 8005bdc:	20000257 	.word	0x20000257
 8005be0:	2000026e 	.word	0x2000026e
 8005be4:	20000204 	.word	0x20000204
 8005be8:	20000208 	.word	0x20000208
 8005bec:	20000242 	.word	0x20000242
 8005bf0:	2000026f 	.word	0x2000026f
 8005bf4:	20000270 	.word	0x20000270
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2140      	movs	r1, #64	; 0x40
 8005bfc:	488d      	ldr	r0, [pc, #564]	; (8005e34 <checkAktifCalisma+0x1058>)
 8005bfe:	f003 fbe2 	bl	80093c6 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005c02:	4b8d      	ldr	r3, [pc, #564]	; (8005e38 <checkAktifCalisma+0x105c>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <checkAktifCalisma+0xe36>
 8005c0a:	4b8b      	ldr	r3, [pc, #556]	; (8005e38 <checkAktifCalisma+0x105c>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d115      	bne.n	8005c3e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c12:	2104      	movs	r1, #4
 8005c14:	4889      	ldr	r0, [pc, #548]	; (8005e3c <checkAktifCalisma+0x1060>)
 8005c16:	f003 fbbf 	bl	8009398 <HAL_GPIO_ReadPin>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d003      	beq.n	8005c28 <checkAktifCalisma+0xe4c>
 8005c20:	4b87      	ldr	r3, [pc, #540]	; (8005e40 <checkAktifCalisma+0x1064>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c28:	2102      	movs	r1, #2
 8005c2a:	4884      	ldr	r0, [pc, #528]	; (8005e3c <checkAktifCalisma+0x1060>)
 8005c2c:	f003 fbb4 	bl	8009398 <HAL_GPIO_ReadPin>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d103      	bne.n	8005c3e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c36:	4b83      	ldr	r3, [pc, #524]	; (8005e44 <checkAktifCalisma+0x1068>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e002      	b.n	8005c44 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c3e:	4b81      	ldr	r3, [pc, #516]	; (8005e44 <checkAktifCalisma+0x1068>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c44:	4b7c      	ldr	r3, [pc, #496]	; (8005e38 <checkAktifCalisma+0x105c>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d003      	beq.n	8005c54 <checkAktifCalisma+0xe78>
 8005c4c:	4b7a      	ldr	r3, [pc, #488]	; (8005e38 <checkAktifCalisma+0x105c>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d111      	bne.n	8005c78 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c54:	2102      	movs	r1, #2
 8005c56:	4879      	ldr	r0, [pc, #484]	; (8005e3c <checkAktifCalisma+0x1060>)
 8005c58:	f003 fb9e 	bl	8009398 <HAL_GPIO_ReadPin>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d10a      	bne.n	8005c78 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005c62:	2104      	movs	r1, #4
 8005c64:	4875      	ldr	r0, [pc, #468]	; (8005e3c <checkAktifCalisma+0x1060>)
 8005c66:	f003 fb97 	bl	8009398 <HAL_GPIO_ReadPin>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d103      	bne.n	8005c78 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005c70:	4b75      	ldr	r3, [pc, #468]	; (8005e48 <checkAktifCalisma+0x106c>)
 8005c72:	2201      	movs	r2, #1
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	e002      	b.n	8005c7e <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005c78:	4b73      	ldr	r3, [pc, #460]	; (8005e48 <checkAktifCalisma+0x106c>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005c7e:	4b71      	ldr	r3, [pc, #452]	; (8005e44 <checkAktifCalisma+0x1068>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005c86:	4b71      	ldr	r3, [pc, #452]	; (8005e4c <checkAktifCalisma+0x1070>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d10b      	bne.n	8005ca6 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c92:	486f      	ldr	r0, [pc, #444]	; (8005e50 <checkAktifCalisma+0x1074>)
 8005c94:	f003 fb80 	bl	8009398 <HAL_GPIO_ReadPin>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005c9e:	4b6d      	ldr	r3, [pc, #436]	; (8005e54 <checkAktifCalisma+0x1078>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	e002      	b.n	8005cac <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005ca6:	4b6b      	ldr	r3, [pc, #428]	; (8005e54 <checkAktifCalisma+0x1078>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005cac:	4b66      	ldr	r3, [pc, #408]	; (8005e48 <checkAktifCalisma+0x106c>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00f      	beq.n	8005cd4 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005cb4:	4b65      	ldr	r3, [pc, #404]	; (8005e4c <checkAktifCalisma+0x1070>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d10b      	bne.n	8005cd4 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005cbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cc0:	4863      	ldr	r0, [pc, #396]	; (8005e50 <checkAktifCalisma+0x1074>)
 8005cc2:	f003 fb69 	bl	8009398 <HAL_GPIO_ReadPin>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005ccc:	4b62      	ldr	r3, [pc, #392]	; (8005e58 <checkAktifCalisma+0x107c>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	e002      	b.n	8005cda <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005cd4:	4b60      	ldr	r3, [pc, #384]	; (8005e58 <checkAktifCalisma+0x107c>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cda:	4b60      	ldr	r3, [pc, #384]	; (8005e5c <checkAktifCalisma+0x1080>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d137      	bne.n	8005d52 <checkAktifCalisma+0xf76>
 8005ce2:	4b5f      	ldr	r3, [pc, #380]	; (8005e60 <checkAktifCalisma+0x1084>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d003      	beq.n	8005cf2 <checkAktifCalisma+0xf16>
 8005cea:	4b5d      	ldr	r3, [pc, #372]	; (8005e60 <checkAktifCalisma+0x1084>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d12f      	bne.n	8005d52 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cf2:	4b54      	ldr	r3, [pc, #336]	; (8005e44 <checkAktifCalisma+0x1068>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <checkAktifCalisma+0xf26>
 8005cfa:	4b53      	ldr	r3, [pc, #332]	; (8005e48 <checkAktifCalisma+0x106c>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d027      	beq.n	8005d52 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d06:	484d      	ldr	r0, [pc, #308]	; (8005e3c <checkAktifCalisma+0x1060>)
 8005d08:	f003 fb46 	bl	8009398 <HAL_GPIO_ReadPin>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <checkAktifCalisma+0xf3e>
 8005d12:	4b4e      	ldr	r3, [pc, #312]	; (8005e4c <checkAktifCalisma+0x1070>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d1a:	4b4e      	ldr	r3, [pc, #312]	; (8005e54 <checkAktifCalisma+0x1078>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d103      	bne.n	8005d2a <checkAktifCalisma+0xf4e>
 8005d22:	4b4d      	ldr	r3, [pc, #308]	; (8005e58 <checkAktifCalisma+0x107c>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d013      	beq.n	8005d52 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005d2a:	4b4e      	ldr	r3, [pc, #312]	; (8005e64 <checkAktifCalisma+0x1088>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00f      	beq.n	8005d52 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d32:	4b4d      	ldr	r3, [pc, #308]	; (8005e68 <checkAktifCalisma+0x108c>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	f083 0301 	eor.w	r3, r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005d40:	4b4a      	ldr	r3, [pc, #296]	; (8005e6c <checkAktifCalisma+0x1090>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005d46:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <checkAktifCalisma+0x1094>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a4a      	ldr	r2, [pc, #296]	; (8005e74 <checkAktifCalisma+0x1098>)
 8005d4c:	6013      	str	r3, [r2, #0]
			bekle();
 8005d4e:	f7fe fec7 	bl	8004ae0 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005d52:	4b47      	ldr	r3, [pc, #284]	; (8005e70 <checkAktifCalisma+0x1094>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b47      	ldr	r3, [pc, #284]	; (8005e74 <checkAktifCalisma+0x1098>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	4a46      	ldr	r2, [pc, #280]	; (8005e78 <checkAktifCalisma+0x109c>)
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d214      	bcs.n	8005d8e <checkAktifCalisma+0xfb2>
 8005d64:	4b37      	ldr	r3, [pc, #220]	; (8005e44 <checkAktifCalisma+0x1068>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f083 0301 	eor.w	r3, r3, #1
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d006      	beq.n	8005d80 <checkAktifCalisma+0xfa4>
 8005d72:	4b35      	ldr	r3, [pc, #212]	; (8005e48 <checkAktifCalisma+0x106c>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	f083 0301 	eor.w	r3, r3, #1
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d106      	bne.n	8005d8e <checkAktifCalisma+0xfb2>
 8005d80:	4b38      	ldr	r3, [pc, #224]	; (8005e64 <checkAktifCalisma+0x1088>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f083 0301 	eor.w	r3, r3, #1
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005d8e:	4b37      	ldr	r3, [pc, #220]	; (8005e6c <checkAktifCalisma+0x1090>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005d94:	4b31      	ldr	r3, [pc, #196]	; (8005e5c <checkAktifCalisma+0x1080>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d12b      	bne.n	8005df4 <checkAktifCalisma+0x1018>
 8005d9c:	4b30      	ldr	r3, [pc, #192]	; (8005e60 <checkAktifCalisma+0x1084>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d003      	beq.n	8005dac <checkAktifCalisma+0xfd0>
 8005da4:	4b2e      	ldr	r3, [pc, #184]	; (8005e60 <checkAktifCalisma+0x1084>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d123      	bne.n	8005df4 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005dac:	4b25      	ldr	r3, [pc, #148]	; (8005e44 <checkAktifCalisma+0x1068>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d103      	bne.n	8005dbc <checkAktifCalisma+0xfe0>
 8005db4:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <checkAktifCalisma+0x106c>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01b      	beq.n	8005df4 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dc0:	481e      	ldr	r0, [pc, #120]	; (8005e3c <checkAktifCalisma+0x1060>)
 8005dc2:	f003 fae9 	bl	8009398 <HAL_GPIO_ReadPin>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d103      	bne.n	8005dd4 <checkAktifCalisma+0xff8>
 8005dcc:	4b1f      	ldr	r3, [pc, #124]	; (8005e4c <checkAktifCalisma+0x1070>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005dd4:	4b1f      	ldr	r3, [pc, #124]	; (8005e54 <checkAktifCalisma+0x1078>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d103      	bne.n	8005de4 <checkAktifCalisma+0x1008>
 8005ddc:	4b1e      	ldr	r3, [pc, #120]	; (8005e58 <checkAktifCalisma+0x107c>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005de4:	4b1f      	ldr	r3, [pc, #124]	; (8005e64 <checkAktifCalisma+0x1088>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005dec:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <checkAktifCalisma+0x10a0>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	e002      	b.n	8005dfa <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005df4:	4b21      	ldr	r3, [pc, #132]	; (8005e7c <checkAktifCalisma+0x10a0>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005dfa:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <checkAktifCalisma+0x1080>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d140      	bne.n	8005e84 <checkAktifCalisma+0x10a8>
 8005e02:	4b17      	ldr	r3, [pc, #92]	; (8005e60 <checkAktifCalisma+0x1084>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d003      	beq.n	8005e12 <checkAktifCalisma+0x1036>
 8005e0a:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <checkAktifCalisma+0x1084>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d138      	bne.n	8005e84 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e12:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <checkAktifCalisma+0x1068>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d103      	bne.n	8005e22 <checkAktifCalisma+0x1046>
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <checkAktifCalisma+0x106c>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d030      	beq.n	8005e84 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005e22:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <checkAktifCalisma+0x1088>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d02c      	beq.n	8005e84 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005e2a:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <checkAktifCalisma+0x10a4>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	e02b      	b.n	8005e8a <checkAktifCalisma+0x10ae>
 8005e32:	bf00      	nop
 8005e34:	40010800 	.word	0x40010800
 8005e38:	20000235 	.word	0x20000235
 8005e3c:	40011000 	.word	0x40011000
 8005e40:	2000022e 	.word	0x2000022e
 8005e44:	20000274 	.word	0x20000274
 8005e48:	20000275 	.word	0x20000275
 8005e4c:	20000234 	.word	0x20000234
 8005e50:	40010c00 	.word	0x40010c00
 8005e54:	20000284 	.word	0x20000284
 8005e58:	20000285 	.word	0x20000285
 8005e5c:	20000233 	.word	0x20000233
 8005e60:	20000230 	.word	0x20000230
 8005e64:	2000026a 	.word	0x2000026a
 8005e68:	20000257 	.word	0x20000257
 8005e6c:	20000271 	.word	0x20000271
 8005e70:	20000204 	.word	0x20000204
 8005e74:	20000208 	.word	0x20000208
 8005e78:	20000243 	.word	0x20000243
 8005e7c:	20000272 	.word	0x20000272
 8005e80:	20000273 	.word	0x20000273
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005e84:	4b8b      	ldr	r3, [pc, #556]	; (80060b4 <checkAktifCalisma+0x12d8>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005e8a:	4b8b      	ldr	r3, [pc, #556]	; (80060b8 <checkAktifCalisma+0x12dc>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d107      	bne.n	8005ea2 <checkAktifCalisma+0x10c6>
 8005e92:	4b8a      	ldr	r3, [pc, #552]	; (80060bc <checkAktifCalisma+0x12e0>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d103      	bne.n	8005ea2 <checkAktifCalisma+0x10c6>
 8005e9a:	4b86      	ldr	r3, [pc, #536]	; (80060b4 <checkAktifCalisma+0x12d8>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	2120      	movs	r1, #32
 8005ea6:	4886      	ldr	r0, [pc, #536]	; (80060c0 <checkAktifCalisma+0x12e4>)
 8005ea8:	f003 fa8d 	bl	80093c6 <HAL_GPIO_WritePin>
 8005eac:	e004      	b.n	8005eb8 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2120      	movs	r1, #32
 8005eb2:	4883      	ldr	r0, [pc, #524]	; (80060c0 <checkAktifCalisma+0x12e4>)
 8005eb4:	f003 fa87 	bl	80093c6 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005eb8:	4b82      	ldr	r3, [pc, #520]	; (80060c4 <checkAktifCalisma+0x12e8>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00e      	beq.n	8005ede <checkAktifCalisma+0x1102>
 8005ec0:	2102      	movs	r1, #2
 8005ec2:	4881      	ldr	r0, [pc, #516]	; (80060c8 <checkAktifCalisma+0x12ec>)
 8005ec4:	f003 fa68 	bl	8009398 <HAL_GPIO_ReadPin>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d107      	bne.n	8005ede <checkAktifCalisma+0x1102>
 8005ece:	4b7f      	ldr	r3, [pc, #508]	; (80060cc <checkAktifCalisma+0x12f0>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d103      	bne.n	8005ede <checkAktifCalisma+0x1102>
 8005ed6:	4b7e      	ldr	r3, [pc, #504]	; (80060d0 <checkAktifCalisma+0x12f4>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d112      	bne.n	8005f04 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005ede:	4b7d      	ldr	r3, [pc, #500]	; (80060d4 <checkAktifCalisma+0x12f8>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d066      	beq.n	8005fb4 <checkAktifCalisma+0x11d8>
 8005ee6:	2104      	movs	r1, #4
 8005ee8:	4877      	ldr	r0, [pc, #476]	; (80060c8 <checkAktifCalisma+0x12ec>)
 8005eea:	f003 fa55 	bl	8009398 <HAL_GPIO_ReadPin>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d15f      	bne.n	8005fb4 <checkAktifCalisma+0x11d8>
 8005ef4:	4b75      	ldr	r3, [pc, #468]	; (80060cc <checkAktifCalisma+0x12f0>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d05b      	beq.n	8005fb4 <checkAktifCalisma+0x11d8>
 8005efc:	4b74      	ldr	r3, [pc, #464]	; (80060d0 <checkAktifCalisma+0x12f4>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d057      	beq.n	8005fb4 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005f04:	4b74      	ldr	r3, [pc, #464]	; (80060d8 <checkAktifCalisma+0x12fc>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	4b72      	ldr	r3, [pc, #456]	; (80060d8 <checkAktifCalisma+0x12fc>)
 8005f0e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005f10:	4b71      	ldr	r3, [pc, #452]	; (80060d8 <checkAktifCalisma+0x12fc>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b09      	cmp	r3, #9
 8005f16:	d908      	bls.n	8005f2a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005f18:	4b6f      	ldr	r3, [pc, #444]	; (80060d8 <checkAktifCalisma+0x12fc>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005f1e:	4b6f      	ldr	r3, [pc, #444]	; (80060dc <checkAktifCalisma+0x1300>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	3301      	adds	r3, #1
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	4b6d      	ldr	r3, [pc, #436]	; (80060dc <checkAktifCalisma+0x1300>)
 8005f28:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005f2a:	4b6c      	ldr	r3, [pc, #432]	; (80060dc <checkAktifCalisma+0x1300>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b09      	cmp	r3, #9
 8005f30:	d908      	bls.n	8005f44 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f32:	4b6a      	ldr	r3, [pc, #424]	; (80060dc <checkAktifCalisma+0x1300>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005f38:	4b69      	ldr	r3, [pc, #420]	; (80060e0 <checkAktifCalisma+0x1304>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	4b67      	ldr	r3, [pc, #412]	; (80060e0 <checkAktifCalisma+0x1304>)
 8005f42:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005f44:	4b66      	ldr	r3, [pc, #408]	; (80060e0 <checkAktifCalisma+0x1304>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b09      	cmp	r3, #9
 8005f4a:	d908      	bls.n	8005f5e <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005f4c:	4b64      	ldr	r3, [pc, #400]	; (80060e0 <checkAktifCalisma+0x1304>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005f52:	4b64      	ldr	r3, [pc, #400]	; (80060e4 <checkAktifCalisma+0x1308>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	3301      	adds	r3, #1
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	4b62      	ldr	r3, [pc, #392]	; (80060e4 <checkAktifCalisma+0x1308>)
 8005f5c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005f5e:	4b61      	ldr	r3, [pc, #388]	; (80060e4 <checkAktifCalisma+0x1308>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b09      	cmp	r3, #9
 8005f64:	d908      	bls.n	8005f78 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005f66:	4b5f      	ldr	r3, [pc, #380]	; (80060e4 <checkAktifCalisma+0x1308>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005f6c:	4b5e      	ldr	r3, [pc, #376]	; (80060e8 <checkAktifCalisma+0x130c>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	4b5c      	ldr	r3, [pc, #368]	; (80060e8 <checkAktifCalisma+0x130c>)
 8005f76:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005f78:	4b5b      	ldr	r3, [pc, #364]	; (80060e8 <checkAktifCalisma+0x130c>)
 8005f7a:	781a      	ldrb	r2, [r3, #0]
 8005f7c:	4b5b      	ldr	r3, [pc, #364]	; (80060ec <checkAktifCalisma+0x1310>)
 8005f7e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005f82:	4b58      	ldr	r3, [pc, #352]	; (80060e4 <checkAktifCalisma+0x1308>)
 8005f84:	781a      	ldrb	r2, [r3, #0]
 8005f86:	4b59      	ldr	r3, [pc, #356]	; (80060ec <checkAktifCalisma+0x1310>)
 8005f88:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005f8a:	4b55      	ldr	r3, [pc, #340]	; (80060e0 <checkAktifCalisma+0x1304>)
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	4b57      	ldr	r3, [pc, #348]	; (80060ec <checkAktifCalisma+0x1310>)
 8005f90:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005f92:	4b52      	ldr	r3, [pc, #328]	; (80060dc <checkAktifCalisma+0x1300>)
 8005f94:	781a      	ldrb	r2, [r3, #0]
 8005f96:	4b55      	ldr	r3, [pc, #340]	; (80060ec <checkAktifCalisma+0x1310>)
 8005f98:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005f9a:	4b4f      	ldr	r3, [pc, #316]	; (80060d8 <checkAktifCalisma+0x12fc>)
 8005f9c:	781a      	ldrb	r2, [r3, #0]
 8005f9e:	4b53      	ldr	r3, [pc, #332]	; (80060ec <checkAktifCalisma+0x1310>)
 8005fa0:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005fa2:	4b53      	ldr	r3, [pc, #332]	; (80060f0 <checkAktifCalisma+0x1314>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005fa8:	4b46      	ldr	r3, [pc, #280]	; (80060c4 <checkAktifCalisma+0x12e8>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005fae:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <checkAktifCalisma+0x12f8>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fb8:	484e      	ldr	r0, [pc, #312]	; (80060f4 <checkAktifCalisma+0x1318>)
 8005fba:	f003 f9ed 	bl	8009398 <HAL_GPIO_ReadPin>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d016      	beq.n	8005ff2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005fc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fc8:	484a      	ldr	r0, [pc, #296]	; (80060f4 <checkAktifCalisma+0x1318>)
 8005fca:	f003 f9e5 	bl	8009398 <HAL_GPIO_ReadPin>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00e      	beq.n	8005ff2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fd8:	4846      	ldr	r0, [pc, #280]	; (80060f4 <checkAktifCalisma+0x1318>)
 8005fda:	f003 f9dd 	bl	8009398 <HAL_GPIO_ReadPin>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d006      	beq.n	8005ff2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005fe4:	2140      	movs	r1, #64	; 0x40
 8005fe6:	4838      	ldr	r0, [pc, #224]	; (80060c8 <checkAktifCalisma+0x12ec>)
 8005fe8:	f003 f9d6 	bl	8009398 <HAL_GPIO_ReadPin>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <checkAktifCalisma+0x121e>
			startBasili=1;
 8005ff2:	4b41      	ldr	r3, [pc, #260]	; (80060f8 <checkAktifCalisma+0x131c>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e002      	b.n	8006000 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005ffa:	4b3f      	ldr	r3, [pc, #252]	; (80060f8 <checkAktifCalisma+0x131c>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006000:	4b3d      	ldr	r3, [pc, #244]	; (80060f8 <checkAktifCalisma+0x131c>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d016      	beq.n	8006036 <checkAktifCalisma+0x125a>
 8006008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800600c:	4839      	ldr	r0, [pc, #228]	; (80060f4 <checkAktifCalisma+0x1318>)
 800600e:	f003 f9c3 	bl	8009398 <HAL_GPIO_ReadPin>
 8006012:	4603      	mov	r3, r0
 8006014:	2b01      	cmp	r3, #1
 8006016:	d10e      	bne.n	8006036 <checkAktifCalisma+0x125a>
			hataVar=1;
 8006018:	4b38      	ldr	r3, [pc, #224]	; (80060fc <checkAktifCalisma+0x1320>)
 800601a:	2201      	movs	r2, #1
 800601c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800601e:	2001      	movs	r0, #1
 8006020:	f7fa fd66 	bl	8000af0 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006024:	2001      	movs	r0, #1
 8006026:	f7fa fd09 	bl	8000a3c <hata2EEPROM>
			convertAndSendData();
 800602a:	f001 fc75 	bl	8007918 <convertAndSendData>
			acilstophatasi=1;
 800602e:	4b34      	ldr	r3, [pc, #208]	; (8006100 <checkAktifCalisma+0x1324>)
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	e018      	b.n	8006068 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006036:	4b32      	ldr	r3, [pc, #200]	; (8006100 <checkAktifCalisma+0x1324>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d014      	beq.n	8006068 <checkAktifCalisma+0x128c>
 800603e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006042:	482c      	ldr	r0, [pc, #176]	; (80060f4 <checkAktifCalisma+0x1318>)
 8006044:	f003 f9a8 	bl	8009398 <HAL_GPIO_ReadPin>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10c      	bne.n	8006068 <checkAktifCalisma+0x128c>
 800604e:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <checkAktifCalisma+0x131c>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	f083 0301 	eor.w	r3, r3, #1
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 800605c:	4b28      	ldr	r3, [pc, #160]	; (8006100 <checkAktifCalisma+0x1324>)
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006062:	2001      	movs	r0, #1
 8006064:	f7fe fce8 	bl	8004a38 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006068:	4b26      	ldr	r3, [pc, #152]	; (8006104 <checkAktifCalisma+0x1328>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	f083 0301 	eor.w	r3, r3, #1
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d04e      	beq.n	8006114 <checkAktifCalisma+0x1338>
 8006076:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800607a:	481e      	ldr	r0, [pc, #120]	; (80060f4 <checkAktifCalisma+0x1318>)
 800607c:	f003 f98c 	bl	8009398 <HAL_GPIO_ReadPin>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <checkAktifCalisma+0x12b2>
 8006086:	4b20      	ldr	r3, [pc, #128]	; (8006108 <checkAktifCalisma+0x132c>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d042      	beq.n	8006114 <checkAktifCalisma+0x1338>
 800608e:	4b1f      	ldr	r3, [pc, #124]	; (800610c <checkAktifCalisma+0x1330>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d13e      	bne.n	8006114 <checkAktifCalisma+0x1338>
			hataVar=1;
 8006096:	4b19      	ldr	r3, [pc, #100]	; (80060fc <checkAktifCalisma+0x1320>)
 8006098:	2201      	movs	r2, #1
 800609a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 800609c:	2002      	movs	r0, #2
 800609e:	f7fa fd27 	bl	8000af0 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80060a2:	2002      	movs	r0, #2
 80060a4:	f7fa fcca 	bl	8000a3c <hata2EEPROM>
			convertAndSendData();
 80060a8:	f001 fc36 	bl	8007918 <convertAndSendData>
			emniyetCercevesihatasi=1;
 80060ac:	4b18      	ldr	r3, [pc, #96]	; (8006110 <checkAktifCalisma+0x1334>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e047      	b.n	8006144 <checkAktifCalisma+0x1368>
 80060b4:	20000273 	.word	0x20000273
 80060b8:	20000272 	.word	0x20000272
 80060bc:	20000271 	.word	0x20000271
 80060c0:	40010800 	.word	0x40010800
 80060c4:	20000267 	.word	0x20000267
 80060c8:	40011000 	.word	0x40011000
 80060cc:	2000022e 	.word	0x2000022e
 80060d0:	2000026a 	.word	0x2000026a
 80060d4:	20000268 	.word	0x20000268
 80060d8:	20000225 	.word	0x20000225
 80060dc:	20000226 	.word	0x20000226
 80060e0:	20000000 	.word	0x20000000
 80060e4:	20000001 	.word	0x20000001
 80060e8:	20000227 	.word	0x20000227
 80060ec:	2000012c 	.word	0x2000012c
 80060f0:	20000254 	.word	0x20000254
 80060f4:	40010c00 	.word	0x40010c00
 80060f8:	20000276 	.word	0x20000276
 80060fc:	2000027d 	.word	0x2000027d
 8006100:	20000278 	.word	0x20000278
 8006104:	2000027f 	.word	0x2000027f
 8006108:	20000289 	.word	0x20000289
 800610c:	2000022c 	.word	0x2000022c
 8006110:	20000279 	.word	0x20000279
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006114:	4b9b      	ldr	r3, [pc, #620]	; (8006384 <checkAktifCalisma+0x15a8>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d013      	beq.n	8006144 <checkAktifCalisma+0x1368>
 800611c:	4b9a      	ldr	r3, [pc, #616]	; (8006388 <checkAktifCalisma+0x15ac>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00f      	beq.n	8006144 <checkAktifCalisma+0x1368>
 8006124:	4b99      	ldr	r3, [pc, #612]	; (800638c <checkAktifCalisma+0x15b0>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f083 0301 	eor.w	r3, r3, #1
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d008      	beq.n	8006144 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8006132:	4b94      	ldr	r3, [pc, #592]	; (8006384 <checkAktifCalisma+0x15a8>)
 8006134:	2200      	movs	r2, #0
 8006136:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006138:	4b95      	ldr	r3, [pc, #596]	; (8006390 <checkAktifCalisma+0x15b4>)
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800613e:	2002      	movs	r0, #2
 8006140:	f7fe fc7a 	bl	8004a38 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006144:	4b93      	ldr	r3, [pc, #588]	; (8006394 <checkAktifCalisma+0x15b8>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d11e      	bne.n	800618a <checkAktifCalisma+0x13ae>
 800614c:	4b92      	ldr	r3, [pc, #584]	; (8006398 <checkAktifCalisma+0x15bc>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d11a      	bne.n	800618a <checkAktifCalisma+0x13ae>
 8006154:	4b91      	ldr	r3, [pc, #580]	; (800639c <checkAktifCalisma+0x15c0>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d016      	beq.n	800618a <checkAktifCalisma+0x13ae>
 800615c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006160:	488f      	ldr	r0, [pc, #572]	; (80063a0 <checkAktifCalisma+0x15c4>)
 8006162:	f003 f919 	bl	8009398 <HAL_GPIO_ReadPin>
 8006166:	4603      	mov	r3, r0
 8006168:	2b01      	cmp	r3, #1
 800616a:	d10e      	bne.n	800618a <checkAktifCalisma+0x13ae>
			hataVar=1;
 800616c:	4b8d      	ldr	r3, [pc, #564]	; (80063a4 <checkAktifCalisma+0x15c8>)
 800616e:	2201      	movs	r2, #1
 8006170:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006172:	2003      	movs	r0, #3
 8006174:	f7fa fcbc 	bl	8000af0 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006178:	2003      	movs	r0, #3
 800617a:	f7fa fc5f 	bl	8000a3c <hata2EEPROM>
			convertAndSendData();
 800617e:	f001 fbcb 	bl	8007918 <convertAndSendData>
			basinchatasi=1;
 8006182:	4b89      	ldr	r3, [pc, #548]	; (80063a8 <checkAktifCalisma+0x15cc>)
 8006184:	2201      	movs	r2, #1
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	e015      	b.n	80061b6 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800618a:	4b87      	ldr	r3, [pc, #540]	; (80063a8 <checkAktifCalisma+0x15cc>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d011      	beq.n	80061b6 <checkAktifCalisma+0x13da>
 8006192:	4b80      	ldr	r3, [pc, #512]	; (8006394 <checkAktifCalisma+0x15b8>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d10d      	bne.n	80061b6 <checkAktifCalisma+0x13da>
 800619a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800619e:	4883      	ldr	r0, [pc, #524]	; (80063ac <checkAktifCalisma+0x15d0>)
 80061a0:	f003 f8fa 	bl	8009398 <HAL_GPIO_ReadPin>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d105      	bne.n	80061b6 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80061aa:	4b7f      	ldr	r3, [pc, #508]	; (80063a8 <checkAktifCalisma+0x15cc>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80061b0:	2003      	movs	r0, #3
 80061b2:	f7fe fc41 	bl	8004a38 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80061b6:	4b7e      	ldr	r3, [pc, #504]	; (80063b0 <checkAktifCalisma+0x15d4>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d103      	bne.n	80061c6 <checkAktifCalisma+0x13ea>
 80061be:	4b7d      	ldr	r3, [pc, #500]	; (80063b4 <checkAktifCalisma+0x15d8>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01e      	beq.n	8006204 <checkAktifCalisma+0x1428>
 80061c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061ca:	487b      	ldr	r0, [pc, #492]	; (80063b8 <checkAktifCalisma+0x15dc>)
 80061cc:	f003 f8e4 	bl	8009398 <HAL_GPIO_ReadPin>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d116      	bne.n	8006204 <checkAktifCalisma+0x1428>
 80061d6:	4b79      	ldr	r3, [pc, #484]	; (80063bc <checkAktifCalisma+0x15e0>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d003      	beq.n	80061e6 <checkAktifCalisma+0x140a>
 80061de:	4b77      	ldr	r3, [pc, #476]	; (80063bc <checkAktifCalisma+0x15e0>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d10e      	bne.n	8006204 <checkAktifCalisma+0x1428>
			hataVar=1;
 80061e6:	4b6f      	ldr	r3, [pc, #444]	; (80063a4 <checkAktifCalisma+0x15c8>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80061ec:	2004      	movs	r0, #4
 80061ee:	f7fa fc7f 	bl	8000af0 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80061f2:	2004      	movs	r0, #4
 80061f4:	f7fa fc22 	bl	8000a3c <hata2EEPROM>
			convertAndSendData();
 80061f8:	f001 fb8e 	bl	8007918 <convertAndSendData>
			katkapisivicihatasi=1;
 80061fc:	4b70      	ldr	r3, [pc, #448]	; (80063c0 <checkAktifCalisma+0x15e4>)
 80061fe:	2201      	movs	r2, #1
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	e01f      	b.n	8006244 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006204:	4b6e      	ldr	r3, [pc, #440]	; (80063c0 <checkAktifCalisma+0x15e4>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d01b      	beq.n	8006244 <checkAktifCalisma+0x1468>
 800620c:	4b6d      	ldr	r3, [pc, #436]	; (80063c4 <checkAktifCalisma+0x15e8>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d017      	beq.n	8006244 <checkAktifCalisma+0x1468>
 8006214:	4b66      	ldr	r3, [pc, #408]	; (80063b0 <checkAktifCalisma+0x15d4>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	f083 0301 	eor.w	r3, r3, #1
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d010      	beq.n	8006244 <checkAktifCalisma+0x1468>
 8006222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006226:	4864      	ldr	r0, [pc, #400]	; (80063b8 <checkAktifCalisma+0x15dc>)
 8006228:	f003 f8b6 	bl	8009398 <HAL_GPIO_ReadPin>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d108      	bne.n	8006244 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006232:	4b63      	ldr	r3, [pc, #396]	; (80063c0 <checkAktifCalisma+0x15e4>)
 8006234:	2200      	movs	r2, #0
 8006236:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006238:	4b5e      	ldr	r3, [pc, #376]	; (80063b4 <checkAktifCalisma+0x15d8>)
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800623e:	2004      	movs	r0, #4
 8006240:	f7fe fbfa 	bl	8004a38 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006244:	4b5a      	ldr	r3, [pc, #360]	; (80063b0 <checkAktifCalisma+0x15d4>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <checkAktifCalisma+0x1478>
 800624c:	4b5e      	ldr	r3, [pc, #376]	; (80063c8 <checkAktifCalisma+0x15ec>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01e      	beq.n	8006292 <checkAktifCalisma+0x14b6>
 8006254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006258:	4857      	ldr	r0, [pc, #348]	; (80063b8 <checkAktifCalisma+0x15dc>)
 800625a:	f003 f89d 	bl	8009398 <HAL_GPIO_ReadPin>
 800625e:	4603      	mov	r3, r0
 8006260:	2b01      	cmp	r3, #1
 8006262:	d116      	bne.n	8006292 <checkAktifCalisma+0x14b6>
 8006264:	4b55      	ldr	r3, [pc, #340]	; (80063bc <checkAktifCalisma+0x15e0>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d003      	beq.n	8006274 <checkAktifCalisma+0x1498>
 800626c:	4b53      	ldr	r3, [pc, #332]	; (80063bc <checkAktifCalisma+0x15e0>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b03      	cmp	r3, #3
 8006272:	d10e      	bne.n	8006292 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006274:	4b4b      	ldr	r3, [pc, #300]	; (80063a4 <checkAktifCalisma+0x15c8>)
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800627a:	2005      	movs	r0, #5
 800627c:	f7fa fc38 	bl	8000af0 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006280:	2005      	movs	r0, #5
 8006282:	f7fa fbdb 	bl	8000a3c <hata2EEPROM>
			convertAndSendData();
 8006286:	f001 fb47 	bl	8007918 <convertAndSendData>
			tablakapisivicihatasi=1;
 800628a:	4b50      	ldr	r3, [pc, #320]	; (80063cc <checkAktifCalisma+0x15f0>)
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	e023      	b.n	80062da <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006292:	4b4e      	ldr	r3, [pc, #312]	; (80063cc <checkAktifCalisma+0x15f0>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01f      	beq.n	80062da <checkAktifCalisma+0x14fe>
 800629a:	4b4a      	ldr	r3, [pc, #296]	; (80063c4 <checkAktifCalisma+0x15e8>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d01b      	beq.n	80062da <checkAktifCalisma+0x14fe>
 80062a2:	4b43      	ldr	r3, [pc, #268]	; (80063b0 <checkAktifCalisma+0x15d4>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f083 0301 	eor.w	r3, r3, #1
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d014      	beq.n	80062da <checkAktifCalisma+0x14fe>
 80062b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062b4:	4840      	ldr	r0, [pc, #256]	; (80063b8 <checkAktifCalisma+0x15dc>)
 80062b6:	f003 f86f 	bl	8009398 <HAL_GPIO_ReadPin>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10c      	bne.n	80062da <checkAktifCalisma+0x14fe>
 80062c0:	4b40      	ldr	r3, [pc, #256]	; (80063c4 <checkAktifCalisma+0x15e8>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80062c8:	4b40      	ldr	r3, [pc, #256]	; (80063cc <checkAktifCalisma+0x15f0>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80062ce:	4b3e      	ldr	r3, [pc, #248]	; (80063c8 <checkAktifCalisma+0x15ec>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80062d4:	2005      	movs	r0, #5
 80062d6:	f7fe fbaf 	bl	8004a38 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80062da:	4b30      	ldr	r3, [pc, #192]	; (800639c <checkAktifCalisma+0x15c0>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d107      	bne.n	80062f2 <checkAktifCalisma+0x1516>
 80062e2:	4b2a      	ldr	r3, [pc, #168]	; (800638c <checkAktifCalisma+0x15b0>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <checkAktifCalisma+0x1516>
 80062ea:	4b39      	ldr	r3, [pc, #228]	; (80063d0 <checkAktifCalisma+0x15f4>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d016      	beq.n	8006320 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80062f2:	4b38      	ldr	r3, [pc, #224]	; (80063d4 <checkAktifCalisma+0x15f8>)
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4b38      	ldr	r3, [pc, #224]	; (80063d8 <checkAktifCalisma+0x15fc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	4a37      	ldr	r2, [pc, #220]	; (80063dc <checkAktifCalisma+0x1600>)
 80062fe:	7812      	ldrb	r2, [r2, #0]
 8006300:	4293      	cmp	r3, r2
 8006302:	d30d      	bcc.n	8006320 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006304:	4b27      	ldr	r3, [pc, #156]	; (80063a4 <checkAktifCalisma+0x15c8>)
 8006306:	2201      	movs	r2, #1
 8006308:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800630a:	2006      	movs	r0, #6
 800630c:	f7fa fbf0 	bl	8000af0 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006310:	2006      	movs	r0, #6
 8006312:	f7fa fb93 	bl	8000a3c <hata2EEPROM>
			  	convertAndSendData();
 8006316:	f001 faff 	bl	8007918 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800631a:	4b31      	ldr	r3, [pc, #196]	; (80063e0 <checkAktifCalisma+0x1604>)
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006320:	4b2f      	ldr	r3, [pc, #188]	; (80063e0 <checkAktifCalisma+0x1604>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d013      	beq.n	8006350 <checkAktifCalisma+0x1574>
 8006328:	2108      	movs	r1, #8
 800632a:	4823      	ldr	r0, [pc, #140]	; (80063b8 <checkAktifCalisma+0x15dc>)
 800632c:	f003 f834 	bl	8009398 <HAL_GPIO_ReadPin>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00c      	beq.n	8006350 <checkAktifCalisma+0x1574>
 8006336:	4b1e      	ldr	r3, [pc, #120]	; (80063b0 <checkAktifCalisma+0x15d4>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f083 0301 	eor.w	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006344:	4b26      	ldr	r3, [pc, #152]	; (80063e0 <checkAktifCalisma+0x1604>)
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800634a:	2006      	movs	r0, #6
 800634c:	f7fe fb74 	bl	8004a38 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006350:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <checkAktifCalisma+0x1608>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <checkAktifCalisma+0x1594>
 8006358:	4b0c      	ldr	r3, [pc, #48]	; (800638c <checkAktifCalisma+0x15b0>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <checkAktifCalisma+0x1594>
 8006360:	4b21      	ldr	r3, [pc, #132]	; (80063e8 <checkAktifCalisma+0x160c>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <checkAktifCalisma+0x1594>
 8006368:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <checkAktifCalisma+0x15f4>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d03f      	beq.n	80063f0 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006370:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <checkAktifCalisma+0x1610>)
 8006372:	2200      	movs	r2, #0
 8006374:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006376:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <checkAktifCalisma+0x15d8>)
 8006378:	2201      	movs	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <checkAktifCalisma+0x15ec>)
 800637e:	2201      	movs	r2, #1
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	e03c      	b.n	80063fe <checkAktifCalisma+0x1622>
 8006384:	20000279 	.word	0x20000279
 8006388:	2000027f 	.word	0x2000027f
 800638c:	20000260 	.word	0x20000260
 8006390:	20000289 	.word	0x20000289
 8006394:	2000022b 	.word	0x2000022b
 8006398:	2000022f 	.word	0x2000022f
 800639c:	2000027c 	.word	0x2000027c
 80063a0:	40011000 	.word	0x40011000
 80063a4:	2000027d 	.word	0x2000027d
 80063a8:	20000286 	.word	0x20000286
 80063ac:	40010c00 	.word	0x40010c00
 80063b0:	20000276 	.word	0x20000276
 80063b4:	2000028a 	.word	0x2000028a
 80063b8:	40010800 	.word	0x40010800
 80063bc:	20000230 	.word	0x20000230
 80063c0:	20000287 	.word	0x20000287
 80063c4:	2000026a 	.word	0x2000026a
 80063c8:	2000028b 	.word	0x2000028b
 80063cc:	20000288 	.word	0x20000288
 80063d0:	2000025f 	.word	0x2000025f
 80063d4:	20000204 	.word	0x20000204
 80063d8:	20000218 	.word	0x20000218
 80063dc:	20000240 	.word	0x20000240
 80063e0:	20000277 	.word	0x20000277
 80063e4:	2000025d 	.word	0x2000025d
 80063e8:	2000025e 	.word	0x2000025e
 80063ec:	2000027e 	.word	0x2000027e
		} else {
			makineCalisiyor=1;
 80063f0:	4b1e      	ldr	r3, [pc, #120]	; (800646c <checkAktifCalisma+0x1690>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80063f6:	4b1e      	ldr	r3, [pc, #120]	; (8006470 <checkAktifCalisma+0x1694>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1e      	ldr	r2, [pc, #120]	; (8006474 <checkAktifCalisma+0x1698>)
 80063fc:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80063fe:	4b1e      	ldr	r3, [pc, #120]	; (8006478 <checkAktifCalisma+0x169c>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d02f      	beq.n	8006466 <checkAktifCalisma+0x168a>
 8006406:	4b1d      	ldr	r3, [pc, #116]	; (800647c <checkAktifCalisma+0x16a0>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	f083 0301 	eor.w	r3, r3, #1
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d028      	beq.n	8006466 <checkAktifCalisma+0x168a>
 8006414:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <checkAktifCalisma+0x16a4>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f083 0301 	eor.w	r3, r3, #1
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d021      	beq.n	8006466 <checkAktifCalisma+0x168a>
 8006422:	4b18      	ldr	r3, [pc, #96]	; (8006484 <checkAktifCalisma+0x16a8>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f083 0301 	eor.w	r3, r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01a      	beq.n	8006466 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006430:	4b15      	ldr	r3, [pc, #84]	; (8006488 <checkAktifCalisma+0x16ac>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f083 0301 	eor.w	r3, r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d013      	beq.n	8006466 <checkAktifCalisma+0x168a>
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <checkAktifCalisma+0x16b0>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f083 0301 	eor.w	r3, r3, #1
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00c      	beq.n	8006466 <checkAktifCalisma+0x168a>
 800644c:	4b10      	ldr	r3, [pc, #64]	; (8006490 <checkAktifCalisma+0x16b4>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f083 0301 	eor.w	r3, r3, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d005      	beq.n	8006466 <checkAktifCalisma+0x168a>
			hataVar=0;
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <checkAktifCalisma+0x169c>)
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006460:	2007      	movs	r0, #7
 8006462:	f7fe fae9 	bl	8004a38 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	2000027e 	.word	0x2000027e
 8006470:	20000204 	.word	0x20000204
 8006474:	20000218 	.word	0x20000218
 8006478:	2000027d 	.word	0x2000027d
 800647c:	20000278 	.word	0x20000278
 8006480:	20000279 	.word	0x20000279
 8006484:	20000286 	.word	0x20000286
 8006488:	20000287 	.word	0x20000287
 800648c:	20000288 	.word	0x20000288
 8006490:	20000277 	.word	0x20000277

08006494 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006498:	4b8b      	ldr	r3, [pc, #556]	; (80066c8 <checkDemoModCalisma+0x234>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b01      	cmp	r3, #1
 800649e:	f040 8229 	bne.w	80068f4 <checkDemoModCalisma+0x460>
 80064a2:	4b8a      	ldr	r3, [pc, #552]	; (80066cc <checkDemoModCalisma+0x238>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 8224 	beq.w	80068f4 <checkDemoModCalisma+0x460>
 80064ac:	4b88      	ldr	r3, [pc, #544]	; (80066d0 <checkDemoModCalisma+0x23c>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f040 821f 	bne.w	80068f4 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80064b6:	2102      	movs	r1, #2
 80064b8:	4886      	ldr	r0, [pc, #536]	; (80066d4 <checkDemoModCalisma+0x240>)
 80064ba:	f002 ff6d 	bl	8009398 <HAL_GPIO_ReadPin>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d11d      	bne.n	8006500 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80064c4:	4b84      	ldr	r3, [pc, #528]	; (80066d8 <checkDemoModCalisma+0x244>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f083 0301 	eor.w	r3, r3, #1
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80064d2:	4b82      	ldr	r3, [pc, #520]	; (80066dc <checkDemoModCalisma+0x248>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	f083 0301 	eor.w	r3, r3, #1
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00f      	beq.n	8006500 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80064e0:	4b7f      	ldr	r3, [pc, #508]	; (80066e0 <checkDemoModCalisma+0x24c>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	f083 0301 	eor.w	r3, r3, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d008      	beq.n	8006500 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80064ee:	2201      	movs	r2, #1
 80064f0:	2104      	movs	r1, #4
 80064f2:	487c      	ldr	r0, [pc, #496]	; (80066e4 <checkDemoModCalisma+0x250>)
 80064f4:	f002 ff67 	bl	80093c6 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80064f8:	4b7b      	ldr	r3, [pc, #492]	; (80066e8 <checkDemoModCalisma+0x254>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	e00e      	b.n	800651e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006500:	2102      	movs	r1, #2
 8006502:	4874      	ldr	r0, [pc, #464]	; (80066d4 <checkDemoModCalisma+0x240>)
 8006504:	f002 ff48 	bl	8009398 <HAL_GPIO_ReadPin>
 8006508:	4603      	mov	r3, r0
 800650a:	2b01      	cmp	r3, #1
 800650c:	d107      	bne.n	800651e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800650e:	2200      	movs	r2, #0
 8006510:	2104      	movs	r1, #4
 8006512:	4874      	ldr	r0, [pc, #464]	; (80066e4 <checkDemoModCalisma+0x250>)
 8006514:	f002 ff57 	bl	80093c6 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006518:	4b73      	ldr	r3, [pc, #460]	; (80066e8 <checkDemoModCalisma+0x254>)
 800651a:	2200      	movs	r2, #0
 800651c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800651e:	4b72      	ldr	r3, [pc, #456]	; (80066e8 <checkDemoModCalisma+0x254>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <checkDemoModCalisma+0xaa>
 8006526:	4b6d      	ldr	r3, [pc, #436]	; (80066dc <checkDemoModCalisma+0x248>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d107      	bne.n	800653e <checkDemoModCalisma+0xaa>
 800652e:	4b6c      	ldr	r3, [pc, #432]	; (80066e0 <checkDemoModCalisma+0x24c>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <checkDemoModCalisma+0xaa>
 8006536:	4b68      	ldr	r3, [pc, #416]	; (80066d8 <checkDemoModCalisma+0x244>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00c      	beq.n	8006558 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800653e:	2201      	movs	r2, #1
 8006540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006544:	4867      	ldr	r0, [pc, #412]	; (80066e4 <checkDemoModCalisma+0x250>)
 8006546:	f002 ff3e 	bl	80093c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800654a:	2201      	movs	r2, #1
 800654c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006550:	4864      	ldr	r0, [pc, #400]	; (80066e4 <checkDemoModCalisma+0x250>)
 8006552:	f002 ff38 	bl	80093c6 <HAL_GPIO_WritePin>
 8006556:	e00b      	b.n	8006570 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006558:	2200      	movs	r2, #0
 800655a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800655e:	4861      	ldr	r0, [pc, #388]	; (80066e4 <checkDemoModCalisma+0x250>)
 8006560:	f002 ff31 	bl	80093c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006564:	2200      	movs	r2, #0
 8006566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800656a:	485e      	ldr	r0, [pc, #376]	; (80066e4 <checkDemoModCalisma+0x250>)
 800656c:	f002 ff2b 	bl	80093c6 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006570:	2102      	movs	r1, #2
 8006572:	4858      	ldr	r0, [pc, #352]	; (80066d4 <checkDemoModCalisma+0x240>)
 8006574:	f002 ff10 	bl	8009398 <HAL_GPIO_ReadPin>
 8006578:	4603      	mov	r3, r0
 800657a:	2b01      	cmp	r3, #1
 800657c:	d10d      	bne.n	800659a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800657e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006582:	4854      	ldr	r0, [pc, #336]	; (80066d4 <checkDemoModCalisma+0x240>)
 8006584:	f002 ff08 	bl	8009398 <HAL_GPIO_ReadPin>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d105      	bne.n	800659a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800658e:	4b56      	ldr	r3, [pc, #344]	; (80066e8 <checkDemoModCalisma+0x254>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	f083 0301 	eor.w	r3, r3, #1
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800659a:	2102      	movs	r1, #2
 800659c:	484d      	ldr	r0, [pc, #308]	; (80066d4 <checkDemoModCalisma+0x240>)
 800659e:	f002 fefb 	bl	8009398 <HAL_GPIO_ReadPin>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d125      	bne.n	80065f4 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80065a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065ac:	4849      	ldr	r0, [pc, #292]	; (80066d4 <checkDemoModCalisma+0x240>)
 80065ae:	f002 fef3 	bl	8009398 <HAL_GPIO_ReadPin>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d11d      	bne.n	80065f4 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80065b8:	4b4b      	ldr	r3, [pc, #300]	; (80066e8 <checkDemoModCalisma+0x254>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	f083 0301 	eor.w	r3, r3, #1
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d016      	beq.n	80065f4 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80065c6:	4b44      	ldr	r3, [pc, #272]	; (80066d8 <checkDemoModCalisma+0x244>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	f083 0301 	eor.w	r3, r3, #1
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00f      	beq.n	80065f4 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80065d4:	4b42      	ldr	r3, [pc, #264]	; (80066e0 <checkDemoModCalisma+0x24c>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f083 0301 	eor.w	r3, r3, #1
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80065e2:	2201      	movs	r2, #1
 80065e4:	2120      	movs	r1, #32
 80065e6:	483b      	ldr	r0, [pc, #236]	; (80066d4 <checkDemoModCalisma+0x240>)
 80065e8:	f002 feed 	bl	80093c6 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80065ec:	4b3b      	ldr	r3, [pc, #236]	; (80066dc <checkDemoModCalisma+0x248>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	e007      	b.n	8006604 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80065f4:	2200      	movs	r2, #0
 80065f6:	2120      	movs	r1, #32
 80065f8:	4836      	ldr	r0, [pc, #216]	; (80066d4 <checkDemoModCalisma+0x240>)
 80065fa:	f002 fee4 	bl	80093c6 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80065fe:	4b37      	ldr	r3, [pc, #220]	; (80066dc <checkDemoModCalisma+0x248>)
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006604:	2102      	movs	r1, #2
 8006606:	4833      	ldr	r0, [pc, #204]	; (80066d4 <checkDemoModCalisma+0x240>)
 8006608:	f002 fec6 	bl	8009398 <HAL_GPIO_ReadPin>
 800660c:	4603      	mov	r3, r0
 800660e:	2b01      	cmp	r3, #1
 8006610:	d125      	bne.n	800665e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006612:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006616:	482f      	ldr	r0, [pc, #188]	; (80066d4 <checkDemoModCalisma+0x240>)
 8006618:	f002 febe 	bl	8009398 <HAL_GPIO_ReadPin>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d11d      	bne.n	800665e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006622:	4b31      	ldr	r3, [pc, #196]	; (80066e8 <checkDemoModCalisma+0x254>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	f083 0301 	eor.w	r3, r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d016      	beq.n	800665e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006630:	4b2a      	ldr	r3, [pc, #168]	; (80066dc <checkDemoModCalisma+0x248>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	f083 0301 	eor.w	r3, r3, #1
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00f      	beq.n	800665e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800663e:	4b26      	ldr	r3, [pc, #152]	; (80066d8 <checkDemoModCalisma+0x244>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	f083 0301 	eor.w	r3, r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d008      	beq.n	800665e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800664c:	2201      	movs	r2, #1
 800664e:	2110      	movs	r1, #16
 8006650:	4820      	ldr	r0, [pc, #128]	; (80066d4 <checkDemoModCalisma+0x240>)
 8006652:	f002 feb8 	bl	80093c6 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006656:	4b22      	ldr	r3, [pc, #136]	; (80066e0 <checkDemoModCalisma+0x24c>)
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	e007      	b.n	800666e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800665e:	2200      	movs	r2, #0
 8006660:	2110      	movs	r1, #16
 8006662:	481c      	ldr	r0, [pc, #112]	; (80066d4 <checkDemoModCalisma+0x240>)
 8006664:	f002 feaf 	bl	80093c6 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006668:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <checkDemoModCalisma+0x24c>)
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800666e:	2104      	movs	r1, #4
 8006670:	4818      	ldr	r0, [pc, #96]	; (80066d4 <checkDemoModCalisma+0x240>)
 8006672:	f002 fe91 	bl	8009398 <HAL_GPIO_ReadPin>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d139      	bne.n	80066f0 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 800667c:	4b1a      	ldr	r3, [pc, #104]	; (80066e8 <checkDemoModCalisma+0x254>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	f083 0301 	eor.w	r3, r3, #1
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d032      	beq.n	80066f0 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <checkDemoModCalisma+0x24c>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	f083 0301 	eor.w	r3, r3, #1
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d02b      	beq.n	80066f0 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006698:	4b10      	ldr	r3, [pc, #64]	; (80066dc <checkDemoModCalisma+0x248>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f083 0301 	eor.w	r3, r3, #1
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d024      	beq.n	80066f0 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80066a6:	2201      	movs	r2, #1
 80066a8:	2102      	movs	r1, #2
 80066aa:	480e      	ldr	r0, [pc, #56]	; (80066e4 <checkDemoModCalisma+0x250>)
 80066ac:	f002 fe8b 	bl	80093c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80066b0:	2201      	movs	r2, #1
 80066b2:	2101      	movs	r1, #1
 80066b4:	480b      	ldr	r0, [pc, #44]	; (80066e4 <checkDemoModCalisma+0x250>)
 80066b6:	f002 fe86 	bl	80093c6 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <checkDemoModCalisma+0x244>)
 80066bc:	2201      	movs	r2, #1
 80066be:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <checkDemoModCalisma+0x258>)
 80066c2:	2201      	movs	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	e027      	b.n	8006718 <checkDemoModCalisma+0x284>
 80066c8:	20000246 	.word	0x20000246
 80066cc:	2000027a 	.word	0x2000027a
 80066d0:	20000245 	.word	0x20000245
 80066d4:	40011000 	.word	0x40011000
 80066d8:	20000281 	.word	0x20000281
 80066dc:	20000282 	.word	0x20000282
 80066e0:	20000283 	.word	0x20000283
 80066e4:	40010c00 	.word	0x40010c00
 80066e8:	20000280 	.word	0x20000280
 80066ec:	20000266 	.word	0x20000266
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80066f0:	2104      	movs	r1, #4
 80066f2:	48a0      	ldr	r0, [pc, #640]	; (8006974 <checkDemoModCalisma+0x4e0>)
 80066f4:	f002 fe50 	bl	8009398 <HAL_GPIO_ReadPin>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d10c      	bne.n	8006718 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80066fe:	2200      	movs	r2, #0
 8006700:	2102      	movs	r1, #2
 8006702:	489d      	ldr	r0, [pc, #628]	; (8006978 <checkDemoModCalisma+0x4e4>)
 8006704:	f002 fe5f 	bl	80093c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006708:	2200      	movs	r2, #0
 800670a:	2101      	movs	r1, #1
 800670c:	489a      	ldr	r0, [pc, #616]	; (8006978 <checkDemoModCalisma+0x4e4>)
 800670e:	f002 fe5a 	bl	80093c6 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006712:	4b9a      	ldr	r3, [pc, #616]	; (800697c <checkDemoModCalisma+0x4e8>)
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006718:	2104      	movs	r1, #4
 800671a:	4896      	ldr	r0, [pc, #600]	; (8006974 <checkDemoModCalisma+0x4e0>)
 800671c:	f002 fe3c 	bl	8009398 <HAL_GPIO_ReadPin>
 8006720:	4603      	mov	r3, r0
 8006722:	2b01      	cmp	r3, #1
 8006724:	d10d      	bne.n	8006742 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006726:	2201      	movs	r2, #1
 8006728:	2180      	movs	r1, #128	; 0x80
 800672a:	4895      	ldr	r0, [pc, #596]	; (8006980 <checkDemoModCalisma+0x4ec>)
 800672c:	f002 fe4b 	bl	80093c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006730:	2201      	movs	r2, #1
 8006732:	2120      	movs	r1, #32
 8006734:	4892      	ldr	r0, [pc, #584]	; (8006980 <checkDemoModCalisma+0x4ec>)
 8006736:	f002 fe46 	bl	80093c6 <HAL_GPIO_WritePin>
			timer3 = millis;
 800673a:	4b92      	ldr	r3, [pc, #584]	; (8006984 <checkDemoModCalisma+0x4f0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a92      	ldr	r2, [pc, #584]	; (8006988 <checkDemoModCalisma+0x4f4>)
 8006740:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006742:	4b90      	ldr	r3, [pc, #576]	; (8006984 <checkDemoModCalisma+0x4f0>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b90      	ldr	r3, [pc, #576]	; (8006988 <checkDemoModCalisma+0x4f4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b04      	cmp	r3, #4
 800674e:	d909      	bls.n	8006764 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006750:	2200      	movs	r2, #0
 8006752:	2180      	movs	r1, #128	; 0x80
 8006754:	488a      	ldr	r0, [pc, #552]	; (8006980 <checkDemoModCalisma+0x4ec>)
 8006756:	f002 fe36 	bl	80093c6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800675a:	2200      	movs	r2, #0
 800675c:	2120      	movs	r1, #32
 800675e:	4888      	ldr	r0, [pc, #544]	; (8006980 <checkDemoModCalisma+0x4ec>)
 8006760:	f002 fe31 	bl	80093c6 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006764:	2102      	movs	r1, #2
 8006766:	4883      	ldr	r0, [pc, #524]	; (8006974 <checkDemoModCalisma+0x4e0>)
 8006768:	f002 fe16 	bl	8009398 <HAL_GPIO_ReadPin>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	d108      	bne.n	8006784 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006772:	2201      	movs	r2, #1
 8006774:	2140      	movs	r1, #64	; 0x40
 8006776:	4882      	ldr	r0, [pc, #520]	; (8006980 <checkDemoModCalisma+0x4ec>)
 8006778:	f002 fe25 	bl	80093c6 <HAL_GPIO_WritePin>
			timer3 = millis;
 800677c:	4b81      	ldr	r3, [pc, #516]	; (8006984 <checkDemoModCalisma+0x4f0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a81      	ldr	r2, [pc, #516]	; (8006988 <checkDemoModCalisma+0x4f4>)
 8006782:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006784:	4b7f      	ldr	r3, [pc, #508]	; (8006984 <checkDemoModCalisma+0x4f0>)
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	4b7f      	ldr	r3, [pc, #508]	; (8006988 <checkDemoModCalisma+0x4f4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b04      	cmp	r3, #4
 8006790:	d904      	bls.n	800679c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006792:	2200      	movs	r2, #0
 8006794:	2140      	movs	r1, #64	; 0x40
 8006796:	487a      	ldr	r0, [pc, #488]	; (8006980 <checkDemoModCalisma+0x4ec>)
 8006798:	f002 fe15 	bl	80093c6 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800679c:	4b7b      	ldr	r3, [pc, #492]	; (800698c <checkDemoModCalisma+0x4f8>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d058      	beq.n	8006856 <checkDemoModCalisma+0x3c2>
 80067a4:	4b7a      	ldr	r3, [pc, #488]	; (8006990 <checkDemoModCalisma+0x4fc>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d054      	beq.n	8006856 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80067ac:	4b79      	ldr	r3, [pc, #484]	; (8006994 <checkDemoModCalisma+0x500>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	3301      	adds	r3, #1
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	4b77      	ldr	r3, [pc, #476]	; (8006994 <checkDemoModCalisma+0x500>)
 80067b6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80067b8:	4b76      	ldr	r3, [pc, #472]	; (8006994 <checkDemoModCalisma+0x500>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b09      	cmp	r3, #9
 80067be:	d908      	bls.n	80067d2 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80067c0:	4b74      	ldr	r3, [pc, #464]	; (8006994 <checkDemoModCalisma+0x500>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80067c6:	4b74      	ldr	r3, [pc, #464]	; (8006998 <checkDemoModCalisma+0x504>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	3301      	adds	r3, #1
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	4b72      	ldr	r3, [pc, #456]	; (8006998 <checkDemoModCalisma+0x504>)
 80067d0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80067d2:	4b71      	ldr	r3, [pc, #452]	; (8006998 <checkDemoModCalisma+0x504>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b09      	cmp	r3, #9
 80067d8:	d908      	bls.n	80067ec <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80067da:	4b6f      	ldr	r3, [pc, #444]	; (8006998 <checkDemoModCalisma+0x504>)
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80067e0:	4b6e      	ldr	r3, [pc, #440]	; (800699c <checkDemoModCalisma+0x508>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	3301      	adds	r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	4b6c      	ldr	r3, [pc, #432]	; (800699c <checkDemoModCalisma+0x508>)
 80067ea:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80067ec:	4b6b      	ldr	r3, [pc, #428]	; (800699c <checkDemoModCalisma+0x508>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b09      	cmp	r3, #9
 80067f2:	d908      	bls.n	8006806 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80067f4:	4b69      	ldr	r3, [pc, #420]	; (800699c <checkDemoModCalisma+0x508>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80067fa:	4b69      	ldr	r3, [pc, #420]	; (80069a0 <checkDemoModCalisma+0x50c>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	3301      	adds	r3, #1
 8006800:	b2da      	uxtb	r2, r3
 8006802:	4b67      	ldr	r3, [pc, #412]	; (80069a0 <checkDemoModCalisma+0x50c>)
 8006804:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006806:	4b66      	ldr	r3, [pc, #408]	; (80069a0 <checkDemoModCalisma+0x50c>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b09      	cmp	r3, #9
 800680c:	d908      	bls.n	8006820 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800680e:	4b64      	ldr	r3, [pc, #400]	; (80069a0 <checkDemoModCalisma+0x50c>)
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006814:	4b63      	ldr	r3, [pc, #396]	; (80069a4 <checkDemoModCalisma+0x510>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	b2da      	uxtb	r2, r3
 800681c:	4b61      	ldr	r3, [pc, #388]	; (80069a4 <checkDemoModCalisma+0x510>)
 800681e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006820:	4b60      	ldr	r3, [pc, #384]	; (80069a4 <checkDemoModCalisma+0x510>)
 8006822:	781a      	ldrb	r2, [r3, #0]
 8006824:	4b60      	ldr	r3, [pc, #384]	; (80069a8 <checkDemoModCalisma+0x514>)
 8006826:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800682a:	4b5d      	ldr	r3, [pc, #372]	; (80069a0 <checkDemoModCalisma+0x50c>)
 800682c:	781a      	ldrb	r2, [r3, #0]
 800682e:	4b5e      	ldr	r3, [pc, #376]	; (80069a8 <checkDemoModCalisma+0x514>)
 8006830:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006832:	4b5a      	ldr	r3, [pc, #360]	; (800699c <checkDemoModCalisma+0x508>)
 8006834:	781a      	ldrb	r2, [r3, #0]
 8006836:	4b5c      	ldr	r3, [pc, #368]	; (80069a8 <checkDemoModCalisma+0x514>)
 8006838:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800683a:	4b57      	ldr	r3, [pc, #348]	; (8006998 <checkDemoModCalisma+0x504>)
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	4b5a      	ldr	r3, [pc, #360]	; (80069a8 <checkDemoModCalisma+0x514>)
 8006840:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006842:	4b54      	ldr	r3, [pc, #336]	; (8006994 <checkDemoModCalisma+0x500>)
 8006844:	781a      	ldrb	r2, [r3, #0]
 8006846:	4b58      	ldr	r3, [pc, #352]	; (80069a8 <checkDemoModCalisma+0x514>)
 8006848:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800684a:	4b58      	ldr	r3, [pc, #352]	; (80069ac <checkDemoModCalisma+0x518>)
 800684c:	2201      	movs	r2, #1
 800684e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006850:	4b4f      	ldr	r3, [pc, #316]	; (8006990 <checkDemoModCalisma+0x4fc>)
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006856:	4b56      	ldr	r3, [pc, #344]	; (80069b0 <checkDemoModCalisma+0x51c>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f040 8087 	bne.w	800696e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006860:	4a54      	ldr	r2, [pc, #336]	; (80069b4 <checkDemoModCalisma+0x520>)
 8006862:	2101      	movs	r1, #1
 8006864:	2002      	movs	r0, #2
 8006866:	f001 fa71 	bl	8007d4c <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800686a:	4a53      	ldr	r2, [pc, #332]	; (80069b8 <checkDemoModCalisma+0x524>)
 800686c:	2101      	movs	r1, #1
 800686e:	2001      	movs	r0, #1
 8006870:	f001 fa6c 	bl	8007d4c <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006874:	4b4b      	ldr	r3, [pc, #300]	; (80069a4 <checkDemoModCalisma+0x510>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	220a      	movs	r2, #10
 800687a:	4950      	ldr	r1, [pc, #320]	; (80069bc <checkDemoModCalisma+0x528>)
 800687c:	4618      	mov	r0, r3
 800687e:	f005 fdb7 	bl	800c3f0 <itoa>
			lcd_print(2,12,snum);
 8006882:	4a4e      	ldr	r2, [pc, #312]	; (80069bc <checkDemoModCalisma+0x528>)
 8006884:	210c      	movs	r1, #12
 8006886:	2002      	movs	r0, #2
 8006888:	f001 fa60 	bl	8007d4c <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 800688c:	4b44      	ldr	r3, [pc, #272]	; (80069a0 <checkDemoModCalisma+0x50c>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	220a      	movs	r2, #10
 8006892:	494a      	ldr	r1, [pc, #296]	; (80069bc <checkDemoModCalisma+0x528>)
 8006894:	4618      	mov	r0, r3
 8006896:	f005 fdab 	bl	800c3f0 <itoa>
			lcd_print(2,13,snum);
 800689a:	4a48      	ldr	r2, [pc, #288]	; (80069bc <checkDemoModCalisma+0x528>)
 800689c:	210d      	movs	r1, #13
 800689e:	2002      	movs	r0, #2
 80068a0:	f001 fa54 	bl	8007d4c <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80068a4:	4b3d      	ldr	r3, [pc, #244]	; (800699c <checkDemoModCalisma+0x508>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	220a      	movs	r2, #10
 80068aa:	4944      	ldr	r1, [pc, #272]	; (80069bc <checkDemoModCalisma+0x528>)
 80068ac:	4618      	mov	r0, r3
 80068ae:	f005 fd9f 	bl	800c3f0 <itoa>
			lcd_print(2,14,snum);
 80068b2:	4a42      	ldr	r2, [pc, #264]	; (80069bc <checkDemoModCalisma+0x528>)
 80068b4:	210e      	movs	r1, #14
 80068b6:	2002      	movs	r0, #2
 80068b8:	f001 fa48 	bl	8007d4c <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80068bc:	4b36      	ldr	r3, [pc, #216]	; (8006998 <checkDemoModCalisma+0x504>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	220a      	movs	r2, #10
 80068c2:	493e      	ldr	r1, [pc, #248]	; (80069bc <checkDemoModCalisma+0x528>)
 80068c4:	4618      	mov	r0, r3
 80068c6:	f005 fd93 	bl	800c3f0 <itoa>
			lcd_print(2,15,snum);
 80068ca:	4a3c      	ldr	r2, [pc, #240]	; (80069bc <checkDemoModCalisma+0x528>)
 80068cc:	210f      	movs	r1, #15
 80068ce:	2002      	movs	r0, #2
 80068d0:	f001 fa3c 	bl	8007d4c <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80068d4:	4b2f      	ldr	r3, [pc, #188]	; (8006994 <checkDemoModCalisma+0x500>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	220a      	movs	r2, #10
 80068da:	4938      	ldr	r1, [pc, #224]	; (80069bc <checkDemoModCalisma+0x528>)
 80068dc:	4618      	mov	r0, r3
 80068de:	f005 fd87 	bl	800c3f0 <itoa>
			lcd_print(2,16,snum);
 80068e2:	4a36      	ldr	r2, [pc, #216]	; (80069bc <checkDemoModCalisma+0x528>)
 80068e4:	2110      	movs	r1, #16
 80068e6:	2002      	movs	r0, #2
 80068e8:	f001 fa30 	bl	8007d4c <lcd_print>
			mesajYazildi=1;
 80068ec:	4b34      	ldr	r3, [pc, #208]	; (80069c0 <checkDemoModCalisma+0x52c>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80068f2:	e03c      	b.n	800696e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80068f4:	4b33      	ldr	r3, [pc, #204]	; (80069c4 <checkDemoModCalisma+0x530>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d003      	beq.n	8006904 <checkDemoModCalisma+0x470>
 80068fc:	4b2c      	ldr	r3, [pc, #176]	; (80069b0 <checkDemoModCalisma+0x51c>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d134      	bne.n	800696e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006904:	2200      	movs	r2, #0
 8006906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800690a:	481b      	ldr	r0, [pc, #108]	; (8006978 <checkDemoModCalisma+0x4e4>)
 800690c:	f002 fd5b 	bl	80093c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006910:	2200      	movs	r2, #0
 8006912:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006916:	4818      	ldr	r0, [pc, #96]	; (8006978 <checkDemoModCalisma+0x4e4>)
 8006918:	f002 fd55 	bl	80093c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800691c:	2200      	movs	r2, #0
 800691e:	2104      	movs	r1, #4
 8006920:	4815      	ldr	r0, [pc, #84]	; (8006978 <checkDemoModCalisma+0x4e4>)
 8006922:	f002 fd50 	bl	80093c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006926:	2200      	movs	r2, #0
 8006928:	2102      	movs	r1, #2
 800692a:	4813      	ldr	r0, [pc, #76]	; (8006978 <checkDemoModCalisma+0x4e4>)
 800692c:	f002 fd4b 	bl	80093c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006930:	2200      	movs	r2, #0
 8006932:	2101      	movs	r1, #1
 8006934:	4810      	ldr	r0, [pc, #64]	; (8006978 <checkDemoModCalisma+0x4e4>)
 8006936:	f002 fd46 	bl	80093c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800693a:	2200      	movs	r2, #0
 800693c:	2120      	movs	r1, #32
 800693e:	480d      	ldr	r0, [pc, #52]	; (8006974 <checkDemoModCalisma+0x4e0>)
 8006940:	f002 fd41 	bl	80093c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006944:	2200      	movs	r2, #0
 8006946:	2110      	movs	r1, #16
 8006948:	480a      	ldr	r0, [pc, #40]	; (8006974 <checkDemoModCalisma+0x4e0>)
 800694a:	f002 fd3c 	bl	80093c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800694e:	2200      	movs	r2, #0
 8006950:	2180      	movs	r1, #128	; 0x80
 8006952:	480b      	ldr	r0, [pc, #44]	; (8006980 <checkDemoModCalisma+0x4ec>)
 8006954:	f002 fd37 	bl	80093c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006958:	2200      	movs	r2, #0
 800695a:	2140      	movs	r1, #64	; 0x40
 800695c:	4808      	ldr	r0, [pc, #32]	; (8006980 <checkDemoModCalisma+0x4ec>)
 800695e:	f002 fd32 	bl	80093c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006962:	2200      	movs	r2, #0
 8006964:	2120      	movs	r1, #32
 8006966:	4806      	ldr	r0, [pc, #24]	; (8006980 <checkDemoModCalisma+0x4ec>)
 8006968:	f002 fd2d 	bl	80093c6 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 800696c:	e7ff      	b.n	800696e <checkDemoModCalisma+0x4da>
 800696e:	bf00      	nop
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40011000 	.word	0x40011000
 8006978:	40010c00 	.word	0x40010c00
 800697c:	20000281 	.word	0x20000281
 8006980:	40010800 	.word	0x40010800
 8006984:	20000204 	.word	0x20000204
 8006988:	20000214 	.word	0x20000214
 800698c:	20000280 	.word	0x20000280
 8006990:	20000266 	.word	0x20000266
 8006994:	20000225 	.word	0x20000225
 8006998:	20000226 	.word	0x20000226
 800699c:	20000000 	.word	0x20000000
 80069a0:	20000001 	.word	0x20000001
 80069a4:	20000227 	.word	0x20000227
 80069a8:	2000012c 	.word	0x2000012c
 80069ac:	20000254 	.word	0x20000254
 80069b0:	20000245 	.word	0x20000245
 80069b4:	0800dc10 	.word	0x0800dc10
 80069b8:	0800dc1c 	.word	0x0800dc1c
 80069bc:	2000019c 	.word	0x2000019c
 80069c0:	2000025c 	.word	0x2000025c
 80069c4:	20000246 	.word	0x20000246

080069c8 <mainLoop>:

void mainLoop() {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80069ce:	f7fe f923 	bl	8004c18 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80069d2:	2101      	movs	r1, #1
 80069d4:	48ac      	ldr	r0, [pc, #688]	; (8006c88 <mainLoop+0x2c0>)
 80069d6:	f002 fcdf 	bl	8009398 <HAL_GPIO_ReadPin>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d136      	bne.n	8006a4e <mainLoop+0x86>
 80069e0:	2108      	movs	r1, #8
 80069e2:	48aa      	ldr	r0, [pc, #680]	; (8006c8c <mainLoop+0x2c4>)
 80069e4:	f002 fcd8 	bl	8009398 <HAL_GPIO_ReadPin>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d12f      	bne.n	8006a4e <mainLoop+0x86>
 80069ee:	2102      	movs	r1, #2
 80069f0:	48a5      	ldr	r0, [pc, #660]	; (8006c88 <mainLoop+0x2c0>)
 80069f2:	f002 fcd1 	bl	8009398 <HAL_GPIO_ReadPin>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d128      	bne.n	8006a4e <mainLoop+0x86>
 80069fc:	2104      	movs	r1, #4
 80069fe:	48a2      	ldr	r0, [pc, #648]	; (8006c88 <mainLoop+0x2c0>)
 8006a00:	f002 fcca 	bl	8009398 <HAL_GPIO_ReadPin>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d121      	bne.n	8006a4e <mainLoop+0x86>
 8006a0a:	2108      	movs	r1, #8
 8006a0c:	489e      	ldr	r0, [pc, #632]	; (8006c88 <mainLoop+0x2c0>)
 8006a0e:	f002 fcc3 	bl	8009398 <HAL_GPIO_ReadPin>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d11a      	bne.n	8006a4e <mainLoop+0x86>
 8006a18:	2180      	movs	r1, #128	; 0x80
 8006a1a:	489c      	ldr	r0, [pc, #624]	; (8006c8c <mainLoop+0x2c4>)
 8006a1c:	f002 fcbc 	bl	8009398 <HAL_GPIO_ReadPin>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d113      	bne.n	8006a4e <mainLoop+0x86>
 8006a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a2a:	4898      	ldr	r0, [pc, #608]	; (8006c8c <mainLoop+0x2c4>)
 8006a2c:	f002 fcb4 	bl	8009398 <HAL_GPIO_ReadPin>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d10b      	bne.n	8006a4e <mainLoop+0x86>
 8006a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a3a:	4894      	ldr	r0, [pc, #592]	; (8006c8c <mainLoop+0x2c4>)
 8006a3c:	f002 fcac 	bl	8009398 <HAL_GPIO_ReadPin>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d103      	bne.n	8006a4e <mainLoop+0x86>
			butonKontrol=0;
 8006a46:	4b92      	ldr	r3, [pc, #584]	; (8006c90 <mainLoop+0x2c8>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	e003      	b.n	8006a56 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006a4e:	4b91      	ldr	r3, [pc, #580]	; (8006c94 <mainLoop+0x2cc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a91      	ldr	r2, [pc, #580]	; (8006c98 <mainLoop+0x2d0>)
 8006a54:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006a56:	4b91      	ldr	r3, [pc, #580]	; (8006c9c <mainLoop+0x2d4>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d03a      	beq.n	8006ad4 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a5e:	bf00      	nop
 8006a60:	488f      	ldr	r0, [pc, #572]	; (8006ca0 <mainLoop+0x2d8>)
 8006a62:	f003 fac2 	bl	8009fea <HAL_I2C_GetError>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d0f9      	beq.n	8006a60 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006a6c:	bf00      	nop
 8006a6e:	488c      	ldr	r0, [pc, #560]	; (8006ca0 <mainLoop+0x2d8>)
 8006a70:	f003 faae 	bl	8009fd0 <HAL_I2C_GetState>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d1f9      	bne.n	8006a6e <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006a7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a7e:	9302      	str	r3, [sp, #8]
 8006a80:	236e      	movs	r3, #110	; 0x6e
 8006a82:	9301      	str	r3, [sp, #4]
 8006a84:	4b87      	ldr	r3, [pc, #540]	; (8006ca4 <mainLoop+0x2dc>)
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	236e      	movs	r3, #110	; 0x6e
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	21a0      	movs	r1, #160	; 0xa0
 8006a8e:	4884      	ldr	r0, [pc, #528]	; (8006ca0 <mainLoop+0x2d8>)
 8006a90:	f002 ff3c 	bl	800990c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006a94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a98:	f001 feae 	bl	80087f8 <HAL_Delay>

		  hafizaYaz=0;
 8006a9c:	4b7f      	ldr	r3, [pc, #508]	; (8006c9c <mainLoop+0x2d4>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006aa2:	4b81      	ldr	r3, [pc, #516]	; (8006ca8 <mainLoop+0x2e0>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d105      	bne.n	8006ab6 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006aaa:	4a80      	ldr	r2, [pc, #512]	; (8006cac <mainLoop+0x2e4>)
 8006aac:	2101      	movs	r1, #1
 8006aae:	2002      	movs	r0, #2
 8006ab0:	f001 f94c 	bl	8007d4c <lcd_print>
 8006ab4:	e008      	b.n	8006ac8 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006ab6:	4b7c      	ldr	r3, [pc, #496]	; (8006ca8 <mainLoop+0x2e0>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d104      	bne.n	8006ac8 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006abe:	4a7c      	ldr	r2, [pc, #496]	; (8006cb0 <mainLoop+0x2e8>)
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	2002      	movs	r0, #2
 8006ac4:	f001 f942 	bl	8007d4c <lcd_print>
		  }

		  HAL_Delay(1000);
 8006ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006acc:	f001 fe94 	bl	80087f8 <HAL_Delay>
		  lcd_clear();
 8006ad0:	f001 f968 	bl	8007da4 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006ad4:	4b77      	ldr	r3, [pc, #476]	; (8006cb4 <mainLoop+0x2ec>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	f083 0301 	eor.w	r3, r3, #1
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d06d      	beq.n	8006bbe <mainLoop+0x1f6>
 8006ae2:	486f      	ldr	r0, [pc, #444]	; (8006ca0 <mainLoop+0x2d8>)
 8006ae4:	f003 fa74 	bl	8009fd0 <HAL_I2C_GetState>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d167      	bne.n	8006bbe <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8006aee:	4b72      	ldr	r3, [pc, #456]	; (8006cb8 <mainLoop+0x2f0>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	f083 0301 	eor.w	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d044      	beq.n	8006b86 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006afc:	4a6f      	ldr	r2, [pc, #444]	; (8006cbc <mainLoop+0x2f4>)
 8006afe:	2101      	movs	r1, #1
 8006b00:	2001      	movs	r0, #1
 8006b02:	f001 f923 	bl	8007d4c <lcd_print>
			  if(dilSecim==0) {
 8006b06:	4b68      	ldr	r3, [pc, #416]	; (8006ca8 <mainLoop+0x2e0>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d105      	bne.n	8006b1a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006b0e:	4a6c      	ldr	r2, [pc, #432]	; (8006cc0 <mainLoop+0x2f8>)
 8006b10:	2101      	movs	r1, #1
 8006b12:	2002      	movs	r0, #2
 8006b14:	f001 f91a 	bl	8007d4c <lcd_print>
 8006b18:	e008      	b.n	8006b2c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006b1a:	4b63      	ldr	r3, [pc, #396]	; (8006ca8 <mainLoop+0x2e0>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d104      	bne.n	8006b2c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006b22:	4a68      	ldr	r2, [pc, #416]	; (8006cc4 <mainLoop+0x2fc>)
 8006b24:	2101      	movs	r1, #1
 8006b26:	2002      	movs	r0, #2
 8006b28:	f001 f910 	bl	8007d4c <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b30:	f001 fe62 	bl	80087f8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b34:	bf00      	nop
 8006b36:	485a      	ldr	r0, [pc, #360]	; (8006ca0 <mainLoop+0x2d8>)
 8006b38:	f003 fa57 	bl	8009fea <HAL_I2C_GetError>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d0f9      	beq.n	8006b36 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b42:	e003      	b.n	8006b4c <mainLoop+0x184>
				  HAL_Delay(1000);
 8006b44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b48:	f001 fe56 	bl	80087f8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b4c:	4854      	ldr	r0, [pc, #336]	; (8006ca0 <mainLoop+0x2d8>)
 8006b4e:	f003 fa3f 	bl	8009fd0 <HAL_I2C_GetState>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d1f5      	bne.n	8006b44 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006b58:	4b53      	ldr	r3, [pc, #332]	; (8006ca8 <mainLoop+0x2e0>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d105      	bne.n	8006b6c <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006b60:	4a59      	ldr	r2, [pc, #356]	; (8006cc8 <mainLoop+0x300>)
 8006b62:	2101      	movs	r1, #1
 8006b64:	2002      	movs	r0, #2
 8006b66:	f001 f8f1 	bl	8007d4c <lcd_print>
 8006b6a:	e008      	b.n	8006b7e <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006b6c:	4b4e      	ldr	r3, [pc, #312]	; (8006ca8 <mainLoop+0x2e0>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d104      	bne.n	8006b7e <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006b74:	4a55      	ldr	r2, [pc, #340]	; (8006ccc <mainLoop+0x304>)
 8006b76:	2101      	movs	r1, #1
 8006b78:	2002      	movs	r0, #2
 8006b7a:	f001 f8e7 	bl	8007d4c <lcd_print>
			  }

			  ilkOkuma=1;
 8006b7e:	4b4e      	ldr	r3, [pc, #312]	; (8006cb8 <mainLoop+0x2f0>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	e014      	b.n	8006bb0 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006b86:	4b48      	ldr	r3, [pc, #288]	; (8006ca8 <mainLoop+0x2e0>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d105      	bne.n	8006b9a <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006b8e:	4a50      	ldr	r2, [pc, #320]	; (8006cd0 <mainLoop+0x308>)
 8006b90:	2101      	movs	r1, #1
 8006b92:	2002      	movs	r0, #2
 8006b94:	f001 f8da 	bl	8007d4c <lcd_print>
 8006b98:	e008      	b.n	8006bac <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006b9a:	4b43      	ldr	r3, [pc, #268]	; (8006ca8 <mainLoop+0x2e0>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d104      	bne.n	8006bac <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006ba2:	4a4c      	ldr	r2, [pc, #304]	; (8006cd4 <mainLoop+0x30c>)
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	2002      	movs	r0, #2
 8006ba8:	f001 f8d0 	bl	8007d4c <lcd_print>
			  }
			  lcd_clear();
 8006bac:	f001 f8fa 	bl	8007da4 <lcd_clear>
		  }

		  lcd_clear();
 8006bb0:	f001 f8f8 	bl	8007da4 <lcd_clear>

		  eepromKontrol();
 8006bb4:	f7f9 fb3e 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006bb8:	4b3e      	ldr	r3, [pc, #248]	; (8006cb4 <mainLoop+0x2ec>)
 8006bba:	2201      	movs	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006bbe:	4b46      	ldr	r3, [pc, #280]	; (8006cd8 <mainLoop+0x310>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d11c      	bne.n	8006c00 <mainLoop+0x238>
 8006bc6:	4b45      	ldr	r3, [pc, #276]	; (8006cdc <mainLoop+0x314>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f083 0301 	eor.w	r3, r3, #1
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d015      	beq.n	8006c00 <mainLoop+0x238>
 8006bd4:	4b42      	ldr	r3, [pc, #264]	; (8006ce0 <mainLoop+0x318>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d111      	bne.n	8006c00 <mainLoop+0x238>
			lcd_clear();
 8006bdc:	f001 f8e2 	bl	8007da4 <lcd_clear>
			HAL_Delay(10);
 8006be0:	200a      	movs	r0, #10
 8006be2:	f001 fe09 	bl	80087f8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006be6:	4a3f      	ldr	r2, [pc, #252]	; (8006ce4 <mainLoop+0x31c>)
 8006be8:	2101      	movs	r1, #1
 8006bea:	2001      	movs	r0, #1
 8006bec:	f001 f8ae 	bl	8007d4c <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006bf0:	4a3d      	ldr	r2, [pc, #244]	; (8006ce8 <mainLoop+0x320>)
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	2002      	movs	r0, #2
 8006bf6:	f001 f8a9 	bl	8007d4c <lcd_print>
			mesajYazildi=1;
 8006bfa:	4b38      	ldr	r3, [pc, #224]	; (8006cdc <mainLoop+0x314>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006c00:	4b35      	ldr	r3, [pc, #212]	; (8006cd8 <mainLoop+0x310>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d112      	bne.n	8006c2e <mainLoop+0x266>
 8006c08:	2102      	movs	r1, #2
 8006c0a:	481f      	ldr	r0, [pc, #124]	; (8006c88 <mainLoop+0x2c0>)
 8006c0c:	f002 fbc4 	bl	8009398 <HAL_GPIO_ReadPin>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d10b      	bne.n	8006c2e <mainLoop+0x266>
 8006c16:	2104      	movs	r1, #4
 8006c18:	481b      	ldr	r0, [pc, #108]	; (8006c88 <mainLoop+0x2c0>)
 8006c1a:	f002 fbbd 	bl	8009398 <HAL_GPIO_ReadPin>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d104      	bne.n	8006c2e <mainLoop+0x266>
			menuGiris=1;
 8006c24:	4b2c      	ldr	r3, [pc, #176]	; (8006cd8 <mainLoop+0x310>)
 8006c26:	2201      	movs	r2, #1
 8006c28:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c2a:	f001 f8bb 	bl	8007da4 <lcd_clear>
		}

		if(menuGiris==1) {
 8006c2e:	4b2a      	ldr	r3, [pc, #168]	; (8006cd8 <mainLoop+0x310>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d101      	bne.n	8006c3a <mainLoop+0x272>
			menu();
 8006c36:	f7fa fb73 	bl	8001320 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c3e:	4813      	ldr	r0, [pc, #76]	; (8006c8c <mainLoop+0x2c4>)
 8006c40:	f002 fbd9 	bl	80093f6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c48:	4828      	ldr	r0, [pc, #160]	; (8006cec <mainLoop+0x324>)
 8006c4a:	f002 fba5 	bl	8009398 <HAL_GPIO_ReadPin>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <mainLoop+0x2a2>
 8006c54:	4b26      	ldr	r3, [pc, #152]	; (8006cf0 <mainLoop+0x328>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f083 0301 	eor.w	r3, r3, #1
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <mainLoop+0x2a2>
			stopVar=1;
 8006c62:	4b24      	ldr	r3, [pc, #144]	; (8006cf4 <mainLoop+0x32c>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	e002      	b.n	8006c70 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006c6a:	4b22      	ldr	r3, [pc, #136]	; (8006cf4 <mainLoop+0x32c>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006c70:	f7fd ffe8 	bl	8004c44 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006c74:	f7fe f81a 	bl	8004cac <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006c78:	f7fe f85e 	bl	8004d38 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006c7c:	f7fe f8ae 	bl	8004ddc <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006c80:	f7ff fc08 	bl	8006494 <checkDemoModCalisma>
		checkLCDBacklight();
 8006c84:	e6a3      	b.n	80069ce <mainLoop+0x6>
 8006c86:	bf00      	nop
 8006c88:	40010800 	.word	0x40010800
 8006c8c:	40011000 	.word	0x40011000
 8006c90:	20000257 	.word	0x20000257
 8006c94:	20000204 	.word	0x20000204
 8006c98:	20000220 	.word	0x20000220
 8006c9c:	20000254 	.word	0x20000254
 8006ca0:	200002b8 	.word	0x200002b8
 8006ca4:	2000012c 	.word	0x2000012c
 8006ca8:	20000249 	.word	0x20000249
 8006cac:	0800dc30 	.word	0x0800dc30
 8006cb0:	0800dc44 	.word	0x0800dc44
 8006cb4:	20000255 	.word	0x20000255
 8006cb8:	20000256 	.word	0x20000256
 8006cbc:	0800dc58 	.word	0x0800dc58
 8006cc0:	0800dc6c 	.word	0x0800dc6c
 8006cc4:	0800dc80 	.word	0x0800dc80
 8006cc8:	0800dc94 	.word	0x0800dc94
 8006ccc:	0800dca8 	.word	0x0800dca8
 8006cd0:	0800dcbc 	.word	0x0800dcbc
 8006cd4:	0800dcd0 	.word	0x0800dcd0
 8006cd8:	20000245 	.word	0x20000245
 8006cdc:	2000025c 	.word	0x2000025c
 8006ce0:	20000246 	.word	0x20000246
 8006ce4:	0800dce4 	.word	0x0800dce4
 8006ce8:	0800dcf8 	.word	0x0800dcf8
 8006cec:	40010c00 	.word	0x40010c00
 8006cf0:	2000027d 	.word	0x2000027d
 8006cf4:	2000027a 	.word	0x2000027a

08006cf8 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b089      	sub	sp, #36	; 0x24
 8006cfc:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006cfe:	2001      	movs	r0, #1
 8006d00:	f001 f882 	bl	8007e08 <lcd_cursor>

	int writeLoc = 5; //lcdnin ilk satırındaki başlangıç karakteri
 8006d04:	2305      	movs	r3, #5
 8006d06:	60fb      	str	r3, [r7, #12]
    int cursorPos = 3; //işaretçi konumu
 8006d08:	2303      	movs	r3, #3
 8006d0a:	60bb      	str	r3, [r7, #8]

    int arrayPos = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	607b      	str	r3, [r7, #4]
    int idStart = idStartPos; //eepromKonumu
 8006d10:	4ba2      	ldr	r3, [pc, #648]	; (8006f9c <takeMachineID+0x2a4>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	603b      	str	r3, [r7, #0]

    memset(machineID, 0, sizeof(machineID));
 8006d16:	220c      	movs	r2, #12
 8006d18:	2100      	movs	r1, #0
 8006d1a:	48a1      	ldr	r0, [pc, #644]	; (8006fa0 <takeMachineID+0x2a8>)
 8006d1c:	f005 fcc3 	bl	800c6a6 <memset>
    HAL_Delay(100);
 8006d20:	2064      	movs	r0, #100	; 0x64
 8006d22:	f001 fd69 	bl	80087f8 <HAL_Delay>

    printTemplate(1, 0);
 8006d26:	2100      	movs	r1, #0
 8006d28:	2001      	movs	r0, #1
 8006d2a:	f7fa f893 	bl	8000e54 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d2e:	2108      	movs	r1, #8
 8006d30:	489c      	ldr	r0, [pc, #624]	; (8006fa4 <takeMachineID+0x2ac>)
 8006d32:	f002 fb31 	bl	8009398 <HAL_GPIO_ReadPin>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d131      	bne.n	8006da0 <takeMachineID+0xa8>
        	lcd_cursor(0);
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	f001 f863 	bl	8007e08 <lcd_cursor>

        	readFromEEPROM(3);
 8006d42:	2003      	movs	r0, #3
 8006d44:	f7f9 fd52 	bl	80007ec <readFromEEPROM>
        	HAL_Delay(100);
 8006d48:	2064      	movs	r0, #100	; 0x64
 8006d4a:	f001 fd55 	bl	80087f8 <HAL_Delay>

        	if(strlen(machineID) != 12) {
 8006d4e:	4894      	ldr	r0, [pc, #592]	; (8006fa0 <takeMachineID+0x2a8>)
 8006d50:	f7f9 fa68 	bl	8000224 <strlen>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b0c      	cmp	r3, #12
 8006d58:	d010      	beq.n	8006d7c <takeMachineID+0x84>
        		lcd_clear();
 8006d5a:	f001 f823 	bl	8007da4 <lcd_clear>
        		lcd_print(1, 1, "ID 12 KARAKTER");
 8006d5e:	4a92      	ldr	r2, [pc, #584]	; (8006fa8 <takeMachineID+0x2b0>)
 8006d60:	2101      	movs	r1, #1
 8006d62:	2001      	movs	r0, #1
 8006d64:	f000 fff2 	bl	8007d4c <lcd_print>
        		lcd_print(2, 1, "OLMAK ZORUNDA!");
 8006d68:	4a90      	ldr	r2, [pc, #576]	; (8006fac <takeMachineID+0x2b4>)
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	2002      	movs	r0, #2
 8006d6e:	f000 ffed 	bl	8007d4c <lcd_print>
        		HAL_Delay(1200);
 8006d72:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d76:	f001 fd3f 	bl	80087f8 <HAL_Delay>

        		goto mainSection;
 8006d7a:	e7c0      	b.n	8006cfe <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006d7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d80:	9302      	str	r3, [sp, #8]
 8006d82:	236e      	movs	r3, #110	; 0x6e
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	4b8a      	ldr	r3, [pc, #552]	; (8006fb0 <takeMachineID+0x2b8>)
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	236e      	movs	r3, #110	; 0x6e
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	21a0      	movs	r1, #160	; 0xa0
 8006d90:	4888      	ldr	r0, [pc, #544]	; (8006fb4 <takeMachineID+0x2bc>)
 8006d92:	f002 fdbb 	bl	800990c <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8006d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d9a:	f001 fd2d 	bl	80087f8 <HAL_Delay>

                break;
 8006d9e:	e137      	b.n	8007010 <takeMachineID+0x318>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006da0:	2101      	movs	r1, #1
 8006da2:	4880      	ldr	r0, [pc, #512]	; (8006fa4 <takeMachineID+0x2ac>)
 8006da4:	f002 faf8 	bl	8009398 <HAL_GPIO_ReadPin>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d114      	bne.n	8006dd8 <takeMachineID+0xe0>
        	HAL_Delay(50);
 8006dae:	2032      	movs	r0, #50	; 0x32
 8006db0:	f001 fd22 	bl	80087f8 <HAL_Delay>
        	if(cursorPos == 7) {
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b07      	cmp	r3, #7
 8006db8:	d102      	bne.n	8006dc0 <takeMachineID+0xc8>
        		cursorPos = 10;
 8006dba:	230a      	movs	r3, #10
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	e008      	b.n	8006dd2 <takeMachineID+0xda>
        	} else if (cursorPos == 14) {
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b0e      	cmp	r3, #14
 8006dc4:	d102      	bne.n	8006dcc <takeMachineID+0xd4>
                cursorPos = 3;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	60bb      	str	r3, [r7, #8]
 8006dca:	e002      	b.n	8006dd2 <takeMachineID+0xda>
            } else {
            	cursorPos++;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8006dd2:	2096      	movs	r0, #150	; 0x96
 8006dd4:	f001 fd10 	bl	80087f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006dd8:	2108      	movs	r1, #8
 8006dda:	4877      	ldr	r0, [pc, #476]	; (8006fb8 <takeMachineID+0x2c0>)
 8006ddc:	f002 fadc 	bl	8009398 <HAL_GPIO_ReadPin>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d114      	bne.n	8006e10 <takeMachineID+0x118>
        	HAL_Delay(50);
 8006de6:	2032      	movs	r0, #50	; 0x32
 8006de8:	f001 fd06 	bl	80087f8 <HAL_Delay>
            if (cursorPos == 3) {
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d102      	bne.n	8006df8 <takeMachineID+0x100>
                cursorPos = 14;
 8006df2:	230e      	movs	r3, #14
 8006df4:	60bb      	str	r3, [r7, #8]
 8006df6:	e008      	b.n	8006e0a <takeMachineID+0x112>
            } else if(cursorPos == 10) {
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b0a      	cmp	r3, #10
 8006dfc:	d102      	bne.n	8006e04 <takeMachineID+0x10c>
            	cursorPos = 7;
 8006dfe:	2307      	movs	r3, #7
 8006e00:	60bb      	str	r3, [r7, #8]
 8006e02:	e002      	b.n	8006e0a <takeMachineID+0x112>
            } else {
            	cursorPos--;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(150);
 8006e0a:	2096      	movs	r0, #150	; 0x96
 8006e0c:	f001 fcf4 	bl	80087f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006e10:	2102      	movs	r1, #2
 8006e12:	4864      	ldr	r0, [pc, #400]	; (8006fa4 <takeMachineID+0x2ac>)
 8006e14:	f002 fac0 	bl	8009398 <HAL_GPIO_ReadPin>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	f040 80a9 	bne.w	8006f72 <takeMachineID+0x27a>
        	HAL_Delay(50);
 8006e20:	2032      	movs	r0, #50	; 0x32
 8006e22:	f001 fce9 	bl	80087f8 <HAL_Delay>
        	if(cursorPos == 3) {
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d10a      	bne.n	8006e42 <takeMachineID+0x14a>
        		machineID[arrayPos] = '0';
 8006e2c:	4a5c      	ldr	r2, [pc, #368]	; (8006fa0 <takeMachineID+0x2a8>)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4413      	add	r3, r2
 8006e32:	2230      	movs	r2, #48	; 0x30
 8006e34:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 0;
 8006e36:	4a5e      	ldr	r2, [pc, #376]	; (8006fb0 <takeMachineID+0x2b8>)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	e07c      	b.n	8006f3c <takeMachineID+0x244>
        	} else if(cursorPos == 4) {
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d10a      	bne.n	8006e5e <takeMachineID+0x166>
        		machineID[arrayPos] = '1';
 8006e48:	4a55      	ldr	r2, [pc, #340]	; (8006fa0 <takeMachineID+0x2a8>)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	2231      	movs	r2, #49	; 0x31
 8006e50:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 1;
 8006e52:	4a57      	ldr	r2, [pc, #348]	; (8006fb0 <takeMachineID+0x2b8>)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	4413      	add	r3, r2
 8006e58:	2201      	movs	r2, #1
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e06e      	b.n	8006f3c <takeMachineID+0x244>
        	} else if(cursorPos == 5) {
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2b05      	cmp	r3, #5
 8006e62:	d10a      	bne.n	8006e7a <takeMachineID+0x182>
        		machineID[arrayPos] = '2';
 8006e64:	4a4e      	ldr	r2, [pc, #312]	; (8006fa0 <takeMachineID+0x2a8>)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4413      	add	r3, r2
 8006e6a:	2232      	movs	r2, #50	; 0x32
 8006e6c:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 2;
 8006e6e:	4a50      	ldr	r2, [pc, #320]	; (8006fb0 <takeMachineID+0x2b8>)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	4413      	add	r3, r2
 8006e74:	2202      	movs	r2, #2
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	e060      	b.n	8006f3c <takeMachineID+0x244>
        	} else if(cursorPos == 6) {
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b06      	cmp	r3, #6
 8006e7e:	d10a      	bne.n	8006e96 <takeMachineID+0x19e>
        		machineID[arrayPos] = '3';
 8006e80:	4a47      	ldr	r2, [pc, #284]	; (8006fa0 <takeMachineID+0x2a8>)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4413      	add	r3, r2
 8006e86:	2233      	movs	r2, #51	; 0x33
 8006e88:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 3;
 8006e8a:	4a49      	ldr	r2, [pc, #292]	; (8006fb0 <takeMachineID+0x2b8>)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	4413      	add	r3, r2
 8006e90:	2203      	movs	r2, #3
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	e052      	b.n	8006f3c <takeMachineID+0x244>
        	} else if(cursorPos == 7) {
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b07      	cmp	r3, #7
 8006e9a:	d10a      	bne.n	8006eb2 <takeMachineID+0x1ba>
        		machineID[arrayPos] = '4';
 8006e9c:	4a40      	ldr	r2, [pc, #256]	; (8006fa0 <takeMachineID+0x2a8>)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	2234      	movs	r2, #52	; 0x34
 8006ea4:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 4;
 8006ea6:	4a42      	ldr	r2, [pc, #264]	; (8006fb0 <takeMachineID+0x2b8>)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	4413      	add	r3, r2
 8006eac:	2204      	movs	r2, #4
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e044      	b.n	8006f3c <takeMachineID+0x244>
        	} else if(cursorPos == 10) {
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b0a      	cmp	r3, #10
 8006eb6:	d10a      	bne.n	8006ece <takeMachineID+0x1d6>
        		machineID[arrayPos] = '5';
 8006eb8:	4a39      	ldr	r2, [pc, #228]	; (8006fa0 <takeMachineID+0x2a8>)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	2235      	movs	r2, #53	; 0x35
 8006ec0:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 5;
 8006ec2:	4a3b      	ldr	r2, [pc, #236]	; (8006fb0 <takeMachineID+0x2b8>)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	2205      	movs	r2, #5
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	e036      	b.n	8006f3c <takeMachineID+0x244>
        	} else if(cursorPos == 11) {
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b0b      	cmp	r3, #11
 8006ed2:	d10a      	bne.n	8006eea <takeMachineID+0x1f2>
        		machineID[arrayPos] = '6';
 8006ed4:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <takeMachineID+0x2a8>)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4413      	add	r3, r2
 8006eda:	2236      	movs	r2, #54	; 0x36
 8006edc:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 6;
 8006ede:	4a34      	ldr	r2, [pc, #208]	; (8006fb0 <takeMachineID+0x2b8>)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	2206      	movs	r2, #6
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e028      	b.n	8006f3c <takeMachineID+0x244>
        	} else if(cursorPos == 12) {
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b0c      	cmp	r3, #12
 8006eee:	d10a      	bne.n	8006f06 <takeMachineID+0x20e>
        		machineID[arrayPos] = '7';
 8006ef0:	4a2b      	ldr	r2, [pc, #172]	; (8006fa0 <takeMachineID+0x2a8>)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	2237      	movs	r2, #55	; 0x37
 8006ef8:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 7;
 8006efa:	4a2d      	ldr	r2, [pc, #180]	; (8006fb0 <takeMachineID+0x2b8>)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	4413      	add	r3, r2
 8006f00:	2207      	movs	r2, #7
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	e01a      	b.n	8006f3c <takeMachineID+0x244>
        	} else if(cursorPos == 13) {
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2b0d      	cmp	r3, #13
 8006f0a:	d10a      	bne.n	8006f22 <takeMachineID+0x22a>
        		machineID[arrayPos] = '8';
 8006f0c:	4a24      	ldr	r2, [pc, #144]	; (8006fa0 <takeMachineID+0x2a8>)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4413      	add	r3, r2
 8006f12:	2238      	movs	r2, #56	; 0x38
 8006f14:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 8;
 8006f16:	4a26      	ldr	r2, [pc, #152]	; (8006fb0 <takeMachineID+0x2b8>)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e00c      	b.n	8006f3c <takeMachineID+0x244>
        	} else if(cursorPos == 14) {
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b0e      	cmp	r3, #14
 8006f26:	d109      	bne.n	8006f3c <takeMachineID+0x244>
        		machineID[arrayPos] = '9';
 8006f28:	4a1d      	ldr	r2, [pc, #116]	; (8006fa0 <takeMachineID+0x2a8>)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	2239      	movs	r2, #57	; 0x39
 8006f30:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = 9;
 8006f32:	4a1f      	ldr	r2, [pc, #124]	; (8006fb0 <takeMachineID+0x2b8>)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	4413      	add	r3, r2
 8006f38:	2209      	movs	r2, #9
 8006f3a:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, getIDCharFromCursorPosition(eepromData[idStart]));
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	b2dc      	uxtb	r4, r3
 8006f40:	4a1b      	ldr	r2, [pc, #108]	; (8006fb0 <takeMachineID+0x2b8>)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	4413      	add	r3, r2
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7f9 fc3f 	bl	80007cc <getIDCharFromCursorPosition>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	461a      	mov	r2, r3
 8006f52:	4621      	mov	r1, r4
 8006f54:	2001      	movs	r0, #1
 8006f56:	f000 ff0e 	bl	8007d76 <lcd_print_char>

        	writeLoc++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3301      	adds	r3, #1
 8006f64:	607b      	str	r3, [r7, #4]
        	idStart++;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8006f6c:	2096      	movs	r0, #150	; 0x96
 8006f6e:	f001 fc43 	bl	80087f8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006f72:	2104      	movs	r1, #4
 8006f74:	480b      	ldr	r0, [pc, #44]	; (8006fa4 <takeMachineID+0x2ac>)
 8006f76:	f002 fa0f 	bl	8009398 <HAL_GPIO_ReadPin>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d140      	bne.n	8007002 <takeMachineID+0x30a>
        	HAL_Delay(50);
 8006f80:	2032      	movs	r0, #50	; 0x32
 8006f82:	f001 fc39 	bl	80087f8 <HAL_Delay>
            if(strlen(machineID) >= 1) {
 8006f86:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <takeMachineID+0x2a8>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d036      	beq.n	8006ffc <takeMachineID+0x304>

            	if(writeLoc > 5) {
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b05      	cmp	r3, #5
 8006f92:	dd13      	ble.n	8006fbc <takeMachineID+0x2c4>
            	    writeLoc--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	e014      	b.n	8006fc6 <takeMachineID+0x2ce>
 8006f9c:	20000004 	.word	0x20000004
 8006fa0:	200001a4 	.word	0x200001a4
 8006fa4:	40010800 	.word	0x40010800
 8006fa8:	0800dd0c 	.word	0x0800dd0c
 8006fac:	0800dd1c 	.word	0x0800dd1c
 8006fb0:	2000012c 	.word	0x2000012c
 8006fb4:	200002b8 	.word	0x200002b8
 8006fb8:	40011000 	.word	0x40011000
            	} else if(writeLoc < 5) {
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	dc01      	bgt.n	8006fc6 <takeMachineID+0x2ce>
            	    writeLoc = 5;
 8006fc2:	2305      	movs	r3, #5
 8006fc4:	60fb      	str	r3, [r7, #12]
            	}

            	idStart--;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	603b      	str	r3, [r7, #0]
            	arrayPos--;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	607b      	str	r3, [r7, #4]

            	machineID[arrayPos] = '\0';
 8006fd2:	4a11      	ldr	r2, [pc, #68]	; (8007018 <takeMachineID+0x320>)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	2200      	movs	r2, #0
 8006fda:	701a      	strb	r2, [r3, #0]
            	eepromData[idStart] = '\0';
 8006fdc:	4a0f      	ldr	r2, [pc, #60]	; (800701c <takeMachineID+0x324>)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+arrayPos+1);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	3305      	adds	r3, #5
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	f000 fee1 	bl	8007db8 <lcd_delete_char>
                HAL_Delay(50);
 8006ff6:	2032      	movs	r0, #50	; 0x32
 8006ff8:	f001 fbfe 	bl	80087f8 <HAL_Delay>
            }

            HAL_Delay(150);
 8006ffc:	2096      	movs	r0, #150	; 0x96
 8006ffe:	f001 fbfb 	bl	80087f8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPos);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	4619      	mov	r1, r3
 8007008:	2002      	movs	r0, #2
 800700a:	f000 fe80 	bl	8007d0e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800700e:	e68e      	b.n	8006d2e <takeMachineID+0x36>
    }
}
 8007010:	bf00      	nop
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	bd90      	pop	{r4, r7, pc}
 8007018:	200001a4 	.word	0x200001a4
 800701c:	2000012c 	.word	0x2000012c

08007020 <takeWifiSSID>:

void takeWifiSSID() {
 8007020:	b580      	push	{r7, lr}
 8007022:	b08a      	sub	sp, #40	; 0x28
 8007024:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8007026:	2001      	movs	r0, #1
 8007028:	f000 feee 	bl	8007e08 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 800702c:	2214      	movs	r2, #20
 800702e:	2100      	movs	r1, #0
 8007030:	48a8      	ldr	r0, [pc, #672]	; (80072d4 <takeWifiSSID+0x2b4>)
 8007032:	f005 fb38 	bl	800c6a6 <memset>
    HAL_Delay(100);
 8007036:	2064      	movs	r0, #100	; 0x64
 8007038:	f001 fbde 	bl	80087f8 <HAL_Delay>

    int realCharPos = 1;
 800703c:	2301      	movs	r3, #1
 800703e:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8007040:	2301      	movs	r3, #1
 8007042:	613b      	str	r3, [r7, #16]
    int page = 1;
 8007044:	2301      	movs	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
    int wifiNameLoc = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 800704c:	2307      	movs	r3, #7
 800704e:	607b      	str	r3, [r7, #4]

    int idStart = ssidStartPos;
 8007050:	4ba1      	ldr	r3, [pc, #644]	; (80072d8 <takeWifiSSID+0x2b8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	603b      	str	r3, [r7, #0]

    printTemplate(2, 1);
 8007056:	2101      	movs	r1, #1
 8007058:	2002      	movs	r0, #2
 800705a:	f7f9 fefb 	bl	8000e54 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800705e:	2108      	movs	r1, #8
 8007060:	489e      	ldr	r0, [pc, #632]	; (80072dc <takeWifiSSID+0x2bc>)
 8007062:	f002 f999 	bl	8009398 <HAL_GPIO_ReadPin>
 8007066:	4603      	mov	r3, r0
 8007068:	2b01      	cmp	r3, #1
 800706a:	d12e      	bne.n	80070ca <takeWifiSSID+0xaa>
        	HAL_Delay(50);
 800706c:	2032      	movs	r0, #50	; 0x32
 800706e:	f001 fbc3 	bl	80087f8 <HAL_Delay>
            lcd_cursor(0);
 8007072:	2000      	movs	r0, #0
 8007074:	f000 fec8 	bl	8007e08 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007078:	4896      	ldr	r0, [pc, #600]	; (80072d4 <takeWifiSSID+0x2b4>)
 800707a:	f7f9 f8d3 	bl	8000224 <strlen>
 800707e:	4603      	mov	r3, r0
 8007080:	2b14      	cmp	r3, #20
 8007082:	d910      	bls.n	80070a6 <takeWifiSSID+0x86>
                lcd_clear();
 8007084:	f000 fe8e 	bl	8007da4 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007088:	4a95      	ldr	r2, [pc, #596]	; (80072e0 <takeWifiSSID+0x2c0>)
 800708a:	2101      	movs	r1, #1
 800708c:	2001      	movs	r0, #1
 800708e:	f000 fe5d 	bl	8007d4c <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007092:	4a94      	ldr	r2, [pc, #592]	; (80072e4 <takeWifiSSID+0x2c4>)
 8007094:	2101      	movs	r1, #1
 8007096:	2002      	movs	r0, #2
 8007098:	f000 fe58 	bl	8007d4c <lcd_print>
                HAL_Delay(1200);
 800709c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80070a0:	f001 fbaa 	bl	80087f8 <HAL_Delay>
                goto mainSSIDSection;
 80070a4:	e7bf      	b.n	8007026 <takeWifiSSID+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80070a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80070aa:	9302      	str	r3, [sp, #8]
 80070ac:	236e      	movs	r3, #110	; 0x6e
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	4b8d      	ldr	r3, [pc, #564]	; (80072e8 <takeWifiSSID+0x2c8>)
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	236e      	movs	r3, #110	; 0x6e
 80070b6:	2200      	movs	r2, #0
 80070b8:	21a0      	movs	r1, #160	; 0xa0
 80070ba:	488c      	ldr	r0, [pc, #560]	; (80072ec <takeWifiSSID+0x2cc>)
 80070bc:	f002 fc26 	bl	800990c <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 80070c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070c4:	f001 fb98 	bl	80087f8 <HAL_Delay>

            break;
 80070c8:	e14e      	b.n	8007368 <takeWifiSSID+0x348>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80070ca:	2101      	movs	r1, #1
 80070cc:	4883      	ldr	r0, [pc, #524]	; (80072dc <takeWifiSSID+0x2bc>)
 80070ce:	f002 f963 	bl	8009398 <HAL_GPIO_ReadPin>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d153      	bne.n	8007180 <takeWifiSSID+0x160>
        	HAL_Delay(50);
 80070d8:	2032      	movs	r0, #50	; 0x32
 80070da:	f001 fb8d 	bl	80087f8 <HAL_Delay>

        	realCharPos++;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	3301      	adds	r3, #1
 80070e2:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2b50      	cmp	r3, #80	; 0x50
 80070e8:	dd01      	ble.n	80070ee <takeWifiSSID+0xce>
        		realCharPos = 1;
 80070ea:	2301      	movs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d13f      	bne.n	8007174 <takeWifiSSID+0x154>
            	if(page == 1) {
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d109      	bne.n	800710e <takeWifiSSID+0xee>
            		cursorPosition = 1;
 80070fa:	2301      	movs	r3, #1
 80070fc:	613b      	str	r3, [r7, #16]
            		page++;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3301      	adds	r3, #1
 8007102:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8007104:	2102      	movs	r1, #2
 8007106:	2002      	movs	r0, #2
 8007108:	f7f9 fea4 	bl	8000e54 <printTemplate>
 800710c:	e035      	b.n	800717a <takeWifiSSID+0x15a>
            	} else if(page == 2) {
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d109      	bne.n	8007128 <takeWifiSSID+0x108>
            		cursorPosition = 1;
 8007114:	2301      	movs	r3, #1
 8007116:	613b      	str	r3, [r7, #16]
            		page++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3301      	adds	r3, #1
 800711c:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 800711e:	2103      	movs	r1, #3
 8007120:	2002      	movs	r0, #2
 8007122:	f7f9 fe97 	bl	8000e54 <printTemplate>
 8007126:	e028      	b.n	800717a <takeWifiSSID+0x15a>
            	} else if(page == 3) {
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b03      	cmp	r3, #3
 800712c:	d109      	bne.n	8007142 <takeWifiSSID+0x122>
            		cursorPosition = 1;
 800712e:	2301      	movs	r3, #1
 8007130:	613b      	str	r3, [r7, #16]
            		page++;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8007138:	2104      	movs	r1, #4
 800713a:	2002      	movs	r0, #2
 800713c:	f7f9 fe8a 	bl	8000e54 <printTemplate>
 8007140:	e01b      	b.n	800717a <takeWifiSSID+0x15a>
            	} else if(page == 4) {
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b04      	cmp	r3, #4
 8007146:	d109      	bne.n	800715c <takeWifiSSID+0x13c>
            		cursorPosition = 1;
 8007148:	2301      	movs	r3, #1
 800714a:	613b      	str	r3, [r7, #16]
            		page++;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3301      	adds	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8007152:	2105      	movs	r1, #5
 8007154:	2002      	movs	r0, #2
 8007156:	f7f9 fe7d 	bl	8000e54 <printTemplate>
 800715a:	e00e      	b.n	800717a <takeWifiSSID+0x15a>
            	} else if(page == 5) {
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b05      	cmp	r3, #5
 8007160:	d10b      	bne.n	800717a <takeWifiSSID+0x15a>
            		cursorPosition = 1;
 8007162:	2301      	movs	r3, #1
 8007164:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007166:	2301      	movs	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 800716a:	2101      	movs	r1, #1
 800716c:	2002      	movs	r0, #2
 800716e:	f7f9 fe71 	bl	8000e54 <printTemplate>
 8007172:	e002      	b.n	800717a <takeWifiSSID+0x15a>
            	}
            } else {
            	cursorPosition++;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	3301      	adds	r3, #1
 8007178:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 800717a:	2096      	movs	r0, #150	; 0x96
 800717c:	f001 fb3c 	bl	80087f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007180:	2108      	movs	r1, #8
 8007182:	485b      	ldr	r0, [pc, #364]	; (80072f0 <takeWifiSSID+0x2d0>)
 8007184:	f002 f908 	bl	8009398 <HAL_GPIO_ReadPin>
 8007188:	4603      	mov	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	d14f      	bne.n	800722e <takeWifiSSID+0x20e>
        	HAL_Delay(50);
 800718e:	2032      	movs	r0, #50	; 0x32
 8007190:	f001 fb32 	bl	80087f8 <HAL_Delay>

        	realCharPos--;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	3b01      	subs	r3, #1
 8007198:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	dc01      	bgt.n	80071a4 <takeWifiSSID+0x184>
        		realCharPos = 80;
 80071a0:	2350      	movs	r3, #80	; 0x50
 80071a2:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d13b      	bne.n	8007222 <takeWifiSSID+0x202>
            	if(page == 1) {
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d108      	bne.n	80071c2 <takeWifiSSID+0x1a2>
            		cursorPosition = 16;
 80071b0:	2310      	movs	r3, #16
 80071b2:	613b      	str	r3, [r7, #16]
            		page = 5;
 80071b4:	2305      	movs	r3, #5
 80071b6:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 80071b8:	2105      	movs	r1, #5
 80071ba:	2002      	movs	r0, #2
 80071bc:	f7f9 fe4a 	bl	8000e54 <printTemplate>
 80071c0:	e032      	b.n	8007228 <takeWifiSSID+0x208>
            	} else if(page == 2) {
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d108      	bne.n	80071da <takeWifiSSID+0x1ba>
            		cursorPosition = 16;
 80071c8:	2310      	movs	r3, #16
 80071ca:	613b      	str	r3, [r7, #16]
            		page = 1;
 80071cc:	2301      	movs	r3, #1
 80071ce:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 80071d0:	2101      	movs	r1, #1
 80071d2:	2002      	movs	r0, #2
 80071d4:	f7f9 fe3e 	bl	8000e54 <printTemplate>
 80071d8:	e026      	b.n	8007228 <takeWifiSSID+0x208>
            	} else if(page == 3) {
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d108      	bne.n	80071f2 <takeWifiSSID+0x1d2>
            		cursorPosition = 16;
 80071e0:	2310      	movs	r3, #16
 80071e2:	613b      	str	r3, [r7, #16]
            		page = 2;
 80071e4:	2302      	movs	r3, #2
 80071e6:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 80071e8:	2102      	movs	r1, #2
 80071ea:	2002      	movs	r0, #2
 80071ec:	f7f9 fe32 	bl	8000e54 <printTemplate>
 80071f0:	e01a      	b.n	8007228 <takeWifiSSID+0x208>
            	} else if(page == 4) {
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d108      	bne.n	800720a <takeWifiSSID+0x1ea>
            		cursorPosition = 16;
 80071f8:	2310      	movs	r3, #16
 80071fa:	613b      	str	r3, [r7, #16]
            		page = 3;
 80071fc:	2303      	movs	r3, #3
 80071fe:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8007200:	2103      	movs	r1, #3
 8007202:	2002      	movs	r0, #2
 8007204:	f7f9 fe26 	bl	8000e54 <printTemplate>
 8007208:	e00e      	b.n	8007228 <takeWifiSSID+0x208>
            	} else if(page == 5) {
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b05      	cmp	r3, #5
 800720e:	d10b      	bne.n	8007228 <takeWifiSSID+0x208>
            		cursorPosition = 16;
 8007210:	2310      	movs	r3, #16
 8007212:	613b      	str	r3, [r7, #16]
            		page = 4;
 8007214:	2304      	movs	r3, #4
 8007216:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8007218:	2104      	movs	r1, #4
 800721a:	2002      	movs	r0, #2
 800721c:	f7f9 fe1a 	bl	8000e54 <printTemplate>
 8007220:	e002      	b.n	8007228 <takeWifiSSID+0x208>
            	}
            } else {
            	cursorPosition--;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	3b01      	subs	r3, #1
 8007226:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007228:	2096      	movs	r0, #150	; 0x96
 800722a:	f001 fae5 	bl	80087f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800722e:	2102      	movs	r1, #2
 8007230:	482a      	ldr	r0, [pc, #168]	; (80072dc <takeWifiSSID+0x2bc>)
 8007232:	f002 f8b1 	bl	8009398 <HAL_GPIO_ReadPin>
 8007236:	4603      	mov	r3, r0
 8007238:	2b01      	cmp	r3, #1
 800723a:	d136      	bne.n	80072aa <takeWifiSSID+0x28a>
        	HAL_Delay(50);
 800723c:	2032      	movs	r0, #50	; 0x32
 800723e:	f001 fadb 	bl	80087f8 <HAL_Delay>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	3b01      	subs	r3, #1
 8007246:	4618      	mov	r0, r3
 8007248:	f7f9 fab0 	bl	80007ac <getCharFromCursorPosition>
 800724c:	4603      	mov	r3, r0
 800724e:	4619      	mov	r1, r3
 8007250:	4a20      	ldr	r2, [pc, #128]	; (80072d4 <takeWifiSSID+0x2b4>)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	4413      	add	r3, r2
 8007256:	460a      	mov	r2, r1
 8007258:	701a      	strb	r2, [r3, #0]
            eepromData[idStart] = realCharPos - 1;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b2d9      	uxtb	r1, r3
 8007262:	4a21      	ldr	r2, [pc, #132]	; (80072e8 <takeWifiSSID+0x2c8>)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	4413      	add	r3, r2
 8007268:	460a      	mov	r2, r1
 800726a:	701a      	strb	r2, [r3, #0]
            wifiSSIDInt[wifiNameLoc] = realCharPos - 1;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b2d9      	uxtb	r1, r3
 8007274:	4a1f      	ldr	r2, [pc, #124]	; (80072f4 <takeWifiSSID+0x2d4>)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	4413      	add	r3, r2
 800727a:	460a      	mov	r2, r1
 800727c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	b2d9      	uxtb	r1, r3
 8007282:	4a14      	ldr	r2, [pc, #80]	; (80072d4 <takeWifiSSID+0x2b4>)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4413      	add	r3, r2
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	2001      	movs	r0, #1
 800728e:	f000 fd72 	bl	8007d76 <lcd_print_char>

            writeLoc++;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3301      	adds	r3, #1
 8007296:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	3301      	adds	r3, #1
 800729c:	60bb      	str	r3, [r7, #8]
            idStart++;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	3301      	adds	r3, #1
 80072a2:	603b      	str	r3, [r7, #0]

            HAL_Delay(150);
 80072a4:	2096      	movs	r0, #150	; 0x96
 80072a6:	f001 faa7 	bl	80087f8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80072aa:	2104      	movs	r1, #4
 80072ac:	480b      	ldr	r0, [pc, #44]	; (80072dc <takeWifiSSID+0x2bc>)
 80072ae:	f002 f873 	bl	8009398 <HAL_GPIO_ReadPin>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d150      	bne.n	800735a <takeWifiSSID+0x33a>
        	HAL_Delay(50);
 80072b8:	2032      	movs	r0, #50	; 0x32
 80072ba:	f001 fa9d 	bl	80087f8 <HAL_Delay>

        	if(strlen(wifiSSID) >= 1) {
 80072be:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <takeWifiSSID+0x2b4>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d046      	beq.n	8007354 <takeWifiSSID+0x334>
        		if(writeLoc > 7) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b07      	cmp	r3, #7
 80072ca:	dd15      	ble.n	80072f8 <takeWifiSSID+0x2d8>
        			writeLoc--;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	607b      	str	r3, [r7, #4]
 80072d2:	e016      	b.n	8007302 <takeWifiSSID+0x2e2>
 80072d4:	200001b0 	.word	0x200001b0
 80072d8:	20000008 	.word	0x20000008
 80072dc:	40010800 	.word	0x40010800
 80072e0:	0800dd2c 	.word	0x0800dd2c
 80072e4:	0800dd40 	.word	0x0800dd40
 80072e8:	2000012c 	.word	0x2000012c
 80072ec:	200002b8 	.word	0x200002b8
 80072f0:	40011000 	.word	0x40011000
 80072f4:	200001d8 	.word	0x200001d8
        		} else if(writeLoc < 7) {
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b06      	cmp	r3, #6
 80072fc:	dc01      	bgt.n	8007302 <takeWifiSSID+0x2e2>
        			writeLoc = 7;
 80072fe:	2307      	movs	r3, #7
 8007300:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	dd06      	ble.n	8007316 <takeWifiSSID+0x2f6>
        			wifiNameLoc--;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	3b01      	subs	r3, #1
 800730c:	60bb      	str	r3, [r7, #8]
        			idStart--;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	3b01      	subs	r3, #1
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	e004      	b.n	8007320 <takeWifiSSID+0x300>
        		} else if(wifiNameLoc < 0) {
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	da01      	bge.n	8007320 <takeWifiSSID+0x300>
        			wifiNameLoc = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	60bb      	str	r3, [r7, #8]
        		}

        		wifiSSID[wifiNameLoc] = '\0';
 8007320:	4a13      	ldr	r2, [pc, #76]	; (8007370 <takeWifiSSID+0x350>)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4413      	add	r3, r2
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
        		eepromData[idStart] = '\0';
 800732a:	4a12      	ldr	r2, [pc, #72]	; (8007374 <takeWifiSSID+0x354>)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	4413      	add	r3, r2
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]
        		wifiSSIDInt[wifiNameLoc] = '\0';
 8007334:	4a10      	ldr	r2, [pc, #64]	; (8007378 <takeWifiSSID+0x358>)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	4413      	add	r3, r2
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	3306      	adds	r3, #6
 8007344:	b2db      	uxtb	r3, r3
 8007346:	4619      	mov	r1, r3
 8007348:	2001      	movs	r0, #1
 800734a:	f000 fd35 	bl	8007db8 <lcd_delete_char>
        		HAL_Delay(50);
 800734e:	2032      	movs	r0, #50	; 0x32
 8007350:	f001 fa52 	bl	80087f8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007354:	2096      	movs	r0, #150	; 0x96
 8007356:	f001 fa4f 	bl	80087f8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	4619      	mov	r1, r3
 8007360:	2002      	movs	r0, #2
 8007362:	f000 fcd4 	bl	8007d0e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007366:	e67a      	b.n	800705e <takeWifiSSID+0x3e>
    }
}
 8007368:	bf00      	nop
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	200001b0 	.word	0x200001b0
 8007374:	2000012c 	.word	0x2000012c
 8007378:	200001d8 	.word	0x200001d8

0800737c <takeWifiPass>:

void takeWifiPass() {
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 8007382:	2001      	movs	r0, #1
 8007384:	f000 fd40 	bl	8007e08 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 8007388:	2214      	movs	r2, #20
 800738a:	2100      	movs	r1, #0
 800738c:	48a5      	ldr	r0, [pc, #660]	; (8007624 <takeWifiPass+0x2a8>)
 800738e:	f005 f98a 	bl	800c6a6 <memset>
    HAL_Delay(100);
 8007392:	2064      	movs	r0, #100	; 0x64
 8007394:	f001 fa30 	bl	80087f8 <HAL_Delay>

    int realCharPos = 1;
 8007398:	2301      	movs	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 800739c:	2301      	movs	r3, #1
 800739e:	613b      	str	r3, [r7, #16]
    int page = 1;
 80073a0:	2301      	movs	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
    int wifiPassLoc = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 80073a8:	2307      	movs	r3, #7
 80073aa:	607b      	str	r3, [r7, #4]

    int passStart = passStartPos;
 80073ac:	4b9e      	ldr	r3, [pc, #632]	; (8007628 <takeWifiPass+0x2ac>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	603b      	str	r3, [r7, #0]

    printTemplate(3, 1);
 80073b2:	2101      	movs	r1, #1
 80073b4:	2003      	movs	r0, #3
 80073b6:	f7f9 fd4d 	bl	8000e54 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80073ba:	2108      	movs	r1, #8
 80073bc:	489b      	ldr	r0, [pc, #620]	; (800762c <takeWifiPass+0x2b0>)
 80073be:	f001 ffeb 	bl	8009398 <HAL_GPIO_ReadPin>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d12e      	bne.n	8007426 <takeWifiPass+0xaa>
        	HAL_Delay(50);
 80073c8:	2032      	movs	r0, #50	; 0x32
 80073ca:	f001 fa15 	bl	80087f8 <HAL_Delay>
            lcd_cursor(0);
 80073ce:	2000      	movs	r0, #0
 80073d0:	f000 fd1a 	bl	8007e08 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 80073d4:	4893      	ldr	r0, [pc, #588]	; (8007624 <takeWifiPass+0x2a8>)
 80073d6:	f7f8 ff25 	bl	8000224 <strlen>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b14      	cmp	r3, #20
 80073de:	d910      	bls.n	8007402 <takeWifiPass+0x86>
                lcd_clear();
 80073e0:	f000 fce0 	bl	8007da4 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80073e4:	4a92      	ldr	r2, [pc, #584]	; (8007630 <takeWifiPass+0x2b4>)
 80073e6:	2101      	movs	r1, #1
 80073e8:	2001      	movs	r0, #1
 80073ea:	f000 fcaf 	bl	8007d4c <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80073ee:	4a91      	ldr	r2, [pc, #580]	; (8007634 <takeWifiPass+0x2b8>)
 80073f0:	2101      	movs	r1, #1
 80073f2:	2002      	movs	r0, #2
 80073f4:	f000 fcaa 	bl	8007d4c <lcd_print>
                HAL_Delay(1200);
 80073f8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80073fc:	f001 f9fc 	bl	80087f8 <HAL_Delay>
                goto mainPASSSection;
 8007400:	e7bf      	b.n	8007382 <takeWifiPass+0x6>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007402:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007406:	9302      	str	r3, [sp, #8]
 8007408:	236e      	movs	r3, #110	; 0x6e
 800740a:	9301      	str	r3, [sp, #4]
 800740c:	4b8a      	ldr	r3, [pc, #552]	; (8007638 <takeWifiPass+0x2bc>)
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	236e      	movs	r3, #110	; 0x6e
 8007412:	2200      	movs	r2, #0
 8007414:	21a0      	movs	r1, #160	; 0xa0
 8007416:	4889      	ldr	r0, [pc, #548]	; (800763c <takeWifiPass+0x2c0>)
 8007418:	f002 fa78 	bl	800990c <HAL_I2C_Mem_Write>
            HAL_Delay(1000);
 800741c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007420:	f001 f9ea 	bl	80087f8 <HAL_Delay>

            break;
 8007424:	e14a      	b.n	80076bc <takeWifiPass+0x340>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007426:	2101      	movs	r1, #1
 8007428:	4880      	ldr	r0, [pc, #512]	; (800762c <takeWifiPass+0x2b0>)
 800742a:	f001 ffb5 	bl	8009398 <HAL_GPIO_ReadPin>
 800742e:	4603      	mov	r3, r0
 8007430:	2b01      	cmp	r3, #1
 8007432:	d153      	bne.n	80074dc <takeWifiPass+0x160>
        	HAL_Delay(50);
 8007434:	2032      	movs	r0, #50	; 0x32
 8007436:	f001 f9df 	bl	80087f8 <HAL_Delay>

        	realCharPos++;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	3301      	adds	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2b50      	cmp	r3, #80	; 0x50
 8007444:	dd01      	ble.n	800744a <takeWifiPass+0xce>
        	    realCharPos = 1;
 8007446:	2301      	movs	r3, #1
 8007448:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b10      	cmp	r3, #16
 800744e:	d13f      	bne.n	80074d0 <takeWifiPass+0x154>
            	if(page == 1) {
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d109      	bne.n	800746a <takeWifiPass+0xee>
            		cursorPosition = 1;
 8007456:	2301      	movs	r3, #1
 8007458:	613b      	str	r3, [r7, #16]
            		page++;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 8007460:	2102      	movs	r1, #2
 8007462:	2003      	movs	r0, #3
 8007464:	f7f9 fcf6 	bl	8000e54 <printTemplate>
 8007468:	e035      	b.n	80074d6 <takeWifiPass+0x15a>
            	} else if(page == 2) {
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b02      	cmp	r3, #2
 800746e:	d109      	bne.n	8007484 <takeWifiPass+0x108>
            		cursorPosition = 1;
 8007470:	2301      	movs	r3, #1
 8007472:	613b      	str	r3, [r7, #16]
            		page++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 800747a:	2103      	movs	r1, #3
 800747c:	2003      	movs	r0, #3
 800747e:	f7f9 fce9 	bl	8000e54 <printTemplate>
 8007482:	e028      	b.n	80074d6 <takeWifiPass+0x15a>
            	} else if(page == 3) {
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b03      	cmp	r3, #3
 8007488:	d109      	bne.n	800749e <takeWifiPass+0x122>
            		cursorPosition = 1;
 800748a:	2301      	movs	r3, #1
 800748c:	613b      	str	r3, [r7, #16]
            		page++;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3301      	adds	r3, #1
 8007492:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 8007494:	2104      	movs	r1, #4
 8007496:	2003      	movs	r0, #3
 8007498:	f7f9 fcdc 	bl	8000e54 <printTemplate>
 800749c:	e01b      	b.n	80074d6 <takeWifiPass+0x15a>
            	} else if(page == 4) {
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d109      	bne.n	80074b8 <takeWifiPass+0x13c>
            		cursorPosition = 1;
 80074a4:	2301      	movs	r3, #1
 80074a6:	613b      	str	r3, [r7, #16]
            		page++;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 80074ae:	2105      	movs	r1, #5
 80074b0:	2003      	movs	r0, #3
 80074b2:	f7f9 fccf 	bl	8000e54 <printTemplate>
 80074b6:	e00e      	b.n	80074d6 <takeWifiPass+0x15a>
            	} else if(page == 5) {
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	d10b      	bne.n	80074d6 <takeWifiPass+0x15a>
            		cursorPosition = 1;
 80074be:	2301      	movs	r3, #1
 80074c0:	613b      	str	r3, [r7, #16]
            		page = 1;
 80074c2:	2301      	movs	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 80074c6:	2101      	movs	r1, #1
 80074c8:	2003      	movs	r0, #3
 80074ca:	f7f9 fcc3 	bl	8000e54 <printTemplate>
 80074ce:	e002      	b.n	80074d6 <takeWifiPass+0x15a>
            	}
            } else {
            	cursorPosition++;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	3301      	adds	r3, #1
 80074d4:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 80074d6:	2096      	movs	r0, #150	; 0x96
 80074d8:	f001 f98e 	bl	80087f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80074dc:	2108      	movs	r1, #8
 80074de:	4858      	ldr	r0, [pc, #352]	; (8007640 <takeWifiPass+0x2c4>)
 80074e0:	f001 ff5a 	bl	8009398 <HAL_GPIO_ReadPin>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d14f      	bne.n	800758a <takeWifiPass+0x20e>
        	HAL_Delay(50);
 80074ea:	2032      	movs	r0, #50	; 0x32
 80074ec:	f001 f984 	bl	80087f8 <HAL_Delay>

        	realCharPos--;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	dc01      	bgt.n	8007500 <takeWifiPass+0x184>
        	    realCharPos = 80;
 80074fc:	2350      	movs	r3, #80	; 0x50
 80074fe:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d13b      	bne.n	800757e <takeWifiPass+0x202>
            	if(page == 1) {
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d108      	bne.n	800751e <takeWifiPass+0x1a2>
            		cursorPosition = 16;
 800750c:	2310      	movs	r3, #16
 800750e:	613b      	str	r3, [r7, #16]
            		page = 5;
 8007510:	2305      	movs	r3, #5
 8007512:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 8007514:	2105      	movs	r1, #5
 8007516:	2003      	movs	r0, #3
 8007518:	f7f9 fc9c 	bl	8000e54 <printTemplate>
 800751c:	e032      	b.n	8007584 <takeWifiPass+0x208>
            	} else if(page == 2) {
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d108      	bne.n	8007536 <takeWifiPass+0x1ba>
            		cursorPosition = 16;
 8007524:	2310      	movs	r3, #16
 8007526:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007528:	2301      	movs	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 800752c:	2101      	movs	r1, #1
 800752e:	2003      	movs	r0, #3
 8007530:	f7f9 fc90 	bl	8000e54 <printTemplate>
 8007534:	e026      	b.n	8007584 <takeWifiPass+0x208>
            	} else if(page == 3) {
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d108      	bne.n	800754e <takeWifiPass+0x1d2>
            		cursorPosition = 16;
 800753c:	2310      	movs	r3, #16
 800753e:	613b      	str	r3, [r7, #16]
            		page = 2;
 8007540:	2302      	movs	r3, #2
 8007542:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 8007544:	2102      	movs	r1, #2
 8007546:	2003      	movs	r0, #3
 8007548:	f7f9 fc84 	bl	8000e54 <printTemplate>
 800754c:	e01a      	b.n	8007584 <takeWifiPass+0x208>
            	} else if(page == 4) {
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b04      	cmp	r3, #4
 8007552:	d108      	bne.n	8007566 <takeWifiPass+0x1ea>
            		cursorPosition = 16;
 8007554:	2310      	movs	r3, #16
 8007556:	613b      	str	r3, [r7, #16]
            		page = 3;
 8007558:	2303      	movs	r3, #3
 800755a:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 800755c:	2103      	movs	r1, #3
 800755e:	2003      	movs	r0, #3
 8007560:	f7f9 fc78 	bl	8000e54 <printTemplate>
 8007564:	e00e      	b.n	8007584 <takeWifiPass+0x208>
            	} else if(page == 5) {
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b05      	cmp	r3, #5
 800756a:	d10b      	bne.n	8007584 <takeWifiPass+0x208>
            		cursorPosition = 16;
 800756c:	2310      	movs	r3, #16
 800756e:	613b      	str	r3, [r7, #16]
            		page = 4;
 8007570:	2304      	movs	r3, #4
 8007572:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 8007574:	2104      	movs	r1, #4
 8007576:	2003      	movs	r0, #3
 8007578:	f7f9 fc6c 	bl	8000e54 <printTemplate>
 800757c:	e002      	b.n	8007584 <takeWifiPass+0x208>
            	}
            } else {
            	cursorPosition--;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	3b01      	subs	r3, #1
 8007582:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007584:	2096      	movs	r0, #150	; 0x96
 8007586:	f001 f937 	bl	80087f8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800758a:	2102      	movs	r1, #2
 800758c:	4827      	ldr	r0, [pc, #156]	; (800762c <takeWifiPass+0x2b0>)
 800758e:	f001 ff03 	bl	8009398 <HAL_GPIO_ReadPin>
 8007592:	4603      	mov	r3, r0
 8007594:	2b01      	cmp	r3, #1
 8007596:	d133      	bne.n	8007600 <takeWifiPass+0x284>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	3b01      	subs	r3, #1
 800759c:	4618      	mov	r0, r3
 800759e:	f7f9 f905 	bl	80007ac <getCharFromCursorPosition>
 80075a2:	4603      	mov	r3, r0
 80075a4:	4619      	mov	r1, r3
 80075a6:	4a1f      	ldr	r2, [pc, #124]	; (8007624 <takeWifiPass+0x2a8>)
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4413      	add	r3, r2
 80075ac:	460a      	mov	r2, r1
 80075ae:	701a      	strb	r2, [r3, #0]
        	eepromData[passStart] = realCharPos - 1;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b2d9      	uxtb	r1, r3
 80075b8:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <takeWifiPass+0x2bc>)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	4413      	add	r3, r2
 80075be:	460a      	mov	r2, r1
 80075c0:	701a      	strb	r2, [r3, #0]
        	wifiPassInt[wifiPassLoc] = realCharPos - 1;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b2d9      	uxtb	r1, r3
 80075ca:	4a1e      	ldr	r2, [pc, #120]	; (8007644 <takeWifiPass+0x2c8>)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4413      	add	r3, r2
 80075d0:	460a      	mov	r2, r1
 80075d2:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	b2d9      	uxtb	r1, r3
 80075d8:	4a12      	ldr	r2, [pc, #72]	; (8007624 <takeWifiPass+0x2a8>)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	4413      	add	r3, r2
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	2001      	movs	r0, #1
 80075e4:	f000 fbc7 	bl	8007d76 <lcd_print_char>

            writeLoc++;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3301      	adds	r3, #1
 80075ec:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	3301      	adds	r3, #1
 80075f2:	60bb      	str	r3, [r7, #8]
            passStart++;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	3301      	adds	r3, #1
 80075f8:	603b      	str	r3, [r7, #0]

            HAL_Delay(150);
 80075fa:	2096      	movs	r0, #150	; 0x96
 80075fc:	f001 f8fc 	bl	80087f8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007600:	2104      	movs	r1, #4
 8007602:	480a      	ldr	r0, [pc, #40]	; (800762c <takeWifiPass+0x2b0>)
 8007604:	f001 fec8 	bl	8009398 <HAL_GPIO_ReadPin>
 8007608:	4603      	mov	r3, r0
 800760a:	2b01      	cmp	r3, #1
 800760c:	d14f      	bne.n	80076ae <takeWifiPass+0x332>
            if(strlen(wifiPass) >= 1) {
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <takeWifiPass+0x2a8>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d048      	beq.n	80076a8 <takeWifiPass+0x32c>
            	if(writeLoc > 7) {
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b07      	cmp	r3, #7
 800761a:	dd15      	ble.n	8007648 <takeWifiPass+0x2cc>
            		writeLoc--;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3b01      	subs	r3, #1
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	e016      	b.n	8007652 <takeWifiPass+0x2d6>
 8007624:	200001c4 	.word	0x200001c4
 8007628:	2000000c 	.word	0x2000000c
 800762c:	40010800 	.word	0x40010800
 8007630:	0800dd2c 	.word	0x0800dd2c
 8007634:	0800dd54 	.word	0x0800dd54
 8007638:	2000012c 	.word	0x2000012c
 800763c:	200002b8 	.word	0x200002b8
 8007640:	40011000 	.word	0x40011000
 8007644:	200001ec 	.word	0x200001ec
            	} else if(writeLoc < 7) {
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b06      	cmp	r3, #6
 800764c:	dc01      	bgt.n	8007652 <takeWifiPass+0x2d6>
            		writeLoc = 7;
 800764e:	2307      	movs	r3, #7
 8007650:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	dd08      	ble.n	800766a <takeWifiPass+0x2ee>
            		wifiPassLoc--;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	3b01      	subs	r3, #1
 800765c:	60bb      	str	r3, [r7, #8]
            		passStartPos--;
 800765e:	4b19      	ldr	r3, [pc, #100]	; (80076c4 <takeWifiPass+0x348>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3b01      	subs	r3, #1
 8007664:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <takeWifiPass+0x348>)
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	e004      	b.n	8007674 <takeWifiPass+0x2f8>
            	} else if(wifiPassLoc < 0) {
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	da01      	bge.n	8007674 <takeWifiPass+0x2f8>
            		wifiPassLoc = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	60bb      	str	r3, [r7, #8]
            	}

            	wifiPass[wifiPassLoc] = '\0';
 8007674:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <takeWifiPass+0x34c>)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	4413      	add	r3, r2
 800767a:	2200      	movs	r2, #0
 800767c:	701a      	strb	r2, [r3, #0]
            	eepromData[passStartPos] = '\0';
 800767e:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <takeWifiPass+0x348>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a12      	ldr	r2, [pc, #72]	; (80076cc <takeWifiPass+0x350>)
 8007684:	2100      	movs	r1, #0
 8007686:	54d1      	strb	r1, [r2, r3]
            	wifiPassInt[wifiPassLoc] = '\0';
 8007688:	4a11      	ldr	r2, [pc, #68]	; (80076d0 <takeWifiPass+0x354>)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4413      	add	r3, r2
 800768e:	2200      	movs	r2, #0
 8007690:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	3306      	adds	r3, #6
 8007698:	b2db      	uxtb	r3, r3
 800769a:	4619      	mov	r1, r3
 800769c:	2001      	movs	r0, #1
 800769e:	f000 fb8b 	bl	8007db8 <lcd_delete_char>
            	HAL_Delay(50);
 80076a2:	2032      	movs	r0, #50	; 0x32
 80076a4:	f001 f8a8 	bl	80087f8 <HAL_Delay>
            }

            HAL_Delay(150);
 80076a8:	2096      	movs	r0, #150	; 0x96
 80076aa:	f001 f8a5 	bl	80087f8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	4619      	mov	r1, r3
 80076b4:	2002      	movs	r0, #2
 80076b6:	f000 fb2a 	bl	8007d0e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80076ba:	e67e      	b.n	80073ba <takeWifiPass+0x3e>
    }
}
 80076bc:	bf00      	nop
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	2000000c 	.word	0x2000000c
 80076c8:	200001c4 	.word	0x200001c4
 80076cc:	2000012c 	.word	0x2000012c
 80076d0:	200001ec 	.word	0x200001ec

080076d4 <mergeData>:

char* mergeData() {
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b09c      	sub	sp, #112	; 0x70
 80076d8:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 80076da:	2300      	movs	r3, #0
 80076dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076e2:	2228      	movs	r2, #40	; 0x28
 80076e4:	2100      	movs	r1, #0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f004 ffdd 	bl	800c6a6 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80076ec:	4b67      	ldr	r3, [pc, #412]	; (800788c <mergeData+0x1b8>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	713b      	strb	r3, [r7, #4]
 80076f2:	4b67      	ldr	r3, [pc, #412]	; (8007890 <mergeData+0x1bc>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	717b      	strb	r3, [r7, #5]
 80076f8:	4b66      	ldr	r3, [pc, #408]	; (8007894 <mergeData+0x1c0>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	71bb      	strb	r3, [r7, #6]
 80076fe:	4b66      	ldr	r3, [pc, #408]	; (8007898 <mergeData+0x1c4>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
 8007704:	4b65      	ldr	r3, [pc, #404]	; (800789c <mergeData+0x1c8>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	723b      	strb	r3, [r7, #8]
 800770a:	4b65      	ldr	r3, [pc, #404]	; (80078a0 <mergeData+0x1cc>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	727b      	strb	r3, [r7, #9]
 8007710:	4b64      	ldr	r3, [pc, #400]	; (80078a4 <mergeData+0x1d0>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	72bb      	strb	r3, [r7, #10]
 8007716:	4b64      	ldr	r3, [pc, #400]	; (80078a8 <mergeData+0x1d4>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	72fb      	strb	r3, [r7, #11]
 800771c:	4b63      	ldr	r3, [pc, #396]	; (80078ac <mergeData+0x1d8>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	733b      	strb	r3, [r7, #12]
 8007722:	4b63      	ldr	r3, [pc, #396]	; (80078b0 <mergeData+0x1dc>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	737b      	strb	r3, [r7, #13]
 8007728:	4b62      	ldr	r3, [pc, #392]	; (80078b4 <mergeData+0x1e0>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	73bb      	strb	r3, [r7, #14]
 800772e:	4b62      	ldr	r3, [pc, #392]	; (80078b8 <mergeData+0x1e4>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	73fb      	strb	r3, [r7, #15]
 8007734:	4b61      	ldr	r3, [pc, #388]	; (80078bc <mergeData+0x1e8>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	743b      	strb	r3, [r7, #16]
 800773a:	4b61      	ldr	r3, [pc, #388]	; (80078c0 <mergeData+0x1ec>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	747b      	strb	r3, [r7, #17]
 8007740:	4b60      	ldr	r3, [pc, #384]	; (80078c4 <mergeData+0x1f0>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	74bb      	strb	r3, [r7, #18]
 8007746:	4b60      	ldr	r3, [pc, #384]	; (80078c8 <mergeData+0x1f4>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	74fb      	strb	r3, [r7, #19]
 800774c:	4b5f      	ldr	r3, [pc, #380]	; (80078cc <mergeData+0x1f8>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	753b      	strb	r3, [r7, #20]
 8007752:	4b5f      	ldr	r3, [pc, #380]	; (80078d0 <mergeData+0x1fc>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	757b      	strb	r3, [r7, #21]
 8007758:	4b5e      	ldr	r3, [pc, #376]	; (80078d4 <mergeData+0x200>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	75bb      	strb	r3, [r7, #22]
 800775e:	4b5e      	ldr	r3, [pc, #376]	; (80078d8 <mergeData+0x204>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	75fb      	strb	r3, [r7, #23]
 8007764:	4b5d      	ldr	r3, [pc, #372]	; (80078dc <mergeData+0x208>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	763b      	strb	r3, [r7, #24]
 800776a:	4b5d      	ldr	r3, [pc, #372]	; (80078e0 <mergeData+0x20c>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	767b      	strb	r3, [r7, #25]
 8007770:	4b5c      	ldr	r3, [pc, #368]	; (80078e4 <mergeData+0x210>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	76bb      	strb	r3, [r7, #26]
 8007776:	4b5c      	ldr	r3, [pc, #368]	; (80078e8 <mergeData+0x214>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	76fb      	strb	r3, [r7, #27]
 800777c:	4b5b      	ldr	r3, [pc, #364]	; (80078ec <mergeData+0x218>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	773b      	strb	r3, [r7, #28]
 8007782:	4b5b      	ldr	r3, [pc, #364]	; (80078f0 <mergeData+0x21c>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	777b      	strb	r3, [r7, #29]
 8007788:	4b5a      	ldr	r3, [pc, #360]	; (80078f4 <mergeData+0x220>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	77bb      	strb	r3, [r7, #30]
 800778e:	4b5a      	ldr	r3, [pc, #360]	; (80078f8 <mergeData+0x224>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	4b59      	ldr	r3, [pc, #356]	; (80078fc <mergeData+0x228>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f887 3020 	strb.w	r3, [r7, #32]
 800779c:	4b58      	ldr	r3, [pc, #352]	; (8007900 <mergeData+0x22c>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80077a4:	4b57      	ldr	r3, [pc, #348]	; (8007904 <mergeData+0x230>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077ac:	4b56      	ldr	r3, [pc, #344]	; (8007908 <mergeData+0x234>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077b4:	4b55      	ldr	r3, [pc, #340]	; (800790c <mergeData+0x238>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 80077bc:	4b54      	ldr	r3, [pc, #336]	; (8007910 <mergeData+0x23c>)
 80077be:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80077c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 80077c6:	4b52      	ldr	r3, [pc, #328]	; (8007910 <mergeData+0x23c>)
 80077c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80077cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 80077d0:	4b4f      	ldr	r3, [pc, #316]	; (8007910 <mergeData+0x23c>)
 80077d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80077d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 80077da:	4b4d      	ldr	r3, [pc, #308]	; (8007910 <mergeData+0x23c>)
 80077dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80077e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80077e4:	4b4a      	ldr	r3, [pc, #296]	; (8007910 <mergeData+0x23c>)
 80077e6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80077ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 80077ee:	4b48      	ldr	r3, [pc, #288]	; (8007910 <mergeData+0x23c>)
 80077f0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80077f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80077f8:	4b45      	ldr	r3, [pc, #276]	; (8007910 <mergeData+0x23c>)
 80077fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80077fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8007802:	4b43      	ldr	r3, [pc, #268]	; (8007910 <mergeData+0x23c>)
 8007804:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007808:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 800780c:	4b40      	ldr	r3, [pc, #256]	; (8007910 <mergeData+0x23c>)
 800780e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8007812:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8007816:	4b3e      	ldr	r3, [pc, #248]	; (8007910 <mergeData+0x23c>)
 8007818:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800781c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007820:	2306      	movs	r3, #6
 8007822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007826:	2300      	movs	r3, #0
 8007828:	66fb      	str	r3, [r7, #108]	; 0x6c
 800782a:	e015      	b.n	8007858 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 800782c:	1d3a      	adds	r2, r7, #4
 800782e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007830:	4413      	add	r3, r2
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800783a:	4936      	ldr	r1, [pc, #216]	; (8007914 <mergeData+0x240>)
 800783c:	4618      	mov	r0, r3
 800783e:	f004 fec1 	bl	800c5c4 <siprintf>
	    strcat(combinedString, temp);
 8007842:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007846:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800784a:	4611      	mov	r1, r2
 800784c:	4618      	mov	r0, r3
 800784e:	f004 ff1b 	bl	800c688 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007854:	3301      	adds	r3, #1
 8007856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800785a:	2b2b      	cmp	r3, #43	; 0x2b
 800785c:	d9e6      	bls.n	800782c <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800785e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007862:	4618      	mov	r0, r3
 8007864:	f7f8 fcde 	bl	8000224 <strlen>
 8007868:	4603      	mov	r3, r0
 800786a:	3301      	adds	r3, #1
 800786c:	4618      	mov	r0, r3
 800786e:	f004 fdc1 	bl	800c3f4 <malloc>
 8007872:	4603      	mov	r3, r0
 8007874:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007876:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800787a:	4619      	mov	r1, r3
 800787c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800787e:	f004 ff57 	bl	800c730 <strcpy>
	return result;
 8007882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007884:	4618      	mov	r0, r3
 8007886:	3770      	adds	r7, #112	; 0x70
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000237 	.word	0x20000237
 8007890:	20000229 	.word	0x20000229
 8007894:	2000022c 	.word	0x2000022c
 8007898:	2000022d 	.word	0x2000022d
 800789c:	2000022e 	.word	0x2000022e
 80078a0:	20000235 	.word	0x20000235
 80078a4:	2000022f 	.word	0x2000022f
 80078a8:	20000230 	.word	0x20000230
 80078ac:	20000234 	.word	0x20000234
 80078b0:	20000231 	.word	0x20000231
 80078b4:	20000241 	.word	0x20000241
 80078b8:	20000232 	.word	0x20000232
 80078bc:	20000242 	.word	0x20000242
 80078c0:	20000233 	.word	0x20000233
 80078c4:	20000243 	.word	0x20000243
 80078c8:	20000236 	.word	0x20000236
 80078cc:	20000238 	.word	0x20000238
 80078d0:	20000239 	.word	0x20000239
 80078d4:	2000023a 	.word	0x2000023a
 80078d8:	2000023b 	.word	0x2000023b
 80078dc:	2000023c 	.word	0x2000023c
 80078e0:	2000023d 	.word	0x2000023d
 80078e4:	2000023e 	.word	0x2000023e
 80078e8:	2000023f 	.word	0x2000023f
 80078ec:	20000240 	.word	0x20000240
 80078f0:	20000244 	.word	0x20000244
 80078f4:	20000246 	.word	0x20000246
 80078f8:	20000225 	.word	0x20000225
 80078fc:	20000226 	.word	0x20000226
 8007900:	20000000 	.word	0x20000000
 8007904:	20000001 	.word	0x20000001
 8007908:	20000227 	.word	0x20000227
 800790c:	20000249 	.word	0x20000249
 8007910:	2000012c 	.word	0x2000012c
 8007914:	0800dd68 	.word	0x0800dd68

08007918 <convertAndSendData>:

void convertAndSendData() {
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 800791e:	4b1a      	ldr	r3, [pc, #104]	; (8007988 <convertAndSendData+0x70>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 8007926:	4a19      	ldr	r2, [pc, #100]	; (800798c <convertAndSendData+0x74>)
 8007928:	2101      	movs	r1, #1
 800792a:	2001      	movs	r0, #1
 800792c:	f000 fa0e 	bl	8007d4c <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007930:	4a17      	ldr	r2, [pc, #92]	; (8007990 <convertAndSendData+0x78>)
 8007932:	2101      	movs	r1, #1
 8007934:	2002      	movs	r0, #2
 8007936:	f000 fa09 	bl	8007d4c <lcd_print>
 800793a:	e009      	b.n	8007950 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 800793c:	4a15      	ldr	r2, [pc, #84]	; (8007994 <convertAndSendData+0x7c>)
 800793e:	2101      	movs	r1, #1
 8007940:	2001      	movs	r0, #1
 8007942:	f000 fa03 	bl	8007d4c <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007946:	4a14      	ldr	r2, [pc, #80]	; (8007998 <convertAndSendData+0x80>)
 8007948:	2101      	movs	r1, #1
 800794a:	2002      	movs	r0, #2
 800794c:	f000 f9fe 	bl	8007d4c <lcd_print>
	}
	for(int i=0; i<2; i++) {
 8007950:	2300      	movs	r3, #0
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	e00a      	b.n	800796c <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 8007956:	f7ff febd 	bl	80076d4 <mergeData>
 800795a:	4603      	mov	r3, r0
 800795c:	461a      	mov	r2, r3
 800795e:	490f      	ldr	r1, [pc, #60]	; (800799c <convertAndSendData+0x84>)
 8007960:	480f      	ldr	r0, [pc, #60]	; (80079a0 <convertAndSendData+0x88>)
 8007962:	f7f9 f805 	bl	8000970 <sendMachineData>
	for(int i=0; i<2; i++) {
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3301      	adds	r3, #1
 800796a:	607b      	str	r3, [r7, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b01      	cmp	r3, #1
 8007970:	ddf1      	ble.n	8007956 <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 8007972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007976:	f000 ff3f 	bl	80087f8 <HAL_Delay>
	lcd_clear();
 800797a:	f000 fa13 	bl	8007da4 <lcd_clear>
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000249 	.word	0x20000249
 800798c:	0800dd6c 	.word	0x0800dd6c
 8007990:	0800dd80 	.word	0x0800dd80
 8007994:	0800dd94 	.word	0x0800dd94
 8007998:	0800dda8 	.word	0x0800dda8
 800799c:	200001a4 	.word	0x200001a4
 80079a0:	20000354 	.word	0x20000354

080079a4 <iotSetup>:

void iotSetup() {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 80079a8:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <iotSetup+0x64>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01d      	beq.n	80079ec <iotSetup+0x48>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 80079b0:	4b16      	ldr	r3, [pc, #88]	; (8007a0c <iotSetup+0x68>)
 80079b2:	7adb      	ldrb	r3, [r3, #11]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <iotSetup+0x18>
			takeMachineID();
 80079b8:	f7ff f99e 	bl	8006cf8 <takeMachineID>
		}
		HAL_Delay(500);
 80079bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079c0:	f000 ff1a 	bl	80087f8 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 80079c4:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <iotSetup+0x6c>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <iotSetup+0x2c>
			takeWifiSSID();
 80079cc:	f7ff fb28 	bl	8007020 <takeWifiSSID>
		}
		HAL_Delay(500);
 80079d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079d4:	f000 ff10 	bl	80087f8 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 80079d8:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <iotSetup+0x70>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <iotSetup+0x40>
			takeWifiPass();
 80079e0:	f7ff fccc 	bl	800737c <takeWifiPass>
		}
		HAL_Delay(500);
 80079e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079e8:	f000 ff06 	bl	80087f8 <HAL_Delay>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 80079ec:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <iotSetup+0x70>)
 80079ee:	4908      	ldr	r1, [pc, #32]	; (8007a10 <iotSetup+0x6c>)
 80079f0:	4809      	ldr	r0, [pc, #36]	; (8007a18 <iotSetup+0x74>)
 80079f2:	f7f8 ff7f 	bl	80008f4 <ESP8266_Init>
	HAL_Delay(500);
 80079f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079fa:	f000 fefd 	bl	80087f8 <HAL_Delay>
	convertAndSendData();
 80079fe:	f7ff ff8b 	bl	8007918 <convertAndSendData>
}
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20000247 	.word	0x20000247
 8007a0c:	200001a4 	.word	0x200001a4
 8007a10:	200001b0 	.word	0x200001b0
 8007a14:	200001c4 	.word	0x200001c4
 8007a18:	20000354 	.word	0x20000354

08007a1c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	4603      	mov	r3, r0
 8007a24:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	f023 030f 	bic.w	r3, r3, #15
 8007a2c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007a34:	7b7b      	ldrb	r3, [r7, #13]
 8007a36:	f043 030c 	orr.w	r3, r3, #12
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007a3e:	7b7b      	ldrb	r3, [r7, #13]
 8007a40:	f043 0308 	orr.w	r3, r3, #8
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007a48:	7b3b      	ldrb	r3, [r7, #12]
 8007a4a:	f043 030c 	orr.w	r3, r3, #12
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007a52:	7b3b      	ldrb	r3, [r7, #12]
 8007a54:	f043 0308 	orr.w	r3, r3, #8
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007a5c:	bf00      	nop
 8007a5e:	4825      	ldr	r0, [pc, #148]	; (8007af4 <lcd_send_cmd+0xd8>)
 8007a60:	f002 fac3 	bl	8009fea <HAL_I2C_GetError>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d0f9      	beq.n	8007a5e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a6a:	bf00      	nop
 8007a6c:	4821      	ldr	r0, [pc, #132]	; (8007af4 <lcd_send_cmd+0xd8>)
 8007a6e:	f002 faaf 	bl	8009fd0 <HAL_I2C_GetState>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d1f9      	bne.n	8007a6c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007a78:	4b1f      	ldr	r3, [pc, #124]	; (8007af8 <lcd_send_cmd+0xdc>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d116      	bne.n	8007aae <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]
 8007a84:	e00f      	b.n	8007aa6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	3310      	adds	r3, #16
 8007a8a:	443b      	add	r3, r7
 8007a8c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	f022 0208 	bic.w	r2, r2, #8
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	3310      	adds	r3, #16
 8007a9a:	443b      	add	r3, r7
 8007a9c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	73fb      	strb	r3, [r7, #15]
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	d9ec      	bls.n	8007a86 <lcd_send_cmd+0x6a>
 8007aac:	e015      	b.n	8007ada <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73bb      	strb	r3, [r7, #14]
 8007ab2:	e00f      	b.n	8007ad4 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	3310      	adds	r3, #16
 8007ab8:	443b      	add	r3, r7
 8007aba:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	f042 0208 	orr.w	r2, r2, #8
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	3310      	adds	r3, #16
 8007ac8:	443b      	add	r3, r7
 8007aca:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	73bb      	strb	r3, [r7, #14]
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d9ec      	bls.n	8007ab4 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007ada:	f107 0208 	add.w	r2, r7, #8
 8007ade:	2364      	movs	r3, #100	; 0x64
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	2304      	movs	r3, #4
 8007ae4:	214e      	movs	r1, #78	; 0x4e
 8007ae6:	4803      	ldr	r0, [pc, #12]	; (8007af4 <lcd_send_cmd+0xd8>)
 8007ae8:	f001 fe12 	bl	8009710 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007aec:	bf00      	nop
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	200002b8 	.word	0x200002b8
 8007af8:	2000028c 	.word	0x2000028c

08007afc <lcd_send_data>:

void lcd_send_data (char data) {
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	4603      	mov	r3, r0
 8007b04:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	f023 030f 	bic.w	r3, r3, #15
 8007b0c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b14:	7b7b      	ldrb	r3, [r7, #13]
 8007b16:	f043 030d 	orr.w	r3, r3, #13
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007b1e:	7b7b      	ldrb	r3, [r7, #13]
 8007b20:	f043 0309 	orr.w	r3, r3, #9
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007b28:	7b3b      	ldrb	r3, [r7, #12]
 8007b2a:	f043 030d 	orr.w	r3, r3, #13
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007b32:	7b3b      	ldrb	r3, [r7, #12]
 8007b34:	f043 0309 	orr.w	r3, r3, #9
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b3c:	bf00      	nop
 8007b3e:	4825      	ldr	r0, [pc, #148]	; (8007bd4 <lcd_send_data+0xd8>)
 8007b40:	f002 fa53 	bl	8009fea <HAL_I2C_GetError>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d0f9      	beq.n	8007b3e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b4a:	bf00      	nop
 8007b4c:	4821      	ldr	r0, [pc, #132]	; (8007bd4 <lcd_send_data+0xd8>)
 8007b4e:	f002 fa3f 	bl	8009fd0 <HAL_I2C_GetState>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	d1f9      	bne.n	8007b4c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007b58:	4b1f      	ldr	r3, [pc, #124]	; (8007bd8 <lcd_send_data+0xdc>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d116      	bne.n	8007b8e <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]
 8007b64:	e00f      	b.n	8007b86 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	3310      	adds	r3, #16
 8007b6a:	443b      	add	r3, r7
 8007b6c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	f022 0208 	bic.w	r2, r2, #8
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	3310      	adds	r3, #16
 8007b7a:	443b      	add	r3, r7
 8007b7c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	3301      	adds	r3, #1
 8007b84:	73fb      	strb	r3, [r7, #15]
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d9ec      	bls.n	8007b66 <lcd_send_data+0x6a>
 8007b8c:	e015      	b.n	8007bba <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73bb      	strb	r3, [r7, #14]
 8007b92:	e00f      	b.n	8007bb4 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	3310      	adds	r3, #16
 8007b98:	443b      	add	r3, r7
 8007b9a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	f042 0208 	orr.w	r2, r2, #8
 8007ba4:	b2d2      	uxtb	r2, r2
 8007ba6:	3310      	adds	r3, #16
 8007ba8:	443b      	add	r3, r7
 8007baa:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	73bb      	strb	r3, [r7, #14]
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d9ec      	bls.n	8007b94 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007bba:	f107 0208 	add.w	r2, r7, #8
 8007bbe:	2364      	movs	r3, #100	; 0x64
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	2304      	movs	r3, #4
 8007bc4:	214e      	movs	r1, #78	; 0x4e
 8007bc6:	4803      	ldr	r0, [pc, #12]	; (8007bd4 <lcd_send_data+0xd8>)
 8007bc8:	f001 fda2 	bl	8009710 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007bcc:	bf00      	nop
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	200002b8 	.word	0x200002b8
 8007bd8:	2000028c 	.word	0x2000028c

08007bdc <lcd_send_string>:

void lcd_send_string (char *str) {
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007be4:	e006      	b.n	8007bf4 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff ff84 	bl	8007afc <lcd_send_data>
	while (*str) {
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1f4      	bne.n	8007be6 <lcd_send_string+0xa>
	}
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	f023 030f 	bic.w	r3, r3, #15
 8007c18:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007c20:	7b7b      	ldrb	r3, [r7, #13]
 8007c22:	f043 030d 	orr.w	r3, r3, #13
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007c2a:	7b7b      	ldrb	r3, [r7, #13]
 8007c2c:	f043 0309 	orr.w	r3, r3, #9
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007c34:	7b3b      	ldrb	r3, [r7, #12]
 8007c36:	f043 030d 	orr.w	r3, r3, #13
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007c3e:	7b3b      	ldrb	r3, [r7, #12]
 8007c40:	f043 0309 	orr.w	r3, r3, #9
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c48:	bf00      	nop
 8007c4a:	4825      	ldr	r0, [pc, #148]	; (8007ce0 <lcd_send_char+0xd8>)
 8007c4c:	f002 f9cd 	bl	8009fea <HAL_I2C_GetError>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b04      	cmp	r3, #4
 8007c54:	d0f9      	beq.n	8007c4a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c56:	bf00      	nop
 8007c58:	4821      	ldr	r0, [pc, #132]	; (8007ce0 <lcd_send_char+0xd8>)
 8007c5a:	f002 f9b9 	bl	8009fd0 <HAL_I2C_GetState>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d1f9      	bne.n	8007c58 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007c64:	4b1f      	ldr	r3, [pc, #124]	; (8007ce4 <lcd_send_char+0xdc>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d116      	bne.n	8007c9a <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
 8007c70:	e00f      	b.n	8007c92 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	3310      	adds	r3, #16
 8007c76:	443b      	add	r3, r7
 8007c78:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	f022 0208 	bic.w	r2, r2, #8
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	3310      	adds	r3, #16
 8007c86:	443b      	add	r3, r7
 8007c88:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	73fb      	strb	r3, [r7, #15]
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d9ec      	bls.n	8007c72 <lcd_send_char+0x6a>
 8007c98:	e015      	b.n	8007cc6 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73bb      	strb	r3, [r7, #14]
 8007c9e:	e00f      	b.n	8007cc0 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	3310      	adds	r3, #16
 8007ca4:	443b      	add	r3, r7
 8007ca6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	f042 0208 	orr.w	r2, r2, #8
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	3310      	adds	r3, #16
 8007cb4:	443b      	add	r3, r7
 8007cb6:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	73bb      	strb	r3, [r7, #14]
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d9ec      	bls.n	8007ca0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007cc6:	f107 0208 	add.w	r2, r7, #8
 8007cca:	2364      	movs	r3, #100	; 0x64
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	2304      	movs	r3, #4
 8007cd0:	214e      	movs	r1, #78	; 0x4e
 8007cd2:	4803      	ldr	r0, [pc, #12]	; (8007ce0 <lcd_send_char+0xd8>)
 8007cd4:	f001 fd1c 	bl	8009710 <HAL_I2C_Master_Transmit>
}
 8007cd8:	bf00      	nop
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	200002b8 	.word	0x200002b8
 8007ce4:	2000028c 	.word	0x2000028c

08007ce8 <lcd_init>:

void lcd_init (void) {
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007cec:	2002      	movs	r0, #2
 8007cee:	f7ff fe95 	bl	8007a1c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007cf2:	2028      	movs	r0, #40	; 0x28
 8007cf4:	f7ff fe92 	bl	8007a1c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007cf8:	200c      	movs	r0, #12
 8007cfa:	f7ff fe8f 	bl	8007a1c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007cfe:	2080      	movs	r0, #128	; 0x80
 8007d00:	f7ff fe8c 	bl	8007a1c <lcd_send_cmd>
	lcd_backlight(1);
 8007d04:	2001      	movs	r0, #1
 8007d06:	f000 f86d 	bl	8007de4 <lcd_backlight>
}
 8007d0a:	bf00      	nop
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	4603      	mov	r3, r0
 8007d16:	460a      	mov	r2, r1
 8007d18:	71fb      	strb	r3, [r7, #7]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d106      	bne.n	8007d32 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007d24:	79bb      	ldrb	r3, [r7, #6]
 8007d26:	337f      	adds	r3, #127	; 0x7f
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fe76 	bl	8007a1c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007d30:	e008      	b.n	8007d44 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d105      	bne.n	8007d44 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007d38:	79bb      	ldrb	r3, [r7, #6]
 8007d3a:	3b41      	subs	r3, #65	; 0x41
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff fe6c 	bl	8007a1c <lcd_send_cmd>
}
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	603a      	str	r2, [r7, #0]
 8007d56:	71fb      	strb	r3, [r7, #7]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007d5c:	79ba      	ldrb	r2, [r7, #6]
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff ffd3 	bl	8007d0e <lcd_gotoxy>
	lcd_send_string(str);
 8007d68:	6838      	ldr	r0, [r7, #0]
 8007d6a:	f7ff ff37 	bl	8007bdc <lcd_send_string>
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	71fb      	strb	r3, [r7, #7]
 8007d80:	460b      	mov	r3, r1
 8007d82:	71bb      	strb	r3, [r7, #6]
 8007d84:	4613      	mov	r3, r2
 8007d86:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007d88:	79ba      	ldrb	r2, [r7, #6]
 8007d8a:	79fb      	ldrb	r3, [r7, #7]
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff ffbd 	bl	8007d0e <lcd_gotoxy>
    lcd_send_char(ch);
 8007d94:	797b      	ldrb	r3, [r7, #5]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff ff36 	bl	8007c08 <lcd_send_char>
}
 8007d9c:	bf00      	nop
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <lcd_clear>:

void lcd_clear(void) {
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007da8:	2001      	movs	r0, #1
 8007daa:	f7ff fe37 	bl	8007a1c <lcd_send_cmd>
    HAL_Delay(2);
 8007dae:	2002      	movs	r0, #2
 8007db0:	f000 fd22 	bl	80087f8 <HAL_Delay>
}
 8007db4:	bf00      	nop
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	460a      	mov	r2, r1
 8007dc2:	71fb      	strb	r3, [r7, #7]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007dc8:	79ba      	ldrb	r2, [r7, #6]
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	4611      	mov	r1, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff ff9d 	bl	8007d0e <lcd_gotoxy>

    lcd_send_char(' ');
 8007dd4:	2020      	movs	r0, #32
 8007dd6:	f7ff ff17 	bl	8007c08 <lcd_send_char>
}
 8007dda:	bf00      	nop
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007dee:	4a05      	ldr	r2, [pc, #20]	; (8007e04 <lcd_backlight+0x20>)
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007df4:	2000      	movs	r0, #0
 8007df6:	f7ff fe11 	bl	8007a1c <lcd_send_cmd>
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	2000028c 	.word	0x2000028c

08007e08 <lcd_cursor>:

void lcd_cursor(int state) {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d106      	bne.n	8007e24 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e16:	200e      	movs	r0, #14
 8007e18:	f7ff fe00 	bl	8007a1c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007e1c:	200f      	movs	r0, #15
 8007e1e:	f7ff fdfd 	bl	8007a1c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007e22:	e002      	b.n	8007e2a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007e24:	200c      	movs	r0, #12
 8007e26:	f7ff fdf9 	bl	8007a1c <lcd_send_cmd>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007e3c:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3301      	adds	r3, #1
 8007e42:	4a03      	ldr	r2, [pc, #12]	; (8007e50 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007e44:	6013      	str	r3, [r2, #0]
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr
 8007e50:	20000204 	.word	0x20000204

08007e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e58:	f000 fc6c 	bl	8008734 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007e5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e60:	f000 fcca 	bl	80087f8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e64:	f000 f89c 	bl	8007fa0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e68:	f000 f9be 	bl	80081e8 <MX_GPIO_Init>
  MX_CAN_Init();
 8007e6c:	f000 f8de 	bl	800802c <MX_CAN_Init>
  MX_I2C1_Init();
 8007e70:	f000 f910 	bl	8008094 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007e74:	f000 f93c 	bl	80080f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007e78:	f000 f98c 	bl	8008194 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	2140      	movs	r1, #64	; 0x40
 8007e80:	483e      	ldr	r0, [pc, #248]	; (8007f7c <main+0x128>)
 8007e82:	f001 faa0 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007e86:	2201      	movs	r2, #1
 8007e88:	2180      	movs	r1, #128	; 0x80
 8007e8a:	483c      	ldr	r0, [pc, #240]	; (8007f7c <main+0x128>)
 8007e8c:	f001 fa9b 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007e90:	200a      	movs	r0, #10
 8007e92:	f000 fcb1 	bl	80087f8 <HAL_Delay>
  lcd_init();
 8007e96:	f7ff ff27 	bl	8007ce8 <lcd_init>
  HAL_Delay(10);
 8007e9a:	200a      	movs	r0, #10
 8007e9c:	f000 fcac 	bl	80087f8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007ea0:	4837      	ldr	r0, [pc, #220]	; (8007f80 <main+0x12c>)
 8007ea2:	f003 f943 	bl	800b12c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ea6:	bf00      	nop
 8007ea8:	4836      	ldr	r0, [pc, #216]	; (8007f84 <main+0x130>)
 8007eaa:	f002 f89e 	bl	8009fea <HAL_I2C_GetError>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	d0f9      	beq.n	8007ea8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007eb4:	bf00      	nop
 8007eb6:	4833      	ldr	r0, [pc, #204]	; (8007f84 <main+0x130>)
 8007eb8:	f002 f88a 	bl	8009fd0 <HAL_I2C_GetState>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	d1f9      	bne.n	8007eb6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ec8:	482c      	ldr	r0, [pc, #176]	; (8007f7c <main+0x128>)
 8007eca:	f001 fa7c 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ed4:	4829      	ldr	r0, [pc, #164]	; (8007f7c <main+0x128>)
 8007ed6:	f001 fa76 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007eda:	2200      	movs	r2, #0
 8007edc:	2104      	movs	r1, #4
 8007ede:	4827      	ldr	r0, [pc, #156]	; (8007f7c <main+0x128>)
 8007ee0:	f001 fa71 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	4824      	ldr	r0, [pc, #144]	; (8007f7c <main+0x128>)
 8007eea:	f001 fa6c 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4822      	ldr	r0, [pc, #136]	; (8007f7c <main+0x128>)
 8007ef4:	f001 fa67 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2120      	movs	r1, #32
 8007efc:	4822      	ldr	r0, [pc, #136]	; (8007f88 <main+0x134>)
 8007efe:	f001 fa62 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f02:	2200      	movs	r2, #0
 8007f04:	2110      	movs	r1, #16
 8007f06:	4820      	ldr	r0, [pc, #128]	; (8007f88 <main+0x134>)
 8007f08:	f001 fa5d 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2180      	movs	r1, #128	; 0x80
 8007f10:	481e      	ldr	r0, [pc, #120]	; (8007f8c <main+0x138>)
 8007f12:	f001 fa58 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f16:	2200      	movs	r2, #0
 8007f18:	2140      	movs	r1, #64	; 0x40
 8007f1a:	481c      	ldr	r0, [pc, #112]	; (8007f8c <main+0x138>)
 8007f1c:	f001 fa53 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f20:	2200      	movs	r2, #0
 8007f22:	2120      	movs	r1, #32
 8007f24:	4819      	ldr	r0, [pc, #100]	; (8007f8c <main+0x138>)
 8007f26:	f001 fa4e 	bl	80093c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2110      	movs	r1, #16
 8007f2e:	4817      	ldr	r0, [pc, #92]	; (8007f8c <main+0x138>)
 8007f30:	f001 fa49 	bl	80093c6 <HAL_GPIO_WritePin>

  i2cTest();
 8007f34:	f7f8 fee0 	bl	8000cf8 <i2cTest>
  HAL_Delay(100);
 8007f38:	2064      	movs	r0, #100	; 0x64
 8007f3a:	f000 fc5d 	bl	80087f8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007f3e:	4a14      	ldr	r2, [pc, #80]	; (8007f90 <main+0x13c>)
 8007f40:	2101      	movs	r1, #1
 8007f42:	2001      	movs	r0, #1
 8007f44:	f7ff ff02 	bl	8007d4c <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007f48:	4a12      	ldr	r2, [pc, #72]	; (8007f94 <main+0x140>)
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	2002      	movs	r0, #2
 8007f4e:	f7ff fefd 	bl	8007d4c <lcd_print>
  HAL_Delay(1000);
 8007f52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f56:	f000 fc4f 	bl	80087f8 <HAL_Delay>
  lcd_clear();
 8007f5a:	f7ff ff23 	bl	8007da4 <lcd_clear>

  eepromKontrol();
 8007f5e:	f7f8 f969 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f66:	f000 fc47 	bl	80087f8 <HAL_Delay>

  backLightTimer = millis;
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <main+0x144>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a0b      	ldr	r2, [pc, #44]	; (8007f9c <main+0x148>)
 8007f70:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007f72:	f7ff fd17 	bl	80079a4 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007f76:	f7fe fd27 	bl	80069c8 <mainLoop>
 8007f7a:	e7fc      	b.n	8007f76 <main+0x122>
 8007f7c:	40010c00 	.word	0x40010c00
 8007f80:	2000030c 	.word	0x2000030c
 8007f84:	200002b8 	.word	0x200002b8
 8007f88:	40011000 	.word	0x40011000
 8007f8c:	40010800 	.word	0x40010800
 8007f90:	0800ddbc 	.word	0x0800ddbc
 8007f94:	0800ddd0 	.word	0x0800ddd0
 8007f98:	20000204 	.word	0x20000204
 8007f9c:	20000220 	.word	0x20000220

08007fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b090      	sub	sp, #64	; 0x40
 8007fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fa6:	f107 0318 	add.w	r3, r7, #24
 8007faa:	2228      	movs	r2, #40	; 0x28
 8007fac:	2100      	movs	r1, #0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f004 fb79 	bl	800c6a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fb4:	1d3b      	adds	r3, r7, #4
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	605a      	str	r2, [r3, #4]
 8007fbc:	609a      	str	r2, [r3, #8]
 8007fbe:	60da      	str	r2, [r3, #12]
 8007fc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007fde:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fe4:	f107 0318 	add.w	r3, r7, #24
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f002 fc3f 	bl	800a86c <HAL_RCC_OscConfig>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007ff4:	f000 f9a2 	bl	800833c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ff8:	230f      	movs	r3, #15
 8007ffa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008000:	2300      	movs	r3, #0
 8008002:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008008:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800800e:	1d3b      	adds	r3, r7, #4
 8008010:	2102      	movs	r1, #2
 8008012:	4618      	mov	r0, r3
 8008014:	f002 feac 	bl	800ad70 <HAL_RCC_ClockConfig>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800801e:	f000 f98d 	bl	800833c <Error_Handler>
  }
}
 8008022:	bf00      	nop
 8008024:	3740      	adds	r7, #64	; 0x40
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008030:	4b16      	ldr	r3, [pc, #88]	; (800808c <MX_CAN_Init+0x60>)
 8008032:	4a17      	ldr	r2, [pc, #92]	; (8008090 <MX_CAN_Init+0x64>)
 8008034:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008036:	4b15      	ldr	r3, [pc, #84]	; (800808c <MX_CAN_Init+0x60>)
 8008038:	2210      	movs	r2, #16
 800803a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800803c:	4b13      	ldr	r3, [pc, #76]	; (800808c <MX_CAN_Init+0x60>)
 800803e:	2200      	movs	r2, #0
 8008040:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008042:	4b12      	ldr	r3, [pc, #72]	; (800808c <MX_CAN_Init+0x60>)
 8008044:	2200      	movs	r2, #0
 8008046:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008048:	4b10      	ldr	r3, [pc, #64]	; (800808c <MX_CAN_Init+0x60>)
 800804a:	2200      	movs	r2, #0
 800804c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800804e:	4b0f      	ldr	r3, [pc, #60]	; (800808c <MX_CAN_Init+0x60>)
 8008050:	2200      	movs	r2, #0
 8008052:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008054:	4b0d      	ldr	r3, [pc, #52]	; (800808c <MX_CAN_Init+0x60>)
 8008056:	2200      	movs	r2, #0
 8008058:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800805a:	4b0c      	ldr	r3, [pc, #48]	; (800808c <MX_CAN_Init+0x60>)
 800805c:	2200      	movs	r2, #0
 800805e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <MX_CAN_Init+0x60>)
 8008062:	2200      	movs	r2, #0
 8008064:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008066:	4b09      	ldr	r3, [pc, #36]	; (800808c <MX_CAN_Init+0x60>)
 8008068:	2200      	movs	r2, #0
 800806a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800806c:	4b07      	ldr	r3, [pc, #28]	; (800808c <MX_CAN_Init+0x60>)
 800806e:	2200      	movs	r2, #0
 8008070:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008072:	4b06      	ldr	r3, [pc, #24]	; (800808c <MX_CAN_Init+0x60>)
 8008074:	2200      	movs	r2, #0
 8008076:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008078:	4804      	ldr	r0, [pc, #16]	; (800808c <MX_CAN_Init+0x60>)
 800807a:	f000 fbe1 	bl	8008840 <HAL_CAN_Init>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008084:	f000 f95a 	bl	800833c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008088:	bf00      	nop
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000290 	.word	0x20000290
 8008090:	40006400 	.word	0x40006400

08008094 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008098:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <MX_I2C1_Init+0x50>)
 800809a:	4a13      	ldr	r2, [pc, #76]	; (80080e8 <MX_I2C1_Init+0x54>)
 800809c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800809e:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <MX_I2C1_Init+0x50>)
 80080a0:	4a12      	ldr	r2, [pc, #72]	; (80080ec <MX_I2C1_Init+0x58>)
 80080a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80080a4:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <MX_I2C1_Init+0x50>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80080aa:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <MX_I2C1_Init+0x50>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80080b0:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <MX_I2C1_Init+0x50>)
 80080b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <MX_I2C1_Init+0x50>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80080be:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <MX_I2C1_Init+0x50>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80080c4:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <MX_I2C1_Init+0x50>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80080ca:	4b06      	ldr	r3, [pc, #24]	; (80080e4 <MX_I2C1_Init+0x50>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80080d0:	4804      	ldr	r0, [pc, #16]	; (80080e4 <MX_I2C1_Init+0x50>)
 80080d2:	f001 f9a9 	bl	8009428 <HAL_I2C_Init>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80080dc:	f000 f92e 	bl	800833c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80080e0:	bf00      	nop
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	200002b8 	.word	0x200002b8
 80080e8:	40005400 	.word	0x40005400
 80080ec:	00061a80 	.word	0x00061a80

080080f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080f6:	f107 0308 	add.w	r3, r7, #8
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	605a      	str	r2, [r3, #4]
 8008100:	609a      	str	r2, [r3, #8]
 8008102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008104:	463b      	mov	r3, r7
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800810c:	4b1f      	ldr	r3, [pc, #124]	; (800818c <MX_TIM1_Init+0x9c>)
 800810e:	4a20      	ldr	r2, [pc, #128]	; (8008190 <MX_TIM1_Init+0xa0>)
 8008110:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008112:	4b1e      	ldr	r3, [pc, #120]	; (800818c <MX_TIM1_Init+0x9c>)
 8008114:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008118:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800811a:	4b1c      	ldr	r3, [pc, #112]	; (800818c <MX_TIM1_Init+0x9c>)
 800811c:	2200      	movs	r2, #0
 800811e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008120:	4b1a      	ldr	r3, [pc, #104]	; (800818c <MX_TIM1_Init+0x9c>)
 8008122:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008126:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008128:	4b18      	ldr	r3, [pc, #96]	; (800818c <MX_TIM1_Init+0x9c>)
 800812a:	2200      	movs	r2, #0
 800812c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800812e:	4b17      	ldr	r3, [pc, #92]	; (800818c <MX_TIM1_Init+0x9c>)
 8008130:	2200      	movs	r2, #0
 8008132:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008134:	4b15      	ldr	r3, [pc, #84]	; (800818c <MX_TIM1_Init+0x9c>)
 8008136:	2200      	movs	r2, #0
 8008138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800813a:	4814      	ldr	r0, [pc, #80]	; (800818c <MX_TIM1_Init+0x9c>)
 800813c:	f002 ffa6 	bl	800b08c <HAL_TIM_Base_Init>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008146:	f000 f8f9 	bl	800833c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800814a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800814e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008150:	f107 0308 	add.w	r3, r7, #8
 8008154:	4619      	mov	r1, r3
 8008156:	480d      	ldr	r0, [pc, #52]	; (800818c <MX_TIM1_Init+0x9c>)
 8008158:	f003 f950 	bl	800b3fc <HAL_TIM_ConfigClockSource>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008162:	f000 f8eb 	bl	800833c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008166:	2300      	movs	r3, #0
 8008168:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800816e:	463b      	mov	r3, r7
 8008170:	4619      	mov	r1, r3
 8008172:	4806      	ldr	r0, [pc, #24]	; (800818c <MX_TIM1_Init+0x9c>)
 8008174:	f003 fb3e 	bl	800b7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800817e:	f000 f8dd 	bl	800833c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008182:	bf00      	nop
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	2000030c 	.word	0x2000030c
 8008190:	40012c00 	.word	0x40012c00

08008194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008198:	4b11      	ldr	r3, [pc, #68]	; (80081e0 <MX_USART1_UART_Init+0x4c>)
 800819a:	4a12      	ldr	r2, [pc, #72]	; (80081e4 <MX_USART1_UART_Init+0x50>)
 800819c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800819e:	4b10      	ldr	r3, [pc, #64]	; (80081e0 <MX_USART1_UART_Init+0x4c>)
 80081a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80081a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80081a6:	4b0e      	ldr	r3, [pc, #56]	; (80081e0 <MX_USART1_UART_Init+0x4c>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <MX_USART1_UART_Init+0x4c>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80081b2:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <MX_USART1_UART_Init+0x4c>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80081b8:	4b09      	ldr	r3, [pc, #36]	; (80081e0 <MX_USART1_UART_Init+0x4c>)
 80081ba:	220c      	movs	r2, #12
 80081bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081be:	4b08      	ldr	r3, [pc, #32]	; (80081e0 <MX_USART1_UART_Init+0x4c>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80081c4:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <MX_USART1_UART_Init+0x4c>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80081ca:	4805      	ldr	r0, [pc, #20]	; (80081e0 <MX_USART1_UART_Init+0x4c>)
 80081cc:	f003 fb90 	bl	800b8f0 <HAL_UART_Init>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80081d6:	f000 f8b1 	bl	800833c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80081da:	bf00      	nop
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	20000354 	.word	0x20000354
 80081e4:	40013800 	.word	0x40013800

080081e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081ee:	f107 0310 	add.w	r3, r7, #16
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	605a      	str	r2, [r3, #4]
 80081f8:	609a      	str	r2, [r3, #8]
 80081fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80081fc:	4b4b      	ldr	r3, [pc, #300]	; (800832c <MX_GPIO_Init+0x144>)
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	4a4a      	ldr	r2, [pc, #296]	; (800832c <MX_GPIO_Init+0x144>)
 8008202:	f043 0310 	orr.w	r3, r3, #16
 8008206:	6193      	str	r3, [r2, #24]
 8008208:	4b48      	ldr	r3, [pc, #288]	; (800832c <MX_GPIO_Init+0x144>)
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	f003 0310 	and.w	r3, r3, #16
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008214:	4b45      	ldr	r3, [pc, #276]	; (800832c <MX_GPIO_Init+0x144>)
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	4a44      	ldr	r2, [pc, #272]	; (800832c <MX_GPIO_Init+0x144>)
 800821a:	f043 0320 	orr.w	r3, r3, #32
 800821e:	6193      	str	r3, [r2, #24]
 8008220:	4b42      	ldr	r3, [pc, #264]	; (800832c <MX_GPIO_Init+0x144>)
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800822c:	4b3f      	ldr	r3, [pc, #252]	; (800832c <MX_GPIO_Init+0x144>)
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	4a3e      	ldr	r2, [pc, #248]	; (800832c <MX_GPIO_Init+0x144>)
 8008232:	f043 0304 	orr.w	r3, r3, #4
 8008236:	6193      	str	r3, [r2, #24]
 8008238:	4b3c      	ldr	r3, [pc, #240]	; (800832c <MX_GPIO_Init+0x144>)
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	607b      	str	r3, [r7, #4]
 8008242:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008244:	4b39      	ldr	r3, [pc, #228]	; (800832c <MX_GPIO_Init+0x144>)
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	4a38      	ldr	r2, [pc, #224]	; (800832c <MX_GPIO_Init+0x144>)
 800824a:	f043 0308 	orr.w	r3, r3, #8
 800824e:	6193      	str	r3, [r2, #24]
 8008250:	4b36      	ldr	r3, [pc, #216]	; (800832c <MX_GPIO_Init+0x144>)
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	603b      	str	r3, [r7, #0]
 800825a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800825c:	2200      	movs	r2, #0
 800825e:	21f0      	movs	r1, #240	; 0xf0
 8008260:	4833      	ldr	r0, [pc, #204]	; (8008330 <MX_GPIO_Init+0x148>)
 8008262:	f001 f8b0 	bl	80093c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008266:	2200      	movs	r2, #0
 8008268:	f241 0130 	movw	r1, #4144	; 0x1030
 800826c:	4831      	ldr	r0, [pc, #196]	; (8008334 <MX_GPIO_Init+0x14c>)
 800826e:	f001 f8aa 	bl	80093c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008272:	2200      	movs	r2, #0
 8008274:	f640 4107 	movw	r1, #3079	; 0xc07
 8008278:	482f      	ldr	r0, [pc, #188]	; (8008338 <MX_GPIO_Init+0x150>)
 800827a:	f001 f8a4 	bl	80093c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800827e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008282:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008284:	2300      	movs	r3, #0
 8008286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008288:	2300      	movs	r3, #0
 800828a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800828c:	f107 0310 	add.w	r3, r7, #16
 8008290:	4619      	mov	r1, r3
 8008292:	4828      	ldr	r0, [pc, #160]	; (8008334 <MX_GPIO_Init+0x14c>)
 8008294:	f000 fe20 	bl	8008ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008298:	f248 130f 	movw	r3, #33039	; 0x810f
 800829c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082a6:	f107 0310 	add.w	r3, r7, #16
 80082aa:	4619      	mov	r1, r3
 80082ac:	4820      	ldr	r0, [pc, #128]	; (8008330 <MX_GPIO_Init+0x148>)
 80082ae:	f000 fe13 	bl	8008ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80082b2:	23f0      	movs	r3, #240	; 0xf0
 80082b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082b6:	2301      	movs	r3, #1
 80082b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082be:	2302      	movs	r3, #2
 80082c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	4619      	mov	r1, r3
 80082c8:	4819      	ldr	r0, [pc, #100]	; (8008330 <MX_GPIO_Init+0x148>)
 80082ca:	f000 fe05 	bl	8008ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80082ce:	f241 0330 	movw	r3, #4144	; 0x1030
 80082d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082d4:	2301      	movs	r3, #1
 80082d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082dc:	2302      	movs	r3, #2
 80082de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082e0:	f107 0310 	add.w	r3, r7, #16
 80082e4:	4619      	mov	r1, r3
 80082e6:	4813      	ldr	r0, [pc, #76]	; (8008334 <MX_GPIO_Init+0x14c>)
 80082e8:	f000 fdf6 	bl	8008ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082ec:	f640 4307 	movw	r3, #3079	; 0xc07
 80082f0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082f2:	2301      	movs	r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082fa:	2302      	movs	r3, #2
 80082fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082fe:	f107 0310 	add.w	r3, r7, #16
 8008302:	4619      	mov	r1, r3
 8008304:	480c      	ldr	r0, [pc, #48]	; (8008338 <MX_GPIO_Init+0x150>)
 8008306:	f000 fde7 	bl	8008ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800830a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800830e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008310:	2300      	movs	r3, #0
 8008312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008314:	2300      	movs	r3, #0
 8008316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008318:	f107 0310 	add.w	r3, r7, #16
 800831c:	4619      	mov	r1, r3
 800831e:	4806      	ldr	r0, [pc, #24]	; (8008338 <MX_GPIO_Init+0x150>)
 8008320:	f000 fdda 	bl	8008ed8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008324:	bf00      	nop
 8008326:	3720      	adds	r7, #32
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40021000 	.word	0x40021000
 8008330:	40010800 	.word	0x40010800
 8008334:	40011000 	.word	0x40011000
 8008338:	40010c00 	.word	0x40010c00

0800833c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008340:	bf00      	nop
 8008342:	46bd      	mov	sp, r7
 8008344:	bc80      	pop	{r7}
 8008346:	4770      	bx	lr

08008348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800834e:	4b15      	ldr	r3, [pc, #84]	; (80083a4 <HAL_MspInit+0x5c>)
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	4a14      	ldr	r2, [pc, #80]	; (80083a4 <HAL_MspInit+0x5c>)
 8008354:	f043 0301 	orr.w	r3, r3, #1
 8008358:	6193      	str	r3, [r2, #24]
 800835a:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <HAL_MspInit+0x5c>)
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	60bb      	str	r3, [r7, #8]
 8008364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008366:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <HAL_MspInit+0x5c>)
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	4a0e      	ldr	r2, [pc, #56]	; (80083a4 <HAL_MspInit+0x5c>)
 800836c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008370:	61d3      	str	r3, [r2, #28]
 8008372:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <HAL_MspInit+0x5c>)
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800837a:	607b      	str	r3, [r7, #4]
 800837c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800837e:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <HAL_MspInit+0x60>)
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	4a04      	ldr	r2, [pc, #16]	; (80083a8 <HAL_MspInit+0x60>)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800839a:	bf00      	nop
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr
 80083a4:	40021000 	.word	0x40021000
 80083a8:	40010000 	.word	0x40010000

080083ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b088      	sub	sp, #32
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083b4:	f107 0310 	add.w	r3, r7, #16
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	605a      	str	r2, [r3, #4]
 80083be:	609a      	str	r2, [r3, #8]
 80083c0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1c      	ldr	r2, [pc, #112]	; (8008438 <HAL_CAN_MspInit+0x8c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d131      	bne.n	8008430 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80083cc:	4b1b      	ldr	r3, [pc, #108]	; (800843c <HAL_CAN_MspInit+0x90>)
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	4a1a      	ldr	r2, [pc, #104]	; (800843c <HAL_CAN_MspInit+0x90>)
 80083d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083d6:	61d3      	str	r3, [r2, #28]
 80083d8:	4b18      	ldr	r3, [pc, #96]	; (800843c <HAL_CAN_MspInit+0x90>)
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083e4:	4b15      	ldr	r3, [pc, #84]	; (800843c <HAL_CAN_MspInit+0x90>)
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	4a14      	ldr	r2, [pc, #80]	; (800843c <HAL_CAN_MspInit+0x90>)
 80083ea:	f043 0304 	orr.w	r3, r3, #4
 80083ee:	6193      	str	r3, [r2, #24]
 80083f0:	4b12      	ldr	r3, [pc, #72]	; (800843c <HAL_CAN_MspInit+0x90>)
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	60bb      	str	r3, [r7, #8]
 80083fa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80083fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008400:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008402:	2300      	movs	r3, #0
 8008404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008406:	2300      	movs	r3, #0
 8008408:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800840a:	f107 0310 	add.w	r3, r7, #16
 800840e:	4619      	mov	r1, r3
 8008410:	480b      	ldr	r0, [pc, #44]	; (8008440 <HAL_CAN_MspInit+0x94>)
 8008412:	f000 fd61 	bl	8008ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800841a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800841c:	2302      	movs	r3, #2
 800841e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008420:	2303      	movs	r3, #3
 8008422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008424:	f107 0310 	add.w	r3, r7, #16
 8008428:	4619      	mov	r1, r3
 800842a:	4805      	ldr	r0, [pc, #20]	; (8008440 <HAL_CAN_MspInit+0x94>)
 800842c:	f000 fd54 	bl	8008ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008430:	bf00      	nop
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40006400 	.word	0x40006400
 800843c:	40021000 	.word	0x40021000
 8008440:	40010800 	.word	0x40010800

08008444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800844c:	f107 0310 	add.w	r3, r7, #16
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	605a      	str	r2, [r3, #4]
 8008456:	609a      	str	r2, [r3, #8]
 8008458:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a15      	ldr	r2, [pc, #84]	; (80084b4 <HAL_I2C_MspInit+0x70>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d123      	bne.n	80084ac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008464:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <HAL_I2C_MspInit+0x74>)
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	4a13      	ldr	r2, [pc, #76]	; (80084b8 <HAL_I2C_MspInit+0x74>)
 800846a:	f043 0308 	orr.w	r3, r3, #8
 800846e:	6193      	str	r3, [r2, #24]
 8008470:	4b11      	ldr	r3, [pc, #68]	; (80084b8 <HAL_I2C_MspInit+0x74>)
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	f003 0308 	and.w	r3, r3, #8
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800847c:	23c0      	movs	r3, #192	; 0xc0
 800847e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008480:	2312      	movs	r3, #18
 8008482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008484:	2303      	movs	r3, #3
 8008486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008488:	f107 0310 	add.w	r3, r7, #16
 800848c:	4619      	mov	r1, r3
 800848e:	480b      	ldr	r0, [pc, #44]	; (80084bc <HAL_I2C_MspInit+0x78>)
 8008490:	f000 fd22 	bl	8008ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008494:	4b08      	ldr	r3, [pc, #32]	; (80084b8 <HAL_I2C_MspInit+0x74>)
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	4a07      	ldr	r2, [pc, #28]	; (80084b8 <HAL_I2C_MspInit+0x74>)
 800849a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800849e:	61d3      	str	r3, [r2, #28]
 80084a0:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <HAL_I2C_MspInit+0x74>)
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084a8:	60bb      	str	r3, [r7, #8]
 80084aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80084ac:	bf00      	nop
 80084ae:	3720      	adds	r7, #32
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	40005400 	.word	0x40005400
 80084b8:	40021000 	.word	0x40021000
 80084bc:	40010c00 	.word	0x40010c00

080084c0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a0a      	ldr	r2, [pc, #40]	; (80084f8 <HAL_I2C_MspDeInit+0x38>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d10d      	bne.n	80084ee <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80084d2:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <HAL_I2C_MspDeInit+0x3c>)
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	4a09      	ldr	r2, [pc, #36]	; (80084fc <HAL_I2C_MspDeInit+0x3c>)
 80084d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084dc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80084de:	2140      	movs	r1, #64	; 0x40
 80084e0:	4807      	ldr	r0, [pc, #28]	; (8008500 <HAL_I2C_MspDeInit+0x40>)
 80084e2:	f000 fe8d 	bl	8009200 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80084e6:	2180      	movs	r1, #128	; 0x80
 80084e8:	4805      	ldr	r0, [pc, #20]	; (8008500 <HAL_I2C_MspDeInit+0x40>)
 80084ea:	f000 fe89 	bl	8009200 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80084ee:	bf00      	nop
 80084f0:	3708      	adds	r7, #8
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	40005400 	.word	0x40005400
 80084fc:	40021000 	.word	0x40021000
 8008500:	40010c00 	.word	0x40010c00

08008504 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a0d      	ldr	r2, [pc, #52]	; (8008548 <HAL_TIM_Base_MspInit+0x44>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d113      	bne.n	800853e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008516:	4b0d      	ldr	r3, [pc, #52]	; (800854c <HAL_TIM_Base_MspInit+0x48>)
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	4a0c      	ldr	r2, [pc, #48]	; (800854c <HAL_TIM_Base_MspInit+0x48>)
 800851c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008520:	6193      	str	r3, [r2, #24]
 8008522:	4b0a      	ldr	r3, [pc, #40]	; (800854c <HAL_TIM_Base_MspInit+0x48>)
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800852e:	2200      	movs	r2, #0
 8008530:	2100      	movs	r1, #0
 8008532:	2019      	movs	r0, #25
 8008534:	f000 fb57 	bl	8008be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008538:	2019      	movs	r0, #25
 800853a:	f000 fb70 	bl	8008c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	40012c00 	.word	0x40012c00
 800854c:	40021000 	.word	0x40021000

08008550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008558:	f107 0310 	add.w	r3, r7, #16
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	605a      	str	r2, [r3, #4]
 8008562:	609a      	str	r2, [r3, #8]
 8008564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a20      	ldr	r2, [pc, #128]	; (80085ec <HAL_UART_MspInit+0x9c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d139      	bne.n	80085e4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008570:	4b1f      	ldr	r3, [pc, #124]	; (80085f0 <HAL_UART_MspInit+0xa0>)
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	4a1e      	ldr	r2, [pc, #120]	; (80085f0 <HAL_UART_MspInit+0xa0>)
 8008576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800857a:	6193      	str	r3, [r2, #24]
 800857c:	4b1c      	ldr	r3, [pc, #112]	; (80085f0 <HAL_UART_MspInit+0xa0>)
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008588:	4b19      	ldr	r3, [pc, #100]	; (80085f0 <HAL_UART_MspInit+0xa0>)
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	4a18      	ldr	r2, [pc, #96]	; (80085f0 <HAL_UART_MspInit+0xa0>)
 800858e:	f043 0304 	orr.w	r3, r3, #4
 8008592:	6193      	str	r3, [r2, #24]
 8008594:	4b16      	ldr	r3, [pc, #88]	; (80085f0 <HAL_UART_MspInit+0xa0>)
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	60bb      	str	r3, [r7, #8]
 800859e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80085a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a6:	2302      	movs	r3, #2
 80085a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085aa:	2303      	movs	r3, #3
 80085ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085ae:	f107 0310 	add.w	r3, r7, #16
 80085b2:	4619      	mov	r1, r3
 80085b4:	480f      	ldr	r0, [pc, #60]	; (80085f4 <HAL_UART_MspInit+0xa4>)
 80085b6:	f000 fc8f 	bl	8008ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80085ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085c0:	2300      	movs	r3, #0
 80085c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085c8:	f107 0310 	add.w	r3, r7, #16
 80085cc:	4619      	mov	r1, r3
 80085ce:	4809      	ldr	r0, [pc, #36]	; (80085f4 <HAL_UART_MspInit+0xa4>)
 80085d0:	f000 fc82 	bl	8008ed8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80085d4:	2200      	movs	r2, #0
 80085d6:	2100      	movs	r1, #0
 80085d8:	2025      	movs	r0, #37	; 0x25
 80085da:	f000 fb04 	bl	8008be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80085de:	2025      	movs	r0, #37	; 0x25
 80085e0:	f000 fb1d 	bl	8008c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80085e4:	bf00      	nop
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	40013800 	.word	0x40013800
 80085f0:	40021000 	.word	0x40021000
 80085f4:	40010800 	.word	0x40010800

080085f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80085fc:	e7fe      	b.n	80085fc <NMI_Handler+0x4>

080085fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085fe:	b480      	push	{r7}
 8008600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008602:	e7fe      	b.n	8008602 <HardFault_Handler+0x4>

08008604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008604:	b480      	push	{r7}
 8008606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008608:	e7fe      	b.n	8008608 <MemManage_Handler+0x4>

0800860a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800860a:	b480      	push	{r7}
 800860c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800860e:	e7fe      	b.n	800860e <BusFault_Handler+0x4>

08008610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008614:	e7fe      	b.n	8008614 <UsageFault_Handler+0x4>

08008616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008616:	b480      	push	{r7}
 8008618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800861a:	bf00      	nop
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr

08008622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008622:	b480      	push	{r7}
 8008624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008626:	bf00      	nop
 8008628:	46bd      	mov	sp, r7
 800862a:	bc80      	pop	{r7}
 800862c:	4770      	bx	lr

0800862e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800862e:	b480      	push	{r7}
 8008630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008632:	bf00      	nop
 8008634:	46bd      	mov	sp, r7
 8008636:	bc80      	pop	{r7}
 8008638:	4770      	bx	lr

0800863a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800863e:	f000 f8bf 	bl	80087c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008642:	bf00      	nop
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800864c:	4802      	ldr	r0, [pc, #8]	; (8008658 <TIM1_UP_IRQHandler+0x10>)
 800864e:	f002 fdcd 	bl	800b1ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008652:	bf00      	nop
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	2000030c 	.word	0x2000030c

0800865c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008660:	4802      	ldr	r0, [pc, #8]	; (800866c <USART1_IRQHandler+0x10>)
 8008662:	f003 f9cb 	bl	800b9fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008666:	bf00      	nop
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000354 	.word	0x20000354

08008670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008678:	4a14      	ldr	r2, [pc, #80]	; (80086cc <_sbrk+0x5c>)
 800867a:	4b15      	ldr	r3, [pc, #84]	; (80086d0 <_sbrk+0x60>)
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008684:	4b13      	ldr	r3, [pc, #76]	; (80086d4 <_sbrk+0x64>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800868c:	4b11      	ldr	r3, [pc, #68]	; (80086d4 <_sbrk+0x64>)
 800868e:	4a12      	ldr	r2, [pc, #72]	; (80086d8 <_sbrk+0x68>)
 8008690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008692:	4b10      	ldr	r3, [pc, #64]	; (80086d4 <_sbrk+0x64>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4413      	add	r3, r2
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	429a      	cmp	r2, r3
 800869e:	d207      	bcs.n	80086b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80086a0:	f004 f81a 	bl	800c6d8 <__errno>
 80086a4:	4603      	mov	r3, r0
 80086a6:	220c      	movs	r2, #12
 80086a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80086aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086ae:	e009      	b.n	80086c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80086b0:	4b08      	ldr	r3, [pc, #32]	; (80086d4 <_sbrk+0x64>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80086b6:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <_sbrk+0x64>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4413      	add	r3, r2
 80086be:	4a05      	ldr	r2, [pc, #20]	; (80086d4 <_sbrk+0x64>)
 80086c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80086c2:	68fb      	ldr	r3, [r7, #12]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	2000c000 	.word	0x2000c000
 80086d0:	00000400 	.word	0x00000400
 80086d4:	2000039c 	.word	0x2000039c
 80086d8:	200004f0 	.word	0x200004f0

080086dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086e0:	bf00      	nop
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr

080086e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80086e8:	480c      	ldr	r0, [pc, #48]	; (800871c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80086ea:	490d      	ldr	r1, [pc, #52]	; (8008720 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80086ec:	4a0d      	ldr	r2, [pc, #52]	; (8008724 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80086ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086f0:	e002      	b.n	80086f8 <LoopCopyDataInit>

080086f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086f6:	3304      	adds	r3, #4

080086f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80086fc:	d3f9      	bcc.n	80086f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80086fe:	4a0a      	ldr	r2, [pc, #40]	; (8008728 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008700:	4c0a      	ldr	r4, [pc, #40]	; (800872c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008704:	e001      	b.n	800870a <LoopFillZerobss>

08008706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008708:	3204      	adds	r2, #4

0800870a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800870a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800870c:	d3fb      	bcc.n	8008706 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800870e:	f7ff ffe5 	bl	80086dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008712:	f003 ffe7 	bl	800c6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008716:	f7ff fb9d 	bl	8007e54 <main>
  bx lr
 800871a:	4770      	bx	lr
  ldr r0, =_sdata
 800871c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008720:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8008724:	0800de70 	.word	0x0800de70
  ldr r2, =_sbss
 8008728:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800872c:	200004ec 	.word	0x200004ec

08008730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008730:	e7fe      	b.n	8008730 <ADC1_2_IRQHandler>
	...

08008734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008738:	4b08      	ldr	r3, [pc, #32]	; (800875c <HAL_Init+0x28>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a07      	ldr	r2, [pc, #28]	; (800875c <HAL_Init+0x28>)
 800873e:	f043 0310 	orr.w	r3, r3, #16
 8008742:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008744:	2003      	movs	r0, #3
 8008746:	f000 fa43 	bl	8008bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800874a:	200f      	movs	r0, #15
 800874c:	f000 f808 	bl	8008760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008750:	f7ff fdfa 	bl	8008348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	40022000 	.word	0x40022000

08008760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008768:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <HAL_InitTick+0x54>)
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <HAL_InitTick+0x58>)
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	4619      	mov	r1, r3
 8008772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008776:	fbb3 f3f1 	udiv	r3, r3, r1
 800877a:	fbb2 f3f3 	udiv	r3, r2, r3
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fa5b 	bl	8008c3a <HAL_SYSTICK_Config>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e00e      	b.n	80087ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b0f      	cmp	r3, #15
 8008792:	d80a      	bhi.n	80087aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008794:	2200      	movs	r2, #0
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800879c:	f000 fa23 	bl	8008be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087a0:	4a06      	ldr	r2, [pc, #24]	; (80087bc <HAL_InitTick+0x5c>)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	e000      	b.n	80087ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	200000b4 	.word	0x200000b4
 80087b8:	200000bc 	.word	0x200000bc
 80087bc:	200000b8 	.word	0x200000b8

080087c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <HAL_IncTick+0x1c>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	461a      	mov	r2, r3
 80087ca:	4b05      	ldr	r3, [pc, #20]	; (80087e0 <HAL_IncTick+0x20>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4413      	add	r3, r2
 80087d0:	4a03      	ldr	r2, [pc, #12]	; (80087e0 <HAL_IncTick+0x20>)
 80087d2:	6013      	str	r3, [r2, #0]
}
 80087d4:	bf00      	nop
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr
 80087dc:	200000bc 	.word	0x200000bc
 80087e0:	200003a0 	.word	0x200003a0

080087e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087e4:	b480      	push	{r7}
 80087e6:	af00      	add	r7, sp, #0
  return uwTick;
 80087e8:	4b02      	ldr	r3, [pc, #8]	; (80087f4 <HAL_GetTick+0x10>)
 80087ea:	681b      	ldr	r3, [r3, #0]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bc80      	pop	{r7}
 80087f2:	4770      	bx	lr
 80087f4:	200003a0 	.word	0x200003a0

080087f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008800:	f7ff fff0 	bl	80087e4 <HAL_GetTick>
 8008804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008810:	d005      	beq.n	800881e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008812:	4b0a      	ldr	r3, [pc, #40]	; (800883c <HAL_Delay+0x44>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4413      	add	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800881e:	bf00      	nop
 8008820:	f7ff ffe0 	bl	80087e4 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	429a      	cmp	r2, r3
 800882e:	d8f7      	bhi.n	8008820 <HAL_Delay+0x28>
  {
  }
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	200000bc 	.word	0x200000bc

08008840 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e0ed      	b.n	8008a2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff fda4 	bl	80083ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0201 	orr.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008874:	f7ff ffb6 	bl	80087e4 <HAL_GetTick>
 8008878:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800887a:	e012      	b.n	80088a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800887c:	f7ff ffb2 	bl	80087e4 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	2b0a      	cmp	r3, #10
 8008888:	d90b      	bls.n	80088a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2205      	movs	r2, #5
 800889a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e0c5      	b.n	8008a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0e5      	beq.n	800887c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f022 0202 	bic.w	r2, r2, #2
 80088be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088c0:	f7ff ff90 	bl	80087e4 <HAL_GetTick>
 80088c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088c6:	e012      	b.n	80088ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088c8:	f7ff ff8c 	bl	80087e4 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b0a      	cmp	r3, #10
 80088d4:	d90b      	bls.n	80088ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2205      	movs	r2, #5
 80088e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e09f      	b.n	8008a2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e5      	bne.n	80088c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	7e1b      	ldrb	r3, [r3, #24]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d108      	bne.n	8008916 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	e007      	b.n	8008926 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008924:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	7e5b      	ldrb	r3, [r3, #25]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d108      	bne.n	8008940 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	e007      	b.n	8008950 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800894e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	7e9b      	ldrb	r3, [r3, #26]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d108      	bne.n	800896a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0220 	orr.w	r2, r2, #32
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	e007      	b.n	800897a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 0220 	bic.w	r2, r2, #32
 8008978:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7edb      	ldrb	r3, [r3, #27]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d108      	bne.n	8008994 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f022 0210 	bic.w	r2, r2, #16
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	e007      	b.n	80089a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0210 	orr.w	r2, r2, #16
 80089a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	7f1b      	ldrb	r3, [r3, #28]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d108      	bne.n	80089be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0208 	orr.w	r2, r2, #8
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	e007      	b.n	80089ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f022 0208 	bic.w	r2, r2, #8
 80089cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	7f5b      	ldrb	r3, [r3, #29]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d108      	bne.n	80089e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f042 0204 	orr.w	r2, r2, #4
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	e007      	b.n	80089f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f022 0204 	bic.w	r2, r2, #4
 80089f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689a      	ldr	r2, [r3, #8]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	431a      	orrs	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	ea42 0103 	orr.w	r1, r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	1e5a      	subs	r2, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <__NVIC_SetPriorityGrouping>:
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f003 0307 	and.w	r3, r3, #7
 8008a46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <__NVIC_SetPriorityGrouping+0x44>)
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a54:	4013      	ands	r3, r2
 8008a56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a6a:	4a04      	ldr	r2, [pc, #16]	; (8008a7c <__NVIC_SetPriorityGrouping+0x44>)
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	60d3      	str	r3, [r2, #12]
}
 8008a70:	bf00      	nop
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bc80      	pop	{r7}
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	e000ed00 	.word	0xe000ed00

08008a80 <__NVIC_GetPriorityGrouping>:
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a84:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <__NVIC_GetPriorityGrouping+0x18>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	0a1b      	lsrs	r3, r3, #8
 8008a8a:	f003 0307 	and.w	r3, r3, #7
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bc80      	pop	{r7}
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	e000ed00 	.word	0xe000ed00

08008a9c <__NVIC_EnableIRQ>:
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	db0b      	blt.n	8008ac6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	f003 021f 	and.w	r2, r3, #31
 8008ab4:	4906      	ldr	r1, [pc, #24]	; (8008ad0 <__NVIC_EnableIRQ+0x34>)
 8008ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aba:	095b      	lsrs	r3, r3, #5
 8008abc:	2001      	movs	r0, #1
 8008abe:	fa00 f202 	lsl.w	r2, r0, r2
 8008ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bc80      	pop	{r7}
 8008ace:	4770      	bx	lr
 8008ad0:	e000e100 	.word	0xe000e100

08008ad4 <__NVIC_SetPriority>:
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	6039      	str	r1, [r7, #0]
 8008ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	db0a      	blt.n	8008afe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	490c      	ldr	r1, [pc, #48]	; (8008b20 <__NVIC_SetPriority+0x4c>)
 8008aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008af2:	0112      	lsls	r2, r2, #4
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	440b      	add	r3, r1
 8008af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008afc:	e00a      	b.n	8008b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	4908      	ldr	r1, [pc, #32]	; (8008b24 <__NVIC_SetPriority+0x50>)
 8008b04:	79fb      	ldrb	r3, [r7, #7]
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	3b04      	subs	r3, #4
 8008b0c:	0112      	lsls	r2, r2, #4
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	440b      	add	r3, r1
 8008b12:	761a      	strb	r2, [r3, #24]
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	e000e100 	.word	0xe000e100
 8008b24:	e000ed00 	.word	0xe000ed00

08008b28 <NVIC_EncodePriority>:
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b089      	sub	sp, #36	; 0x24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	f1c3 0307 	rsb	r3, r3, #7
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	bf28      	it	cs
 8008b46:	2304      	movcs	r3, #4
 8008b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	2b06      	cmp	r3, #6
 8008b50:	d902      	bls.n	8008b58 <NVIC_EncodePriority+0x30>
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	3b03      	subs	r3, #3
 8008b56:	e000      	b.n	8008b5a <NVIC_EncodePriority+0x32>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	fa02 f303 	lsl.w	r3, r2, r3
 8008b66:	43da      	mvns	r2, r3
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	401a      	ands	r2, r3
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7a:	43d9      	mvns	r1, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b80:	4313      	orrs	r3, r2
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3724      	adds	r7, #36	; 0x24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr

08008b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b9c:	d301      	bcc.n	8008ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e00f      	b.n	8008bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ba2:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <SysTick_Config+0x40>)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008baa:	210f      	movs	r1, #15
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bb0:	f7ff ff90 	bl	8008ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008bb4:	4b05      	ldr	r3, [pc, #20]	; (8008bcc <SysTick_Config+0x40>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008bba:	4b04      	ldr	r3, [pc, #16]	; (8008bcc <SysTick_Config+0x40>)
 8008bbc:	2207      	movs	r2, #7
 8008bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	e000e010 	.word	0xe000e010

08008bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff ff2d 	bl	8008a38 <__NVIC_SetPriorityGrouping>
}
 8008bde:	bf00      	nop
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b086      	sub	sp, #24
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	4603      	mov	r3, r0
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
 8008bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bf8:	f7ff ff42 	bl	8008a80 <__NVIC_GetPriorityGrouping>
 8008bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	6978      	ldr	r0, [r7, #20]
 8008c04:	f7ff ff90 	bl	8008b28 <NVIC_EncodePriority>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff ff5f 	bl	8008ad4 <__NVIC_SetPriority>
}
 8008c16:	bf00      	nop
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	4603      	mov	r3, r0
 8008c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff ff35 	bl	8008a9c <__NVIC_EnableIRQ>
}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff ffa2 	bl	8008b8c <SysTick_Config>
 8008c48:	4603      	mov	r3, r0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b085      	sub	sp, #20
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d008      	beq.n	8008c7c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e020      	b.n	8008cbe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 020e 	bic.w	r2, r2, #14
 8008c8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8008caa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bc80      	pop	{r7}
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d005      	beq.n	8008cec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2204      	movs	r2, #4
 8008ce4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	73fb      	strb	r3, [r7, #15]
 8008cea:	e0d6      	b.n	8008e9a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 020e 	bic.w	r2, r2, #14
 8008cfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0201 	bic.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	4b64      	ldr	r3, [pc, #400]	; (8008ea4 <HAL_DMA_Abort_IT+0x1dc>)
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d958      	bls.n	8008dca <HAL_DMA_Abort_IT+0x102>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a62      	ldr	r2, [pc, #392]	; (8008ea8 <HAL_DMA_Abort_IT+0x1e0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d04f      	beq.n	8008dc2 <HAL_DMA_Abort_IT+0xfa>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a61      	ldr	r2, [pc, #388]	; (8008eac <HAL_DMA_Abort_IT+0x1e4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d048      	beq.n	8008dbe <HAL_DMA_Abort_IT+0xf6>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a5f      	ldr	r2, [pc, #380]	; (8008eb0 <HAL_DMA_Abort_IT+0x1e8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d040      	beq.n	8008db8 <HAL_DMA_Abort_IT+0xf0>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a5e      	ldr	r2, [pc, #376]	; (8008eb4 <HAL_DMA_Abort_IT+0x1ec>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d038      	beq.n	8008db2 <HAL_DMA_Abort_IT+0xea>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a5c      	ldr	r2, [pc, #368]	; (8008eb8 <HAL_DMA_Abort_IT+0x1f0>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d030      	beq.n	8008dac <HAL_DMA_Abort_IT+0xe4>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a5b      	ldr	r2, [pc, #364]	; (8008ebc <HAL_DMA_Abort_IT+0x1f4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d028      	beq.n	8008da6 <HAL_DMA_Abort_IT+0xde>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a52      	ldr	r2, [pc, #328]	; (8008ea4 <HAL_DMA_Abort_IT+0x1dc>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d020      	beq.n	8008da0 <HAL_DMA_Abort_IT+0xd8>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a57      	ldr	r2, [pc, #348]	; (8008ec0 <HAL_DMA_Abort_IT+0x1f8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d019      	beq.n	8008d9c <HAL_DMA_Abort_IT+0xd4>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a55      	ldr	r2, [pc, #340]	; (8008ec4 <HAL_DMA_Abort_IT+0x1fc>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d012      	beq.n	8008d98 <HAL_DMA_Abort_IT+0xd0>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a54      	ldr	r2, [pc, #336]	; (8008ec8 <HAL_DMA_Abort_IT+0x200>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d00a      	beq.n	8008d92 <HAL_DMA_Abort_IT+0xca>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a52      	ldr	r2, [pc, #328]	; (8008ecc <HAL_DMA_Abort_IT+0x204>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d102      	bne.n	8008d8c <HAL_DMA_Abort_IT+0xc4>
 8008d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d8a:	e01b      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d90:	e018      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d96:	e015      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008d98:	2310      	movs	r3, #16
 8008d9a:	e013      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e011      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008da4:	e00e      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008da6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008daa:	e00b      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008db0:	e008      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db6:	e005      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dbc:	e002      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008dbe:	2310      	movs	r3, #16
 8008dc0:	e000      	b.n	8008dc4 <HAL_DMA_Abort_IT+0xfc>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	4a42      	ldr	r2, [pc, #264]	; (8008ed0 <HAL_DMA_Abort_IT+0x208>)
 8008dc6:	6053      	str	r3, [r2, #4]
 8008dc8:	e057      	b.n	8008e7a <HAL_DMA_Abort_IT+0x1b2>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a36      	ldr	r2, [pc, #216]	; (8008ea8 <HAL_DMA_Abort_IT+0x1e0>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d04f      	beq.n	8008e74 <HAL_DMA_Abort_IT+0x1ac>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a34      	ldr	r2, [pc, #208]	; (8008eac <HAL_DMA_Abort_IT+0x1e4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d048      	beq.n	8008e70 <HAL_DMA_Abort_IT+0x1a8>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a33      	ldr	r2, [pc, #204]	; (8008eb0 <HAL_DMA_Abort_IT+0x1e8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d040      	beq.n	8008e6a <HAL_DMA_Abort_IT+0x1a2>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a31      	ldr	r2, [pc, #196]	; (8008eb4 <HAL_DMA_Abort_IT+0x1ec>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d038      	beq.n	8008e64 <HAL_DMA_Abort_IT+0x19c>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a30      	ldr	r2, [pc, #192]	; (8008eb8 <HAL_DMA_Abort_IT+0x1f0>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d030      	beq.n	8008e5e <HAL_DMA_Abort_IT+0x196>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a2e      	ldr	r2, [pc, #184]	; (8008ebc <HAL_DMA_Abort_IT+0x1f4>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d028      	beq.n	8008e58 <HAL_DMA_Abort_IT+0x190>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a26      	ldr	r2, [pc, #152]	; (8008ea4 <HAL_DMA_Abort_IT+0x1dc>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d020      	beq.n	8008e52 <HAL_DMA_Abort_IT+0x18a>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a2a      	ldr	r2, [pc, #168]	; (8008ec0 <HAL_DMA_Abort_IT+0x1f8>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d019      	beq.n	8008e4e <HAL_DMA_Abort_IT+0x186>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a29      	ldr	r2, [pc, #164]	; (8008ec4 <HAL_DMA_Abort_IT+0x1fc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d012      	beq.n	8008e4a <HAL_DMA_Abort_IT+0x182>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a27      	ldr	r2, [pc, #156]	; (8008ec8 <HAL_DMA_Abort_IT+0x200>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00a      	beq.n	8008e44 <HAL_DMA_Abort_IT+0x17c>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a26      	ldr	r2, [pc, #152]	; (8008ecc <HAL_DMA_Abort_IT+0x204>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d102      	bne.n	8008e3e <HAL_DMA_Abort_IT+0x176>
 8008e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e3c:	e01b      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e42:	e018      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e48:	e015      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e4a:	2310      	movs	r3, #16
 8008e4c:	e013      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e011      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e56:	e00e      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e5c:	e00b      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e62:	e008      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e68:	e005      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e6e:	e002      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e70:	2310      	movs	r3, #16
 8008e72:	e000      	b.n	8008e76 <HAL_DMA_Abort_IT+0x1ae>
 8008e74:	2301      	movs	r3, #1
 8008e76:	4a17      	ldr	r2, [pc, #92]	; (8008ed4 <HAL_DMA_Abort_IT+0x20c>)
 8008e78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
    } 
  }
  return status;
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40020080 	.word	0x40020080
 8008ea8:	40020008 	.word	0x40020008
 8008eac:	4002001c 	.word	0x4002001c
 8008eb0:	40020030 	.word	0x40020030
 8008eb4:	40020044 	.word	0x40020044
 8008eb8:	40020058 	.word	0x40020058
 8008ebc:	4002006c 	.word	0x4002006c
 8008ec0:	40020408 	.word	0x40020408
 8008ec4:	4002041c 	.word	0x4002041c
 8008ec8:	40020430 	.word	0x40020430
 8008ecc:	40020444 	.word	0x40020444
 8008ed0:	40020400 	.word	0x40020400
 8008ed4:	40020000 	.word	0x40020000

08008ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b08b      	sub	sp, #44	; 0x2c
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008eea:	e179      	b.n	80091e0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008eec:	2201      	movs	r2, #1
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	69fa      	ldr	r2, [r7, #28]
 8008efc:	4013      	ands	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	f040 8168 	bne.w	80091da <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	4a96      	ldr	r2, [pc, #600]	; (8009168 <HAL_GPIO_Init+0x290>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d05e      	beq.n	8008fd2 <HAL_GPIO_Init+0xfa>
 8008f14:	4a94      	ldr	r2, [pc, #592]	; (8009168 <HAL_GPIO_Init+0x290>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d875      	bhi.n	8009006 <HAL_GPIO_Init+0x12e>
 8008f1a:	4a94      	ldr	r2, [pc, #592]	; (800916c <HAL_GPIO_Init+0x294>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d058      	beq.n	8008fd2 <HAL_GPIO_Init+0xfa>
 8008f20:	4a92      	ldr	r2, [pc, #584]	; (800916c <HAL_GPIO_Init+0x294>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d86f      	bhi.n	8009006 <HAL_GPIO_Init+0x12e>
 8008f26:	4a92      	ldr	r2, [pc, #584]	; (8009170 <HAL_GPIO_Init+0x298>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d052      	beq.n	8008fd2 <HAL_GPIO_Init+0xfa>
 8008f2c:	4a90      	ldr	r2, [pc, #576]	; (8009170 <HAL_GPIO_Init+0x298>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d869      	bhi.n	8009006 <HAL_GPIO_Init+0x12e>
 8008f32:	4a90      	ldr	r2, [pc, #576]	; (8009174 <HAL_GPIO_Init+0x29c>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d04c      	beq.n	8008fd2 <HAL_GPIO_Init+0xfa>
 8008f38:	4a8e      	ldr	r2, [pc, #568]	; (8009174 <HAL_GPIO_Init+0x29c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d863      	bhi.n	8009006 <HAL_GPIO_Init+0x12e>
 8008f3e:	4a8e      	ldr	r2, [pc, #568]	; (8009178 <HAL_GPIO_Init+0x2a0>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d046      	beq.n	8008fd2 <HAL_GPIO_Init+0xfa>
 8008f44:	4a8c      	ldr	r2, [pc, #560]	; (8009178 <HAL_GPIO_Init+0x2a0>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d85d      	bhi.n	8009006 <HAL_GPIO_Init+0x12e>
 8008f4a:	2b12      	cmp	r3, #18
 8008f4c:	d82a      	bhi.n	8008fa4 <HAL_GPIO_Init+0xcc>
 8008f4e:	2b12      	cmp	r3, #18
 8008f50:	d859      	bhi.n	8009006 <HAL_GPIO_Init+0x12e>
 8008f52:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <HAL_GPIO_Init+0x80>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08008fd3 	.word	0x08008fd3
 8008f5c:	08008fad 	.word	0x08008fad
 8008f60:	08008fbf 	.word	0x08008fbf
 8008f64:	08009001 	.word	0x08009001
 8008f68:	08009007 	.word	0x08009007
 8008f6c:	08009007 	.word	0x08009007
 8008f70:	08009007 	.word	0x08009007
 8008f74:	08009007 	.word	0x08009007
 8008f78:	08009007 	.word	0x08009007
 8008f7c:	08009007 	.word	0x08009007
 8008f80:	08009007 	.word	0x08009007
 8008f84:	08009007 	.word	0x08009007
 8008f88:	08009007 	.word	0x08009007
 8008f8c:	08009007 	.word	0x08009007
 8008f90:	08009007 	.word	0x08009007
 8008f94:	08009007 	.word	0x08009007
 8008f98:	08009007 	.word	0x08009007
 8008f9c:	08008fb5 	.word	0x08008fb5
 8008fa0:	08008fc9 	.word	0x08008fc9
 8008fa4:	4a75      	ldr	r2, [pc, #468]	; (800917c <HAL_GPIO_Init+0x2a4>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d013      	beq.n	8008fd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008faa:	e02c      	b.n	8009006 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	623b      	str	r3, [r7, #32]
          break;
 8008fb2:	e029      	b.n	8009008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	623b      	str	r3, [r7, #32]
          break;
 8008fbc:	e024      	b.n	8009008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	623b      	str	r3, [r7, #32]
          break;
 8008fc6:	e01f      	b.n	8009008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	330c      	adds	r3, #12
 8008fce:	623b      	str	r3, [r7, #32]
          break;
 8008fd0:	e01a      	b.n	8009008 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008fda:	2304      	movs	r3, #4
 8008fdc:	623b      	str	r3, [r7, #32]
          break;
 8008fde:	e013      	b.n	8009008 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d105      	bne.n	8008ff4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008fe8:	2308      	movs	r3, #8
 8008fea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	611a      	str	r2, [r3, #16]
          break;
 8008ff2:	e009      	b.n	8009008 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008ff4:	2308      	movs	r3, #8
 8008ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	615a      	str	r2, [r3, #20]
          break;
 8008ffe:	e003      	b.n	8009008 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009000:	2300      	movs	r3, #0
 8009002:	623b      	str	r3, [r7, #32]
          break;
 8009004:	e000      	b.n	8009008 <HAL_GPIO_Init+0x130>
          break;
 8009006:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	2bff      	cmp	r3, #255	; 0xff
 800900c:	d801      	bhi.n	8009012 <HAL_GPIO_Init+0x13a>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	e001      	b.n	8009016 <HAL_GPIO_Init+0x13e>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3304      	adds	r3, #4
 8009016:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	2bff      	cmp	r3, #255	; 0xff
 800901c:	d802      	bhi.n	8009024 <HAL_GPIO_Init+0x14c>
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	e002      	b.n	800902a <HAL_GPIO_Init+0x152>
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	3b08      	subs	r3, #8
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	210f      	movs	r1, #15
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	fa01 f303 	lsl.w	r3, r1, r3
 8009038:	43db      	mvns	r3, r3
 800903a:	401a      	ands	r2, r3
 800903c:	6a39      	ldr	r1, [r7, #32]
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	fa01 f303 	lsl.w	r3, r1, r3
 8009044:	431a      	orrs	r2, r3
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 80c1 	beq.w	80091da <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009058:	4b49      	ldr	r3, [pc, #292]	; (8009180 <HAL_GPIO_Init+0x2a8>)
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	4a48      	ldr	r2, [pc, #288]	; (8009180 <HAL_GPIO_Init+0x2a8>)
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	6193      	str	r3, [r2, #24]
 8009064:	4b46      	ldr	r3, [pc, #280]	; (8009180 <HAL_GPIO_Init+0x2a8>)
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	60bb      	str	r3, [r7, #8]
 800906e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009070:	4a44      	ldr	r2, [pc, #272]	; (8009184 <HAL_GPIO_Init+0x2ac>)
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	089b      	lsrs	r3, r3, #2
 8009076:	3302      	adds	r3, #2
 8009078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800907c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	f003 0303 	and.w	r3, r3, #3
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	220f      	movs	r2, #15
 8009088:	fa02 f303 	lsl.w	r3, r2, r3
 800908c:	43db      	mvns	r3, r3
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4013      	ands	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a3c      	ldr	r2, [pc, #240]	; (8009188 <HAL_GPIO_Init+0x2b0>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d01f      	beq.n	80090dc <HAL_GPIO_Init+0x204>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a3b      	ldr	r2, [pc, #236]	; (800918c <HAL_GPIO_Init+0x2b4>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d019      	beq.n	80090d8 <HAL_GPIO_Init+0x200>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a3a      	ldr	r2, [pc, #232]	; (8009190 <HAL_GPIO_Init+0x2b8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d013      	beq.n	80090d4 <HAL_GPIO_Init+0x1fc>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a39      	ldr	r2, [pc, #228]	; (8009194 <HAL_GPIO_Init+0x2bc>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00d      	beq.n	80090d0 <HAL_GPIO_Init+0x1f8>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a38      	ldr	r2, [pc, #224]	; (8009198 <HAL_GPIO_Init+0x2c0>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d007      	beq.n	80090cc <HAL_GPIO_Init+0x1f4>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a37      	ldr	r2, [pc, #220]	; (800919c <HAL_GPIO_Init+0x2c4>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d101      	bne.n	80090c8 <HAL_GPIO_Init+0x1f0>
 80090c4:	2305      	movs	r3, #5
 80090c6:	e00a      	b.n	80090de <HAL_GPIO_Init+0x206>
 80090c8:	2306      	movs	r3, #6
 80090ca:	e008      	b.n	80090de <HAL_GPIO_Init+0x206>
 80090cc:	2304      	movs	r3, #4
 80090ce:	e006      	b.n	80090de <HAL_GPIO_Init+0x206>
 80090d0:	2303      	movs	r3, #3
 80090d2:	e004      	b.n	80090de <HAL_GPIO_Init+0x206>
 80090d4:	2302      	movs	r3, #2
 80090d6:	e002      	b.n	80090de <HAL_GPIO_Init+0x206>
 80090d8:	2301      	movs	r3, #1
 80090da:	e000      	b.n	80090de <HAL_GPIO_Init+0x206>
 80090dc:	2300      	movs	r3, #0
 80090de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e0:	f002 0203 	and.w	r2, r2, #3
 80090e4:	0092      	lsls	r2, r2, #2
 80090e6:	4093      	lsls	r3, r2
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80090ee:	4925      	ldr	r1, [pc, #148]	; (8009184 <HAL_GPIO_Init+0x2ac>)
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	089b      	lsrs	r3, r3, #2
 80090f4:	3302      	adds	r3, #2
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d006      	beq.n	8009116 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009108:	4b25      	ldr	r3, [pc, #148]	; (80091a0 <HAL_GPIO_Init+0x2c8>)
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	4924      	ldr	r1, [pc, #144]	; (80091a0 <HAL_GPIO_Init+0x2c8>)
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	4313      	orrs	r3, r2
 8009112:	608b      	str	r3, [r1, #8]
 8009114:	e006      	b.n	8009124 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009116:	4b22      	ldr	r3, [pc, #136]	; (80091a0 <HAL_GPIO_Init+0x2c8>)
 8009118:	689a      	ldr	r2, [r3, #8]
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	43db      	mvns	r3, r3
 800911e:	4920      	ldr	r1, [pc, #128]	; (80091a0 <HAL_GPIO_Init+0x2c8>)
 8009120:	4013      	ands	r3, r2
 8009122:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d006      	beq.n	800913e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009130:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <HAL_GPIO_Init+0x2c8>)
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	491a      	ldr	r1, [pc, #104]	; (80091a0 <HAL_GPIO_Init+0x2c8>)
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	4313      	orrs	r3, r2
 800913a:	60cb      	str	r3, [r1, #12]
 800913c:	e006      	b.n	800914c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800913e:	4b18      	ldr	r3, [pc, #96]	; (80091a0 <HAL_GPIO_Init+0x2c8>)
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	43db      	mvns	r3, r3
 8009146:	4916      	ldr	r1, [pc, #88]	; (80091a0 <HAL_GPIO_Init+0x2c8>)
 8009148:	4013      	ands	r3, r2
 800914a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d025      	beq.n	80091a4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009158:	4b11      	ldr	r3, [pc, #68]	; (80091a0 <HAL_GPIO_Init+0x2c8>)
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	4910      	ldr	r1, [pc, #64]	; (80091a0 <HAL_GPIO_Init+0x2c8>)
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	4313      	orrs	r3, r2
 8009162:	604b      	str	r3, [r1, #4]
 8009164:	e025      	b.n	80091b2 <HAL_GPIO_Init+0x2da>
 8009166:	bf00      	nop
 8009168:	10320000 	.word	0x10320000
 800916c:	10310000 	.word	0x10310000
 8009170:	10220000 	.word	0x10220000
 8009174:	10210000 	.word	0x10210000
 8009178:	10120000 	.word	0x10120000
 800917c:	10110000 	.word	0x10110000
 8009180:	40021000 	.word	0x40021000
 8009184:	40010000 	.word	0x40010000
 8009188:	40010800 	.word	0x40010800
 800918c:	40010c00 	.word	0x40010c00
 8009190:	40011000 	.word	0x40011000
 8009194:	40011400 	.word	0x40011400
 8009198:	40011800 	.word	0x40011800
 800919c:	40011c00 	.word	0x40011c00
 80091a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80091a4:	4b15      	ldr	r3, [pc, #84]	; (80091fc <HAL_GPIO_Init+0x324>)
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	43db      	mvns	r3, r3
 80091ac:	4913      	ldr	r1, [pc, #76]	; (80091fc <HAL_GPIO_Init+0x324>)
 80091ae:	4013      	ands	r3, r2
 80091b0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d006      	beq.n	80091cc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80091be:	4b0f      	ldr	r3, [pc, #60]	; (80091fc <HAL_GPIO_Init+0x324>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	490e      	ldr	r1, [pc, #56]	; (80091fc <HAL_GPIO_Init+0x324>)
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	600b      	str	r3, [r1, #0]
 80091ca:	e006      	b.n	80091da <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80091cc:	4b0b      	ldr	r3, [pc, #44]	; (80091fc <HAL_GPIO_Init+0x324>)
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	43db      	mvns	r3, r3
 80091d4:	4909      	ldr	r1, [pc, #36]	; (80091fc <HAL_GPIO_Init+0x324>)
 80091d6:	4013      	ands	r3, r2
 80091d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	3301      	adds	r3, #1
 80091de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f47f ae7e 	bne.w	8008eec <HAL_GPIO_Init+0x14>
  }
}
 80091f0:	bf00      	nop
 80091f2:	bf00      	nop
 80091f4:	372c      	adds	r7, #44	; 0x2c
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bc80      	pop	{r7}
 80091fa:	4770      	bx	lr
 80091fc:	40010400 	.word	0x40010400

08009200 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009200:	b480      	push	{r7}
 8009202:	b089      	sub	sp, #36	; 0x24
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800920a:	2300      	movs	r3, #0
 800920c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800920e:	e0a6      	b.n	800935e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009210:	2201      	movs	r2, #1
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	fa02 f303 	lsl.w	r3, r2, r3
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	4013      	ands	r3, r2
 800921c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 8099 	beq.w	8009358 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009226:	4a54      	ldr	r2, [pc, #336]	; (8009378 <HAL_GPIO_DeInit+0x178>)
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	089b      	lsrs	r3, r3, #2
 800922c:	3302      	adds	r3, #2
 800922e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009232:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	f003 0303 	and.w	r3, r3, #3
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	220f      	movs	r2, #15
 800923e:	fa02 f303 	lsl.w	r3, r2, r3
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4013      	ands	r3, r2
 8009246:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a4c      	ldr	r2, [pc, #304]	; (800937c <HAL_GPIO_DeInit+0x17c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d01f      	beq.n	8009290 <HAL_GPIO_DeInit+0x90>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a4b      	ldr	r2, [pc, #300]	; (8009380 <HAL_GPIO_DeInit+0x180>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d019      	beq.n	800928c <HAL_GPIO_DeInit+0x8c>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a4a      	ldr	r2, [pc, #296]	; (8009384 <HAL_GPIO_DeInit+0x184>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d013      	beq.n	8009288 <HAL_GPIO_DeInit+0x88>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a49      	ldr	r2, [pc, #292]	; (8009388 <HAL_GPIO_DeInit+0x188>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00d      	beq.n	8009284 <HAL_GPIO_DeInit+0x84>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a48      	ldr	r2, [pc, #288]	; (800938c <HAL_GPIO_DeInit+0x18c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d007      	beq.n	8009280 <HAL_GPIO_DeInit+0x80>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a47      	ldr	r2, [pc, #284]	; (8009390 <HAL_GPIO_DeInit+0x190>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d101      	bne.n	800927c <HAL_GPIO_DeInit+0x7c>
 8009278:	2305      	movs	r3, #5
 800927a:	e00a      	b.n	8009292 <HAL_GPIO_DeInit+0x92>
 800927c:	2306      	movs	r3, #6
 800927e:	e008      	b.n	8009292 <HAL_GPIO_DeInit+0x92>
 8009280:	2304      	movs	r3, #4
 8009282:	e006      	b.n	8009292 <HAL_GPIO_DeInit+0x92>
 8009284:	2303      	movs	r3, #3
 8009286:	e004      	b.n	8009292 <HAL_GPIO_DeInit+0x92>
 8009288:	2302      	movs	r3, #2
 800928a:	e002      	b.n	8009292 <HAL_GPIO_DeInit+0x92>
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <HAL_GPIO_DeInit+0x92>
 8009290:	2300      	movs	r3, #0
 8009292:	69fa      	ldr	r2, [r7, #28]
 8009294:	f002 0203 	and.w	r2, r2, #3
 8009298:	0092      	lsls	r2, r2, #2
 800929a:	4093      	lsls	r3, r2
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d132      	bne.n	8009308 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80092a2:	4b3c      	ldr	r3, [pc, #240]	; (8009394 <HAL_GPIO_DeInit+0x194>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	43db      	mvns	r3, r3
 80092aa:	493a      	ldr	r1, [pc, #232]	; (8009394 <HAL_GPIO_DeInit+0x194>)
 80092ac:	4013      	ands	r3, r2
 80092ae:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80092b0:	4b38      	ldr	r3, [pc, #224]	; (8009394 <HAL_GPIO_DeInit+0x194>)
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	43db      	mvns	r3, r3
 80092b8:	4936      	ldr	r1, [pc, #216]	; (8009394 <HAL_GPIO_DeInit+0x194>)
 80092ba:	4013      	ands	r3, r2
 80092bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80092be:	4b35      	ldr	r3, [pc, #212]	; (8009394 <HAL_GPIO_DeInit+0x194>)
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	43db      	mvns	r3, r3
 80092c6:	4933      	ldr	r1, [pc, #204]	; (8009394 <HAL_GPIO_DeInit+0x194>)
 80092c8:	4013      	ands	r3, r2
 80092ca:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80092cc:	4b31      	ldr	r3, [pc, #196]	; (8009394 <HAL_GPIO_DeInit+0x194>)
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	43db      	mvns	r3, r3
 80092d4:	492f      	ldr	r1, [pc, #188]	; (8009394 <HAL_GPIO_DeInit+0x194>)
 80092d6:	4013      	ands	r3, r2
 80092d8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	f003 0303 	and.w	r3, r3, #3
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	220f      	movs	r2, #15
 80092e4:	fa02 f303 	lsl.w	r3, r2, r3
 80092e8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80092ea:	4a23      	ldr	r2, [pc, #140]	; (8009378 <HAL_GPIO_DeInit+0x178>)
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	089b      	lsrs	r3, r3, #2
 80092f0:	3302      	adds	r3, #2
 80092f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	43da      	mvns	r2, r3
 80092fa:	481f      	ldr	r0, [pc, #124]	; (8009378 <HAL_GPIO_DeInit+0x178>)
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	089b      	lsrs	r3, r3, #2
 8009300:	400a      	ands	r2, r1
 8009302:	3302      	adds	r3, #2
 8009304:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	2bff      	cmp	r3, #255	; 0xff
 800930c:	d801      	bhi.n	8009312 <HAL_GPIO_DeInit+0x112>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	e001      	b.n	8009316 <HAL_GPIO_DeInit+0x116>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3304      	adds	r3, #4
 8009316:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	2bff      	cmp	r3, #255	; 0xff
 800931c:	d802      	bhi.n	8009324 <HAL_GPIO_DeInit+0x124>
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	e002      	b.n	800932a <HAL_GPIO_DeInit+0x12a>
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	3b08      	subs	r3, #8
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	210f      	movs	r1, #15
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	fa01 f303 	lsl.w	r3, r1, r3
 8009338:	43db      	mvns	r3, r3
 800933a:	401a      	ands	r2, r3
 800933c:	2104      	movs	r1, #4
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	fa01 f303 	lsl.w	r3, r1, r3
 8009344:	431a      	orrs	r2, r3
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68da      	ldr	r2, [r3, #12]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	43db      	mvns	r3, r3
 8009352:	401a      	ands	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	3301      	adds	r3, #1
 800935c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	fa22 f303 	lsr.w	r3, r2, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	f47f af52 	bne.w	8009210 <HAL_GPIO_DeInit+0x10>
  }
}
 800936c:	bf00      	nop
 800936e:	bf00      	nop
 8009370:	3724      	adds	r7, #36	; 0x24
 8009372:	46bd      	mov	sp, r7
 8009374:	bc80      	pop	{r7}
 8009376:	4770      	bx	lr
 8009378:	40010000 	.word	0x40010000
 800937c:	40010800 	.word	0x40010800
 8009380:	40010c00 	.word	0x40010c00
 8009384:	40011000 	.word	0x40011000
 8009388:	40011400 	.word	0x40011400
 800938c:	40011800 	.word	0x40011800
 8009390:	40011c00 	.word	0x40011c00
 8009394:	40010400 	.word	0x40010400

08009398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	887b      	ldrh	r3, [r7, #2]
 80093aa:	4013      	ands	r3, r2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80093b0:	2301      	movs	r3, #1
 80093b2:	73fb      	strb	r3, [r7, #15]
 80093b4:	e001      	b.n	80093ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bc80      	pop	{r7}
 80093c4:	4770      	bx	lr

080093c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	807b      	strh	r3, [r7, #2]
 80093d2:	4613      	mov	r3, r2
 80093d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093d6:	787b      	ldrb	r3, [r7, #1]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093dc:	887a      	ldrh	r2, [r7, #2]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80093e2:	e003      	b.n	80093ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80093e4:	887b      	ldrh	r3, [r7, #2]
 80093e6:	041a      	lsls	r2, r3, #16
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	611a      	str	r2, [r3, #16]
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bc80      	pop	{r7}
 80093f4:	4770      	bx	lr

080093f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b085      	sub	sp, #20
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	460b      	mov	r3, r1
 8009400:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009408:	887a      	ldrh	r2, [r7, #2]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4013      	ands	r3, r2
 800940e:	041a      	lsls	r2, r3, #16
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	43d9      	mvns	r1, r3
 8009414:	887b      	ldrh	r3, [r7, #2]
 8009416:	400b      	ands	r3, r1
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	611a      	str	r2, [r3, #16]
}
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	bc80      	pop	{r7}
 8009426:	4770      	bx	lr

08009428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e12b      	b.n	8009692 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d106      	bne.n	8009454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fe fff8 	bl	8008444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2224      	movs	r2, #36	; 0x24
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0201 	bic.w	r2, r2, #1
 800946a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800947a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800948a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800948c:	f001 fdb8 	bl	800b000 <HAL_RCC_GetPCLK1Freq>
 8009490:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	4a81      	ldr	r2, [pc, #516]	; (800969c <HAL_I2C_Init+0x274>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d807      	bhi.n	80094ac <HAL_I2C_Init+0x84>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	4a80      	ldr	r2, [pc, #512]	; (80096a0 <HAL_I2C_Init+0x278>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	bf94      	ite	ls
 80094a4:	2301      	movls	r3, #1
 80094a6:	2300      	movhi	r3, #0
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	e006      	b.n	80094ba <HAL_I2C_Init+0x92>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4a7d      	ldr	r2, [pc, #500]	; (80096a4 <HAL_I2C_Init+0x27c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	bf94      	ite	ls
 80094b4:	2301      	movls	r3, #1
 80094b6:	2300      	movhi	r3, #0
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e0e7      	b.n	8009692 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	4a78      	ldr	r2, [pc, #480]	; (80096a8 <HAL_I2C_Init+0x280>)
 80094c6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ca:	0c9b      	lsrs	r3, r3, #18
 80094cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	430a      	orrs	r2, r1
 80094e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	4a6a      	ldr	r2, [pc, #424]	; (800969c <HAL_I2C_Init+0x274>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d802      	bhi.n	80094fc <HAL_I2C_Init+0xd4>
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	3301      	adds	r3, #1
 80094fa:	e009      	b.n	8009510 <HAL_I2C_Init+0xe8>
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009502:	fb02 f303 	mul.w	r3, r2, r3
 8009506:	4a69      	ldr	r2, [pc, #420]	; (80096ac <HAL_I2C_Init+0x284>)
 8009508:	fba2 2303 	umull	r2, r3, r2, r3
 800950c:	099b      	lsrs	r3, r3, #6
 800950e:	3301      	adds	r3, #1
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	430b      	orrs	r3, r1
 8009516:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009522:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	495c      	ldr	r1, [pc, #368]	; (800969c <HAL_I2C_Init+0x274>)
 800952c:	428b      	cmp	r3, r1
 800952e:	d819      	bhi.n	8009564 <HAL_I2C_Init+0x13c>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	1e59      	subs	r1, r3, #1
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	005b      	lsls	r3, r3, #1
 800953a:	fbb1 f3f3 	udiv	r3, r1, r3
 800953e:	1c59      	adds	r1, r3, #1
 8009540:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009544:	400b      	ands	r3, r1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00a      	beq.n	8009560 <HAL_I2C_Init+0x138>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	1e59      	subs	r1, r3, #1
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	fbb1 f3f3 	udiv	r3, r1, r3
 8009558:	3301      	adds	r3, #1
 800955a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800955e:	e051      	b.n	8009604 <HAL_I2C_Init+0x1dc>
 8009560:	2304      	movs	r3, #4
 8009562:	e04f      	b.n	8009604 <HAL_I2C_Init+0x1dc>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d111      	bne.n	8009590 <HAL_I2C_Init+0x168>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	1e58      	subs	r0, r3, #1
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6859      	ldr	r1, [r3, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	440b      	add	r3, r1
 800957a:	fbb0 f3f3 	udiv	r3, r0, r3
 800957e:	3301      	adds	r3, #1
 8009580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009584:	2b00      	cmp	r3, #0
 8009586:	bf0c      	ite	eq
 8009588:	2301      	moveq	r3, #1
 800958a:	2300      	movne	r3, #0
 800958c:	b2db      	uxtb	r3, r3
 800958e:	e012      	b.n	80095b6 <HAL_I2C_Init+0x18e>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	1e58      	subs	r0, r3, #1
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6859      	ldr	r1, [r3, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	440b      	add	r3, r1
 800959e:	0099      	lsls	r1, r3, #2
 80095a0:	440b      	add	r3, r1
 80095a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80095a6:	3301      	adds	r3, #1
 80095a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	bf0c      	ite	eq
 80095b0:	2301      	moveq	r3, #1
 80095b2:	2300      	movne	r3, #0
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <HAL_I2C_Init+0x196>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e022      	b.n	8009604 <HAL_I2C_Init+0x1dc>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10e      	bne.n	80095e4 <HAL_I2C_Init+0x1bc>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	1e58      	subs	r0, r3, #1
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6859      	ldr	r1, [r3, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	440b      	add	r3, r1
 80095d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80095d8:	3301      	adds	r3, #1
 80095da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095e2:	e00f      	b.n	8009604 <HAL_I2C_Init+0x1dc>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	1e58      	subs	r0, r3, #1
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6859      	ldr	r1, [r3, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	440b      	add	r3, r1
 80095f2:	0099      	lsls	r1, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80095fa:	3301      	adds	r3, #1
 80095fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	6809      	ldr	r1, [r1, #0]
 8009608:	4313      	orrs	r3, r2
 800960a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69da      	ldr	r2, [r3, #28]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	431a      	orrs	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	430a      	orrs	r2, r1
 8009626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	6911      	ldr	r1, [r2, #16]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	68d2      	ldr	r2, [r2, #12]
 800963e:	4311      	orrs	r1, r2
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	6812      	ldr	r2, [r2, #0]
 8009644:	430b      	orrs	r3, r1
 8009646:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	695a      	ldr	r2, [r3, #20]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	431a      	orrs	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0201 	orr.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2220      	movs	r2, #32
 800967e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	000186a0 	.word	0x000186a0
 80096a0:	001e847f 	.word	0x001e847f
 80096a4:	003d08ff 	.word	0x003d08ff
 80096a8:	431bde83 	.word	0x431bde83
 80096ac:	10624dd3 	.word	0x10624dd3

080096b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e021      	b.n	8009706 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2224      	movs	r2, #36	; 0x24
 80096c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f022 0201 	bic.w	r2, r2, #1
 80096d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7fe fef0 	bl	80084c0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
	...

08009710 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af02      	add	r7, sp, #8
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	607a      	str	r2, [r7, #4]
 800971a:	461a      	mov	r2, r3
 800971c:	460b      	mov	r3, r1
 800971e:	817b      	strh	r3, [r7, #10]
 8009720:	4613      	mov	r3, r2
 8009722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009724:	f7ff f85e 	bl	80087e4 <HAL_GetTick>
 8009728:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b20      	cmp	r3, #32
 8009734:	f040 80e0 	bne.w	80098f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	2319      	movs	r3, #25
 800973e:	2201      	movs	r2, #1
 8009740:	4970      	ldr	r1, [pc, #448]	; (8009904 <HAL_I2C_Master_Transmit+0x1f4>)
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 fe5c 	bl	800a400 <I2C_WaitOnFlagUntilTimeout>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800974e:	2302      	movs	r3, #2
 8009750:	e0d3      	b.n	80098fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_I2C_Master_Transmit+0x50>
 800975c:	2302      	movs	r3, #2
 800975e:	e0cc      	b.n	80098fa <HAL_I2C_Master_Transmit+0x1ea>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b01      	cmp	r3, #1
 8009774:	d007      	beq.n	8009786 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f042 0201 	orr.w	r2, r2, #1
 8009784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2221      	movs	r2, #33	; 0x21
 800979a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2210      	movs	r2, #16
 80097a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	893a      	ldrh	r2, [r7, #8]
 80097b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097bc:	b29a      	uxth	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	4a50      	ldr	r2, [pc, #320]	; (8009908 <HAL_I2C_Master_Transmit+0x1f8>)
 80097c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80097c8:	8979      	ldrh	r1, [r7, #10]
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	6a3a      	ldr	r2, [r7, #32]
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fc16 	bl	800a000 <I2C_MasterRequestWrite>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e08d      	b.n	80098fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097de:	2300      	movs	r3, #0
 80097e0:	613b      	str	r3, [r7, #16]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	613b      	str	r3, [r7, #16]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	613b      	str	r3, [r7, #16]
 80097f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80097f4:	e066      	b.n	80098c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	6a39      	ldr	r1, [r7, #32]
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f000 ff1a 	bl	800a634 <I2C_WaitOnTXEFlagUntilTimeout>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00d      	beq.n	8009822 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980a:	2b04      	cmp	r3, #4
 800980c:	d107      	bne.n	800981e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800981c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e06b      	b.n	80098fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	781a      	ldrb	r2, [r3, #0]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009832:	1c5a      	adds	r2, r3, #1
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983c:	b29b      	uxth	r3, r3
 800983e:	3b01      	subs	r3, #1
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800984a:	3b01      	subs	r3, #1
 800984c:	b29a      	uxth	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b04      	cmp	r3, #4
 800985e:	d11b      	bne.n	8009898 <HAL_I2C_Master_Transmit+0x188>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009864:	2b00      	cmp	r3, #0
 8009866:	d017      	beq.n	8009898 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	781a      	ldrb	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	1c5a      	adds	r2, r3, #1
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009882:	b29b      	uxth	r3, r3
 8009884:	3b01      	subs	r3, #1
 8009886:	b29a      	uxth	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009890:	3b01      	subs	r3, #1
 8009892:	b29a      	uxth	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	6a39      	ldr	r1, [r7, #32]
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 ff11 	bl	800a6c4 <I2C_WaitOnBTFFlagUntilTimeout>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00d      	beq.n	80098c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ac:	2b04      	cmp	r3, #4
 80098ae:	d107      	bne.n	80098c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e01a      	b.n	80098fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d194      	bne.n	80097f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2220      	movs	r2, #32
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	e000      	b.n	80098fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80098f8:	2302      	movs	r3, #2
  }
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	00100002 	.word	0x00100002
 8009908:	ffff0000 	.word	0xffff0000

0800990c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af02      	add	r7, sp, #8
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	4608      	mov	r0, r1
 8009916:	4611      	mov	r1, r2
 8009918:	461a      	mov	r2, r3
 800991a:	4603      	mov	r3, r0
 800991c:	817b      	strh	r3, [r7, #10]
 800991e:	460b      	mov	r3, r1
 8009920:	813b      	strh	r3, [r7, #8]
 8009922:	4613      	mov	r3, r2
 8009924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009926:	f7fe ff5d 	bl	80087e4 <HAL_GetTick>
 800992a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b20      	cmp	r3, #32
 8009936:	f040 80d9 	bne.w	8009aec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	2319      	movs	r3, #25
 8009940:	2201      	movs	r2, #1
 8009942:	496d      	ldr	r1, [pc, #436]	; (8009af8 <HAL_I2C_Mem_Write+0x1ec>)
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 fd5b 	bl	800a400 <I2C_WaitOnFlagUntilTimeout>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009950:	2302      	movs	r3, #2
 8009952:	e0cc      	b.n	8009aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800995a:	2b01      	cmp	r3, #1
 800995c:	d101      	bne.n	8009962 <HAL_I2C_Mem_Write+0x56>
 800995e:	2302      	movs	r3, #2
 8009960:	e0c5      	b.n	8009aee <HAL_I2C_Mem_Write+0x1e2>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b01      	cmp	r3, #1
 8009976:	d007      	beq.n	8009988 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f042 0201 	orr.w	r2, r2, #1
 8009986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2221      	movs	r2, #33	; 0x21
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2240      	movs	r2, #64	; 0x40
 80099a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6a3a      	ldr	r2, [r7, #32]
 80099b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099be:	b29a      	uxth	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4a4d      	ldr	r2, [pc, #308]	; (8009afc <HAL_I2C_Mem_Write+0x1f0>)
 80099c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099ca:	88f8      	ldrh	r0, [r7, #6]
 80099cc:	893a      	ldrh	r2, [r7, #8]
 80099ce:	8979      	ldrh	r1, [r7, #10]
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	9301      	str	r3, [sp, #4]
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	4603      	mov	r3, r0
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 fb92 	bl	800a104 <I2C_RequestMemoryWrite>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d052      	beq.n	8009a8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e081      	b.n	8009aee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 fe20 	bl	800a634 <I2C_WaitOnTXEFlagUntilTimeout>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00d      	beq.n	8009a16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d107      	bne.n	8009a12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e06b      	b.n	8009aee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1a:	781a      	ldrb	r2, [r3, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d11b      	bne.n	8009a8c <HAL_I2C_Mem_Write+0x180>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d017      	beq.n	8009a8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	781a      	ldrb	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a76:	3b01      	subs	r3, #1
 8009a78:	b29a      	uxth	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	3b01      	subs	r3, #1
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1aa      	bne.n	80099ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 fe13 	bl	800a6c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00d      	beq.n	8009ac0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	d107      	bne.n	8009abc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e016      	b.n	8009aee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e000      	b.n	8009aee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009aec:	2302      	movs	r3, #2
  }
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	00100002 	.word	0x00100002
 8009afc:	ffff0000 	.word	0xffff0000

08009b00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b08c      	sub	sp, #48	; 0x30
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	4608      	mov	r0, r1
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	4603      	mov	r3, r0
 8009b10:	817b      	strh	r3, [r7, #10]
 8009b12:	460b      	mov	r3, r1
 8009b14:	813b      	strh	r3, [r7, #8]
 8009b16:	4613      	mov	r3, r2
 8009b18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b1e:	f7fe fe61 	bl	80087e4 <HAL_GetTick>
 8009b22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b20      	cmp	r3, #32
 8009b2e:	f040 8244 	bne.w	8009fba <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	2319      	movs	r3, #25
 8009b38:	2201      	movs	r2, #1
 8009b3a:	4982      	ldr	r1, [pc, #520]	; (8009d44 <HAL_I2C_Mem_Read+0x244>)
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f000 fc5f 	bl	800a400 <I2C_WaitOnFlagUntilTimeout>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e237      	b.n	8009fbc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d101      	bne.n	8009b5a <HAL_I2C_Mem_Read+0x5a>
 8009b56:	2302      	movs	r3, #2
 8009b58:	e230      	b.n	8009fbc <HAL_I2C_Mem_Read+0x4bc>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d007      	beq.n	8009b80 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 0201 	orr.w	r2, r2, #1
 8009b7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2222      	movs	r2, #34	; 0x22
 8009b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2240      	movs	r2, #64	; 0x40
 8009b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4a62      	ldr	r2, [pc, #392]	; (8009d48 <HAL_I2C_Mem_Read+0x248>)
 8009bc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bc2:	88f8      	ldrh	r0, [r7, #6]
 8009bc4:	893a      	ldrh	r2, [r7, #8]
 8009bc6:	8979      	ldrh	r1, [r7, #10]
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	9301      	str	r3, [sp, #4]
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 fb2c 	bl	800a230 <I2C_RequestMemoryRead>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e1ec      	b.n	8009fbc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d113      	bne.n	8009c12 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bea:	2300      	movs	r3, #0
 8009bec:	61fb      	str	r3, [r7, #28]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	61fb      	str	r3, [r7, #28]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	61fb      	str	r3, [r7, #28]
 8009bfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	e1c0      	b.n	8009f94 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d11e      	bne.n	8009c58 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c2a:	b672      	cpsid	i
}
 8009c2c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c2e:	2300      	movs	r3, #0
 8009c30:	61bb      	str	r3, [r7, #24]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	61bb      	str	r3, [r7, #24]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	61bb      	str	r3, [r7, #24]
 8009c42:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c54:	b662      	cpsie	i
}
 8009c56:	e035      	b.n	8009cc4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d11e      	bne.n	8009c9e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c70:	b672      	cpsid	i
}
 8009c72:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c74:	2300      	movs	r3, #0
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	617b      	str	r3, [r7, #20]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	617b      	str	r3, [r7, #20]
 8009c88:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009c9a:	b662      	cpsie	i
}
 8009c9c:	e012      	b.n	8009cc4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cae:	2300      	movs	r3, #0
 8009cb0:	613b      	str	r3, [r7, #16]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	613b      	str	r3, [r7, #16]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	613b      	str	r3, [r7, #16]
 8009cc2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009cc4:	e166      	b.n	8009f94 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	f200 811f 	bhi.w	8009f0e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d123      	bne.n	8009d20 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 fd39 	bl	800a754 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e167      	b.n	8009fbc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691a      	ldr	r2, [r3, #16]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	b2d2      	uxtb	r2, r2
 8009cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	3b01      	subs	r3, #1
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d1e:	e139      	b.n	8009f94 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d152      	bne.n	8009dce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	2200      	movs	r2, #0
 8009d30:	4906      	ldr	r1, [pc, #24]	; (8009d4c <HAL_I2C_Mem_Read+0x24c>)
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fb64 	bl	800a400 <I2C_WaitOnFlagUntilTimeout>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d008      	beq.n	8009d50 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e13c      	b.n	8009fbc <HAL_I2C_Mem_Read+0x4bc>
 8009d42:	bf00      	nop
 8009d44:	00100002 	.word	0x00100002
 8009d48:	ffff0000 	.word	0xffff0000
 8009d4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009d50:	b672      	cpsid	i
}
 8009d52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	691a      	ldr	r2, [r3, #16]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	b2d2      	uxtb	r2, r2
 8009d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d76:	1c5a      	adds	r2, r3, #1
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d80:	3b01      	subs	r3, #1
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d96:	b662      	cpsie	i
}
 8009d98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	691a      	ldr	r2, [r3, #16]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da4:	b2d2      	uxtb	r2, r2
 8009da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dac:	1c5a      	adds	r2, r3, #1
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009db6:	3b01      	subs	r3, #1
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009dcc:	e0e2      	b.n	8009f94 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	497b      	ldr	r1, [pc, #492]	; (8009fc4 <HAL_I2C_Mem_Read+0x4c4>)
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f000 fb11 	bl	800a400 <I2C_WaitOnFlagUntilTimeout>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e0e9      	b.n	8009fbc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009df6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009df8:	b672      	cpsid	i
}
 8009dfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	691a      	ldr	r2, [r3, #16]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	b2d2      	uxtb	r2, r2
 8009e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	3b01      	subs	r3, #1
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e2e:	4b66      	ldr	r3, [pc, #408]	; (8009fc8 <HAL_I2C_Mem_Read+0x4c8>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	08db      	lsrs	r3, r3, #3
 8009e34:	4a65      	ldr	r2, [pc, #404]	; (8009fcc <HAL_I2C_Mem_Read+0x4cc>)
 8009e36:	fba2 2303 	umull	r2, r3, r2, r3
 8009e3a:	0a1a      	lsrs	r2, r3, #8
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	00da      	lsls	r2, r3, #3
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009e48:	6a3b      	ldr	r3, [r7, #32]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d118      	bne.n	8009e86 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	f043 0220 	orr.w	r2, r3, #32
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009e76:	b662      	cpsie	i
}
 8009e78:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e09a      	b.n	8009fbc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	695b      	ldr	r3, [r3, #20]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d1d9      	bne.n	8009e48 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	691a      	ldr	r2, [r3, #16]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eae:	b2d2      	uxtb	r2, r2
 8009eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb6:	1c5a      	adds	r2, r3, #1
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009ed6:	b662      	cpsie	i
}
 8009ed8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	691a      	ldr	r2, [r3, #16]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee4:	b2d2      	uxtb	r2, r2
 8009ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	3b01      	subs	r3, #1
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f0c:	e042      	b.n	8009f94 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 fc1e 	bl	800a754 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e04c      	b.n	8009fbc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	691a      	ldr	r2, [r3, #16]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2c:	b2d2      	uxtb	r2, r2
 8009f2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	1c5a      	adds	r2, r3, #1
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	f003 0304 	and.w	r3, r3, #4
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d118      	bne.n	8009f94 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6c:	b2d2      	uxtb	r2, r2
 8009f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f47f ae94 	bne.w	8009cc6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e000      	b.n	8009fbc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009fba:	2302      	movs	r3, #2
  }
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3728      	adds	r7, #40	; 0x28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	00010004 	.word	0x00010004
 8009fc8:	200000b4 	.word	0x200000b4
 8009fcc:	14f8b589 	.word	0x14f8b589

08009fd0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fde:	b2db      	uxtb	r3, r3
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bc80      	pop	{r7}
 8009fe8:	4770      	bx	lr

08009fea <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bc80      	pop	{r7}
 8009ffe:	4770      	bx	lr

0800a000 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	607a      	str	r2, [r7, #4]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	460b      	mov	r3, r1
 800a00e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d006      	beq.n	800a02a <I2C_MasterRequestWrite+0x2a>
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d003      	beq.n	800a02a <I2C_MasterRequestWrite+0x2a>
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a028:	d108      	bne.n	800a03c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a038:	601a      	str	r2, [r3, #0]
 800a03a:	e00b      	b.n	800a054 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a040:	2b12      	cmp	r3, #18
 800a042:	d107      	bne.n	800a054 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 f9cd 	bl	800a400 <I2C_WaitOnFlagUntilTimeout>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00d      	beq.n	800a088 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07a:	d103      	bne.n	800a084 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a084:	2303      	movs	r3, #3
 800a086:	e035      	b.n	800a0f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a090:	d108      	bne.n	800a0a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a092:	897b      	ldrh	r3, [r7, #10]
 800a094:	b2db      	uxtb	r3, r3
 800a096:	461a      	mov	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a0a0:	611a      	str	r2, [r3, #16]
 800a0a2:	e01b      	b.n	800a0dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a0a4:	897b      	ldrh	r3, [r7, #10]
 800a0a6:	11db      	asrs	r3, r3, #7
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	f003 0306 	and.w	r3, r3, #6
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	f063 030f 	orn	r3, r3, #15
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	490e      	ldr	r1, [pc, #56]	; (800a0fc <I2C_MasterRequestWrite+0xfc>)
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f000 fa16 	bl	800a4f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e010      	b.n	800a0f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a0d2:	897b      	ldrh	r3, [r7, #10]
 800a0d4:	b2da      	uxtb	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	4907      	ldr	r1, [pc, #28]	; (800a100 <I2C_MasterRequestWrite+0x100>)
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 fa06 	bl	800a4f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e000      	b.n	800a0f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	00010008 	.word	0x00010008
 800a100:	00010002 	.word	0x00010002

0800a104 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af02      	add	r7, sp, #8
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	4608      	mov	r0, r1
 800a10e:	4611      	mov	r1, r2
 800a110:	461a      	mov	r2, r3
 800a112:	4603      	mov	r3, r0
 800a114:	817b      	strh	r3, [r7, #10]
 800a116:	460b      	mov	r3, r1
 800a118:	813b      	strh	r3, [r7, #8]
 800a11a:	4613      	mov	r3, r2
 800a11c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a12c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	2200      	movs	r2, #0
 800a136:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 f960 	bl	800a400 <I2C_WaitOnFlagUntilTimeout>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00d      	beq.n	800a162 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a154:	d103      	bne.n	800a15e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a15c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e05f      	b.n	800a222 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a162:	897b      	ldrh	r3, [r7, #10]
 800a164:	b2db      	uxtb	r3, r3
 800a166:	461a      	mov	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a170:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	6a3a      	ldr	r2, [r7, #32]
 800a176:	492d      	ldr	r1, [pc, #180]	; (800a22c <I2C_RequestMemoryWrite+0x128>)
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 f9bb 	bl	800a4f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e04c      	b.n	800a222 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a0:	6a39      	ldr	r1, [r7, #32]
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 fa46 	bl	800a634 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00d      	beq.n	800a1ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	2b04      	cmp	r3, #4
 800a1b4:	d107      	bne.n	800a1c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e02b      	b.n	800a222 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d105      	bne.n	800a1dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1d0:	893b      	ldrh	r3, [r7, #8]
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	611a      	str	r2, [r3, #16]
 800a1da:	e021      	b.n	800a220 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1dc:	893b      	ldrh	r3, [r7, #8]
 800a1de:	0a1b      	lsrs	r3, r3, #8
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ec:	6a39      	ldr	r1, [r7, #32]
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 fa20 	bl	800a634 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00d      	beq.n	800a216 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d107      	bne.n	800a212 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a210:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e005      	b.n	800a222 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a216:	893b      	ldrh	r3, [r7, #8]
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	00010002 	.word	0x00010002

0800a230 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b088      	sub	sp, #32
 800a234:	af02      	add	r7, sp, #8
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	4608      	mov	r0, r1
 800a23a:	4611      	mov	r1, r2
 800a23c:	461a      	mov	r2, r3
 800a23e:	4603      	mov	r3, r0
 800a240:	817b      	strh	r3, [r7, #10]
 800a242:	460b      	mov	r3, r1
 800a244:	813b      	strh	r3, [r7, #8]
 800a246:	4613      	mov	r3, r2
 800a248:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a258:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a268:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	2200      	movs	r2, #0
 800a272:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 f8c2 	bl	800a400 <I2C_WaitOnFlagUntilTimeout>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00d      	beq.n	800a29e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a28c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a290:	d103      	bne.n	800a29a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a298:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e0aa      	b.n	800a3f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a29e:	897b      	ldrh	r3, [r7, #10]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	6a3a      	ldr	r2, [r7, #32]
 800a2b2:	4952      	ldr	r1, [pc, #328]	; (800a3fc <I2C_RequestMemoryRead+0x1cc>)
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f000 f91d 	bl	800a4f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e097      	b.n	800a3f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	617b      	str	r3, [r7, #20]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	617b      	str	r3, [r7, #20]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	699b      	ldr	r3, [r3, #24]
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2dc:	6a39      	ldr	r1, [r7, #32]
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 f9a8 	bl	800a634 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00d      	beq.n	800a306 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	d107      	bne.n	800a302 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a300:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e076      	b.n	800a3f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a306:	88fb      	ldrh	r3, [r7, #6]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d105      	bne.n	800a318 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a30c:	893b      	ldrh	r3, [r7, #8]
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	611a      	str	r2, [r3, #16]
 800a316:	e021      	b.n	800a35c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a318:	893b      	ldrh	r3, [r7, #8]
 800a31a:	0a1b      	lsrs	r3, r3, #8
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a328:	6a39      	ldr	r1, [r7, #32]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 f982 	bl	800a634 <I2C_WaitOnTXEFlagUntilTimeout>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00d      	beq.n	800a352 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d107      	bne.n	800a34e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a34c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e050      	b.n	800a3f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a352:	893b      	ldrh	r3, [r7, #8]
 800a354:	b2da      	uxtb	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35e:	6a39      	ldr	r1, [r7, #32]
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 f967 	bl	800a634 <I2C_WaitOnTXEFlagUntilTimeout>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00d      	beq.n	800a388 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a370:	2b04      	cmp	r3, #4
 800a372:	d107      	bne.n	800a384 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a382:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e035      	b.n	800a3f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a396:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f000 f82b 	bl	800a400 <I2C_WaitOnFlagUntilTimeout>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00d      	beq.n	800a3cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3be:	d103      	bne.n	800a3c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e013      	b.n	800a3f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a3cc:	897b      	ldrh	r3, [r7, #10]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	f043 0301 	orr.w	r3, r3, #1
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	6a3a      	ldr	r2, [r7, #32]
 800a3e0:	4906      	ldr	r1, [pc, #24]	; (800a3fc <I2C_RequestMemoryRead+0x1cc>)
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f886 	bl	800a4f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e000      	b.n	800a3f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3718      	adds	r7, #24
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	00010002 	.word	0x00010002

0800a400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	603b      	str	r3, [r7, #0]
 800a40c:	4613      	mov	r3, r2
 800a40e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a410:	e048      	b.n	800a4a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a418:	d044      	beq.n	800a4a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a41a:	f7fe f9e3 	bl	80087e4 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	683a      	ldr	r2, [r7, #0]
 800a426:	429a      	cmp	r2, r3
 800a428:	d302      	bcc.n	800a430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d139      	bne.n	800a4a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	0c1b      	lsrs	r3, r3, #16
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b01      	cmp	r3, #1
 800a438:	d10d      	bne.n	800a456 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	43da      	mvns	r2, r3
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	4013      	ands	r3, r2
 800a446:	b29b      	uxth	r3, r3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	bf0c      	ite	eq
 800a44c:	2301      	moveq	r3, #1
 800a44e:	2300      	movne	r3, #0
 800a450:	b2db      	uxtb	r3, r3
 800a452:	461a      	mov	r2, r3
 800a454:	e00c      	b.n	800a470 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	43da      	mvns	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4013      	ands	r3, r2
 800a462:	b29b      	uxth	r3, r3
 800a464:	2b00      	cmp	r3, #0
 800a466:	bf0c      	ite	eq
 800a468:	2301      	moveq	r3, #1
 800a46a:	2300      	movne	r3, #0
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	461a      	mov	r2, r3
 800a470:	79fb      	ldrb	r3, [r7, #7]
 800a472:	429a      	cmp	r2, r3
 800a474:	d116      	bne.n	800a4a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2220      	movs	r2, #32
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a490:	f043 0220 	orr.w	r2, r3, #32
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e023      	b.n	800a4ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	0c1b      	lsrs	r3, r3, #16
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d10d      	bne.n	800a4ca <I2C_WaitOnFlagUntilTimeout+0xca>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	43da      	mvns	r2, r3
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bf0c      	ite	eq
 800a4c0:	2301      	moveq	r3, #1
 800a4c2:	2300      	movne	r3, #0
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	e00c      	b.n	800a4e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	43da      	mvns	r2, r3
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	bf0c      	ite	eq
 800a4dc:	2301      	moveq	r3, #1
 800a4de:	2300      	movne	r3, #0
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	79fb      	ldrb	r3, [r7, #7]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d093      	beq.n	800a412 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a502:	e071      	b.n	800a5e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a50e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a512:	d123      	bne.n	800a55c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a522:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a52c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2220      	movs	r2, #32
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	f043 0204 	orr.w	r2, r3, #4
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e067      	b.n	800a62c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a562:	d041      	beq.n	800a5e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a564:	f7fe f93e 	bl	80087e4 <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	429a      	cmp	r2, r3
 800a572:	d302      	bcc.n	800a57a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d136      	bne.n	800a5e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	0c1b      	lsrs	r3, r3, #16
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b01      	cmp	r3, #1
 800a582:	d10c      	bne.n	800a59e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	43da      	mvns	r2, r3
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	4013      	ands	r3, r2
 800a590:	b29b      	uxth	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	bf14      	ite	ne
 800a596:	2301      	movne	r3, #1
 800a598:	2300      	moveq	r3, #0
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	e00b      	b.n	800a5b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	43da      	mvns	r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bf14      	ite	ne
 800a5b0:	2301      	movne	r3, #1
 800a5b2:	2300      	moveq	r3, #0
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d016      	beq.n	800a5e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d4:	f043 0220 	orr.w	r2, r3, #32
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e021      	b.n	800a62c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	0c1b      	lsrs	r3, r3, #16
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d10c      	bne.n	800a60c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	43da      	mvns	r2, r3
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	2b00      	cmp	r3, #0
 800a602:	bf14      	ite	ne
 800a604:	2301      	movne	r3, #1
 800a606:	2300      	moveq	r3, #0
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	e00b      	b.n	800a624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	43da      	mvns	r2, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	4013      	ands	r3, r2
 800a618:	b29b      	uxth	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	bf14      	ite	ne
 800a61e:	2301      	movne	r3, #1
 800a620:	2300      	moveq	r3, #0
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b00      	cmp	r3, #0
 800a626:	f47f af6d 	bne.w	800a504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a640:	e034      	b.n	800a6ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 f8e3 	bl	800a80e <I2C_IsAcknowledgeFailed>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e034      	b.n	800a6bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a658:	d028      	beq.n	800a6ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65a:	f7fe f8c3 	bl	80087e4 <HAL_GetTick>
 800a65e:	4602      	mov	r2, r0
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	429a      	cmp	r2, r3
 800a668:	d302      	bcc.n	800a670 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d11d      	bne.n	800a6ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a67a:	2b80      	cmp	r3, #128	; 0x80
 800a67c:	d016      	beq.n	800a6ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2220      	movs	r2, #32
 800a688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	f043 0220 	orr.w	r2, r3, #32
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e007      	b.n	800a6bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b6:	2b80      	cmp	r3, #128	; 0x80
 800a6b8:	d1c3      	bne.n	800a642 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6d0:	e034      	b.n	800a73c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 f89b 	bl	800a80e <I2C_IsAcknowledgeFailed>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e034      	b.n	800a74c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6e8:	d028      	beq.n	800a73c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ea:	f7fe f87b 	bl	80087e4 <HAL_GetTick>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d302      	bcc.n	800a700 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d11d      	bne.n	800a73c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	f003 0304 	and.w	r3, r3, #4
 800a70a:	2b04      	cmp	r3, #4
 800a70c:	d016      	beq.n	800a73c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2220      	movs	r2, #32
 800a718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a728:	f043 0220 	orr.w	r2, r3, #32
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e007      	b.n	800a74c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	f003 0304 	and.w	r3, r3, #4
 800a746:	2b04      	cmp	r3, #4
 800a748:	d1c3      	bne.n	800a6d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a760:	e049      	b.n	800a7f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	f003 0310 	and.w	r3, r3, #16
 800a76c:	2b10      	cmp	r3, #16
 800a76e:	d119      	bne.n	800a7a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f06f 0210 	mvn.w	r2, #16
 800a778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2220      	movs	r2, #32
 800a784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e030      	b.n	800a806 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7a4:	f7fe f81e 	bl	80087e4 <HAL_GetTick>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d302      	bcc.n	800a7ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d11d      	bne.n	800a7f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c4:	2b40      	cmp	r3, #64	; 0x40
 800a7c6:	d016      	beq.n	800a7f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2220      	movs	r2, #32
 800a7d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e2:	f043 0220 	orr.w	r2, r3, #32
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e007      	b.n	800a806 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a800:	2b40      	cmp	r3, #64	; 0x40
 800a802:	d1ae      	bne.n	800a762 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a824:	d11b      	bne.n	800a85e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a82e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2220      	movs	r2, #32
 800a83a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84a:	f043 0204 	orr.w	r2, r3, #4
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e000      	b.n	800a860 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	bc80      	pop	{r7}
 800a868:	4770      	bx	lr
	...

0800a86c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e272      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 8087 	beq.w	800a99a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a88c:	4b92      	ldr	r3, [pc, #584]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f003 030c 	and.w	r3, r3, #12
 800a894:	2b04      	cmp	r3, #4
 800a896:	d00c      	beq.n	800a8b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a898:	4b8f      	ldr	r3, [pc, #572]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f003 030c 	and.w	r3, r3, #12
 800a8a0:	2b08      	cmp	r3, #8
 800a8a2:	d112      	bne.n	800a8ca <HAL_RCC_OscConfig+0x5e>
 800a8a4:	4b8c      	ldr	r3, [pc, #560]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b0:	d10b      	bne.n	800a8ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8b2:	4b89      	ldr	r3, [pc, #548]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d06c      	beq.n	800a998 <HAL_RCC_OscConfig+0x12c>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d168      	bne.n	800a998 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e24c      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d2:	d106      	bne.n	800a8e2 <HAL_RCC_OscConfig+0x76>
 800a8d4:	4b80      	ldr	r3, [pc, #512]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a7f      	ldr	r2, [pc, #508]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a8da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	e02e      	b.n	800a940 <HAL_RCC_OscConfig+0xd4>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10c      	bne.n	800a904 <HAL_RCC_OscConfig+0x98>
 800a8ea:	4b7b      	ldr	r3, [pc, #492]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a7a      	ldr	r2, [pc, #488]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a8f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	4b78      	ldr	r3, [pc, #480]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a77      	ldr	r2, [pc, #476]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a8fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	e01d      	b.n	800a940 <HAL_RCC_OscConfig+0xd4>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a90c:	d10c      	bne.n	800a928 <HAL_RCC_OscConfig+0xbc>
 800a90e:	4b72      	ldr	r3, [pc, #456]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a71      	ldr	r2, [pc, #452]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	4b6f      	ldr	r3, [pc, #444]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a6e      	ldr	r2, [pc, #440]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a924:	6013      	str	r3, [r2, #0]
 800a926:	e00b      	b.n	800a940 <HAL_RCC_OscConfig+0xd4>
 800a928:	4b6b      	ldr	r3, [pc, #428]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a6a      	ldr	r2, [pc, #424]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a92e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	4b68      	ldr	r3, [pc, #416]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a67      	ldr	r2, [pc, #412]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a93a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a93e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d013      	beq.n	800a970 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a948:	f7fd ff4c 	bl	80087e4 <HAL_GetTick>
 800a94c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a94e:	e008      	b.n	800a962 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a950:	f7fd ff48 	bl	80087e4 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	2b64      	cmp	r3, #100	; 0x64
 800a95c:	d901      	bls.n	800a962 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e200      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a962:	4b5d      	ldr	r3, [pc, #372]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0f0      	beq.n	800a950 <HAL_RCC_OscConfig+0xe4>
 800a96e:	e014      	b.n	800a99a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a970:	f7fd ff38 	bl	80087e4 <HAL_GetTick>
 800a974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a976:	e008      	b.n	800a98a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a978:	f7fd ff34 	bl	80087e4 <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b64      	cmp	r3, #100	; 0x64
 800a984:	d901      	bls.n	800a98a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	e1ec      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a98a:	4b53      	ldr	r3, [pc, #332]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1f0      	bne.n	800a978 <HAL_RCC_OscConfig+0x10c>
 800a996:	e000      	b.n	800a99a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f003 0302 	and.w	r3, r3, #2
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d063      	beq.n	800aa6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a9a6:	4b4c      	ldr	r3, [pc, #304]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f003 030c 	and.w	r3, r3, #12
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a9b2:	4b49      	ldr	r3, [pc, #292]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	f003 030c 	and.w	r3, r3, #12
 800a9ba:	2b08      	cmp	r3, #8
 800a9bc:	d11c      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x18c>
 800a9be:	4b46      	ldr	r3, [pc, #280]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d116      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9ca:	4b43      	ldr	r3, [pc, #268]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0302 	and.w	r3, r3, #2
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d005      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x176>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d001      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e1c0      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9e2:	4b3d      	ldr	r3, [pc, #244]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	4939      	ldr	r1, [pc, #228]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9f6:	e03a      	b.n	800aa6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d020      	beq.n	800aa42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa00:	4b36      	ldr	r3, [pc, #216]	; (800aadc <HAL_RCC_OscConfig+0x270>)
 800aa02:	2201      	movs	r2, #1
 800aa04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa06:	f7fd feed 	bl	80087e4 <HAL_GetTick>
 800aa0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa0c:	e008      	b.n	800aa20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa0e:	f7fd fee9 	bl	80087e4 <HAL_GetTick>
 800aa12:	4602      	mov	r2, r0
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d901      	bls.n	800aa20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e1a1      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa20:	4b2d      	ldr	r3, [pc, #180]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d0f0      	beq.n	800aa0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa2c:	4b2a      	ldr	r3, [pc, #168]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	00db      	lsls	r3, r3, #3
 800aa3a:	4927      	ldr	r1, [pc, #156]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	600b      	str	r3, [r1, #0]
 800aa40:	e015      	b.n	800aa6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa42:	4b26      	ldr	r3, [pc, #152]	; (800aadc <HAL_RCC_OscConfig+0x270>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa48:	f7fd fecc 	bl	80087e4 <HAL_GetTick>
 800aa4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa4e:	e008      	b.n	800aa62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa50:	f7fd fec8 	bl	80087e4 <HAL_GetTick>
 800aa54:	4602      	mov	r2, r0
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d901      	bls.n	800aa62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e180      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa62:	4b1d      	ldr	r3, [pc, #116]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f003 0302 	and.w	r3, r3, #2
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1f0      	bne.n	800aa50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0308 	and.w	r3, r3, #8
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d03a      	beq.n	800aaf0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d019      	beq.n	800aab6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa82:	4b17      	ldr	r3, [pc, #92]	; (800aae0 <HAL_RCC_OscConfig+0x274>)
 800aa84:	2201      	movs	r2, #1
 800aa86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa88:	f7fd feac 	bl	80087e4 <HAL_GetTick>
 800aa8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa8e:	e008      	b.n	800aaa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa90:	f7fd fea8 	bl	80087e4 <HAL_GetTick>
 800aa94:	4602      	mov	r2, r0
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d901      	bls.n	800aaa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e160      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaa2:	4b0d      	ldr	r3, [pc, #52]	; (800aad8 <HAL_RCC_OscConfig+0x26c>)
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa6:	f003 0302 	and.w	r3, r3, #2
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d0f0      	beq.n	800aa90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800aaae:	2001      	movs	r0, #1
 800aab0:	f000 face 	bl	800b050 <RCC_Delay>
 800aab4:	e01c      	b.n	800aaf0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aab6:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <HAL_RCC_OscConfig+0x274>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aabc:	f7fd fe92 	bl	80087e4 <HAL_GetTick>
 800aac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aac2:	e00f      	b.n	800aae4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aac4:	f7fd fe8e 	bl	80087e4 <HAL_GetTick>
 800aac8:	4602      	mov	r2, r0
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d908      	bls.n	800aae4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e146      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
 800aad6:	bf00      	nop
 800aad8:	40021000 	.word	0x40021000
 800aadc:	42420000 	.word	0x42420000
 800aae0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aae4:	4b92      	ldr	r3, [pc, #584]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	f003 0302 	and.w	r3, r3, #2
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1e9      	bne.n	800aac4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f003 0304 	and.w	r3, r3, #4
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 80a6 	beq.w	800ac4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aafe:	2300      	movs	r3, #0
 800ab00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab02:	4b8b      	ldr	r3, [pc, #556]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ab04:	69db      	ldr	r3, [r3, #28]
 800ab06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10d      	bne.n	800ab2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab0e:	4b88      	ldr	r3, [pc, #544]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	4a87      	ldr	r2, [pc, #540]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ab14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab18:	61d3      	str	r3, [r2, #28]
 800ab1a:	4b85      	ldr	r3, [pc, #532]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab22:	60bb      	str	r3, [r7, #8]
 800ab24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab26:	2301      	movs	r3, #1
 800ab28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab2a:	4b82      	ldr	r3, [pc, #520]	; (800ad34 <HAL_RCC_OscConfig+0x4c8>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d118      	bne.n	800ab68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab36:	4b7f      	ldr	r3, [pc, #508]	; (800ad34 <HAL_RCC_OscConfig+0x4c8>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a7e      	ldr	r2, [pc, #504]	; (800ad34 <HAL_RCC_OscConfig+0x4c8>)
 800ab3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab42:	f7fd fe4f 	bl	80087e4 <HAL_GetTick>
 800ab46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab48:	e008      	b.n	800ab5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab4a:	f7fd fe4b 	bl	80087e4 <HAL_GetTick>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	2b64      	cmp	r3, #100	; 0x64
 800ab56:	d901      	bls.n	800ab5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e103      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab5c:	4b75      	ldr	r3, [pc, #468]	; (800ad34 <HAL_RCC_OscConfig+0x4c8>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d0f0      	beq.n	800ab4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d106      	bne.n	800ab7e <HAL_RCC_OscConfig+0x312>
 800ab70:	4b6f      	ldr	r3, [pc, #444]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	4a6e      	ldr	r2, [pc, #440]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ab76:	f043 0301 	orr.w	r3, r3, #1
 800ab7a:	6213      	str	r3, [r2, #32]
 800ab7c:	e02d      	b.n	800abda <HAL_RCC_OscConfig+0x36e>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10c      	bne.n	800aba0 <HAL_RCC_OscConfig+0x334>
 800ab86:	4b6a      	ldr	r3, [pc, #424]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	4a69      	ldr	r2, [pc, #420]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ab8c:	f023 0301 	bic.w	r3, r3, #1
 800ab90:	6213      	str	r3, [r2, #32]
 800ab92:	4b67      	ldr	r3, [pc, #412]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	4a66      	ldr	r2, [pc, #408]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ab98:	f023 0304 	bic.w	r3, r3, #4
 800ab9c:	6213      	str	r3, [r2, #32]
 800ab9e:	e01c      	b.n	800abda <HAL_RCC_OscConfig+0x36e>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	2b05      	cmp	r3, #5
 800aba6:	d10c      	bne.n	800abc2 <HAL_RCC_OscConfig+0x356>
 800aba8:	4b61      	ldr	r3, [pc, #388]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800abaa:	6a1b      	ldr	r3, [r3, #32]
 800abac:	4a60      	ldr	r2, [pc, #384]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800abae:	f043 0304 	orr.w	r3, r3, #4
 800abb2:	6213      	str	r3, [r2, #32]
 800abb4:	4b5e      	ldr	r3, [pc, #376]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	4a5d      	ldr	r2, [pc, #372]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800abba:	f043 0301 	orr.w	r3, r3, #1
 800abbe:	6213      	str	r3, [r2, #32]
 800abc0:	e00b      	b.n	800abda <HAL_RCC_OscConfig+0x36e>
 800abc2:	4b5b      	ldr	r3, [pc, #364]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	4a5a      	ldr	r2, [pc, #360]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800abc8:	f023 0301 	bic.w	r3, r3, #1
 800abcc:	6213      	str	r3, [r2, #32]
 800abce:	4b58      	ldr	r3, [pc, #352]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	4a57      	ldr	r2, [pc, #348]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800abd4:	f023 0304 	bic.w	r3, r3, #4
 800abd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d015      	beq.n	800ac0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abe2:	f7fd fdff 	bl	80087e4 <HAL_GetTick>
 800abe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abe8:	e00a      	b.n	800ac00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abea:	f7fd fdfb 	bl	80087e4 <HAL_GetTick>
 800abee:	4602      	mov	r2, r0
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d901      	bls.n	800ac00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e0b1      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac00:	4b4b      	ldr	r3, [pc, #300]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	f003 0302 	and.w	r3, r3, #2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d0ee      	beq.n	800abea <HAL_RCC_OscConfig+0x37e>
 800ac0c:	e014      	b.n	800ac38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac0e:	f7fd fde9 	bl	80087e4 <HAL_GetTick>
 800ac12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac14:	e00a      	b.n	800ac2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac16:	f7fd fde5 	bl	80087e4 <HAL_GetTick>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d901      	bls.n	800ac2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e09b      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac2c:	4b40      	ldr	r3, [pc, #256]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	f003 0302 	and.w	r3, r3, #2
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1ee      	bne.n	800ac16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d105      	bne.n	800ac4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac3e:	4b3c      	ldr	r3, [pc, #240]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ac40:	69db      	ldr	r3, [r3, #28]
 800ac42:	4a3b      	ldr	r2, [pc, #236]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ac44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 8087 	beq.w	800ad62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ac54:	4b36      	ldr	r3, [pc, #216]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	f003 030c 	and.w	r3, r3, #12
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	d061      	beq.n	800ad24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	69db      	ldr	r3, [r3, #28]
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d146      	bne.n	800acf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac68:	4b33      	ldr	r3, [pc, #204]	; (800ad38 <HAL_RCC_OscConfig+0x4cc>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac6e:	f7fd fdb9 	bl	80087e4 <HAL_GetTick>
 800ac72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac74:	e008      	b.n	800ac88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac76:	f7fd fdb5 	bl	80087e4 <HAL_GetTick>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d901      	bls.n	800ac88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e06d      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ac88:	4b29      	ldr	r3, [pc, #164]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1f0      	bne.n	800ac76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac9c:	d108      	bne.n	800acb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ac9e:	4b24      	ldr	r3, [pc, #144]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	4921      	ldr	r1, [pc, #132]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800acac:	4313      	orrs	r3, r2
 800acae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acb0:	4b1f      	ldr	r3, [pc, #124]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a19      	ldr	r1, [r3, #32]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	430b      	orrs	r3, r1
 800acc2:	491b      	ldr	r1, [pc, #108]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800acc4:	4313      	orrs	r3, r2
 800acc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800acc8:	4b1b      	ldr	r3, [pc, #108]	; (800ad38 <HAL_RCC_OscConfig+0x4cc>)
 800acca:	2201      	movs	r2, #1
 800accc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acce:	f7fd fd89 	bl	80087e4 <HAL_GetTick>
 800acd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800acd4:	e008      	b.n	800ace8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acd6:	f7fd fd85 	bl	80087e4 <HAL_GetTick>
 800acda:	4602      	mov	r2, r0
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d901      	bls.n	800ace8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ace4:	2303      	movs	r3, #3
 800ace6:	e03d      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ace8:	4b11      	ldr	r3, [pc, #68]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d0f0      	beq.n	800acd6 <HAL_RCC_OscConfig+0x46a>
 800acf4:	e035      	b.n	800ad62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acf6:	4b10      	ldr	r3, [pc, #64]	; (800ad38 <HAL_RCC_OscConfig+0x4cc>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acfc:	f7fd fd72 	bl	80087e4 <HAL_GetTick>
 800ad00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad02:	e008      	b.n	800ad16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad04:	f7fd fd6e 	bl	80087e4 <HAL_GetTick>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d901      	bls.n	800ad16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e026      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad16:	4b06      	ldr	r3, [pc, #24]	; (800ad30 <HAL_RCC_OscConfig+0x4c4>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1f0      	bne.n	800ad04 <HAL_RCC_OscConfig+0x498>
 800ad22:	e01e      	b.n	800ad62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	69db      	ldr	r3, [r3, #28]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d107      	bne.n	800ad3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e019      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
 800ad30:	40021000 	.word	0x40021000
 800ad34:	40007000 	.word	0x40007000
 800ad38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ad3c:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <HAL_RCC_OscConfig+0x500>)
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a1b      	ldr	r3, [r3, #32]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d106      	bne.n	800ad5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d001      	beq.n	800ad62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	40021000 	.word	0x40021000

0800ad70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	e0d0      	b.n	800af26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad84:	4b6a      	ldr	r3, [pc, #424]	; (800af30 <HAL_RCC_ClockConfig+0x1c0>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0307 	and.w	r3, r3, #7
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d910      	bls.n	800adb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad92:	4b67      	ldr	r3, [pc, #412]	; (800af30 <HAL_RCC_ClockConfig+0x1c0>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f023 0207 	bic.w	r2, r3, #7
 800ad9a:	4965      	ldr	r1, [pc, #404]	; (800af30 <HAL_RCC_ClockConfig+0x1c0>)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ada2:	4b63      	ldr	r3, [pc, #396]	; (800af30 <HAL_RCC_ClockConfig+0x1c0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d001      	beq.n	800adb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e0b8      	b.n	800af26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d020      	beq.n	800ae02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d005      	beq.n	800add8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800adcc:	4b59      	ldr	r3, [pc, #356]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	4a58      	ldr	r2, [pc, #352]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800add2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800add6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0308 	and.w	r3, r3, #8
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d005      	beq.n	800adf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ade4:	4b53      	ldr	r3, [pc, #332]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	4a52      	ldr	r2, [pc, #328]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800adea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800adee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adf0:	4b50      	ldr	r3, [pc, #320]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	494d      	ldr	r1, [pc, #308]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800adfe:	4313      	orrs	r3, r2
 800ae00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 0301 	and.w	r3, r3, #1
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d040      	beq.n	800ae90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d107      	bne.n	800ae26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae16:	4b47      	ldr	r3, [pc, #284]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d115      	bne.n	800ae4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e07f      	b.n	800af26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d107      	bne.n	800ae3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae2e:	4b41      	ldr	r3, [pc, #260]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e073      	b.n	800af26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae3e:	4b3d      	ldr	r3, [pc, #244]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e06b      	b.n	800af26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae4e:	4b39      	ldr	r3, [pc, #228]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f023 0203 	bic.w	r2, r3, #3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	4936      	ldr	r1, [pc, #216]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae60:	f7fd fcc0 	bl	80087e4 <HAL_GetTick>
 800ae64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae66:	e00a      	b.n	800ae7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae68:	f7fd fcbc 	bl	80087e4 <HAL_GetTick>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d901      	bls.n	800ae7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e053      	b.n	800af26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae7e:	4b2d      	ldr	r3, [pc, #180]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	f003 020c 	and.w	r2, r3, #12
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d1eb      	bne.n	800ae68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae90:	4b27      	ldr	r3, [pc, #156]	; (800af30 <HAL_RCC_ClockConfig+0x1c0>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0307 	and.w	r3, r3, #7
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d210      	bcs.n	800aec0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae9e:	4b24      	ldr	r3, [pc, #144]	; (800af30 <HAL_RCC_ClockConfig+0x1c0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f023 0207 	bic.w	r2, r3, #7
 800aea6:	4922      	ldr	r1, [pc, #136]	; (800af30 <HAL_RCC_ClockConfig+0x1c0>)
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aeae:	4b20      	ldr	r3, [pc, #128]	; (800af30 <HAL_RCC_ClockConfig+0x1c0>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0307 	and.w	r3, r3, #7
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d001      	beq.n	800aec0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e032      	b.n	800af26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d008      	beq.n	800aede <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aecc:	4b19      	ldr	r3, [pc, #100]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	4916      	ldr	r1, [pc, #88]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0308 	and.w	r3, r3, #8
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d009      	beq.n	800aefe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aeea:	4b12      	ldr	r3, [pc, #72]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	00db      	lsls	r3, r3, #3
 800aef8:	490e      	ldr	r1, [pc, #56]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800aefa:	4313      	orrs	r3, r2
 800aefc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aefe:	f000 f821 	bl	800af44 <HAL_RCC_GetSysClockFreq>
 800af02:	4602      	mov	r2, r0
 800af04:	4b0b      	ldr	r3, [pc, #44]	; (800af34 <HAL_RCC_ClockConfig+0x1c4>)
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	091b      	lsrs	r3, r3, #4
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	490a      	ldr	r1, [pc, #40]	; (800af38 <HAL_RCC_ClockConfig+0x1c8>)
 800af10:	5ccb      	ldrb	r3, [r1, r3]
 800af12:	fa22 f303 	lsr.w	r3, r2, r3
 800af16:	4a09      	ldr	r2, [pc, #36]	; (800af3c <HAL_RCC_ClockConfig+0x1cc>)
 800af18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af1a:	4b09      	ldr	r3, [pc, #36]	; (800af40 <HAL_RCC_ClockConfig+0x1d0>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fd fc1e 	bl	8008760 <HAL_InitTick>

  return HAL_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	40022000 	.word	0x40022000
 800af34:	40021000 	.word	0x40021000
 800af38:	0800dde4 	.word	0x0800dde4
 800af3c:	200000b4 	.word	0x200000b4
 800af40:	200000b8 	.word	0x200000b8

0800af44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af44:	b480      	push	{r7}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	60fb      	str	r3, [r7, #12]
 800af4e:	2300      	movs	r3, #0
 800af50:	60bb      	str	r3, [r7, #8]
 800af52:	2300      	movs	r3, #0
 800af54:	617b      	str	r3, [r7, #20]
 800af56:	2300      	movs	r3, #0
 800af58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800af5e:	4b1e      	ldr	r3, [pc, #120]	; (800afd8 <HAL_RCC_GetSysClockFreq+0x94>)
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f003 030c 	and.w	r3, r3, #12
 800af6a:	2b04      	cmp	r3, #4
 800af6c:	d002      	beq.n	800af74 <HAL_RCC_GetSysClockFreq+0x30>
 800af6e:	2b08      	cmp	r3, #8
 800af70:	d003      	beq.n	800af7a <HAL_RCC_GetSysClockFreq+0x36>
 800af72:	e027      	b.n	800afc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800af74:	4b19      	ldr	r3, [pc, #100]	; (800afdc <HAL_RCC_GetSysClockFreq+0x98>)
 800af76:	613b      	str	r3, [r7, #16]
      break;
 800af78:	e027      	b.n	800afca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	0c9b      	lsrs	r3, r3, #18
 800af7e:	f003 030f 	and.w	r3, r3, #15
 800af82:	4a17      	ldr	r2, [pc, #92]	; (800afe0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800af84:	5cd3      	ldrb	r3, [r2, r3]
 800af86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d010      	beq.n	800afb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af92:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <HAL_RCC_GetSysClockFreq+0x94>)
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	0c5b      	lsrs	r3, r3, #17
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	4a11      	ldr	r2, [pc, #68]	; (800afe4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800af9e:	5cd3      	ldrb	r3, [r2, r3]
 800afa0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a0d      	ldr	r2, [pc, #52]	; (800afdc <HAL_RCC_GetSysClockFreq+0x98>)
 800afa6:	fb03 f202 	mul.w	r2, r3, r2
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb0:	617b      	str	r3, [r7, #20]
 800afb2:	e004      	b.n	800afbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a0c      	ldr	r2, [pc, #48]	; (800afe8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800afb8:	fb02 f303 	mul.w	r3, r2, r3
 800afbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	613b      	str	r3, [r7, #16]
      break;
 800afc2:	e002      	b.n	800afca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800afc4:	4b05      	ldr	r3, [pc, #20]	; (800afdc <HAL_RCC_GetSysClockFreq+0x98>)
 800afc6:	613b      	str	r3, [r7, #16]
      break;
 800afc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800afca:	693b      	ldr	r3, [r7, #16]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	371c      	adds	r7, #28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bc80      	pop	{r7}
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	40021000 	.word	0x40021000
 800afdc:	007a1200 	.word	0x007a1200
 800afe0:	0800ddfc 	.word	0x0800ddfc
 800afe4:	0800de0c 	.word	0x0800de0c
 800afe8:	003d0900 	.word	0x003d0900

0800afec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afec:	b480      	push	{r7}
 800afee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aff0:	4b02      	ldr	r3, [pc, #8]	; (800affc <HAL_RCC_GetHCLKFreq+0x10>)
 800aff2:	681b      	ldr	r3, [r3, #0]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bc80      	pop	{r7}
 800affa:	4770      	bx	lr
 800affc:	200000b4 	.word	0x200000b4

0800b000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b004:	f7ff fff2 	bl	800afec <HAL_RCC_GetHCLKFreq>
 800b008:	4602      	mov	r2, r0
 800b00a:	4b05      	ldr	r3, [pc, #20]	; (800b020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	0a1b      	lsrs	r3, r3, #8
 800b010:	f003 0307 	and.w	r3, r3, #7
 800b014:	4903      	ldr	r1, [pc, #12]	; (800b024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b016:	5ccb      	ldrb	r3, [r1, r3]
 800b018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	40021000 	.word	0x40021000
 800b024:	0800ddf4 	.word	0x0800ddf4

0800b028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b02c:	f7ff ffde 	bl	800afec <HAL_RCC_GetHCLKFreq>
 800b030:	4602      	mov	r2, r0
 800b032:	4b05      	ldr	r3, [pc, #20]	; (800b048 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	0adb      	lsrs	r3, r3, #11
 800b038:	f003 0307 	and.w	r3, r3, #7
 800b03c:	4903      	ldr	r1, [pc, #12]	; (800b04c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b03e:	5ccb      	ldrb	r3, [r1, r3]
 800b040:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b044:	4618      	mov	r0, r3
 800b046:	bd80      	pop	{r7, pc}
 800b048:	40021000 	.word	0x40021000
 800b04c:	0800ddf4 	.word	0x0800ddf4

0800b050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b058:	4b0a      	ldr	r3, [pc, #40]	; (800b084 <RCC_Delay+0x34>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a0a      	ldr	r2, [pc, #40]	; (800b088 <RCC_Delay+0x38>)
 800b05e:	fba2 2303 	umull	r2, r3, r2, r3
 800b062:	0a5b      	lsrs	r3, r3, #9
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	fb02 f303 	mul.w	r3, r2, r3
 800b06a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b06c:	bf00      	nop
  }
  while (Delay --);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	1e5a      	subs	r2, r3, #1
 800b072:	60fa      	str	r2, [r7, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1f9      	bne.n	800b06c <RCC_Delay+0x1c>
}
 800b078:	bf00      	nop
 800b07a:	bf00      	nop
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	bc80      	pop	{r7}
 800b082:	4770      	bx	lr
 800b084:	200000b4 	.word	0x200000b4
 800b088:	10624dd3 	.word	0x10624dd3

0800b08c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e041      	b.n	800b122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7fd fa26 	bl	8008504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	f000 fa82 	bl	800b5d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2201      	movs	r2, #1
 800b114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d001      	beq.n	800b144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	e044      	b.n	800b1ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2202      	movs	r2, #2
 800b148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68da      	ldr	r2, [r3, #12]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f042 0201 	orr.w	r2, r2, #1
 800b15a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a1d      	ldr	r2, [pc, #116]	; (800b1d8 <HAL_TIM_Base_Start_IT+0xac>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d018      	beq.n	800b198 <HAL_TIM_Base_Start_IT+0x6c>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a1c      	ldr	r2, [pc, #112]	; (800b1dc <HAL_TIM_Base_Start_IT+0xb0>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d013      	beq.n	800b198 <HAL_TIM_Base_Start_IT+0x6c>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b178:	d00e      	beq.n	800b198 <HAL_TIM_Base_Start_IT+0x6c>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a18      	ldr	r2, [pc, #96]	; (800b1e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d009      	beq.n	800b198 <HAL_TIM_Base_Start_IT+0x6c>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a16      	ldr	r2, [pc, #88]	; (800b1e4 <HAL_TIM_Base_Start_IT+0xb8>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d004      	beq.n	800b198 <HAL_TIM_Base_Start_IT+0x6c>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a15      	ldr	r2, [pc, #84]	; (800b1e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d111      	bne.n	800b1bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	f003 0307 	and.w	r3, r3, #7
 800b1a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2b06      	cmp	r3, #6
 800b1a8:	d010      	beq.n	800b1cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f042 0201 	orr.w	r2, r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ba:	e007      	b.n	800b1cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f042 0201 	orr.w	r2, r2, #1
 800b1ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bc80      	pop	{r7}
 800b1d6:	4770      	bx	lr
 800b1d8:	40012c00 	.word	0x40012c00
 800b1dc:	40013400 	.word	0x40013400
 800b1e0:	40000400 	.word	0x40000400
 800b1e4:	40000800 	.word	0x40000800
 800b1e8:	40000c00 	.word	0x40000c00

0800b1ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	f003 0302 	and.w	r3, r3, #2
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d122      	bne.n	800b248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	f003 0302 	and.w	r3, r3, #2
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d11b      	bne.n	800b248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f06f 0202 	mvn.w	r2, #2
 800b218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	f003 0303 	and.w	r3, r3, #3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d003      	beq.n	800b236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 f9b4 	bl	800b59c <HAL_TIM_IC_CaptureCallback>
 800b234:	e005      	b.n	800b242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f9a7 	bl	800b58a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f9b6 	bl	800b5ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	2b04      	cmp	r3, #4
 800b254:	d122      	bne.n	800b29c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b04      	cmp	r3, #4
 800b262:	d11b      	bne.n	800b29c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f06f 0204 	mvn.w	r2, #4
 800b26c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2202      	movs	r2, #2
 800b272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f98a 	bl	800b59c <HAL_TIM_IC_CaptureCallback>
 800b288:	e005      	b.n	800b296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f97d 	bl	800b58a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f98c 	bl	800b5ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	f003 0308 	and.w	r3, r3, #8
 800b2a6:	2b08      	cmp	r3, #8
 800b2a8:	d122      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f003 0308 	and.w	r3, r3, #8
 800b2b4:	2b08      	cmp	r3, #8
 800b2b6:	d11b      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f06f 0208 	mvn.w	r2, #8
 800b2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	f003 0303 	and.w	r3, r3, #3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f960 	bl	800b59c <HAL_TIM_IC_CaptureCallback>
 800b2dc:	e005      	b.n	800b2ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f953 	bl	800b58a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f962 	bl	800b5ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	f003 0310 	and.w	r3, r3, #16
 800b2fa:	2b10      	cmp	r3, #16
 800b2fc:	d122      	bne.n	800b344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f003 0310 	and.w	r3, r3, #16
 800b308:	2b10      	cmp	r3, #16
 800b30a:	d11b      	bne.n	800b344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f06f 0210 	mvn.w	r2, #16
 800b314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2208      	movs	r2, #8
 800b31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f936 	bl	800b59c <HAL_TIM_IC_CaptureCallback>
 800b330:	e005      	b.n	800b33e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f929 	bl	800b58a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f938 	bl	800b5ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d10e      	bne.n	800b370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d107      	bne.n	800b370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f06f 0201 	mvn.w	r2, #1
 800b368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f7fc fd62 	bl	8007e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37a:	2b80      	cmp	r3, #128	; 0x80
 800b37c:	d10e      	bne.n	800b39c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b388:	2b80      	cmp	r3, #128	; 0x80
 800b38a:	d107      	bne.n	800b39c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 faa1 	bl	800b8de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a6:	2b40      	cmp	r3, #64	; 0x40
 800b3a8:	d10e      	bne.n	800b3c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b4:	2b40      	cmp	r3, #64	; 0x40
 800b3b6:	d107      	bne.n	800b3c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 f8fc 	bl	800b5c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	691b      	ldr	r3, [r3, #16]
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b20      	cmp	r3, #32
 800b3d4:	d10e      	bne.n	800b3f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	f003 0320 	and.w	r3, r3, #32
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	d107      	bne.n	800b3f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f06f 0220 	mvn.w	r2, #32
 800b3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa6c 	bl	800b8cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b410:	2b01      	cmp	r3, #1
 800b412:	d101      	bne.n	800b418 <HAL_TIM_ConfigClockSource+0x1c>
 800b414:	2302      	movs	r3, #2
 800b416:	e0b4      	b.n	800b582 <HAL_TIM_ConfigClockSource+0x186>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2202      	movs	r2, #2
 800b424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b43e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b450:	d03e      	beq.n	800b4d0 <HAL_TIM_ConfigClockSource+0xd4>
 800b452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b456:	f200 8087 	bhi.w	800b568 <HAL_TIM_ConfigClockSource+0x16c>
 800b45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b45e:	f000 8086 	beq.w	800b56e <HAL_TIM_ConfigClockSource+0x172>
 800b462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b466:	d87f      	bhi.n	800b568 <HAL_TIM_ConfigClockSource+0x16c>
 800b468:	2b70      	cmp	r3, #112	; 0x70
 800b46a:	d01a      	beq.n	800b4a2 <HAL_TIM_ConfigClockSource+0xa6>
 800b46c:	2b70      	cmp	r3, #112	; 0x70
 800b46e:	d87b      	bhi.n	800b568 <HAL_TIM_ConfigClockSource+0x16c>
 800b470:	2b60      	cmp	r3, #96	; 0x60
 800b472:	d050      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0x11a>
 800b474:	2b60      	cmp	r3, #96	; 0x60
 800b476:	d877      	bhi.n	800b568 <HAL_TIM_ConfigClockSource+0x16c>
 800b478:	2b50      	cmp	r3, #80	; 0x50
 800b47a:	d03c      	beq.n	800b4f6 <HAL_TIM_ConfigClockSource+0xfa>
 800b47c:	2b50      	cmp	r3, #80	; 0x50
 800b47e:	d873      	bhi.n	800b568 <HAL_TIM_ConfigClockSource+0x16c>
 800b480:	2b40      	cmp	r3, #64	; 0x40
 800b482:	d058      	beq.n	800b536 <HAL_TIM_ConfigClockSource+0x13a>
 800b484:	2b40      	cmp	r3, #64	; 0x40
 800b486:	d86f      	bhi.n	800b568 <HAL_TIM_ConfigClockSource+0x16c>
 800b488:	2b30      	cmp	r3, #48	; 0x30
 800b48a:	d064      	beq.n	800b556 <HAL_TIM_ConfigClockSource+0x15a>
 800b48c:	2b30      	cmp	r3, #48	; 0x30
 800b48e:	d86b      	bhi.n	800b568 <HAL_TIM_ConfigClockSource+0x16c>
 800b490:	2b20      	cmp	r3, #32
 800b492:	d060      	beq.n	800b556 <HAL_TIM_ConfigClockSource+0x15a>
 800b494:	2b20      	cmp	r3, #32
 800b496:	d867      	bhi.n	800b568 <HAL_TIM_ConfigClockSource+0x16c>
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d05c      	beq.n	800b556 <HAL_TIM_ConfigClockSource+0x15a>
 800b49c:	2b10      	cmp	r3, #16
 800b49e:	d05a      	beq.n	800b556 <HAL_TIM_ConfigClockSource+0x15a>
 800b4a0:	e062      	b.n	800b568 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4b2:	f000 f980 	bl	800b7b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b4c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	609a      	str	r2, [r3, #8]
      break;
 800b4ce:	e04f      	b.n	800b570 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4e0:	f000 f969 	bl	800b7b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	689a      	ldr	r2, [r3, #8]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4f2:	609a      	str	r2, [r3, #8]
      break;
 800b4f4:	e03c      	b.n	800b570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b502:	461a      	mov	r2, r3
 800b504:	f000 f8e0 	bl	800b6c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2150      	movs	r1, #80	; 0x50
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f937 	bl	800b782 <TIM_ITRx_SetConfig>
      break;
 800b514:	e02c      	b.n	800b570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b522:	461a      	mov	r2, r3
 800b524:	f000 f8fe 	bl	800b724 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2160      	movs	r1, #96	; 0x60
 800b52e:	4618      	mov	r0, r3
 800b530:	f000 f927 	bl	800b782 <TIM_ITRx_SetConfig>
      break;
 800b534:	e01c      	b.n	800b570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b542:	461a      	mov	r2, r3
 800b544:	f000 f8c0 	bl	800b6c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2140      	movs	r1, #64	; 0x40
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 f917 	bl	800b782 <TIM_ITRx_SetConfig>
      break;
 800b554:	e00c      	b.n	800b570 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4619      	mov	r1, r3
 800b560:	4610      	mov	r0, r2
 800b562:	f000 f90e 	bl	800b782 <TIM_ITRx_SetConfig>
      break;
 800b566:	e003      	b.n	800b570 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	73fb      	strb	r3, [r7, #15]
      break;
 800b56c:	e000      	b.n	800b570 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b56e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b580:	7bfb      	ldrb	r3, [r7, #15]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b58a:	b480      	push	{r7}
 800b58c:	b083      	sub	sp, #12
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b592:	bf00      	nop
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	bc80      	pop	{r7}
 800b59a:	4770      	bx	lr

0800b59c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bc80      	pop	{r7}
 800b5ac:	4770      	bx	lr

0800b5ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5b6:	bf00      	nop
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bc80      	pop	{r7}
 800b5be:	4770      	bx	lr

0800b5c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bc80      	pop	{r7}
 800b5d0:	4770      	bx	lr
	...

0800b5d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a33      	ldr	r2, [pc, #204]	; (800b6b4 <TIM_Base_SetConfig+0xe0>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d013      	beq.n	800b614 <TIM_Base_SetConfig+0x40>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a32      	ldr	r2, [pc, #200]	; (800b6b8 <TIM_Base_SetConfig+0xe4>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d00f      	beq.n	800b614 <TIM_Base_SetConfig+0x40>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5fa:	d00b      	beq.n	800b614 <TIM_Base_SetConfig+0x40>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a2f      	ldr	r2, [pc, #188]	; (800b6bc <TIM_Base_SetConfig+0xe8>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d007      	beq.n	800b614 <TIM_Base_SetConfig+0x40>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a2e      	ldr	r2, [pc, #184]	; (800b6c0 <TIM_Base_SetConfig+0xec>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d003      	beq.n	800b614 <TIM_Base_SetConfig+0x40>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a2d      	ldr	r2, [pc, #180]	; (800b6c4 <TIM_Base_SetConfig+0xf0>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d108      	bne.n	800b626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b61a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	4313      	orrs	r3, r2
 800b624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a22      	ldr	r2, [pc, #136]	; (800b6b4 <TIM_Base_SetConfig+0xe0>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d013      	beq.n	800b656 <TIM_Base_SetConfig+0x82>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a21      	ldr	r2, [pc, #132]	; (800b6b8 <TIM_Base_SetConfig+0xe4>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d00f      	beq.n	800b656 <TIM_Base_SetConfig+0x82>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b63c:	d00b      	beq.n	800b656 <TIM_Base_SetConfig+0x82>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a1e      	ldr	r2, [pc, #120]	; (800b6bc <TIM_Base_SetConfig+0xe8>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d007      	beq.n	800b656 <TIM_Base_SetConfig+0x82>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4a1d      	ldr	r2, [pc, #116]	; (800b6c0 <TIM_Base_SetConfig+0xec>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d003      	beq.n	800b656 <TIM_Base_SetConfig+0x82>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a1c      	ldr	r2, [pc, #112]	; (800b6c4 <TIM_Base_SetConfig+0xf0>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d108      	bne.n	800b668 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b65c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	4313      	orrs	r3, r2
 800b666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	695b      	ldr	r3, [r3, #20]
 800b672:	4313      	orrs	r3, r2
 800b674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	689a      	ldr	r2, [r3, #8]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a09      	ldr	r2, [pc, #36]	; (800b6b4 <TIM_Base_SetConfig+0xe0>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d003      	beq.n	800b69c <TIM_Base_SetConfig+0xc8>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a08      	ldr	r2, [pc, #32]	; (800b6b8 <TIM_Base_SetConfig+0xe4>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d103      	bne.n	800b6a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	691a      	ldr	r2, [r3, #16]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	615a      	str	r2, [r3, #20]
}
 800b6aa:	bf00      	nop
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bc80      	pop	{r7}
 800b6b2:	4770      	bx	lr
 800b6b4:	40012c00 	.word	0x40012c00
 800b6b8:	40013400 	.word	0x40013400
 800b6bc:	40000400 	.word	0x40000400
 800b6c0:	40000800 	.word	0x40000800
 800b6c4:	40000c00 	.word	0x40000c00

0800b6c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6a1b      	ldr	r3, [r3, #32]
 800b6d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	f023 0201 	bic.w	r2, r3, #1
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	011b      	lsls	r3, r3, #4
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f023 030a 	bic.w	r3, r3, #10
 800b704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	621a      	str	r2, [r3, #32]
}
 800b71a:	bf00      	nop
 800b71c:	371c      	adds	r7, #28
 800b71e:	46bd      	mov	sp, r7
 800b720:	bc80      	pop	{r7}
 800b722:	4770      	bx	lr

0800b724 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6a1b      	ldr	r3, [r3, #32]
 800b734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	f023 0210 	bic.w	r2, r3, #16
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b74e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	031b      	lsls	r3, r3, #12
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	4313      	orrs	r3, r2
 800b758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b760:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	011b      	lsls	r3, r3, #4
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	4313      	orrs	r3, r2
 800b76a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	621a      	str	r2, [r3, #32]
}
 800b778:	bf00      	nop
 800b77a:	371c      	adds	r7, #28
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bc80      	pop	{r7}
 800b780:	4770      	bx	lr

0800b782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b782:	b480      	push	{r7}
 800b784:	b085      	sub	sp, #20
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
 800b78a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	f043 0307 	orr.w	r3, r3, #7
 800b7a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	609a      	str	r2, [r3, #8]
}
 800b7ac:	bf00      	nop
 800b7ae:	3714      	adds	r7, #20
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bc80      	pop	{r7}
 800b7b4:	4770      	bx	lr

0800b7b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b087      	sub	sp, #28
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	60f8      	str	r0, [r7, #12]
 800b7be:	60b9      	str	r1, [r7, #8]
 800b7c0:	607a      	str	r2, [r7, #4]
 800b7c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	021a      	lsls	r2, r3, #8
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	431a      	orrs	r2, r3
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	609a      	str	r2, [r3, #8]
}
 800b7ea:	bf00      	nop
 800b7ec:	371c      	adds	r7, #28
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bc80      	pop	{r7}
 800b7f2:	4770      	bx	lr

0800b7f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b804:	2b01      	cmp	r3, #1
 800b806:	d101      	bne.n	800b80c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b808:	2302      	movs	r3, #2
 800b80a:	e050      	b.n	800b8ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a1b      	ldr	r2, [pc, #108]	; (800b8b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d018      	beq.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a19      	ldr	r2, [pc, #100]	; (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d013      	beq.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b862:	d00e      	beq.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4a15      	ldr	r2, [pc, #84]	; (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d009      	beq.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a14      	ldr	r2, [pc, #80]	; (800b8c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d004      	beq.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a12      	ldr	r2, [pc, #72]	; (800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d10c      	bne.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	4313      	orrs	r3, r2
 800b892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bc80      	pop	{r7}
 800b8b6:	4770      	bx	lr
 800b8b8:	40012c00 	.word	0x40012c00
 800b8bc:	40013400 	.word	0x40013400
 800b8c0:	40000400 	.word	0x40000400
 800b8c4:	40000800 	.word	0x40000800
 800b8c8:	40000c00 	.word	0x40000c00

0800b8cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bc80      	pop	{r7}
 800b8dc:	4770      	bx	lr

0800b8de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b083      	sub	sp, #12
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8e6:	bf00      	nop
 800b8e8:	370c      	adds	r7, #12
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bc80      	pop	{r7}
 800b8ee:	4770      	bx	lr

0800b8f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	e042      	b.n	800b988 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7fc fe1a 	bl	8008550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2224      	movs	r2, #36	; 0x24
 800b920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	68da      	ldr	r2, [r3, #12]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b932:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 fcb5 	bl	800c2a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	691a      	ldr	r2, [r3, #16]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b948:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	695a      	ldr	r2, [r3, #20]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b958:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68da      	ldr	r2, [r3, #12]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b968:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2220      	movs	r2, #32
 800b974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2220      	movs	r2, #32
 800b97c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	4613      	mov	r3, r2
 800b99c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b20      	cmp	r3, #32
 800b9a8:	d121      	bne.n	800b9ee <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <HAL_UART_Transmit_IT+0x26>
 800b9b0:	88fb      	ldrh	r3, [r7, #6]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d101      	bne.n	800b9ba <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e01a      	b.n	800b9f0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	88fa      	ldrh	r2, [r7, #6]
 800b9c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	88fa      	ldrh	r2, [r7, #6]
 800b9ca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2221      	movs	r2, #33	; 0x21
 800b9d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	68da      	ldr	r2, [r3, #12]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9e8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	e000      	b.n	800b9f0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b9ee:	2302      	movs	r3, #2
  }
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3714      	adds	r7, #20
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bc80      	pop	{r7}
 800b9f8:	4770      	bx	lr
	...

0800b9fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b0ba      	sub	sp, #232	; 0xe8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba22:	2300      	movs	r3, #0
 800ba24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba32:	f003 030f 	and.w	r3, r3, #15
 800ba36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ba3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10f      	bne.n	800ba62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba46:	f003 0320 	and.w	r3, r3, #32
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d009      	beq.n	800ba62 <HAL_UART_IRQHandler+0x66>
 800ba4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba52:	f003 0320 	and.w	r3, r3, #32
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fb63 	bl	800c126 <UART_Receive_IT>
      return;
 800ba60:	e25b      	b.n	800bf1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f000 80de 	beq.w	800bc28 <HAL_UART_IRQHandler+0x22c>
 800ba6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba70:	f003 0301 	and.w	r3, r3, #1
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d106      	bne.n	800ba86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 80d1 	beq.w	800bc28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00b      	beq.n	800baaa <HAL_UART_IRQHandler+0xae>
 800ba92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d005      	beq.n	800baaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa2:	f043 0201 	orr.w	r2, r3, #1
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800baaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baae:	f003 0304 	and.w	r3, r3, #4
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00b      	beq.n	800bace <HAL_UART_IRQHandler+0xd2>
 800bab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d005      	beq.n	800bace <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac6:	f043 0202 	orr.w	r2, r3, #2
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad2:	f003 0302 	and.w	r3, r3, #2
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00b      	beq.n	800baf2 <HAL_UART_IRQHandler+0xf6>
 800bada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d005      	beq.n	800baf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baea:	f043 0204 	orr.w	r2, r3, #4
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800baf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf6:	f003 0308 	and.w	r3, r3, #8
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d011      	beq.n	800bb22 <HAL_UART_IRQHandler+0x126>
 800bafe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb02:	f003 0320 	and.w	r3, r3, #32
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d105      	bne.n	800bb16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb0e:	f003 0301 	and.w	r3, r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1a:	f043 0208 	orr.w	r2, r3, #8
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 81f2 	beq.w	800bf10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb30:	f003 0320 	and.w	r3, r3, #32
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d008      	beq.n	800bb4a <HAL_UART_IRQHandler+0x14e>
 800bb38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb3c:	f003 0320 	and.w	r3, r3, #32
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 faee 	bl	800c126 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	bf14      	ite	ne
 800bb58:	2301      	movne	r3, #1
 800bb5a:	2300      	moveq	r3, #0
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb66:	f003 0308 	and.w	r3, r3, #8
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d103      	bne.n	800bb76 <HAL_UART_IRQHandler+0x17a>
 800bb6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d04f      	beq.n	800bc16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f9f8 	bl	800bf6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	695b      	ldr	r3, [r3, #20]
 800bb82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d041      	beq.n	800bc0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	3314      	adds	r3, #20
 800bb90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb98:	e853 3f00 	ldrex	r3, [r3]
 800bb9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3314      	adds	r3, #20
 800bbb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bbc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbc6:	e841 2300 	strex	r3, r2, [r1]
 800bbca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bbce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1d9      	bne.n	800bb8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d013      	beq.n	800bc06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe2:	4a7e      	ldr	r2, [pc, #504]	; (800bddc <HAL_UART_IRQHandler+0x3e0>)
 800bbe4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fd f86c 	bl	8008cc8 <HAL_DMA_Abort_IT>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d016      	beq.n	800bc24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc00:	4610      	mov	r0, r2
 800bc02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc04:	e00e      	b.n	800bc24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f99c 	bl	800bf44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc0c:	e00a      	b.n	800bc24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f998 	bl	800bf44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc14:	e006      	b.n	800bc24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f994 	bl	800bf44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc22:	e175      	b.n	800bf10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc24:	bf00      	nop
    return;
 800bc26:	e173      	b.n	800bf10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	f040 814f 	bne.w	800bed0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc36:	f003 0310 	and.w	r3, r3, #16
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 8148 	beq.w	800bed0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc44:	f003 0310 	and.w	r3, r3, #16
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 8141 	beq.w	800bed0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60bb      	str	r3, [r7, #8]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	60bb      	str	r3, [r7, #8]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	60bb      	str	r3, [r7, #8]
 800bc62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f000 80b6 	beq.w	800bde0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f000 8145 	beq.w	800bf14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc92:	429a      	cmp	r2, r3
 800bc94:	f080 813e 	bcs.w	800bf14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	2b20      	cmp	r3, #32
 800bca8:	f000 8088 	beq.w	800bdbc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	330c      	adds	r3, #12
 800bcb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcba:	e853 3f00 	ldrex	r3, [r3]
 800bcbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bcc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	330c      	adds	r3, #12
 800bcd4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bcd8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bcdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bce4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bce8:	e841 2300 	strex	r3, r2, [r1]
 800bcec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bcf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d1d9      	bne.n	800bcac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3314      	adds	r3, #20
 800bcfe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd02:	e853 3f00 	ldrex	r3, [r3]
 800bd06:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd0a:	f023 0301 	bic.w	r3, r3, #1
 800bd0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	3314      	adds	r3, #20
 800bd18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd1c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd20:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd22:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd28:	e841 2300 	strex	r3, r2, [r1]
 800bd2c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e1      	bne.n	800bcf8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	3314      	adds	r3, #20
 800bd3a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd3e:	e853 3f00 	ldrex	r3, [r3]
 800bd42:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bd44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	3314      	adds	r3, #20
 800bd54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bd58:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bd5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bd5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bd60:	e841 2300 	strex	r3, r2, [r1]
 800bd64:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bd66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1e3      	bne.n	800bd34 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2220      	movs	r2, #32
 800bd70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	330c      	adds	r3, #12
 800bd80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd84:	e853 3f00 	ldrex	r3, [r3]
 800bd88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd8c:	f023 0310 	bic.w	r3, r3, #16
 800bd90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	330c      	adds	r3, #12
 800bd9a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd9e:	65ba      	str	r2, [r7, #88]	; 0x58
 800bda0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bda4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bda6:	e841 2300 	strex	r3, r2, [r1]
 800bdaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bdac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1e3      	bne.n	800bd7a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fc ff4b 	bl	8008c52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	1ad3      	subs	r3, r2, r3
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f8bf 	bl	800bf56 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bdd8:	e09c      	b.n	800bf14 <HAL_UART_IRQHandler+0x518>
 800bdda:	bf00      	nop
 800bddc:	0800c031 	.word	0x0800c031
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 808e 	beq.w	800bf18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bdfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 8089 	beq.w	800bf18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	330c      	adds	r3, #12
 800be0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be10:	e853 3f00 	ldrex	r3, [r3]
 800be14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	330c      	adds	r3, #12
 800be26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be2a:	647a      	str	r2, [r7, #68]	; 0x44
 800be2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be32:	e841 2300 	strex	r3, r2, [r1]
 800be36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1e3      	bne.n	800be06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3314      	adds	r3, #20
 800be44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be48:	e853 3f00 	ldrex	r3, [r3]
 800be4c:	623b      	str	r3, [r7, #32]
   return(result);
 800be4e:	6a3b      	ldr	r3, [r7, #32]
 800be50:	f023 0301 	bic.w	r3, r3, #1
 800be54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3314      	adds	r3, #20
 800be5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800be62:	633a      	str	r2, [r7, #48]	; 0x30
 800be64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6a:	e841 2300 	strex	r3, r2, [r1]
 800be6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be72:	2b00      	cmp	r3, #0
 800be74:	d1e3      	bne.n	800be3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2220      	movs	r2, #32
 800be7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	330c      	adds	r3, #12
 800be8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	e853 3f00 	ldrex	r3, [r3]
 800be92:	60fb      	str	r3, [r7, #12]
   return(result);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 0310 	bic.w	r3, r3, #16
 800be9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	330c      	adds	r3, #12
 800bea4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bea8:	61fa      	str	r2, [r7, #28]
 800beaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beac:	69b9      	ldr	r1, [r7, #24]
 800beae:	69fa      	ldr	r2, [r7, #28]
 800beb0:	e841 2300 	strex	r3, r2, [r1]
 800beb4:	617b      	str	r3, [r7, #20]
   return(result);
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1e3      	bne.n	800be84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2202      	movs	r2, #2
 800bec0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bec2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bec6:	4619      	mov	r1, r3
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f844 	bl	800bf56 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bece:	e023      	b.n	800bf18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d009      	beq.n	800bef0 <HAL_UART_IRQHandler+0x4f4>
 800bedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d003      	beq.n	800bef0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f8b5 	bl	800c058 <UART_Transmit_IT>
    return;
 800beee:	e014      	b.n	800bf1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00e      	beq.n	800bf1a <HAL_UART_IRQHandler+0x51e>
 800befc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d008      	beq.n	800bf1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f8f4 	bl	800c0f6 <UART_EndTransmit_IT>
    return;
 800bf0e:	e004      	b.n	800bf1a <HAL_UART_IRQHandler+0x51e>
    return;
 800bf10:	bf00      	nop
 800bf12:	e002      	b.n	800bf1a <HAL_UART_IRQHandler+0x51e>
      return;
 800bf14:	bf00      	nop
 800bf16:	e000      	b.n	800bf1a <HAL_UART_IRQHandler+0x51e>
      return;
 800bf18:	bf00      	nop
  }
}
 800bf1a:	37e8      	adds	r7, #232	; 0xe8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf28:	bf00      	nop
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bc80      	pop	{r7}
 800bf30:	4770      	bx	lr

0800bf32 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b083      	sub	sp, #12
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf3a:	bf00      	nop
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bc80      	pop	{r7}
 800bf42:	4770      	bx	lr

0800bf44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf4c:	bf00      	nop
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bc80      	pop	{r7}
 800bf54:	4770      	bx	lr

0800bf56 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf56:	b480      	push	{r7}
 800bf58:	b083      	sub	sp, #12
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
 800bf5e:	460b      	mov	r3, r1
 800bf60:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf62:	bf00      	nop
 800bf64:	370c      	adds	r7, #12
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bc80      	pop	{r7}
 800bf6a:	4770      	bx	lr

0800bf6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b095      	sub	sp, #84	; 0x54
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	330c      	adds	r3, #12
 800bf7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7e:	e853 3f00 	ldrex	r3, [r3]
 800bf82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	330c      	adds	r3, #12
 800bf92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf94:	643a      	str	r2, [r7, #64]	; 0x40
 800bf96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf9c:	e841 2300 	strex	r3, r2, [r1]
 800bfa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1e5      	bne.n	800bf74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3314      	adds	r3, #20
 800bfae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb0:	6a3b      	ldr	r3, [r7, #32]
 800bfb2:	e853 3f00 	ldrex	r3, [r3]
 800bfb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	f023 0301 	bic.w	r3, r3, #1
 800bfbe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	3314      	adds	r3, #20
 800bfc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfd0:	e841 2300 	strex	r3, r2, [r1]
 800bfd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e5      	bne.n	800bfa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d119      	bne.n	800c018 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	330c      	adds	r3, #12
 800bfea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f023 0310 	bic.w	r3, r3, #16
 800bffa:	647b      	str	r3, [r7, #68]	; 0x44
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	330c      	adds	r3, #12
 800c002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c004:	61ba      	str	r2, [r7, #24]
 800c006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6979      	ldr	r1, [r7, #20]
 800c00a:	69ba      	ldr	r2, [r7, #24]
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	613b      	str	r3, [r7, #16]
   return(result);
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e5      	bne.n	800bfe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2220      	movs	r2, #32
 800c01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c026:	bf00      	nop
 800c028:	3754      	adds	r7, #84	; 0x54
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bc80      	pop	{r7}
 800c02e:	4770      	bx	lr

0800c030 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2200      	movs	r2, #0
 800c042:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f7ff ff7a 	bl	800bf44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c050:	bf00      	nop
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b21      	cmp	r3, #33	; 0x21
 800c06a:	d13e      	bne.n	800c0ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c074:	d114      	bne.n	800c0a0 <UART_Transmit_IT+0x48>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	691b      	ldr	r3, [r3, #16]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d110      	bne.n	800c0a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	881b      	ldrh	r3, [r3, #0]
 800c088:	461a      	mov	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c092:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	1c9a      	adds	r2, r3, #2
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	621a      	str	r2, [r3, #32]
 800c09e:	e008      	b.n	800c0b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6a1b      	ldr	r3, [r3, #32]
 800c0a4:	1c59      	adds	r1, r3, #1
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	6211      	str	r1, [r2, #32]
 800c0aa:	781a      	ldrb	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10f      	bne.n	800c0e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68da      	ldr	r2, [r3, #12]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e000      	b.n	800c0ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0ea:	2302      	movs	r3, #2
  }
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3714      	adds	r7, #20
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bc80      	pop	{r7}
 800c0f4:	4770      	bx	lr

0800c0f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b082      	sub	sp, #8
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68da      	ldr	r2, [r3, #12]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c10c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2220      	movs	r2, #32
 800c112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff ff02 	bl	800bf20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b08c      	sub	sp, #48	; 0x30
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c134:	b2db      	uxtb	r3, r3
 800c136:	2b22      	cmp	r3, #34	; 0x22
 800c138:	f040 80ae 	bne.w	800c298 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c144:	d117      	bne.n	800c176 <UART_Receive_IT+0x50>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d113      	bne.n	800c176 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c14e:	2300      	movs	r3, #0
 800c150:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c156:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	b29b      	uxth	r3, r3
 800c160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c164:	b29a      	uxth	r2, r3
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	1c9a      	adds	r2, r3, #2
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	629a      	str	r2, [r3, #40]	; 0x28
 800c174:	e026      	b.n	800c1c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c17c:	2300      	movs	r3, #0
 800c17e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c188:	d007      	beq.n	800c19a <UART_Receive_IT+0x74>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10a      	bne.n	800c1a8 <UART_Receive_IT+0x82>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d106      	bne.n	800c1a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	701a      	strb	r2, [r3, #0]
 800c1a6:	e008      	b.n	800c1ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b4:	b2da      	uxtb	r2, r3
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d15d      	bne.n	800c294 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	68da      	ldr	r2, [r3, #12]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f022 0220 	bic.w	r2, r2, #32
 800c1e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68da      	ldr	r2, [r3, #12]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	695a      	ldr	r2, [r3, #20]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f022 0201 	bic.w	r2, r2, #1
 800c206:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2220      	movs	r2, #32
 800c20c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d135      	bne.n	800c28a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	330c      	adds	r3, #12
 800c22a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	e853 3f00 	ldrex	r3, [r3]
 800c232:	613b      	str	r3, [r7, #16]
   return(result);
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	f023 0310 	bic.w	r3, r3, #16
 800c23a:	627b      	str	r3, [r7, #36]	; 0x24
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	330c      	adds	r3, #12
 800c242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c244:	623a      	str	r2, [r7, #32]
 800c246:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c248:	69f9      	ldr	r1, [r7, #28]
 800c24a:	6a3a      	ldr	r2, [r7, #32]
 800c24c:	e841 2300 	strex	r3, r2, [r1]
 800c250:	61bb      	str	r3, [r7, #24]
   return(result);
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d1e5      	bne.n	800c224 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f003 0310 	and.w	r3, r3, #16
 800c262:	2b10      	cmp	r3, #16
 800c264:	d10a      	bne.n	800c27c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c266:	2300      	movs	r3, #0
 800c268:	60fb      	str	r3, [r7, #12]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	60fb      	str	r3, [r7, #12]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	60fb      	str	r3, [r7, #12]
 800c27a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff fe67 	bl	800bf56 <HAL_UARTEx_RxEventCallback>
 800c288:	e002      	b.n	800c290 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7ff fe51 	bl	800bf32 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	e002      	b.n	800c29a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	e000      	b.n	800c29a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c298:	2302      	movs	r3, #2
  }
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3730      	adds	r7, #48	; 0x30
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
	...

0800c2a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	68da      	ldr	r2, [r3, #12]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	430a      	orrs	r2, r1
 800c2c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	689a      	ldr	r2, [r3, #8]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	431a      	orrs	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	695b      	ldr	r3, [r3, #20]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c2de:	f023 030c 	bic.w	r3, r3, #12
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	6812      	ldr	r2, [r2, #0]
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	430b      	orrs	r3, r1
 800c2ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	695b      	ldr	r3, [r3, #20]
 800c2f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	699a      	ldr	r2, [r3, #24]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	430a      	orrs	r2, r1
 800c300:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a2c      	ldr	r2, [pc, #176]	; (800c3b8 <UART_SetConfig+0x114>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d103      	bne.n	800c314 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c30c:	f7fe fe8c 	bl	800b028 <HAL_RCC_GetPCLK2Freq>
 800c310:	60f8      	str	r0, [r7, #12]
 800c312:	e002      	b.n	800c31a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c314:	f7fe fe74 	bl	800b000 <HAL_RCC_GetPCLK1Freq>
 800c318:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	4613      	mov	r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	4413      	add	r3, r2
 800c322:	009a      	lsls	r2, r3, #2
 800c324:	441a      	add	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c330:	4a22      	ldr	r2, [pc, #136]	; (800c3bc <UART_SetConfig+0x118>)
 800c332:	fba2 2303 	umull	r2, r3, r2, r3
 800c336:	095b      	lsrs	r3, r3, #5
 800c338:	0119      	lsls	r1, r3, #4
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	4613      	mov	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	009a      	lsls	r2, r3, #2
 800c344:	441a      	add	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c350:	4b1a      	ldr	r3, [pc, #104]	; (800c3bc <UART_SetConfig+0x118>)
 800c352:	fba3 0302 	umull	r0, r3, r3, r2
 800c356:	095b      	lsrs	r3, r3, #5
 800c358:	2064      	movs	r0, #100	; 0x64
 800c35a:	fb00 f303 	mul.w	r3, r0, r3
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	011b      	lsls	r3, r3, #4
 800c362:	3332      	adds	r3, #50	; 0x32
 800c364:	4a15      	ldr	r2, [pc, #84]	; (800c3bc <UART_SetConfig+0x118>)
 800c366:	fba2 2303 	umull	r2, r3, r2, r3
 800c36a:	095b      	lsrs	r3, r3, #5
 800c36c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c370:	4419      	add	r1, r3
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	4613      	mov	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	009a      	lsls	r2, r3, #2
 800c37c:	441a      	add	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	fbb2 f2f3 	udiv	r2, r2, r3
 800c388:	4b0c      	ldr	r3, [pc, #48]	; (800c3bc <UART_SetConfig+0x118>)
 800c38a:	fba3 0302 	umull	r0, r3, r3, r2
 800c38e:	095b      	lsrs	r3, r3, #5
 800c390:	2064      	movs	r0, #100	; 0x64
 800c392:	fb00 f303 	mul.w	r3, r0, r3
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	011b      	lsls	r3, r3, #4
 800c39a:	3332      	adds	r3, #50	; 0x32
 800c39c:	4a07      	ldr	r2, [pc, #28]	; (800c3bc <UART_SetConfig+0x118>)
 800c39e:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a2:	095b      	lsrs	r3, r3, #5
 800c3a4:	f003 020f 	and.w	r2, r3, #15
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	440a      	add	r2, r1
 800c3ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c3b0:	bf00      	nop
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	40013800 	.word	0x40013800
 800c3bc:	51eb851f 	.word	0x51eb851f

0800c3c0 <__itoa>:
 800c3c0:	1e93      	subs	r3, r2, #2
 800c3c2:	2b22      	cmp	r3, #34	; 0x22
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	d904      	bls.n	800c3d4 <__itoa+0x14>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	461c      	mov	r4, r3
 800c3ce:	700b      	strb	r3, [r1, #0]
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	bd10      	pop	{r4, pc}
 800c3d4:	2a0a      	cmp	r2, #10
 800c3d6:	d109      	bne.n	800c3ec <__itoa+0x2c>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	da07      	bge.n	800c3ec <__itoa+0x2c>
 800c3dc:	232d      	movs	r3, #45	; 0x2d
 800c3de:	700b      	strb	r3, [r1, #0]
 800c3e0:	2101      	movs	r1, #1
 800c3e2:	4240      	negs	r0, r0
 800c3e4:	4421      	add	r1, r4
 800c3e6:	f000 f90d 	bl	800c604 <__utoa>
 800c3ea:	e7f1      	b.n	800c3d0 <__itoa+0x10>
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	e7f9      	b.n	800c3e4 <__itoa+0x24>

0800c3f0 <itoa>:
 800c3f0:	f7ff bfe6 	b.w	800c3c0 <__itoa>

0800c3f4 <malloc>:
 800c3f4:	4b02      	ldr	r3, [pc, #8]	; (800c400 <malloc+0xc>)
 800c3f6:	4601      	mov	r1, r0
 800c3f8:	6818      	ldr	r0, [r3, #0]
 800c3fa:	f000 b823 	b.w	800c444 <_malloc_r>
 800c3fe:	bf00      	nop
 800c400:	2000010c 	.word	0x2000010c

0800c404 <sbrk_aligned>:
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	4e0e      	ldr	r6, [pc, #56]	; (800c440 <sbrk_aligned+0x3c>)
 800c408:	460c      	mov	r4, r1
 800c40a:	6831      	ldr	r1, [r6, #0]
 800c40c:	4605      	mov	r5, r0
 800c40e:	b911      	cbnz	r1, 800c416 <sbrk_aligned+0x12>
 800c410:	f000 f952 	bl	800c6b8 <_sbrk_r>
 800c414:	6030      	str	r0, [r6, #0]
 800c416:	4621      	mov	r1, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	f000 f94d 	bl	800c6b8 <_sbrk_r>
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	d00a      	beq.n	800c438 <sbrk_aligned+0x34>
 800c422:	1cc4      	adds	r4, r0, #3
 800c424:	f024 0403 	bic.w	r4, r4, #3
 800c428:	42a0      	cmp	r0, r4
 800c42a:	d007      	beq.n	800c43c <sbrk_aligned+0x38>
 800c42c:	1a21      	subs	r1, r4, r0
 800c42e:	4628      	mov	r0, r5
 800c430:	f000 f942 	bl	800c6b8 <_sbrk_r>
 800c434:	3001      	adds	r0, #1
 800c436:	d101      	bne.n	800c43c <sbrk_aligned+0x38>
 800c438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c43c:	4620      	mov	r0, r4
 800c43e:	bd70      	pop	{r4, r5, r6, pc}
 800c440:	200003a8 	.word	0x200003a8

0800c444 <_malloc_r>:
 800c444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c448:	1ccd      	adds	r5, r1, #3
 800c44a:	f025 0503 	bic.w	r5, r5, #3
 800c44e:	3508      	adds	r5, #8
 800c450:	2d0c      	cmp	r5, #12
 800c452:	bf38      	it	cc
 800c454:	250c      	movcc	r5, #12
 800c456:	2d00      	cmp	r5, #0
 800c458:	4607      	mov	r7, r0
 800c45a:	db01      	blt.n	800c460 <_malloc_r+0x1c>
 800c45c:	42a9      	cmp	r1, r5
 800c45e:	d905      	bls.n	800c46c <_malloc_r+0x28>
 800c460:	230c      	movs	r3, #12
 800c462:	2600      	movs	r6, #0
 800c464:	603b      	str	r3, [r7, #0]
 800c466:	4630      	mov	r0, r6
 800c468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c46c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c540 <_malloc_r+0xfc>
 800c470:	f000 f89c 	bl	800c5ac <__malloc_lock>
 800c474:	f8d8 3000 	ldr.w	r3, [r8]
 800c478:	461c      	mov	r4, r3
 800c47a:	bb5c      	cbnz	r4, 800c4d4 <_malloc_r+0x90>
 800c47c:	4629      	mov	r1, r5
 800c47e:	4638      	mov	r0, r7
 800c480:	f7ff ffc0 	bl	800c404 <sbrk_aligned>
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	4604      	mov	r4, r0
 800c488:	d155      	bne.n	800c536 <_malloc_r+0xf2>
 800c48a:	f8d8 4000 	ldr.w	r4, [r8]
 800c48e:	4626      	mov	r6, r4
 800c490:	2e00      	cmp	r6, #0
 800c492:	d145      	bne.n	800c520 <_malloc_r+0xdc>
 800c494:	2c00      	cmp	r4, #0
 800c496:	d048      	beq.n	800c52a <_malloc_r+0xe6>
 800c498:	6823      	ldr	r3, [r4, #0]
 800c49a:	4631      	mov	r1, r6
 800c49c:	4638      	mov	r0, r7
 800c49e:	eb04 0903 	add.w	r9, r4, r3
 800c4a2:	f000 f909 	bl	800c6b8 <_sbrk_r>
 800c4a6:	4581      	cmp	r9, r0
 800c4a8:	d13f      	bne.n	800c52a <_malloc_r+0xe6>
 800c4aa:	6821      	ldr	r1, [r4, #0]
 800c4ac:	4638      	mov	r0, r7
 800c4ae:	1a6d      	subs	r5, r5, r1
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	f7ff ffa7 	bl	800c404 <sbrk_aligned>
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	d037      	beq.n	800c52a <_malloc_r+0xe6>
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	442b      	add	r3, r5
 800c4be:	6023      	str	r3, [r4, #0]
 800c4c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d038      	beq.n	800c53a <_malloc_r+0xf6>
 800c4c8:	685a      	ldr	r2, [r3, #4]
 800c4ca:	42a2      	cmp	r2, r4
 800c4cc:	d12b      	bne.n	800c526 <_malloc_r+0xe2>
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	605a      	str	r2, [r3, #4]
 800c4d2:	e00f      	b.n	800c4f4 <_malloc_r+0xb0>
 800c4d4:	6822      	ldr	r2, [r4, #0]
 800c4d6:	1b52      	subs	r2, r2, r5
 800c4d8:	d41f      	bmi.n	800c51a <_malloc_r+0xd6>
 800c4da:	2a0b      	cmp	r2, #11
 800c4dc:	d917      	bls.n	800c50e <_malloc_r+0xca>
 800c4de:	1961      	adds	r1, r4, r5
 800c4e0:	42a3      	cmp	r3, r4
 800c4e2:	6025      	str	r5, [r4, #0]
 800c4e4:	bf18      	it	ne
 800c4e6:	6059      	strne	r1, [r3, #4]
 800c4e8:	6863      	ldr	r3, [r4, #4]
 800c4ea:	bf08      	it	eq
 800c4ec:	f8c8 1000 	streq.w	r1, [r8]
 800c4f0:	5162      	str	r2, [r4, r5]
 800c4f2:	604b      	str	r3, [r1, #4]
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	f104 060b 	add.w	r6, r4, #11
 800c4fa:	f000 f85d 	bl	800c5b8 <__malloc_unlock>
 800c4fe:	f026 0607 	bic.w	r6, r6, #7
 800c502:	1d23      	adds	r3, r4, #4
 800c504:	1af2      	subs	r2, r6, r3
 800c506:	d0ae      	beq.n	800c466 <_malloc_r+0x22>
 800c508:	1b9b      	subs	r3, r3, r6
 800c50a:	50a3      	str	r3, [r4, r2]
 800c50c:	e7ab      	b.n	800c466 <_malloc_r+0x22>
 800c50e:	42a3      	cmp	r3, r4
 800c510:	6862      	ldr	r2, [r4, #4]
 800c512:	d1dd      	bne.n	800c4d0 <_malloc_r+0x8c>
 800c514:	f8c8 2000 	str.w	r2, [r8]
 800c518:	e7ec      	b.n	800c4f4 <_malloc_r+0xb0>
 800c51a:	4623      	mov	r3, r4
 800c51c:	6864      	ldr	r4, [r4, #4]
 800c51e:	e7ac      	b.n	800c47a <_malloc_r+0x36>
 800c520:	4634      	mov	r4, r6
 800c522:	6876      	ldr	r6, [r6, #4]
 800c524:	e7b4      	b.n	800c490 <_malloc_r+0x4c>
 800c526:	4613      	mov	r3, r2
 800c528:	e7cc      	b.n	800c4c4 <_malloc_r+0x80>
 800c52a:	230c      	movs	r3, #12
 800c52c:	4638      	mov	r0, r7
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	f000 f842 	bl	800c5b8 <__malloc_unlock>
 800c534:	e797      	b.n	800c466 <_malloc_r+0x22>
 800c536:	6025      	str	r5, [r4, #0]
 800c538:	e7dc      	b.n	800c4f4 <_malloc_r+0xb0>
 800c53a:	605b      	str	r3, [r3, #4]
 800c53c:	deff      	udf	#255	; 0xff
 800c53e:	bf00      	nop
 800c540:	200003a4 	.word	0x200003a4

0800c544 <sniprintf>:
 800c544:	b40c      	push	{r2, r3}
 800c546:	b530      	push	{r4, r5, lr}
 800c548:	4b17      	ldr	r3, [pc, #92]	; (800c5a8 <sniprintf+0x64>)
 800c54a:	1e0c      	subs	r4, r1, #0
 800c54c:	681d      	ldr	r5, [r3, #0]
 800c54e:	b09d      	sub	sp, #116	; 0x74
 800c550:	da08      	bge.n	800c564 <sniprintf+0x20>
 800c552:	238b      	movs	r3, #139	; 0x8b
 800c554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c558:	602b      	str	r3, [r5, #0]
 800c55a:	b01d      	add	sp, #116	; 0x74
 800c55c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c560:	b002      	add	sp, #8
 800c562:	4770      	bx	lr
 800c564:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c568:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c56c:	bf0c      	ite	eq
 800c56e:	4623      	moveq	r3, r4
 800c570:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c574:	9304      	str	r3, [sp, #16]
 800c576:	9307      	str	r3, [sp, #28]
 800c578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c57c:	9002      	str	r0, [sp, #8]
 800c57e:	9006      	str	r0, [sp, #24]
 800c580:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c584:	4628      	mov	r0, r5
 800c586:	ab21      	add	r3, sp, #132	; 0x84
 800c588:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c58a:	a902      	add	r1, sp, #8
 800c58c:	9301      	str	r3, [sp, #4]
 800c58e:	f000 f979 	bl	800c884 <_svfiprintf_r>
 800c592:	1c43      	adds	r3, r0, #1
 800c594:	bfbc      	itt	lt
 800c596:	238b      	movlt	r3, #139	; 0x8b
 800c598:	602b      	strlt	r3, [r5, #0]
 800c59a:	2c00      	cmp	r4, #0
 800c59c:	d0dd      	beq.n	800c55a <sniprintf+0x16>
 800c59e:	2200      	movs	r2, #0
 800c5a0:	9b02      	ldr	r3, [sp, #8]
 800c5a2:	701a      	strb	r2, [r3, #0]
 800c5a4:	e7d9      	b.n	800c55a <sniprintf+0x16>
 800c5a6:	bf00      	nop
 800c5a8:	2000010c 	.word	0x2000010c

0800c5ac <__malloc_lock>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	; (800c5b4 <__malloc_lock+0x8>)
 800c5ae:	f000 b8bd 	b.w	800c72c <__retarget_lock_acquire_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	200004e4 	.word	0x200004e4

0800c5b8 <__malloc_unlock>:
 800c5b8:	4801      	ldr	r0, [pc, #4]	; (800c5c0 <__malloc_unlock+0x8>)
 800c5ba:	f000 b8b8 	b.w	800c72e <__retarget_lock_release_recursive>
 800c5be:	bf00      	nop
 800c5c0:	200004e4 	.word	0x200004e4

0800c5c4 <siprintf>:
 800c5c4:	b40e      	push	{r1, r2, r3}
 800c5c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5ca:	b500      	push	{lr}
 800c5cc:	b09c      	sub	sp, #112	; 0x70
 800c5ce:	ab1d      	add	r3, sp, #116	; 0x74
 800c5d0:	9002      	str	r0, [sp, #8]
 800c5d2:	9006      	str	r0, [sp, #24]
 800c5d4:	9107      	str	r1, [sp, #28]
 800c5d6:	9104      	str	r1, [sp, #16]
 800c5d8:	4808      	ldr	r0, [pc, #32]	; (800c5fc <siprintf+0x38>)
 800c5da:	4909      	ldr	r1, [pc, #36]	; (800c600 <siprintf+0x3c>)
 800c5dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e0:	9105      	str	r1, [sp, #20]
 800c5e2:	6800      	ldr	r0, [r0, #0]
 800c5e4:	a902      	add	r1, sp, #8
 800c5e6:	9301      	str	r3, [sp, #4]
 800c5e8:	f000 f94c 	bl	800c884 <_svfiprintf_r>
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	9b02      	ldr	r3, [sp, #8]
 800c5f0:	701a      	strb	r2, [r3, #0]
 800c5f2:	b01c      	add	sp, #112	; 0x70
 800c5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5f8:	b003      	add	sp, #12
 800c5fa:	4770      	bx	lr
 800c5fc:	2000010c 	.word	0x2000010c
 800c600:	ffff0208 	.word	0xffff0208

0800c604 <__utoa>:
 800c604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c606:	b08b      	sub	sp, #44	; 0x2c
 800c608:	4605      	mov	r5, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	466e      	mov	r6, sp
 800c60e:	4c1d      	ldr	r4, [pc, #116]	; (800c684 <__utoa+0x80>)
 800c610:	f104 0c20 	add.w	ip, r4, #32
 800c614:	4637      	mov	r7, r6
 800c616:	6820      	ldr	r0, [r4, #0]
 800c618:	6861      	ldr	r1, [r4, #4]
 800c61a:	3408      	adds	r4, #8
 800c61c:	c703      	stmia	r7!, {r0, r1}
 800c61e:	4564      	cmp	r4, ip
 800c620:	463e      	mov	r6, r7
 800c622:	d1f7      	bne.n	800c614 <__utoa+0x10>
 800c624:	7921      	ldrb	r1, [r4, #4]
 800c626:	6820      	ldr	r0, [r4, #0]
 800c628:	7139      	strb	r1, [r7, #4]
 800c62a:	1e91      	subs	r1, r2, #2
 800c62c:	2922      	cmp	r1, #34	; 0x22
 800c62e:	6038      	str	r0, [r7, #0]
 800c630:	f04f 0100 	mov.w	r1, #0
 800c634:	d904      	bls.n	800c640 <__utoa+0x3c>
 800c636:	7019      	strb	r1, [r3, #0]
 800c638:	460b      	mov	r3, r1
 800c63a:	4618      	mov	r0, r3
 800c63c:	b00b      	add	sp, #44	; 0x2c
 800c63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c640:	1e58      	subs	r0, r3, #1
 800c642:	4684      	mov	ip, r0
 800c644:	fbb5 f7f2 	udiv	r7, r5, r2
 800c648:	fb02 5617 	mls	r6, r2, r7, r5
 800c64c:	3628      	adds	r6, #40	; 0x28
 800c64e:	446e      	add	r6, sp
 800c650:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c654:	460c      	mov	r4, r1
 800c656:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c65a:	462e      	mov	r6, r5
 800c65c:	42b2      	cmp	r2, r6
 800c65e:	463d      	mov	r5, r7
 800c660:	f101 0101 	add.w	r1, r1, #1
 800c664:	d9ee      	bls.n	800c644 <__utoa+0x40>
 800c666:	2200      	movs	r2, #0
 800c668:	545a      	strb	r2, [r3, r1]
 800c66a:	1919      	adds	r1, r3, r4
 800c66c:	1aa5      	subs	r5, r4, r2
 800c66e:	42aa      	cmp	r2, r5
 800c670:	dae3      	bge.n	800c63a <__utoa+0x36>
 800c672:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c676:	780e      	ldrb	r6, [r1, #0]
 800c678:	3201      	adds	r2, #1
 800c67a:	7006      	strb	r6, [r0, #0]
 800c67c:	f801 5901 	strb.w	r5, [r1], #-1
 800c680:	e7f4      	b.n	800c66c <__utoa+0x68>
 800c682:	bf00      	nop
 800c684:	0800de0e 	.word	0x0800de0e

0800c688 <strcat>:
 800c688:	4602      	mov	r2, r0
 800c68a:	b510      	push	{r4, lr}
 800c68c:	7814      	ldrb	r4, [r2, #0]
 800c68e:	4613      	mov	r3, r2
 800c690:	3201      	adds	r2, #1
 800c692:	2c00      	cmp	r4, #0
 800c694:	d1fa      	bne.n	800c68c <strcat+0x4>
 800c696:	3b01      	subs	r3, #1
 800c698:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c69c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6a0:	2a00      	cmp	r2, #0
 800c6a2:	d1f9      	bne.n	800c698 <strcat+0x10>
 800c6a4:	bd10      	pop	{r4, pc}

0800c6a6 <memset>:
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	4402      	add	r2, r0
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d100      	bne.n	800c6b0 <memset+0xa>
 800c6ae:	4770      	bx	lr
 800c6b0:	f803 1b01 	strb.w	r1, [r3], #1
 800c6b4:	e7f9      	b.n	800c6aa <memset+0x4>
	...

0800c6b8 <_sbrk_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	4d05      	ldr	r5, [pc, #20]	; (800c6d4 <_sbrk_r+0x1c>)
 800c6be:	4604      	mov	r4, r0
 800c6c0:	4608      	mov	r0, r1
 800c6c2:	602b      	str	r3, [r5, #0]
 800c6c4:	f7fb ffd4 	bl	8008670 <_sbrk>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d102      	bne.n	800c6d2 <_sbrk_r+0x1a>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	b103      	cbz	r3, 800c6d2 <_sbrk_r+0x1a>
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	200004e8 	.word	0x200004e8

0800c6d8 <__errno>:
 800c6d8:	4b01      	ldr	r3, [pc, #4]	; (800c6e0 <__errno+0x8>)
 800c6da:	6818      	ldr	r0, [r3, #0]
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	2000010c 	.word	0x2000010c

0800c6e4 <__libc_init_array>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	2600      	movs	r6, #0
 800c6e8:	4d0c      	ldr	r5, [pc, #48]	; (800c71c <__libc_init_array+0x38>)
 800c6ea:	4c0d      	ldr	r4, [pc, #52]	; (800c720 <__libc_init_array+0x3c>)
 800c6ec:	1b64      	subs	r4, r4, r5
 800c6ee:	10a4      	asrs	r4, r4, #2
 800c6f0:	42a6      	cmp	r6, r4
 800c6f2:	d109      	bne.n	800c708 <__libc_init_array+0x24>
 800c6f4:	f000 fbc6 	bl	800ce84 <_init>
 800c6f8:	2600      	movs	r6, #0
 800c6fa:	4d0a      	ldr	r5, [pc, #40]	; (800c724 <__libc_init_array+0x40>)
 800c6fc:	4c0a      	ldr	r4, [pc, #40]	; (800c728 <__libc_init_array+0x44>)
 800c6fe:	1b64      	subs	r4, r4, r5
 800c700:	10a4      	asrs	r4, r4, #2
 800c702:	42a6      	cmp	r6, r4
 800c704:	d105      	bne.n	800c712 <__libc_init_array+0x2e>
 800c706:	bd70      	pop	{r4, r5, r6, pc}
 800c708:	f855 3b04 	ldr.w	r3, [r5], #4
 800c70c:	4798      	blx	r3
 800c70e:	3601      	adds	r6, #1
 800c710:	e7ee      	b.n	800c6f0 <__libc_init_array+0xc>
 800c712:	f855 3b04 	ldr.w	r3, [r5], #4
 800c716:	4798      	blx	r3
 800c718:	3601      	adds	r6, #1
 800c71a:	e7f2      	b.n	800c702 <__libc_init_array+0x1e>
 800c71c:	0800de68 	.word	0x0800de68
 800c720:	0800de68 	.word	0x0800de68
 800c724:	0800de68 	.word	0x0800de68
 800c728:	0800de6c 	.word	0x0800de6c

0800c72c <__retarget_lock_acquire_recursive>:
 800c72c:	4770      	bx	lr

0800c72e <__retarget_lock_release_recursive>:
 800c72e:	4770      	bx	lr

0800c730 <strcpy>:
 800c730:	4603      	mov	r3, r0
 800c732:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c736:	f803 2b01 	strb.w	r2, [r3], #1
 800c73a:	2a00      	cmp	r2, #0
 800c73c:	d1f9      	bne.n	800c732 <strcpy+0x2>
 800c73e:	4770      	bx	lr

0800c740 <_free_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4605      	mov	r5, r0
 800c744:	2900      	cmp	r1, #0
 800c746:	d040      	beq.n	800c7ca <_free_r+0x8a>
 800c748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c74c:	1f0c      	subs	r4, r1, #4
 800c74e:	2b00      	cmp	r3, #0
 800c750:	bfb8      	it	lt
 800c752:	18e4      	addlt	r4, r4, r3
 800c754:	f7ff ff2a 	bl	800c5ac <__malloc_lock>
 800c758:	4a1c      	ldr	r2, [pc, #112]	; (800c7cc <_free_r+0x8c>)
 800c75a:	6813      	ldr	r3, [r2, #0]
 800c75c:	b933      	cbnz	r3, 800c76c <_free_r+0x2c>
 800c75e:	6063      	str	r3, [r4, #4]
 800c760:	6014      	str	r4, [r2, #0]
 800c762:	4628      	mov	r0, r5
 800c764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c768:	f7ff bf26 	b.w	800c5b8 <__malloc_unlock>
 800c76c:	42a3      	cmp	r3, r4
 800c76e:	d908      	bls.n	800c782 <_free_r+0x42>
 800c770:	6820      	ldr	r0, [r4, #0]
 800c772:	1821      	adds	r1, r4, r0
 800c774:	428b      	cmp	r3, r1
 800c776:	bf01      	itttt	eq
 800c778:	6819      	ldreq	r1, [r3, #0]
 800c77a:	685b      	ldreq	r3, [r3, #4]
 800c77c:	1809      	addeq	r1, r1, r0
 800c77e:	6021      	streq	r1, [r4, #0]
 800c780:	e7ed      	b.n	800c75e <_free_r+0x1e>
 800c782:	461a      	mov	r2, r3
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	b10b      	cbz	r3, 800c78c <_free_r+0x4c>
 800c788:	42a3      	cmp	r3, r4
 800c78a:	d9fa      	bls.n	800c782 <_free_r+0x42>
 800c78c:	6811      	ldr	r1, [r2, #0]
 800c78e:	1850      	adds	r0, r2, r1
 800c790:	42a0      	cmp	r0, r4
 800c792:	d10b      	bne.n	800c7ac <_free_r+0x6c>
 800c794:	6820      	ldr	r0, [r4, #0]
 800c796:	4401      	add	r1, r0
 800c798:	1850      	adds	r0, r2, r1
 800c79a:	4283      	cmp	r3, r0
 800c79c:	6011      	str	r1, [r2, #0]
 800c79e:	d1e0      	bne.n	800c762 <_free_r+0x22>
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	4408      	add	r0, r1
 800c7a6:	6010      	str	r0, [r2, #0]
 800c7a8:	6053      	str	r3, [r2, #4]
 800c7aa:	e7da      	b.n	800c762 <_free_r+0x22>
 800c7ac:	d902      	bls.n	800c7b4 <_free_r+0x74>
 800c7ae:	230c      	movs	r3, #12
 800c7b0:	602b      	str	r3, [r5, #0]
 800c7b2:	e7d6      	b.n	800c762 <_free_r+0x22>
 800c7b4:	6820      	ldr	r0, [r4, #0]
 800c7b6:	1821      	adds	r1, r4, r0
 800c7b8:	428b      	cmp	r3, r1
 800c7ba:	bf01      	itttt	eq
 800c7bc:	6819      	ldreq	r1, [r3, #0]
 800c7be:	685b      	ldreq	r3, [r3, #4]
 800c7c0:	1809      	addeq	r1, r1, r0
 800c7c2:	6021      	streq	r1, [r4, #0]
 800c7c4:	6063      	str	r3, [r4, #4]
 800c7c6:	6054      	str	r4, [r2, #4]
 800c7c8:	e7cb      	b.n	800c762 <_free_r+0x22>
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	200003a4 	.word	0x200003a4

0800c7d0 <__ssputs_r>:
 800c7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d4:	461f      	mov	r7, r3
 800c7d6:	688e      	ldr	r6, [r1, #8]
 800c7d8:	4682      	mov	sl, r0
 800c7da:	42be      	cmp	r6, r7
 800c7dc:	460c      	mov	r4, r1
 800c7de:	4690      	mov	r8, r2
 800c7e0:	680b      	ldr	r3, [r1, #0]
 800c7e2:	d82c      	bhi.n	800c83e <__ssputs_r+0x6e>
 800c7e4:	898a      	ldrh	r2, [r1, #12]
 800c7e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7ea:	d026      	beq.n	800c83a <__ssputs_r+0x6a>
 800c7ec:	6965      	ldr	r5, [r4, #20]
 800c7ee:	6909      	ldr	r1, [r1, #16]
 800c7f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7f4:	eba3 0901 	sub.w	r9, r3, r1
 800c7f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7fc:	1c7b      	adds	r3, r7, #1
 800c7fe:	444b      	add	r3, r9
 800c800:	106d      	asrs	r5, r5, #1
 800c802:	429d      	cmp	r5, r3
 800c804:	bf38      	it	cc
 800c806:	461d      	movcc	r5, r3
 800c808:	0553      	lsls	r3, r2, #21
 800c80a:	d527      	bpl.n	800c85c <__ssputs_r+0x8c>
 800c80c:	4629      	mov	r1, r5
 800c80e:	f7ff fe19 	bl	800c444 <_malloc_r>
 800c812:	4606      	mov	r6, r0
 800c814:	b360      	cbz	r0, 800c870 <__ssputs_r+0xa0>
 800c816:	464a      	mov	r2, r9
 800c818:	6921      	ldr	r1, [r4, #16]
 800c81a:	f000 fb1c 	bl	800ce56 <memcpy>
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c828:	81a3      	strh	r3, [r4, #12]
 800c82a:	6126      	str	r6, [r4, #16]
 800c82c:	444e      	add	r6, r9
 800c82e:	6026      	str	r6, [r4, #0]
 800c830:	463e      	mov	r6, r7
 800c832:	6165      	str	r5, [r4, #20]
 800c834:	eba5 0509 	sub.w	r5, r5, r9
 800c838:	60a5      	str	r5, [r4, #8]
 800c83a:	42be      	cmp	r6, r7
 800c83c:	d900      	bls.n	800c840 <__ssputs_r+0x70>
 800c83e:	463e      	mov	r6, r7
 800c840:	4632      	mov	r2, r6
 800c842:	4641      	mov	r1, r8
 800c844:	6820      	ldr	r0, [r4, #0]
 800c846:	f000 fade 	bl	800ce06 <memmove>
 800c84a:	2000      	movs	r0, #0
 800c84c:	68a3      	ldr	r3, [r4, #8]
 800c84e:	1b9b      	subs	r3, r3, r6
 800c850:	60a3      	str	r3, [r4, #8]
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	4433      	add	r3, r6
 800c856:	6023      	str	r3, [r4, #0]
 800c858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c85c:	462a      	mov	r2, r5
 800c85e:	f000 faa3 	bl	800cda8 <_realloc_r>
 800c862:	4606      	mov	r6, r0
 800c864:	2800      	cmp	r0, #0
 800c866:	d1e0      	bne.n	800c82a <__ssputs_r+0x5a>
 800c868:	4650      	mov	r0, sl
 800c86a:	6921      	ldr	r1, [r4, #16]
 800c86c:	f7ff ff68 	bl	800c740 <_free_r>
 800c870:	230c      	movs	r3, #12
 800c872:	f8ca 3000 	str.w	r3, [sl]
 800c876:	89a3      	ldrh	r3, [r4, #12]
 800c878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c880:	81a3      	strh	r3, [r4, #12]
 800c882:	e7e9      	b.n	800c858 <__ssputs_r+0x88>

0800c884 <_svfiprintf_r>:
 800c884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c888:	4698      	mov	r8, r3
 800c88a:	898b      	ldrh	r3, [r1, #12]
 800c88c:	4607      	mov	r7, r0
 800c88e:	061b      	lsls	r3, r3, #24
 800c890:	460d      	mov	r5, r1
 800c892:	4614      	mov	r4, r2
 800c894:	b09d      	sub	sp, #116	; 0x74
 800c896:	d50e      	bpl.n	800c8b6 <_svfiprintf_r+0x32>
 800c898:	690b      	ldr	r3, [r1, #16]
 800c89a:	b963      	cbnz	r3, 800c8b6 <_svfiprintf_r+0x32>
 800c89c:	2140      	movs	r1, #64	; 0x40
 800c89e:	f7ff fdd1 	bl	800c444 <_malloc_r>
 800c8a2:	6028      	str	r0, [r5, #0]
 800c8a4:	6128      	str	r0, [r5, #16]
 800c8a6:	b920      	cbnz	r0, 800c8b2 <_svfiprintf_r+0x2e>
 800c8a8:	230c      	movs	r3, #12
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8b0:	e0d0      	b.n	800ca54 <_svfiprintf_r+0x1d0>
 800c8b2:	2340      	movs	r3, #64	; 0x40
 800c8b4:	616b      	str	r3, [r5, #20]
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ba:	2320      	movs	r3, #32
 800c8bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8c0:	2330      	movs	r3, #48	; 0x30
 800c8c2:	f04f 0901 	mov.w	r9, #1
 800c8c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca6c <_svfiprintf_r+0x1e8>
 800c8ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8d2:	4623      	mov	r3, r4
 800c8d4:	469a      	mov	sl, r3
 800c8d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8da:	b10a      	cbz	r2, 800c8e0 <_svfiprintf_r+0x5c>
 800c8dc:	2a25      	cmp	r2, #37	; 0x25
 800c8de:	d1f9      	bne.n	800c8d4 <_svfiprintf_r+0x50>
 800c8e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c8e4:	d00b      	beq.n	800c8fe <_svfiprintf_r+0x7a>
 800c8e6:	465b      	mov	r3, fp
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f7ff ff6f 	bl	800c7d0 <__ssputs_r>
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	f000 80a9 	beq.w	800ca4a <_svfiprintf_r+0x1c6>
 800c8f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8fa:	445a      	add	r2, fp
 800c8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c8fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 80a1 	beq.w	800ca4a <_svfiprintf_r+0x1c6>
 800c908:	2300      	movs	r3, #0
 800c90a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c90e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c912:	f10a 0a01 	add.w	sl, sl, #1
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	9307      	str	r3, [sp, #28]
 800c91a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c91e:	931a      	str	r3, [sp, #104]	; 0x68
 800c920:	4654      	mov	r4, sl
 800c922:	2205      	movs	r2, #5
 800c924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c928:	4850      	ldr	r0, [pc, #320]	; (800ca6c <_svfiprintf_r+0x1e8>)
 800c92a:	f000 fa86 	bl	800ce3a <memchr>
 800c92e:	9a04      	ldr	r2, [sp, #16]
 800c930:	b9d8      	cbnz	r0, 800c96a <_svfiprintf_r+0xe6>
 800c932:	06d0      	lsls	r0, r2, #27
 800c934:	bf44      	itt	mi
 800c936:	2320      	movmi	r3, #32
 800c938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c93c:	0711      	lsls	r1, r2, #28
 800c93e:	bf44      	itt	mi
 800c940:	232b      	movmi	r3, #43	; 0x2b
 800c942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c946:	f89a 3000 	ldrb.w	r3, [sl]
 800c94a:	2b2a      	cmp	r3, #42	; 0x2a
 800c94c:	d015      	beq.n	800c97a <_svfiprintf_r+0xf6>
 800c94e:	4654      	mov	r4, sl
 800c950:	2000      	movs	r0, #0
 800c952:	f04f 0c0a 	mov.w	ip, #10
 800c956:	9a07      	ldr	r2, [sp, #28]
 800c958:	4621      	mov	r1, r4
 800c95a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c95e:	3b30      	subs	r3, #48	; 0x30
 800c960:	2b09      	cmp	r3, #9
 800c962:	d94d      	bls.n	800ca00 <_svfiprintf_r+0x17c>
 800c964:	b1b0      	cbz	r0, 800c994 <_svfiprintf_r+0x110>
 800c966:	9207      	str	r2, [sp, #28]
 800c968:	e014      	b.n	800c994 <_svfiprintf_r+0x110>
 800c96a:	eba0 0308 	sub.w	r3, r0, r8
 800c96e:	fa09 f303 	lsl.w	r3, r9, r3
 800c972:	4313      	orrs	r3, r2
 800c974:	46a2      	mov	sl, r4
 800c976:	9304      	str	r3, [sp, #16]
 800c978:	e7d2      	b.n	800c920 <_svfiprintf_r+0x9c>
 800c97a:	9b03      	ldr	r3, [sp, #12]
 800c97c:	1d19      	adds	r1, r3, #4
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	9103      	str	r1, [sp, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	bfbb      	ittet	lt
 800c986:	425b      	neglt	r3, r3
 800c988:	f042 0202 	orrlt.w	r2, r2, #2
 800c98c:	9307      	strge	r3, [sp, #28]
 800c98e:	9307      	strlt	r3, [sp, #28]
 800c990:	bfb8      	it	lt
 800c992:	9204      	strlt	r2, [sp, #16]
 800c994:	7823      	ldrb	r3, [r4, #0]
 800c996:	2b2e      	cmp	r3, #46	; 0x2e
 800c998:	d10c      	bne.n	800c9b4 <_svfiprintf_r+0x130>
 800c99a:	7863      	ldrb	r3, [r4, #1]
 800c99c:	2b2a      	cmp	r3, #42	; 0x2a
 800c99e:	d134      	bne.n	800ca0a <_svfiprintf_r+0x186>
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	3402      	adds	r4, #2
 800c9a4:	1d1a      	adds	r2, r3, #4
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	9203      	str	r2, [sp, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	bfb8      	it	lt
 800c9ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c9b2:	9305      	str	r3, [sp, #20]
 800c9b4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca70 <_svfiprintf_r+0x1ec>
 800c9b8:	2203      	movs	r2, #3
 800c9ba:	4650      	mov	r0, sl
 800c9bc:	7821      	ldrb	r1, [r4, #0]
 800c9be:	f000 fa3c 	bl	800ce3a <memchr>
 800c9c2:	b138      	cbz	r0, 800c9d4 <_svfiprintf_r+0x150>
 800c9c4:	2240      	movs	r2, #64	; 0x40
 800c9c6:	9b04      	ldr	r3, [sp, #16]
 800c9c8:	eba0 000a 	sub.w	r0, r0, sl
 800c9cc:	4082      	lsls	r2, r0
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	3401      	adds	r4, #1
 800c9d2:	9304      	str	r3, [sp, #16]
 800c9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d8:	2206      	movs	r2, #6
 800c9da:	4826      	ldr	r0, [pc, #152]	; (800ca74 <_svfiprintf_r+0x1f0>)
 800c9dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9e0:	f000 fa2b 	bl	800ce3a <memchr>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d038      	beq.n	800ca5a <_svfiprintf_r+0x1d6>
 800c9e8:	4b23      	ldr	r3, [pc, #140]	; (800ca78 <_svfiprintf_r+0x1f4>)
 800c9ea:	bb1b      	cbnz	r3, 800ca34 <_svfiprintf_r+0x1b0>
 800c9ec:	9b03      	ldr	r3, [sp, #12]
 800c9ee:	3307      	adds	r3, #7
 800c9f0:	f023 0307 	bic.w	r3, r3, #7
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	9303      	str	r3, [sp, #12]
 800c9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fa:	4433      	add	r3, r6
 800c9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9fe:	e768      	b.n	800c8d2 <_svfiprintf_r+0x4e>
 800ca00:	460c      	mov	r4, r1
 800ca02:	2001      	movs	r0, #1
 800ca04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca08:	e7a6      	b.n	800c958 <_svfiprintf_r+0xd4>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f04f 0c0a 	mov.w	ip, #10
 800ca10:	4619      	mov	r1, r3
 800ca12:	3401      	adds	r4, #1
 800ca14:	9305      	str	r3, [sp, #20]
 800ca16:	4620      	mov	r0, r4
 800ca18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca1c:	3a30      	subs	r2, #48	; 0x30
 800ca1e:	2a09      	cmp	r2, #9
 800ca20:	d903      	bls.n	800ca2a <_svfiprintf_r+0x1a6>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d0c6      	beq.n	800c9b4 <_svfiprintf_r+0x130>
 800ca26:	9105      	str	r1, [sp, #20]
 800ca28:	e7c4      	b.n	800c9b4 <_svfiprintf_r+0x130>
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca32:	e7f0      	b.n	800ca16 <_svfiprintf_r+0x192>
 800ca34:	ab03      	add	r3, sp, #12
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	462a      	mov	r2, r5
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	4b0f      	ldr	r3, [pc, #60]	; (800ca7c <_svfiprintf_r+0x1f8>)
 800ca3e:	a904      	add	r1, sp, #16
 800ca40:	f3af 8000 	nop.w
 800ca44:	1c42      	adds	r2, r0, #1
 800ca46:	4606      	mov	r6, r0
 800ca48:	d1d6      	bne.n	800c9f8 <_svfiprintf_r+0x174>
 800ca4a:	89ab      	ldrh	r3, [r5, #12]
 800ca4c:	065b      	lsls	r3, r3, #25
 800ca4e:	f53f af2d 	bmi.w	800c8ac <_svfiprintf_r+0x28>
 800ca52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca54:	b01d      	add	sp, #116	; 0x74
 800ca56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5a:	ab03      	add	r3, sp, #12
 800ca5c:	9300      	str	r3, [sp, #0]
 800ca5e:	462a      	mov	r2, r5
 800ca60:	4638      	mov	r0, r7
 800ca62:	4b06      	ldr	r3, [pc, #24]	; (800ca7c <_svfiprintf_r+0x1f8>)
 800ca64:	a904      	add	r1, sp, #16
 800ca66:	f000 f87d 	bl	800cb64 <_printf_i>
 800ca6a:	e7eb      	b.n	800ca44 <_svfiprintf_r+0x1c0>
 800ca6c:	0800de33 	.word	0x0800de33
 800ca70:	0800de39 	.word	0x0800de39
 800ca74:	0800de3d 	.word	0x0800de3d
 800ca78:	00000000 	.word	0x00000000
 800ca7c:	0800c7d1 	.word	0x0800c7d1

0800ca80 <_printf_common>:
 800ca80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca84:	4616      	mov	r6, r2
 800ca86:	4699      	mov	r9, r3
 800ca88:	688a      	ldr	r2, [r1, #8]
 800ca8a:	690b      	ldr	r3, [r1, #16]
 800ca8c:	4607      	mov	r7, r0
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	bfb8      	it	lt
 800ca92:	4613      	movlt	r3, r2
 800ca94:	6033      	str	r3, [r6, #0]
 800ca96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca9a:	460c      	mov	r4, r1
 800ca9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800caa0:	b10a      	cbz	r2, 800caa6 <_printf_common+0x26>
 800caa2:	3301      	adds	r3, #1
 800caa4:	6033      	str	r3, [r6, #0]
 800caa6:	6823      	ldr	r3, [r4, #0]
 800caa8:	0699      	lsls	r1, r3, #26
 800caaa:	bf42      	ittt	mi
 800caac:	6833      	ldrmi	r3, [r6, #0]
 800caae:	3302      	addmi	r3, #2
 800cab0:	6033      	strmi	r3, [r6, #0]
 800cab2:	6825      	ldr	r5, [r4, #0]
 800cab4:	f015 0506 	ands.w	r5, r5, #6
 800cab8:	d106      	bne.n	800cac8 <_printf_common+0x48>
 800caba:	f104 0a19 	add.w	sl, r4, #25
 800cabe:	68e3      	ldr	r3, [r4, #12]
 800cac0:	6832      	ldr	r2, [r6, #0]
 800cac2:	1a9b      	subs	r3, r3, r2
 800cac4:	42ab      	cmp	r3, r5
 800cac6:	dc2b      	bgt.n	800cb20 <_printf_common+0xa0>
 800cac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cacc:	1e13      	subs	r3, r2, #0
 800cace:	6822      	ldr	r2, [r4, #0]
 800cad0:	bf18      	it	ne
 800cad2:	2301      	movne	r3, #1
 800cad4:	0692      	lsls	r2, r2, #26
 800cad6:	d430      	bmi.n	800cb3a <_printf_common+0xba>
 800cad8:	4649      	mov	r1, r9
 800cada:	4638      	mov	r0, r7
 800cadc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cae0:	47c0      	blx	r8
 800cae2:	3001      	adds	r0, #1
 800cae4:	d023      	beq.n	800cb2e <_printf_common+0xae>
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	6922      	ldr	r2, [r4, #16]
 800caea:	f003 0306 	and.w	r3, r3, #6
 800caee:	2b04      	cmp	r3, #4
 800caf0:	bf14      	ite	ne
 800caf2:	2500      	movne	r5, #0
 800caf4:	6833      	ldreq	r3, [r6, #0]
 800caf6:	f04f 0600 	mov.w	r6, #0
 800cafa:	bf08      	it	eq
 800cafc:	68e5      	ldreq	r5, [r4, #12]
 800cafe:	f104 041a 	add.w	r4, r4, #26
 800cb02:	bf08      	it	eq
 800cb04:	1aed      	subeq	r5, r5, r3
 800cb06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cb0a:	bf08      	it	eq
 800cb0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb10:	4293      	cmp	r3, r2
 800cb12:	bfc4      	itt	gt
 800cb14:	1a9b      	subgt	r3, r3, r2
 800cb16:	18ed      	addgt	r5, r5, r3
 800cb18:	42b5      	cmp	r5, r6
 800cb1a:	d11a      	bne.n	800cb52 <_printf_common+0xd2>
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	e008      	b.n	800cb32 <_printf_common+0xb2>
 800cb20:	2301      	movs	r3, #1
 800cb22:	4652      	mov	r2, sl
 800cb24:	4649      	mov	r1, r9
 800cb26:	4638      	mov	r0, r7
 800cb28:	47c0      	blx	r8
 800cb2a:	3001      	adds	r0, #1
 800cb2c:	d103      	bne.n	800cb36 <_printf_common+0xb6>
 800cb2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb36:	3501      	adds	r5, #1
 800cb38:	e7c1      	b.n	800cabe <_printf_common+0x3e>
 800cb3a:	2030      	movs	r0, #48	; 0x30
 800cb3c:	18e1      	adds	r1, r4, r3
 800cb3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb42:	1c5a      	adds	r2, r3, #1
 800cb44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb48:	4422      	add	r2, r4
 800cb4a:	3302      	adds	r3, #2
 800cb4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb50:	e7c2      	b.n	800cad8 <_printf_common+0x58>
 800cb52:	2301      	movs	r3, #1
 800cb54:	4622      	mov	r2, r4
 800cb56:	4649      	mov	r1, r9
 800cb58:	4638      	mov	r0, r7
 800cb5a:	47c0      	blx	r8
 800cb5c:	3001      	adds	r0, #1
 800cb5e:	d0e6      	beq.n	800cb2e <_printf_common+0xae>
 800cb60:	3601      	adds	r6, #1
 800cb62:	e7d9      	b.n	800cb18 <_printf_common+0x98>

0800cb64 <_printf_i>:
 800cb64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb68:	7e0f      	ldrb	r7, [r1, #24]
 800cb6a:	4691      	mov	r9, r2
 800cb6c:	2f78      	cmp	r7, #120	; 0x78
 800cb6e:	4680      	mov	r8, r0
 800cb70:	460c      	mov	r4, r1
 800cb72:	469a      	mov	sl, r3
 800cb74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb7a:	d807      	bhi.n	800cb8c <_printf_i+0x28>
 800cb7c:	2f62      	cmp	r7, #98	; 0x62
 800cb7e:	d80a      	bhi.n	800cb96 <_printf_i+0x32>
 800cb80:	2f00      	cmp	r7, #0
 800cb82:	f000 80d5 	beq.w	800cd30 <_printf_i+0x1cc>
 800cb86:	2f58      	cmp	r7, #88	; 0x58
 800cb88:	f000 80c1 	beq.w	800cd0e <_printf_i+0x1aa>
 800cb8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb94:	e03a      	b.n	800cc0c <_printf_i+0xa8>
 800cb96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb9a:	2b15      	cmp	r3, #21
 800cb9c:	d8f6      	bhi.n	800cb8c <_printf_i+0x28>
 800cb9e:	a101      	add	r1, pc, #4	; (adr r1, 800cba4 <_printf_i+0x40>)
 800cba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cba4:	0800cbfd 	.word	0x0800cbfd
 800cba8:	0800cc11 	.word	0x0800cc11
 800cbac:	0800cb8d 	.word	0x0800cb8d
 800cbb0:	0800cb8d 	.word	0x0800cb8d
 800cbb4:	0800cb8d 	.word	0x0800cb8d
 800cbb8:	0800cb8d 	.word	0x0800cb8d
 800cbbc:	0800cc11 	.word	0x0800cc11
 800cbc0:	0800cb8d 	.word	0x0800cb8d
 800cbc4:	0800cb8d 	.word	0x0800cb8d
 800cbc8:	0800cb8d 	.word	0x0800cb8d
 800cbcc:	0800cb8d 	.word	0x0800cb8d
 800cbd0:	0800cd17 	.word	0x0800cd17
 800cbd4:	0800cc3d 	.word	0x0800cc3d
 800cbd8:	0800ccd1 	.word	0x0800ccd1
 800cbdc:	0800cb8d 	.word	0x0800cb8d
 800cbe0:	0800cb8d 	.word	0x0800cb8d
 800cbe4:	0800cd39 	.word	0x0800cd39
 800cbe8:	0800cb8d 	.word	0x0800cb8d
 800cbec:	0800cc3d 	.word	0x0800cc3d
 800cbf0:	0800cb8d 	.word	0x0800cb8d
 800cbf4:	0800cb8d 	.word	0x0800cb8d
 800cbf8:	0800ccd9 	.word	0x0800ccd9
 800cbfc:	682b      	ldr	r3, [r5, #0]
 800cbfe:	1d1a      	adds	r2, r3, #4
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	602a      	str	r2, [r5, #0]
 800cc04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e0a0      	b.n	800cd52 <_printf_i+0x1ee>
 800cc10:	6820      	ldr	r0, [r4, #0]
 800cc12:	682b      	ldr	r3, [r5, #0]
 800cc14:	0607      	lsls	r7, r0, #24
 800cc16:	f103 0104 	add.w	r1, r3, #4
 800cc1a:	6029      	str	r1, [r5, #0]
 800cc1c:	d501      	bpl.n	800cc22 <_printf_i+0xbe>
 800cc1e:	681e      	ldr	r6, [r3, #0]
 800cc20:	e003      	b.n	800cc2a <_printf_i+0xc6>
 800cc22:	0646      	lsls	r6, r0, #25
 800cc24:	d5fb      	bpl.n	800cc1e <_printf_i+0xba>
 800cc26:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cc2a:	2e00      	cmp	r6, #0
 800cc2c:	da03      	bge.n	800cc36 <_printf_i+0xd2>
 800cc2e:	232d      	movs	r3, #45	; 0x2d
 800cc30:	4276      	negs	r6, r6
 800cc32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc36:	230a      	movs	r3, #10
 800cc38:	4859      	ldr	r0, [pc, #356]	; (800cda0 <_printf_i+0x23c>)
 800cc3a:	e012      	b.n	800cc62 <_printf_i+0xfe>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	6820      	ldr	r0, [r4, #0]
 800cc40:	1d19      	adds	r1, r3, #4
 800cc42:	6029      	str	r1, [r5, #0]
 800cc44:	0605      	lsls	r5, r0, #24
 800cc46:	d501      	bpl.n	800cc4c <_printf_i+0xe8>
 800cc48:	681e      	ldr	r6, [r3, #0]
 800cc4a:	e002      	b.n	800cc52 <_printf_i+0xee>
 800cc4c:	0641      	lsls	r1, r0, #25
 800cc4e:	d5fb      	bpl.n	800cc48 <_printf_i+0xe4>
 800cc50:	881e      	ldrh	r6, [r3, #0]
 800cc52:	2f6f      	cmp	r7, #111	; 0x6f
 800cc54:	bf0c      	ite	eq
 800cc56:	2308      	moveq	r3, #8
 800cc58:	230a      	movne	r3, #10
 800cc5a:	4851      	ldr	r0, [pc, #324]	; (800cda0 <_printf_i+0x23c>)
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc62:	6865      	ldr	r5, [r4, #4]
 800cc64:	2d00      	cmp	r5, #0
 800cc66:	bfa8      	it	ge
 800cc68:	6821      	ldrge	r1, [r4, #0]
 800cc6a:	60a5      	str	r5, [r4, #8]
 800cc6c:	bfa4      	itt	ge
 800cc6e:	f021 0104 	bicge.w	r1, r1, #4
 800cc72:	6021      	strge	r1, [r4, #0]
 800cc74:	b90e      	cbnz	r6, 800cc7a <_printf_i+0x116>
 800cc76:	2d00      	cmp	r5, #0
 800cc78:	d04b      	beq.n	800cd12 <_printf_i+0x1ae>
 800cc7a:	4615      	mov	r5, r2
 800cc7c:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc80:	fb03 6711 	mls	r7, r3, r1, r6
 800cc84:	5dc7      	ldrb	r7, [r0, r7]
 800cc86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc8a:	4637      	mov	r7, r6
 800cc8c:	42bb      	cmp	r3, r7
 800cc8e:	460e      	mov	r6, r1
 800cc90:	d9f4      	bls.n	800cc7c <_printf_i+0x118>
 800cc92:	2b08      	cmp	r3, #8
 800cc94:	d10b      	bne.n	800ccae <_printf_i+0x14a>
 800cc96:	6823      	ldr	r3, [r4, #0]
 800cc98:	07de      	lsls	r6, r3, #31
 800cc9a:	d508      	bpl.n	800ccae <_printf_i+0x14a>
 800cc9c:	6923      	ldr	r3, [r4, #16]
 800cc9e:	6861      	ldr	r1, [r4, #4]
 800cca0:	4299      	cmp	r1, r3
 800cca2:	bfde      	ittt	le
 800cca4:	2330      	movle	r3, #48	; 0x30
 800cca6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ccaa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ccae:	1b52      	subs	r2, r2, r5
 800ccb0:	6122      	str	r2, [r4, #16]
 800ccb2:	464b      	mov	r3, r9
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	4640      	mov	r0, r8
 800ccb8:	f8cd a000 	str.w	sl, [sp]
 800ccbc:	aa03      	add	r2, sp, #12
 800ccbe:	f7ff fedf 	bl	800ca80 <_printf_common>
 800ccc2:	3001      	adds	r0, #1
 800ccc4:	d14a      	bne.n	800cd5c <_printf_i+0x1f8>
 800ccc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccca:	b004      	add	sp, #16
 800cccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	f043 0320 	orr.w	r3, r3, #32
 800ccd6:	6023      	str	r3, [r4, #0]
 800ccd8:	2778      	movs	r7, #120	; 0x78
 800ccda:	4832      	ldr	r0, [pc, #200]	; (800cda4 <_printf_i+0x240>)
 800ccdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cce0:	6823      	ldr	r3, [r4, #0]
 800cce2:	6829      	ldr	r1, [r5, #0]
 800cce4:	061f      	lsls	r7, r3, #24
 800cce6:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccea:	d402      	bmi.n	800ccf2 <_printf_i+0x18e>
 800ccec:	065f      	lsls	r7, r3, #25
 800ccee:	bf48      	it	mi
 800ccf0:	b2b6      	uxthmi	r6, r6
 800ccf2:	07df      	lsls	r7, r3, #31
 800ccf4:	bf48      	it	mi
 800ccf6:	f043 0320 	orrmi.w	r3, r3, #32
 800ccfa:	6029      	str	r1, [r5, #0]
 800ccfc:	bf48      	it	mi
 800ccfe:	6023      	strmi	r3, [r4, #0]
 800cd00:	b91e      	cbnz	r6, 800cd0a <_printf_i+0x1a6>
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	f023 0320 	bic.w	r3, r3, #32
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	2310      	movs	r3, #16
 800cd0c:	e7a6      	b.n	800cc5c <_printf_i+0xf8>
 800cd0e:	4824      	ldr	r0, [pc, #144]	; (800cda0 <_printf_i+0x23c>)
 800cd10:	e7e4      	b.n	800ccdc <_printf_i+0x178>
 800cd12:	4615      	mov	r5, r2
 800cd14:	e7bd      	b.n	800cc92 <_printf_i+0x12e>
 800cd16:	682b      	ldr	r3, [r5, #0]
 800cd18:	6826      	ldr	r6, [r4, #0]
 800cd1a:	1d18      	adds	r0, r3, #4
 800cd1c:	6961      	ldr	r1, [r4, #20]
 800cd1e:	6028      	str	r0, [r5, #0]
 800cd20:	0635      	lsls	r5, r6, #24
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	d501      	bpl.n	800cd2a <_printf_i+0x1c6>
 800cd26:	6019      	str	r1, [r3, #0]
 800cd28:	e002      	b.n	800cd30 <_printf_i+0x1cc>
 800cd2a:	0670      	lsls	r0, r6, #25
 800cd2c:	d5fb      	bpl.n	800cd26 <_printf_i+0x1c2>
 800cd2e:	8019      	strh	r1, [r3, #0]
 800cd30:	2300      	movs	r3, #0
 800cd32:	4615      	mov	r5, r2
 800cd34:	6123      	str	r3, [r4, #16]
 800cd36:	e7bc      	b.n	800ccb2 <_printf_i+0x14e>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	1d1a      	adds	r2, r3, #4
 800cd3e:	602a      	str	r2, [r5, #0]
 800cd40:	681d      	ldr	r5, [r3, #0]
 800cd42:	6862      	ldr	r2, [r4, #4]
 800cd44:	4628      	mov	r0, r5
 800cd46:	f000 f878 	bl	800ce3a <memchr>
 800cd4a:	b108      	cbz	r0, 800cd50 <_printf_i+0x1ec>
 800cd4c:	1b40      	subs	r0, r0, r5
 800cd4e:	6060      	str	r0, [r4, #4]
 800cd50:	6863      	ldr	r3, [r4, #4]
 800cd52:	6123      	str	r3, [r4, #16]
 800cd54:	2300      	movs	r3, #0
 800cd56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd5a:	e7aa      	b.n	800ccb2 <_printf_i+0x14e>
 800cd5c:	462a      	mov	r2, r5
 800cd5e:	4649      	mov	r1, r9
 800cd60:	4640      	mov	r0, r8
 800cd62:	6923      	ldr	r3, [r4, #16]
 800cd64:	47d0      	blx	sl
 800cd66:	3001      	adds	r0, #1
 800cd68:	d0ad      	beq.n	800ccc6 <_printf_i+0x162>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	079b      	lsls	r3, r3, #30
 800cd6e:	d413      	bmi.n	800cd98 <_printf_i+0x234>
 800cd70:	68e0      	ldr	r0, [r4, #12]
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	4298      	cmp	r0, r3
 800cd76:	bfb8      	it	lt
 800cd78:	4618      	movlt	r0, r3
 800cd7a:	e7a6      	b.n	800ccca <_printf_i+0x166>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	4632      	mov	r2, r6
 800cd80:	4649      	mov	r1, r9
 800cd82:	4640      	mov	r0, r8
 800cd84:	47d0      	blx	sl
 800cd86:	3001      	adds	r0, #1
 800cd88:	d09d      	beq.n	800ccc6 <_printf_i+0x162>
 800cd8a:	3501      	adds	r5, #1
 800cd8c:	68e3      	ldr	r3, [r4, #12]
 800cd8e:	9903      	ldr	r1, [sp, #12]
 800cd90:	1a5b      	subs	r3, r3, r1
 800cd92:	42ab      	cmp	r3, r5
 800cd94:	dcf2      	bgt.n	800cd7c <_printf_i+0x218>
 800cd96:	e7eb      	b.n	800cd70 <_printf_i+0x20c>
 800cd98:	2500      	movs	r5, #0
 800cd9a:	f104 0619 	add.w	r6, r4, #25
 800cd9e:	e7f5      	b.n	800cd8c <_printf_i+0x228>
 800cda0:	0800de44 	.word	0x0800de44
 800cda4:	0800de55 	.word	0x0800de55

0800cda8 <_realloc_r>:
 800cda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdac:	4680      	mov	r8, r0
 800cdae:	4614      	mov	r4, r2
 800cdb0:	460e      	mov	r6, r1
 800cdb2:	b921      	cbnz	r1, 800cdbe <_realloc_r+0x16>
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdba:	f7ff bb43 	b.w	800c444 <_malloc_r>
 800cdbe:	b92a      	cbnz	r2, 800cdcc <_realloc_r+0x24>
 800cdc0:	f7ff fcbe 	bl	800c740 <_free_r>
 800cdc4:	4625      	mov	r5, r4
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdcc:	f000 f851 	bl	800ce72 <_malloc_usable_size_r>
 800cdd0:	4284      	cmp	r4, r0
 800cdd2:	4607      	mov	r7, r0
 800cdd4:	d802      	bhi.n	800cddc <_realloc_r+0x34>
 800cdd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdda:	d812      	bhi.n	800ce02 <_realloc_r+0x5a>
 800cddc:	4621      	mov	r1, r4
 800cdde:	4640      	mov	r0, r8
 800cde0:	f7ff fb30 	bl	800c444 <_malloc_r>
 800cde4:	4605      	mov	r5, r0
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d0ed      	beq.n	800cdc6 <_realloc_r+0x1e>
 800cdea:	42bc      	cmp	r4, r7
 800cdec:	4622      	mov	r2, r4
 800cdee:	4631      	mov	r1, r6
 800cdf0:	bf28      	it	cs
 800cdf2:	463a      	movcs	r2, r7
 800cdf4:	f000 f82f 	bl	800ce56 <memcpy>
 800cdf8:	4631      	mov	r1, r6
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	f7ff fca0 	bl	800c740 <_free_r>
 800ce00:	e7e1      	b.n	800cdc6 <_realloc_r+0x1e>
 800ce02:	4635      	mov	r5, r6
 800ce04:	e7df      	b.n	800cdc6 <_realloc_r+0x1e>

0800ce06 <memmove>:
 800ce06:	4288      	cmp	r0, r1
 800ce08:	b510      	push	{r4, lr}
 800ce0a:	eb01 0402 	add.w	r4, r1, r2
 800ce0e:	d902      	bls.n	800ce16 <memmove+0x10>
 800ce10:	4284      	cmp	r4, r0
 800ce12:	4623      	mov	r3, r4
 800ce14:	d807      	bhi.n	800ce26 <memmove+0x20>
 800ce16:	1e43      	subs	r3, r0, #1
 800ce18:	42a1      	cmp	r1, r4
 800ce1a:	d008      	beq.n	800ce2e <memmove+0x28>
 800ce1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce24:	e7f8      	b.n	800ce18 <memmove+0x12>
 800ce26:	4601      	mov	r1, r0
 800ce28:	4402      	add	r2, r0
 800ce2a:	428a      	cmp	r2, r1
 800ce2c:	d100      	bne.n	800ce30 <memmove+0x2a>
 800ce2e:	bd10      	pop	{r4, pc}
 800ce30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce38:	e7f7      	b.n	800ce2a <memmove+0x24>

0800ce3a <memchr>:
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	b2c9      	uxtb	r1, r1
 800ce40:	4402      	add	r2, r0
 800ce42:	4293      	cmp	r3, r2
 800ce44:	4618      	mov	r0, r3
 800ce46:	d101      	bne.n	800ce4c <memchr+0x12>
 800ce48:	2000      	movs	r0, #0
 800ce4a:	e003      	b.n	800ce54 <memchr+0x1a>
 800ce4c:	7804      	ldrb	r4, [r0, #0]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	428c      	cmp	r4, r1
 800ce52:	d1f6      	bne.n	800ce42 <memchr+0x8>
 800ce54:	bd10      	pop	{r4, pc}

0800ce56 <memcpy>:
 800ce56:	440a      	add	r2, r1
 800ce58:	4291      	cmp	r1, r2
 800ce5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce5e:	d100      	bne.n	800ce62 <memcpy+0xc>
 800ce60:	4770      	bx	lr
 800ce62:	b510      	push	{r4, lr}
 800ce64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce68:	4291      	cmp	r1, r2
 800ce6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce6e:	d1f9      	bne.n	800ce64 <memcpy+0xe>
 800ce70:	bd10      	pop	{r4, pc}

0800ce72 <_malloc_usable_size_r>:
 800ce72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce76:	1f18      	subs	r0, r3, #4
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	bfbc      	itt	lt
 800ce7c:	580b      	ldrlt	r3, [r1, r0]
 800ce7e:	18c0      	addlt	r0, r0, r3
 800ce80:	4770      	bx	lr
	...

0800ce84 <_init>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	bf00      	nop
 800ce88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8a:	bc08      	pop	{r3}
 800ce8c:	469e      	mov	lr, r3
 800ce8e:	4770      	bx	lr

0800ce90 <_fini>:
 800ce90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce92:	bf00      	nop
 800ce94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce96:	bc08      	pop	{r3}
 800ce98:	469e      	mov	lr, r3
 800ce9a:	4770      	bx	lr
