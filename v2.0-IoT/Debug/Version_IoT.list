
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb48  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800cd2c  0800cd2c  0001cd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd08  0800dd08  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd08  0800dd08  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd08  0800dd08  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd08  0800dd08  0001dd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd0c  0800dd0c  0001dd0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800dd10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000110  0800de20  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800de20  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166db  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003500  00000000  00000000  00036857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e67  00000000  00000000  0003aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0f7  00000000  00000000  000584fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eed3  00000000  00000000  000745f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d8  00000000  00000000  001134c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001187a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cd14 	.word	0x0800cd14

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	0800cd14 	.word	0x0800cd14

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fb9e 	bl	8009990 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fa16 	bl	8008688 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	20000290 	.word	0x20000290
 80004c0:	200001d9 	.word	0x200001d9
 80004c4:	20000201 	.word	0x20000201
 80004c8:	20000204 	.word	0x20000204
 80004cc:	20000205 	.word	0x20000205
 80004d0:	20000206 	.word	0x20000206
 80004d4:	20000207 	.word	0x20000207
 80004d8:	20000208 	.word	0x20000208
 80004dc:	20000209 	.word	0x20000209
 80004e0:	20000219 	.word	0x20000219
 80004e4:	2000020a 	.word	0x2000020a
 80004e8:	2000021a 	.word	0x2000021a
 80004ec:	2000020b 	.word	0x2000020b
 80004f0:	2000021b 	.word	0x2000021b
 80004f4:	2000020e 	.word	0x2000020e
 80004f8:	2000020f 	.word	0x2000020f
 80004fc:	20000210 	.word	0x20000210
 8000500:	20000211 	.word	0x20000211
 8000504:	20000212 	.word	0x20000212
 8000508:	20000213 	.word	0x20000213
 800050c:	20000214 	.word	0x20000214
 8000510:	20000215 	.word	0x20000215
 8000514:	20000216 	.word	0x20000216
 8000518:	20000217 	.word	0x20000217
 800051c:	20000218 	.word	0x20000218
 8000520:	2000021c 	.word	0x2000021c
 8000524:	2000021e 	.word	0x2000021e
 8000528:	200001fc 	.word	0x200001fc
 800052c:	200001fd 	.word	0x200001fd
 8000530:	200001fe 	.word	0x200001fe
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001ff 	.word	0x200001ff
 8000540:	20000221 	.word	0x20000221
 8000544:	2000021f 	.word	0x2000021f
 8000548:	2000020d 	.word	0x2000020d
 800054c:	20000220 	.word	0x20000220
 8000550:	2000020c 	.word	0x2000020c
 8000554:	20000222 	.word	0x20000222
 8000558:	20000223 	.word	0x20000223
 800055c:	20000224 	.word	0x20000224
 8000560:	20000225 	.word	0x20000225
 8000564:	20000226 	.word	0x20000226
 8000568:	20000227 	.word	0x20000227
 800056c:	20000228 	.word	0x20000228
 8000570:	20000229 	.word	0x20000229
 8000574:	2000022a 	.word	0x2000022a
 8000578:	2000022b 	.word	0x2000022b
 800057c:	200001d8 	.word	0x200001d8
	}

	if(kapi1AcSure>5) {
 8000580:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <eepromKontrol+0x4a4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b53      	ldr	r3, [pc, #332]	; (80006d8 <eepromKontrol+0x4a4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b53      	ldr	r3, [pc, #332]	; (80006dc <eepromKontrol+0x4a8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b51      	ldr	r3, [pc, #324]	; (80006dc <eepromKontrol+0x4a8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b50      	ldr	r3, [pc, #320]	; (80006e0 <eepromKontrol+0x4ac>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <eepromKontrol+0x4ac>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b4e      	ldr	r3, [pc, #312]	; (80006e4 <eepromKontrol+0x4b0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4c      	ldr	r3, [pc, #304]	; (80006e4 <eepromKontrol+0x4b0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4b      	ldr	r3, [pc, #300]	; (80006e8 <eepromKontrol+0x4b4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b49      	ldr	r3, [pc, #292]	; (80006e8 <eepromKontrol+0x4b4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b49      	ldr	r3, [pc, #292]	; (80006ec <eepromKontrol+0x4b8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b47      	ldr	r3, [pc, #284]	; (80006ec <eepromKontrol+0x4b8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b46      	ldr	r3, [pc, #280]	; (80006f0 <eepromKontrol+0x4bc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b44      	ldr	r3, [pc, #272]	; (80006f0 <eepromKontrol+0x4bc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b44      	ldr	r3, [pc, #272]	; (80006f4 <eepromKontrol+0x4c0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b42      	ldr	r3, [pc, #264]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b41      	ldr	r3, [pc, #260]	; (80006f8 <eepromKontrol+0x4c4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <eepromKontrol+0x4c4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <eepromKontrol+0x4c8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3d      	ldr	r3, [pc, #244]	; (80006fc <eepromKontrol+0x4c8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <eepromKontrol+0x4cc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3a      	ldr	r3, [pc, #232]	; (8000700 <eepromKontrol+0x4cc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3a      	ldr	r3, [pc, #232]	; (8000704 <eepromKontrol+0x4d0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <eepromKontrol+0x4d0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b37      	ldr	r3, [pc, #220]	; (8000708 <eepromKontrol+0x4d4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b35      	ldr	r3, [pc, #212]	; (8000708 <eepromKontrol+0x4d4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b35      	ldr	r3, [pc, #212]	; (800070c <eepromKontrol+0x4d8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b33      	ldr	r3, [pc, #204]	; (800070c <eepromKontrol+0x4d8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b32      	ldr	r3, [pc, #200]	; (8000710 <eepromKontrol+0x4dc>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b30      	ldr	r3, [pc, #192]	; (8000710 <eepromKontrol+0x4dc>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b30      	ldr	r3, [pc, #192]	; (8000714 <eepromKontrol+0x4e0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <eepromKontrol+0x4e0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <eepromKontrol+0x4e4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <eepromKontrol+0x4e4>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <eepromKontrol+0x4e8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <eepromKontrol+0x4e8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <eepromKontrol+0x4ec>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <eepromKontrol+0x4ec>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <eepromKontrol+0x4f0>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b24      	ldr	r3, [pc, #144]	; (8000724 <eepromKontrol+0x4f0>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <eepromKontrol+0x4f4>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <eepromKontrol+0x4f4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <eepromKontrol+0x4f8>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <eepromKontrol+0x4f8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	//memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
	readFromEEPROM(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f85b 	bl	8000770 <readFromEEPROM>
	HAL_Delay(200);
 80006ba:	20c8      	movs	r0, #200	; 0xc8
 80006bc:	f007 ffe4 	bl	8008688 <HAL_Delay>
	readFromEEPROM(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f855 	bl	8000770 <readFromEEPROM>
	//memcpy(wifiSSID, (char *)&eepromData[ssidStartPos], wifiCharacterLimit);
	HAL_Delay(200);
 80006c6:	20c8      	movs	r0, #200	; 0xc8
 80006c8:	f007 ffde 	bl	8008688 <HAL_Delay>
	readFromEEPROM(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f84f 	bl	8000770 <readFromEEPROM>
	//memcpy(wifiPass, (char *)&eepromData[passStartPos], wifiCharacterLimit);
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000219 	.word	0x20000219
 80006dc:	2000020a 	.word	0x2000020a
 80006e0:	2000021a 	.word	0x2000021a
 80006e4:	2000020b 	.word	0x2000020b
 80006e8:	2000020d 	.word	0x2000020d
 80006ec:	2000021b 	.word	0x2000021b
 80006f0:	2000020e 	.word	0x2000020e
 80006f4:	2000020f 	.word	0x2000020f
 80006f8:	20000210 	.word	0x20000210
 80006fc:	20000211 	.word	0x20000211
 8000700:	20000212 	.word	0x20000212
 8000704:	20000213 	.word	0x20000213
 8000708:	20000214 	.word	0x20000214
 800070c:	20000215 	.word	0x20000215
 8000710:	20000216 	.word	0x20000216
 8000714:	20000217 	.word	0x20000217
 8000718:	20000218 	.word	0x20000218
 800071c:	2000021c 	.word	0x2000021c
 8000720:	2000021e 	.word	0x2000021e
 8000724:	20000220 	.word	0x20000220
 8000728:	20000221 	.word	0x20000221
 800072c:	2000021f 	.word	0x2000021f

08000730 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <getCharFromCursorPosition+0x1c>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	781b      	ldrb	r3, [r3, #0]
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000030 	.word	0x20000030

08000750 <getIDCharFromCursorPosition>:

char getIDCharFromCursorPosition(uint8_t selectedInt) {
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	return idCharactersArray[selectedInt];
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4a03      	ldr	r2, [pc, #12]	; (800076c <getIDCharFromCursorPosition+0x1c>)
 800075e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000024 	.word	0x20000024

08000770 <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d11d      	bne.n	80007ba <readFromEEPROM+0x4a>
		int wifiSSIDTempLoc = ssidStartPos;
 800077e:	4b30      	ldr	r3, [pc, #192]	; (8000840 <readFromEEPROM+0xd0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	61fb      	str	r3, [r7, #28]
		//Wifi SSID Okuma
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	e013      	b.n	80007b2 <readFromEEPROM+0x42>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[wifiSSIDTempLoc]);
 800078a:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <readFromEEPROM+0xd4>)
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ffcc 	bl	8000730 <getCharFromCursorPosition>
 8000798:	4603      	mov	r3, r0
 800079a:	4619      	mov	r1, r3
 800079c:	4a2a      	ldr	r2, [pc, #168]	; (8000848 <readFromEEPROM+0xd8>)
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	4413      	add	r3, r2
 80007a2:	460a      	mov	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
			wifiSSIDTempLoc++;
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3301      	adds	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	3301      	adds	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	2b13      	cmp	r3, #19
 80007b6:	dde8      	ble.n	800078a <readFromEEPROM+0x1a>
		for(int i=0; i<wifiCharacterLimit; i++) {
			machineID[i] = getIDCharFromCursorPosition(eepromData[machineIDTempLoc]);
			machineIDTempLoc++;
		}
	}
}
 80007b8:	e03d      	b.n	8000836 <readFromEEPROM+0xc6>
	} else if(state == 2) {
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d11d      	bne.n	80007fc <readFromEEPROM+0x8c>
		int wifiPassTempLoc = passStartPos;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <readFromEEPROM+0xdc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	e013      	b.n	80007f4 <readFromEEPROM+0x84>
			wifiPass[i] = getCharFromCursorPosition(eepromData[wifiPassTempLoc]);
 80007cc:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <readFromEEPROM+0xd4>)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ffab 	bl	8000730 <getCharFromCursorPosition>
 80007da:	4603      	mov	r3, r0
 80007dc:	4619      	mov	r1, r3
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <readFromEEPROM+0xe0>)
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	4413      	add	r3, r2
 80007e4:	460a      	mov	r2, r1
 80007e6:	701a      	strb	r2, [r3, #0]
			wifiPassTempLoc++;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3301      	adds	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	3301      	adds	r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	2b13      	cmp	r3, #19
 80007f8:	dde8      	ble.n	80007cc <readFromEEPROM+0x5c>
}
 80007fa:	e01c      	b.n	8000836 <readFromEEPROM+0xc6>
		int machineIDTempLoc = idStartPos;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <readFromEEPROM+0xe4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	e013      	b.n	8000830 <readFromEEPROM+0xc0>
			machineID[i] = getIDCharFromCursorPosition(eepromData[machineIDTempLoc]);
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <readFromEEPROM+0xd4>)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff9d 	bl	8000750 <getIDCharFromCursorPosition>
 8000816:	4603      	mov	r3, r0
 8000818:	4619      	mov	r1, r3
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <readFromEEPROM+0xe8>)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4413      	add	r3, r2
 8000820:	460a      	mov	r2, r1
 8000822:	701a      	strb	r2, [r3, #0]
			machineIDTempLoc++;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3301      	adds	r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	3301      	adds	r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b13      	cmp	r3, #19
 8000834:	dde8      	ble.n	8000808 <readFromEEPROM+0x98>
}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008
 8000844:	2000012c 	.word	0x2000012c
 8000848:	200001b0 	.word	0x200001b0
 800084c:	2000000c 	.word	0x2000000c
 8000850:	200001c4 	.word	0x200001c4
 8000854:	20000004 	.word	0x20000004
 8000858:	200001a4 	.word	0x200001a4

0800085c <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	4613      	mov	r3, r2
 8000868:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 800086a:	68b8      	ldr	r0, [r7, #8]
 800086c:	f7ff fcda 	bl	8000224 <strlen>
 8000870:	4603      	mov	r3, r0
 8000872:	b29b      	uxth	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	68b9      	ldr	r1, [r7, #8]
 8000878:	68f8      	ldr	r0, [r7, #12]
 800087a:	f00a ffd1 	bl	800b820 <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	4618      	mov	r0, r3
 8000882:	f007 ff01 	bl	8008688 <HAL_Delay>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <sendMachineData>:
    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
    sendATCommand(huart, cmd, 2000);
}

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b0c6      	sub	sp, #280	; 0x118
 8000894:	af02      	add	r7, sp, #8
 8000896:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800089a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800089e:	6018      	str	r0, [r3, #0]
 80008a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008a8:	6019      	str	r1, [r3, #0]
 80008aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008b2:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80008b4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <sendMachineData+0xb8>)
 80008ba:	4a24      	ldr	r2, [pc, #144]	; (800094c <sendMachineData+0xbc>)
 80008bc:	21c8      	movs	r1, #200	; 0xc8
 80008be:	f00b fd89 	bl	800c3d4 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 80008c2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80008c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008ce:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	f7ff ffc2 	bl	800085c <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 80008d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008e0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80008e4:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <sendMachineData+0xc0>)
 80008e6:	9201      	str	r2, [sp, #4]
 80008e8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008ec:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80008f0:	6812      	ldr	r2, [r2, #0]
 80008f2:	9200      	str	r2, [sp, #0]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <sendMachineData+0xc4>)
 80008f8:	21c8      	movs	r1, #200	; 0xc8
 80008fa:	f00b fd6b 	bl	800c3d4 <sniprintf>
 80008fe:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 8000902:	f107 0010 	add.w	r0, r7, #16
 8000906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <sendMachineData+0xc8>)
 800090c:	2132      	movs	r1, #50	; 0x32
 800090e:	f00b fd61 	bl	800c3d4 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 8000912:	f107 0110 	add.w	r1, r7, #16
 8000916:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800091a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800091e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	f7ff ff9a 	bl	800085c <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 8000928:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800092c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000934:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	f7ff ff8f 	bl	800085c <sendATCommand>
}
 800093e:	bf00      	nop
 8000940:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	0800cd7c 	.word	0x0800cd7c
 800094c:	0800cd8c 	.word	0x0800cd8c
 8000950:	0800ce08 	.word	0x0800ce08
 8000954:	0800cdac 	.word	0x0800cdac
 8000958:	0800ce1c 	.word	0x0800ce1c

0800095c <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af04      	add	r7, sp, #16
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <hata2EEPROM+0xa4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <hata2EEPROM+0xa8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4413      	add	r3, r2
 8000972:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <hata2EEPROM+0xac>)
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800097a:	f000 f92b 	bl	8000bd4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800097e:	e000      	b.n	8000982 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000980:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	e012      	b.n	80009ae <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <hata2EEPROM+0xa8>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <hata2EEPROM+0xac>)
 8000992:	5cd3      	ldrb	r3, [r2, r3]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d107      	bne.n	80009a8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <hata2EEPROM+0xa8>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	4919      	ldr	r1, [pc, #100]	; (8000a08 <hata2EEPROM+0xac>)
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	54ca      	strb	r2, [r1, r3]
					break;
 80009a6:	e007      	b.n	80009b8 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3301      	adds	r3, #1
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <hata2EEPROM+0xa4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbe7      	blt.n	8000988 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <hata2EEPROM+0xa8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	b299      	uxth	r1, r3
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <hata2EEPROM+0xa4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	b298      	uxth	r0, r3
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <hata2EEPROM+0xa8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <hata2EEPROM+0xac>)
 80009ca:	4413      	add	r3, r2
 80009cc:	4a0c      	ldr	r2, [pc, #48]	; (8000a00 <hata2EEPROM+0xa4>)
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	b292      	uxth	r2, r2
 80009d2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80009d6:	9402      	str	r4, [sp, #8]
 80009d8:	9201      	str	r2, [sp, #4]
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	4603      	mov	r3, r0
 80009de:	460a      	mov	r2, r1
 80009e0:	21a0      	movs	r1, #160	; 0xa0
 80009e2:	480a      	ldr	r0, [pc, #40]	; (8000a0c <hata2EEPROM+0xb0>)
 80009e4:	f008 feda 	bl	800979c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80009e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ec:	f007 fe4c 	bl	8008688 <HAL_Delay>
	eepromKontrol(1);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fc1f 	bl	8000234 <eepromKontrol>
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd90      	pop	{r4, r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000ac 	.word	0x200000ac
 8000a04:	200000b0 	.word	0x200000b0
 8000a08:	2000012c 	.word	0x2000012c
 8000a0c:	20000290 	.word	0x20000290

08000a10 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d11d      	bne.n	8000a5c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000a20:	4b62      	ldr	r3, [pc, #392]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d105      	bne.n	8000a34 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000a28:	4a61      	ldr	r2, [pc, #388]	; (8000bb0 <hataKoduLcdGoster+0x1a0>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f007 f8d5 	bl	8007bdc <lcd_print>
 8000a32:	e008      	b.n	8000a46 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000a34:	4b5d      	ldr	r3, [pc, #372]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d104      	bne.n	8000a46 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000a3c:	4a5d      	ldr	r2, [pc, #372]	; (8000bb4 <hataKoduLcdGoster+0x1a4>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2001      	movs	r0, #1
 8000a42:	f007 f8cb 	bl	8007bdc <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000a46:	4a5c      	ldr	r2, [pc, #368]	; (8000bb8 <hataKoduLcdGoster+0x1a8>)
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f007 f8c6 	bl	8007bdc <lcd_print>
		lcd_print(2, 7, "          ");
 8000a50:	4a5a      	ldr	r2, [pc, #360]	; (8000bbc <hataKoduLcdGoster+0x1ac>)
 8000a52:	2107      	movs	r1, #7
 8000a54:	2002      	movs	r0, #2
 8000a56:	f007 f8c1 	bl	8007bdc <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a5a:	e0a3      	b.n	8000ba4 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d11d      	bne.n	8000a9e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000a62:	4b52      	ldr	r3, [pc, #328]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d105      	bne.n	8000a76 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000a6a:	4a51      	ldr	r2, [pc, #324]	; (8000bb0 <hataKoduLcdGoster+0x1a0>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f007 f8b4 	bl	8007bdc <lcd_print>
 8000a74:	e008      	b.n	8000a88 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000a76:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d104      	bne.n	8000a88 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000a7e:	4a4d      	ldr	r2, [pc, #308]	; (8000bb4 <hataKoduLcdGoster+0x1a4>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	2001      	movs	r0, #1
 8000a84:	f007 f8aa 	bl	8007bdc <lcd_print>
		lcd_print(2, 2, "2");
 8000a88:	4a4d      	ldr	r2, [pc, #308]	; (8000bc0 <hataKoduLcdGoster+0x1b0>)
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f007 f8a5 	bl	8007bdc <lcd_print>
		lcd_print(2, 7, "          ");
 8000a92:	4a4a      	ldr	r2, [pc, #296]	; (8000bbc <hataKoduLcdGoster+0x1ac>)
 8000a94:	2107      	movs	r1, #7
 8000a96:	2002      	movs	r0, #2
 8000a98:	f007 f8a0 	bl	8007bdc <lcd_print>
}
 8000a9c:	e082      	b.n	8000ba4 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d11d      	bne.n	8000ae0 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000aa4:	4b41      	ldr	r3, [pc, #260]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000aac:	4a40      	ldr	r2, [pc, #256]	; (8000bb0 <hataKoduLcdGoster+0x1a0>)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f007 f893 	bl	8007bdc <lcd_print>
 8000ab6:	e008      	b.n	8000aca <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000ab8:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d104      	bne.n	8000aca <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000ac0:	4a3c      	ldr	r2, [pc, #240]	; (8000bb4 <hataKoduLcdGoster+0x1a4>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f007 f889 	bl	8007bdc <lcd_print>
		lcd_print(2, 3, "3");
 8000aca:	4a3e      	ldr	r2, [pc, #248]	; (8000bc4 <hataKoduLcdGoster+0x1b4>)
 8000acc:	2103      	movs	r1, #3
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f007 f884 	bl	8007bdc <lcd_print>
		lcd_print(2, 7, "          ");
 8000ad4:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <hataKoduLcdGoster+0x1ac>)
 8000ad6:	2107      	movs	r1, #7
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f007 f87f 	bl	8007bdc <lcd_print>
}
 8000ade:	e061      	b.n	8000ba4 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	d11d      	bne.n	8000b22 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000ae6:	4b31      	ldr	r3, [pc, #196]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d105      	bne.n	8000afa <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000aee:	4a30      	ldr	r2, [pc, #192]	; (8000bb0 <hataKoduLcdGoster+0x1a0>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	2001      	movs	r0, #1
 8000af4:	f007 f872 	bl	8007bdc <lcd_print>
 8000af8:	e008      	b.n	8000b0c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000afa:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d104      	bne.n	8000b0c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000b02:	4a2c      	ldr	r2, [pc, #176]	; (8000bb4 <hataKoduLcdGoster+0x1a4>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	2001      	movs	r0, #1
 8000b08:	f007 f868 	bl	8007bdc <lcd_print>
		lcd_print(2, 4, "4");
 8000b0c:	4a2e      	ldr	r2, [pc, #184]	; (8000bc8 <hataKoduLcdGoster+0x1b8>)
 8000b0e:	2104      	movs	r1, #4
 8000b10:	2002      	movs	r0, #2
 8000b12:	f007 f863 	bl	8007bdc <lcd_print>
		lcd_print(2, 7, "          ");
 8000b16:	4a29      	ldr	r2, [pc, #164]	; (8000bbc <hataKoduLcdGoster+0x1ac>)
 8000b18:	2107      	movs	r1, #7
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f007 f85e 	bl	8007bdc <lcd_print>
}
 8000b20:	e040      	b.n	8000ba4 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b05      	cmp	r3, #5
 8000b26:	d11d      	bne.n	8000b64 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d105      	bne.n	8000b3c <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000b30:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <hataKoduLcdGoster+0x1a0>)
 8000b32:	2101      	movs	r1, #1
 8000b34:	2001      	movs	r0, #1
 8000b36:	f007 f851 	bl	8007bdc <lcd_print>
 8000b3a:	e008      	b.n	8000b4e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d104      	bne.n	8000b4e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000b44:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <hataKoduLcdGoster+0x1a4>)
 8000b46:	2101      	movs	r1, #1
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f007 f847 	bl	8007bdc <lcd_print>
		lcd_print(2, 5, "5");
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <hataKoduLcdGoster+0x1bc>)
 8000b50:	2105      	movs	r1, #5
 8000b52:	2002      	movs	r0, #2
 8000b54:	f007 f842 	bl	8007bdc <lcd_print>
		lcd_print(2, 7, "          ");
 8000b58:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <hataKoduLcdGoster+0x1ac>)
 8000b5a:	2107      	movs	r1, #7
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f007 f83d 	bl	8007bdc <lcd_print>
}
 8000b62:	e01f      	b.n	8000ba4 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d11c      	bne.n	8000ba4 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d105      	bne.n	8000b7e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <hataKoduLcdGoster+0x1a0>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	2001      	movs	r0, #1
 8000b78:	f007 f830 	bl	8007bdc <lcd_print>
 8000b7c:	e008      	b.n	8000b90 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <hataKoduLcdGoster+0x19c>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d104      	bne.n	8000b90 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <hataKoduLcdGoster+0x1a4>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f007 f826 	bl	8007bdc <lcd_print>
		lcd_print(2, 6, "6");
 8000b90:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <hataKoduLcdGoster+0x1c0>)
 8000b92:	2106      	movs	r1, #6
 8000b94:	2002      	movs	r0, #2
 8000b96:	f007 f821 	bl	8007bdc <lcd_print>
		lcd_print(2, 7, "          ");
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <hataKoduLcdGoster+0x1ac>)
 8000b9c:	2107      	movs	r1, #7
 8000b9e:	2002      	movs	r0, #2
 8000ba0:	f007 f81c 	bl	8007bdc <lcd_print>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000221 	.word	0x20000221
 8000bb0:	0800cea8 	.word	0x0800cea8
 8000bb4:	0800ceb8 	.word	0x0800ceb8
 8000bb8:	0800cec8 	.word	0x0800cec8
 8000bbc:	0800cecc 	.word	0x0800cecc
 8000bc0:	0800ced8 	.word	0x0800ced8
 8000bc4:	0800cedc 	.word	0x0800cedc
 8000bc8:	0800cee0 	.word	0x0800cee0
 8000bcc:	0800cee4 	.word	0x0800cee4
 8000bd0:	0800cee8 	.word	0x0800cee8

08000bd4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	e009      	b.n	8000bf4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <eepromDataFillWithEmpty+0x38>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <eepromDataFillWithEmpty+0x3c>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <eepromDataFillWithEmpty+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dbf0      	blt.n	8000be0 <eepromDataFillWithEmpty+0xc>
	}
}
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000084 	.word	0x20000084
 8000c10:	2000012c 	.word	0x2000012c
 8000c14:	200000ac 	.word	0x200000ac

08000c18 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c2a:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <i2cTest+0x154>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b4e      	ldr	r3, [pc, #312]	; (8000d6c <i2cTest+0x154>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0201 	bic.w	r2, r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c3a:	484c      	ldr	r0, [pc, #304]	; (8000d6c <i2cTest+0x154>)
 8000c3c:	f008 fc80 	bl	8009540 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c40:	23c0      	movs	r3, #192	; 0xc0
 8000c42:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c44:	2311      	movs	r3, #17
 8000c46:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c50:	463b      	mov	r3, r7
 8000c52:	4619      	mov	r1, r3
 8000c54:	4846      	ldr	r0, [pc, #280]	; (8000d70 <i2cTest+0x158>)
 8000c56:	f008 f887 	bl	8008d68 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2140      	movs	r1, #64	; 0x40
 8000c5e:	4844      	ldr	r0, [pc, #272]	; (8000d70 <i2cTest+0x158>)
 8000c60:	f008 faf9 	bl	8009256 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	4841      	ldr	r0, [pc, #260]	; (8000d70 <i2cTest+0x158>)
 8000c6a:	f008 faf4 	bl	8009256 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f007 fd0a 	bl	8008688 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c74:	bf00      	nop
 8000c76:	2140      	movs	r1, #64	; 0x40
 8000c78:	483d      	ldr	r0, [pc, #244]	; (8000d70 <i2cTest+0x158>)
 8000c7a:	f008 fad5 	bl	8009228 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d006      	beq.n	8000c92 <i2cTest+0x7a>
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	483a      	ldr	r0, [pc, #232]	; (8000d70 <i2cTest+0x158>)
 8000c88:	f008 face 	bl	8009228 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d1f1      	bne.n	8000c76 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4836      	ldr	r0, [pc, #216]	; (8000d70 <i2cTest+0x158>)
 8000c98:	f008 fadd 	bl	8009256 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000c9c:	200a      	movs	r0, #10
 8000c9e:	f007 fcf3 	bl	8008688 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000ca2:	bf00      	nop
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	4832      	ldr	r0, [pc, #200]	; (8000d70 <i2cTest+0x158>)
 8000ca8:	f008 fabe 	bl	8009228 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d0f8      	beq.n	8000ca4 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2140      	movs	r1, #64	; 0x40
 8000cb6:	482e      	ldr	r0, [pc, #184]	; (8000d70 <i2cTest+0x158>)
 8000cb8:	f008 facd 	bl	8009256 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cbc:	200a      	movs	r0, #10
 8000cbe:	f007 fce3 	bl	8008688 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000cc2:	bf00      	nop
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	482a      	ldr	r0, [pc, #168]	; (8000d70 <i2cTest+0x158>)
 8000cc8:	f008 faae 	bl	8009228 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d0f8      	beq.n	8000cc4 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2140      	movs	r1, #64	; 0x40
 8000cd6:	4826      	ldr	r0, [pc, #152]	; (8000d70 <i2cTest+0x158>)
 8000cd8:	f008 fabd 	bl	8009256 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f007 fcd3 	bl	8008688 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000ce2:	bf00      	nop
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	4822      	ldr	r0, [pc, #136]	; (8000d70 <i2cTest+0x158>)
 8000ce8:	f008 fa9e 	bl	8009228 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d1f8      	bne.n	8000ce4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	481e      	ldr	r0, [pc, #120]	; (8000d70 <i2cTest+0x158>)
 8000cf8:	f008 faad 	bl	8009256 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cfc:	200a      	movs	r0, #10
 8000cfe:	f007 fcc3 	bl	8008688 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d02:	bf00      	nop
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	481a      	ldr	r0, [pc, #104]	; (8000d70 <i2cTest+0x158>)
 8000d08:	f008 fa8e 	bl	8009228 <HAL_GPIO_ReadPin>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d1f8      	bne.n	8000d04 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d12:	23c0      	movs	r3, #192	; 0xc0
 8000d14:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d16:	2312      	movs	r3, #18
 8000d18:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d22:	463b      	mov	r3, r7
 8000d24:	4619      	mov	r1, r3
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <i2cTest+0x158>)
 8000d28:	f008 f81e 	bl	8008d68 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <i2cTest+0x154>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <i2cTest+0x154>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d3a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <i2cTest+0x154>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <i2cTest+0x154>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d4a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <i2cTest+0x154>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <i2cTest+0x154>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0201 	orr.w	r2, r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <i2cTest+0x154>)
 8000d5e:	f008 faab 	bl	80092b8 <HAL_I2C_Init>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000290 	.word	0x20000290
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000d7e:	20c8      	movs	r0, #200	; 0xc8
 8000d80:	f007 fc82 	bl	8008688 <HAL_Delay>
	lcd_clear();
 8000d84:	f006 ff56 	bl	8007c34 <lcd_clear>
	if(type == 1 && page == 0) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d143      	bne.n	8000e16 <printTemplate+0xa2>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d140      	bne.n	8000e16 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000d94:	4a9d      	ldr	r2, [pc, #628]	; (800100c <printTemplate+0x298>)
 8000d96:	2101      	movs	r1, #1
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f006 ff1f 	bl	8007bdc <lcd_print>
		lcd_print(2, 3, "0");
 8000d9e:	4a9c      	ldr	r2, [pc, #624]	; (8001010 <printTemplate+0x29c>)
 8000da0:	2103      	movs	r1, #3
 8000da2:	2002      	movs	r0, #2
 8000da4:	f006 ff1a 	bl	8007bdc <lcd_print>
		lcd_print(2, 4, "1");
 8000da8:	4a9a      	ldr	r2, [pc, #616]	; (8001014 <printTemplate+0x2a0>)
 8000daa:	2104      	movs	r1, #4
 8000dac:	2002      	movs	r0, #2
 8000dae:	f006 ff15 	bl	8007bdc <lcd_print>
		lcd_print(2, 5, "2");
 8000db2:	4a99      	ldr	r2, [pc, #612]	; (8001018 <printTemplate+0x2a4>)
 8000db4:	2105      	movs	r1, #5
 8000db6:	2002      	movs	r0, #2
 8000db8:	f006 ff10 	bl	8007bdc <lcd_print>
		lcd_print(2, 6, "3");
 8000dbc:	4a97      	ldr	r2, [pc, #604]	; (800101c <printTemplate+0x2a8>)
 8000dbe:	2106      	movs	r1, #6
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f006 ff0b 	bl	8007bdc <lcd_print>
		lcd_print(2, 7, "4");
 8000dc6:	4a96      	ldr	r2, [pc, #600]	; (8001020 <printTemplate+0x2ac>)
 8000dc8:	2107      	movs	r1, #7
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f006 ff06 	bl	8007bdc <lcd_print>
		lcd_print(2, 10, "5");
 8000dd0:	4a94      	ldr	r2, [pc, #592]	; (8001024 <printTemplate+0x2b0>)
 8000dd2:	210a      	movs	r1, #10
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f006 ff01 	bl	8007bdc <lcd_print>
		lcd_print(2, 11, "6");
 8000dda:	4a93      	ldr	r2, [pc, #588]	; (8001028 <printTemplate+0x2b4>)
 8000ddc:	210b      	movs	r1, #11
 8000dde:	2002      	movs	r0, #2
 8000de0:	f006 fefc 	bl	8007bdc <lcd_print>
		lcd_print(2, 12, "7");
 8000de4:	4a91      	ldr	r2, [pc, #580]	; (800102c <printTemplate+0x2b8>)
 8000de6:	210c      	movs	r1, #12
 8000de8:	2002      	movs	r0, #2
 8000dea:	f006 fef7 	bl	8007bdc <lcd_print>
		lcd_print(2, 13, "8");
 8000dee:	4a90      	ldr	r2, [pc, #576]	; (8001030 <printTemplate+0x2bc>)
 8000df0:	210d      	movs	r1, #13
 8000df2:	2002      	movs	r0, #2
 8000df4:	f006 fef2 	bl	8007bdc <lcd_print>
		lcd_print(2, 14, "9");
 8000df8:	4a8e      	ldr	r2, [pc, #568]	; (8001034 <printTemplate+0x2c0>)
 8000dfa:	210e      	movs	r1, #14
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f006 feed 	bl	8007bdc <lcd_print>
		lcd_print(1, 5, machineID);
 8000e02:	4a8d      	ldr	r2, [pc, #564]	; (8001038 <printTemplate+0x2c4>)
 8000e04:	2105      	movs	r1, #5
 8000e06:	2001      	movs	r0, #1
 8000e08:	f006 fee8 	bl	8007bdc <lcd_print>
		lcd_gotoxy(2, 3);
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f006 fec5 	bl	8007b9e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000e14:	e0f5      	b.n	8001002 <printTemplate+0x28e>
	} else if(type == 2) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d178      	bne.n	8000f0e <printTemplate+0x19a>
		if(page == 1) {
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d114      	bne.n	8000e4c <printTemplate+0xd8>
			lcd_clear();
 8000e22:	f006 ff07 	bl	8007c34 <lcd_clear>
			HAL_Delay(100);
 8000e26:	2064      	movs	r0, #100	; 0x64
 8000e28:	f007 fc2e 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e2c:	4a83      	ldr	r2, [pc, #524]	; (800103c <printTemplate+0x2c8>)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	2001      	movs	r0, #1
 8000e32:	f006 fed3 	bl	8007bdc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e36:	4a82      	ldr	r2, [pc, #520]	; (8001040 <printTemplate+0x2cc>)
 8000e38:	2107      	movs	r1, #7
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f006 fece 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e40:	4a80      	ldr	r2, [pc, #512]	; (8001044 <printTemplate+0x2d0>)
 8000e42:	2101      	movs	r1, #1
 8000e44:	2002      	movs	r0, #2
 8000e46:	f006 fec9 	bl	8007bdc <lcd_print>
}
 8000e4a:	e0da      	b.n	8001002 <printTemplate+0x28e>
		} else if(page == 2) {
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d114      	bne.n	8000e7c <printTemplate+0x108>
			lcd_clear();
 8000e52:	f006 feef 	bl	8007c34 <lcd_clear>
			HAL_Delay(100);
 8000e56:	2064      	movs	r0, #100	; 0x64
 8000e58:	f007 fc16 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e5c:	4a77      	ldr	r2, [pc, #476]	; (800103c <printTemplate+0x2c8>)
 8000e5e:	2101      	movs	r1, #1
 8000e60:	2001      	movs	r0, #1
 8000e62:	f006 febb 	bl	8007bdc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e66:	4a76      	ldr	r2, [pc, #472]	; (8001040 <printTemplate+0x2cc>)
 8000e68:	2107      	movs	r1, #7
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f006 feb6 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e70:	4a75      	ldr	r2, [pc, #468]	; (8001048 <printTemplate+0x2d4>)
 8000e72:	2101      	movs	r1, #1
 8000e74:	2002      	movs	r0, #2
 8000e76:	f006 feb1 	bl	8007bdc <lcd_print>
}
 8000e7a:	e0c2      	b.n	8001002 <printTemplate+0x28e>
		} else if(page == 3) {
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d114      	bne.n	8000eac <printTemplate+0x138>
			lcd_clear();
 8000e82:	f006 fed7 	bl	8007c34 <lcd_clear>
			HAL_Delay(100);
 8000e86:	2064      	movs	r0, #100	; 0x64
 8000e88:	f007 fbfe 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e8c:	4a6b      	ldr	r2, [pc, #428]	; (800103c <printTemplate+0x2c8>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	2001      	movs	r0, #1
 8000e92:	f006 fea3 	bl	8007bdc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e96:	4a6a      	ldr	r2, [pc, #424]	; (8001040 <printTemplate+0x2cc>)
 8000e98:	2107      	movs	r1, #7
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f006 fe9e 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000ea0:	4a6a      	ldr	r2, [pc, #424]	; (800104c <printTemplate+0x2d8>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f006 fe99 	bl	8007bdc <lcd_print>
}
 8000eaa:	e0aa      	b.n	8001002 <printTemplate+0x28e>
		} else if(page == 4) {
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	d114      	bne.n	8000edc <printTemplate+0x168>
			lcd_clear();
 8000eb2:	f006 febf 	bl	8007c34 <lcd_clear>
			HAL_Delay(100);
 8000eb6:	2064      	movs	r0, #100	; 0x64
 8000eb8:	f007 fbe6 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ebc:	4a5f      	ldr	r2, [pc, #380]	; (800103c <printTemplate+0x2c8>)
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f006 fe8b 	bl	8007bdc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ec6:	4a5e      	ldr	r2, [pc, #376]	; (8001040 <printTemplate+0x2cc>)
 8000ec8:	2107      	movs	r1, #7
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f006 fe86 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000ed0:	4a5f      	ldr	r2, [pc, #380]	; (8001050 <printTemplate+0x2dc>)
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f006 fe81 	bl	8007bdc <lcd_print>
}
 8000eda:	e092      	b.n	8001002 <printTemplate+0x28e>
		} else if(page == 5) {
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b05      	cmp	r3, #5
 8000ee0:	f040 808f 	bne.w	8001002 <printTemplate+0x28e>
			lcd_clear();
 8000ee4:	f006 fea6 	bl	8007c34 <lcd_clear>
			HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	; 0x64
 8000eea:	f007 fbcd 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000eee:	4a53      	ldr	r2, [pc, #332]	; (800103c <printTemplate+0x2c8>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f006 fe72 	bl	8007bdc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ef8:	4a51      	ldr	r2, [pc, #324]	; (8001040 <printTemplate+0x2cc>)
 8000efa:	2107      	movs	r1, #7
 8000efc:	2001      	movs	r0, #1
 8000efe:	f006 fe6d 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000f02:	4a54      	ldr	r2, [pc, #336]	; (8001054 <printTemplate+0x2e0>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	2002      	movs	r0, #2
 8000f08:	f006 fe68 	bl	8007bdc <lcd_print>
}
 8000f0c:	e079      	b.n	8001002 <printTemplate+0x28e>
	} else if(type == 3) {
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d176      	bne.n	8001002 <printTemplate+0x28e>
		if(page == 1) {
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d114      	bne.n	8000f44 <printTemplate+0x1d0>
			lcd_clear();
 8000f1a:	f006 fe8b 	bl	8007c34 <lcd_clear>
			HAL_Delay(100);
 8000f1e:	2064      	movs	r0, #100	; 0x64
 8000f20:	f007 fbb2 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f24:	4a4c      	ldr	r2, [pc, #304]	; (8001058 <printTemplate+0x2e4>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f006 fe57 	bl	8007bdc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f2e:	4a4b      	ldr	r2, [pc, #300]	; (800105c <printTemplate+0x2e8>)
 8000f30:	2107      	movs	r1, #7
 8000f32:	2001      	movs	r0, #1
 8000f34:	f006 fe52 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f38:	4a42      	ldr	r2, [pc, #264]	; (8001044 <printTemplate+0x2d0>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f006 fe4d 	bl	8007bdc <lcd_print>
}
 8000f42:	e05e      	b.n	8001002 <printTemplate+0x28e>
		} else if(page == 2) {
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d114      	bne.n	8000f74 <printTemplate+0x200>
			lcd_clear();
 8000f4a:	f006 fe73 	bl	8007c34 <lcd_clear>
			HAL_Delay(100);
 8000f4e:	2064      	movs	r0, #100	; 0x64
 8000f50:	f007 fb9a 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f54:	4a40      	ldr	r2, [pc, #256]	; (8001058 <printTemplate+0x2e4>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f006 fe3f 	bl	8007bdc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f5e:	4a3f      	ldr	r2, [pc, #252]	; (800105c <printTemplate+0x2e8>)
 8000f60:	2107      	movs	r1, #7
 8000f62:	2001      	movs	r0, #1
 8000f64:	f006 fe3a 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f68:	4a37      	ldr	r2, [pc, #220]	; (8001048 <printTemplate+0x2d4>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f006 fe35 	bl	8007bdc <lcd_print>
}
 8000f72:	e046      	b.n	8001002 <printTemplate+0x28e>
		} else if(page == 3) {
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d114      	bne.n	8000fa4 <printTemplate+0x230>
			lcd_clear();
 8000f7a:	f006 fe5b 	bl	8007c34 <lcd_clear>
			HAL_Delay(100);
 8000f7e:	2064      	movs	r0, #100	; 0x64
 8000f80:	f007 fb82 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f84:	4a34      	ldr	r2, [pc, #208]	; (8001058 <printTemplate+0x2e4>)
 8000f86:	2101      	movs	r1, #1
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f006 fe27 	bl	8007bdc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f8e:	4a33      	ldr	r2, [pc, #204]	; (800105c <printTemplate+0x2e8>)
 8000f90:	2107      	movs	r1, #7
 8000f92:	2001      	movs	r0, #1
 8000f94:	f006 fe22 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000f98:	4a2c      	ldr	r2, [pc, #176]	; (800104c <printTemplate+0x2d8>)
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f006 fe1d 	bl	8007bdc <lcd_print>
}
 8000fa2:	e02e      	b.n	8001002 <printTemplate+0x28e>
		} else if(page == 4) {
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d114      	bne.n	8000fd4 <printTemplate+0x260>
			lcd_clear();
 8000faa:	f006 fe43 	bl	8007c34 <lcd_clear>
			HAL_Delay(100);
 8000fae:	2064      	movs	r0, #100	; 0x64
 8000fb0:	f007 fb6a 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fb4:	4a28      	ldr	r2, [pc, #160]	; (8001058 <printTemplate+0x2e4>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f006 fe0f 	bl	8007bdc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fbe:	4a27      	ldr	r2, [pc, #156]	; (800105c <printTemplate+0x2e8>)
 8000fc0:	2107      	movs	r1, #7
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f006 fe0a 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <printTemplate+0x2dc>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f006 fe05 	bl	8007bdc <lcd_print>
}
 8000fd2:	e016      	b.n	8001002 <printTemplate+0x28e>
		} else if(page == 5) {
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	2b05      	cmp	r3, #5
 8000fd8:	d113      	bne.n	8001002 <printTemplate+0x28e>
			lcd_clear();
 8000fda:	f006 fe2b 	bl	8007c34 <lcd_clear>
			HAL_Delay(100);
 8000fde:	2064      	movs	r0, #100	; 0x64
 8000fe0:	f007 fb52 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <printTemplate+0x2e4>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f006 fdf7 	bl	8007bdc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <printTemplate+0x2e8>)
 8000ff0:	2107      	movs	r1, #7
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f006 fdf2 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <printTemplate+0x2e0>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f006 fded 	bl	8007bdc <lcd_print>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	0800ceec 	.word	0x0800ceec
 8001010:	0800cef4 	.word	0x0800cef4
 8001014:	0800cef8 	.word	0x0800cef8
 8001018:	0800cefc 	.word	0x0800cefc
 800101c:	0800cf00 	.word	0x0800cf00
 8001020:	0800cf04 	.word	0x0800cf04
 8001024:	0800cf08 	.word	0x0800cf08
 8001028:	0800cf0c 	.word	0x0800cf0c
 800102c:	0800cf10 	.word	0x0800cf10
 8001030:	0800cf14 	.word	0x0800cf14
 8001034:	0800cf18 	.word	0x0800cf18
 8001038:	200001a4 	.word	0x200001a4
 800103c:	0800cf1c 	.word	0x0800cf1c
 8001040:	200001b0 	.word	0x200001b0
 8001044:	0800cf24 	.word	0x0800cf24
 8001048:	0800cf38 	.word	0x0800cf38
 800104c:	0800cf4c 	.word	0x0800cf4c
 8001050:	0800cf60 	.word	0x0800cf60
 8001054:	0800cf74 	.word	0x0800cf74
 8001058:	0800cf88 	.word	0x0800cf88
 800105c:	200001c4 	.word	0x200001c4

08001060 <checkSlideVal>:

int checkSlideVal(int state) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d111      	bne.n	8001092 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800106e:	2101      	movs	r1, #1
 8001070:	4813      	ldr	r0, [pc, #76]	; (80010c0 <checkSlideVal+0x60>)
 8001072:	f008 f8d9 	bl	8009228 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <checkSlideVal+0x20>
			return 34;
 800107c:	2322      	movs	r3, #34	; 0x22
 800107e:	e01b      	b.n	80010b8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001080:	2108      	movs	r1, #8
 8001082:	4810      	ldr	r0, [pc, #64]	; (80010c4 <checkSlideVal+0x64>)
 8001084:	f008 f8d0 	bl	8009228 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	d113      	bne.n	80010b6 <checkSlideVal+0x56>
			return 32;
 800108e:	2320      	movs	r3, #32
 8001090:	e012      	b.n	80010b8 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001092:	2101      	movs	r1, #1
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <checkSlideVal+0x60>)
 8001096:	f008 f8c7 	bl	8009228 <HAL_GPIO_ReadPin>
 800109a:	4603      	mov	r3, r0
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <checkSlideVal+0x44>
			return 35;
 80010a0:	2323      	movs	r3, #35	; 0x23
 80010a2:	e009      	b.n	80010b8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010a4:	2108      	movs	r1, #8
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <checkSlideVal+0x64>)
 80010a8:	f008 f8be 	bl	8009228 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <checkSlideVal+0x56>
			return 33;
 80010b2:	2321      	movs	r3, #33	; 0x21
 80010b4:	e000      	b.n	80010b8 <checkSlideVal+0x58>
		}
	}
	return 0;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40011000 	.word	0x40011000

080010c8 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff f8a4 	bl	8000224 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80010e4:	e08a      	b.n	80011fc <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f7ff ffba 	bl	8001060 <checkSlideVal>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dd07      	ble.n	8001102 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	f7ff ffb4 	bl	8001060 <checkSlideVal>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <slideText+0x148>)
 80010fe:	701a      	strb	r2, [r3, #0]
			break;
 8001100:	e081      	b.n	8001206 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	e075      	b.n	80011f4 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001108:	6838      	ldr	r0, [r7, #0]
 800110a:	f7ff ffa9 	bl	8001060 <checkSlideVal>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	dd09      	ble.n	8001128 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001114:	6838      	ldr	r0, [r7, #0]
 8001116:	f7ff ffa3 	bl	8001060 <checkSlideVal>
 800111a:	4603      	mov	r3, r0
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b3c      	ldr	r3, [pc, #240]	; (8001210 <slideText+0x148>)
 8001120:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001126:	e069      	b.n	80011fc <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	4413      	add	r3, r2
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	e029      	b.n	8001186 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	f7ff ff94 	bl	8001060 <checkSlideVal>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	dd0b      	ble.n	8001156 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	f7ff ff8e 	bl	8001060 <checkSlideVal>
 8001144:	4603      	mov	r3, r0
 8001146:	b2da      	uxtb	r2, r3
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <slideText+0x148>)
 800114a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001154:	e01d      	b.n	8001192 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	b2d8      	uxtb	r0, r3
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	b2d9      	uxtb	r1, r3
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	461a      	mov	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	f006 fd46 	bl	8007c06 <lcd_print_char>
				HAL_Delay(30);
 800117a:	201e      	movs	r0, #30
 800117c:	f007 fa84 	bl	8008688 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	3301      	adds	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	7dfa      	ldrb	r2, [r7, #23]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4413      	add	r3, r2
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	429a      	cmp	r2, r3
 8001190:	dbcf      	blt.n	8001132 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	3b01      	subs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
 8001198:	e023      	b.n	80011e2 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800119a:	6838      	ldr	r0, [r7, #0]
 800119c:	f7ff ff60 	bl	8001060 <checkSlideVal>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	dd0b      	ble.n	80011be <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f7ff ff5a 	bl	8001060 <checkSlideVal>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <slideText+0x148>)
 80011b2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80011bc:	e017      	b.n	80011ee <slideText+0x126>
				}
			     if(j >= startPos) {
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	db0a      	blt.n	80011dc <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	b2d1      	uxtb	r1, r2
 80011ce:	2220      	movs	r2, #32
 80011d0:	4618      	mov	r0, r3
 80011d2:	f006 fd18 	bl	8007c06 <lcd_print_char>
			    	 HAL_Delay(30);
 80011d6:	201e      	movs	r0, #30
 80011d8:	f007 fa56 	bl	8008688 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	3b01      	subs	r3, #1
 80011e0:	61bb      	str	r3, [r7, #24]
 80011e2:	7dfa      	ldrb	r2, [r7, #23]
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dad5      	bge.n	800119a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	3301      	adds	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	6a3a      	ldr	r2, [r7, #32]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	db85      	blt.n	8001108 <slideText+0x40>
	while(mainLoopVal == 1) {
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	2b01      	cmp	r3, #1
 8001200:	f43f af71 	beq.w	80010e6 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000200 	.word	0x20000200

08001214 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001218:	f3bf 8f4f 	dsb	sy
}
 800121c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <__NVIC_SystemReset+0x24>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001226:	4904      	ldr	r1, [pc, #16]	; (8001238 <__NVIC_SystemReset+0x24>)
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_SystemReset+0x28>)
 800122a:	4313      	orrs	r3, r2
 800122c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800122e:	f3bf 8f4f 	dsb	sy
}
 8001232:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <__NVIC_SystemReset+0x20>
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	05fa0004 	.word	0x05fa0004

08001240 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001246:	2101      	movs	r1, #1
 8001248:	488e      	ldr	r0, [pc, #568]	; (8001484 <menu+0x244>)
 800124a:	f007 ffed 	bl	8009228 <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	f040 808e 	bne.w	8001372 <menu+0x132>
 8001256:	4b8c      	ldr	r3, [pc, #560]	; (8001488 <menu+0x248>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	f083 0301 	eor.w	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 8086 	beq.w	8001372 <menu+0x132>
		menuSayac = menuSayac+1;
 8001266:	4b89      	ldr	r3, [pc, #548]	; (800148c <menu+0x24c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4b87      	ldr	r3, [pc, #540]	; (800148c <menu+0x24c>)
 8001270:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001272:	4b86      	ldr	r3, [pc, #536]	; (800148c <menu+0x24c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b24      	cmp	r3, #36	; 0x24
 8001278:	d102      	bne.n	8001280 <menu+0x40>
			menuSayac = 1;
 800127a:	4b84      	ldr	r3, [pc, #528]	; (800148c <menu+0x24c>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001280:	4b82      	ldr	r3, [pc, #520]	; (800148c <menu+0x24c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b12      	cmp	r3, #18
 8001286:	d106      	bne.n	8001296 <menu+0x56>
 8001288:	4b81      	ldr	r3, [pc, #516]	; (8001490 <menu+0x250>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <menu+0x56>
			menuSayac = 21;
 8001290:	4b7e      	ldr	r3, [pc, #504]	; (800148c <menu+0x24c>)
 8001292:	2215      	movs	r2, #21
 8001294:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001296:	4b7d      	ldr	r3, [pc, #500]	; (800148c <menu+0x24c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b08      	cmp	r3, #8
 800129c:	d106      	bne.n	80012ac <menu+0x6c>
 800129e:	4b7d      	ldr	r3, [pc, #500]	; (8001494 <menu+0x254>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <menu+0x6c>
			menuSayac = 16;
 80012a6:	4b79      	ldr	r3, [pc, #484]	; (800148c <menu+0x24c>)
 80012a8:	2210      	movs	r2, #16
 80012aa:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80012ac:	4b77      	ldr	r3, [pc, #476]	; (800148c <menu+0x24c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b0d      	cmp	r3, #13
 80012b2:	d106      	bne.n	80012c2 <menu+0x82>
 80012b4:	4b77      	ldr	r3, [pc, #476]	; (8001494 <menu+0x254>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d102      	bne.n	80012c2 <menu+0x82>
			menuSayac = 16;
 80012bc:	4b73      	ldr	r3, [pc, #460]	; (800148c <menu+0x24c>)
 80012be:	2210      	movs	r2, #16
 80012c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80012c2:	4b72      	ldr	r3, [pc, #456]	; (800148c <menu+0x24c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	d106      	bne.n	80012d8 <menu+0x98>
 80012ca:	4b72      	ldr	r3, [pc, #456]	; (8001494 <menu+0x254>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d102      	bne.n	80012d8 <menu+0x98>
			menuSayac = 13;
 80012d2:	4b6e      	ldr	r3, [pc, #440]	; (800148c <menu+0x24c>)
 80012d4:	220d      	movs	r2, #13
 80012d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80012d8:	4b6c      	ldr	r3, [pc, #432]	; (800148c <menu+0x24c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b0a      	cmp	r3, #10
 80012de:	d10a      	bne.n	80012f6 <menu+0xb6>
 80012e0:	4b6d      	ldr	r3, [pc, #436]	; (8001498 <menu+0x258>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d003      	beq.n	80012f0 <menu+0xb0>
 80012e8:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <menu+0x258>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d102      	bne.n	80012f6 <menu+0xb6>
			menuSayac = 11;
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <menu+0x24c>)
 80012f2:	220b      	movs	r2, #11
 80012f4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80012f6:	4b65      	ldr	r3, [pc, #404]	; (800148c <menu+0x24c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b0c      	cmp	r3, #12
 80012fc:	d10e      	bne.n	800131c <menu+0xdc>
 80012fe:	4b67      	ldr	r3, [pc, #412]	; (800149c <menu+0x25c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d003      	beq.n	800130e <menu+0xce>
 8001306:	4b65      	ldr	r3, [pc, #404]	; (800149c <menu+0x25c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d106      	bne.n	800131c <menu+0xdc>
 800130e:	4b61      	ldr	r3, [pc, #388]	; (8001494 <menu+0x254>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d102      	bne.n	800131c <menu+0xdc>
			menuSayac = 16;
 8001316:	4b5d      	ldr	r3, [pc, #372]	; (800148c <menu+0x24c>)
 8001318:	2210      	movs	r2, #16
 800131a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800131c:	4b5b      	ldr	r3, [pc, #364]	; (800148c <menu+0x24c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	d10e      	bne.n	8001342 <menu+0x102>
 8001324:	4b5d      	ldr	r3, [pc, #372]	; (800149c <menu+0x25c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d003      	beq.n	8001334 <menu+0xf4>
 800132c:	4b5b      	ldr	r3, [pc, #364]	; (800149c <menu+0x25c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d106      	bne.n	8001342 <menu+0x102>
 8001334:	4b57      	ldr	r3, [pc, #348]	; (8001494 <menu+0x254>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d102      	bne.n	8001342 <menu+0x102>
			menuSayac = 13;
 800133c:	4b53      	ldr	r3, [pc, #332]	; (800148c <menu+0x24c>)
 800133e:	220d      	movs	r2, #13
 8001340:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001342:	4b52      	ldr	r3, [pc, #328]	; (800148c <menu+0x24c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	d106      	bne.n	8001358 <menu+0x118>
 800134a:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <menu+0x260>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d102      	bne.n	8001358 <menu+0x118>
			menuSayac = 16;
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <menu+0x24c>)
 8001354:	2210      	movs	r2, #16
 8001356:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001358:	4b4c      	ldr	r3, [pc, #304]	; (800148c <menu+0x24c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b18      	cmp	r3, #24
 800135e:	d106      	bne.n	800136e <menu+0x12e>
 8001360:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <menu+0x250>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <menu+0x12e>
			menuSayac = 26;
 8001368:	4b48      	ldr	r3, [pc, #288]	; (800148c <menu+0x24c>)
 800136a:	221a      	movs	r2, #26
 800136c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800136e:	f003 fb33 	bl	80049d8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001372:	2108      	movs	r1, #8
 8001374:	484b      	ldr	r0, [pc, #300]	; (80014a4 <menu+0x264>)
 8001376:	f007 ff57 	bl	8009228 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d175      	bne.n	800146c <menu+0x22c>
 8001380:	4b41      	ldr	r3, [pc, #260]	; (8001488 <menu+0x248>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d06e      	beq.n	800146c <menu+0x22c>
		if (menuSayac <= 1) {
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <menu+0x24c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d802      	bhi.n	800139c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001396:	4b3d      	ldr	r3, [pc, #244]	; (800148c <menu+0x24c>)
 8001398:	2224      	movs	r2, #36	; 0x24
 800139a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800139c:	4b3b      	ldr	r3, [pc, #236]	; (800148c <menu+0x24c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b39      	ldr	r3, [pc, #228]	; (800148c <menu+0x24c>)
 80013a6:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80013a8:	4b38      	ldr	r3, [pc, #224]	; (800148c <menu+0x24c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b14      	cmp	r3, #20
 80013ae:	d106      	bne.n	80013be <menu+0x17e>
 80013b0:	4b37      	ldr	r3, [pc, #220]	; (8001490 <menu+0x250>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <menu+0x17e>
			menuSayac = 17;
 80013b8:	4b34      	ldr	r3, [pc, #208]	; (800148c <menu+0x24c>)
 80013ba:	2211      	movs	r2, #17
 80013bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80013be:	4b33      	ldr	r3, [pc, #204]	; (800148c <menu+0x24c>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b0f      	cmp	r3, #15
 80013c4:	d106      	bne.n	80013d4 <menu+0x194>
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <menu+0x254>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <menu+0x194>
			menuSayac = 7;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <menu+0x24c>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <menu+0x24c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d106      	bne.n	80013ea <menu+0x1aa>
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <menu+0x254>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d102      	bne.n	80013ea <menu+0x1aa>
			menuSayac = 12;
 80013e4:	4b29      	ldr	r3, [pc, #164]	; (800148c <menu+0x24c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <menu+0x24c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d106      	bne.n	8001400 <menu+0x1c0>
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <menu+0x254>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d102      	bne.n	8001400 <menu+0x1c0>
			menuSayac = 8;
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <menu+0x24c>)
 80013fc:	2208      	movs	r2, #8
 80013fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <menu+0x24c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b0a      	cmp	r3, #10
 8001406:	d10a      	bne.n	800141e <menu+0x1de>
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <menu+0x258>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d003      	beq.n	8001418 <menu+0x1d8>
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <menu+0x258>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d102      	bne.n	800141e <menu+0x1de>
			menuSayac = 9;
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <menu+0x24c>)
 800141a:	2209      	movs	r2, #9
 800141c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <menu+0x24c>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d10a      	bne.n	800143c <menu+0x1fc>
 8001426:	4b1d      	ldr	r3, [pc, #116]	; (800149c <menu+0x25c>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d003      	beq.n	8001436 <menu+0x1f6>
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <menu+0x25c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d102      	bne.n	800143c <menu+0x1fc>
			menuSayac = 11;
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <menu+0x24c>)
 8001438:	220b      	movs	r2, #11
 800143a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <menu+0x24c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d106      	bne.n	8001452 <menu+0x212>
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <menu+0x260>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d102      	bne.n	8001452 <menu+0x212>
			menuSayac = 14;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <menu+0x24c>)
 800144e:	220e      	movs	r2, #14
 8001450:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <menu+0x24c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b19      	cmp	r3, #25
 8001458:	d106      	bne.n	8001468 <menu+0x228>
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <menu+0x250>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <menu+0x228>
			menuSayac = 23;
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <menu+0x24c>)
 8001464:	2217      	movs	r2, #23
 8001466:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001468:	f003 fab6 	bl	80049d8 <bekle>
	}

	if (menuSayac == 0) {
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <menu+0x24c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d133      	bne.n	80014dc <menu+0x29c>
		if(dilSecim == 0) {
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <menu+0x268>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d121      	bne.n	80014c0 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <menu+0x26c>)
 800147e:	2101      	movs	r1, #1
 8001480:	2001      	movs	r0, #1
 8001482:	e015      	b.n	80014b0 <menu+0x270>
 8001484:	40010800 	.word	0x40010800
 8001488:	2000022f 	.word	0x2000022f
 800148c:	20000200 	.word	0x20000200
 8001490:	2000020f 	.word	0x2000020f
 8001494:	20000208 	.word	0x20000208
 8001498:	20000209 	.word	0x20000209
 800149c:	2000020a 	.word	0x2000020a
 80014a0:	2000020b 	.word	0x2000020b
 80014a4:	40011000 	.word	0x40011000
 80014a8:	20000221 	.word	0x20000221
 80014ac:	0800cf90 	.word	0x0800cf90
 80014b0:	f006 fb94 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80014b4:	4a94      	ldr	r2, [pc, #592]	; (8001708 <menu+0x4c8>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	2002      	movs	r0, #2
 80014ba:	f006 fb8f 	bl	8007bdc <lcd_print>
 80014be:	e00d      	b.n	80014dc <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80014c0:	4b92      	ldr	r3, [pc, #584]	; (800170c <menu+0x4cc>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d109      	bne.n	80014dc <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80014c8:	4a91      	ldr	r2, [pc, #580]	; (8001710 <menu+0x4d0>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	2001      	movs	r0, #1
 80014ce:	f006 fb85 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80014d2:	4a90      	ldr	r2, [pc, #576]	; (8001714 <menu+0x4d4>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	2002      	movs	r0, #2
 80014d8:	f006 fb80 	bl	8007bdc <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80014dc:	4b8e      	ldr	r3, [pc, #568]	; (8001718 <menu+0x4d8>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f040 82b5 	bne.w	8001a50 <menu+0x810>
		if(dilSecim == 0) {
 80014e6:	4b89      	ldr	r3, [pc, #548]	; (800170c <menu+0x4cc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d105      	bne.n	80014fa <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80014ee:	4a8b      	ldr	r2, [pc, #556]	; (800171c <menu+0x4dc>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	2001      	movs	r0, #1
 80014f4:	f006 fb72 	bl	8007bdc <lcd_print>
 80014f8:	e008      	b.n	800150c <menu+0x2cc>
		} else if(dilSecim == 1) {
 80014fa:	4b84      	ldr	r3, [pc, #528]	; (800170c <menu+0x4cc>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d104      	bne.n	800150c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001502:	4a87      	ldr	r2, [pc, #540]	; (8001720 <menu+0x4e0>)
 8001504:	2101      	movs	r1, #1
 8001506:	2001      	movs	r0, #1
 8001508:	f006 fb68 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800150c:	4b85      	ldr	r3, [pc, #532]	; (8001724 <menu+0x4e4>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d123      	bne.n	800155c <menu+0x31c>
			if(dilSecim == 0) {
 8001514:	4b7d      	ldr	r3, [pc, #500]	; (800170c <menu+0x4cc>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800151c:	4a82      	ldr	r2, [pc, #520]	; (8001728 <menu+0x4e8>)
 800151e:	2101      	movs	r1, #1
 8001520:	2002      	movs	r0, #2
 8001522:	f006 fb5b 	bl	8007bdc <lcd_print>
 8001526:	e008      	b.n	800153a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001528:	4b78      	ldr	r3, [pc, #480]	; (800170c <menu+0x4cc>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d104      	bne.n	800153a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001530:	4a7e      	ldr	r2, [pc, #504]	; (800172c <menu+0x4ec>)
 8001532:	2101      	movs	r1, #1
 8001534:	2002      	movs	r0, #2
 8001536:	f006 fb51 	bl	8007bdc <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800153a:	4a7d      	ldr	r2, [pc, #500]	; (8001730 <menu+0x4f0>)
 800153c:	210f      	movs	r1, #15
 800153e:	2002      	movs	r0, #2
 8001540:	f006 fb4c 	bl	8007bdc <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001544:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <menu+0x4f4>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	220a      	movs	r2, #10
 800154a:	497b      	ldr	r1, [pc, #492]	; (8001738 <menu+0x4f8>)
 800154c:	4618      	mov	r0, r3
 800154e:	f00a fe97 	bl	800c280 <itoa>
			lcd_print(2, 14, snum);
 8001552:	4a79      	ldr	r2, [pc, #484]	; (8001738 <menu+0x4f8>)
 8001554:	210e      	movs	r1, #14
 8001556:	2002      	movs	r0, #2
 8001558:	f006 fb40 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800155c:	4b71      	ldr	r3, [pc, #452]	; (8001724 <menu+0x4e4>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d123      	bne.n	80015ac <menu+0x36c>
			if(dilSecim == 0) {
 8001564:	4b69      	ldr	r3, [pc, #420]	; (800170c <menu+0x4cc>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d105      	bne.n	8001578 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800156c:	4a73      	ldr	r2, [pc, #460]	; (800173c <menu+0x4fc>)
 800156e:	2101      	movs	r1, #1
 8001570:	2002      	movs	r0, #2
 8001572:	f006 fb33 	bl	8007bdc <lcd_print>
 8001576:	e008      	b.n	800158a <menu+0x34a>
			} else if(dilSecim == 1) {
 8001578:	4b64      	ldr	r3, [pc, #400]	; (800170c <menu+0x4cc>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d104      	bne.n	800158a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001580:	4a6f      	ldr	r2, [pc, #444]	; (8001740 <menu+0x500>)
 8001582:	2101      	movs	r1, #1
 8001584:	2002      	movs	r0, #2
 8001586:	f006 fb29 	bl	8007bdc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800158a:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <menu+0x504>)
 800158c:	210f      	movs	r1, #15
 800158e:	2002      	movs	r0, #2
 8001590:	f006 fb24 	bl	8007bdc <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001594:	4b6c      	ldr	r3, [pc, #432]	; (8001748 <menu+0x508>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	220a      	movs	r2, #10
 800159a:	4967      	ldr	r1, [pc, #412]	; (8001738 <menu+0x4f8>)
 800159c:	4618      	mov	r0, r3
 800159e:	f00a fe6f 	bl	800c280 <itoa>
			lcd_print(2, 14, snum);
 80015a2:	4a65      	ldr	r2, [pc, #404]	; (8001738 <menu+0x4f8>)
 80015a4:	210e      	movs	r1, #14
 80015a6:	2002      	movs	r0, #2
 80015a8:	f006 fb18 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80015ac:	4b5d      	ldr	r3, [pc, #372]	; (8001724 <menu+0x4e4>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d123      	bne.n	80015fc <menu+0x3bc>
			if(dilSecim == 0) {
 80015b4:	4b55      	ldr	r3, [pc, #340]	; (800170c <menu+0x4cc>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d105      	bne.n	80015c8 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80015bc:	4a63      	ldr	r2, [pc, #396]	; (800174c <menu+0x50c>)
 80015be:	2101      	movs	r1, #1
 80015c0:	2002      	movs	r0, #2
 80015c2:	f006 fb0b 	bl	8007bdc <lcd_print>
 80015c6:	e008      	b.n	80015da <menu+0x39a>
			} else if(dilSecim == 1) {
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <menu+0x4cc>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d104      	bne.n	80015da <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80015d0:	4a5f      	ldr	r2, [pc, #380]	; (8001750 <menu+0x510>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	2002      	movs	r0, #2
 80015d6:	f006 fb01 	bl	8007bdc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015da:	4a5a      	ldr	r2, [pc, #360]	; (8001744 <menu+0x504>)
 80015dc:	210f      	movs	r1, #15
 80015de:	2002      	movs	r0, #2
 80015e0:	f006 fafc 	bl	8007bdc <lcd_print>
			itoa(hataKayit3, snum, 10);
 80015e4:	4b5b      	ldr	r3, [pc, #364]	; (8001754 <menu+0x514>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	220a      	movs	r2, #10
 80015ea:	4953      	ldr	r1, [pc, #332]	; (8001738 <menu+0x4f8>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00a fe47 	bl	800c280 <itoa>
			lcd_print(2, 14, snum);
 80015f2:	4a51      	ldr	r2, [pc, #324]	; (8001738 <menu+0x4f8>)
 80015f4:	210e      	movs	r1, #14
 80015f6:	2002      	movs	r0, #2
 80015f8:	f006 faf0 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80015fc:	4b49      	ldr	r3, [pc, #292]	; (8001724 <menu+0x4e4>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d123      	bne.n	800164c <menu+0x40c>
			if(dilSecim == 0) {
 8001604:	4b41      	ldr	r3, [pc, #260]	; (800170c <menu+0x4cc>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d105      	bne.n	8001618 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800160c:	4a52      	ldr	r2, [pc, #328]	; (8001758 <menu+0x518>)
 800160e:	2101      	movs	r1, #1
 8001610:	2002      	movs	r0, #2
 8001612:	f006 fae3 	bl	8007bdc <lcd_print>
 8001616:	e008      	b.n	800162a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <menu+0x4cc>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d104      	bne.n	800162a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001620:	4a4e      	ldr	r2, [pc, #312]	; (800175c <menu+0x51c>)
 8001622:	2101      	movs	r1, #1
 8001624:	2002      	movs	r0, #2
 8001626:	f006 fad9 	bl	8007bdc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800162a:	4a46      	ldr	r2, [pc, #280]	; (8001744 <menu+0x504>)
 800162c:	210f      	movs	r1, #15
 800162e:	2002      	movs	r0, #2
 8001630:	f006 fad4 	bl	8007bdc <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001634:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <menu+0x520>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	220a      	movs	r2, #10
 800163a:	493f      	ldr	r1, [pc, #252]	; (8001738 <menu+0x4f8>)
 800163c:	4618      	mov	r0, r3
 800163e:	f00a fe1f 	bl	800c280 <itoa>
			lcd_print(2, 14, snum);
 8001642:	4a3d      	ldr	r2, [pc, #244]	; (8001738 <menu+0x4f8>)
 8001644:	210e      	movs	r1, #14
 8001646:	2002      	movs	r0, #2
 8001648:	f006 fac8 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800164c:	4b35      	ldr	r3, [pc, #212]	; (8001724 <menu+0x4e4>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b04      	cmp	r3, #4
 8001652:	d123      	bne.n	800169c <menu+0x45c>
			if(dilSecim == 0) {
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <menu+0x4cc>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d105      	bne.n	8001668 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800165c:	4a41      	ldr	r2, [pc, #260]	; (8001764 <menu+0x524>)
 800165e:	2101      	movs	r1, #1
 8001660:	2002      	movs	r0, #2
 8001662:	f006 fabb 	bl	8007bdc <lcd_print>
 8001666:	e008      	b.n	800167a <menu+0x43a>
			} else if(dilSecim == 1) {
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <menu+0x4cc>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d104      	bne.n	800167a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001670:	4a3d      	ldr	r2, [pc, #244]	; (8001768 <menu+0x528>)
 8001672:	2101      	movs	r1, #1
 8001674:	2002      	movs	r0, #2
 8001676:	f006 fab1 	bl	8007bdc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800167a:	4a32      	ldr	r2, [pc, #200]	; (8001744 <menu+0x504>)
 800167c:	210f      	movs	r1, #15
 800167e:	2002      	movs	r0, #2
 8001680:	f006 faac 	bl	8007bdc <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <menu+0x52c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	220a      	movs	r2, #10
 800168a:	492b      	ldr	r1, [pc, #172]	; (8001738 <menu+0x4f8>)
 800168c:	4618      	mov	r0, r3
 800168e:	f00a fdf7 	bl	800c280 <itoa>
			lcd_print(2, 14, snum);
 8001692:	4a29      	ldr	r2, [pc, #164]	; (8001738 <menu+0x4f8>)
 8001694:	210e      	movs	r1, #14
 8001696:	2002      	movs	r0, #2
 8001698:	f006 faa0 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <menu+0x4e4>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d123      	bne.n	80016ec <menu+0x4ac>
			if(dilSecim == 0) {
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <menu+0x4cc>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80016ac:	4a30      	ldr	r2, [pc, #192]	; (8001770 <menu+0x530>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	2002      	movs	r0, #2
 80016b2:	f006 fa93 	bl	8007bdc <lcd_print>
 80016b6:	e008      	b.n	80016ca <menu+0x48a>
			} else if(dilSecim == 1) {
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <menu+0x4cc>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d104      	bne.n	80016ca <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80016c0:	4a2c      	ldr	r2, [pc, #176]	; (8001774 <menu+0x534>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	2002      	movs	r0, #2
 80016c6:	f006 fa89 	bl	8007bdc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <menu+0x504>)
 80016cc:	210f      	movs	r1, #15
 80016ce:	2002      	movs	r0, #2
 80016d0:	f006 fa84 	bl	8007bdc <lcd_print>
			itoa(hataKayit6, snum, 10);
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <menu+0x538>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	220a      	movs	r2, #10
 80016da:	4917      	ldr	r1, [pc, #92]	; (8001738 <menu+0x4f8>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f00a fdcf 	bl	800c280 <itoa>
			lcd_print(2, 14, snum);
 80016e2:	4a15      	ldr	r2, [pc, #84]	; (8001738 <menu+0x4f8>)
 80016e4:	210e      	movs	r1, #14
 80016e6:	2002      	movs	r0, #2
 80016e8:	f006 fa78 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <menu+0x4e4>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b06      	cmp	r3, #6
 80016f2:	d15f      	bne.n	80017b4 <menu+0x574>
			if(dilSecim == 0) {
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <menu+0x4cc>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d141      	bne.n	8001780 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80016fc:	4a1f      	ldr	r2, [pc, #124]	; (800177c <menu+0x53c>)
 80016fe:	2101      	movs	r1, #1
 8001700:	2002      	movs	r0, #2
 8001702:	f006 fa6b 	bl	8007bdc <lcd_print>
 8001706:	e044      	b.n	8001792 <menu+0x552>
 8001708:	0800cfa4 	.word	0x0800cfa4
 800170c:	20000221 	.word	0x20000221
 8001710:	0800cfb8 	.word	0x0800cfb8
 8001714:	0800cfcc 	.word	0x0800cfcc
 8001718:	20000200 	.word	0x20000200
 800171c:	0800cfe0 	.word	0x0800cfe0
 8001720:	0800cff4 	.word	0x0800cff4
 8001724:	20000202 	.word	0x20000202
 8001728:	0800d008 	.word	0x0800d008
 800172c:	0800d018 	.word	0x0800d018
 8001730:	0800d028 	.word	0x0800d028
 8001734:	20000222 	.word	0x20000222
 8001738:	2000019c 	.word	0x2000019c
 800173c:	0800d02c 	.word	0x0800d02c
 8001740:	0800d03c 	.word	0x0800d03c
 8001744:	0800d04c 	.word	0x0800d04c
 8001748:	20000223 	.word	0x20000223
 800174c:	0800d050 	.word	0x0800d050
 8001750:	0800d060 	.word	0x0800d060
 8001754:	20000224 	.word	0x20000224
 8001758:	0800d070 	.word	0x0800d070
 800175c:	0800d080 	.word	0x0800d080
 8001760:	20000225 	.word	0x20000225
 8001764:	0800d090 	.word	0x0800d090
 8001768:	0800d0a0 	.word	0x0800d0a0
 800176c:	20000226 	.word	0x20000226
 8001770:	0800d0b0 	.word	0x0800d0b0
 8001774:	0800d0c0 	.word	0x0800d0c0
 8001778:	20000227 	.word	0x20000227
 800177c:	0800d0d0 	.word	0x0800d0d0
			} else if(dilSecim == 1) {
 8001780:	4b4f      	ldr	r3, [pc, #316]	; (80018c0 <menu+0x680>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d104      	bne.n	8001792 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001788:	4a4e      	ldr	r2, [pc, #312]	; (80018c4 <menu+0x684>)
 800178a:	2101      	movs	r1, #1
 800178c:	2002      	movs	r0, #2
 800178e:	f006 fa25 	bl	8007bdc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001792:	4a4d      	ldr	r2, [pc, #308]	; (80018c8 <menu+0x688>)
 8001794:	210f      	movs	r1, #15
 8001796:	2002      	movs	r0, #2
 8001798:	f006 fa20 	bl	8007bdc <lcd_print>
			itoa(hataKayit7, snum, 10);
 800179c:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <menu+0x68c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	220a      	movs	r2, #10
 80017a2:	494b      	ldr	r1, [pc, #300]	; (80018d0 <menu+0x690>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00a fd6b 	bl	800c280 <itoa>
			lcd_print(2, 14, snum);
 80017aa:	4a49      	ldr	r2, [pc, #292]	; (80018d0 <menu+0x690>)
 80017ac:	210e      	movs	r1, #14
 80017ae:	2002      	movs	r0, #2
 80017b0:	f006 fa14 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80017b4:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <menu+0x694>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	d123      	bne.n	8001804 <menu+0x5c4>
			if(dilSecim == 0) {
 80017bc:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <menu+0x680>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80017c4:	4a44      	ldr	r2, [pc, #272]	; (80018d8 <menu+0x698>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	2002      	movs	r0, #2
 80017ca:	f006 fa07 	bl	8007bdc <lcd_print>
 80017ce:	e008      	b.n	80017e2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 80017d0:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <menu+0x680>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d104      	bne.n	80017e2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80017d8:	4a40      	ldr	r2, [pc, #256]	; (80018dc <menu+0x69c>)
 80017da:	2101      	movs	r1, #1
 80017dc:	2002      	movs	r0, #2
 80017de:	f006 f9fd 	bl	8007bdc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017e2:	4a39      	ldr	r2, [pc, #228]	; (80018c8 <menu+0x688>)
 80017e4:	210f      	movs	r1, #15
 80017e6:	2002      	movs	r0, #2
 80017e8:	f006 f9f8 	bl	8007bdc <lcd_print>
			itoa(hataKayit8, snum, 10);
 80017ec:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <menu+0x6a0>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	220a      	movs	r2, #10
 80017f2:	4937      	ldr	r1, [pc, #220]	; (80018d0 <menu+0x690>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00a fd43 	bl	800c280 <itoa>
			lcd_print(2, 14, snum);
 80017fa:	4a35      	ldr	r2, [pc, #212]	; (80018d0 <menu+0x690>)
 80017fc:	210e      	movs	r1, #14
 80017fe:	2002      	movs	r0, #2
 8001800:	f006 f9ec 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001804:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <menu+0x694>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b08      	cmp	r3, #8
 800180a:	d123      	bne.n	8001854 <menu+0x614>
			if(dilSecim == 0) {
 800180c:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <menu+0x680>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d105      	bne.n	8001820 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001814:	4a33      	ldr	r2, [pc, #204]	; (80018e4 <menu+0x6a4>)
 8001816:	2101      	movs	r1, #1
 8001818:	2002      	movs	r0, #2
 800181a:	f006 f9df 	bl	8007bdc <lcd_print>
 800181e:	e008      	b.n	8001832 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <menu+0x680>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d104      	bne.n	8001832 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001828:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <menu+0x6a8>)
 800182a:	2101      	movs	r1, #1
 800182c:	2002      	movs	r0, #2
 800182e:	f006 f9d5 	bl	8007bdc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001832:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <menu+0x688>)
 8001834:	210f      	movs	r1, #15
 8001836:	2002      	movs	r0, #2
 8001838:	f006 f9d0 	bl	8007bdc <lcd_print>
			itoa(hataKayit9, snum, 10);
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <menu+0x6ac>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	220a      	movs	r2, #10
 8001842:	4923      	ldr	r1, [pc, #140]	; (80018d0 <menu+0x690>)
 8001844:	4618      	mov	r0, r3
 8001846:	f00a fd1b 	bl	800c280 <itoa>
			lcd_print(2, 14, snum);
 800184a:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <menu+0x690>)
 800184c:	210e      	movs	r1, #14
 800184e:	2002      	movs	r0, #2
 8001850:	f006 f9c4 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <menu+0x694>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b09      	cmp	r3, #9
 800185a:	d123      	bne.n	80018a4 <menu+0x664>
			if(dilSecim == 0) {
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <menu+0x680>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001864:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <menu+0x6b0>)
 8001866:	2101      	movs	r1, #1
 8001868:	2002      	movs	r0, #2
 800186a:	f006 f9b7 	bl	8007bdc <lcd_print>
 800186e:	e008      	b.n	8001882 <menu+0x642>
			} else if(dilSecim == 1) {
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <menu+0x680>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d104      	bne.n	8001882 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001878:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <menu+0x6b4>)
 800187a:	2101      	movs	r1, #1
 800187c:	2002      	movs	r0, #2
 800187e:	f006 f9ad 	bl	8007bdc <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001882:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <menu+0x6b8>)
 8001884:	2110      	movs	r1, #16
 8001886:	2002      	movs	r0, #2
 8001888:	f006 f9a8 	bl	8007bdc <lcd_print>
			itoa(hataKayit10, snum, 10);
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <menu+0x6bc>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	220a      	movs	r2, #10
 8001892:	490f      	ldr	r1, [pc, #60]	; (80018d0 <menu+0x690>)
 8001894:	4618      	mov	r0, r3
 8001896:	f00a fcf3 	bl	800c280 <itoa>
			lcd_print(2, 15, snum);
 800189a:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <menu+0x690>)
 800189c:	210f      	movs	r1, #15
 800189e:	2002      	movs	r0, #2
 80018a0:	f006 f99c 	bl	8007bdc <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <menu+0x694>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b0a      	cmp	r3, #10
 80018aa:	d134      	bne.n	8001916 <menu+0x6d6>
			if(dilSecim == 0) {
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <menu+0x680>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d127      	bne.n	8001904 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <menu+0x6c0>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	2002      	movs	r0, #2
 80018ba:	f006 f98f 	bl	8007bdc <lcd_print>
 80018be:	e02a      	b.n	8001916 <menu+0x6d6>
 80018c0:	20000221 	.word	0x20000221
 80018c4:	0800d0e0 	.word	0x0800d0e0
 80018c8:	0800d04c 	.word	0x0800d04c
 80018cc:	20000228 	.word	0x20000228
 80018d0:	2000019c 	.word	0x2000019c
 80018d4:	20000202 	.word	0x20000202
 80018d8:	0800d0f0 	.word	0x0800d0f0
 80018dc:	0800d100 	.word	0x0800d100
 80018e0:	20000229 	.word	0x20000229
 80018e4:	0800d110 	.word	0x0800d110
 80018e8:	0800d120 	.word	0x0800d120
 80018ec:	2000022a 	.word	0x2000022a
 80018f0:	0800d130 	.word	0x0800d130
 80018f4:	0800d140 	.word	0x0800d140
 80018f8:	0800d150 	.word	0x0800d150
 80018fc:	2000022b 	.word	0x2000022b
 8001900:	0800d154 	.word	0x0800d154
			} else if(dilSecim == 1) {
 8001904:	4b82      	ldr	r3, [pc, #520]	; (8001b10 <menu+0x8d0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d104      	bne.n	8001916 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 800190c:	4a81      	ldr	r2, [pc, #516]	; (8001b14 <menu+0x8d4>)
 800190e:	2101      	movs	r1, #1
 8001910:	2002      	movs	r0, #2
 8001912:	f006 f963 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001916:	2102      	movs	r1, #2
 8001918:	487f      	ldr	r0, [pc, #508]	; (8001b18 <menu+0x8d8>)
 800191a:	f007 fc85 	bl	8009228 <HAL_GPIO_ReadPin>
 800191e:	4603      	mov	r3, r0
 8001920:	2b01      	cmp	r3, #1
 8001922:	d119      	bne.n	8001958 <menu+0x718>
 8001924:	4b7d      	ldr	r3, [pc, #500]	; (8001b1c <menu+0x8dc>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f083 0301 	eor.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d012      	beq.n	8001958 <menu+0x718>
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <menu+0x8e0>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10e      	bne.n	8001958 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800193a:	4b7a      	ldr	r3, [pc, #488]	; (8001b24 <menu+0x8e4>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <menu+0x8e4>)
 8001944:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001946:	4b77      	ldr	r3, [pc, #476]	; (8001b24 <menu+0x8e4>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b0a      	cmp	r3, #10
 800194c:	d902      	bls.n	8001954 <menu+0x714>
				hataGostermeSirasi = 0;
 800194e:	4b75      	ldr	r3, [pc, #468]	; (8001b24 <menu+0x8e4>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001954:	f003 f840 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001958:	2104      	movs	r1, #4
 800195a:	486f      	ldr	r0, [pc, #444]	; (8001b18 <menu+0x8d8>)
 800195c:	f007 fc64 	bl	8009228 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b01      	cmp	r3, #1
 8001964:	d119      	bne.n	800199a <menu+0x75a>
 8001966:	4b6d      	ldr	r3, [pc, #436]	; (8001b1c <menu+0x8dc>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	f083 0301 	eor.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d012      	beq.n	800199a <menu+0x75a>
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <menu+0x8e0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10e      	bne.n	800199a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 800197c:	4b69      	ldr	r3, [pc, #420]	; (8001b24 <menu+0x8e4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	3b01      	subs	r3, #1
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b67      	ldr	r3, [pc, #412]	; (8001b24 <menu+0x8e4>)
 8001986:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001988:	4b66      	ldr	r3, [pc, #408]	; (8001b24 <menu+0x8e4>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b0b      	cmp	r3, #11
 800198e:	d902      	bls.n	8001996 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001990:	4b64      	ldr	r3, [pc, #400]	; (8001b24 <menu+0x8e4>)
 8001992:	220a      	movs	r2, #10
 8001994:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001996:	f003 f81f 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800199a:	2108      	movs	r1, #8
 800199c:	485e      	ldr	r0, [pc, #376]	; (8001b18 <menu+0x8d8>)
 800199e:	f007 fc43 	bl	8009228 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d153      	bne.n	8001a50 <menu+0x810>
 80019a8:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <menu+0x8dc>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	f083 0301 	eor.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d04c      	beq.n	8001a50 <menu+0x810>
 80019b6:	4b5b      	ldr	r3, [pc, #364]	; (8001b24 <menu+0x8e4>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b0a      	cmp	r3, #10
 80019bc:	d148      	bne.n	8001a50 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <menu+0x8e8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <menu+0x8ec>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80019cc:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <menu+0x8f0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	4b56      	ldr	r3, [pc, #344]	; (8001b2c <menu+0x8ec>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80019da:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <menu+0x8f4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	4b52      	ldr	r3, [pc, #328]	; (8001b2c <menu+0x8ec>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80019e8:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <menu+0x8f8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <menu+0x8ec>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80019f6:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <menu+0x8fc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	4b4b      	ldr	r3, [pc, #300]	; (8001b2c <menu+0x8ec>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001a04:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <menu+0x900>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
 8001a0a:	4b48      	ldr	r3, [pc, #288]	; (8001b2c <menu+0x8ec>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001a12:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <menu+0x904>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <menu+0x8ec>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001a20:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <menu+0x908>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <menu+0x8ec>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <menu+0x90c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <menu+0x8ec>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001a3c:	4b44      	ldr	r3, [pc, #272]	; (8001b50 <menu+0x910>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <menu+0x8ec>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001a4a:	4b42      	ldr	r3, [pc, #264]	; (8001b54 <menu+0x914>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001a50:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <menu+0x918>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	f040 80fc 	bne.w	8001c52 <menu+0xa12>
		if(dilSecim == 0) {
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <menu+0x8d0>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001a62:	4a3e      	ldr	r2, [pc, #248]	; (8001b5c <menu+0x91c>)
 8001a64:	2101      	movs	r1, #1
 8001a66:	2001      	movs	r0, #1
 8001a68:	f006 f8b8 	bl	8007bdc <lcd_print>
 8001a6c:	e008      	b.n	8001a80 <menu+0x840>
		} else if(dilSecim == 1) {
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <menu+0x8d0>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d104      	bne.n	8001a80 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001a76:	4a3a      	ldr	r2, [pc, #232]	; (8001b60 <menu+0x920>)
 8001a78:	2101      	movs	r1, #1
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f006 f8ae 	bl	8007bdc <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <menu+0x8e0>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d003      	beq.n	8001a90 <menu+0x850>
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <menu+0x8e0>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d112      	bne.n	8001ab6 <menu+0x876>
			if(dilSecim == 0) {
 8001a90:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <menu+0x8d0>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d105      	bne.n	8001aa4 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001a98:	4a32      	ldr	r2, [pc, #200]	; (8001b64 <menu+0x924>)
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f006 f89d 	bl	8007bdc <lcd_print>
 8001aa2:	e008      	b.n	8001ab6 <menu+0x876>
			} else if(dilSecim == 1) {
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <menu+0x8d0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d104      	bne.n	8001ab6 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001aac:	4a2e      	ldr	r2, [pc, #184]	; (8001b68 <menu+0x928>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f006 f893 	bl	8007bdc <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <menu+0x92c>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d116      	bne.n	8001aec <menu+0x8ac>
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <menu+0x8e0>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d112      	bne.n	8001aec <menu+0x8ac>
			if(dilSecim == 0) {
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <menu+0x8d0>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d105      	bne.n	8001ada <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001ace:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <menu+0x930>)
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	f006 f882 	bl	8007bdc <lcd_print>
 8001ad8:	e008      	b.n	8001aec <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <menu+0x8d0>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d104      	bne.n	8001aec <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001ae2:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <menu+0x934>)
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f006 f878 	bl	8007bdc <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <menu+0x92c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d14c      	bne.n	8001b8e <menu+0x94e>
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <menu+0x8e0>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d148      	bne.n	8001b8e <menu+0x94e>
			if(dilSecim == 0) {
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <menu+0x8d0>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d13b      	bne.n	8001b7c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <menu+0x938>)
 8001b06:	2101      	movs	r1, #1
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f006 f867 	bl	8007bdc <lcd_print>
 8001b0e:	e03e      	b.n	8001b8e <menu+0x94e>
 8001b10:	20000221 	.word	0x20000221
 8001b14:	0800d168 	.word	0x0800d168
 8001b18:	40010800 	.word	0x40010800
 8001b1c:	2000022f 	.word	0x2000022f
 8001b20:	2000020f 	.word	0x2000020f
 8001b24:	20000202 	.word	0x20000202
 8001b28:	20000222 	.word	0x20000222
 8001b2c:	2000012c 	.word	0x2000012c
 8001b30:	20000223 	.word	0x20000223
 8001b34:	20000224 	.word	0x20000224
 8001b38:	20000225 	.word	0x20000225
 8001b3c:	20000226 	.word	0x20000226
 8001b40:	20000227 	.word	0x20000227
 8001b44:	20000228 	.word	0x20000228
 8001b48:	20000229 	.word	0x20000229
 8001b4c:	2000022a 	.word	0x2000022a
 8001b50:	2000022b 	.word	0x2000022b
 8001b54:	2000022c 	.word	0x2000022c
 8001b58:	20000200 	.word	0x20000200
 8001b5c:	0800d17c 	.word	0x0800d17c
 8001b60:	0800d190 	.word	0x0800d190
 8001b64:	0800d1a4 	.word	0x0800d1a4
 8001b68:	0800d1b8 	.word	0x0800d1b8
 8001b6c:	20000201 	.word	0x20000201
 8001b70:	0800d1cc 	.word	0x0800d1cc
 8001b74:	0800d1dc 	.word	0x0800d1dc
 8001b78:	0800d1ec 	.word	0x0800d1ec
			} else if(dilSecim == 1) {
 8001b7c:	4b98      	ldr	r3, [pc, #608]	; (8001de0 <menu+0xba0>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d104      	bne.n	8001b8e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001b84:	4a97      	ldr	r2, [pc, #604]	; (8001de4 <menu+0xba4>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	2002      	movs	r0, #2
 8001b8a:	f006 f827 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b8e:	2102      	movs	r1, #2
 8001b90:	4895      	ldr	r0, [pc, #596]	; (8001de8 <menu+0xba8>)
 8001b92:	f007 fb49 	bl	8009228 <HAL_GPIO_ReadPin>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d119      	bne.n	8001bd0 <menu+0x990>
 8001b9c:	4b93      	ldr	r3, [pc, #588]	; (8001dec <menu+0xbac>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f083 0301 	eor.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d012      	beq.n	8001bd0 <menu+0x990>
 8001baa:	4b91      	ldr	r3, [pc, #580]	; (8001df0 <menu+0xbb0>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10e      	bne.n	8001bd0 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001bb2:	4b90      	ldr	r3, [pc, #576]	; (8001df4 <menu+0xbb4>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b8e      	ldr	r3, [pc, #568]	; (8001df4 <menu+0xbb4>)
 8001bbc:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001bbe:	4b8d      	ldr	r3, [pc, #564]	; (8001df4 <menu+0xbb4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d902      	bls.n	8001bcc <menu+0x98c>
				calismaSekli = 0;
 8001bc6:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <menu+0xbb4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bcc:	f002 ff04 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	4885      	ldr	r0, [pc, #532]	; (8001de8 <menu+0xba8>)
 8001bd4:	f007 fb28 	bl	8009228 <HAL_GPIO_ReadPin>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d119      	bne.n	8001c12 <menu+0x9d2>
 8001bde:	4b83      	ldr	r3, [pc, #524]	; (8001dec <menu+0xbac>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	f083 0301 	eor.w	r3, r3, #1
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d012      	beq.n	8001c12 <menu+0x9d2>
 8001bec:	4b80      	ldr	r3, [pc, #512]	; (8001df0 <menu+0xbb0>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10e      	bne.n	8001c12 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001bf4:	4b7f      	ldr	r3, [pc, #508]	; (8001df4 <menu+0xbb4>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b7d      	ldr	r3, [pc, #500]	; (8001df4 <menu+0xbb4>)
 8001bfe:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001c00:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <menu+0xbb4>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <menu+0x9ce>
	    		calismaSekli = 1;
 8001c08:	4b7a      	ldr	r3, [pc, #488]	; (8001df4 <menu+0xbb4>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c0e:	f002 fee3 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c12:	2108      	movs	r1, #8
 8001c14:	4874      	ldr	r0, [pc, #464]	; (8001de8 <menu+0xba8>)
 8001c16:	f007 fb07 	bl	8009228 <HAL_GPIO_ReadPin>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d118      	bne.n	8001c52 <menu+0xa12>
 8001c20:	4b72      	ldr	r3, [pc, #456]	; (8001dec <menu+0xbac>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	f083 0301 	eor.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d011      	beq.n	8001c52 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001c2e:	4b71      	ldr	r3, [pc, #452]	; (8001df4 <menu+0xbb4>)
 8001c30:	781a      	ldrb	r2, [r3, #0]
 8001c32:	4b71      	ldr	r3, [pc, #452]	; (8001df8 <menu+0xbb8>)
 8001c34:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001c36:	4b6f      	ldr	r3, [pc, #444]	; (8001df4 <menu+0xbb4>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d106      	bne.n	8001c4c <menu+0xa0c>
				altLimit = 1;
 8001c3e:	4b6f      	ldr	r3, [pc, #444]	; (8001dfc <menu+0xbbc>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001c44:	4b6d      	ldr	r3, [pc, #436]	; (8001dfc <menu+0xbbc>)
 8001c46:	781a      	ldrb	r2, [r3, #0]
 8001c48:	4b6b      	ldr	r3, [pc, #428]	; (8001df8 <menu+0xbb8>)
 8001c4a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001c4c:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <menu+0xbc0>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001c52:	4b6c      	ldr	r3, [pc, #432]	; (8001e04 <menu+0xbc4>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	f040 8083 	bne.w	8001d62 <menu+0xb22>
		if(dilSecim == 0) {
 8001c5c:	4b60      	ldr	r3, [pc, #384]	; (8001de0 <menu+0xba0>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001c64:	4a68      	ldr	r2, [pc, #416]	; (8001e08 <menu+0xbc8>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f005 ffb7 	bl	8007bdc <lcd_print>
 8001c6e:	e008      	b.n	8001c82 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001c70:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <menu+0xba0>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d104      	bne.n	8001c82 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001c78:	4a64      	ldr	r2, [pc, #400]	; (8001e0c <menu+0xbcc>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f005 ffad 	bl	8007bdc <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001c82:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <menu+0xbd0>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d113      	bne.n	8001cb2 <menu+0xa72>
			if(dilSecim == 0) {
 8001c8a:	4b55      	ldr	r3, [pc, #340]	; (8001de0 <menu+0xba0>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001c92:	4a60      	ldr	r2, [pc, #384]	; (8001e14 <menu+0xbd4>)
 8001c94:	2101      	movs	r1, #1
 8001c96:	2002      	movs	r0, #2
 8001c98:	f005 ffa0 	bl	8007bdc <lcd_print>
 8001c9c:	e012      	b.n	8001cc4 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001c9e:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <menu+0xba0>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d10e      	bne.n	8001cc4 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001ca6:	4a5c      	ldr	r2, [pc, #368]	; (8001e18 <menu+0xbd8>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	2002      	movs	r0, #2
 8001cac:	f005 ff96 	bl	8007bdc <lcd_print>
 8001cb0:	e008      	b.n	8001cc4 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001cb2:	4b57      	ldr	r3, [pc, #348]	; (8001e10 <menu+0xbd0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d104      	bne.n	8001cc4 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001cba:	4a58      	ldr	r2, [pc, #352]	; (8001e1c <menu+0xbdc>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f005 ff8c 	bl	8007bdc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4848      	ldr	r0, [pc, #288]	; (8001de8 <menu+0xba8>)
 8001cc8:	f007 faae 	bl	8009228 <HAL_GPIO_ReadPin>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d115      	bne.n	8001cfe <menu+0xabe>
 8001cd2:	4b46      	ldr	r3, [pc, #280]	; (8001dec <menu+0xbac>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	f083 0301 	eor.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00e      	beq.n	8001cfe <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <menu+0xbd0>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <menu+0xbd0>)
 8001cea:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001cec:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <menu+0xbd0>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d902      	bls.n	8001cfa <menu+0xaba>
				emniyetCercevesi = 0;
 8001cf4:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <menu+0xbd0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cfa:	f002 fe6d 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cfe:	2104      	movs	r1, #4
 8001d00:	4839      	ldr	r0, [pc, #228]	; (8001de8 <menu+0xba8>)
 8001d02:	f007 fa91 	bl	8009228 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d115      	bne.n	8001d38 <menu+0xaf8>
 8001d0c:	4b37      	ldr	r3, [pc, #220]	; (8001dec <menu+0xbac>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00e      	beq.n	8001d38 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <menu+0xbd0>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <menu+0xbd0>)
 8001d24:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001d26:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <menu+0xbd0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001d2e:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <menu+0xbd0>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d34:	f002 fe50 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001d38:	2108      	movs	r1, #8
 8001d3a:	482b      	ldr	r0, [pc, #172]	; (8001de8 <menu+0xba8>)
 8001d3c:	f007 fa74 	bl	8009228 <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10d      	bne.n	8001d62 <menu+0xb22>
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <menu+0xbac>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f083 0301 	eor.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <menu+0xbd0>)
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <menu+0xbb8>)
 8001d5a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001d5c:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <menu+0xbc0>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <menu+0xbc4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	f040 80ba 	bne.w	8001ee0 <menu+0xca0>
		if(dilSecim == 0) {
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <menu+0xba0>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001d74:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <menu+0xbe0>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f005 ff2f 	bl	8007bdc <lcd_print>
 8001d7e:	e008      	b.n	8001d92 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <menu+0xba0>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d104      	bne.n	8001d92 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001d88:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <menu+0xbe4>)
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f005 ff25 	bl	8007bdc <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <menu+0xbe8>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d113      	bne.n	8001dc2 <menu+0xb82>
			if(dilSecim == 0) {
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <menu+0xba0>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <menu+0xbd4>)
 8001da4:	2101      	movs	r1, #1
 8001da6:	2002      	movs	r0, #2
 8001da8:	f005 ff18 	bl	8007bdc <lcd_print>
 8001dac:	e049      	b.n	8001e42 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <menu+0xba0>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d145      	bne.n	8001e42 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001db6:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <menu+0xbd8>)
 8001db8:	2101      	movs	r1, #1
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f005 ff0e 	bl	8007bdc <lcd_print>
 8001dc0:	e03f      	b.n	8001e42 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <menu+0xbe8>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d13b      	bne.n	8001e42 <menu+0xc02>
			if(dilSecim == 0) {
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <menu+0xba0>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d12e      	bne.n	8001e30 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001dd2:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <menu+0xbec>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	f005 ff00 	bl	8007bdc <lcd_print>
 8001ddc:	e031      	b.n	8001e42 <menu+0xc02>
 8001dde:	bf00      	nop
 8001de0:	20000221 	.word	0x20000221
 8001de4:	0800d1fc 	.word	0x0800d1fc
 8001de8:	40010800 	.word	0x40010800
 8001dec:	2000022f 	.word	0x2000022f
 8001df0:	2000020f 	.word	0x2000020f
 8001df4:	20000201 	.word	0x20000201
 8001df8:	2000012c 	.word	0x2000012c
 8001dfc:	20000206 	.word	0x20000206
 8001e00:	2000022c 	.word	0x2000022c
 8001e04:	20000200 	.word	0x20000200
 8001e08:	0800d20c 	.word	0x0800d20c
 8001e0c:	0800d220 	.word	0x0800d220
 8001e10:	20000204 	.word	0x20000204
 8001e14:	0800d234 	.word	0x0800d234
 8001e18:	0800d248 	.word	0x0800d248
 8001e1c:	0800d25c 	.word	0x0800d25c
 8001e20:	0800d26c 	.word	0x0800d26c
 8001e24:	0800d280 	.word	0x0800d280
 8001e28:	20000205 	.word	0x20000205
 8001e2c:	0800d294 	.word	0x0800d294
			} else if(dilSecim == 1) {
 8001e30:	4b92      	ldr	r3, [pc, #584]	; (800207c <menu+0xe3c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d104      	bne.n	8001e42 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001e38:	4a91      	ldr	r2, [pc, #580]	; (8002080 <menu+0xe40>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f005 fecd 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e42:	2102      	movs	r1, #2
 8001e44:	488f      	ldr	r0, [pc, #572]	; (8002084 <menu+0xe44>)
 8001e46:	f007 f9ef 	bl	8009228 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d115      	bne.n	8001e7c <menu+0xc3c>
 8001e50:	4b8d      	ldr	r3, [pc, #564]	; (8002088 <menu+0xe48>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00e      	beq.n	8001e7c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001e5e:	4b8b      	ldr	r3, [pc, #556]	; (800208c <menu+0xe4c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	3301      	adds	r3, #1
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <menu+0xe4c>)
 8001e68:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <menu+0xe4c>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d902      	bls.n	8001e78 <menu+0xc38>
				yavaslamaLimit = 0;
 8001e72:	4b86      	ldr	r3, [pc, #536]	; (800208c <menu+0xe4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e78:	f002 fdae 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	4881      	ldr	r0, [pc, #516]	; (8002084 <menu+0xe44>)
 8001e80:	f007 f9d2 	bl	8009228 <HAL_GPIO_ReadPin>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d115      	bne.n	8001eb6 <menu+0xc76>
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	; (8002088 <menu+0xe48>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	f083 0301 	eor.w	r3, r3, #1
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00e      	beq.n	8001eb6 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001e98:	4b7c      	ldr	r3, [pc, #496]	; (800208c <menu+0xe4c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b7a      	ldr	r3, [pc, #488]	; (800208c <menu+0xe4c>)
 8001ea2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001ea4:	4b79      	ldr	r3, [pc, #484]	; (800208c <menu+0xe4c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001eac:	4b77      	ldr	r3, [pc, #476]	; (800208c <menu+0xe4c>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001eb2:	f002 fd91 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eb6:	2108      	movs	r1, #8
 8001eb8:	4872      	ldr	r0, [pc, #456]	; (8002084 <menu+0xe44>)
 8001eba:	f007 f9b5 	bl	8009228 <HAL_GPIO_ReadPin>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10d      	bne.n	8001ee0 <menu+0xca0>
 8001ec4:	4b70      	ldr	r3, [pc, #448]	; (8002088 <menu+0xe48>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f083 0301 	eor.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001ed2:	4b6e      	ldr	r3, [pc, #440]	; (800208c <menu+0xe4c>)
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	4b6e      	ldr	r3, [pc, #440]	; (8002090 <menu+0xe50>)
 8001ed8:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001eda:	4b6e      	ldr	r3, [pc, #440]	; (8002094 <menu+0xe54>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001ee0:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <menu+0xe58>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	f040 80b9 	bne.w	800205c <menu+0xe1c>
		if(dilSecim == 0) {
 8001eea:	4b64      	ldr	r3, [pc, #400]	; (800207c <menu+0xe3c>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001ef2:	4a6a      	ldr	r2, [pc, #424]	; (800209c <menu+0xe5c>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f005 fe70 	bl	8007bdc <lcd_print>
 8001efc:	e008      	b.n	8001f10 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001efe:	4b5f      	ldr	r3, [pc, #380]	; (800207c <menu+0xe3c>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d104      	bne.n	8001f10 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001f06:	4a66      	ldr	r2, [pc, #408]	; (80020a0 <menu+0xe60>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f005 fe66 	bl	8007bdc <lcd_print>
		}

		if(altLimit == 0) {
 8001f10:	4b64      	ldr	r3, [pc, #400]	; (80020a4 <menu+0xe64>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d113      	bne.n	8001f40 <menu+0xd00>
			if(dilSecim == 0) {
 8001f18:	4b58      	ldr	r3, [pc, #352]	; (800207c <menu+0xe3c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001f20:	4a61      	ldr	r2, [pc, #388]	; (80020a8 <menu+0xe68>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	2002      	movs	r0, #2
 8001f26:	f005 fe59 	bl	8007bdc <lcd_print>
 8001f2a:	e020      	b.n	8001f6e <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001f2c:	4b53      	ldr	r3, [pc, #332]	; (800207c <menu+0xe3c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d11c      	bne.n	8001f6e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001f34:	4a5d      	ldr	r2, [pc, #372]	; (80020ac <menu+0xe6c>)
 8001f36:	2101      	movs	r1, #1
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f005 fe4f 	bl	8007bdc <lcd_print>
 8001f3e:	e016      	b.n	8001f6e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001f40:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <menu+0xe64>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d112      	bne.n	8001f6e <menu+0xd2e>
			if(dilSecim == 0){
 8001f48:	4b4c      	ldr	r3, [pc, #304]	; (800207c <menu+0xe3c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d105      	bne.n	8001f5c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001f50:	4a57      	ldr	r2, [pc, #348]	; (80020b0 <menu+0xe70>)
 8001f52:	2101      	movs	r1, #1
 8001f54:	2002      	movs	r0, #2
 8001f56:	f005 fe41 	bl	8007bdc <lcd_print>
 8001f5a:	e008      	b.n	8001f6e <menu+0xd2e>
			} else if(dilSecim == 1){
 8001f5c:	4b47      	ldr	r3, [pc, #284]	; (800207c <menu+0xe3c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d104      	bne.n	8001f6e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001f64:	4a46      	ldr	r2, [pc, #280]	; (8002080 <menu+0xe40>)
 8001f66:	2101      	movs	r1, #1
 8001f68:	2002      	movs	r0, #2
 8001f6a:	f005 fe37 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001f6e:	2102      	movs	r1, #2
 8001f70:	4844      	ldr	r0, [pc, #272]	; (8002084 <menu+0xe44>)
 8001f72:	f007 f959 	bl	8009228 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d119      	bne.n	8001fb0 <menu+0xd70>
 8001f7c:	4b42      	ldr	r3, [pc, #264]	; (8002088 <menu+0xe48>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	f083 0301 	eor.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <menu+0xd70>
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <menu+0xe74>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10e      	bne.n	8001fb0 <menu+0xd70>
			altLimit = altLimit + 1;
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <menu+0xe64>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <menu+0xe64>)
 8001f9c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <menu+0xe64>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d902      	bls.n	8001fac <menu+0xd6c>
				altLimit = 0;
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <menu+0xe64>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fac:	f002 fd14 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001fb0:	2104      	movs	r1, #4
 8001fb2:	4834      	ldr	r0, [pc, #208]	; (8002084 <menu+0xe44>)
 8001fb4:	f007 f938 	bl	8009228 <HAL_GPIO_ReadPin>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d119      	bne.n	8001ff2 <menu+0xdb2>
 8001fbe:	4b32      	ldr	r3, [pc, #200]	; (8002088 <menu+0xe48>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	f083 0301 	eor.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d012      	beq.n	8001ff2 <menu+0xdb2>
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <menu+0xe74>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10e      	bne.n	8001ff2 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001fd4:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <menu+0xe64>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <menu+0xe64>)
 8001fde:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001fe0:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <menu+0xe64>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <menu+0xdae>
		   		altLimit = 1;
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <menu+0xe64>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fee:	f002 fcf3 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4823      	ldr	r0, [pc, #140]	; (8002084 <menu+0xe44>)
 8001ff6:	f007 f917 	bl	8009228 <HAL_GPIO_ReadPin>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d12d      	bne.n	800205c <menu+0xe1c>
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <menu+0xe48>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	f083 0301 	eor.w	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d026      	beq.n	800205c <menu+0xe1c>
			eepromData[5] = altLimit;
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <menu+0xe64>)
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <menu+0xe50>)
 8002014:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <menu+0xe64>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d110      	bne.n	8002040 <menu+0xe00>
 800201e:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <menu+0xe78>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <menu+0xdee>
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <menu+0xe78>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d108      	bne.n	8002040 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <menu+0xe78>)
 8002030:	2203      	movs	r2, #3
 8002032:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <menu+0xe78>)
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <menu+0xe50>)
 800203a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800203e:	e00a      	b.n	8002056 <menu+0xe16>
			} else if(altLimit == 0) {
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <menu+0xe64>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <menu+0xe16>
				platformSilindirTipi = 0;
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <menu+0xe7c>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <menu+0xe7c>)
 8002050:	781a      	ldrb	r2, [r3, #0]
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <menu+0xe50>)
 8002054:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <menu+0xe54>)
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <menu+0xe58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b06      	cmp	r3, #6
 8002062:	f040 80b6 	bne.w	80021d2 <menu+0xf92>
		if(dilSecim == 0) {
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <menu+0xe3c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d12a      	bne.n	80020c4 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800206e:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <menu+0xe80>)
 8002070:	2101      	movs	r1, #1
 8002072:	2001      	movs	r0, #1
 8002074:	f005 fdb2 	bl	8007bdc <lcd_print>
 8002078:	e02d      	b.n	80020d6 <menu+0xe96>
 800207a:	bf00      	nop
 800207c:	20000221 	.word	0x20000221
 8002080:	0800d2a8 	.word	0x0800d2a8
 8002084:	40010800 	.word	0x40010800
 8002088:	2000022f 	.word	0x2000022f
 800208c:	20000205 	.word	0x20000205
 8002090:	2000012c 	.word	0x2000012c
 8002094:	2000022c 	.word	0x2000022c
 8002098:	20000200 	.word	0x20000200
 800209c:	0800d2bc 	.word	0x0800d2bc
 80020a0:	0800d2d0 	.word	0x0800d2d0
 80020a4:	20000206 	.word	0x20000206
 80020a8:	0800d234 	.word	0x0800d234
 80020ac:	0800d248 	.word	0x0800d248
 80020b0:	0800d294 	.word	0x0800d294
 80020b4:	20000201 	.word	0x20000201
 80020b8:	2000020d 	.word	0x2000020d
 80020bc:	20000213 	.word	0x20000213
 80020c0:	0800d2e4 	.word	0x0800d2e4
		} else if(dilSecim == 1){
 80020c4:	4b7a      	ldr	r3, [pc, #488]	; (80022b0 <menu+0x1070>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d104      	bne.n	80020d6 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80020cc:	4a79      	ldr	r2, [pc, #484]	; (80022b4 <menu+0x1074>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	2001      	movs	r0, #1
 80020d2:	f005 fd83 	bl	8007bdc <lcd_print>
		}
		if(basincSalteri == 0){
 80020d6:	4b78      	ldr	r3, [pc, #480]	; (80022b8 <menu+0x1078>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d113      	bne.n	8002106 <menu+0xec6>
			if(dilSecim == 0) {
 80020de:	4b74      	ldr	r3, [pc, #464]	; (80022b0 <menu+0x1070>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80020e6:	4a75      	ldr	r2, [pc, #468]	; (80022bc <menu+0x107c>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	2002      	movs	r0, #2
 80020ec:	f005 fd76 	bl	8007bdc <lcd_print>
 80020f0:	e020      	b.n	8002134 <menu+0xef4>
			} else if(dilSecim == 1){
 80020f2:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <menu+0x1070>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d11c      	bne.n	8002134 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80020fa:	4a71      	ldr	r2, [pc, #452]	; (80022c0 <menu+0x1080>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	2002      	movs	r0, #2
 8002100:	f005 fd6c 	bl	8007bdc <lcd_print>
 8002104:	e016      	b.n	8002134 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002106:	4b6c      	ldr	r3, [pc, #432]	; (80022b8 <menu+0x1078>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d112      	bne.n	8002134 <menu+0xef4>
			if(dilSecim == 0) {
 800210e:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <menu+0x1070>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d105      	bne.n	8002122 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002116:	4a6b      	ldr	r2, [pc, #428]	; (80022c4 <menu+0x1084>)
 8002118:	2101      	movs	r1, #1
 800211a:	2002      	movs	r0, #2
 800211c:	f005 fd5e 	bl	8007bdc <lcd_print>
 8002120:	e008      	b.n	8002134 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <menu+0x1070>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d104      	bne.n	8002134 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800212a:	4a67      	ldr	r2, [pc, #412]	; (80022c8 <menu+0x1088>)
 800212c:	2101      	movs	r1, #1
 800212e:	2002      	movs	r0, #2
 8002130:	f005 fd54 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002134:	2102      	movs	r1, #2
 8002136:	4865      	ldr	r0, [pc, #404]	; (80022cc <menu+0x108c>)
 8002138:	f007 f876 	bl	8009228 <HAL_GPIO_ReadPin>
 800213c:	4603      	mov	r3, r0
 800213e:	2b01      	cmp	r3, #1
 8002140:	d115      	bne.n	800216e <menu+0xf2e>
 8002142:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <menu+0x1090>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	f083 0301 	eor.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00e      	beq.n	800216e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002150:	4b59      	ldr	r3, [pc, #356]	; (80022b8 <menu+0x1078>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b57      	ldr	r3, [pc, #348]	; (80022b8 <menu+0x1078>)
 800215a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800215c:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <menu+0x1078>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d902      	bls.n	800216a <menu+0xf2a>
				basincSalteri = 0;
 8002164:	4b54      	ldr	r3, [pc, #336]	; (80022b8 <menu+0x1078>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800216a:	f002 fc35 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800216e:	2104      	movs	r1, #4
 8002170:	4856      	ldr	r0, [pc, #344]	; (80022cc <menu+0x108c>)
 8002172:	f007 f859 	bl	8009228 <HAL_GPIO_ReadPin>
 8002176:	4603      	mov	r3, r0
 8002178:	2b01      	cmp	r3, #1
 800217a:	d115      	bne.n	80021a8 <menu+0xf68>
 800217c:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <menu+0x1090>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f083 0301 	eor.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00e      	beq.n	80021a8 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800218a:	4b4b      	ldr	r3, [pc, #300]	; (80022b8 <menu+0x1078>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	3b01      	subs	r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <menu+0x1078>)
 8002194:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002196:	4b48      	ldr	r3, [pc, #288]	; (80022b8 <menu+0x1078>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <menu+0xf64>
		   		basincSalteri = 1;
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <menu+0x1078>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021a4:	f002 fc18 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021a8:	2108      	movs	r1, #8
 80021aa:	4848      	ldr	r0, [pc, #288]	; (80022cc <menu+0x108c>)
 80021ac:	f007 f83c 	bl	8009228 <HAL_GPIO_ReadPin>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10d      	bne.n	80021d2 <menu+0xf92>
 80021b6:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <menu+0x1090>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f083 0301 	eor.w	r3, r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80021c4:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <menu+0x1078>)
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <menu+0x1094>)
 80021ca:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <menu+0x1098>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80021d2:	4b42      	ldr	r3, [pc, #264]	; (80022dc <menu+0x109c>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b07      	cmp	r3, #7
 80021d8:	f040 80f5 	bne.w	80023c6 <menu+0x1186>
		if(dilSecim == 0) {
 80021dc:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <menu+0x1070>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80021e4:	4a3e      	ldr	r2, [pc, #248]	; (80022e0 <menu+0x10a0>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	2001      	movs	r0, #1
 80021ea:	f005 fcf7 	bl	8007bdc <lcd_print>
 80021ee:	e008      	b.n	8002202 <menu+0xfc2>
		} else if(dilSecim == 1){
 80021f0:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <menu+0x1070>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d104      	bne.n	8002202 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80021f8:	4a3a      	ldr	r2, [pc, #232]	; (80022e4 <menu+0x10a4>)
 80021fa:	2101      	movs	r1, #1
 80021fc:	2001      	movs	r0, #1
 80021fe:	f005 fced 	bl	8007bdc <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002202:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <menu+0x10a8>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d113      	bne.n	8002232 <menu+0xff2>
			if(dilSecim == 0) {
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <menu+0x1070>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002212:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <menu+0x107c>)
 8002214:	2101      	movs	r1, #1
 8002216:	2002      	movs	r0, #2
 8002218:	f005 fce0 	bl	8007bdc <lcd_print>
 800221c:	e079      	b.n	8002312 <menu+0x10d2>
			} else if(dilSecim == 1){
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <menu+0x1070>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d175      	bne.n	8002312 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002226:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <menu+0x1080>)
 8002228:	2101      	movs	r1, #1
 800222a:	2002      	movs	r0, #2
 800222c:	f005 fcd6 	bl	8007bdc <lcd_print>
 8002230:	e06f      	b.n	8002312 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002232:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <menu+0x10a8>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d113      	bne.n	8002262 <menu+0x1022>
			if(dilSecim == 0) {
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <menu+0x1070>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002242:	4a2a      	ldr	r2, [pc, #168]	; (80022ec <menu+0x10ac>)
 8002244:	2101      	movs	r1, #1
 8002246:	2002      	movs	r0, #2
 8002248:	f005 fcc8 	bl	8007bdc <lcd_print>
 800224c:	e061      	b.n	8002312 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <menu+0x1070>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d15d      	bne.n	8002312 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002256:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <menu+0x10b0>)
 8002258:	2101      	movs	r1, #1
 800225a:	2002      	movs	r0, #2
 800225c:	f005 fcbe 	bl	8007bdc <lcd_print>
 8002260:	e057      	b.n	8002312 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <menu+0x10a8>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d113      	bne.n	8002292 <menu+0x1052>
			if(dilSecim == 0) {
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <menu+0x1070>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002272:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <menu+0x10b4>)
 8002274:	2101      	movs	r1, #1
 8002276:	2002      	movs	r0, #2
 8002278:	f005 fcb0 	bl	8007bdc <lcd_print>
 800227c:	e049      	b.n	8002312 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <menu+0x1070>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d145      	bne.n	8002312 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002286:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <menu+0x10b8>)
 8002288:	2101      	movs	r1, #1
 800228a:	2002      	movs	r0, #2
 800228c:	f005 fca6 	bl	8007bdc <lcd_print>
 8002290:	e03f      	b.n	8002312 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <menu+0x10a8>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d13b      	bne.n	8002312 <menu+0x10d2>
			if(dilSecim == 0) {
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <menu+0x1070>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d12e      	bne.n	8002300 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80022a2:	4a16      	ldr	r2, [pc, #88]	; (80022fc <menu+0x10bc>)
 80022a4:	2101      	movs	r1, #1
 80022a6:	2002      	movs	r0, #2
 80022a8:	f005 fc98 	bl	8007bdc <lcd_print>
 80022ac:	e031      	b.n	8002312 <menu+0x10d2>
 80022ae:	bf00      	nop
 80022b0:	20000221 	.word	0x20000221
 80022b4:	0800d2f4 	.word	0x0800d2f4
 80022b8:	20000207 	.word	0x20000207
 80022bc:	0800d234 	.word	0x0800d234
 80022c0:	0800d248 	.word	0x0800d248
 80022c4:	0800d294 	.word	0x0800d294
 80022c8:	0800d2a8 	.word	0x0800d2a8
 80022cc:	40010800 	.word	0x40010800
 80022d0:	2000022f 	.word	0x2000022f
 80022d4:	2000012c 	.word	0x2000012c
 80022d8:	2000022c 	.word	0x2000022c
 80022dc:	20000200 	.word	0x20000200
 80022e0:	0800d304 	.word	0x0800d304
 80022e4:	0800d318 	.word	0x0800d318
 80022e8:	20000208 	.word	0x20000208
 80022ec:	0800d32c 	.word	0x0800d32c
 80022f0:	0800d340 	.word	0x0800d340
 80022f4:	0800d354 	.word	0x0800d354
 80022f8:	0800d368 	.word	0x0800d368
 80022fc:	0800d37c 	.word	0x0800d37c
			} else if(dilSecim == 1){
 8002300:	4b99      	ldr	r3, [pc, #612]	; (8002568 <menu+0x1328>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d104      	bne.n	8002312 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002308:	4a98      	ldr	r2, [pc, #608]	; (800256c <menu+0x132c>)
 800230a:	2101      	movs	r1, #1
 800230c:	2002      	movs	r0, #2
 800230e:	f005 fc65 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002312:	2102      	movs	r1, #2
 8002314:	4896      	ldr	r0, [pc, #600]	; (8002570 <menu+0x1330>)
 8002316:	f006 ff87 	bl	8009228 <HAL_GPIO_ReadPin>
 800231a:	4603      	mov	r3, r0
 800231c:	2b01      	cmp	r3, #1
 800231e:	d115      	bne.n	800234c <menu+0x110c>
 8002320:	4b94      	ldr	r3, [pc, #592]	; (8002574 <menu+0x1334>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f083 0301 	eor.w	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00e      	beq.n	800234c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800232e:	4b92      	ldr	r3, [pc, #584]	; (8002578 <menu+0x1338>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	3301      	adds	r3, #1
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b90      	ldr	r3, [pc, #576]	; (8002578 <menu+0x1338>)
 8002338:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800233a:	4b8f      	ldr	r3, [pc, #572]	; (8002578 <menu+0x1338>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d902      	bls.n	8002348 <menu+0x1108>
				kapiSecimleri = 0;
 8002342:	4b8d      	ldr	r3, [pc, #564]	; (8002578 <menu+0x1338>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002348:	f002 fb46 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800234c:	2104      	movs	r1, #4
 800234e:	4888      	ldr	r0, [pc, #544]	; (8002570 <menu+0x1330>)
 8002350:	f006 ff6a 	bl	8009228 <HAL_GPIO_ReadPin>
 8002354:	4603      	mov	r3, r0
 8002356:	2b01      	cmp	r3, #1
 8002358:	d115      	bne.n	8002386 <menu+0x1146>
 800235a:	4b86      	ldr	r3, [pc, #536]	; (8002574 <menu+0x1334>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f083 0301 	eor.w	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00e      	beq.n	8002386 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002368:	4b83      	ldr	r3, [pc, #524]	; (8002578 <menu+0x1338>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3b01      	subs	r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b81      	ldr	r3, [pc, #516]	; (8002578 <menu+0x1338>)
 8002372:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002374:	4b80      	ldr	r3, [pc, #512]	; (8002578 <menu+0x1338>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d902      	bls.n	8002382 <menu+0x1142>
		   		kapiSecimleri = 3;
 800237c:	4b7e      	ldr	r3, [pc, #504]	; (8002578 <menu+0x1338>)
 800237e:	2203      	movs	r2, #3
 8002380:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002382:	f002 fb29 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002386:	2108      	movs	r1, #8
 8002388:	4879      	ldr	r0, [pc, #484]	; (8002570 <menu+0x1330>)
 800238a:	f006 ff4d 	bl	8009228 <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
 8002390:	2b01      	cmp	r3, #1
 8002392:	d118      	bne.n	80023c6 <menu+0x1186>
 8002394:	4b77      	ldr	r3, [pc, #476]	; (8002574 <menu+0x1334>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	f083 0301 	eor.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d011      	beq.n	80023c6 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80023a2:	4b75      	ldr	r3, [pc, #468]	; (8002578 <menu+0x1338>)
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	4b75      	ldr	r3, [pc, #468]	; (800257c <menu+0x133c>)
 80023a8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80023aa:	4b73      	ldr	r3, [pc, #460]	; (8002578 <menu+0x1338>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d006      	beq.n	80023c0 <menu+0x1180>
				altLimit = 1;
 80023b2:	4b73      	ldr	r3, [pc, #460]	; (8002580 <menu+0x1340>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80023b8:	4b71      	ldr	r3, [pc, #452]	; (8002580 <menu+0x1340>)
 80023ba:	781a      	ldrb	r2, [r3, #0]
 80023bc:	4b6f      	ldr	r3, [pc, #444]	; (800257c <menu+0x133c>)
 80023be:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80023c0:	4b70      	ldr	r3, [pc, #448]	; (8002584 <menu+0x1344>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80023c6:	4b70      	ldr	r3, [pc, #448]	; (8002588 <menu+0x1348>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	f040 8092 	bne.w	80024f4 <menu+0x12b4>
		if(dilSecim == 0) {
 80023d0:	4b65      	ldr	r3, [pc, #404]	; (8002568 <menu+0x1328>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80023d8:	4a6c      	ldr	r2, [pc, #432]	; (800258c <menu+0x134c>)
 80023da:	2101      	movs	r1, #1
 80023dc:	2001      	movs	r0, #1
 80023de:	f005 fbfd 	bl	8007bdc <lcd_print>
 80023e2:	e008      	b.n	80023f6 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80023e4:	4b60      	ldr	r3, [pc, #384]	; (8002568 <menu+0x1328>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d104      	bne.n	80023f6 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80023ec:	4a68      	ldr	r2, [pc, #416]	; (8002590 <menu+0x1350>)
 80023ee:	2101      	movs	r1, #1
 80023f0:	2001      	movs	r0, #1
 80023f2:	f005 fbf3 	bl	8007bdc <lcd_print>
		}

		if(kapiAcTipi == 0){
 80023f6:	4b67      	ldr	r3, [pc, #412]	; (8002594 <menu+0x1354>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d113      	bne.n	8002426 <menu+0x11e6>
			if(dilSecim == 0) {
 80023fe:	4b5a      	ldr	r3, [pc, #360]	; (8002568 <menu+0x1328>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002406:	4a64      	ldr	r2, [pc, #400]	; (8002598 <menu+0x1358>)
 8002408:	2101      	movs	r1, #1
 800240a:	2002      	movs	r0, #2
 800240c:	f005 fbe6 	bl	8007bdc <lcd_print>
 8002410:	e020      	b.n	8002454 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002412:	4b55      	ldr	r3, [pc, #340]	; (8002568 <menu+0x1328>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d11c      	bne.n	8002454 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800241a:	4a60      	ldr	r2, [pc, #384]	; (800259c <menu+0x135c>)
 800241c:	2101      	movs	r1, #1
 800241e:	2002      	movs	r0, #2
 8002420:	f005 fbdc 	bl	8007bdc <lcd_print>
 8002424:	e016      	b.n	8002454 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <menu+0x1354>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d112      	bne.n	8002454 <menu+0x1214>
			if(dilSecim == 0){
 800242e:	4b4e      	ldr	r3, [pc, #312]	; (8002568 <menu+0x1328>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d105      	bne.n	8002442 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002436:	4a5a      	ldr	r2, [pc, #360]	; (80025a0 <menu+0x1360>)
 8002438:	2101      	movs	r1, #1
 800243a:	2002      	movs	r0, #2
 800243c:	f005 fbce 	bl	8007bdc <lcd_print>
 8002440:	e008      	b.n	8002454 <menu+0x1214>
			} else if(dilSecim == 1){
 8002442:	4b49      	ldr	r3, [pc, #292]	; (8002568 <menu+0x1328>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d104      	bne.n	8002454 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800244a:	4a56      	ldr	r2, [pc, #344]	; (80025a4 <menu+0x1364>)
 800244c:	2101      	movs	r1, #1
 800244e:	2002      	movs	r0, #2
 8002450:	f005 fbc4 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002454:	2102      	movs	r1, #2
 8002456:	4846      	ldr	r0, [pc, #280]	; (8002570 <menu+0x1330>)
 8002458:	f006 fee6 	bl	8009228 <HAL_GPIO_ReadPin>
 800245c:	4603      	mov	r3, r0
 800245e:	2b01      	cmp	r3, #1
 8002460:	d115      	bne.n	800248e <menu+0x124e>
 8002462:	4b44      	ldr	r3, [pc, #272]	; (8002574 <menu+0x1334>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f083 0301 	eor.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002470:	4b48      	ldr	r3, [pc, #288]	; (8002594 <menu+0x1354>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b46      	ldr	r3, [pc, #280]	; (8002594 <menu+0x1354>)
 800247a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800247c:	4b45      	ldr	r3, [pc, #276]	; (8002594 <menu+0x1354>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d902      	bls.n	800248a <menu+0x124a>
				kapiAcTipi = 0;
 8002484:	4b43      	ldr	r3, [pc, #268]	; (8002594 <menu+0x1354>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800248a:	f002 faa5 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800248e:	2104      	movs	r1, #4
 8002490:	4837      	ldr	r0, [pc, #220]	; (8002570 <menu+0x1330>)
 8002492:	f006 fec9 	bl	8009228 <HAL_GPIO_ReadPin>
 8002496:	4603      	mov	r3, r0
 8002498:	2b01      	cmp	r3, #1
 800249a:	d115      	bne.n	80024c8 <menu+0x1288>
 800249c:	4b35      	ldr	r3, [pc, #212]	; (8002574 <menu+0x1334>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00e      	beq.n	80024c8 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80024aa:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <menu+0x1354>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b38      	ldr	r3, [pc, #224]	; (8002594 <menu+0x1354>)
 80024b4:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80024b6:	4b37      	ldr	r3, [pc, #220]	; (8002594 <menu+0x1354>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <menu+0x1284>
		   		kapiAcTipi = 1;
 80024be:	4b35      	ldr	r3, [pc, #212]	; (8002594 <menu+0x1354>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024c4:	f002 fa88 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024c8:	2108      	movs	r1, #8
 80024ca:	4829      	ldr	r0, [pc, #164]	; (8002570 <menu+0x1330>)
 80024cc:	f006 feac 	bl	8009228 <HAL_GPIO_ReadPin>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10e      	bne.n	80024f4 <menu+0x12b4>
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <menu+0x1334>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	f083 0301 	eor.w	r3, r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <menu+0x1354>)
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <menu+0x133c>)
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80024ee:	4b25      	ldr	r3, [pc, #148]	; (8002584 <menu+0x1344>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80024f4:	4b24      	ldr	r3, [pc, #144]	; (8002588 <menu+0x1348>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b09      	cmp	r3, #9
 80024fa:	f040 80b9 	bne.w	8002670 <menu+0x1430>
		if(dilSecim == 0){
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <menu+0x1328>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002506:	4a28      	ldr	r2, [pc, #160]	; (80025a8 <menu+0x1368>)
 8002508:	2101      	movs	r1, #1
 800250a:	2001      	movs	r0, #1
 800250c:	f005 fb66 	bl	8007bdc <lcd_print>
 8002510:	e008      	b.n	8002524 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <menu+0x1328>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d104      	bne.n	8002524 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800251a:	4a24      	ldr	r2, [pc, #144]	; (80025ac <menu+0x136c>)
 800251c:	2101      	movs	r1, #1
 800251e:	2001      	movs	r0, #1
 8002520:	f005 fb5c 	bl	8007bdc <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <menu+0x1370>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800252c:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <menu+0x1374>)
 800252e:	2101      	movs	r1, #1
 8002530:	2002      	movs	r0, #2
 8002532:	f005 fb53 	bl	8007bdc <lcd_print>
 8002536:	e04c      	b.n	80025d2 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <menu+0x1370>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d13f      	bne.n	80025c0 <menu+0x1380>
			if(dilSecim == 0){
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <menu+0x1328>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <menu+0x1378>)
 800254a:	2101      	movs	r1, #1
 800254c:	2002      	movs	r0, #2
 800254e:	f005 fb45 	bl	8007bdc <lcd_print>
 8002552:	e03e      	b.n	80025d2 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <menu+0x1328>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d13a      	bne.n	80025d2 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <menu+0x137c>)
 800255e:	2101      	movs	r1, #1
 8002560:	2002      	movs	r0, #2
 8002562:	f005 fb3b 	bl	8007bdc <lcd_print>
 8002566:	e034      	b.n	80025d2 <menu+0x1392>
 8002568:	20000221 	.word	0x20000221
 800256c:	0800d390 	.word	0x0800d390
 8002570:	40010800 	.word	0x40010800
 8002574:	2000022f 	.word	0x2000022f
 8002578:	20000208 	.word	0x20000208
 800257c:	2000012c 	.word	0x2000012c
 8002580:	20000206 	.word	0x20000206
 8002584:	2000022c 	.word	0x2000022c
 8002588:	20000200 	.word	0x20000200
 800258c:	0800d3a4 	.word	0x0800d3a4
 8002590:	0800d3b8 	.word	0x0800d3b8
 8002594:	2000020c 	.word	0x2000020c
 8002598:	0800d3cc 	.word	0x0800d3cc
 800259c:	0800d3dc 	.word	0x0800d3dc
 80025a0:	0800d3ec 	.word	0x0800d3ec
 80025a4:	0800d400 	.word	0x0800d400
 80025a8:	0800d414 	.word	0x0800d414
 80025ac:	0800d428 	.word	0x0800d428
 80025b0:	20000209 	.word	0x20000209
 80025b4:	0800d43c 	.word	0x0800d43c
 80025b8:	0800d450 	.word	0x0800d450
 80025bc:	0800d460 	.word	0x0800d460
			}
		} else if(kapi1Tip == 2) {
 80025c0:	4b8a      	ldr	r3, [pc, #552]	; (80027ec <menu+0x15ac>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d104      	bne.n	80025d2 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80025c8:	4a89      	ldr	r2, [pc, #548]	; (80027f0 <menu+0x15b0>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	2002      	movs	r0, #2
 80025ce:	f005 fb05 	bl	8007bdc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025d2:	2102      	movs	r1, #2
 80025d4:	4887      	ldr	r0, [pc, #540]	; (80027f4 <menu+0x15b4>)
 80025d6:	f006 fe27 	bl	8009228 <HAL_GPIO_ReadPin>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d115      	bne.n	800260c <menu+0x13cc>
 80025e0:	4b85      	ldr	r3, [pc, #532]	; (80027f8 <menu+0x15b8>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	f083 0301 	eor.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00e      	beq.n	800260c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80025ee:	4b7f      	ldr	r3, [pc, #508]	; (80027ec <menu+0x15ac>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4b7d      	ldr	r3, [pc, #500]	; (80027ec <menu+0x15ac>)
 80025f8:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80025fa:	4b7c      	ldr	r3, [pc, #496]	; (80027ec <menu+0x15ac>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d902      	bls.n	8002608 <menu+0x13c8>
				kapi1Tip = 0;
 8002602:	4b7a      	ldr	r3, [pc, #488]	; (80027ec <menu+0x15ac>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002608:	f002 f9e6 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800260c:	2104      	movs	r1, #4
 800260e:	4879      	ldr	r0, [pc, #484]	; (80027f4 <menu+0x15b4>)
 8002610:	f006 fe0a 	bl	8009228 <HAL_GPIO_ReadPin>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d115      	bne.n	8002646 <menu+0x1406>
 800261a:	4b77      	ldr	r3, [pc, #476]	; (80027f8 <menu+0x15b8>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00e      	beq.n	8002646 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002628:	4b70      	ldr	r3, [pc, #448]	; (80027ec <menu+0x15ac>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	3b01      	subs	r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b6e      	ldr	r3, [pc, #440]	; (80027ec <menu+0x15ac>)
 8002632:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002634:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <menu+0x15ac>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d902      	bls.n	8002642 <menu+0x1402>
		   		kapi1Tip = 2;
 800263c:	4b6b      	ldr	r3, [pc, #428]	; (80027ec <menu+0x15ac>)
 800263e:	2202      	movs	r2, #2
 8002640:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002642:	f002 f9c9 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002646:	2108      	movs	r1, #8
 8002648:	486a      	ldr	r0, [pc, #424]	; (80027f4 <menu+0x15b4>)
 800264a:	f006 fded 	bl	8009228 <HAL_GPIO_ReadPin>
 800264e:	4603      	mov	r3, r0
 8002650:	2b01      	cmp	r3, #1
 8002652:	d10d      	bne.n	8002670 <menu+0x1430>
 8002654:	4b68      	ldr	r3, [pc, #416]	; (80027f8 <menu+0x15b8>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f083 0301 	eor.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002662:	4b62      	ldr	r3, [pc, #392]	; (80027ec <menu+0x15ac>)
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	4b65      	ldr	r3, [pc, #404]	; (80027fc <menu+0x15bc>)
 8002668:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800266a:	4b65      	ldr	r3, [pc, #404]	; (8002800 <menu+0x15c0>)
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002670:	4b64      	ldr	r3, [pc, #400]	; (8002804 <menu+0x15c4>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b0a      	cmp	r3, #10
 8002676:	d17f      	bne.n	8002778 <menu+0x1538>
		if(dilSecim == 0) {
 8002678:	4b63      	ldr	r3, [pc, #396]	; (8002808 <menu+0x15c8>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002680:	4a62      	ldr	r2, [pc, #392]	; (800280c <menu+0x15cc>)
 8002682:	2101      	movs	r1, #1
 8002684:	2001      	movs	r0, #1
 8002686:	f005 faa9 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800268a:	4a61      	ldr	r2, [pc, #388]	; (8002810 <menu+0x15d0>)
 800268c:	2101      	movs	r1, #1
 800268e:	2002      	movs	r0, #2
 8002690:	f005 faa4 	bl	8007bdc <lcd_print>
 8002694:	e00d      	b.n	80026b2 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002696:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <menu+0x15c8>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d109      	bne.n	80026b2 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800269e:	4a5d      	ldr	r2, [pc, #372]	; (8002814 <menu+0x15d4>)
 80026a0:	2101      	movs	r1, #1
 80026a2:	2001      	movs	r0, #1
 80026a4:	f005 fa9a 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80026a8:	4a5b      	ldr	r2, [pc, #364]	; (8002818 <menu+0x15d8>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	2002      	movs	r0, #2
 80026ae:	f005 fa95 	bl	8007bdc <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <menu+0x15dc>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	220a      	movs	r2, #10
 80026b8:	4959      	ldr	r1, [pc, #356]	; (8002820 <menu+0x15e0>)
 80026ba:	4618      	mov	r0, r3
 80026bc:	f009 fde0 	bl	800c280 <itoa>
		lcd_print(2,16,snum);
 80026c0:	4a57      	ldr	r2, [pc, #348]	; (8002820 <menu+0x15e0>)
 80026c2:	2110      	movs	r1, #16
 80026c4:	2002      	movs	r0, #2
 80026c6:	f005 fa89 	bl	8007bdc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80026ca:	2102      	movs	r1, #2
 80026cc:	4849      	ldr	r0, [pc, #292]	; (80027f4 <menu+0x15b4>)
 80026ce:	f006 fdab 	bl	8009228 <HAL_GPIO_ReadPin>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d119      	bne.n	800270c <menu+0x14cc>
 80026d8:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <menu+0x15b8>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	f083 0301 	eor.w	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <menu+0x14cc>
 80026e6:	4b41      	ldr	r3, [pc, #260]	; (80027ec <menu+0x15ac>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10e      	bne.n	800270c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80026ee:	4b4b      	ldr	r3, [pc, #300]	; (800281c <menu+0x15dc>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b49      	ldr	r3, [pc, #292]	; (800281c <menu+0x15dc>)
 80026f8:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80026fa:	4b48      	ldr	r3, [pc, #288]	; (800281c <menu+0x15dc>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d902      	bls.n	8002708 <menu+0x14c8>
				kapi1AcSure = 0;
 8002702:	4b46      	ldr	r3, [pc, #280]	; (800281c <menu+0x15dc>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002708:	f002 f966 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800270c:	2104      	movs	r1, #4
 800270e:	4839      	ldr	r0, [pc, #228]	; (80027f4 <menu+0x15b4>)
 8002710:	f006 fd8a 	bl	8009228 <HAL_GPIO_ReadPin>
 8002714:	4603      	mov	r3, r0
 8002716:	2b01      	cmp	r3, #1
 8002718:	d119      	bne.n	800274e <menu+0x150e>
 800271a:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <menu+0x15b8>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	f083 0301 	eor.w	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <menu+0x150e>
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <menu+0x15ac>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10e      	bne.n	800274e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <menu+0x15dc>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	3b01      	subs	r3, #1
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4b38      	ldr	r3, [pc, #224]	; (800281c <menu+0x15dc>)
 800273a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800273c:	4b37      	ldr	r3, [pc, #220]	; (800281c <menu+0x15dc>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b06      	cmp	r3, #6
 8002742:	d902      	bls.n	800274a <menu+0x150a>
		   		kapi1AcSure = 5;
 8002744:	4b35      	ldr	r3, [pc, #212]	; (800281c <menu+0x15dc>)
 8002746:	2205      	movs	r2, #5
 8002748:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800274a:	f002 f945 	bl	80049d8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800274e:	2108      	movs	r1, #8
 8002750:	4828      	ldr	r0, [pc, #160]	; (80027f4 <menu+0x15b4>)
 8002752:	f006 fd69 	bl	8009228 <HAL_GPIO_ReadPin>
 8002756:	4603      	mov	r3, r0
 8002758:	2b01      	cmp	r3, #1
 800275a:	d10d      	bne.n	8002778 <menu+0x1538>
 800275c:	4b26      	ldr	r3, [pc, #152]	; (80027f8 <menu+0x15b8>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	f083 0301 	eor.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800276a:	4b2c      	ldr	r3, [pc, #176]	; (800281c <menu+0x15dc>)
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <menu+0x15bc>)
 8002770:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <menu+0x15c0>)
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002778:	4b22      	ldr	r3, [pc, #136]	; (8002804 <menu+0x15c4>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b0b      	cmp	r3, #11
 800277e:	f040 80b5 	bne.w	80028ec <menu+0x16ac>
		if(dilSecim == 0) {
 8002782:	4b21      	ldr	r3, [pc, #132]	; (8002808 <menu+0x15c8>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800278a:	4a26      	ldr	r2, [pc, #152]	; (8002824 <menu+0x15e4>)
 800278c:	2101      	movs	r1, #1
 800278e:	2001      	movs	r0, #1
 8002790:	f005 fa24 	bl	8007bdc <lcd_print>
 8002794:	e008      	b.n	80027a8 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002796:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <menu+0x15c8>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d104      	bne.n	80027a8 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800279e:	4a22      	ldr	r2, [pc, #136]	; (8002828 <menu+0x15e8>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	2001      	movs	r0, #1
 80027a4:	f005 fa1a 	bl	8007bdc <lcd_print>
		}

		if(kapi2Tip == 0) {
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <menu+0x15ec>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80027b0:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <menu+0x15f0>)
 80027b2:	2101      	movs	r1, #1
 80027b4:	2002      	movs	r0, #2
 80027b6:	f005 fa11 	bl	8007bdc <lcd_print>
 80027ba:	e048      	b.n	800284e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <menu+0x15ec>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d13b      	bne.n	800283c <menu+0x15fc>
			if(dilSecim == 0) {
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <menu+0x15c8>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d105      	bne.n	80027d8 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80027cc:	4a19      	ldr	r2, [pc, #100]	; (8002834 <menu+0x15f4>)
 80027ce:	2101      	movs	r1, #1
 80027d0:	2002      	movs	r0, #2
 80027d2:	f005 fa03 	bl	8007bdc <lcd_print>
 80027d6:	e03a      	b.n	800284e <menu+0x160e>
			} else if(dilSecim == 1) {
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <menu+0x15c8>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d136      	bne.n	800284e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80027e0:	4a15      	ldr	r2, [pc, #84]	; (8002838 <menu+0x15f8>)
 80027e2:	2101      	movs	r1, #1
 80027e4:	2002      	movs	r0, #2
 80027e6:	f005 f9f9 	bl	8007bdc <lcd_print>
 80027ea:	e030      	b.n	800284e <menu+0x160e>
 80027ec:	20000209 	.word	0x20000209
 80027f0:	0800d474 	.word	0x0800d474
 80027f4:	40010800 	.word	0x40010800
 80027f8:	2000022f 	.word	0x2000022f
 80027fc:	2000012c 	.word	0x2000012c
 8002800:	2000022c 	.word	0x2000022c
 8002804:	20000200 	.word	0x20000200
 8002808:	20000221 	.word	0x20000221
 800280c:	0800d484 	.word	0x0800d484
 8002810:	0800d498 	.word	0x0800d498
 8002814:	0800d4a8 	.word	0x0800d4a8
 8002818:	0800d4bc 	.word	0x0800d4bc
 800281c:	20000219 	.word	0x20000219
 8002820:	2000019c 	.word	0x2000019c
 8002824:	0800d4cc 	.word	0x0800d4cc
 8002828:	0800d4e0 	.word	0x0800d4e0
 800282c:	2000020a 	.word	0x2000020a
 8002830:	0800d43c 	.word	0x0800d43c
 8002834:	0800d450 	.word	0x0800d450
 8002838:	0800d460 	.word	0x0800d460
			}
		} else if(kapi2Tip == 2) {
 800283c:	4b8a      	ldr	r3, [pc, #552]	; (8002a68 <menu+0x1828>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d104      	bne.n	800284e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002844:	4a89      	ldr	r2, [pc, #548]	; (8002a6c <menu+0x182c>)
 8002846:	2101      	movs	r1, #1
 8002848:	2002      	movs	r0, #2
 800284a:	f005 f9c7 	bl	8007bdc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800284e:	2102      	movs	r1, #2
 8002850:	4887      	ldr	r0, [pc, #540]	; (8002a70 <menu+0x1830>)
 8002852:	f006 fce9 	bl	8009228 <HAL_GPIO_ReadPin>
 8002856:	4603      	mov	r3, r0
 8002858:	2b01      	cmp	r3, #1
 800285a:	d115      	bne.n	8002888 <menu+0x1648>
 800285c:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <menu+0x1834>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	f083 0301 	eor.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00e      	beq.n	8002888 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <menu+0x1828>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4b7d      	ldr	r3, [pc, #500]	; (8002a68 <menu+0x1828>)
 8002874:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002876:	4b7c      	ldr	r3, [pc, #496]	; (8002a68 <menu+0x1828>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d902      	bls.n	8002884 <menu+0x1644>
				kapi2Tip = 0;
 800287e:	4b7a      	ldr	r3, [pc, #488]	; (8002a68 <menu+0x1828>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002884:	f002 f8a8 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002888:	2104      	movs	r1, #4
 800288a:	4879      	ldr	r0, [pc, #484]	; (8002a70 <menu+0x1830>)
 800288c:	f006 fccc 	bl	8009228 <HAL_GPIO_ReadPin>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d115      	bne.n	80028c2 <menu+0x1682>
 8002896:	4b77      	ldr	r3, [pc, #476]	; (8002a74 <menu+0x1834>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	f083 0301 	eor.w	r3, r3, #1
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00e      	beq.n	80028c2 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 80028a4:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <menu+0x1828>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b6e      	ldr	r3, [pc, #440]	; (8002a68 <menu+0x1828>)
 80028ae:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80028b0:	4b6d      	ldr	r3, [pc, #436]	; (8002a68 <menu+0x1828>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d902      	bls.n	80028be <menu+0x167e>
		   		kapi2Tip = 2;
 80028b8:	4b6b      	ldr	r3, [pc, #428]	; (8002a68 <menu+0x1828>)
 80028ba:	2202      	movs	r2, #2
 80028bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028be:	f002 f88b 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c2:	2108      	movs	r1, #8
 80028c4:	486a      	ldr	r0, [pc, #424]	; (8002a70 <menu+0x1830>)
 80028c6:	f006 fcaf 	bl	8009228 <HAL_GPIO_ReadPin>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10d      	bne.n	80028ec <menu+0x16ac>
 80028d0:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <menu+0x1834>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	f083 0301 	eor.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80028de:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <menu+0x1828>)
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <menu+0x1838>)
 80028e4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80028e6:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <menu+0x183c>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <menu+0x1840>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b0c      	cmp	r3, #12
 80028f2:	d17f      	bne.n	80029f4 <menu+0x17b4>
		if(dilSecim == 0) {
 80028f4:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <menu+0x1844>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80028fc:	4a62      	ldr	r2, [pc, #392]	; (8002a88 <menu+0x1848>)
 80028fe:	2101      	movs	r1, #1
 8002900:	2001      	movs	r0, #1
 8002902:	f005 f96b 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002906:	4a61      	ldr	r2, [pc, #388]	; (8002a8c <menu+0x184c>)
 8002908:	2101      	movs	r1, #1
 800290a:	2002      	movs	r0, #2
 800290c:	f005 f966 	bl	8007bdc <lcd_print>
 8002910:	e00d      	b.n	800292e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002912:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <menu+0x1844>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d109      	bne.n	800292e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 800291a:	4a5d      	ldr	r2, [pc, #372]	; (8002a90 <menu+0x1850>)
 800291c:	2101      	movs	r1, #1
 800291e:	2001      	movs	r0, #1
 8002920:	f005 f95c 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002924:	4a5b      	ldr	r2, [pc, #364]	; (8002a94 <menu+0x1854>)
 8002926:	2101      	movs	r1, #1
 8002928:	2002      	movs	r0, #2
 800292a:	f005 f957 	bl	8007bdc <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 800292e:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <menu+0x1858>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	220a      	movs	r2, #10
 8002934:	4959      	ldr	r1, [pc, #356]	; (8002a9c <menu+0x185c>)
 8002936:	4618      	mov	r0, r3
 8002938:	f009 fca2 	bl	800c280 <itoa>
		lcd_print(2,16,snum);
 800293c:	4a57      	ldr	r2, [pc, #348]	; (8002a9c <menu+0x185c>)
 800293e:	2110      	movs	r1, #16
 8002940:	2002      	movs	r0, #2
 8002942:	f005 f94b 	bl	8007bdc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002946:	2102      	movs	r1, #2
 8002948:	4849      	ldr	r0, [pc, #292]	; (8002a70 <menu+0x1830>)
 800294a:	f006 fc6d 	bl	8009228 <HAL_GPIO_ReadPin>
 800294e:	4603      	mov	r3, r0
 8002950:	2b01      	cmp	r3, #1
 8002952:	d119      	bne.n	8002988 <menu+0x1748>
 8002954:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <menu+0x1834>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	f083 0301 	eor.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d012      	beq.n	8002988 <menu+0x1748>
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <menu+0x1828>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10e      	bne.n	8002988 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <menu+0x1858>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	3301      	adds	r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <menu+0x1858>)
 8002974:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002976:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <menu+0x1858>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d902      	bls.n	8002984 <menu+0x1744>
				kapi2AcSure = 0;
 800297e:	4b46      	ldr	r3, [pc, #280]	; (8002a98 <menu+0x1858>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002984:	f002 f828 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002988:	2104      	movs	r1, #4
 800298a:	4839      	ldr	r0, [pc, #228]	; (8002a70 <menu+0x1830>)
 800298c:	f006 fc4c 	bl	8009228 <HAL_GPIO_ReadPin>
 8002990:	4603      	mov	r3, r0
 8002992:	2b01      	cmp	r3, #1
 8002994:	d119      	bne.n	80029ca <menu+0x178a>
 8002996:	4b37      	ldr	r3, [pc, #220]	; (8002a74 <menu+0x1834>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	f083 0301 	eor.w	r3, r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <menu+0x178a>
 80029a4:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <menu+0x1828>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10e      	bne.n	80029ca <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 80029ac:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <menu+0x1858>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <menu+0x1858>)
 80029b6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80029b8:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <menu+0x1858>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b06      	cmp	r3, #6
 80029be:	d902      	bls.n	80029c6 <menu+0x1786>
		   		kapi2AcSure = 5;
 80029c0:	4b35      	ldr	r3, [pc, #212]	; (8002a98 <menu+0x1858>)
 80029c2:	2205      	movs	r2, #5
 80029c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029c6:	f002 f807 	bl	80049d8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ca:	2108      	movs	r1, #8
 80029cc:	4828      	ldr	r0, [pc, #160]	; (8002a70 <menu+0x1830>)
 80029ce:	f006 fc2b 	bl	8009228 <HAL_GPIO_ReadPin>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d10d      	bne.n	80029f4 <menu+0x17b4>
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <menu+0x1834>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 80029e6:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <menu+0x1858>)
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <menu+0x1838>)
 80029ec:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <menu+0x183c>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <menu+0x1840>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b0d      	cmp	r3, #13
 80029fa:	f040 80b5 	bne.w	8002b68 <menu+0x1928>
		if(dilSecim == 0) {
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <menu+0x1844>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002a06:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <menu+0x1860>)
 8002a08:	2101      	movs	r1, #1
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f005 f8e6 	bl	8007bdc <lcd_print>
 8002a10:	e008      	b.n	8002a24 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002a12:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <menu+0x1844>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d104      	bne.n	8002a24 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002a1a:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <menu+0x1864>)
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f005 f8dc 	bl	8007bdc <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <menu+0x1868>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <menu+0x186c>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2002      	movs	r0, #2
 8002a32:	f005 f8d3 	bl	8007bdc <lcd_print>
 8002a36:	e048      	b.n	8002aca <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002a38:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <menu+0x1868>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d13b      	bne.n	8002ab8 <menu+0x1878>
			if(dilSecim == 0) {
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <menu+0x1844>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <menu+0x1870>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f005 f8c5 	bl	8007bdc <lcd_print>
 8002a52:	e03a      	b.n	8002aca <menu+0x188a>
			} else if(dilSecim == 1) {
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <menu+0x1844>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d136      	bne.n	8002aca <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <menu+0x1874>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	2002      	movs	r0, #2
 8002a62:	f005 f8bb 	bl	8007bdc <lcd_print>
 8002a66:	e030      	b.n	8002aca <menu+0x188a>
 8002a68:	2000020a 	.word	0x2000020a
 8002a6c:	0800d474 	.word	0x0800d474
 8002a70:	40010800 	.word	0x40010800
 8002a74:	2000022f 	.word	0x2000022f
 8002a78:	2000012c 	.word	0x2000012c
 8002a7c:	2000022c 	.word	0x2000022c
 8002a80:	20000200 	.word	0x20000200
 8002a84:	20000221 	.word	0x20000221
 8002a88:	0800d4f4 	.word	0x0800d4f4
 8002a8c:	0800d498 	.word	0x0800d498
 8002a90:	0800d508 	.word	0x0800d508
 8002a94:	0800d4bc 	.word	0x0800d4bc
 8002a98:	2000021a 	.word	0x2000021a
 8002a9c:	2000019c 	.word	0x2000019c
 8002aa0:	0800d51c 	.word	0x0800d51c
 8002aa4:	0800d530 	.word	0x0800d530
 8002aa8:	2000020b 	.word	0x2000020b
 8002aac:	0800d43c 	.word	0x0800d43c
 8002ab0:	0800d450 	.word	0x0800d450
 8002ab4:	0800d460 	.word	0x0800d460
			}
		} else if(kapitablaTip == 2) {
 8002ab8:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <menu+0x19e8>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d104      	bne.n	8002aca <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002ac0:	4a5a      	ldr	r2, [pc, #360]	; (8002c2c <menu+0x19ec>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f005 f889 	bl	8007bdc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aca:	2102      	movs	r1, #2
 8002acc:	4858      	ldr	r0, [pc, #352]	; (8002c30 <menu+0x19f0>)
 8002ace:	f006 fbab 	bl	8009228 <HAL_GPIO_ReadPin>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d115      	bne.n	8002b04 <menu+0x18c4>
 8002ad8:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <menu+0x19f4>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	f083 0301 	eor.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00e      	beq.n	8002b04 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002ae6:	4b50      	ldr	r3, [pc, #320]	; (8002c28 <menu+0x19e8>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	3301      	adds	r3, #1
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <menu+0x19e8>)
 8002af0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002af2:	4b4d      	ldr	r3, [pc, #308]	; (8002c28 <menu+0x19e8>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <menu+0x18c0>
				kapitablaTip = 0;
 8002afa:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <menu+0x19e8>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b00:	f001 ff6a 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b04:	2104      	movs	r1, #4
 8002b06:	484a      	ldr	r0, [pc, #296]	; (8002c30 <menu+0x19f0>)
 8002b08:	f006 fb8e 	bl	8009228 <HAL_GPIO_ReadPin>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d115      	bne.n	8002b3e <menu+0x18fe>
 8002b12:	4b48      	ldr	r3, [pc, #288]	; (8002c34 <menu+0x19f4>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f083 0301 	eor.w	r3, r3, #1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00e      	beq.n	8002b3e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002b20:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <menu+0x19e8>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <menu+0x19e8>)
 8002b2a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <menu+0x19e8>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d902      	bls.n	8002b3a <menu+0x18fa>
		   		kapitablaTip = 2;
 8002b34:	4b3c      	ldr	r3, [pc, #240]	; (8002c28 <menu+0x19e8>)
 8002b36:	2202      	movs	r2, #2
 8002b38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b3a:	f001 ff4d 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3e:	2108      	movs	r1, #8
 8002b40:	483b      	ldr	r0, [pc, #236]	; (8002c30 <menu+0x19f0>)
 8002b42:	f006 fb71 	bl	8009228 <HAL_GPIO_ReadPin>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10d      	bne.n	8002b68 <menu+0x1928>
 8002b4c:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <menu+0x19f4>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002b5a:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <menu+0x19e8>)
 8002b5c:	781a      	ldrb	r2, [r3, #0]
 8002b5e:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <menu+0x19f8>)
 8002b60:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <menu+0x19fc>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002b68:	4b35      	ldr	r3, [pc, #212]	; (8002c40 <menu+0x1a00>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b0e      	cmp	r3, #14
 8002b6e:	f040 80f2 	bne.w	8002d56 <menu+0x1b16>
		if(dilSecim == 0) {
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <menu+0x1a04>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002b7a:	4a33      	ldr	r2, [pc, #204]	; (8002c48 <menu+0x1a08>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f005 f82c 	bl	8007bdc <lcd_print>
 8002b84:	e008      	b.n	8002b98 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002b86:	4b2f      	ldr	r3, [pc, #188]	; (8002c44 <menu+0x1a04>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d104      	bne.n	8002b98 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002b8e:	4a2f      	ldr	r2, [pc, #188]	; (8002c4c <menu+0x1a0c>)
 8002b90:	2101      	movs	r1, #1
 8002b92:	2001      	movs	r0, #1
 8002b94:	f005 f822 	bl	8007bdc <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002b98:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <menu+0x1a10>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d113      	bne.n	8002bc8 <menu+0x1988>
			if(dilSecim == 0){
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <menu+0x1a04>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002ba8:	4a2a      	ldr	r2, [pc, #168]	; (8002c54 <menu+0x1a14>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	2002      	movs	r0, #2
 8002bae:	f005 f815 	bl	8007bdc <lcd_print>
 8002bb2:	e071      	b.n	8002c98 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002bb4:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <menu+0x1a04>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d16d      	bne.n	8002c98 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002bbc:	4a26      	ldr	r2, [pc, #152]	; (8002c58 <menu+0x1a18>)
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f005 f80b 	bl	8007bdc <lcd_print>
 8002bc6:	e067      	b.n	8002c98 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <menu+0x1a10>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d112      	bne.n	8002bf6 <menu+0x19b6>
			if(dilSecim == 0){
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <menu+0x1a04>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d104      	bne.n	8002be2 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <menu+0x1a1c>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	2002      	movs	r0, #2
 8002bde:	f004 fffd 	bl	8007bdc <lcd_print>
			}
			if(dilSecim == 1){
 8002be2:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <menu+0x1a04>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d156      	bne.n	8002c98 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <menu+0x1a20>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	2002      	movs	r0, #2
 8002bf0:	f004 fff4 	bl	8007bdc <lcd_print>
 8002bf4:	e050      	b.n	8002c98 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <menu+0x1a10>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d136      	bne.n	8002c6c <menu+0x1a2c>
			if(dilSecim == 0){
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <menu+0x1a04>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002c06:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <menu+0x1a24>)
 8002c08:	2101      	movs	r1, #1
 8002c0a:	2002      	movs	r0, #2
 8002c0c:	f004 ffe6 	bl	8007bdc <lcd_print>
 8002c10:	e042      	b.n	8002c98 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <menu+0x1a04>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d13e      	bne.n	8002c98 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <menu+0x1a28>)
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	2002      	movs	r0, #2
 8002c20:	f004 ffdc 	bl	8007bdc <lcd_print>
 8002c24:	e038      	b.n	8002c98 <menu+0x1a58>
 8002c26:	bf00      	nop
 8002c28:	2000020b 	.word	0x2000020b
 8002c2c:	0800d474 	.word	0x0800d474
 8002c30:	40010800 	.word	0x40010800
 8002c34:	2000022f 	.word	0x2000022f
 8002c38:	2000012c 	.word	0x2000012c
 8002c3c:	2000022c 	.word	0x2000022c
 8002c40:	20000200 	.word	0x20000200
 8002c44:	20000221 	.word	0x20000221
 8002c48:	0800d544 	.word	0x0800d544
 8002c4c:	0800d558 	.word	0x0800d558
 8002c50:	2000020d 	.word	0x2000020d
 8002c54:	0800d56c 	.word	0x0800d56c
 8002c58:	0800d57c 	.word	0x0800d57c
 8002c5c:	0800d58c 	.word	0x0800d58c
 8002c60:	0800d59c 	.word	0x0800d59c
 8002c64:	0800d5ac 	.word	0x0800d5ac
 8002c68:	0800d5c0 	.word	0x0800d5c0
			}
		} else if(kapiTablaAcKonum == 3) {
 8002c6c:	4b9b      	ldr	r3, [pc, #620]	; (8002edc <menu+0x1c9c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d111      	bne.n	8002c98 <menu+0x1a58>
			if(dilSecim == 0) {
 8002c74:	4b9a      	ldr	r3, [pc, #616]	; (8002ee0 <menu+0x1ca0>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002c7c:	4a99      	ldr	r2, [pc, #612]	; (8002ee4 <menu+0x1ca4>)
 8002c7e:	2101      	movs	r1, #1
 8002c80:	2002      	movs	r0, #2
 8002c82:	f004 ffab 	bl	8007bdc <lcd_print>
			}
			if(dilSecim == 1) {
 8002c86:	4b96      	ldr	r3, [pc, #600]	; (8002ee0 <menu+0x1ca0>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d104      	bne.n	8002c98 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002c8e:	4a96      	ldr	r2, [pc, #600]	; (8002ee8 <menu+0x1ca8>)
 8002c90:	2101      	movs	r1, #1
 8002c92:	2002      	movs	r0, #2
 8002c94:	f004 ffa2 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4894      	ldr	r0, [pc, #592]	; (8002eec <menu+0x1cac>)
 8002c9c:	f006 fac4 	bl	8009228 <HAL_GPIO_ReadPin>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d115      	bne.n	8002cd2 <menu+0x1a92>
 8002ca6:	4b92      	ldr	r3, [pc, #584]	; (8002ef0 <menu+0x1cb0>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	f083 0301 	eor.w	r3, r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00e      	beq.n	8002cd2 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002cb4:	4b89      	ldr	r3, [pc, #548]	; (8002edc <menu+0x1c9c>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b87      	ldr	r3, [pc, #540]	; (8002edc <menu+0x1c9c>)
 8002cbe:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002cc0:	4b86      	ldr	r3, [pc, #536]	; (8002edc <menu+0x1c9c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d902      	bls.n	8002cce <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002cc8:	4b84      	ldr	r3, [pc, #528]	; (8002edc <menu+0x1c9c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cce:	f001 fe83 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	4885      	ldr	r0, [pc, #532]	; (8002eec <menu+0x1cac>)
 8002cd6:	f006 faa7 	bl	8009228 <HAL_GPIO_ReadPin>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d115      	bne.n	8002d0c <menu+0x1acc>
 8002ce0:	4b83      	ldr	r3, [pc, #524]	; (8002ef0 <menu+0x1cb0>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	f083 0301 	eor.w	r3, r3, #1
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00e      	beq.n	8002d0c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002cee:	4b7b      	ldr	r3, [pc, #492]	; (8002edc <menu+0x1c9c>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b79      	ldr	r3, [pc, #484]	; (8002edc <menu+0x1c9c>)
 8002cf8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002cfa:	4b78      	ldr	r3, [pc, #480]	; (8002edc <menu+0x1c9c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d902      	bls.n	8002d08 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002d02:	4b76      	ldr	r3, [pc, #472]	; (8002edc <menu+0x1c9c>)
 8002d04:	2202      	movs	r2, #2
 8002d06:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d08:	f001 fe66 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d0c:	2108      	movs	r1, #8
 8002d0e:	4877      	ldr	r0, [pc, #476]	; (8002eec <menu+0x1cac>)
 8002d10:	f006 fa8a 	bl	8009228 <HAL_GPIO_ReadPin>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d11d      	bne.n	8002d56 <menu+0x1b16>
 8002d1a:	4b75      	ldr	r3, [pc, #468]	; (8002ef0 <menu+0x1cb0>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	f083 0301 	eor.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d016      	beq.n	8002d56 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002d28:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <menu+0x1c9c>)
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	4b71      	ldr	r3, [pc, #452]	; (8002ef4 <menu+0x1cb4>)
 8002d2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002d32:	4b6a      	ldr	r3, [pc, #424]	; (8002edc <menu+0x1c9c>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <menu+0x1b02>
 8002d3a:	4b68      	ldr	r3, [pc, #416]	; (8002edc <menu+0x1c9c>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d106      	bne.n	8002d50 <menu+0x1b10>
				altLimit = 1;
 8002d42:	4b6d      	ldr	r3, [pc, #436]	; (8002ef8 <menu+0x1cb8>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d48:	4b6b      	ldr	r3, [pc, #428]	; (8002ef8 <menu+0x1cb8>)
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	4b69      	ldr	r3, [pc, #420]	; (8002ef4 <menu+0x1cb4>)
 8002d4e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002d50:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <menu+0x1cbc>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002d56:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <menu+0x1cc0>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b0f      	cmp	r3, #15
 8002d5c:	d17f      	bne.n	8002e5e <menu+0x1c1e>
		if(dilSecim == 0) {
 8002d5e:	4b60      	ldr	r3, [pc, #384]	; (8002ee0 <menu+0x1ca0>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002d66:	4a67      	ldr	r2, [pc, #412]	; (8002f04 <menu+0x1cc4>)
 8002d68:	2101      	movs	r1, #1
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f004 ff36 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002d70:	4a65      	ldr	r2, [pc, #404]	; (8002f08 <menu+0x1cc8>)
 8002d72:	2101      	movs	r1, #1
 8002d74:	2002      	movs	r0, #2
 8002d76:	f004 ff31 	bl	8007bdc <lcd_print>
 8002d7a:	e00d      	b.n	8002d98 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002d7c:	4b58      	ldr	r3, [pc, #352]	; (8002ee0 <menu+0x1ca0>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d109      	bne.n	8002d98 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002d84:	4a61      	ldr	r2, [pc, #388]	; (8002f0c <menu+0x1ccc>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f004 ff27 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d8e:	4a60      	ldr	r2, [pc, #384]	; (8002f10 <menu+0x1cd0>)
 8002d90:	2101      	movs	r1, #1
 8002d92:	2002      	movs	r0, #2
 8002d94:	f004 ff22 	bl	8007bdc <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002d98:	4b5e      	ldr	r3, [pc, #376]	; (8002f14 <menu+0x1cd4>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	220a      	movs	r2, #10
 8002d9e:	495e      	ldr	r1, [pc, #376]	; (8002f18 <menu+0x1cd8>)
 8002da0:	4618      	mov	r0, r3
 8002da2:	f009 fa6d 	bl	800c280 <itoa>
		lcd_print(2,16,snum);
 8002da6:	4a5c      	ldr	r2, [pc, #368]	; (8002f18 <menu+0x1cd8>)
 8002da8:	2110      	movs	r1, #16
 8002daa:	2002      	movs	r0, #2
 8002dac:	f004 ff16 	bl	8007bdc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002db0:	2102      	movs	r1, #2
 8002db2:	484e      	ldr	r0, [pc, #312]	; (8002eec <menu+0x1cac>)
 8002db4:	f006 fa38 	bl	8009228 <HAL_GPIO_ReadPin>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d119      	bne.n	8002df2 <menu+0x1bb2>
 8002dbe:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <menu+0x1cb0>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	f083 0301 	eor.w	r3, r3, #1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <menu+0x1bb2>
 8002dcc:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <menu+0x1cdc>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10e      	bne.n	8002df2 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002dd4:	4b4f      	ldr	r3, [pc, #316]	; (8002f14 <menu+0x1cd4>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b4d      	ldr	r3, [pc, #308]	; (8002f14 <menu+0x1cd4>)
 8002dde:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002de0:	4b4c      	ldr	r3, [pc, #304]	; (8002f14 <menu+0x1cd4>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d902      	bls.n	8002dee <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002de8:	4b4a      	ldr	r3, [pc, #296]	; (8002f14 <menu+0x1cd4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dee:	f001 fdf3 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002df2:	2104      	movs	r1, #4
 8002df4:	483d      	ldr	r0, [pc, #244]	; (8002eec <menu+0x1cac>)
 8002df6:	f006 fa17 	bl	8009228 <HAL_GPIO_ReadPin>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d119      	bne.n	8002e34 <menu+0x1bf4>
 8002e00:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <menu+0x1cb0>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d012      	beq.n	8002e34 <menu+0x1bf4>
 8002e0e:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <menu+0x1cdc>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10e      	bne.n	8002e34 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002e16:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <menu+0x1cd4>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	; (8002f14 <menu+0x1cd4>)
 8002e20:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002e22:	4b3c      	ldr	r3, [pc, #240]	; (8002f14 <menu+0x1cd4>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d902      	bls.n	8002e30 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <menu+0x1cd4>)
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002e30:	f001 fdd2 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e34:	2108      	movs	r1, #8
 8002e36:	482d      	ldr	r0, [pc, #180]	; (8002eec <menu+0x1cac>)
 8002e38:	f006 f9f6 	bl	8009228 <HAL_GPIO_ReadPin>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10d      	bne.n	8002e5e <menu+0x1c1e>
 8002e42:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <menu+0x1cb0>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002e50:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <menu+0x1cd4>)
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <menu+0x1cb4>)
 8002e56:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <menu+0x1cbc>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <menu+0x1cc0>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	f040 80bc 	bne.w	8002fe0 <menu+0x1da0>
		if(dilSecim == 0) {
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <menu+0x1ca0>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002e70:	4a2b      	ldr	r2, [pc, #172]	; (8002f20 <menu+0x1ce0>)
 8002e72:	2101      	movs	r1, #1
 8002e74:	2001      	movs	r0, #1
 8002e76:	f004 feb1 	bl	8007bdc <lcd_print>
 8002e7a:	e008      	b.n	8002e8e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002e7c:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <menu+0x1ca0>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d104      	bne.n	8002e8e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <menu+0x1ce4>)
 8002e86:	2101      	movs	r1, #1
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f004 fea7 	bl	8007bdc <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <menu+0x1ce8>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d113      	bne.n	8002ebe <menu+0x1c7e>
			if(dilSecim == 0) {
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <menu+0x1ca0>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <menu+0x1ca4>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	2002      	movs	r0, #2
 8002ea4:	f004 fe9a 	bl	8007bdc <lcd_print>
 8002ea8:	e04b      	b.n	8002f42 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <menu+0x1ca0>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d147      	bne.n	8002f42 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002eb2:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <menu+0x1ca8>)
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	2002      	movs	r0, #2
 8002eb8:	f004 fe90 	bl	8007bdc <lcd_print>
 8002ebc:	e041      	b.n	8002f42 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <menu+0x1ce8>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d13d      	bne.n	8002f42 <menu+0x1d02>
			if(dilSecim == 0) {
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <menu+0x1ca0>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d130      	bne.n	8002f30 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <menu+0x1cec>)
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	2002      	movs	r0, #2
 8002ed4:	f004 fe82 	bl	8007bdc <lcd_print>
 8002ed8:	e033      	b.n	8002f42 <menu+0x1d02>
 8002eda:	bf00      	nop
 8002edc:	2000020d 	.word	0x2000020d
 8002ee0:	20000221 	.word	0x20000221
 8002ee4:	0800d234 	.word	0x0800d234
 8002ee8:	0800d248 	.word	0x0800d248
 8002eec:	40010800 	.word	0x40010800
 8002ef0:	2000022f 	.word	0x2000022f
 8002ef4:	2000012c 	.word	0x2000012c
 8002ef8:	20000206 	.word	0x20000206
 8002efc:	2000022c 	.word	0x2000022c
 8002f00:	20000200 	.word	0x20000200
 8002f04:	0800d5d4 	.word	0x0800d5d4
 8002f08:	0800d498 	.word	0x0800d498
 8002f0c:	0800d5e8 	.word	0x0800d5e8
 8002f10:	0800d4bc 	.word	0x0800d4bc
 8002f14:	2000021b 	.word	0x2000021b
 8002f18:	2000019c 	.word	0x2000019c
 8002f1c:	2000020b 	.word	0x2000020b
 8002f20:	0800d5fc 	.word	0x0800d5fc
 8002f24:	0800d610 	.word	0x0800d610
 8002f28:	2000020e 	.word	0x2000020e
 8002f2c:	0800d294 	.word	0x0800d294
			} else if(dilSecim == 1) {
 8002f30:	4b99      	ldr	r3, [pc, #612]	; (8003198 <menu+0x1f58>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d104      	bne.n	8002f42 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002f38:	4a98      	ldr	r2, [pc, #608]	; (800319c <menu+0x1f5c>)
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f004 fe4d 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f42:	2102      	movs	r1, #2
 8002f44:	4896      	ldr	r0, [pc, #600]	; (80031a0 <menu+0x1f60>)
 8002f46:	f006 f96f 	bl	8009228 <HAL_GPIO_ReadPin>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d115      	bne.n	8002f7c <menu+0x1d3c>
 8002f50:	4b94      	ldr	r3, [pc, #592]	; (80031a4 <menu+0x1f64>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	f083 0301 	eor.w	r3, r3, #1
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00e      	beq.n	8002f7c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002f5e:	4b92      	ldr	r3, [pc, #584]	; (80031a8 <menu+0x1f68>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4b90      	ldr	r3, [pc, #576]	; (80031a8 <menu+0x1f68>)
 8002f68:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002f6a:	4b8f      	ldr	r3, [pc, #572]	; (80031a8 <menu+0x1f68>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d902      	bls.n	8002f78 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002f72:	4b8d      	ldr	r3, [pc, #564]	; (80031a8 <menu+0x1f68>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f78:	f001 fd2e 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	4888      	ldr	r0, [pc, #544]	; (80031a0 <menu+0x1f60>)
 8002f80:	f006 f952 	bl	8009228 <HAL_GPIO_ReadPin>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d115      	bne.n	8002fb6 <menu+0x1d76>
 8002f8a:	4b86      	ldr	r3, [pc, #536]	; (80031a4 <menu+0x1f64>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	f083 0301 	eor.w	r3, r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00e      	beq.n	8002fb6 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002f98:	4b83      	ldr	r3, [pc, #524]	; (80031a8 <menu+0x1f68>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	4b81      	ldr	r3, [pc, #516]	; (80031a8 <menu+0x1f68>)
 8002fa2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002fa4:	4b80      	ldr	r3, [pc, #512]	; (80031a8 <menu+0x1f68>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002fac:	4b7e      	ldr	r3, [pc, #504]	; (80031a8 <menu+0x1f68>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fb2:	f001 fd11 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fb6:	2108      	movs	r1, #8
 8002fb8:	4879      	ldr	r0, [pc, #484]	; (80031a0 <menu+0x1f60>)
 8002fba:	f006 f935 	bl	8009228 <HAL_GPIO_ReadPin>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10d      	bne.n	8002fe0 <menu+0x1da0>
 8002fc4:	4b77      	ldr	r3, [pc, #476]	; (80031a4 <menu+0x1f64>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	f083 0301 	eor.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002fd2:	4b75      	ldr	r3, [pc, #468]	; (80031a8 <menu+0x1f68>)
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	4b75      	ldr	r3, [pc, #468]	; (80031ac <menu+0x1f6c>)
 8002fd8:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002fda:	4b75      	ldr	r3, [pc, #468]	; (80031b0 <menu+0x1f70>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002fe0:	4b74      	ldr	r3, [pc, #464]	; (80031b4 <menu+0x1f74>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b11      	cmp	r3, #17
 8002fe6:	f040 80c3 	bne.w	8003170 <menu+0x1f30>
		if(dilSecim == 0) {
 8002fea:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <menu+0x1f58>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d105      	bne.n	8002ffe <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002ff2:	4a71      	ldr	r2, [pc, #452]	; (80031b8 <menu+0x1f78>)
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f004 fdf0 	bl	8007bdc <lcd_print>
 8002ffc:	e008      	b.n	8003010 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002ffe:	4b66      	ldr	r3, [pc, #408]	; (8003198 <menu+0x1f58>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d104      	bne.n	8003010 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003006:	4a6d      	ldr	r2, [pc, #436]	; (80031bc <menu+0x1f7c>)
 8003008:	2101      	movs	r1, #1
 800300a:	2001      	movs	r0, #1
 800300c:	f004 fde6 	bl	8007bdc <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003010:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <menu+0x1f80>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d113      	bne.n	8003040 <menu+0x1e00>
			if(dilSecim == 0){
 8003018:	4b5f      	ldr	r3, [pc, #380]	; (8003198 <menu+0x1f58>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003020:	4a68      	ldr	r2, [pc, #416]	; (80031c4 <menu+0x1f84>)
 8003022:	2101      	movs	r1, #1
 8003024:	2002      	movs	r0, #2
 8003026:	f004 fdd9 	bl	8007bdc <lcd_print>
 800302a:	e038      	b.n	800309e <menu+0x1e5e>
			} else if(dilSecim == 1){
 800302c:	4b5a      	ldr	r3, [pc, #360]	; (8003198 <menu+0x1f58>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d134      	bne.n	800309e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003034:	4a64      	ldr	r2, [pc, #400]	; (80031c8 <menu+0x1f88>)
 8003036:	2101      	movs	r1, #1
 8003038:	2002      	movs	r0, #2
 800303a:	f004 fdcf 	bl	8007bdc <lcd_print>
 800303e:	e02e      	b.n	800309e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003040:	4b5f      	ldr	r3, [pc, #380]	; (80031c0 <menu+0x1f80>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d113      	bne.n	8003070 <menu+0x1e30>
			if(dilSecim == 0){
 8003048:	4b53      	ldr	r3, [pc, #332]	; (8003198 <menu+0x1f58>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003050:	4a5e      	ldr	r2, [pc, #376]	; (80031cc <menu+0x1f8c>)
 8003052:	2101      	movs	r1, #1
 8003054:	2002      	movs	r0, #2
 8003056:	f004 fdc1 	bl	8007bdc <lcd_print>
 800305a:	e020      	b.n	800309e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800305c:	4b4e      	ldr	r3, [pc, #312]	; (8003198 <menu+0x1f58>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d11c      	bne.n	800309e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003064:	4a5a      	ldr	r2, [pc, #360]	; (80031d0 <menu+0x1f90>)
 8003066:	2101      	movs	r1, #1
 8003068:	2002      	movs	r0, #2
 800306a:	f004 fdb7 	bl	8007bdc <lcd_print>
 800306e:	e016      	b.n	800309e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003070:	4b53      	ldr	r3, [pc, #332]	; (80031c0 <menu+0x1f80>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d112      	bne.n	800309e <menu+0x1e5e>
			if(dilSecim == 0) {
 8003078:	4b47      	ldr	r3, [pc, #284]	; (8003198 <menu+0x1f58>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003080:	4a54      	ldr	r2, [pc, #336]	; (80031d4 <menu+0x1f94>)
 8003082:	2101      	movs	r1, #1
 8003084:	2002      	movs	r0, #2
 8003086:	f004 fda9 	bl	8007bdc <lcd_print>
 800308a:	e008      	b.n	800309e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800308c:	4b42      	ldr	r3, [pc, #264]	; (8003198 <menu+0x1f58>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d104      	bne.n	800309e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003094:	4a50      	ldr	r2, [pc, #320]	; (80031d8 <menu+0x1f98>)
 8003096:	2101      	movs	r1, #1
 8003098:	2002      	movs	r0, #2
 800309a:	f004 fd9f 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800309e:	2102      	movs	r1, #2
 80030a0:	483f      	ldr	r0, [pc, #252]	; (80031a0 <menu+0x1f60>)
 80030a2:	f006 f8c1 	bl	8009228 <HAL_GPIO_ReadPin>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d115      	bne.n	80030d8 <menu+0x1e98>
 80030ac:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <menu+0x1f64>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	f083 0301 	eor.w	r3, r3, #1
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00e      	beq.n	80030d8 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <menu+0x1f80>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <menu+0x1f80>)
 80030c4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80030c6:	4b3e      	ldr	r3, [pc, #248]	; (80031c0 <menu+0x1f80>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d902      	bls.n	80030d4 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80030ce:	4b3c      	ldr	r3, [pc, #240]	; (80031c0 <menu+0x1f80>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030d4:	f001 fc80 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030d8:	2104      	movs	r1, #4
 80030da:	4831      	ldr	r0, [pc, #196]	; (80031a0 <menu+0x1f60>)
 80030dc:	f006 f8a4 	bl	8009228 <HAL_GPIO_ReadPin>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d115      	bne.n	8003112 <menu+0x1ed2>
 80030e6:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <menu+0x1f64>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	f083 0301 	eor.w	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80030f4:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <menu+0x1f80>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <menu+0x1f80>)
 80030fe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003100:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <menu+0x1f80>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d902      	bls.n	800310e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003108:	4b2d      	ldr	r3, [pc, #180]	; (80031c0 <menu+0x1f80>)
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800310e:	f001 fc63 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003112:	2108      	movs	r1, #8
 8003114:	4822      	ldr	r0, [pc, #136]	; (80031a0 <menu+0x1f60>)
 8003116:	f006 f887 	bl	8009228 <HAL_GPIO_ReadPin>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d127      	bne.n	8003170 <menu+0x1f30>
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <menu+0x1f64>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d020      	beq.n	8003170 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <menu+0x1f80>)
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <menu+0x1f6c>)
 8003134:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <menu+0x1f80>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d003      	beq.n	8003146 <menu+0x1f06>
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <menu+0x1f80>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d106      	bne.n	8003154 <menu+0x1f14>
				calismaSekli = 0;
 8003146:	4b25      	ldr	r3, [pc, #148]	; (80031dc <menu+0x1f9c>)
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800314c:	4b23      	ldr	r3, [pc, #140]	; (80031dc <menu+0x1f9c>)
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <menu+0x1f6c>)
 8003152:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <menu+0x1f80>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800315c:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <menu+0x1fa0>)
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003162:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <menu+0x1fa0>)
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <menu+0x1f6c>)
 8003168:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <menu+0x1f70>)
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003170:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <menu+0x1f74>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b12      	cmp	r3, #18
 8003176:	f040 80d5 	bne.w	8003324 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <menu+0x1f80>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d13c      	bne.n	80031fc <menu+0x1fbc>
			if(dilSecim == 0) {
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <menu+0x1f58>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d12e      	bne.n	80031e8 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800318a:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <menu+0x1fa4>)
 800318c:	2101      	movs	r1, #1
 800318e:	2001      	movs	r0, #1
 8003190:	f004 fd24 	bl	8007bdc <lcd_print>
 8003194:	e048      	b.n	8003228 <menu+0x1fe8>
 8003196:	bf00      	nop
 8003198:	20000221 	.word	0x20000221
 800319c:	0800d2a8 	.word	0x0800d2a8
 80031a0:	40010800 	.word	0x40010800
 80031a4:	2000022f 	.word	0x2000022f
 80031a8:	2000020e 	.word	0x2000020e
 80031ac:	2000012c 	.word	0x2000012c
 80031b0:	2000022c 	.word	0x2000022c
 80031b4:	20000200 	.word	0x20000200
 80031b8:	0800d624 	.word	0x0800d624
 80031bc:	0800d638 	.word	0x0800d638
 80031c0:	2000020f 	.word	0x2000020f
 80031c4:	0800d64c 	.word	0x0800d64c
 80031c8:	0800d65c 	.word	0x0800d65c
 80031cc:	0800d66c 	.word	0x0800d66c
 80031d0:	0800d67c 	.word	0x0800d67c
 80031d4:	0800d234 	.word	0x0800d234
 80031d8:	0800d248 	.word	0x0800d248
 80031dc:	20000201 	.word	0x20000201
 80031e0:	20000212 	.word	0x20000212
 80031e4:	0800d68c 	.word	0x0800d68c
			} else if(dilSecim == 1) {
 80031e8:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <menu+0x2198>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d11b      	bne.n	8003228 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80031f0:	4a7a      	ldr	r2, [pc, #488]	; (80033dc <menu+0x219c>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	2001      	movs	r0, #1
 80031f6:	f004 fcf1 	bl	8007bdc <lcd_print>
 80031fa:	e015      	b.n	8003228 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031fc:	4b78      	ldr	r3, [pc, #480]	; (80033e0 <menu+0x21a0>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d111      	bne.n	8003228 <menu+0x1fe8>
			if(dilSecim == 0){
 8003204:	4b74      	ldr	r3, [pc, #464]	; (80033d8 <menu+0x2198>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800320c:	4a75      	ldr	r2, [pc, #468]	; (80033e4 <menu+0x21a4>)
 800320e:	2101      	movs	r1, #1
 8003210:	2001      	movs	r0, #1
 8003212:	f004 fce3 	bl	8007bdc <lcd_print>
			}
			if(dilSecim == 1){
 8003216:	4b70      	ldr	r3, [pc, #448]	; (80033d8 <menu+0x2198>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d104      	bne.n	8003228 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800321e:	4a72      	ldr	r2, [pc, #456]	; (80033e8 <menu+0x21a8>)
 8003220:	2101      	movs	r1, #1
 8003222:	2001      	movs	r0, #1
 8003224:	f004 fcda 	bl	8007bdc <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003228:	4b70      	ldr	r3, [pc, #448]	; (80033ec <menu+0x21ac>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d113      	bne.n	8003258 <menu+0x2018>
			if(dilSecim == 0) {
 8003230:	4b69      	ldr	r3, [pc, #420]	; (80033d8 <menu+0x2198>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003238:	4a6d      	ldr	r2, [pc, #436]	; (80033f0 <menu+0x21b0>)
 800323a:	2101      	movs	r1, #1
 800323c:	2002      	movs	r0, #2
 800323e:	f004 fccd 	bl	8007bdc <lcd_print>
 8003242:	e020      	b.n	8003286 <menu+0x2046>
			} else if(dilSecim == 1){
 8003244:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <menu+0x2198>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d11c      	bne.n	8003286 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800324c:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <menu+0x21b4>)
 800324e:	2101      	movs	r1, #1
 8003250:	2002      	movs	r0, #2
 8003252:	f004 fcc3 	bl	8007bdc <lcd_print>
 8003256:	e016      	b.n	8003286 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003258:	4b64      	ldr	r3, [pc, #400]	; (80033ec <menu+0x21ac>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d112      	bne.n	8003286 <menu+0x2046>
			if(dilSecim == 0){
 8003260:	4b5d      	ldr	r3, [pc, #372]	; (80033d8 <menu+0x2198>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003268:	4a63      	ldr	r2, [pc, #396]	; (80033f8 <menu+0x21b8>)
 800326a:	2101      	movs	r1, #1
 800326c:	2002      	movs	r0, #2
 800326e:	f004 fcb5 	bl	8007bdc <lcd_print>
 8003272:	e008      	b.n	8003286 <menu+0x2046>
			} else if(dilSecim == 1){
 8003274:	4b58      	ldr	r3, [pc, #352]	; (80033d8 <menu+0x2198>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d104      	bne.n	8003286 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800327c:	4a5f      	ldr	r2, [pc, #380]	; (80033fc <menu+0x21bc>)
 800327e:	2101      	movs	r1, #1
 8003280:	2002      	movs	r0, #2
 8003282:	f004 fcab 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003286:	2102      	movs	r1, #2
 8003288:	485d      	ldr	r0, [pc, #372]	; (8003400 <menu+0x21c0>)
 800328a:	f005 ffcd 	bl	8009228 <HAL_GPIO_ReadPin>
 800328e:	4603      	mov	r3, r0
 8003290:	2b01      	cmp	r3, #1
 8003292:	d115      	bne.n	80032c0 <menu+0x2080>
 8003294:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <menu+0x21c4>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	f083 0301 	eor.w	r3, r3, #1
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00e      	beq.n	80032c0 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80032a2:	4b52      	ldr	r3, [pc, #328]	; (80033ec <menu+0x21ac>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	3301      	adds	r3, #1
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b50      	ldr	r3, [pc, #320]	; (80033ec <menu+0x21ac>)
 80032ac:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80032ae:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <menu+0x21ac>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d902      	bls.n	80032bc <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80032b6:	4b4d      	ldr	r3, [pc, #308]	; (80033ec <menu+0x21ac>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032bc:	f001 fb8c 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032c0:	2104      	movs	r1, #4
 80032c2:	484f      	ldr	r0, [pc, #316]	; (8003400 <menu+0x21c0>)
 80032c4:	f005 ffb0 	bl	8009228 <HAL_GPIO_ReadPin>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d115      	bne.n	80032fa <menu+0x20ba>
 80032ce:	4b4d      	ldr	r3, [pc, #308]	; (8003404 <menu+0x21c4>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	f083 0301 	eor.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80032dc:	4b43      	ldr	r3, [pc, #268]	; (80033ec <menu+0x21ac>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	4b41      	ldr	r3, [pc, #260]	; (80033ec <menu+0x21ac>)
 80032e6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80032e8:	4b40      	ldr	r3, [pc, #256]	; (80033ec <menu+0x21ac>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80032f0:	4b3e      	ldr	r3, [pc, #248]	; (80033ec <menu+0x21ac>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032f6:	f001 fb6f 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032fa:	2108      	movs	r1, #8
 80032fc:	4840      	ldr	r0, [pc, #256]	; (8003400 <menu+0x21c0>)
 80032fe:	f005 ff93 	bl	8009228 <HAL_GPIO_ReadPin>
 8003302:	4603      	mov	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10d      	bne.n	8003324 <menu+0x20e4>
 8003308:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <menu+0x21c4>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f083 0301 	eor.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d006      	beq.n	8003324 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003316:	4b35      	ldr	r3, [pc, #212]	; (80033ec <menu+0x21ac>)
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <menu+0x21c8>)
 800331c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <menu+0x21cc>)
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003324:	4b3a      	ldr	r3, [pc, #232]	; (8003410 <menu+0x21d0>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b13      	cmp	r3, #19
 800332a:	f040 80d5 	bne.w	80034d8 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800332e:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <menu+0x21a0>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d113      	bne.n	800335e <menu+0x211e>
			if(dilSecim == 0) {
 8003336:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <menu+0x2198>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800333e:	4a35      	ldr	r2, [pc, #212]	; (8003414 <menu+0x21d4>)
 8003340:	2101      	movs	r1, #1
 8003342:	2001      	movs	r0, #1
 8003344:	f004 fc4a 	bl	8007bdc <lcd_print>
 8003348:	e01f      	b.n	800338a <menu+0x214a>
			} else if(dilSecim == 1) {
 800334a:	4b23      	ldr	r3, [pc, #140]	; (80033d8 <menu+0x2198>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d11b      	bne.n	800338a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003352:	4a31      	ldr	r2, [pc, #196]	; (8003418 <menu+0x21d8>)
 8003354:	2101      	movs	r1, #1
 8003356:	2001      	movs	r0, #1
 8003358:	f004 fc40 	bl	8007bdc <lcd_print>
 800335c:	e015      	b.n	800338a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <menu+0x21a0>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d111      	bne.n	800338a <menu+0x214a>
			if(dilSecim == 0) {
 8003366:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <menu+0x2198>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800336e:	4a2b      	ldr	r2, [pc, #172]	; (800341c <menu+0x21dc>)
 8003370:	2101      	movs	r1, #1
 8003372:	2001      	movs	r0, #1
 8003374:	f004 fc32 	bl	8007bdc <lcd_print>
			}
			if(dilSecim == 1) {
 8003378:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <menu+0x2198>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d104      	bne.n	800338a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003380:	4a27      	ldr	r2, [pc, #156]	; (8003420 <menu+0x21e0>)
 8003382:	2101      	movs	r1, #1
 8003384:	2001      	movs	r0, #1
 8003386:	f004 fc29 	bl	8007bdc <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800338a:	4b26      	ldr	r3, [pc, #152]	; (8003424 <menu+0x21e4>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d113      	bne.n	80033ba <menu+0x217a>
			if(dilSecim == 0) {
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <menu+0x2198>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800339a:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <menu+0x21b0>)
 800339c:	2101      	movs	r1, #1
 800339e:	2002      	movs	r0, #2
 80033a0:	f004 fc1c 	bl	8007bdc <lcd_print>
 80033a4:	e049      	b.n	800343a <menu+0x21fa>
			} else if(dilSecim == 1) {
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <menu+0x2198>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d145      	bne.n	800343a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80033ae:	4a11      	ldr	r2, [pc, #68]	; (80033f4 <menu+0x21b4>)
 80033b0:	2101      	movs	r1, #1
 80033b2:	2002      	movs	r0, #2
 80033b4:	f004 fc12 	bl	8007bdc <lcd_print>
 80033b8:	e03f      	b.n	800343a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80033ba:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <menu+0x21e4>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d13b      	bne.n	800343a <menu+0x21fa>
			if(dilSecim == 0) {
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <menu+0x2198>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d12e      	bne.n	8003428 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80033ca:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <menu+0x21b8>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	2002      	movs	r0, #2
 80033d0:	f004 fc04 	bl	8007bdc <lcd_print>
 80033d4:	e031      	b.n	800343a <menu+0x21fa>
 80033d6:	bf00      	nop
 80033d8:	20000221 	.word	0x20000221
 80033dc:	0800d6a0 	.word	0x0800d6a0
 80033e0:	2000020f 	.word	0x2000020f
 80033e4:	0800d6b0 	.word	0x0800d6b0
 80033e8:	0800d6c4 	.word	0x0800d6c4
 80033ec:	20000210 	.word	0x20000210
 80033f0:	0800d234 	.word	0x0800d234
 80033f4:	0800d248 	.word	0x0800d248
 80033f8:	0800d294 	.word	0x0800d294
 80033fc:	0800d2a8 	.word	0x0800d2a8
 8003400:	40010800 	.word	0x40010800
 8003404:	2000022f 	.word	0x2000022f
 8003408:	2000012c 	.word	0x2000012c
 800340c:	2000022c 	.word	0x2000022c
 8003410:	20000200 	.word	0x20000200
 8003414:	0800d6d8 	.word	0x0800d6d8
 8003418:	0800d6ec 	.word	0x0800d6ec
 800341c:	0800d700 	.word	0x0800d700
 8003420:	0800d714 	.word	0x0800d714
 8003424:	20000211 	.word	0x20000211
			} else if(dilSecim == 1) {
 8003428:	4b90      	ldr	r3, [pc, #576]	; (800366c <menu+0x242c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d104      	bne.n	800343a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003430:	4a8f      	ldr	r2, [pc, #572]	; (8003670 <menu+0x2430>)
 8003432:	2101      	movs	r1, #1
 8003434:	2002      	movs	r0, #2
 8003436:	f004 fbd1 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800343a:	2102      	movs	r1, #2
 800343c:	488d      	ldr	r0, [pc, #564]	; (8003674 <menu+0x2434>)
 800343e:	f005 fef3 	bl	8009228 <HAL_GPIO_ReadPin>
 8003442:	4603      	mov	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d115      	bne.n	8003474 <menu+0x2234>
 8003448:	4b8b      	ldr	r3, [pc, #556]	; (8003678 <menu+0x2438>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f083 0301 	eor.w	r3, r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00e      	beq.n	8003474 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003456:	4b89      	ldr	r3, [pc, #548]	; (800367c <menu+0x243c>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	3301      	adds	r3, #1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4b87      	ldr	r3, [pc, #540]	; (800367c <menu+0x243c>)
 8003460:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003462:	4b86      	ldr	r3, [pc, #536]	; (800367c <menu+0x243c>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d902      	bls.n	8003470 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800346a:	4b84      	ldr	r3, [pc, #528]	; (800367c <menu+0x243c>)
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003470:	f001 fab2 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003474:	2104      	movs	r1, #4
 8003476:	487f      	ldr	r0, [pc, #508]	; (8003674 <menu+0x2434>)
 8003478:	f005 fed6 	bl	8009228 <HAL_GPIO_ReadPin>
 800347c:	4603      	mov	r3, r0
 800347e:	2b01      	cmp	r3, #1
 8003480:	d115      	bne.n	80034ae <menu+0x226e>
 8003482:	4b7d      	ldr	r3, [pc, #500]	; (8003678 <menu+0x2438>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	f083 0301 	eor.w	r3, r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003490:	4b7a      	ldr	r3, [pc, #488]	; (800367c <menu+0x243c>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	3b01      	subs	r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	4b78      	ldr	r3, [pc, #480]	; (800367c <menu+0x243c>)
 800349a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800349c:	4b77      	ldr	r3, [pc, #476]	; (800367c <menu+0x243c>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80034a4:	4b75      	ldr	r3, [pc, #468]	; (800367c <menu+0x243c>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034aa:	f001 fa95 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ae:	2108      	movs	r1, #8
 80034b0:	4870      	ldr	r0, [pc, #448]	; (8003674 <menu+0x2434>)
 80034b2:	f005 feb9 	bl	8009228 <HAL_GPIO_ReadPin>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10d      	bne.n	80034d8 <menu+0x2298>
 80034bc:	4b6e      	ldr	r3, [pc, #440]	; (8003678 <menu+0x2438>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	f083 0301 	eor.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d006      	beq.n	80034d8 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80034ca:	4b6c      	ldr	r3, [pc, #432]	; (800367c <menu+0x243c>)
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <menu+0x2440>)
 80034d0:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80034d2:	4b6c      	ldr	r3, [pc, #432]	; (8003684 <menu+0x2444>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80034d8:	4b6b      	ldr	r3, [pc, #428]	; (8003688 <menu+0x2448>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b14      	cmp	r3, #20
 80034de:	f040 80b5 	bne.w	800364c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80034e2:	4b6a      	ldr	r3, [pc, #424]	; (800368c <menu+0x244c>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d113      	bne.n	8003512 <menu+0x22d2>
			if(dilSecim == 0) {
 80034ea:	4b60      	ldr	r3, [pc, #384]	; (800366c <menu+0x242c>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80034f2:	4a67      	ldr	r2, [pc, #412]	; (8003690 <menu+0x2450>)
 80034f4:	2101      	movs	r1, #1
 80034f6:	2001      	movs	r0, #1
 80034f8:	f004 fb70 	bl	8007bdc <lcd_print>
 80034fc:	e020      	b.n	8003540 <menu+0x2300>
			} else if(dilSecim == 1) {
 80034fe:	4b5b      	ldr	r3, [pc, #364]	; (800366c <menu+0x242c>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d11c      	bne.n	8003540 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003506:	4a63      	ldr	r2, [pc, #396]	; (8003694 <menu+0x2454>)
 8003508:	2101      	movs	r1, #1
 800350a:	2001      	movs	r0, #1
 800350c:	f004 fb66 	bl	8007bdc <lcd_print>
 8003510:	e016      	b.n	8003540 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003512:	4b5e      	ldr	r3, [pc, #376]	; (800368c <menu+0x244c>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d112      	bne.n	8003540 <menu+0x2300>
			if(dilSecim == 0) {
 800351a:	4b54      	ldr	r3, [pc, #336]	; (800366c <menu+0x242c>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d105      	bne.n	800352e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003522:	4a5d      	ldr	r2, [pc, #372]	; (8003698 <menu+0x2458>)
 8003524:	2101      	movs	r1, #1
 8003526:	2001      	movs	r0, #1
 8003528:	f004 fb58 	bl	8007bdc <lcd_print>
 800352c:	e008      	b.n	8003540 <menu+0x2300>
			} else if(dilSecim == 1) {
 800352e:	4b4f      	ldr	r3, [pc, #316]	; (800366c <menu+0x242c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d104      	bne.n	8003540 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003536:	4a59      	ldr	r2, [pc, #356]	; (800369c <menu+0x245c>)
 8003538:	2101      	movs	r1, #1
 800353a:	2001      	movs	r0, #1
 800353c:	f004 fb4e 	bl	8007bdc <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003540:	4b57      	ldr	r3, [pc, #348]	; (80036a0 <menu+0x2460>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d113      	bne.n	8003570 <menu+0x2330>
			if(dilSecim == 0) {
 8003548:	4b48      	ldr	r3, [pc, #288]	; (800366c <menu+0x242c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003550:	4a54      	ldr	r2, [pc, #336]	; (80036a4 <menu+0x2464>)
 8003552:	2101      	movs	r1, #1
 8003554:	2002      	movs	r0, #2
 8003556:	f004 fb41 	bl	8007bdc <lcd_print>
 800355a:	e020      	b.n	800359e <menu+0x235e>
			} else if(dilSecim == 1) {
 800355c:	4b43      	ldr	r3, [pc, #268]	; (800366c <menu+0x242c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d11c      	bne.n	800359e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003564:	4a50      	ldr	r2, [pc, #320]	; (80036a8 <menu+0x2468>)
 8003566:	2101      	movs	r1, #1
 8003568:	2002      	movs	r0, #2
 800356a:	f004 fb37 	bl	8007bdc <lcd_print>
 800356e:	e016      	b.n	800359e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003570:	4b4b      	ldr	r3, [pc, #300]	; (80036a0 <menu+0x2460>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d112      	bne.n	800359e <menu+0x235e>
			if(dilSecim == 0) {
 8003578:	4b3c      	ldr	r3, [pc, #240]	; (800366c <menu+0x242c>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <menu+0x246c>)
 8003582:	2101      	movs	r1, #1
 8003584:	2002      	movs	r0, #2
 8003586:	f004 fb29 	bl	8007bdc <lcd_print>
 800358a:	e008      	b.n	800359e <menu+0x235e>
			} else if(dilSecim == 1) {
 800358c:	4b37      	ldr	r3, [pc, #220]	; (800366c <menu+0x242c>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d104      	bne.n	800359e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003594:	4a46      	ldr	r2, [pc, #280]	; (80036b0 <menu+0x2470>)
 8003596:	2101      	movs	r1, #1
 8003598:	2002      	movs	r0, #2
 800359a:	f004 fb1f 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800359e:	2102      	movs	r1, #2
 80035a0:	4834      	ldr	r0, [pc, #208]	; (8003674 <menu+0x2434>)
 80035a2:	f005 fe41 	bl	8009228 <HAL_GPIO_ReadPin>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d119      	bne.n	80035e0 <menu+0x23a0>
 80035ac:	4b32      	ldr	r3, [pc, #200]	; (8003678 <menu+0x2438>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	f083 0301 	eor.w	r3, r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <menu+0x23a0>
 80035ba:	4b34      	ldr	r3, [pc, #208]	; (800368c <menu+0x244c>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d10e      	bne.n	80035e0 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <menu+0x2460>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4b35      	ldr	r3, [pc, #212]	; (80036a0 <menu+0x2460>)
 80035cc:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80035ce:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <menu+0x2460>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d902      	bls.n	80035dc <menu+0x239c>
				devirmeSilindirTipi = 0;
 80035d6:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <menu+0x2460>)
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035dc:	f001 f9fc 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80035e0:	2104      	movs	r1, #4
 80035e2:	4824      	ldr	r0, [pc, #144]	; (8003674 <menu+0x2434>)
 80035e4:	f005 fe20 	bl	8009228 <HAL_GPIO_ReadPin>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d119      	bne.n	8003622 <menu+0x23e2>
 80035ee:	4b22      	ldr	r3, [pc, #136]	; (8003678 <menu+0x2438>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	f083 0301 	eor.w	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d012      	beq.n	8003622 <menu+0x23e2>
 80035fc:	4b23      	ldr	r3, [pc, #140]	; (800368c <menu+0x244c>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d10e      	bne.n	8003622 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003604:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <menu+0x2460>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	3b01      	subs	r3, #1
 800360a:	b2da      	uxtb	r2, r3
 800360c:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <menu+0x2460>)
 800360e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003610:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <menu+0x2460>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <menu+0x2460>)
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800361e:	f001 f9db 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003622:	2108      	movs	r1, #8
 8003624:	4813      	ldr	r0, [pc, #76]	; (8003674 <menu+0x2434>)
 8003626:	f005 fdff 	bl	8009228 <HAL_GPIO_ReadPin>
 800362a:	4603      	mov	r3, r0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d10d      	bne.n	800364c <menu+0x240c>
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <menu+0x2438>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	f083 0301 	eor.w	r3, r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800363e:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <menu+0x2460>)
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <menu+0x2440>)
 8003644:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003646:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <menu+0x2444>)
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800364c:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <menu+0x2448>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b15      	cmp	r3, #21
 8003652:	f040 80c2 	bne.w	80037da <menu+0x259a>
		if(dilSecim == 0) {
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <menu+0x242c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d12c      	bne.n	80036b8 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <menu+0x2474>)
 8003660:	2101      	movs	r1, #1
 8003662:	2001      	movs	r0, #1
 8003664:	f004 faba 	bl	8007bdc <lcd_print>
 8003668:	e02f      	b.n	80036ca <menu+0x248a>
 800366a:	bf00      	nop
 800366c:	20000221 	.word	0x20000221
 8003670:	0800d2a8 	.word	0x0800d2a8
 8003674:	40010800 	.word	0x40010800
 8003678:	2000022f 	.word	0x2000022f
 800367c:	20000211 	.word	0x20000211
 8003680:	2000012c 	.word	0x2000012c
 8003684:	2000022c 	.word	0x2000022c
 8003688:	20000200 	.word	0x20000200
 800368c:	2000020f 	.word	0x2000020f
 8003690:	0800d728 	.word	0x0800d728
 8003694:	0800d73c 	.word	0x0800d73c
 8003698:	0800d750 	.word	0x0800d750
 800369c:	0800d764 	.word	0x0800d764
 80036a0:	20000212 	.word	0x20000212
 80036a4:	0800d778 	.word	0x0800d778
 80036a8:	0800d78c 	.word	0x0800d78c
 80036ac:	0800d79c 	.word	0x0800d79c
 80036b0:	0800d7b0 	.word	0x0800d7b0
 80036b4:	0800d7c0 	.word	0x0800d7c0
		} else if(dilSecim == 1) {
 80036b8:	4b9c      	ldr	r3, [pc, #624]	; (800392c <menu+0x26ec>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d104      	bne.n	80036ca <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80036c0:	4a9b      	ldr	r2, [pc, #620]	; (8003930 <menu+0x26f0>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	2001      	movs	r0, #1
 80036c6:	f004 fa89 	bl	8007bdc <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80036ca:	4b9a      	ldr	r3, [pc, #616]	; (8003934 <menu+0x26f4>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d112      	bne.n	80036f8 <menu+0x24b8>
			if(dilSecim == 0) {
 80036d2:	4b96      	ldr	r3, [pc, #600]	; (800392c <menu+0x26ec>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80036da:	4a97      	ldr	r2, [pc, #604]	; (8003938 <menu+0x26f8>)
 80036dc:	2101      	movs	r1, #1
 80036de:	2002      	movs	r0, #2
 80036e0:	f004 fa7c 	bl	8007bdc <lcd_print>
			}
			if(dilSecim == 1) {
 80036e4:	4b91      	ldr	r3, [pc, #580]	; (800392c <menu+0x26ec>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d11c      	bne.n	8003726 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80036ec:	4a93      	ldr	r2, [pc, #588]	; (800393c <menu+0x26fc>)
 80036ee:	2101      	movs	r1, #1
 80036f0:	2002      	movs	r0, #2
 80036f2:	f004 fa73 	bl	8007bdc <lcd_print>
 80036f6:	e016      	b.n	8003726 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80036f8:	4b8e      	ldr	r3, [pc, #568]	; (8003934 <menu+0x26f4>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d112      	bne.n	8003726 <menu+0x24e6>
			if(dilSecim == 0) {
 8003700:	4b8a      	ldr	r3, [pc, #552]	; (800392c <menu+0x26ec>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003708:	4a8d      	ldr	r2, [pc, #564]	; (8003940 <menu+0x2700>)
 800370a:	2101      	movs	r1, #1
 800370c:	2002      	movs	r0, #2
 800370e:	f004 fa65 	bl	8007bdc <lcd_print>
 8003712:	e008      	b.n	8003726 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003714:	4b85      	ldr	r3, [pc, #532]	; (800392c <menu+0x26ec>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d104      	bne.n	8003726 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800371c:	4a89      	ldr	r2, [pc, #548]	; (8003944 <menu+0x2704>)
 800371e:	2101      	movs	r1, #1
 8003720:	2002      	movs	r0, #2
 8003722:	f004 fa5b 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003726:	2102      	movs	r1, #2
 8003728:	4887      	ldr	r0, [pc, #540]	; (8003948 <menu+0x2708>)
 800372a:	f005 fd7d 	bl	8009228 <HAL_GPIO_ReadPin>
 800372e:	4603      	mov	r3, r0
 8003730:	2b01      	cmp	r3, #1
 8003732:	d115      	bne.n	8003760 <menu+0x2520>
 8003734:	4b85      	ldr	r3, [pc, #532]	; (800394c <menu+0x270c>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	f083 0301 	eor.w	r3, r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00e      	beq.n	8003760 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003742:	4b7c      	ldr	r3, [pc, #496]	; (8003934 <menu+0x26f4>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	3301      	adds	r3, #1
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4b7a      	ldr	r3, [pc, #488]	; (8003934 <menu+0x26f4>)
 800374c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800374e:	4b79      	ldr	r3, [pc, #484]	; (8003934 <menu+0x26f4>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d902      	bls.n	800375c <menu+0x251c>
				platformSilindirTipi = 0;
 8003756:	4b77      	ldr	r3, [pc, #476]	; (8003934 <menu+0x26f4>)
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800375c:	f001 f93c 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003760:	2104      	movs	r1, #4
 8003762:	4879      	ldr	r0, [pc, #484]	; (8003948 <menu+0x2708>)
 8003764:	f005 fd60 	bl	8009228 <HAL_GPIO_ReadPin>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d115      	bne.n	800379a <menu+0x255a>
 800376e:	4b77      	ldr	r3, [pc, #476]	; (800394c <menu+0x270c>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	f083 0301 	eor.w	r3, r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 800377c:	4b6d      	ldr	r3, [pc, #436]	; (8003934 <menu+0x26f4>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	3b01      	subs	r3, #1
 8003782:	b2da      	uxtb	r2, r3
 8003784:	4b6b      	ldr	r3, [pc, #428]	; (8003934 <menu+0x26f4>)
 8003786:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003788:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <menu+0x26f4>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003790:	4b68      	ldr	r3, [pc, #416]	; (8003934 <menu+0x26f4>)
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003796:	f001 f91f 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800379a:	2108      	movs	r1, #8
 800379c:	486a      	ldr	r0, [pc, #424]	; (8003948 <menu+0x2708>)
 800379e:	f005 fd43 	bl	8009228 <HAL_GPIO_ReadPin>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d118      	bne.n	80037da <menu+0x259a>
 80037a8:	4b68      	ldr	r3, [pc, #416]	; (800394c <menu+0x270c>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	f083 0301 	eor.w	r3, r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d011      	beq.n	80037da <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80037b6:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <menu+0x26f4>)
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	4b65      	ldr	r3, [pc, #404]	; (8003950 <menu+0x2710>)
 80037bc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80037be:	4b5d      	ldr	r3, [pc, #372]	; (8003934 <menu+0x26f4>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d106      	bne.n	80037d4 <menu+0x2594>
				altLimit = 1;
 80037c6:	4b63      	ldr	r3, [pc, #396]	; (8003954 <menu+0x2714>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80037cc:	4b61      	ldr	r3, [pc, #388]	; (8003954 <menu+0x2714>)
 80037ce:	781a      	ldrb	r2, [r3, #0]
 80037d0:	4b5f      	ldr	r3, [pc, #380]	; (8003950 <menu+0x2710>)
 80037d2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80037d4:	4b60      	ldr	r3, [pc, #384]	; (8003958 <menu+0x2718>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80037da:	4b60      	ldr	r3, [pc, #384]	; (800395c <menu+0x271c>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b16      	cmp	r3, #22
 80037e0:	f040 8081 	bne.w	80038e6 <menu+0x26a6>
		if(dilSecim == 0) {
 80037e4:	4b51      	ldr	r3, [pc, #324]	; (800392c <menu+0x26ec>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d105      	bne.n	80037f8 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80037ec:	4a5c      	ldr	r2, [pc, #368]	; (8003960 <menu+0x2720>)
 80037ee:	2101      	movs	r1, #1
 80037f0:	2001      	movs	r0, #1
 80037f2:	f004 f9f3 	bl	8007bdc <lcd_print>
 80037f6:	e008      	b.n	800380a <menu+0x25ca>
		} else if(dilSecim == 1) {
 80037f8:	4b4c      	ldr	r3, [pc, #304]	; (800392c <menu+0x26ec>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d104      	bne.n	800380a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003800:	4a58      	ldr	r2, [pc, #352]	; (8003964 <menu+0x2724>)
 8003802:	2101      	movs	r1, #1
 8003804:	2001      	movs	r0, #1
 8003806:	f004 f9e9 	bl	8007bdc <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800380a:	4b48      	ldr	r3, [pc, #288]	; (800392c <menu+0x26ec>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003812:	4a55      	ldr	r2, [pc, #340]	; (8003968 <menu+0x2728>)
 8003814:	2101      	movs	r1, #1
 8003816:	2002      	movs	r0, #2
 8003818:	f004 f9e0 	bl	8007bdc <lcd_print>
 800381c:	e008      	b.n	8003830 <menu+0x25f0>
			} else if(dilSecim == 1){
 800381e:	4b43      	ldr	r3, [pc, #268]	; (800392c <menu+0x26ec>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d104      	bne.n	8003830 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003826:	4a51      	ldr	r2, [pc, #324]	; (800396c <menu+0x272c>)
 8003828:	2101      	movs	r1, #1
 800382a:	2002      	movs	r0, #2
 800382c:	f004 f9d6 	bl	8007bdc <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003830:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <menu+0x2730>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	220a      	movs	r2, #10
 8003836:	494f      	ldr	r1, [pc, #316]	; (8003974 <menu+0x2734>)
 8003838:	4618      	mov	r0, r3
 800383a:	f008 fd21 	bl	800c280 <itoa>
		lcd_print(2,16,snum);
 800383e:	4a4d      	ldr	r2, [pc, #308]	; (8003974 <menu+0x2734>)
 8003840:	2110      	movs	r1, #16
 8003842:	2002      	movs	r0, #2
 8003844:	f004 f9ca 	bl	8007bdc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003848:	2102      	movs	r1, #2
 800384a:	483f      	ldr	r0, [pc, #252]	; (8003948 <menu+0x2708>)
 800384c:	f005 fcec 	bl	8009228 <HAL_GPIO_ReadPin>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d115      	bne.n	8003882 <menu+0x2642>
 8003856:	4b3d      	ldr	r3, [pc, #244]	; (800394c <menu+0x270c>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	f083 0301 	eor.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00e      	beq.n	8003882 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003864:	4b42      	ldr	r3, [pc, #264]	; (8003970 <menu+0x2730>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	b2da      	uxtb	r2, r3
 800386c:	4b40      	ldr	r3, [pc, #256]	; (8003970 <menu+0x2730>)
 800386e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003870:	4b3f      	ldr	r3, [pc, #252]	; (8003970 <menu+0x2730>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b05      	cmp	r3, #5
 8003876:	d902      	bls.n	800387e <menu+0x263e>
				yukariValfTmr = 0;
 8003878:	4b3d      	ldr	r3, [pc, #244]	; (8003970 <menu+0x2730>)
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800387e:	f001 f8ab 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003882:	2104      	movs	r1, #4
 8003884:	4830      	ldr	r0, [pc, #192]	; (8003948 <menu+0x2708>)
 8003886:	f005 fccf 	bl	8009228 <HAL_GPIO_ReadPin>
 800388a:	4603      	mov	r3, r0
 800388c:	2b01      	cmp	r3, #1
 800388e:	d115      	bne.n	80038bc <menu+0x267c>
 8003890:	4b2e      	ldr	r3, [pc, #184]	; (800394c <menu+0x270c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	f083 0301 	eor.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00e      	beq.n	80038bc <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800389e:	4b34      	ldr	r3, [pc, #208]	; (8003970 <menu+0x2730>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4b32      	ldr	r3, [pc, #200]	; (8003970 <menu+0x2730>)
 80038a8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80038aa:	4b31      	ldr	r3, [pc, #196]	; (8003970 <menu+0x2730>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	d902      	bls.n	80038b8 <menu+0x2678>
		   		yukariValfTmr = 5;
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <menu+0x2730>)
 80038b4:	2205      	movs	r2, #5
 80038b6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038b8:	f001 f88e 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038bc:	2108      	movs	r1, #8
 80038be:	4822      	ldr	r0, [pc, #136]	; (8003948 <menu+0x2708>)
 80038c0:	f005 fcb2 	bl	8009228 <HAL_GPIO_ReadPin>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10d      	bne.n	80038e6 <menu+0x26a6>
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <menu+0x270c>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	f083 0301 	eor.w	r3, r3, #1
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d006      	beq.n	80038e6 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <menu+0x2730>)
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <menu+0x2710>)
 80038de:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <menu+0x2718>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <menu+0x271c>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b17      	cmp	r3, #23
 80038ec:	f040 80ac 	bne.w	8003a48 <menu+0x2808>
		if(dilSecim == 0) {
 80038f0:	4b0e      	ldr	r3, [pc, #56]	; (800392c <menu+0x26ec>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80038f8:	4a1f      	ldr	r2, [pc, #124]	; (8003978 <menu+0x2738>)
 80038fa:	2101      	movs	r1, #1
 80038fc:	2001      	movs	r0, #1
 80038fe:	f004 f96d 	bl	8007bdc <lcd_print>
 8003902:	e008      	b.n	8003916 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <menu+0x26ec>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d104      	bne.n	8003916 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 800390c:	4a1b      	ldr	r2, [pc, #108]	; (800397c <menu+0x273c>)
 800390e:	2101      	movs	r1, #1
 8003910:	2001      	movs	r0, #1
 8003912:	f004 f963 	bl	8007bdc <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003916:	4b05      	ldr	r3, [pc, #20]	; (800392c <menu+0x26ec>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d130      	bne.n	8003980 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <menu+0x2728>)
 8003920:	2101      	movs	r1, #1
 8003922:	2002      	movs	r0, #2
 8003924:	f004 f95a 	bl	8007bdc <lcd_print>
 8003928:	e033      	b.n	8003992 <menu+0x2752>
 800392a:	bf00      	nop
 800392c:	20000221 	.word	0x20000221
 8003930:	0800d7d4 	.word	0x0800d7d4
 8003934:	20000213 	.word	0x20000213
 8003938:	0800d778 	.word	0x0800d778
 800393c:	0800d78c 	.word	0x0800d78c
 8003940:	0800d79c 	.word	0x0800d79c
 8003944:	0800d7b0 	.word	0x0800d7b0
 8003948:	40010800 	.word	0x40010800
 800394c:	2000022f 	.word	0x2000022f
 8003950:	2000012c 	.word	0x2000012c
 8003954:	20000206 	.word	0x20000206
 8003958:	2000022c 	.word	0x2000022c
 800395c:	20000200 	.word	0x20000200
 8003960:	0800d7e4 	.word	0x0800d7e4
 8003964:	0800d7f8 	.word	0x0800d7f8
 8003968:	0800d498 	.word	0x0800d498
 800396c:	0800d80c 	.word	0x0800d80c
 8003970:	20000214 	.word	0x20000214
 8003974:	2000019c 	.word	0x2000019c
 8003978:	0800d81c 	.word	0x0800d81c
 800397c:	0800d830 	.word	0x0800d830
			} else if(dilSecim == 1) {
 8003980:	4b98      	ldr	r3, [pc, #608]	; (8003be4 <menu+0x29a4>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d104      	bne.n	8003992 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003988:	4a97      	ldr	r2, [pc, #604]	; (8003be8 <menu+0x29a8>)
 800398a:	2101      	movs	r1, #1
 800398c:	2002      	movs	r0, #2
 800398e:	f004 f925 	bl	8007bdc <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003992:	4b96      	ldr	r3, [pc, #600]	; (8003bec <menu+0x29ac>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	220a      	movs	r2, #10
 8003998:	4995      	ldr	r1, [pc, #596]	; (8003bf0 <menu+0x29b0>)
 800399a:	4618      	mov	r0, r3
 800399c:	f008 fc70 	bl	800c280 <itoa>
		lcd_print(2,16,snum);
 80039a0:	4a93      	ldr	r2, [pc, #588]	; (8003bf0 <menu+0x29b0>)
 80039a2:	2110      	movs	r1, #16
 80039a4:	2002      	movs	r0, #2
 80039a6:	f004 f919 	bl	8007bdc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039aa:	2102      	movs	r1, #2
 80039ac:	4891      	ldr	r0, [pc, #580]	; (8003bf4 <menu+0x29b4>)
 80039ae:	f005 fc3b 	bl	8009228 <HAL_GPIO_ReadPin>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d115      	bne.n	80039e4 <menu+0x27a4>
 80039b8:	4b8f      	ldr	r3, [pc, #572]	; (8003bf8 <menu+0x29b8>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	f083 0301 	eor.w	r3, r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00e      	beq.n	80039e4 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 80039c6:	4b89      	ldr	r3, [pc, #548]	; (8003bec <menu+0x29ac>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	4b87      	ldr	r3, [pc, #540]	; (8003bec <menu+0x29ac>)
 80039d0:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80039d2:	4b86      	ldr	r3, [pc, #536]	; (8003bec <menu+0x29ac>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d902      	bls.n	80039e0 <menu+0x27a0>
				asagiValfTmr = 0;
 80039da:	4b84      	ldr	r3, [pc, #528]	; (8003bec <menu+0x29ac>)
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039e0:	f000 fffa 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e4:	2104      	movs	r1, #4
 80039e6:	4883      	ldr	r0, [pc, #524]	; (8003bf4 <menu+0x29b4>)
 80039e8:	f005 fc1e 	bl	8009228 <HAL_GPIO_ReadPin>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d115      	bne.n	8003a1e <menu+0x27de>
 80039f2:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <menu+0x29b8>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	f083 0301 	eor.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003a00:	4b7a      	ldr	r3, [pc, #488]	; (8003bec <menu+0x29ac>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	4b78      	ldr	r3, [pc, #480]	; (8003bec <menu+0x29ac>)
 8003a0a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003a0c:	4b77      	ldr	r3, [pc, #476]	; (8003bec <menu+0x29ac>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b06      	cmp	r3, #6
 8003a12:	d902      	bls.n	8003a1a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003a14:	4b75      	ldr	r3, [pc, #468]	; (8003bec <menu+0x29ac>)
 8003a16:	2205      	movs	r2, #5
 8003a18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a1a:	f000 ffdd 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a1e:	2108      	movs	r1, #8
 8003a20:	4874      	ldr	r0, [pc, #464]	; (8003bf4 <menu+0x29b4>)
 8003a22:	f005 fc01 	bl	8009228 <HAL_GPIO_ReadPin>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d10d      	bne.n	8003a48 <menu+0x2808>
 8003a2c:	4b72      	ldr	r3, [pc, #456]	; (8003bf8 <menu+0x29b8>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	f083 0301 	eor.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003a3a:	4b6c      	ldr	r3, [pc, #432]	; (8003bec <menu+0x29ac>)
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	4b6f      	ldr	r3, [pc, #444]	; (8003bfc <menu+0x29bc>)
 8003a40:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003a42:	4b6f      	ldr	r3, [pc, #444]	; (8003c00 <menu+0x29c0>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003a48:	4b6e      	ldr	r3, [pc, #440]	; (8003c04 <menu+0x29c4>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b18      	cmp	r3, #24
 8003a4e:	f040 809d 	bne.w	8003b8c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003a52:	4b6d      	ldr	r3, [pc, #436]	; (8003c08 <menu+0x29c8>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d113      	bne.n	8003a82 <menu+0x2842>
			if(dilSecim == 0) {
 8003a5a:	4b62      	ldr	r3, [pc, #392]	; (8003be4 <menu+0x29a4>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003a62:	4a6a      	ldr	r2, [pc, #424]	; (8003c0c <menu+0x29cc>)
 8003a64:	2101      	movs	r1, #1
 8003a66:	2001      	movs	r0, #1
 8003a68:	f004 f8b8 	bl	8007bdc <lcd_print>
 8003a6c:	e020      	b.n	8003ab0 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a6e:	4b5d      	ldr	r3, [pc, #372]	; (8003be4 <menu+0x29a4>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d11c      	bne.n	8003ab0 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003a76:	4a66      	ldr	r2, [pc, #408]	; (8003c10 <menu+0x29d0>)
 8003a78:	2101      	movs	r1, #1
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f004 f8ae 	bl	8007bdc <lcd_print>
 8003a80:	e016      	b.n	8003ab0 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a82:	4b61      	ldr	r3, [pc, #388]	; (8003c08 <menu+0x29c8>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d112      	bne.n	8003ab0 <menu+0x2870>
			if(dilSecim == 0) {
 8003a8a:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <menu+0x29a4>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d105      	bne.n	8003a9e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003a92:	4a60      	ldr	r2, [pc, #384]	; (8003c14 <menu+0x29d4>)
 8003a94:	2101      	movs	r1, #1
 8003a96:	2001      	movs	r0, #1
 8003a98:	f004 f8a0 	bl	8007bdc <lcd_print>
 8003a9c:	e008      	b.n	8003ab0 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a9e:	4b51      	ldr	r3, [pc, #324]	; (8003be4 <menu+0x29a4>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d104      	bne.n	8003ab0 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003aa6:	4a5c      	ldr	r2, [pc, #368]	; (8003c18 <menu+0x29d8>)
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f004 f896 	bl	8007bdc <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	; (8003be4 <menu+0x29a4>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d105      	bne.n	8003ac4 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ab8:	4a58      	ldr	r2, [pc, #352]	; (8003c1c <menu+0x29dc>)
 8003aba:	2101      	movs	r1, #1
 8003abc:	2002      	movs	r0, #2
 8003abe:	f004 f88d 	bl	8007bdc <lcd_print>
 8003ac2:	e008      	b.n	8003ad6 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003ac4:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <menu+0x29a4>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d104      	bne.n	8003ad6 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003acc:	4a46      	ldr	r2, [pc, #280]	; (8003be8 <menu+0x29a8>)
 8003ace:	2101      	movs	r1, #1
 8003ad0:	2002      	movs	r0, #2
 8003ad2:	f004 f883 	bl	8007bdc <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003ad6:	4b52      	ldr	r3, [pc, #328]	; (8003c20 <menu+0x29e0>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	220a      	movs	r2, #10
 8003adc:	4944      	ldr	r1, [pc, #272]	; (8003bf0 <menu+0x29b0>)
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f008 fbce 	bl	800c280 <itoa>
		lcd_print(2, 16, snum);
 8003ae4:	4a42      	ldr	r2, [pc, #264]	; (8003bf0 <menu+0x29b0>)
 8003ae6:	2110      	movs	r1, #16
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f004 f877 	bl	8007bdc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aee:	2102      	movs	r1, #2
 8003af0:	4840      	ldr	r0, [pc, #256]	; (8003bf4 <menu+0x29b4>)
 8003af2:	f005 fb99 	bl	8009228 <HAL_GPIO_ReadPin>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d115      	bne.n	8003b28 <menu+0x28e8>
 8003afc:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <menu+0x29b8>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	f083 0301 	eor.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00e      	beq.n	8003b28 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003b0a:	4b45      	ldr	r3, [pc, #276]	; (8003c20 <menu+0x29e0>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <menu+0x29e0>)
 8003b14:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003b16:	4b42      	ldr	r3, [pc, #264]	; (8003c20 <menu+0x29e0>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	d902      	bls.n	8003b24 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003b1e:	4b40      	ldr	r3, [pc, #256]	; (8003c20 <menu+0x29e0>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b24:	f000 ff58 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b28:	2104      	movs	r1, #4
 8003b2a:	4832      	ldr	r0, [pc, #200]	; (8003bf4 <menu+0x29b4>)
 8003b2c:	f005 fb7c 	bl	8009228 <HAL_GPIO_ReadPin>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d115      	bne.n	8003b62 <menu+0x2922>
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <menu+0x29b8>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	f083 0301 	eor.w	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003b44:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <menu+0x29e0>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <menu+0x29e0>)
 8003b4e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003b50:	4b33      	ldr	r3, [pc, #204]	; (8003c20 <menu+0x29e0>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b06      	cmp	r3, #6
 8003b56:	d902      	bls.n	8003b5e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003b58:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <menu+0x29e0>)
 8003b5a:	2205      	movs	r2, #5
 8003b5c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b5e:	f000 ff3b 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b62:	2108      	movs	r1, #8
 8003b64:	4823      	ldr	r0, [pc, #140]	; (8003bf4 <menu+0x29b4>)
 8003b66:	f005 fb5f 	bl	8009228 <HAL_GPIO_ReadPin>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d10d      	bne.n	8003b8c <menu+0x294c>
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <menu+0x29b8>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f083 0301 	eor.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003b7e:	4b28      	ldr	r3, [pc, #160]	; (8003c20 <menu+0x29e0>)
 8003b80:	781a      	ldrb	r2, [r3, #0]
 8003b82:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <menu+0x29bc>)
 8003b84:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003b86:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <menu+0x29c0>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <menu+0x29c4>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b19      	cmp	r3, #25
 8003b92:	f040 80c4 	bne.w	8003d1e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003b96:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <menu+0x29c8>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d113      	bne.n	8003bc6 <menu+0x2986>
			if(dilSecim == 0) {
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <menu+0x29a4>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d105      	bne.n	8003bb2 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <menu+0x29e4>)
 8003ba8:	2101      	movs	r1, #1
 8003baa:	2001      	movs	r0, #1
 8003bac:	f004 f816 	bl	8007bdc <lcd_print>
 8003bb0:	e047      	b.n	8003c42 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <menu+0x29a4>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d143      	bne.n	8003c42 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003bba:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <menu+0x29e8>)
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f004 f80c 	bl	8007bdc <lcd_print>
 8003bc4:	e03d      	b.n	8003c42 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <menu+0x29c8>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d139      	bne.n	8003c42 <menu+0x2a02>
			if(dilSecim == 0) {
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <menu+0x29a4>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d12c      	bne.n	8003c30 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003bd6:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <menu+0x29ec>)
 8003bd8:	2101      	movs	r1, #1
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f003 fffe 	bl	8007bdc <lcd_print>
 8003be0:	e02f      	b.n	8003c42 <menu+0x2a02>
 8003be2:	bf00      	nop
 8003be4:	20000221 	.word	0x20000221
 8003be8:	0800d80c 	.word	0x0800d80c
 8003bec:	20000215 	.word	0x20000215
 8003bf0:	2000019c 	.word	0x2000019c
 8003bf4:	40010800 	.word	0x40010800
 8003bf8:	2000022f 	.word	0x2000022f
 8003bfc:	2000012c 	.word	0x2000012c
 8003c00:	2000022c 	.word	0x2000022c
 8003c04:	20000200 	.word	0x20000200
 8003c08:	2000020f 	.word	0x2000020f
 8003c0c:	0800d844 	.word	0x0800d844
 8003c10:	0800d858 	.word	0x0800d858
 8003c14:	0800d86c 	.word	0x0800d86c
 8003c18:	0800d880 	.word	0x0800d880
 8003c1c:	0800d498 	.word	0x0800d498
 8003c20:	20000216 	.word	0x20000216
 8003c24:	0800d894 	.word	0x0800d894
 8003c28:	0800d8a8 	.word	0x0800d8a8
 8003c2c:	0800d8bc 	.word	0x0800d8bc
			} else if(dilSecim == 1) {
 8003c30:	4b73      	ldr	r3, [pc, #460]	; (8003e00 <menu+0x2bc0>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d104      	bne.n	8003c42 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003c38:	4a72      	ldr	r2, [pc, #456]	; (8003e04 <menu+0x2bc4>)
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f003 ffcd 	bl	8007bdc <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003c42:	4b6f      	ldr	r3, [pc, #444]	; (8003e00 <menu+0x2bc0>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c4a:	4a6f      	ldr	r2, [pc, #444]	; (8003e08 <menu+0x2bc8>)
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	2002      	movs	r0, #2
 8003c50:	f003 ffc4 	bl	8007bdc <lcd_print>
 8003c54:	e008      	b.n	8003c68 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003c56:	4b6a      	ldr	r3, [pc, #424]	; (8003e00 <menu+0x2bc0>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d104      	bne.n	8003c68 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003c5e:	4a6b      	ldr	r2, [pc, #428]	; (8003e0c <menu+0x2bcc>)
 8003c60:	2101      	movs	r1, #1
 8003c62:	2002      	movs	r0, #2
 8003c64:	f003 ffba 	bl	8007bdc <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003c68:	4b69      	ldr	r3, [pc, #420]	; (8003e10 <menu+0x2bd0>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	220a      	movs	r2, #10
 8003c6e:	4969      	ldr	r1, [pc, #420]	; (8003e14 <menu+0x2bd4>)
 8003c70:	4618      	mov	r0, r3
 8003c72:	f008 fb05 	bl	800c280 <itoa>
		lcd_print(2,16,snum);
 8003c76:	4a67      	ldr	r2, [pc, #412]	; (8003e14 <menu+0x2bd4>)
 8003c78:	2110      	movs	r1, #16
 8003c7a:	2002      	movs	r0, #2
 8003c7c:	f003 ffae 	bl	8007bdc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c80:	2102      	movs	r1, #2
 8003c82:	4865      	ldr	r0, [pc, #404]	; (8003e18 <menu+0x2bd8>)
 8003c84:	f005 fad0 	bl	8009228 <HAL_GPIO_ReadPin>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d115      	bne.n	8003cba <menu+0x2a7a>
 8003c8e:	4b63      	ldr	r3, [pc, #396]	; (8003e1c <menu+0x2bdc>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	f083 0301 	eor.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003c9c:	4b5c      	ldr	r3, [pc, #368]	; (8003e10 <menu+0x2bd0>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	4b5a      	ldr	r3, [pc, #360]	; (8003e10 <menu+0x2bd0>)
 8003ca6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003ca8:	4b59      	ldr	r3, [pc, #356]	; (8003e10 <menu+0x2bd0>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d902      	bls.n	8003cb6 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003cb0:	4b57      	ldr	r3, [pc, #348]	; (8003e10 <menu+0x2bd0>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cb6:	f000 fe8f 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cba:	2104      	movs	r1, #4
 8003cbc:	4856      	ldr	r0, [pc, #344]	; (8003e18 <menu+0x2bd8>)
 8003cbe:	f005 fab3 	bl	8009228 <HAL_GPIO_ReadPin>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d115      	bne.n	8003cf4 <menu+0x2ab4>
 8003cc8:	4b54      	ldr	r3, [pc, #336]	; (8003e1c <menu+0x2bdc>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	f083 0301 	eor.w	r3, r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00e      	beq.n	8003cf4 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003cd6:	4b4e      	ldr	r3, [pc, #312]	; (8003e10 <menu+0x2bd0>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <menu+0x2bd0>)
 8003ce0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003ce2:	4b4b      	ldr	r3, [pc, #300]	; (8003e10 <menu+0x2bd0>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d902      	bls.n	8003cf0 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003cea:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <menu+0x2bd0>)
 8003cec:	2205      	movs	r2, #5
 8003cee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cf0:	f000 fe72 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cf4:	2108      	movs	r1, #8
 8003cf6:	4848      	ldr	r0, [pc, #288]	; (8003e18 <menu+0x2bd8>)
 8003cf8:	f005 fa96 	bl	8009228 <HAL_GPIO_ReadPin>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10d      	bne.n	8003d1e <menu+0x2ade>
 8003d02:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <menu+0x2bdc>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	f083 0301 	eor.w	r3, r3, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d006      	beq.n	8003d1e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003d10:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <menu+0x2bd0>)
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <menu+0x2be0>)
 8003d16:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003d18:	4b42      	ldr	r3, [pc, #264]	; (8003e24 <menu+0x2be4>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003d1e:	4b42      	ldr	r3, [pc, #264]	; (8003e28 <menu+0x2be8>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b1a      	cmp	r3, #26
 8003d24:	f040 80ec 	bne.w	8003f00 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003d28:	4b35      	ldr	r3, [pc, #212]	; (8003e00 <menu+0x2bc0>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d105      	bne.n	8003d3c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003d30:	4a3e      	ldr	r2, [pc, #248]	; (8003e2c <menu+0x2bec>)
 8003d32:	2101      	movs	r1, #1
 8003d34:	2001      	movs	r0, #1
 8003d36:	f003 ff51 	bl	8007bdc <lcd_print>
 8003d3a:	e008      	b.n	8003d4e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003d3c:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <menu+0x2bc0>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d104      	bne.n	8003d4e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003d44:	4a3a      	ldr	r2, [pc, #232]	; (8003e30 <menu+0x2bf0>)
 8003d46:	2101      	movs	r1, #1
 8003d48:	2001      	movs	r0, #1
 8003d4a:	f003 ff47 	bl	8007bdc <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003d4e:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <menu+0x2bf4>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b63      	cmp	r3, #99	; 0x63
 8003d54:	d91e      	bls.n	8003d94 <menu+0x2b54>
			if(dilSecim == 0) {
 8003d56:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <menu+0x2bc0>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d5e:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <menu+0x2bc8>)
 8003d60:	2101      	movs	r1, #1
 8003d62:	2002      	movs	r0, #2
 8003d64:	f003 ff3a 	bl	8007bdc <lcd_print>
			}
			if(dilSecim == 1) {
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <menu+0x2bc0>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d104      	bne.n	8003d7a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003d70:	4a26      	ldr	r2, [pc, #152]	; (8003e0c <menu+0x2bcc>)
 8003d72:	2101      	movs	r1, #1
 8003d74:	2002      	movs	r0, #2
 8003d76:	f003 ff31 	bl	8007bdc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <menu+0x2bf4>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	220a      	movs	r2, #10
 8003d80:	4924      	ldr	r1, [pc, #144]	; (8003e14 <menu+0x2bd4>)
 8003d82:	4618      	mov	r0, r3
 8003d84:	f008 fa7c 	bl	800c280 <itoa>
			lcd_print(2,14,snum);
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <menu+0x2bd4>)
 8003d8a:	210e      	movs	r1, #14
 8003d8c:	2002      	movs	r0, #2
 8003d8e:	f003 ff25 	bl	8007bdc <lcd_print>
 8003d92:	e066      	b.n	8003e62 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003d94:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <menu+0x2bf4>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b09      	cmp	r3, #9
 8003d9a:	d923      	bls.n	8003de4 <menu+0x2ba4>
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <menu+0x2bf4>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b63      	cmp	r3, #99	; 0x63
 8003da2:	d81f      	bhi.n	8003de4 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <menu+0x2bc0>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003dac:	4a16      	ldr	r2, [pc, #88]	; (8003e08 <menu+0x2bc8>)
 8003dae:	2101      	movs	r1, #1
 8003db0:	2002      	movs	r0, #2
 8003db2:	f003 ff13 	bl	8007bdc <lcd_print>
 8003db6:	e008      	b.n	8003dca <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <menu+0x2bc0>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d104      	bne.n	8003dca <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003dc0:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <menu+0x2bcc>)
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	2002      	movs	r0, #2
 8003dc6:	f003 ff09 	bl	8007bdc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <menu+0x2bf4>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	220a      	movs	r2, #10
 8003dd0:	4910      	ldr	r1, [pc, #64]	; (8003e14 <menu+0x2bd4>)
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f008 fa54 	bl	800c280 <itoa>
			lcd_print(2, 15, snum);
 8003dd8:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <menu+0x2bd4>)
 8003dda:	210f      	movs	r1, #15
 8003ddc:	2002      	movs	r0, #2
 8003dde:	f003 fefd 	bl	8007bdc <lcd_print>
 8003de2:	e03e      	b.n	8003e62 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003de4:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <menu+0x2bf4>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b09      	cmp	r3, #9
 8003dea:	d83a      	bhi.n	8003e62 <menu+0x2c22>
			if(dilSecim == 0) {
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <menu+0x2bc0>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d121      	bne.n	8003e38 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <menu+0x2bc8>)
 8003df6:	2101      	movs	r1, #1
 8003df8:	2002      	movs	r0, #2
 8003dfa:	f003 feef 	bl	8007bdc <lcd_print>
 8003dfe:	e024      	b.n	8003e4a <menu+0x2c0a>
 8003e00:	20000221 	.word	0x20000221
 8003e04:	0800d8d0 	.word	0x0800d8d0
 8003e08:	0800d498 	.word	0x0800d498
 8003e0c:	0800d80c 	.word	0x0800d80c
 8003e10:	20000217 	.word	0x20000217
 8003e14:	2000019c 	.word	0x2000019c
 8003e18:	40010800 	.word	0x40010800
 8003e1c:	2000022f 	.word	0x2000022f
 8003e20:	2000012c 	.word	0x2000012c
 8003e24:	2000022c 	.word	0x2000022c
 8003e28:	20000200 	.word	0x20000200
 8003e2c:	0800d8e4 	.word	0x0800d8e4
 8003e30:	0800d8f8 	.word	0x0800d8f8
 8003e34:	20000218 	.word	0x20000218
			} else if(dilSecim == 1) {
 8003e38:	4b8f      	ldr	r3, [pc, #572]	; (8004078 <menu+0x2e38>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d104      	bne.n	8003e4a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003e40:	4a8e      	ldr	r2, [pc, #568]	; (800407c <menu+0x2e3c>)
 8003e42:	2101      	movs	r1, #1
 8003e44:	2002      	movs	r0, #2
 8003e46:	f003 fec9 	bl	8007bdc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e4a:	4b8d      	ldr	r3, [pc, #564]	; (8004080 <menu+0x2e40>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	220a      	movs	r2, #10
 8003e50:	498c      	ldr	r1, [pc, #560]	; (8004084 <menu+0x2e44>)
 8003e52:	4618      	mov	r0, r3
 8003e54:	f008 fa14 	bl	800c280 <itoa>
			lcd_print(2, 16, snum);
 8003e58:	4a8a      	ldr	r2, [pc, #552]	; (8004084 <menu+0x2e44>)
 8003e5a:	2110      	movs	r1, #16
 8003e5c:	2002      	movs	r0, #2
 8003e5e:	f003 febd 	bl	8007bdc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e62:	2102      	movs	r1, #2
 8003e64:	4888      	ldr	r0, [pc, #544]	; (8004088 <menu+0x2e48>)
 8003e66:	f005 f9df 	bl	8009228 <HAL_GPIO_ReadPin>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d115      	bne.n	8003e9c <menu+0x2c5c>
 8003e70:	4b86      	ldr	r3, [pc, #536]	; (800408c <menu+0x2e4c>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f083 0301 	eor.w	r3, r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00e      	beq.n	8003e9c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003e7e:	4b80      	ldr	r3, [pc, #512]	; (8004080 <menu+0x2e40>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	3301      	adds	r3, #1
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4b7e      	ldr	r3, [pc, #504]	; (8004080 <menu+0x2e40>)
 8003e88:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003e8a:	4b7d      	ldr	r3, [pc, #500]	; (8004080 <menu+0x2e40>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2bb4      	cmp	r3, #180	; 0xb4
 8003e90:	d902      	bls.n	8003e98 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003e92:	4b7b      	ldr	r3, [pc, #492]	; (8004080 <menu+0x2e40>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e98:	f000 fd9e 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e9c:	2104      	movs	r1, #4
 8003e9e:	487a      	ldr	r0, [pc, #488]	; (8004088 <menu+0x2e48>)
 8003ea0:	f005 f9c2 	bl	8009228 <HAL_GPIO_ReadPin>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d115      	bne.n	8003ed6 <menu+0x2c96>
 8003eaa:	4b78      	ldr	r3, [pc, #480]	; (800408c <menu+0x2e4c>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	f083 0301 	eor.w	r3, r3, #1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00e      	beq.n	8003ed6 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003eb8:	4b71      	ldr	r3, [pc, #452]	; (8004080 <menu+0x2e40>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	4b6f      	ldr	r3, [pc, #444]	; (8004080 <menu+0x2e40>)
 8003ec2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003ec4:	4b6e      	ldr	r3, [pc, #440]	; (8004080 <menu+0x2e40>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2bb5      	cmp	r3, #181	; 0xb5
 8003eca:	d902      	bls.n	8003ed2 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003ecc:	4b6c      	ldr	r3, [pc, #432]	; (8004080 <menu+0x2e40>)
 8003ece:	22b4      	movs	r2, #180	; 0xb4
 8003ed0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ed2:	f000 fd81 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ed6:	2108      	movs	r1, #8
 8003ed8:	486b      	ldr	r0, [pc, #428]	; (8004088 <menu+0x2e48>)
 8003eda:	f005 f9a5 	bl	8009228 <HAL_GPIO_ReadPin>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d10d      	bne.n	8003f00 <menu+0x2cc0>
 8003ee4:	4b69      	ldr	r3, [pc, #420]	; (800408c <menu+0x2e4c>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	f083 0301 	eor.w	r3, r3, #1
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d006      	beq.n	8003f00 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003ef2:	4b63      	ldr	r3, [pc, #396]	; (8004080 <menu+0x2e40>)
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	4b66      	ldr	r3, [pc, #408]	; (8004090 <menu+0x2e50>)
 8003ef8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003efa:	4b66      	ldr	r3, [pc, #408]	; (8004094 <menu+0x2e54>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003f00:	4b65      	ldr	r3, [pc, #404]	; (8004098 <menu+0x2e58>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b1b      	cmp	r3, #27
 8003f06:	f040 8083 	bne.w	8004010 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003f0a:	4a64      	ldr	r2, [pc, #400]	; (800409c <menu+0x2e5c>)
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f003 fe64 	bl	8007bdc <lcd_print>

		if(buzzer == 0) {
 8003f14:	4b62      	ldr	r3, [pc, #392]	; (80040a0 <menu+0x2e60>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d113      	bne.n	8003f44 <menu+0x2d04>
			if(dilSecim == 0) {
 8003f1c:	4b56      	ldr	r3, [pc, #344]	; (8004078 <menu+0x2e38>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003f24:	4a5f      	ldr	r2, [pc, #380]	; (80040a4 <menu+0x2e64>)
 8003f26:	2101      	movs	r1, #1
 8003f28:	2002      	movs	r0, #2
 8003f2a:	f003 fe57 	bl	8007bdc <lcd_print>
 8003f2e:	e020      	b.n	8003f72 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003f30:	4b51      	ldr	r3, [pc, #324]	; (8004078 <menu+0x2e38>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d11c      	bne.n	8003f72 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003f38:	4a5b      	ldr	r2, [pc, #364]	; (80040a8 <menu+0x2e68>)
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	f003 fe4d 	bl	8007bdc <lcd_print>
 8003f42:	e016      	b.n	8003f72 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003f44:	4b56      	ldr	r3, [pc, #344]	; (80040a0 <menu+0x2e60>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d112      	bne.n	8003f72 <menu+0x2d32>
			if(dilSecim == 0) {
 8003f4c:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <menu+0x2e38>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d105      	bne.n	8003f60 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003f54:	4a55      	ldr	r2, [pc, #340]	; (80040ac <menu+0x2e6c>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	2002      	movs	r0, #2
 8003f5a:	f003 fe3f 	bl	8007bdc <lcd_print>
 8003f5e:	e008      	b.n	8003f72 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003f60:	4b45      	ldr	r3, [pc, #276]	; (8004078 <menu+0x2e38>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d104      	bne.n	8003f72 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003f68:	4a51      	ldr	r2, [pc, #324]	; (80040b0 <menu+0x2e70>)
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	2002      	movs	r0, #2
 8003f6e:	f003 fe35 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f72:	2102      	movs	r1, #2
 8003f74:	4844      	ldr	r0, [pc, #272]	; (8004088 <menu+0x2e48>)
 8003f76:	f005 f957 	bl	8009228 <HAL_GPIO_ReadPin>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d115      	bne.n	8003fac <menu+0x2d6c>
 8003f80:	4b42      	ldr	r3, [pc, #264]	; (800408c <menu+0x2e4c>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	f083 0301 	eor.w	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00e      	beq.n	8003fac <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003f8e:	4b44      	ldr	r3, [pc, #272]	; (80040a0 <menu+0x2e60>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <menu+0x2e60>)
 8003f98:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003f9a:	4b41      	ldr	r3, [pc, #260]	; (80040a0 <menu+0x2e60>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d902      	bls.n	8003fa8 <menu+0x2d68>
				buzzer = 0;
 8003fa2:	4b3f      	ldr	r3, [pc, #252]	; (80040a0 <menu+0x2e60>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fa8:	f000 fd16 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fac:	2104      	movs	r1, #4
 8003fae:	4836      	ldr	r0, [pc, #216]	; (8004088 <menu+0x2e48>)
 8003fb0:	f005 f93a 	bl	8009228 <HAL_GPIO_ReadPin>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d115      	bne.n	8003fe6 <menu+0x2da6>
 8003fba:	4b34      	ldr	r3, [pc, #208]	; (800408c <menu+0x2e4c>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	f083 0301 	eor.w	r3, r3, #1
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00e      	beq.n	8003fe6 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003fc8:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <menu+0x2e60>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <menu+0x2e60>)
 8003fd2:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003fd4:	4b32      	ldr	r3, [pc, #200]	; (80040a0 <menu+0x2e60>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <menu+0x2da2>
		   		buzzer = 1;
 8003fdc:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <menu+0x2e60>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fe2:	f000 fcf9 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fe6:	2108      	movs	r1, #8
 8003fe8:	4827      	ldr	r0, [pc, #156]	; (8004088 <menu+0x2e48>)
 8003fea:	f005 f91d 	bl	8009228 <HAL_GPIO_ReadPin>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d10d      	bne.n	8004010 <menu+0x2dd0>
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <menu+0x2e4c>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	f083 0301 	eor.w	r3, r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d006      	beq.n	8004010 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004002:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <menu+0x2e60>)
 8004004:	781a      	ldrb	r2, [r3, #0]
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <menu+0x2e50>)
 8004008:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <menu+0x2e54>)
 800400c:	2201      	movs	r2, #1
 800400e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004010:	4b21      	ldr	r3, [pc, #132]	; (8004098 <menu+0x2e58>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b1c      	cmp	r3, #28
 8004016:	f040 80ab 	bne.w	8004170 <menu+0x2f30>
		calismaSayModu = 0;
 800401a:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <menu+0x2e74>)
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004020:	4a25      	ldr	r2, [pc, #148]	; (80040b8 <menu+0x2e78>)
 8004022:	2101      	movs	r1, #1
 8004024:	2001      	movs	r0, #1
 8004026:	f003 fdd9 	bl	8007bdc <lcd_print>

		if(demoMode == 0) {
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <menu+0x2e7c>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d113      	bne.n	800405a <menu+0x2e1a>
			if(dilSecim == 0) {
 8004032:	4b11      	ldr	r3, [pc, #68]	; (8004078 <menu+0x2e38>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d105      	bne.n	8004046 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800403a:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <menu+0x2e64>)
 800403c:	2101      	movs	r1, #1
 800403e:	2002      	movs	r0, #2
 8004040:	f003 fdcc 	bl	8007bdc <lcd_print>
 8004044:	e045      	b.n	80040d2 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <menu+0x2e38>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d141      	bne.n	80040d2 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800404e:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <menu+0x2e68>)
 8004050:	2101      	movs	r1, #1
 8004052:	2002      	movs	r0, #2
 8004054:	f003 fdc2 	bl	8007bdc <lcd_print>
 8004058:	e03b      	b.n	80040d2 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <menu+0x2e7c>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d137      	bne.n	80040d2 <menu+0x2e92>
			if(dilSecim == 0){
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <menu+0x2e38>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d12a      	bne.n	80040c0 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <menu+0x2e6c>)
 800406c:	2101      	movs	r1, #1
 800406e:	2002      	movs	r0, #2
 8004070:	f003 fdb4 	bl	8007bdc <lcd_print>
 8004074:	e02d      	b.n	80040d2 <menu+0x2e92>
 8004076:	bf00      	nop
 8004078:	20000221 	.word	0x20000221
 800407c:	0800d80c 	.word	0x0800d80c
 8004080:	20000218 	.word	0x20000218
 8004084:	2000019c 	.word	0x2000019c
 8004088:	40010800 	.word	0x40010800
 800408c:	2000022f 	.word	0x2000022f
 8004090:	2000012c 	.word	0x2000012c
 8004094:	2000022c 	.word	0x2000022c
 8004098:	20000200 	.word	0x20000200
 800409c:	0800d90c 	.word	0x0800d90c
 80040a0:	2000021c 	.word	0x2000021c
 80040a4:	0800d234 	.word	0x0800d234
 80040a8:	0800d248 	.word	0x0800d248
 80040ac:	0800d294 	.word	0x0800d294
 80040b0:	0800d2a8 	.word	0x0800d2a8
 80040b4:	20000220 	.word	0x20000220
 80040b8:	0800d920 	.word	0x0800d920
 80040bc:	2000021e 	.word	0x2000021e
			} else if(dilSecim == 1) {
 80040c0:	4b71      	ldr	r3, [pc, #452]	; (8004288 <menu+0x3048>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d104      	bne.n	80040d2 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80040c8:	4a70      	ldr	r2, [pc, #448]	; (800428c <menu+0x304c>)
 80040ca:	2101      	movs	r1, #1
 80040cc:	2002      	movs	r0, #2
 80040ce:	f003 fd85 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040d2:	2102      	movs	r1, #2
 80040d4:	486e      	ldr	r0, [pc, #440]	; (8004290 <menu+0x3050>)
 80040d6:	f005 f8a7 	bl	8009228 <HAL_GPIO_ReadPin>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d115      	bne.n	800410c <menu+0x2ecc>
 80040e0:	4b6c      	ldr	r3, [pc, #432]	; (8004294 <menu+0x3054>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	f083 0301 	eor.w	r3, r3, #1
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00e      	beq.n	800410c <menu+0x2ecc>
			demoMode = demoMode + 1;
 80040ee:	4b6a      	ldr	r3, [pc, #424]	; (8004298 <menu+0x3058>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	4b68      	ldr	r3, [pc, #416]	; (8004298 <menu+0x3058>)
 80040f8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80040fa:	4b67      	ldr	r3, [pc, #412]	; (8004298 <menu+0x3058>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d902      	bls.n	8004108 <menu+0x2ec8>
				demoMode = 0;
 8004102:	4b65      	ldr	r3, [pc, #404]	; (8004298 <menu+0x3058>)
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004108:	f000 fc66 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800410c:	2104      	movs	r1, #4
 800410e:	4860      	ldr	r0, [pc, #384]	; (8004290 <menu+0x3050>)
 8004110:	f005 f88a 	bl	8009228 <HAL_GPIO_ReadPin>
 8004114:	4603      	mov	r3, r0
 8004116:	2b01      	cmp	r3, #1
 8004118:	d115      	bne.n	8004146 <menu+0x2f06>
 800411a:	4b5e      	ldr	r3, [pc, #376]	; (8004294 <menu+0x3054>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	f083 0301 	eor.w	r3, r3, #1
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00e      	beq.n	8004146 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004128:	4b5b      	ldr	r3, [pc, #364]	; (8004298 <menu+0x3058>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	3b01      	subs	r3, #1
 800412e:	b2da      	uxtb	r2, r3
 8004130:	4b59      	ldr	r3, [pc, #356]	; (8004298 <menu+0x3058>)
 8004132:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004134:	4b58      	ldr	r3, [pc, #352]	; (8004298 <menu+0x3058>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <menu+0x2f02>
		   		demoMode = 1;
 800413c:	4b56      	ldr	r3, [pc, #344]	; (8004298 <menu+0x3058>)
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004142:	f000 fc49 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004146:	2108      	movs	r1, #8
 8004148:	4851      	ldr	r0, [pc, #324]	; (8004290 <menu+0x3050>)
 800414a:	f005 f86d 	bl	8009228 <HAL_GPIO_ReadPin>
 800414e:	4603      	mov	r3, r0
 8004150:	2b01      	cmp	r3, #1
 8004152:	d10d      	bne.n	8004170 <menu+0x2f30>
 8004154:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <menu+0x3054>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	f083 0301 	eor.w	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d006      	beq.n	8004170 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004162:	4b4d      	ldr	r3, [pc, #308]	; (8004298 <menu+0x3058>)
 8004164:	781a      	ldrb	r2, [r3, #0]
 8004166:	4b4d      	ldr	r3, [pc, #308]	; (800429c <menu+0x305c>)
 8004168:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800416a:	4b4d      	ldr	r3, [pc, #308]	; (80042a0 <menu+0x3060>)
 800416c:	2201      	movs	r2, #1
 800416e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004170:	4b4c      	ldr	r3, [pc, #304]	; (80042a4 <menu+0x3064>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b1d      	cmp	r3, #29
 8004176:	f040 8132 	bne.w	80043de <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800417a:	4b4b      	ldr	r3, [pc, #300]	; (80042a8 <menu+0x3068>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d113      	bne.n	80041aa <menu+0x2f6a>
 8004182:	4b4a      	ldr	r3, [pc, #296]	; (80042ac <menu+0x306c>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <menu+0x2f6a>
 800418a:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <menu+0x3070>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <menu+0x2f6a>
 8004192:	4b48      	ldr	r3, [pc, #288]	; (80042b4 <menu+0x3074>)
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d107      	bne.n	80041aa <menu+0x2f6a>
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <menu+0x3078>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <menu+0x2f6a>
			calismaSayisiYar = 0;
 80041a2:	4b46      	ldr	r3, [pc, #280]	; (80042bc <menu+0x307c>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e002      	b.n	80041b0 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80041aa:	4b44      	ldr	r3, [pc, #272]	; (80042bc <menu+0x307c>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80041b0:	4b43      	ldr	r3, [pc, #268]	; (80042c0 <menu+0x3080>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d154      	bne.n	8004262 <menu+0x3022>
			if(dilSecim == 0) {
 80041b8:	4b33      	ldr	r3, [pc, #204]	; (8004288 <menu+0x3048>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80041c0:	4a40      	ldr	r2, [pc, #256]	; (80042c4 <menu+0x3084>)
 80041c2:	2101      	movs	r1, #1
 80041c4:	2001      	movs	r0, #1
 80041c6:	f003 fd09 	bl	8007bdc <lcd_print>
 80041ca:	e008      	b.n	80041de <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80041cc:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <menu+0x3048>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d104      	bne.n	80041de <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80041d4:	4a3c      	ldr	r2, [pc, #240]	; (80042c8 <menu+0x3088>)
 80041d6:	2101      	movs	r1, #1
 80041d8:	2001      	movs	r0, #1
 80041da:	f003 fcff 	bl	8007bdc <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80041de:	4b36      	ldr	r3, [pc, #216]	; (80042b8 <menu+0x3078>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	220a      	movs	r2, #10
 80041e4:	4939      	ldr	r1, [pc, #228]	; (80042cc <menu+0x308c>)
 80041e6:	4618      	mov	r0, r3
 80041e8:	f008 f84a 	bl	800c280 <itoa>
			lcd_print(2, 12, snum);
 80041ec:	4a37      	ldr	r2, [pc, #220]	; (80042cc <menu+0x308c>)
 80041ee:	210c      	movs	r1, #12
 80041f0:	2002      	movs	r0, #2
 80041f2:	f003 fcf3 	bl	8007bdc <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80041f6:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <menu+0x3074>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	220a      	movs	r2, #10
 80041fc:	4933      	ldr	r1, [pc, #204]	; (80042cc <menu+0x308c>)
 80041fe:	4618      	mov	r0, r3
 8004200:	f008 f83e 	bl	800c280 <itoa>
			lcd_print(2, 13, snum);
 8004204:	4a31      	ldr	r2, [pc, #196]	; (80042cc <menu+0x308c>)
 8004206:	210d      	movs	r1, #13
 8004208:	2002      	movs	r0, #2
 800420a:	f003 fce7 	bl	8007bdc <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800420e:	4b28      	ldr	r3, [pc, #160]	; (80042b0 <menu+0x3070>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	220a      	movs	r2, #10
 8004214:	492d      	ldr	r1, [pc, #180]	; (80042cc <menu+0x308c>)
 8004216:	4618      	mov	r0, r3
 8004218:	f008 f832 	bl	800c280 <itoa>
			lcd_print(2, 14, snum);
 800421c:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <menu+0x308c>)
 800421e:	210e      	movs	r1, #14
 8004220:	2002      	movs	r0, #2
 8004222:	f003 fcdb 	bl	8007bdc <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004226:	4b21      	ldr	r3, [pc, #132]	; (80042ac <menu+0x306c>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	220a      	movs	r2, #10
 800422c:	4927      	ldr	r1, [pc, #156]	; (80042cc <menu+0x308c>)
 800422e:	4618      	mov	r0, r3
 8004230:	f008 f826 	bl	800c280 <itoa>
			lcd_print(2, 15, snum);
 8004234:	4a25      	ldr	r2, [pc, #148]	; (80042cc <menu+0x308c>)
 8004236:	210f      	movs	r1, #15
 8004238:	2002      	movs	r0, #2
 800423a:	f003 fccf 	bl	8007bdc <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800423e:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <menu+0x3068>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	220a      	movs	r2, #10
 8004244:	4921      	ldr	r1, [pc, #132]	; (80042cc <menu+0x308c>)
 8004246:	4618      	mov	r0, r3
 8004248:	f008 f81a 	bl	800c280 <itoa>
			lcd_print(2, 16, snum);
 800424c:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <menu+0x308c>)
 800424e:	2110      	movs	r1, #16
 8004250:	2002      	movs	r0, #2
 8004252:	f003 fcc3 	bl	8007bdc <lcd_print>

			lcd_print(2, 1, "           ");
 8004256:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <menu+0x3090>)
 8004258:	2101      	movs	r1, #1
 800425a:	2002      	movs	r0, #2
 800425c:	f003 fcbe 	bl	8007bdc <lcd_print>
 8004260:	e048      	b.n	80042f4 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <menu+0x3080>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d144      	bne.n	80042f4 <menu+0x30b4>
			if(dilSecim == 0) {
 800426a:	4b07      	ldr	r3, [pc, #28]	; (8004288 <menu+0x3048>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d132      	bne.n	80042d8 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004272:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <menu+0x3084>)
 8004274:	2101      	movs	r1, #1
 8004276:	2001      	movs	r0, #1
 8004278:	f003 fcb0 	bl	8007bdc <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800427c:	4a15      	ldr	r2, [pc, #84]	; (80042d4 <menu+0x3094>)
 800427e:	2101      	movs	r1, #1
 8004280:	2002      	movs	r0, #2
 8004282:	f003 fcab 	bl	8007bdc <lcd_print>
 8004286:	e035      	b.n	80042f4 <menu+0x30b4>
 8004288:	20000221 	.word	0x20000221
 800428c:	0800d2a8 	.word	0x0800d2a8
 8004290:	40010800 	.word	0x40010800
 8004294:	2000022f 	.word	0x2000022f
 8004298:	2000021e 	.word	0x2000021e
 800429c:	2000012c 	.word	0x2000012c
 80042a0:	2000022c 	.word	0x2000022c
 80042a4:	20000200 	.word	0x20000200
 80042a8:	200001fd 	.word	0x200001fd
 80042ac:	200001fe 	.word	0x200001fe
 80042b0:	20000000 	.word	0x20000000
 80042b4:	20000001 	.word	0x20000001
 80042b8:	200001ff 	.word	0x200001ff
 80042bc:	20000241 	.word	0x20000241
 80042c0:	20000220 	.word	0x20000220
 80042c4:	0800d930 	.word	0x0800d930
 80042c8:	0800d944 	.word	0x0800d944
 80042cc:	2000019c 	.word	0x2000019c
 80042d0:	0800d958 	.word	0x0800d958
 80042d4:	0800d964 	.word	0x0800d964
			} else if(dilSecim == 1) {
 80042d8:	4b94      	ldr	r3, [pc, #592]	; (800452c <menu+0x32ec>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d109      	bne.n	80042f4 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80042e0:	4a93      	ldr	r2, [pc, #588]	; (8004530 <menu+0x32f0>)
 80042e2:	2101      	movs	r1, #1
 80042e4:	2001      	movs	r0, #1
 80042e6:	f003 fc79 	bl	8007bdc <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80042ea:	4a92      	ldr	r2, [pc, #584]	; (8004534 <menu+0x32f4>)
 80042ec:	2101      	movs	r1, #1
 80042ee:	2002      	movs	r0, #2
 80042f0:	f003 fc74 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80042f4:	2102      	movs	r1, #2
 80042f6:	4890      	ldr	r0, [pc, #576]	; (8004538 <menu+0x32f8>)
 80042f8:	f004 ff96 	bl	8009228 <HAL_GPIO_ReadPin>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d119      	bne.n	8004336 <menu+0x30f6>
 8004302:	4b8e      	ldr	r3, [pc, #568]	; (800453c <menu+0x32fc>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	f083 0301 	eor.w	r3, r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <menu+0x30f6>
 8004310:	4b8b      	ldr	r3, [pc, #556]	; (8004540 <menu+0x3300>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00e      	beq.n	8004336 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004318:	4b8a      	ldr	r3, [pc, #552]	; (8004544 <menu+0x3304>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	4b88      	ldr	r3, [pc, #544]	; (8004544 <menu+0x3304>)
 8004322:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004324:	4b87      	ldr	r3, [pc, #540]	; (8004544 <menu+0x3304>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d902      	bls.n	8004332 <menu+0x30f2>
				calismaSayModu = 0;
 800432c:	4b85      	ldr	r3, [pc, #532]	; (8004544 <menu+0x3304>)
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004332:	f000 fb51 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004336:	2104      	movs	r1, #4
 8004338:	487f      	ldr	r0, [pc, #508]	; (8004538 <menu+0x32f8>)
 800433a:	f004 ff75 	bl	8009228 <HAL_GPIO_ReadPin>
 800433e:	4603      	mov	r3, r0
 8004340:	2b01      	cmp	r3, #1
 8004342:	d119      	bne.n	8004378 <menu+0x3138>
 8004344:	4b7d      	ldr	r3, [pc, #500]	; (800453c <menu+0x32fc>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f083 0301 	eor.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d012      	beq.n	8004378 <menu+0x3138>
 8004352:	4b7b      	ldr	r3, [pc, #492]	; (8004540 <menu+0x3300>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00e      	beq.n	8004378 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800435a:	4b7a      	ldr	r3, [pc, #488]	; (8004544 <menu+0x3304>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4b78      	ldr	r3, [pc, #480]	; (8004544 <menu+0x3304>)
 8004364:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004366:	4b77      	ldr	r3, [pc, #476]	; (8004544 <menu+0x3304>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <menu+0x3134>
		   		calismaSayModu = 1;
 800436e:	4b75      	ldr	r3, [pc, #468]	; (8004544 <menu+0x3304>)
 8004370:	2201      	movs	r2, #1
 8004372:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004374:	f000 fb30 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004378:	2108      	movs	r1, #8
 800437a:	486f      	ldr	r0, [pc, #444]	; (8004538 <menu+0x32f8>)
 800437c:	f004 ff54 	bl	8009228 <HAL_GPIO_ReadPin>
 8004380:	4603      	mov	r3, r0
 8004382:	2b01      	cmp	r3, #1
 8004384:	d12b      	bne.n	80043de <menu+0x319e>
 8004386:	4b6d      	ldr	r3, [pc, #436]	; (800453c <menu+0x32fc>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	f083 0301 	eor.w	r3, r3, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d024      	beq.n	80043de <menu+0x319e>
			eepromData[32] = 0;
 8004394:	4b6c      	ldr	r3, [pc, #432]	; (8004548 <menu+0x3308>)
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800439c:	4b6a      	ldr	r3, [pc, #424]	; (8004548 <menu+0x3308>)
 800439e:	2200      	movs	r2, #0
 80043a0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80043a2:	4b69      	ldr	r3, [pc, #420]	; (8004548 <menu+0x3308>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80043a8:	4b67      	ldr	r3, [pc, #412]	; (8004548 <menu+0x3308>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80043ae:	4b66      	ldr	r3, [pc, #408]	; (8004548 <menu+0x3308>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80043b4:	4b65      	ldr	r3, [pc, #404]	; (800454c <menu+0x330c>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80043ba:	4b65      	ldr	r3, [pc, #404]	; (8004550 <menu+0x3310>)
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80043c0:	4b64      	ldr	r3, [pc, #400]	; (8004554 <menu+0x3314>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80043c6:	4b64      	ldr	r3, [pc, #400]	; (8004558 <menu+0x3318>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80043cc:	4b63      	ldr	r3, [pc, #396]	; (800455c <menu+0x331c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80043d2:	4b5c      	ldr	r3, [pc, #368]	; (8004544 <menu+0x3304>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80043d8:	4b61      	ldr	r3, [pc, #388]	; (8004560 <menu+0x3320>)
 80043da:	2201      	movs	r2, #1
 80043dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80043de:	4b61      	ldr	r3, [pc, #388]	; (8004564 <menu+0x3324>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b1e      	cmp	r3, #30
 80043e4:	d16f      	bne.n	80044c6 <menu+0x3286>
		calismaSayModu = 0;
 80043e6:	4b57      	ldr	r3, [pc, #348]	; (8004544 <menu+0x3304>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80043ec:	4b4f      	ldr	r3, [pc, #316]	; (800452c <menu+0x32ec>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80043f4:	4a5c      	ldr	r2, [pc, #368]	; (8004568 <menu+0x3328>)
 80043f6:	2101      	movs	r1, #1
 80043f8:	2001      	movs	r0, #1
 80043fa:	f003 fbef 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80043fe:	4a5b      	ldr	r2, [pc, #364]	; (800456c <menu+0x332c>)
 8004400:	2101      	movs	r1, #1
 8004402:	2002      	movs	r0, #2
 8004404:	f003 fbea 	bl	8007bdc <lcd_print>
 8004408:	e00d      	b.n	8004426 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800440a:	4b48      	ldr	r3, [pc, #288]	; (800452c <menu+0x32ec>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d109      	bne.n	8004426 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004412:	4a57      	ldr	r2, [pc, #348]	; (8004570 <menu+0x3330>)
 8004414:	2101      	movs	r1, #1
 8004416:	2001      	movs	r0, #1
 8004418:	f003 fbe0 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800441c:	4a55      	ldr	r2, [pc, #340]	; (8004574 <menu+0x3334>)
 800441e:	2101      	movs	r1, #1
 8004420:	2002      	movs	r0, #2
 8004422:	f003 fbdb 	bl	8007bdc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004426:	2102      	movs	r1, #2
 8004428:	4843      	ldr	r0, [pc, #268]	; (8004538 <menu+0x32f8>)
 800442a:	f004 fefd 	bl	8009228 <HAL_GPIO_ReadPin>
 800442e:	4603      	mov	r3, r0
 8004430:	2b01      	cmp	r3, #1
 8004432:	d115      	bne.n	8004460 <menu+0x3220>
 8004434:	4b41      	ldr	r3, [pc, #260]	; (800453c <menu+0x32fc>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	f083 0301 	eor.w	r3, r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00e      	beq.n	8004460 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004442:	4b3a      	ldr	r3, [pc, #232]	; (800452c <menu+0x32ec>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	b2da      	uxtb	r2, r3
 800444a:	4b38      	ldr	r3, [pc, #224]	; (800452c <menu+0x32ec>)
 800444c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800444e:	4b37      	ldr	r3, [pc, #220]	; (800452c <menu+0x32ec>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d902      	bls.n	800445c <menu+0x321c>
				dilSecim = 0;
 8004456:	4b35      	ldr	r3, [pc, #212]	; (800452c <menu+0x32ec>)
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800445c:	f000 fabc 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004460:	2104      	movs	r1, #4
 8004462:	4835      	ldr	r0, [pc, #212]	; (8004538 <menu+0x32f8>)
 8004464:	f004 fee0 	bl	8009228 <HAL_GPIO_ReadPin>
 8004468:	4603      	mov	r3, r0
 800446a:	2b01      	cmp	r3, #1
 800446c:	d115      	bne.n	800449a <menu+0x325a>
 800446e:	4b33      	ldr	r3, [pc, #204]	; (800453c <menu+0x32fc>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00e      	beq.n	800449a <menu+0x325a>
			dilSecim = dilSecim - 1;
 800447c:	4b2b      	ldr	r3, [pc, #172]	; (800452c <menu+0x32ec>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	3b01      	subs	r3, #1
 8004482:	b2da      	uxtb	r2, r3
 8004484:	4b29      	ldr	r3, [pc, #164]	; (800452c <menu+0x32ec>)
 8004486:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004488:	4b28      	ldr	r3, [pc, #160]	; (800452c <menu+0x32ec>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <menu+0x3256>
		   		dilSecim = 1;
 8004490:	4b26      	ldr	r3, [pc, #152]	; (800452c <menu+0x32ec>)
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004496:	f000 fa9f 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800449a:	2108      	movs	r1, #8
 800449c:	4826      	ldr	r0, [pc, #152]	; (8004538 <menu+0x32f8>)
 800449e:	f004 fec3 	bl	8009228 <HAL_GPIO_ReadPin>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d10e      	bne.n	80044c6 <menu+0x3286>
 80044a8:	4b24      	ldr	r3, [pc, #144]	; (800453c <menu+0x32fc>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	f083 0301 	eor.w	r3, r3, #1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <menu+0x3286>
			eepromData[33] = dilSecim;
 80044b6:	4b1d      	ldr	r3, [pc, #116]	; (800452c <menu+0x32ec>)
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	4b23      	ldr	r3, [pc, #140]	; (8004548 <menu+0x3308>)
 80044bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80044c0:	4b27      	ldr	r3, [pc, #156]	; (8004560 <menu+0x3320>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80044c6:	4b27      	ldr	r3, [pc, #156]	; (8004564 <menu+0x3324>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b1f      	cmp	r3, #31
 80044cc:	f040 80b7 	bne.w	800463e <menu+0x33fe>
		calismaSayModu = 0;
 80044d0:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <menu+0x3304>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80044d6:	4a28      	ldr	r2, [pc, #160]	; (8004578 <menu+0x3338>)
 80044d8:	2101      	movs	r1, #1
 80044da:	2001      	movs	r0, #1
 80044dc:	f003 fb7e 	bl	8007bdc <lcd_print>

		if(iotMode == 0) {
 80044e0:	4b26      	ldr	r3, [pc, #152]	; (800457c <menu+0x333c>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d113      	bne.n	8004510 <menu+0x32d0>
			if(dilSecim == 0) {
 80044e8:	4b10      	ldr	r3, [pc, #64]	; (800452c <menu+0x32ec>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80044f0:	4a23      	ldr	r2, [pc, #140]	; (8004580 <menu+0x3340>)
 80044f2:	2101      	movs	r1, #1
 80044f4:	2002      	movs	r0, #2
 80044f6:	f003 fb71 	bl	8007bdc <lcd_print>
 80044fa:	e050      	b.n	800459e <menu+0x335e>
			} else if(dilSecim == 1) {
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <menu+0x32ec>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d14c      	bne.n	800459e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004504:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <menu+0x3344>)
 8004506:	2101      	movs	r1, #1
 8004508:	2002      	movs	r0, #2
 800450a:	f003 fb67 	bl	8007bdc <lcd_print>
 800450e:	e046      	b.n	800459e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004510:	4b1a      	ldr	r3, [pc, #104]	; (800457c <menu+0x333c>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d142      	bne.n	800459e <menu+0x335e>
			if(dilSecim == 0) {
 8004518:	4b04      	ldr	r3, [pc, #16]	; (800452c <menu+0x32ec>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d135      	bne.n	800458c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004520:	4a19      	ldr	r2, [pc, #100]	; (8004588 <menu+0x3348>)
 8004522:	2101      	movs	r1, #1
 8004524:	2002      	movs	r0, #2
 8004526:	f003 fb59 	bl	8007bdc <lcd_print>
 800452a:	e038      	b.n	800459e <menu+0x335e>
 800452c:	20000221 	.word	0x20000221
 8004530:	0800d944 	.word	0x0800d944
 8004534:	0800d978 	.word	0x0800d978
 8004538:	40010800 	.word	0x40010800
 800453c:	2000022f 	.word	0x2000022f
 8004540:	20000241 	.word	0x20000241
 8004544:	20000220 	.word	0x20000220
 8004548:	2000012c 	.word	0x2000012c
 800454c:	200001ff 	.word	0x200001ff
 8004550:	20000001 	.word	0x20000001
 8004554:	20000000 	.word	0x20000000
 8004558:	200001fe 	.word	0x200001fe
 800455c:	200001fd 	.word	0x200001fd
 8004560:	2000022c 	.word	0x2000022c
 8004564:	20000200 	.word	0x20000200
 8004568:	0800d98c 	.word	0x0800d98c
 800456c:	0800d9a0 	.word	0x0800d9a0
 8004570:	0800d9b4 	.word	0x0800d9b4
 8004574:	0800d9c8 	.word	0x0800d9c8
 8004578:	0800d9dc 	.word	0x0800d9dc
 800457c:	2000021f 	.word	0x2000021f
 8004580:	0800d234 	.word	0x0800d234
 8004584:	0800d248 	.word	0x0800d248
 8004588:	0800d294 	.word	0x0800d294
			} else if(dilSecim == 1) {
 800458c:	4bab      	ldr	r3, [pc, #684]	; (800483c <menu+0x35fc>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d104      	bne.n	800459e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004594:	4aaa      	ldr	r2, [pc, #680]	; (8004840 <menu+0x3600>)
 8004596:	2101      	movs	r1, #1
 8004598:	2002      	movs	r0, #2
 800459a:	f003 fb1f 	bl	8007bdc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800459e:	2102      	movs	r1, #2
 80045a0:	48a8      	ldr	r0, [pc, #672]	; (8004844 <menu+0x3604>)
 80045a2:	f004 fe41 	bl	8009228 <HAL_GPIO_ReadPin>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d115      	bne.n	80045d8 <menu+0x3398>
 80045ac:	4ba6      	ldr	r3, [pc, #664]	; (8004848 <menu+0x3608>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	f083 0301 	eor.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00e      	beq.n	80045d8 <menu+0x3398>
			iotMode = iotMode + 1;
 80045ba:	4ba4      	ldr	r3, [pc, #656]	; (800484c <menu+0x360c>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4ba2      	ldr	r3, [pc, #648]	; (800484c <menu+0x360c>)
 80045c4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80045c6:	4ba1      	ldr	r3, [pc, #644]	; (800484c <menu+0x360c>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d902      	bls.n	80045d4 <menu+0x3394>
				iotMode = 0;
 80045ce:	4b9f      	ldr	r3, [pc, #636]	; (800484c <menu+0x360c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80045d4:	f000 fa00 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d8:	2104      	movs	r1, #4
 80045da:	489a      	ldr	r0, [pc, #616]	; (8004844 <menu+0x3604>)
 80045dc:	f004 fe24 	bl	8009228 <HAL_GPIO_ReadPin>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d115      	bne.n	8004612 <menu+0x33d2>
 80045e6:	4b98      	ldr	r3, [pc, #608]	; (8004848 <menu+0x3608>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	f083 0301 	eor.w	r3, r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00e      	beq.n	8004612 <menu+0x33d2>
			iotMode = iotMode - 1;
 80045f4:	4b95      	ldr	r3, [pc, #596]	; (800484c <menu+0x360c>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	4b93      	ldr	r3, [pc, #588]	; (800484c <menu+0x360c>)
 80045fe:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004600:	4b92      	ldr	r3, [pc, #584]	; (800484c <menu+0x360c>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <menu+0x33ce>
		   		iotMode = 1;
 8004608:	4b90      	ldr	r3, [pc, #576]	; (800484c <menu+0x360c>)
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800460e:	f000 f9e3 	bl	80049d8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004612:	2108      	movs	r1, #8
 8004614:	488b      	ldr	r0, [pc, #556]	; (8004844 <menu+0x3604>)
 8004616:	f004 fe07 	bl	8009228 <HAL_GPIO_ReadPin>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d10e      	bne.n	800463e <menu+0x33fe>
 8004620:	4b89      	ldr	r3, [pc, #548]	; (8004848 <menu+0x3608>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	f083 0301 	eor.w	r3, r3, #1
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <menu+0x33fe>
			eepromData[48] = iotMode;
 800462e:	4b87      	ldr	r3, [pc, #540]	; (800484c <menu+0x360c>)
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	4b87      	ldr	r3, [pc, #540]	; (8004850 <menu+0x3610>)
 8004634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004638:	4b86      	ldr	r3, [pc, #536]	; (8004854 <menu+0x3614>)
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800463e:	4b86      	ldr	r3, [pc, #536]	; (8004858 <menu+0x3618>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b20      	cmp	r3, #32
 8004644:	d13f      	bne.n	80046c6 <menu+0x3486>
		calismaSayModu = 0;
 8004646:	4b85      	ldr	r3, [pc, #532]	; (800485c <menu+0x361c>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800464c:	4b7b      	ldr	r3, [pc, #492]	; (800483c <menu+0x35fc>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 8004654:	4a82      	ldr	r2, [pc, #520]	; (8004860 <menu+0x3620>)
 8004656:	2101      	movs	r1, #1
 8004658:	2001      	movs	r0, #1
 800465a:	f003 fabf 	bl	8007bdc <lcd_print>
 800465e:	e004      	b.n	800466a <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004660:	4a80      	ldr	r2, [pc, #512]	; (8004864 <menu+0x3624>)
 8004662:	2101      	movs	r1, #1
 8004664:	2001      	movs	r0, #1
 8004666:	f003 fab9 	bl	8007bdc <lcd_print>
		}

		lcd_print(2, 1, machineID);
 800466a:	4a7f      	ldr	r2, [pc, #508]	; (8004868 <menu+0x3628>)
 800466c:	2101      	movs	r1, #1
 800466e:	2002      	movs	r0, #2
 8004670:	f003 fab4 	bl	8007bdc <lcd_print>
		lcd_print(2, 13, "    ");
 8004674:	4a7d      	ldr	r2, [pc, #500]	; (800486c <menu+0x362c>)
 8004676:	210d      	movs	r1, #13
 8004678:	2002      	movs	r0, #2
 800467a:	f003 faaf 	bl	8007bdc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800467e:	2102      	movs	r1, #2
 8004680:	4870      	ldr	r0, [pc, #448]	; (8004844 <menu+0x3604>)
 8004682:	f004 fdd1 	bl	8009228 <HAL_GPIO_ReadPin>
 8004686:	4603      	mov	r3, r0
 8004688:	2b01      	cmp	r3, #1
 800468a:	d11c      	bne.n	80046c6 <menu+0x3486>
 800468c:	2104      	movs	r1, #4
 800468e:	486d      	ldr	r0, [pc, #436]	; (8004844 <menu+0x3604>)
 8004690:	f004 fdca 	bl	8009228 <HAL_GPIO_ReadPin>
 8004694:	4603      	mov	r3, r0
 8004696:	2b01      	cmp	r3, #1
 8004698:	d115      	bne.n	80046c6 <menu+0x3486>
 800469a:	4b6b      	ldr	r3, [pc, #428]	; (8004848 <menu+0x3608>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	f083 0301 	eor.w	r3, r3, #1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00e      	beq.n	80046c6 <menu+0x3486>
			takeMachineID();
 80046a8:	f002 faa2 	bl	8006bf0 <takeMachineID>

			HAL_Delay(250);
 80046ac:	20fa      	movs	r0, #250	; 0xfa
 80046ae:	f003 ffeb 	bl	8008688 <HAL_Delay>
			lcd_print(2, 1, machineID);
 80046b2:	4a6d      	ldr	r2, [pc, #436]	; (8004868 <menu+0x3628>)
 80046b4:	2101      	movs	r1, #1
 80046b6:	2002      	movs	r0, #2
 80046b8:	f003 fa90 	bl	8007bdc <lcd_print>
			lcd_print(2, 13, "    ");
 80046bc:	4a6b      	ldr	r2, [pc, #428]	; (800486c <menu+0x362c>)
 80046be:	210d      	movs	r1, #13
 80046c0:	2002      	movs	r0, #2
 80046c2:	f003 fa8b 	bl	8007bdc <lcd_print>
		}
	}

	if (menuSayac == 33) {
 80046c6:	4b64      	ldr	r3, [pc, #400]	; (8004858 <menu+0x3618>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b21      	cmp	r3, #33	; 0x21
 80046cc:	d14f      	bne.n	800476e <menu+0x352e>
		calismaSayModu = 0;
 80046ce:	4b63      	ldr	r3, [pc, #396]	; (800485c <menu+0x361c>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 80046d4:	4866      	ldr	r0, [pc, #408]	; (8004870 <menu+0x3630>)
 80046d6:	f7fb fda5 	bl	8000224 <strlen>
 80046da:	4603      	mov	r3, r0
 80046dc:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 80046de:	4a65      	ldr	r2, [pc, #404]	; (8004874 <menu+0x3634>)
 80046e0:	2101      	movs	r1, #1
 80046e2:	2001      	movs	r0, #1
 80046e4:	f003 fa7a 	bl	8007bdc <lcd_print>

		if(ssidLength <=16) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	dc0e      	bgt.n	800470c <menu+0x34cc>
			lcd_print(2, 1, wifiSSID);
 80046ee:	4a60      	ldr	r2, [pc, #384]	; (8004870 <menu+0x3630>)
 80046f0:	2101      	movs	r1, #1
 80046f2:	2002      	movs	r0, #2
 80046f4:	f003 fa72 	bl	8007bdc <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	3301      	adds	r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4a5d      	ldr	r2, [pc, #372]	; (8004878 <menu+0x3638>)
 8004702:	4619      	mov	r1, r3
 8004704:	2002      	movs	r0, #2
 8004706:	f003 fa69 	bl	8007bdc <lcd_print>
 800470a:	e005      	b.n	8004718 <menu+0x34d8>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 800470c:	2300      	movs	r3, #0
 800470e:	2202      	movs	r2, #2
 8004710:	2101      	movs	r1, #1
 8004712:	4857      	ldr	r0, [pc, #348]	; (8004870 <menu+0x3630>)
 8004714:	f7fc fcd8 	bl	80010c8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004718:	2102      	movs	r1, #2
 800471a:	484a      	ldr	r0, [pc, #296]	; (8004844 <menu+0x3604>)
 800471c:	f004 fd84 	bl	8009228 <HAL_GPIO_ReadPin>
 8004720:	4603      	mov	r3, r0
 8004722:	2b01      	cmp	r3, #1
 8004724:	d123      	bne.n	800476e <menu+0x352e>
 8004726:	2104      	movs	r1, #4
 8004728:	4846      	ldr	r0, [pc, #280]	; (8004844 <menu+0x3604>)
 800472a:	f004 fd7d 	bl	8009228 <HAL_GPIO_ReadPin>
 800472e:	4603      	mov	r3, r0
 8004730:	2b01      	cmp	r3, #1
 8004732:	d11c      	bne.n	800476e <menu+0x352e>
 8004734:	4b44      	ldr	r3, [pc, #272]	; (8004848 <menu+0x3608>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	f083 0301 	eor.w	r3, r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d015      	beq.n	800476e <menu+0x352e>
			takeWifiSSID();
 8004742:	f002 fbb7 	bl	8006eb4 <takeWifiSSID>

			HAL_Delay(250);
 8004746:	20fa      	movs	r0, #250	; 0xfa
 8004748:	f003 ff9e 	bl	8008688 <HAL_Delay>
			lcd_print(2, 1, wifiSSID);
 800474c:	4a48      	ldr	r2, [pc, #288]	; (8004870 <menu+0x3630>)
 800474e:	2101      	movs	r1, #1
 8004750:	2002      	movs	r0, #2
 8004752:	f003 fa43 	bl	8007bdc <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004756:	4846      	ldr	r0, [pc, #280]	; (8004870 <menu+0x3630>)
 8004758:	f7fb fd64 	bl	8000224 <strlen>
 800475c:	4603      	mov	r3, r0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	3301      	adds	r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	4a44      	ldr	r2, [pc, #272]	; (8004878 <menu+0x3638>)
 8004766:	4619      	mov	r1, r3
 8004768:	2002      	movs	r0, #2
 800476a:	f003 fa37 	bl	8007bdc <lcd_print>
		}
	}

	if (menuSayac == 34) {
 800476e:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <menu+0x3618>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b22      	cmp	r3, #34	; 0x22
 8004774:	d14f      	bne.n	8004816 <menu+0x35d6>
		calismaSayModu = 0;
 8004776:	4b39      	ldr	r3, [pc, #228]	; (800485c <menu+0x361c>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 800477c:	483f      	ldr	r0, [pc, #252]	; (800487c <menu+0x363c>)
 800477e:	f7fb fd51 	bl	8000224 <strlen>
 8004782:	4603      	mov	r3, r0
 8004784:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004786:	4a3e      	ldr	r2, [pc, #248]	; (8004880 <menu+0x3640>)
 8004788:	2101      	movs	r1, #1
 800478a:	2001      	movs	r0, #1
 800478c:	f003 fa26 	bl	8007bdc <lcd_print>

		if(passLength <= 16) {
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b10      	cmp	r3, #16
 8004794:	dc0e      	bgt.n	80047b4 <menu+0x3574>
			lcd_print(2, 1, wifiPass);
 8004796:	4a39      	ldr	r2, [pc, #228]	; (800487c <menu+0x363c>)
 8004798:	2101      	movs	r1, #1
 800479a:	2002      	movs	r0, #2
 800479c:	f003 fa1e 	bl	8007bdc <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3301      	adds	r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4a33      	ldr	r2, [pc, #204]	; (8004878 <menu+0x3638>)
 80047aa:	4619      	mov	r1, r3
 80047ac:	2002      	movs	r0, #2
 80047ae:	f003 fa15 	bl	8007bdc <lcd_print>
 80047b2:	e005      	b.n	80047c0 <menu+0x3580>
		} else {
			slideText(wifiPass, 1, 2, 1);
 80047b4:	2301      	movs	r3, #1
 80047b6:	2202      	movs	r2, #2
 80047b8:	2101      	movs	r1, #1
 80047ba:	4830      	ldr	r0, [pc, #192]	; (800487c <menu+0x363c>)
 80047bc:	f7fc fc84 	bl	80010c8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047c0:	2102      	movs	r1, #2
 80047c2:	4820      	ldr	r0, [pc, #128]	; (8004844 <menu+0x3604>)
 80047c4:	f004 fd30 	bl	8009228 <HAL_GPIO_ReadPin>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d123      	bne.n	8004816 <menu+0x35d6>
 80047ce:	2104      	movs	r1, #4
 80047d0:	481c      	ldr	r0, [pc, #112]	; (8004844 <menu+0x3604>)
 80047d2:	f004 fd29 	bl	8009228 <HAL_GPIO_ReadPin>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d11c      	bne.n	8004816 <menu+0x35d6>
 80047dc:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <menu+0x3608>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	f083 0301 	eor.w	r3, r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d015      	beq.n	8004816 <menu+0x35d6>
			takeWifiPass();
 80047ea:	f002 fd15 	bl	8007218 <takeWifiPass>

			HAL_Delay(250);
 80047ee:	20fa      	movs	r0, #250	; 0xfa
 80047f0:	f003 ff4a 	bl	8008688 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 80047f4:	4a21      	ldr	r2, [pc, #132]	; (800487c <menu+0x363c>)
 80047f6:	2101      	movs	r1, #1
 80047f8:	2002      	movs	r0, #2
 80047fa:	f003 f9ef 	bl	8007bdc <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80047fe:	481f      	ldr	r0, [pc, #124]	; (800487c <menu+0x363c>)
 8004800:	f7fb fd10 	bl	8000224 <strlen>
 8004804:	4603      	mov	r3, r0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	3301      	adds	r3, #1
 800480a:	b2db      	uxtb	r3, r3
 800480c:	4a1a      	ldr	r2, [pc, #104]	; (8004878 <menu+0x3638>)
 800480e:	4619      	mov	r1, r3
 8004810:	2002      	movs	r0, #2
 8004812:	f003 f9e3 	bl	8007bdc <lcd_print>
		}
	}

	if (menuSayac == 35) {
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <menu+0x3618>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b23      	cmp	r3, #35	; 0x23
 800481c:	d175      	bne.n	800490a <menu+0x36ca>
		if(dilSecim == 0) {
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <menu+0x35fc>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d132      	bne.n	800488c <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004826:	4a17      	ldr	r2, [pc, #92]	; (8004884 <menu+0x3644>)
 8004828:	2101      	movs	r1, #1
 800482a:	2001      	movs	r0, #1
 800482c:	f003 f9d6 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004830:	4a15      	ldr	r2, [pc, #84]	; (8004888 <menu+0x3648>)
 8004832:	2101      	movs	r1, #1
 8004834:	2002      	movs	r0, #2
 8004836:	f003 f9d1 	bl	8007bdc <lcd_print>
 800483a:	e035      	b.n	80048a8 <menu+0x3668>
 800483c:	20000221 	.word	0x20000221
 8004840:	0800d2a8 	.word	0x0800d2a8
 8004844:	40010800 	.word	0x40010800
 8004848:	2000022f 	.word	0x2000022f
 800484c:	2000021f 	.word	0x2000021f
 8004850:	2000012c 	.word	0x2000012c
 8004854:	2000022c 	.word	0x2000022c
 8004858:	20000200 	.word	0x20000200
 800485c:	20000220 	.word	0x20000220
 8004860:	0800d9f0 	.word	0x0800d9f0
 8004864:	0800da04 	.word	0x0800da04
 8004868:	200001a4 	.word	0x200001a4
 800486c:	0800da18 	.word	0x0800da18
 8004870:	200001b0 	.word	0x200001b0
 8004874:	0800da20 	.word	0x0800da20
 8004878:	20000010 	.word	0x20000010
 800487c:	200001c4 	.word	0x200001c4
 8004880:	0800da34 	.word	0x0800da34
 8004884:	0800da48 	.word	0x0800da48
 8004888:	0800da5c 	.word	0x0800da5c
		} else if(dilSecim == 1) {
 800488c:	4b21      	ldr	r3, [pc, #132]	; (8004914 <menu+0x36d4>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d109      	bne.n	80048a8 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004894:	4a20      	ldr	r2, [pc, #128]	; (8004918 <menu+0x36d8>)
 8004896:	2101      	movs	r1, #1
 8004898:	2001      	movs	r0, #1
 800489a:	f003 f99f 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800489e:	4a1f      	ldr	r2, [pc, #124]	; (800491c <menu+0x36dc>)
 80048a0:	2101      	movs	r1, #1
 80048a2:	2002      	movs	r0, #2
 80048a4:	f003 f99a 	bl	8007bdc <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80048a8:	2108      	movs	r1, #8
 80048aa:	481d      	ldr	r0, [pc, #116]	; (8004920 <menu+0x36e0>)
 80048ac:	f004 fcbc 	bl	8009228 <HAL_GPIO_ReadPin>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d129      	bne.n	800490a <menu+0x36ca>
			menuGiris = 0;
 80048b6:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <menu+0x36e4>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80048bc:	bf00      	nop
 80048be:	481a      	ldr	r0, [pc, #104]	; (8004928 <menu+0x36e8>)
 80048c0:	f005 fadb 	bl	8009e7a <HAL_I2C_GetError>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d0f9      	beq.n	80048be <menu+0x367e>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80048ca:	bf00      	nop
 80048cc:	4816      	ldr	r0, [pc, #88]	; (8004928 <menu+0x36e8>)
 80048ce:	f005 fac7 	bl	8009e60 <HAL_I2C_GetState>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d1f9      	bne.n	80048cc <menu+0x368c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80048d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80048dc:	9302      	str	r3, [sp, #8]
 80048de:	236e      	movs	r3, #110	; 0x6e
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <menu+0x36ec>)
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	236e      	movs	r3, #110	; 0x6e
 80048e8:	2200      	movs	r2, #0
 80048ea:	21a0      	movs	r1, #160	; 0xa0
 80048ec:	480e      	ldr	r0, [pc, #56]	; (8004928 <menu+0x36e8>)
 80048ee:	f004 ff55 	bl	800979c <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80048f2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80048f6:	f003 fec7 	bl	8008688 <HAL_Delay>

			lcd_clear();
 80048fa:	f003 f99b 	bl	8007c34 <lcd_clear>
			HAL_Delay(500);
 80048fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004902:	f003 fec1 	bl	8008688 <HAL_Delay>
			NVIC_SystemReset();
 8004906:	f7fc fc85 	bl	8001214 <__NVIC_SystemReset>
		}
	}
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000221 	.word	0x20000221
 8004918:	0800da70 	.word	0x0800da70
 800491c:	0800da84 	.word	0x0800da84
 8004920:	40010800 	.word	0x40010800
 8004924:	2000021d 	.word	0x2000021d
 8004928:	20000290 	.word	0x20000290
 800492c:	2000012c 	.word	0x2000012c

08004930 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d105      	bne.n	800494c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <lcdUpdate+0x9c>)
 8004942:	2101      	movs	r1, #1
 8004944:	2002      	movs	r0, #2
 8004946:	f003 f949 	bl	8007bdc <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 800494a:	e03b      	b.n	80049c4 <lcdUpdate+0x94>
	} else if(y==2) {
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d105      	bne.n	800495e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004952:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <lcdUpdate+0x9c>)
 8004954:	2102      	movs	r1, #2
 8004956:	2002      	movs	r0, #2
 8004958:	f003 f940 	bl	8007bdc <lcd_print>
}
 800495c:	e032      	b.n	80049c4 <lcdUpdate+0x94>
	} else if(y==3) {
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d105      	bne.n	8004970 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004964:	4a19      	ldr	r2, [pc, #100]	; (80049cc <lcdUpdate+0x9c>)
 8004966:	2103      	movs	r1, #3
 8004968:	2002      	movs	r0, #2
 800496a:	f003 f937 	bl	8007bdc <lcd_print>
}
 800496e:	e029      	b.n	80049c4 <lcdUpdate+0x94>
	} else if(y==4) {
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	2b04      	cmp	r3, #4
 8004974:	d105      	bne.n	8004982 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004976:	4a15      	ldr	r2, [pc, #84]	; (80049cc <lcdUpdate+0x9c>)
 8004978:	2104      	movs	r1, #4
 800497a:	2002      	movs	r0, #2
 800497c:	f003 f92e 	bl	8007bdc <lcd_print>
}
 8004980:	e020      	b.n	80049c4 <lcdUpdate+0x94>
	} else if(y==5) {
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	2b05      	cmp	r3, #5
 8004986:	d105      	bne.n	8004994 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004988:	4a10      	ldr	r2, [pc, #64]	; (80049cc <lcdUpdate+0x9c>)
 800498a:	2105      	movs	r1, #5
 800498c:	2002      	movs	r0, #2
 800498e:	f003 f925 	bl	8007bdc <lcd_print>
}
 8004992:	e017      	b.n	80049c4 <lcdUpdate+0x94>
	} else if(y==6) {
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	2b06      	cmp	r3, #6
 8004998:	d105      	bne.n	80049a6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800499a:	4a0c      	ldr	r2, [pc, #48]	; (80049cc <lcdUpdate+0x9c>)
 800499c:	2106      	movs	r1, #6
 800499e:	2002      	movs	r0, #2
 80049a0:	f003 f91c 	bl	8007bdc <lcd_print>
}
 80049a4:	e00e      	b.n	80049c4 <lcdUpdate+0x94>
	} else if (y==7) {
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	2b07      	cmp	r3, #7
 80049aa:	d10b      	bne.n	80049c4 <lcdUpdate+0x94>
		lcd_clear();
 80049ac:	f003 f942 	bl	8007c34 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 80049b0:	4a07      	ldr	r2, [pc, #28]	; (80049d0 <lcdUpdate+0xa0>)
 80049b2:	2104      	movs	r1, #4
 80049b4:	2001      	movs	r0, #1
 80049b6:	f003 f911 	bl	8007bdc <lcd_print>
		lcd_print(2, 6, "RUN");
 80049ba:	4a06      	ldr	r2, [pc, #24]	; (80049d4 <lcdUpdate+0xa4>)
 80049bc:	2106      	movs	r1, #6
 80049be:	2002      	movs	r0, #2
 80049c0:	f003 f90c 	bl	8007bdc <lcd_print>
}
 80049c4:	bf00      	nop
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	0800da98 	.word	0x0800da98
 80049d0:	0800da9c 	.word	0x0800da9c
 80049d4:	0800daa4 	.word	0x0800daa4

080049d8 <bekle>:

void bekle() {
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
	timer1=millis;
 80049dc:	4b47      	ldr	r3, [pc, #284]	; (8004afc <bekle+0x124>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a47      	ldr	r2, [pc, #284]	; (8004b00 <bekle+0x128>)
 80049e2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049e4:	e002      	b.n	80049ec <bekle+0x14>
    	butonKontrol = 1;
 80049e6:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <bekle+0x12c>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049ec:	2101      	movs	r1, #1
 80049ee:	4846      	ldr	r0, [pc, #280]	; (8004b08 <bekle+0x130>)
 80049f0:	f004 fc1a 	bl	8009228 <HAL_GPIO_ReadPin>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d109      	bne.n	8004a0e <bekle+0x36>
 80049fa:	4b40      	ldr	r3, [pc, #256]	; (8004afc <bekle+0x124>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b40      	ldr	r3, [pc, #256]	; (8004b00 <bekle+0x128>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d0ef      	beq.n	80049e6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a06:	e002      	b.n	8004a0e <bekle+0x36>
    	butonKontrol = 1;
 8004a08:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <bekle+0x12c>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a0e:	2108      	movs	r1, #8
 8004a10:	483e      	ldr	r0, [pc, #248]	; (8004b0c <bekle+0x134>)
 8004a12:	f004 fc09 	bl	8009228 <HAL_GPIO_ReadPin>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d109      	bne.n	8004a30 <bekle+0x58>
 8004a1c:	4b37      	ldr	r3, [pc, #220]	; (8004afc <bekle+0x124>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <bekle+0x128>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d0ef      	beq.n	8004a08 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a28:	e002      	b.n	8004a30 <bekle+0x58>
    	butonKontrol = 1;
 8004a2a:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <bekle+0x12c>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a30:	2102      	movs	r1, #2
 8004a32:	4835      	ldr	r0, [pc, #212]	; (8004b08 <bekle+0x130>)
 8004a34:	f004 fbf8 	bl	8009228 <HAL_GPIO_ReadPin>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d109      	bne.n	8004a52 <bekle+0x7a>
 8004a3e:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <bekle+0x124>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <bekle+0x128>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d0ef      	beq.n	8004a2a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a4a:	e002      	b.n	8004a52 <bekle+0x7a>
    	butonKontrol = 1;
 8004a4c:	4b2d      	ldr	r3, [pc, #180]	; (8004b04 <bekle+0x12c>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a52:	2104      	movs	r1, #4
 8004a54:	482c      	ldr	r0, [pc, #176]	; (8004b08 <bekle+0x130>)
 8004a56:	f004 fbe7 	bl	8009228 <HAL_GPIO_ReadPin>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d109      	bne.n	8004a74 <bekle+0x9c>
 8004a60:	4b26      	ldr	r3, [pc, #152]	; (8004afc <bekle+0x124>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <bekle+0x128>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d0ef      	beq.n	8004a4c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a6c:	e002      	b.n	8004a74 <bekle+0x9c>
    	butonKontrol = 1;
 8004a6e:	4b25      	ldr	r3, [pc, #148]	; (8004b04 <bekle+0x12c>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a74:	2108      	movs	r1, #8
 8004a76:	4824      	ldr	r0, [pc, #144]	; (8004b08 <bekle+0x130>)
 8004a78:	f004 fbd6 	bl	8009228 <HAL_GPIO_ReadPin>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d109      	bne.n	8004a96 <bekle+0xbe>
 8004a82:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <bekle+0x124>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <bekle+0x128>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d0ef      	beq.n	8004a6e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a8e:	e002      	b.n	8004a96 <bekle+0xbe>
    	butonKontrol = 1;
 8004a90:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <bekle+0x12c>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	481c      	ldr	r0, [pc, #112]	; (8004b0c <bekle+0x134>)
 8004a9a:	f004 fbc5 	bl	8009228 <HAL_GPIO_ReadPin>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <bekle+0xe0>
 8004aa4:	4b15      	ldr	r3, [pc, #84]	; (8004afc <bekle+0x124>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <bekle+0x128>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d0ef      	beq.n	8004a90 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ab0:	e002      	b.n	8004ab8 <bekle+0xe0>
    	butonKontrol = 1;
 8004ab2:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <bekle+0x12c>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004abc:	4813      	ldr	r0, [pc, #76]	; (8004b0c <bekle+0x134>)
 8004abe:	f004 fbb3 	bl	8009228 <HAL_GPIO_ReadPin>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <bekle+0x104>
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <bekle+0x124>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <bekle+0x128>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d0ee      	beq.n	8004ab2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ad4:	e002      	b.n	8004adc <bekle+0x104>
    	butonKontrol = 1;
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <bekle+0x12c>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ae0:	480a      	ldr	r0, [pc, #40]	; (8004b0c <bekle+0x134>)
 8004ae2:	f004 fba1 	bl	8009228 <HAL_GPIO_ReadPin>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <bekle+0x120>
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <bekle+0x124>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b03      	ldr	r3, [pc, #12]	; (8004b00 <bekle+0x128>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d0ee      	beq.n	8004ad6 <bekle+0xfe>
    }

}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	200001dc 	.word	0x200001dc
 8004b00:	200001e4 	.word	0x200001e4
 8004b04:	2000022f 	.word	0x2000022f
 8004b08:	40010800 	.word	0x40010800
 8004b0c:	40011000 	.word	0x40011000

08004b10 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <checkLCDBacklight+0x24>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <checkLCDBacklight+0x28>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b3b      	cmp	r3, #59	; 0x3b
 8004b20:	d903      	bls.n	8004b2a <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004b22:	2000      	movs	r0, #0
 8004b24:	f003 f8a6 	bl	8007c74 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004b28:	e002      	b.n	8004b30 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	f003 f8a2 	bl	8007c74 <lcd_backlight>
}
 8004b30:	bf00      	nop
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	200001dc 	.word	0x200001dc
 8004b38:	200001f8 	.word	0x200001f8

08004b3c <checkBasincSalteri>:

void checkBasincSalteri() {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <checkBasincSalteri+0x54>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <checkBasincSalteri+0x12>
		basincVar=1;
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <checkBasincSalteri+0x58>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <checkBasincSalteri+0x54>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d119      	bne.n	8004b8a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b5a:	480f      	ldr	r0, [pc, #60]	; (8004b98 <checkBasincSalteri+0x5c>)
 8004b5c:	f004 fb64 	bl	8009228 <HAL_GPIO_ReadPin>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004b66:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <checkBasincSalteri+0x60>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <checkBasincSalteri+0x64>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d90a      	bls.n	8004b8a <checkBasincSalteri+0x4e>
				basincVar=1;
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <checkBasincSalteri+0x58>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004b7a:	e006      	b.n	8004b8a <checkBasincSalteri+0x4e>
			timer5=millis;
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <checkBasincSalteri+0x60>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <checkBasincSalteri+0x64>)
 8004b82:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004b84:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <checkBasincSalteri+0x58>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000207 	.word	0x20000207
 8004b94:	20000203 	.word	0x20000203
 8004b98:	40011000 	.word	0x40011000
 8004b9c:	200001dc 	.word	0x200001dc
 8004ba0:	200001f4 	.word	0x200001f4

08004ba4 <checkBasGonder>:

void checkBasGonder() {
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <checkBasGonder+0x74>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10b      	bne.n	8004bc8 <checkBasGonder+0x24>
 8004bb0:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <checkBasGonder+0x78>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <checkBasGonder+0x24>
 8004bb8:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <checkBasGonder+0x7c>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d103      	bne.n	8004bc8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004bc0:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <checkBasGonder+0x80>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	e009      	b.n	8004bdc <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004bc8:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <checkBasGonder+0x78>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	f083 0301 	eor.w	r3, r3, #1
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004bd6:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <checkBasGonder+0x80>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <checkBasGonder+0x74>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10b      	bne.n	8004bfc <checkBasGonder+0x58>
 8004be4:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <checkBasGonder+0x84>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <checkBasGonder+0x58>
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <checkBasGonder+0x7c>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d103      	bne.n	8004bfc <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004bf4:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <checkBasGonder+0x88>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004bfa:	e009      	b.n	8004c10 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <checkBasGonder+0x84>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f083 0301 	eor.w	r3, r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <checkBasGonder+0x88>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	20000201 	.word	0x20000201
 8004c1c:	20000235 	.word	0x20000235
 8004c20:	2000020f 	.word	0x2000020f
 8004c24:	2000023c 	.word	0x2000023c
 8004c28:	20000238 	.word	0x20000238
 8004c2c:	2000023d 	.word	0x2000023d

08004c30 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004c34:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <checkKapiSecimleri+0x98>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004c3c:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <checkKapiSecimleri+0x9c>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004c42:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <checkKapiSecimleri+0x98>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10e      	bne.n	8004c68 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c4e:	4820      	ldr	r0, [pc, #128]	; (8004cd0 <checkKapiSecimleri+0xa0>)
 8004c50:	f004 faea 	bl	8009228 <HAL_GPIO_ReadPin>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d103      	bne.n	8004c62 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004c5a:	4b1c      	ldr	r3, [pc, #112]	; (8004ccc <checkKapiSecimleri+0x9c>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	e002      	b.n	8004c68 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004c62:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <checkKapiSecimleri+0x9c>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004c68:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <checkKapiSecimleri+0x98>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d10e      	bne.n	8004c8e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004c70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c74:	4816      	ldr	r0, [pc, #88]	; (8004cd0 <checkKapiSecimleri+0xa0>)
 8004c76:	f004 fad7 	bl	8009228 <HAL_GPIO_ReadPin>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004c80:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <checkKapiSecimleri+0x9c>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e002      	b.n	8004c8e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004c88:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <checkKapiSecimleri+0x9c>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <checkKapiSecimleri+0x98>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d116      	bne.n	8004cc4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c9a:	480d      	ldr	r0, [pc, #52]	; (8004cd0 <checkKapiSecimleri+0xa0>)
 8004c9c:	f004 fac4 	bl	8009228 <HAL_GPIO_ReadPin>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <checkKapiSecimleri+0x8e>
 8004ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004caa:	4809      	ldr	r0, [pc, #36]	; (8004cd0 <checkKapiSecimleri+0xa0>)
 8004cac:	f004 fabc 	bl	8009228 <HAL_GPIO_ReadPin>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <checkKapiSecimleri+0x9c>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004cbc:	e002      	b.n	8004cc4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004cbe:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <checkKapiSecimleri+0x9c>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000208 	.word	0x20000208
 8004ccc:	20000253 	.word	0x20000253
 8004cd0:	40010800 	.word	0x40010800

08004cd4 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004cd8:	4b62      	ldr	r3, [pc, #392]	; (8004e64 <checkAktifCalisma+0x190>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f041 833e 	bne.w	800635e <checkAktifCalisma+0x168a>
 8004ce2:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <checkAktifCalisma+0x194>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f041 8339 	bne.w	800635e <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004cec:	4b5f      	ldr	r3, [pc, #380]	; (8004e6c <checkAktifCalisma+0x198>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d11a      	bne.n	8004d2a <checkAktifCalisma+0x56>
 8004cf4:	4b5e      	ldr	r3, [pc, #376]	; (8004e70 <checkAktifCalisma+0x19c>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d116      	bne.n	8004d2a <checkAktifCalisma+0x56>
 8004cfc:	4b5d      	ldr	r3, [pc, #372]	; (8004e74 <checkAktifCalisma+0x1a0>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <checkAktifCalisma+0x46>
 8004d04:	4b5c      	ldr	r3, [pc, #368]	; (8004e78 <checkAktifCalisma+0x1a4>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	f083 0301 	eor.w	r3, r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <checkAktifCalisma+0x46>
 8004d12:	4b5a      	ldr	r3, [pc, #360]	; (8004e7c <checkAktifCalisma+0x1a8>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d007      	beq.n	8004d2a <checkAktifCalisma+0x56>
 8004d1a:	4b59      	ldr	r3, [pc, #356]	; (8004e80 <checkAktifCalisma+0x1ac>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d018      	beq.n	8004d54 <checkAktifCalisma+0x80>
 8004d22:	4b58      	ldr	r3, [pc, #352]	; (8004e84 <checkAktifCalisma+0x1b0>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d114      	bne.n	8004d54 <checkAktifCalisma+0x80>
 8004d2a:	4b57      	ldr	r3, [pc, #348]	; (8004e88 <checkAktifCalisma+0x1b4>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d010      	beq.n	8004d54 <checkAktifCalisma+0x80>
 8004d32:	4b56      	ldr	r3, [pc, #344]	; (8004e8c <checkAktifCalisma+0x1b8>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00c      	beq.n	8004d54 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d40:	4853      	ldr	r0, [pc, #332]	; (8004e90 <checkAktifCalisma+0x1bc>)
 8004d42:	f004 fa88 	bl	8009256 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004d46:	4b53      	ldr	r3, [pc, #332]	; (8004e94 <checkAktifCalisma+0x1c0>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004d4c:	4b52      	ldr	r3, [pc, #328]	; (8004e98 <checkAktifCalisma+0x1c4>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e008      	b.n	8004d66 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004d54:	2200      	movs	r2, #0
 8004d56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d5a:	484d      	ldr	r0, [pc, #308]	; (8004e90 <checkAktifCalisma+0x1bc>)
 8004d5c:	f004 fa7b 	bl	8009256 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004d60:	4b4c      	ldr	r3, [pc, #304]	; (8004e94 <checkAktifCalisma+0x1c0>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004d66:	4b40      	ldr	r3, [pc, #256]	; (8004e68 <checkAktifCalisma+0x194>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d160      	bne.n	8004e30 <checkAktifCalisma+0x15c>
 8004d6e:	4b46      	ldr	r3, [pc, #280]	; (8004e88 <checkAktifCalisma+0x1b4>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d05c      	beq.n	8004e30 <checkAktifCalisma+0x15c>
 8004d76:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <checkAktifCalisma+0x1b8>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d058      	beq.n	8004e30 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d82:	4843      	ldr	r0, [pc, #268]	; (8004e90 <checkAktifCalisma+0x1bc>)
 8004d84:	f004 fa50 	bl	8009228 <HAL_GPIO_ReadPin>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <checkAktifCalisma+0xc2>
 8004d8e:	4b43      	ldr	r3, [pc, #268]	; (8004e9c <checkAktifCalisma+0x1c8>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d04c      	beq.n	8004e30 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004d96:	2102      	movs	r1, #2
 8004d98:	4841      	ldr	r0, [pc, #260]	; (8004ea0 <checkAktifCalisma+0x1cc>)
 8004d9a:	f004 fa45 	bl	8009228 <HAL_GPIO_ReadPin>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d145      	bne.n	8004e30 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004da4:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <checkAktifCalisma+0x1d0>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d041      	beq.n	8004e30 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004db0:	4837      	ldr	r0, [pc, #220]	; (8004e90 <checkAktifCalisma+0x1bc>)
 8004db2:	f004 fa39 	bl	8009228 <HAL_GPIO_ReadPin>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d10e      	bne.n	8004dda <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dc0:	4833      	ldr	r0, [pc, #204]	; (8004e90 <checkAktifCalisma+0x1bc>)
 8004dc2:	f004 fa31 	bl	8009228 <HAL_GPIO_ReadPin>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d106      	bne.n	8004dda <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004dcc:	2140      	movs	r1, #64	; 0x40
 8004dce:	4834      	ldr	r0, [pc, #208]	; (8004ea0 <checkAktifCalisma+0x1cc>)
 8004dd0:	f004 fa2a 	bl	8009228 <HAL_GPIO_ReadPin>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d003      	beq.n	8004de2 <checkAktifCalisma+0x10e>
 8004dda:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <checkAktifCalisma+0x198>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d026      	beq.n	8004e30 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <checkAktifCalisma+0x1a0>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	f083 0301 	eor.w	r3, r3, #1
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01f      	beq.n	8004e30 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004df0:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <checkAktifCalisma+0x19c>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f083 0301 	eor.w	r3, r3, #1
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d018      	beq.n	8004e30 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004dfe:	4b20      	ldr	r3, [pc, #128]	; (8004e80 <checkAktifCalisma+0x1ac>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	f083 0301 	eor.w	r3, r3, #1
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d011      	beq.n	8004e30 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004e0c:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <checkAktifCalisma+0x1d4>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f083 0301 	eor.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004e1a:	4b24      	ldr	r3, [pc, #144]	; (8004eac <checkAktifCalisma+0x1d8>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	f083 0301 	eor.w	r3, r3, #1
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004e28:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <checkAktifCalisma+0x198>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e002      	b.n	8004e36 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004e30:	4b0e      	ldr	r3, [pc, #56]	; (8004e6c <checkAktifCalisma+0x198>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <checkAktifCalisma+0x198>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d03a      	beq.n	8004eb4 <checkAktifCalisma+0x1e0>
 8004e3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e42:	4817      	ldr	r0, [pc, #92]	; (8004ea0 <checkAktifCalisma+0x1cc>)
 8004e44:	f004 f9f0 	bl	8009228 <HAL_GPIO_ReadPin>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d132      	bne.n	8004eb4 <checkAktifCalisma+0x1e0>
 8004e4e:	4b18      	ldr	r3, [pc, #96]	; (8004eb0 <checkAktifCalisma+0x1dc>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d02e      	beq.n	8004eb4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004e56:	2201      	movs	r2, #1
 8004e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e5c:	480c      	ldr	r0, [pc, #48]	; (8004e90 <checkAktifCalisma+0x1bc>)
 8004e5e:	f004 f9fa 	bl	8009256 <HAL_GPIO_WritePin>
 8004e62:	e02d      	b.n	8004ec0 <checkAktifCalisma+0x1ec>
 8004e64:	2000021e 	.word	0x2000021e
 8004e68:	2000021d 	.word	0x2000021d
 8004e6c:	20000235 	.word	0x20000235
 8004e70:	20000236 	.word	0x20000236
 8004e74:	20000238 	.word	0x20000238
 8004e78:	20000230 	.word	0x20000230
 8004e7c:	20000213 	.word	0x20000213
 8004e80:	20000237 	.word	0x20000237
 8004e84:	20000212 	.word	0x20000212
 8004e88:	20000252 	.word	0x20000252
 8004e8c:	20000253 	.word	0x20000253
 8004e90:	40010c00 	.word	0x40010c00
 8004e94:	20000254 	.word	0x20000254
 8004e98:	2000023f 	.word	0x2000023f
 8004e9c:	2000023c 	.word	0x2000023c
 8004ea0:	40011000 	.word	0x40011000
 8004ea4:	20000203 	.word	0x20000203
 8004ea8:	2000023a 	.word	0x2000023a
 8004eac:	2000023b 	.word	0x2000023b
 8004eb0:	2000020e 	.word	0x2000020e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eba:	4860      	ldr	r0, [pc, #384]	; (800503c <checkAktifCalisma+0x368>)
 8004ebc:	f004 f9cb 	bl	8009256 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004ec0:	4b5f      	ldr	r3, [pc, #380]	; (8005040 <checkAktifCalisma+0x36c>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d013      	beq.n	8004ef0 <checkAktifCalisma+0x21c>
 8004ec8:	4b5e      	ldr	r3, [pc, #376]	; (8005044 <checkAktifCalisma+0x370>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d007      	beq.n	8004ee0 <checkAktifCalisma+0x20c>
 8004ed0:	4b5c      	ldr	r3, [pc, #368]	; (8005044 <checkAktifCalisma+0x370>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d003      	beq.n	8004ee0 <checkAktifCalisma+0x20c>
 8004ed8:	4b5b      	ldr	r3, [pc, #364]	; (8005048 <checkAktifCalisma+0x374>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d107      	bne.n	8004ef0 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	2104      	movs	r1, #4
 8004ee4:	4855      	ldr	r0, [pc, #340]	; (800503c <checkAktifCalisma+0x368>)
 8004ee6:	f004 f9b6 	bl	8009256 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004eea:	4b58      	ldr	r3, [pc, #352]	; (800504c <checkAktifCalisma+0x378>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004ef0:	4b56      	ldr	r3, [pc, #344]	; (800504c <checkAktifCalisma+0x378>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02f      	beq.n	8004f58 <checkAktifCalisma+0x284>
 8004ef8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004efc:	484f      	ldr	r0, [pc, #316]	; (800503c <checkAktifCalisma+0x368>)
 8004efe:	f004 f993 	bl	8009228 <HAL_GPIO_ReadPin>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d106      	bne.n	8004f16 <checkAktifCalisma+0x242>
 8004f08:	4b51      	ldr	r3, [pc, #324]	; (8005050 <checkAktifCalisma+0x37c>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f083 0301 	eor.w	r3, r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <checkAktifCalisma+0x250>
 8004f16:	2102      	movs	r1, #2
 8004f18:	484e      	ldr	r0, [pc, #312]	; (8005054 <checkAktifCalisma+0x380>)
 8004f1a:	f004 f985 	bl	8009228 <HAL_GPIO_ReadPin>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d119      	bne.n	8004f58 <checkAktifCalisma+0x284>
 8004f24:	4b4c      	ldr	r3, [pc, #304]	; (8005058 <checkAktifCalisma+0x384>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d015      	beq.n	8004f58 <checkAktifCalisma+0x284>
 8004f2c:	4b4b      	ldr	r3, [pc, #300]	; (800505c <checkAktifCalisma+0x388>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d011      	beq.n	8004f58 <checkAktifCalisma+0x284>
 8004f34:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <checkAktifCalisma+0x38c>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <checkAktifCalisma+0x284>
 8004f3c:	4b49      	ldr	r3, [pc, #292]	; (8005064 <checkAktifCalisma+0x390>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f083 0301 	eor.w	r3, r3, #1
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d006      	beq.n	8004f58 <checkAktifCalisma+0x284>
			timer2=millis;
 8004f4a:	4b47      	ldr	r3, [pc, #284]	; (8005068 <checkAktifCalisma+0x394>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a47      	ldr	r2, [pc, #284]	; (800506c <checkAktifCalisma+0x398>)
 8004f50:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004f52:	4b44      	ldr	r3, [pc, #272]	; (8005064 <checkAktifCalisma+0x390>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004f58:	4b43      	ldr	r3, [pc, #268]	; (8005068 <checkAktifCalisma+0x394>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	4b43      	ldr	r3, [pc, #268]	; (800506c <checkAktifCalisma+0x398>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	4a43      	ldr	r2, [pc, #268]	; (8005070 <checkAktifCalisma+0x39c>)
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d303      	bcc.n	8004f72 <checkAktifCalisma+0x29e>
 8004f6a:	4b3e      	ldr	r3, [pc, #248]	; (8005064 <checkAktifCalisma+0x390>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d111      	bne.n	8004f96 <checkAktifCalisma+0x2c2>
 8004f72:	4b39      	ldr	r3, [pc, #228]	; (8005058 <checkAktifCalisma+0x384>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	f083 0301 	eor.w	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <checkAktifCalisma+0x2c2>
 8004f80:	4b36      	ldr	r3, [pc, #216]	; (800505c <checkAktifCalisma+0x388>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	f083 0301 	eor.w	r3, r3, #1
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <checkAktifCalisma+0x2c2>
 8004f8e:	4b34      	ldr	r3, [pc, #208]	; (8005060 <checkAktifCalisma+0x38c>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10a      	bne.n	8004fac <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004f96:	2200      	movs	r2, #0
 8004f98:	2104      	movs	r1, #4
 8004f9a:	4828      	ldr	r0, [pc, #160]	; (800503c <checkAktifCalisma+0x368>)
 8004f9c:	f004 f95b 	bl	8009256 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004fa0:	4b2a      	ldr	r3, [pc, #168]	; (800504c <checkAktifCalisma+0x378>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004fa6:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <checkAktifCalisma+0x390>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004fac:	4b31      	ldr	r3, [pc, #196]	; (8005074 <checkAktifCalisma+0x3a0>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004fb4:	4b30      	ldr	r3, [pc, #192]	; (8005078 <checkAktifCalisma+0x3a4>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004fba:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <checkAktifCalisma+0x3a0>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d116      	bne.n	8004ff0 <checkAktifCalisma+0x31c>
 8004fc2:	4b2e      	ldr	r3, [pc, #184]	; (800507c <checkAktifCalisma+0x3a8>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d112      	bne.n	8004ff0 <checkAktifCalisma+0x31c>
 8004fca:	2101      	movs	r1, #1
 8004fcc:	4821      	ldr	r0, [pc, #132]	; (8005054 <checkAktifCalisma+0x380>)
 8004fce:	f004 f92b 	bl	8009228 <HAL_GPIO_ReadPin>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <checkAktifCalisma+0x31c>
 8004fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fdc:	4817      	ldr	r0, [pc, #92]	; (800503c <checkAktifCalisma+0x368>)
 8004fde:	f004 f923 	bl	8009228 <HAL_GPIO_ReadPin>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d103      	bne.n	8004ff0 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004fe8:	4b23      	ldr	r3, [pc, #140]	; (8005078 <checkAktifCalisma+0x3a4>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e011      	b.n	8005014 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004ff0:	4b20      	ldr	r3, [pc, #128]	; (8005074 <checkAktifCalisma+0x3a0>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d10d      	bne.n	8005014 <checkAktifCalisma+0x340>
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	4816      	ldr	r0, [pc, #88]	; (8005054 <checkAktifCalisma+0x380>)
 8004ffc:	f004 f914 	bl	8009228 <HAL_GPIO_ReadPin>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d106      	bne.n	8005014 <checkAktifCalisma+0x340>
 8005006:	4b1d      	ldr	r3, [pc, #116]	; (800507c <checkAktifCalisma+0x3a8>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800500e:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <checkAktifCalisma+0x3a4>)
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005014:	4b17      	ldr	r3, [pc, #92]	; (8005074 <checkAktifCalisma+0x3a0>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d134      	bne.n	8005086 <checkAktifCalisma+0x3b2>
 800501c:	4b17      	ldr	r3, [pc, #92]	; (800507c <checkAktifCalisma+0x3a8>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d130      	bne.n	8005086 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005024:	2101      	movs	r1, #1
 8005026:	480b      	ldr	r0, [pc, #44]	; (8005054 <checkAktifCalisma+0x380>)
 8005028:	f004 f8fe 	bl	8009228 <HAL_GPIO_ReadPin>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d126      	bne.n	8005080 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005032:	4b11      	ldr	r3, [pc, #68]	; (8005078 <checkAktifCalisma+0x3a4>)
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	e025      	b.n	8005086 <checkAktifCalisma+0x3b2>
 800503a:	bf00      	nop
 800503c:	40010c00 	.word	0x40010c00
 8005040:	20000235 	.word	0x20000235
 8005044:	2000020f 	.word	0x2000020f
 8005048:	20000213 	.word	0x20000213
 800504c:	20000239 	.word	0x20000239
 8005050:	2000023c 	.word	0x2000023c
 8005054:	40011000 	.word	0x40011000
 8005058:	20000252 	.word	0x20000252
 800505c:	20000253 	.word	0x20000253
 8005060:	20000203 	.word	0x20000203
 8005064:	20000231 	.word	0x20000231
 8005068:	200001dc 	.word	0x200001dc
 800506c:	200001e8 	.word	0x200001e8
 8005070:	20000214 	.word	0x20000214
 8005074:	20000204 	.word	0x20000204
 8005078:	20000257 	.word	0x20000257
 800507c:	20000201 	.word	0x20000201
			} else {
				cerceveVar=0;
 8005080:	4b7f      	ldr	r3, [pc, #508]	; (8005280 <checkAktifCalisma+0x5ac>)
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005086:	4b7f      	ldr	r3, [pc, #508]	; (8005284 <checkAktifCalisma+0x5b0>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d17c      	bne.n	8005188 <checkAktifCalisma+0x4b4>
 800508e:	4b7e      	ldr	r3, [pc, #504]	; (8005288 <checkAktifCalisma+0x5b4>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d078      	beq.n	8005188 <checkAktifCalisma+0x4b4>
 8005096:	4b7d      	ldr	r3, [pc, #500]	; (800528c <checkAktifCalisma+0x5b8>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d074      	beq.n	8005188 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800509e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050a2:	487b      	ldr	r0, [pc, #492]	; (8005290 <checkAktifCalisma+0x5bc>)
 80050a4:	f004 f8c0 	bl	8009228 <HAL_GPIO_ReadPin>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <checkAktifCalisma+0x3e2>
 80050ae:	4b79      	ldr	r3, [pc, #484]	; (8005294 <checkAktifCalisma+0x5c0>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d068      	beq.n	8005188 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80050b6:	4b72      	ldr	r3, [pc, #456]	; (8005280 <checkAktifCalisma+0x5ac>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d064      	beq.n	8005188 <checkAktifCalisma+0x4b4>
 80050be:	4b76      	ldr	r3, [pc, #472]	; (8005298 <checkAktifCalisma+0x5c4>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	f083 0301 	eor.w	r3, r3, #1
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d05d      	beq.n	8005188 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80050cc:	2104      	movs	r1, #4
 80050ce:	4873      	ldr	r0, [pc, #460]	; (800529c <checkAktifCalisma+0x5c8>)
 80050d0:	f004 f8aa 	bl	8009228 <HAL_GPIO_ReadPin>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <checkAktifCalisma+0x40e>
 80050da:	4b71      	ldr	r3, [pc, #452]	; (80052a0 <checkAktifCalisma+0x5cc>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d152      	bne.n	8005188 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80050e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050e6:	486a      	ldr	r0, [pc, #424]	; (8005290 <checkAktifCalisma+0x5bc>)
 80050e8:	f004 f89e 	bl	8009228 <HAL_GPIO_ReadPin>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d10e      	bne.n	8005110 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80050f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050f6:	4866      	ldr	r0, [pc, #408]	; (8005290 <checkAktifCalisma+0x5bc>)
 80050f8:	f004 f896 	bl	8009228 <HAL_GPIO_ReadPin>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d106      	bne.n	8005110 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005102:	2140      	movs	r1, #64	; 0x40
 8005104:	4865      	ldr	r0, [pc, #404]	; (800529c <checkAktifCalisma+0x5c8>)
 8005106:	f004 f88f 	bl	8009228 <HAL_GPIO_ReadPin>
 800510a:	4603      	mov	r3, r0
 800510c:	2b01      	cmp	r3, #1
 800510e:	d003      	beq.n	8005118 <checkAktifCalisma+0x444>
 8005110:	4b64      	ldr	r3, [pc, #400]	; (80052a4 <checkAktifCalisma+0x5d0>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d037      	beq.n	8005188 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005118:	4b63      	ldr	r3, [pc, #396]	; (80052a8 <checkAktifCalisma+0x5d4>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	f083 0301 	eor.w	r3, r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d030      	beq.n	8005188 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005126:	4b61      	ldr	r3, [pc, #388]	; (80052ac <checkAktifCalisma+0x5d8>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	f083 0301 	eor.w	r3, r3, #1
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d029      	beq.n	8005188 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005134:	4b5e      	ldr	r3, [pc, #376]	; (80052b0 <checkAktifCalisma+0x5dc>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	f083 0301 	eor.w	r3, r3, #1
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d022      	beq.n	8005188 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005142:	4b5c      	ldr	r3, [pc, #368]	; (80052b4 <checkAktifCalisma+0x5e0>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	f083 0301 	eor.w	r3, r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01b      	beq.n	8005188 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005150:	4b59      	ldr	r3, [pc, #356]	; (80052b8 <checkAktifCalisma+0x5e4>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f083 0301 	eor.w	r3, r3, #1
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d014      	beq.n	8005188 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800515e:	4b57      	ldr	r3, [pc, #348]	; (80052bc <checkAktifCalisma+0x5e8>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	f083 0301 	eor.w	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00d      	beq.n	8005188 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800516c:	2201      	movs	r2, #1
 800516e:	2102      	movs	r1, #2
 8005170:	4847      	ldr	r0, [pc, #284]	; (8005290 <checkAktifCalisma+0x5bc>)
 8005172:	f004 f870 	bl	8009256 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005176:	4b4b      	ldr	r3, [pc, #300]	; (80052a4 <checkAktifCalisma+0x5d0>)
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 800517c:	4b50      	ldr	r3, [pc, #320]	; (80052c0 <checkAktifCalisma+0x5ec>)
 800517e:	2201      	movs	r2, #1
 8005180:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005182:	4b50      	ldr	r3, [pc, #320]	; (80052c4 <checkAktifCalisma+0x5f0>)
 8005184:	2201      	movs	r2, #1
 8005186:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005188:	4b46      	ldr	r3, [pc, #280]	; (80052a4 <checkAktifCalisma+0x5d0>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d033      	beq.n	80051f8 <checkAktifCalisma+0x524>
 8005190:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005194:	483e      	ldr	r0, [pc, #248]	; (8005290 <checkAktifCalisma+0x5bc>)
 8005196:	f004 f847 	bl	8009228 <HAL_GPIO_ReadPin>
 800519a:	4603      	mov	r3, r0
 800519c:	2b01      	cmp	r3, #1
 800519e:	d106      	bne.n	80051ae <checkAktifCalisma+0x4da>
 80051a0:	4b3c      	ldr	r3, [pc, #240]	; (8005294 <checkAktifCalisma+0x5c0>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f083 0301 	eor.w	r3, r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10a      	bne.n	80051c4 <checkAktifCalisma+0x4f0>
 80051ae:	2104      	movs	r1, #4
 80051b0:	483a      	ldr	r0, [pc, #232]	; (800529c <checkAktifCalisma+0x5c8>)
 80051b2:	f004 f839 	bl	8009228 <HAL_GPIO_ReadPin>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d11d      	bne.n	80051f8 <checkAktifCalisma+0x524>
 80051bc:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <checkAktifCalisma+0x5cc>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d019      	beq.n	80051f8 <checkAktifCalisma+0x524>
 80051c4:	4b30      	ldr	r3, [pc, #192]	; (8005288 <checkAktifCalisma+0x5b4>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d015      	beq.n	80051f8 <checkAktifCalisma+0x524>
 80051cc:	4b2f      	ldr	r3, [pc, #188]	; (800528c <checkAktifCalisma+0x5b8>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d011      	beq.n	80051f8 <checkAktifCalisma+0x524>
 80051d4:	4b2a      	ldr	r3, [pc, #168]	; (8005280 <checkAktifCalisma+0x5ac>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00d      	beq.n	80051f8 <checkAktifCalisma+0x524>
 80051dc:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <checkAktifCalisma+0x5f4>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	f083 0301 	eor.w	r3, r3, #1
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d006      	beq.n	80051f8 <checkAktifCalisma+0x524>
			timer2=millis;
 80051ea:	4b38      	ldr	r3, [pc, #224]	; (80052cc <checkAktifCalisma+0x5f8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a38      	ldr	r2, [pc, #224]	; (80052d0 <checkAktifCalisma+0x5fc>)
 80051f0:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80051f2:	4b35      	ldr	r3, [pc, #212]	; (80052c8 <checkAktifCalisma+0x5f4>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80051f8:	4b34      	ldr	r3, [pc, #208]	; (80052cc <checkAktifCalisma+0x5f8>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	4b34      	ldr	r3, [pc, #208]	; (80052d0 <checkAktifCalisma+0x5fc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	4a34      	ldr	r2, [pc, #208]	; (80052d4 <checkAktifCalisma+0x600>)
 8005204:	7812      	ldrb	r2, [r2, #0]
 8005206:	4293      	cmp	r3, r2
 8005208:	d303      	bcc.n	8005212 <checkAktifCalisma+0x53e>
 800520a:	4b2f      	ldr	r3, [pc, #188]	; (80052c8 <checkAktifCalisma+0x5f4>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d114      	bne.n	800523c <checkAktifCalisma+0x568>
 8005212:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <checkAktifCalisma+0x5b4>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	f083 0301 	eor.w	r3, r3, #1
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10d      	bne.n	800523c <checkAktifCalisma+0x568>
 8005220:	4b1a      	ldr	r3, [pc, #104]	; (800528c <checkAktifCalisma+0x5b8>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	f083 0301 	eor.w	r3, r3, #1
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <checkAktifCalisma+0x568>
 800522e:	4b14      	ldr	r3, [pc, #80]	; (8005280 <checkAktifCalisma+0x5ac>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	f083 0301 	eor.w	r3, r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800523c:	2200      	movs	r2, #0
 800523e:	2102      	movs	r1, #2
 8005240:	4813      	ldr	r0, [pc, #76]	; (8005290 <checkAktifCalisma+0x5bc>)
 8005242:	f004 f808 	bl	8009256 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005246:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <checkAktifCalisma+0x5d0>)
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800524c:	4b1e      	ldr	r3, [pc, #120]	; (80052c8 <checkAktifCalisma+0x5f4>)
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005252:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <checkAktifCalisma+0x5d0>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d040      	beq.n	80052dc <checkAktifCalisma+0x608>
 800525a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800525e:	480f      	ldr	r0, [pc, #60]	; (800529c <checkAktifCalisma+0x5c8>)
 8005260:	f003 ffe2 	bl	8009228 <HAL_GPIO_ReadPin>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d138      	bne.n	80052dc <checkAktifCalisma+0x608>
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <checkAktifCalisma+0x604>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d034      	beq.n	80052dc <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005272:	2201      	movs	r2, #1
 8005274:	2101      	movs	r1, #1
 8005276:	4806      	ldr	r0, [pc, #24]	; (8005290 <checkAktifCalisma+0x5bc>)
 8005278:	f003 ffed 	bl	8009256 <HAL_GPIO_WritePin>
 800527c:	e033      	b.n	80052e6 <checkAktifCalisma+0x612>
 800527e:	bf00      	nop
 8005280:	20000257 	.word	0x20000257
 8005284:	2000021d 	.word	0x2000021d
 8005288:	20000252 	.word	0x20000252
 800528c:	20000253 	.word	0x20000253
 8005290:	40010c00 	.word	0x40010c00
 8005294:	2000023d 	.word	0x2000023d
 8005298:	20000251 	.word	0x20000251
 800529c:	40011000 	.word	0x40011000
 80052a0:	20000206 	.word	0x20000206
 80052a4:	20000238 	.word	0x20000238
 80052a8:	20000235 	.word	0x20000235
 80052ac:	20000239 	.word	0x20000239
 80052b0:	20000236 	.word	0x20000236
 80052b4:	20000237 	.word	0x20000237
 80052b8:	2000023a 	.word	0x2000023a
 80052bc:	2000023b 	.word	0x2000023b
 80052c0:	20000240 	.word	0x20000240
 80052c4:	20000261 	.word	0x20000261
 80052c8:	20000230 	.word	0x20000230
 80052cc:	200001dc 	.word	0x200001dc
 80052d0:	200001e8 	.word	0x200001e8
 80052d4:	20000215 	.word	0x20000215
 80052d8:	20000205 	.word	0x20000205
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80052dc:	2200      	movs	r2, #0
 80052de:	2101      	movs	r1, #1
 80052e0:	4836      	ldr	r0, [pc, #216]	; (80053bc <checkAktifCalisma+0x6e8>)
 80052e2:	f003 ffb8 	bl	8009256 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80052e6:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <checkAktifCalisma+0x6ec>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f040 8080 	bne.w	80053f0 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80052f0:	4b34      	ldr	r3, [pc, #208]	; (80053c4 <checkAktifCalisma+0x6f0>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d003      	beq.n	8005300 <checkAktifCalisma+0x62c>
 80052f8:	4b32      	ldr	r3, [pc, #200]	; (80053c4 <checkAktifCalisma+0x6f0>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d177      	bne.n	80053f0 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005300:	4b31      	ldr	r3, [pc, #196]	; (80053c8 <checkAktifCalisma+0x6f4>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d073      	beq.n	80053f0 <checkAktifCalisma+0x71c>
 8005308:	4b30      	ldr	r3, [pc, #192]	; (80053cc <checkAktifCalisma+0x6f8>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d06f      	beq.n	80053f0 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005310:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005314:	4829      	ldr	r0, [pc, #164]	; (80053bc <checkAktifCalisma+0x6e8>)
 8005316:	f003 ff87 	bl	8009228 <HAL_GPIO_ReadPin>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d167      	bne.n	80053f0 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005324:	482a      	ldr	r0, [pc, #168]	; (80053d0 <checkAktifCalisma+0x6fc>)
 8005326:	f003 ff7f 	bl	8009228 <HAL_GPIO_ReadPin>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <checkAktifCalisma+0x664>
 8005330:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <checkAktifCalisma+0x700>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d15b      	bne.n	80053f0 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005338:	2140      	movs	r1, #64	; 0x40
 800533a:	4825      	ldr	r0, [pc, #148]	; (80053d0 <checkAktifCalisma+0x6fc>)
 800533c:	f003 ff74 	bl	8009228 <HAL_GPIO_ReadPin>
 8005340:	4603      	mov	r3, r0
 8005342:	2b01      	cmp	r3, #1
 8005344:	d10f      	bne.n	8005366 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800534a:	481c      	ldr	r0, [pc, #112]	; (80053bc <checkAktifCalisma+0x6e8>)
 800534c:	f003 ff6c 	bl	8009228 <HAL_GPIO_ReadPin>
 8005350:	4603      	mov	r3, r0
 8005352:	2b01      	cmp	r3, #1
 8005354:	d107      	bne.n	8005366 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800535a:	4818      	ldr	r0, [pc, #96]	; (80053bc <checkAktifCalisma+0x6e8>)
 800535c:	f003 ff64 	bl	8009228 <HAL_GPIO_ReadPin>
 8005360:	4603      	mov	r3, r0
 8005362:	2b01      	cmp	r3, #1
 8005364:	d003      	beq.n	800536e <checkAktifCalisma+0x69a>
 8005366:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <checkAktifCalisma+0x704>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d040      	beq.n	80053f0 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <checkAktifCalisma+0x708>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	f083 0301 	eor.w	r3, r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d039      	beq.n	80053f0 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 800537c:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <checkAktifCalisma+0x70c>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f083 0301 	eor.w	r3, r3, #1
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d032      	beq.n	80053f0 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800538a:	4b16      	ldr	r3, [pc, #88]	; (80053e4 <checkAktifCalisma+0x710>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f083 0301 	eor.w	r3, r3, #1
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d02b      	beq.n	80053f0 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005398:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <checkAktifCalisma+0x714>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	f083 0301 	eor.w	r3, r3, #1
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d024      	beq.n	80053f0 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80053a6:	4b11      	ldr	r3, [pc, #68]	; (80053ec <checkAktifCalisma+0x718>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	f083 0301 	eor.w	r3, r3, #1
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01d      	beq.n	80053f0 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80053b4:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <checkAktifCalisma+0x704>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e01c      	b.n	80053f6 <checkAktifCalisma+0x722>
 80053bc:	40010c00 	.word	0x40010c00
 80053c0:	2000021d 	.word	0x2000021d
 80053c4:	2000020f 	.word	0x2000020f
 80053c8:	20000252 	.word	0x20000252
 80053cc:	20000253 	.word	0x20000253
 80053d0:	40011000 	.word	0x40011000
 80053d4:	20000210 	.word	0x20000210
 80053d8:	20000236 	.word	0x20000236
 80053dc:	20000235 	.word	0x20000235
 80053e0:	20000239 	.word	0x20000239
 80053e4:	20000238 	.word	0x20000238
 80053e8:	20000237 	.word	0x20000237
 80053ec:	2000023b 	.word	0x2000023b
		} else {
			devmotoryukaricalisiyor=0;
 80053f0:	4b64      	ldr	r3, [pc, #400]	; (8005584 <checkAktifCalisma+0x8b0>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80053f6:	4b63      	ldr	r3, [pc, #396]	; (8005584 <checkAktifCalisma+0x8b0>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80053fe:	2201      	movs	r2, #1
 8005400:	2120      	movs	r1, #32
 8005402:	4861      	ldr	r0, [pc, #388]	; (8005588 <checkAktifCalisma+0x8b4>)
 8005404:	f003 ff27 	bl	8009256 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005408:	4b60      	ldr	r3, [pc, #384]	; (800558c <checkAktifCalisma+0x8b8>)
 800540a:	2201      	movs	r2, #1
 800540c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800540e:	4b5f      	ldr	r3, [pc, #380]	; (800558c <checkAktifCalisma+0x8b8>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d025      	beq.n	8005462 <checkAktifCalisma+0x78e>
 8005416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800541a:	485d      	ldr	r0, [pc, #372]	; (8005590 <checkAktifCalisma+0x8bc>)
 800541c:	f003 ff04 	bl	8009228 <HAL_GPIO_ReadPin>
 8005420:	4603      	mov	r3, r0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d007      	beq.n	8005436 <checkAktifCalisma+0x762>
 8005426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800542a:	4857      	ldr	r0, [pc, #348]	; (8005588 <checkAktifCalisma+0x8b4>)
 800542c:	f003 fefc 	bl	8009228 <HAL_GPIO_ReadPin>
 8005430:	4603      	mov	r3, r0
 8005432:	2b01      	cmp	r3, #1
 8005434:	d115      	bne.n	8005462 <checkAktifCalisma+0x78e>
 8005436:	4b57      	ldr	r3, [pc, #348]	; (8005594 <checkAktifCalisma+0x8c0>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d011      	beq.n	8005462 <checkAktifCalisma+0x78e>
 800543e:	4b56      	ldr	r3, [pc, #344]	; (8005598 <checkAktifCalisma+0x8c4>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <checkAktifCalisma+0x78e>
 8005446:	4b55      	ldr	r3, [pc, #340]	; (800559c <checkAktifCalisma+0x8c8>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	f083 0301 	eor.w	r3, r3, #1
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d006      	beq.n	8005462 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005454:	4b52      	ldr	r3, [pc, #328]	; (80055a0 <checkAktifCalisma+0x8cc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a52      	ldr	r2, [pc, #328]	; (80055a4 <checkAktifCalisma+0x8d0>)
 800545a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 800545c:	4b4f      	ldr	r3, [pc, #316]	; (800559c <checkAktifCalisma+0x8c8>)
 800545e:	2201      	movs	r2, #1
 8005460:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005462:	4b4f      	ldr	r3, [pc, #316]	; (80055a0 <checkAktifCalisma+0x8cc>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b4f      	ldr	r3, [pc, #316]	; (80055a4 <checkAktifCalisma+0x8d0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	4a4e      	ldr	r2, [pc, #312]	; (80055a8 <checkAktifCalisma+0x8d4>)
 800546e:	7812      	ldrb	r2, [r2, #0]
 8005470:	4293      	cmp	r3, r2
 8005472:	d303      	bcc.n	800547c <checkAktifCalisma+0x7a8>
 8005474:	4b49      	ldr	r3, [pc, #292]	; (800559c <checkAktifCalisma+0x8c8>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10d      	bne.n	8005498 <checkAktifCalisma+0x7c4>
 800547c:	4b45      	ldr	r3, [pc, #276]	; (8005594 <checkAktifCalisma+0x8c0>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	f083 0301 	eor.w	r3, r3, #1
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <checkAktifCalisma+0x7c4>
 800548a:	4b43      	ldr	r3, [pc, #268]	; (8005598 <checkAktifCalisma+0x8c4>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f083 0301 	eor.w	r3, r3, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005498:	2200      	movs	r2, #0
 800549a:	2120      	movs	r1, #32
 800549c:	483a      	ldr	r0, [pc, #232]	; (8005588 <checkAktifCalisma+0x8b4>)
 800549e:	f003 feda 	bl	8009256 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80054a2:	4b3a      	ldr	r3, [pc, #232]	; (800558c <checkAktifCalisma+0x8b8>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80054a8:	4b3c      	ldr	r3, [pc, #240]	; (800559c <checkAktifCalisma+0x8c8>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80054ae:	4b3f      	ldr	r3, [pc, #252]	; (80055ac <checkAktifCalisma+0x8d8>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 8088 	bne.w	80055c8 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80054b8:	4b3d      	ldr	r3, [pc, #244]	; (80055b0 <checkAktifCalisma+0x8dc>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d003      	beq.n	80054c8 <checkAktifCalisma+0x7f4>
 80054c0:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <checkAktifCalisma+0x8dc>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d17f      	bne.n	80055c8 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80054c8:	4b32      	ldr	r3, [pc, #200]	; (8005594 <checkAktifCalisma+0x8c0>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d07b      	beq.n	80055c8 <checkAktifCalisma+0x8f4>
 80054d0:	4b31      	ldr	r3, [pc, #196]	; (8005598 <checkAktifCalisma+0x8c4>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d077      	beq.n	80055c8 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80054d8:	2140      	movs	r1, #64	; 0x40
 80054da:	482b      	ldr	r0, [pc, #172]	; (8005588 <checkAktifCalisma+0x8b4>)
 80054dc:	f003 fea4 	bl	8009228 <HAL_GPIO_ReadPin>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d170      	bne.n	80055c8 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80054e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054ea:	4827      	ldr	r0, [pc, #156]	; (8005588 <checkAktifCalisma+0x8b4>)
 80054ec:	f003 fe9c 	bl	8009228 <HAL_GPIO_ReadPin>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <checkAktifCalisma+0x82a>
 80054f6:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <checkAktifCalisma+0x8e0>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d164      	bne.n	80055c8 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80054fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005502:	4823      	ldr	r0, [pc, #140]	; (8005590 <checkAktifCalisma+0x8bc>)
 8005504:	f003 fe90 	bl	8009228 <HAL_GPIO_ReadPin>
 8005508:	4603      	mov	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d10f      	bne.n	800552e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800550e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005512:	481f      	ldr	r0, [pc, #124]	; (8005590 <checkAktifCalisma+0x8bc>)
 8005514:	f003 fe88 	bl	8009228 <HAL_GPIO_ReadPin>
 8005518:	4603      	mov	r3, r0
 800551a:	2b01      	cmp	r3, #1
 800551c:	d107      	bne.n	800552e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800551e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005522:	481b      	ldr	r0, [pc, #108]	; (8005590 <checkAktifCalisma+0x8bc>)
 8005524:	f003 fe80 	bl	8009228 <HAL_GPIO_ReadPin>
 8005528:	4603      	mov	r3, r0
 800552a:	2b01      	cmp	r3, #1
 800552c:	d003      	beq.n	8005536 <checkAktifCalisma+0x862>
 800552e:	4b22      	ldr	r3, [pc, #136]	; (80055b8 <checkAktifCalisma+0x8e4>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d048      	beq.n	80055c8 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8005536:	4b21      	ldr	r3, [pc, #132]	; (80055bc <checkAktifCalisma+0x8e8>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	f083 0301 	eor.w	r3, r3, #1
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d041      	beq.n	80055c8 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005544:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <checkAktifCalisma+0x8ec>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	f083 0301 	eor.w	r3, r3, #1
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d03a      	beq.n	80055c8 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005552:	4b1c      	ldr	r3, [pc, #112]	; (80055c4 <checkAktifCalisma+0x8f0>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	f083 0301 	eor.w	r3, r3, #1
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d033      	beq.n	80055c8 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <checkAktifCalisma+0x8b8>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	f083 0301 	eor.w	r3, r3, #1
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d02c      	beq.n	80055c8 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <checkAktifCalisma+0x8b0>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	f083 0301 	eor.w	r3, r3, #1
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d025      	beq.n	80055c8 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <checkAktifCalisma+0x8e4>)
 800557e:	2201      	movs	r2, #1
 8005580:	701a      	strb	r2, [r3, #0]
 8005582:	e024      	b.n	80055ce <checkAktifCalisma+0x8fa>
 8005584:	20000236 	.word	0x20000236
 8005588:	40011000 	.word	0x40011000
 800558c:	2000023a 	.word	0x2000023a
 8005590:	40010c00 	.word	0x40010c00
 8005594:	20000252 	.word	0x20000252
 8005598:	20000253 	.word	0x20000253
 800559c:	20000232 	.word	0x20000232
 80055a0:	200001dc 	.word	0x200001dc
 80055a4:	200001e8 	.word	0x200001e8
 80055a8:	20000216 	.word	0x20000216
 80055ac:	2000021d 	.word	0x2000021d
 80055b0:	2000020f 	.word	0x2000020f
 80055b4:	20000211 	.word	0x20000211
 80055b8:	20000237 	.word	0x20000237
 80055bc:	20000235 	.word	0x20000235
 80055c0:	20000239 	.word	0x20000239
 80055c4:	20000238 	.word	0x20000238
		} else {
			devmotorasagicalisiyor=0;
 80055c8:	4b96      	ldr	r3, [pc, #600]	; (8005824 <checkAktifCalisma+0xb50>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80055ce:	4b95      	ldr	r3, [pc, #596]	; (8005824 <checkAktifCalisma+0xb50>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80055d6:	2201      	movs	r2, #1
 80055d8:	2110      	movs	r1, #16
 80055da:	4893      	ldr	r0, [pc, #588]	; (8005828 <checkAktifCalisma+0xb54>)
 80055dc:	f003 fe3b 	bl	8009256 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80055e0:	4b92      	ldr	r3, [pc, #584]	; (800582c <checkAktifCalisma+0xb58>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80055e6:	4b91      	ldr	r3, [pc, #580]	; (800582c <checkAktifCalisma+0xb58>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d024      	beq.n	8005638 <checkAktifCalisma+0x964>
 80055ee:	2140      	movs	r1, #64	; 0x40
 80055f0:	488d      	ldr	r0, [pc, #564]	; (8005828 <checkAktifCalisma+0xb54>)
 80055f2:	f003 fe19 	bl	8009228 <HAL_GPIO_ReadPin>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d007      	beq.n	800560c <checkAktifCalisma+0x938>
 80055fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005600:	4889      	ldr	r0, [pc, #548]	; (8005828 <checkAktifCalisma+0xb54>)
 8005602:	f003 fe11 	bl	8009228 <HAL_GPIO_ReadPin>
 8005606:	4603      	mov	r3, r0
 8005608:	2b01      	cmp	r3, #1
 800560a:	d115      	bne.n	8005638 <checkAktifCalisma+0x964>
 800560c:	4b88      	ldr	r3, [pc, #544]	; (8005830 <checkAktifCalisma+0xb5c>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d011      	beq.n	8005638 <checkAktifCalisma+0x964>
 8005614:	4b87      	ldr	r3, [pc, #540]	; (8005834 <checkAktifCalisma+0xb60>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00d      	beq.n	8005638 <checkAktifCalisma+0x964>
 800561c:	4b86      	ldr	r3, [pc, #536]	; (8005838 <checkAktifCalisma+0xb64>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f083 0301 	eor.w	r3, r3, #1
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d006      	beq.n	8005638 <checkAktifCalisma+0x964>
			timer2=millis;
 800562a:	4b84      	ldr	r3, [pc, #528]	; (800583c <checkAktifCalisma+0xb68>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a84      	ldr	r2, [pc, #528]	; (8005840 <checkAktifCalisma+0xb6c>)
 8005630:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005632:	4b81      	ldr	r3, [pc, #516]	; (8005838 <checkAktifCalisma+0xb64>)
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005638:	4b80      	ldr	r3, [pc, #512]	; (800583c <checkAktifCalisma+0xb68>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	4b80      	ldr	r3, [pc, #512]	; (8005840 <checkAktifCalisma+0xb6c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	4a80      	ldr	r2, [pc, #512]	; (8005844 <checkAktifCalisma+0xb70>)
 8005644:	7812      	ldrb	r2, [r2, #0]
 8005646:	4293      	cmp	r3, r2
 8005648:	d303      	bcc.n	8005652 <checkAktifCalisma+0x97e>
 800564a:	4b7b      	ldr	r3, [pc, #492]	; (8005838 <checkAktifCalisma+0xb64>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10d      	bne.n	800566e <checkAktifCalisma+0x99a>
 8005652:	4b77      	ldr	r3, [pc, #476]	; (8005830 <checkAktifCalisma+0xb5c>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	f083 0301 	eor.w	r3, r3, #1
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d106      	bne.n	800566e <checkAktifCalisma+0x99a>
 8005660:	4b74      	ldr	r3, [pc, #464]	; (8005834 <checkAktifCalisma+0xb60>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f083 0301 	eor.w	r3, r3, #1
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800566e:	2200      	movs	r2, #0
 8005670:	2110      	movs	r1, #16
 8005672:	486d      	ldr	r0, [pc, #436]	; (8005828 <checkAktifCalisma+0xb54>)
 8005674:	f003 fdef 	bl	8009256 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005678:	4b6c      	ldr	r3, [pc, #432]	; (800582c <checkAktifCalisma+0xb58>)
 800567a:	2200      	movs	r2, #0
 800567c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800567e:	4b6e      	ldr	r3, [pc, #440]	; (8005838 <checkAktifCalisma+0xb64>)
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005688:	486f      	ldr	r0, [pc, #444]	; (8005848 <checkAktifCalisma+0xb74>)
 800568a:	f003 fdcd 	bl	8009228 <HAL_GPIO_ReadPin>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d120      	bne.n	80056d6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005698:	486b      	ldr	r0, [pc, #428]	; (8005848 <checkAktifCalisma+0xb74>)
 800569a:	f003 fdc5 	bl	8009228 <HAL_GPIO_ReadPin>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d118      	bne.n	80056d6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80056a4:	2104      	movs	r1, #4
 80056a6:	4868      	ldr	r0, [pc, #416]	; (8005848 <checkAktifCalisma+0xb74>)
 80056a8:	f003 fdbe 	bl	8009228 <HAL_GPIO_ReadPin>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d111      	bne.n	80056d6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80056b2:	2102      	movs	r1, #2
 80056b4:	4864      	ldr	r0, [pc, #400]	; (8005848 <checkAktifCalisma+0xb74>)
 80056b6:	f003 fdb7 	bl	8009228 <HAL_GPIO_ReadPin>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80056c0:	2101      	movs	r1, #1
 80056c2:	4861      	ldr	r0, [pc, #388]	; (8005848 <checkAktifCalisma+0xb74>)
 80056c4:	f003 fdb0 	bl	8009228 <HAL_GPIO_ReadPin>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <checkAktifCalisma+0xa02>
			makineStop=1;
 80056ce:	4b5f      	ldr	r3, [pc, #380]	; (800584c <checkAktifCalisma+0xb78>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	e002      	b.n	80056dc <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80056d6:	4b5d      	ldr	r3, [pc, #372]	; (800584c <checkAktifCalisma+0xb78>)
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80056dc:	4b5c      	ldr	r3, [pc, #368]	; (8005850 <checkAktifCalisma+0xb7c>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d144      	bne.n	800576e <checkAktifCalisma+0xa9a>
 80056e4:	4b5b      	ldr	r3, [pc, #364]	; (8005854 <checkAktifCalisma+0xb80>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d003      	beq.n	80056f4 <checkAktifCalisma+0xa20>
 80056ec:	4b59      	ldr	r3, [pc, #356]	; (8005854 <checkAktifCalisma+0xb80>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d13c      	bne.n	800576e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80056f4:	2180      	movs	r1, #128	; 0x80
 80056f6:	484c      	ldr	r0, [pc, #304]	; (8005828 <checkAktifCalisma+0xb54>)
 80056f8:	f003 fd96 	bl	8009228 <HAL_GPIO_ReadPin>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <checkAktifCalisma+0xa36>
 8005702:	4b55      	ldr	r3, [pc, #340]	; (8005858 <checkAktifCalisma+0xb84>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <checkAktifCalisma+0xa4e>
 800570a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800570e:	484e      	ldr	r0, [pc, #312]	; (8005848 <checkAktifCalisma+0xb74>)
 8005710:	f003 fd8a 	bl	8009228 <HAL_GPIO_ReadPin>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d129      	bne.n	800576e <checkAktifCalisma+0xa9a>
 800571a:	4b4f      	ldr	r3, [pc, #316]	; (8005858 <checkAktifCalisma+0xb84>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d125      	bne.n	800576e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005722:	2104      	movs	r1, #4
 8005724:	4840      	ldr	r0, [pc, #256]	; (8005828 <checkAktifCalisma+0xb54>)
 8005726:	f003 fd7f 	bl	8009228 <HAL_GPIO_ReadPin>
 800572a:	4603      	mov	r3, r0
 800572c:	2b01      	cmp	r3, #1
 800572e:	d003      	beq.n	8005738 <checkAktifCalisma+0xa64>
 8005730:	4b4a      	ldr	r3, [pc, #296]	; (800585c <checkAktifCalisma+0xb88>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11a      	bne.n	800576e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005738:	2102      	movs	r1, #2
 800573a:	483b      	ldr	r0, [pc, #236]	; (8005828 <checkAktifCalisma+0xb54>)
 800573c:	f003 fd74 	bl	8009228 <HAL_GPIO_ReadPin>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d113      	bne.n	800576e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005746:	4b46      	ldr	r3, [pc, #280]	; (8005860 <checkAktifCalisma+0xb8c>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	f083 0301 	eor.w	r3, r3, #1
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005754:	4b3d      	ldr	r3, [pc, #244]	; (800584c <checkAktifCalisma+0xb78>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 800575c:	4b41      	ldr	r3, [pc, #260]	; (8005864 <checkAktifCalisma+0xb90>)
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005762:	4b36      	ldr	r3, [pc, #216]	; (800583c <checkAktifCalisma+0xb68>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a40      	ldr	r2, [pc, #256]	; (8005868 <checkAktifCalisma+0xb94>)
 8005768:	6013      	str	r3, [r2, #0]
			bekle();
 800576a:	f7ff f935 	bl	80049d8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800576e:	4b33      	ldr	r3, [pc, #204]	; (800583c <checkAktifCalisma+0xb68>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b3d      	ldr	r3, [pc, #244]	; (8005868 <checkAktifCalisma+0xb94>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	4a3c      	ldr	r2, [pc, #240]	; (800586c <checkAktifCalisma+0xb98>)
 800577a:	7812      	ldrb	r2, [r2, #0]
 800577c:	4293      	cmp	r3, r2
 800577e:	d211      	bcs.n	80057a4 <checkAktifCalisma+0xad0>
 8005780:	2104      	movs	r1, #4
 8005782:	4829      	ldr	r0, [pc, #164]	; (8005828 <checkAktifCalisma+0xb54>)
 8005784:	f003 fd50 	bl	8009228 <HAL_GPIO_ReadPin>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <checkAktifCalisma+0xad0>
 800578e:	4b33      	ldr	r3, [pc, #204]	; (800585c <checkAktifCalisma+0xb88>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <checkAktifCalisma+0xad0>
 8005796:	4b2d      	ldr	r3, [pc, #180]	; (800584c <checkAktifCalisma+0xb78>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	f083 0301 	eor.w	r3, r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80057a4:	4b2f      	ldr	r3, [pc, #188]	; (8005864 <checkAktifCalisma+0xb90>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057aa:	4b29      	ldr	r3, [pc, #164]	; (8005850 <checkAktifCalisma+0xb7c>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d160      	bne.n	8005874 <checkAktifCalisma+0xba0>
 80057b2:	4b28      	ldr	r3, [pc, #160]	; (8005854 <checkAktifCalisma+0xb80>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d003      	beq.n	80057c2 <checkAktifCalisma+0xaee>
 80057ba:	4b26      	ldr	r3, [pc, #152]	; (8005854 <checkAktifCalisma+0xb80>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d158      	bne.n	8005874 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80057c2:	2104      	movs	r1, #4
 80057c4:	4818      	ldr	r0, [pc, #96]	; (8005828 <checkAktifCalisma+0xb54>)
 80057c6:	f003 fd2f 	bl	8009228 <HAL_GPIO_ReadPin>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d003      	beq.n	80057d8 <checkAktifCalisma+0xb04>
 80057d0:	4b22      	ldr	r3, [pc, #136]	; (800585c <checkAktifCalisma+0xb88>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d14d      	bne.n	8005874 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057d8:	2102      	movs	r1, #2
 80057da:	4813      	ldr	r0, [pc, #76]	; (8005828 <checkAktifCalisma+0xb54>)
 80057dc:	f003 fd24 	bl	8009228 <HAL_GPIO_ReadPin>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d146      	bne.n	8005874 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057e6:	2180      	movs	r1, #128	; 0x80
 80057e8:	480f      	ldr	r0, [pc, #60]	; (8005828 <checkAktifCalisma+0xb54>)
 80057ea:	f003 fd1d 	bl	8009228 <HAL_GPIO_ReadPin>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d103      	bne.n	80057fc <checkAktifCalisma+0xb28>
 80057f4:	4b18      	ldr	r3, [pc, #96]	; (8005858 <checkAktifCalisma+0xb84>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00b      	beq.n	8005814 <checkAktifCalisma+0xb40>
 80057fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005800:	4811      	ldr	r0, [pc, #68]	; (8005848 <checkAktifCalisma+0xb74>)
 8005802:	f003 fd11 	bl	8009228 <HAL_GPIO_ReadPin>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d133      	bne.n	8005874 <checkAktifCalisma+0xba0>
 800580c:	4b12      	ldr	r3, [pc, #72]	; (8005858 <checkAktifCalisma+0xb84>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d12f      	bne.n	8005874 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005814:	4b0d      	ldr	r3, [pc, #52]	; (800584c <checkAktifCalisma+0xb78>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d02b      	beq.n	8005874 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800581c:	4b14      	ldr	r3, [pc, #80]	; (8005870 <checkAktifCalisma+0xb9c>)
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e02a      	b.n	800587a <checkAktifCalisma+0xba6>
 8005824:	20000237 	.word	0x20000237
 8005828:	40011000 	.word	0x40011000
 800582c:	2000023b 	.word	0x2000023b
 8005830:	20000252 	.word	0x20000252
 8005834:	20000253 	.word	0x20000253
 8005838:	20000233 	.word	0x20000233
 800583c:	200001dc 	.word	0x200001dc
 8005840:	200001e8 	.word	0x200001e8
 8005844:	20000216 	.word	0x20000216
 8005848:	40010c00 	.word	0x40010c00
 800584c:	20000242 	.word	0x20000242
 8005850:	20000209 	.word	0x20000209
 8005854:	20000208 	.word	0x20000208
 8005858:	2000020c 	.word	0x2000020c
 800585c:	20000206 	.word	0x20000206
 8005860:	2000022f 	.word	0x2000022f
 8005864:	20000243 	.word	0x20000243
 8005868:	200001e0 	.word	0x200001e0
 800586c:	20000219 	.word	0x20000219
 8005870:	20000244 	.word	0x20000244
		} else {
			kapi1butonkontrol=0;
 8005874:	4b8b      	ldr	r3, [pc, #556]	; (8005aa4 <checkAktifCalisma+0xdd0>)
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800587a:	4b8b      	ldr	r3, [pc, #556]	; (8005aa8 <checkAktifCalisma+0xdd4>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d121      	bne.n	80058c6 <checkAktifCalisma+0xbf2>
 8005882:	4b8a      	ldr	r3, [pc, #552]	; (8005aac <checkAktifCalisma+0xdd8>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d003      	beq.n	8005892 <checkAktifCalisma+0xbbe>
 800588a:	4b88      	ldr	r3, [pc, #544]	; (8005aac <checkAktifCalisma+0xdd8>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b03      	cmp	r3, #3
 8005890:	d119      	bne.n	80058c6 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005892:	2104      	movs	r1, #4
 8005894:	4886      	ldr	r0, [pc, #536]	; (8005ab0 <checkAktifCalisma+0xddc>)
 8005896:	f003 fcc7 	bl	8009228 <HAL_GPIO_ReadPin>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d003      	beq.n	80058a8 <checkAktifCalisma+0xbd4>
 80058a0:	4b84      	ldr	r3, [pc, #528]	; (8005ab4 <checkAktifCalisma+0xde0>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10e      	bne.n	80058c6 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058a8:	2102      	movs	r1, #2
 80058aa:	4881      	ldr	r0, [pc, #516]	; (8005ab0 <checkAktifCalisma+0xddc>)
 80058ac:	f003 fcbc 	bl	8009228 <HAL_GPIO_ReadPin>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d107      	bne.n	80058c6 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80058b6:	4b80      	ldr	r3, [pc, #512]	; (8005ab8 <checkAktifCalisma+0xde4>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80058be:	4b7f      	ldr	r3, [pc, #508]	; (8005abc <checkAktifCalisma+0xde8>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	e002      	b.n	80058cc <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80058c6:	4b7d      	ldr	r3, [pc, #500]	; (8005abc <checkAktifCalisma+0xde8>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80058cc:	4b75      	ldr	r3, [pc, #468]	; (8005aa4 <checkAktifCalisma+0xdd0>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d107      	bne.n	80058e4 <checkAktifCalisma+0xc10>
 80058d4:	4b79      	ldr	r3, [pc, #484]	; (8005abc <checkAktifCalisma+0xde8>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <checkAktifCalisma+0xc10>
 80058dc:	4b78      	ldr	r3, [pc, #480]	; (8005ac0 <checkAktifCalisma+0xdec>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80058e4:	2201      	movs	r2, #1
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	4876      	ldr	r0, [pc, #472]	; (8005ac4 <checkAktifCalisma+0xdf0>)
 80058ea:	f003 fcb4 	bl	8009256 <HAL_GPIO_WritePin>
 80058ee:	e004      	b.n	80058fa <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80058f0:	2200      	movs	r2, #0
 80058f2:	2180      	movs	r1, #128	; 0x80
 80058f4:	4873      	ldr	r0, [pc, #460]	; (8005ac4 <checkAktifCalisma+0xdf0>)
 80058f6:	f003 fcae 	bl	8009256 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058fa:	4b73      	ldr	r3, [pc, #460]	; (8005ac8 <checkAktifCalisma+0xdf4>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d141      	bne.n	8005986 <checkAktifCalisma+0xcb2>
 8005902:	4b6a      	ldr	r3, [pc, #424]	; (8005aac <checkAktifCalisma+0xdd8>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d003      	beq.n	8005912 <checkAktifCalisma+0xc3e>
 800590a:	4b68      	ldr	r3, [pc, #416]	; (8005aac <checkAktifCalisma+0xdd8>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b03      	cmp	r3, #3
 8005910:	d139      	bne.n	8005986 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005916:	4866      	ldr	r0, [pc, #408]	; (8005ab0 <checkAktifCalisma+0xddc>)
 8005918:	f003 fc86 	bl	8009228 <HAL_GPIO_ReadPin>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d103      	bne.n	800592a <checkAktifCalisma+0xc56>
 8005922:	4b6a      	ldr	r3, [pc, #424]	; (8005acc <checkAktifCalisma+0xdf8>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <checkAktifCalisma+0xc6e>
 800592a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800592e:	4868      	ldr	r0, [pc, #416]	; (8005ad0 <checkAktifCalisma+0xdfc>)
 8005930:	f003 fc7a 	bl	8009228 <HAL_GPIO_ReadPin>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d125      	bne.n	8005986 <checkAktifCalisma+0xcb2>
 800593a:	4b64      	ldr	r3, [pc, #400]	; (8005acc <checkAktifCalisma+0xdf8>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d121      	bne.n	8005986 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005942:	2102      	movs	r1, #2
 8005944:	485a      	ldr	r0, [pc, #360]	; (8005ab0 <checkAktifCalisma+0xddc>)
 8005946:	f003 fc6f 	bl	8009228 <HAL_GPIO_ReadPin>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d11a      	bne.n	8005986 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005950:	2104      	movs	r1, #4
 8005952:	4857      	ldr	r0, [pc, #348]	; (8005ab0 <checkAktifCalisma+0xddc>)
 8005954:	f003 fc68 	bl	8009228 <HAL_GPIO_ReadPin>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d113      	bne.n	8005986 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800595e:	4b56      	ldr	r3, [pc, #344]	; (8005ab8 <checkAktifCalisma+0xde4>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00f      	beq.n	8005986 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005966:	4b5b      	ldr	r3, [pc, #364]	; (8005ad4 <checkAktifCalisma+0xe00>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f083 0301 	eor.w	r3, r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005974:	4b58      	ldr	r3, [pc, #352]	; (8005ad8 <checkAktifCalisma+0xe04>)
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800597a:	4b58      	ldr	r3, [pc, #352]	; (8005adc <checkAktifCalisma+0xe08>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a58      	ldr	r2, [pc, #352]	; (8005ae0 <checkAktifCalisma+0xe0c>)
 8005980:	6013      	str	r3, [r2, #0]
			bekle();
 8005982:	f7ff f829 	bl	80049d8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005986:	4b55      	ldr	r3, [pc, #340]	; (8005adc <checkAktifCalisma+0xe08>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b55      	ldr	r3, [pc, #340]	; (8005ae0 <checkAktifCalisma+0xe0c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	4a54      	ldr	r2, [pc, #336]	; (8005ae4 <checkAktifCalisma+0xe10>)
 8005992:	7812      	ldrb	r2, [r2, #0]
 8005994:	4293      	cmp	r3, r2
 8005996:	d20d      	bcs.n	80059b4 <checkAktifCalisma+0xce0>
 8005998:	2102      	movs	r1, #2
 800599a:	4845      	ldr	r0, [pc, #276]	; (8005ab0 <checkAktifCalisma+0xddc>)
 800599c:	f003 fc44 	bl	8009228 <HAL_GPIO_ReadPin>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d006      	beq.n	80059b4 <checkAktifCalisma+0xce0>
 80059a6:	4b44      	ldr	r3, [pc, #272]	; (8005ab8 <checkAktifCalisma+0xde4>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f083 0301 	eor.w	r3, r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80059b4:	4b48      	ldr	r3, [pc, #288]	; (8005ad8 <checkAktifCalisma+0xe04>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059ba:	4b43      	ldr	r3, [pc, #268]	; (8005ac8 <checkAktifCalisma+0xdf4>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d135      	bne.n	8005a2e <checkAktifCalisma+0xd5a>
 80059c2:	4b3a      	ldr	r3, [pc, #232]	; (8005aac <checkAktifCalisma+0xdd8>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d003      	beq.n	80059d2 <checkAktifCalisma+0xcfe>
 80059ca:	4b38      	ldr	r3, [pc, #224]	; (8005aac <checkAktifCalisma+0xdd8>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d12d      	bne.n	8005a2e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80059d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059d6:	4836      	ldr	r0, [pc, #216]	; (8005ab0 <checkAktifCalisma+0xddc>)
 80059d8:	f003 fc26 	bl	8009228 <HAL_GPIO_ReadPin>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <checkAktifCalisma+0xd16>
 80059e2:	4b3a      	ldr	r3, [pc, #232]	; (8005acc <checkAktifCalisma+0xdf8>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00b      	beq.n	8005a02 <checkAktifCalisma+0xd2e>
 80059ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059ee:	4838      	ldr	r0, [pc, #224]	; (8005ad0 <checkAktifCalisma+0xdfc>)
 80059f0:	f003 fc1a 	bl	8009228 <HAL_GPIO_ReadPin>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d119      	bne.n	8005a2e <checkAktifCalisma+0xd5a>
 80059fa:	4b34      	ldr	r3, [pc, #208]	; (8005acc <checkAktifCalisma+0xdf8>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d115      	bne.n	8005a2e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a02:	2102      	movs	r1, #2
 8005a04:	482a      	ldr	r0, [pc, #168]	; (8005ab0 <checkAktifCalisma+0xddc>)
 8005a06:	f003 fc0f 	bl	8009228 <HAL_GPIO_ReadPin>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d10e      	bne.n	8005a2e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a10:	2104      	movs	r1, #4
 8005a12:	4827      	ldr	r0, [pc, #156]	; (8005ab0 <checkAktifCalisma+0xddc>)
 8005a14:	f003 fc08 	bl	8009228 <HAL_GPIO_ReadPin>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d107      	bne.n	8005a2e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005a1e:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <checkAktifCalisma+0xde4>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005a26:	4b30      	ldr	r3, [pc, #192]	; (8005ae8 <checkAktifCalisma+0xe14>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	e002      	b.n	8005a34 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005a2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ae8 <checkAktifCalisma+0xe14>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a34:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <checkAktifCalisma+0xdf4>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d11d      	bne.n	8005a78 <checkAktifCalisma+0xda4>
 8005a3c:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <checkAktifCalisma+0xdd8>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d003      	beq.n	8005a4c <checkAktifCalisma+0xd78>
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <checkAktifCalisma+0xdd8>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d115      	bne.n	8005a78 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	4818      	ldr	r0, [pc, #96]	; (8005ab0 <checkAktifCalisma+0xddc>)
 8005a50:	f003 fbea 	bl	8009228 <HAL_GPIO_ReadPin>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d10e      	bne.n	8005a78 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a5a:	2104      	movs	r1, #4
 8005a5c:	4814      	ldr	r0, [pc, #80]	; (8005ab0 <checkAktifCalisma+0xddc>)
 8005a5e:	f003 fbe3 	bl	8009228 <HAL_GPIO_ReadPin>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d107      	bne.n	8005a78 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005a68:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <checkAktifCalisma+0xde4>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005a70:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <checkAktifCalisma+0xe18>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e002      	b.n	8005a7e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005a78:	4b1c      	ldr	r3, [pc, #112]	; (8005aec <checkAktifCalisma+0xe18>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005a7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <checkAktifCalisma+0xe14>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d107      	bne.n	8005a96 <checkAktifCalisma+0xdc2>
 8005a86:	4b19      	ldr	r3, [pc, #100]	; (8005aec <checkAktifCalisma+0xe18>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <checkAktifCalisma+0xdc2>
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <checkAktifCalisma+0xe04>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d02c      	beq.n	8005af0 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005a96:	2201      	movs	r2, #1
 8005a98:	2140      	movs	r1, #64	; 0x40
 8005a9a:	480a      	ldr	r0, [pc, #40]	; (8005ac4 <checkAktifCalisma+0xdf0>)
 8005a9c:	f003 fbdb 	bl	8009256 <HAL_GPIO_WritePin>
 8005aa0:	e02b      	b.n	8005afa <checkAktifCalisma+0xe26>
 8005aa2:	bf00      	nop
 8005aa4:	20000244 	.word	0x20000244
 8005aa8:	20000209 	.word	0x20000209
 8005aac:	20000208 	.word	0x20000208
 8005ab0:	40011000 	.word	0x40011000
 8005ab4:	20000206 	.word	0x20000206
 8005ab8:	20000242 	.word	0x20000242
 8005abc:	20000245 	.word	0x20000245
 8005ac0:	20000243 	.word	0x20000243
 8005ac4:	40010800 	.word	0x40010800
 8005ac8:	2000020a 	.word	0x2000020a
 8005acc:	2000020c 	.word	0x2000020c
 8005ad0:	40010c00 	.word	0x40010c00
 8005ad4:	2000022f 	.word	0x2000022f
 8005ad8:	20000246 	.word	0x20000246
 8005adc:	200001dc 	.word	0x200001dc
 8005ae0:	200001e0 	.word	0x200001e0
 8005ae4:	2000021a 	.word	0x2000021a
 8005ae8:	20000247 	.word	0x20000247
 8005aec:	20000248 	.word	0x20000248
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005af0:	2200      	movs	r2, #0
 8005af2:	2140      	movs	r1, #64	; 0x40
 8005af4:	488d      	ldr	r0, [pc, #564]	; (8005d2c <checkAktifCalisma+0x1058>)
 8005af6:	f003 fbae 	bl	8009256 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005afa:	4b8d      	ldr	r3, [pc, #564]	; (8005d30 <checkAktifCalisma+0x105c>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <checkAktifCalisma+0xe36>
 8005b02:	4b8b      	ldr	r3, [pc, #556]	; (8005d30 <checkAktifCalisma+0x105c>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d115      	bne.n	8005b36 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	4889      	ldr	r0, [pc, #548]	; (8005d34 <checkAktifCalisma+0x1060>)
 8005b0e:	f003 fb8b 	bl	8009228 <HAL_GPIO_ReadPin>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d003      	beq.n	8005b20 <checkAktifCalisma+0xe4c>
 8005b18:	4b87      	ldr	r3, [pc, #540]	; (8005d38 <checkAktifCalisma+0x1064>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005b20:	2102      	movs	r1, #2
 8005b22:	4884      	ldr	r0, [pc, #528]	; (8005d34 <checkAktifCalisma+0x1060>)
 8005b24:	f003 fb80 	bl	8009228 <HAL_GPIO_ReadPin>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d103      	bne.n	8005b36 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005b2e:	4b83      	ldr	r3, [pc, #524]	; (8005d3c <checkAktifCalisma+0x1068>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	e002      	b.n	8005b3c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005b36:	4b81      	ldr	r3, [pc, #516]	; (8005d3c <checkAktifCalisma+0x1068>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005b3c:	4b7c      	ldr	r3, [pc, #496]	; (8005d30 <checkAktifCalisma+0x105c>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d003      	beq.n	8005b4c <checkAktifCalisma+0xe78>
 8005b44:	4b7a      	ldr	r3, [pc, #488]	; (8005d30 <checkAktifCalisma+0x105c>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d111      	bne.n	8005b70 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b4c:	2102      	movs	r1, #2
 8005b4e:	4879      	ldr	r0, [pc, #484]	; (8005d34 <checkAktifCalisma+0x1060>)
 8005b50:	f003 fb6a 	bl	8009228 <HAL_GPIO_ReadPin>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d10a      	bne.n	8005b70 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005b5a:	2104      	movs	r1, #4
 8005b5c:	4875      	ldr	r0, [pc, #468]	; (8005d34 <checkAktifCalisma+0x1060>)
 8005b5e:	f003 fb63 	bl	8009228 <HAL_GPIO_ReadPin>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d103      	bne.n	8005b70 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005b68:	4b75      	ldr	r3, [pc, #468]	; (8005d40 <checkAktifCalisma+0x106c>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	e002      	b.n	8005b76 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005b70:	4b73      	ldr	r3, [pc, #460]	; (8005d40 <checkAktifCalisma+0x106c>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005b76:	4b71      	ldr	r3, [pc, #452]	; (8005d3c <checkAktifCalisma+0x1068>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00f      	beq.n	8005b9e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005b7e:	4b71      	ldr	r3, [pc, #452]	; (8005d44 <checkAktifCalisma+0x1070>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d10b      	bne.n	8005b9e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b8a:	486f      	ldr	r0, [pc, #444]	; (8005d48 <checkAktifCalisma+0x1074>)
 8005b8c:	f003 fb4c 	bl	8009228 <HAL_GPIO_ReadPin>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d103      	bne.n	8005b9e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005b96:	4b6d      	ldr	r3, [pc, #436]	; (8005d4c <checkAktifCalisma+0x1078>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e002      	b.n	8005ba4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005b9e:	4b6b      	ldr	r3, [pc, #428]	; (8005d4c <checkAktifCalisma+0x1078>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005ba4:	4b66      	ldr	r3, [pc, #408]	; (8005d40 <checkAktifCalisma+0x106c>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00f      	beq.n	8005bcc <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005bac:	4b65      	ldr	r3, [pc, #404]	; (8005d44 <checkAktifCalisma+0x1070>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d10b      	bne.n	8005bcc <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bb8:	4863      	ldr	r0, [pc, #396]	; (8005d48 <checkAktifCalisma+0x1074>)
 8005bba:	f003 fb35 	bl	8009228 <HAL_GPIO_ReadPin>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d103      	bne.n	8005bcc <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005bc4:	4b62      	ldr	r3, [pc, #392]	; (8005d50 <checkAktifCalisma+0x107c>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	e002      	b.n	8005bd2 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005bcc:	4b60      	ldr	r3, [pc, #384]	; (8005d50 <checkAktifCalisma+0x107c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005bd2:	4b60      	ldr	r3, [pc, #384]	; (8005d54 <checkAktifCalisma+0x1080>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d137      	bne.n	8005c4a <checkAktifCalisma+0xf76>
 8005bda:	4b5f      	ldr	r3, [pc, #380]	; (8005d58 <checkAktifCalisma+0x1084>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d003      	beq.n	8005bea <checkAktifCalisma+0xf16>
 8005be2:	4b5d      	ldr	r3, [pc, #372]	; (8005d58 <checkAktifCalisma+0x1084>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d12f      	bne.n	8005c4a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005bea:	4b54      	ldr	r3, [pc, #336]	; (8005d3c <checkAktifCalisma+0x1068>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <checkAktifCalisma+0xf26>
 8005bf2:	4b53      	ldr	r3, [pc, #332]	; (8005d40 <checkAktifCalisma+0x106c>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d027      	beq.n	8005c4a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bfe:	484d      	ldr	r0, [pc, #308]	; (8005d34 <checkAktifCalisma+0x1060>)
 8005c00:	f003 fb12 	bl	8009228 <HAL_GPIO_ReadPin>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <checkAktifCalisma+0xf3e>
 8005c0a:	4b4e      	ldr	r3, [pc, #312]	; (8005d44 <checkAktifCalisma+0x1070>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c12:	4b4e      	ldr	r3, [pc, #312]	; (8005d4c <checkAktifCalisma+0x1078>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <checkAktifCalisma+0xf4e>
 8005c1a:	4b4d      	ldr	r3, [pc, #308]	; (8005d50 <checkAktifCalisma+0x107c>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d013      	beq.n	8005c4a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005c22:	4b4e      	ldr	r3, [pc, #312]	; (8005d5c <checkAktifCalisma+0x1088>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00f      	beq.n	8005c4a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005c2a:	4b4d      	ldr	r3, [pc, #308]	; (8005d60 <checkAktifCalisma+0x108c>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f083 0301 	eor.w	r3, r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005c38:	4b4a      	ldr	r3, [pc, #296]	; (8005d64 <checkAktifCalisma+0x1090>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005c3e:	4b4a      	ldr	r3, [pc, #296]	; (8005d68 <checkAktifCalisma+0x1094>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a4a      	ldr	r2, [pc, #296]	; (8005d6c <checkAktifCalisma+0x1098>)
 8005c44:	6013      	str	r3, [r2, #0]
			bekle();
 8005c46:	f7fe fec7 	bl	80049d8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005c4a:	4b47      	ldr	r3, [pc, #284]	; (8005d68 <checkAktifCalisma+0x1094>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <checkAktifCalisma+0x1098>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	4a46      	ldr	r2, [pc, #280]	; (8005d70 <checkAktifCalisma+0x109c>)
 8005c56:	7812      	ldrb	r2, [r2, #0]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d214      	bcs.n	8005c86 <checkAktifCalisma+0xfb2>
 8005c5c:	4b37      	ldr	r3, [pc, #220]	; (8005d3c <checkAktifCalisma+0x1068>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f083 0301 	eor.w	r3, r3, #1
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d006      	beq.n	8005c78 <checkAktifCalisma+0xfa4>
 8005c6a:	4b35      	ldr	r3, [pc, #212]	; (8005d40 <checkAktifCalisma+0x106c>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	f083 0301 	eor.w	r3, r3, #1
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <checkAktifCalisma+0xfb2>
 8005c78:	4b38      	ldr	r3, [pc, #224]	; (8005d5c <checkAktifCalisma+0x1088>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f083 0301 	eor.w	r3, r3, #1
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005c86:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <checkAktifCalisma+0x1090>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c8c:	4b31      	ldr	r3, [pc, #196]	; (8005d54 <checkAktifCalisma+0x1080>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d12b      	bne.n	8005cec <checkAktifCalisma+0x1018>
 8005c94:	4b30      	ldr	r3, [pc, #192]	; (8005d58 <checkAktifCalisma+0x1084>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d003      	beq.n	8005ca4 <checkAktifCalisma+0xfd0>
 8005c9c:	4b2e      	ldr	r3, [pc, #184]	; (8005d58 <checkAktifCalisma+0x1084>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d123      	bne.n	8005cec <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005ca4:	4b25      	ldr	r3, [pc, #148]	; (8005d3c <checkAktifCalisma+0x1068>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d103      	bne.n	8005cb4 <checkAktifCalisma+0xfe0>
 8005cac:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <checkAktifCalisma+0x106c>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01b      	beq.n	8005cec <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cb8:	481e      	ldr	r0, [pc, #120]	; (8005d34 <checkAktifCalisma+0x1060>)
 8005cba:	f003 fab5 	bl	8009228 <HAL_GPIO_ReadPin>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <checkAktifCalisma+0xff8>
 8005cc4:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <checkAktifCalisma+0x1070>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005ccc:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <checkAktifCalisma+0x1078>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d103      	bne.n	8005cdc <checkAktifCalisma+0x1008>
 8005cd4:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <checkAktifCalisma+0x107c>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005cdc:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <checkAktifCalisma+0x1088>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005ce4:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <checkAktifCalisma+0x10a0>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e002      	b.n	8005cf2 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005cec:	4b21      	ldr	r3, [pc, #132]	; (8005d74 <checkAktifCalisma+0x10a0>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cf2:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <checkAktifCalisma+0x1080>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d140      	bne.n	8005d7c <checkAktifCalisma+0x10a8>
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <checkAktifCalisma+0x1084>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d003      	beq.n	8005d0a <checkAktifCalisma+0x1036>
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <checkAktifCalisma+0x1084>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d138      	bne.n	8005d7c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <checkAktifCalisma+0x1068>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <checkAktifCalisma+0x1046>
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <checkAktifCalisma+0x106c>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d030      	beq.n	8005d7c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <checkAktifCalisma+0x1088>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d02c      	beq.n	8005d7c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <checkAktifCalisma+0x10a4>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	e02b      	b.n	8005d82 <checkAktifCalisma+0x10ae>
 8005d2a:	bf00      	nop
 8005d2c:	40010800 	.word	0x40010800
 8005d30:	2000020d 	.word	0x2000020d
 8005d34:	40011000 	.word	0x40011000
 8005d38:	20000206 	.word	0x20000206
 8005d3c:	2000024c 	.word	0x2000024c
 8005d40:	2000024d 	.word	0x2000024d
 8005d44:	2000020c 	.word	0x2000020c
 8005d48:	40010c00 	.word	0x40010c00
 8005d4c:	2000025c 	.word	0x2000025c
 8005d50:	2000025d 	.word	0x2000025d
 8005d54:	2000020b 	.word	0x2000020b
 8005d58:	20000208 	.word	0x20000208
 8005d5c:	20000242 	.word	0x20000242
 8005d60:	2000022f 	.word	0x2000022f
 8005d64:	20000249 	.word	0x20000249
 8005d68:	200001dc 	.word	0x200001dc
 8005d6c:	200001e0 	.word	0x200001e0
 8005d70:	2000021b 	.word	0x2000021b
 8005d74:	2000024a 	.word	0x2000024a
 8005d78:	2000024b 	.word	0x2000024b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005d7c:	4b8b      	ldr	r3, [pc, #556]	; (8005fac <checkAktifCalisma+0x12d8>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005d82:	4b8b      	ldr	r3, [pc, #556]	; (8005fb0 <checkAktifCalisma+0x12dc>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d107      	bne.n	8005d9a <checkAktifCalisma+0x10c6>
 8005d8a:	4b8a      	ldr	r3, [pc, #552]	; (8005fb4 <checkAktifCalisma+0x12e0>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d103      	bne.n	8005d9a <checkAktifCalisma+0x10c6>
 8005d92:	4b86      	ldr	r3, [pc, #536]	; (8005fac <checkAktifCalisma+0x12d8>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d005      	beq.n	8005da6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	2120      	movs	r1, #32
 8005d9e:	4886      	ldr	r0, [pc, #536]	; (8005fb8 <checkAktifCalisma+0x12e4>)
 8005da0:	f003 fa59 	bl	8009256 <HAL_GPIO_WritePin>
 8005da4:	e004      	b.n	8005db0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005da6:	2200      	movs	r2, #0
 8005da8:	2120      	movs	r1, #32
 8005daa:	4883      	ldr	r0, [pc, #524]	; (8005fb8 <checkAktifCalisma+0x12e4>)
 8005dac:	f003 fa53 	bl	8009256 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005db0:	4b82      	ldr	r3, [pc, #520]	; (8005fbc <checkAktifCalisma+0x12e8>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00e      	beq.n	8005dd6 <checkAktifCalisma+0x1102>
 8005db8:	2102      	movs	r1, #2
 8005dba:	4881      	ldr	r0, [pc, #516]	; (8005fc0 <checkAktifCalisma+0x12ec>)
 8005dbc:	f003 fa34 	bl	8009228 <HAL_GPIO_ReadPin>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d107      	bne.n	8005dd6 <checkAktifCalisma+0x1102>
 8005dc6:	4b7f      	ldr	r3, [pc, #508]	; (8005fc4 <checkAktifCalisma+0x12f0>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d103      	bne.n	8005dd6 <checkAktifCalisma+0x1102>
 8005dce:	4b7e      	ldr	r3, [pc, #504]	; (8005fc8 <checkAktifCalisma+0x12f4>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d112      	bne.n	8005dfc <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005dd6:	4b7d      	ldr	r3, [pc, #500]	; (8005fcc <checkAktifCalisma+0x12f8>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d066      	beq.n	8005eac <checkAktifCalisma+0x11d8>
 8005dde:	2104      	movs	r1, #4
 8005de0:	4877      	ldr	r0, [pc, #476]	; (8005fc0 <checkAktifCalisma+0x12ec>)
 8005de2:	f003 fa21 	bl	8009228 <HAL_GPIO_ReadPin>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d15f      	bne.n	8005eac <checkAktifCalisma+0x11d8>
 8005dec:	4b75      	ldr	r3, [pc, #468]	; (8005fc4 <checkAktifCalisma+0x12f0>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d05b      	beq.n	8005eac <checkAktifCalisma+0x11d8>
 8005df4:	4b74      	ldr	r3, [pc, #464]	; (8005fc8 <checkAktifCalisma+0x12f4>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d057      	beq.n	8005eac <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005dfc:	4b74      	ldr	r3, [pc, #464]	; (8005fd0 <checkAktifCalisma+0x12fc>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	4b72      	ldr	r3, [pc, #456]	; (8005fd0 <checkAktifCalisma+0x12fc>)
 8005e06:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005e08:	4b71      	ldr	r3, [pc, #452]	; (8005fd0 <checkAktifCalisma+0x12fc>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b09      	cmp	r3, #9
 8005e0e:	d908      	bls.n	8005e22 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005e10:	4b6f      	ldr	r3, [pc, #444]	; (8005fd0 <checkAktifCalisma+0x12fc>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005e16:	4b6f      	ldr	r3, [pc, #444]	; (8005fd4 <checkAktifCalisma+0x1300>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	4b6d      	ldr	r3, [pc, #436]	; (8005fd4 <checkAktifCalisma+0x1300>)
 8005e20:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005e22:	4b6c      	ldr	r3, [pc, #432]	; (8005fd4 <checkAktifCalisma+0x1300>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b09      	cmp	r3, #9
 8005e28:	d908      	bls.n	8005e3c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005e2a:	4b6a      	ldr	r3, [pc, #424]	; (8005fd4 <checkAktifCalisma+0x1300>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005e30:	4b69      	ldr	r3, [pc, #420]	; (8005fd8 <checkAktifCalisma+0x1304>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	4b67      	ldr	r3, [pc, #412]	; (8005fd8 <checkAktifCalisma+0x1304>)
 8005e3a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005e3c:	4b66      	ldr	r3, [pc, #408]	; (8005fd8 <checkAktifCalisma+0x1304>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	d908      	bls.n	8005e56 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005e44:	4b64      	ldr	r3, [pc, #400]	; (8005fd8 <checkAktifCalisma+0x1304>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005e4a:	4b64      	ldr	r3, [pc, #400]	; (8005fdc <checkAktifCalisma+0x1308>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	4b62      	ldr	r3, [pc, #392]	; (8005fdc <checkAktifCalisma+0x1308>)
 8005e54:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005e56:	4b61      	ldr	r3, [pc, #388]	; (8005fdc <checkAktifCalisma+0x1308>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b09      	cmp	r3, #9
 8005e5c:	d908      	bls.n	8005e70 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005e5e:	4b5f      	ldr	r3, [pc, #380]	; (8005fdc <checkAktifCalisma+0x1308>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005e64:	4b5e      	ldr	r3, [pc, #376]	; (8005fe0 <checkAktifCalisma+0x130c>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	4b5c      	ldr	r3, [pc, #368]	; (8005fe0 <checkAktifCalisma+0x130c>)
 8005e6e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005e70:	4b5b      	ldr	r3, [pc, #364]	; (8005fe0 <checkAktifCalisma+0x130c>)
 8005e72:	781a      	ldrb	r2, [r3, #0]
 8005e74:	4b5b      	ldr	r3, [pc, #364]	; (8005fe4 <checkAktifCalisma+0x1310>)
 8005e76:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005e7a:	4b58      	ldr	r3, [pc, #352]	; (8005fdc <checkAktifCalisma+0x1308>)
 8005e7c:	781a      	ldrb	r2, [r3, #0]
 8005e7e:	4b59      	ldr	r3, [pc, #356]	; (8005fe4 <checkAktifCalisma+0x1310>)
 8005e80:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005e82:	4b55      	ldr	r3, [pc, #340]	; (8005fd8 <checkAktifCalisma+0x1304>)
 8005e84:	781a      	ldrb	r2, [r3, #0]
 8005e86:	4b57      	ldr	r3, [pc, #348]	; (8005fe4 <checkAktifCalisma+0x1310>)
 8005e88:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005e8a:	4b52      	ldr	r3, [pc, #328]	; (8005fd4 <checkAktifCalisma+0x1300>)
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	4b55      	ldr	r3, [pc, #340]	; (8005fe4 <checkAktifCalisma+0x1310>)
 8005e90:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005e92:	4b4f      	ldr	r3, [pc, #316]	; (8005fd0 <checkAktifCalisma+0x12fc>)
 8005e94:	781a      	ldrb	r2, [r3, #0]
 8005e96:	4b53      	ldr	r3, [pc, #332]	; (8005fe4 <checkAktifCalisma+0x1310>)
 8005e98:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005e9a:	4b53      	ldr	r3, [pc, #332]	; (8005fe8 <checkAktifCalisma+0x1314>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005ea0:	4b46      	ldr	r3, [pc, #280]	; (8005fbc <checkAktifCalisma+0x12e8>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005ea6:	4b49      	ldr	r3, [pc, #292]	; (8005fcc <checkAktifCalisma+0x12f8>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005eb0:	484e      	ldr	r0, [pc, #312]	; (8005fec <checkAktifCalisma+0x1318>)
 8005eb2:	f003 f9b9 	bl	8009228 <HAL_GPIO_ReadPin>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d016      	beq.n	8005eea <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005ebc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ec0:	484a      	ldr	r0, [pc, #296]	; (8005fec <checkAktifCalisma+0x1318>)
 8005ec2:	f003 f9b1 	bl	8009228 <HAL_GPIO_ReadPin>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00e      	beq.n	8005eea <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ed0:	4846      	ldr	r0, [pc, #280]	; (8005fec <checkAktifCalisma+0x1318>)
 8005ed2:	f003 f9a9 	bl	8009228 <HAL_GPIO_ReadPin>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d006      	beq.n	8005eea <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005edc:	2140      	movs	r1, #64	; 0x40
 8005ede:	4838      	ldr	r0, [pc, #224]	; (8005fc0 <checkAktifCalisma+0x12ec>)
 8005ee0:	f003 f9a2 	bl	8009228 <HAL_GPIO_ReadPin>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d103      	bne.n	8005ef2 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005eea:	4b41      	ldr	r3, [pc, #260]	; (8005ff0 <checkAktifCalisma+0x131c>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	e002      	b.n	8005ef8 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005ef2:	4b3f      	ldr	r3, [pc, #252]	; (8005ff0 <checkAktifCalisma+0x131c>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005ef8:	4b3d      	ldr	r3, [pc, #244]	; (8005ff0 <checkAktifCalisma+0x131c>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d016      	beq.n	8005f2e <checkAktifCalisma+0x125a>
 8005f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f04:	4839      	ldr	r0, [pc, #228]	; (8005fec <checkAktifCalisma+0x1318>)
 8005f06:	f003 f98f 	bl	8009228 <HAL_GPIO_ReadPin>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10e      	bne.n	8005f2e <checkAktifCalisma+0x125a>
			hataVar=1;
 8005f10:	4b38      	ldr	r3, [pc, #224]	; (8005ff4 <checkAktifCalisma+0x1320>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005f16:	2001      	movs	r0, #1
 8005f18:	f7fa fd7a 	bl	8000a10 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	f7fa fd1d 	bl	800095c <hata2EEPROM>
			convertAndSendData();
 8005f22:	f001 fc4d 	bl	80077c0 <convertAndSendData>
			acilstophatasi=1;
 8005f26:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <checkAktifCalisma+0x1324>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	e018      	b.n	8005f60 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005f2e:	4b32      	ldr	r3, [pc, #200]	; (8005ff8 <checkAktifCalisma+0x1324>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d014      	beq.n	8005f60 <checkAktifCalisma+0x128c>
 8005f36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f3a:	482c      	ldr	r0, [pc, #176]	; (8005fec <checkAktifCalisma+0x1318>)
 8005f3c:	f003 f974 	bl	8009228 <HAL_GPIO_ReadPin>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10c      	bne.n	8005f60 <checkAktifCalisma+0x128c>
 8005f46:	4b2a      	ldr	r3, [pc, #168]	; (8005ff0 <checkAktifCalisma+0x131c>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f083 0301 	eor.w	r3, r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005f54:	4b28      	ldr	r3, [pc, #160]	; (8005ff8 <checkAktifCalisma+0x1324>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	f7fe fce8 	bl	8004930 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005f60:	4b26      	ldr	r3, [pc, #152]	; (8005ffc <checkAktifCalisma+0x1328>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f083 0301 	eor.w	r3, r3, #1
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d04e      	beq.n	800600c <checkAktifCalisma+0x1338>
 8005f6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f72:	481e      	ldr	r0, [pc, #120]	; (8005fec <checkAktifCalisma+0x1318>)
 8005f74:	f003 f958 	bl	8009228 <HAL_GPIO_ReadPin>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <checkAktifCalisma+0x12b2>
 8005f7e:	4b20      	ldr	r3, [pc, #128]	; (8006000 <checkAktifCalisma+0x132c>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d042      	beq.n	800600c <checkAktifCalisma+0x1338>
 8005f86:	4b1f      	ldr	r3, [pc, #124]	; (8006004 <checkAktifCalisma+0x1330>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d13e      	bne.n	800600c <checkAktifCalisma+0x1338>
			hataVar=1;
 8005f8e:	4b19      	ldr	r3, [pc, #100]	; (8005ff4 <checkAktifCalisma+0x1320>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005f94:	2002      	movs	r0, #2
 8005f96:	f7fa fd3b 	bl	8000a10 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005f9a:	2002      	movs	r0, #2
 8005f9c:	f7fa fcde 	bl	800095c <hata2EEPROM>
			convertAndSendData();
 8005fa0:	f001 fc0e 	bl	80077c0 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005fa4:	4b18      	ldr	r3, [pc, #96]	; (8006008 <checkAktifCalisma+0x1334>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e047      	b.n	800603c <checkAktifCalisma+0x1368>
 8005fac:	2000024b 	.word	0x2000024b
 8005fb0:	2000024a 	.word	0x2000024a
 8005fb4:	20000249 	.word	0x20000249
 8005fb8:	40010800 	.word	0x40010800
 8005fbc:	2000023f 	.word	0x2000023f
 8005fc0:	40011000 	.word	0x40011000
 8005fc4:	20000206 	.word	0x20000206
 8005fc8:	20000242 	.word	0x20000242
 8005fcc:	20000240 	.word	0x20000240
 8005fd0:	200001fd 	.word	0x200001fd
 8005fd4:	200001fe 	.word	0x200001fe
 8005fd8:	20000000 	.word	0x20000000
 8005fdc:	20000001 	.word	0x20000001
 8005fe0:	200001ff 	.word	0x200001ff
 8005fe4:	2000012c 	.word	0x2000012c
 8005fe8:	2000022c 	.word	0x2000022c
 8005fec:	40010c00 	.word	0x40010c00
 8005ff0:	2000024e 	.word	0x2000024e
 8005ff4:	20000255 	.word	0x20000255
 8005ff8:	20000250 	.word	0x20000250
 8005ffc:	20000257 	.word	0x20000257
 8006000:	20000261 	.word	0x20000261
 8006004:	20000204 	.word	0x20000204
 8006008:	20000251 	.word	0x20000251
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800600c:	4b9b      	ldr	r3, [pc, #620]	; (800627c <checkAktifCalisma+0x15a8>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d013      	beq.n	800603c <checkAktifCalisma+0x1368>
 8006014:	4b9a      	ldr	r3, [pc, #616]	; (8006280 <checkAktifCalisma+0x15ac>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00f      	beq.n	800603c <checkAktifCalisma+0x1368>
 800601c:	4b99      	ldr	r3, [pc, #612]	; (8006284 <checkAktifCalisma+0x15b0>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f083 0301 	eor.w	r3, r3, #1
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d008      	beq.n	800603c <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800602a:	4b94      	ldr	r3, [pc, #592]	; (800627c <checkAktifCalisma+0x15a8>)
 800602c:	2200      	movs	r2, #0
 800602e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006030:	4b95      	ldr	r3, [pc, #596]	; (8006288 <checkAktifCalisma+0x15b4>)
 8006032:	2200      	movs	r2, #0
 8006034:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006036:	2002      	movs	r0, #2
 8006038:	f7fe fc7a 	bl	8004930 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 800603c:	4b93      	ldr	r3, [pc, #588]	; (800628c <checkAktifCalisma+0x15b8>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d11e      	bne.n	8006082 <checkAktifCalisma+0x13ae>
 8006044:	4b92      	ldr	r3, [pc, #584]	; (8006290 <checkAktifCalisma+0x15bc>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d11a      	bne.n	8006082 <checkAktifCalisma+0x13ae>
 800604c:	4b91      	ldr	r3, [pc, #580]	; (8006294 <checkAktifCalisma+0x15c0>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d016      	beq.n	8006082 <checkAktifCalisma+0x13ae>
 8006054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006058:	488f      	ldr	r0, [pc, #572]	; (8006298 <checkAktifCalisma+0x15c4>)
 800605a:	f003 f8e5 	bl	8009228 <HAL_GPIO_ReadPin>
 800605e:	4603      	mov	r3, r0
 8006060:	2b01      	cmp	r3, #1
 8006062:	d10e      	bne.n	8006082 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006064:	4b8d      	ldr	r3, [pc, #564]	; (800629c <checkAktifCalisma+0x15c8>)
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800606a:	2003      	movs	r0, #3
 800606c:	f7fa fcd0 	bl	8000a10 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006070:	2003      	movs	r0, #3
 8006072:	f7fa fc73 	bl	800095c <hata2EEPROM>
			convertAndSendData();
 8006076:	f001 fba3 	bl	80077c0 <convertAndSendData>
			basinchatasi=1;
 800607a:	4b89      	ldr	r3, [pc, #548]	; (80062a0 <checkAktifCalisma+0x15cc>)
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e015      	b.n	80060ae <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006082:	4b87      	ldr	r3, [pc, #540]	; (80062a0 <checkAktifCalisma+0x15cc>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d011      	beq.n	80060ae <checkAktifCalisma+0x13da>
 800608a:	4b80      	ldr	r3, [pc, #512]	; (800628c <checkAktifCalisma+0x15b8>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d10d      	bne.n	80060ae <checkAktifCalisma+0x13da>
 8006092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006096:	4883      	ldr	r0, [pc, #524]	; (80062a4 <checkAktifCalisma+0x15d0>)
 8006098:	f003 f8c6 	bl	8009228 <HAL_GPIO_ReadPin>
 800609c:	4603      	mov	r3, r0
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d105      	bne.n	80060ae <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80060a2:	4b7f      	ldr	r3, [pc, #508]	; (80062a0 <checkAktifCalisma+0x15cc>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80060a8:	2003      	movs	r0, #3
 80060aa:	f7fe fc41 	bl	8004930 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80060ae:	4b7e      	ldr	r3, [pc, #504]	; (80062a8 <checkAktifCalisma+0x15d4>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d103      	bne.n	80060be <checkAktifCalisma+0x13ea>
 80060b6:	4b7d      	ldr	r3, [pc, #500]	; (80062ac <checkAktifCalisma+0x15d8>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01e      	beq.n	80060fc <checkAktifCalisma+0x1428>
 80060be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060c2:	487b      	ldr	r0, [pc, #492]	; (80062b0 <checkAktifCalisma+0x15dc>)
 80060c4:	f003 f8b0 	bl	8009228 <HAL_GPIO_ReadPin>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d116      	bne.n	80060fc <checkAktifCalisma+0x1428>
 80060ce:	4b79      	ldr	r3, [pc, #484]	; (80062b4 <checkAktifCalisma+0x15e0>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d003      	beq.n	80060de <checkAktifCalisma+0x140a>
 80060d6:	4b77      	ldr	r3, [pc, #476]	; (80062b4 <checkAktifCalisma+0x15e0>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d10e      	bne.n	80060fc <checkAktifCalisma+0x1428>
			hataVar=1;
 80060de:	4b6f      	ldr	r3, [pc, #444]	; (800629c <checkAktifCalisma+0x15c8>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80060e4:	2004      	movs	r0, #4
 80060e6:	f7fa fc93 	bl	8000a10 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80060ea:	2004      	movs	r0, #4
 80060ec:	f7fa fc36 	bl	800095c <hata2EEPROM>
			convertAndSendData();
 80060f0:	f001 fb66 	bl	80077c0 <convertAndSendData>
			katkapisivicihatasi=1;
 80060f4:	4b70      	ldr	r3, [pc, #448]	; (80062b8 <checkAktifCalisma+0x15e4>)
 80060f6:	2201      	movs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	e01f      	b.n	800613c <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80060fc:	4b6e      	ldr	r3, [pc, #440]	; (80062b8 <checkAktifCalisma+0x15e4>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01b      	beq.n	800613c <checkAktifCalisma+0x1468>
 8006104:	4b6d      	ldr	r3, [pc, #436]	; (80062bc <checkAktifCalisma+0x15e8>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d017      	beq.n	800613c <checkAktifCalisma+0x1468>
 800610c:	4b66      	ldr	r3, [pc, #408]	; (80062a8 <checkAktifCalisma+0x15d4>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f083 0301 	eor.w	r3, r3, #1
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d010      	beq.n	800613c <checkAktifCalisma+0x1468>
 800611a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800611e:	4864      	ldr	r0, [pc, #400]	; (80062b0 <checkAktifCalisma+0x15dc>)
 8006120:	f003 f882 	bl	8009228 <HAL_GPIO_ReadPin>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d108      	bne.n	800613c <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800612a:	4b63      	ldr	r3, [pc, #396]	; (80062b8 <checkAktifCalisma+0x15e4>)
 800612c:	2200      	movs	r2, #0
 800612e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006130:	4b5e      	ldr	r3, [pc, #376]	; (80062ac <checkAktifCalisma+0x15d8>)
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006136:	2004      	movs	r0, #4
 8006138:	f7fe fbfa 	bl	8004930 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800613c:	4b5a      	ldr	r3, [pc, #360]	; (80062a8 <checkAktifCalisma+0x15d4>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d103      	bne.n	800614c <checkAktifCalisma+0x1478>
 8006144:	4b5e      	ldr	r3, [pc, #376]	; (80062c0 <checkAktifCalisma+0x15ec>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01e      	beq.n	800618a <checkAktifCalisma+0x14b6>
 800614c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006150:	4857      	ldr	r0, [pc, #348]	; (80062b0 <checkAktifCalisma+0x15dc>)
 8006152:	f003 f869 	bl	8009228 <HAL_GPIO_ReadPin>
 8006156:	4603      	mov	r3, r0
 8006158:	2b01      	cmp	r3, #1
 800615a:	d116      	bne.n	800618a <checkAktifCalisma+0x14b6>
 800615c:	4b55      	ldr	r3, [pc, #340]	; (80062b4 <checkAktifCalisma+0x15e0>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d003      	beq.n	800616c <checkAktifCalisma+0x1498>
 8006164:	4b53      	ldr	r3, [pc, #332]	; (80062b4 <checkAktifCalisma+0x15e0>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b03      	cmp	r3, #3
 800616a:	d10e      	bne.n	800618a <checkAktifCalisma+0x14b6>
			hataVar=1;
 800616c:	4b4b      	ldr	r3, [pc, #300]	; (800629c <checkAktifCalisma+0x15c8>)
 800616e:	2201      	movs	r2, #1
 8006170:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006172:	2005      	movs	r0, #5
 8006174:	f7fa fc4c 	bl	8000a10 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006178:	2005      	movs	r0, #5
 800617a:	f7fa fbef 	bl	800095c <hata2EEPROM>
			convertAndSendData();
 800617e:	f001 fb1f 	bl	80077c0 <convertAndSendData>
			tablakapisivicihatasi=1;
 8006182:	4b50      	ldr	r3, [pc, #320]	; (80062c4 <checkAktifCalisma+0x15f0>)
 8006184:	2201      	movs	r2, #1
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	e023      	b.n	80061d2 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800618a:	4b4e      	ldr	r3, [pc, #312]	; (80062c4 <checkAktifCalisma+0x15f0>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d01f      	beq.n	80061d2 <checkAktifCalisma+0x14fe>
 8006192:	4b4a      	ldr	r3, [pc, #296]	; (80062bc <checkAktifCalisma+0x15e8>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01b      	beq.n	80061d2 <checkAktifCalisma+0x14fe>
 800619a:	4b43      	ldr	r3, [pc, #268]	; (80062a8 <checkAktifCalisma+0x15d4>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	f083 0301 	eor.w	r3, r3, #1
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d014      	beq.n	80061d2 <checkAktifCalisma+0x14fe>
 80061a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061ac:	4840      	ldr	r0, [pc, #256]	; (80062b0 <checkAktifCalisma+0x15dc>)
 80061ae:	f003 f83b 	bl	8009228 <HAL_GPIO_ReadPin>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10c      	bne.n	80061d2 <checkAktifCalisma+0x14fe>
 80061b8:	4b40      	ldr	r3, [pc, #256]	; (80062bc <checkAktifCalisma+0x15e8>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80061c0:	4b40      	ldr	r3, [pc, #256]	; (80062c4 <checkAktifCalisma+0x15f0>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80061c6:	4b3e      	ldr	r3, [pc, #248]	; (80062c0 <checkAktifCalisma+0x15ec>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80061cc:	2005      	movs	r0, #5
 80061ce:	f7fe fbaf 	bl	8004930 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80061d2:	4b30      	ldr	r3, [pc, #192]	; (8006294 <checkAktifCalisma+0x15c0>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d107      	bne.n	80061ea <checkAktifCalisma+0x1516>
 80061da:	4b2a      	ldr	r3, [pc, #168]	; (8006284 <checkAktifCalisma+0x15b0>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <checkAktifCalisma+0x1516>
 80061e2:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <checkAktifCalisma+0x15f4>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80061ea:	4b38      	ldr	r3, [pc, #224]	; (80062cc <checkAktifCalisma+0x15f8>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b38      	ldr	r3, [pc, #224]	; (80062d0 <checkAktifCalisma+0x15fc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	4a37      	ldr	r2, [pc, #220]	; (80062d4 <checkAktifCalisma+0x1600>)
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d30d      	bcc.n	8006218 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80061fc:	4b27      	ldr	r3, [pc, #156]	; (800629c <checkAktifCalisma+0x15c8>)
 80061fe:	2201      	movs	r2, #1
 8006200:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006202:	2006      	movs	r0, #6
 8006204:	f7fa fc04 	bl	8000a10 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006208:	2006      	movs	r0, #6
 800620a:	f7fa fba7 	bl	800095c <hata2EEPROM>
			  	convertAndSendData();
 800620e:	f001 fad7 	bl	80077c0 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006212:	4b31      	ldr	r3, [pc, #196]	; (80062d8 <checkAktifCalisma+0x1604>)
 8006214:	2201      	movs	r2, #1
 8006216:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006218:	4b2f      	ldr	r3, [pc, #188]	; (80062d8 <checkAktifCalisma+0x1604>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d013      	beq.n	8006248 <checkAktifCalisma+0x1574>
 8006220:	2108      	movs	r1, #8
 8006222:	4823      	ldr	r0, [pc, #140]	; (80062b0 <checkAktifCalisma+0x15dc>)
 8006224:	f003 f800 	bl	8009228 <HAL_GPIO_ReadPin>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <checkAktifCalisma+0x1574>
 800622e:	4b1e      	ldr	r3, [pc, #120]	; (80062a8 <checkAktifCalisma+0x15d4>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f083 0301 	eor.w	r3, r3, #1
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 800623c:	4b26      	ldr	r3, [pc, #152]	; (80062d8 <checkAktifCalisma+0x1604>)
 800623e:	2200      	movs	r2, #0
 8006240:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006242:	2006      	movs	r0, #6
 8006244:	f7fe fb74 	bl	8004930 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006248:	4b24      	ldr	r3, [pc, #144]	; (80062dc <checkAktifCalisma+0x1608>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <checkAktifCalisma+0x1594>
 8006250:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <checkAktifCalisma+0x15b0>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d107      	bne.n	8006268 <checkAktifCalisma+0x1594>
 8006258:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <checkAktifCalisma+0x160c>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <checkAktifCalisma+0x1594>
 8006260:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <checkAktifCalisma+0x15f4>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d03f      	beq.n	80062e8 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006268:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <checkAktifCalisma+0x1610>)
 800626a:	2200      	movs	r2, #0
 800626c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800626e:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <checkAktifCalisma+0x15d8>)
 8006270:	2201      	movs	r2, #1
 8006272:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006274:	4b12      	ldr	r3, [pc, #72]	; (80062c0 <checkAktifCalisma+0x15ec>)
 8006276:	2201      	movs	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e03c      	b.n	80062f6 <checkAktifCalisma+0x1622>
 800627c:	20000251 	.word	0x20000251
 8006280:	20000257 	.word	0x20000257
 8006284:	20000238 	.word	0x20000238
 8006288:	20000261 	.word	0x20000261
 800628c:	20000203 	.word	0x20000203
 8006290:	20000207 	.word	0x20000207
 8006294:	20000254 	.word	0x20000254
 8006298:	40011000 	.word	0x40011000
 800629c:	20000255 	.word	0x20000255
 80062a0:	2000025e 	.word	0x2000025e
 80062a4:	40010c00 	.word	0x40010c00
 80062a8:	2000024e 	.word	0x2000024e
 80062ac:	20000262 	.word	0x20000262
 80062b0:	40010800 	.word	0x40010800
 80062b4:	20000208 	.word	0x20000208
 80062b8:	2000025f 	.word	0x2000025f
 80062bc:	20000242 	.word	0x20000242
 80062c0:	20000263 	.word	0x20000263
 80062c4:	20000260 	.word	0x20000260
 80062c8:	20000237 	.word	0x20000237
 80062cc:	200001dc 	.word	0x200001dc
 80062d0:	200001f0 	.word	0x200001f0
 80062d4:	20000218 	.word	0x20000218
 80062d8:	2000024f 	.word	0x2000024f
 80062dc:	20000235 	.word	0x20000235
 80062e0:	20000236 	.word	0x20000236
 80062e4:	20000256 	.word	0x20000256
		} else {
			makineCalisiyor=1;
 80062e8:	4b1e      	ldr	r3, [pc, #120]	; (8006364 <checkAktifCalisma+0x1690>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80062ee:	4b1e      	ldr	r3, [pc, #120]	; (8006368 <checkAktifCalisma+0x1694>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1e      	ldr	r2, [pc, #120]	; (800636c <checkAktifCalisma+0x1698>)
 80062f4:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80062f6:	4b1e      	ldr	r3, [pc, #120]	; (8006370 <checkAktifCalisma+0x169c>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d02f      	beq.n	800635e <checkAktifCalisma+0x168a>
 80062fe:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <checkAktifCalisma+0x16a0>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f083 0301 	eor.w	r3, r3, #1
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d028      	beq.n	800635e <checkAktifCalisma+0x168a>
 800630c:	4b1a      	ldr	r3, [pc, #104]	; (8006378 <checkAktifCalisma+0x16a4>)
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	f083 0301 	eor.w	r3, r3, #1
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d021      	beq.n	800635e <checkAktifCalisma+0x168a>
 800631a:	4b18      	ldr	r3, [pc, #96]	; (800637c <checkAktifCalisma+0x16a8>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	f083 0301 	eor.w	r3, r3, #1
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01a      	beq.n	800635e <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006328:	4b15      	ldr	r3, [pc, #84]	; (8006380 <checkAktifCalisma+0x16ac>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f083 0301 	eor.w	r3, r3, #1
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d013      	beq.n	800635e <checkAktifCalisma+0x168a>
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <checkAktifCalisma+0x16b0>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f083 0301 	eor.w	r3, r3, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00c      	beq.n	800635e <checkAktifCalisma+0x168a>
 8006344:	4b10      	ldr	r3, [pc, #64]	; (8006388 <checkAktifCalisma+0x16b4>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f083 0301 	eor.w	r3, r3, #1
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d005      	beq.n	800635e <checkAktifCalisma+0x168a>
			hataVar=0;
 8006352:	4b07      	ldr	r3, [pc, #28]	; (8006370 <checkAktifCalisma+0x169c>)
 8006354:	2200      	movs	r2, #0
 8006356:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006358:	2007      	movs	r0, #7
 800635a:	f7fe fae9 	bl	8004930 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800635e:	bf00      	nop
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000256 	.word	0x20000256
 8006368:	200001dc 	.word	0x200001dc
 800636c:	200001f0 	.word	0x200001f0
 8006370:	20000255 	.word	0x20000255
 8006374:	20000250 	.word	0x20000250
 8006378:	20000251 	.word	0x20000251
 800637c:	2000025e 	.word	0x2000025e
 8006380:	2000025f 	.word	0x2000025f
 8006384:	20000260 	.word	0x20000260
 8006388:	2000024f 	.word	0x2000024f

0800638c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006390:	4b8b      	ldr	r3, [pc, #556]	; (80065c0 <checkDemoModCalisma+0x234>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b01      	cmp	r3, #1
 8006396:	f040 8229 	bne.w	80067ec <checkDemoModCalisma+0x460>
 800639a:	4b8a      	ldr	r3, [pc, #552]	; (80065c4 <checkDemoModCalisma+0x238>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 8224 	beq.w	80067ec <checkDemoModCalisma+0x460>
 80063a4:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <checkDemoModCalisma+0x23c>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f040 821f 	bne.w	80067ec <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80063ae:	2102      	movs	r1, #2
 80063b0:	4886      	ldr	r0, [pc, #536]	; (80065cc <checkDemoModCalisma+0x240>)
 80063b2:	f002 ff39 	bl	8009228 <HAL_GPIO_ReadPin>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d11d      	bne.n	80063f8 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80063bc:	4b84      	ldr	r3, [pc, #528]	; (80065d0 <checkDemoModCalisma+0x244>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f083 0301 	eor.w	r3, r3, #1
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80063ca:	4b82      	ldr	r3, [pc, #520]	; (80065d4 <checkDemoModCalisma+0x248>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f083 0301 	eor.w	r3, r3, #1
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00f      	beq.n	80063f8 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80063d8:	4b7f      	ldr	r3, [pc, #508]	; (80065d8 <checkDemoModCalisma+0x24c>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	f083 0301 	eor.w	r3, r3, #1
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80063e6:	2201      	movs	r2, #1
 80063e8:	2104      	movs	r1, #4
 80063ea:	487c      	ldr	r0, [pc, #496]	; (80065dc <checkDemoModCalisma+0x250>)
 80063ec:	f002 ff33 	bl	8009256 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80063f0:	4b7b      	ldr	r3, [pc, #492]	; (80065e0 <checkDemoModCalisma+0x254>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e00e      	b.n	8006416 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80063f8:	2102      	movs	r1, #2
 80063fa:	4874      	ldr	r0, [pc, #464]	; (80065cc <checkDemoModCalisma+0x240>)
 80063fc:	f002 ff14 	bl	8009228 <HAL_GPIO_ReadPin>
 8006400:	4603      	mov	r3, r0
 8006402:	2b01      	cmp	r3, #1
 8006404:	d107      	bne.n	8006416 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006406:	2200      	movs	r2, #0
 8006408:	2104      	movs	r1, #4
 800640a:	4874      	ldr	r0, [pc, #464]	; (80065dc <checkDemoModCalisma+0x250>)
 800640c:	f002 ff23 	bl	8009256 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006410:	4b73      	ldr	r3, [pc, #460]	; (80065e0 <checkDemoModCalisma+0x254>)
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006416:	4b72      	ldr	r3, [pc, #456]	; (80065e0 <checkDemoModCalisma+0x254>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <checkDemoModCalisma+0xaa>
 800641e:	4b6d      	ldr	r3, [pc, #436]	; (80065d4 <checkDemoModCalisma+0x248>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <checkDemoModCalisma+0xaa>
 8006426:	4b6c      	ldr	r3, [pc, #432]	; (80065d8 <checkDemoModCalisma+0x24c>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d103      	bne.n	8006436 <checkDemoModCalisma+0xaa>
 800642e:	4b68      	ldr	r3, [pc, #416]	; (80065d0 <checkDemoModCalisma+0x244>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00c      	beq.n	8006450 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006436:	2201      	movs	r2, #1
 8006438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800643c:	4867      	ldr	r0, [pc, #412]	; (80065dc <checkDemoModCalisma+0x250>)
 800643e:	f002 ff0a 	bl	8009256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006442:	2201      	movs	r2, #1
 8006444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006448:	4864      	ldr	r0, [pc, #400]	; (80065dc <checkDemoModCalisma+0x250>)
 800644a:	f002 ff04 	bl	8009256 <HAL_GPIO_WritePin>
 800644e:	e00b      	b.n	8006468 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006450:	2200      	movs	r2, #0
 8006452:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006456:	4861      	ldr	r0, [pc, #388]	; (80065dc <checkDemoModCalisma+0x250>)
 8006458:	f002 fefd 	bl	8009256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800645c:	2200      	movs	r2, #0
 800645e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006462:	485e      	ldr	r0, [pc, #376]	; (80065dc <checkDemoModCalisma+0x250>)
 8006464:	f002 fef7 	bl	8009256 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006468:	2102      	movs	r1, #2
 800646a:	4858      	ldr	r0, [pc, #352]	; (80065cc <checkDemoModCalisma+0x240>)
 800646c:	f002 fedc 	bl	8009228 <HAL_GPIO_ReadPin>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10d      	bne.n	8006492 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800647a:	4854      	ldr	r0, [pc, #336]	; (80065cc <checkDemoModCalisma+0x240>)
 800647c:	f002 fed4 	bl	8009228 <HAL_GPIO_ReadPin>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d105      	bne.n	8006492 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006486:	4b56      	ldr	r3, [pc, #344]	; (80065e0 <checkDemoModCalisma+0x254>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	f083 0301 	eor.w	r3, r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006492:	2102      	movs	r1, #2
 8006494:	484d      	ldr	r0, [pc, #308]	; (80065cc <checkDemoModCalisma+0x240>)
 8006496:	f002 fec7 	bl	8009228 <HAL_GPIO_ReadPin>
 800649a:	4603      	mov	r3, r0
 800649c:	2b01      	cmp	r3, #1
 800649e:	d125      	bne.n	80064ec <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80064a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064a4:	4849      	ldr	r0, [pc, #292]	; (80065cc <checkDemoModCalisma+0x240>)
 80064a6:	f002 febf 	bl	8009228 <HAL_GPIO_ReadPin>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d11d      	bne.n	80064ec <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80064b0:	4b4b      	ldr	r3, [pc, #300]	; (80065e0 <checkDemoModCalisma+0x254>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	f083 0301 	eor.w	r3, r3, #1
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d016      	beq.n	80064ec <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80064be:	4b44      	ldr	r3, [pc, #272]	; (80065d0 <checkDemoModCalisma+0x244>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f083 0301 	eor.w	r3, r3, #1
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00f      	beq.n	80064ec <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80064cc:	4b42      	ldr	r3, [pc, #264]	; (80065d8 <checkDemoModCalisma+0x24c>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	f083 0301 	eor.w	r3, r3, #1
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80064da:	2201      	movs	r2, #1
 80064dc:	2120      	movs	r1, #32
 80064de:	483b      	ldr	r0, [pc, #236]	; (80065cc <checkDemoModCalisma+0x240>)
 80064e0:	f002 feb9 	bl	8009256 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80064e4:	4b3b      	ldr	r3, [pc, #236]	; (80065d4 <checkDemoModCalisma+0x248>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	e007      	b.n	80064fc <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80064ec:	2200      	movs	r2, #0
 80064ee:	2120      	movs	r1, #32
 80064f0:	4836      	ldr	r0, [pc, #216]	; (80065cc <checkDemoModCalisma+0x240>)
 80064f2:	f002 feb0 	bl	8009256 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80064f6:	4b37      	ldr	r3, [pc, #220]	; (80065d4 <checkDemoModCalisma+0x248>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064fc:	2102      	movs	r1, #2
 80064fe:	4833      	ldr	r0, [pc, #204]	; (80065cc <checkDemoModCalisma+0x240>)
 8006500:	f002 fe92 	bl	8009228 <HAL_GPIO_ReadPin>
 8006504:	4603      	mov	r3, r0
 8006506:	2b01      	cmp	r3, #1
 8006508:	d125      	bne.n	8006556 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800650a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800650e:	482f      	ldr	r0, [pc, #188]	; (80065cc <checkDemoModCalisma+0x240>)
 8006510:	f002 fe8a 	bl	8009228 <HAL_GPIO_ReadPin>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d11d      	bne.n	8006556 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <checkDemoModCalisma+0x254>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	f083 0301 	eor.w	r3, r3, #1
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d016      	beq.n	8006556 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006528:	4b2a      	ldr	r3, [pc, #168]	; (80065d4 <checkDemoModCalisma+0x248>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f083 0301 	eor.w	r3, r3, #1
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00f      	beq.n	8006556 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8006536:	4b26      	ldr	r3, [pc, #152]	; (80065d0 <checkDemoModCalisma+0x244>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f083 0301 	eor.w	r3, r3, #1
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006544:	2201      	movs	r2, #1
 8006546:	2110      	movs	r1, #16
 8006548:	4820      	ldr	r0, [pc, #128]	; (80065cc <checkDemoModCalisma+0x240>)
 800654a:	f002 fe84 	bl	8009256 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800654e:	4b22      	ldr	r3, [pc, #136]	; (80065d8 <checkDemoModCalisma+0x24c>)
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e007      	b.n	8006566 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006556:	2200      	movs	r2, #0
 8006558:	2110      	movs	r1, #16
 800655a:	481c      	ldr	r0, [pc, #112]	; (80065cc <checkDemoModCalisma+0x240>)
 800655c:	f002 fe7b 	bl	8009256 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006560:	4b1d      	ldr	r3, [pc, #116]	; (80065d8 <checkDemoModCalisma+0x24c>)
 8006562:	2200      	movs	r2, #0
 8006564:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006566:	2104      	movs	r1, #4
 8006568:	4818      	ldr	r0, [pc, #96]	; (80065cc <checkDemoModCalisma+0x240>)
 800656a:	f002 fe5d 	bl	8009228 <HAL_GPIO_ReadPin>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d139      	bne.n	80065e8 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006574:	4b1a      	ldr	r3, [pc, #104]	; (80065e0 <checkDemoModCalisma+0x254>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	f083 0301 	eor.w	r3, r3, #1
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d032      	beq.n	80065e8 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <checkDemoModCalisma+0x24c>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	f083 0301 	eor.w	r3, r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d02b      	beq.n	80065e8 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006590:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <checkDemoModCalisma+0x248>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f083 0301 	eor.w	r3, r3, #1
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d024      	beq.n	80065e8 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800659e:	2201      	movs	r2, #1
 80065a0:	2102      	movs	r1, #2
 80065a2:	480e      	ldr	r0, [pc, #56]	; (80065dc <checkDemoModCalisma+0x250>)
 80065a4:	f002 fe57 	bl	8009256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80065a8:	2201      	movs	r2, #1
 80065aa:	2101      	movs	r1, #1
 80065ac:	480b      	ldr	r0, [pc, #44]	; (80065dc <checkDemoModCalisma+0x250>)
 80065ae:	f002 fe52 	bl	8009256 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80065b2:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <checkDemoModCalisma+0x244>)
 80065b4:	2201      	movs	r2, #1
 80065b6:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <checkDemoModCalisma+0x258>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e027      	b.n	8006610 <checkDemoModCalisma+0x284>
 80065c0:	2000021e 	.word	0x2000021e
 80065c4:	20000252 	.word	0x20000252
 80065c8:	2000021d 	.word	0x2000021d
 80065cc:	40011000 	.word	0x40011000
 80065d0:	20000259 	.word	0x20000259
 80065d4:	2000025a 	.word	0x2000025a
 80065d8:	2000025b 	.word	0x2000025b
 80065dc:	40010c00 	.word	0x40010c00
 80065e0:	20000258 	.word	0x20000258
 80065e4:	2000023e 	.word	0x2000023e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80065e8:	2104      	movs	r1, #4
 80065ea:	48a0      	ldr	r0, [pc, #640]	; (800686c <checkDemoModCalisma+0x4e0>)
 80065ec:	f002 fe1c 	bl	8009228 <HAL_GPIO_ReadPin>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d10c      	bne.n	8006610 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80065f6:	2200      	movs	r2, #0
 80065f8:	2102      	movs	r1, #2
 80065fa:	489d      	ldr	r0, [pc, #628]	; (8006870 <checkDemoModCalisma+0x4e4>)
 80065fc:	f002 fe2b 	bl	8009256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006600:	2200      	movs	r2, #0
 8006602:	2101      	movs	r1, #1
 8006604:	489a      	ldr	r0, [pc, #616]	; (8006870 <checkDemoModCalisma+0x4e4>)
 8006606:	f002 fe26 	bl	8009256 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800660a:	4b9a      	ldr	r3, [pc, #616]	; (8006874 <checkDemoModCalisma+0x4e8>)
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006610:	2104      	movs	r1, #4
 8006612:	4896      	ldr	r0, [pc, #600]	; (800686c <checkDemoModCalisma+0x4e0>)
 8006614:	f002 fe08 	bl	8009228 <HAL_GPIO_ReadPin>
 8006618:	4603      	mov	r3, r0
 800661a:	2b01      	cmp	r3, #1
 800661c:	d10d      	bne.n	800663a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800661e:	2201      	movs	r2, #1
 8006620:	2180      	movs	r1, #128	; 0x80
 8006622:	4895      	ldr	r0, [pc, #596]	; (8006878 <checkDemoModCalisma+0x4ec>)
 8006624:	f002 fe17 	bl	8009256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006628:	2201      	movs	r2, #1
 800662a:	2120      	movs	r1, #32
 800662c:	4892      	ldr	r0, [pc, #584]	; (8006878 <checkDemoModCalisma+0x4ec>)
 800662e:	f002 fe12 	bl	8009256 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006632:	4b92      	ldr	r3, [pc, #584]	; (800687c <checkDemoModCalisma+0x4f0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a92      	ldr	r2, [pc, #584]	; (8006880 <checkDemoModCalisma+0x4f4>)
 8006638:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800663a:	4b90      	ldr	r3, [pc, #576]	; (800687c <checkDemoModCalisma+0x4f0>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4b90      	ldr	r3, [pc, #576]	; (8006880 <checkDemoModCalisma+0x4f4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b04      	cmp	r3, #4
 8006646:	d909      	bls.n	800665c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006648:	2200      	movs	r2, #0
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	488a      	ldr	r0, [pc, #552]	; (8006878 <checkDemoModCalisma+0x4ec>)
 800664e:	f002 fe02 	bl	8009256 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006652:	2200      	movs	r2, #0
 8006654:	2120      	movs	r1, #32
 8006656:	4888      	ldr	r0, [pc, #544]	; (8006878 <checkDemoModCalisma+0x4ec>)
 8006658:	f002 fdfd 	bl	8009256 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800665c:	2102      	movs	r1, #2
 800665e:	4883      	ldr	r0, [pc, #524]	; (800686c <checkDemoModCalisma+0x4e0>)
 8006660:	f002 fde2 	bl	8009228 <HAL_GPIO_ReadPin>
 8006664:	4603      	mov	r3, r0
 8006666:	2b01      	cmp	r3, #1
 8006668:	d108      	bne.n	800667c <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800666a:	2201      	movs	r2, #1
 800666c:	2140      	movs	r1, #64	; 0x40
 800666e:	4882      	ldr	r0, [pc, #520]	; (8006878 <checkDemoModCalisma+0x4ec>)
 8006670:	f002 fdf1 	bl	8009256 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006674:	4b81      	ldr	r3, [pc, #516]	; (800687c <checkDemoModCalisma+0x4f0>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a81      	ldr	r2, [pc, #516]	; (8006880 <checkDemoModCalisma+0x4f4>)
 800667a:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800667c:	4b7f      	ldr	r3, [pc, #508]	; (800687c <checkDemoModCalisma+0x4f0>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	4b7f      	ldr	r3, [pc, #508]	; (8006880 <checkDemoModCalisma+0x4f4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b04      	cmp	r3, #4
 8006688:	d904      	bls.n	8006694 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800668a:	2200      	movs	r2, #0
 800668c:	2140      	movs	r1, #64	; 0x40
 800668e:	487a      	ldr	r0, [pc, #488]	; (8006878 <checkDemoModCalisma+0x4ec>)
 8006690:	f002 fde1 	bl	8009256 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006694:	4b7b      	ldr	r3, [pc, #492]	; (8006884 <checkDemoModCalisma+0x4f8>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d058      	beq.n	800674e <checkDemoModCalisma+0x3c2>
 800669c:	4b7a      	ldr	r3, [pc, #488]	; (8006888 <checkDemoModCalisma+0x4fc>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d054      	beq.n	800674e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80066a4:	4b79      	ldr	r3, [pc, #484]	; (800688c <checkDemoModCalisma+0x500>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	4b77      	ldr	r3, [pc, #476]	; (800688c <checkDemoModCalisma+0x500>)
 80066ae:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80066b0:	4b76      	ldr	r3, [pc, #472]	; (800688c <checkDemoModCalisma+0x500>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b09      	cmp	r3, #9
 80066b6:	d908      	bls.n	80066ca <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80066b8:	4b74      	ldr	r3, [pc, #464]	; (800688c <checkDemoModCalisma+0x500>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80066be:	4b74      	ldr	r3, [pc, #464]	; (8006890 <checkDemoModCalisma+0x504>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	3301      	adds	r3, #1
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	4b72      	ldr	r3, [pc, #456]	; (8006890 <checkDemoModCalisma+0x504>)
 80066c8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80066ca:	4b71      	ldr	r3, [pc, #452]	; (8006890 <checkDemoModCalisma+0x504>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b09      	cmp	r3, #9
 80066d0:	d908      	bls.n	80066e4 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80066d2:	4b6f      	ldr	r3, [pc, #444]	; (8006890 <checkDemoModCalisma+0x504>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80066d8:	4b6e      	ldr	r3, [pc, #440]	; (8006894 <checkDemoModCalisma+0x508>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	3301      	adds	r3, #1
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	4b6c      	ldr	r3, [pc, #432]	; (8006894 <checkDemoModCalisma+0x508>)
 80066e2:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80066e4:	4b6b      	ldr	r3, [pc, #428]	; (8006894 <checkDemoModCalisma+0x508>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b09      	cmp	r3, #9
 80066ea:	d908      	bls.n	80066fe <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80066ec:	4b69      	ldr	r3, [pc, #420]	; (8006894 <checkDemoModCalisma+0x508>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80066f2:	4b69      	ldr	r3, [pc, #420]	; (8006898 <checkDemoModCalisma+0x50c>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	3301      	adds	r3, #1
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	4b67      	ldr	r3, [pc, #412]	; (8006898 <checkDemoModCalisma+0x50c>)
 80066fc:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80066fe:	4b66      	ldr	r3, [pc, #408]	; (8006898 <checkDemoModCalisma+0x50c>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b09      	cmp	r3, #9
 8006704:	d908      	bls.n	8006718 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8006706:	4b64      	ldr	r3, [pc, #400]	; (8006898 <checkDemoModCalisma+0x50c>)
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 800670c:	4b63      	ldr	r3, [pc, #396]	; (800689c <checkDemoModCalisma+0x510>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	b2da      	uxtb	r2, r3
 8006714:	4b61      	ldr	r3, [pc, #388]	; (800689c <checkDemoModCalisma+0x510>)
 8006716:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006718:	4b60      	ldr	r3, [pc, #384]	; (800689c <checkDemoModCalisma+0x510>)
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	4b60      	ldr	r3, [pc, #384]	; (80068a0 <checkDemoModCalisma+0x514>)
 800671e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006722:	4b5d      	ldr	r3, [pc, #372]	; (8006898 <checkDemoModCalisma+0x50c>)
 8006724:	781a      	ldrb	r2, [r3, #0]
 8006726:	4b5e      	ldr	r3, [pc, #376]	; (80068a0 <checkDemoModCalisma+0x514>)
 8006728:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800672a:	4b5a      	ldr	r3, [pc, #360]	; (8006894 <checkDemoModCalisma+0x508>)
 800672c:	781a      	ldrb	r2, [r3, #0]
 800672e:	4b5c      	ldr	r3, [pc, #368]	; (80068a0 <checkDemoModCalisma+0x514>)
 8006730:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006732:	4b57      	ldr	r3, [pc, #348]	; (8006890 <checkDemoModCalisma+0x504>)
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	4b5a      	ldr	r3, [pc, #360]	; (80068a0 <checkDemoModCalisma+0x514>)
 8006738:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800673a:	4b54      	ldr	r3, [pc, #336]	; (800688c <checkDemoModCalisma+0x500>)
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	4b58      	ldr	r3, [pc, #352]	; (80068a0 <checkDemoModCalisma+0x514>)
 8006740:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006742:	4b58      	ldr	r3, [pc, #352]	; (80068a4 <checkDemoModCalisma+0x518>)
 8006744:	2201      	movs	r2, #1
 8006746:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006748:	4b4f      	ldr	r3, [pc, #316]	; (8006888 <checkDemoModCalisma+0x4fc>)
 800674a:	2200      	movs	r2, #0
 800674c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800674e:	4b56      	ldr	r3, [pc, #344]	; (80068a8 <checkDemoModCalisma+0x51c>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 8087 	bne.w	8006866 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006758:	4a54      	ldr	r2, [pc, #336]	; (80068ac <checkDemoModCalisma+0x520>)
 800675a:	2101      	movs	r1, #1
 800675c:	2002      	movs	r0, #2
 800675e:	f001 fa3d 	bl	8007bdc <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006762:	4a53      	ldr	r2, [pc, #332]	; (80068b0 <checkDemoModCalisma+0x524>)
 8006764:	2101      	movs	r1, #1
 8006766:	2001      	movs	r0, #1
 8006768:	f001 fa38 	bl	8007bdc <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 800676c:	4b4b      	ldr	r3, [pc, #300]	; (800689c <checkDemoModCalisma+0x510>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	220a      	movs	r2, #10
 8006772:	4950      	ldr	r1, [pc, #320]	; (80068b4 <checkDemoModCalisma+0x528>)
 8006774:	4618      	mov	r0, r3
 8006776:	f005 fd83 	bl	800c280 <itoa>
			lcd_print(2,12,snum);
 800677a:	4a4e      	ldr	r2, [pc, #312]	; (80068b4 <checkDemoModCalisma+0x528>)
 800677c:	210c      	movs	r1, #12
 800677e:	2002      	movs	r0, #2
 8006780:	f001 fa2c 	bl	8007bdc <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006784:	4b44      	ldr	r3, [pc, #272]	; (8006898 <checkDemoModCalisma+0x50c>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	220a      	movs	r2, #10
 800678a:	494a      	ldr	r1, [pc, #296]	; (80068b4 <checkDemoModCalisma+0x528>)
 800678c:	4618      	mov	r0, r3
 800678e:	f005 fd77 	bl	800c280 <itoa>
			lcd_print(2,13,snum);
 8006792:	4a48      	ldr	r2, [pc, #288]	; (80068b4 <checkDemoModCalisma+0x528>)
 8006794:	210d      	movs	r1, #13
 8006796:	2002      	movs	r0, #2
 8006798:	f001 fa20 	bl	8007bdc <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 800679c:	4b3d      	ldr	r3, [pc, #244]	; (8006894 <checkDemoModCalisma+0x508>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	220a      	movs	r2, #10
 80067a2:	4944      	ldr	r1, [pc, #272]	; (80068b4 <checkDemoModCalisma+0x528>)
 80067a4:	4618      	mov	r0, r3
 80067a6:	f005 fd6b 	bl	800c280 <itoa>
			lcd_print(2,14,snum);
 80067aa:	4a42      	ldr	r2, [pc, #264]	; (80068b4 <checkDemoModCalisma+0x528>)
 80067ac:	210e      	movs	r1, #14
 80067ae:	2002      	movs	r0, #2
 80067b0:	f001 fa14 	bl	8007bdc <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80067b4:	4b36      	ldr	r3, [pc, #216]	; (8006890 <checkDemoModCalisma+0x504>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	220a      	movs	r2, #10
 80067ba:	493e      	ldr	r1, [pc, #248]	; (80068b4 <checkDemoModCalisma+0x528>)
 80067bc:	4618      	mov	r0, r3
 80067be:	f005 fd5f 	bl	800c280 <itoa>
			lcd_print(2,15,snum);
 80067c2:	4a3c      	ldr	r2, [pc, #240]	; (80068b4 <checkDemoModCalisma+0x528>)
 80067c4:	210f      	movs	r1, #15
 80067c6:	2002      	movs	r0, #2
 80067c8:	f001 fa08 	bl	8007bdc <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80067cc:	4b2f      	ldr	r3, [pc, #188]	; (800688c <checkDemoModCalisma+0x500>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	220a      	movs	r2, #10
 80067d2:	4938      	ldr	r1, [pc, #224]	; (80068b4 <checkDemoModCalisma+0x528>)
 80067d4:	4618      	mov	r0, r3
 80067d6:	f005 fd53 	bl	800c280 <itoa>
			lcd_print(2,16,snum);
 80067da:	4a36      	ldr	r2, [pc, #216]	; (80068b4 <checkDemoModCalisma+0x528>)
 80067dc:	2110      	movs	r1, #16
 80067de:	2002      	movs	r0, #2
 80067e0:	f001 f9fc 	bl	8007bdc <lcd_print>
			mesajYazildi=1;
 80067e4:	4b34      	ldr	r3, [pc, #208]	; (80068b8 <checkDemoModCalisma+0x52c>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80067ea:	e03c      	b.n	8006866 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80067ec:	4b33      	ldr	r3, [pc, #204]	; (80068bc <checkDemoModCalisma+0x530>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d003      	beq.n	80067fc <checkDemoModCalisma+0x470>
 80067f4:	4b2c      	ldr	r3, [pc, #176]	; (80068a8 <checkDemoModCalisma+0x51c>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d134      	bne.n	8006866 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80067fc:	2200      	movs	r2, #0
 80067fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006802:	481b      	ldr	r0, [pc, #108]	; (8006870 <checkDemoModCalisma+0x4e4>)
 8006804:	f002 fd27 	bl	8009256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006808:	2200      	movs	r2, #0
 800680a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800680e:	4818      	ldr	r0, [pc, #96]	; (8006870 <checkDemoModCalisma+0x4e4>)
 8006810:	f002 fd21 	bl	8009256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006814:	2200      	movs	r2, #0
 8006816:	2104      	movs	r1, #4
 8006818:	4815      	ldr	r0, [pc, #84]	; (8006870 <checkDemoModCalisma+0x4e4>)
 800681a:	f002 fd1c 	bl	8009256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800681e:	2200      	movs	r2, #0
 8006820:	2102      	movs	r1, #2
 8006822:	4813      	ldr	r0, [pc, #76]	; (8006870 <checkDemoModCalisma+0x4e4>)
 8006824:	f002 fd17 	bl	8009256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006828:	2200      	movs	r2, #0
 800682a:	2101      	movs	r1, #1
 800682c:	4810      	ldr	r0, [pc, #64]	; (8006870 <checkDemoModCalisma+0x4e4>)
 800682e:	f002 fd12 	bl	8009256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006832:	2200      	movs	r2, #0
 8006834:	2120      	movs	r1, #32
 8006836:	480d      	ldr	r0, [pc, #52]	; (800686c <checkDemoModCalisma+0x4e0>)
 8006838:	f002 fd0d 	bl	8009256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800683c:	2200      	movs	r2, #0
 800683e:	2110      	movs	r1, #16
 8006840:	480a      	ldr	r0, [pc, #40]	; (800686c <checkDemoModCalisma+0x4e0>)
 8006842:	f002 fd08 	bl	8009256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006846:	2200      	movs	r2, #0
 8006848:	2180      	movs	r1, #128	; 0x80
 800684a:	480b      	ldr	r0, [pc, #44]	; (8006878 <checkDemoModCalisma+0x4ec>)
 800684c:	f002 fd03 	bl	8009256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006850:	2200      	movs	r2, #0
 8006852:	2140      	movs	r1, #64	; 0x40
 8006854:	4808      	ldr	r0, [pc, #32]	; (8006878 <checkDemoModCalisma+0x4ec>)
 8006856:	f002 fcfe 	bl	8009256 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800685a:	2200      	movs	r2, #0
 800685c:	2120      	movs	r1, #32
 800685e:	4806      	ldr	r0, [pc, #24]	; (8006878 <checkDemoModCalisma+0x4ec>)
 8006860:	f002 fcf9 	bl	8009256 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006864:	e7ff      	b.n	8006866 <checkDemoModCalisma+0x4da>
 8006866:	bf00      	nop
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40011000 	.word	0x40011000
 8006870:	40010c00 	.word	0x40010c00
 8006874:	20000259 	.word	0x20000259
 8006878:	40010800 	.word	0x40010800
 800687c:	200001dc 	.word	0x200001dc
 8006880:	200001ec 	.word	0x200001ec
 8006884:	20000258 	.word	0x20000258
 8006888:	2000023e 	.word	0x2000023e
 800688c:	200001fd 	.word	0x200001fd
 8006890:	200001fe 	.word	0x200001fe
 8006894:	20000000 	.word	0x20000000
 8006898:	20000001 	.word	0x20000001
 800689c:	200001ff 	.word	0x200001ff
 80068a0:	2000012c 	.word	0x2000012c
 80068a4:	2000022c 	.word	0x2000022c
 80068a8:	2000021d 	.word	0x2000021d
 80068ac:	0800daa8 	.word	0x0800daa8
 80068b0:	0800dab4 	.word	0x0800dab4
 80068b4:	2000019c 	.word	0x2000019c
 80068b8:	20000234 	.word	0x20000234
 80068bc:	2000021e 	.word	0x2000021e

080068c0 <mainLoop>:

void mainLoop() {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80068c6:	f7fe f923 	bl	8004b10 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80068ca:	2101      	movs	r1, #1
 80068cc:	48ac      	ldr	r0, [pc, #688]	; (8006b80 <mainLoop+0x2c0>)
 80068ce:	f002 fcab 	bl	8009228 <HAL_GPIO_ReadPin>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d136      	bne.n	8006946 <mainLoop+0x86>
 80068d8:	2108      	movs	r1, #8
 80068da:	48aa      	ldr	r0, [pc, #680]	; (8006b84 <mainLoop+0x2c4>)
 80068dc:	f002 fca4 	bl	8009228 <HAL_GPIO_ReadPin>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d12f      	bne.n	8006946 <mainLoop+0x86>
 80068e6:	2102      	movs	r1, #2
 80068e8:	48a5      	ldr	r0, [pc, #660]	; (8006b80 <mainLoop+0x2c0>)
 80068ea:	f002 fc9d 	bl	8009228 <HAL_GPIO_ReadPin>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d128      	bne.n	8006946 <mainLoop+0x86>
 80068f4:	2104      	movs	r1, #4
 80068f6:	48a2      	ldr	r0, [pc, #648]	; (8006b80 <mainLoop+0x2c0>)
 80068f8:	f002 fc96 	bl	8009228 <HAL_GPIO_ReadPin>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d121      	bne.n	8006946 <mainLoop+0x86>
 8006902:	2108      	movs	r1, #8
 8006904:	489e      	ldr	r0, [pc, #632]	; (8006b80 <mainLoop+0x2c0>)
 8006906:	f002 fc8f 	bl	8009228 <HAL_GPIO_ReadPin>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d11a      	bne.n	8006946 <mainLoop+0x86>
 8006910:	2180      	movs	r1, #128	; 0x80
 8006912:	489c      	ldr	r0, [pc, #624]	; (8006b84 <mainLoop+0x2c4>)
 8006914:	f002 fc88 	bl	8009228 <HAL_GPIO_ReadPin>
 8006918:	4603      	mov	r3, r0
 800691a:	2b01      	cmp	r3, #1
 800691c:	d113      	bne.n	8006946 <mainLoop+0x86>
 800691e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006922:	4898      	ldr	r0, [pc, #608]	; (8006b84 <mainLoop+0x2c4>)
 8006924:	f002 fc80 	bl	8009228 <HAL_GPIO_ReadPin>
 8006928:	4603      	mov	r3, r0
 800692a:	2b01      	cmp	r3, #1
 800692c:	d10b      	bne.n	8006946 <mainLoop+0x86>
 800692e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006932:	4894      	ldr	r0, [pc, #592]	; (8006b84 <mainLoop+0x2c4>)
 8006934:	f002 fc78 	bl	8009228 <HAL_GPIO_ReadPin>
 8006938:	4603      	mov	r3, r0
 800693a:	2b01      	cmp	r3, #1
 800693c:	d103      	bne.n	8006946 <mainLoop+0x86>
			butonKontrol=0;
 800693e:	4b92      	ldr	r3, [pc, #584]	; (8006b88 <mainLoop+0x2c8>)
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	e003      	b.n	800694e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006946:	4b91      	ldr	r3, [pc, #580]	; (8006b8c <mainLoop+0x2cc>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a91      	ldr	r2, [pc, #580]	; (8006b90 <mainLoop+0x2d0>)
 800694c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800694e:	4b91      	ldr	r3, [pc, #580]	; (8006b94 <mainLoop+0x2d4>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d03a      	beq.n	80069cc <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006956:	bf00      	nop
 8006958:	488f      	ldr	r0, [pc, #572]	; (8006b98 <mainLoop+0x2d8>)
 800695a:	f003 fa8e 	bl	8009e7a <HAL_I2C_GetError>
 800695e:	4603      	mov	r3, r0
 8006960:	2b04      	cmp	r3, #4
 8006962:	d0f9      	beq.n	8006958 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006964:	bf00      	nop
 8006966:	488c      	ldr	r0, [pc, #560]	; (8006b98 <mainLoop+0x2d8>)
 8006968:	f003 fa7a 	bl	8009e60 <HAL_I2C_GetState>
 800696c:	4603      	mov	r3, r0
 800696e:	2b20      	cmp	r3, #32
 8006970:	d1f9      	bne.n	8006966 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006972:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006976:	9302      	str	r3, [sp, #8]
 8006978:	236e      	movs	r3, #110	; 0x6e
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	4b87      	ldr	r3, [pc, #540]	; (8006b9c <mainLoop+0x2dc>)
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	236e      	movs	r3, #110	; 0x6e
 8006982:	2200      	movs	r2, #0
 8006984:	21a0      	movs	r1, #160	; 0xa0
 8006986:	4884      	ldr	r0, [pc, #528]	; (8006b98 <mainLoop+0x2d8>)
 8006988:	f002 ff08 	bl	800979c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 800698c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006990:	f001 fe7a 	bl	8008688 <HAL_Delay>

		  hafizaYaz=0;
 8006994:	4b7f      	ldr	r3, [pc, #508]	; (8006b94 <mainLoop+0x2d4>)
 8006996:	2200      	movs	r2, #0
 8006998:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 800699a:	4b81      	ldr	r3, [pc, #516]	; (8006ba0 <mainLoop+0x2e0>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d105      	bne.n	80069ae <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80069a2:	4a80      	ldr	r2, [pc, #512]	; (8006ba4 <mainLoop+0x2e4>)
 80069a4:	2101      	movs	r1, #1
 80069a6:	2002      	movs	r0, #2
 80069a8:	f001 f918 	bl	8007bdc <lcd_print>
 80069ac:	e008      	b.n	80069c0 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80069ae:	4b7c      	ldr	r3, [pc, #496]	; (8006ba0 <mainLoop+0x2e0>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d104      	bne.n	80069c0 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80069b6:	4a7c      	ldr	r2, [pc, #496]	; (8006ba8 <mainLoop+0x2e8>)
 80069b8:	2101      	movs	r1, #1
 80069ba:	2002      	movs	r0, #2
 80069bc:	f001 f90e 	bl	8007bdc <lcd_print>
		  }

		  HAL_Delay(1000);
 80069c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069c4:	f001 fe60 	bl	8008688 <HAL_Delay>
		  lcd_clear();
 80069c8:	f001 f934 	bl	8007c34 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80069cc:	4b77      	ldr	r3, [pc, #476]	; (8006bac <mainLoop+0x2ec>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	f083 0301 	eor.w	r3, r3, #1
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d06d      	beq.n	8006ab6 <mainLoop+0x1f6>
 80069da:	486f      	ldr	r0, [pc, #444]	; (8006b98 <mainLoop+0x2d8>)
 80069dc:	f003 fa40 	bl	8009e60 <HAL_I2C_GetState>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d167      	bne.n	8006ab6 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 80069e6:	4b72      	ldr	r3, [pc, #456]	; (8006bb0 <mainLoop+0x2f0>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f083 0301 	eor.w	r3, r3, #1
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d044      	beq.n	8006a7e <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 80069f4:	4a6f      	ldr	r2, [pc, #444]	; (8006bb4 <mainLoop+0x2f4>)
 80069f6:	2101      	movs	r1, #1
 80069f8:	2001      	movs	r0, #1
 80069fa:	f001 f8ef 	bl	8007bdc <lcd_print>
			  if(dilSecim==0) {
 80069fe:	4b68      	ldr	r3, [pc, #416]	; (8006ba0 <mainLoop+0x2e0>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d105      	bne.n	8006a12 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006a06:	4a6c      	ldr	r2, [pc, #432]	; (8006bb8 <mainLoop+0x2f8>)
 8006a08:	2101      	movs	r1, #1
 8006a0a:	2002      	movs	r0, #2
 8006a0c:	f001 f8e6 	bl	8007bdc <lcd_print>
 8006a10:	e008      	b.n	8006a24 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006a12:	4b63      	ldr	r3, [pc, #396]	; (8006ba0 <mainLoop+0x2e0>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d104      	bne.n	8006a24 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006a1a:	4a68      	ldr	r2, [pc, #416]	; (8006bbc <mainLoop+0x2fc>)
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	2002      	movs	r0, #2
 8006a20:	f001 f8dc 	bl	8007bdc <lcd_print>
			  }
			  HAL_Delay(1000);
 8006a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a28:	f001 fe2e 	bl	8008688 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a2c:	bf00      	nop
 8006a2e:	485a      	ldr	r0, [pc, #360]	; (8006b98 <mainLoop+0x2d8>)
 8006a30:	f003 fa23 	bl	8009e7a <HAL_I2C_GetError>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d0f9      	beq.n	8006a2e <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a3a:	e003      	b.n	8006a44 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a40:	f001 fe22 	bl	8008688 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a44:	4854      	ldr	r0, [pc, #336]	; (8006b98 <mainLoop+0x2d8>)
 8006a46:	f003 fa0b 	bl	8009e60 <HAL_I2C_GetState>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d1f5      	bne.n	8006a3c <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006a50:	4b53      	ldr	r3, [pc, #332]	; (8006ba0 <mainLoop+0x2e0>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006a58:	4a59      	ldr	r2, [pc, #356]	; (8006bc0 <mainLoop+0x300>)
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	2002      	movs	r0, #2
 8006a5e:	f001 f8bd 	bl	8007bdc <lcd_print>
 8006a62:	e008      	b.n	8006a76 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006a64:	4b4e      	ldr	r3, [pc, #312]	; (8006ba0 <mainLoop+0x2e0>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d104      	bne.n	8006a76 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006a6c:	4a55      	ldr	r2, [pc, #340]	; (8006bc4 <mainLoop+0x304>)
 8006a6e:	2101      	movs	r1, #1
 8006a70:	2002      	movs	r0, #2
 8006a72:	f001 f8b3 	bl	8007bdc <lcd_print>
			  }

			  ilkOkuma=1;
 8006a76:	4b4e      	ldr	r3, [pc, #312]	; (8006bb0 <mainLoop+0x2f0>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	e014      	b.n	8006aa8 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006a7e:	4b48      	ldr	r3, [pc, #288]	; (8006ba0 <mainLoop+0x2e0>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d105      	bne.n	8006a92 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006a86:	4a50      	ldr	r2, [pc, #320]	; (8006bc8 <mainLoop+0x308>)
 8006a88:	2101      	movs	r1, #1
 8006a8a:	2002      	movs	r0, #2
 8006a8c:	f001 f8a6 	bl	8007bdc <lcd_print>
 8006a90:	e008      	b.n	8006aa4 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006a92:	4b43      	ldr	r3, [pc, #268]	; (8006ba0 <mainLoop+0x2e0>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d104      	bne.n	8006aa4 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006a9a:	4a4c      	ldr	r2, [pc, #304]	; (8006bcc <mainLoop+0x30c>)
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	2002      	movs	r0, #2
 8006aa0:	f001 f89c 	bl	8007bdc <lcd_print>
			  }
			  lcd_clear();
 8006aa4:	f001 f8c6 	bl	8007c34 <lcd_clear>
		  }

		  lcd_clear();
 8006aa8:	f001 f8c4 	bl	8007c34 <lcd_clear>

		  eepromKontrol();
 8006aac:	f7f9 fbc2 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006ab0:	4b3e      	ldr	r3, [pc, #248]	; (8006bac <mainLoop+0x2ec>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006ab6:	4b46      	ldr	r3, [pc, #280]	; (8006bd0 <mainLoop+0x310>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d11c      	bne.n	8006af8 <mainLoop+0x238>
 8006abe:	4b45      	ldr	r3, [pc, #276]	; (8006bd4 <mainLoop+0x314>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	f083 0301 	eor.w	r3, r3, #1
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d015      	beq.n	8006af8 <mainLoop+0x238>
 8006acc:	4b42      	ldr	r3, [pc, #264]	; (8006bd8 <mainLoop+0x318>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d111      	bne.n	8006af8 <mainLoop+0x238>
			lcd_clear();
 8006ad4:	f001 f8ae 	bl	8007c34 <lcd_clear>
			HAL_Delay(10);
 8006ad8:	200a      	movs	r0, #10
 8006ada:	f001 fdd5 	bl	8008688 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006ade:	4a3f      	ldr	r2, [pc, #252]	; (8006bdc <mainLoop+0x31c>)
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	f001 f87a 	bl	8007bdc <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006ae8:	4a3d      	ldr	r2, [pc, #244]	; (8006be0 <mainLoop+0x320>)
 8006aea:	2101      	movs	r1, #1
 8006aec:	2002      	movs	r0, #2
 8006aee:	f001 f875 	bl	8007bdc <lcd_print>
			mesajYazildi=1;
 8006af2:	4b38      	ldr	r3, [pc, #224]	; (8006bd4 <mainLoop+0x314>)
 8006af4:	2201      	movs	r2, #1
 8006af6:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006af8:	4b35      	ldr	r3, [pc, #212]	; (8006bd0 <mainLoop+0x310>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d112      	bne.n	8006b26 <mainLoop+0x266>
 8006b00:	2102      	movs	r1, #2
 8006b02:	481f      	ldr	r0, [pc, #124]	; (8006b80 <mainLoop+0x2c0>)
 8006b04:	f002 fb90 	bl	8009228 <HAL_GPIO_ReadPin>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d10b      	bne.n	8006b26 <mainLoop+0x266>
 8006b0e:	2104      	movs	r1, #4
 8006b10:	481b      	ldr	r0, [pc, #108]	; (8006b80 <mainLoop+0x2c0>)
 8006b12:	f002 fb89 	bl	8009228 <HAL_GPIO_ReadPin>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d104      	bne.n	8006b26 <mainLoop+0x266>
			menuGiris=1;
 8006b1c:	4b2c      	ldr	r3, [pc, #176]	; (8006bd0 <mainLoop+0x310>)
 8006b1e:	2201      	movs	r2, #1
 8006b20:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006b22:	f001 f887 	bl	8007c34 <lcd_clear>
		}

		if(menuGiris==1) {
 8006b26:	4b2a      	ldr	r3, [pc, #168]	; (8006bd0 <mainLoop+0x310>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <mainLoop+0x272>
			menu();
 8006b2e:	f7fa fb87 	bl	8001240 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b36:	4813      	ldr	r0, [pc, #76]	; (8006b84 <mainLoop+0x2c4>)
 8006b38:	f002 fba5 	bl	8009286 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b40:	4828      	ldr	r0, [pc, #160]	; (8006be4 <mainLoop+0x324>)
 8006b42:	f002 fb71 	bl	8009228 <HAL_GPIO_ReadPin>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <mainLoop+0x2a2>
 8006b4c:	4b26      	ldr	r3, [pc, #152]	; (8006be8 <mainLoop+0x328>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f083 0301 	eor.w	r3, r3, #1
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <mainLoop+0x2a2>
			stopVar=1;
 8006b5a:	4b24      	ldr	r3, [pc, #144]	; (8006bec <mainLoop+0x32c>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	e002      	b.n	8006b68 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006b62:	4b22      	ldr	r3, [pc, #136]	; (8006bec <mainLoop+0x32c>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006b68:	f7fd ffe8 	bl	8004b3c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006b6c:	f7fe f81a 	bl	8004ba4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006b70:	f7fe f85e 	bl	8004c30 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006b74:	f7fe f8ae 	bl	8004cd4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006b78:	f7ff fc08 	bl	800638c <checkDemoModCalisma>
		checkLCDBacklight();
 8006b7c:	e6a3      	b.n	80068c6 <mainLoop+0x6>
 8006b7e:	bf00      	nop
 8006b80:	40010800 	.word	0x40010800
 8006b84:	40011000 	.word	0x40011000
 8006b88:	2000022f 	.word	0x2000022f
 8006b8c:	200001dc 	.word	0x200001dc
 8006b90:	200001f8 	.word	0x200001f8
 8006b94:	2000022c 	.word	0x2000022c
 8006b98:	20000290 	.word	0x20000290
 8006b9c:	2000012c 	.word	0x2000012c
 8006ba0:	20000221 	.word	0x20000221
 8006ba4:	0800dac8 	.word	0x0800dac8
 8006ba8:	0800dadc 	.word	0x0800dadc
 8006bac:	2000022d 	.word	0x2000022d
 8006bb0:	2000022e 	.word	0x2000022e
 8006bb4:	0800daf0 	.word	0x0800daf0
 8006bb8:	0800db04 	.word	0x0800db04
 8006bbc:	0800db18 	.word	0x0800db18
 8006bc0:	0800db2c 	.word	0x0800db2c
 8006bc4:	0800db40 	.word	0x0800db40
 8006bc8:	0800db54 	.word	0x0800db54
 8006bcc:	0800db68 	.word	0x0800db68
 8006bd0:	2000021d 	.word	0x2000021d
 8006bd4:	20000234 	.word	0x20000234
 8006bd8:	2000021e 	.word	0x2000021e
 8006bdc:	0800db7c 	.word	0x0800db7c
 8006be0:	0800db90 	.word	0x0800db90
 8006be4:	40010c00 	.word	0x40010c00
 8006be8:	20000255 	.word	0x20000255
 8006bec:	20000252 	.word	0x20000252

08006bf0 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	f001 f84e 	bl	8007c98 <lcd_cursor>

    int cursorPosition = 3;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006c04:	2305      	movs	r3, #5
 8006c06:	607b      	str	r3, [r7, #4]

    memset(machineID, 0, sizeof(machineID));
 8006c08:	220c      	movs	r2, #12
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	48a1      	ldr	r0, [pc, #644]	; (8006e94 <takeMachineID+0x2a4>)
 8006c0e:	f005 fc92 	bl	800c536 <memset>
    HAL_Delay(100);
 8006c12:	2064      	movs	r0, #100	; 0x64
 8006c14:	f001 fd38 	bl	8008688 <HAL_Delay>

    printTemplate(1, 0);
 8006c18:	2100      	movs	r1, #0
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	f7fa f8aa 	bl	8000d74 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006c20:	2108      	movs	r1, #8
 8006c22:	489d      	ldr	r0, [pc, #628]	; (8006e98 <takeMachineID+0x2a8>)
 8006c24:	f002 fb00 	bl	8009228 <HAL_GPIO_ReadPin>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d13a      	bne.n	8006ca4 <takeMachineID+0xb4>
        	HAL_Delay(50);
 8006c2e:	2032      	movs	r0, #50	; 0x32
 8006c30:	f001 fd2a 	bl	8008688 <HAL_Delay>
        	lcd_cursor(0);
 8006c34:	2000      	movs	r0, #0
 8006c36:	f001 f82f 	bl	8007c98 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006c3a:	4b96      	ldr	r3, [pc, #600]	; (8006e94 <takeMachineID+0x2a4>)
 8006c3c:	7adb      	ldrb	r3, [r3, #11]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d110      	bne.n	8006c64 <takeMachineID+0x74>
        		lcd_clear();
 8006c42:	f000 fff7 	bl	8007c34 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006c46:	4a95      	ldr	r2, [pc, #596]	; (8006e9c <takeMachineID+0x2ac>)
 8006c48:	2101      	movs	r1, #1
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	f000 ffc6 	bl	8007bdc <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006c50:	4a93      	ldr	r2, [pc, #588]	; (8006ea0 <takeMachineID+0x2b0>)
 8006c52:	2101      	movs	r1, #1
 8006c54:	2002      	movs	r0, #2
 8006c56:	f000 ffc1 	bl	8007bdc <lcd_print>
        		HAL_Delay(1200);
 8006c5a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006c5e:	f001 fd13 	bl	8008688 <HAL_Delay>
        		goto mainSection;
 8006c62:	e7c8      	b.n	8006bf6 <takeMachineID+0x6>
        	}

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8006c64:	4b8f      	ldr	r3, [pc, #572]	; (8006ea4 <takeMachineID+0x2b4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a8f      	ldr	r2, [pc, #572]	; (8006ea8 <takeMachineID+0x2b8>)
 8006c6a:	4413      	add	r3, r2
 8006c6c:	4a89      	ldr	r2, [pc, #548]	; (8006e94 <takeMachineID+0x2a4>)
 8006c6e:	6810      	ldr	r0, [r2, #0]
 8006c70:	6851      	ldr	r1, [r2, #4]
 8006c72:	6892      	ldr	r2, [r2, #8]
 8006c74:	6018      	str	r0, [r3, #0]
 8006c76:	6059      	str	r1, [r3, #4]
 8006c78:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006c7a:	20c8      	movs	r0, #200	; 0xc8
 8006c7c:	f001 fd04 	bl	8008688 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006c80:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006c84:	9302      	str	r3, [sp, #8]
 8006c86:	236e      	movs	r3, #110	; 0x6e
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	4b87      	ldr	r3, [pc, #540]	; (8006ea8 <takeMachineID+0x2b8>)
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	236e      	movs	r3, #110	; 0x6e
 8006c90:	2200      	movs	r2, #0
 8006c92:	21a0      	movs	r1, #160	; 0xa0
 8006c94:	4885      	ldr	r0, [pc, #532]	; (8006eac <takeMachineID+0x2bc>)
 8006c96:	f002 fd81 	bl	800979c <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006c9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c9e:	f001 fcf3 	bl	8008688 <HAL_Delay>

            break;
 8006ca2:	e0f3      	b.n	8006e8c <takeMachineID+0x29c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	487c      	ldr	r0, [pc, #496]	; (8006e98 <takeMachineID+0x2a8>)
 8006ca8:	f002 fabe 	bl	8009228 <HAL_GPIO_ReadPin>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d114      	bne.n	8006cdc <takeMachineID+0xec>
        	HAL_Delay(50);
 8006cb2:	2032      	movs	r0, #50	; 0x32
 8006cb4:	f001 fce8 	bl	8008688 <HAL_Delay>

        	if(cursorPosition == 7) {
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b07      	cmp	r3, #7
 8006cbc:	d102      	bne.n	8006cc4 <takeMachineID+0xd4>
        		cursorPosition = 10;
 8006cbe:	230a      	movs	r3, #10
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e008      	b.n	8006cd6 <takeMachineID+0xe6>
        	} else if (cursorPosition == 14) {
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b0e      	cmp	r3, #14
 8006cc8:	d102      	bne.n	8006cd0 <takeMachineID+0xe0>
                cursorPosition = 3;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e002      	b.n	8006cd6 <takeMachineID+0xe6>
            } else {
            	cursorPosition++;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(150);
 8006cd6:	2096      	movs	r0, #150	; 0x96
 8006cd8:	f001 fcd6 	bl	8008688 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006cdc:	2108      	movs	r1, #8
 8006cde:	4874      	ldr	r0, [pc, #464]	; (8006eb0 <takeMachineID+0x2c0>)
 8006ce0:	f002 faa2 	bl	8009228 <HAL_GPIO_ReadPin>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d114      	bne.n	8006d14 <takeMachineID+0x124>
        	HAL_Delay(50);
 8006cea:	2032      	movs	r0, #50	; 0x32
 8006cec:	f001 fccc 	bl	8008688 <HAL_Delay>

            if (cursorPosition == 3) {
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d102      	bne.n	8006cfc <takeMachineID+0x10c>
                cursorPosition = 14;
 8006cf6:	230e      	movs	r3, #14
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	e008      	b.n	8006d0e <takeMachineID+0x11e>
            } else if(cursorPosition == 10) {
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b0a      	cmp	r3, #10
 8006d00:	d102      	bne.n	8006d08 <takeMachineID+0x118>
            	cursorPosition = 7;
 8006d02:	2307      	movs	r3, #7
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	e002      	b.n	8006d0e <takeMachineID+0x11e>
            } else {
            	cursorPosition--;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006d0e:	2096      	movs	r0, #150	; 0x96
 8006d10:	f001 fcba 	bl	8008688 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006d14:	2102      	movs	r1, #2
 8006d16:	4860      	ldr	r0, [pc, #384]	; (8006e98 <takeMachineID+0x2a8>)
 8006d18:	f002 fa86 	bl	8009228 <HAL_GPIO_ReadPin>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d174      	bne.n	8006e0c <takeMachineID+0x21c>
        	HAL_Delay(50);
 8006d22:	2032      	movs	r0, #50	; 0x32
 8006d24:	f001 fcb0 	bl	8008688 <HAL_Delay>

        	if(cursorPosition == 3) {
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d105      	bne.n	8006d3a <takeMachineID+0x14a>
        		machineID[machineIDLoc] = '0';
 8006d2e:	4a59      	ldr	r2, [pc, #356]	; (8006e94 <takeMachineID+0x2a4>)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4413      	add	r3, r2
 8006d34:	2230      	movs	r2, #48	; 0x30
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	e04f      	b.n	8006dda <takeMachineID+0x1ea>
        	} else if(cursorPosition == 4) {
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d105      	bne.n	8006d4c <takeMachineID+0x15c>
        		machineID[machineIDLoc] = '1';
 8006d40:	4a54      	ldr	r2, [pc, #336]	; (8006e94 <takeMachineID+0x2a4>)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	4413      	add	r3, r2
 8006d46:	2231      	movs	r2, #49	; 0x31
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	e046      	b.n	8006dda <takeMachineID+0x1ea>
        	} else if(cursorPosition == 5) {
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b05      	cmp	r3, #5
 8006d50:	d105      	bne.n	8006d5e <takeMachineID+0x16e>
        		machineID[machineIDLoc] = '2';
 8006d52:	4a50      	ldr	r2, [pc, #320]	; (8006e94 <takeMachineID+0x2a4>)
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4413      	add	r3, r2
 8006d58:	2232      	movs	r2, #50	; 0x32
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	e03d      	b.n	8006dda <takeMachineID+0x1ea>
        	} else if(cursorPosition == 6) {
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b06      	cmp	r3, #6
 8006d62:	d105      	bne.n	8006d70 <takeMachineID+0x180>
        		machineID[machineIDLoc] = '3';
 8006d64:	4a4b      	ldr	r2, [pc, #300]	; (8006e94 <takeMachineID+0x2a4>)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	4413      	add	r3, r2
 8006d6a:	2233      	movs	r2, #51	; 0x33
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	e034      	b.n	8006dda <takeMachineID+0x1ea>
        	} else if(cursorPosition == 7) {
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b07      	cmp	r3, #7
 8006d74:	d105      	bne.n	8006d82 <takeMachineID+0x192>
        		machineID[machineIDLoc] = '4';
 8006d76:	4a47      	ldr	r2, [pc, #284]	; (8006e94 <takeMachineID+0x2a4>)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	2234      	movs	r2, #52	; 0x34
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	e02b      	b.n	8006dda <takeMachineID+0x1ea>
        	} else if(cursorPosition == 10) {
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b0a      	cmp	r3, #10
 8006d86:	d105      	bne.n	8006d94 <takeMachineID+0x1a4>
        		machineID[machineIDLoc] = '5';
 8006d88:	4a42      	ldr	r2, [pc, #264]	; (8006e94 <takeMachineID+0x2a4>)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	2235      	movs	r2, #53	; 0x35
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	e022      	b.n	8006dda <takeMachineID+0x1ea>
        	} else if(cursorPosition == 11) {
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b0b      	cmp	r3, #11
 8006d98:	d105      	bne.n	8006da6 <takeMachineID+0x1b6>
        		machineID[machineIDLoc] = '6';
 8006d9a:	4a3e      	ldr	r2, [pc, #248]	; (8006e94 <takeMachineID+0x2a4>)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4413      	add	r3, r2
 8006da0:	2236      	movs	r2, #54	; 0x36
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	e019      	b.n	8006dda <takeMachineID+0x1ea>
        	} else if(cursorPosition == 12) {
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d105      	bne.n	8006db8 <takeMachineID+0x1c8>
        		machineID[machineIDLoc] = '7';
 8006dac:	4a39      	ldr	r2, [pc, #228]	; (8006e94 <takeMachineID+0x2a4>)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4413      	add	r3, r2
 8006db2:	2237      	movs	r2, #55	; 0x37
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	e010      	b.n	8006dda <takeMachineID+0x1ea>
        	} else if(cursorPosition == 13) {
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b0d      	cmp	r3, #13
 8006dbc:	d105      	bne.n	8006dca <takeMachineID+0x1da>
        		machineID[machineIDLoc] = '8';
 8006dbe:	4a35      	ldr	r2, [pc, #212]	; (8006e94 <takeMachineID+0x2a4>)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	2238      	movs	r2, #56	; 0x38
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	e007      	b.n	8006dda <takeMachineID+0x1ea>
        	} else if(cursorPosition == 14) {
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b0e      	cmp	r3, #14
 8006dce:	d104      	bne.n	8006dda <takeMachineID+0x1ea>
        		machineID[machineIDLoc] = '9';
 8006dd0:	4a30      	ldr	r2, [pc, #192]	; (8006e94 <takeMachineID+0x2a4>)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	2239      	movs	r2, #57	; 0x39
 8006dd8:	701a      	strb	r2, [r3, #0]
        	}

        	if(machineIDLoc == machineIDCharacterLimit - 1) {
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b0b      	cmp	r3, #11
 8006dde:	d102      	bne.n	8006de6 <takeMachineID+0x1f6>
        		machineID[machineIDCharacterLimit] = '\0';
 8006de0:	4b2c      	ldr	r3, [pc, #176]	; (8006e94 <takeMachineID+0x2a4>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	b2d9      	uxtb	r1, r3
 8006dea:	4a2a      	ldr	r2, [pc, #168]	; (8006e94 <takeMachineID+0x2a4>)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4413      	add	r3, r2
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	2001      	movs	r0, #1
 8006df6:	f000 ff06 	bl	8007c06 <lcd_print_char>

        	writeLoc++;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8006e06:	2096      	movs	r0, #150	; 0x96
 8006e08:	f001 fc3e 	bl	8008688 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006e0c:	2104      	movs	r1, #4
 8006e0e:	4822      	ldr	r0, [pc, #136]	; (8006e98 <takeMachineID+0x2a8>)
 8006e10:	f002 fa0a 	bl	8009228 <HAL_GPIO_ReadPin>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d131      	bne.n	8006e7e <takeMachineID+0x28e>
        	HAL_Delay(50);
 8006e1a:	2032      	movs	r0, #50	; 0x32
 8006e1c:	f001 fc34 	bl	8008688 <HAL_Delay>

            if(strlen(machineID) >= 1) {
 8006e20:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <takeMachineID+0x2a4>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d027      	beq.n	8006e78 <takeMachineID+0x288>

                machineID[machineIDLoc] = '\0';
 8006e28:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <takeMachineID+0x2a4>)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	3304      	adds	r3, #4
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	2001      	movs	r0, #1
 8006e3e:	f000 ff03 	bl	8007c48 <lcd_delete_char>
                HAL_Delay(50);
 8006e42:	2032      	movs	r0, #50	; 0x32
 8006e44:	f001 fc20 	bl	8008688 <HAL_Delay>

                if(writeLoc > 5) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b05      	cmp	r3, #5
 8006e4c:	dd03      	ble.n	8006e56 <takeMachineID+0x266>
                	writeLoc--;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	607b      	str	r3, [r7, #4]
 8006e54:	e004      	b.n	8006e60 <takeMachineID+0x270>
                } else if(writeLoc < 5) {
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	dc01      	bgt.n	8006e60 <takeMachineID+0x270>
                	writeLoc = 5;
 8006e5c:	2305      	movs	r3, #5
 8006e5e:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dd03      	ble.n	8006e6e <takeMachineID+0x27e>
                	machineIDLoc--;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	60bb      	str	r3, [r7, #8]
 8006e6c:	e004      	b.n	8006e78 <takeMachineID+0x288>
                } else if(machineIDLoc < 0) {
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	da01      	bge.n	8006e78 <takeMachineID+0x288>
                	machineIDLoc = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(150);
 8006e78:	2096      	movs	r0, #150	; 0x96
 8006e7a:	f001 fc05 	bl	8008688 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	4619      	mov	r1, r3
 8006e84:	2002      	movs	r0, #2
 8006e86:	f000 fe8a 	bl	8007b9e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e8a:	e6c9      	b.n	8006c20 <takeMachineID+0x30>
    }
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	200001a4 	.word	0x200001a4
 8006e98:	40010800 	.word	0x40010800
 8006e9c:	0800dba4 	.word	0x0800dba4
 8006ea0:	0800dbb8 	.word	0x0800dbb8
 8006ea4:	20000004 	.word	0x20000004
 8006ea8:	2000012c 	.word	0x2000012c
 8006eac:	20000290 	.word	0x20000290
 8006eb0:	40011000 	.word	0x40011000

08006eb4 <takeWifiSSID>:

void takeWifiSSID() {
 8006eb4:	b590      	push	{r4, r7, lr}
 8006eb6:	b08b      	sub	sp, #44	; 0x2c
 8006eb8:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006eba:	2001      	movs	r0, #1
 8006ebc:	f000 feec 	bl	8007c98 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006ec0:	2214      	movs	r2, #20
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	48ae      	ldr	r0, [pc, #696]	; (8007180 <takeWifiSSID+0x2cc>)
 8006ec6:	f005 fb36 	bl	800c536 <memset>
    HAL_Delay(100);
 8006eca:	2064      	movs	r0, #100	; 0x64
 8006ecc:	f001 fbdc 	bl	8008688 <HAL_Delay>

    int realCharPos = 1;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	613b      	str	r3, [r7, #16]
    int page = 1;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]
    int wifiNameLoc = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006ee0:	2307      	movs	r3, #7
 8006ee2:	607b      	str	r3, [r7, #4]

    int eepromPos = ssidStartPos;
 8006ee4:	4ba7      	ldr	r3, [pc, #668]	; (8007184 <takeWifiSSID+0x2d0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	603b      	str	r3, [r7, #0]

    printTemplate(2, 1);
 8006eea:	2101      	movs	r1, #1
 8006eec:	2002      	movs	r0, #2
 8006eee:	f7f9 ff41 	bl	8000d74 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006ef2:	2108      	movs	r1, #8
 8006ef4:	48a4      	ldr	r0, [pc, #656]	; (8007188 <takeWifiSSID+0x2d4>)
 8006ef6:	f002 f997 	bl	8009228 <HAL_GPIO_ReadPin>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d143      	bne.n	8006f88 <takeWifiSSID+0xd4>
        	HAL_Delay(50);
 8006f00:	2032      	movs	r0, #50	; 0x32
 8006f02:	f001 fbc1 	bl	8008688 <HAL_Delay>
            lcd_cursor(0);
 8006f06:	2000      	movs	r0, #0
 8006f08:	f000 fec6 	bl	8007c98 <lcd_cursor>

            wifiSSID[wifiNameLoc] = '\0';
 8006f0c:	4a9c      	ldr	r2, [pc, #624]	; (8007180 <takeWifiSSID+0x2cc>)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4413      	add	r3, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	701a      	strb	r2, [r3, #0]
            HAL_Delay(10);
 8006f16:	200a      	movs	r0, #10
 8006f18:	f001 fbb6 	bl	8008688 <HAL_Delay>

            if(strlen(wifiSSID) > 20) {
 8006f1c:	4898      	ldr	r0, [pc, #608]	; (8007180 <takeWifiSSID+0x2cc>)
 8006f1e:	f7f9 f981 	bl	8000224 <strlen>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b14      	cmp	r3, #20
 8006f26:	d910      	bls.n	8006f4a <takeWifiSSID+0x96>
                lcd_clear();
 8006f28:	f000 fe84 	bl	8007c34 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006f2c:	4a97      	ldr	r2, [pc, #604]	; (800718c <takeWifiSSID+0x2d8>)
 8006f2e:	2101      	movs	r1, #1
 8006f30:	2001      	movs	r0, #1
 8006f32:	f000 fe53 	bl	8007bdc <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006f36:	4a96      	ldr	r2, [pc, #600]	; (8007190 <takeWifiSSID+0x2dc>)
 8006f38:	2101      	movs	r1, #1
 8006f3a:	2002      	movs	r0, #2
 8006f3c:	f000 fe4e 	bl	8007bdc <lcd_print>
                HAL_Delay(1200);
 8006f40:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006f44:	f001 fba0 	bl	8008688 <HAL_Delay>
                goto mainSSIDSection;
 8006f48:	e7b7      	b.n	8006eba <takeWifiSSID+0x6>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));
 8006f4a:	4b8e      	ldr	r3, [pc, #568]	; (8007184 <takeWifiSSID+0x2d0>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a91      	ldr	r2, [pc, #580]	; (8007194 <takeWifiSSID+0x2e0>)
 8006f50:	189c      	adds	r4, r3, r2
 8006f52:	488b      	ldr	r0, [pc, #556]	; (8007180 <takeWifiSSID+0x2cc>)
 8006f54:	f7f9 f966 	bl	8000224 <strlen>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4988      	ldr	r1, [pc, #544]	; (8007180 <takeWifiSSID+0x2cc>)
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f005 fb2e 	bl	800c5c0 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006f64:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f68:	9302      	str	r3, [sp, #8]
 8006f6a:	236e      	movs	r3, #110	; 0x6e
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	4b89      	ldr	r3, [pc, #548]	; (8007194 <takeWifiSSID+0x2e0>)
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	236e      	movs	r3, #110	; 0x6e
 8006f74:	2200      	movs	r2, #0
 8006f76:	21a0      	movs	r1, #160	; 0xa0
 8006f78:	4887      	ldr	r0, [pc, #540]	; (8007198 <takeWifiSSID+0x2e4>)
 8006f7a:	f002 fc0f 	bl	800979c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8006f7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f82:	f001 fb81 	bl	8008688 <HAL_Delay>

            break;
 8006f86:	e13e      	b.n	8007206 <takeWifiSSID+0x352>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006f88:	2101      	movs	r1, #1
 8006f8a:	487f      	ldr	r0, [pc, #508]	; (8007188 <takeWifiSSID+0x2d4>)
 8006f8c:	f002 f94c 	bl	8009228 <HAL_GPIO_ReadPin>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d153      	bne.n	800703e <takeWifiSSID+0x18a>
        	HAL_Delay(50);
 8006f96:	2032      	movs	r0, #50	; 0x32
 8006f98:	f001 fb76 	bl	8008688 <HAL_Delay>

        	realCharPos++;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b50      	cmp	r3, #80	; 0x50
 8006fa6:	dd01      	ble.n	8006fac <takeWifiSSID+0xf8>
        		realCharPos = 1;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	2b10      	cmp	r3, #16
 8006fb0:	d13f      	bne.n	8007032 <takeWifiSSID+0x17e>
            	if(page == 1) {
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d109      	bne.n	8006fcc <takeWifiSSID+0x118>
            		cursorPosition = 1;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
            		page++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8006fc2:	2102      	movs	r1, #2
 8006fc4:	2002      	movs	r0, #2
 8006fc6:	f7f9 fed5 	bl	8000d74 <printTemplate>
 8006fca:	e035      	b.n	8007038 <takeWifiSSID+0x184>
            	} else if(page == 2) {
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d109      	bne.n	8006fe6 <takeWifiSSID+0x132>
            		cursorPosition = 1;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	613b      	str	r3, [r7, #16]
            		page++;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8006fdc:	2103      	movs	r1, #3
 8006fde:	2002      	movs	r0, #2
 8006fe0:	f7f9 fec8 	bl	8000d74 <printTemplate>
 8006fe4:	e028      	b.n	8007038 <takeWifiSSID+0x184>
            	} else if(page == 3) {
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d109      	bne.n	8007000 <takeWifiSSID+0x14c>
            		cursorPosition = 1;
 8006fec:	2301      	movs	r3, #1
 8006fee:	613b      	str	r3, [r7, #16]
            		page++;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8006ff6:	2104      	movs	r1, #4
 8006ff8:	2002      	movs	r0, #2
 8006ffa:	f7f9 febb 	bl	8000d74 <printTemplate>
 8006ffe:	e01b      	b.n	8007038 <takeWifiSSID+0x184>
            	} else if(page == 4) {
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b04      	cmp	r3, #4
 8007004:	d109      	bne.n	800701a <takeWifiSSID+0x166>
            		cursorPosition = 1;
 8007006:	2301      	movs	r3, #1
 8007008:	613b      	str	r3, [r7, #16]
            		page++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8007010:	2105      	movs	r1, #5
 8007012:	2002      	movs	r0, #2
 8007014:	f7f9 feae 	bl	8000d74 <printTemplate>
 8007018:	e00e      	b.n	8007038 <takeWifiSSID+0x184>
            	} else if(page == 5) {
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b05      	cmp	r3, #5
 800701e:	d10b      	bne.n	8007038 <takeWifiSSID+0x184>
            		cursorPosition = 1;
 8007020:	2301      	movs	r3, #1
 8007022:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007024:	2301      	movs	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8007028:	2101      	movs	r1, #1
 800702a:	2002      	movs	r0, #2
 800702c:	f7f9 fea2 	bl	8000d74 <printTemplate>
 8007030:	e002      	b.n	8007038 <takeWifiSSID+0x184>
            	}
            } else {
            	cursorPosition++;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	3301      	adds	r3, #1
 8007036:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007038:	2096      	movs	r0, #150	; 0x96
 800703a:	f001 fb25 	bl	8008688 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800703e:	2108      	movs	r1, #8
 8007040:	4856      	ldr	r0, [pc, #344]	; (800719c <takeWifiSSID+0x2e8>)
 8007042:	f002 f8f1 	bl	8009228 <HAL_GPIO_ReadPin>
 8007046:	4603      	mov	r3, r0
 8007048:	2b01      	cmp	r3, #1
 800704a:	d14f      	bne.n	80070ec <takeWifiSSID+0x238>
        	HAL_Delay(50);
 800704c:	2032      	movs	r0, #50	; 0x32
 800704e:	f001 fb1b 	bl	8008688 <HAL_Delay>

        	realCharPos--;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	3b01      	subs	r3, #1
 8007056:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	dc01      	bgt.n	8007062 <takeWifiSSID+0x1ae>
        		realCharPos = 80;
 800705e:	2350      	movs	r3, #80	; 0x50
 8007060:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d13b      	bne.n	80070e0 <takeWifiSSID+0x22c>
            	if(page == 1) {
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d108      	bne.n	8007080 <takeWifiSSID+0x1cc>
            		cursorPosition = 16;
 800706e:	2310      	movs	r3, #16
 8007070:	613b      	str	r3, [r7, #16]
            		page = 5;
 8007072:	2305      	movs	r3, #5
 8007074:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8007076:	2105      	movs	r1, #5
 8007078:	2002      	movs	r0, #2
 800707a:	f7f9 fe7b 	bl	8000d74 <printTemplate>
 800707e:	e032      	b.n	80070e6 <takeWifiSSID+0x232>
            	} else if(page == 2) {
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d108      	bne.n	8007098 <takeWifiSSID+0x1e4>
            		cursorPosition = 16;
 8007086:	2310      	movs	r3, #16
 8007088:	613b      	str	r3, [r7, #16]
            		page = 1;
 800708a:	2301      	movs	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 800708e:	2101      	movs	r1, #1
 8007090:	2002      	movs	r0, #2
 8007092:	f7f9 fe6f 	bl	8000d74 <printTemplate>
 8007096:	e026      	b.n	80070e6 <takeWifiSSID+0x232>
            	} else if(page == 3) {
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b03      	cmp	r3, #3
 800709c:	d108      	bne.n	80070b0 <takeWifiSSID+0x1fc>
            		cursorPosition = 16;
 800709e:	2310      	movs	r3, #16
 80070a0:	613b      	str	r3, [r7, #16]
            		page = 2;
 80070a2:	2302      	movs	r3, #2
 80070a4:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 80070a6:	2102      	movs	r1, #2
 80070a8:	2002      	movs	r0, #2
 80070aa:	f7f9 fe63 	bl	8000d74 <printTemplate>
 80070ae:	e01a      	b.n	80070e6 <takeWifiSSID+0x232>
            	} else if(page == 4) {
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d108      	bne.n	80070c8 <takeWifiSSID+0x214>
            		cursorPosition = 16;
 80070b6:	2310      	movs	r3, #16
 80070b8:	613b      	str	r3, [r7, #16]
            		page = 3;
 80070ba:	2303      	movs	r3, #3
 80070bc:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 80070be:	2103      	movs	r1, #3
 80070c0:	2002      	movs	r0, #2
 80070c2:	f7f9 fe57 	bl	8000d74 <printTemplate>
 80070c6:	e00e      	b.n	80070e6 <takeWifiSSID+0x232>
            	} else if(page == 5) {
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b05      	cmp	r3, #5
 80070cc:	d10b      	bne.n	80070e6 <takeWifiSSID+0x232>
            		cursorPosition = 16;
 80070ce:	2310      	movs	r3, #16
 80070d0:	613b      	str	r3, [r7, #16]
            		page = 4;
 80070d2:	2304      	movs	r3, #4
 80070d4:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 80070d6:	2104      	movs	r1, #4
 80070d8:	2002      	movs	r0, #2
 80070da:	f7f9 fe4b 	bl	8000d74 <printTemplate>
 80070de:	e002      	b.n	80070e6 <takeWifiSSID+0x232>
            	}
            } else {
            	cursorPosition--;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 80070e6:	2096      	movs	r0, #150	; 0x96
 80070e8:	f001 face 	bl	8008688 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80070ec:	2102      	movs	r1, #2
 80070ee:	4826      	ldr	r0, [pc, #152]	; (8007188 <takeWifiSSID+0x2d4>)
 80070f0:	f002 f89a 	bl	8009228 <HAL_GPIO_ReadPin>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d12d      	bne.n	8007156 <takeWifiSSID+0x2a2>
        	HAL_Delay(50);
 80070fa:	2032      	movs	r0, #50	; 0x32
 80070fc:	f001 fac4 	bl	8008688 <HAL_Delay>

            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	3b01      	subs	r3, #1
 8007104:	4618      	mov	r0, r3
 8007106:	f7f9 fb13 	bl	8000730 <getCharFromCursorPosition>
 800710a:	4603      	mov	r3, r0
 800710c:	4619      	mov	r1, r3
 800710e:	4a1c      	ldr	r2, [pc, #112]	; (8007180 <takeWifiSSID+0x2cc>)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4413      	add	r3, r2
 8007114:	460a      	mov	r2, r1
 8007116:	701a      	strb	r2, [r3, #0]
            eepromData[eepromPos] = realCharPos - 1;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b2d9      	uxtb	r1, r3
 8007120:	4a1c      	ldr	r2, [pc, #112]	; (8007194 <takeWifiSSID+0x2e0>)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	4413      	add	r3, r2
 8007126:	460a      	mov	r2, r1
 8007128:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	b2d9      	uxtb	r1, r3
 800712e:	4a14      	ldr	r2, [pc, #80]	; (8007180 <takeWifiSSID+0x2cc>)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4413      	add	r3, r2
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	2001      	movs	r0, #1
 800713a:	f000 fd64 	bl	8007c06 <lcd_print_char>

            writeLoc++;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3301      	adds	r3, #1
 8007142:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3301      	adds	r3, #1
 8007148:	60bb      	str	r3, [r7, #8]
            eepromPos++;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	3301      	adds	r3, #1
 800714e:	603b      	str	r3, [r7, #0]

            HAL_Delay(150);
 8007150:	2096      	movs	r0, #150	; 0x96
 8007152:	f001 fa99 	bl	8008688 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007156:	2104      	movs	r1, #4
 8007158:	480b      	ldr	r0, [pc, #44]	; (8007188 <takeWifiSSID+0x2d4>)
 800715a:	f002 f865 	bl	8009228 <HAL_GPIO_ReadPin>
 800715e:	4603      	mov	r3, r0
 8007160:	2b01      	cmp	r3, #1
 8007162:	d149      	bne.n	80071f8 <takeWifiSSID+0x344>
        	HAL_Delay(50);
 8007164:	2032      	movs	r0, #50	; 0x32
 8007166:	f001 fa8f 	bl	8008688 <HAL_Delay>

        	if(strlen(wifiSSID) >= 1) {
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <takeWifiSSID+0x2cc>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d03f      	beq.n	80071f2 <takeWifiSSID+0x33e>
        		if(writeLoc > 7) {
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b07      	cmp	r3, #7
 8007176:	dd13      	ble.n	80071a0 <takeWifiSSID+0x2ec>
        			writeLoc--;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3b01      	subs	r3, #1
 800717c:	607b      	str	r3, [r7, #4]
 800717e:	e014      	b.n	80071aa <takeWifiSSID+0x2f6>
 8007180:	200001b0 	.word	0x200001b0
 8007184:	20000008 	.word	0x20000008
 8007188:	40010800 	.word	0x40010800
 800718c:	0800dbcc 	.word	0x0800dbcc
 8007190:	0800dbe0 	.word	0x0800dbe0
 8007194:	2000012c 	.word	0x2000012c
 8007198:	20000290 	.word	0x20000290
 800719c:	40011000 	.word	0x40011000
        		} else if(writeLoc < 7) {
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b06      	cmp	r3, #6
 80071a4:	dc01      	bgt.n	80071aa <takeWifiSSID+0x2f6>
        			writeLoc = 7;
 80071a6:	2307      	movs	r3, #7
 80071a8:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	dd06      	ble.n	80071be <takeWifiSSID+0x30a>
        			wifiNameLoc--;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	60bb      	str	r3, [r7, #8]
        			eepromPos--;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	e004      	b.n	80071c8 <takeWifiSSID+0x314>
        		} else if(wifiNameLoc < 0) {
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	da01      	bge.n	80071c8 <takeWifiSSID+0x314>
        			wifiNameLoc = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60bb      	str	r3, [r7, #8]
        		}

        		wifiSSID[wifiNameLoc] = '\0';
 80071c8:	4a11      	ldr	r2, [pc, #68]	; (8007210 <takeWifiSSID+0x35c>)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4413      	add	r3, r2
 80071ce:	2200      	movs	r2, #0
 80071d0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromPos] = '\0';
 80071d2:	4a10      	ldr	r2, [pc, #64]	; (8007214 <takeWifiSSID+0x360>)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4413      	add	r3, r2
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	3306      	adds	r3, #6
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	4619      	mov	r1, r3
 80071e6:	2001      	movs	r0, #1
 80071e8:	f000 fd2e 	bl	8007c48 <lcd_delete_char>
        		HAL_Delay(50);
 80071ec:	2032      	movs	r0, #50	; 0x32
 80071ee:	f001 fa4b 	bl	8008688 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80071f2:	2096      	movs	r0, #150	; 0x96
 80071f4:	f001 fa48 	bl	8008688 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	4619      	mov	r1, r3
 80071fe:	2002      	movs	r0, #2
 8007200:	f000 fccd 	bl	8007b9e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007204:	e675      	b.n	8006ef2 <takeWifiSSID+0x3e>
    }
}
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	bd90      	pop	{r4, r7, pc}
 800720e:	bf00      	nop
 8007210:	200001b0 	.word	0x200001b0
 8007214:	2000012c 	.word	0x2000012c

08007218 <takeWifiPass>:

void takeWifiPass() {
 8007218:	b590      	push	{r4, r7, lr}
 800721a:	b08b      	sub	sp, #44	; 0x2c
 800721c:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 800721e:	2001      	movs	r0, #1
 8007220:	f000 fd3a 	bl	8007c98 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 8007224:	2214      	movs	r2, #20
 8007226:	2100      	movs	r1, #0
 8007228:	48ae      	ldr	r0, [pc, #696]	; (80074e4 <takeWifiPass+0x2cc>)
 800722a:	f005 f984 	bl	800c536 <memset>
    HAL_Delay(100);
 800722e:	2064      	movs	r0, #100	; 0x64
 8007230:	f001 fa2a 	bl	8008688 <HAL_Delay>

    int realCharPos = 1;
 8007234:	2301      	movs	r3, #1
 8007236:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8007238:	2301      	movs	r3, #1
 800723a:	613b      	str	r3, [r7, #16]
    int page = 1;
 800723c:	2301      	movs	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
    int wifiPassLoc = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8007244:	2307      	movs	r3, #7
 8007246:	607b      	str	r3, [r7, #4]

    int eepromPos = passStartPos;
 8007248:	4ba7      	ldr	r3, [pc, #668]	; (80074e8 <takeWifiPass+0x2d0>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	603b      	str	r3, [r7, #0]

    printTemplate(3, 1);
 800724e:	2101      	movs	r1, #1
 8007250:	2003      	movs	r0, #3
 8007252:	f7f9 fd8f 	bl	8000d74 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007256:	2108      	movs	r1, #8
 8007258:	48a4      	ldr	r0, [pc, #656]	; (80074ec <takeWifiPass+0x2d4>)
 800725a:	f001 ffe5 	bl	8009228 <HAL_GPIO_ReadPin>
 800725e:	4603      	mov	r3, r0
 8007260:	2b01      	cmp	r3, #1
 8007262:	d143      	bne.n	80072ec <takeWifiPass+0xd4>
        	HAL_Delay(50);
 8007264:	2032      	movs	r0, #50	; 0x32
 8007266:	f001 fa0f 	bl	8008688 <HAL_Delay>
            lcd_cursor(0);
 800726a:	2000      	movs	r0, #0
 800726c:	f000 fd14 	bl	8007c98 <lcd_cursor>

            wifiPass[wifiPassLoc] = '\0';
 8007270:	4a9c      	ldr	r2, [pc, #624]	; (80074e4 <takeWifiPass+0x2cc>)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4413      	add	r3, r2
 8007276:	2200      	movs	r2, #0
 8007278:	701a      	strb	r2, [r3, #0]
            HAL_Delay(10);
 800727a:	200a      	movs	r0, #10
 800727c:	f001 fa04 	bl	8008688 <HAL_Delay>

            if(strlen(wifiPass) > 20) {
 8007280:	4898      	ldr	r0, [pc, #608]	; (80074e4 <takeWifiPass+0x2cc>)
 8007282:	f7f8 ffcf 	bl	8000224 <strlen>
 8007286:	4603      	mov	r3, r0
 8007288:	2b14      	cmp	r3, #20
 800728a:	d910      	bls.n	80072ae <takeWifiPass+0x96>
                lcd_clear();
 800728c:	f000 fcd2 	bl	8007c34 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8007290:	4a97      	ldr	r2, [pc, #604]	; (80074f0 <takeWifiPass+0x2d8>)
 8007292:	2101      	movs	r1, #1
 8007294:	2001      	movs	r0, #1
 8007296:	f000 fca1 	bl	8007bdc <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800729a:	4a96      	ldr	r2, [pc, #600]	; (80074f4 <takeWifiPass+0x2dc>)
 800729c:	2101      	movs	r1, #1
 800729e:	2002      	movs	r0, #2
 80072a0:	f000 fc9c 	bl	8007bdc <lcd_print>
                HAL_Delay(1200);
 80072a4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80072a8:	f001 f9ee 	bl	8008688 <HAL_Delay>
                goto mainPASSSection;
 80072ac:	e7b7      	b.n	800721e <takeWifiPass+0x6>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));
 80072ae:	4b8e      	ldr	r3, [pc, #568]	; (80074e8 <takeWifiPass+0x2d0>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a91      	ldr	r2, [pc, #580]	; (80074f8 <takeWifiPass+0x2e0>)
 80072b4:	189c      	adds	r4, r3, r2
 80072b6:	488b      	ldr	r0, [pc, #556]	; (80074e4 <takeWifiPass+0x2cc>)
 80072b8:	f7f8 ffb4 	bl	8000224 <strlen>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	4988      	ldr	r1, [pc, #544]	; (80074e4 <takeWifiPass+0x2cc>)
 80072c2:	4620      	mov	r0, r4
 80072c4:	f005 f97c 	bl	800c5c0 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80072c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80072cc:	9302      	str	r3, [sp, #8]
 80072ce:	236e      	movs	r3, #110	; 0x6e
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	4b89      	ldr	r3, [pc, #548]	; (80074f8 <takeWifiPass+0x2e0>)
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	236e      	movs	r3, #110	; 0x6e
 80072d8:	2200      	movs	r2, #0
 80072da:	21a0      	movs	r1, #160	; 0xa0
 80072dc:	4887      	ldr	r0, [pc, #540]	; (80074fc <takeWifiPass+0x2e4>)
 80072de:	f002 fa5d 	bl	800979c <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 80072e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072e6:	f001 f9cf 	bl	8008688 <HAL_Delay>

            break;
 80072ea:	e13e      	b.n	800756a <takeWifiPass+0x352>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80072ec:	2101      	movs	r1, #1
 80072ee:	487f      	ldr	r0, [pc, #508]	; (80074ec <takeWifiPass+0x2d4>)
 80072f0:	f001 ff9a 	bl	8009228 <HAL_GPIO_ReadPin>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d153      	bne.n	80073a2 <takeWifiPass+0x18a>
        	HAL_Delay(50);
 80072fa:	2032      	movs	r0, #50	; 0x32
 80072fc:	f001 f9c4 	bl	8008688 <HAL_Delay>

        	realCharPos++;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	3301      	adds	r3, #1
 8007304:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b50      	cmp	r3, #80	; 0x50
 800730a:	dd01      	ble.n	8007310 <takeWifiPass+0xf8>
        	    realCharPos = 1;
 800730c:	2301      	movs	r3, #1
 800730e:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b10      	cmp	r3, #16
 8007314:	d13f      	bne.n	8007396 <takeWifiPass+0x17e>
            	if(page == 1) {
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d109      	bne.n	8007330 <takeWifiPass+0x118>
            		cursorPosition = 1;
 800731c:	2301      	movs	r3, #1
 800731e:	613b      	str	r3, [r7, #16]
            		page++;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3301      	adds	r3, #1
 8007324:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 8007326:	2102      	movs	r1, #2
 8007328:	2003      	movs	r0, #3
 800732a:	f7f9 fd23 	bl	8000d74 <printTemplate>
 800732e:	e035      	b.n	800739c <takeWifiPass+0x184>
            	} else if(page == 2) {
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d109      	bne.n	800734a <takeWifiPass+0x132>
            		cursorPosition = 1;
 8007336:	2301      	movs	r3, #1
 8007338:	613b      	str	r3, [r7, #16]
            		page++;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3301      	adds	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 8007340:	2103      	movs	r1, #3
 8007342:	2003      	movs	r0, #3
 8007344:	f7f9 fd16 	bl	8000d74 <printTemplate>
 8007348:	e028      	b.n	800739c <takeWifiPass+0x184>
            	} else if(page == 3) {
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b03      	cmp	r3, #3
 800734e:	d109      	bne.n	8007364 <takeWifiPass+0x14c>
            		cursorPosition = 1;
 8007350:	2301      	movs	r3, #1
 8007352:	613b      	str	r3, [r7, #16]
            		page++;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3301      	adds	r3, #1
 8007358:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 800735a:	2104      	movs	r1, #4
 800735c:	2003      	movs	r0, #3
 800735e:	f7f9 fd09 	bl	8000d74 <printTemplate>
 8007362:	e01b      	b.n	800739c <takeWifiPass+0x184>
            	} else if(page == 4) {
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b04      	cmp	r3, #4
 8007368:	d109      	bne.n	800737e <takeWifiPass+0x166>
            		cursorPosition = 1;
 800736a:	2301      	movs	r3, #1
 800736c:	613b      	str	r3, [r7, #16]
            		page++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 8007374:	2105      	movs	r1, #5
 8007376:	2003      	movs	r0, #3
 8007378:	f7f9 fcfc 	bl	8000d74 <printTemplate>
 800737c:	e00e      	b.n	800739c <takeWifiPass+0x184>
            	} else if(page == 5) {
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b05      	cmp	r3, #5
 8007382:	d10b      	bne.n	800739c <takeWifiPass+0x184>
            		cursorPosition = 1;
 8007384:	2301      	movs	r3, #1
 8007386:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007388:	2301      	movs	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 800738c:	2101      	movs	r1, #1
 800738e:	2003      	movs	r0, #3
 8007390:	f7f9 fcf0 	bl	8000d74 <printTemplate>
 8007394:	e002      	b.n	800739c <takeWifiPass+0x184>
            	}
            } else {
            	cursorPosition++;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	3301      	adds	r3, #1
 800739a:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 800739c:	2096      	movs	r0, #150	; 0x96
 800739e:	f001 f973 	bl	8008688 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80073a2:	2108      	movs	r1, #8
 80073a4:	4856      	ldr	r0, [pc, #344]	; (8007500 <takeWifiPass+0x2e8>)
 80073a6:	f001 ff3f 	bl	8009228 <HAL_GPIO_ReadPin>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d14f      	bne.n	8007450 <takeWifiPass+0x238>
        	HAL_Delay(50);
 80073b0:	2032      	movs	r0, #50	; 0x32
 80073b2:	f001 f969 	bl	8008688 <HAL_Delay>

        	realCharPos--;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	dc01      	bgt.n	80073c6 <takeWifiPass+0x1ae>
        	    realCharPos = 80;
 80073c2:	2350      	movs	r3, #80	; 0x50
 80073c4:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d13b      	bne.n	8007444 <takeWifiPass+0x22c>
            	if(page == 1) {
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d108      	bne.n	80073e4 <takeWifiPass+0x1cc>
            		cursorPosition = 16;
 80073d2:	2310      	movs	r3, #16
 80073d4:	613b      	str	r3, [r7, #16]
            		page = 5;
 80073d6:	2305      	movs	r3, #5
 80073d8:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 80073da:	2105      	movs	r1, #5
 80073dc:	2003      	movs	r0, #3
 80073de:	f7f9 fcc9 	bl	8000d74 <printTemplate>
 80073e2:	e032      	b.n	800744a <takeWifiPass+0x232>
            	} else if(page == 2) {
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d108      	bne.n	80073fc <takeWifiPass+0x1e4>
            		cursorPosition = 16;
 80073ea:	2310      	movs	r3, #16
 80073ec:	613b      	str	r3, [r7, #16]
            		page = 1;
 80073ee:	2301      	movs	r3, #1
 80073f0:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 80073f2:	2101      	movs	r1, #1
 80073f4:	2003      	movs	r0, #3
 80073f6:	f7f9 fcbd 	bl	8000d74 <printTemplate>
 80073fa:	e026      	b.n	800744a <takeWifiPass+0x232>
            	} else if(page == 3) {
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d108      	bne.n	8007414 <takeWifiPass+0x1fc>
            		cursorPosition = 16;
 8007402:	2310      	movs	r3, #16
 8007404:	613b      	str	r3, [r7, #16]
            		page = 2;
 8007406:	2302      	movs	r3, #2
 8007408:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 800740a:	2102      	movs	r1, #2
 800740c:	2003      	movs	r0, #3
 800740e:	f7f9 fcb1 	bl	8000d74 <printTemplate>
 8007412:	e01a      	b.n	800744a <takeWifiPass+0x232>
            	} else if(page == 4) {
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b04      	cmp	r3, #4
 8007418:	d108      	bne.n	800742c <takeWifiPass+0x214>
            		cursorPosition = 16;
 800741a:	2310      	movs	r3, #16
 800741c:	613b      	str	r3, [r7, #16]
            		page = 3;
 800741e:	2303      	movs	r3, #3
 8007420:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 8007422:	2103      	movs	r1, #3
 8007424:	2003      	movs	r0, #3
 8007426:	f7f9 fca5 	bl	8000d74 <printTemplate>
 800742a:	e00e      	b.n	800744a <takeWifiPass+0x232>
            	} else if(page == 5) {
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b05      	cmp	r3, #5
 8007430:	d10b      	bne.n	800744a <takeWifiPass+0x232>
            		cursorPosition = 16;
 8007432:	2310      	movs	r3, #16
 8007434:	613b      	str	r3, [r7, #16]
            		page = 4;
 8007436:	2304      	movs	r3, #4
 8007438:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 800743a:	2104      	movs	r1, #4
 800743c:	2003      	movs	r0, #3
 800743e:	f7f9 fc99 	bl	8000d74 <printTemplate>
 8007442:	e002      	b.n	800744a <takeWifiPass+0x232>
            	}
            } else {
            	cursorPosition--;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	3b01      	subs	r3, #1
 8007448:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 800744a:	2096      	movs	r0, #150	; 0x96
 800744c:	f001 f91c 	bl	8008688 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007450:	2102      	movs	r1, #2
 8007452:	4826      	ldr	r0, [pc, #152]	; (80074ec <takeWifiPass+0x2d4>)
 8007454:	f001 fee8 	bl	8009228 <HAL_GPIO_ReadPin>
 8007458:	4603      	mov	r3, r0
 800745a:	2b01      	cmp	r3, #1
 800745c:	d12d      	bne.n	80074ba <takeWifiPass+0x2a2>
        	HAL_Delay(50);
 800745e:	2032      	movs	r0, #50	; 0x32
 8007460:	f001 f912 	bl	8008688 <HAL_Delay>

        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3b01      	subs	r3, #1
 8007468:	4618      	mov	r0, r3
 800746a:	f7f9 f961 	bl	8000730 <getCharFromCursorPosition>
 800746e:	4603      	mov	r3, r0
 8007470:	4619      	mov	r1, r3
 8007472:	4a1c      	ldr	r2, [pc, #112]	; (80074e4 <takeWifiPass+0x2cc>)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4413      	add	r3, r2
 8007478:	460a      	mov	r2, r1
 800747a:	701a      	strb	r2, [r3, #0]
        	eepromData[eepromPos] = realCharPos - 1;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	b2d9      	uxtb	r1, r3
 8007484:	4a1c      	ldr	r2, [pc, #112]	; (80074f8 <takeWifiPass+0x2e0>)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	4413      	add	r3, r2
 800748a:	460a      	mov	r2, r1
 800748c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	b2d9      	uxtb	r1, r3
 8007492:	4a14      	ldr	r2, [pc, #80]	; (80074e4 <takeWifiPass+0x2cc>)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4413      	add	r3, r2
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	2001      	movs	r0, #1
 800749e:	f000 fbb2 	bl	8007c06 <lcd_print_char>

            writeLoc++;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3301      	adds	r3, #1
 80074a6:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60bb      	str	r3, [r7, #8]
            eepromPos++;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	3301      	adds	r3, #1
 80074b2:	603b      	str	r3, [r7, #0]

            HAL_Delay(150);
 80074b4:	2096      	movs	r0, #150	; 0x96
 80074b6:	f001 f8e7 	bl	8008688 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80074ba:	2104      	movs	r1, #4
 80074bc:	480b      	ldr	r0, [pc, #44]	; (80074ec <takeWifiPass+0x2d4>)
 80074be:	f001 feb3 	bl	8009228 <HAL_GPIO_ReadPin>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d149      	bne.n	800755c <takeWifiPass+0x344>
        	HAL_Delay(50);
 80074c8:	2032      	movs	r0, #50	; 0x32
 80074ca:	f001 f8dd 	bl	8008688 <HAL_Delay>

            if(strlen(wifiPass) >= 1) {
 80074ce:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <takeWifiPass+0x2cc>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d03f      	beq.n	8007556 <takeWifiPass+0x33e>
            	if(writeLoc > 7) {
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b07      	cmp	r3, #7
 80074da:	dd13      	ble.n	8007504 <takeWifiPass+0x2ec>
            		writeLoc--;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3b01      	subs	r3, #1
 80074e0:	607b      	str	r3, [r7, #4]
 80074e2:	e014      	b.n	800750e <takeWifiPass+0x2f6>
 80074e4:	200001c4 	.word	0x200001c4
 80074e8:	2000000c 	.word	0x2000000c
 80074ec:	40010800 	.word	0x40010800
 80074f0:	0800dbcc 	.word	0x0800dbcc
 80074f4:	0800dbf4 	.word	0x0800dbf4
 80074f8:	2000012c 	.word	0x2000012c
 80074fc:	20000290 	.word	0x20000290
 8007500:	40011000 	.word	0x40011000
            	} else if(writeLoc < 7) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b06      	cmp	r3, #6
 8007508:	dc01      	bgt.n	800750e <takeWifiPass+0x2f6>
            		writeLoc = 7;
 800750a:	2307      	movs	r3, #7
 800750c:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	dd06      	ble.n	8007522 <takeWifiPass+0x30a>
            		wifiPassLoc--;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	3b01      	subs	r3, #1
 8007518:	60bb      	str	r3, [r7, #8]
            		eepromPos--;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	3b01      	subs	r3, #1
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	e004      	b.n	800752c <takeWifiPass+0x314>
            	} else if(wifiPassLoc < 0) {
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	da01      	bge.n	800752c <takeWifiPass+0x314>
            		wifiPassLoc = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	60bb      	str	r3, [r7, #8]
            	}

            	wifiPass[wifiPassLoc] = '\0';
 800752c:	4a11      	ldr	r2, [pc, #68]	; (8007574 <takeWifiPass+0x35c>)
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	4413      	add	r3, r2
 8007532:	2200      	movs	r2, #0
 8007534:	701a      	strb	r2, [r3, #0]
            	eepromData[eepromPos] = '\0';
 8007536:	4a10      	ldr	r2, [pc, #64]	; (8007578 <takeWifiPass+0x360>)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	4413      	add	r3, r2
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	3306      	adds	r3, #6
 8007546:	b2db      	uxtb	r3, r3
 8007548:	4619      	mov	r1, r3
 800754a:	2001      	movs	r0, #1
 800754c:	f000 fb7c 	bl	8007c48 <lcd_delete_char>
            	HAL_Delay(50);
 8007550:	2032      	movs	r0, #50	; 0x32
 8007552:	f001 f899 	bl	8008688 <HAL_Delay>
            }

            HAL_Delay(150);
 8007556:	2096      	movs	r0, #150	; 0x96
 8007558:	f001 f896 	bl	8008688 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	4619      	mov	r1, r3
 8007562:	2002      	movs	r0, #2
 8007564:	f000 fb1b 	bl	8007b9e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007568:	e675      	b.n	8007256 <takeWifiPass+0x3e>
    }
}
 800756a:	bf00      	nop
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd90      	pop	{r4, r7, pc}
 8007572:	bf00      	nop
 8007574:	200001c4 	.word	0x200001c4
 8007578:	2000012c 	.word	0x2000012c

0800757c <mergeData>:

char* mergeData() {
 800757c:	b580      	push	{r7, lr}
 800757e:	b09c      	sub	sp, #112	; 0x70
 8007580:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007586:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800758a:	2228      	movs	r2, #40	; 0x28
 800758c:	2100      	movs	r1, #0
 800758e:	4618      	mov	r0, r3
 8007590:	f004 ffd1 	bl	800c536 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007594:	4b67      	ldr	r3, [pc, #412]	; (8007734 <mergeData+0x1b8>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	713b      	strb	r3, [r7, #4]
 800759a:	4b67      	ldr	r3, [pc, #412]	; (8007738 <mergeData+0x1bc>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	717b      	strb	r3, [r7, #5]
 80075a0:	4b66      	ldr	r3, [pc, #408]	; (800773c <mergeData+0x1c0>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	71bb      	strb	r3, [r7, #6]
 80075a6:	4b66      	ldr	r3, [pc, #408]	; (8007740 <mergeData+0x1c4>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	71fb      	strb	r3, [r7, #7]
 80075ac:	4b65      	ldr	r3, [pc, #404]	; (8007744 <mergeData+0x1c8>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	723b      	strb	r3, [r7, #8]
 80075b2:	4b65      	ldr	r3, [pc, #404]	; (8007748 <mergeData+0x1cc>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	727b      	strb	r3, [r7, #9]
 80075b8:	4b64      	ldr	r3, [pc, #400]	; (800774c <mergeData+0x1d0>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	72bb      	strb	r3, [r7, #10]
 80075be:	4b64      	ldr	r3, [pc, #400]	; (8007750 <mergeData+0x1d4>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	72fb      	strb	r3, [r7, #11]
 80075c4:	4b63      	ldr	r3, [pc, #396]	; (8007754 <mergeData+0x1d8>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	733b      	strb	r3, [r7, #12]
 80075ca:	4b63      	ldr	r3, [pc, #396]	; (8007758 <mergeData+0x1dc>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	737b      	strb	r3, [r7, #13]
 80075d0:	4b62      	ldr	r3, [pc, #392]	; (800775c <mergeData+0x1e0>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	73bb      	strb	r3, [r7, #14]
 80075d6:	4b62      	ldr	r3, [pc, #392]	; (8007760 <mergeData+0x1e4>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	73fb      	strb	r3, [r7, #15]
 80075dc:	4b61      	ldr	r3, [pc, #388]	; (8007764 <mergeData+0x1e8>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	743b      	strb	r3, [r7, #16]
 80075e2:	4b61      	ldr	r3, [pc, #388]	; (8007768 <mergeData+0x1ec>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	747b      	strb	r3, [r7, #17]
 80075e8:	4b60      	ldr	r3, [pc, #384]	; (800776c <mergeData+0x1f0>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	74bb      	strb	r3, [r7, #18]
 80075ee:	4b60      	ldr	r3, [pc, #384]	; (8007770 <mergeData+0x1f4>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	74fb      	strb	r3, [r7, #19]
 80075f4:	4b5f      	ldr	r3, [pc, #380]	; (8007774 <mergeData+0x1f8>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	753b      	strb	r3, [r7, #20]
 80075fa:	4b5f      	ldr	r3, [pc, #380]	; (8007778 <mergeData+0x1fc>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	757b      	strb	r3, [r7, #21]
 8007600:	4b5e      	ldr	r3, [pc, #376]	; (800777c <mergeData+0x200>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	75bb      	strb	r3, [r7, #22]
 8007606:	4b5e      	ldr	r3, [pc, #376]	; (8007780 <mergeData+0x204>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	75fb      	strb	r3, [r7, #23]
 800760c:	4b5d      	ldr	r3, [pc, #372]	; (8007784 <mergeData+0x208>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	763b      	strb	r3, [r7, #24]
 8007612:	4b5d      	ldr	r3, [pc, #372]	; (8007788 <mergeData+0x20c>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	767b      	strb	r3, [r7, #25]
 8007618:	4b5c      	ldr	r3, [pc, #368]	; (800778c <mergeData+0x210>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	76bb      	strb	r3, [r7, #26]
 800761e:	4b5c      	ldr	r3, [pc, #368]	; (8007790 <mergeData+0x214>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	76fb      	strb	r3, [r7, #27]
 8007624:	4b5b      	ldr	r3, [pc, #364]	; (8007794 <mergeData+0x218>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	773b      	strb	r3, [r7, #28]
 800762a:	4b5b      	ldr	r3, [pc, #364]	; (8007798 <mergeData+0x21c>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	777b      	strb	r3, [r7, #29]
 8007630:	4b5a      	ldr	r3, [pc, #360]	; (800779c <mergeData+0x220>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	77bb      	strb	r3, [r7, #30]
 8007636:	4b5a      	ldr	r3, [pc, #360]	; (80077a0 <mergeData+0x224>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	77fb      	strb	r3, [r7, #31]
 800763c:	4b59      	ldr	r3, [pc, #356]	; (80077a4 <mergeData+0x228>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f887 3020 	strb.w	r3, [r7, #32]
 8007644:	4b58      	ldr	r3, [pc, #352]	; (80077a8 <mergeData+0x22c>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800764c:	4b57      	ldr	r3, [pc, #348]	; (80077ac <mergeData+0x230>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007654:	4b56      	ldr	r3, [pc, #344]	; (80077b0 <mergeData+0x234>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800765c:	4b55      	ldr	r3, [pc, #340]	; (80077b4 <mergeData+0x238>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007664:	4b54      	ldr	r3, [pc, #336]	; (80077b8 <mergeData+0x23c>)
 8007666:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800766a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 800766e:	4b52      	ldr	r3, [pc, #328]	; (80077b8 <mergeData+0x23c>)
 8007670:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007678:	4b4f      	ldr	r3, [pc, #316]	; (80077b8 <mergeData+0x23c>)
 800767a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800767e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007682:	4b4d      	ldr	r3, [pc, #308]	; (80077b8 <mergeData+0x23c>)
 8007684:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007688:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 800768c:	4b4a      	ldr	r3, [pc, #296]	; (80077b8 <mergeData+0x23c>)
 800768e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007692:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007696:	4b48      	ldr	r3, [pc, #288]	; (80077b8 <mergeData+0x23c>)
 8007698:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800769c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80076a0:	4b45      	ldr	r3, [pc, #276]	; (80077b8 <mergeData+0x23c>)
 80076a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 80076aa:	4b43      	ldr	r3, [pc, #268]	; (80077b8 <mergeData+0x23c>)
 80076ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80076b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80076b4:	4b40      	ldr	r3, [pc, #256]	; (80077b8 <mergeData+0x23c>)
 80076b6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80076ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80076be:	4b3e      	ldr	r3, [pc, #248]	; (80077b8 <mergeData+0x23c>)
 80076c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80076c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80076c8:	2306      	movs	r3, #6
 80076ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80076ce:	2300      	movs	r3, #0
 80076d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076d2:	e015      	b.n	8007700 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80076d4:	1d3a      	adds	r2, r7, #4
 80076d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d8:	4413      	add	r3, r2
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076e2:	4936      	ldr	r1, [pc, #216]	; (80077bc <mergeData+0x240>)
 80076e4:	4618      	mov	r0, r3
 80076e6:	f004 feb5 	bl	800c454 <siprintf>
	    strcat(combinedString, temp);
 80076ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80076ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f004 ff0f 	bl	800c518 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80076fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fc:	3301      	adds	r3, #1
 80076fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007702:	2b2b      	cmp	r3, #43	; 0x2b
 8007704:	d9e6      	bls.n	80076d4 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007706:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800770a:	4618      	mov	r0, r3
 800770c:	f7f8 fd8a 	bl	8000224 <strlen>
 8007710:	4603      	mov	r3, r0
 8007712:	3301      	adds	r3, #1
 8007714:	4618      	mov	r0, r3
 8007716:	f004 fdb5 	bl	800c284 <malloc>
 800771a:	4603      	mov	r3, r0
 800771c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800771e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007722:	4619      	mov	r1, r3
 8007724:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007726:	f004 ff59 	bl	800c5dc <strcpy>
	return result;
 800772a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800772c:	4618      	mov	r0, r3
 800772e:	3770      	adds	r7, #112	; 0x70
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	2000020f 	.word	0x2000020f
 8007738:	20000201 	.word	0x20000201
 800773c:	20000204 	.word	0x20000204
 8007740:	20000205 	.word	0x20000205
 8007744:	20000206 	.word	0x20000206
 8007748:	2000020d 	.word	0x2000020d
 800774c:	20000207 	.word	0x20000207
 8007750:	20000208 	.word	0x20000208
 8007754:	2000020c 	.word	0x2000020c
 8007758:	20000209 	.word	0x20000209
 800775c:	20000219 	.word	0x20000219
 8007760:	2000020a 	.word	0x2000020a
 8007764:	2000021a 	.word	0x2000021a
 8007768:	2000020b 	.word	0x2000020b
 800776c:	2000021b 	.word	0x2000021b
 8007770:	2000020e 	.word	0x2000020e
 8007774:	20000210 	.word	0x20000210
 8007778:	20000211 	.word	0x20000211
 800777c:	20000212 	.word	0x20000212
 8007780:	20000213 	.word	0x20000213
 8007784:	20000214 	.word	0x20000214
 8007788:	20000215 	.word	0x20000215
 800778c:	20000216 	.word	0x20000216
 8007790:	20000217 	.word	0x20000217
 8007794:	20000218 	.word	0x20000218
 8007798:	2000021c 	.word	0x2000021c
 800779c:	2000021e 	.word	0x2000021e
 80077a0:	200001fd 	.word	0x200001fd
 80077a4:	200001fe 	.word	0x200001fe
 80077a8:	20000000 	.word	0x20000000
 80077ac:	20000001 	.word	0x20000001
 80077b0:	200001ff 	.word	0x200001ff
 80077b4:	20000221 	.word	0x20000221
 80077b8:	2000012c 	.word	0x2000012c
 80077bc:	0800dc08 	.word	0x0800dc08

080077c0 <convertAndSendData>:

void convertAndSendData() {
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 80077c6:	4b1a      	ldr	r3, [pc, #104]	; (8007830 <convertAndSendData+0x70>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80077ce:	4a19      	ldr	r2, [pc, #100]	; (8007834 <convertAndSendData+0x74>)
 80077d0:	2101      	movs	r1, #1
 80077d2:	2001      	movs	r0, #1
 80077d4:	f000 fa02 	bl	8007bdc <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80077d8:	4a17      	ldr	r2, [pc, #92]	; (8007838 <convertAndSendData+0x78>)
 80077da:	2101      	movs	r1, #1
 80077dc:	2002      	movs	r0, #2
 80077de:	f000 f9fd 	bl	8007bdc <lcd_print>
 80077e2:	e009      	b.n	80077f8 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80077e4:	4a15      	ldr	r2, [pc, #84]	; (800783c <convertAndSendData+0x7c>)
 80077e6:	2101      	movs	r1, #1
 80077e8:	2001      	movs	r0, #1
 80077ea:	f000 f9f7 	bl	8007bdc <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80077ee:	4a14      	ldr	r2, [pc, #80]	; (8007840 <convertAndSendData+0x80>)
 80077f0:	2101      	movs	r1, #1
 80077f2:	2002      	movs	r0, #2
 80077f4:	f000 f9f2 	bl	8007bdc <lcd_print>
	}
	for(int i=0; i<2; i++) {
 80077f8:	2300      	movs	r3, #0
 80077fa:	607b      	str	r3, [r7, #4]
 80077fc:	e00a      	b.n	8007814 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 80077fe:	f7ff febd 	bl	800757c <mergeData>
 8007802:	4603      	mov	r3, r0
 8007804:	461a      	mov	r2, r3
 8007806:	490f      	ldr	r1, [pc, #60]	; (8007844 <convertAndSendData+0x84>)
 8007808:	480f      	ldr	r0, [pc, #60]	; (8007848 <convertAndSendData+0x88>)
 800780a:	f7f9 f841 	bl	8000890 <sendMachineData>
	for(int i=0; i<2; i++) {
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3301      	adds	r3, #1
 8007812:	607b      	str	r3, [r7, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b01      	cmp	r3, #1
 8007818:	ddf1      	ble.n	80077fe <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 800781a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800781e:	f000 ff33 	bl	8008688 <HAL_Delay>
	lcd_clear();
 8007822:	f000 fa07 	bl	8007c34 <lcd_clear>
}
 8007826:	bf00      	nop
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000221 	.word	0x20000221
 8007834:	0800dc0c 	.word	0x0800dc0c
 8007838:	0800dc20 	.word	0x0800dc20
 800783c:	0800dc34 	.word	0x0800dc34
 8007840:	0800dc48 	.word	0x0800dc48
 8007844:	200001a4 	.word	0x200001a4
 8007848:	2000032c 	.word	0x2000032c

0800784c <iotSetup>:

void iotSetup() {
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007850:	4b12      	ldr	r3, [pc, #72]	; (800789c <iotSetup+0x50>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01f      	beq.n	8007898 <iotSetup+0x4c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007858:	4811      	ldr	r0, [pc, #68]	; (80078a0 <iotSetup+0x54>)
 800785a:	f7f8 fce3 	bl	8000224 <strlen>
 800785e:	4603      	mov	r3, r0
 8007860:	2b0c      	cmp	r3, #12
 8007862:	d001      	beq.n	8007868 <iotSetup+0x1c>
			takeMachineID();
 8007864:	f7ff f9c4 	bl	8006bf0 <takeMachineID>
		}
		HAL_Delay(500);
 8007868:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800786c:	f000 ff0c 	bl	8008688 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 8007870:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <iotSetup+0x58>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <iotSetup+0x30>
			takeWifiSSID();
 8007878:	f7ff fb1c 	bl	8006eb4 <takeWifiSSID>
		}
		HAL_Delay(500);
 800787c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007880:	f000 ff02 	bl	8008688 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 8007884:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <iotSetup+0x5c>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <iotSetup+0x44>
			takeWifiPass();
 800788c:	f7ff fcc4 	bl	8007218 <takeWifiPass>
		}
		HAL_Delay(500);
 8007890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007894:	f000 fef8 	bl	8008688 <HAL_Delay>
	}

	//ESP8266_Init(&huart1, wifiSSID, wifiPass);
	//HAL_Delay(500);
	//convertAndSendData();
}
 8007898:	bf00      	nop
 800789a:	bd80      	pop	{r7, pc}
 800789c:	2000021f 	.word	0x2000021f
 80078a0:	200001a4 	.word	0x200001a4
 80078a4:	200001b0 	.word	0x200001b0
 80078a8:	200001c4 	.word	0x200001c4

080078ac <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	4603      	mov	r3, r0
 80078b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	f023 030f 	bic.w	r3, r3, #15
 80078bc:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80078c4:	7b7b      	ldrb	r3, [r7, #13]
 80078c6:	f043 030c 	orr.w	r3, r3, #12
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80078ce:	7b7b      	ldrb	r3, [r7, #13]
 80078d0:	f043 0308 	orr.w	r3, r3, #8
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80078d8:	7b3b      	ldrb	r3, [r7, #12]
 80078da:	f043 030c 	orr.w	r3, r3, #12
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80078e2:	7b3b      	ldrb	r3, [r7, #12]
 80078e4:	f043 0308 	orr.w	r3, r3, #8
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80078ec:	bf00      	nop
 80078ee:	4825      	ldr	r0, [pc, #148]	; (8007984 <lcd_send_cmd+0xd8>)
 80078f0:	f002 fac3 	bl	8009e7a <HAL_I2C_GetError>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d0f9      	beq.n	80078ee <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80078fa:	bf00      	nop
 80078fc:	4821      	ldr	r0, [pc, #132]	; (8007984 <lcd_send_cmd+0xd8>)
 80078fe:	f002 faaf 	bl	8009e60 <HAL_I2C_GetState>
 8007902:	4603      	mov	r3, r0
 8007904:	2b20      	cmp	r3, #32
 8007906:	d1f9      	bne.n	80078fc <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007908:	4b1f      	ldr	r3, [pc, #124]	; (8007988 <lcd_send_cmd+0xdc>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d116      	bne.n	800793e <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007910:	2300      	movs	r3, #0
 8007912:	73fb      	strb	r3, [r7, #15]
 8007914:	e00f      	b.n	8007936 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	3310      	adds	r3, #16
 800791a:	443b      	add	r3, r7
 800791c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	f022 0208 	bic.w	r2, r2, #8
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	3310      	adds	r3, #16
 800792a:	443b      	add	r3, r7
 800792c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	3301      	adds	r3, #1
 8007934:	73fb      	strb	r3, [r7, #15]
 8007936:	7bfb      	ldrb	r3, [r7, #15]
 8007938:	2b03      	cmp	r3, #3
 800793a:	d9ec      	bls.n	8007916 <lcd_send_cmd+0x6a>
 800793c:	e015      	b.n	800796a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800793e:	2300      	movs	r3, #0
 8007940:	73bb      	strb	r3, [r7, #14]
 8007942:	e00f      	b.n	8007964 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	3310      	adds	r3, #16
 8007948:	443b      	add	r3, r7
 800794a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	f042 0208 	orr.w	r2, r2, #8
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	3310      	adds	r3, #16
 8007958:	443b      	add	r3, r7
 800795a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	3301      	adds	r3, #1
 8007962:	73bb      	strb	r3, [r7, #14]
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b03      	cmp	r3, #3
 8007968:	d9ec      	bls.n	8007944 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800796a:	f107 0208 	add.w	r2, r7, #8
 800796e:	2364      	movs	r3, #100	; 0x64
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	2304      	movs	r3, #4
 8007974:	214e      	movs	r1, #78	; 0x4e
 8007976:	4803      	ldr	r0, [pc, #12]	; (8007984 <lcd_send_cmd+0xd8>)
 8007978:	f001 fe12 	bl	80095a0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800797c:	bf00      	nop
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	20000290 	.word	0x20000290
 8007988:	20000264 	.word	0x20000264

0800798c <lcd_send_data>:

void lcd_send_data (char data) {
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af02      	add	r7, sp, #8
 8007992:	4603      	mov	r3, r0
 8007994:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	f023 030f 	bic.w	r3, r3, #15
 800799c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	011b      	lsls	r3, r3, #4
 80079a2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80079a4:	7b7b      	ldrb	r3, [r7, #13]
 80079a6:	f043 030d 	orr.w	r3, r3, #13
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80079ae:	7b7b      	ldrb	r3, [r7, #13]
 80079b0:	f043 0309 	orr.w	r3, r3, #9
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80079b8:	7b3b      	ldrb	r3, [r7, #12]
 80079ba:	f043 030d 	orr.w	r3, r3, #13
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80079c2:	7b3b      	ldrb	r3, [r7, #12]
 80079c4:	f043 0309 	orr.w	r3, r3, #9
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079cc:	bf00      	nop
 80079ce:	4825      	ldr	r0, [pc, #148]	; (8007a64 <lcd_send_data+0xd8>)
 80079d0:	f002 fa53 	bl	8009e7a <HAL_I2C_GetError>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d0f9      	beq.n	80079ce <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80079da:	bf00      	nop
 80079dc:	4821      	ldr	r0, [pc, #132]	; (8007a64 <lcd_send_data+0xd8>)
 80079de:	f002 fa3f 	bl	8009e60 <HAL_I2C_GetState>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	d1f9      	bne.n	80079dc <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80079e8:	4b1f      	ldr	r3, [pc, #124]	; (8007a68 <lcd_send_data+0xdc>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d116      	bne.n	8007a1e <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]
 80079f4:	e00f      	b.n	8007a16 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	3310      	adds	r3, #16
 80079fa:	443b      	add	r3, r7
 80079fc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	f022 0208 	bic.w	r2, r2, #8
 8007a06:	b2d2      	uxtb	r2, r2
 8007a08:	3310      	adds	r3, #16
 8007a0a:	443b      	add	r3, r7
 8007a0c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	3301      	adds	r3, #1
 8007a14:	73fb      	strb	r3, [r7, #15]
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d9ec      	bls.n	80079f6 <lcd_send_data+0x6a>
 8007a1c:	e015      	b.n	8007a4a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73bb      	strb	r3, [r7, #14]
 8007a22:	e00f      	b.n	8007a44 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	3310      	adds	r3, #16
 8007a28:	443b      	add	r3, r7
 8007a2a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	f042 0208 	orr.w	r2, r2, #8
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	3310      	adds	r3, #16
 8007a38:	443b      	add	r3, r7
 8007a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	3301      	adds	r3, #1
 8007a42:	73bb      	strb	r3, [r7, #14]
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d9ec      	bls.n	8007a24 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007a4a:	f107 0208 	add.w	r2, r7, #8
 8007a4e:	2364      	movs	r3, #100	; 0x64
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	2304      	movs	r3, #4
 8007a54:	214e      	movs	r1, #78	; 0x4e
 8007a56:	4803      	ldr	r0, [pc, #12]	; (8007a64 <lcd_send_data+0xd8>)
 8007a58:	f001 fda2 	bl	80095a0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007a5c:	bf00      	nop
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	20000290 	.word	0x20000290
 8007a68:	20000264 	.word	0x20000264

08007a6c <lcd_send_string>:

void lcd_send_string (char *str) {
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007a74:	e006      	b.n	8007a84 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff ff84 	bl	800798c <lcd_send_data>
	while (*str) {
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f4      	bne.n	8007a76 <lcd_send_string+0xa>
	}
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	f023 030f 	bic.w	r3, r3, #15
 8007aa8:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007ab0:	7b7b      	ldrb	r3, [r7, #13]
 8007ab2:	f043 030d 	orr.w	r3, r3, #13
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007aba:	7b7b      	ldrb	r3, [r7, #13]
 8007abc:	f043 0309 	orr.w	r3, r3, #9
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007ac4:	7b3b      	ldrb	r3, [r7, #12]
 8007ac6:	f043 030d 	orr.w	r3, r3, #13
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007ace:	7b3b      	ldrb	r3, [r7, #12]
 8007ad0:	f043 0309 	orr.w	r3, r3, #9
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007ad8:	bf00      	nop
 8007ada:	4825      	ldr	r0, [pc, #148]	; (8007b70 <lcd_send_char+0xd8>)
 8007adc:	f002 f9cd 	bl	8009e7a <HAL_I2C_GetError>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d0f9      	beq.n	8007ada <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ae6:	bf00      	nop
 8007ae8:	4821      	ldr	r0, [pc, #132]	; (8007b70 <lcd_send_char+0xd8>)
 8007aea:	f002 f9b9 	bl	8009e60 <HAL_I2C_GetState>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d1f9      	bne.n	8007ae8 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007af4:	4b1f      	ldr	r3, [pc, #124]	; (8007b74 <lcd_send_char+0xdc>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d116      	bne.n	8007b2a <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
 8007b00:	e00f      	b.n	8007b22 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	3310      	adds	r3, #16
 8007b06:	443b      	add	r3, r7
 8007b08:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	f022 0208 	bic.w	r2, r2, #8
 8007b12:	b2d2      	uxtb	r2, r2
 8007b14:	3310      	adds	r3, #16
 8007b16:	443b      	add	r3, r7
 8007b18:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	73fb      	strb	r3, [r7, #15]
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d9ec      	bls.n	8007b02 <lcd_send_char+0x6a>
 8007b28:	e015      	b.n	8007b56 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73bb      	strb	r3, [r7, #14]
 8007b2e:	e00f      	b.n	8007b50 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	3310      	adds	r3, #16
 8007b34:	443b      	add	r3, r7
 8007b36:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	f042 0208 	orr.w	r2, r2, #8
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	3310      	adds	r3, #16
 8007b44:	443b      	add	r3, r7
 8007b46:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	73bb      	strb	r3, [r7, #14]
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d9ec      	bls.n	8007b30 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007b56:	f107 0208 	add.w	r2, r7, #8
 8007b5a:	2364      	movs	r3, #100	; 0x64
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2304      	movs	r3, #4
 8007b60:	214e      	movs	r1, #78	; 0x4e
 8007b62:	4803      	ldr	r0, [pc, #12]	; (8007b70 <lcd_send_char+0xd8>)
 8007b64:	f001 fd1c 	bl	80095a0 <HAL_I2C_Master_Transmit>
}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20000290 	.word	0x20000290
 8007b74:	20000264 	.word	0x20000264

08007b78 <lcd_init>:

void lcd_init (void) {
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007b7c:	2002      	movs	r0, #2
 8007b7e:	f7ff fe95 	bl	80078ac <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007b82:	2028      	movs	r0, #40	; 0x28
 8007b84:	f7ff fe92 	bl	80078ac <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007b88:	200c      	movs	r0, #12
 8007b8a:	f7ff fe8f 	bl	80078ac <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007b8e:	2080      	movs	r0, #128	; 0x80
 8007b90:	f7ff fe8c 	bl	80078ac <lcd_send_cmd>
	lcd_backlight(1);
 8007b94:	2001      	movs	r0, #1
 8007b96:	f000 f86d 	bl	8007c74 <lcd_backlight>
}
 8007b9a:	bf00      	nop
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	71fb      	strb	r3, [r7, #7]
 8007baa:	4613      	mov	r3, r2
 8007bac:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007bae:	79fb      	ldrb	r3, [r7, #7]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d106      	bne.n	8007bc2 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007bb4:	79bb      	ldrb	r3, [r7, #6]
 8007bb6:	337f      	adds	r3, #127	; 0x7f
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff fe76 	bl	80078ac <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007bc0:	e008      	b.n	8007bd4 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d105      	bne.n	8007bd4 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007bc8:	79bb      	ldrb	r3, [r7, #6]
 8007bca:	3b41      	subs	r3, #65	; 0x41
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff fe6c 	bl	80078ac <lcd_send_cmd>
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	603a      	str	r2, [r7, #0]
 8007be6:	71fb      	strb	r3, [r7, #7]
 8007be8:	460b      	mov	r3, r1
 8007bea:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007bec:	79ba      	ldrb	r2, [r7, #6]
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff ffd3 	bl	8007b9e <lcd_gotoxy>
	lcd_send_string(str);
 8007bf8:	6838      	ldr	r0, [r7, #0]
 8007bfa:	f7ff ff37 	bl	8007a6c <lcd_send_string>
}
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	71fb      	strb	r3, [r7, #7]
 8007c10:	460b      	mov	r3, r1
 8007c12:	71bb      	strb	r3, [r7, #6]
 8007c14:	4613      	mov	r3, r2
 8007c16:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007c18:	79ba      	ldrb	r2, [r7, #6]
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff ffbd 	bl	8007b9e <lcd_gotoxy>
    lcd_send_char(ch);
 8007c24:	797b      	ldrb	r3, [r7, #5]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7ff ff36 	bl	8007a98 <lcd_send_char>
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <lcd_clear>:

void lcd_clear(void) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007c38:	2001      	movs	r0, #1
 8007c3a:	f7ff fe37 	bl	80078ac <lcd_send_cmd>
    HAL_Delay(2);
 8007c3e:	2002      	movs	r0, #2
 8007c40:	f000 fd22 	bl	8008688 <HAL_Delay>
}
 8007c44:	bf00      	nop
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	460a      	mov	r2, r1
 8007c52:	71fb      	strb	r3, [r7, #7]
 8007c54:	4613      	mov	r3, r2
 8007c56:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007c58:	79ba      	ldrb	r2, [r7, #6]
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff ff9d 	bl	8007b9e <lcd_gotoxy>

    lcd_send_char(' ');
 8007c64:	2020      	movs	r0, #32
 8007c66:	f7ff ff17 	bl	8007a98 <lcd_send_char>
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007c7e:	4a05      	ldr	r2, [pc, #20]	; (8007c94 <lcd_backlight+0x20>)
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007c84:	2000      	movs	r0, #0
 8007c86:	f7ff fe11 	bl	80078ac <lcd_send_cmd>
}
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20000264 	.word	0x20000264

08007c98 <lcd_cursor>:

void lcd_cursor(int state) {
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d106      	bne.n	8007cb4 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007ca6:	200e      	movs	r0, #14
 8007ca8:	f7ff fe00 	bl	80078ac <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007cac:	200f      	movs	r0, #15
 8007cae:	f7ff fdfd 	bl	80078ac <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007cb2:	e002      	b.n	8007cba <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007cb4:	200c      	movs	r0, #12
 8007cb6:	f7ff fdf9 	bl	80078ac <lcd_send_cmd>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007ccc:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	4a03      	ldr	r2, [pc, #12]	; (8007ce0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007cd4:	6013      	str	r3, [r2, #0]
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr
 8007ce0:	200001dc 	.word	0x200001dc

08007ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ce8:	f000 fc6c 	bl	80085c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007cec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007cf0:	f000 fcca 	bl	8008688 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007cf4:	f000 f89c 	bl	8007e30 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007cf8:	f000 f9be 	bl	8008078 <MX_GPIO_Init>
  MX_CAN_Init();
 8007cfc:	f000 f8de 	bl	8007ebc <MX_CAN_Init>
  MX_I2C1_Init();
 8007d00:	f000 f910 	bl	8007f24 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007d04:	f000 f93c 	bl	8007f80 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007d08:	f000 f98c 	bl	8008024 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	2140      	movs	r1, #64	; 0x40
 8007d10:	483e      	ldr	r0, [pc, #248]	; (8007e0c <main+0x128>)
 8007d12:	f001 faa0 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007d16:	2201      	movs	r2, #1
 8007d18:	2180      	movs	r1, #128	; 0x80
 8007d1a:	483c      	ldr	r0, [pc, #240]	; (8007e0c <main+0x128>)
 8007d1c:	f001 fa9b 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007d20:	200a      	movs	r0, #10
 8007d22:	f000 fcb1 	bl	8008688 <HAL_Delay>
  lcd_init();
 8007d26:	f7ff ff27 	bl	8007b78 <lcd_init>
  HAL_Delay(10);
 8007d2a:	200a      	movs	r0, #10
 8007d2c:	f000 fcac 	bl	8008688 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007d30:	4837      	ldr	r0, [pc, #220]	; (8007e10 <main+0x12c>)
 8007d32:	f003 f943 	bl	800afbc <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007d36:	bf00      	nop
 8007d38:	4836      	ldr	r0, [pc, #216]	; (8007e14 <main+0x130>)
 8007d3a:	f002 f89e 	bl	8009e7a <HAL_I2C_GetError>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d0f9      	beq.n	8007d38 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007d44:	bf00      	nop
 8007d46:	4833      	ldr	r0, [pc, #204]	; (8007e14 <main+0x130>)
 8007d48:	f002 f88a 	bl	8009e60 <HAL_I2C_GetState>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d1f9      	bne.n	8007d46 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007d52:	2200      	movs	r2, #0
 8007d54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d58:	482c      	ldr	r0, [pc, #176]	; (8007e0c <main+0x128>)
 8007d5a:	f001 fa7c 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d64:	4829      	ldr	r0, [pc, #164]	; (8007e0c <main+0x128>)
 8007d66:	f001 fa76 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2104      	movs	r1, #4
 8007d6e:	4827      	ldr	r0, [pc, #156]	; (8007e0c <main+0x128>)
 8007d70:	f001 fa71 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007d74:	2200      	movs	r2, #0
 8007d76:	2102      	movs	r1, #2
 8007d78:	4824      	ldr	r0, [pc, #144]	; (8007e0c <main+0x128>)
 8007d7a:	f001 fa6c 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2101      	movs	r1, #1
 8007d82:	4822      	ldr	r0, [pc, #136]	; (8007e0c <main+0x128>)
 8007d84:	f001 fa67 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2120      	movs	r1, #32
 8007d8c:	4822      	ldr	r0, [pc, #136]	; (8007e18 <main+0x134>)
 8007d8e:	f001 fa62 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007d92:	2200      	movs	r2, #0
 8007d94:	2110      	movs	r1, #16
 8007d96:	4820      	ldr	r0, [pc, #128]	; (8007e18 <main+0x134>)
 8007d98:	f001 fa5d 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2180      	movs	r1, #128	; 0x80
 8007da0:	481e      	ldr	r0, [pc, #120]	; (8007e1c <main+0x138>)
 8007da2:	f001 fa58 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2140      	movs	r1, #64	; 0x40
 8007daa:	481c      	ldr	r0, [pc, #112]	; (8007e1c <main+0x138>)
 8007dac:	f001 fa53 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007db0:	2200      	movs	r2, #0
 8007db2:	2120      	movs	r1, #32
 8007db4:	4819      	ldr	r0, [pc, #100]	; (8007e1c <main+0x138>)
 8007db6:	f001 fa4e 	bl	8009256 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2110      	movs	r1, #16
 8007dbe:	4817      	ldr	r0, [pc, #92]	; (8007e1c <main+0x138>)
 8007dc0:	f001 fa49 	bl	8009256 <HAL_GPIO_WritePin>

  i2cTest();
 8007dc4:	f7f8 ff28 	bl	8000c18 <i2cTest>
  HAL_Delay(100);
 8007dc8:	2064      	movs	r0, #100	; 0x64
 8007dca:	f000 fc5d 	bl	8008688 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007dce:	4a14      	ldr	r2, [pc, #80]	; (8007e20 <main+0x13c>)
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	f7ff ff02 	bl	8007bdc <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007dd8:	4a12      	ldr	r2, [pc, #72]	; (8007e24 <main+0x140>)
 8007dda:	2101      	movs	r1, #1
 8007ddc:	2002      	movs	r0, #2
 8007dde:	f7ff fefd 	bl	8007bdc <lcd_print>
  HAL_Delay(1000);
 8007de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007de6:	f000 fc4f 	bl	8008688 <HAL_Delay>
  lcd_clear();
 8007dea:	f7ff ff23 	bl	8007c34 <lcd_clear>

  eepromKontrol();
 8007dee:	f7f8 fa21 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007df2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007df6:	f000 fc47 	bl	8008688 <HAL_Delay>

  backLightTimer = millis;
 8007dfa:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <main+0x144>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a0b      	ldr	r2, [pc, #44]	; (8007e2c <main+0x148>)
 8007e00:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007e02:	f7ff fd23 	bl	800784c <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007e06:	f7fe fd5b 	bl	80068c0 <mainLoop>
 8007e0a:	e7fc      	b.n	8007e06 <main+0x122>
 8007e0c:	40010c00 	.word	0x40010c00
 8007e10:	200002e4 	.word	0x200002e4
 8007e14:	20000290 	.word	0x20000290
 8007e18:	40011000 	.word	0x40011000
 8007e1c:	40010800 	.word	0x40010800
 8007e20:	0800dc5c 	.word	0x0800dc5c
 8007e24:	0800dc70 	.word	0x0800dc70
 8007e28:	200001dc 	.word	0x200001dc
 8007e2c:	200001f8 	.word	0x200001f8

08007e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b090      	sub	sp, #64	; 0x40
 8007e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e36:	f107 0318 	add.w	r3, r7, #24
 8007e3a:	2228      	movs	r2, #40	; 0x28
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f004 fb79 	bl	800c536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e44:	1d3b      	adds	r3, r7, #4
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	605a      	str	r2, [r3, #4]
 8007e4c:	609a      	str	r2, [r3, #8]
 8007e4e:	60da      	str	r2, [r3, #12]
 8007e50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e52:	2301      	movs	r3, #1
 8007e54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e60:	2301      	movs	r3, #1
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e64:	2302      	movs	r3, #2
 8007e66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007e6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e74:	f107 0318 	add.w	r3, r7, #24
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f002 fc3f 	bl	800a6fc <HAL_RCC_OscConfig>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007e84:	f000 f9a2 	bl	80081cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e88:	230f      	movs	r3, #15
 8007e8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007e9e:	1d3b      	adds	r3, r7, #4
 8007ea0:	2102      	movs	r1, #2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 feac 	bl	800ac00 <HAL_RCC_ClockConfig>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007eae:	f000 f98d 	bl	80081cc <Error_Handler>
  }
}
 8007eb2:	bf00      	nop
 8007eb4:	3740      	adds	r7, #64	; 0x40
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007ec0:	4b16      	ldr	r3, [pc, #88]	; (8007f1c <MX_CAN_Init+0x60>)
 8007ec2:	4a17      	ldr	r2, [pc, #92]	; (8007f20 <MX_CAN_Init+0x64>)
 8007ec4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007ec6:	4b15      	ldr	r3, [pc, #84]	; (8007f1c <MX_CAN_Init+0x60>)
 8007ec8:	2210      	movs	r2, #16
 8007eca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007ecc:	4b13      	ldr	r3, [pc, #76]	; (8007f1c <MX_CAN_Init+0x60>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007ed2:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <MX_CAN_Init+0x60>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007ed8:	4b10      	ldr	r3, [pc, #64]	; (8007f1c <MX_CAN_Init+0x60>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <MX_CAN_Init+0x60>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007ee4:	4b0d      	ldr	r3, [pc, #52]	; (8007f1c <MX_CAN_Init+0x60>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007eea:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <MX_CAN_Init+0x60>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <MX_CAN_Init+0x60>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <MX_CAN_Init+0x60>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007efc:	4b07      	ldr	r3, [pc, #28]	; (8007f1c <MX_CAN_Init+0x60>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007f02:	4b06      	ldr	r3, [pc, #24]	; (8007f1c <MX_CAN_Init+0x60>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007f08:	4804      	ldr	r0, [pc, #16]	; (8007f1c <MX_CAN_Init+0x60>)
 8007f0a:	f000 fbe1 	bl	80086d0 <HAL_CAN_Init>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007f14:	f000 f95a 	bl	80081cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007f18:	bf00      	nop
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20000268 	.word	0x20000268
 8007f20:	40006400 	.word	0x40006400

08007f24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007f28:	4b12      	ldr	r3, [pc, #72]	; (8007f74 <MX_I2C1_Init+0x50>)
 8007f2a:	4a13      	ldr	r2, [pc, #76]	; (8007f78 <MX_I2C1_Init+0x54>)
 8007f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007f2e:	4b11      	ldr	r3, [pc, #68]	; (8007f74 <MX_I2C1_Init+0x50>)
 8007f30:	4a12      	ldr	r2, [pc, #72]	; (8007f7c <MX_I2C1_Init+0x58>)
 8007f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007f34:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <MX_I2C1_Init+0x50>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007f3a:	4b0e      	ldr	r3, [pc, #56]	; (8007f74 <MX_I2C1_Init+0x50>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f40:	4b0c      	ldr	r3, [pc, #48]	; (8007f74 <MX_I2C1_Init+0x50>)
 8007f42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f48:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <MX_I2C1_Init+0x50>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007f4e:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <MX_I2C1_Init+0x50>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f54:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <MX_I2C1_Init+0x50>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f5a:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <MX_I2C1_Init+0x50>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f60:	4804      	ldr	r0, [pc, #16]	; (8007f74 <MX_I2C1_Init+0x50>)
 8007f62:	f001 f9a9 	bl	80092b8 <HAL_I2C_Init>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007f6c:	f000 f92e 	bl	80081cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007f70:	bf00      	nop
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	20000290 	.word	0x20000290
 8007f78:	40005400 	.word	0x40005400
 8007f7c:	00061a80 	.word	0x00061a80

08007f80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f86:	f107 0308 	add.w	r3, r7, #8
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	605a      	str	r2, [r3, #4]
 8007f90:	609a      	str	r2, [r3, #8]
 8007f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f94:	463b      	mov	r3, r7
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007f9c:	4b1f      	ldr	r3, [pc, #124]	; (800801c <MX_TIM1_Init+0x9c>)
 8007f9e:	4a20      	ldr	r2, [pc, #128]	; (8008020 <MX_TIM1_Init+0xa0>)
 8007fa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007fa2:	4b1e      	ldr	r3, [pc, #120]	; (800801c <MX_TIM1_Init+0x9c>)
 8007fa4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007fa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007faa:	4b1c      	ldr	r3, [pc, #112]	; (800801c <MX_TIM1_Init+0x9c>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007fb0:	4b1a      	ldr	r3, [pc, #104]	; (800801c <MX_TIM1_Init+0x9c>)
 8007fb2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007fb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fb8:	4b18      	ldr	r3, [pc, #96]	; (800801c <MX_TIM1_Init+0x9c>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007fbe:	4b17      	ldr	r3, [pc, #92]	; (800801c <MX_TIM1_Init+0x9c>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fc4:	4b15      	ldr	r3, [pc, #84]	; (800801c <MX_TIM1_Init+0x9c>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007fca:	4814      	ldr	r0, [pc, #80]	; (800801c <MX_TIM1_Init+0x9c>)
 8007fcc:	f002 ffa6 	bl	800af1c <HAL_TIM_Base_Init>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007fd6:	f000 f8f9 	bl	80081cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007fe0:	f107 0308 	add.w	r3, r7, #8
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	480d      	ldr	r0, [pc, #52]	; (800801c <MX_TIM1_Init+0x9c>)
 8007fe8:	f003 f950 	bl	800b28c <HAL_TIM_ConfigClockSource>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007ff2:	f000 f8eb 	bl	80081cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007ffe:	463b      	mov	r3, r7
 8008000:	4619      	mov	r1, r3
 8008002:	4806      	ldr	r0, [pc, #24]	; (800801c <MX_TIM1_Init+0x9c>)
 8008004:	f003 fb3e 	bl	800b684 <HAL_TIMEx_MasterConfigSynchronization>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800800e:	f000 f8dd 	bl	80081cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008012:	bf00      	nop
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	200002e4 	.word	0x200002e4
 8008020:	40012c00 	.word	0x40012c00

08008024 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008028:	4b11      	ldr	r3, [pc, #68]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 800802a:	4a12      	ldr	r2, [pc, #72]	; (8008074 <MX_USART1_UART_Init+0x50>)
 800802c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800802e:	4b10      	ldr	r3, [pc, #64]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 8008030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008036:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 8008038:	2200      	movs	r2, #0
 800803a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 800803e:	2200      	movs	r2, #0
 8008040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 8008044:	2200      	movs	r2, #0
 8008046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008048:	4b09      	ldr	r3, [pc, #36]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 800804a:	220c      	movs	r2, #12
 800804c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800804e:	4b08      	ldr	r3, [pc, #32]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 8008050:	2200      	movs	r2, #0
 8008052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 8008056:	2200      	movs	r2, #0
 8008058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800805a:	4805      	ldr	r0, [pc, #20]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 800805c:	f003 fb90 	bl	800b780 <HAL_UART_Init>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008066:	f000 f8b1 	bl	80081cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800806a:	bf00      	nop
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	2000032c 	.word	0x2000032c
 8008074:	40013800 	.word	0x40013800

08008078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b088      	sub	sp, #32
 800807c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800807e:	f107 0310 	add.w	r3, r7, #16
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	605a      	str	r2, [r3, #4]
 8008088:	609a      	str	r2, [r3, #8]
 800808a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800808c:	4b4b      	ldr	r3, [pc, #300]	; (80081bc <MX_GPIO_Init+0x144>)
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	4a4a      	ldr	r2, [pc, #296]	; (80081bc <MX_GPIO_Init+0x144>)
 8008092:	f043 0310 	orr.w	r3, r3, #16
 8008096:	6193      	str	r3, [r2, #24]
 8008098:	4b48      	ldr	r3, [pc, #288]	; (80081bc <MX_GPIO_Init+0x144>)
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80080a4:	4b45      	ldr	r3, [pc, #276]	; (80081bc <MX_GPIO_Init+0x144>)
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	4a44      	ldr	r2, [pc, #272]	; (80081bc <MX_GPIO_Init+0x144>)
 80080aa:	f043 0320 	orr.w	r3, r3, #32
 80080ae:	6193      	str	r3, [r2, #24]
 80080b0:	4b42      	ldr	r3, [pc, #264]	; (80081bc <MX_GPIO_Init+0x144>)
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	60bb      	str	r3, [r7, #8]
 80080ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080bc:	4b3f      	ldr	r3, [pc, #252]	; (80081bc <MX_GPIO_Init+0x144>)
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	4a3e      	ldr	r2, [pc, #248]	; (80081bc <MX_GPIO_Init+0x144>)
 80080c2:	f043 0304 	orr.w	r3, r3, #4
 80080c6:	6193      	str	r3, [r2, #24]
 80080c8:	4b3c      	ldr	r3, [pc, #240]	; (80081bc <MX_GPIO_Init+0x144>)
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	607b      	str	r3, [r7, #4]
 80080d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80080d4:	4b39      	ldr	r3, [pc, #228]	; (80081bc <MX_GPIO_Init+0x144>)
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	4a38      	ldr	r2, [pc, #224]	; (80081bc <MX_GPIO_Init+0x144>)
 80080da:	f043 0308 	orr.w	r3, r3, #8
 80080de:	6193      	str	r3, [r2, #24]
 80080e0:	4b36      	ldr	r3, [pc, #216]	; (80081bc <MX_GPIO_Init+0x144>)
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	603b      	str	r3, [r7, #0]
 80080ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80080ec:	2200      	movs	r2, #0
 80080ee:	21f0      	movs	r1, #240	; 0xf0
 80080f0:	4833      	ldr	r0, [pc, #204]	; (80081c0 <MX_GPIO_Init+0x148>)
 80080f2:	f001 f8b0 	bl	8009256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80080f6:	2200      	movs	r2, #0
 80080f8:	f241 0130 	movw	r1, #4144	; 0x1030
 80080fc:	4831      	ldr	r0, [pc, #196]	; (80081c4 <MX_GPIO_Init+0x14c>)
 80080fe:	f001 f8aa 	bl	8009256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008102:	2200      	movs	r2, #0
 8008104:	f640 4107 	movw	r1, #3079	; 0xc07
 8008108:	482f      	ldr	r0, [pc, #188]	; (80081c8 <MX_GPIO_Init+0x150>)
 800810a:	f001 f8a4 	bl	8009256 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800810e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008112:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008118:	2300      	movs	r3, #0
 800811a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800811c:	f107 0310 	add.w	r3, r7, #16
 8008120:	4619      	mov	r1, r3
 8008122:	4828      	ldr	r0, [pc, #160]	; (80081c4 <MX_GPIO_Init+0x14c>)
 8008124:	f000 fe20 	bl	8008d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008128:	f248 130f 	movw	r3, #33039	; 0x810f
 800812c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008132:	2300      	movs	r3, #0
 8008134:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008136:	f107 0310 	add.w	r3, r7, #16
 800813a:	4619      	mov	r1, r3
 800813c:	4820      	ldr	r0, [pc, #128]	; (80081c0 <MX_GPIO_Init+0x148>)
 800813e:	f000 fe13 	bl	8008d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008142:	23f0      	movs	r3, #240	; 0xf0
 8008144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008146:	2301      	movs	r3, #1
 8008148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800814a:	2300      	movs	r3, #0
 800814c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800814e:	2302      	movs	r3, #2
 8008150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008152:	f107 0310 	add.w	r3, r7, #16
 8008156:	4619      	mov	r1, r3
 8008158:	4819      	ldr	r0, [pc, #100]	; (80081c0 <MX_GPIO_Init+0x148>)
 800815a:	f000 fe05 	bl	8008d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800815e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008164:	2301      	movs	r3, #1
 8008166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008168:	2300      	movs	r3, #0
 800816a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800816c:	2302      	movs	r3, #2
 800816e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008170:	f107 0310 	add.w	r3, r7, #16
 8008174:	4619      	mov	r1, r3
 8008176:	4813      	ldr	r0, [pc, #76]	; (80081c4 <MX_GPIO_Init+0x14c>)
 8008178:	f000 fdf6 	bl	8008d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800817c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008180:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008182:	2301      	movs	r3, #1
 8008184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008186:	2300      	movs	r3, #0
 8008188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800818a:	2302      	movs	r3, #2
 800818c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800818e:	f107 0310 	add.w	r3, r7, #16
 8008192:	4619      	mov	r1, r3
 8008194:	480c      	ldr	r0, [pc, #48]	; (80081c8 <MX_GPIO_Init+0x150>)
 8008196:	f000 fde7 	bl	8008d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800819a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800819e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081a0:	2300      	movs	r3, #0
 80081a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081a8:	f107 0310 	add.w	r3, r7, #16
 80081ac:	4619      	mov	r1, r3
 80081ae:	4806      	ldr	r0, [pc, #24]	; (80081c8 <MX_GPIO_Init+0x150>)
 80081b0:	f000 fdda 	bl	8008d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80081b4:	bf00      	nop
 80081b6:	3720      	adds	r7, #32
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	40021000 	.word	0x40021000
 80081c0:	40010800 	.word	0x40010800
 80081c4:	40011000 	.word	0x40011000
 80081c8:	40010c00 	.word	0x40010c00

080081cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80081d0:	bf00      	nop
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bc80      	pop	{r7}
 80081d6:	4770      	bx	lr

080081d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80081de:	4b15      	ldr	r3, [pc, #84]	; (8008234 <HAL_MspInit+0x5c>)
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	4a14      	ldr	r2, [pc, #80]	; (8008234 <HAL_MspInit+0x5c>)
 80081e4:	f043 0301 	orr.w	r3, r3, #1
 80081e8:	6193      	str	r3, [r2, #24]
 80081ea:	4b12      	ldr	r3, [pc, #72]	; (8008234 <HAL_MspInit+0x5c>)
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	60bb      	str	r3, [r7, #8]
 80081f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80081f6:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <HAL_MspInit+0x5c>)
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	4a0e      	ldr	r2, [pc, #56]	; (8008234 <HAL_MspInit+0x5c>)
 80081fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008200:	61d3      	str	r3, [r2, #28]
 8008202:	4b0c      	ldr	r3, [pc, #48]	; (8008234 <HAL_MspInit+0x5c>)
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800820a:	607b      	str	r3, [r7, #4]
 800820c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800820e:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <HAL_MspInit+0x60>)
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	4a04      	ldr	r2, [pc, #16]	; (8008238 <HAL_MspInit+0x60>)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr
 8008234:	40021000 	.word	0x40021000
 8008238:	40010000 	.word	0x40010000

0800823c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008244:	f107 0310 	add.w	r3, r7, #16
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	605a      	str	r2, [r3, #4]
 800824e:	609a      	str	r2, [r3, #8]
 8008250:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a1c      	ldr	r2, [pc, #112]	; (80082c8 <HAL_CAN_MspInit+0x8c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d131      	bne.n	80082c0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800825c:	4b1b      	ldr	r3, [pc, #108]	; (80082cc <HAL_CAN_MspInit+0x90>)
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	4a1a      	ldr	r2, [pc, #104]	; (80082cc <HAL_CAN_MspInit+0x90>)
 8008262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008266:	61d3      	str	r3, [r2, #28]
 8008268:	4b18      	ldr	r3, [pc, #96]	; (80082cc <HAL_CAN_MspInit+0x90>)
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008274:	4b15      	ldr	r3, [pc, #84]	; (80082cc <HAL_CAN_MspInit+0x90>)
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	4a14      	ldr	r2, [pc, #80]	; (80082cc <HAL_CAN_MspInit+0x90>)
 800827a:	f043 0304 	orr.w	r3, r3, #4
 800827e:	6193      	str	r3, [r2, #24]
 8008280:	4b12      	ldr	r3, [pc, #72]	; (80082cc <HAL_CAN_MspInit+0x90>)
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	60bb      	str	r3, [r7, #8]
 800828a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800828c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008290:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008292:	2300      	movs	r3, #0
 8008294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008296:	2300      	movs	r3, #0
 8008298:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800829a:	f107 0310 	add.w	r3, r7, #16
 800829e:	4619      	mov	r1, r3
 80082a0:	480b      	ldr	r0, [pc, #44]	; (80082d0 <HAL_CAN_MspInit+0x94>)
 80082a2:	f000 fd61 	bl	8008d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80082a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ac:	2302      	movs	r3, #2
 80082ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082b0:	2303      	movs	r3, #3
 80082b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082b4:	f107 0310 	add.w	r3, r7, #16
 80082b8:	4619      	mov	r1, r3
 80082ba:	4805      	ldr	r0, [pc, #20]	; (80082d0 <HAL_CAN_MspInit+0x94>)
 80082bc:	f000 fd54 	bl	8008d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80082c0:	bf00      	nop
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	40006400 	.word	0x40006400
 80082cc:	40021000 	.word	0x40021000
 80082d0:	40010800 	.word	0x40010800

080082d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082dc:	f107 0310 	add.w	r3, r7, #16
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	605a      	str	r2, [r3, #4]
 80082e6:	609a      	str	r2, [r3, #8]
 80082e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a15      	ldr	r2, [pc, #84]	; (8008344 <HAL_I2C_MspInit+0x70>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d123      	bne.n	800833c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082f4:	4b14      	ldr	r3, [pc, #80]	; (8008348 <HAL_I2C_MspInit+0x74>)
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	4a13      	ldr	r2, [pc, #76]	; (8008348 <HAL_I2C_MspInit+0x74>)
 80082fa:	f043 0308 	orr.w	r3, r3, #8
 80082fe:	6193      	str	r3, [r2, #24]
 8008300:	4b11      	ldr	r3, [pc, #68]	; (8008348 <HAL_I2C_MspInit+0x74>)
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800830c:	23c0      	movs	r3, #192	; 0xc0
 800830e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008310:	2312      	movs	r3, #18
 8008312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008314:	2303      	movs	r3, #3
 8008316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008318:	f107 0310 	add.w	r3, r7, #16
 800831c:	4619      	mov	r1, r3
 800831e:	480b      	ldr	r0, [pc, #44]	; (800834c <HAL_I2C_MspInit+0x78>)
 8008320:	f000 fd22 	bl	8008d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008324:	4b08      	ldr	r3, [pc, #32]	; (8008348 <HAL_I2C_MspInit+0x74>)
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	4a07      	ldr	r2, [pc, #28]	; (8008348 <HAL_I2C_MspInit+0x74>)
 800832a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800832e:	61d3      	str	r3, [r2, #28]
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <HAL_I2C_MspInit+0x74>)
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008338:	60bb      	str	r3, [r7, #8]
 800833a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800833c:	bf00      	nop
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40005400 	.word	0x40005400
 8008348:	40021000 	.word	0x40021000
 800834c:	40010c00 	.word	0x40010c00

08008350 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a0a      	ldr	r2, [pc, #40]	; (8008388 <HAL_I2C_MspDeInit+0x38>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d10d      	bne.n	800837e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008362:	4b0a      	ldr	r3, [pc, #40]	; (800838c <HAL_I2C_MspDeInit+0x3c>)
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	4a09      	ldr	r2, [pc, #36]	; (800838c <HAL_I2C_MspDeInit+0x3c>)
 8008368:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800836c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800836e:	2140      	movs	r1, #64	; 0x40
 8008370:	4807      	ldr	r0, [pc, #28]	; (8008390 <HAL_I2C_MspDeInit+0x40>)
 8008372:	f000 fe8d 	bl	8009090 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008376:	2180      	movs	r1, #128	; 0x80
 8008378:	4805      	ldr	r0, [pc, #20]	; (8008390 <HAL_I2C_MspDeInit+0x40>)
 800837a:	f000 fe89 	bl	8009090 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	40005400 	.word	0x40005400
 800838c:	40021000 	.word	0x40021000
 8008390:	40010c00 	.word	0x40010c00

08008394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a0d      	ldr	r2, [pc, #52]	; (80083d8 <HAL_TIM_Base_MspInit+0x44>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d113      	bne.n	80083ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80083a6:	4b0d      	ldr	r3, [pc, #52]	; (80083dc <HAL_TIM_Base_MspInit+0x48>)
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	4a0c      	ldr	r2, [pc, #48]	; (80083dc <HAL_TIM_Base_MspInit+0x48>)
 80083ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083b0:	6193      	str	r3, [r2, #24]
 80083b2:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <HAL_TIM_Base_MspInit+0x48>)
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80083be:	2200      	movs	r2, #0
 80083c0:	2100      	movs	r1, #0
 80083c2:	2019      	movs	r0, #25
 80083c4:	f000 fb57 	bl	8008a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80083c8:	2019      	movs	r0, #25
 80083ca:	f000 fb70 	bl	8008aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	40012c00 	.word	0x40012c00
 80083dc:	40021000 	.word	0x40021000

080083e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e8:	f107 0310 	add.w	r3, r7, #16
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	605a      	str	r2, [r3, #4]
 80083f2:	609a      	str	r2, [r3, #8]
 80083f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a20      	ldr	r2, [pc, #128]	; (800847c <HAL_UART_MspInit+0x9c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d139      	bne.n	8008474 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008400:	4b1f      	ldr	r3, [pc, #124]	; (8008480 <HAL_UART_MspInit+0xa0>)
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	4a1e      	ldr	r2, [pc, #120]	; (8008480 <HAL_UART_MspInit+0xa0>)
 8008406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800840a:	6193      	str	r3, [r2, #24]
 800840c:	4b1c      	ldr	r3, [pc, #112]	; (8008480 <HAL_UART_MspInit+0xa0>)
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008418:	4b19      	ldr	r3, [pc, #100]	; (8008480 <HAL_UART_MspInit+0xa0>)
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	4a18      	ldr	r2, [pc, #96]	; (8008480 <HAL_UART_MspInit+0xa0>)
 800841e:	f043 0304 	orr.w	r3, r3, #4
 8008422:	6193      	str	r3, [r2, #24]
 8008424:	4b16      	ldr	r3, [pc, #88]	; (8008480 <HAL_UART_MspInit+0xa0>)
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	60bb      	str	r3, [r7, #8]
 800842e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008436:	2302      	movs	r3, #2
 8008438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800843a:	2303      	movs	r3, #3
 800843c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800843e:	f107 0310 	add.w	r3, r7, #16
 8008442:	4619      	mov	r1, r3
 8008444:	480f      	ldr	r0, [pc, #60]	; (8008484 <HAL_UART_MspInit+0xa4>)
 8008446:	f000 fc8f 	bl	8008d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800844a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800844e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008450:	2300      	movs	r3, #0
 8008452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008454:	2300      	movs	r3, #0
 8008456:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008458:	f107 0310 	add.w	r3, r7, #16
 800845c:	4619      	mov	r1, r3
 800845e:	4809      	ldr	r0, [pc, #36]	; (8008484 <HAL_UART_MspInit+0xa4>)
 8008460:	f000 fc82 	bl	8008d68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008464:	2200      	movs	r2, #0
 8008466:	2100      	movs	r1, #0
 8008468:	2025      	movs	r0, #37	; 0x25
 800846a:	f000 fb04 	bl	8008a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800846e:	2025      	movs	r0, #37	; 0x25
 8008470:	f000 fb1d 	bl	8008aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008474:	bf00      	nop
 8008476:	3720      	adds	r7, #32
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	40013800 	.word	0x40013800
 8008480:	40021000 	.word	0x40021000
 8008484:	40010800 	.word	0x40010800

08008488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800848c:	e7fe      	b.n	800848c <NMI_Handler+0x4>

0800848e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800848e:	b480      	push	{r7}
 8008490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008492:	e7fe      	b.n	8008492 <HardFault_Handler+0x4>

08008494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008494:	b480      	push	{r7}
 8008496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008498:	e7fe      	b.n	8008498 <MemManage_Handler+0x4>

0800849a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800849a:	b480      	push	{r7}
 800849c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800849e:	e7fe      	b.n	800849e <BusFault_Handler+0x4>

080084a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084a4:	e7fe      	b.n	80084a4 <UsageFault_Handler+0x4>

080084a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80084a6:	b480      	push	{r7}
 80084a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80084aa:	bf00      	nop
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bc80      	pop	{r7}
 80084b0:	4770      	bx	lr

080084b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084b2:	b480      	push	{r7}
 80084b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80084b6:	bf00      	nop
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bc80      	pop	{r7}
 80084bc:	4770      	bx	lr

080084be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80084be:	b480      	push	{r7}
 80084c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80084c2:	bf00      	nop
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr

080084ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80084ce:	f000 f8bf 	bl	8008650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80084d2:	bf00      	nop
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80084dc:	4802      	ldr	r0, [pc, #8]	; (80084e8 <TIM1_UP_IRQHandler+0x10>)
 80084de:	f002 fdcd 	bl	800b07c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80084e2:	bf00      	nop
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	200002e4 	.word	0x200002e4

080084ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80084f0:	4802      	ldr	r0, [pc, #8]	; (80084fc <USART1_IRQHandler+0x10>)
 80084f2:	f003 f9cb 	bl	800b88c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80084f6:	bf00      	nop
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	2000032c 	.word	0x2000032c

08008500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008508:	4a14      	ldr	r2, [pc, #80]	; (800855c <_sbrk+0x5c>)
 800850a:	4b15      	ldr	r3, [pc, #84]	; (8008560 <_sbrk+0x60>)
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008514:	4b13      	ldr	r3, [pc, #76]	; (8008564 <_sbrk+0x64>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d102      	bne.n	8008522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800851c:	4b11      	ldr	r3, [pc, #68]	; (8008564 <_sbrk+0x64>)
 800851e:	4a12      	ldr	r2, [pc, #72]	; (8008568 <_sbrk+0x68>)
 8008520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008522:	4b10      	ldr	r3, [pc, #64]	; (8008564 <_sbrk+0x64>)
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4413      	add	r3, r2
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	429a      	cmp	r2, r3
 800852e:	d207      	bcs.n	8008540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008530:	f004 f81a 	bl	800c568 <__errno>
 8008534:	4603      	mov	r3, r0
 8008536:	220c      	movs	r2, #12
 8008538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800853a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800853e:	e009      	b.n	8008554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008540:	4b08      	ldr	r3, [pc, #32]	; (8008564 <_sbrk+0x64>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008546:	4b07      	ldr	r3, [pc, #28]	; (8008564 <_sbrk+0x64>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4413      	add	r3, r2
 800854e:	4a05      	ldr	r2, [pc, #20]	; (8008564 <_sbrk+0x64>)
 8008550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008552:	68fb      	ldr	r3, [r7, #12]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	2000c000 	.word	0x2000c000
 8008560:	00000400 	.word	0x00000400
 8008564:	20000374 	.word	0x20000374
 8008568:	200004c8 	.word	0x200004c8

0800856c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008570:	bf00      	nop
 8008572:	46bd      	mov	sp, r7
 8008574:	bc80      	pop	{r7}
 8008576:	4770      	bx	lr

08008578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008578:	480c      	ldr	r0, [pc, #48]	; (80085ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800857a:	490d      	ldr	r1, [pc, #52]	; (80085b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800857c:	4a0d      	ldr	r2, [pc, #52]	; (80085b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800857e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008580:	e002      	b.n	8008588 <LoopCopyDataInit>

08008582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008586:	3304      	adds	r3, #4

08008588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800858a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800858c:	d3f9      	bcc.n	8008582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800858e:	4a0a      	ldr	r2, [pc, #40]	; (80085b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008590:	4c0a      	ldr	r4, [pc, #40]	; (80085bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8008592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008594:	e001      	b.n	800859a <LoopFillZerobss>

08008596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008598:	3204      	adds	r2, #4

0800859a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800859a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800859c:	d3fb      	bcc.n	8008596 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800859e:	f7ff ffe5 	bl	800856c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80085a2:	f003 ffe7 	bl	800c574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80085a6:	f7ff fb9d 	bl	8007ce4 <main>
  bx lr
 80085aa:	4770      	bx	lr
  ldr r0, =_sdata
 80085ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80085b0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80085b4:	0800dd10 	.word	0x0800dd10
  ldr r2, =_sbss
 80085b8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80085bc:	200004c4 	.word	0x200004c4

080085c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80085c0:	e7fe      	b.n	80085c0 <ADC1_2_IRQHandler>
	...

080085c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80085c8:	4b08      	ldr	r3, [pc, #32]	; (80085ec <HAL_Init+0x28>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a07      	ldr	r2, [pc, #28]	; (80085ec <HAL_Init+0x28>)
 80085ce:	f043 0310 	orr.w	r3, r3, #16
 80085d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085d4:	2003      	movs	r0, #3
 80085d6:	f000 fa43 	bl	8008a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80085da:	200f      	movs	r0, #15
 80085dc:	f000 f808 	bl	80085f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80085e0:	f7ff fdfa 	bl	80081d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	40022000 	.word	0x40022000

080085f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80085f8:	4b12      	ldr	r3, [pc, #72]	; (8008644 <HAL_InitTick+0x54>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	4b12      	ldr	r3, [pc, #72]	; (8008648 <HAL_InitTick+0x58>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	4619      	mov	r1, r3
 8008602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008606:	fbb3 f3f1 	udiv	r3, r3, r1
 800860a:	fbb2 f3f3 	udiv	r3, r2, r3
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fa5b 	bl	8008aca <HAL_SYSTICK_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e00e      	b.n	800863c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b0f      	cmp	r3, #15
 8008622:	d80a      	bhi.n	800863a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008624:	2200      	movs	r2, #0
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800862c:	f000 fa23 	bl	8008a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008630:	4a06      	ldr	r2, [pc, #24]	; (800864c <HAL_InitTick+0x5c>)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	e000      	b.n	800863c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
}
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	200000b4 	.word	0x200000b4
 8008648:	200000bc 	.word	0x200000bc
 800864c:	200000b8 	.word	0x200000b8

08008650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008650:	b480      	push	{r7}
 8008652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <HAL_IncTick+0x1c>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	4b05      	ldr	r3, [pc, #20]	; (8008670 <HAL_IncTick+0x20>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4413      	add	r3, r2
 8008660:	4a03      	ldr	r2, [pc, #12]	; (8008670 <HAL_IncTick+0x20>)
 8008662:	6013      	str	r3, [r2, #0]
}
 8008664:	bf00      	nop
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr
 800866c:	200000bc 	.word	0x200000bc
 8008670:	20000378 	.word	0x20000378

08008674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
  return uwTick;
 8008678:	4b02      	ldr	r3, [pc, #8]	; (8008684 <HAL_GetTick+0x10>)
 800867a:	681b      	ldr	r3, [r3, #0]
}
 800867c:	4618      	mov	r0, r3
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr
 8008684:	20000378 	.word	0x20000378

08008688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008690:	f7ff fff0 	bl	8008674 <HAL_GetTick>
 8008694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086a0:	d005      	beq.n	80086ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80086a2:	4b0a      	ldr	r3, [pc, #40]	; (80086cc <HAL_Delay+0x44>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4413      	add	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80086ae:	bf00      	nop
 80086b0:	f7ff ffe0 	bl	8008674 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d8f7      	bhi.n	80086b0 <HAL_Delay+0x28>
  {
  }
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	200000bc 	.word	0x200000bc

080086d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e0ed      	b.n	80088be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff fda4 	bl	800823c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0201 	orr.w	r2, r2, #1
 8008702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008704:	f7ff ffb6 	bl	8008674 <HAL_GetTick>
 8008708:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800870a:	e012      	b.n	8008732 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800870c:	f7ff ffb2 	bl	8008674 <HAL_GetTick>
 8008710:	4602      	mov	r2, r0
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	2b0a      	cmp	r3, #10
 8008718:	d90b      	bls.n	8008732 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2205      	movs	r2, #5
 800872a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e0c5      	b.n	80088be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0e5      	beq.n	800870c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0202 	bic.w	r2, r2, #2
 800874e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008750:	f7ff ff90 	bl	8008674 <HAL_GetTick>
 8008754:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008756:	e012      	b.n	800877e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008758:	f7ff ff8c 	bl	8008674 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b0a      	cmp	r3, #10
 8008764:	d90b      	bls.n	800877e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2205      	movs	r2, #5
 8008776:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e09f      	b.n	80088be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e5      	bne.n	8008758 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7e1b      	ldrb	r3, [r3, #24]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d108      	bne.n	80087a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e007      	b.n	80087b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7e5b      	ldrb	r3, [r3, #25]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d108      	bne.n	80087d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e007      	b.n	80087e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7e9b      	ldrb	r3, [r3, #26]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d108      	bne.n	80087fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0220 	orr.w	r2, r2, #32
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	e007      	b.n	800880a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0220 	bic.w	r2, r2, #32
 8008808:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7edb      	ldrb	r3, [r3, #27]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d108      	bne.n	8008824 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0210 	bic.w	r2, r2, #16
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	e007      	b.n	8008834 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0210 	orr.w	r2, r2, #16
 8008832:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7f1b      	ldrb	r3, [r3, #28]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d108      	bne.n	800884e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f042 0208 	orr.w	r2, r2, #8
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	e007      	b.n	800885e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 0208 	bic.w	r2, r2, #8
 800885c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	7f5b      	ldrb	r3, [r3, #29]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d108      	bne.n	8008878 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0204 	orr.w	r2, r2, #4
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	e007      	b.n	8008888 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0204 	bic.w	r2, r2, #4
 8008886:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	ea42 0103 	orr.w	r1, r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	1e5a      	subs	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <__NVIC_SetPriorityGrouping>:
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f003 0307 	and.w	r3, r3, #7
 80088d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088d8:	4b0c      	ldr	r3, [pc, #48]	; (800890c <__NVIC_SetPriorityGrouping+0x44>)
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80088e4:	4013      	ands	r3, r2
 80088e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80088f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80088f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80088fa:	4a04      	ldr	r2, [pc, #16]	; (800890c <__NVIC_SetPriorityGrouping+0x44>)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	60d3      	str	r3, [r2, #12]
}
 8008900:	bf00      	nop
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	e000ed00 	.word	0xe000ed00

08008910 <__NVIC_GetPriorityGrouping>:
{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008914:	4b04      	ldr	r3, [pc, #16]	; (8008928 <__NVIC_GetPriorityGrouping+0x18>)
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	0a1b      	lsrs	r3, r3, #8
 800891a:	f003 0307 	and.w	r3, r3, #7
}
 800891e:	4618      	mov	r0, r3
 8008920:	46bd      	mov	sp, r7
 8008922:	bc80      	pop	{r7}
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	e000ed00 	.word	0xe000ed00

0800892c <__NVIC_EnableIRQ>:
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800893a:	2b00      	cmp	r3, #0
 800893c:	db0b      	blt.n	8008956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800893e:	79fb      	ldrb	r3, [r7, #7]
 8008940:	f003 021f 	and.w	r2, r3, #31
 8008944:	4906      	ldr	r1, [pc, #24]	; (8008960 <__NVIC_EnableIRQ+0x34>)
 8008946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800894a:	095b      	lsrs	r3, r3, #5
 800894c:	2001      	movs	r0, #1
 800894e:	fa00 f202 	lsl.w	r2, r0, r2
 8008952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008956:	bf00      	nop
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr
 8008960:	e000e100 	.word	0xe000e100

08008964 <__NVIC_SetPriority>:
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008974:	2b00      	cmp	r3, #0
 8008976:	db0a      	blt.n	800898e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	b2da      	uxtb	r2, r3
 800897c:	490c      	ldr	r1, [pc, #48]	; (80089b0 <__NVIC_SetPriority+0x4c>)
 800897e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008982:	0112      	lsls	r2, r2, #4
 8008984:	b2d2      	uxtb	r2, r2
 8008986:	440b      	add	r3, r1
 8008988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800898c:	e00a      	b.n	80089a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	b2da      	uxtb	r2, r3
 8008992:	4908      	ldr	r1, [pc, #32]	; (80089b4 <__NVIC_SetPriority+0x50>)
 8008994:	79fb      	ldrb	r3, [r7, #7]
 8008996:	f003 030f 	and.w	r3, r3, #15
 800899a:	3b04      	subs	r3, #4
 800899c:	0112      	lsls	r2, r2, #4
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	440b      	add	r3, r1
 80089a2:	761a      	strb	r2, [r3, #24]
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	e000e100 	.word	0xe000e100
 80089b4:	e000ed00 	.word	0xe000ed00

080089b8 <NVIC_EncodePriority>:
{
 80089b8:	b480      	push	{r7}
 80089ba:	b089      	sub	sp, #36	; 0x24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f003 0307 	and.w	r3, r3, #7
 80089ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	f1c3 0307 	rsb	r3, r3, #7
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	bf28      	it	cs
 80089d6:	2304      	movcs	r3, #4
 80089d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	3304      	adds	r3, #4
 80089de:	2b06      	cmp	r3, #6
 80089e0:	d902      	bls.n	80089e8 <NVIC_EncodePriority+0x30>
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	3b03      	subs	r3, #3
 80089e6:	e000      	b.n	80089ea <NVIC_EncodePriority+0x32>
 80089e8:	2300      	movs	r3, #0
 80089ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	fa02 f303 	lsl.w	r3, r2, r3
 80089f6:	43da      	mvns	r2, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	401a      	ands	r2, r3
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0a:	43d9      	mvns	r1, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a10:	4313      	orrs	r3, r2
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3724      	adds	r7, #36	; 0x24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr

08008a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a2c:	d301      	bcc.n	8008a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e00f      	b.n	8008a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a32:	4a0a      	ldr	r2, [pc, #40]	; (8008a5c <SysTick_Config+0x40>)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a3a:	210f      	movs	r1, #15
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a40:	f7ff ff90 	bl	8008964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a44:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <SysTick_Config+0x40>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a4a:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <SysTick_Config+0x40>)
 8008a4c:	2207      	movs	r2, #7
 8008a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	e000e010 	.word	0xe000e010

08008a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff ff2d 	bl	80088c8 <__NVIC_SetPriorityGrouping>
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b086      	sub	sp, #24
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	607a      	str	r2, [r7, #4]
 8008a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a88:	f7ff ff42 	bl	8008910 <__NVIC_GetPriorityGrouping>
 8008a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	68b9      	ldr	r1, [r7, #8]
 8008a92:	6978      	ldr	r0, [r7, #20]
 8008a94:	f7ff ff90 	bl	80089b8 <NVIC_EncodePriority>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff ff5f 	bl	8008964 <__NVIC_SetPriority>
}
 8008aa6:	bf00      	nop
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff ff35 	bl	800892c <__NVIC_EnableIRQ>
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff ffa2 	bl	8008a1c <SysTick_Config>
 8008ad8:	4603      	mov	r3, r0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d008      	beq.n	8008b0c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2204      	movs	r2, #4
 8008afe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e020      	b.n	8008b4e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 020e 	bic.w	r2, r2, #14
 8008b1a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0201 	bic.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b34:	2101      	movs	r1, #1
 8008b36:	fa01 f202 	lsl.w	r2, r1, r2
 8008b3a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bc80      	pop	{r7}
 8008b56:	4770      	bx	lr

08008b58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d005      	beq.n	8008b7c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2204      	movs	r2, #4
 8008b74:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	73fb      	strb	r3, [r7, #15]
 8008b7a:	e0d6      	b.n	8008d2a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 020e 	bic.w	r2, r2, #14
 8008b8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4b64      	ldr	r3, [pc, #400]	; (8008d34 <HAL_DMA_Abort_IT+0x1dc>)
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d958      	bls.n	8008c5a <HAL_DMA_Abort_IT+0x102>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a62      	ldr	r2, [pc, #392]	; (8008d38 <HAL_DMA_Abort_IT+0x1e0>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d04f      	beq.n	8008c52 <HAL_DMA_Abort_IT+0xfa>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a61      	ldr	r2, [pc, #388]	; (8008d3c <HAL_DMA_Abort_IT+0x1e4>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d048      	beq.n	8008c4e <HAL_DMA_Abort_IT+0xf6>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a5f      	ldr	r2, [pc, #380]	; (8008d40 <HAL_DMA_Abort_IT+0x1e8>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d040      	beq.n	8008c48 <HAL_DMA_Abort_IT+0xf0>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a5e      	ldr	r2, [pc, #376]	; (8008d44 <HAL_DMA_Abort_IT+0x1ec>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d038      	beq.n	8008c42 <HAL_DMA_Abort_IT+0xea>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a5c      	ldr	r2, [pc, #368]	; (8008d48 <HAL_DMA_Abort_IT+0x1f0>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d030      	beq.n	8008c3c <HAL_DMA_Abort_IT+0xe4>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a5b      	ldr	r2, [pc, #364]	; (8008d4c <HAL_DMA_Abort_IT+0x1f4>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d028      	beq.n	8008c36 <HAL_DMA_Abort_IT+0xde>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a52      	ldr	r2, [pc, #328]	; (8008d34 <HAL_DMA_Abort_IT+0x1dc>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d020      	beq.n	8008c30 <HAL_DMA_Abort_IT+0xd8>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a57      	ldr	r2, [pc, #348]	; (8008d50 <HAL_DMA_Abort_IT+0x1f8>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d019      	beq.n	8008c2c <HAL_DMA_Abort_IT+0xd4>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a55      	ldr	r2, [pc, #340]	; (8008d54 <HAL_DMA_Abort_IT+0x1fc>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d012      	beq.n	8008c28 <HAL_DMA_Abort_IT+0xd0>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a54      	ldr	r2, [pc, #336]	; (8008d58 <HAL_DMA_Abort_IT+0x200>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00a      	beq.n	8008c22 <HAL_DMA_Abort_IT+0xca>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a52      	ldr	r2, [pc, #328]	; (8008d5c <HAL_DMA_Abort_IT+0x204>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d102      	bne.n	8008c1c <HAL_DMA_Abort_IT+0xc4>
 8008c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c1a:	e01b      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c20:	e018      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c26:	e015      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c28:	2310      	movs	r3, #16
 8008c2a:	e013      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e011      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c34:	e00e      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c3a:	e00b      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c40:	e008      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c46:	e005      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c4c:	e002      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c4e:	2310      	movs	r3, #16
 8008c50:	e000      	b.n	8008c54 <HAL_DMA_Abort_IT+0xfc>
 8008c52:	2301      	movs	r3, #1
 8008c54:	4a42      	ldr	r2, [pc, #264]	; (8008d60 <HAL_DMA_Abort_IT+0x208>)
 8008c56:	6053      	str	r3, [r2, #4]
 8008c58:	e057      	b.n	8008d0a <HAL_DMA_Abort_IT+0x1b2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a36      	ldr	r2, [pc, #216]	; (8008d38 <HAL_DMA_Abort_IT+0x1e0>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d04f      	beq.n	8008d04 <HAL_DMA_Abort_IT+0x1ac>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a34      	ldr	r2, [pc, #208]	; (8008d3c <HAL_DMA_Abort_IT+0x1e4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d048      	beq.n	8008d00 <HAL_DMA_Abort_IT+0x1a8>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a33      	ldr	r2, [pc, #204]	; (8008d40 <HAL_DMA_Abort_IT+0x1e8>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d040      	beq.n	8008cfa <HAL_DMA_Abort_IT+0x1a2>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a31      	ldr	r2, [pc, #196]	; (8008d44 <HAL_DMA_Abort_IT+0x1ec>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d038      	beq.n	8008cf4 <HAL_DMA_Abort_IT+0x19c>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a30      	ldr	r2, [pc, #192]	; (8008d48 <HAL_DMA_Abort_IT+0x1f0>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d030      	beq.n	8008cee <HAL_DMA_Abort_IT+0x196>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a2e      	ldr	r2, [pc, #184]	; (8008d4c <HAL_DMA_Abort_IT+0x1f4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d028      	beq.n	8008ce8 <HAL_DMA_Abort_IT+0x190>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a26      	ldr	r2, [pc, #152]	; (8008d34 <HAL_DMA_Abort_IT+0x1dc>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d020      	beq.n	8008ce2 <HAL_DMA_Abort_IT+0x18a>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a2a      	ldr	r2, [pc, #168]	; (8008d50 <HAL_DMA_Abort_IT+0x1f8>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d019      	beq.n	8008cde <HAL_DMA_Abort_IT+0x186>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a29      	ldr	r2, [pc, #164]	; (8008d54 <HAL_DMA_Abort_IT+0x1fc>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d012      	beq.n	8008cda <HAL_DMA_Abort_IT+0x182>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a27      	ldr	r2, [pc, #156]	; (8008d58 <HAL_DMA_Abort_IT+0x200>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00a      	beq.n	8008cd4 <HAL_DMA_Abort_IT+0x17c>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a26      	ldr	r2, [pc, #152]	; (8008d5c <HAL_DMA_Abort_IT+0x204>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d102      	bne.n	8008cce <HAL_DMA_Abort_IT+0x176>
 8008cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ccc:	e01b      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cd2:	e018      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cd8:	e015      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008cda:	2310      	movs	r3, #16
 8008cdc:	e013      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e011      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008ce2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ce6:	e00e      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008ce8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cec:	e00b      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cf2:	e008      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cf8:	e005      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cfe:	e002      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008d00:	2310      	movs	r3, #16
 8008d02:	e000      	b.n	8008d06 <HAL_DMA_Abort_IT+0x1ae>
 8008d04:	2301      	movs	r3, #1
 8008d06:	4a17      	ldr	r2, [pc, #92]	; (8008d64 <HAL_DMA_Abort_IT+0x20c>)
 8008d08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	4798      	blx	r3
    } 
  }
  return status;
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	40020080 	.word	0x40020080
 8008d38:	40020008 	.word	0x40020008
 8008d3c:	4002001c 	.word	0x4002001c
 8008d40:	40020030 	.word	0x40020030
 8008d44:	40020044 	.word	0x40020044
 8008d48:	40020058 	.word	0x40020058
 8008d4c:	4002006c 	.word	0x4002006c
 8008d50:	40020408 	.word	0x40020408
 8008d54:	4002041c 	.word	0x4002041c
 8008d58:	40020430 	.word	0x40020430
 8008d5c:	40020444 	.word	0x40020444
 8008d60:	40020400 	.word	0x40020400
 8008d64:	40020000 	.word	0x40020000

08008d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b08b      	sub	sp, #44	; 0x2c
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d72:	2300      	movs	r3, #0
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008d76:	2300      	movs	r3, #0
 8008d78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d7a:	e179      	b.n	8009070 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	fa02 f303 	lsl.w	r3, r2, r3
 8008d84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	f040 8168 	bne.w	800906a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	4a96      	ldr	r2, [pc, #600]	; (8008ff8 <HAL_GPIO_Init+0x290>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d05e      	beq.n	8008e62 <HAL_GPIO_Init+0xfa>
 8008da4:	4a94      	ldr	r2, [pc, #592]	; (8008ff8 <HAL_GPIO_Init+0x290>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d875      	bhi.n	8008e96 <HAL_GPIO_Init+0x12e>
 8008daa:	4a94      	ldr	r2, [pc, #592]	; (8008ffc <HAL_GPIO_Init+0x294>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d058      	beq.n	8008e62 <HAL_GPIO_Init+0xfa>
 8008db0:	4a92      	ldr	r2, [pc, #584]	; (8008ffc <HAL_GPIO_Init+0x294>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d86f      	bhi.n	8008e96 <HAL_GPIO_Init+0x12e>
 8008db6:	4a92      	ldr	r2, [pc, #584]	; (8009000 <HAL_GPIO_Init+0x298>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d052      	beq.n	8008e62 <HAL_GPIO_Init+0xfa>
 8008dbc:	4a90      	ldr	r2, [pc, #576]	; (8009000 <HAL_GPIO_Init+0x298>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d869      	bhi.n	8008e96 <HAL_GPIO_Init+0x12e>
 8008dc2:	4a90      	ldr	r2, [pc, #576]	; (8009004 <HAL_GPIO_Init+0x29c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d04c      	beq.n	8008e62 <HAL_GPIO_Init+0xfa>
 8008dc8:	4a8e      	ldr	r2, [pc, #568]	; (8009004 <HAL_GPIO_Init+0x29c>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d863      	bhi.n	8008e96 <HAL_GPIO_Init+0x12e>
 8008dce:	4a8e      	ldr	r2, [pc, #568]	; (8009008 <HAL_GPIO_Init+0x2a0>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d046      	beq.n	8008e62 <HAL_GPIO_Init+0xfa>
 8008dd4:	4a8c      	ldr	r2, [pc, #560]	; (8009008 <HAL_GPIO_Init+0x2a0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d85d      	bhi.n	8008e96 <HAL_GPIO_Init+0x12e>
 8008dda:	2b12      	cmp	r3, #18
 8008ddc:	d82a      	bhi.n	8008e34 <HAL_GPIO_Init+0xcc>
 8008dde:	2b12      	cmp	r3, #18
 8008de0:	d859      	bhi.n	8008e96 <HAL_GPIO_Init+0x12e>
 8008de2:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <HAL_GPIO_Init+0x80>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008e63 	.word	0x08008e63
 8008dec:	08008e3d 	.word	0x08008e3d
 8008df0:	08008e4f 	.word	0x08008e4f
 8008df4:	08008e91 	.word	0x08008e91
 8008df8:	08008e97 	.word	0x08008e97
 8008dfc:	08008e97 	.word	0x08008e97
 8008e00:	08008e97 	.word	0x08008e97
 8008e04:	08008e97 	.word	0x08008e97
 8008e08:	08008e97 	.word	0x08008e97
 8008e0c:	08008e97 	.word	0x08008e97
 8008e10:	08008e97 	.word	0x08008e97
 8008e14:	08008e97 	.word	0x08008e97
 8008e18:	08008e97 	.word	0x08008e97
 8008e1c:	08008e97 	.word	0x08008e97
 8008e20:	08008e97 	.word	0x08008e97
 8008e24:	08008e97 	.word	0x08008e97
 8008e28:	08008e97 	.word	0x08008e97
 8008e2c:	08008e45 	.word	0x08008e45
 8008e30:	08008e59 	.word	0x08008e59
 8008e34:	4a75      	ldr	r2, [pc, #468]	; (800900c <HAL_GPIO_Init+0x2a4>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d013      	beq.n	8008e62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008e3a:	e02c      	b.n	8008e96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	623b      	str	r3, [r7, #32]
          break;
 8008e42:	e029      	b.n	8008e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	623b      	str	r3, [r7, #32]
          break;
 8008e4c:	e024      	b.n	8008e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	3308      	adds	r3, #8
 8008e54:	623b      	str	r3, [r7, #32]
          break;
 8008e56:	e01f      	b.n	8008e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	623b      	str	r3, [r7, #32]
          break;
 8008e60:	e01a      	b.n	8008e98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d102      	bne.n	8008e70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008e6a:	2304      	movs	r3, #4
 8008e6c:	623b      	str	r3, [r7, #32]
          break;
 8008e6e:	e013      	b.n	8008e98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d105      	bne.n	8008e84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e78:	2308      	movs	r3, #8
 8008e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	611a      	str	r2, [r3, #16]
          break;
 8008e82:	e009      	b.n	8008e98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e84:	2308      	movs	r3, #8
 8008e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	69fa      	ldr	r2, [r7, #28]
 8008e8c:	615a      	str	r2, [r3, #20]
          break;
 8008e8e:	e003      	b.n	8008e98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008e90:	2300      	movs	r3, #0
 8008e92:	623b      	str	r3, [r7, #32]
          break;
 8008e94:	e000      	b.n	8008e98 <HAL_GPIO_Init+0x130>
          break;
 8008e96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	2bff      	cmp	r3, #255	; 0xff
 8008e9c:	d801      	bhi.n	8008ea2 <HAL_GPIO_Init+0x13a>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	e001      	b.n	8008ea6 <HAL_GPIO_Init+0x13e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	2bff      	cmp	r3, #255	; 0xff
 8008eac:	d802      	bhi.n	8008eb4 <HAL_GPIO_Init+0x14c>
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	e002      	b.n	8008eba <HAL_GPIO_Init+0x152>
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	3b08      	subs	r3, #8
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	210f      	movs	r1, #15
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	401a      	ands	r2, r3
 8008ecc:	6a39      	ldr	r1, [r7, #32]
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 80c1 	beq.w	800906a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008ee8:	4b49      	ldr	r3, [pc, #292]	; (8009010 <HAL_GPIO_Init+0x2a8>)
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	4a48      	ldr	r2, [pc, #288]	; (8009010 <HAL_GPIO_Init+0x2a8>)
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	6193      	str	r3, [r2, #24]
 8008ef4:	4b46      	ldr	r3, [pc, #280]	; (8009010 <HAL_GPIO_Init+0x2a8>)
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	60bb      	str	r3, [r7, #8]
 8008efe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008f00:	4a44      	ldr	r2, [pc, #272]	; (8009014 <HAL_GPIO_Init+0x2ac>)
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	089b      	lsrs	r3, r3, #2
 8008f06:	3302      	adds	r3, #2
 8008f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	f003 0303 	and.w	r3, r3, #3
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	220f      	movs	r2, #15
 8008f18:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1c:	43db      	mvns	r3, r3
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	4013      	ands	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a3c      	ldr	r2, [pc, #240]	; (8009018 <HAL_GPIO_Init+0x2b0>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d01f      	beq.n	8008f6c <HAL_GPIO_Init+0x204>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a3b      	ldr	r2, [pc, #236]	; (800901c <HAL_GPIO_Init+0x2b4>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d019      	beq.n	8008f68 <HAL_GPIO_Init+0x200>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a3a      	ldr	r2, [pc, #232]	; (8009020 <HAL_GPIO_Init+0x2b8>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d013      	beq.n	8008f64 <HAL_GPIO_Init+0x1fc>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a39      	ldr	r2, [pc, #228]	; (8009024 <HAL_GPIO_Init+0x2bc>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d00d      	beq.n	8008f60 <HAL_GPIO_Init+0x1f8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a38      	ldr	r2, [pc, #224]	; (8009028 <HAL_GPIO_Init+0x2c0>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d007      	beq.n	8008f5c <HAL_GPIO_Init+0x1f4>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a37      	ldr	r2, [pc, #220]	; (800902c <HAL_GPIO_Init+0x2c4>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d101      	bne.n	8008f58 <HAL_GPIO_Init+0x1f0>
 8008f54:	2305      	movs	r3, #5
 8008f56:	e00a      	b.n	8008f6e <HAL_GPIO_Init+0x206>
 8008f58:	2306      	movs	r3, #6
 8008f5a:	e008      	b.n	8008f6e <HAL_GPIO_Init+0x206>
 8008f5c:	2304      	movs	r3, #4
 8008f5e:	e006      	b.n	8008f6e <HAL_GPIO_Init+0x206>
 8008f60:	2303      	movs	r3, #3
 8008f62:	e004      	b.n	8008f6e <HAL_GPIO_Init+0x206>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e002      	b.n	8008f6e <HAL_GPIO_Init+0x206>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <HAL_GPIO_Init+0x206>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f70:	f002 0203 	and.w	r2, r2, #3
 8008f74:	0092      	lsls	r2, r2, #2
 8008f76:	4093      	lsls	r3, r2
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008f7e:	4925      	ldr	r1, [pc, #148]	; (8009014 <HAL_GPIO_Init+0x2ac>)
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	089b      	lsrs	r3, r3, #2
 8008f84:	3302      	adds	r3, #2
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d006      	beq.n	8008fa6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008f98:	4b25      	ldr	r3, [pc, #148]	; (8009030 <HAL_GPIO_Init+0x2c8>)
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	4924      	ldr	r1, [pc, #144]	; (8009030 <HAL_GPIO_Init+0x2c8>)
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	608b      	str	r3, [r1, #8]
 8008fa4:	e006      	b.n	8008fb4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008fa6:	4b22      	ldr	r3, [pc, #136]	; (8009030 <HAL_GPIO_Init+0x2c8>)
 8008fa8:	689a      	ldr	r2, [r3, #8]
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	43db      	mvns	r3, r3
 8008fae:	4920      	ldr	r1, [pc, #128]	; (8009030 <HAL_GPIO_Init+0x2c8>)
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d006      	beq.n	8008fce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008fc0:	4b1b      	ldr	r3, [pc, #108]	; (8009030 <HAL_GPIO_Init+0x2c8>)
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	491a      	ldr	r1, [pc, #104]	; (8009030 <HAL_GPIO_Init+0x2c8>)
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	60cb      	str	r3, [r1, #12]
 8008fcc:	e006      	b.n	8008fdc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008fce:	4b18      	ldr	r3, [pc, #96]	; (8009030 <HAL_GPIO_Init+0x2c8>)
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	43db      	mvns	r3, r3
 8008fd6:	4916      	ldr	r1, [pc, #88]	; (8009030 <HAL_GPIO_Init+0x2c8>)
 8008fd8:	4013      	ands	r3, r2
 8008fda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d025      	beq.n	8009034 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008fe8:	4b11      	ldr	r3, [pc, #68]	; (8009030 <HAL_GPIO_Init+0x2c8>)
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	4910      	ldr	r1, [pc, #64]	; (8009030 <HAL_GPIO_Init+0x2c8>)
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	604b      	str	r3, [r1, #4]
 8008ff4:	e025      	b.n	8009042 <HAL_GPIO_Init+0x2da>
 8008ff6:	bf00      	nop
 8008ff8:	10320000 	.word	0x10320000
 8008ffc:	10310000 	.word	0x10310000
 8009000:	10220000 	.word	0x10220000
 8009004:	10210000 	.word	0x10210000
 8009008:	10120000 	.word	0x10120000
 800900c:	10110000 	.word	0x10110000
 8009010:	40021000 	.word	0x40021000
 8009014:	40010000 	.word	0x40010000
 8009018:	40010800 	.word	0x40010800
 800901c:	40010c00 	.word	0x40010c00
 8009020:	40011000 	.word	0x40011000
 8009024:	40011400 	.word	0x40011400
 8009028:	40011800 	.word	0x40011800
 800902c:	40011c00 	.word	0x40011c00
 8009030:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009034:	4b15      	ldr	r3, [pc, #84]	; (800908c <HAL_GPIO_Init+0x324>)
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	43db      	mvns	r3, r3
 800903c:	4913      	ldr	r1, [pc, #76]	; (800908c <HAL_GPIO_Init+0x324>)
 800903e:	4013      	ands	r3, r2
 8009040:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d006      	beq.n	800905c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800904e:	4b0f      	ldr	r3, [pc, #60]	; (800908c <HAL_GPIO_Init+0x324>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	490e      	ldr	r1, [pc, #56]	; (800908c <HAL_GPIO_Init+0x324>)
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	4313      	orrs	r3, r2
 8009058:	600b      	str	r3, [r1, #0]
 800905a:	e006      	b.n	800906a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800905c:	4b0b      	ldr	r3, [pc, #44]	; (800908c <HAL_GPIO_Init+0x324>)
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	43db      	mvns	r3, r3
 8009064:	4909      	ldr	r1, [pc, #36]	; (800908c <HAL_GPIO_Init+0x324>)
 8009066:	4013      	ands	r3, r2
 8009068:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	3301      	adds	r3, #1
 800906e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	fa22 f303 	lsr.w	r3, r2, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	f47f ae7e 	bne.w	8008d7c <HAL_GPIO_Init+0x14>
  }
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	372c      	adds	r7, #44	; 0x2c
 8009086:	46bd      	mov	sp, r7
 8009088:	bc80      	pop	{r7}
 800908a:	4770      	bx	lr
 800908c:	40010400 	.word	0x40010400

08009090 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009090:	b480      	push	{r7}
 8009092:	b089      	sub	sp, #36	; 0x24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800909a:	2300      	movs	r3, #0
 800909c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800909e:	e0a6      	b.n	80091ee <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80090a0:	2201      	movs	r2, #1
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	fa02 f303 	lsl.w	r3, r2, r3
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	4013      	ands	r3, r2
 80090ac:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8099 	beq.w	80091e8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80090b6:	4a54      	ldr	r2, [pc, #336]	; (8009208 <HAL_GPIO_DeInit+0x178>)
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	089b      	lsrs	r3, r3, #2
 80090bc:	3302      	adds	r3, #2
 80090be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	220f      	movs	r2, #15
 80090ce:	fa02 f303 	lsl.w	r3, r2, r3
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	4013      	ands	r3, r2
 80090d6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a4c      	ldr	r2, [pc, #304]	; (800920c <HAL_GPIO_DeInit+0x17c>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d01f      	beq.n	8009120 <HAL_GPIO_DeInit+0x90>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a4b      	ldr	r2, [pc, #300]	; (8009210 <HAL_GPIO_DeInit+0x180>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d019      	beq.n	800911c <HAL_GPIO_DeInit+0x8c>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a4a      	ldr	r2, [pc, #296]	; (8009214 <HAL_GPIO_DeInit+0x184>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d013      	beq.n	8009118 <HAL_GPIO_DeInit+0x88>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a49      	ldr	r2, [pc, #292]	; (8009218 <HAL_GPIO_DeInit+0x188>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d00d      	beq.n	8009114 <HAL_GPIO_DeInit+0x84>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a48      	ldr	r2, [pc, #288]	; (800921c <HAL_GPIO_DeInit+0x18c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d007      	beq.n	8009110 <HAL_GPIO_DeInit+0x80>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a47      	ldr	r2, [pc, #284]	; (8009220 <HAL_GPIO_DeInit+0x190>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d101      	bne.n	800910c <HAL_GPIO_DeInit+0x7c>
 8009108:	2305      	movs	r3, #5
 800910a:	e00a      	b.n	8009122 <HAL_GPIO_DeInit+0x92>
 800910c:	2306      	movs	r3, #6
 800910e:	e008      	b.n	8009122 <HAL_GPIO_DeInit+0x92>
 8009110:	2304      	movs	r3, #4
 8009112:	e006      	b.n	8009122 <HAL_GPIO_DeInit+0x92>
 8009114:	2303      	movs	r3, #3
 8009116:	e004      	b.n	8009122 <HAL_GPIO_DeInit+0x92>
 8009118:	2302      	movs	r3, #2
 800911a:	e002      	b.n	8009122 <HAL_GPIO_DeInit+0x92>
 800911c:	2301      	movs	r3, #1
 800911e:	e000      	b.n	8009122 <HAL_GPIO_DeInit+0x92>
 8009120:	2300      	movs	r3, #0
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	f002 0203 	and.w	r2, r2, #3
 8009128:	0092      	lsls	r2, r2, #2
 800912a:	4093      	lsls	r3, r2
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	429a      	cmp	r2, r3
 8009130:	d132      	bne.n	8009198 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009132:	4b3c      	ldr	r3, [pc, #240]	; (8009224 <HAL_GPIO_DeInit+0x194>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	43db      	mvns	r3, r3
 800913a:	493a      	ldr	r1, [pc, #232]	; (8009224 <HAL_GPIO_DeInit+0x194>)
 800913c:	4013      	ands	r3, r2
 800913e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009140:	4b38      	ldr	r3, [pc, #224]	; (8009224 <HAL_GPIO_DeInit+0x194>)
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	43db      	mvns	r3, r3
 8009148:	4936      	ldr	r1, [pc, #216]	; (8009224 <HAL_GPIO_DeInit+0x194>)
 800914a:	4013      	ands	r3, r2
 800914c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800914e:	4b35      	ldr	r3, [pc, #212]	; (8009224 <HAL_GPIO_DeInit+0x194>)
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	43db      	mvns	r3, r3
 8009156:	4933      	ldr	r1, [pc, #204]	; (8009224 <HAL_GPIO_DeInit+0x194>)
 8009158:	4013      	ands	r3, r2
 800915a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800915c:	4b31      	ldr	r3, [pc, #196]	; (8009224 <HAL_GPIO_DeInit+0x194>)
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	43db      	mvns	r3, r3
 8009164:	492f      	ldr	r1, [pc, #188]	; (8009224 <HAL_GPIO_DeInit+0x194>)
 8009166:	4013      	ands	r3, r2
 8009168:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	f003 0303 	and.w	r3, r3, #3
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	220f      	movs	r2, #15
 8009174:	fa02 f303 	lsl.w	r3, r2, r3
 8009178:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800917a:	4a23      	ldr	r2, [pc, #140]	; (8009208 <HAL_GPIO_DeInit+0x178>)
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	089b      	lsrs	r3, r3, #2
 8009180:	3302      	adds	r3, #2
 8009182:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	43da      	mvns	r2, r3
 800918a:	481f      	ldr	r0, [pc, #124]	; (8009208 <HAL_GPIO_DeInit+0x178>)
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	089b      	lsrs	r3, r3, #2
 8009190:	400a      	ands	r2, r1
 8009192:	3302      	adds	r3, #2
 8009194:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	2bff      	cmp	r3, #255	; 0xff
 800919c:	d801      	bhi.n	80091a2 <HAL_GPIO_DeInit+0x112>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	e001      	b.n	80091a6 <HAL_GPIO_DeInit+0x116>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3304      	adds	r3, #4
 80091a6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	2bff      	cmp	r3, #255	; 0xff
 80091ac:	d802      	bhi.n	80091b4 <HAL_GPIO_DeInit+0x124>
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	e002      	b.n	80091ba <HAL_GPIO_DeInit+0x12a>
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	3b08      	subs	r3, #8
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	210f      	movs	r1, #15
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	fa01 f303 	lsl.w	r3, r1, r3
 80091c8:	43db      	mvns	r3, r3
 80091ca:	401a      	ands	r2, r3
 80091cc:	2104      	movs	r1, #4
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	fa01 f303 	lsl.w	r3, r1, r3
 80091d4:	431a      	orrs	r2, r3
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	43db      	mvns	r3, r3
 80091e2:	401a      	ands	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	3301      	adds	r3, #1
 80091ec:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	fa22 f303 	lsr.w	r3, r2, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f47f af52 	bne.w	80090a0 <HAL_GPIO_DeInit+0x10>
  }
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	3724      	adds	r7, #36	; 0x24
 8009202:	46bd      	mov	sp, r7
 8009204:	bc80      	pop	{r7}
 8009206:	4770      	bx	lr
 8009208:	40010000 	.word	0x40010000
 800920c:	40010800 	.word	0x40010800
 8009210:	40010c00 	.word	0x40010c00
 8009214:	40011000 	.word	0x40011000
 8009218:	40011400 	.word	0x40011400
 800921c:	40011800 	.word	0x40011800
 8009220:	40011c00 	.word	0x40011c00
 8009224:	40010400 	.word	0x40010400

08009228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689a      	ldr	r2, [r3, #8]
 8009238:	887b      	ldrh	r3, [r7, #2]
 800923a:	4013      	ands	r3, r2
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009240:	2301      	movs	r3, #1
 8009242:	73fb      	strb	r3, [r7, #15]
 8009244:	e001      	b.n	800924a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009246:	2300      	movs	r3, #0
 8009248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr

08009256 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009256:	b480      	push	{r7}
 8009258:	b083      	sub	sp, #12
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	460b      	mov	r3, r1
 8009260:	807b      	strh	r3, [r7, #2]
 8009262:	4613      	mov	r3, r2
 8009264:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009266:	787b      	ldrb	r3, [r7, #1]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800926c:	887a      	ldrh	r2, [r7, #2]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009272:	e003      	b.n	800927c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009274:	887b      	ldrh	r3, [r7, #2]
 8009276:	041a      	lsls	r2, r3, #16
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	611a      	str	r2, [r3, #16]
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	bc80      	pop	{r7}
 8009284:	4770      	bx	lr

08009286 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009286:	b480      	push	{r7}
 8009288:	b085      	sub	sp, #20
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009298:	887a      	ldrh	r2, [r7, #2]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4013      	ands	r3, r2
 800929e:	041a      	lsls	r2, r3, #16
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	43d9      	mvns	r1, r3
 80092a4:	887b      	ldrh	r3, [r7, #2]
 80092a6:	400b      	ands	r3, r1
 80092a8:	431a      	orrs	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	611a      	str	r2, [r3, #16]
}
 80092ae:	bf00      	nop
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bc80      	pop	{r7}
 80092b6:	4770      	bx	lr

080092b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e12b      	b.n	8009522 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7fe fff8 	bl	80082d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2224      	movs	r2, #36	; 0x24
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f022 0201 	bic.w	r2, r2, #1
 80092fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800930a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800931a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800931c:	f001 fdb8 	bl	800ae90 <HAL_RCC_GetPCLK1Freq>
 8009320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	4a81      	ldr	r2, [pc, #516]	; (800952c <HAL_I2C_Init+0x274>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d807      	bhi.n	800933c <HAL_I2C_Init+0x84>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4a80      	ldr	r2, [pc, #512]	; (8009530 <HAL_I2C_Init+0x278>)
 8009330:	4293      	cmp	r3, r2
 8009332:	bf94      	ite	ls
 8009334:	2301      	movls	r3, #1
 8009336:	2300      	movhi	r3, #0
 8009338:	b2db      	uxtb	r3, r3
 800933a:	e006      	b.n	800934a <HAL_I2C_Init+0x92>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4a7d      	ldr	r2, [pc, #500]	; (8009534 <HAL_I2C_Init+0x27c>)
 8009340:	4293      	cmp	r3, r2
 8009342:	bf94      	ite	ls
 8009344:	2301      	movls	r3, #1
 8009346:	2300      	movhi	r3, #0
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e0e7      	b.n	8009522 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4a78      	ldr	r2, [pc, #480]	; (8009538 <HAL_I2C_Init+0x280>)
 8009356:	fba2 2303 	umull	r2, r3, r2, r3
 800935a:	0c9b      	lsrs	r3, r3, #18
 800935c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	430a      	orrs	r2, r1
 8009370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6a1b      	ldr	r3, [r3, #32]
 8009378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	4a6a      	ldr	r2, [pc, #424]	; (800952c <HAL_I2C_Init+0x274>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d802      	bhi.n	800938c <HAL_I2C_Init+0xd4>
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	3301      	adds	r3, #1
 800938a:	e009      	b.n	80093a0 <HAL_I2C_Init+0xe8>
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009392:	fb02 f303 	mul.w	r3, r2, r3
 8009396:	4a69      	ldr	r2, [pc, #420]	; (800953c <HAL_I2C_Init+0x284>)
 8009398:	fba2 2303 	umull	r2, r3, r2, r3
 800939c:	099b      	lsrs	r3, r3, #6
 800939e:	3301      	adds	r3, #1
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6812      	ldr	r2, [r2, #0]
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80093b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	495c      	ldr	r1, [pc, #368]	; (800952c <HAL_I2C_Init+0x274>)
 80093bc:	428b      	cmp	r3, r1
 80093be:	d819      	bhi.n	80093f4 <HAL_I2C_Init+0x13c>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	1e59      	subs	r1, r3, #1
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80093ce:	1c59      	adds	r1, r3, #1
 80093d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093d4:	400b      	ands	r3, r1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <HAL_I2C_Init+0x138>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	1e59      	subs	r1, r3, #1
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80093e8:	3301      	adds	r3, #1
 80093ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ee:	e051      	b.n	8009494 <HAL_I2C_Init+0x1dc>
 80093f0:	2304      	movs	r3, #4
 80093f2:	e04f      	b.n	8009494 <HAL_I2C_Init+0x1dc>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d111      	bne.n	8009420 <HAL_I2C_Init+0x168>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	1e58      	subs	r0, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6859      	ldr	r1, [r3, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	440b      	add	r3, r1
 800940a:	fbb0 f3f3 	udiv	r3, r0, r3
 800940e:	3301      	adds	r3, #1
 8009410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009414:	2b00      	cmp	r3, #0
 8009416:	bf0c      	ite	eq
 8009418:	2301      	moveq	r3, #1
 800941a:	2300      	movne	r3, #0
 800941c:	b2db      	uxtb	r3, r3
 800941e:	e012      	b.n	8009446 <HAL_I2C_Init+0x18e>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	1e58      	subs	r0, r3, #1
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6859      	ldr	r1, [r3, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	440b      	add	r3, r1
 800942e:	0099      	lsls	r1, r3, #2
 8009430:	440b      	add	r3, r1
 8009432:	fbb0 f3f3 	udiv	r3, r0, r3
 8009436:	3301      	adds	r3, #1
 8009438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800943c:	2b00      	cmp	r3, #0
 800943e:	bf0c      	ite	eq
 8009440:	2301      	moveq	r3, #1
 8009442:	2300      	movne	r3, #0
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <HAL_I2C_Init+0x196>
 800944a:	2301      	movs	r3, #1
 800944c:	e022      	b.n	8009494 <HAL_I2C_Init+0x1dc>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10e      	bne.n	8009474 <HAL_I2C_Init+0x1bc>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	1e58      	subs	r0, r3, #1
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6859      	ldr	r1, [r3, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	440b      	add	r3, r1
 8009464:	fbb0 f3f3 	udiv	r3, r0, r3
 8009468:	3301      	adds	r3, #1
 800946a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800946e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009472:	e00f      	b.n	8009494 <HAL_I2C_Init+0x1dc>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	1e58      	subs	r0, r3, #1
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6859      	ldr	r1, [r3, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	440b      	add	r3, r1
 8009482:	0099      	lsls	r1, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	fbb0 f3f3 	udiv	r3, r0, r3
 800948a:	3301      	adds	r3, #1
 800948c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	6809      	ldr	r1, [r1, #0]
 8009498:	4313      	orrs	r3, r2
 800949a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69da      	ldr	r2, [r3, #28]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80094c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	6911      	ldr	r1, [r2, #16]
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	68d2      	ldr	r2, [r2, #12]
 80094ce:	4311      	orrs	r1, r2
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	6812      	ldr	r2, [r2, #0]
 80094d4:	430b      	orrs	r3, r1
 80094d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	695a      	ldr	r2, [r3, #20]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	431a      	orrs	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f042 0201 	orr.w	r2, r2, #1
 8009502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	000186a0 	.word	0x000186a0
 8009530:	001e847f 	.word	0x001e847f
 8009534:	003d08ff 	.word	0x003d08ff
 8009538:	431bde83 	.word	0x431bde83
 800953c:	10624dd3 	.word	0x10624dd3

08009540 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d101      	bne.n	8009552 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e021      	b.n	8009596 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2224      	movs	r2, #36	; 0x24
 8009556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f022 0201 	bic.w	r2, r2, #1
 8009568:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7fe fef0 	bl	8008350 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af02      	add	r7, sp, #8
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	607a      	str	r2, [r7, #4]
 80095aa:	461a      	mov	r2, r3
 80095ac:	460b      	mov	r3, r1
 80095ae:	817b      	strh	r3, [r7, #10]
 80095b0:	4613      	mov	r3, r2
 80095b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095b4:	f7ff f85e 	bl	8008674 <HAL_GetTick>
 80095b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	f040 80e0 	bne.w	8009788 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	2319      	movs	r3, #25
 80095ce:	2201      	movs	r2, #1
 80095d0:	4970      	ldr	r1, [pc, #448]	; (8009794 <HAL_I2C_Master_Transmit+0x1f4>)
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fe5c 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80095de:	2302      	movs	r3, #2
 80095e0:	e0d3      	b.n	800978a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d101      	bne.n	80095f0 <HAL_I2C_Master_Transmit+0x50>
 80095ec:	2302      	movs	r3, #2
 80095ee:	e0cc      	b.n	800978a <HAL_I2C_Master_Transmit+0x1ea>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b01      	cmp	r3, #1
 8009604:	d007      	beq.n	8009616 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f042 0201 	orr.w	r2, r2, #1
 8009614:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009624:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2221      	movs	r2, #33	; 0x21
 800962a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2210      	movs	r2, #16
 8009632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	893a      	ldrh	r2, [r7, #8]
 8009646:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800964c:	b29a      	uxth	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	4a50      	ldr	r2, [pc, #320]	; (8009798 <HAL_I2C_Master_Transmit+0x1f8>)
 8009656:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009658:	8979      	ldrh	r1, [r7, #10]
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	6a3a      	ldr	r2, [r7, #32]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 fc16 	bl	8009e90 <I2C_MasterRequestWrite>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e08d      	b.n	800978a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800966e:	2300      	movs	r3, #0
 8009670:	613b      	str	r3, [r7, #16]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	613b      	str	r3, [r7, #16]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	613b      	str	r3, [r7, #16]
 8009682:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009684:	e066      	b.n	8009754 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	6a39      	ldr	r1, [r7, #32]
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f000 ff1a 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00d      	beq.n	80096b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	2b04      	cmp	r3, #4
 800969c:	d107      	bne.n	80096ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e06b      	b.n	800978a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	781a      	ldrb	r2, [r3, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	3b01      	subs	r3, #1
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096da:	3b01      	subs	r3, #1
 80096dc:	b29a      	uxth	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	f003 0304 	and.w	r3, r3, #4
 80096ec:	2b04      	cmp	r3, #4
 80096ee:	d11b      	bne.n	8009728 <HAL_I2C_Master_Transmit+0x188>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d017      	beq.n	8009728 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	781a      	ldrb	r2, [r3, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009712:	b29b      	uxth	r3, r3
 8009714:	3b01      	subs	r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	6a39      	ldr	r1, [r7, #32]
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 ff11 	bl	800a554 <I2C_WaitOnBTFFlagUntilTimeout>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00d      	beq.n	8009754 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973c:	2b04      	cmp	r3, #4
 800973e:	d107      	bne.n	8009750 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800974e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e01a      	b.n	800978a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009758:	2b00      	cmp	r3, #0
 800975a:	d194      	bne.n	8009686 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800976a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2220      	movs	r2, #32
 8009770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	e000      	b.n	800978a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009788:	2302      	movs	r3, #2
  }
}
 800978a:	4618      	mov	r0, r3
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	00100002 	.word	0x00100002
 8009798:	ffff0000 	.word	0xffff0000

0800979c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	4608      	mov	r0, r1
 80097a6:	4611      	mov	r1, r2
 80097a8:	461a      	mov	r2, r3
 80097aa:	4603      	mov	r3, r0
 80097ac:	817b      	strh	r3, [r7, #10]
 80097ae:	460b      	mov	r3, r1
 80097b0:	813b      	strh	r3, [r7, #8]
 80097b2:	4613      	mov	r3, r2
 80097b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80097b6:	f7fe ff5d 	bl	8008674 <HAL_GetTick>
 80097ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b20      	cmp	r3, #32
 80097c6:	f040 80d9 	bne.w	800997c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	2319      	movs	r3, #25
 80097d0:	2201      	movs	r2, #1
 80097d2:	496d      	ldr	r1, [pc, #436]	; (8009988 <HAL_I2C_Mem_Write+0x1ec>)
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 fd5b 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80097e0:	2302      	movs	r3, #2
 80097e2:	e0cc      	b.n	800997e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d101      	bne.n	80097f2 <HAL_I2C_Mem_Write+0x56>
 80097ee:	2302      	movs	r3, #2
 80097f0:	e0c5      	b.n	800997e <HAL_I2C_Mem_Write+0x1e2>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0301 	and.w	r3, r3, #1
 8009804:	2b01      	cmp	r3, #1
 8009806:	d007      	beq.n	8009818 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0201 	orr.w	r2, r2, #1
 8009816:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009826:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2221      	movs	r2, #33	; 0x21
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2240      	movs	r2, #64	; 0x40
 8009834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6a3a      	ldr	r2, [r7, #32]
 8009842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009848:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800984e:	b29a      	uxth	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4a4d      	ldr	r2, [pc, #308]	; (800998c <HAL_I2C_Mem_Write+0x1f0>)
 8009858:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800985a:	88f8      	ldrh	r0, [r7, #6]
 800985c:	893a      	ldrh	r2, [r7, #8]
 800985e:	8979      	ldrh	r1, [r7, #10]
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fb92 	bl	8009f94 <I2C_RequestMemoryWrite>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d052      	beq.n	800991c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e081      	b.n	800997e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 fe20 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00d      	beq.n	80098a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988e:	2b04      	cmp	r3, #4
 8009890:	d107      	bne.n	80098a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e06b      	b.n	800997e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	1c5a      	adds	r2, r3, #1
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	3b01      	subs	r3, #1
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b04      	cmp	r3, #4
 80098e2:	d11b      	bne.n	800991c <HAL_I2C_Mem_Write+0x180>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d017      	beq.n	800991c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f0:	781a      	ldrb	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009906:	3b01      	subs	r3, #1
 8009908:	b29a      	uxth	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009912:	b29b      	uxth	r3, r3
 8009914:	3b01      	subs	r3, #1
 8009916:	b29a      	uxth	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1aa      	bne.n	800987a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 fe13 	bl	800a554 <I2C_WaitOnBTFFlagUntilTimeout>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00d      	beq.n	8009950 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	2b04      	cmp	r3, #4
 800993a:	d107      	bne.n	800994c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800994a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e016      	b.n	800997e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800995e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	e000      	b.n	800997e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800997c:	2302      	movs	r3, #2
  }
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	00100002 	.word	0x00100002
 800998c:	ffff0000 	.word	0xffff0000

08009990 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b08c      	sub	sp, #48	; 0x30
 8009994:	af02      	add	r7, sp, #8
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	4608      	mov	r0, r1
 800999a:	4611      	mov	r1, r2
 800999c:	461a      	mov	r2, r3
 800999e:	4603      	mov	r3, r0
 80099a0:	817b      	strh	r3, [r7, #10]
 80099a2:	460b      	mov	r3, r1
 80099a4:	813b      	strh	r3, [r7, #8]
 80099a6:	4613      	mov	r3, r2
 80099a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80099ae:	f7fe fe61 	bl	8008674 <HAL_GetTick>
 80099b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b20      	cmp	r3, #32
 80099be:	f040 8244 	bne.w	8009e4a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	2319      	movs	r3, #25
 80099c8:	2201      	movs	r2, #1
 80099ca:	4982      	ldr	r1, [pc, #520]	; (8009bd4 <HAL_I2C_Mem_Read+0x244>)
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 fc5f 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80099d8:	2302      	movs	r3, #2
 80099da:	e237      	b.n	8009e4c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d101      	bne.n	80099ea <HAL_I2C_Mem_Read+0x5a>
 80099e6:	2302      	movs	r3, #2
 80099e8:	e230      	b.n	8009e4c <HAL_I2C_Mem_Read+0x4bc>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d007      	beq.n	8009a10 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f042 0201 	orr.w	r2, r2, #1
 8009a0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2222      	movs	r2, #34	; 0x22
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2240      	movs	r2, #64	; 0x40
 8009a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4a62      	ldr	r2, [pc, #392]	; (8009bd8 <HAL_I2C_Mem_Read+0x248>)
 8009a50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a52:	88f8      	ldrh	r0, [r7, #6]
 8009a54:	893a      	ldrh	r2, [r7, #8]
 8009a56:	8979      	ldrh	r1, [r7, #10]
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	9301      	str	r3, [sp, #4]
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	4603      	mov	r3, r0
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 fb2c 	bl	800a0c0 <I2C_RequestMemoryRead>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e1ec      	b.n	8009e4c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d113      	bne.n	8009aa2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61fb      	str	r3, [r7, #28]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	61fb      	str	r3, [r7, #28]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	699b      	ldr	r3, [r3, #24]
 8009a8c:	61fb      	str	r3, [r7, #28]
 8009a8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a9e:	601a      	str	r2, [r3, #0]
 8009aa0:	e1c0      	b.n	8009e24 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d11e      	bne.n	8009ae8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009aba:	b672      	cpsid	i
}
 8009abc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009abe:	2300      	movs	r3, #0
 8009ac0:	61bb      	str	r3, [r7, #24]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	61bb      	str	r3, [r7, #24]
 8009ad2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ae2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009ae4:	b662      	cpsie	i
}
 8009ae6:	e035      	b.n	8009b54 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d11e      	bne.n	8009b2e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009afe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b00:	b672      	cpsid	i
}
 8009b02:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b04:	2300      	movs	r3, #0
 8009b06:	617b      	str	r3, [r7, #20]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009b2a:	b662      	cpsie	i
}
 8009b2c:	e012      	b.n	8009b54 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b3c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b3e:	2300      	movs	r3, #0
 8009b40:	613b      	str	r3, [r7, #16]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	613b      	str	r3, [r7, #16]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	613b      	str	r3, [r7, #16]
 8009b52:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009b54:	e166      	b.n	8009e24 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	f200 811f 	bhi.w	8009d9e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d123      	bne.n	8009bb0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 fd39 	bl	800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e167      	b.n	8009e4c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	691a      	ldr	r2, [r3, #16]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	b2d2      	uxtb	r2, r2
 8009b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bae:	e139      	b.n	8009e24 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d152      	bne.n	8009c5e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	4906      	ldr	r1, [pc, #24]	; (8009bdc <HAL_I2C_Mem_Read+0x24c>)
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 fb64 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d008      	beq.n	8009be0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e13c      	b.n	8009e4c <HAL_I2C_Mem_Read+0x4bc>
 8009bd2:	bf00      	nop
 8009bd4:	00100002 	.word	0x00100002
 8009bd8:	ffff0000 	.word	0xffff0000
 8009bdc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009be0:	b672      	cpsid	i
}
 8009be2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	691a      	ldr	r2, [r3, #16]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c10:	3b01      	subs	r3, #1
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c26:	b662      	cpsie	i
}
 8009c28:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	691a      	ldr	r2, [r3, #16]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	b2d2      	uxtb	r2, r2
 8009c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c46:	3b01      	subs	r3, #1
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c5c:	e0e2      	b.n	8009e24 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c64:	2200      	movs	r2, #0
 8009c66:	497b      	ldr	r1, [pc, #492]	; (8009e54 <HAL_I2C_Mem_Read+0x4c4>)
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 fb11 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e0e9      	b.n	8009e4c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c88:	b672      	cpsid	i
}
 8009c8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	691a      	ldr	r2, [r3, #16]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009cbe:	4b66      	ldr	r3, [pc, #408]	; (8009e58 <HAL_I2C_Mem_Read+0x4c8>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	08db      	lsrs	r3, r3, #3
 8009cc4:	4a65      	ldr	r2, [pc, #404]	; (8009e5c <HAL_I2C_Mem_Read+0x4cc>)
 8009cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cca:	0a1a      	lsrs	r2, r3, #8
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	00da      	lsls	r2, r3, #3
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d118      	bne.n	8009d16 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2220      	movs	r2, #32
 8009cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	f043 0220 	orr.w	r2, r3, #32
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009d06:	b662      	cpsie	i
}
 8009d08:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e09a      	b.n	8009e4c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b04      	cmp	r3, #4
 8009d22:	d1d9      	bne.n	8009cd8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	691a      	ldr	r2, [r3, #16]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	b2d2      	uxtb	r2, r2
 8009d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d50:	3b01      	subs	r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009d66:	b662      	cpsie	i
}
 8009d68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	691a      	ldr	r2, [r3, #16]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	b2d2      	uxtb	r2, r2
 8009d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d86:	3b01      	subs	r3, #1
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	3b01      	subs	r3, #1
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d9c:	e042      	b.n	8009e24 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 fc1e 	bl	800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e04c      	b.n	8009e4c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	691a      	ldr	r2, [r3, #16]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbc:	b2d2      	uxtb	r2, r2
 8009dbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	f003 0304 	and.w	r3, r3, #4
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	d118      	bne.n	8009e24 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	691a      	ldr	r2, [r3, #16]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	b2d2      	uxtb	r2, r2
 8009dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	1c5a      	adds	r2, r3, #1
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f47f ae94 	bne.w	8009b56 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	e000      	b.n	8009e4c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009e4a:	2302      	movs	r3, #2
  }
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3728      	adds	r7, #40	; 0x28
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	00010004 	.word	0x00010004
 8009e58:	200000b4 	.word	0x200000b4
 8009e5c:	14f8b589 	.word	0x14f8b589

08009e60 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e6e:	b2db      	uxtb	r3, r3
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bc80      	pop	{r7}
 8009e78:	4770      	bx	lr

08009e7a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bc80      	pop	{r7}
 8009e8e:	4770      	bx	lr

08009e90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af02      	add	r7, sp, #8
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	603b      	str	r3, [r7, #0]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2b08      	cmp	r3, #8
 8009eaa:	d006      	beq.n	8009eba <I2C_MasterRequestWrite+0x2a>
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d003      	beq.n	8009eba <I2C_MasterRequestWrite+0x2a>
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009eb8:	d108      	bne.n	8009ecc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e00b      	b.n	8009ee4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	2b12      	cmp	r3, #18
 8009ed2:	d107      	bne.n	8009ee4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ee2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f9cd 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00d      	beq.n	8009f18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f0a:	d103      	bne.n	8009f14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e035      	b.n	8009f84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f20:	d108      	bne.n	8009f34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f22:	897b      	ldrh	r3, [r7, #10]
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	461a      	mov	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f30:	611a      	str	r2, [r3, #16]
 8009f32:	e01b      	b.n	8009f6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009f34:	897b      	ldrh	r3, [r7, #10]
 8009f36:	11db      	asrs	r3, r3, #7
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	f003 0306 	and.w	r3, r3, #6
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	f063 030f 	orn	r3, r3, #15
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	490e      	ldr	r1, [pc, #56]	; (8009f8c <I2C_MasterRequestWrite+0xfc>)
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 fa16 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e010      	b.n	8009f84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009f62:	897b      	ldrh	r3, [r7, #10]
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	4907      	ldr	r1, [pc, #28]	; (8009f90 <I2C_MasterRequestWrite+0x100>)
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f000 fa06 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	00010008 	.word	0x00010008
 8009f90:	00010002 	.word	0x00010002

08009f94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	817b      	strh	r3, [r7, #10]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	813b      	strh	r3, [r7, #8]
 8009faa:	4613      	mov	r3, r2
 8009fac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 f960 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00d      	beq.n	8009ff2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fe4:	d103      	bne.n	8009fee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e05f      	b.n	800a0b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ff2:	897b      	ldrh	r3, [r7, #10]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a000:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	6a3a      	ldr	r2, [r7, #32]
 800a006:	492d      	ldr	r1, [pc, #180]	; (800a0bc <I2C_RequestMemoryWrite+0x128>)
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f9bb 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e04c      	b.n	800a0b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a018:	2300      	movs	r3, #0
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	617b      	str	r3, [r7, #20]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a030:	6a39      	ldr	r1, [r7, #32]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fa46 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00d      	beq.n	800a05a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	2b04      	cmp	r3, #4
 800a044:	d107      	bne.n	800a056 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a054:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e02b      	b.n	800a0b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d105      	bne.n	800a06c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a060:	893b      	ldrh	r3, [r7, #8]
 800a062:	b2da      	uxtb	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	611a      	str	r2, [r3, #16]
 800a06a:	e021      	b.n	800a0b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a06c:	893b      	ldrh	r3, [r7, #8]
 800a06e:	0a1b      	lsrs	r3, r3, #8
 800a070:	b29b      	uxth	r3, r3
 800a072:	b2da      	uxtb	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a07c:	6a39      	ldr	r1, [r7, #32]
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f000 fa20 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00d      	beq.n	800a0a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08e:	2b04      	cmp	r3, #4
 800a090:	d107      	bne.n	800a0a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e005      	b.n	800a0b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0a6:	893b      	ldrh	r3, [r7, #8]
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	00010002 	.word	0x00010002

0800a0c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b088      	sub	sp, #32
 800a0c4:	af02      	add	r7, sp, #8
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	817b      	strh	r3, [r7, #10]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	813b      	strh	r3, [r7, #8]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	2200      	movs	r2, #0
 800a102:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f000 f8c2 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00d      	beq.n	800a12e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a11c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a120:	d103      	bne.n	800a12a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a128:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e0aa      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a12e:	897b      	ldrh	r3, [r7, #10]
 800a130:	b2db      	uxtb	r3, r3
 800a132:	461a      	mov	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a13c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	6a3a      	ldr	r2, [r7, #32]
 800a142:	4952      	ldr	r1, [pc, #328]	; (800a28c <I2C_RequestMemoryRead+0x1cc>)
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f91d 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e097      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a154:	2300      	movs	r3, #0
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a16a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a16c:	6a39      	ldr	r1, [r7, #32]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 f9a8 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00d      	beq.n	800a196 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	2b04      	cmp	r3, #4
 800a180:	d107      	bne.n	800a192 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a190:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e076      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a196:	88fb      	ldrh	r3, [r7, #6]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d105      	bne.n	800a1a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a19c:	893b      	ldrh	r3, [r7, #8]
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	611a      	str	r2, [r3, #16]
 800a1a6:	e021      	b.n	800a1ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1a8:	893b      	ldrh	r3, [r7, #8]
 800a1aa:	0a1b      	lsrs	r3, r3, #8
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b8:	6a39      	ldr	r1, [r7, #32]
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 f982 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00d      	beq.n	800a1e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d107      	bne.n	800a1de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e050      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1e2:	893b      	ldrh	r3, [r7, #8]
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ee:	6a39      	ldr	r1, [r7, #32]
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f967 	bl	800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00d      	beq.n	800a218 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a200:	2b04      	cmp	r3, #4
 800a202:	d107      	bne.n	800a214 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a212:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e035      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a226:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	2200      	movs	r2, #0
 800a230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f82b 	bl	800a290 <I2C_WaitOnFlagUntilTimeout>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00d      	beq.n	800a25c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a24a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a24e:	d103      	bne.n	800a258 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a256:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e013      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a25c:	897b      	ldrh	r3, [r7, #10]
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f043 0301 	orr.w	r3, r3, #1
 800a264:	b2da      	uxtb	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	6a3a      	ldr	r2, [r7, #32]
 800a270:	4906      	ldr	r1, [pc, #24]	; (800a28c <I2C_RequestMemoryRead+0x1cc>)
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 f886 	bl	800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e000      	b.n	800a284 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	00010002 	.word	0x00010002

0800a290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	4613      	mov	r3, r2
 800a29e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2a0:	e048      	b.n	800a334 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2a8:	d044      	beq.n	800a334 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2aa:	f7fe f9e3 	bl	8008674 <HAL_GetTick>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d302      	bcc.n	800a2c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d139      	bne.n	800a334 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	0c1b      	lsrs	r3, r3, #16
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d10d      	bne.n	800a2e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	43da      	mvns	r2, r3
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bf0c      	ite	eq
 800a2dc:	2301      	moveq	r3, #1
 800a2de:	2300      	movne	r3, #0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	e00c      	b.n	800a300 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	43da      	mvns	r2, r3
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	bf0c      	ite	eq
 800a2f8:	2301      	moveq	r3, #1
 800a2fa:	2300      	movne	r3, #0
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	461a      	mov	r2, r3
 800a300:	79fb      	ldrb	r3, [r7, #7]
 800a302:	429a      	cmp	r2, r3
 800a304:	d116      	bne.n	800a334 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	f043 0220 	orr.w	r2, r3, #32
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e023      	b.n	800a37c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	0c1b      	lsrs	r3, r3, #16
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d10d      	bne.n	800a35a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	43da      	mvns	r2, r3
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	4013      	ands	r3, r2
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bf0c      	ite	eq
 800a350:	2301      	moveq	r3, #1
 800a352:	2300      	movne	r3, #0
 800a354:	b2db      	uxtb	r3, r3
 800a356:	461a      	mov	r2, r3
 800a358:	e00c      	b.n	800a374 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	43da      	mvns	r2, r3
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	4013      	ands	r3, r2
 800a366:	b29b      	uxth	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bf0c      	ite	eq
 800a36c:	2301      	moveq	r3, #1
 800a36e:	2300      	movne	r3, #0
 800a370:	b2db      	uxtb	r3, r3
 800a372:	461a      	mov	r2, r3
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	429a      	cmp	r2, r3
 800a378:	d093      	beq.n	800a2a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
 800a390:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a392:	e071      	b.n	800a478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a39e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a2:	d123      	bne.n	800a3ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a3bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d8:	f043 0204 	orr.w	r2, r3, #4
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e067      	b.n	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3f2:	d041      	beq.n	800a478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3f4:	f7fe f93e 	bl	8008674 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	429a      	cmp	r2, r3
 800a402:	d302      	bcc.n	800a40a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d136      	bne.n	800a478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	0c1b      	lsrs	r3, r3, #16
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b01      	cmp	r3, #1
 800a412:	d10c      	bne.n	800a42e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	43da      	mvns	r2, r3
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4013      	ands	r3, r2
 800a420:	b29b      	uxth	r3, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	bf14      	ite	ne
 800a426:	2301      	movne	r3, #1
 800a428:	2300      	moveq	r3, #0
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	e00b      	b.n	800a446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	43da      	mvns	r2, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	4013      	ands	r3, r2
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	bf14      	ite	ne
 800a440:	2301      	movne	r3, #1
 800a442:	2300      	moveq	r3, #0
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d016      	beq.n	800a478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2220      	movs	r2, #32
 800a454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a464:	f043 0220 	orr.w	r2, r3, #32
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e021      	b.n	800a4bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	0c1b      	lsrs	r3, r3, #16
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d10c      	bne.n	800a49c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	43da      	mvns	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4013      	ands	r3, r2
 800a48e:	b29b      	uxth	r3, r3
 800a490:	2b00      	cmp	r3, #0
 800a492:	bf14      	ite	ne
 800a494:	2301      	movne	r3, #1
 800a496:	2300      	moveq	r3, #0
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	e00b      	b.n	800a4b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	43da      	mvns	r2, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bf14      	ite	ne
 800a4ae:	2301      	movne	r3, #1
 800a4b0:	2300      	moveq	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f47f af6d 	bne.w	800a394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4d0:	e034      	b.n	800a53c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 f8e3 	bl	800a69e <I2C_IsAcknowledgeFailed>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e034      	b.n	800a54c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4e8:	d028      	beq.n	800a53c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ea:	f7fe f8c3 	bl	8008674 <HAL_GetTick>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d302      	bcc.n	800a500 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d11d      	bne.n	800a53c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50a:	2b80      	cmp	r3, #128	; 0x80
 800a50c:	d016      	beq.n	800a53c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2220      	movs	r2, #32
 800a518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a528:	f043 0220 	orr.w	r2, r3, #32
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e007      	b.n	800a54c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a546:	2b80      	cmp	r3, #128	; 0x80
 800a548:	d1c3      	bne.n	800a4d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a560:	e034      	b.n	800a5cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f000 f89b 	bl	800a69e <I2C_IsAcknowledgeFailed>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e034      	b.n	800a5dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a578:	d028      	beq.n	800a5cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a57a:	f7fe f87b 	bl	8008674 <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	429a      	cmp	r2, r3
 800a588:	d302      	bcc.n	800a590 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d11d      	bne.n	800a5cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d016      	beq.n	800a5cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	f043 0220 	orr.w	r2, r3, #32
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e007      	b.n	800a5dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	f003 0304 	and.w	r3, r3, #4
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d1c3      	bne.n	800a562 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5f0:	e049      	b.n	800a686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	f003 0310 	and.w	r3, r3, #16
 800a5fc:	2b10      	cmp	r3, #16
 800a5fe:	d119      	bne.n	800a634 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f06f 0210 	mvn.w	r2, #16
 800a608:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2220      	movs	r2, #32
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e030      	b.n	800a696 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a634:	f7fe f81e 	bl	8008674 <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	429a      	cmp	r2, r3
 800a642:	d302      	bcc.n	800a64a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d11d      	bne.n	800a686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	695b      	ldr	r3, [r3, #20]
 800a650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a654:	2b40      	cmp	r3, #64	; 0x40
 800a656:	d016      	beq.n	800a686 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2220      	movs	r2, #32
 800a662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a672:	f043 0220 	orr.w	r2, r3, #32
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e007      	b.n	800a696 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a690:	2b40      	cmp	r3, #64	; 0x40
 800a692:	d1ae      	bne.n	800a5f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6b4:	d11b      	bne.n	800a6ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a6be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6da:	f043 0204 	orr.w	r2, r3, #4
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e000      	b.n	800a6f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bc80      	pop	{r7}
 800a6f8:	4770      	bx	lr
	...

0800a6fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e272      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 8087 	beq.w	800a82a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a71c:	4b92      	ldr	r3, [pc, #584]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f003 030c 	and.w	r3, r3, #12
 800a724:	2b04      	cmp	r3, #4
 800a726:	d00c      	beq.n	800a742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a728:	4b8f      	ldr	r3, [pc, #572]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f003 030c 	and.w	r3, r3, #12
 800a730:	2b08      	cmp	r3, #8
 800a732:	d112      	bne.n	800a75a <HAL_RCC_OscConfig+0x5e>
 800a734:	4b8c      	ldr	r3, [pc, #560]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a740:	d10b      	bne.n	800a75a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a742:	4b89      	ldr	r3, [pc, #548]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d06c      	beq.n	800a828 <HAL_RCC_OscConfig+0x12c>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d168      	bne.n	800a828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e24c      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a762:	d106      	bne.n	800a772 <HAL_RCC_OscConfig+0x76>
 800a764:	4b80      	ldr	r3, [pc, #512]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a7f      	ldr	r2, [pc, #508]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a76a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	e02e      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10c      	bne.n	800a794 <HAL_RCC_OscConfig+0x98>
 800a77a:	4b7b      	ldr	r3, [pc, #492]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a7a      	ldr	r2, [pc, #488]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a784:	6013      	str	r3, [r2, #0]
 800a786:	4b78      	ldr	r3, [pc, #480]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a77      	ldr	r2, [pc, #476]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a78c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	e01d      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a79c:	d10c      	bne.n	800a7b8 <HAL_RCC_OscConfig+0xbc>
 800a79e:	4b72      	ldr	r3, [pc, #456]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a71      	ldr	r2, [pc, #452]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	4b6f      	ldr	r3, [pc, #444]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a6e      	ldr	r2, [pc, #440]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	e00b      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a7b8:	4b6b      	ldr	r3, [pc, #428]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a6a      	ldr	r2, [pc, #424]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	4b68      	ldr	r3, [pc, #416]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a67      	ldr	r2, [pc, #412]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d013      	beq.n	800a800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7d8:	f7fd ff4c 	bl	8008674 <HAL_GetTick>
 800a7dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7de:	e008      	b.n	800a7f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7e0:	f7fd ff48 	bl	8008674 <HAL_GetTick>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b64      	cmp	r3, #100	; 0x64
 800a7ec:	d901      	bls.n	800a7f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e200      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7f2:	4b5d      	ldr	r3, [pc, #372]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0f0      	beq.n	800a7e0 <HAL_RCC_OscConfig+0xe4>
 800a7fe:	e014      	b.n	800a82a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a800:	f7fd ff38 	bl	8008674 <HAL_GetTick>
 800a804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a806:	e008      	b.n	800a81a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a808:	f7fd ff34 	bl	8008674 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b64      	cmp	r3, #100	; 0x64
 800a814:	d901      	bls.n	800a81a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e1ec      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a81a:	4b53      	ldr	r3, [pc, #332]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f0      	bne.n	800a808 <HAL_RCC_OscConfig+0x10c>
 800a826:	e000      	b.n	800a82a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 0302 	and.w	r3, r3, #2
 800a832:	2b00      	cmp	r3, #0
 800a834:	d063      	beq.n	800a8fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a836:	4b4c      	ldr	r3, [pc, #304]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f003 030c 	and.w	r3, r3, #12
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00b      	beq.n	800a85a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a842:	4b49      	ldr	r3, [pc, #292]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f003 030c 	and.w	r3, r3, #12
 800a84a:	2b08      	cmp	r3, #8
 800a84c:	d11c      	bne.n	800a888 <HAL_RCC_OscConfig+0x18c>
 800a84e:	4b46      	ldr	r3, [pc, #280]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d116      	bne.n	800a888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a85a:	4b43      	ldr	r3, [pc, #268]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d005      	beq.n	800a872 <HAL_RCC_OscConfig+0x176>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d001      	beq.n	800a872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e1c0      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a872:	4b3d      	ldr	r3, [pc, #244]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	695b      	ldr	r3, [r3, #20]
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	4939      	ldr	r1, [pc, #228]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a882:	4313      	orrs	r3, r2
 800a884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a886:	e03a      	b.n	800a8fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d020      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a890:	4b36      	ldr	r3, [pc, #216]	; (800a96c <HAL_RCC_OscConfig+0x270>)
 800a892:	2201      	movs	r2, #1
 800a894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a896:	f7fd feed 	bl	8008674 <HAL_GetTick>
 800a89a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a89c:	e008      	b.n	800a8b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a89e:	f7fd fee9 	bl	8008674 <HAL_GetTick>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d901      	bls.n	800a8b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e1a1      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8b0:	4b2d      	ldr	r3, [pc, #180]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 0302 	and.w	r3, r3, #2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0f0      	beq.n	800a89e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8bc:	4b2a      	ldr	r3, [pc, #168]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	4927      	ldr	r1, [pc, #156]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	600b      	str	r3, [r1, #0]
 800a8d0:	e015      	b.n	800a8fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8d2:	4b26      	ldr	r3, [pc, #152]	; (800a96c <HAL_RCC_OscConfig+0x270>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8d8:	f7fd fecc 	bl	8008674 <HAL_GetTick>
 800a8dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8de:	e008      	b.n	800a8f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8e0:	f7fd fec8 	bl	8008674 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d901      	bls.n	800a8f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e180      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8f2:	4b1d      	ldr	r3, [pc, #116]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0302 	and.w	r3, r3, #2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1f0      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0308 	and.w	r3, r3, #8
 800a906:	2b00      	cmp	r3, #0
 800a908:	d03a      	beq.n	800a980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d019      	beq.n	800a946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a912:	4b17      	ldr	r3, [pc, #92]	; (800a970 <HAL_RCC_OscConfig+0x274>)
 800a914:	2201      	movs	r2, #1
 800a916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a918:	f7fd feac 	bl	8008674 <HAL_GetTick>
 800a91c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a91e:	e008      	b.n	800a932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a920:	f7fd fea8 	bl	8008674 <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d901      	bls.n	800a932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e160      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a932:	4b0d      	ldr	r3, [pc, #52]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0f0      	beq.n	800a920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a93e:	2001      	movs	r0, #1
 800a940:	f000 face 	bl	800aee0 <RCC_Delay>
 800a944:	e01c      	b.n	800a980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a946:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <HAL_RCC_OscConfig+0x274>)
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a94c:	f7fd fe92 	bl	8008674 <HAL_GetTick>
 800a950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a952:	e00f      	b.n	800a974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a954:	f7fd fe8e 	bl	8008674 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d908      	bls.n	800a974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e146      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
 800a966:	bf00      	nop
 800a968:	40021000 	.word	0x40021000
 800a96c:	42420000 	.word	0x42420000
 800a970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a974:	4b92      	ldr	r3, [pc, #584]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e9      	bne.n	800a954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0304 	and.w	r3, r3, #4
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 80a6 	beq.w	800aada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a98e:	2300      	movs	r3, #0
 800a990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a992:	4b8b      	ldr	r3, [pc, #556]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10d      	bne.n	800a9ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a99e:	4b88      	ldr	r3, [pc, #544]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	4a87      	ldr	r2, [pc, #540]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800a9a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9a8:	61d3      	str	r3, [r2, #28]
 800a9aa:	4b85      	ldr	r3, [pc, #532]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9b2:	60bb      	str	r3, [r7, #8]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ba:	4b82      	ldr	r3, [pc, #520]	; (800abc4 <HAL_RCC_OscConfig+0x4c8>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d118      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9c6:	4b7f      	ldr	r3, [pc, #508]	; (800abc4 <HAL_RCC_OscConfig+0x4c8>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a7e      	ldr	r2, [pc, #504]	; (800abc4 <HAL_RCC_OscConfig+0x4c8>)
 800a9cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9d2:	f7fd fe4f 	bl	8008674 <HAL_GetTick>
 800a9d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9d8:	e008      	b.n	800a9ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9da:	f7fd fe4b 	bl	8008674 <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	2b64      	cmp	r3, #100	; 0x64
 800a9e6:	d901      	bls.n	800a9ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e103      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ec:	4b75      	ldr	r3, [pc, #468]	; (800abc4 <HAL_RCC_OscConfig+0x4c8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d0f0      	beq.n	800a9da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d106      	bne.n	800aa0e <HAL_RCC_OscConfig+0x312>
 800aa00:	4b6f      	ldr	r3, [pc, #444]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	4a6e      	ldr	r2, [pc, #440]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa06:	f043 0301 	orr.w	r3, r3, #1
 800aa0a:	6213      	str	r3, [r2, #32]
 800aa0c:	e02d      	b.n	800aa6a <HAL_RCC_OscConfig+0x36e>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10c      	bne.n	800aa30 <HAL_RCC_OscConfig+0x334>
 800aa16:	4b6a      	ldr	r3, [pc, #424]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	4a69      	ldr	r2, [pc, #420]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa1c:	f023 0301 	bic.w	r3, r3, #1
 800aa20:	6213      	str	r3, [r2, #32]
 800aa22:	4b67      	ldr	r3, [pc, #412]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	4a66      	ldr	r2, [pc, #408]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa28:	f023 0304 	bic.w	r3, r3, #4
 800aa2c:	6213      	str	r3, [r2, #32]
 800aa2e:	e01c      	b.n	800aa6a <HAL_RCC_OscConfig+0x36e>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	2b05      	cmp	r3, #5
 800aa36:	d10c      	bne.n	800aa52 <HAL_RCC_OscConfig+0x356>
 800aa38:	4b61      	ldr	r3, [pc, #388]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	4a60      	ldr	r2, [pc, #384]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa3e:	f043 0304 	orr.w	r3, r3, #4
 800aa42:	6213      	str	r3, [r2, #32]
 800aa44:	4b5e      	ldr	r3, [pc, #376]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	4a5d      	ldr	r2, [pc, #372]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa4a:	f043 0301 	orr.w	r3, r3, #1
 800aa4e:	6213      	str	r3, [r2, #32]
 800aa50:	e00b      	b.n	800aa6a <HAL_RCC_OscConfig+0x36e>
 800aa52:	4b5b      	ldr	r3, [pc, #364]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	4a5a      	ldr	r2, [pc, #360]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa58:	f023 0301 	bic.w	r3, r3, #1
 800aa5c:	6213      	str	r3, [r2, #32]
 800aa5e:	4b58      	ldr	r3, [pc, #352]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	4a57      	ldr	r2, [pc, #348]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa64:	f023 0304 	bic.w	r3, r3, #4
 800aa68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d015      	beq.n	800aa9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa72:	f7fd fdff 	bl	8008674 <HAL_GetTick>
 800aa76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa78:	e00a      	b.n	800aa90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa7a:	f7fd fdfb 	bl	8008674 <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d901      	bls.n	800aa90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e0b1      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa90:	4b4b      	ldr	r3, [pc, #300]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	f003 0302 	and.w	r3, r3, #2
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d0ee      	beq.n	800aa7a <HAL_RCC_OscConfig+0x37e>
 800aa9c:	e014      	b.n	800aac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa9e:	f7fd fde9 	bl	8008674 <HAL_GetTick>
 800aaa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aaa4:	e00a      	b.n	800aabc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaa6:	f7fd fde5 	bl	8008674 <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d901      	bls.n	800aabc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e09b      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aabc:	4b40      	ldr	r3, [pc, #256]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	f003 0302 	and.w	r3, r3, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1ee      	bne.n	800aaa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d105      	bne.n	800aada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aace:	4b3c      	ldr	r3, [pc, #240]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aad0:	69db      	ldr	r3, [r3, #28]
 800aad2:	4a3b      	ldr	r2, [pc, #236]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 8087 	beq.w	800abf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aae4:	4b36      	ldr	r3, [pc, #216]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f003 030c 	and.w	r3, r3, #12
 800aaec:	2b08      	cmp	r3, #8
 800aaee:	d061      	beq.n	800abb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d146      	bne.n	800ab86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaf8:	4b33      	ldr	r3, [pc, #204]	; (800abc8 <HAL_RCC_OscConfig+0x4cc>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aafe:	f7fd fdb9 	bl	8008674 <HAL_GetTick>
 800ab02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab04:	e008      	b.n	800ab18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab06:	f7fd fdb5 	bl	8008674 <HAL_GetTick>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d901      	bls.n	800ab18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e06d      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab18:	4b29      	ldr	r3, [pc, #164]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1f0      	bne.n	800ab06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a1b      	ldr	r3, [r3, #32]
 800ab28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab2c:	d108      	bne.n	800ab40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ab2e:	4b24      	ldr	r3, [pc, #144]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	4921      	ldr	r1, [pc, #132]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab40:	4b1f      	ldr	r3, [pc, #124]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a19      	ldr	r1, [r3, #32]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab50:	430b      	orrs	r3, r1
 800ab52:	491b      	ldr	r1, [pc, #108]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab54:	4313      	orrs	r3, r2
 800ab56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab58:	4b1b      	ldr	r3, [pc, #108]	; (800abc8 <HAL_RCC_OscConfig+0x4cc>)
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab5e:	f7fd fd89 	bl	8008674 <HAL_GetTick>
 800ab62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab64:	e008      	b.n	800ab78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab66:	f7fd fd85 	bl	8008674 <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d901      	bls.n	800ab78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e03d      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab78:	4b11      	ldr	r3, [pc, #68]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0f0      	beq.n	800ab66 <HAL_RCC_OscConfig+0x46a>
 800ab84:	e035      	b.n	800abf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab86:	4b10      	ldr	r3, [pc, #64]	; (800abc8 <HAL_RCC_OscConfig+0x4cc>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab8c:	f7fd fd72 	bl	8008674 <HAL_GetTick>
 800ab90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab92:	e008      	b.n	800aba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab94:	f7fd fd6e 	bl	8008674 <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d901      	bls.n	800aba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e026      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aba6:	4b06      	ldr	r3, [pc, #24]	; (800abc0 <HAL_RCC_OscConfig+0x4c4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f0      	bne.n	800ab94 <HAL_RCC_OscConfig+0x498>
 800abb2:	e01e      	b.n	800abf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	69db      	ldr	r3, [r3, #28]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d107      	bne.n	800abcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	e019      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
 800abc0:	40021000 	.word	0x40021000
 800abc4:	40007000 	.word	0x40007000
 800abc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800abcc:	4b0b      	ldr	r3, [pc, #44]	; (800abfc <HAL_RCC_OscConfig+0x500>)
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d106      	bne.n	800abee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abea:	429a      	cmp	r2, r3
 800abec:	d001      	beq.n	800abf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3718      	adds	r7, #24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	40021000 	.word	0x40021000

0800ac00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e0d0      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac14:	4b6a      	ldr	r3, [pc, #424]	; (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0307 	and.w	r3, r3, #7
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d910      	bls.n	800ac44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac22:	4b67      	ldr	r3, [pc, #412]	; (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f023 0207 	bic.w	r2, r3, #7
 800ac2a:	4965      	ldr	r1, [pc, #404]	; (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac32:	4b63      	ldr	r3, [pc, #396]	; (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 0307 	and.w	r3, r3, #7
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d001      	beq.n	800ac44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e0b8      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0302 	and.w	r3, r3, #2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d020      	beq.n	800ac92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d005      	beq.n	800ac68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac5c:	4b59      	ldr	r3, [pc, #356]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4a58      	ldr	r2, [pc, #352]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ac66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0308 	and.w	r3, r3, #8
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d005      	beq.n	800ac80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac74:	4b53      	ldr	r3, [pc, #332]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	4a52      	ldr	r2, [pc, #328]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ac7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac80:	4b50      	ldr	r3, [pc, #320]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	494d      	ldr	r1, [pc, #308]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d040      	beq.n	800ad20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d107      	bne.n	800acb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aca6:	4b47      	ldr	r3, [pc, #284]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d115      	bne.n	800acde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e07f      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d107      	bne.n	800acce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acbe:	4b41      	ldr	r3, [pc, #260]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d109      	bne.n	800acde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e073      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acce:	4b3d      	ldr	r3, [pc, #244]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e06b      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800acde:	4b39      	ldr	r3, [pc, #228]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f023 0203 	bic.w	r2, r3, #3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	4936      	ldr	r1, [pc, #216]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800acec:	4313      	orrs	r3, r2
 800acee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800acf0:	f7fd fcc0 	bl	8008674 <HAL_GetTick>
 800acf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acf6:	e00a      	b.n	800ad0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acf8:	f7fd fcbc 	bl	8008674 <HAL_GetTick>
 800acfc:	4602      	mov	r2, r0
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	1ad3      	subs	r3, r2, r3
 800ad02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d901      	bls.n	800ad0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e053      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad0e:	4b2d      	ldr	r3, [pc, #180]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f003 020c 	and.w	r2, r3, #12
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d1eb      	bne.n	800acf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad20:	4b27      	ldr	r3, [pc, #156]	; (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0307 	and.w	r3, r3, #7
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d210      	bcs.n	800ad50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad2e:	4b24      	ldr	r3, [pc, #144]	; (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f023 0207 	bic.w	r2, r3, #7
 800ad36:	4922      	ldr	r1, [pc, #136]	; (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad3e:	4b20      	ldr	r3, [pc, #128]	; (800adc0 <HAL_RCC_ClockConfig+0x1c0>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d001      	beq.n	800ad50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e032      	b.n	800adb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0304 	and.w	r3, r3, #4
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d008      	beq.n	800ad6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad5c:	4b19      	ldr	r3, [pc, #100]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	4916      	ldr	r1, [pc, #88]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0308 	and.w	r3, r3, #8
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d009      	beq.n	800ad8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad7a:	4b12      	ldr	r3, [pc, #72]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	490e      	ldr	r1, [pc, #56]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad8e:	f000 f821 	bl	800add4 <HAL_RCC_GetSysClockFreq>
 800ad92:	4602      	mov	r2, r0
 800ad94:	4b0b      	ldr	r3, [pc, #44]	; (800adc4 <HAL_RCC_ClockConfig+0x1c4>)
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	091b      	lsrs	r3, r3, #4
 800ad9a:	f003 030f 	and.w	r3, r3, #15
 800ad9e:	490a      	ldr	r1, [pc, #40]	; (800adc8 <HAL_RCC_ClockConfig+0x1c8>)
 800ada0:	5ccb      	ldrb	r3, [r1, r3]
 800ada2:	fa22 f303 	lsr.w	r3, r2, r3
 800ada6:	4a09      	ldr	r2, [pc, #36]	; (800adcc <HAL_RCC_ClockConfig+0x1cc>)
 800ada8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800adaa:	4b09      	ldr	r3, [pc, #36]	; (800add0 <HAL_RCC_ClockConfig+0x1d0>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fd fc1e 	bl	80085f0 <HAL_InitTick>

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	40022000 	.word	0x40022000
 800adc4:	40021000 	.word	0x40021000
 800adc8:	0800dc84 	.word	0x0800dc84
 800adcc:	200000b4 	.word	0x200000b4
 800add0:	200000b8 	.word	0x200000b8

0800add4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	2300      	movs	r3, #0
 800ade0:	60bb      	str	r3, [r7, #8]
 800ade2:	2300      	movs	r3, #0
 800ade4:	617b      	str	r3, [r7, #20]
 800ade6:	2300      	movs	r3, #0
 800ade8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800adea:	2300      	movs	r3, #0
 800adec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800adee:	4b1e      	ldr	r3, [pc, #120]	; (800ae68 <HAL_RCC_GetSysClockFreq+0x94>)
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f003 030c 	and.w	r3, r3, #12
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d002      	beq.n	800ae04 <HAL_RCC_GetSysClockFreq+0x30>
 800adfe:	2b08      	cmp	r3, #8
 800ae00:	d003      	beq.n	800ae0a <HAL_RCC_GetSysClockFreq+0x36>
 800ae02:	e027      	b.n	800ae54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ae04:	4b19      	ldr	r3, [pc, #100]	; (800ae6c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae06:	613b      	str	r3, [r7, #16]
      break;
 800ae08:	e027      	b.n	800ae5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	0c9b      	lsrs	r3, r3, #18
 800ae0e:	f003 030f 	and.w	r3, r3, #15
 800ae12:	4a17      	ldr	r2, [pc, #92]	; (800ae70 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ae14:	5cd3      	ldrb	r3, [r2, r3]
 800ae16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d010      	beq.n	800ae44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ae22:	4b11      	ldr	r3, [pc, #68]	; (800ae68 <HAL_RCC_GetSysClockFreq+0x94>)
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	0c5b      	lsrs	r3, r3, #17
 800ae28:	f003 0301 	and.w	r3, r3, #1
 800ae2c:	4a11      	ldr	r2, [pc, #68]	; (800ae74 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ae2e:	5cd3      	ldrb	r3, [r2, r3]
 800ae30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a0d      	ldr	r2, [pc, #52]	; (800ae6c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae36:	fb03 f202 	mul.w	r2, r3, r2
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae40:	617b      	str	r3, [r7, #20]
 800ae42:	e004      	b.n	800ae4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a0c      	ldr	r2, [pc, #48]	; (800ae78 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ae48:	fb02 f303 	mul.w	r3, r2, r3
 800ae4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	613b      	str	r3, [r7, #16]
      break;
 800ae52:	e002      	b.n	800ae5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <HAL_RCC_GetSysClockFreq+0x98>)
 800ae56:	613b      	str	r3, [r7, #16]
      break;
 800ae58:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae5a:	693b      	ldr	r3, [r7, #16]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bc80      	pop	{r7}
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	40021000 	.word	0x40021000
 800ae6c:	007a1200 	.word	0x007a1200
 800ae70:	0800dc9c 	.word	0x0800dc9c
 800ae74:	0800dcac 	.word	0x0800dcac
 800ae78:	003d0900 	.word	0x003d0900

0800ae7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae80:	4b02      	ldr	r3, [pc, #8]	; (800ae8c <HAL_RCC_GetHCLKFreq+0x10>)
 800ae82:	681b      	ldr	r3, [r3, #0]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bc80      	pop	{r7}
 800ae8a:	4770      	bx	lr
 800ae8c:	200000b4 	.word	0x200000b4

0800ae90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae94:	f7ff fff2 	bl	800ae7c <HAL_RCC_GetHCLKFreq>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	0a1b      	lsrs	r3, r3, #8
 800aea0:	f003 0307 	and.w	r3, r3, #7
 800aea4:	4903      	ldr	r1, [pc, #12]	; (800aeb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aea6:	5ccb      	ldrb	r3, [r1, r3]
 800aea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	40021000 	.word	0x40021000
 800aeb4:	0800dc94 	.word	0x0800dc94

0800aeb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aebc:	f7ff ffde 	bl	800ae7c <HAL_RCC_GetHCLKFreq>
 800aec0:	4602      	mov	r2, r0
 800aec2:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	0adb      	lsrs	r3, r3, #11
 800aec8:	f003 0307 	and.w	r3, r3, #7
 800aecc:	4903      	ldr	r1, [pc, #12]	; (800aedc <HAL_RCC_GetPCLK2Freq+0x24>)
 800aece:	5ccb      	ldrb	r3, [r1, r3]
 800aed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	40021000 	.word	0x40021000
 800aedc:	0800dc94 	.word	0x0800dc94

0800aee0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aee8:	4b0a      	ldr	r3, [pc, #40]	; (800af14 <RCC_Delay+0x34>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a0a      	ldr	r2, [pc, #40]	; (800af18 <RCC_Delay+0x38>)
 800aeee:	fba2 2303 	umull	r2, r3, r2, r3
 800aef2:	0a5b      	lsrs	r3, r3, #9
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	fb02 f303 	mul.w	r3, r2, r3
 800aefa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aefc:	bf00      	nop
  }
  while (Delay --);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	1e5a      	subs	r2, r3, #1
 800af02:	60fa      	str	r2, [r7, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1f9      	bne.n	800aefc <RCC_Delay+0x1c>
}
 800af08:	bf00      	nop
 800af0a:	bf00      	nop
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	bc80      	pop	{r7}
 800af12:	4770      	bx	lr
 800af14:	200000b4 	.word	0x200000b4
 800af18:	10624dd3 	.word	0x10624dd3

0800af1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e041      	b.n	800afb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	d106      	bne.n	800af48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7fd fa26 	bl	8008394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2202      	movs	r2, #2
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	3304      	adds	r3, #4
 800af58:	4619      	mov	r1, r3
 800af5a:	4610      	mov	r0, r2
 800af5c:	f000 fa82 	bl	800b464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
	...

0800afbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d001      	beq.n	800afd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e044      	b.n	800b05e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68da      	ldr	r2, [r3, #12]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f042 0201 	orr.w	r2, r2, #1
 800afea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a1d      	ldr	r2, [pc, #116]	; (800b068 <HAL_TIM_Base_Start_IT+0xac>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d018      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x6c>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a1c      	ldr	r2, [pc, #112]	; (800b06c <HAL_TIM_Base_Start_IT+0xb0>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d013      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x6c>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b008:	d00e      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x6c>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a18      	ldr	r2, [pc, #96]	; (800b070 <HAL_TIM_Base_Start_IT+0xb4>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d009      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x6c>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a16      	ldr	r2, [pc, #88]	; (800b074 <HAL_TIM_Base_Start_IT+0xb8>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d004      	beq.n	800b028 <HAL_TIM_Base_Start_IT+0x6c>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a15      	ldr	r2, [pc, #84]	; (800b078 <HAL_TIM_Base_Start_IT+0xbc>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d111      	bne.n	800b04c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f003 0307 	and.w	r3, r3, #7
 800b032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2b06      	cmp	r3, #6
 800b038:	d010      	beq.n	800b05c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f042 0201 	orr.w	r2, r2, #1
 800b048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b04a:	e007      	b.n	800b05c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f042 0201 	orr.w	r2, r2, #1
 800b05a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3714      	adds	r7, #20
 800b062:	46bd      	mov	sp, r7
 800b064:	bc80      	pop	{r7}
 800b066:	4770      	bx	lr
 800b068:	40012c00 	.word	0x40012c00
 800b06c:	40013400 	.word	0x40013400
 800b070:	40000400 	.word	0x40000400
 800b074:	40000800 	.word	0x40000800
 800b078:	40000c00 	.word	0x40000c00

0800b07c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	f003 0302 	and.w	r3, r3, #2
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d122      	bne.n	800b0d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d11b      	bne.n	800b0d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f06f 0202 	mvn.w	r2, #2
 800b0a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	f003 0303 	and.w	r3, r3, #3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d003      	beq.n	800b0c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f9b4 	bl	800b42c <HAL_TIM_IC_CaptureCallback>
 800b0c4:	e005      	b.n	800b0d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f9a7 	bl	800b41a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f9b6 	bl	800b43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	f003 0304 	and.w	r3, r3, #4
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	d122      	bne.n	800b12c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68db      	ldr	r3, [r3, #12]
 800b0ec:	f003 0304 	and.w	r3, r3, #4
 800b0f0:	2b04      	cmp	r3, #4
 800b0f2:	d11b      	bne.n	800b12c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f06f 0204 	mvn.w	r2, #4
 800b0fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2202      	movs	r2, #2
 800b102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f98a 	bl	800b42c <HAL_TIM_IC_CaptureCallback>
 800b118:	e005      	b.n	800b126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f97d 	bl	800b41a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f98c 	bl	800b43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	f003 0308 	and.w	r3, r3, #8
 800b136:	2b08      	cmp	r3, #8
 800b138:	d122      	bne.n	800b180 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	f003 0308 	and.w	r3, r3, #8
 800b144:	2b08      	cmp	r3, #8
 800b146:	d11b      	bne.n	800b180 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f06f 0208 	mvn.w	r2, #8
 800b150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2204      	movs	r2, #4
 800b156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	f003 0303 	and.w	r3, r3, #3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f960 	bl	800b42c <HAL_TIM_IC_CaptureCallback>
 800b16c:	e005      	b.n	800b17a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f953 	bl	800b41a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f962 	bl	800b43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	f003 0310 	and.w	r3, r3, #16
 800b18a:	2b10      	cmp	r3, #16
 800b18c:	d122      	bne.n	800b1d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	f003 0310 	and.w	r3, r3, #16
 800b198:	2b10      	cmp	r3, #16
 800b19a:	d11b      	bne.n	800b1d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f06f 0210 	mvn.w	r2, #16
 800b1a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2208      	movs	r2, #8
 800b1aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	69db      	ldr	r3, [r3, #28]
 800b1b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f936 	bl	800b42c <HAL_TIM_IC_CaptureCallback>
 800b1c0:	e005      	b.n	800b1ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f929 	bl	800b41a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f938 	bl	800b43e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	f003 0301 	and.w	r3, r3, #1
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d10e      	bne.n	800b200 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d107      	bne.n	800b200 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f06f 0201 	mvn.w	r2, #1
 800b1f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7fc fd62 	bl	8007cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b20a:	2b80      	cmp	r3, #128	; 0x80
 800b20c:	d10e      	bne.n	800b22c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b218:	2b80      	cmp	r3, #128	; 0x80
 800b21a:	d107      	bne.n	800b22c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 faa1 	bl	800b76e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b236:	2b40      	cmp	r3, #64	; 0x40
 800b238:	d10e      	bne.n	800b258 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b244:	2b40      	cmp	r3, #64	; 0x40
 800b246:	d107      	bne.n	800b258 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f8fc 	bl	800b450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	f003 0320 	and.w	r3, r3, #32
 800b262:	2b20      	cmp	r3, #32
 800b264:	d10e      	bne.n	800b284 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f003 0320 	and.w	r3, r3, #32
 800b270:	2b20      	cmp	r3, #32
 800b272:	d107      	bne.n	800b284 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f06f 0220 	mvn.w	r2, #32
 800b27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fa6c 	bl	800b75c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b284:	bf00      	nop
 800b286:	3708      	adds	r7, #8
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d101      	bne.n	800b2a8 <HAL_TIM_ConfigClockSource+0x1c>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e0b4      	b.n	800b412 <HAL_TIM_ConfigClockSource+0x186>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2e0:	d03e      	beq.n	800b360 <HAL_TIM_ConfigClockSource+0xd4>
 800b2e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2e6:	f200 8087 	bhi.w	800b3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ee:	f000 8086 	beq.w	800b3fe <HAL_TIM_ConfigClockSource+0x172>
 800b2f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f6:	d87f      	bhi.n	800b3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b2f8:	2b70      	cmp	r3, #112	; 0x70
 800b2fa:	d01a      	beq.n	800b332 <HAL_TIM_ConfigClockSource+0xa6>
 800b2fc:	2b70      	cmp	r3, #112	; 0x70
 800b2fe:	d87b      	bhi.n	800b3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b300:	2b60      	cmp	r3, #96	; 0x60
 800b302:	d050      	beq.n	800b3a6 <HAL_TIM_ConfigClockSource+0x11a>
 800b304:	2b60      	cmp	r3, #96	; 0x60
 800b306:	d877      	bhi.n	800b3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b308:	2b50      	cmp	r3, #80	; 0x50
 800b30a:	d03c      	beq.n	800b386 <HAL_TIM_ConfigClockSource+0xfa>
 800b30c:	2b50      	cmp	r3, #80	; 0x50
 800b30e:	d873      	bhi.n	800b3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b310:	2b40      	cmp	r3, #64	; 0x40
 800b312:	d058      	beq.n	800b3c6 <HAL_TIM_ConfigClockSource+0x13a>
 800b314:	2b40      	cmp	r3, #64	; 0x40
 800b316:	d86f      	bhi.n	800b3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b318:	2b30      	cmp	r3, #48	; 0x30
 800b31a:	d064      	beq.n	800b3e6 <HAL_TIM_ConfigClockSource+0x15a>
 800b31c:	2b30      	cmp	r3, #48	; 0x30
 800b31e:	d86b      	bhi.n	800b3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b320:	2b20      	cmp	r3, #32
 800b322:	d060      	beq.n	800b3e6 <HAL_TIM_ConfigClockSource+0x15a>
 800b324:	2b20      	cmp	r3, #32
 800b326:	d867      	bhi.n	800b3f8 <HAL_TIM_ConfigClockSource+0x16c>
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d05c      	beq.n	800b3e6 <HAL_TIM_ConfigClockSource+0x15a>
 800b32c:	2b10      	cmp	r3, #16
 800b32e:	d05a      	beq.n	800b3e6 <HAL_TIM_ConfigClockSource+0x15a>
 800b330:	e062      	b.n	800b3f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b342:	f000 f980 	bl	800b646 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b354:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68ba      	ldr	r2, [r7, #8]
 800b35c:	609a      	str	r2, [r3, #8]
      break;
 800b35e:	e04f      	b.n	800b400 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b370:	f000 f969 	bl	800b646 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b382:	609a      	str	r2, [r3, #8]
      break;
 800b384:	e03c      	b.n	800b400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b392:	461a      	mov	r2, r3
 800b394:	f000 f8e0 	bl	800b558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2150      	movs	r1, #80	; 0x50
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 f937 	bl	800b612 <TIM_ITRx_SetConfig>
      break;
 800b3a4:	e02c      	b.n	800b400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f000 f8fe 	bl	800b5b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2160      	movs	r1, #96	; 0x60
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 f927 	bl	800b612 <TIM_ITRx_SetConfig>
      break;
 800b3c4:	e01c      	b.n	800b400 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f000 f8c0 	bl	800b558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2140      	movs	r1, #64	; 0x40
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 f917 	bl	800b612 <TIM_ITRx_SetConfig>
      break;
 800b3e4:	e00c      	b.n	800b400 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	f000 f90e 	bl	800b612 <TIM_ITRx_SetConfig>
      break;
 800b3f6:	e003      	b.n	800b400 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b3fc:	e000      	b.n	800b400 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b3fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b410:	7bfb      	ldrb	r3, [r7, #15]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b41a:	b480      	push	{r7}
 800b41c:	b083      	sub	sp, #12
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b422:	bf00      	nop
 800b424:	370c      	adds	r7, #12
 800b426:	46bd      	mov	sp, r7
 800b428:	bc80      	pop	{r7}
 800b42a:	4770      	bx	lr

0800b42c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	bc80      	pop	{r7}
 800b43c:	4770      	bx	lr

0800b43e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b446:	bf00      	nop
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bc80      	pop	{r7}
 800b44e:	4770      	bx	lr

0800b450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bc80      	pop	{r7}
 800b460:	4770      	bx	lr
	...

0800b464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a33      	ldr	r2, [pc, #204]	; (800b544 <TIM_Base_SetConfig+0xe0>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d013      	beq.n	800b4a4 <TIM_Base_SetConfig+0x40>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a32      	ldr	r2, [pc, #200]	; (800b548 <TIM_Base_SetConfig+0xe4>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d00f      	beq.n	800b4a4 <TIM_Base_SetConfig+0x40>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b48a:	d00b      	beq.n	800b4a4 <TIM_Base_SetConfig+0x40>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a2f      	ldr	r2, [pc, #188]	; (800b54c <TIM_Base_SetConfig+0xe8>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d007      	beq.n	800b4a4 <TIM_Base_SetConfig+0x40>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a2e      	ldr	r2, [pc, #184]	; (800b550 <TIM_Base_SetConfig+0xec>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d003      	beq.n	800b4a4 <TIM_Base_SetConfig+0x40>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a2d      	ldr	r2, [pc, #180]	; (800b554 <TIM_Base_SetConfig+0xf0>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d108      	bne.n	800b4b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a22      	ldr	r2, [pc, #136]	; (800b544 <TIM_Base_SetConfig+0xe0>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d013      	beq.n	800b4e6 <TIM_Base_SetConfig+0x82>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a21      	ldr	r2, [pc, #132]	; (800b548 <TIM_Base_SetConfig+0xe4>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d00f      	beq.n	800b4e6 <TIM_Base_SetConfig+0x82>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4cc:	d00b      	beq.n	800b4e6 <TIM_Base_SetConfig+0x82>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a1e      	ldr	r2, [pc, #120]	; (800b54c <TIM_Base_SetConfig+0xe8>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d007      	beq.n	800b4e6 <TIM_Base_SetConfig+0x82>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a1d      	ldr	r2, [pc, #116]	; (800b550 <TIM_Base_SetConfig+0xec>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d003      	beq.n	800b4e6 <TIM_Base_SetConfig+0x82>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a1c      	ldr	r2, [pc, #112]	; (800b554 <TIM_Base_SetConfig+0xf0>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d108      	bne.n	800b4f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	4313      	orrs	r3, r2
 800b504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	689a      	ldr	r2, [r3, #8]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a09      	ldr	r2, [pc, #36]	; (800b544 <TIM_Base_SetConfig+0xe0>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d003      	beq.n	800b52c <TIM_Base_SetConfig+0xc8>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a08      	ldr	r2, [pc, #32]	; (800b548 <TIM_Base_SetConfig+0xe4>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d103      	bne.n	800b534 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	691a      	ldr	r2, [r3, #16]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	615a      	str	r2, [r3, #20]
}
 800b53a:	bf00      	nop
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	bc80      	pop	{r7}
 800b542:	4770      	bx	lr
 800b544:	40012c00 	.word	0x40012c00
 800b548:	40013400 	.word	0x40013400
 800b54c:	40000400 	.word	0x40000400
 800b550:	40000800 	.word	0x40000800
 800b554:	40000c00 	.word	0x40000c00

0800b558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b558:	b480      	push	{r7}
 800b55a:	b087      	sub	sp, #28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	f023 0201 	bic.w	r2, r3, #1
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	011b      	lsls	r3, r3, #4
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f023 030a 	bic.w	r3, r3, #10
 800b594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	693a      	ldr	r2, [r7, #16]
 800b5a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	621a      	str	r2, [r3, #32]
}
 800b5aa:	bf00      	nop
 800b5ac:	371c      	adds	r7, #28
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bc80      	pop	{r7}
 800b5b2:	4770      	bx	lr

0800b5b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6a1b      	ldr	r3, [r3, #32]
 800b5c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	f023 0210 	bic.w	r2, r3, #16
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b5de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	031b      	lsls	r3, r3, #12
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b5f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	011b      	lsls	r3, r3, #4
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	621a      	str	r2, [r3, #32]
}
 800b608:	bf00      	nop
 800b60a:	371c      	adds	r7, #28
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bc80      	pop	{r7}
 800b610:	4770      	bx	lr

0800b612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b612:	b480      	push	{r7}
 800b614:	b085      	sub	sp, #20
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	4313      	orrs	r3, r2
 800b630:	f043 0307 	orr.w	r3, r3, #7
 800b634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	609a      	str	r2, [r3, #8]
}
 800b63c:	bf00      	nop
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	bc80      	pop	{r7}
 800b644:	4770      	bx	lr

0800b646 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b646:	b480      	push	{r7}
 800b648:	b087      	sub	sp, #28
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	60f8      	str	r0, [r7, #12]
 800b64e:	60b9      	str	r1, [r7, #8]
 800b650:	607a      	str	r2, [r7, #4]
 800b652:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b660:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	021a      	lsls	r2, r3, #8
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	431a      	orrs	r2, r3
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	4313      	orrs	r3, r2
 800b672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	609a      	str	r2, [r3, #8]
}
 800b67a:	bf00      	nop
 800b67c:	371c      	adds	r7, #28
 800b67e:	46bd      	mov	sp, r7
 800b680:	bc80      	pop	{r7}
 800b682:	4770      	bx	lr

0800b684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b694:	2b01      	cmp	r3, #1
 800b696:	d101      	bne.n	800b69c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b698:	2302      	movs	r3, #2
 800b69a:	e050      	b.n	800b73e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a1b      	ldr	r2, [pc, #108]	; (800b748 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d018      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a19      	ldr	r2, [pc, #100]	; (800b74c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d013      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6f2:	d00e      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a15      	ldr	r2, [pc, #84]	; (800b750 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d009      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a14      	ldr	r2, [pc, #80]	; (800b754 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d004      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a12      	ldr	r2, [pc, #72]	; (800b758 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d10c      	bne.n	800b72c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	4313      	orrs	r3, r2
 800b722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	bc80      	pop	{r7}
 800b746:	4770      	bx	lr
 800b748:	40012c00 	.word	0x40012c00
 800b74c:	40013400 	.word	0x40013400
 800b750:	40000400 	.word	0x40000400
 800b754:	40000800 	.word	0x40000800
 800b758:	40000c00 	.word	0x40000c00

0800b75c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	bc80      	pop	{r7}
 800b76c:	4770      	bx	lr

0800b76e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b76e:	b480      	push	{r7}
 800b770:	b083      	sub	sp, #12
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b776:	bf00      	nop
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bc80      	pop	{r7}
 800b77e:	4770      	bx	lr

0800b780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e042      	b.n	800b818 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d106      	bne.n	800b7ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7fc fe1a 	bl	80083e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2224      	movs	r2, #36	; 0x24
 800b7b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fcb5 	bl	800c134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	691a      	ldr	r2, [r3, #16]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	695a      	ldr	r2, [r3, #20]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68da      	ldr	r2, [r3, #12]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2220      	movs	r2, #32
 800b804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2220      	movs	r2, #32
 800b80c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	4613      	mov	r3, r2
 800b82c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b834:	b2db      	uxtb	r3, r3
 800b836:	2b20      	cmp	r3, #32
 800b838:	d121      	bne.n	800b87e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <HAL_UART_Transmit_IT+0x26>
 800b840:	88fb      	ldrh	r3, [r7, #6]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e01a      	b.n	800b880 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	88fa      	ldrh	r2, [r7, #6]
 800b854:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	88fa      	ldrh	r2, [r7, #6]
 800b85a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2200      	movs	r2, #0
 800b860:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2221      	movs	r2, #33	; 0x21
 800b866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68da      	ldr	r2, [r3, #12]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b878:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	e000      	b.n	800b880 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b87e:	2302      	movs	r3, #2
  }
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	bc80      	pop	{r7}
 800b888:	4770      	bx	lr
	...

0800b88c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b0ba      	sub	sp, #232	; 0xe8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b8be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8c2:	f003 030f 	and.w	r3, r3, #15
 800b8c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b8ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10f      	bne.n	800b8f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8d6:	f003 0320 	and.w	r3, r3, #32
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d009      	beq.n	800b8f2 <HAL_UART_IRQHandler+0x66>
 800b8de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8e2:	f003 0320 	and.w	r3, r3, #32
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d003      	beq.n	800b8f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 fb63 	bl	800bfb6 <UART_Receive_IT>
      return;
 800b8f0:	e25b      	b.n	800bdaa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b8f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f000 80de 	beq.w	800bab8 <HAL_UART_IRQHandler+0x22c>
 800b8fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	2b00      	cmp	r3, #0
 800b906:	d106      	bne.n	800b916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b90c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 80d1 	beq.w	800bab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b91a:	f003 0301 	and.w	r3, r3, #1
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00b      	beq.n	800b93a <HAL_UART_IRQHandler+0xae>
 800b922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d005      	beq.n	800b93a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b932:	f043 0201 	orr.w	r2, r3, #1
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b93a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b93e:	f003 0304 	and.w	r3, r3, #4
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00b      	beq.n	800b95e <HAL_UART_IRQHandler+0xd2>
 800b946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d005      	beq.n	800b95e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b956:	f043 0202 	orr.w	r2, r3, #2
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b962:	f003 0302 	and.w	r3, r3, #2
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00b      	beq.n	800b982 <HAL_UART_IRQHandler+0xf6>
 800b96a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b96e:	f003 0301 	and.w	r3, r3, #1
 800b972:	2b00      	cmp	r3, #0
 800b974:	d005      	beq.n	800b982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97a:	f043 0204 	orr.w	r2, r3, #4
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b986:	f003 0308 	and.w	r3, r3, #8
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d011      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x126>
 800b98e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b992:	f003 0320 	and.w	r3, r3, #32
 800b996:	2b00      	cmp	r3, #0
 800b998:	d105      	bne.n	800b9a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b99a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d005      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9aa:	f043 0208 	orr.w	r2, r3, #8
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 81f2 	beq.w	800bda0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9c0:	f003 0320 	and.w	r3, r3, #32
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d008      	beq.n	800b9da <HAL_UART_IRQHandler+0x14e>
 800b9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9cc:	f003 0320 	and.w	r3, r3, #32
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 faee 	bl	800bfb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	695b      	ldr	r3, [r3, #20]
 800b9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	bf14      	ite	ne
 800b9e8:	2301      	movne	r3, #1
 800b9ea:	2300      	moveq	r3, #0
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f6:	f003 0308 	and.w	r3, r3, #8
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d103      	bne.n	800ba06 <HAL_UART_IRQHandler+0x17a>
 800b9fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d04f      	beq.n	800baa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f9f8 	bl	800bdfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d041      	beq.n	800ba9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3314      	adds	r3, #20
 800ba20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba28:	e853 3f00 	ldrex	r3, [r3]
 800ba2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ba30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3314      	adds	r3, #20
 800ba42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ba46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ba4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ba52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ba56:	e841 2300 	strex	r3, r2, [r1]
 800ba5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ba5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1d9      	bne.n	800ba1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d013      	beq.n	800ba96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba72:	4a7e      	ldr	r2, [pc, #504]	; (800bc6c <HAL_UART_IRQHandler+0x3e0>)
 800ba74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fd f86c 	bl	8008b58 <HAL_DMA_Abort_IT>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d016      	beq.n	800bab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ba90:	4610      	mov	r0, r2
 800ba92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba94:	e00e      	b.n	800bab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f99c 	bl	800bdd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba9c:	e00a      	b.n	800bab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f998 	bl	800bdd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baa4:	e006      	b.n	800bab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 f994 	bl	800bdd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bab2:	e175      	b.n	800bda0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bab4:	bf00      	nop
    return;
 800bab6:	e173      	b.n	800bda0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800babc:	2b01      	cmp	r3, #1
 800babe:	f040 814f 	bne.w	800bd60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bac6:	f003 0310 	and.w	r3, r3, #16
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f000 8148 	beq.w	800bd60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bad4:	f003 0310 	and.w	r3, r3, #16
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 8141 	beq.w	800bd60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bade:	2300      	movs	r3, #0
 800bae0:	60bb      	str	r3, [r7, #8]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	60bb      	str	r3, [r7, #8]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	60bb      	str	r3, [r7, #8]
 800baf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 80b6 	beq.w	800bc70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f000 8145 	beq.w	800bda4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb22:	429a      	cmp	r2, r3
 800bb24:	f080 813e 	bcs.w	800bda4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb34:	699b      	ldr	r3, [r3, #24]
 800bb36:	2b20      	cmp	r3, #32
 800bb38:	f000 8088 	beq.w	800bc4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	330c      	adds	r3, #12
 800bb42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb4a:	e853 3f00 	ldrex	r3, [r3]
 800bb4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bb52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	330c      	adds	r3, #12
 800bb64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bb68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bb74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb78:	e841 2300 	strex	r3, r2, [r1]
 800bb7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bb80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1d9      	bne.n	800bb3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3314      	adds	r3, #20
 800bb8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb92:	e853 3f00 	ldrex	r3, [r3]
 800bb96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bb98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb9a:	f023 0301 	bic.w	r3, r3, #1
 800bb9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	3314      	adds	r3, #20
 800bba8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bbac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bbb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bbb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bbb8:	e841 2300 	strex	r3, r2, [r1]
 800bbbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bbbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1e1      	bne.n	800bb88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3314      	adds	r3, #20
 800bbca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbce:	e853 3f00 	ldrex	r3, [r3]
 800bbd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bbd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	3314      	adds	r3, #20
 800bbe4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bbe8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bbea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bbee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bbf0:	e841 2300 	strex	r3, r2, [r1]
 800bbf4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bbf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1e3      	bne.n	800bbc4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	330c      	adds	r3, #12
 800bc10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc14:	e853 3f00 	ldrex	r3, [r3]
 800bc18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc1c:	f023 0310 	bic.w	r3, r3, #16
 800bc20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	330c      	adds	r3, #12
 800bc2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bc2e:	65ba      	str	r2, [r7, #88]	; 0x58
 800bc30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc36:	e841 2300 	strex	r3, r2, [r1]
 800bc3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1e3      	bne.n	800bc0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fc ff4b 	bl	8008ae2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	1ad3      	subs	r3, r2, r3
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	4619      	mov	r1, r3
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 f8bf 	bl	800bde6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc68:	e09c      	b.n	800bda4 <HAL_UART_IRQHandler+0x518>
 800bc6a:	bf00      	nop
 800bc6c:	0800bec1 	.word	0x0800bec1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	1ad3      	subs	r3, r2, r3
 800bc7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f000 808e 	beq.w	800bda8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bc8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 8089 	beq.w	800bda8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	330c      	adds	r3, #12
 800bc9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	e853 3f00 	ldrex	r3, [r3]
 800bca4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bcac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	330c      	adds	r3, #12
 800bcb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bcba:	647a      	str	r2, [r7, #68]	; 0x44
 800bcbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bcc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcc2:	e841 2300 	strex	r3, r2, [r1]
 800bcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bcc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1e3      	bne.n	800bc96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3314      	adds	r3, #20
 800bcd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd8:	e853 3f00 	ldrex	r3, [r3]
 800bcdc:	623b      	str	r3, [r7, #32]
   return(result);
 800bcde:	6a3b      	ldr	r3, [r7, #32]
 800bce0:	f023 0301 	bic.w	r3, r3, #1
 800bce4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3314      	adds	r3, #20
 800bcee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bcf2:	633a      	str	r2, [r7, #48]	; 0x30
 800bcf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcfa:	e841 2300 	strex	r3, r2, [r1]
 800bcfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d1e3      	bne.n	800bcce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2220      	movs	r2, #32
 800bd0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	330c      	adds	r3, #12
 800bd1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	e853 3f00 	ldrex	r3, [r3]
 800bd22:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f023 0310 	bic.w	r3, r3, #16
 800bd2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	330c      	adds	r3, #12
 800bd34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bd38:	61fa      	str	r2, [r7, #28]
 800bd3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3c:	69b9      	ldr	r1, [r7, #24]
 800bd3e:	69fa      	ldr	r2, [r7, #28]
 800bd40:	e841 2300 	strex	r3, r2, [r1]
 800bd44:	617b      	str	r3, [r7, #20]
   return(result);
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e3      	bne.n	800bd14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f844 	bl	800bde6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd5e:	e023      	b.n	800bda8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bd60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d009      	beq.n	800bd80 <HAL_UART_IRQHandler+0x4f4>
 800bd6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d003      	beq.n	800bd80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 f8b5 	bl	800bee8 <UART_Transmit_IT>
    return;
 800bd7e:	e014      	b.n	800bdaa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bd80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00e      	beq.n	800bdaa <HAL_UART_IRQHandler+0x51e>
 800bd8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d008      	beq.n	800bdaa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 f8f4 	bl	800bf86 <UART_EndTransmit_IT>
    return;
 800bd9e:	e004      	b.n	800bdaa <HAL_UART_IRQHandler+0x51e>
    return;
 800bda0:	bf00      	nop
 800bda2:	e002      	b.n	800bdaa <HAL_UART_IRQHandler+0x51e>
      return;
 800bda4:	bf00      	nop
 800bda6:	e000      	b.n	800bdaa <HAL_UART_IRQHandler+0x51e>
      return;
 800bda8:	bf00      	nop
  }
}
 800bdaa:	37e8      	adds	r7, #232	; 0xe8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bc80      	pop	{r7}
 800bdc0:	4770      	bx	lr

0800bdc2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bdc2:	b480      	push	{r7}
 800bdc4:	b083      	sub	sp, #12
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bdca:	bf00      	nop
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bc80      	pop	{r7}
 800bdd2:	4770      	bx	lr

0800bdd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bddc:	bf00      	nop
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bc80      	pop	{r7}
 800bde4:	4770      	bx	lr

0800bde6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b083      	sub	sp, #12
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bdf2:	bf00      	nop
 800bdf4:	370c      	adds	r7, #12
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bc80      	pop	{r7}
 800bdfa:	4770      	bx	lr

0800bdfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b095      	sub	sp, #84	; 0x54
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	330c      	adds	r3, #12
 800be0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0e:	e853 3f00 	ldrex	r3, [r3]
 800be12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	330c      	adds	r3, #12
 800be22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be24:	643a      	str	r2, [r7, #64]	; 0x40
 800be26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be2c:	e841 2300 	strex	r3, r2, [r1]
 800be30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1e5      	bne.n	800be04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3314      	adds	r3, #20
 800be3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be40:	6a3b      	ldr	r3, [r7, #32]
 800be42:	e853 3f00 	ldrex	r3, [r3]
 800be46:	61fb      	str	r3, [r7, #28]
   return(result);
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	f023 0301 	bic.w	r3, r3, #1
 800be4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	3314      	adds	r3, #20
 800be56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be58:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be60:	e841 2300 	strex	r3, r2, [r1]
 800be64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d1e5      	bne.n	800be38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be70:	2b01      	cmp	r3, #1
 800be72:	d119      	bne.n	800bea8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	330c      	adds	r3, #12
 800be7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	e853 3f00 	ldrex	r3, [r3]
 800be82:	60bb      	str	r3, [r7, #8]
   return(result);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	f023 0310 	bic.w	r3, r3, #16
 800be8a:	647b      	str	r3, [r7, #68]	; 0x44
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	330c      	adds	r3, #12
 800be92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be94:	61ba      	str	r2, [r7, #24]
 800be96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be98:	6979      	ldr	r1, [r7, #20]
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	e841 2300 	strex	r3, r2, [r1]
 800bea0:	613b      	str	r3, [r7, #16]
   return(result);
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1e5      	bne.n	800be74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2220      	movs	r2, #32
 800beac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800beb6:	bf00      	nop
 800beb8:	3754      	adds	r7, #84	; 0x54
 800beba:	46bd      	mov	sp, r7
 800bebc:	bc80      	pop	{r7}
 800bebe:	4770      	bx	lr

0800bec0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800becc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2200      	movs	r2, #0
 800bed2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2200      	movs	r2, #0
 800bed8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f7ff ff7a 	bl	800bdd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bee0:	bf00      	nop
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bee8:	b480      	push	{r7}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b21      	cmp	r3, #33	; 0x21
 800befa:	d13e      	bne.n	800bf7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf04:	d114      	bne.n	800bf30 <UART_Transmit_IT+0x48>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d110      	bne.n	800bf30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	461a      	mov	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a1b      	ldr	r3, [r3, #32]
 800bf28:	1c9a      	adds	r2, r3, #2
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	621a      	str	r2, [r3, #32]
 800bf2e:	e008      	b.n	800bf42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a1b      	ldr	r3, [r3, #32]
 800bf34:	1c59      	adds	r1, r3, #1
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	6211      	str	r1, [r2, #32]
 800bf3a:	781a      	ldrb	r2, [r3, #0]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	4619      	mov	r1, r3
 800bf50:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10f      	bne.n	800bf76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68da      	ldr	r2, [r3, #12]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68da      	ldr	r2, [r3, #12]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	e000      	b.n	800bf7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf7a:	2302      	movs	r3, #2
  }
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bc80      	pop	{r7}
 800bf84:	4770      	bx	lr

0800bf86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b082      	sub	sp, #8
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68da      	ldr	r2, [r3, #12]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2220      	movs	r2, #32
 800bfa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7ff ff02 	bl	800bdb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b08c      	sub	sp, #48	; 0x30
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b22      	cmp	r3, #34	; 0x22
 800bfc8:	f040 80ae 	bne.w	800c128 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfd4:	d117      	bne.n	800c006 <UART_Receive_IT+0x50>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d113      	bne.n	800c006 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff4:	b29a      	uxth	r2, r3
 800bff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffe:	1c9a      	adds	r2, r3, #2
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	629a      	str	r2, [r3, #40]	; 0x28
 800c004:	e026      	b.n	800c054 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c00a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c00c:	2300      	movs	r3, #0
 800c00e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c018:	d007      	beq.n	800c02a <UART_Receive_IT+0x74>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10a      	bne.n	800c038 <UART_Receive_IT+0x82>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d106      	bne.n	800c038 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	b2da      	uxtb	r2, r3
 800c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c034:	701a      	strb	r2, [r3, #0]
 800c036:	e008      	b.n	800c04a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c044:	b2da      	uxtb	r2, r3
 800c046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c048:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c058:	b29b      	uxth	r3, r3
 800c05a:	3b01      	subs	r3, #1
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	4619      	mov	r1, r3
 800c062:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c064:	2b00      	cmp	r3, #0
 800c066:	d15d      	bne.n	800c124 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	68da      	ldr	r2, [r3, #12]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 0220 	bic.w	r2, r2, #32
 800c076:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68da      	ldr	r2, [r3, #12]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c086:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	695a      	ldr	r2, [r3, #20]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f022 0201 	bic.w	r2, r2, #1
 800c096:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2220      	movs	r2, #32
 800c09c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d135      	bne.n	800c11a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	e853 3f00 	ldrex	r3, [r3]
 800c0c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	f023 0310 	bic.w	r3, r3, #16
 800c0ca:	627b      	str	r3, [r7, #36]	; 0x24
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	330c      	adds	r3, #12
 800c0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0d4:	623a      	str	r2, [r7, #32]
 800c0d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d8:	69f9      	ldr	r1, [r7, #28]
 800c0da:	6a3a      	ldr	r2, [r7, #32]
 800c0dc:	e841 2300 	strex	r3, r2, [r1]
 800c0e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1e5      	bne.n	800c0b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f003 0310 	and.w	r3, r3, #16
 800c0f2:	2b10      	cmp	r3, #16
 800c0f4:	d10a      	bne.n	800c10c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	60fb      	str	r3, [r7, #12]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	60fb      	str	r3, [r7, #12]
 800c10a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c110:	4619      	mov	r1, r3
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7ff fe67 	bl	800bde6 <HAL_UARTEx_RxEventCallback>
 800c118:	e002      	b.n	800c120 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7ff fe51 	bl	800bdc2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	e002      	b.n	800c12a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	e000      	b.n	800c12a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c128:	2302      	movs	r3, #2
  }
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3730      	adds	r7, #48	; 0x30
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
	...

0800c134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68da      	ldr	r2, [r3, #12]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	430a      	orrs	r2, r1
 800c150:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689a      	ldr	r2, [r3, #8]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	431a      	orrs	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	4313      	orrs	r3, r2
 800c162:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c16e:	f023 030c 	bic.w	r3, r3, #12
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	6812      	ldr	r2, [r2, #0]
 800c176:	68b9      	ldr	r1, [r7, #8]
 800c178:	430b      	orrs	r3, r1
 800c17a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	699a      	ldr	r2, [r3, #24]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	430a      	orrs	r2, r1
 800c190:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a2c      	ldr	r2, [pc, #176]	; (800c248 <UART_SetConfig+0x114>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d103      	bne.n	800c1a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c19c:	f7fe fe8c 	bl	800aeb8 <HAL_RCC_GetPCLK2Freq>
 800c1a0:	60f8      	str	r0, [r7, #12]
 800c1a2:	e002      	b.n	800c1aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c1a4:	f7fe fe74 	bl	800ae90 <HAL_RCC_GetPCLK1Freq>
 800c1a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	009a      	lsls	r2, r3, #2
 800c1b4:	441a      	add	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1c0:	4a22      	ldr	r2, [pc, #136]	; (800c24c <UART_SetConfig+0x118>)
 800c1c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1c6:	095b      	lsrs	r3, r3, #5
 800c1c8:	0119      	lsls	r1, r3, #4
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009a      	lsls	r2, r3, #2
 800c1d4:	441a      	add	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c1e0:	4b1a      	ldr	r3, [pc, #104]	; (800c24c <UART_SetConfig+0x118>)
 800c1e2:	fba3 0302 	umull	r0, r3, r3, r2
 800c1e6:	095b      	lsrs	r3, r3, #5
 800c1e8:	2064      	movs	r0, #100	; 0x64
 800c1ea:	fb00 f303 	mul.w	r3, r0, r3
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	011b      	lsls	r3, r3, #4
 800c1f2:	3332      	adds	r3, #50	; 0x32
 800c1f4:	4a15      	ldr	r2, [pc, #84]	; (800c24c <UART_SetConfig+0x118>)
 800c1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fa:	095b      	lsrs	r3, r3, #5
 800c1fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c200:	4419      	add	r1, r3
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	4613      	mov	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	009a      	lsls	r2, r3, #2
 800c20c:	441a      	add	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	fbb2 f2f3 	udiv	r2, r2, r3
 800c218:	4b0c      	ldr	r3, [pc, #48]	; (800c24c <UART_SetConfig+0x118>)
 800c21a:	fba3 0302 	umull	r0, r3, r3, r2
 800c21e:	095b      	lsrs	r3, r3, #5
 800c220:	2064      	movs	r0, #100	; 0x64
 800c222:	fb00 f303 	mul.w	r3, r0, r3
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	011b      	lsls	r3, r3, #4
 800c22a:	3332      	adds	r3, #50	; 0x32
 800c22c:	4a07      	ldr	r2, [pc, #28]	; (800c24c <UART_SetConfig+0x118>)
 800c22e:	fba2 2303 	umull	r2, r3, r2, r3
 800c232:	095b      	lsrs	r3, r3, #5
 800c234:	f003 020f 	and.w	r2, r3, #15
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	440a      	add	r2, r1
 800c23e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c240:	bf00      	nop
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	40013800 	.word	0x40013800
 800c24c:	51eb851f 	.word	0x51eb851f

0800c250 <__itoa>:
 800c250:	1e93      	subs	r3, r2, #2
 800c252:	2b22      	cmp	r3, #34	; 0x22
 800c254:	b510      	push	{r4, lr}
 800c256:	460c      	mov	r4, r1
 800c258:	d904      	bls.n	800c264 <__itoa+0x14>
 800c25a:	2300      	movs	r3, #0
 800c25c:	461c      	mov	r4, r3
 800c25e:	700b      	strb	r3, [r1, #0]
 800c260:	4620      	mov	r0, r4
 800c262:	bd10      	pop	{r4, pc}
 800c264:	2a0a      	cmp	r2, #10
 800c266:	d109      	bne.n	800c27c <__itoa+0x2c>
 800c268:	2800      	cmp	r0, #0
 800c26a:	da07      	bge.n	800c27c <__itoa+0x2c>
 800c26c:	232d      	movs	r3, #45	; 0x2d
 800c26e:	700b      	strb	r3, [r1, #0]
 800c270:	2101      	movs	r1, #1
 800c272:	4240      	negs	r0, r0
 800c274:	4421      	add	r1, r4
 800c276:	f000 f90d 	bl	800c494 <__utoa>
 800c27a:	e7f1      	b.n	800c260 <__itoa+0x10>
 800c27c:	2100      	movs	r1, #0
 800c27e:	e7f9      	b.n	800c274 <__itoa+0x24>

0800c280 <itoa>:
 800c280:	f7ff bfe6 	b.w	800c250 <__itoa>

0800c284 <malloc>:
 800c284:	4b02      	ldr	r3, [pc, #8]	; (800c290 <malloc+0xc>)
 800c286:	4601      	mov	r1, r0
 800c288:	6818      	ldr	r0, [r3, #0]
 800c28a:	f000 b823 	b.w	800c2d4 <_malloc_r>
 800c28e:	bf00      	nop
 800c290:	2000010c 	.word	0x2000010c

0800c294 <sbrk_aligned>:
 800c294:	b570      	push	{r4, r5, r6, lr}
 800c296:	4e0e      	ldr	r6, [pc, #56]	; (800c2d0 <sbrk_aligned+0x3c>)
 800c298:	460c      	mov	r4, r1
 800c29a:	6831      	ldr	r1, [r6, #0]
 800c29c:	4605      	mov	r5, r0
 800c29e:	b911      	cbnz	r1, 800c2a6 <sbrk_aligned+0x12>
 800c2a0:	f000 f952 	bl	800c548 <_sbrk_r>
 800c2a4:	6030      	str	r0, [r6, #0]
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f000 f94d 	bl	800c548 <_sbrk_r>
 800c2ae:	1c43      	adds	r3, r0, #1
 800c2b0:	d00a      	beq.n	800c2c8 <sbrk_aligned+0x34>
 800c2b2:	1cc4      	adds	r4, r0, #3
 800c2b4:	f024 0403 	bic.w	r4, r4, #3
 800c2b8:	42a0      	cmp	r0, r4
 800c2ba:	d007      	beq.n	800c2cc <sbrk_aligned+0x38>
 800c2bc:	1a21      	subs	r1, r4, r0
 800c2be:	4628      	mov	r0, r5
 800c2c0:	f000 f942 	bl	800c548 <_sbrk_r>
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	d101      	bne.n	800c2cc <sbrk_aligned+0x38>
 800c2c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	bd70      	pop	{r4, r5, r6, pc}
 800c2d0:	20000380 	.word	0x20000380

0800c2d4 <_malloc_r>:
 800c2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d8:	1ccd      	adds	r5, r1, #3
 800c2da:	f025 0503 	bic.w	r5, r5, #3
 800c2de:	3508      	adds	r5, #8
 800c2e0:	2d0c      	cmp	r5, #12
 800c2e2:	bf38      	it	cc
 800c2e4:	250c      	movcc	r5, #12
 800c2e6:	2d00      	cmp	r5, #0
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	db01      	blt.n	800c2f0 <_malloc_r+0x1c>
 800c2ec:	42a9      	cmp	r1, r5
 800c2ee:	d905      	bls.n	800c2fc <_malloc_r+0x28>
 800c2f0:	230c      	movs	r3, #12
 800c2f2:	2600      	movs	r6, #0
 800c2f4:	603b      	str	r3, [r7, #0]
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c3d0 <_malloc_r+0xfc>
 800c300:	f000 f89c 	bl	800c43c <__malloc_lock>
 800c304:	f8d8 3000 	ldr.w	r3, [r8]
 800c308:	461c      	mov	r4, r3
 800c30a:	bb5c      	cbnz	r4, 800c364 <_malloc_r+0x90>
 800c30c:	4629      	mov	r1, r5
 800c30e:	4638      	mov	r0, r7
 800c310:	f7ff ffc0 	bl	800c294 <sbrk_aligned>
 800c314:	1c43      	adds	r3, r0, #1
 800c316:	4604      	mov	r4, r0
 800c318:	d155      	bne.n	800c3c6 <_malloc_r+0xf2>
 800c31a:	f8d8 4000 	ldr.w	r4, [r8]
 800c31e:	4626      	mov	r6, r4
 800c320:	2e00      	cmp	r6, #0
 800c322:	d145      	bne.n	800c3b0 <_malloc_r+0xdc>
 800c324:	2c00      	cmp	r4, #0
 800c326:	d048      	beq.n	800c3ba <_malloc_r+0xe6>
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	4631      	mov	r1, r6
 800c32c:	4638      	mov	r0, r7
 800c32e:	eb04 0903 	add.w	r9, r4, r3
 800c332:	f000 f909 	bl	800c548 <_sbrk_r>
 800c336:	4581      	cmp	r9, r0
 800c338:	d13f      	bne.n	800c3ba <_malloc_r+0xe6>
 800c33a:	6821      	ldr	r1, [r4, #0]
 800c33c:	4638      	mov	r0, r7
 800c33e:	1a6d      	subs	r5, r5, r1
 800c340:	4629      	mov	r1, r5
 800c342:	f7ff ffa7 	bl	800c294 <sbrk_aligned>
 800c346:	3001      	adds	r0, #1
 800c348:	d037      	beq.n	800c3ba <_malloc_r+0xe6>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	442b      	add	r3, r5
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	f8d8 3000 	ldr.w	r3, [r8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d038      	beq.n	800c3ca <_malloc_r+0xf6>
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	42a2      	cmp	r2, r4
 800c35c:	d12b      	bne.n	800c3b6 <_malloc_r+0xe2>
 800c35e:	2200      	movs	r2, #0
 800c360:	605a      	str	r2, [r3, #4]
 800c362:	e00f      	b.n	800c384 <_malloc_r+0xb0>
 800c364:	6822      	ldr	r2, [r4, #0]
 800c366:	1b52      	subs	r2, r2, r5
 800c368:	d41f      	bmi.n	800c3aa <_malloc_r+0xd6>
 800c36a:	2a0b      	cmp	r2, #11
 800c36c:	d917      	bls.n	800c39e <_malloc_r+0xca>
 800c36e:	1961      	adds	r1, r4, r5
 800c370:	42a3      	cmp	r3, r4
 800c372:	6025      	str	r5, [r4, #0]
 800c374:	bf18      	it	ne
 800c376:	6059      	strne	r1, [r3, #4]
 800c378:	6863      	ldr	r3, [r4, #4]
 800c37a:	bf08      	it	eq
 800c37c:	f8c8 1000 	streq.w	r1, [r8]
 800c380:	5162      	str	r2, [r4, r5]
 800c382:	604b      	str	r3, [r1, #4]
 800c384:	4638      	mov	r0, r7
 800c386:	f104 060b 	add.w	r6, r4, #11
 800c38a:	f000 f85d 	bl	800c448 <__malloc_unlock>
 800c38e:	f026 0607 	bic.w	r6, r6, #7
 800c392:	1d23      	adds	r3, r4, #4
 800c394:	1af2      	subs	r2, r6, r3
 800c396:	d0ae      	beq.n	800c2f6 <_malloc_r+0x22>
 800c398:	1b9b      	subs	r3, r3, r6
 800c39a:	50a3      	str	r3, [r4, r2]
 800c39c:	e7ab      	b.n	800c2f6 <_malloc_r+0x22>
 800c39e:	42a3      	cmp	r3, r4
 800c3a0:	6862      	ldr	r2, [r4, #4]
 800c3a2:	d1dd      	bne.n	800c360 <_malloc_r+0x8c>
 800c3a4:	f8c8 2000 	str.w	r2, [r8]
 800c3a8:	e7ec      	b.n	800c384 <_malloc_r+0xb0>
 800c3aa:	4623      	mov	r3, r4
 800c3ac:	6864      	ldr	r4, [r4, #4]
 800c3ae:	e7ac      	b.n	800c30a <_malloc_r+0x36>
 800c3b0:	4634      	mov	r4, r6
 800c3b2:	6876      	ldr	r6, [r6, #4]
 800c3b4:	e7b4      	b.n	800c320 <_malloc_r+0x4c>
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	e7cc      	b.n	800c354 <_malloc_r+0x80>
 800c3ba:	230c      	movs	r3, #12
 800c3bc:	4638      	mov	r0, r7
 800c3be:	603b      	str	r3, [r7, #0]
 800c3c0:	f000 f842 	bl	800c448 <__malloc_unlock>
 800c3c4:	e797      	b.n	800c2f6 <_malloc_r+0x22>
 800c3c6:	6025      	str	r5, [r4, #0]
 800c3c8:	e7dc      	b.n	800c384 <_malloc_r+0xb0>
 800c3ca:	605b      	str	r3, [r3, #4]
 800c3cc:	deff      	udf	#255	; 0xff
 800c3ce:	bf00      	nop
 800c3d0:	2000037c 	.word	0x2000037c

0800c3d4 <sniprintf>:
 800c3d4:	b40c      	push	{r2, r3}
 800c3d6:	b530      	push	{r4, r5, lr}
 800c3d8:	4b17      	ldr	r3, [pc, #92]	; (800c438 <sniprintf+0x64>)
 800c3da:	1e0c      	subs	r4, r1, #0
 800c3dc:	681d      	ldr	r5, [r3, #0]
 800c3de:	b09d      	sub	sp, #116	; 0x74
 800c3e0:	da08      	bge.n	800c3f4 <sniprintf+0x20>
 800c3e2:	238b      	movs	r3, #139	; 0x8b
 800c3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3e8:	602b      	str	r3, [r5, #0]
 800c3ea:	b01d      	add	sp, #116	; 0x74
 800c3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3f0:	b002      	add	sp, #8
 800c3f2:	4770      	bx	lr
 800c3f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c3f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c3fc:	bf0c      	ite	eq
 800c3fe:	4623      	moveq	r3, r4
 800c400:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c404:	9304      	str	r3, [sp, #16]
 800c406:	9307      	str	r3, [sp, #28]
 800c408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c40c:	9002      	str	r0, [sp, #8]
 800c40e:	9006      	str	r0, [sp, #24]
 800c410:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c414:	4628      	mov	r0, r5
 800c416:	ab21      	add	r3, sp, #132	; 0x84
 800c418:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c41a:	a902      	add	r1, sp, #8
 800c41c:	9301      	str	r3, [sp, #4]
 800c41e:	f000 f987 	bl	800c730 <_svfiprintf_r>
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	bfbc      	itt	lt
 800c426:	238b      	movlt	r3, #139	; 0x8b
 800c428:	602b      	strlt	r3, [r5, #0]
 800c42a:	2c00      	cmp	r4, #0
 800c42c:	d0dd      	beq.n	800c3ea <sniprintf+0x16>
 800c42e:	2200      	movs	r2, #0
 800c430:	9b02      	ldr	r3, [sp, #8]
 800c432:	701a      	strb	r2, [r3, #0]
 800c434:	e7d9      	b.n	800c3ea <sniprintf+0x16>
 800c436:	bf00      	nop
 800c438:	2000010c 	.word	0x2000010c

0800c43c <__malloc_lock>:
 800c43c:	4801      	ldr	r0, [pc, #4]	; (800c444 <__malloc_lock+0x8>)
 800c43e:	f000 b8bd 	b.w	800c5bc <__retarget_lock_acquire_recursive>
 800c442:	bf00      	nop
 800c444:	200004bc 	.word	0x200004bc

0800c448 <__malloc_unlock>:
 800c448:	4801      	ldr	r0, [pc, #4]	; (800c450 <__malloc_unlock+0x8>)
 800c44a:	f000 b8b8 	b.w	800c5be <__retarget_lock_release_recursive>
 800c44e:	bf00      	nop
 800c450:	200004bc 	.word	0x200004bc

0800c454 <siprintf>:
 800c454:	b40e      	push	{r1, r2, r3}
 800c456:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c45a:	b500      	push	{lr}
 800c45c:	b09c      	sub	sp, #112	; 0x70
 800c45e:	ab1d      	add	r3, sp, #116	; 0x74
 800c460:	9002      	str	r0, [sp, #8]
 800c462:	9006      	str	r0, [sp, #24]
 800c464:	9107      	str	r1, [sp, #28]
 800c466:	9104      	str	r1, [sp, #16]
 800c468:	4808      	ldr	r0, [pc, #32]	; (800c48c <siprintf+0x38>)
 800c46a:	4909      	ldr	r1, [pc, #36]	; (800c490 <siprintf+0x3c>)
 800c46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c470:	9105      	str	r1, [sp, #20]
 800c472:	6800      	ldr	r0, [r0, #0]
 800c474:	a902      	add	r1, sp, #8
 800c476:	9301      	str	r3, [sp, #4]
 800c478:	f000 f95a 	bl	800c730 <_svfiprintf_r>
 800c47c:	2200      	movs	r2, #0
 800c47e:	9b02      	ldr	r3, [sp, #8]
 800c480:	701a      	strb	r2, [r3, #0]
 800c482:	b01c      	add	sp, #112	; 0x70
 800c484:	f85d eb04 	ldr.w	lr, [sp], #4
 800c488:	b003      	add	sp, #12
 800c48a:	4770      	bx	lr
 800c48c:	2000010c 	.word	0x2000010c
 800c490:	ffff0208 	.word	0xffff0208

0800c494 <__utoa>:
 800c494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c496:	b08b      	sub	sp, #44	; 0x2c
 800c498:	4605      	mov	r5, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	466e      	mov	r6, sp
 800c49e:	4c1d      	ldr	r4, [pc, #116]	; (800c514 <__utoa+0x80>)
 800c4a0:	f104 0c20 	add.w	ip, r4, #32
 800c4a4:	4637      	mov	r7, r6
 800c4a6:	6820      	ldr	r0, [r4, #0]
 800c4a8:	6861      	ldr	r1, [r4, #4]
 800c4aa:	3408      	adds	r4, #8
 800c4ac:	c703      	stmia	r7!, {r0, r1}
 800c4ae:	4564      	cmp	r4, ip
 800c4b0:	463e      	mov	r6, r7
 800c4b2:	d1f7      	bne.n	800c4a4 <__utoa+0x10>
 800c4b4:	7921      	ldrb	r1, [r4, #4]
 800c4b6:	6820      	ldr	r0, [r4, #0]
 800c4b8:	7139      	strb	r1, [r7, #4]
 800c4ba:	1e91      	subs	r1, r2, #2
 800c4bc:	2922      	cmp	r1, #34	; 0x22
 800c4be:	6038      	str	r0, [r7, #0]
 800c4c0:	f04f 0100 	mov.w	r1, #0
 800c4c4:	d904      	bls.n	800c4d0 <__utoa+0x3c>
 800c4c6:	7019      	strb	r1, [r3, #0]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	b00b      	add	sp, #44	; 0x2c
 800c4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4d0:	1e58      	subs	r0, r3, #1
 800c4d2:	4684      	mov	ip, r0
 800c4d4:	fbb5 f7f2 	udiv	r7, r5, r2
 800c4d8:	fb02 5617 	mls	r6, r2, r7, r5
 800c4dc:	3628      	adds	r6, #40	; 0x28
 800c4de:	446e      	add	r6, sp
 800c4e0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c4e4:	460c      	mov	r4, r1
 800c4e6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c4ea:	462e      	mov	r6, r5
 800c4ec:	42b2      	cmp	r2, r6
 800c4ee:	463d      	mov	r5, r7
 800c4f0:	f101 0101 	add.w	r1, r1, #1
 800c4f4:	d9ee      	bls.n	800c4d4 <__utoa+0x40>
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	545a      	strb	r2, [r3, r1]
 800c4fa:	1919      	adds	r1, r3, r4
 800c4fc:	1aa5      	subs	r5, r4, r2
 800c4fe:	42aa      	cmp	r2, r5
 800c500:	dae3      	bge.n	800c4ca <__utoa+0x36>
 800c502:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c506:	780e      	ldrb	r6, [r1, #0]
 800c508:	3201      	adds	r2, #1
 800c50a:	7006      	strb	r6, [r0, #0]
 800c50c:	f801 5901 	strb.w	r5, [r1], #-1
 800c510:	e7f4      	b.n	800c4fc <__utoa+0x68>
 800c512:	bf00      	nop
 800c514:	0800dcae 	.word	0x0800dcae

0800c518 <strcat>:
 800c518:	4602      	mov	r2, r0
 800c51a:	b510      	push	{r4, lr}
 800c51c:	7814      	ldrb	r4, [r2, #0]
 800c51e:	4613      	mov	r3, r2
 800c520:	3201      	adds	r2, #1
 800c522:	2c00      	cmp	r4, #0
 800c524:	d1fa      	bne.n	800c51c <strcat+0x4>
 800c526:	3b01      	subs	r3, #1
 800c528:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c52c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c530:	2a00      	cmp	r2, #0
 800c532:	d1f9      	bne.n	800c528 <strcat+0x10>
 800c534:	bd10      	pop	{r4, pc}

0800c536 <memset>:
 800c536:	4603      	mov	r3, r0
 800c538:	4402      	add	r2, r0
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d100      	bne.n	800c540 <memset+0xa>
 800c53e:	4770      	bx	lr
 800c540:	f803 1b01 	strb.w	r1, [r3], #1
 800c544:	e7f9      	b.n	800c53a <memset+0x4>
	...

0800c548 <_sbrk_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	2300      	movs	r3, #0
 800c54c:	4d05      	ldr	r5, [pc, #20]	; (800c564 <_sbrk_r+0x1c>)
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	602b      	str	r3, [r5, #0]
 800c554:	f7fb ffd4 	bl	8008500 <_sbrk>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_sbrk_r+0x1a>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_sbrk_r+0x1a>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	200004c0 	.word	0x200004c0

0800c568 <__errno>:
 800c568:	4b01      	ldr	r3, [pc, #4]	; (800c570 <__errno+0x8>)
 800c56a:	6818      	ldr	r0, [r3, #0]
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	2000010c 	.word	0x2000010c

0800c574 <__libc_init_array>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	2600      	movs	r6, #0
 800c578:	4d0c      	ldr	r5, [pc, #48]	; (800c5ac <__libc_init_array+0x38>)
 800c57a:	4c0d      	ldr	r4, [pc, #52]	; (800c5b0 <__libc_init_array+0x3c>)
 800c57c:	1b64      	subs	r4, r4, r5
 800c57e:	10a4      	asrs	r4, r4, #2
 800c580:	42a6      	cmp	r6, r4
 800c582:	d109      	bne.n	800c598 <__libc_init_array+0x24>
 800c584:	f000 fbc6 	bl	800cd14 <_init>
 800c588:	2600      	movs	r6, #0
 800c58a:	4d0a      	ldr	r5, [pc, #40]	; (800c5b4 <__libc_init_array+0x40>)
 800c58c:	4c0a      	ldr	r4, [pc, #40]	; (800c5b8 <__libc_init_array+0x44>)
 800c58e:	1b64      	subs	r4, r4, r5
 800c590:	10a4      	asrs	r4, r4, #2
 800c592:	42a6      	cmp	r6, r4
 800c594:	d105      	bne.n	800c5a2 <__libc_init_array+0x2e>
 800c596:	bd70      	pop	{r4, r5, r6, pc}
 800c598:	f855 3b04 	ldr.w	r3, [r5], #4
 800c59c:	4798      	blx	r3
 800c59e:	3601      	adds	r6, #1
 800c5a0:	e7ee      	b.n	800c580 <__libc_init_array+0xc>
 800c5a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5a6:	4798      	blx	r3
 800c5a8:	3601      	adds	r6, #1
 800c5aa:	e7f2      	b.n	800c592 <__libc_init_array+0x1e>
 800c5ac:	0800dd08 	.word	0x0800dd08
 800c5b0:	0800dd08 	.word	0x0800dd08
 800c5b4:	0800dd08 	.word	0x0800dd08
 800c5b8:	0800dd0c 	.word	0x0800dd0c

0800c5bc <__retarget_lock_acquire_recursive>:
 800c5bc:	4770      	bx	lr

0800c5be <__retarget_lock_release_recursive>:
 800c5be:	4770      	bx	lr

0800c5c0 <memcpy>:
 800c5c0:	440a      	add	r2, r1
 800c5c2:	4291      	cmp	r1, r2
 800c5c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c5c8:	d100      	bne.n	800c5cc <memcpy+0xc>
 800c5ca:	4770      	bx	lr
 800c5cc:	b510      	push	{r4, lr}
 800c5ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5d2:	4291      	cmp	r1, r2
 800c5d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5d8:	d1f9      	bne.n	800c5ce <memcpy+0xe>
 800c5da:	bd10      	pop	{r4, pc}

0800c5dc <strcpy>:
 800c5dc:	4603      	mov	r3, r0
 800c5de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5e2:	f803 2b01 	strb.w	r2, [r3], #1
 800c5e6:	2a00      	cmp	r2, #0
 800c5e8:	d1f9      	bne.n	800c5de <strcpy+0x2>
 800c5ea:	4770      	bx	lr

0800c5ec <_free_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	2900      	cmp	r1, #0
 800c5f2:	d040      	beq.n	800c676 <_free_r+0x8a>
 800c5f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5f8:	1f0c      	subs	r4, r1, #4
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	bfb8      	it	lt
 800c5fe:	18e4      	addlt	r4, r4, r3
 800c600:	f7ff ff1c 	bl	800c43c <__malloc_lock>
 800c604:	4a1c      	ldr	r2, [pc, #112]	; (800c678 <_free_r+0x8c>)
 800c606:	6813      	ldr	r3, [r2, #0]
 800c608:	b933      	cbnz	r3, 800c618 <_free_r+0x2c>
 800c60a:	6063      	str	r3, [r4, #4]
 800c60c:	6014      	str	r4, [r2, #0]
 800c60e:	4628      	mov	r0, r5
 800c610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c614:	f7ff bf18 	b.w	800c448 <__malloc_unlock>
 800c618:	42a3      	cmp	r3, r4
 800c61a:	d908      	bls.n	800c62e <_free_r+0x42>
 800c61c:	6820      	ldr	r0, [r4, #0]
 800c61e:	1821      	adds	r1, r4, r0
 800c620:	428b      	cmp	r3, r1
 800c622:	bf01      	itttt	eq
 800c624:	6819      	ldreq	r1, [r3, #0]
 800c626:	685b      	ldreq	r3, [r3, #4]
 800c628:	1809      	addeq	r1, r1, r0
 800c62a:	6021      	streq	r1, [r4, #0]
 800c62c:	e7ed      	b.n	800c60a <_free_r+0x1e>
 800c62e:	461a      	mov	r2, r3
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	b10b      	cbz	r3, 800c638 <_free_r+0x4c>
 800c634:	42a3      	cmp	r3, r4
 800c636:	d9fa      	bls.n	800c62e <_free_r+0x42>
 800c638:	6811      	ldr	r1, [r2, #0]
 800c63a:	1850      	adds	r0, r2, r1
 800c63c:	42a0      	cmp	r0, r4
 800c63e:	d10b      	bne.n	800c658 <_free_r+0x6c>
 800c640:	6820      	ldr	r0, [r4, #0]
 800c642:	4401      	add	r1, r0
 800c644:	1850      	adds	r0, r2, r1
 800c646:	4283      	cmp	r3, r0
 800c648:	6011      	str	r1, [r2, #0]
 800c64a:	d1e0      	bne.n	800c60e <_free_r+0x22>
 800c64c:	6818      	ldr	r0, [r3, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	4408      	add	r0, r1
 800c652:	6010      	str	r0, [r2, #0]
 800c654:	6053      	str	r3, [r2, #4]
 800c656:	e7da      	b.n	800c60e <_free_r+0x22>
 800c658:	d902      	bls.n	800c660 <_free_r+0x74>
 800c65a:	230c      	movs	r3, #12
 800c65c:	602b      	str	r3, [r5, #0]
 800c65e:	e7d6      	b.n	800c60e <_free_r+0x22>
 800c660:	6820      	ldr	r0, [r4, #0]
 800c662:	1821      	adds	r1, r4, r0
 800c664:	428b      	cmp	r3, r1
 800c666:	bf01      	itttt	eq
 800c668:	6819      	ldreq	r1, [r3, #0]
 800c66a:	685b      	ldreq	r3, [r3, #4]
 800c66c:	1809      	addeq	r1, r1, r0
 800c66e:	6021      	streq	r1, [r4, #0]
 800c670:	6063      	str	r3, [r4, #4]
 800c672:	6054      	str	r4, [r2, #4]
 800c674:	e7cb      	b.n	800c60e <_free_r+0x22>
 800c676:	bd38      	pop	{r3, r4, r5, pc}
 800c678:	2000037c 	.word	0x2000037c

0800c67c <__ssputs_r>:
 800c67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c680:	461f      	mov	r7, r3
 800c682:	688e      	ldr	r6, [r1, #8]
 800c684:	4682      	mov	sl, r0
 800c686:	42be      	cmp	r6, r7
 800c688:	460c      	mov	r4, r1
 800c68a:	4690      	mov	r8, r2
 800c68c:	680b      	ldr	r3, [r1, #0]
 800c68e:	d82c      	bhi.n	800c6ea <__ssputs_r+0x6e>
 800c690:	898a      	ldrh	r2, [r1, #12]
 800c692:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c696:	d026      	beq.n	800c6e6 <__ssputs_r+0x6a>
 800c698:	6965      	ldr	r5, [r4, #20]
 800c69a:	6909      	ldr	r1, [r1, #16]
 800c69c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6a0:	eba3 0901 	sub.w	r9, r3, r1
 800c6a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6a8:	1c7b      	adds	r3, r7, #1
 800c6aa:	444b      	add	r3, r9
 800c6ac:	106d      	asrs	r5, r5, #1
 800c6ae:	429d      	cmp	r5, r3
 800c6b0:	bf38      	it	cc
 800c6b2:	461d      	movcc	r5, r3
 800c6b4:	0553      	lsls	r3, r2, #21
 800c6b6:	d527      	bpl.n	800c708 <__ssputs_r+0x8c>
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	f7ff fe0b 	bl	800c2d4 <_malloc_r>
 800c6be:	4606      	mov	r6, r0
 800c6c0:	b360      	cbz	r0, 800c71c <__ssputs_r+0xa0>
 800c6c2:	464a      	mov	r2, r9
 800c6c4:	6921      	ldr	r1, [r4, #16]
 800c6c6:	f7ff ff7b 	bl	800c5c0 <memcpy>
 800c6ca:	89a3      	ldrh	r3, [r4, #12]
 800c6cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6d4:	81a3      	strh	r3, [r4, #12]
 800c6d6:	6126      	str	r6, [r4, #16]
 800c6d8:	444e      	add	r6, r9
 800c6da:	6026      	str	r6, [r4, #0]
 800c6dc:	463e      	mov	r6, r7
 800c6de:	6165      	str	r5, [r4, #20]
 800c6e0:	eba5 0509 	sub.w	r5, r5, r9
 800c6e4:	60a5      	str	r5, [r4, #8]
 800c6e6:	42be      	cmp	r6, r7
 800c6e8:	d900      	bls.n	800c6ec <__ssputs_r+0x70>
 800c6ea:	463e      	mov	r6, r7
 800c6ec:	4632      	mov	r2, r6
 800c6ee:	4641      	mov	r1, r8
 800c6f0:	6820      	ldr	r0, [r4, #0]
 800c6f2:	f000 fade 	bl	800ccb2 <memmove>
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	68a3      	ldr	r3, [r4, #8]
 800c6fa:	1b9b      	subs	r3, r3, r6
 800c6fc:	60a3      	str	r3, [r4, #8]
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	4433      	add	r3, r6
 800c702:	6023      	str	r3, [r4, #0]
 800c704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c708:	462a      	mov	r2, r5
 800c70a:	f000 faa3 	bl	800cc54 <_realloc_r>
 800c70e:	4606      	mov	r6, r0
 800c710:	2800      	cmp	r0, #0
 800c712:	d1e0      	bne.n	800c6d6 <__ssputs_r+0x5a>
 800c714:	4650      	mov	r0, sl
 800c716:	6921      	ldr	r1, [r4, #16]
 800c718:	f7ff ff68 	bl	800c5ec <_free_r>
 800c71c:	230c      	movs	r3, #12
 800c71e:	f8ca 3000 	str.w	r3, [sl]
 800c722:	89a3      	ldrh	r3, [r4, #12]
 800c724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c72c:	81a3      	strh	r3, [r4, #12]
 800c72e:	e7e9      	b.n	800c704 <__ssputs_r+0x88>

0800c730 <_svfiprintf_r>:
 800c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c734:	4698      	mov	r8, r3
 800c736:	898b      	ldrh	r3, [r1, #12]
 800c738:	4607      	mov	r7, r0
 800c73a:	061b      	lsls	r3, r3, #24
 800c73c:	460d      	mov	r5, r1
 800c73e:	4614      	mov	r4, r2
 800c740:	b09d      	sub	sp, #116	; 0x74
 800c742:	d50e      	bpl.n	800c762 <_svfiprintf_r+0x32>
 800c744:	690b      	ldr	r3, [r1, #16]
 800c746:	b963      	cbnz	r3, 800c762 <_svfiprintf_r+0x32>
 800c748:	2140      	movs	r1, #64	; 0x40
 800c74a:	f7ff fdc3 	bl	800c2d4 <_malloc_r>
 800c74e:	6028      	str	r0, [r5, #0]
 800c750:	6128      	str	r0, [r5, #16]
 800c752:	b920      	cbnz	r0, 800c75e <_svfiprintf_r+0x2e>
 800c754:	230c      	movs	r3, #12
 800c756:	603b      	str	r3, [r7, #0]
 800c758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c75c:	e0d0      	b.n	800c900 <_svfiprintf_r+0x1d0>
 800c75e:	2340      	movs	r3, #64	; 0x40
 800c760:	616b      	str	r3, [r5, #20]
 800c762:	2300      	movs	r3, #0
 800c764:	9309      	str	r3, [sp, #36]	; 0x24
 800c766:	2320      	movs	r3, #32
 800c768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c76c:	2330      	movs	r3, #48	; 0x30
 800c76e:	f04f 0901 	mov.w	r9, #1
 800c772:	f8cd 800c 	str.w	r8, [sp, #12]
 800c776:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c918 <_svfiprintf_r+0x1e8>
 800c77a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c77e:	4623      	mov	r3, r4
 800c780:	469a      	mov	sl, r3
 800c782:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c786:	b10a      	cbz	r2, 800c78c <_svfiprintf_r+0x5c>
 800c788:	2a25      	cmp	r2, #37	; 0x25
 800c78a:	d1f9      	bne.n	800c780 <_svfiprintf_r+0x50>
 800c78c:	ebba 0b04 	subs.w	fp, sl, r4
 800c790:	d00b      	beq.n	800c7aa <_svfiprintf_r+0x7a>
 800c792:	465b      	mov	r3, fp
 800c794:	4622      	mov	r2, r4
 800c796:	4629      	mov	r1, r5
 800c798:	4638      	mov	r0, r7
 800c79a:	f7ff ff6f 	bl	800c67c <__ssputs_r>
 800c79e:	3001      	adds	r0, #1
 800c7a0:	f000 80a9 	beq.w	800c8f6 <_svfiprintf_r+0x1c6>
 800c7a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7a6:	445a      	add	r2, fp
 800c7a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f000 80a1 	beq.w	800c8f6 <_svfiprintf_r+0x1c6>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7be:	f10a 0a01 	add.w	sl, sl, #1
 800c7c2:	9304      	str	r3, [sp, #16]
 800c7c4:	9307      	str	r3, [sp, #28]
 800c7c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c7cc:	4654      	mov	r4, sl
 800c7ce:	2205      	movs	r2, #5
 800c7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d4:	4850      	ldr	r0, [pc, #320]	; (800c918 <_svfiprintf_r+0x1e8>)
 800c7d6:	f000 fa86 	bl	800cce6 <memchr>
 800c7da:	9a04      	ldr	r2, [sp, #16]
 800c7dc:	b9d8      	cbnz	r0, 800c816 <_svfiprintf_r+0xe6>
 800c7de:	06d0      	lsls	r0, r2, #27
 800c7e0:	bf44      	itt	mi
 800c7e2:	2320      	movmi	r3, #32
 800c7e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7e8:	0711      	lsls	r1, r2, #28
 800c7ea:	bf44      	itt	mi
 800c7ec:	232b      	movmi	r3, #43	; 0x2b
 800c7ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f8:	d015      	beq.n	800c826 <_svfiprintf_r+0xf6>
 800c7fa:	4654      	mov	r4, sl
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	f04f 0c0a 	mov.w	ip, #10
 800c802:	9a07      	ldr	r2, [sp, #28]
 800c804:	4621      	mov	r1, r4
 800c806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c80a:	3b30      	subs	r3, #48	; 0x30
 800c80c:	2b09      	cmp	r3, #9
 800c80e:	d94d      	bls.n	800c8ac <_svfiprintf_r+0x17c>
 800c810:	b1b0      	cbz	r0, 800c840 <_svfiprintf_r+0x110>
 800c812:	9207      	str	r2, [sp, #28]
 800c814:	e014      	b.n	800c840 <_svfiprintf_r+0x110>
 800c816:	eba0 0308 	sub.w	r3, r0, r8
 800c81a:	fa09 f303 	lsl.w	r3, r9, r3
 800c81e:	4313      	orrs	r3, r2
 800c820:	46a2      	mov	sl, r4
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	e7d2      	b.n	800c7cc <_svfiprintf_r+0x9c>
 800c826:	9b03      	ldr	r3, [sp, #12]
 800c828:	1d19      	adds	r1, r3, #4
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	9103      	str	r1, [sp, #12]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	bfbb      	ittet	lt
 800c832:	425b      	neglt	r3, r3
 800c834:	f042 0202 	orrlt.w	r2, r2, #2
 800c838:	9307      	strge	r3, [sp, #28]
 800c83a:	9307      	strlt	r3, [sp, #28]
 800c83c:	bfb8      	it	lt
 800c83e:	9204      	strlt	r2, [sp, #16]
 800c840:	7823      	ldrb	r3, [r4, #0]
 800c842:	2b2e      	cmp	r3, #46	; 0x2e
 800c844:	d10c      	bne.n	800c860 <_svfiprintf_r+0x130>
 800c846:	7863      	ldrb	r3, [r4, #1]
 800c848:	2b2a      	cmp	r3, #42	; 0x2a
 800c84a:	d134      	bne.n	800c8b6 <_svfiprintf_r+0x186>
 800c84c:	9b03      	ldr	r3, [sp, #12]
 800c84e:	3402      	adds	r4, #2
 800c850:	1d1a      	adds	r2, r3, #4
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	9203      	str	r2, [sp, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	bfb8      	it	lt
 800c85a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c85e:	9305      	str	r3, [sp, #20]
 800c860:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c91c <_svfiprintf_r+0x1ec>
 800c864:	2203      	movs	r2, #3
 800c866:	4650      	mov	r0, sl
 800c868:	7821      	ldrb	r1, [r4, #0]
 800c86a:	f000 fa3c 	bl	800cce6 <memchr>
 800c86e:	b138      	cbz	r0, 800c880 <_svfiprintf_r+0x150>
 800c870:	2240      	movs	r2, #64	; 0x40
 800c872:	9b04      	ldr	r3, [sp, #16]
 800c874:	eba0 000a 	sub.w	r0, r0, sl
 800c878:	4082      	lsls	r2, r0
 800c87a:	4313      	orrs	r3, r2
 800c87c:	3401      	adds	r4, #1
 800c87e:	9304      	str	r3, [sp, #16]
 800c880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c884:	2206      	movs	r2, #6
 800c886:	4826      	ldr	r0, [pc, #152]	; (800c920 <_svfiprintf_r+0x1f0>)
 800c888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c88c:	f000 fa2b 	bl	800cce6 <memchr>
 800c890:	2800      	cmp	r0, #0
 800c892:	d038      	beq.n	800c906 <_svfiprintf_r+0x1d6>
 800c894:	4b23      	ldr	r3, [pc, #140]	; (800c924 <_svfiprintf_r+0x1f4>)
 800c896:	bb1b      	cbnz	r3, 800c8e0 <_svfiprintf_r+0x1b0>
 800c898:	9b03      	ldr	r3, [sp, #12]
 800c89a:	3307      	adds	r3, #7
 800c89c:	f023 0307 	bic.w	r3, r3, #7
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	9303      	str	r3, [sp, #12]
 800c8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a6:	4433      	add	r3, r6
 800c8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8aa:	e768      	b.n	800c77e <_svfiprintf_r+0x4e>
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	2001      	movs	r0, #1
 800c8b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8b4:	e7a6      	b.n	800c804 <_svfiprintf_r+0xd4>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	f04f 0c0a 	mov.w	ip, #10
 800c8bc:	4619      	mov	r1, r3
 800c8be:	3401      	adds	r4, #1
 800c8c0:	9305      	str	r3, [sp, #20]
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8c8:	3a30      	subs	r2, #48	; 0x30
 800c8ca:	2a09      	cmp	r2, #9
 800c8cc:	d903      	bls.n	800c8d6 <_svfiprintf_r+0x1a6>
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0c6      	beq.n	800c860 <_svfiprintf_r+0x130>
 800c8d2:	9105      	str	r1, [sp, #20]
 800c8d4:	e7c4      	b.n	800c860 <_svfiprintf_r+0x130>
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	2301      	movs	r3, #1
 800c8da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8de:	e7f0      	b.n	800c8c2 <_svfiprintf_r+0x192>
 800c8e0:	ab03      	add	r3, sp, #12
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	462a      	mov	r2, r5
 800c8e6:	4638      	mov	r0, r7
 800c8e8:	4b0f      	ldr	r3, [pc, #60]	; (800c928 <_svfiprintf_r+0x1f8>)
 800c8ea:	a904      	add	r1, sp, #16
 800c8ec:	f3af 8000 	nop.w
 800c8f0:	1c42      	adds	r2, r0, #1
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	d1d6      	bne.n	800c8a4 <_svfiprintf_r+0x174>
 800c8f6:	89ab      	ldrh	r3, [r5, #12]
 800c8f8:	065b      	lsls	r3, r3, #25
 800c8fa:	f53f af2d 	bmi.w	800c758 <_svfiprintf_r+0x28>
 800c8fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c900:	b01d      	add	sp, #116	; 0x74
 800c902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c906:	ab03      	add	r3, sp, #12
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	462a      	mov	r2, r5
 800c90c:	4638      	mov	r0, r7
 800c90e:	4b06      	ldr	r3, [pc, #24]	; (800c928 <_svfiprintf_r+0x1f8>)
 800c910:	a904      	add	r1, sp, #16
 800c912:	f000 f87d 	bl	800ca10 <_printf_i>
 800c916:	e7eb      	b.n	800c8f0 <_svfiprintf_r+0x1c0>
 800c918:	0800dcd3 	.word	0x0800dcd3
 800c91c:	0800dcd9 	.word	0x0800dcd9
 800c920:	0800dcdd 	.word	0x0800dcdd
 800c924:	00000000 	.word	0x00000000
 800c928:	0800c67d 	.word	0x0800c67d

0800c92c <_printf_common>:
 800c92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c930:	4616      	mov	r6, r2
 800c932:	4699      	mov	r9, r3
 800c934:	688a      	ldr	r2, [r1, #8]
 800c936:	690b      	ldr	r3, [r1, #16]
 800c938:	4607      	mov	r7, r0
 800c93a:	4293      	cmp	r3, r2
 800c93c:	bfb8      	it	lt
 800c93e:	4613      	movlt	r3, r2
 800c940:	6033      	str	r3, [r6, #0]
 800c942:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c946:	460c      	mov	r4, r1
 800c948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c94c:	b10a      	cbz	r2, 800c952 <_printf_common+0x26>
 800c94e:	3301      	adds	r3, #1
 800c950:	6033      	str	r3, [r6, #0]
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	0699      	lsls	r1, r3, #26
 800c956:	bf42      	ittt	mi
 800c958:	6833      	ldrmi	r3, [r6, #0]
 800c95a:	3302      	addmi	r3, #2
 800c95c:	6033      	strmi	r3, [r6, #0]
 800c95e:	6825      	ldr	r5, [r4, #0]
 800c960:	f015 0506 	ands.w	r5, r5, #6
 800c964:	d106      	bne.n	800c974 <_printf_common+0x48>
 800c966:	f104 0a19 	add.w	sl, r4, #25
 800c96a:	68e3      	ldr	r3, [r4, #12]
 800c96c:	6832      	ldr	r2, [r6, #0]
 800c96e:	1a9b      	subs	r3, r3, r2
 800c970:	42ab      	cmp	r3, r5
 800c972:	dc2b      	bgt.n	800c9cc <_printf_common+0xa0>
 800c974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c978:	1e13      	subs	r3, r2, #0
 800c97a:	6822      	ldr	r2, [r4, #0]
 800c97c:	bf18      	it	ne
 800c97e:	2301      	movne	r3, #1
 800c980:	0692      	lsls	r2, r2, #26
 800c982:	d430      	bmi.n	800c9e6 <_printf_common+0xba>
 800c984:	4649      	mov	r1, r9
 800c986:	4638      	mov	r0, r7
 800c988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c98c:	47c0      	blx	r8
 800c98e:	3001      	adds	r0, #1
 800c990:	d023      	beq.n	800c9da <_printf_common+0xae>
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	6922      	ldr	r2, [r4, #16]
 800c996:	f003 0306 	and.w	r3, r3, #6
 800c99a:	2b04      	cmp	r3, #4
 800c99c:	bf14      	ite	ne
 800c99e:	2500      	movne	r5, #0
 800c9a0:	6833      	ldreq	r3, [r6, #0]
 800c9a2:	f04f 0600 	mov.w	r6, #0
 800c9a6:	bf08      	it	eq
 800c9a8:	68e5      	ldreq	r5, [r4, #12]
 800c9aa:	f104 041a 	add.w	r4, r4, #26
 800c9ae:	bf08      	it	eq
 800c9b0:	1aed      	subeq	r5, r5, r3
 800c9b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c9b6:	bf08      	it	eq
 800c9b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	bfc4      	itt	gt
 800c9c0:	1a9b      	subgt	r3, r3, r2
 800c9c2:	18ed      	addgt	r5, r5, r3
 800c9c4:	42b5      	cmp	r5, r6
 800c9c6:	d11a      	bne.n	800c9fe <_printf_common+0xd2>
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	e008      	b.n	800c9de <_printf_common+0xb2>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	4652      	mov	r2, sl
 800c9d0:	4649      	mov	r1, r9
 800c9d2:	4638      	mov	r0, r7
 800c9d4:	47c0      	blx	r8
 800c9d6:	3001      	adds	r0, #1
 800c9d8:	d103      	bne.n	800c9e2 <_printf_common+0xb6>
 800c9da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e2:	3501      	adds	r5, #1
 800c9e4:	e7c1      	b.n	800c96a <_printf_common+0x3e>
 800c9e6:	2030      	movs	r0, #48	; 0x30
 800c9e8:	18e1      	adds	r1, r4, r3
 800c9ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9f4:	4422      	add	r2, r4
 800c9f6:	3302      	adds	r3, #2
 800c9f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9fc:	e7c2      	b.n	800c984 <_printf_common+0x58>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	4622      	mov	r2, r4
 800ca02:	4649      	mov	r1, r9
 800ca04:	4638      	mov	r0, r7
 800ca06:	47c0      	blx	r8
 800ca08:	3001      	adds	r0, #1
 800ca0a:	d0e6      	beq.n	800c9da <_printf_common+0xae>
 800ca0c:	3601      	adds	r6, #1
 800ca0e:	e7d9      	b.n	800c9c4 <_printf_common+0x98>

0800ca10 <_printf_i>:
 800ca10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca14:	7e0f      	ldrb	r7, [r1, #24]
 800ca16:	4691      	mov	r9, r2
 800ca18:	2f78      	cmp	r7, #120	; 0x78
 800ca1a:	4680      	mov	r8, r0
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	469a      	mov	sl, r3
 800ca20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca26:	d807      	bhi.n	800ca38 <_printf_i+0x28>
 800ca28:	2f62      	cmp	r7, #98	; 0x62
 800ca2a:	d80a      	bhi.n	800ca42 <_printf_i+0x32>
 800ca2c:	2f00      	cmp	r7, #0
 800ca2e:	f000 80d5 	beq.w	800cbdc <_printf_i+0x1cc>
 800ca32:	2f58      	cmp	r7, #88	; 0x58
 800ca34:	f000 80c1 	beq.w	800cbba <_printf_i+0x1aa>
 800ca38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca40:	e03a      	b.n	800cab8 <_printf_i+0xa8>
 800ca42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca46:	2b15      	cmp	r3, #21
 800ca48:	d8f6      	bhi.n	800ca38 <_printf_i+0x28>
 800ca4a:	a101      	add	r1, pc, #4	; (adr r1, 800ca50 <_printf_i+0x40>)
 800ca4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca50:	0800caa9 	.word	0x0800caa9
 800ca54:	0800cabd 	.word	0x0800cabd
 800ca58:	0800ca39 	.word	0x0800ca39
 800ca5c:	0800ca39 	.word	0x0800ca39
 800ca60:	0800ca39 	.word	0x0800ca39
 800ca64:	0800ca39 	.word	0x0800ca39
 800ca68:	0800cabd 	.word	0x0800cabd
 800ca6c:	0800ca39 	.word	0x0800ca39
 800ca70:	0800ca39 	.word	0x0800ca39
 800ca74:	0800ca39 	.word	0x0800ca39
 800ca78:	0800ca39 	.word	0x0800ca39
 800ca7c:	0800cbc3 	.word	0x0800cbc3
 800ca80:	0800cae9 	.word	0x0800cae9
 800ca84:	0800cb7d 	.word	0x0800cb7d
 800ca88:	0800ca39 	.word	0x0800ca39
 800ca8c:	0800ca39 	.word	0x0800ca39
 800ca90:	0800cbe5 	.word	0x0800cbe5
 800ca94:	0800ca39 	.word	0x0800ca39
 800ca98:	0800cae9 	.word	0x0800cae9
 800ca9c:	0800ca39 	.word	0x0800ca39
 800caa0:	0800ca39 	.word	0x0800ca39
 800caa4:	0800cb85 	.word	0x0800cb85
 800caa8:	682b      	ldr	r3, [r5, #0]
 800caaa:	1d1a      	adds	r2, r3, #4
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	602a      	str	r2, [r5, #0]
 800cab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cab8:	2301      	movs	r3, #1
 800caba:	e0a0      	b.n	800cbfe <_printf_i+0x1ee>
 800cabc:	6820      	ldr	r0, [r4, #0]
 800cabe:	682b      	ldr	r3, [r5, #0]
 800cac0:	0607      	lsls	r7, r0, #24
 800cac2:	f103 0104 	add.w	r1, r3, #4
 800cac6:	6029      	str	r1, [r5, #0]
 800cac8:	d501      	bpl.n	800cace <_printf_i+0xbe>
 800caca:	681e      	ldr	r6, [r3, #0]
 800cacc:	e003      	b.n	800cad6 <_printf_i+0xc6>
 800cace:	0646      	lsls	r6, r0, #25
 800cad0:	d5fb      	bpl.n	800caca <_printf_i+0xba>
 800cad2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cad6:	2e00      	cmp	r6, #0
 800cad8:	da03      	bge.n	800cae2 <_printf_i+0xd2>
 800cada:	232d      	movs	r3, #45	; 0x2d
 800cadc:	4276      	negs	r6, r6
 800cade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cae2:	230a      	movs	r3, #10
 800cae4:	4859      	ldr	r0, [pc, #356]	; (800cc4c <_printf_i+0x23c>)
 800cae6:	e012      	b.n	800cb0e <_printf_i+0xfe>
 800cae8:	682b      	ldr	r3, [r5, #0]
 800caea:	6820      	ldr	r0, [r4, #0]
 800caec:	1d19      	adds	r1, r3, #4
 800caee:	6029      	str	r1, [r5, #0]
 800caf0:	0605      	lsls	r5, r0, #24
 800caf2:	d501      	bpl.n	800caf8 <_printf_i+0xe8>
 800caf4:	681e      	ldr	r6, [r3, #0]
 800caf6:	e002      	b.n	800cafe <_printf_i+0xee>
 800caf8:	0641      	lsls	r1, r0, #25
 800cafa:	d5fb      	bpl.n	800caf4 <_printf_i+0xe4>
 800cafc:	881e      	ldrh	r6, [r3, #0]
 800cafe:	2f6f      	cmp	r7, #111	; 0x6f
 800cb00:	bf0c      	ite	eq
 800cb02:	2308      	moveq	r3, #8
 800cb04:	230a      	movne	r3, #10
 800cb06:	4851      	ldr	r0, [pc, #324]	; (800cc4c <_printf_i+0x23c>)
 800cb08:	2100      	movs	r1, #0
 800cb0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb0e:	6865      	ldr	r5, [r4, #4]
 800cb10:	2d00      	cmp	r5, #0
 800cb12:	bfa8      	it	ge
 800cb14:	6821      	ldrge	r1, [r4, #0]
 800cb16:	60a5      	str	r5, [r4, #8]
 800cb18:	bfa4      	itt	ge
 800cb1a:	f021 0104 	bicge.w	r1, r1, #4
 800cb1e:	6021      	strge	r1, [r4, #0]
 800cb20:	b90e      	cbnz	r6, 800cb26 <_printf_i+0x116>
 800cb22:	2d00      	cmp	r5, #0
 800cb24:	d04b      	beq.n	800cbbe <_printf_i+0x1ae>
 800cb26:	4615      	mov	r5, r2
 800cb28:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb2c:	fb03 6711 	mls	r7, r3, r1, r6
 800cb30:	5dc7      	ldrb	r7, [r0, r7]
 800cb32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb36:	4637      	mov	r7, r6
 800cb38:	42bb      	cmp	r3, r7
 800cb3a:	460e      	mov	r6, r1
 800cb3c:	d9f4      	bls.n	800cb28 <_printf_i+0x118>
 800cb3e:	2b08      	cmp	r3, #8
 800cb40:	d10b      	bne.n	800cb5a <_printf_i+0x14a>
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	07de      	lsls	r6, r3, #31
 800cb46:	d508      	bpl.n	800cb5a <_printf_i+0x14a>
 800cb48:	6923      	ldr	r3, [r4, #16]
 800cb4a:	6861      	ldr	r1, [r4, #4]
 800cb4c:	4299      	cmp	r1, r3
 800cb4e:	bfde      	ittt	le
 800cb50:	2330      	movle	r3, #48	; 0x30
 800cb52:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb56:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cb5a:	1b52      	subs	r2, r2, r5
 800cb5c:	6122      	str	r2, [r4, #16]
 800cb5e:	464b      	mov	r3, r9
 800cb60:	4621      	mov	r1, r4
 800cb62:	4640      	mov	r0, r8
 800cb64:	f8cd a000 	str.w	sl, [sp]
 800cb68:	aa03      	add	r2, sp, #12
 800cb6a:	f7ff fedf 	bl	800c92c <_printf_common>
 800cb6e:	3001      	adds	r0, #1
 800cb70:	d14a      	bne.n	800cc08 <_printf_i+0x1f8>
 800cb72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb76:	b004      	add	sp, #16
 800cb78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb7c:	6823      	ldr	r3, [r4, #0]
 800cb7e:	f043 0320 	orr.w	r3, r3, #32
 800cb82:	6023      	str	r3, [r4, #0]
 800cb84:	2778      	movs	r7, #120	; 0x78
 800cb86:	4832      	ldr	r0, [pc, #200]	; (800cc50 <_printf_i+0x240>)
 800cb88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb8c:	6823      	ldr	r3, [r4, #0]
 800cb8e:	6829      	ldr	r1, [r5, #0]
 800cb90:	061f      	lsls	r7, r3, #24
 800cb92:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb96:	d402      	bmi.n	800cb9e <_printf_i+0x18e>
 800cb98:	065f      	lsls	r7, r3, #25
 800cb9a:	bf48      	it	mi
 800cb9c:	b2b6      	uxthmi	r6, r6
 800cb9e:	07df      	lsls	r7, r3, #31
 800cba0:	bf48      	it	mi
 800cba2:	f043 0320 	orrmi.w	r3, r3, #32
 800cba6:	6029      	str	r1, [r5, #0]
 800cba8:	bf48      	it	mi
 800cbaa:	6023      	strmi	r3, [r4, #0]
 800cbac:	b91e      	cbnz	r6, 800cbb6 <_printf_i+0x1a6>
 800cbae:	6823      	ldr	r3, [r4, #0]
 800cbb0:	f023 0320 	bic.w	r3, r3, #32
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	2310      	movs	r3, #16
 800cbb8:	e7a6      	b.n	800cb08 <_printf_i+0xf8>
 800cbba:	4824      	ldr	r0, [pc, #144]	; (800cc4c <_printf_i+0x23c>)
 800cbbc:	e7e4      	b.n	800cb88 <_printf_i+0x178>
 800cbbe:	4615      	mov	r5, r2
 800cbc0:	e7bd      	b.n	800cb3e <_printf_i+0x12e>
 800cbc2:	682b      	ldr	r3, [r5, #0]
 800cbc4:	6826      	ldr	r6, [r4, #0]
 800cbc6:	1d18      	adds	r0, r3, #4
 800cbc8:	6961      	ldr	r1, [r4, #20]
 800cbca:	6028      	str	r0, [r5, #0]
 800cbcc:	0635      	lsls	r5, r6, #24
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	d501      	bpl.n	800cbd6 <_printf_i+0x1c6>
 800cbd2:	6019      	str	r1, [r3, #0]
 800cbd4:	e002      	b.n	800cbdc <_printf_i+0x1cc>
 800cbd6:	0670      	lsls	r0, r6, #25
 800cbd8:	d5fb      	bpl.n	800cbd2 <_printf_i+0x1c2>
 800cbda:	8019      	strh	r1, [r3, #0]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	4615      	mov	r5, r2
 800cbe0:	6123      	str	r3, [r4, #16]
 800cbe2:	e7bc      	b.n	800cb5e <_printf_i+0x14e>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	1d1a      	adds	r2, r3, #4
 800cbea:	602a      	str	r2, [r5, #0]
 800cbec:	681d      	ldr	r5, [r3, #0]
 800cbee:	6862      	ldr	r2, [r4, #4]
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f000 f878 	bl	800cce6 <memchr>
 800cbf6:	b108      	cbz	r0, 800cbfc <_printf_i+0x1ec>
 800cbf8:	1b40      	subs	r0, r0, r5
 800cbfa:	6060      	str	r0, [r4, #4]
 800cbfc:	6863      	ldr	r3, [r4, #4]
 800cbfe:	6123      	str	r3, [r4, #16]
 800cc00:	2300      	movs	r3, #0
 800cc02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc06:	e7aa      	b.n	800cb5e <_printf_i+0x14e>
 800cc08:	462a      	mov	r2, r5
 800cc0a:	4649      	mov	r1, r9
 800cc0c:	4640      	mov	r0, r8
 800cc0e:	6923      	ldr	r3, [r4, #16]
 800cc10:	47d0      	blx	sl
 800cc12:	3001      	adds	r0, #1
 800cc14:	d0ad      	beq.n	800cb72 <_printf_i+0x162>
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	079b      	lsls	r3, r3, #30
 800cc1a:	d413      	bmi.n	800cc44 <_printf_i+0x234>
 800cc1c:	68e0      	ldr	r0, [r4, #12]
 800cc1e:	9b03      	ldr	r3, [sp, #12]
 800cc20:	4298      	cmp	r0, r3
 800cc22:	bfb8      	it	lt
 800cc24:	4618      	movlt	r0, r3
 800cc26:	e7a6      	b.n	800cb76 <_printf_i+0x166>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	4632      	mov	r2, r6
 800cc2c:	4649      	mov	r1, r9
 800cc2e:	4640      	mov	r0, r8
 800cc30:	47d0      	blx	sl
 800cc32:	3001      	adds	r0, #1
 800cc34:	d09d      	beq.n	800cb72 <_printf_i+0x162>
 800cc36:	3501      	adds	r5, #1
 800cc38:	68e3      	ldr	r3, [r4, #12]
 800cc3a:	9903      	ldr	r1, [sp, #12]
 800cc3c:	1a5b      	subs	r3, r3, r1
 800cc3e:	42ab      	cmp	r3, r5
 800cc40:	dcf2      	bgt.n	800cc28 <_printf_i+0x218>
 800cc42:	e7eb      	b.n	800cc1c <_printf_i+0x20c>
 800cc44:	2500      	movs	r5, #0
 800cc46:	f104 0619 	add.w	r6, r4, #25
 800cc4a:	e7f5      	b.n	800cc38 <_printf_i+0x228>
 800cc4c:	0800dce4 	.word	0x0800dce4
 800cc50:	0800dcf5 	.word	0x0800dcf5

0800cc54 <_realloc_r>:
 800cc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc58:	4680      	mov	r8, r0
 800cc5a:	4614      	mov	r4, r2
 800cc5c:	460e      	mov	r6, r1
 800cc5e:	b921      	cbnz	r1, 800cc6a <_realloc_r+0x16>
 800cc60:	4611      	mov	r1, r2
 800cc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc66:	f7ff bb35 	b.w	800c2d4 <_malloc_r>
 800cc6a:	b92a      	cbnz	r2, 800cc78 <_realloc_r+0x24>
 800cc6c:	f7ff fcbe 	bl	800c5ec <_free_r>
 800cc70:	4625      	mov	r5, r4
 800cc72:	4628      	mov	r0, r5
 800cc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc78:	f000 f843 	bl	800cd02 <_malloc_usable_size_r>
 800cc7c:	4284      	cmp	r4, r0
 800cc7e:	4607      	mov	r7, r0
 800cc80:	d802      	bhi.n	800cc88 <_realloc_r+0x34>
 800cc82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc86:	d812      	bhi.n	800ccae <_realloc_r+0x5a>
 800cc88:	4621      	mov	r1, r4
 800cc8a:	4640      	mov	r0, r8
 800cc8c:	f7ff fb22 	bl	800c2d4 <_malloc_r>
 800cc90:	4605      	mov	r5, r0
 800cc92:	2800      	cmp	r0, #0
 800cc94:	d0ed      	beq.n	800cc72 <_realloc_r+0x1e>
 800cc96:	42bc      	cmp	r4, r7
 800cc98:	4622      	mov	r2, r4
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	bf28      	it	cs
 800cc9e:	463a      	movcs	r2, r7
 800cca0:	f7ff fc8e 	bl	800c5c0 <memcpy>
 800cca4:	4631      	mov	r1, r6
 800cca6:	4640      	mov	r0, r8
 800cca8:	f7ff fca0 	bl	800c5ec <_free_r>
 800ccac:	e7e1      	b.n	800cc72 <_realloc_r+0x1e>
 800ccae:	4635      	mov	r5, r6
 800ccb0:	e7df      	b.n	800cc72 <_realloc_r+0x1e>

0800ccb2 <memmove>:
 800ccb2:	4288      	cmp	r0, r1
 800ccb4:	b510      	push	{r4, lr}
 800ccb6:	eb01 0402 	add.w	r4, r1, r2
 800ccba:	d902      	bls.n	800ccc2 <memmove+0x10>
 800ccbc:	4284      	cmp	r4, r0
 800ccbe:	4623      	mov	r3, r4
 800ccc0:	d807      	bhi.n	800ccd2 <memmove+0x20>
 800ccc2:	1e43      	subs	r3, r0, #1
 800ccc4:	42a1      	cmp	r1, r4
 800ccc6:	d008      	beq.n	800ccda <memmove+0x28>
 800ccc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cccc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccd0:	e7f8      	b.n	800ccc4 <memmove+0x12>
 800ccd2:	4601      	mov	r1, r0
 800ccd4:	4402      	add	r2, r0
 800ccd6:	428a      	cmp	r2, r1
 800ccd8:	d100      	bne.n	800ccdc <memmove+0x2a>
 800ccda:	bd10      	pop	{r4, pc}
 800ccdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cce0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cce4:	e7f7      	b.n	800ccd6 <memmove+0x24>

0800cce6 <memchr>:
 800cce6:	4603      	mov	r3, r0
 800cce8:	b510      	push	{r4, lr}
 800ccea:	b2c9      	uxtb	r1, r1
 800ccec:	4402      	add	r2, r0
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	d101      	bne.n	800ccf8 <memchr+0x12>
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	e003      	b.n	800cd00 <memchr+0x1a>
 800ccf8:	7804      	ldrb	r4, [r0, #0]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	428c      	cmp	r4, r1
 800ccfe:	d1f6      	bne.n	800ccee <memchr+0x8>
 800cd00:	bd10      	pop	{r4, pc}

0800cd02 <_malloc_usable_size_r>:
 800cd02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd06:	1f18      	subs	r0, r3, #4
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	bfbc      	itt	lt
 800cd0c:	580b      	ldrlt	r3, [r1, r0]
 800cd0e:	18c0      	addlt	r0, r0, r3
 800cd10:	4770      	bx	lr
	...

0800cd14 <_init>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	bf00      	nop
 800cd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1a:	bc08      	pop	{r3}
 800cd1c:	469e      	mov	lr, r3
 800cd1e:	4770      	bx	lr

0800cd20 <_fini>:
 800cd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd22:	bf00      	nop
 800cd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd26:	bc08      	pop	{r3}
 800cd28:	469e      	mov	lr, r3
 800cd2a:	4770      	bx	lr
