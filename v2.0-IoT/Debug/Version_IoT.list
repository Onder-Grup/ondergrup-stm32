
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8bc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f2c  0800daa0  0800daa0  0001daa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9cc  0800e9cc  00020a20  2**0
                  CONTENTS
  4 .ARM          00000000  0800e9cc  0800e9cc  00020a20  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e9cc  0800e9cc  00020a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9cc  0800e9cc  0001e9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9d0  0800e9d0  0001e9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a20  20000000  0800e9d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000a20  0800f3f4  00020a20  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000103c  0800f3f4  0002103c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a20  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a49  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138c3  00000000  00000000  00020a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026be  00000000  00000000  0003434f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00036a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3a  00000000  00000000  00037c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef6  00000000  00000000  00038a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b50  00000000  00000000  00053938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fde6  00000000  00000000  0006c488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052fc  00000000  00000000  0010c270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011156c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a20 	.word	0x20000a20
 8000200:	00000000 	.word	0x00000000
 8000204:	0800da88 	.word	0x0800da88

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a24 	.word	0x20000a24
 8000220:	0800da88 	.word	0x0800da88

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00d f802 	bl	800d24c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00c f9d0 	bl	800c5fc <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f009 f900 	bl	8009464 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c fff0 	bl	800d24c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00c f9be 	bl	800c5fc <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f009 f8ee 	bl	8009464 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c ffde 	bl	800d24c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00c f9ac 	bl	800c5fc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f009 f8dc 	bl	8009464 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c ffcc 	bl	800d24c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00c f99a 	bl	800c5fc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f009 f8ca 	bl	8009464 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c ffd7 	bl	800d29c <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c ffc4 	bl	800d29c <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c ff88 	bl	800d24c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00c f956 	bl	800c5fc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f009 f886 	bl	8009464 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800daa0 	.word	0x0800daa0
 8000364:	20000a3c 	.word	0x20000a3c
 8000368:	0800dab0 	.word	0x0800dab0
 800036c:	0800dabc 	.word	0x0800dabc
 8000370:	0800dac4 	.word	0x0800dac4
 8000374:	0800dad4 	.word	0x0800dad4
 8000378:	0800dae0 	.word	0x0800dae0
 800037c:	0800dae4 	.word	0x0800dae4
 8000380:	0800dae8 	.word	0x0800dae8

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c ff4d 	bl	800d24c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00c f918 	bl	800c5fc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f009 f848 	bl	8009464 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c ff2b 	bl	800d24c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c ff1b 	bl	800d24c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00c f8e3 	bl	800c5fc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f009 f813 	bl	8009464 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00c f8cf 	bl	800c5fc <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f008 ffff 	bl	8009464 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800daec 	.word	0x0800daec
 8000474:	0800dafc 	.word	0x0800dafc
 8000478:	20000a3c 	.word	0x20000a3c
 800047c:	0800db78 	.word	0x0800db78
 8000480:	0800db1c 	.word	0x0800db1c
 8000484:	0800db8c 	.word	0x0800db8c

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f00a fbc3 	bl	800ac56 <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f00a fbaf 	bl	800ac3c <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 ff12 	bl	800a37c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000e08 	.word	0x20000e08
 8000564:	20000b36 	.word	0x20000b36

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f00a fb53 	bl	800ac56 <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f00a fb3f 	bl	800ac3c <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 fea2 	bl	800a37c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000e08 	.word	0x20000e08
 8000644:	20000b36 	.word	0x20000b36

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f00a facd 	bl	800ac56 <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f00a fab9 	bl	800ac3c <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f009 fe1c 	bl	800a37c <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000e08 	.word	0x20000e08
 8000750:	20000b36 	.word	0x20000b36

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f86d 	bl	8000850 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f008 fe22 	bl	8009464 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff9d 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff ff17 	bl	8000674 <lcd_send_char>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <lcd_backlight+0x20>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe11 	bl	8000488 <lcd_send_cmd>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000b36 	.word	0x20000b36

08000874 <lcd_cursor>:

void lcd_cursor(int state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000882:	200e      	movs	r0, #14
 8000884:	f7ff fe00 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fdfd 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800088e:	e002      	b.n	8000896 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff fdf9 	bl	8000488 <lcd_send_cmd>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
}
 80008a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_SystemReset+0x28>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <__NVIC_SystemReset+0x20>
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	05fa0004 	.word	0x05fa0004

080008cc <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fca5 	bl	8000224 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	3301      	adds	r3, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f00c fbbe 	bl	800d060 <malloc>
 80008e4:	4603      	mov	r3, r0
 80008e6:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <copyText+0x2a>
        strcpy(result, text);
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f00c fd1f 	bl	800d334 <strcpy>
    }
    return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800090a:	20c8      	movs	r0, #200	; 0xc8
 800090c:	f008 fdaa 	bl	8009464 <HAL_Delay>
	lcd_clear();
 8000910:	f7ff ff7e 	bl	8000810 <lcd_clear>
	if(type == 1 && page == 0) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d143      	bne.n	80009a2 <printTemplate+0xa2>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d140      	bne.n	80009a2 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000920:	4ac1      	ldr	r2, [pc, #772]	; (8000c28 <printTemplate+0x328>)
 8000922:	2101      	movs	r1, #1
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff ff47 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 800092a:	4ac0      	ldr	r2, [pc, #768]	; (8000c2c <printTemplate+0x32c>)
 800092c:	2103      	movs	r1, #3
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff ff42 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 8000934:	4abe      	ldr	r2, [pc, #760]	; (8000c30 <printTemplate+0x330>)
 8000936:	2104      	movs	r1, #4
 8000938:	2002      	movs	r0, #2
 800093a:	f7ff ff3d 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 800093e:	4abd      	ldr	r2, [pc, #756]	; (8000c34 <printTemplate+0x334>)
 8000940:	2105      	movs	r1, #5
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff ff38 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 8000948:	4abb      	ldr	r2, [pc, #748]	; (8000c38 <printTemplate+0x338>)
 800094a:	2106      	movs	r1, #6
 800094c:	2002      	movs	r0, #2
 800094e:	f7ff ff33 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 8000952:	4aba      	ldr	r2, [pc, #744]	; (8000c3c <printTemplate+0x33c>)
 8000954:	2107      	movs	r1, #7
 8000956:	2002      	movs	r0, #2
 8000958:	f7ff ff2e 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 800095c:	4ab8      	ldr	r2, [pc, #736]	; (8000c40 <printTemplate+0x340>)
 800095e:	210a      	movs	r1, #10
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff ff29 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 8000966:	4ab7      	ldr	r2, [pc, #732]	; (8000c44 <printTemplate+0x344>)
 8000968:	210b      	movs	r1, #11
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff ff24 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 8000970:	4ab5      	ldr	r2, [pc, #724]	; (8000c48 <printTemplate+0x348>)
 8000972:	210c      	movs	r1, #12
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff ff1f 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 800097a:	4ab4      	ldr	r2, [pc, #720]	; (8000c4c <printTemplate+0x34c>)
 800097c:	210d      	movs	r1, #13
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff ff1a 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 8000984:	4ab2      	ldr	r2, [pc, #712]	; (8000c50 <printTemplate+0x350>)
 8000986:	210e      	movs	r1, #14
 8000988:	2002      	movs	r0, #2
 800098a:	f7ff ff15 	bl	80007b8 <lcd_print>
		lcd_print(1, 5, machineID);
 800098e:	4ab1      	ldr	r2, [pc, #708]	; (8000c54 <printTemplate+0x354>)
 8000990:	2105      	movs	r1, #5
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ff10 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000998:	2103      	movs	r1, #3
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff feed 	bl	800077a <lcd_gotoxy>
				//slideText(wifiPass, 7, 1);
			}
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 80009a0:	e19a      	b.n	8000cd8 <printTemplate+0x3d8>
	} else if(type == 2) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	f040 80b5 	bne.w	8000b14 <printTemplate+0x214>
		if(page == 1) {
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d120      	bne.n	80009f2 <printTemplate+0xf2>
			lcd_clear();
 80009b0:	f7ff ff2e 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009b4:	2064      	movs	r0, #100	; 0x64
 80009b6:	f008 fd55 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009ba:	4aa7      	ldr	r2, [pc, #668]	; (8000c58 <printTemplate+0x358>)
 80009bc:	2101      	movs	r1, #1
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff fefa 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 80009c4:	48a5      	ldr	r0, [pc, #660]	; (8000c5c <printTemplate+0x35c>)
 80009c6:	f7ff fc2d 	bl	8000224 <strlen>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b0a      	cmp	r3, #10
 80009ce:	d805      	bhi.n	80009dc <printTemplate+0xdc>
				lcd_print(1, 7, wifiSSID);
 80009d0:	4aa2      	ldr	r2, [pc, #648]	; (8000c5c <printTemplate+0x35c>)
 80009d2:	2107      	movs	r1, #7
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff feef 	bl	80007b8 <lcd_print>
 80009da:	e004      	b.n	80009e6 <printTemplate+0xe6>
				lcd_print(1, 7, wifiSSID);
 80009dc:	4a9f      	ldr	r2, [pc, #636]	; (8000c5c <printTemplate+0x35c>)
 80009de:	2107      	movs	r1, #7
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff fee9 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80009e6:	4a9e      	ldr	r2, [pc, #632]	; (8000c60 <printTemplate+0x360>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fee4 	bl	80007b8 <lcd_print>
}
 80009f0:	e172      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 2) {
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d120      	bne.n	8000a3a <printTemplate+0x13a>
			lcd_clear();
 80009f8:	f7ff ff0a 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f008 fd31 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a02:	4a95      	ldr	r2, [pc, #596]	; (8000c58 <printTemplate+0x358>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fed6 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000a0c:	4893      	ldr	r0, [pc, #588]	; (8000c5c <printTemplate+0x35c>)
 8000a0e:	f7ff fc09 	bl	8000224 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b0a      	cmp	r3, #10
 8000a16:	d805      	bhi.n	8000a24 <printTemplate+0x124>
				lcd_print(1, 7, wifiSSID);
 8000a18:	4a90      	ldr	r2, [pc, #576]	; (8000c5c <printTemplate+0x35c>)
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fecb 	bl	80007b8 <lcd_print>
 8000a22:	e004      	b.n	8000a2e <printTemplate+0x12e>
				lcd_print(1, 7, wifiSSID);
 8000a24:	4a8d      	ldr	r2, [pc, #564]	; (8000c5c <printTemplate+0x35c>)
 8000a26:	2107      	movs	r1, #7
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff fec5 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000a2e:	4a8d      	ldr	r2, [pc, #564]	; (8000c64 <printTemplate+0x364>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fec0 	bl	80007b8 <lcd_print>
}
 8000a38:	e14e      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	d120      	bne.n	8000a82 <printTemplate+0x182>
			lcd_clear();
 8000a40:	f7ff fee6 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f008 fd0d 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a4a:	4a83      	ldr	r2, [pc, #524]	; (8000c58 <printTemplate+0x358>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff feb2 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000a54:	4881      	ldr	r0, [pc, #516]	; (8000c5c <printTemplate+0x35c>)
 8000a56:	f7ff fbe5 	bl	8000224 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	d805      	bhi.n	8000a6c <printTemplate+0x16c>
				lcd_print(1, 7, wifiSSID);
 8000a60:	4a7e      	ldr	r2, [pc, #504]	; (8000c5c <printTemplate+0x35c>)
 8000a62:	2107      	movs	r1, #7
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff fea7 	bl	80007b8 <lcd_print>
 8000a6a:	e004      	b.n	8000a76 <printTemplate+0x176>
				lcd_print(1, 7, wifiSSID);
 8000a6c:	4a7b      	ldr	r2, [pc, #492]	; (8000c5c <printTemplate+0x35c>)
 8000a6e:	2107      	movs	r1, #7
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fea1 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000a76:	4a7c      	ldr	r2, [pc, #496]	; (8000c68 <printTemplate+0x368>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f7ff fe9c 	bl	80007b8 <lcd_print>
}
 8000a80:	e12a      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d120      	bne.n	8000aca <printTemplate+0x1ca>
			lcd_clear();
 8000a88:	f7ff fec2 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f008 fce9 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a92:	4a71      	ldr	r2, [pc, #452]	; (8000c58 <printTemplate+0x358>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fe8e 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000a9c:	486f      	ldr	r0, [pc, #444]	; (8000c5c <printTemplate+0x35c>)
 8000a9e:	f7ff fbc1 	bl	8000224 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b0a      	cmp	r3, #10
 8000aa6:	d805      	bhi.n	8000ab4 <printTemplate+0x1b4>
				lcd_print(1, 7, wifiSSID);
 8000aa8:	4a6c      	ldr	r2, [pc, #432]	; (8000c5c <printTemplate+0x35c>)
 8000aaa:	2107      	movs	r1, #7
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fe83 	bl	80007b8 <lcd_print>
 8000ab2:	e004      	b.n	8000abe <printTemplate+0x1be>
				lcd_print(1, 7, wifiSSID);
 8000ab4:	4a69      	ldr	r2, [pc, #420]	; (8000c5c <printTemplate+0x35c>)
 8000ab6:	2107      	movs	r1, #7
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fe7d 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000abe:	4a6b      	ldr	r2, [pc, #428]	; (8000c6c <printTemplate+0x36c>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff fe78 	bl	80007b8 <lcd_print>
}
 8000ac8:	e106      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	f040 8103 	bne.w	8000cd8 <printTemplate+0x3d8>
			lcd_clear();
 8000ad2:	f7ff fe9d 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f008 fcc4 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000adc:	4a5e      	ldr	r2, [pc, #376]	; (8000c58 <printTemplate+0x358>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff fe69 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000ae6:	485d      	ldr	r0, [pc, #372]	; (8000c5c <printTemplate+0x35c>)
 8000ae8:	f7ff fb9c 	bl	8000224 <strlen>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b0a      	cmp	r3, #10
 8000af0:	d805      	bhi.n	8000afe <printTemplate+0x1fe>
				lcd_print(1, 7, wifiSSID);
 8000af2:	4a5a      	ldr	r2, [pc, #360]	; (8000c5c <printTemplate+0x35c>)
 8000af4:	2107      	movs	r1, #7
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fe5e 	bl	80007b8 <lcd_print>
 8000afc:	e004      	b.n	8000b08 <printTemplate+0x208>
				lcd_print(1, 7, wifiSSID);
 8000afe:	4a57      	ldr	r2, [pc, #348]	; (8000c5c <printTemplate+0x35c>)
 8000b00:	2107      	movs	r1, #7
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff fe58 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b08:	4a59      	ldr	r2, [pc, #356]	; (8000c70 <printTemplate+0x370>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fe53 	bl	80007b8 <lcd_print>
}
 8000b12:	e0e1      	b.n	8000cd8 <printTemplate+0x3d8>
	} else if(type == 3) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	f040 80de 	bne.w	8000cd8 <printTemplate+0x3d8>
		if(page == 1) {
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d120      	bne.n	8000b64 <printTemplate+0x264>
			lcd_clear();
 8000b22:	f7ff fe75 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f008 fc9c 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b2c:	4a51      	ldr	r2, [pc, #324]	; (8000c74 <printTemplate+0x374>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff fe41 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000b36:	4850      	ldr	r0, [pc, #320]	; (8000c78 <printTemplate+0x378>)
 8000b38:	f7ff fb74 	bl	8000224 <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b0a      	cmp	r3, #10
 8000b40:	d805      	bhi.n	8000b4e <printTemplate+0x24e>
				lcd_print(1, 7, wifiPass);
 8000b42:	4a4d      	ldr	r2, [pc, #308]	; (8000c78 <printTemplate+0x378>)
 8000b44:	2107      	movs	r1, #7
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff fe36 	bl	80007b8 <lcd_print>
 8000b4c:	e004      	b.n	8000b58 <printTemplate+0x258>
				lcd_print(1, 7, wifiPass);
 8000b4e:	4a4a      	ldr	r2, [pc, #296]	; (8000c78 <printTemplate+0x378>)
 8000b50:	2107      	movs	r1, #7
 8000b52:	2001      	movs	r0, #1
 8000b54:	f7ff fe30 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000b58:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <printTemplate+0x360>)
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f7ff fe2b 	bl	80007b8 <lcd_print>
}
 8000b62:	e0b9      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 2) {
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d120      	bne.n	8000bac <printTemplate+0x2ac>
			lcd_clear();
 8000b6a:	f7ff fe51 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b6e:	2064      	movs	r0, #100	; 0x64
 8000b70:	f008 fc78 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b74:	4a3f      	ldr	r2, [pc, #252]	; (8000c74 <printTemplate+0x374>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f7ff fe1d 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000b7e:	483e      	ldr	r0, [pc, #248]	; (8000c78 <printTemplate+0x378>)
 8000b80:	f7ff fb50 	bl	8000224 <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b0a      	cmp	r3, #10
 8000b88:	d805      	bhi.n	8000b96 <printTemplate+0x296>
				lcd_print(1, 7, wifiPass);
 8000b8a:	4a3b      	ldr	r2, [pc, #236]	; (8000c78 <printTemplate+0x378>)
 8000b8c:	2107      	movs	r1, #7
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff fe12 	bl	80007b8 <lcd_print>
 8000b94:	e004      	b.n	8000ba0 <printTemplate+0x2a0>
				lcd_print(1, 7, wifiPass);
 8000b96:	4a38      	ldr	r2, [pc, #224]	; (8000c78 <printTemplate+0x378>)
 8000b98:	2107      	movs	r1, #7
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fe0c 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ba0:	4a30      	ldr	r2, [pc, #192]	; (8000c64 <printTemplate+0x364>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f7ff fe07 	bl	80007b8 <lcd_print>
}
 8000baa:	e095      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d120      	bne.n	8000bf4 <printTemplate+0x2f4>
			lcd_clear();
 8000bb2:	f7ff fe2d 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000bb6:	2064      	movs	r0, #100	; 0x64
 8000bb8:	f008 fc54 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000bbc:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <printTemplate+0x374>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fdf9 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000bc6:	482c      	ldr	r0, [pc, #176]	; (8000c78 <printTemplate+0x378>)
 8000bc8:	f7ff fb2c 	bl	8000224 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b0a      	cmp	r3, #10
 8000bd0:	d805      	bhi.n	8000bde <printTemplate+0x2de>
				lcd_print(1, 7, wifiPass);
 8000bd2:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <printTemplate+0x378>)
 8000bd4:	2107      	movs	r1, #7
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff fdee 	bl	80007b8 <lcd_print>
 8000bdc:	e004      	b.n	8000be8 <printTemplate+0x2e8>
				lcd_print(1, 7, wifiPass);
 8000bde:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <printTemplate+0x378>)
 8000be0:	2107      	movs	r1, #7
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff fde8 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <printTemplate+0x368>)
 8000bea:	2101      	movs	r1, #1
 8000bec:	2002      	movs	r0, #2
 8000bee:	f7ff fde3 	bl	80007b8 <lcd_print>
}
 8000bf2:	e071      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d14b      	bne.n	8000c92 <printTemplate+0x392>
			lcd_clear();
 8000bfa:	f7ff fe09 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000bfe:	2064      	movs	r0, #100	; 0x64
 8000c00:	f008 fc30 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <printTemplate+0x374>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fdd5 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000c0e:	481a      	ldr	r0, [pc, #104]	; (8000c78 <printTemplate+0x378>)
 8000c10:	f7ff fb08 	bl	8000224 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d830      	bhi.n	8000c7c <printTemplate+0x37c>
				lcd_print(1, 7, wifiPass);
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <printTemplate+0x378>)
 8000c1c:	2107      	movs	r1, #7
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff fdca 	bl	80007b8 <lcd_print>
 8000c24:	e02f      	b.n	8000c86 <printTemplate+0x386>
 8000c26:	bf00      	nop
 8000c28:	0800dc18 	.word	0x0800dc18
 8000c2c:	0800dc20 	.word	0x0800dc20
 8000c30:	0800dc24 	.word	0x0800dc24
 8000c34:	0800dc28 	.word	0x0800dc28
 8000c38:	0800dc2c 	.word	0x0800dc2c
 8000c3c:	0800dc30 	.word	0x0800dc30
 8000c40:	0800dc34 	.word	0x0800dc34
 8000c44:	0800dc38 	.word	0x0800dc38
 8000c48:	0800dc3c 	.word	0x0800dc3c
 8000c4c:	0800dc40 	.word	0x0800dc40
 8000c50:	0800dc44 	.word	0x0800dc44
 8000c54:	20000bf4 	.word	0x20000bf4
 8000c58:	0800dc48 	.word	0x0800dc48
 8000c5c:	20000c00 	.word	0x20000c00
 8000c60:	0800dc50 	.word	0x0800dc50
 8000c64:	0800dc64 	.word	0x0800dc64
 8000c68:	0800dc78 	.word	0x0800dc78
 8000c6c:	0800dc8c 	.word	0x0800dc8c
 8000c70:	0800dca0 	.word	0x0800dca0
 8000c74:	0800dcb4 	.word	0x0800dcb4
 8000c78:	20000c24 	.word	0x20000c24
				lcd_print(1, 7, wifiPass);
 8000c7c:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <printTemplate+0x3e0>)
 8000c7e:	2107      	movs	r1, #7
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff fd99 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <printTemplate+0x3e4>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f7ff fd94 	bl	80007b8 <lcd_print>
}
 8000c90:	e022      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d11f      	bne.n	8000cd8 <printTemplate+0x3d8>
			lcd_clear();
 8000c98:	f7ff fdba 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000c9c:	2064      	movs	r0, #100	; 0x64
 8000c9e:	f008 fbe1 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ca2:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <printTemplate+0x3e8>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fd86 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <printTemplate+0x3e0>)
 8000cae:	f7ff fab9 	bl	8000224 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b0a      	cmp	r3, #10
 8000cb6:	d805      	bhi.n	8000cc4 <printTemplate+0x3c4>
				lcd_print(1, 7, wifiPass);
 8000cb8:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <printTemplate+0x3e0>)
 8000cba:	2107      	movs	r1, #7
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f7ff fd7b 	bl	80007b8 <lcd_print>
 8000cc2:	e004      	b.n	8000cce <printTemplate+0x3ce>
				lcd_print(1, 7, wifiPass);
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <printTemplate+0x3e0>)
 8000cc6:	2107      	movs	r1, #7
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff fd75 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <printTemplate+0x3ec>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f7ff fd70 	bl	80007b8 <lcd_print>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000c24 	.word	0x20000c24
 8000ce4:	0800dc8c 	.word	0x0800dc8c
 8000ce8:	0800dcb4 	.word	0x0800dcb4
 8000cec:	0800dca0 	.word	0x0800dca0

08000cf0 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <getCharFromCursorPosition+0x1c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000960 	.word	0x20000960

08000d10 <iotModeStartup>:

	HAL_I2C_Mem_Write(hi2c1, 0xA0, 58, 1, &eepromData[58], 1, 3000);
	HAL_Delay(500);
}

void iotModeStartup(I2C_HandleTypeDef *hi2c1, UART_HandleTypeDef *huart1) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	eepromKontrol4IoT();
 8000d1a:	f005 fb35 	bl	8006388 <eepromKontrol4IoT>
	HAL_Delay(100);
 8000d1e:	2064      	movs	r0, #100	; 0x64
 8000d20:	f008 fba0 	bl	8009464 <HAL_Delay>

	if(strlen(machineID) == 0) {
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <iotModeStartup+0x94>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d103      	bne.n	8000d34 <iotModeStartup+0x24>
		takeMachineID(1, hi2c1);
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f000 f844 	bl	8000dbc <takeMachineID>
	}

	lcd_clear();
 8000d34:	f7ff fd6c 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8000d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d3c:	f008 fb92 	bl	8009464 <HAL_Delay>

	if(iotMode == 1) {
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <iotModeStartup+0x98>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d129      	bne.n	8000d9c <iotModeStartup+0x8c>
		if(strlen(wifiSSID) == 0) {
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <iotModeStartup+0x9c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d103      	bne.n	8000d58 <iotModeStartup+0x48>
			takeWifiSSID(1, hi2c1);
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	2001      	movs	r0, #1
 8000d54:	f000 f94a 	bl	8000fec <takeWifiSSID>
		}

		lcd_clear();
 8000d58:	f7ff fd5a 	bl	8000810 <lcd_clear>
		HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f008 fb80 	bl	8009464 <HAL_Delay>

		if(strlen(wifiPass) == 0) {
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <iotModeStartup+0xa0>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d103      	bne.n	8000d74 <iotModeStartup+0x64>
			takeWifiPass(1, hi2c1);
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f000 fab4 	bl	80012dc <takeWifiPass>
		}

		lcd_print(1, 1, "Wifi Ayarlaniyor");
 8000d74:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <iotModeStartup+0xa4>)
 8000d76:	2101      	movs	r1, #1
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f7ff fd1d 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "Lutfen Bekleyin ");
 8000d7e:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <iotModeStartup+0xa8>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	2002      	movs	r0, #2
 8000d84:	f7ff fd18 	bl	80007b8 <lcd_print>
		ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <iotModeStartup+0xa0>)
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <iotModeStartup+0x9c>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fa50 	bl	8000234 <ESP8266_Init>
		HAL_Delay(500);
 8000d94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d98:	f008 fb64 	bl	8009464 <HAL_Delay>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000bf4 	.word	0x20000bf4
 8000da8:	20000c68 	.word	0x20000c68
 8000dac:	20000c00 	.word	0x20000c00
 8000db0:	20000c24 	.word	0x20000c24
 8000db4:	0800dcbc 	.word	0x0800dcbc
 8000db8:	0800dcd0 	.word	0x0800dcd0

08000dbc <takeMachineID>:

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	lcd_cursor(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f7ff fd54 	bl	8000874 <lcd_cursor>

	if(state == 0) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d104      	bne.n	8000ddc <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4882      	ldr	r0, [pc, #520]	; (8000fe0 <takeMachineID+0x224>)
 8000dd8:	f00c fa58 	bl	800d28c <memset>
	}

    int cursorPosition = 3;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000de4:	2305      	movs	r3, #5
 8000de6:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8000de8:	2100      	movs	r1, #0
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff fd88 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000df0:	2108      	movs	r1, #8
 8000df2:	487c      	ldr	r0, [pc, #496]	; (8000fe4 <takeMachineID+0x228>)
 8000df4:	f009 f906 	bl	800a004 <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d107      	bne.n	8000e0e <takeMachineID+0x52>
        	lcd_cursor(0);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fd38 	bl	8000874 <lcd_cursor>

        	writeCharToEEPROM4ID(hi2c1, machineID);
 8000e04:	4976      	ldr	r1, [pc, #472]	; (8000fe0 <takeMachineID+0x224>)
 8000e06:	6838      	ldr	r0, [r7, #0]
 8000e08:	f000 fbfe 	bl	8001608 <writeCharToEEPROM4ID>

            break;
 8000e0c:	e0e4      	b.n	8000fd8 <takeMachineID+0x21c>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4874      	ldr	r0, [pc, #464]	; (8000fe4 <takeMachineID+0x228>)
 8000e12:	f009 f8f7 	bl	800a004 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d112      	bne.n	8000e42 <takeMachineID+0x86>
        	if(cursorPosition == 7) {
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b07      	cmp	r3, #7
 8000e20:	d102      	bne.n	8000e28 <takeMachineID+0x6c>
        		cursorPosition = 10;
 8000e22:	230a      	movs	r3, #10
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e008      	b.n	8000e3a <takeMachineID+0x7e>
        	} else if (cursorPosition == 14) {
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2b0e      	cmp	r3, #14
 8000e2c:	d102      	bne.n	8000e34 <takeMachineID+0x78>
                cursorPosition = 3;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	e002      	b.n	8000e3a <takeMachineID+0x7e>
            } else {
            	cursorPosition++;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000e3a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000e3e:	f008 fb11 	bl	8009464 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000e42:	2108      	movs	r1, #8
 8000e44:	4868      	ldr	r0, [pc, #416]	; (8000fe8 <takeMachineID+0x22c>)
 8000e46:	f009 f8dd 	bl	800a004 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d112      	bne.n	8000e76 <takeMachineID+0xba>
            if (cursorPosition == 3) {
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d102      	bne.n	8000e5c <takeMachineID+0xa0>
                cursorPosition = 14;
 8000e56:	230e      	movs	r3, #14
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	e008      	b.n	8000e6e <takeMachineID+0xb2>
            } else if(cursorPosition == 10) {
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2b0a      	cmp	r3, #10
 8000e60:	d102      	bne.n	8000e68 <takeMachineID+0xac>
            	cursorPosition = 7;
 8000e62:	2307      	movs	r3, #7
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	e002      	b.n	8000e6e <takeMachineID+0xb2>
            } else {
            	cursorPosition--;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000e6e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000e72:	f008 faf7 	bl	8009464 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000e76:	2102      	movs	r1, #2
 8000e78:	485a      	ldr	r0, [pc, #360]	; (8000fe4 <takeMachineID+0x228>)
 8000e7a:	f009 f8c3 	bl	800a004 <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d16c      	bne.n	8000f5e <takeMachineID+0x1a2>
        	if(cursorPosition == 3) {
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d105      	bne.n	8000e96 <takeMachineID+0xda>
        		machineID[machineIDLoc] = '0';
 8000e8a:	4a55      	ldr	r2, [pc, #340]	; (8000fe0 <takeMachineID+0x224>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4413      	add	r3, r2
 8000e90:	2230      	movs	r2, #48	; 0x30
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e04f      	b.n	8000f36 <takeMachineID+0x17a>
        	} else if(cursorPosition == 4) {
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d105      	bne.n	8000ea8 <takeMachineID+0xec>
        		machineID[machineIDLoc] = '1';
 8000e9c:	4a50      	ldr	r2, [pc, #320]	; (8000fe0 <takeMachineID+0x224>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	2231      	movs	r2, #49	; 0x31
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e046      	b.n	8000f36 <takeMachineID+0x17a>
        	} else if(cursorPosition == 5) {
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2b05      	cmp	r3, #5
 8000eac:	d105      	bne.n	8000eba <takeMachineID+0xfe>
        		machineID[machineIDLoc] = '2';
 8000eae:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <takeMachineID+0x224>)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	2232      	movs	r2, #50	; 0x32
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e03d      	b.n	8000f36 <takeMachineID+0x17a>
        	} else if(cursorPosition == 6) {
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	2b06      	cmp	r3, #6
 8000ebe:	d105      	bne.n	8000ecc <takeMachineID+0x110>
        		machineID[machineIDLoc] = '3';
 8000ec0:	4a47      	ldr	r2, [pc, #284]	; (8000fe0 <takeMachineID+0x224>)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2233      	movs	r2, #51	; 0x33
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e034      	b.n	8000f36 <takeMachineID+0x17a>
        	} else if(cursorPosition == 7) {
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d105      	bne.n	8000ede <takeMachineID+0x122>
        		machineID[machineIDLoc] = '4';
 8000ed2:	4a43      	ldr	r2, [pc, #268]	; (8000fe0 <takeMachineID+0x224>)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	2234      	movs	r2, #52	; 0x34
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e02b      	b.n	8000f36 <takeMachineID+0x17a>
        	} else if(cursorPosition == 10) {
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2b0a      	cmp	r3, #10
 8000ee2:	d105      	bne.n	8000ef0 <takeMachineID+0x134>
        		machineID[machineIDLoc] = '5';
 8000ee4:	4a3e      	ldr	r2, [pc, #248]	; (8000fe0 <takeMachineID+0x224>)
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4413      	add	r3, r2
 8000eea:	2235      	movs	r2, #53	; 0x35
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e022      	b.n	8000f36 <takeMachineID+0x17a>
        	} else if(cursorPosition == 11) {
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2b0b      	cmp	r3, #11
 8000ef4:	d105      	bne.n	8000f02 <takeMachineID+0x146>
        		machineID[machineIDLoc] = '6';
 8000ef6:	4a3a      	ldr	r2, [pc, #232]	; (8000fe0 <takeMachineID+0x224>)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4413      	add	r3, r2
 8000efc:	2236      	movs	r2, #54	; 0x36
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e019      	b.n	8000f36 <takeMachineID+0x17a>
        	} else if(cursorPosition == 12) {
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	2b0c      	cmp	r3, #12
 8000f06:	d105      	bne.n	8000f14 <takeMachineID+0x158>
        		machineID[machineIDLoc] = '7';
 8000f08:	4a35      	ldr	r2, [pc, #212]	; (8000fe0 <takeMachineID+0x224>)
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	2237      	movs	r2, #55	; 0x37
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	e010      	b.n	8000f36 <takeMachineID+0x17a>
        	} else if(cursorPosition == 13) {
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2b0d      	cmp	r3, #13
 8000f18:	d105      	bne.n	8000f26 <takeMachineID+0x16a>
        		machineID[machineIDLoc] = '8';
 8000f1a:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <takeMachineID+0x224>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4413      	add	r3, r2
 8000f20:	2238      	movs	r2, #56	; 0x38
 8000f22:	701a      	strb	r2, [r3, #0]
 8000f24:	e007      	b.n	8000f36 <takeMachineID+0x17a>
        	} else if(cursorPosition == 14) {
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	2b0e      	cmp	r3, #14
 8000f2a:	d104      	bne.n	8000f36 <takeMachineID+0x17a>
        		machineID[machineIDLoc] = '9';
 8000f2c:	4a2c      	ldr	r2, [pc, #176]	; (8000fe0 <takeMachineID+0x224>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4413      	add	r3, r2
 8000f32:	2239      	movs	r2, #57	; 0x39
 8000f34:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	b2d9      	uxtb	r1, r3
 8000f3a:	4a29      	ldr	r2, [pc, #164]	; (8000fe0 <takeMachineID+0x224>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fc4c 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	3301      	adds	r3, #1
 8000f54:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 8000f56:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000f5a:	f008 fa83 	bl	8009464 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4820      	ldr	r0, [pc, #128]	; (8000fe4 <takeMachineID+0x228>)
 8000f62:	f009 f84f 	bl	800a004 <HAL_GPIO_ReadPin>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d12e      	bne.n	8000fca <takeMachineID+0x20e>
            if(strlen(machineID) >= 1) {
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <takeMachineID+0x224>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d027      	beq.n	8000fc4 <takeMachineID+0x208>

                machineID[machineIDLoc] = '\0';
 8000f74:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <takeMachineID+0x224>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4413      	add	r3, r2
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3304      	adds	r3, #4
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f7ff fc4b 	bl	8000824 <lcd_delete_char>
                HAL_Delay(50);
 8000f8e:	2032      	movs	r0, #50	; 0x32
 8000f90:	f008 fa68 	bl	8009464 <HAL_Delay>

                if(writeLoc > 5) {
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	dd03      	ble.n	8000fa2 <takeMachineID+0x1e6>
                	writeLoc--;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e004      	b.n	8000fac <takeMachineID+0x1f0>
                } else if(writeLoc < 5) {
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	dc01      	bgt.n	8000fac <takeMachineID+0x1f0>
                	writeLoc = 5;
 8000fa8:	2305      	movs	r3, #5
 8000faa:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	dd03      	ble.n	8000fba <takeMachineID+0x1fe>
                	machineIDLoc--;
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	e004      	b.n	8000fc4 <takeMachineID+0x208>
                } else if(machineIDLoc < 0) {
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da01      	bge.n	8000fc4 <takeMachineID+0x208>
                	machineIDLoc = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 8000fc4:	20fa      	movs	r0, #250	; 0xfa
 8000fc6:	f008 fa4d 	bl	8009464 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f7ff fbd2 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000fd6:	e70b      	b.n	8000df0 <takeMachineID+0x34>
    }
}
 8000fd8:	bf00      	nop
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000bf4 	.word	0x20000bf4
 8000fe4:	40010800 	.word	0x40010800
 8000fe8:	40011000 	.word	0x40011000

08000fec <takeWifiSSID>:

void takeWifiSSID(int state, I2C_HandleTypeDef *hi2c1) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff fc3c 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d104      	bne.n	800100c <takeWifiSSID+0x20>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8001002:	2221      	movs	r2, #33	; 0x21
 8001004:	2100      	movs	r1, #0
 8001006:	489f      	ldr	r0, [pc, #636]	; (8001284 <takeWifiSSID+0x298>)
 8001008:	f00c f940 	bl	800d28c <memset>
    }

    int realCharPos = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8001010:	4b9d      	ldr	r3, [pc, #628]	; (8001288 <takeWifiSSID+0x29c>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
    page = 1;
 8001016:	4b9d      	ldr	r3, [pc, #628]	; (800128c <takeWifiSSID+0x2a0>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8001020:	2307      	movs	r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8001024:	2101      	movs	r1, #1
 8001026:	2002      	movs	r0, #2
 8001028:	f7ff fc6a 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800102c:	2108      	movs	r1, #8
 800102e:	4898      	ldr	r0, [pc, #608]	; (8001290 <takeWifiSSID+0x2a4>)
 8001030:	f008 ffe8 	bl	800a004 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d108      	bne.n	800104c <takeWifiSSID+0x60>
            lcd_cursor(0);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc1a 	bl	8000874 <lcd_cursor>

            writeCharToEEPROM4Wifi(hi2c1, wifiSSID, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	4990      	ldr	r1, [pc, #576]	; (8001284 <takeWifiSSID+0x298>)
 8001044:	6838      	ldr	r0, [r7, #0]
 8001046:	f000 fb2b 	bl	80016a0 <writeCharToEEPROM4Wifi>

            break;
 800104a:	e141      	b.n	80012d0 <takeWifiSSID+0x2e4>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800104c:	2101      	movs	r1, #1
 800104e:	4890      	ldr	r0, [pc, #576]	; (8001290 <takeWifiSSID+0x2a4>)
 8001050:	f008 ffd8 	bl	800a004 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d166      	bne.n	8001128 <takeWifiSSID+0x13c>
        	realCharPos++;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	2b50      	cmp	r3, #80	; 0x50
 8001064:	dd01      	ble.n	800106a <takeWifiSSID+0x7e>
        		realCharPos = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800106a:	4b87      	ldr	r3, [pc, #540]	; (8001288 <takeWifiSSID+0x29c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b10      	cmp	r3, #16
 8001070:	d152      	bne.n	8001118 <takeWifiSSID+0x12c>
            	if(page == 1) {
 8001072:	4b86      	ldr	r3, [pc, #536]	; (800128c <takeWifiSSID+0x2a0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d10c      	bne.n	8001094 <takeWifiSSID+0xa8>
            		cursorPosition = 1;
 800107a:	4b83      	ldr	r3, [pc, #524]	; (8001288 <takeWifiSSID+0x29c>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
            		page++;
 8001080:	4b82      	ldr	r3, [pc, #520]	; (800128c <takeWifiSSID+0x2a0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a81      	ldr	r2, [pc, #516]	; (800128c <takeWifiSSID+0x2a0>)
 8001088:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 800108a:	2102      	movs	r1, #2
 800108c:	2002      	movs	r0, #2
 800108e:	f7ff fc37 	bl	8000900 <printTemplate>
 8001092:	e046      	b.n	8001122 <takeWifiSSID+0x136>
            	} else if(page == 2) {
 8001094:	4b7d      	ldr	r3, [pc, #500]	; (800128c <takeWifiSSID+0x2a0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d10c      	bne.n	80010b6 <takeWifiSSID+0xca>
            		cursorPosition = 1;
 800109c:	4b7a      	ldr	r3, [pc, #488]	; (8001288 <takeWifiSSID+0x29c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
            		page++;
 80010a2:	4b7a      	ldr	r3, [pc, #488]	; (800128c <takeWifiSSID+0x2a0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a78      	ldr	r2, [pc, #480]	; (800128c <takeWifiSSID+0x2a0>)
 80010aa:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 80010ac:	2103      	movs	r1, #3
 80010ae:	2002      	movs	r0, #2
 80010b0:	f7ff fc26 	bl	8000900 <printTemplate>
 80010b4:	e035      	b.n	8001122 <takeWifiSSID+0x136>
            	} else if(page == 3) {
 80010b6:	4b75      	ldr	r3, [pc, #468]	; (800128c <takeWifiSSID+0x2a0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d10c      	bne.n	80010d8 <takeWifiSSID+0xec>
            		cursorPosition = 1;
 80010be:	4b72      	ldr	r3, [pc, #456]	; (8001288 <takeWifiSSID+0x29c>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
            		page++;
 80010c4:	4b71      	ldr	r3, [pc, #452]	; (800128c <takeWifiSSID+0x2a0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a70      	ldr	r2, [pc, #448]	; (800128c <takeWifiSSID+0x2a0>)
 80010cc:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 80010ce:	2104      	movs	r1, #4
 80010d0:	2002      	movs	r0, #2
 80010d2:	f7ff fc15 	bl	8000900 <printTemplate>
 80010d6:	e024      	b.n	8001122 <takeWifiSSID+0x136>
            	} else if(page == 4) {
 80010d8:	4b6c      	ldr	r3, [pc, #432]	; (800128c <takeWifiSSID+0x2a0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d10c      	bne.n	80010fa <takeWifiSSID+0x10e>
            		cursorPosition = 1;
 80010e0:	4b69      	ldr	r3, [pc, #420]	; (8001288 <takeWifiSSID+0x29c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
            		page++;
 80010e6:	4b69      	ldr	r3, [pc, #420]	; (800128c <takeWifiSSID+0x2a0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a67      	ldr	r2, [pc, #412]	; (800128c <takeWifiSSID+0x2a0>)
 80010ee:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 80010f0:	2105      	movs	r1, #5
 80010f2:	2002      	movs	r0, #2
 80010f4:	f7ff fc04 	bl	8000900 <printTemplate>
 80010f8:	e013      	b.n	8001122 <takeWifiSSID+0x136>
            	} else if(page == 5) {
 80010fa:	4b64      	ldr	r3, [pc, #400]	; (800128c <takeWifiSSID+0x2a0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b05      	cmp	r3, #5
 8001100:	d10f      	bne.n	8001122 <takeWifiSSID+0x136>
            		cursorPosition = 1;
 8001102:	4b61      	ldr	r3, [pc, #388]	; (8001288 <takeWifiSSID+0x29c>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001108:	4b60      	ldr	r3, [pc, #384]	; (800128c <takeWifiSSID+0x2a0>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 800110e:	2101      	movs	r1, #1
 8001110:	2002      	movs	r0, #2
 8001112:	f7ff fbf5 	bl	8000900 <printTemplate>
 8001116:	e004      	b.n	8001122 <takeWifiSSID+0x136>
            	}
            } else {
            	cursorPosition++;
 8001118:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <takeWifiSSID+0x29c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	4a5a      	ldr	r2, [pc, #360]	; (8001288 <takeWifiSSID+0x29c>)
 8001120:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001122:	20fa      	movs	r0, #250	; 0xfa
 8001124:	f008 f99e 	bl	8009464 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001128:	2108      	movs	r1, #8
 800112a:	485a      	ldr	r0, [pc, #360]	; (8001294 <takeWifiSSID+0x2a8>)
 800112c:	f008 ff6a 	bl	800a004 <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b01      	cmp	r3, #1
 8001134:	d15e      	bne.n	80011f4 <takeWifiSSID+0x208>
        	realCharPos--;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3b01      	subs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	dc01      	bgt.n	8001146 <takeWifiSSID+0x15a>
        		realCharPos = 80;
 8001142:	2350      	movs	r3, #80	; 0x50
 8001144:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8001146:	4b50      	ldr	r3, [pc, #320]	; (8001288 <takeWifiSSID+0x29c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d14a      	bne.n	80011e4 <takeWifiSSID+0x1f8>
            	if(page == 1) {
 800114e:	4b4f      	ldr	r3, [pc, #316]	; (800128c <takeWifiSSID+0x2a0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d10a      	bne.n	800116c <takeWifiSSID+0x180>
            		cursorPosition = 16;
 8001156:	4b4c      	ldr	r3, [pc, #304]	; (8001288 <takeWifiSSID+0x29c>)
 8001158:	2210      	movs	r2, #16
 800115a:	601a      	str	r2, [r3, #0]
            		page = 5;
 800115c:	4b4b      	ldr	r3, [pc, #300]	; (800128c <takeWifiSSID+0x2a0>)
 800115e:	2205      	movs	r2, #5
 8001160:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8001162:	2105      	movs	r1, #5
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff fbcb 	bl	8000900 <printTemplate>
 800116a:	e040      	b.n	80011ee <takeWifiSSID+0x202>
            	} else if(page == 2) {
 800116c:	4b47      	ldr	r3, [pc, #284]	; (800128c <takeWifiSSID+0x2a0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d10a      	bne.n	800118a <takeWifiSSID+0x19e>
            		cursorPosition = 16;
 8001174:	4b44      	ldr	r3, [pc, #272]	; (8001288 <takeWifiSSID+0x29c>)
 8001176:	2210      	movs	r2, #16
 8001178:	601a      	str	r2, [r3, #0]
            		page = 1;
 800117a:	4b44      	ldr	r3, [pc, #272]	; (800128c <takeWifiSSID+0x2a0>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8001180:	2101      	movs	r1, #1
 8001182:	2002      	movs	r0, #2
 8001184:	f7ff fbbc 	bl	8000900 <printTemplate>
 8001188:	e031      	b.n	80011ee <takeWifiSSID+0x202>
            	} else if(page == 3) {
 800118a:	4b40      	ldr	r3, [pc, #256]	; (800128c <takeWifiSSID+0x2a0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d10a      	bne.n	80011a8 <takeWifiSSID+0x1bc>
            		cursorPosition = 16;
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <takeWifiSSID+0x29c>)
 8001194:	2210      	movs	r2, #16
 8001196:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001198:	4b3c      	ldr	r3, [pc, #240]	; (800128c <takeWifiSSID+0x2a0>)
 800119a:	2202      	movs	r2, #2
 800119c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 800119e:	2102      	movs	r1, #2
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff fbad 	bl	8000900 <printTemplate>
 80011a6:	e022      	b.n	80011ee <takeWifiSSID+0x202>
            	} else if(page == 4) {
 80011a8:	4b38      	ldr	r3, [pc, #224]	; (800128c <takeWifiSSID+0x2a0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d10a      	bne.n	80011c6 <takeWifiSSID+0x1da>
            		cursorPosition = 16;
 80011b0:	4b35      	ldr	r3, [pc, #212]	; (8001288 <takeWifiSSID+0x29c>)
 80011b2:	2210      	movs	r2, #16
 80011b4:	601a      	str	r2, [r3, #0]
            		page = 3;
 80011b6:	4b35      	ldr	r3, [pc, #212]	; (800128c <takeWifiSSID+0x2a0>)
 80011b8:	2203      	movs	r2, #3
 80011ba:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 80011bc:	2103      	movs	r1, #3
 80011be:	2002      	movs	r0, #2
 80011c0:	f7ff fb9e 	bl	8000900 <printTemplate>
 80011c4:	e013      	b.n	80011ee <takeWifiSSID+0x202>
            	} else if(page == 5) {
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <takeWifiSSID+0x2a0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d10f      	bne.n	80011ee <takeWifiSSID+0x202>
            		cursorPosition = 16;
 80011ce:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <takeWifiSSID+0x29c>)
 80011d0:	2210      	movs	r2, #16
 80011d2:	601a      	str	r2, [r3, #0]
            		page = 4;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <takeWifiSSID+0x2a0>)
 80011d6:	2204      	movs	r2, #4
 80011d8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 80011da:	2104      	movs	r1, #4
 80011dc:	2002      	movs	r0, #2
 80011de:	f7ff fb8f 	bl	8000900 <printTemplate>
 80011e2:	e004      	b.n	80011ee <takeWifiSSID+0x202>
            	}
            } else {
            	cursorPosition--;
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <takeWifiSSID+0x29c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	4a27      	ldr	r2, [pc, #156]	; (8001288 <takeWifiSSID+0x29c>)
 80011ec:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80011ee:	20fa      	movs	r0, #250	; 0xfa
 80011f0:	f008 f938 	bl	8009464 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80011f4:	2102      	movs	r1, #2
 80011f6:	4826      	ldr	r0, [pc, #152]	; (8001290 <takeWifiSSID+0x2a4>)
 80011f8:	f008 ff04 	bl	800a004 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d11e      	bne.n	8001240 <takeWifiSSID+0x254>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3b01      	subs	r3, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fd72 	bl	8000cf0 <getCharFromCursorPosition>
 800120c:	4603      	mov	r3, r0
 800120e:	4619      	mov	r1, r3
 8001210:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <takeWifiSSID+0x298>)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4413      	add	r3, r2
 8001216:	460a      	mov	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	b2d9      	uxtb	r1, r3
 800121e:	4a19      	ldr	r2, [pc, #100]	; (8001284 <takeWifiSSID+0x298>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff fada 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	3301      	adds	r3, #1
 8001238:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 800123a:	20fa      	movs	r0, #250	; 0xfa
 800123c:	f008 f912 	bl	8009464 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001240:	2104      	movs	r1, #4
 8001242:	4813      	ldr	r0, [pc, #76]	; (8001290 <takeWifiSSID+0x2a4>)
 8001244:	f008 fede 	bl	800a004 <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b01      	cmp	r3, #1
 800124c:	d138      	bne.n	80012c0 <takeWifiSSID+0x2d4>
        	if(strlen(wifiSSID) >= 1) {
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <takeWifiSSID+0x298>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d031      	beq.n	80012ba <takeWifiSSID+0x2ce>
        		wifiSSID[wifiNameLoc] = '\0';
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <takeWifiSSID+0x298>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4413      	add	r3, r2
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3306      	adds	r3, #6
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff fada 	bl	8000824 <lcd_delete_char>
        		HAL_Delay(50);
 8001270:	2032      	movs	r0, #50	; 0x32
 8001272:	f008 f8f7 	bl	8009464 <HAL_Delay>
        		if(writeLoc > 7) {
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b07      	cmp	r3, #7
 800127a:	dd0d      	ble.n	8001298 <takeWifiSSID+0x2ac>
        			writeLoc--;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3b01      	subs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e00e      	b.n	80012a2 <takeWifiSSID+0x2b6>
 8001284:	20000c00 	.word	0x20000c00
 8001288:	20000944 	.word	0x20000944
 800128c:	20000948 	.word	0x20000948
 8001290:	40010800 	.word	0x40010800
 8001294:	40011000 	.word	0x40011000
        		} else if(writeLoc < 7) {
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b06      	cmp	r3, #6
 800129c:	dc01      	bgt.n	80012a2 <takeWifiSSID+0x2b6>
        			writeLoc = 7;
 800129e:	2307      	movs	r3, #7
 80012a0:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	dd03      	ble.n	80012b0 <takeWifiSSID+0x2c4>
        			wifiNameLoc--;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	e004      	b.n	80012ba <takeWifiSSID+0x2ce>
        		} else if(wifiNameLoc < 0) {
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da01      	bge.n	80012ba <takeWifiSSID+0x2ce>
        			wifiNameLoc = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 80012ba:	20fa      	movs	r0, #250	; 0xfa
 80012bc:	f008 f8d2 	bl	8009464 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <takeWifiSSID+0x2ec>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4619      	mov	r1, r3
 80012c8:	2002      	movs	r0, #2
 80012ca:	f7ff fa56 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012ce:	e6ad      	b.n	800102c <takeWifiSSID+0x40>
    }
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000944 	.word	0x20000944

080012dc <takeWifiPass>:

void takeWifiPass(int state, I2C_HandleTypeDef *hi2c1) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff fac4 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d104      	bne.n	80012fc <takeWifiPass+0x20>
    	memset(wifiPass, 0, sizeof(wifiPass));
 80012f2:	2221      	movs	r2, #33	; 0x21
 80012f4:	2100      	movs	r1, #0
 80012f6:	489f      	ldr	r0, [pc, #636]	; (8001574 <takeWifiPass+0x298>)
 80012f8:	f00b ffc8 	bl	800d28c <memset>
    }

    int realCharPos = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8001300:	4b9d      	ldr	r3, [pc, #628]	; (8001578 <takeWifiPass+0x29c>)
 8001302:	2201      	movs	r2, #1
 8001304:	601a      	str	r2, [r3, #0]
    page = 1;
 8001306:	4b9d      	ldr	r3, [pc, #628]	; (800157c <takeWifiPass+0x2a0>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8001310:	2307      	movs	r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 8001314:	2101      	movs	r1, #1
 8001316:	2003      	movs	r0, #3
 8001318:	f7ff faf2 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800131c:	2108      	movs	r1, #8
 800131e:	4898      	ldr	r0, [pc, #608]	; (8001580 <takeWifiPass+0x2a4>)
 8001320:	f008 fe70 	bl	800a004 <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d108      	bne.n	800133c <takeWifiPass+0x60>
            lcd_cursor(0);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff faa2 	bl	8000874 <lcd_cursor>

            writeCharToEEPROM4Wifi(hi2c1, wifiPass, 2);
 8001330:	2202      	movs	r2, #2
 8001332:	4990      	ldr	r1, [pc, #576]	; (8001574 <takeWifiPass+0x298>)
 8001334:	6838      	ldr	r0, [r7, #0]
 8001336:	f000 f9b3 	bl	80016a0 <writeCharToEEPROM4Wifi>

            break;
 800133a:	e141      	b.n	80015c0 <takeWifiPass+0x2e4>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800133c:	2101      	movs	r1, #1
 800133e:	4890      	ldr	r0, [pc, #576]	; (8001580 <takeWifiPass+0x2a4>)
 8001340:	f008 fe60 	bl	800a004 <HAL_GPIO_ReadPin>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d166      	bne.n	8001418 <takeWifiPass+0x13c>
        	realCharPos++;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b50      	cmp	r3, #80	; 0x50
 8001354:	dd01      	ble.n	800135a <takeWifiPass+0x7e>
        	    realCharPos = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800135a:	4b87      	ldr	r3, [pc, #540]	; (8001578 <takeWifiPass+0x29c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b10      	cmp	r3, #16
 8001360:	d152      	bne.n	8001408 <takeWifiPass+0x12c>
            	if(page == 1) {
 8001362:	4b86      	ldr	r3, [pc, #536]	; (800157c <takeWifiPass+0x2a0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d10c      	bne.n	8001384 <takeWifiPass+0xa8>
            		cursorPosition = 1;
 800136a:	4b83      	ldr	r3, [pc, #524]	; (8001578 <takeWifiPass+0x29c>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
            		page++;
 8001370:	4b82      	ldr	r3, [pc, #520]	; (800157c <takeWifiPass+0x2a0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a81      	ldr	r2, [pc, #516]	; (800157c <takeWifiPass+0x2a0>)
 8001378:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 800137a:	2102      	movs	r1, #2
 800137c:	2003      	movs	r0, #3
 800137e:	f7ff fabf 	bl	8000900 <printTemplate>
 8001382:	e046      	b.n	8001412 <takeWifiPass+0x136>
            	} else if(page == 2) {
 8001384:	4b7d      	ldr	r3, [pc, #500]	; (800157c <takeWifiPass+0x2a0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d10c      	bne.n	80013a6 <takeWifiPass+0xca>
            		cursorPosition = 1;
 800138c:	4b7a      	ldr	r3, [pc, #488]	; (8001578 <takeWifiPass+0x29c>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]
            		page++;
 8001392:	4b7a      	ldr	r3, [pc, #488]	; (800157c <takeWifiPass+0x2a0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a78      	ldr	r2, [pc, #480]	; (800157c <takeWifiPass+0x2a0>)
 800139a:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 800139c:	2103      	movs	r1, #3
 800139e:	2003      	movs	r0, #3
 80013a0:	f7ff faae 	bl	8000900 <printTemplate>
 80013a4:	e035      	b.n	8001412 <takeWifiPass+0x136>
            	} else if(page == 3) {
 80013a6:	4b75      	ldr	r3, [pc, #468]	; (800157c <takeWifiPass+0x2a0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d10c      	bne.n	80013c8 <takeWifiPass+0xec>
            		cursorPosition = 1;
 80013ae:	4b72      	ldr	r3, [pc, #456]	; (8001578 <takeWifiPass+0x29c>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
            		page++;
 80013b4:	4b71      	ldr	r3, [pc, #452]	; (800157c <takeWifiPass+0x2a0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a70      	ldr	r2, [pc, #448]	; (800157c <takeWifiPass+0x2a0>)
 80013bc:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80013be:	2104      	movs	r1, #4
 80013c0:	2003      	movs	r0, #3
 80013c2:	f7ff fa9d 	bl	8000900 <printTemplate>
 80013c6:	e024      	b.n	8001412 <takeWifiPass+0x136>
            	} else if(page == 4) {
 80013c8:	4b6c      	ldr	r3, [pc, #432]	; (800157c <takeWifiPass+0x2a0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d10c      	bne.n	80013ea <takeWifiPass+0x10e>
            		cursorPosition = 1;
 80013d0:	4b69      	ldr	r3, [pc, #420]	; (8001578 <takeWifiPass+0x29c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
            		page++;
 80013d6:	4b69      	ldr	r3, [pc, #420]	; (800157c <takeWifiPass+0x2a0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a67      	ldr	r2, [pc, #412]	; (800157c <takeWifiPass+0x2a0>)
 80013de:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80013e0:	2105      	movs	r1, #5
 80013e2:	2003      	movs	r0, #3
 80013e4:	f7ff fa8c 	bl	8000900 <printTemplate>
 80013e8:	e013      	b.n	8001412 <takeWifiPass+0x136>
            	} else if(page == 5) {
 80013ea:	4b64      	ldr	r3, [pc, #400]	; (800157c <takeWifiPass+0x2a0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b05      	cmp	r3, #5
 80013f0:	d10f      	bne.n	8001412 <takeWifiPass+0x136>
            		cursorPosition = 1;
 80013f2:	4b61      	ldr	r3, [pc, #388]	; (8001578 <takeWifiPass+0x29c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
            		page = 1;
 80013f8:	4b60      	ldr	r3, [pc, #384]	; (800157c <takeWifiPass+0x2a0>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80013fe:	2101      	movs	r1, #1
 8001400:	2003      	movs	r0, #3
 8001402:	f7ff fa7d 	bl	8000900 <printTemplate>
 8001406:	e004      	b.n	8001412 <takeWifiPass+0x136>
            	}
            } else {
            	cursorPosition++;
 8001408:	4b5b      	ldr	r3, [pc, #364]	; (8001578 <takeWifiPass+0x29c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a5a      	ldr	r2, [pc, #360]	; (8001578 <takeWifiPass+0x29c>)
 8001410:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001412:	20fa      	movs	r0, #250	; 0xfa
 8001414:	f008 f826 	bl	8009464 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001418:	2108      	movs	r1, #8
 800141a:	485a      	ldr	r0, [pc, #360]	; (8001584 <takeWifiPass+0x2a8>)
 800141c:	f008 fdf2 	bl	800a004 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d15e      	bne.n	80014e4 <takeWifiPass+0x208>
        	realCharPos--;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3b01      	subs	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	dc01      	bgt.n	8001436 <takeWifiPass+0x15a>
        	    realCharPos = 80;
 8001432:	2350      	movs	r3, #80	; 0x50
 8001434:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8001436:	4b50      	ldr	r3, [pc, #320]	; (8001578 <takeWifiPass+0x29c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d14a      	bne.n	80014d4 <takeWifiPass+0x1f8>
            	if(page == 1) {
 800143e:	4b4f      	ldr	r3, [pc, #316]	; (800157c <takeWifiPass+0x2a0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d10a      	bne.n	800145c <takeWifiPass+0x180>
            		cursorPosition = 16;
 8001446:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <takeWifiPass+0x29c>)
 8001448:	2210      	movs	r2, #16
 800144a:	601a      	str	r2, [r3, #0]
            		page = 5;
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <takeWifiPass+0x2a0>)
 800144e:	2205      	movs	r2, #5
 8001450:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8001452:	2105      	movs	r1, #5
 8001454:	2003      	movs	r0, #3
 8001456:	f7ff fa53 	bl	8000900 <printTemplate>
 800145a:	e040      	b.n	80014de <takeWifiPass+0x202>
            	} else if(page == 2) {
 800145c:	4b47      	ldr	r3, [pc, #284]	; (800157c <takeWifiPass+0x2a0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d10a      	bne.n	800147a <takeWifiPass+0x19e>
            		cursorPosition = 16;
 8001464:	4b44      	ldr	r3, [pc, #272]	; (8001578 <takeWifiPass+0x29c>)
 8001466:	2210      	movs	r2, #16
 8001468:	601a      	str	r2, [r3, #0]
            		page = 1;
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <takeWifiPass+0x2a0>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001470:	2101      	movs	r1, #1
 8001472:	2003      	movs	r0, #3
 8001474:	f7ff fa44 	bl	8000900 <printTemplate>
 8001478:	e031      	b.n	80014de <takeWifiPass+0x202>
            	} else if(page == 3) {
 800147a:	4b40      	ldr	r3, [pc, #256]	; (800157c <takeWifiPass+0x2a0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d10a      	bne.n	8001498 <takeWifiPass+0x1bc>
            		cursorPosition = 16;
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <takeWifiPass+0x29c>)
 8001484:	2210      	movs	r2, #16
 8001486:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001488:	4b3c      	ldr	r3, [pc, #240]	; (800157c <takeWifiPass+0x2a0>)
 800148a:	2202      	movs	r2, #2
 800148c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 800148e:	2102      	movs	r1, #2
 8001490:	2003      	movs	r0, #3
 8001492:	f7ff fa35 	bl	8000900 <printTemplate>
 8001496:	e022      	b.n	80014de <takeWifiPass+0x202>
            	} else if(page == 4) {
 8001498:	4b38      	ldr	r3, [pc, #224]	; (800157c <takeWifiPass+0x2a0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d10a      	bne.n	80014b6 <takeWifiPass+0x1da>
            		cursorPosition = 16;
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <takeWifiPass+0x29c>)
 80014a2:	2210      	movs	r2, #16
 80014a4:	601a      	str	r2, [r3, #0]
            		page = 3;
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <takeWifiPass+0x2a0>)
 80014a8:	2203      	movs	r2, #3
 80014aa:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80014ac:	2103      	movs	r1, #3
 80014ae:	2003      	movs	r0, #3
 80014b0:	f7ff fa26 	bl	8000900 <printTemplate>
 80014b4:	e013      	b.n	80014de <takeWifiPass+0x202>
            	} else if(page == 5) {
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <takeWifiPass+0x2a0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	d10f      	bne.n	80014de <takeWifiPass+0x202>
            		cursorPosition = 16;
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <takeWifiPass+0x29c>)
 80014c0:	2210      	movs	r2, #16
 80014c2:	601a      	str	r2, [r3, #0]
            		page = 4;
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <takeWifiPass+0x2a0>)
 80014c6:	2204      	movs	r2, #4
 80014c8:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80014ca:	2104      	movs	r1, #4
 80014cc:	2003      	movs	r0, #3
 80014ce:	f7ff fa17 	bl	8000900 <printTemplate>
 80014d2:	e004      	b.n	80014de <takeWifiPass+0x202>
            	}
            } else {
            	cursorPosition--;
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <takeWifiPass+0x29c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a27      	ldr	r2, [pc, #156]	; (8001578 <takeWifiPass+0x29c>)
 80014dc:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80014de:	20fa      	movs	r0, #250	; 0xfa
 80014e0:	f007 ffc0 	bl	8009464 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80014e4:	2102      	movs	r1, #2
 80014e6:	4826      	ldr	r0, [pc, #152]	; (8001580 <takeWifiPass+0x2a4>)
 80014e8:	f008 fd8c 	bl	800a004 <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d11e      	bne.n	8001530 <takeWifiPass+0x254>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fbfa 	bl	8000cf0 <getCharFromCursorPosition>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4619      	mov	r1, r3
 8001500:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <takeWifiPass+0x298>)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4413      	add	r3, r2
 8001506:	460a      	mov	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	4a19      	ldr	r2, [pc, #100]	; (8001574 <takeWifiPass+0x298>)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff f962 	bl	80007e2 <lcd_print_char>

            writeLoc++;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3301      	adds	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	3301      	adds	r3, #1
 8001528:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 800152a:	20fa      	movs	r0, #250	; 0xfa
 800152c:	f007 ff9a 	bl	8009464 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001530:	2104      	movs	r1, #4
 8001532:	4813      	ldr	r0, [pc, #76]	; (8001580 <takeWifiPass+0x2a4>)
 8001534:	f008 fd66 	bl	800a004 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d138      	bne.n	80015b0 <takeWifiPass+0x2d4>
            if(strlen(wifiPass) >= 1) {
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <takeWifiPass+0x298>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d031      	beq.n	80015aa <takeWifiPass+0x2ce>
            	wifiPass[wifiPassLoc] = '\0';
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <takeWifiPass+0x298>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4413      	add	r3, r2
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	3306      	adds	r3, #6
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff f962 	bl	8000824 <lcd_delete_char>
            	HAL_Delay(50);
 8001560:	2032      	movs	r0, #50	; 0x32
 8001562:	f007 ff7f 	bl	8009464 <HAL_Delay>

            	if(writeLoc > 7) {
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b07      	cmp	r3, #7
 800156a:	dd0d      	ble.n	8001588 <takeWifiPass+0x2ac>
            		writeLoc--;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3b01      	subs	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	e00e      	b.n	8001592 <takeWifiPass+0x2b6>
 8001574:	20000c24 	.word	0x20000c24
 8001578:	20000944 	.word	0x20000944
 800157c:	20000948 	.word	0x20000948
 8001580:	40010800 	.word	0x40010800
 8001584:	40011000 	.word	0x40011000
            	} else if(writeLoc < 7) {
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b06      	cmp	r3, #6
 800158c:	dc01      	bgt.n	8001592 <takeWifiPass+0x2b6>
            		writeLoc = 7;
 800158e:	2307      	movs	r3, #7
 8001590:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	2b00      	cmp	r3, #0
 8001596:	dd03      	ble.n	80015a0 <takeWifiPass+0x2c4>
            		wifiPassLoc--;
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	3b01      	subs	r3, #1
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	e004      	b.n	80015aa <takeWifiPass+0x2ce>
            	} else if(wifiPassLoc < 0) {
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	da01      	bge.n	80015aa <takeWifiPass+0x2ce>
            		wifiPassLoc = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80015aa:	20fa      	movs	r0, #250	; 0xfa
 80015ac:	f007 ff5a 	bl	8009464 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <takeWifiPass+0x2ec>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	2002      	movs	r0, #2
 80015ba:	f7ff f8de 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80015be:	e6ad      	b.n	800131c <takeWifiPass+0x40>
    }
}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000944 	.word	0x20000944

080015cc <writeDataToEEPROM>:

void writeDataToEEPROM(I2C_HandleTypeDef *hi2c1, uint8_t startPos) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af04      	add	r7, sp, #16
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 145, &eepromData, 145, 3000);
 80015d8:	1d38      	adds	r0, r7, #4
 80015da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	2391      	movs	r3, #145	; 0x91
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <writeDataToEEPROM+0x38>)
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2391      	movs	r3, #145	; 0x91
 80015ea:	2200      	movs	r2, #0
 80015ec:	21a0      	movs	r1, #160	; 0xa0
 80015ee:	f008 ffc3 	bl	800a578 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80015f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f6:	f007 ff35 	bl	8009464 <HAL_Delay>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000b38 	.word	0x20000b38

08001608 <writeCharToEEPROM4ID>:

void writeCharToEEPROM4ID(I2C_HandleTypeDef *hi2c1, const char* sendArray) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	uint8_t karakterLength = strlen(sendArray);
 8001612:	6838      	ldr	r0, [r7, #0]
 8001614:	f7fe fe06 	bl	8000224 <strlen>
 8001618:	4603      	mov	r3, r0
 800161a:	72fb      	strb	r3, [r7, #11]
	uint8_t tempArrayLength = strlen(numbersArray);
 800161c:	481d      	ldr	r0, [pc, #116]	; (8001694 <writeCharToEEPROM4ID+0x8c>)
 800161e:	f7fe fe01 	bl	8000224 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	72bb      	strb	r3, [r7, #10]

	uint8_t loopVal = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]

	for(int i=0; i<karakterLength; i++) {
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	e022      	b.n	8001676 <writeCharToEEPROM4ID+0x6e>
		for(int z=0; z<tempArrayLength; z++) {
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	e018      	b.n	8001668 <writeCharToEEPROM4ID+0x60>
			if(sendArray[i] == numbersArray[z]) {
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	4915      	ldr	r1, [pc, #84]	; (8001694 <writeCharToEEPROM4ID+0x8c>)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	440b      	add	r3, r1
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d10b      	bne.n	8001662 <writeCharToEEPROM4ID+0x5a>
				eepromData[idStartPos + loopVal] = z;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <writeCharToEEPROM4ID+0x90>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	4413      	add	r3, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	b2d1      	uxtb	r1, r2
 8001658:	4a10      	ldr	r2, [pc, #64]	; (800169c <writeCharToEEPROM4ID+0x94>)
 800165a:	54d1      	strb	r1, [r2, r3]
				loopVal++;
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	3301      	adds	r3, #1
 8001660:	75fb      	strb	r3, [r7, #23]
		for(int z=0; z<tempArrayLength; z++) {
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	7abb      	ldrb	r3, [r7, #10]
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbe2      	blt.n	8001636 <writeCharToEEPROM4ID+0x2e>
	for(int i=0; i<karakterLength; i++) {
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	3301      	adds	r3, #1
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	7afb      	ldrb	r3, [r7, #11]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	429a      	cmp	r2, r3
 800167c:	dbd8      	blt.n	8001630 <writeCharToEEPROM4ID+0x28>
			}
		}
	}

	writeDataToEEPROM(hi2c1, idStartPos);
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <writeCharToEEPROM4ID+0x90>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffa1 	bl	80015cc <writeDataToEEPROM>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200009b4 	.word	0x200009b4
 8001698:	200009bf 	.word	0x200009bf
 800169c:	20000b38 	.word	0x20000b38

080016a0 <writeCharToEEPROM4Wifi>:

void writeCharToEEPROM4Wifi(I2C_HandleTypeDef *hi2c1, const char* sendArray, uint8_t stat) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	4613      	mov	r3, r2
 80016ac:	71fb      	strb	r3, [r7, #7]
	uint8_t karakterLength = strlen(sendArray);
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7fe fdb8 	bl	8000224 <strlen>
 80016b4:	4603      	mov	r3, r0
 80016b6:	74fb      	strb	r3, [r7, #19]
	uint8_t tempArrayLength = strlen(charactersArray);
 80016b8:	4828      	ldr	r0, [pc, #160]	; (800175c <writeCharToEEPROM4Wifi+0xbc>)
 80016ba:	f7fe fdb3 	bl	8000224 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	74bb      	strb	r3, [r7, #18]

	uint8_t loopVal = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	77fb      	strb	r3, [r7, #31]
	for(int i=0; i<karakterLength; i++) {
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	e02f      	b.n	800172c <writeCharToEEPROM4Wifi+0x8c>
		for(int z=0; z<tempArrayLength; z++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	e025      	b.n	800171e <writeCharToEEPROM4Wifi+0x7e>
			if(sendArray[i] == charactersArray[z]) {
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	4413      	add	r3, r2
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	4920      	ldr	r1, [pc, #128]	; (800175c <writeCharToEEPROM4Wifi+0xbc>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	440b      	add	r3, r1
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d118      	bne.n	8001718 <writeCharToEEPROM4Wifi+0x78>
				if(stat == 1) {
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d109      	bne.n	8001700 <writeCharToEEPROM4Wifi+0x60>
					eepromData[ssidStartPos + loopVal] = z;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <writeCharToEEPROM4Wifi+0xc0>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	7ffb      	ldrb	r3, [r7, #31]
 80016f4:	4413      	add	r3, r2
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	b2d1      	uxtb	r1, r2
 80016fa:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <writeCharToEEPROM4Wifi+0xc4>)
 80016fc:	54d1      	strb	r1, [r2, r3]
 80016fe:	e008      	b.n	8001712 <writeCharToEEPROM4Wifi+0x72>
				} else {
					eepromData[passStartPos + loopVal] = z;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <writeCharToEEPROM4Wifi+0xc8>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	7ffb      	ldrb	r3, [r7, #31]
 8001708:	4413      	add	r3, r2
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	b2d1      	uxtb	r1, r2
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <writeCharToEEPROM4Wifi+0xc4>)
 8001710:	54d1      	strb	r1, [r2, r3]
				}
				loopVal++;
 8001712:	7ffb      	ldrb	r3, [r7, #31]
 8001714:	3301      	adds	r3, #1
 8001716:	77fb      	strb	r3, [r7, #31]
		for(int z=0; z<tempArrayLength; z++) {
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	7cbb      	ldrb	r3, [r7, #18]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	429a      	cmp	r2, r3
 8001724:	dbd5      	blt.n	80016d2 <writeCharToEEPROM4Wifi+0x32>
	for(int i=0; i<karakterLength; i++) {
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	3301      	adds	r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	7cfb      	ldrb	r3, [r7, #19]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	429a      	cmp	r2, r3
 8001732:	dbcb      	blt.n	80016cc <writeCharToEEPROM4Wifi+0x2c>
			}
		}
	}

	if(stat == 1) {
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d106      	bne.n	8001748 <writeCharToEEPROM4Wifi+0xa8>
		writeDataToEEPROM(hi2c1, ssidStartPos);
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <writeCharToEEPROM4Wifi+0xc0>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff ff43 	bl	80015cc <writeDataToEEPROM>
	} else {
		writeDataToEEPROM(hi2c1, passStartPos);
	}
}
 8001746:	e005      	b.n	8001754 <writeCharToEEPROM4Wifi+0xb4>
		writeDataToEEPROM(hi2c1, passStartPos);
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <writeCharToEEPROM4Wifi+0xc8>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f7ff ff3c 	bl	80015cc <writeDataToEEPROM>
}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000960 	.word	0x20000960
 8001760:	200009c0 	.word	0x200009c0
 8001764:	20000b38 	.word	0x20000b38
 8001768:	200009c1 	.word	0x200009c1

0800176c <convertChars>:

void convertChars(const uint8_t* writeArray, uint8_t state) {
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
	int arrayLength = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
	while (writeArray[arrayLength] != '\0') {
 800177c:	e002      	b.n	8001784 <convertChars+0x18>
	    arrayLength++;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
	while (writeArray[arrayLength] != '\0') {
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f6      	bne.n	800177e <convertChars+0x12>
	}

	if(state == 0) {
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d11b      	bne.n	80017ce <convertChars+0x62>
		for(int i=0; i<arrayLength; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	e013      	b.n	80017c4 <convertChars+0x58>
			machineID[i] = numbersArray[writeArray[idStartPos + i]];
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <convertChars+0xe0>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4413      	add	r3, r2
 80017a6:	461a      	mov	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b27      	ldr	r3, [pc, #156]	; (8001850 <convertChars+0xe4>)
 80017b2:	5c99      	ldrb	r1, [r3, r2]
 80017b4:	4a27      	ldr	r2, [pc, #156]	; (8001854 <convertChars+0xe8>)
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4413      	add	r3, r2
 80017ba:	460a      	mov	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	3301      	adds	r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbe7      	blt.n	800179c <convertChars+0x30>
	} else {
		for(int i=0; i<arrayLength; i++) {
			wifiPass[i] = charactersArray[writeArray[passStartPos + i]];
		}
	}
}
 80017cc:	e039      	b.n	8001842 <convertChars+0xd6>
	} else if(state == 1) {
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d11b      	bne.n	800180c <convertChars+0xa0>
		for(int i=0; i<arrayLength; i++) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e013      	b.n	8001802 <convertChars+0x96>
			wifiSSID[i] = charactersArray[writeArray[ssidStartPos + i]];
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <convertChars+0xec>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <convertChars+0xf0>)
 80017f0:	5c99      	ldrb	r1, [r3, r2]
 80017f2:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <convertChars+0xf4>)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	460a      	mov	r2, r1
 80017fa:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	429a      	cmp	r2, r3
 8001808:	dbe7      	blt.n	80017da <convertChars+0x6e>
}
 800180a:	e01a      	b.n	8001842 <convertChars+0xd6>
		for(int i=0; i<arrayLength; i++) {
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	e013      	b.n	800183a <convertChars+0xce>
			wifiPass[i] = charactersArray[writeArray[passStartPos + i]];
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <convertChars+0xf8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4413      	add	r3, r2
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <convertChars+0xf0>)
 8001828:	5c99      	ldrb	r1, [r3, r2]
 800182a:	4a0f      	ldr	r2, [pc, #60]	; (8001868 <convertChars+0xfc>)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4413      	add	r3, r2
 8001830:	460a      	mov	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	3301      	adds	r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbe7      	blt.n	8001812 <convertChars+0xa6>
}
 8001842:	bf00      	nop
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	200009bf 	.word	0x200009bf
 8001850:	200009b4 	.word	0x200009b4
 8001854:	20000bf4 	.word	0x20000bf4
 8001858:	200009c0 	.word	0x200009c0
 800185c:	20000960 	.word	0x20000960
 8001860:	20000c00 	.word	0x20000c00
 8001864:	200009c1 	.word	0x200009c1
 8001868:	20000c24 	.word	0x20000c24

0800186c <takeCharFromEEPROM4ID>:

void takeCharFromEEPROM4ID(I2C_HandleTypeDef *hi2c1) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af04      	add	r7, sp, #16
 8001872:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(hi2c1, 0xA0, 0, 145, eepromData, 145, 3000);
 8001874:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2391      	movs	r3, #145	; 0x91
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <takeCharFromEEPROM4ID+0x3c>)
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2391      	movs	r3, #145	; 0x91
 8001884:	2200      	movs	r2, #0
 8001886:	21a0      	movs	r1, #160	; 0xa0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f008 ff6f 	bl	800a76c <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 800188e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001892:	f007 fde7 	bl	8009464 <HAL_Delay>

	convertChars(eepromData, 0);
 8001896:	2100      	movs	r1, #0
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <takeCharFromEEPROM4ID+0x3c>)
 800189a:	f7ff ff67 	bl	800176c <convertChars>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000b38 	.word	0x20000b38

080018ac <takeCharFromEEPROM4Wifi>:

void takeCharFromEEPROM4Wifi(I2C_HandleTypeDef *hi2c1, uint8_t state) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	70fb      	strb	r3, [r7, #3]
	if(state == 1) {
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d116      	bne.n	80018ec <takeCharFromEEPROM4Wifi+0x40>
		HAL_I2C_Mem_Read(hi2c1, 0xA0, 0, 145, eepromData, 145, 3000);
 80018be:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2391      	movs	r3, #145	; 0x91
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <takeCharFromEEPROM4Wifi+0x74>)
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2391      	movs	r3, #145	; 0x91
 80018ce:	2200      	movs	r2, #0
 80018d0:	21a0      	movs	r1, #160	; 0xa0
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f008 ff4a 	bl	800a76c <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 80018d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018dc:	f007 fdc2 	bl	8009464 <HAL_Delay>

		convertChars(eepromData, state);
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	4619      	mov	r1, r3
 80018e4:	480e      	ldr	r0, [pc, #56]	; (8001920 <takeCharFromEEPROM4Wifi+0x74>)
 80018e6:	f7ff ff41 	bl	800176c <convertChars>
		HAL_I2C_Mem_Read(hi2c1, 0xA0, 0, 145, eepromData, 145, 3000);
		HAL_Delay(1000);

		convertChars(eepromData, state);
	}
}
 80018ea:	e015      	b.n	8001918 <takeCharFromEEPROM4Wifi+0x6c>
		HAL_I2C_Mem_Read(hi2c1, 0xA0, 0, 145, eepromData, 145, 3000);
 80018ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018f0:	9302      	str	r3, [sp, #8]
 80018f2:	2391      	movs	r3, #145	; 0x91
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <takeCharFromEEPROM4Wifi+0x74>)
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2391      	movs	r3, #145	; 0x91
 80018fc:	2200      	movs	r2, #0
 80018fe:	21a0      	movs	r1, #160	; 0xa0
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f008 ff33 	bl	800a76c <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 8001906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800190a:	f007 fdab 	bl	8009464 <HAL_Delay>
		convertChars(eepromData, state);
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	4619      	mov	r1, r3
 8001912:	4803      	ldr	r0, [pc, #12]	; (8001920 <takeCharFromEEPROM4Wifi+0x74>)
 8001914:	f7ff ff2a 	bl	800176c <convertChars>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000b38 	.word	0x20000b38

08001924 <menu>:
		     }
		}
	}
}

void menu(I2C_HandleTypeDef *hi2c1) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800192c:	2101      	movs	r1, #1
 800192e:	488f      	ldr	r0, [pc, #572]	; (8001b6c <menu+0x248>)
 8001930:	f008 fb68 	bl	800a004 <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b01      	cmp	r3, #1
 8001938:	f040 808e 	bne.w	8001a58 <menu+0x134>
 800193c:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <menu+0x24c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f083 0301 	eor.w	r3, r3, #1
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8086 	beq.w	8001a58 <menu+0x134>
		menuSayac = menuSayac+1;
 800194c:	4b89      	ldr	r3, [pc, #548]	; (8001b74 <menu+0x250>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b87      	ldr	r3, [pc, #540]	; (8001b74 <menu+0x250>)
 8001956:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001958:	4b86      	ldr	r3, [pc, #536]	; (8001b74 <menu+0x250>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b24      	cmp	r3, #36	; 0x24
 800195e:	d102      	bne.n	8001966 <menu+0x42>
			menuSayac = 1;
 8001960:	4b84      	ldr	r3, [pc, #528]	; (8001b74 <menu+0x250>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001966:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <menu+0x250>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b12      	cmp	r3, #18
 800196c:	d106      	bne.n	800197c <menu+0x58>
 800196e:	4b82      	ldr	r3, [pc, #520]	; (8001b78 <menu+0x254>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <menu+0x58>
			menuSayac = 21;
 8001976:	4b7f      	ldr	r3, [pc, #508]	; (8001b74 <menu+0x250>)
 8001978:	2215      	movs	r2, #21
 800197a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800197c:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <menu+0x250>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b08      	cmp	r3, #8
 8001982:	d106      	bne.n	8001992 <menu+0x6e>
 8001984:	4b7d      	ldr	r3, [pc, #500]	; (8001b7c <menu+0x258>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <menu+0x6e>
			menuSayac = 16;
 800198c:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <menu+0x250>)
 800198e:	2210      	movs	r2, #16
 8001990:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001992:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <menu+0x250>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b0d      	cmp	r3, #13
 8001998:	d106      	bne.n	80019a8 <menu+0x84>
 800199a:	4b78      	ldr	r3, [pc, #480]	; (8001b7c <menu+0x258>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d102      	bne.n	80019a8 <menu+0x84>
			menuSayac = 16;
 80019a2:	4b74      	ldr	r3, [pc, #464]	; (8001b74 <menu+0x250>)
 80019a4:	2210      	movs	r2, #16
 80019a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80019a8:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <menu+0x250>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	d106      	bne.n	80019be <menu+0x9a>
 80019b0:	4b72      	ldr	r3, [pc, #456]	; (8001b7c <menu+0x258>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d102      	bne.n	80019be <menu+0x9a>
			menuSayac = 13;
 80019b8:	4b6e      	ldr	r3, [pc, #440]	; (8001b74 <menu+0x250>)
 80019ba:	220d      	movs	r2, #13
 80019bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80019be:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <menu+0x250>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b0a      	cmp	r3, #10
 80019c4:	d10a      	bne.n	80019dc <menu+0xb8>
 80019c6:	4b6e      	ldr	r3, [pc, #440]	; (8001b80 <menu+0x25c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d003      	beq.n	80019d6 <menu+0xb2>
 80019ce:	4b6c      	ldr	r3, [pc, #432]	; (8001b80 <menu+0x25c>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d102      	bne.n	80019dc <menu+0xb8>
			menuSayac = 11;
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <menu+0x250>)
 80019d8:	220b      	movs	r2, #11
 80019da:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80019dc:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <menu+0x250>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b0c      	cmp	r3, #12
 80019e2:	d10e      	bne.n	8001a02 <menu+0xde>
 80019e4:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <menu+0x260>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d003      	beq.n	80019f4 <menu+0xd0>
 80019ec:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <menu+0x260>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d106      	bne.n	8001a02 <menu+0xde>
 80019f4:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <menu+0x258>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d102      	bne.n	8001a02 <menu+0xde>
			menuSayac = 16;
 80019fc:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <menu+0x250>)
 80019fe:	2210      	movs	r2, #16
 8001a00:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <menu+0x250>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d10e      	bne.n	8001a28 <menu+0x104>
 8001a0a:	4b5e      	ldr	r3, [pc, #376]	; (8001b84 <menu+0x260>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d003      	beq.n	8001a1a <menu+0xf6>
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <menu+0x260>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d106      	bne.n	8001a28 <menu+0x104>
 8001a1a:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <menu+0x258>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d102      	bne.n	8001a28 <menu+0x104>
			menuSayac = 13;
 8001a22:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <menu+0x250>)
 8001a24:	220d      	movs	r2, #13
 8001a26:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001a28:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <menu+0x250>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d106      	bne.n	8001a3e <menu+0x11a>
 8001a30:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <menu+0x264>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d102      	bne.n	8001a3e <menu+0x11a>
			menuSayac = 16;
 8001a38:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <menu+0x250>)
 8001a3a:	2210      	movs	r2, #16
 8001a3c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <menu+0x250>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b18      	cmp	r3, #24
 8001a44:	d106      	bne.n	8001a54 <menu+0x130>
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <menu+0x254>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <menu+0x130>
			menuSayac = 26;
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <menu+0x250>)
 8001a50:	221a      	movs	r2, #26
 8001a52:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001a54:	f004 fd38 	bl	80064c8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a58:	2108      	movs	r1, #8
 8001a5a:	484c      	ldr	r0, [pc, #304]	; (8001b8c <menu+0x268>)
 8001a5c:	f008 fad2 	bl	800a004 <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d175      	bne.n	8001b52 <menu+0x22e>
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <menu+0x24c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d06e      	beq.n	8001b52 <menu+0x22e>
		if (menuSayac <= 1) {
 8001a74:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <menu+0x250>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d802      	bhi.n	8001a82 <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <menu+0x250>)
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <menu+0x250>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <menu+0x250>)
 8001a8c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <menu+0x250>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b14      	cmp	r3, #20
 8001a94:	d106      	bne.n	8001aa4 <menu+0x180>
 8001a96:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <menu+0x254>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <menu+0x180>
			menuSayac = 17;
 8001a9e:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <menu+0x250>)
 8001aa0:	2211      	movs	r2, #17
 8001aa2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <menu+0x250>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d106      	bne.n	8001aba <menu+0x196>
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <menu+0x258>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <menu+0x196>
			menuSayac = 7;
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <menu+0x250>)
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <menu+0x250>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	d106      	bne.n	8001ad0 <menu+0x1ac>
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <menu+0x258>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d102      	bne.n	8001ad0 <menu+0x1ac>
			menuSayac = 12;
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <menu+0x250>)
 8001acc:	220c      	movs	r2, #12
 8001ace:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <menu+0x250>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d106      	bne.n	8001ae6 <menu+0x1c2>
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <menu+0x258>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d102      	bne.n	8001ae6 <menu+0x1c2>
			menuSayac = 8;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <menu+0x250>)
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <menu+0x250>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b0a      	cmp	r3, #10
 8001aec:	d10a      	bne.n	8001b04 <menu+0x1e0>
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <menu+0x25c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d003      	beq.n	8001afe <menu+0x1da>
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <menu+0x25c>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d102      	bne.n	8001b04 <menu+0x1e0>
			menuSayac = 9;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <menu+0x250>)
 8001b00:	2209      	movs	r2, #9
 8001b02:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <menu+0x250>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d10a      	bne.n	8001b22 <menu+0x1fe>
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <menu+0x260>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d003      	beq.n	8001b1c <menu+0x1f8>
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <menu+0x260>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d102      	bne.n	8001b22 <menu+0x1fe>
			menuSayac = 11;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <menu+0x250>)
 8001b1e:	220b      	movs	r2, #11
 8001b20:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <menu+0x250>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	d106      	bne.n	8001b38 <menu+0x214>
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <menu+0x264>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <menu+0x214>
			menuSayac = 14;
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <menu+0x250>)
 8001b34:	220e      	movs	r2, #14
 8001b36:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <menu+0x250>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b19      	cmp	r3, #25
 8001b3e:	d106      	bne.n	8001b4e <menu+0x22a>
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <menu+0x254>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <menu+0x22a>
			menuSayac = 23;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <menu+0x250>)
 8001b4a:	2217      	movs	r2, #23
 8001b4c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001b4e:	f004 fcbb 	bl	80064c8 <bekle>
	}

	if (menuSayac == 0) {
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <menu+0x250>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d134      	bne.n	8001bc4 <menu+0x2a0>
		if(dilSecim == 0) {
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <menu+0x26c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d122      	bne.n	8001ba8 <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001b62:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <menu+0x270>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	2001      	movs	r0, #1
 8001b68:	e016      	b.n	8001b98 <menu+0x274>
 8001b6a:	bf00      	nop
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	20000c78 	.word	0x20000c78
 8001b74:	20000c49 	.word	0x20000c49
 8001b78:	20000c58 	.word	0x20000c58
 8001b7c:	20000c51 	.word	0x20000c51
 8001b80:	20000c52 	.word	0x20000c52
 8001b84:	20000c53 	.word	0x20000c53
 8001b88:	20000c54 	.word	0x20000c54
 8001b8c:	40011000 	.word	0x40011000
 8001b90:	20000c6a 	.word	0x20000c6a
 8001b94:	0800dce4 	.word	0x0800dce4
 8001b98:	f7fe fe0e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001b9c:	4a94      	ldr	r2, [pc, #592]	; (8001df0 <menu+0x4cc>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f7fe fe09 	bl	80007b8 <lcd_print>
 8001ba6:	e00d      	b.n	8001bc4 <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 8001ba8:	4b92      	ldr	r3, [pc, #584]	; (8001df4 <menu+0x4d0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d109      	bne.n	8001bc4 <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001bb0:	4a91      	ldr	r2, [pc, #580]	; (8001df8 <menu+0x4d4>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7fe fdff 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001bba:	4a90      	ldr	r2, [pc, #576]	; (8001dfc <menu+0x4d8>)
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f7fe fdfa 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001bc4:	4b8e      	ldr	r3, [pc, #568]	; (8001e00 <menu+0x4dc>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	f040 82b5 	bne.w	8002138 <menu+0x814>
		if(dilSecim == 0) {
 8001bce:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <menu+0x4d0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001bd6:	4a8b      	ldr	r2, [pc, #556]	; (8001e04 <menu+0x4e0>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f7fe fdec 	bl	80007b8 <lcd_print>
 8001be0:	e008      	b.n	8001bf4 <menu+0x2d0>
		} else if(dilSecim == 1) {
 8001be2:	4b84      	ldr	r3, [pc, #528]	; (8001df4 <menu+0x4d0>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d104      	bne.n	8001bf4 <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001bea:	4a87      	ldr	r2, [pc, #540]	; (8001e08 <menu+0x4e4>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7fe fde2 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001bf4:	4b85      	ldr	r3, [pc, #532]	; (8001e0c <menu+0x4e8>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d123      	bne.n	8001c44 <menu+0x320>
			if(dilSecim == 0) {
 8001bfc:	4b7d      	ldr	r3, [pc, #500]	; (8001df4 <menu+0x4d0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001c04:	4a82      	ldr	r2, [pc, #520]	; (8001e10 <menu+0x4ec>)
 8001c06:	2101      	movs	r1, #1
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f7fe fdd5 	bl	80007b8 <lcd_print>
 8001c0e:	e008      	b.n	8001c22 <menu+0x2fe>

			} else if(dilSecim == 1) {
 8001c10:	4b78      	ldr	r3, [pc, #480]	; (8001df4 <menu+0x4d0>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d104      	bne.n	8001c22 <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 8001c18:	4a7e      	ldr	r2, [pc, #504]	; (8001e14 <menu+0x4f0>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	f7fe fdcb 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001c22:	4a7d      	ldr	r2, [pc, #500]	; (8001e18 <menu+0x4f4>)
 8001c24:	210f      	movs	r1, #15
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7fe fdc6 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001c2c:	4b7b      	ldr	r3, [pc, #492]	; (8001e1c <menu+0x4f8>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	220a      	movs	r2, #10
 8001c32:	497b      	ldr	r1, [pc, #492]	; (8001e20 <menu+0x4fc>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f00b fa11 	bl	800d05c <itoa>
			lcd_print(2, 14, snum);
 8001c3a:	4a79      	ldr	r2, [pc, #484]	; (8001e20 <menu+0x4fc>)
 8001c3c:	210e      	movs	r1, #14
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f7fe fdba 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001c44:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <menu+0x4e8>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d123      	bne.n	8001c94 <menu+0x370>
			if(dilSecim == 0) {
 8001c4c:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <menu+0x4d0>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001c54:	4a73      	ldr	r2, [pc, #460]	; (8001e24 <menu+0x500>)
 8001c56:	2101      	movs	r1, #1
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f7fe fdad 	bl	80007b8 <lcd_print>
 8001c5e:	e008      	b.n	8001c72 <menu+0x34e>
			} else if(dilSecim == 1) {
 8001c60:	4b64      	ldr	r3, [pc, #400]	; (8001df4 <menu+0x4d0>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d104      	bne.n	8001c72 <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 8001c68:	4a6f      	ldr	r2, [pc, #444]	; (8001e28 <menu+0x504>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f7fe fda3 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c72:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <menu+0x508>)
 8001c74:	210f      	movs	r1, #15
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7fe fd9e 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <menu+0x50c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	220a      	movs	r2, #10
 8001c82:	4967      	ldr	r1, [pc, #412]	; (8001e20 <menu+0x4fc>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f00b f9e9 	bl	800d05c <itoa>
			lcd_print(2, 14, snum);
 8001c8a:	4a65      	ldr	r2, [pc, #404]	; (8001e20 <menu+0x4fc>)
 8001c8c:	210e      	movs	r1, #14
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f7fe fd92 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001c94:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <menu+0x4e8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <menu+0x3c0>
			if(dilSecim == 0) {
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <menu+0x4d0>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001ca4:	4a63      	ldr	r2, [pc, #396]	; (8001e34 <menu+0x510>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f7fe fd85 	bl	80007b8 <lcd_print>
 8001cae:	e008      	b.n	8001cc2 <menu+0x39e>
			} else if(dilSecim == 1) {
 8001cb0:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <menu+0x4d0>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d104      	bne.n	8001cc2 <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 8001cb8:	4a5f      	ldr	r2, [pc, #380]	; (8001e38 <menu+0x514>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f7fe fd7b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001cc2:	4a5a      	ldr	r2, [pc, #360]	; (8001e2c <menu+0x508>)
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f7fe fd76 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <menu+0x518>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	4953      	ldr	r1, [pc, #332]	; (8001e20 <menu+0x4fc>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00b f9c1 	bl	800d05c <itoa>
			lcd_print(2, 14, snum);
 8001cda:	4a51      	ldr	r2, [pc, #324]	; (8001e20 <menu+0x4fc>)
 8001cdc:	210e      	movs	r1, #14
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f7fe fd6a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001ce4:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <menu+0x4e8>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d123      	bne.n	8001d34 <menu+0x410>
			if(dilSecim == 0) {
 8001cec:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <menu+0x4d0>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <menu+0x51c>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f7fe fd5d 	bl	80007b8 <lcd_print>
 8001cfe:	e008      	b.n	8001d12 <menu+0x3ee>
			} else if(dilSecim == 1) {
 8001d00:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <menu+0x4d0>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d104      	bne.n	8001d12 <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 8001d08:	4a4e      	ldr	r2, [pc, #312]	; (8001e44 <menu+0x520>)
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f7fe fd53 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001d12:	4a46      	ldr	r2, [pc, #280]	; (8001e2c <menu+0x508>)
 8001d14:	210f      	movs	r1, #15
 8001d16:	2002      	movs	r0, #2
 8001d18:	f7fe fd4e 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001d1c:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <menu+0x524>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	220a      	movs	r2, #10
 8001d22:	493f      	ldr	r1, [pc, #252]	; (8001e20 <menu+0x4fc>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00b f999 	bl	800d05c <itoa>
			lcd_print(2, 14, snum);
 8001d2a:	4a3d      	ldr	r2, [pc, #244]	; (8001e20 <menu+0x4fc>)
 8001d2c:	210e      	movs	r1, #14
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f7fe fd42 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001d34:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <menu+0x4e8>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d123      	bne.n	8001d84 <menu+0x460>
			if(dilSecim == 0) {
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <menu+0x4d0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001d44:	4a41      	ldr	r2, [pc, #260]	; (8001e4c <menu+0x528>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7fe fd35 	bl	80007b8 <lcd_print>
 8001d4e:	e008      	b.n	8001d62 <menu+0x43e>
			} else if(dilSecim == 1) {
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <menu+0x4d0>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d104      	bne.n	8001d62 <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 8001d58:	4a3d      	ldr	r2, [pc, #244]	; (8001e50 <menu+0x52c>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f7fe fd2b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001d62:	4a32      	ldr	r2, [pc, #200]	; (8001e2c <menu+0x508>)
 8001d64:	210f      	movs	r1, #15
 8001d66:	2002      	movs	r0, #2
 8001d68:	f7fe fd26 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001d6c:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <menu+0x530>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	220a      	movs	r2, #10
 8001d72:	492b      	ldr	r1, [pc, #172]	; (8001e20 <menu+0x4fc>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f00b f971 	bl	800d05c <itoa>
			lcd_print(2, 14, snum);
 8001d7a:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <menu+0x4fc>)
 8001d7c:	210e      	movs	r1, #14
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f7fe fd1a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <menu+0x4e8>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d123      	bne.n	8001dd4 <menu+0x4b0>
			if(dilSecim == 0) {
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <menu+0x4d0>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <menu+0x534>)
 8001d96:	2101      	movs	r1, #1
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f7fe fd0d 	bl	80007b8 <lcd_print>
 8001d9e:	e008      	b.n	8001db2 <menu+0x48e>
			} else if(dilSecim == 1) {
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <menu+0x4d0>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d104      	bne.n	8001db2 <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 8001da8:	4a2c      	ldr	r2, [pc, #176]	; (8001e5c <menu+0x538>)
 8001daa:	2101      	movs	r1, #1
 8001dac:	2002      	movs	r0, #2
 8001dae:	f7fe fd03 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <menu+0x508>)
 8001db4:	210f      	movs	r1, #15
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7fe fcfe 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <menu+0x53c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	4917      	ldr	r1, [pc, #92]	; (8001e20 <menu+0x4fc>)
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00b f949 	bl	800d05c <itoa>
			lcd_print(2, 14, snum);
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <menu+0x4fc>)
 8001dcc:	210e      	movs	r1, #14
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f7fe fcf2 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <menu+0x4e8>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d15f      	bne.n	8001e9c <menu+0x578>
			if(dilSecim == 0) {
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <menu+0x4d0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d141      	bne.n	8001e68 <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <menu+0x540>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	2002      	movs	r0, #2
 8001dea:	f7fe fce5 	bl	80007b8 <lcd_print>
 8001dee:	e044      	b.n	8001e7a <menu+0x556>
 8001df0:	0800dcf8 	.word	0x0800dcf8
 8001df4:	20000c6a 	.word	0x20000c6a
 8001df8:	0800dd0c 	.word	0x0800dd0c
 8001dfc:	0800dd20 	.word	0x0800dd20
 8001e00:	20000c49 	.word	0x20000c49
 8001e04:	0800dd34 	.word	0x0800dd34
 8001e08:	0800dd48 	.word	0x0800dd48
 8001e0c:	20000c4b 	.word	0x20000c4b
 8001e10:	0800dd5c 	.word	0x0800dd5c
 8001e14:	0800dd6c 	.word	0x0800dd6c
 8001e18:	0800dd7c 	.word	0x0800dd7c
 8001e1c:	20000c6b 	.word	0x20000c6b
 8001e20:	20000bcc 	.word	0x20000bcc
 8001e24:	0800dd80 	.word	0x0800dd80
 8001e28:	0800dd90 	.word	0x0800dd90
 8001e2c:	0800dda0 	.word	0x0800dda0
 8001e30:	20000c6c 	.word	0x20000c6c
 8001e34:	0800dda4 	.word	0x0800dda4
 8001e38:	0800ddb4 	.word	0x0800ddb4
 8001e3c:	20000c6d 	.word	0x20000c6d
 8001e40:	0800ddc4 	.word	0x0800ddc4
 8001e44:	0800ddd4 	.word	0x0800ddd4
 8001e48:	20000c6e 	.word	0x20000c6e
 8001e4c:	0800dde4 	.word	0x0800dde4
 8001e50:	0800ddf4 	.word	0x0800ddf4
 8001e54:	20000c6f 	.word	0x20000c6f
 8001e58:	0800de04 	.word	0x0800de04
 8001e5c:	0800de14 	.word	0x0800de14
 8001e60:	20000c70 	.word	0x20000c70
 8001e64:	0800de24 	.word	0x0800de24
			} else if(dilSecim == 1) {
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <menu+0x684>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d104      	bne.n	8001e7a <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 8001e70:	4a4e      	ldr	r2, [pc, #312]	; (8001fac <menu+0x688>)
 8001e72:	2101      	movs	r1, #1
 8001e74:	2002      	movs	r0, #2
 8001e76:	f7fe fc9f 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <menu+0x68c>)
 8001e7c:	210f      	movs	r1, #15
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f7fe fc9a 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <menu+0x690>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	220a      	movs	r2, #10
 8001e8a:	494b      	ldr	r1, [pc, #300]	; (8001fb8 <menu+0x694>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00b f8e5 	bl	800d05c <itoa>
			lcd_print(2, 14, snum);
 8001e92:	4a49      	ldr	r2, [pc, #292]	; (8001fb8 <menu+0x694>)
 8001e94:	210e      	movs	r1, #14
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7fe fc8e 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001e9c:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <menu+0x698>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b07      	cmp	r3, #7
 8001ea2:	d123      	bne.n	8001eec <menu+0x5c8>
			if(dilSecim == 0) {
 8001ea4:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <menu+0x684>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001eac:	4a44      	ldr	r2, [pc, #272]	; (8001fc0 <menu+0x69c>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f7fe fc81 	bl	80007b8 <lcd_print>
 8001eb6:	e008      	b.n	8001eca <menu+0x5a6>
			} else if(dilSecim == 1) {
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <menu+0x684>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d104      	bne.n	8001eca <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 8001ec0:	4a40      	ldr	r2, [pc, #256]	; (8001fc4 <menu+0x6a0>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7fe fc77 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001eca:	4a39      	ldr	r2, [pc, #228]	; (8001fb0 <menu+0x68c>)
 8001ecc:	210f      	movs	r1, #15
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f7fe fc72 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <menu+0x6a4>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	220a      	movs	r2, #10
 8001eda:	4937      	ldr	r1, [pc, #220]	; (8001fb8 <menu+0x694>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f00b f8bd 	bl	800d05c <itoa>
			lcd_print(2, 14, snum);
 8001ee2:	4a35      	ldr	r2, [pc, #212]	; (8001fb8 <menu+0x694>)
 8001ee4:	210e      	movs	r1, #14
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f7fe fc66 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <menu+0x698>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d123      	bne.n	8001f3c <menu+0x618>
			if(dilSecim == 0) {
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <menu+0x684>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001efc:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <menu+0x6a8>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	2002      	movs	r0, #2
 8001f02:	f7fe fc59 	bl	80007b8 <lcd_print>
 8001f06:	e008      	b.n	8001f1a <menu+0x5f6>
			} else if(dilSecim == 1) {
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <menu+0x684>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d104      	bne.n	8001f1a <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8001f10:	4a2f      	ldr	r2, [pc, #188]	; (8001fd0 <menu+0x6ac>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	2002      	movs	r0, #2
 8001f16:	f7fe fc4f 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001f1a:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <menu+0x68c>)
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	2002      	movs	r0, #2
 8001f20:	f7fe fc4a 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <menu+0x6b0>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	220a      	movs	r2, #10
 8001f2a:	4923      	ldr	r1, [pc, #140]	; (8001fb8 <menu+0x694>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f00b f895 	bl	800d05c <itoa>
			lcd_print(2, 14, snum);
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <menu+0x694>)
 8001f34:	210e      	movs	r1, #14
 8001f36:	2002      	movs	r0, #2
 8001f38:	f7fe fc3e 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <menu+0x698>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d123      	bne.n	8001f8c <menu+0x668>
			if(dilSecim == 0) {
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <menu+0x684>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001f4c:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <menu+0x6b4>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	2002      	movs	r0, #2
 8001f52:	f7fe fc31 	bl	80007b8 <lcd_print>
 8001f56:	e008      	b.n	8001f6a <menu+0x646>
			} else if(dilSecim == 1) {
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <menu+0x684>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d104      	bne.n	8001f6a <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 8001f60:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <menu+0x6b8>)
 8001f62:	2101      	movs	r1, #1
 8001f64:	2002      	movs	r0, #2
 8001f66:	f7fe fc27 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001f6a:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <menu+0x6bc>)
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f7fe fc22 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <menu+0x6c0>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	220a      	movs	r2, #10
 8001f7a:	490f      	ldr	r1, [pc, #60]	; (8001fb8 <menu+0x694>)
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00b f86d 	bl	800d05c <itoa>
			lcd_print(2, 15, snum);
 8001f82:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <menu+0x694>)
 8001f84:	210f      	movs	r1, #15
 8001f86:	2002      	movs	r0, #2
 8001f88:	f7fe fc16 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <menu+0x698>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b0a      	cmp	r3, #10
 8001f92:	d134      	bne.n	8001ffe <menu+0x6da>
			if(dilSecim == 0) {
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <menu+0x684>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d127      	bne.n	8001fec <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <menu+0x6c4>)
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	2002      	movs	r0, #2
 8001fa2:	f7fe fc09 	bl	80007b8 <lcd_print>
 8001fa6:	e02a      	b.n	8001ffe <menu+0x6da>
 8001fa8:	20000c6a 	.word	0x20000c6a
 8001fac:	0800de34 	.word	0x0800de34
 8001fb0:	0800dda0 	.word	0x0800dda0
 8001fb4:	20000c71 	.word	0x20000c71
 8001fb8:	20000bcc 	.word	0x20000bcc
 8001fbc:	20000c4b 	.word	0x20000c4b
 8001fc0:	0800de44 	.word	0x0800de44
 8001fc4:	0800de54 	.word	0x0800de54
 8001fc8:	20000c72 	.word	0x20000c72
 8001fcc:	0800de64 	.word	0x0800de64
 8001fd0:	0800de74 	.word	0x0800de74
 8001fd4:	20000c73 	.word	0x20000c73
 8001fd8:	0800de84 	.word	0x0800de84
 8001fdc:	0800de94 	.word	0x0800de94
 8001fe0:	0800dea4 	.word	0x0800dea4
 8001fe4:	20000c74 	.word	0x20000c74
 8001fe8:	0800dea8 	.word	0x0800dea8
			} else if(dilSecim == 1) {
 8001fec:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <menu+0x8d4>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d104      	bne.n	8001ffe <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 8001ff4:	4a81      	ldr	r2, [pc, #516]	; (80021fc <menu+0x8d8>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f7fe fbdd 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ffe:	2102      	movs	r1, #2
 8002000:	487f      	ldr	r0, [pc, #508]	; (8002200 <menu+0x8dc>)
 8002002:	f007 ffff 	bl	800a004 <HAL_GPIO_ReadPin>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d119      	bne.n	8002040 <menu+0x71c>
 800200c:	4b7d      	ldr	r3, [pc, #500]	; (8002204 <menu+0x8e0>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <menu+0x71c>
 800201a:	4b7b      	ldr	r3, [pc, #492]	; (8002208 <menu+0x8e4>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10e      	bne.n	8002040 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8002022:	4b7a      	ldr	r3, [pc, #488]	; (800220c <menu+0x8e8>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b78      	ldr	r3, [pc, #480]	; (800220c <menu+0x8e8>)
 800202c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800202e:	4b77      	ldr	r3, [pc, #476]	; (800220c <menu+0x8e8>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b0a      	cmp	r3, #10
 8002034:	d902      	bls.n	800203c <menu+0x718>
				hataGostermeSirasi = 0;
 8002036:	4b75      	ldr	r3, [pc, #468]	; (800220c <menu+0x8e8>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800203c:	f004 fa44 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002040:	2104      	movs	r1, #4
 8002042:	486f      	ldr	r0, [pc, #444]	; (8002200 <menu+0x8dc>)
 8002044:	f007 ffde 	bl	800a004 <HAL_GPIO_ReadPin>
 8002048:	4603      	mov	r3, r0
 800204a:	2b01      	cmp	r3, #1
 800204c:	d119      	bne.n	8002082 <menu+0x75e>
 800204e:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <menu+0x8e0>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d012      	beq.n	8002082 <menu+0x75e>
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <menu+0x8e4>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10e      	bne.n	8002082 <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8002064:	4b69      	ldr	r3, [pc, #420]	; (800220c <menu+0x8e8>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	4b67      	ldr	r3, [pc, #412]	; (800220c <menu+0x8e8>)
 800206e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8002070:	4b66      	ldr	r3, [pc, #408]	; (800220c <menu+0x8e8>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b0b      	cmp	r3, #11
 8002076:	d902      	bls.n	800207e <menu+0x75a>
	    		hataGostermeSirasi = 10;
 8002078:	4b64      	ldr	r3, [pc, #400]	; (800220c <menu+0x8e8>)
 800207a:	220a      	movs	r2, #10
 800207c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800207e:	f004 fa23 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8002082:	2108      	movs	r1, #8
 8002084:	485e      	ldr	r0, [pc, #376]	; (8002200 <menu+0x8dc>)
 8002086:	f007 ffbd 	bl	800a004 <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	d153      	bne.n	8002138 <menu+0x814>
 8002090:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <menu+0x8e0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f083 0301 	eor.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d04c      	beq.n	8002138 <menu+0x814>
 800209e:	4b5b      	ldr	r3, [pc, #364]	; (800220c <menu+0x8e8>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b0a      	cmp	r3, #10
 80020a4:	d148      	bne.n	8002138 <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 80020a6:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <menu+0x8ec>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	4b59      	ldr	r3, [pc, #356]	; (8002214 <menu+0x8f0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <menu+0x8f4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	4b56      	ldr	r3, [pc, #344]	; (8002214 <menu+0x8f0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80020c2:	4b56      	ldr	r3, [pc, #344]	; (800221c <menu+0x8f8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	4b52      	ldr	r3, [pc, #328]	; (8002214 <menu+0x8f0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <menu+0x8fc>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	4b4f      	ldr	r3, [pc, #316]	; (8002214 <menu+0x8f0>)
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80020de:	4b51      	ldr	r3, [pc, #324]	; (8002224 <menu+0x900>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <menu+0x8f0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80020ec:	4b4e      	ldr	r3, [pc, #312]	; (8002228 <menu+0x904>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <menu+0x8f0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80020fa:	4b4c      	ldr	r3, [pc, #304]	; (800222c <menu+0x908>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	4b44      	ldr	r3, [pc, #272]	; (8002214 <menu+0x8f0>)
 8002102:	2200      	movs	r2, #0
 8002104:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8002108:	4b49      	ldr	r3, [pc, #292]	; (8002230 <menu+0x90c>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <menu+0x8f0>)
 8002110:	2200      	movs	r2, #0
 8002112:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <menu+0x910>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <menu+0x8f0>)
 800211e:	2200      	movs	r2, #0
 8002120:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8002124:	4b44      	ldr	r3, [pc, #272]	; (8002238 <menu+0x914>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <menu+0x8f0>)
 800212c:	2200      	movs	r2, #0
 800212e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8002132:	4b42      	ldr	r3, [pc, #264]	; (800223c <menu+0x918>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8002138:	4b41      	ldr	r3, [pc, #260]	; (8002240 <menu+0x91c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b02      	cmp	r3, #2
 800213e:	f040 80fc 	bne.w	800233a <menu+0xa16>
		if(dilSecim == 0) {
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <menu+0x8d4>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 800214a:	4a3e      	ldr	r2, [pc, #248]	; (8002244 <menu+0x920>)
 800214c:	2101      	movs	r1, #1
 800214e:	2001      	movs	r0, #1
 8002150:	f7fe fb32 	bl	80007b8 <lcd_print>
 8002154:	e008      	b.n	8002168 <menu+0x844>
		} else if(dilSecim == 1) {
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <menu+0x8d4>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d104      	bne.n	8002168 <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 800215e:	4a3a      	ldr	r2, [pc, #232]	; (8002248 <menu+0x924>)
 8002160:	2101      	movs	r1, #1
 8002162:	2001      	movs	r0, #1
 8002164:	f7fe fb28 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <menu+0x8e4>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d003      	beq.n	8002178 <menu+0x854>
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <menu+0x8e4>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d112      	bne.n	800219e <menu+0x87a>
			if(dilSecim == 0) {
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <menu+0x8d4>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8002180:	4a32      	ldr	r2, [pc, #200]	; (800224c <menu+0x928>)
 8002182:	2101      	movs	r1, #1
 8002184:	2002      	movs	r0, #2
 8002186:	f7fe fb17 	bl	80007b8 <lcd_print>
 800218a:	e008      	b.n	800219e <menu+0x87a>
			} else if(dilSecim == 1) {
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <menu+0x8d4>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d104      	bne.n	800219e <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 8002194:	4a2e      	ldr	r2, [pc, #184]	; (8002250 <menu+0x92c>)
 8002196:	2101      	movs	r1, #1
 8002198:	2002      	movs	r0, #2
 800219a:	f7fe fb0d 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <menu+0x930>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d116      	bne.n	80021d4 <menu+0x8b0>
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <menu+0x8e4>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d112      	bne.n	80021d4 <menu+0x8b0>
			if(dilSecim == 0) {
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <menu+0x8d4>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 80021b6:	4a28      	ldr	r2, [pc, #160]	; (8002258 <menu+0x934>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	2002      	movs	r0, #2
 80021bc:	f7fe fafc 	bl	80007b8 <lcd_print>
 80021c0:	e008      	b.n	80021d4 <menu+0x8b0>
			} else if(dilSecim == 1) {
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <menu+0x8d4>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d104      	bne.n	80021d4 <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 80021ca:	4a24      	ldr	r2, [pc, #144]	; (800225c <menu+0x938>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	2002      	movs	r0, #2
 80021d0:	f7fe faf2 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <menu+0x930>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d14c      	bne.n	8002276 <menu+0x952>
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <menu+0x8e4>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d148      	bne.n	8002276 <menu+0x952>
			if(dilSecim == 0) {
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <menu+0x8d4>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d13b      	bne.n	8002264 <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 80021ec:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <menu+0x93c>)
 80021ee:	2101      	movs	r1, #1
 80021f0:	2002      	movs	r0, #2
 80021f2:	f7fe fae1 	bl	80007b8 <lcd_print>
 80021f6:	e03e      	b.n	8002276 <menu+0x952>
 80021f8:	20000c6a 	.word	0x20000c6a
 80021fc:	0800debc 	.word	0x0800debc
 8002200:	40010800 	.word	0x40010800
 8002204:	20000c78 	.word	0x20000c78
 8002208:	20000c58 	.word	0x20000c58
 800220c:	20000c4b 	.word	0x20000c4b
 8002210:	20000c6b 	.word	0x20000c6b
 8002214:	20000b38 	.word	0x20000b38
 8002218:	20000c6c 	.word	0x20000c6c
 800221c:	20000c6d 	.word	0x20000c6d
 8002220:	20000c6e 	.word	0x20000c6e
 8002224:	20000c6f 	.word	0x20000c6f
 8002228:	20000c70 	.word	0x20000c70
 800222c:	20000c71 	.word	0x20000c71
 8002230:	20000c72 	.word	0x20000c72
 8002234:	20000c73 	.word	0x20000c73
 8002238:	20000c74 	.word	0x20000c74
 800223c:	20000c75 	.word	0x20000c75
 8002240:	20000c49 	.word	0x20000c49
 8002244:	0800ded0 	.word	0x0800ded0
 8002248:	0800dee4 	.word	0x0800dee4
 800224c:	0800def8 	.word	0x0800def8
 8002250:	0800df0c 	.word	0x0800df0c
 8002254:	20000c4a 	.word	0x20000c4a
 8002258:	0800df20 	.word	0x0800df20
 800225c:	0800df30 	.word	0x0800df30
 8002260:	0800df40 	.word	0x0800df40
			} else if(dilSecim == 1) {
 8002264:	4b98      	ldr	r3, [pc, #608]	; (80024c8 <menu+0xba4>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d104      	bne.n	8002276 <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 800226c:	4a97      	ldr	r2, [pc, #604]	; (80024cc <menu+0xba8>)
 800226e:	2101      	movs	r1, #1
 8002270:	2002      	movs	r0, #2
 8002272:	f7fe faa1 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002276:	2102      	movs	r1, #2
 8002278:	4895      	ldr	r0, [pc, #596]	; (80024d0 <menu+0xbac>)
 800227a:	f007 fec3 	bl	800a004 <HAL_GPIO_ReadPin>
 800227e:	4603      	mov	r3, r0
 8002280:	2b01      	cmp	r3, #1
 8002282:	d119      	bne.n	80022b8 <menu+0x994>
 8002284:	4b93      	ldr	r3, [pc, #588]	; (80024d4 <menu+0xbb0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <menu+0x994>
 8002292:	4b91      	ldr	r3, [pc, #580]	; (80024d8 <menu+0xbb4>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10e      	bne.n	80022b8 <menu+0x994>
			calismaSekli = calismaSekli + 1;
 800229a:	4b90      	ldr	r3, [pc, #576]	; (80024dc <menu+0xbb8>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b8e      	ldr	r3, [pc, #568]	; (80024dc <menu+0xbb8>)
 80022a4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80022a6:	4b8d      	ldr	r3, [pc, #564]	; (80024dc <menu+0xbb8>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d902      	bls.n	80022b4 <menu+0x990>
				calismaSekli = 0;
 80022ae:	4b8b      	ldr	r3, [pc, #556]	; (80024dc <menu+0xbb8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022b4:	f004 f908 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80022b8:	2104      	movs	r1, #4
 80022ba:	4885      	ldr	r0, [pc, #532]	; (80024d0 <menu+0xbac>)
 80022bc:	f007 fea2 	bl	800a004 <HAL_GPIO_ReadPin>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d119      	bne.n	80022fa <menu+0x9d6>
 80022c6:	4b83      	ldr	r3, [pc, #524]	; (80024d4 <menu+0xbb0>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <menu+0x9d6>
 80022d4:	4b80      	ldr	r3, [pc, #512]	; (80024d8 <menu+0xbb4>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10e      	bne.n	80022fa <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 80022dc:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <menu+0xbb8>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b7d      	ldr	r3, [pc, #500]	; (80024dc <menu+0xbb8>)
 80022e6:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80022e8:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <menu+0xbb8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <menu+0x9d2>
	    		calismaSekli = 1;
 80022f0:	4b7a      	ldr	r3, [pc, #488]	; (80024dc <menu+0xbb8>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80022f6:	f004 f8e7 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022fa:	2108      	movs	r1, #8
 80022fc:	4874      	ldr	r0, [pc, #464]	; (80024d0 <menu+0xbac>)
 80022fe:	f007 fe81 	bl	800a004 <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d118      	bne.n	800233a <menu+0xa16>
 8002308:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <menu+0xbb0>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	f083 0301 	eor.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d011      	beq.n	800233a <menu+0xa16>
			eepromData[1] = calismaSekli;
 8002316:	4b71      	ldr	r3, [pc, #452]	; (80024dc <menu+0xbb8>)
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	4b71      	ldr	r3, [pc, #452]	; (80024e0 <menu+0xbbc>)
 800231c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 800231e:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <menu+0xbb8>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d106      	bne.n	8002334 <menu+0xa10>
				altLimit = 1;
 8002326:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <menu+0xbc0>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800232c:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <menu+0xbc0>)
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	4b6b      	ldr	r3, [pc, #428]	; (80024e0 <menu+0xbbc>)
 8002332:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002334:	4b6c      	ldr	r3, [pc, #432]	; (80024e8 <menu+0xbc4>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 800233a:	4b6c      	ldr	r3, [pc, #432]	; (80024ec <menu+0xbc8>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b03      	cmp	r3, #3
 8002340:	f040 8083 	bne.w	800244a <menu+0xb26>
		if(dilSecim == 0) {
 8002344:	4b60      	ldr	r3, [pc, #384]	; (80024c8 <menu+0xba4>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 800234c:	4a68      	ldr	r2, [pc, #416]	; (80024f0 <menu+0xbcc>)
 800234e:	2101      	movs	r1, #1
 8002350:	2001      	movs	r0, #1
 8002352:	f7fe fa31 	bl	80007b8 <lcd_print>
 8002356:	e008      	b.n	800236a <menu+0xa46>
		} else if(dilSecim == 1) {
 8002358:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <menu+0xba4>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d104      	bne.n	800236a <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8002360:	4a64      	ldr	r2, [pc, #400]	; (80024f4 <menu+0xbd0>)
 8002362:	2101      	movs	r1, #1
 8002364:	2001      	movs	r0, #1
 8002366:	f7fe fa27 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <menu+0xbd4>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d113      	bne.n	800239a <menu+0xa76>
			if(dilSecim == 0) {
 8002372:	4b55      	ldr	r3, [pc, #340]	; (80024c8 <menu+0xba4>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 800237a:	4a60      	ldr	r2, [pc, #384]	; (80024fc <menu+0xbd8>)
 800237c:	2101      	movs	r1, #1
 800237e:	2002      	movs	r0, #2
 8002380:	f7fe fa1a 	bl	80007b8 <lcd_print>
 8002384:	e012      	b.n	80023ac <menu+0xa88>
			} else if(dilSecim == 1) {
 8002386:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <menu+0xba4>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d10e      	bne.n	80023ac <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 800238e:	4a5c      	ldr	r2, [pc, #368]	; (8002500 <menu+0xbdc>)
 8002390:	2101      	movs	r1, #1
 8002392:	2002      	movs	r0, #2
 8002394:	f7fe fa10 	bl	80007b8 <lcd_print>
 8002398:	e008      	b.n	80023ac <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 800239a:	4b57      	ldr	r3, [pc, #348]	; (80024f8 <menu+0xbd4>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d104      	bne.n	80023ac <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 80023a2:	4a58      	ldr	r2, [pc, #352]	; (8002504 <menu+0xbe0>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	2002      	movs	r0, #2
 80023a8:	f7fe fa06 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ac:	2102      	movs	r1, #2
 80023ae:	4848      	ldr	r0, [pc, #288]	; (80024d0 <menu+0xbac>)
 80023b0:	f007 fe28 	bl	800a004 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d115      	bne.n	80023e6 <menu+0xac2>
 80023ba:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <menu+0xbb0>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 80023c8:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <menu+0xbd4>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <menu+0xbd4>)
 80023d2:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80023d4:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <menu+0xbd4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d902      	bls.n	80023e2 <menu+0xabe>
				emniyetCercevesi = 0;
 80023dc:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <menu+0xbd4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023e2:	f004 f871 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023e6:	2104      	movs	r1, #4
 80023e8:	4839      	ldr	r0, [pc, #228]	; (80024d0 <menu+0xbac>)
 80023ea:	f007 fe0b 	bl	800a004 <HAL_GPIO_ReadPin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d115      	bne.n	8002420 <menu+0xafc>
 80023f4:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <menu+0xbb0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f083 0301 	eor.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00e      	beq.n	8002420 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <menu+0xbd4>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <menu+0xbd4>)
 800240c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800240e:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <menu+0xbd4>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <menu+0xaf8>
		   		emniyetCercevesi = 1;
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <menu+0xbd4>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800241c:	f004 f854 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8002420:	2108      	movs	r1, #8
 8002422:	482b      	ldr	r0, [pc, #172]	; (80024d0 <menu+0xbac>)
 8002424:	f007 fdee 	bl	800a004 <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10d      	bne.n	800244a <menu+0xb26>
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <menu+0xbb0>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 800243c:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <menu+0xbd4>)
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <menu+0xbbc>)
 8002442:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <menu+0xbc4>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <menu+0xbc8>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b04      	cmp	r3, #4
 8002450:	f040 80ba 	bne.w	80025c8 <menu+0xca4>
		if(dilSecim == 0) {
 8002454:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <menu+0xba4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800245c:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <menu+0xbe4>)
 800245e:	2101      	movs	r1, #1
 8002460:	2001      	movs	r0, #1
 8002462:	f7fe f9a9 	bl	80007b8 <lcd_print>
 8002466:	e008      	b.n	800247a <menu+0xb56>
		} else if(dilSecim == 1) {
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <menu+0xba4>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d104      	bne.n	800247a <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002470:	4a26      	ldr	r2, [pc, #152]	; (800250c <menu+0xbe8>)
 8002472:	2101      	movs	r1, #1
 8002474:	2001      	movs	r0, #1
 8002476:	f7fe f99f 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800247a:	4b25      	ldr	r3, [pc, #148]	; (8002510 <menu+0xbec>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d113      	bne.n	80024aa <menu+0xb86>
			if(dilSecim == 0) {
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <menu+0xba4>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 800248a:	4a1c      	ldr	r2, [pc, #112]	; (80024fc <menu+0xbd8>)
 800248c:	2101      	movs	r1, #1
 800248e:	2002      	movs	r0, #2
 8002490:	f7fe f992 	bl	80007b8 <lcd_print>
 8002494:	e049      	b.n	800252a <menu+0xc06>
			} else if(dilSecim == 1) {
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <menu+0xba4>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d145      	bne.n	800252a <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 800249e:	4a18      	ldr	r2, [pc, #96]	; (8002500 <menu+0xbdc>)
 80024a0:	2101      	movs	r1, #1
 80024a2:	2002      	movs	r0, #2
 80024a4:	f7fe f988 	bl	80007b8 <lcd_print>
 80024a8:	e03f      	b.n	800252a <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <menu+0xbec>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d13b      	bne.n	800252a <menu+0xc06>
			if(dilSecim == 0) {
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <menu+0xba4>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d12e      	bne.n	8002518 <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 80024ba:	4a16      	ldr	r2, [pc, #88]	; (8002514 <menu+0xbf0>)
 80024bc:	2101      	movs	r1, #1
 80024be:	2002      	movs	r0, #2
 80024c0:	f7fe f97a 	bl	80007b8 <lcd_print>
 80024c4:	e031      	b.n	800252a <menu+0xc06>
 80024c6:	bf00      	nop
 80024c8:	20000c6a 	.word	0x20000c6a
 80024cc:	0800df50 	.word	0x0800df50
 80024d0:	40010800 	.word	0x40010800
 80024d4:	20000c78 	.word	0x20000c78
 80024d8:	20000c58 	.word	0x20000c58
 80024dc:	20000c4a 	.word	0x20000c4a
 80024e0:	20000b38 	.word	0x20000b38
 80024e4:	20000c4f 	.word	0x20000c4f
 80024e8:	20000c75 	.word	0x20000c75
 80024ec:	20000c49 	.word	0x20000c49
 80024f0:	0800df60 	.word	0x0800df60
 80024f4:	0800df74 	.word	0x0800df74
 80024f8:	20000c4d 	.word	0x20000c4d
 80024fc:	0800df88 	.word	0x0800df88
 8002500:	0800df9c 	.word	0x0800df9c
 8002504:	0800dfb0 	.word	0x0800dfb0
 8002508:	0800dfc0 	.word	0x0800dfc0
 800250c:	0800dfd4 	.word	0x0800dfd4
 8002510:	20000c4e 	.word	0x20000c4e
 8002514:	0800dfe8 	.word	0x0800dfe8
			} else if(dilSecim == 1) {
 8002518:	4b92      	ldr	r3, [pc, #584]	; (8002764 <menu+0xe40>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d104      	bne.n	800252a <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 8002520:	4a91      	ldr	r2, [pc, #580]	; (8002768 <menu+0xe44>)
 8002522:	2101      	movs	r1, #1
 8002524:	2002      	movs	r0, #2
 8002526:	f7fe f947 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800252a:	2102      	movs	r1, #2
 800252c:	488f      	ldr	r0, [pc, #572]	; (800276c <menu+0xe48>)
 800252e:	f007 fd69 	bl	800a004 <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d115      	bne.n	8002564 <menu+0xc40>
 8002538:	4b8d      	ldr	r3, [pc, #564]	; (8002770 <menu+0xe4c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002546:	4b8b      	ldr	r3, [pc, #556]	; (8002774 <menu+0xe50>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <menu+0xe50>)
 8002550:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002552:	4b88      	ldr	r3, [pc, #544]	; (8002774 <menu+0xe50>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d902      	bls.n	8002560 <menu+0xc3c>
				yavaslamaLimit = 0;
 800255a:	4b86      	ldr	r3, [pc, #536]	; (8002774 <menu+0xe50>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002560:	f003 ffb2 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002564:	2104      	movs	r1, #4
 8002566:	4881      	ldr	r0, [pc, #516]	; (800276c <menu+0xe48>)
 8002568:	f007 fd4c 	bl	800a004 <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d115      	bne.n	800259e <menu+0xc7a>
 8002572:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <menu+0xe4c>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002580:	4b7c      	ldr	r3, [pc, #496]	; (8002774 <menu+0xe50>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3b01      	subs	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <menu+0xe50>)
 800258a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800258c:	4b79      	ldr	r3, [pc, #484]	; (8002774 <menu+0xe50>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <menu+0xc76>
		   		yavaslamaLimit = 1;
 8002594:	4b77      	ldr	r3, [pc, #476]	; (8002774 <menu+0xe50>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800259a:	f003 ff95 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800259e:	2108      	movs	r1, #8
 80025a0:	4872      	ldr	r0, [pc, #456]	; (800276c <menu+0xe48>)
 80025a2:	f007 fd2f 	bl	800a004 <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10d      	bne.n	80025c8 <menu+0xca4>
 80025ac:	4b70      	ldr	r3, [pc, #448]	; (8002770 <menu+0xe4c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 80025ba:	4b6e      	ldr	r3, [pc, #440]	; (8002774 <menu+0xe50>)
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	4b6e      	ldr	r3, [pc, #440]	; (8002778 <menu+0xe54>)
 80025c0:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80025c2:	4b6e      	ldr	r3, [pc, #440]	; (800277c <menu+0xe58>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80025c8:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <menu+0xe5c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	f040 80b9 	bne.w	8002744 <menu+0xe20>
		if(dilSecim == 0) {
 80025d2:	4b64      	ldr	r3, [pc, #400]	; (8002764 <menu+0xe40>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 80025da:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <menu+0xe60>)
 80025dc:	2101      	movs	r1, #1
 80025de:	2001      	movs	r0, #1
 80025e0:	f7fe f8ea 	bl	80007b8 <lcd_print>
 80025e4:	e008      	b.n	80025f8 <menu+0xcd4>
		} else if(dilSecim == 1) {
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <menu+0xe40>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d104      	bne.n	80025f8 <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80025ee:	4a66      	ldr	r2, [pc, #408]	; (8002788 <menu+0xe64>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	2001      	movs	r0, #1
 80025f4:	f7fe f8e0 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 80025f8:	4b64      	ldr	r3, [pc, #400]	; (800278c <menu+0xe68>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d113      	bne.n	8002628 <menu+0xd04>
			if(dilSecim == 0) {
 8002600:	4b58      	ldr	r3, [pc, #352]	; (8002764 <menu+0xe40>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 8002608:	4a61      	ldr	r2, [pc, #388]	; (8002790 <menu+0xe6c>)
 800260a:	2101      	movs	r1, #1
 800260c:	2002      	movs	r0, #2
 800260e:	f7fe f8d3 	bl	80007b8 <lcd_print>
 8002612:	e020      	b.n	8002656 <menu+0xd32>
			} else if(dilSecim == 1) {
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <menu+0xe40>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d11c      	bne.n	8002656 <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 800261c:	4a5d      	ldr	r2, [pc, #372]	; (8002794 <menu+0xe70>)
 800261e:	2101      	movs	r1, #1
 8002620:	2002      	movs	r0, #2
 8002622:	f7fe f8c9 	bl	80007b8 <lcd_print>
 8002626:	e016      	b.n	8002656 <menu+0xd32>
			}
		} else if(altLimit == 1) {
 8002628:	4b58      	ldr	r3, [pc, #352]	; (800278c <menu+0xe68>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d112      	bne.n	8002656 <menu+0xd32>
			if(dilSecim == 0){
 8002630:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <menu+0xe40>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 8002638:	4a57      	ldr	r2, [pc, #348]	; (8002798 <menu+0xe74>)
 800263a:	2101      	movs	r1, #1
 800263c:	2002      	movs	r0, #2
 800263e:	f7fe f8bb 	bl	80007b8 <lcd_print>
 8002642:	e008      	b.n	8002656 <menu+0xd32>
			} else if(dilSecim == 1){
 8002644:	4b47      	ldr	r3, [pc, #284]	; (8002764 <menu+0xe40>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d104      	bne.n	8002656 <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 800264c:	4a46      	ldr	r2, [pc, #280]	; (8002768 <menu+0xe44>)
 800264e:	2101      	movs	r1, #1
 8002650:	2002      	movs	r0, #2
 8002652:	f7fe f8b1 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002656:	2102      	movs	r1, #2
 8002658:	4844      	ldr	r0, [pc, #272]	; (800276c <menu+0xe48>)
 800265a:	f007 fcd3 	bl	800a004 <HAL_GPIO_ReadPin>
 800265e:	4603      	mov	r3, r0
 8002660:	2b01      	cmp	r3, #1
 8002662:	d119      	bne.n	8002698 <menu+0xd74>
 8002664:	4b42      	ldr	r3, [pc, #264]	; (8002770 <menu+0xe4c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	f083 0301 	eor.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <menu+0xd74>
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <menu+0xe78>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10e      	bne.n	8002698 <menu+0xd74>
			altLimit = altLimit + 1;
 800267a:	4b44      	ldr	r3, [pc, #272]	; (800278c <menu+0xe68>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	3301      	adds	r3, #1
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4b42      	ldr	r3, [pc, #264]	; (800278c <menu+0xe68>)
 8002684:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002686:	4b41      	ldr	r3, [pc, #260]	; (800278c <menu+0xe68>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d902      	bls.n	8002694 <menu+0xd70>
				altLimit = 0;
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <menu+0xe68>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002694:	f003 ff18 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002698:	2104      	movs	r1, #4
 800269a:	4834      	ldr	r0, [pc, #208]	; (800276c <menu+0xe48>)
 800269c:	f007 fcb2 	bl	800a004 <HAL_GPIO_ReadPin>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d119      	bne.n	80026da <menu+0xdb6>
 80026a6:	4b32      	ldr	r3, [pc, #200]	; (8002770 <menu+0xe4c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	f083 0301 	eor.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d012      	beq.n	80026da <menu+0xdb6>
 80026b4:	4b39      	ldr	r3, [pc, #228]	; (800279c <menu+0xe78>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10e      	bne.n	80026da <menu+0xdb6>
			altLimit = altLimit - 1;
 80026bc:	4b33      	ldr	r3, [pc, #204]	; (800278c <menu+0xe68>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <menu+0xe68>)
 80026c6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80026c8:	4b30      	ldr	r3, [pc, #192]	; (800278c <menu+0xe68>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <menu+0xdb2>
		   		altLimit = 1;
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <menu+0xe68>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026d6:	f003 fef7 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026da:	2108      	movs	r1, #8
 80026dc:	4823      	ldr	r0, [pc, #140]	; (800276c <menu+0xe48>)
 80026de:	f007 fc91 	bl	800a004 <HAL_GPIO_ReadPin>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d12d      	bne.n	8002744 <menu+0xe20>
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <menu+0xe4c>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f083 0301 	eor.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d026      	beq.n	8002744 <menu+0xe20>
			eepromData[5] = altLimit;
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <menu+0xe68>)
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <menu+0xe54>)
 80026fc:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80026fe:	4b23      	ldr	r3, [pc, #140]	; (800278c <menu+0xe68>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d110      	bne.n	8002728 <menu+0xe04>
 8002706:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <menu+0xe7c>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <menu+0xdf2>
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <menu+0xe7c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d108      	bne.n	8002728 <menu+0xe04>
				kapiTablaAcKonum = 3;
 8002716:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <menu+0xe7c>)
 8002718:	2203      	movs	r2, #3
 800271a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <menu+0xe7c>)
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <menu+0xe54>)
 8002722:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002726:	e00a      	b.n	800273e <menu+0xe1a>
			} else if(altLimit == 0) {
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <menu+0xe68>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <menu+0xe1a>
				platformSilindirTipi = 0;
 8002730:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <menu+0xe80>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <menu+0xe80>)
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <menu+0xe54>)
 800273c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <menu+0xe58>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <menu+0xe5c>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b06      	cmp	r3, #6
 800274a:	f040 80b6 	bne.w	80028ba <menu+0xf96>
		if(dilSecim == 0) {
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <menu+0xe40>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d12a      	bne.n	80027ac <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <menu+0xe84>)
 8002758:	2101      	movs	r1, #1
 800275a:	2001      	movs	r0, #1
 800275c:	f7fe f82c 	bl	80007b8 <lcd_print>
 8002760:	e02d      	b.n	80027be <menu+0xe9a>
 8002762:	bf00      	nop
 8002764:	20000c6a 	.word	0x20000c6a
 8002768:	0800dffc 	.word	0x0800dffc
 800276c:	40010800 	.word	0x40010800
 8002770:	20000c78 	.word	0x20000c78
 8002774:	20000c4e 	.word	0x20000c4e
 8002778:	20000b38 	.word	0x20000b38
 800277c:	20000c75 	.word	0x20000c75
 8002780:	20000c49 	.word	0x20000c49
 8002784:	0800e010 	.word	0x0800e010
 8002788:	0800e024 	.word	0x0800e024
 800278c:	20000c4f 	.word	0x20000c4f
 8002790:	0800df88 	.word	0x0800df88
 8002794:	0800df9c 	.word	0x0800df9c
 8002798:	0800dfe8 	.word	0x0800dfe8
 800279c:	20000c4a 	.word	0x20000c4a
 80027a0:	20000c56 	.word	0x20000c56
 80027a4:	20000c5c 	.word	0x20000c5c
 80027a8:	0800e038 	.word	0x0800e038
		} else if(dilSecim == 1){
 80027ac:	4b7a      	ldr	r3, [pc, #488]	; (8002998 <menu+0x1074>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d104      	bne.n	80027be <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80027b4:	4a79      	ldr	r2, [pc, #484]	; (800299c <menu+0x1078>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	2001      	movs	r0, #1
 80027ba:	f7fd fffd 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 80027be:	4b78      	ldr	r3, [pc, #480]	; (80029a0 <menu+0x107c>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d113      	bne.n	80027ee <menu+0xeca>
			if(dilSecim == 0) {
 80027c6:	4b74      	ldr	r3, [pc, #464]	; (8002998 <menu+0x1074>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 80027ce:	4a75      	ldr	r2, [pc, #468]	; (80029a4 <menu+0x1080>)
 80027d0:	2101      	movs	r1, #1
 80027d2:	2002      	movs	r0, #2
 80027d4:	f7fd fff0 	bl	80007b8 <lcd_print>
 80027d8:	e020      	b.n	800281c <menu+0xef8>
			} else if(dilSecim == 1){
 80027da:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <menu+0x1074>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d11c      	bne.n	800281c <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 80027e2:	4a71      	ldr	r2, [pc, #452]	; (80029a8 <menu+0x1084>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	2002      	movs	r0, #2
 80027e8:	f7fd ffe6 	bl	80007b8 <lcd_print>
 80027ec:	e016      	b.n	800281c <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 80027ee:	4b6c      	ldr	r3, [pc, #432]	; (80029a0 <menu+0x107c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d112      	bne.n	800281c <menu+0xef8>
			if(dilSecim == 0) {
 80027f6:	4b68      	ldr	r3, [pc, #416]	; (8002998 <menu+0x1074>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 80027fe:	4a6b      	ldr	r2, [pc, #428]	; (80029ac <menu+0x1088>)
 8002800:	2101      	movs	r1, #1
 8002802:	2002      	movs	r0, #2
 8002804:	f7fd ffd8 	bl	80007b8 <lcd_print>
 8002808:	e008      	b.n	800281c <menu+0xef8>
			} else if(dilSecim == 1) {
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <menu+0x1074>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d104      	bne.n	800281c <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 8002812:	4a67      	ldr	r2, [pc, #412]	; (80029b0 <menu+0x108c>)
 8002814:	2101      	movs	r1, #1
 8002816:	2002      	movs	r0, #2
 8002818:	f7fd ffce 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800281c:	2102      	movs	r1, #2
 800281e:	4865      	ldr	r0, [pc, #404]	; (80029b4 <menu+0x1090>)
 8002820:	f007 fbf0 	bl	800a004 <HAL_GPIO_ReadPin>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d115      	bne.n	8002856 <menu+0xf32>
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <menu+0x1094>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f083 0301 	eor.w	r3, r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00e      	beq.n	8002856 <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <menu+0x107c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <menu+0x107c>)
 8002842:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <menu+0x107c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d902      	bls.n	8002852 <menu+0xf2e>
				basincSalteri = 0;
 800284c:	4b54      	ldr	r3, [pc, #336]	; (80029a0 <menu+0x107c>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002852:	f003 fe39 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002856:	2104      	movs	r1, #4
 8002858:	4856      	ldr	r0, [pc, #344]	; (80029b4 <menu+0x1090>)
 800285a:	f007 fbd3 	bl	800a004 <HAL_GPIO_ReadPin>
 800285e:	4603      	mov	r3, r0
 8002860:	2b01      	cmp	r3, #1
 8002862:	d115      	bne.n	8002890 <menu+0xf6c>
 8002864:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <menu+0x1094>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	f083 0301 	eor.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00e      	beq.n	8002890 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 8002872:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <menu+0x107c>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	3b01      	subs	r3, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <menu+0x107c>)
 800287c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800287e:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <menu+0x107c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <menu+0xf68>
		   		basincSalteri = 1;
 8002886:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <menu+0x107c>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800288c:	f003 fe1c 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002890:	2108      	movs	r1, #8
 8002892:	4848      	ldr	r0, [pc, #288]	; (80029b4 <menu+0x1090>)
 8002894:	f007 fbb6 	bl	800a004 <HAL_GPIO_ReadPin>
 8002898:	4603      	mov	r3, r0
 800289a:	2b01      	cmp	r3, #1
 800289c:	d10d      	bne.n	80028ba <menu+0xf96>
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <menu+0x1094>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <menu+0xf96>
			eepromData[6] = basincSalteri;
 80028ac:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <menu+0x107c>)
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	4b42      	ldr	r3, [pc, #264]	; (80029bc <menu+0x1098>)
 80028b2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80028b4:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <menu+0x109c>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80028ba:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <menu+0x10a0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b07      	cmp	r3, #7
 80028c0:	f040 80f5 	bne.w	8002aae <menu+0x118a>
		if(dilSecim == 0) {
 80028c4:	4b34      	ldr	r3, [pc, #208]	; (8002998 <menu+0x1074>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80028cc:	4a3e      	ldr	r2, [pc, #248]	; (80029c8 <menu+0x10a4>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7fd ff71 	bl	80007b8 <lcd_print>
 80028d6:	e008      	b.n	80028ea <menu+0xfc6>
		} else if(dilSecim == 1){
 80028d8:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <menu+0x1074>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d104      	bne.n	80028ea <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80028e0:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <menu+0x10a8>)
 80028e2:	2101      	movs	r1, #1
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7fd ff67 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80028ea:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <menu+0x10ac>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d113      	bne.n	800291a <menu+0xff6>
			if(dilSecim == 0) {
 80028f2:	4b29      	ldr	r3, [pc, #164]	; (8002998 <menu+0x1074>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 80028fa:	4a2a      	ldr	r2, [pc, #168]	; (80029a4 <menu+0x1080>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	2002      	movs	r0, #2
 8002900:	f7fd ff5a 	bl	80007b8 <lcd_print>
 8002904:	e079      	b.n	80029fa <menu+0x10d6>
			} else if(dilSecim == 1){
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <menu+0x1074>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d175      	bne.n	80029fa <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 800290e:	4a26      	ldr	r2, [pc, #152]	; (80029a8 <menu+0x1084>)
 8002910:	2101      	movs	r1, #1
 8002912:	2002      	movs	r0, #2
 8002914:	f7fd ff50 	bl	80007b8 <lcd_print>
 8002918:	e06f      	b.n	80029fa <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <menu+0x10ac>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d113      	bne.n	800294a <menu+0x1026>
			if(dilSecim == 0) {
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <menu+0x1074>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d105      	bne.n	8002936 <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 800292a:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <menu+0x10b0>)
 800292c:	2101      	movs	r1, #1
 800292e:	2002      	movs	r0, #2
 8002930:	f7fd ff42 	bl	80007b8 <lcd_print>
 8002934:	e061      	b.n	80029fa <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <menu+0x1074>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d15d      	bne.n	80029fa <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 800293e:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <menu+0x10b4>)
 8002940:	2101      	movs	r1, #1
 8002942:	2002      	movs	r0, #2
 8002944:	f7fd ff38 	bl	80007b8 <lcd_print>
 8002948:	e057      	b.n	80029fa <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 800294a:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <menu+0x10ac>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d113      	bne.n	800297a <menu+0x1056>
			if(dilSecim == 0) {
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <menu+0x1074>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 800295a:	4a20      	ldr	r2, [pc, #128]	; (80029dc <menu+0x10b8>)
 800295c:	2101      	movs	r1, #1
 800295e:	2002      	movs	r0, #2
 8002960:	f7fd ff2a 	bl	80007b8 <lcd_print>
 8002964:	e049      	b.n	80029fa <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <menu+0x1074>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d145      	bne.n	80029fa <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 800296e:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <menu+0x10bc>)
 8002970:	2101      	movs	r1, #1
 8002972:	2002      	movs	r0, #2
 8002974:	f7fd ff20 	bl	80007b8 <lcd_print>
 8002978:	e03f      	b.n	80029fa <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <menu+0x10ac>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d13b      	bne.n	80029fa <menu+0x10d6>
			if(dilSecim == 0) {
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <menu+0x1074>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d12e      	bne.n	80029e8 <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800298a:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <menu+0x10c0>)
 800298c:	2101      	movs	r1, #1
 800298e:	2002      	movs	r0, #2
 8002990:	f7fd ff12 	bl	80007b8 <lcd_print>
 8002994:	e031      	b.n	80029fa <menu+0x10d6>
 8002996:	bf00      	nop
 8002998:	20000c6a 	.word	0x20000c6a
 800299c:	0800e048 	.word	0x0800e048
 80029a0:	20000c50 	.word	0x20000c50
 80029a4:	0800df88 	.word	0x0800df88
 80029a8:	0800df9c 	.word	0x0800df9c
 80029ac:	0800dfe8 	.word	0x0800dfe8
 80029b0:	0800dffc 	.word	0x0800dffc
 80029b4:	40010800 	.word	0x40010800
 80029b8:	20000c78 	.word	0x20000c78
 80029bc:	20000b38 	.word	0x20000b38
 80029c0:	20000c75 	.word	0x20000c75
 80029c4:	20000c49 	.word	0x20000c49
 80029c8:	0800e058 	.word	0x0800e058
 80029cc:	0800e06c 	.word	0x0800e06c
 80029d0:	20000c51 	.word	0x20000c51
 80029d4:	0800e080 	.word	0x0800e080
 80029d8:	0800e094 	.word	0x0800e094
 80029dc:	0800e0a8 	.word	0x0800e0a8
 80029e0:	0800e0bc 	.word	0x0800e0bc
 80029e4:	0800e0d0 	.word	0x0800e0d0
			} else if(dilSecim == 1){
 80029e8:	4b99      	ldr	r3, [pc, #612]	; (8002c50 <menu+0x132c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d104      	bne.n	80029fa <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80029f0:	4a98      	ldr	r2, [pc, #608]	; (8002c54 <menu+0x1330>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2002      	movs	r0, #2
 80029f6:	f7fd fedf 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029fa:	2102      	movs	r1, #2
 80029fc:	4896      	ldr	r0, [pc, #600]	; (8002c58 <menu+0x1334>)
 80029fe:	f007 fb01 	bl	800a004 <HAL_GPIO_ReadPin>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d115      	bne.n	8002a34 <menu+0x1110>
 8002a08:	4b94      	ldr	r3, [pc, #592]	; (8002c5c <menu+0x1338>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	f083 0301 	eor.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 8002a16:	4b92      	ldr	r3, [pc, #584]	; (8002c60 <menu+0x133c>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b90      	ldr	r3, [pc, #576]	; (8002c60 <menu+0x133c>)
 8002a20:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002a22:	4b8f      	ldr	r3, [pc, #572]	; (8002c60 <menu+0x133c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d902      	bls.n	8002a30 <menu+0x110c>
				kapiSecimleri = 0;
 8002a2a:	4b8d      	ldr	r3, [pc, #564]	; (8002c60 <menu+0x133c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a30:	f003 fd4a 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a34:	2104      	movs	r1, #4
 8002a36:	4888      	ldr	r0, [pc, #544]	; (8002c58 <menu+0x1334>)
 8002a38:	f007 fae4 	bl	800a004 <HAL_GPIO_ReadPin>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d115      	bne.n	8002a6e <menu+0x114a>
 8002a42:	4b86      	ldr	r3, [pc, #536]	; (8002c5c <menu+0x1338>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	f083 0301 	eor.w	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00e      	beq.n	8002a6e <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 8002a50:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <menu+0x133c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <menu+0x133c>)
 8002a5a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002a5c:	4b80      	ldr	r3, [pc, #512]	; (8002c60 <menu+0x133c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d902      	bls.n	8002a6a <menu+0x1146>
		   		kapiSecimleri = 3;
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <menu+0x133c>)
 8002a66:	2203      	movs	r2, #3
 8002a68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a6a:	f003 fd2d 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a6e:	2108      	movs	r1, #8
 8002a70:	4879      	ldr	r0, [pc, #484]	; (8002c58 <menu+0x1334>)
 8002a72:	f007 fac7 	bl	800a004 <HAL_GPIO_ReadPin>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d118      	bne.n	8002aae <menu+0x118a>
 8002a7c:	4b77      	ldr	r3, [pc, #476]	; (8002c5c <menu+0x1338>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	f083 0301 	eor.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d011      	beq.n	8002aae <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 8002a8a:	4b75      	ldr	r3, [pc, #468]	; (8002c60 <menu+0x133c>)
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <menu+0x1340>)
 8002a90:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002a92:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <menu+0x133c>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <menu+0x1184>
				altLimit = 1;
 8002a9a:	4b73      	ldr	r3, [pc, #460]	; (8002c68 <menu+0x1344>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002aa0:	4b71      	ldr	r3, [pc, #452]	; (8002c68 <menu+0x1344>)
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <menu+0x1340>)
 8002aa6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002aa8:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <menu+0x1348>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002aae:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <menu+0x134c>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	f040 8092 	bne.w	8002bdc <menu+0x12b8>
		if(dilSecim == 0) {
 8002ab8:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <menu+0x132c>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002ac0:	4a6c      	ldr	r2, [pc, #432]	; (8002c74 <menu+0x1350>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7fd fe77 	bl	80007b8 <lcd_print>
 8002aca:	e008      	b.n	8002ade <menu+0x11ba>
		} else if(dilSecim == 1) {
 8002acc:	4b60      	ldr	r3, [pc, #384]	; (8002c50 <menu+0x132c>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d104      	bne.n	8002ade <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002ad4:	4a68      	ldr	r2, [pc, #416]	; (8002c78 <menu+0x1354>)
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f7fd fe6d 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002ade:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <menu+0x1358>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d113      	bne.n	8002b0e <menu+0x11ea>
			if(dilSecim == 0) {
 8002ae6:	4b5a      	ldr	r3, [pc, #360]	; (8002c50 <menu+0x132c>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002aee:	4a64      	ldr	r2, [pc, #400]	; (8002c80 <menu+0x135c>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	2002      	movs	r0, #2
 8002af4:	f7fd fe60 	bl	80007b8 <lcd_print>
 8002af8:	e020      	b.n	8002b3c <menu+0x1218>
			} else if(dilSecim == 1) {
 8002afa:	4b55      	ldr	r3, [pc, #340]	; (8002c50 <menu+0x132c>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d11c      	bne.n	8002b3c <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 8002b02:	4a60      	ldr	r2, [pc, #384]	; (8002c84 <menu+0x1360>)
 8002b04:	2101      	movs	r1, #1
 8002b06:	2002      	movs	r0, #2
 8002b08:	f7fd fe56 	bl	80007b8 <lcd_print>
 8002b0c:	e016      	b.n	8002b3c <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 8002b0e:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <menu+0x1358>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d112      	bne.n	8002b3c <menu+0x1218>
			if(dilSecim == 0){
 8002b16:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <menu+0x132c>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d105      	bne.n	8002b2a <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002b1e:	4a5a      	ldr	r2, [pc, #360]	; (8002c88 <menu+0x1364>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	2002      	movs	r0, #2
 8002b24:	f7fd fe48 	bl	80007b8 <lcd_print>
 8002b28:	e008      	b.n	8002b3c <menu+0x1218>
			} else if(dilSecim == 1){
 8002b2a:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <menu+0x132c>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d104      	bne.n	8002b3c <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 8002b32:	4a56      	ldr	r2, [pc, #344]	; (8002c8c <menu+0x1368>)
 8002b34:	2101      	movs	r1, #1
 8002b36:	2002      	movs	r0, #2
 8002b38:	f7fd fe3e 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	4846      	ldr	r0, [pc, #280]	; (8002c58 <menu+0x1334>)
 8002b40:	f007 fa60 	bl	800a004 <HAL_GPIO_ReadPin>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d115      	bne.n	8002b76 <menu+0x1252>
 8002b4a:	4b44      	ldr	r3, [pc, #272]	; (8002c5c <menu+0x1338>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f083 0301 	eor.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00e      	beq.n	8002b76 <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 8002b58:	4b48      	ldr	r3, [pc, #288]	; (8002c7c <menu+0x1358>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <menu+0x1358>)
 8002b62:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002b64:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <menu+0x1358>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d902      	bls.n	8002b72 <menu+0x124e>
				kapiAcTipi = 0;
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <menu+0x1358>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b72:	f003 fca9 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b76:	2104      	movs	r1, #4
 8002b78:	4837      	ldr	r0, [pc, #220]	; (8002c58 <menu+0x1334>)
 8002b7a:	f007 fa43 	bl	800a004 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d115      	bne.n	8002bb0 <menu+0x128c>
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <menu+0x1338>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	f083 0301 	eor.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00e      	beq.n	8002bb0 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 8002b92:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <menu+0x1358>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4b38      	ldr	r3, [pc, #224]	; (8002c7c <menu+0x1358>)
 8002b9c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002b9e:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <menu+0x1358>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <menu+0x1288>
		   		kapiAcTipi = 1;
 8002ba6:	4b35      	ldr	r3, [pc, #212]	; (8002c7c <menu+0x1358>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bac:	f003 fc8c 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb0:	2108      	movs	r1, #8
 8002bb2:	4829      	ldr	r0, [pc, #164]	; (8002c58 <menu+0x1334>)
 8002bb4:	f007 fa26 	bl	800a004 <HAL_GPIO_ReadPin>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10e      	bne.n	8002bdc <menu+0x12b8>
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <menu+0x1338>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	f083 0301 	eor.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <menu+0x1358>)
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <menu+0x1340>)
 8002bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002bd6:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <menu+0x1348>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002bdc:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <menu+0x134c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b09      	cmp	r3, #9
 8002be2:	f040 80b9 	bne.w	8002d58 <menu+0x1434>
		if(dilSecim == 0){
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <menu+0x132c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002bee:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <menu+0x136c>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7fd fde0 	bl	80007b8 <lcd_print>
 8002bf8:	e008      	b.n	8002c0c <menu+0x12e8>
		} else if(dilSecim == 1) {
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <menu+0x132c>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d104      	bne.n	8002c0c <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002c02:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <menu+0x1370>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	2001      	movs	r0, #1
 8002c08:	f7fd fdd6 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <menu+0x1374>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 8002c14:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <menu+0x1378>)
 8002c16:	2101      	movs	r1, #1
 8002c18:	2002      	movs	r0, #2
 8002c1a:	f7fd fdcd 	bl	80007b8 <lcd_print>
 8002c1e:	e04c      	b.n	8002cba <menu+0x1396>
		} else if(kapi1Tip == 1) {
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <menu+0x1374>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d13f      	bne.n	8002ca8 <menu+0x1384>
			if(dilSecim == 0){
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <menu+0x132c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 8002c30:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <menu+0x137c>)
 8002c32:	2101      	movs	r1, #1
 8002c34:	2002      	movs	r0, #2
 8002c36:	f7fd fdbf 	bl	80007b8 <lcd_print>
 8002c3a:	e03e      	b.n	8002cba <menu+0x1396>
			} else if(dilSecim == 1) {
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <menu+0x132c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d13a      	bne.n	8002cba <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 8002c44:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <menu+0x1380>)
 8002c46:	2101      	movs	r1, #1
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f7fd fdb5 	bl	80007b8 <lcd_print>
 8002c4e:	e034      	b.n	8002cba <menu+0x1396>
 8002c50:	20000c6a 	.word	0x20000c6a
 8002c54:	0800e0e4 	.word	0x0800e0e4
 8002c58:	40010800 	.word	0x40010800
 8002c5c:	20000c78 	.word	0x20000c78
 8002c60:	20000c51 	.word	0x20000c51
 8002c64:	20000b38 	.word	0x20000b38
 8002c68:	20000c4f 	.word	0x20000c4f
 8002c6c:	20000c75 	.word	0x20000c75
 8002c70:	20000c49 	.word	0x20000c49
 8002c74:	0800e0f8 	.word	0x0800e0f8
 8002c78:	0800e10c 	.word	0x0800e10c
 8002c7c:	20000c55 	.word	0x20000c55
 8002c80:	0800e120 	.word	0x0800e120
 8002c84:	0800e130 	.word	0x0800e130
 8002c88:	0800e140 	.word	0x0800e140
 8002c8c:	0800e154 	.word	0x0800e154
 8002c90:	0800e168 	.word	0x0800e168
 8002c94:	0800e17c 	.word	0x0800e17c
 8002c98:	20000c52 	.word	0x20000c52
 8002c9c:	0800e190 	.word	0x0800e190
 8002ca0:	0800e1a4 	.word	0x0800e1a4
 8002ca4:	0800e1b4 	.word	0x0800e1b4
			}
		} else if(kapi1Tip == 2) {
 8002ca8:	4b8a      	ldr	r3, [pc, #552]	; (8002ed4 <menu+0x15b0>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d104      	bne.n	8002cba <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 8002cb0:	4a89      	ldr	r2, [pc, #548]	; (8002ed8 <menu+0x15b4>)
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	f7fd fd7f 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4887      	ldr	r0, [pc, #540]	; (8002edc <menu+0x15b8>)
 8002cbe:	f007 f9a1 	bl	800a004 <HAL_GPIO_ReadPin>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d115      	bne.n	8002cf4 <menu+0x13d0>
 8002cc8:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <menu+0x15bc>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	f083 0301 	eor.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00e      	beq.n	8002cf4 <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 8002cd6:	4b7f      	ldr	r3, [pc, #508]	; (8002ed4 <menu+0x15b0>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b7d      	ldr	r3, [pc, #500]	; (8002ed4 <menu+0x15b0>)
 8002ce0:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002ce2:	4b7c      	ldr	r3, [pc, #496]	; (8002ed4 <menu+0x15b0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d902      	bls.n	8002cf0 <menu+0x13cc>
				kapi1Tip = 0;
 8002cea:	4b7a      	ldr	r3, [pc, #488]	; (8002ed4 <menu+0x15b0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cf0:	f003 fbea 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf4:	2104      	movs	r1, #4
 8002cf6:	4879      	ldr	r0, [pc, #484]	; (8002edc <menu+0x15b8>)
 8002cf8:	f007 f984 	bl	800a004 <HAL_GPIO_ReadPin>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d115      	bne.n	8002d2e <menu+0x140a>
 8002d02:	4b77      	ldr	r3, [pc, #476]	; (8002ee0 <menu+0x15bc>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	f083 0301 	eor.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00e      	beq.n	8002d2e <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 8002d10:	4b70      	ldr	r3, [pc, #448]	; (8002ed4 <menu+0x15b0>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b6e      	ldr	r3, [pc, #440]	; (8002ed4 <menu+0x15b0>)
 8002d1a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002d1c:	4b6d      	ldr	r3, [pc, #436]	; (8002ed4 <menu+0x15b0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d902      	bls.n	8002d2a <menu+0x1406>
		   		kapi1Tip = 2;
 8002d24:	4b6b      	ldr	r3, [pc, #428]	; (8002ed4 <menu+0x15b0>)
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d2a:	f003 fbcd 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d2e:	2108      	movs	r1, #8
 8002d30:	486a      	ldr	r0, [pc, #424]	; (8002edc <menu+0x15b8>)
 8002d32:	f007 f967 	bl	800a004 <HAL_GPIO_ReadPin>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10d      	bne.n	8002d58 <menu+0x1434>
 8002d3c:	4b68      	ldr	r3, [pc, #416]	; (8002ee0 <menu+0x15bc>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	f083 0301 	eor.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <menu+0x1434>
			eepromData[8] = kapi1Tip;
 8002d4a:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <menu+0x15b0>)
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <menu+0x15c0>)
 8002d50:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002d52:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <menu+0x15c4>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002d58:	4b64      	ldr	r3, [pc, #400]	; (8002eec <menu+0x15c8>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b0a      	cmp	r3, #10
 8002d5e:	d17f      	bne.n	8002e60 <menu+0x153c>
		if(dilSecim == 0) {
 8002d60:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <menu+0x15cc>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002d68:	4a62      	ldr	r2, [pc, #392]	; (8002ef4 <menu+0x15d0>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f7fd fd23 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002d72:	4a61      	ldr	r2, [pc, #388]	; (8002ef8 <menu+0x15d4>)
 8002d74:	2101      	movs	r1, #1
 8002d76:	2002      	movs	r0, #2
 8002d78:	f7fd fd1e 	bl	80007b8 <lcd_print>
 8002d7c:	e00d      	b.n	8002d9a <menu+0x1476>
		} else if(dilSecim == 1) {
 8002d7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ef0 <menu+0x15cc>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d109      	bne.n	8002d9a <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002d86:	4a5d      	ldr	r2, [pc, #372]	; (8002efc <menu+0x15d8>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f7fd fd14 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d90:	4a5b      	ldr	r2, [pc, #364]	; (8002f00 <menu+0x15dc>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	2002      	movs	r0, #2
 8002d96:	f7fd fd0f 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002d9a:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <menu+0x15e0>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	220a      	movs	r2, #10
 8002da0:	4959      	ldr	r1, [pc, #356]	; (8002f08 <menu+0x15e4>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f00a f95a 	bl	800d05c <itoa>
		lcd_print(2,16,snum);
 8002da8:	4a57      	ldr	r2, [pc, #348]	; (8002f08 <menu+0x15e4>)
 8002daa:	2110      	movs	r1, #16
 8002dac:	2002      	movs	r0, #2
 8002dae:	f7fd fd03 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002db2:	2102      	movs	r1, #2
 8002db4:	4849      	ldr	r0, [pc, #292]	; (8002edc <menu+0x15b8>)
 8002db6:	f007 f925 	bl	800a004 <HAL_GPIO_ReadPin>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d119      	bne.n	8002df4 <menu+0x14d0>
 8002dc0:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <menu+0x15bc>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f083 0301 	eor.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <menu+0x14d0>
 8002dce:	4b41      	ldr	r3, [pc, #260]	; (8002ed4 <menu+0x15b0>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 8002dd6:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <menu+0x15e0>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <menu+0x15e0>)
 8002de0:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002de2:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <menu+0x15e0>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d902      	bls.n	8002df0 <menu+0x14cc>
				kapi1AcSure = 0;
 8002dea:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <menu+0x15e0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002df0:	f003 fb6a 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002df4:	2104      	movs	r1, #4
 8002df6:	4839      	ldr	r0, [pc, #228]	; (8002edc <menu+0x15b8>)
 8002df8:	f007 f904 	bl	800a004 <HAL_GPIO_ReadPin>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d119      	bne.n	8002e36 <menu+0x1512>
 8002e02:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <menu+0x15bc>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	f083 0301 	eor.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d012      	beq.n	8002e36 <menu+0x1512>
 8002e10:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <menu+0x15b0>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10e      	bne.n	8002e36 <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 8002e18:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <menu+0x15e0>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <menu+0x15e0>)
 8002e22:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002e24:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <menu+0x15e0>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b06      	cmp	r3, #6
 8002e2a:	d902      	bls.n	8002e32 <menu+0x150e>
		   		kapi1AcSure = 5;
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <menu+0x15e0>)
 8002e2e:	2205      	movs	r2, #5
 8002e30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e32:	f003 fb49 	bl	80064c8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e36:	2108      	movs	r1, #8
 8002e38:	4828      	ldr	r0, [pc, #160]	; (8002edc <menu+0x15b8>)
 8002e3a:	f007 f8e3 	bl	800a004 <HAL_GPIO_ReadPin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10d      	bne.n	8002e60 <menu+0x153c>
 8002e44:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <menu+0x15bc>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	f083 0301 	eor.w	r3, r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <menu+0x15e0>)
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <menu+0x15c0>)
 8002e58:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <menu+0x15c4>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <menu+0x15c8>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b0b      	cmp	r3, #11
 8002e66:	f040 80b5 	bne.w	8002fd4 <menu+0x16b0>
		if(dilSecim == 0) {
 8002e6a:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <menu+0x15cc>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d105      	bne.n	8002e7e <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002e72:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <menu+0x15e8>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7fd fc9e 	bl	80007b8 <lcd_print>
 8002e7c:	e008      	b.n	8002e90 <menu+0x156c>
		} else if(dilSecim == 1) {
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <menu+0x15cc>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d104      	bne.n	8002e90 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002e86:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <menu+0x15ec>)
 8002e88:	2101      	movs	r1, #1
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f7fd fc94 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <menu+0x15f0>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <menu+0x15f4>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	f7fd fc8b 	bl	80007b8 <lcd_print>
 8002ea2:	e048      	b.n	8002f36 <menu+0x1612>
		} else if(kapi2Tip == 1) {
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <menu+0x15f0>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d13b      	bne.n	8002f24 <menu+0x1600>
			if(dilSecim == 0) {
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <menu+0x15cc>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <menu+0x15f8>)
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f7fd fc7d 	bl	80007b8 <lcd_print>
 8002ebe:	e03a      	b.n	8002f36 <menu+0x1612>
			} else if(dilSecim == 1) {
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <menu+0x15cc>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d136      	bne.n	8002f36 <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 8002ec8:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <menu+0x15fc>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f7fd fc73 	bl	80007b8 <lcd_print>
 8002ed2:	e030      	b.n	8002f36 <menu+0x1612>
 8002ed4:	20000c52 	.word	0x20000c52
 8002ed8:	0800e1c8 	.word	0x0800e1c8
 8002edc:	40010800 	.word	0x40010800
 8002ee0:	20000c78 	.word	0x20000c78
 8002ee4:	20000b38 	.word	0x20000b38
 8002ee8:	20000c75 	.word	0x20000c75
 8002eec:	20000c49 	.word	0x20000c49
 8002ef0:	20000c6a 	.word	0x20000c6a
 8002ef4:	0800e1d8 	.word	0x0800e1d8
 8002ef8:	0800e1ec 	.word	0x0800e1ec
 8002efc:	0800e1fc 	.word	0x0800e1fc
 8002f00:	0800e210 	.word	0x0800e210
 8002f04:	20000c62 	.word	0x20000c62
 8002f08:	20000bcc 	.word	0x20000bcc
 8002f0c:	0800e220 	.word	0x0800e220
 8002f10:	0800e234 	.word	0x0800e234
 8002f14:	20000c53 	.word	0x20000c53
 8002f18:	0800e190 	.word	0x0800e190
 8002f1c:	0800e1a4 	.word	0x0800e1a4
 8002f20:	0800e1b4 	.word	0x0800e1b4
			}
		} else if(kapi2Tip == 2) {
 8002f24:	4b8a      	ldr	r3, [pc, #552]	; (8003150 <menu+0x182c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d104      	bne.n	8002f36 <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8002f2c:	4a89      	ldr	r2, [pc, #548]	; (8003154 <menu+0x1830>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2002      	movs	r0, #2
 8002f32:	f7fd fc41 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f36:	2102      	movs	r1, #2
 8002f38:	4887      	ldr	r0, [pc, #540]	; (8003158 <menu+0x1834>)
 8002f3a:	f007 f863 	bl	800a004 <HAL_GPIO_ReadPin>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d115      	bne.n	8002f70 <menu+0x164c>
 8002f44:	4b85      	ldr	r3, [pc, #532]	; (800315c <menu+0x1838>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	f083 0301 	eor.w	r3, r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00e      	beq.n	8002f70 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 8002f52:	4b7f      	ldr	r3, [pc, #508]	; (8003150 <menu+0x182c>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	3301      	adds	r3, #1
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4b7d      	ldr	r3, [pc, #500]	; (8003150 <menu+0x182c>)
 8002f5c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002f5e:	4b7c      	ldr	r3, [pc, #496]	; (8003150 <menu+0x182c>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d902      	bls.n	8002f6c <menu+0x1648>
				kapi2Tip = 0;
 8002f66:	4b7a      	ldr	r3, [pc, #488]	; (8003150 <menu+0x182c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f6c:	f003 faac 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f70:	2104      	movs	r1, #4
 8002f72:	4879      	ldr	r0, [pc, #484]	; (8003158 <menu+0x1834>)
 8002f74:	f007 f846 	bl	800a004 <HAL_GPIO_ReadPin>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d115      	bne.n	8002faa <menu+0x1686>
 8002f7e:	4b77      	ldr	r3, [pc, #476]	; (800315c <menu+0x1838>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	f083 0301 	eor.w	r3, r3, #1
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00e      	beq.n	8002faa <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 8002f8c:	4b70      	ldr	r3, [pc, #448]	; (8003150 <menu+0x182c>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <menu+0x182c>)
 8002f96:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002f98:	4b6d      	ldr	r3, [pc, #436]	; (8003150 <menu+0x182c>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d902      	bls.n	8002fa6 <menu+0x1682>
		   		kapi2Tip = 2;
 8002fa0:	4b6b      	ldr	r3, [pc, #428]	; (8003150 <menu+0x182c>)
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fa6:	f003 fa8f 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002faa:	2108      	movs	r1, #8
 8002fac:	486a      	ldr	r0, [pc, #424]	; (8003158 <menu+0x1834>)
 8002fae:	f007 f829 	bl	800a004 <HAL_GPIO_ReadPin>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10d      	bne.n	8002fd4 <menu+0x16b0>
 8002fb8:	4b68      	ldr	r3, [pc, #416]	; (800315c <menu+0x1838>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	f083 0301 	eor.w	r3, r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 8002fc6:	4b62      	ldr	r3, [pc, #392]	; (8003150 <menu+0x182c>)
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	4b65      	ldr	r3, [pc, #404]	; (8003160 <menu+0x183c>)
 8002fcc:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002fce:	4b65      	ldr	r3, [pc, #404]	; (8003164 <menu+0x1840>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002fd4:	4b64      	ldr	r3, [pc, #400]	; (8003168 <menu+0x1844>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	d17f      	bne.n	80030dc <menu+0x17b8>
		if(dilSecim == 0) {
 8002fdc:	4b63      	ldr	r3, [pc, #396]	; (800316c <menu+0x1848>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002fe4:	4a62      	ldr	r2, [pc, #392]	; (8003170 <menu+0x184c>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7fd fbe5 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002fee:	4a61      	ldr	r2, [pc, #388]	; (8003174 <menu+0x1850>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	2002      	movs	r0, #2
 8002ff4:	f7fd fbe0 	bl	80007b8 <lcd_print>
 8002ff8:	e00d      	b.n	8003016 <menu+0x16f2>
		} else if(dilSecim == 1) {
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	; (800316c <menu+0x1848>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d109      	bne.n	8003016 <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8003002:	4a5d      	ldr	r2, [pc, #372]	; (8003178 <menu+0x1854>)
 8003004:	2101      	movs	r1, #1
 8003006:	2001      	movs	r0, #1
 8003008:	f7fd fbd6 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800300c:	4a5b      	ldr	r2, [pc, #364]	; (800317c <menu+0x1858>)
 800300e:	2101      	movs	r1, #1
 8003010:	2002      	movs	r0, #2
 8003012:	f7fd fbd1 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8003016:	4b5a      	ldr	r3, [pc, #360]	; (8003180 <menu+0x185c>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	220a      	movs	r2, #10
 800301c:	4959      	ldr	r1, [pc, #356]	; (8003184 <menu+0x1860>)
 800301e:	4618      	mov	r0, r3
 8003020:	f00a f81c 	bl	800d05c <itoa>
		lcd_print(2,16,snum);
 8003024:	4a57      	ldr	r2, [pc, #348]	; (8003184 <menu+0x1860>)
 8003026:	2110      	movs	r1, #16
 8003028:	2002      	movs	r0, #2
 800302a:	f7fd fbc5 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800302e:	2102      	movs	r1, #2
 8003030:	4849      	ldr	r0, [pc, #292]	; (8003158 <menu+0x1834>)
 8003032:	f006 ffe7 	bl	800a004 <HAL_GPIO_ReadPin>
 8003036:	4603      	mov	r3, r0
 8003038:	2b01      	cmp	r3, #1
 800303a:	d119      	bne.n	8003070 <menu+0x174c>
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <menu+0x1838>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	f083 0301 	eor.w	r3, r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <menu+0x174c>
 800304a:	4b41      	ldr	r3, [pc, #260]	; (8003150 <menu+0x182c>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10e      	bne.n	8003070 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 8003052:	4b4b      	ldr	r3, [pc, #300]	; (8003180 <menu+0x185c>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <menu+0x185c>)
 800305c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800305e:	4b48      	ldr	r3, [pc, #288]	; (8003180 <menu+0x185c>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d902      	bls.n	800306c <menu+0x1748>
				kapi2AcSure = 0;
 8003066:	4b46      	ldr	r3, [pc, #280]	; (8003180 <menu+0x185c>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800306c:	f003 fa2c 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8003070:	2104      	movs	r1, #4
 8003072:	4839      	ldr	r0, [pc, #228]	; (8003158 <menu+0x1834>)
 8003074:	f006 ffc6 	bl	800a004 <HAL_GPIO_ReadPin>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d119      	bne.n	80030b2 <menu+0x178e>
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <menu+0x1838>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	f083 0301 	eor.w	r3, r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <menu+0x178e>
 800308c:	4b30      	ldr	r3, [pc, #192]	; (8003150 <menu+0x182c>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10e      	bne.n	80030b2 <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 8003094:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <menu+0x185c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	4b38      	ldr	r3, [pc, #224]	; (8003180 <menu+0x185c>)
 800309e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <menu+0x185c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b06      	cmp	r3, #6
 80030a6:	d902      	bls.n	80030ae <menu+0x178a>
		   		kapi2AcSure = 5;
 80030a8:	4b35      	ldr	r3, [pc, #212]	; (8003180 <menu+0x185c>)
 80030aa:	2205      	movs	r2, #5
 80030ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030ae:	f003 fa0b 	bl	80064c8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b2:	2108      	movs	r1, #8
 80030b4:	4828      	ldr	r0, [pc, #160]	; (8003158 <menu+0x1834>)
 80030b6:	f006 ffa5 	bl	800a004 <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10d      	bne.n	80030dc <menu+0x17b8>
 80030c0:	4b26      	ldr	r3, [pc, #152]	; (800315c <menu+0x1838>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <menu+0x185c>)
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	4b23      	ldr	r3, [pc, #140]	; (8003160 <menu+0x183c>)
 80030d4:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80030d6:	4b23      	ldr	r3, [pc, #140]	; (8003164 <menu+0x1840>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <menu+0x1844>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b0d      	cmp	r3, #13
 80030e2:	f040 80b5 	bne.w	8003250 <menu+0x192c>
		if(dilSecim == 0) {
 80030e6:	4b21      	ldr	r3, [pc, #132]	; (800316c <menu+0x1848>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d105      	bne.n	80030fa <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80030ee:	4a26      	ldr	r2, [pc, #152]	; (8003188 <menu+0x1864>)
 80030f0:	2101      	movs	r1, #1
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7fd fb60 	bl	80007b8 <lcd_print>
 80030f8:	e008      	b.n	800310c <menu+0x17e8>
		} else if(dilSecim == 1){
 80030fa:	4b1c      	ldr	r3, [pc, #112]	; (800316c <menu+0x1848>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d104      	bne.n	800310c <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8003102:	4a22      	ldr	r2, [pc, #136]	; (800318c <menu+0x1868>)
 8003104:	2101      	movs	r1, #1
 8003106:	2001      	movs	r0, #1
 8003108:	f7fd fb56 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 800310c:	4b20      	ldr	r3, [pc, #128]	; (8003190 <menu+0x186c>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <menu+0x1870>)
 8003116:	2101      	movs	r1, #1
 8003118:	2002      	movs	r0, #2
 800311a:	f7fd fb4d 	bl	80007b8 <lcd_print>
 800311e:	e048      	b.n	80031b2 <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <menu+0x186c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d13b      	bne.n	80031a0 <menu+0x187c>
			if(dilSecim == 0) {
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <menu+0x1848>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8003130:	4a19      	ldr	r2, [pc, #100]	; (8003198 <menu+0x1874>)
 8003132:	2101      	movs	r1, #1
 8003134:	2002      	movs	r0, #2
 8003136:	f7fd fb3f 	bl	80007b8 <lcd_print>
 800313a:	e03a      	b.n	80031b2 <menu+0x188e>
			} else if(dilSecim == 1) {
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <menu+0x1848>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d136      	bne.n	80031b2 <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <menu+0x1878>)
 8003146:	2101      	movs	r1, #1
 8003148:	2002      	movs	r0, #2
 800314a:	f7fd fb35 	bl	80007b8 <lcd_print>
 800314e:	e030      	b.n	80031b2 <menu+0x188e>
 8003150:	20000c53 	.word	0x20000c53
 8003154:	0800e1c8 	.word	0x0800e1c8
 8003158:	40010800 	.word	0x40010800
 800315c:	20000c78 	.word	0x20000c78
 8003160:	20000b38 	.word	0x20000b38
 8003164:	20000c75 	.word	0x20000c75
 8003168:	20000c49 	.word	0x20000c49
 800316c:	20000c6a 	.word	0x20000c6a
 8003170:	0800e248 	.word	0x0800e248
 8003174:	0800e1ec 	.word	0x0800e1ec
 8003178:	0800e25c 	.word	0x0800e25c
 800317c:	0800e210 	.word	0x0800e210
 8003180:	20000c63 	.word	0x20000c63
 8003184:	20000bcc 	.word	0x20000bcc
 8003188:	0800e270 	.word	0x0800e270
 800318c:	0800e284 	.word	0x0800e284
 8003190:	20000c54 	.word	0x20000c54
 8003194:	0800e190 	.word	0x0800e190
 8003198:	0800e1a4 	.word	0x0800e1a4
 800319c:	0800e1b4 	.word	0x0800e1b4
			}
		} else if(kapitablaTip == 2) {
 80031a0:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <menu+0x19ec>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d104      	bne.n	80031b2 <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 80031a8:	4a5a      	ldr	r2, [pc, #360]	; (8003314 <menu+0x19f0>)
 80031aa:	2101      	movs	r1, #1
 80031ac:	2002      	movs	r0, #2
 80031ae:	f7fd fb03 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b2:	2102      	movs	r1, #2
 80031b4:	4858      	ldr	r0, [pc, #352]	; (8003318 <menu+0x19f4>)
 80031b6:	f006 ff25 	bl	800a004 <HAL_GPIO_ReadPin>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d115      	bne.n	80031ec <menu+0x18c8>
 80031c0:	4b56      	ldr	r3, [pc, #344]	; (800331c <menu+0x19f8>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	f083 0301 	eor.w	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00e      	beq.n	80031ec <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 80031ce:	4b50      	ldr	r3, [pc, #320]	; (8003310 <menu+0x19ec>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <menu+0x19ec>)
 80031d8:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80031da:	4b4d      	ldr	r3, [pc, #308]	; (8003310 <menu+0x19ec>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d902      	bls.n	80031e8 <menu+0x18c4>
				kapitablaTip = 0;
 80031e2:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <menu+0x19ec>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031e8:	f003 f96e 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ec:	2104      	movs	r1, #4
 80031ee:	484a      	ldr	r0, [pc, #296]	; (8003318 <menu+0x19f4>)
 80031f0:	f006 ff08 	bl	800a004 <HAL_GPIO_ReadPin>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d115      	bne.n	8003226 <menu+0x1902>
 80031fa:	4b48      	ldr	r3, [pc, #288]	; (800331c <menu+0x19f8>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	f083 0301 	eor.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8003208:	4b41      	ldr	r3, [pc, #260]	; (8003310 <menu+0x19ec>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	3b01      	subs	r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <menu+0x19ec>)
 8003212:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8003214:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <menu+0x19ec>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d902      	bls.n	8003222 <menu+0x18fe>
		   		kapitablaTip = 2;
 800321c:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <menu+0x19ec>)
 800321e:	2202      	movs	r2, #2
 8003220:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003222:	f003 f951 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003226:	2108      	movs	r1, #8
 8003228:	483b      	ldr	r0, [pc, #236]	; (8003318 <menu+0x19f4>)
 800322a:	f006 feeb 	bl	800a004 <HAL_GPIO_ReadPin>
 800322e:	4603      	mov	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	d10d      	bne.n	8003250 <menu+0x192c>
 8003234:	4b39      	ldr	r3, [pc, #228]	; (800331c <menu+0x19f8>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	f083 0301 	eor.w	r3, r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 8003242:	4b33      	ldr	r3, [pc, #204]	; (8003310 <menu+0x19ec>)
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	4b36      	ldr	r3, [pc, #216]	; (8003320 <menu+0x19fc>)
 8003248:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 800324a:	4b36      	ldr	r3, [pc, #216]	; (8003324 <menu+0x1a00>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8003250:	4b35      	ldr	r3, [pc, #212]	; (8003328 <menu+0x1a04>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b0e      	cmp	r3, #14
 8003256:	f040 80f2 	bne.w	800343e <menu+0x1b1a>
		if(dilSecim == 0) {
 800325a:	4b34      	ldr	r3, [pc, #208]	; (800332c <menu+0x1a08>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8003262:	4a33      	ldr	r2, [pc, #204]	; (8003330 <menu+0x1a0c>)
 8003264:	2101      	movs	r1, #1
 8003266:	2001      	movs	r0, #1
 8003268:	f7fd faa6 	bl	80007b8 <lcd_print>
 800326c:	e008      	b.n	8003280 <menu+0x195c>
		} else if(dilSecim == 1) {
 800326e:	4b2f      	ldr	r3, [pc, #188]	; (800332c <menu+0x1a08>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d104      	bne.n	8003280 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8003276:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <menu+0x1a10>)
 8003278:	2101      	movs	r1, #1
 800327a:	2001      	movs	r0, #1
 800327c:	f7fd fa9c 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8003280:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <menu+0x1a14>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d113      	bne.n	80032b0 <menu+0x198c>
			if(dilSecim == 0){
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <menu+0x1a08>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 8003290:	4a2a      	ldr	r2, [pc, #168]	; (800333c <menu+0x1a18>)
 8003292:	2101      	movs	r1, #1
 8003294:	2002      	movs	r0, #2
 8003296:	f7fd fa8f 	bl	80007b8 <lcd_print>
 800329a:	e071      	b.n	8003380 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <menu+0x1a08>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d16d      	bne.n	8003380 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 80032a4:	4a26      	ldr	r2, [pc, #152]	; (8003340 <menu+0x1a1c>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	2002      	movs	r0, #2
 80032aa:	f7fd fa85 	bl	80007b8 <lcd_print>
 80032ae:	e067      	b.n	8003380 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 80032b0:	4b21      	ldr	r3, [pc, #132]	; (8003338 <menu+0x1a14>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d112      	bne.n	80032de <menu+0x19ba>
			if(dilSecim == 0){
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <menu+0x1a08>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 80032c0:	4a20      	ldr	r2, [pc, #128]	; (8003344 <menu+0x1a20>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	2002      	movs	r0, #2
 80032c6:	f7fd fa77 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <menu+0x1a08>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d156      	bne.n	8003380 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 80032d2:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <menu+0x1a24>)
 80032d4:	2101      	movs	r1, #1
 80032d6:	2002      	movs	r0, #2
 80032d8:	f7fd fa6e 	bl	80007b8 <lcd_print>
 80032dc:	e050      	b.n	8003380 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <menu+0x1a14>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d136      	bne.n	8003354 <menu+0x1a30>
			if(dilSecim == 0){
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <menu+0x1a08>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 80032ee:	4a17      	ldr	r2, [pc, #92]	; (800334c <menu+0x1a28>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	2002      	movs	r0, #2
 80032f4:	f7fd fa60 	bl	80007b8 <lcd_print>
 80032f8:	e042      	b.n	8003380 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <menu+0x1a08>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d13e      	bne.n	8003380 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 8003302:	4a13      	ldr	r2, [pc, #76]	; (8003350 <menu+0x1a2c>)
 8003304:	2101      	movs	r1, #1
 8003306:	2002      	movs	r0, #2
 8003308:	f7fd fa56 	bl	80007b8 <lcd_print>
 800330c:	e038      	b.n	8003380 <menu+0x1a5c>
 800330e:	bf00      	nop
 8003310:	20000c54 	.word	0x20000c54
 8003314:	0800e1c8 	.word	0x0800e1c8
 8003318:	40010800 	.word	0x40010800
 800331c:	20000c78 	.word	0x20000c78
 8003320:	20000b38 	.word	0x20000b38
 8003324:	20000c75 	.word	0x20000c75
 8003328:	20000c49 	.word	0x20000c49
 800332c:	20000c6a 	.word	0x20000c6a
 8003330:	0800e298 	.word	0x0800e298
 8003334:	0800e2ac 	.word	0x0800e2ac
 8003338:	20000c56 	.word	0x20000c56
 800333c:	0800e2c0 	.word	0x0800e2c0
 8003340:	0800e2d0 	.word	0x0800e2d0
 8003344:	0800e2e0 	.word	0x0800e2e0
 8003348:	0800e2f0 	.word	0x0800e2f0
 800334c:	0800e300 	.word	0x0800e300
 8003350:	0800e314 	.word	0x0800e314
			}
		} else if(kapiTablaAcKonum == 3) {
 8003354:	4b9b      	ldr	r3, [pc, #620]	; (80035c4 <menu+0x1ca0>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d111      	bne.n	8003380 <menu+0x1a5c>
			if(dilSecim == 0) {
 800335c:	4b9a      	ldr	r3, [pc, #616]	; (80035c8 <menu+0x1ca4>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 8003364:	4a99      	ldr	r2, [pc, #612]	; (80035cc <menu+0x1ca8>)
 8003366:	2101      	movs	r1, #1
 8003368:	2002      	movs	r0, #2
 800336a:	f7fd fa25 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 800336e:	4b96      	ldr	r3, [pc, #600]	; (80035c8 <menu+0x1ca4>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d104      	bne.n	8003380 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 8003376:	4a96      	ldr	r2, [pc, #600]	; (80035d0 <menu+0x1cac>)
 8003378:	2101      	movs	r1, #1
 800337a:	2002      	movs	r0, #2
 800337c:	f7fd fa1c 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003380:	2102      	movs	r1, #2
 8003382:	4894      	ldr	r0, [pc, #592]	; (80035d4 <menu+0x1cb0>)
 8003384:	f006 fe3e 	bl	800a004 <HAL_GPIO_ReadPin>
 8003388:	4603      	mov	r3, r0
 800338a:	2b01      	cmp	r3, #1
 800338c:	d115      	bne.n	80033ba <menu+0x1a96>
 800338e:	4b92      	ldr	r3, [pc, #584]	; (80035d8 <menu+0x1cb4>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	f083 0301 	eor.w	r3, r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00e      	beq.n	80033ba <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800339c:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <menu+0x1ca0>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	4b87      	ldr	r3, [pc, #540]	; (80035c4 <menu+0x1ca0>)
 80033a6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80033a8:	4b86      	ldr	r3, [pc, #536]	; (80035c4 <menu+0x1ca0>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d902      	bls.n	80033b6 <menu+0x1a92>
				kapiTablaAcKonum = 0;
 80033b0:	4b84      	ldr	r3, [pc, #528]	; (80035c4 <menu+0x1ca0>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033b6:	f003 f887 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ba:	2104      	movs	r1, #4
 80033bc:	4885      	ldr	r0, [pc, #532]	; (80035d4 <menu+0x1cb0>)
 80033be:	f006 fe21 	bl	800a004 <HAL_GPIO_ReadPin>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d115      	bne.n	80033f4 <menu+0x1ad0>
 80033c8:	4b83      	ldr	r3, [pc, #524]	; (80035d8 <menu+0x1cb4>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	f083 0301 	eor.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00e      	beq.n	80033f4 <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80033d6:	4b7b      	ldr	r3, [pc, #492]	; (80035c4 <menu+0x1ca0>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	3b01      	subs	r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <menu+0x1ca0>)
 80033e0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80033e2:	4b78      	ldr	r3, [pc, #480]	; (80035c4 <menu+0x1ca0>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d902      	bls.n	80033f0 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <menu+0x1ca0>)
 80033ec:	2202      	movs	r2, #2
 80033ee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033f0:	f003 f86a 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f4:	2108      	movs	r1, #8
 80033f6:	4877      	ldr	r0, [pc, #476]	; (80035d4 <menu+0x1cb0>)
 80033f8:	f006 fe04 	bl	800a004 <HAL_GPIO_ReadPin>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d11d      	bne.n	800343e <menu+0x1b1a>
 8003402:	4b75      	ldr	r3, [pc, #468]	; (80035d8 <menu+0x1cb4>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	f083 0301 	eor.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d016      	beq.n	800343e <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 8003410:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <menu+0x1ca0>)
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	4b71      	ldr	r3, [pc, #452]	; (80035dc <menu+0x1cb8>)
 8003416:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <menu+0x1ca0>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <menu+0x1b06>
 8003422:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <menu+0x1ca0>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d106      	bne.n	8003438 <menu+0x1b14>
				altLimit = 1;
 800342a:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <menu+0x1cbc>)
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003430:	4b6b      	ldr	r3, [pc, #428]	; (80035e0 <menu+0x1cbc>)
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	4b69      	ldr	r3, [pc, #420]	; (80035dc <menu+0x1cb8>)
 8003436:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <menu+0x1cc0>)
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800343e:	4b6a      	ldr	r3, [pc, #424]	; (80035e8 <menu+0x1cc4>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	d17f      	bne.n	8003546 <menu+0x1c22>
		if(dilSecim == 0) {
 8003446:	4b60      	ldr	r3, [pc, #384]	; (80035c8 <menu+0x1ca4>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800344e:	4a67      	ldr	r2, [pc, #412]	; (80035ec <menu+0x1cc8>)
 8003450:	2101      	movs	r1, #1
 8003452:	2001      	movs	r0, #1
 8003454:	f7fd f9b0 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003458:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <menu+0x1ccc>)
 800345a:	2101      	movs	r1, #1
 800345c:	2002      	movs	r0, #2
 800345e:	f7fd f9ab 	bl	80007b8 <lcd_print>
 8003462:	e00d      	b.n	8003480 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 8003464:	4b58      	ldr	r3, [pc, #352]	; (80035c8 <menu+0x1ca4>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d109      	bne.n	8003480 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800346c:	4a61      	ldr	r2, [pc, #388]	; (80035f4 <menu+0x1cd0>)
 800346e:	2101      	movs	r1, #1
 8003470:	2001      	movs	r0, #1
 8003472:	f7fd f9a1 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003476:	4a60      	ldr	r2, [pc, #384]	; (80035f8 <menu+0x1cd4>)
 8003478:	2101      	movs	r1, #1
 800347a:	2002      	movs	r0, #2
 800347c:	f7fd f99c 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003480:	4b5e      	ldr	r3, [pc, #376]	; (80035fc <menu+0x1cd8>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	220a      	movs	r2, #10
 8003486:	495e      	ldr	r1, [pc, #376]	; (8003600 <menu+0x1cdc>)
 8003488:	4618      	mov	r0, r3
 800348a:	f009 fde7 	bl	800d05c <itoa>
		lcd_print(2,16,snum);
 800348e:	4a5c      	ldr	r2, [pc, #368]	; (8003600 <menu+0x1cdc>)
 8003490:	2110      	movs	r1, #16
 8003492:	2002      	movs	r0, #2
 8003494:	f7fd f990 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003498:	2102      	movs	r1, #2
 800349a:	484e      	ldr	r0, [pc, #312]	; (80035d4 <menu+0x1cb0>)
 800349c:	f006 fdb2 	bl	800a004 <HAL_GPIO_ReadPin>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d119      	bne.n	80034da <menu+0x1bb6>
 80034a6:	4b4c      	ldr	r3, [pc, #304]	; (80035d8 <menu+0x1cb4>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	f083 0301 	eor.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d012      	beq.n	80034da <menu+0x1bb6>
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <menu+0x1ce0>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10e      	bne.n	80034da <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <menu+0x1cd8>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <menu+0x1cd8>)
 80034c6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80034c8:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <menu+0x1cd8>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d902      	bls.n	80034d6 <menu+0x1bb2>
				kapiTablaAcSure = 0;
 80034d0:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <menu+0x1cd8>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034d6:	f002 fff7 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80034da:	2104      	movs	r1, #4
 80034dc:	483d      	ldr	r0, [pc, #244]	; (80035d4 <menu+0x1cb0>)
 80034de:	f006 fd91 	bl	800a004 <HAL_GPIO_ReadPin>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d119      	bne.n	800351c <menu+0x1bf8>
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <menu+0x1cb4>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f083 0301 	eor.w	r3, r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d012      	beq.n	800351c <menu+0x1bf8>
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <menu+0x1ce0>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10e      	bne.n	800351c <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <menu+0x1cd8>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	3b01      	subs	r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <menu+0x1cd8>)
 8003508:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800350a:	4b3c      	ldr	r3, [pc, #240]	; (80035fc <menu+0x1cd8>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 8003512:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <menu+0x1cd8>)
 8003514:	2205      	movs	r2, #5
 8003516:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003518:	f002 ffd6 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800351c:	2108      	movs	r1, #8
 800351e:	482d      	ldr	r0, [pc, #180]	; (80035d4 <menu+0x1cb0>)
 8003520:	f006 fd70 	bl	800a004 <HAL_GPIO_ReadPin>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10d      	bne.n	8003546 <menu+0x1c22>
 800352a:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <menu+0x1cb4>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f083 0301 	eor.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d006      	beq.n	8003546 <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 8003538:	4b30      	ldr	r3, [pc, #192]	; (80035fc <menu+0x1cd8>)
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	4b27      	ldr	r3, [pc, #156]	; (80035dc <menu+0x1cb8>)
 800353e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003540:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <menu+0x1cc0>)
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003546:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <menu+0x1cc4>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b10      	cmp	r3, #16
 800354c:	f040 80bc 	bne.w	80036c8 <menu+0x1da4>
		if(dilSecim == 0) {
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <menu+0x1ca4>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003558:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <menu+0x1ce4>)
 800355a:	2101      	movs	r1, #1
 800355c:	2001      	movs	r0, #1
 800355e:	f7fd f92b 	bl	80007b8 <lcd_print>
 8003562:	e008      	b.n	8003576 <menu+0x1c52>
		} else if(dilSecim == 1) {
 8003564:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <menu+0x1ca4>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d104      	bne.n	8003576 <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 800356c:	4a27      	ldr	r2, [pc, #156]	; (800360c <menu+0x1ce8>)
 800356e:	2101      	movs	r1, #1
 8003570:	2001      	movs	r0, #1
 8003572:	f7fd f921 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <menu+0x1cec>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d113      	bne.n	80035a6 <menu+0x1c82>
			if(dilSecim == 0) {
 800357e:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <menu+0x1ca4>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 8003586:	4a11      	ldr	r2, [pc, #68]	; (80035cc <menu+0x1ca8>)
 8003588:	2101      	movs	r1, #1
 800358a:	2002      	movs	r0, #2
 800358c:	f7fd f914 	bl	80007b8 <lcd_print>
 8003590:	e04b      	b.n	800362a <menu+0x1d06>
			} else if(dilSecim == 1) {
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <menu+0x1ca4>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d147      	bne.n	800362a <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 800359a:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <menu+0x1cac>)
 800359c:	2101      	movs	r1, #1
 800359e:	2002      	movs	r0, #2
 80035a0:	f7fd f90a 	bl	80007b8 <lcd_print>
 80035a4:	e041      	b.n	800362a <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 80035a6:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <menu+0x1cec>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d13d      	bne.n	800362a <menu+0x1d06>
			if(dilSecim == 0) {
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <menu+0x1ca4>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d130      	bne.n	8003618 <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 80035b6:	4a17      	ldr	r2, [pc, #92]	; (8003614 <menu+0x1cf0>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	2002      	movs	r0, #2
 80035bc:	f7fd f8fc 	bl	80007b8 <lcd_print>
 80035c0:	e033      	b.n	800362a <menu+0x1d06>
 80035c2:	bf00      	nop
 80035c4:	20000c56 	.word	0x20000c56
 80035c8:	20000c6a 	.word	0x20000c6a
 80035cc:	0800df88 	.word	0x0800df88
 80035d0:	0800df9c 	.word	0x0800df9c
 80035d4:	40010800 	.word	0x40010800
 80035d8:	20000c78 	.word	0x20000c78
 80035dc:	20000b38 	.word	0x20000b38
 80035e0:	20000c4f 	.word	0x20000c4f
 80035e4:	20000c75 	.word	0x20000c75
 80035e8:	20000c49 	.word	0x20000c49
 80035ec:	0800e328 	.word	0x0800e328
 80035f0:	0800e1ec 	.word	0x0800e1ec
 80035f4:	0800e33c 	.word	0x0800e33c
 80035f8:	0800e210 	.word	0x0800e210
 80035fc:	20000c64 	.word	0x20000c64
 8003600:	20000bcc 	.word	0x20000bcc
 8003604:	20000c54 	.word	0x20000c54
 8003608:	0800e350 	.word	0x0800e350
 800360c:	0800e364 	.word	0x0800e364
 8003610:	20000c57 	.word	0x20000c57
 8003614:	0800dfe8 	.word	0x0800dfe8
			} else if(dilSecim == 1) {
 8003618:	4b99      	ldr	r3, [pc, #612]	; (8003880 <menu+0x1f5c>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d104      	bne.n	800362a <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 8003620:	4a98      	ldr	r2, [pc, #608]	; (8003884 <menu+0x1f60>)
 8003622:	2101      	movs	r1, #1
 8003624:	2002      	movs	r0, #2
 8003626:	f7fd f8c7 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800362a:	2102      	movs	r1, #2
 800362c:	4896      	ldr	r0, [pc, #600]	; (8003888 <menu+0x1f64>)
 800362e:	f006 fce9 	bl	800a004 <HAL_GPIO_ReadPin>
 8003632:	4603      	mov	r3, r0
 8003634:	2b01      	cmp	r3, #1
 8003636:	d115      	bne.n	8003664 <menu+0x1d40>
 8003638:	4b94      	ldr	r3, [pc, #592]	; (800388c <menu+0x1f68>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	f083 0301 	eor.w	r3, r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00e      	beq.n	8003664 <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003646:	4b92      	ldr	r3, [pc, #584]	; (8003890 <menu+0x1f6c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	3301      	adds	r3, #1
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4b90      	ldr	r3, [pc, #576]	; (8003890 <menu+0x1f6c>)
 8003650:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003652:	4b8f      	ldr	r3, [pc, #572]	; (8003890 <menu+0x1f6c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d902      	bls.n	8003660 <menu+0x1d3c>
				yukariYavasLimit = 0;
 800365a:	4b8d      	ldr	r3, [pc, #564]	; (8003890 <menu+0x1f6c>)
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003660:	f002 ff32 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003664:	2104      	movs	r1, #4
 8003666:	4888      	ldr	r0, [pc, #544]	; (8003888 <menu+0x1f64>)
 8003668:	f006 fccc 	bl	800a004 <HAL_GPIO_ReadPin>
 800366c:	4603      	mov	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d115      	bne.n	800369e <menu+0x1d7a>
 8003672:	4b86      	ldr	r3, [pc, #536]	; (800388c <menu+0x1f68>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	f083 0301 	eor.w	r3, r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003680:	4b83      	ldr	r3, [pc, #524]	; (8003890 <menu+0x1f6c>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	3b01      	subs	r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b81      	ldr	r3, [pc, #516]	; (8003890 <menu+0x1f6c>)
 800368a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800368c:	4b80      	ldr	r3, [pc, #512]	; (8003890 <menu+0x1f6c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <menu+0x1d76>
		   		yukariYavasLimit = 1;
 8003694:	4b7e      	ldr	r3, [pc, #504]	; (8003890 <menu+0x1f6c>)
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800369a:	f002 ff15 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800369e:	2108      	movs	r1, #8
 80036a0:	4879      	ldr	r0, [pc, #484]	; (8003888 <menu+0x1f64>)
 80036a2:	f006 fcaf 	bl	800a004 <HAL_GPIO_ReadPin>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d10d      	bne.n	80036c8 <menu+0x1da4>
 80036ac:	4b77      	ldr	r3, [pc, #476]	; (800388c <menu+0x1f68>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	f083 0301 	eor.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 80036ba:	4b75      	ldr	r3, [pc, #468]	; (8003890 <menu+0x1f6c>)
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	4b75      	ldr	r3, [pc, #468]	; (8003894 <menu+0x1f70>)
 80036c0:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80036c2:	4b75      	ldr	r3, [pc, #468]	; (8003898 <menu+0x1f74>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80036c8:	4b74      	ldr	r3, [pc, #464]	; (800389c <menu+0x1f78>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b11      	cmp	r3, #17
 80036ce:	f040 80c3 	bne.w	8003858 <menu+0x1f34>
		if(dilSecim == 0) {
 80036d2:	4b6b      	ldr	r3, [pc, #428]	; (8003880 <menu+0x1f5c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80036da:	4a71      	ldr	r2, [pc, #452]	; (80038a0 <menu+0x1f7c>)
 80036dc:	2101      	movs	r1, #1
 80036de:	2001      	movs	r0, #1
 80036e0:	f7fd f86a 	bl	80007b8 <lcd_print>
 80036e4:	e008      	b.n	80036f8 <menu+0x1dd4>
		} else if(dilSecim == 1) {
 80036e6:	4b66      	ldr	r3, [pc, #408]	; (8003880 <menu+0x1f5c>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d104      	bne.n	80036f8 <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80036ee:	4a6d      	ldr	r2, [pc, #436]	; (80038a4 <menu+0x1f80>)
 80036f0:	2101      	movs	r1, #1
 80036f2:	2001      	movs	r0, #1
 80036f4:	f7fd f860 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80036f8:	4b6b      	ldr	r3, [pc, #428]	; (80038a8 <menu+0x1f84>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d113      	bne.n	8003728 <menu+0x1e04>
			if(dilSecim == 0){
 8003700:	4b5f      	ldr	r3, [pc, #380]	; (8003880 <menu+0x1f5c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 8003708:	4a68      	ldr	r2, [pc, #416]	; (80038ac <menu+0x1f88>)
 800370a:	2101      	movs	r1, #1
 800370c:	2002      	movs	r0, #2
 800370e:	f7fd f853 	bl	80007b8 <lcd_print>
 8003712:	e038      	b.n	8003786 <menu+0x1e62>
			} else if(dilSecim == 1){
 8003714:	4b5a      	ldr	r3, [pc, #360]	; (8003880 <menu+0x1f5c>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d134      	bne.n	8003786 <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 800371c:	4a64      	ldr	r2, [pc, #400]	; (80038b0 <menu+0x1f8c>)
 800371e:	2101      	movs	r1, #1
 8003720:	2002      	movs	r0, #2
 8003722:	f7fd f849 	bl	80007b8 <lcd_print>
 8003726:	e02e      	b.n	8003786 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003728:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <menu+0x1f84>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d113      	bne.n	8003758 <menu+0x1e34>
			if(dilSecim == 0){
 8003730:	4b53      	ldr	r3, [pc, #332]	; (8003880 <menu+0x1f5c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003738:	4a5e      	ldr	r2, [pc, #376]	; (80038b4 <menu+0x1f90>)
 800373a:	2101      	movs	r1, #1
 800373c:	2002      	movs	r0, #2
 800373e:	f7fd f83b 	bl	80007b8 <lcd_print>
 8003742:	e020      	b.n	8003786 <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003744:	4b4e      	ldr	r3, [pc, #312]	; (8003880 <menu+0x1f5c>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11c      	bne.n	8003786 <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 800374c:	4a5a      	ldr	r2, [pc, #360]	; (80038b8 <menu+0x1f94>)
 800374e:	2101      	movs	r1, #1
 8003750:	2002      	movs	r0, #2
 8003752:	f7fd f831 	bl	80007b8 <lcd_print>
 8003756:	e016      	b.n	8003786 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003758:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <menu+0x1f84>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d112      	bne.n	8003786 <menu+0x1e62>
			if(dilSecim == 0) {
 8003760:	4b47      	ldr	r3, [pc, #284]	; (8003880 <menu+0x1f5c>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 8003768:	4a54      	ldr	r2, [pc, #336]	; (80038bc <menu+0x1f98>)
 800376a:	2101      	movs	r1, #1
 800376c:	2002      	movs	r0, #2
 800376e:	f7fd f823 	bl	80007b8 <lcd_print>
 8003772:	e008      	b.n	8003786 <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003774:	4b42      	ldr	r3, [pc, #264]	; (8003880 <menu+0x1f5c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d104      	bne.n	8003786 <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 800377c:	4a50      	ldr	r2, [pc, #320]	; (80038c0 <menu+0x1f9c>)
 800377e:	2101      	movs	r1, #1
 8003780:	2002      	movs	r0, #2
 8003782:	f7fd f819 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003786:	2102      	movs	r1, #2
 8003788:	483f      	ldr	r0, [pc, #252]	; (8003888 <menu+0x1f64>)
 800378a:	f006 fc3b 	bl	800a004 <HAL_GPIO_ReadPin>
 800378e:	4603      	mov	r3, r0
 8003790:	2b01      	cmp	r3, #1
 8003792:	d115      	bne.n	80037c0 <menu+0x1e9c>
 8003794:	4b3d      	ldr	r3, [pc, #244]	; (800388c <menu+0x1f68>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	f083 0301 	eor.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00e      	beq.n	80037c0 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80037a2:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <menu+0x1f84>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <menu+0x1f84>)
 80037ac:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80037ae:	4b3e      	ldr	r3, [pc, #248]	; (80038a8 <menu+0x1f84>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d902      	bls.n	80037bc <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 80037b6:	4b3c      	ldr	r3, [pc, #240]	; (80038a8 <menu+0x1f84>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037bc:	f002 fe84 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037c0:	2104      	movs	r1, #4
 80037c2:	4831      	ldr	r0, [pc, #196]	; (8003888 <menu+0x1f64>)
 80037c4:	f006 fc1e 	bl	800a004 <HAL_GPIO_ReadPin>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d115      	bne.n	80037fa <menu+0x1ed6>
 80037ce:	4b2f      	ldr	r3, [pc, #188]	; (800388c <menu+0x1f68>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	f083 0301 	eor.w	r3, r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00e      	beq.n	80037fa <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80037dc:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <menu+0x1f84>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <menu+0x1f84>)
 80037e6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80037e8:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <menu+0x1f84>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d902      	bls.n	80037f6 <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <menu+0x1f84>)
 80037f2:	2202      	movs	r2, #2
 80037f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037f6:	f002 fe67 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037fa:	2108      	movs	r1, #8
 80037fc:	4822      	ldr	r0, [pc, #136]	; (8003888 <menu+0x1f64>)
 80037fe:	f006 fc01 	bl	800a004 <HAL_GPIO_ReadPin>
 8003802:	4603      	mov	r3, r0
 8003804:	2b01      	cmp	r3, #1
 8003806:	d127      	bne.n	8003858 <menu+0x1f34>
 8003808:	4b20      	ldr	r3, [pc, #128]	; (800388c <menu+0x1f68>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	f083 0301 	eor.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d020      	beq.n	8003858 <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <menu+0x1f84>)
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <menu+0x1f70>)
 800381c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <menu+0x1f84>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d003      	beq.n	800382e <menu+0x1f0a>
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <menu+0x1f84>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d106      	bne.n	800383c <menu+0x1f18>
				calismaSekli = 0;
 800382e:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <menu+0x1fa0>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <menu+0x1fa0>)
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	4b16      	ldr	r3, [pc, #88]	; (8003894 <menu+0x1f70>)
 800383a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800383c:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <menu+0x1f84>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d106      	bne.n	8003852 <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 8003844:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <menu+0x1fa4>)
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800384a:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <menu+0x1fa4>)
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <menu+0x1f70>)
 8003850:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <menu+0x1f74>)
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <menu+0x1f78>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b12      	cmp	r3, #18
 800385e:	f040 80d5 	bne.w	8003a0c <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <menu+0x1f84>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d13c      	bne.n	80038e4 <menu+0x1fc0>
			if(dilSecim == 0) {
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <menu+0x1f5c>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d12e      	bne.n	80038d0 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003872:	4a16      	ldr	r2, [pc, #88]	; (80038cc <menu+0x1fa8>)
 8003874:	2101      	movs	r1, #1
 8003876:	2001      	movs	r0, #1
 8003878:	f7fc ff9e 	bl	80007b8 <lcd_print>
 800387c:	e048      	b.n	8003910 <menu+0x1fec>
 800387e:	bf00      	nop
 8003880:	20000c6a 	.word	0x20000c6a
 8003884:	0800dffc 	.word	0x0800dffc
 8003888:	40010800 	.word	0x40010800
 800388c:	20000c78 	.word	0x20000c78
 8003890:	20000c57 	.word	0x20000c57
 8003894:	20000b38 	.word	0x20000b38
 8003898:	20000c75 	.word	0x20000c75
 800389c:	20000c49 	.word	0x20000c49
 80038a0:	0800e378 	.word	0x0800e378
 80038a4:	0800e38c 	.word	0x0800e38c
 80038a8:	20000c58 	.word	0x20000c58
 80038ac:	0800e3a0 	.word	0x0800e3a0
 80038b0:	0800e3b0 	.word	0x0800e3b0
 80038b4:	0800e3c0 	.word	0x0800e3c0
 80038b8:	0800e3d0 	.word	0x0800e3d0
 80038bc:	0800df88 	.word	0x0800df88
 80038c0:	0800df9c 	.word	0x0800df9c
 80038c4:	20000c4a 	.word	0x20000c4a
 80038c8:	20000c5b 	.word	0x20000c5b
 80038cc:	0800e3e0 	.word	0x0800e3e0
			} else if(dilSecim == 1) {
 80038d0:	4b7b      	ldr	r3, [pc, #492]	; (8003ac0 <menu+0x219c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d11b      	bne.n	8003910 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80038d8:	4a7a      	ldr	r2, [pc, #488]	; (8003ac4 <menu+0x21a0>)
 80038da:	2101      	movs	r1, #1
 80038dc:	2001      	movs	r0, #1
 80038de:	f7fc ff6b 	bl	80007b8 <lcd_print>
 80038e2:	e015      	b.n	8003910 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80038e4:	4b78      	ldr	r3, [pc, #480]	; (8003ac8 <menu+0x21a4>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d111      	bne.n	8003910 <menu+0x1fec>
			if(dilSecim == 0){
 80038ec:	4b74      	ldr	r3, [pc, #464]	; (8003ac0 <menu+0x219c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80038f4:	4a75      	ldr	r2, [pc, #468]	; (8003acc <menu+0x21a8>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	2001      	movs	r0, #1
 80038fa:	f7fc ff5d 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80038fe:	4b70      	ldr	r3, [pc, #448]	; (8003ac0 <menu+0x219c>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d104      	bne.n	8003910 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003906:	4a72      	ldr	r2, [pc, #456]	; (8003ad0 <menu+0x21ac>)
 8003908:	2101      	movs	r1, #1
 800390a:	2001      	movs	r0, #1
 800390c:	f7fc ff54 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003910:	4b70      	ldr	r3, [pc, #448]	; (8003ad4 <menu+0x21b0>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d113      	bne.n	8003940 <menu+0x201c>
			if(dilSecim == 0) {
 8003918:	4b69      	ldr	r3, [pc, #420]	; (8003ac0 <menu+0x219c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 8003920:	4a6d      	ldr	r2, [pc, #436]	; (8003ad8 <menu+0x21b4>)
 8003922:	2101      	movs	r1, #1
 8003924:	2002      	movs	r0, #2
 8003926:	f7fc ff47 	bl	80007b8 <lcd_print>
 800392a:	e020      	b.n	800396e <menu+0x204a>
			} else if(dilSecim == 1){
 800392c:	4b64      	ldr	r3, [pc, #400]	; (8003ac0 <menu+0x219c>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d11c      	bne.n	800396e <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 8003934:	4a69      	ldr	r2, [pc, #420]	; (8003adc <menu+0x21b8>)
 8003936:	2101      	movs	r1, #1
 8003938:	2002      	movs	r0, #2
 800393a:	f7fc ff3d 	bl	80007b8 <lcd_print>
 800393e:	e016      	b.n	800396e <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003940:	4b64      	ldr	r3, [pc, #400]	; (8003ad4 <menu+0x21b0>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d112      	bne.n	800396e <menu+0x204a>
			if(dilSecim == 0){
 8003948:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <menu+0x219c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 8003950:	4a63      	ldr	r2, [pc, #396]	; (8003ae0 <menu+0x21bc>)
 8003952:	2101      	movs	r1, #1
 8003954:	2002      	movs	r0, #2
 8003956:	f7fc ff2f 	bl	80007b8 <lcd_print>
 800395a:	e008      	b.n	800396e <menu+0x204a>
			} else if(dilSecim == 1){
 800395c:	4b58      	ldr	r3, [pc, #352]	; (8003ac0 <menu+0x219c>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d104      	bne.n	800396e <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 8003964:	4a5f      	ldr	r2, [pc, #380]	; (8003ae4 <menu+0x21c0>)
 8003966:	2101      	movs	r1, #1
 8003968:	2002      	movs	r0, #2
 800396a:	f7fc ff25 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800396e:	2102      	movs	r1, #2
 8003970:	485d      	ldr	r0, [pc, #372]	; (8003ae8 <menu+0x21c4>)
 8003972:	f006 fb47 	bl	800a004 <HAL_GPIO_ReadPin>
 8003976:	4603      	mov	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d115      	bne.n	80039a8 <menu+0x2084>
 800397c:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <menu+0x21c8>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	f083 0301 	eor.w	r3, r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00e      	beq.n	80039a8 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800398a:	4b52      	ldr	r3, [pc, #328]	; (8003ad4 <menu+0x21b0>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <menu+0x21b0>)
 8003994:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003996:	4b4f      	ldr	r3, [pc, #316]	; (8003ad4 <menu+0x21b0>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d902      	bls.n	80039a4 <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 800399e:	4b4d      	ldr	r3, [pc, #308]	; (8003ad4 <menu+0x21b0>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039a4:	f002 fd90 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a8:	2104      	movs	r1, #4
 80039aa:	484f      	ldr	r0, [pc, #316]	; (8003ae8 <menu+0x21c4>)
 80039ac:	f006 fb2a 	bl	800a004 <HAL_GPIO_ReadPin>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d115      	bne.n	80039e2 <menu+0x20be>
 80039b6:	4b4d      	ldr	r3, [pc, #308]	; (8003aec <menu+0x21c8>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80039c4:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <menu+0x21b0>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <menu+0x21b0>)
 80039ce:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80039d0:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <menu+0x21b0>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 80039d8:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <menu+0x21b0>)
 80039da:	2201      	movs	r2, #1
 80039dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039de:	f002 fd73 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e2:	2108      	movs	r1, #8
 80039e4:	4840      	ldr	r0, [pc, #256]	; (8003ae8 <menu+0x21c4>)
 80039e6:	f006 fb0d 	bl	800a004 <HAL_GPIO_ReadPin>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10d      	bne.n	8003a0c <menu+0x20e8>
 80039f0:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <menu+0x21c8>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	f083 0301 	eor.w	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d006      	beq.n	8003a0c <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 80039fe:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <menu+0x21b0>)
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <menu+0x21cc>)
 8003a04:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003a06:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <menu+0x21d0>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <menu+0x21d4>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b13      	cmp	r3, #19
 8003a12:	f040 80d5 	bne.w	8003bc0 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 8003a16:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <menu+0x21a4>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d113      	bne.n	8003a46 <menu+0x2122>
			if(dilSecim == 0) {
 8003a1e:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <menu+0x219c>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003a26:	4a35      	ldr	r2, [pc, #212]	; (8003afc <menu+0x21d8>)
 8003a28:	2101      	movs	r1, #1
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f7fc fec4 	bl	80007b8 <lcd_print>
 8003a30:	e01f      	b.n	8003a72 <menu+0x214e>
			} else if(dilSecim == 1) {
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <menu+0x219c>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d11b      	bne.n	8003a72 <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003a3a:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <menu+0x21dc>)
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f7fc feba 	bl	80007b8 <lcd_print>
 8003a44:	e015      	b.n	8003a72 <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <menu+0x21a4>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d111      	bne.n	8003a72 <menu+0x214e>
			if(dilSecim == 0) {
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <menu+0x219c>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003a56:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <menu+0x21e0>)
 8003a58:	2101      	movs	r1, #1
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f7fc feac 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <menu+0x219c>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d104      	bne.n	8003a72 <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <menu+0x21e4>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7fc fea3 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003a72:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <menu+0x21e8>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d113      	bne.n	8003aa2 <menu+0x217e>
			if(dilSecim == 0) {
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <menu+0x219c>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 8003a82:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <menu+0x21b4>)
 8003a84:	2101      	movs	r1, #1
 8003a86:	2002      	movs	r0, #2
 8003a88:	f7fc fe96 	bl	80007b8 <lcd_print>
 8003a8c:	e049      	b.n	8003b22 <menu+0x21fe>
			} else if(dilSecim == 1) {
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <menu+0x219c>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d145      	bne.n	8003b22 <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 8003a96:	4a11      	ldr	r2, [pc, #68]	; (8003adc <menu+0x21b8>)
 8003a98:	2101      	movs	r1, #1
 8003a9a:	2002      	movs	r0, #2
 8003a9c:	f7fc fe8c 	bl	80007b8 <lcd_print>
 8003aa0:	e03f      	b.n	8003b22 <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <menu+0x21e8>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d13b      	bne.n	8003b22 <menu+0x21fe>
			if(dilSecim == 0) {
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <menu+0x219c>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d12e      	bne.n	8003b10 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 8003ab2:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <menu+0x21bc>)
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	2002      	movs	r0, #2
 8003ab8:	f7fc fe7e 	bl	80007b8 <lcd_print>
 8003abc:	e031      	b.n	8003b22 <menu+0x21fe>
 8003abe:	bf00      	nop
 8003ac0:	20000c6a 	.word	0x20000c6a
 8003ac4:	0800e3f4 	.word	0x0800e3f4
 8003ac8:	20000c58 	.word	0x20000c58
 8003acc:	0800e404 	.word	0x0800e404
 8003ad0:	0800e418 	.word	0x0800e418
 8003ad4:	20000c59 	.word	0x20000c59
 8003ad8:	0800df88 	.word	0x0800df88
 8003adc:	0800df9c 	.word	0x0800df9c
 8003ae0:	0800dfe8 	.word	0x0800dfe8
 8003ae4:	0800dffc 	.word	0x0800dffc
 8003ae8:	40010800 	.word	0x40010800
 8003aec:	20000c78 	.word	0x20000c78
 8003af0:	20000b38 	.word	0x20000b38
 8003af4:	20000c75 	.word	0x20000c75
 8003af8:	20000c49 	.word	0x20000c49
 8003afc:	0800e42c 	.word	0x0800e42c
 8003b00:	0800e440 	.word	0x0800e440
 8003b04:	0800e454 	.word	0x0800e454
 8003b08:	0800e468 	.word	0x0800e468
 8003b0c:	20000c5a 	.word	0x20000c5a
			} else if(dilSecim == 1) {
 8003b10:	4b90      	ldr	r3, [pc, #576]	; (8003d54 <menu+0x2430>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d104      	bne.n	8003b22 <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 8003b18:	4a8f      	ldr	r2, [pc, #572]	; (8003d58 <menu+0x2434>)
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	2002      	movs	r0, #2
 8003b1e:	f7fc fe4b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b22:	2102      	movs	r1, #2
 8003b24:	488d      	ldr	r0, [pc, #564]	; (8003d5c <menu+0x2438>)
 8003b26:	f006 fa6d 	bl	800a004 <HAL_GPIO_ReadPin>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d115      	bne.n	8003b5c <menu+0x2238>
 8003b30:	4b8b      	ldr	r3, [pc, #556]	; (8003d60 <menu+0x243c>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00e      	beq.n	8003b5c <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003b3e:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <menu+0x2440>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b87      	ldr	r3, [pc, #540]	; (8003d64 <menu+0x2440>)
 8003b48:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003b4a:	4b86      	ldr	r3, [pc, #536]	; (8003d64 <menu+0x2440>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d902      	bls.n	8003b58 <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 8003b52:	4b84      	ldr	r3, [pc, #528]	; (8003d64 <menu+0x2440>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b58:	f002 fcb6 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	487f      	ldr	r0, [pc, #508]	; (8003d5c <menu+0x2438>)
 8003b60:	f006 fa50 	bl	800a004 <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d115      	bne.n	8003b96 <menu+0x2272>
 8003b6a:	4b7d      	ldr	r3, [pc, #500]	; (8003d60 <menu+0x243c>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	f083 0301 	eor.w	r3, r3, #1
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003b78:	4b7a      	ldr	r3, [pc, #488]	; (8003d64 <menu+0x2440>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	4b78      	ldr	r3, [pc, #480]	; (8003d64 <menu+0x2440>)
 8003b82:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003b84:	4b77      	ldr	r3, [pc, #476]	; (8003d64 <menu+0x2440>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 8003b8c:	4b75      	ldr	r3, [pc, #468]	; (8003d64 <menu+0x2440>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b92:	f002 fc99 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b96:	2108      	movs	r1, #8
 8003b98:	4870      	ldr	r0, [pc, #448]	; (8003d5c <menu+0x2438>)
 8003b9a:	f006 fa33 	bl	800a004 <HAL_GPIO_ReadPin>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10d      	bne.n	8003bc0 <menu+0x229c>
 8003ba4:	4b6e      	ldr	r3, [pc, #440]	; (8003d60 <menu+0x243c>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f083 0301 	eor.w	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d006      	beq.n	8003bc0 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003bb2:	4b6c      	ldr	r3, [pc, #432]	; (8003d64 <menu+0x2440>)
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	4b6c      	ldr	r3, [pc, #432]	; (8003d68 <menu+0x2444>)
 8003bb8:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003bba:	4b6c      	ldr	r3, [pc, #432]	; (8003d6c <menu+0x2448>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003bc0:	4b6b      	ldr	r3, [pc, #428]	; (8003d70 <menu+0x244c>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b14      	cmp	r3, #20
 8003bc6:	f040 80b5 	bne.w	8003d34 <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 8003bca:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <menu+0x2450>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d113      	bne.n	8003bfa <menu+0x22d6>
			if(dilSecim == 0) {
 8003bd2:	4b60      	ldr	r3, [pc, #384]	; (8003d54 <menu+0x2430>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d105      	bne.n	8003be6 <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003bda:	4a67      	ldr	r2, [pc, #412]	; (8003d78 <menu+0x2454>)
 8003bdc:	2101      	movs	r1, #1
 8003bde:	2001      	movs	r0, #1
 8003be0:	f7fc fdea 	bl	80007b8 <lcd_print>
 8003be4:	e020      	b.n	8003c28 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003be6:	4b5b      	ldr	r3, [pc, #364]	; (8003d54 <menu+0x2430>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d11c      	bne.n	8003c28 <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003bee:	4a63      	ldr	r2, [pc, #396]	; (8003d7c <menu+0x2458>)
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f7fc fde0 	bl	80007b8 <lcd_print>
 8003bf8:	e016      	b.n	8003c28 <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003bfa:	4b5e      	ldr	r3, [pc, #376]	; (8003d74 <menu+0x2450>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d112      	bne.n	8003c28 <menu+0x2304>
			if(dilSecim == 0) {
 8003c02:	4b54      	ldr	r3, [pc, #336]	; (8003d54 <menu+0x2430>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003c0a:	4a5d      	ldr	r2, [pc, #372]	; (8003d80 <menu+0x245c>)
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f7fc fdd2 	bl	80007b8 <lcd_print>
 8003c14:	e008      	b.n	8003c28 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003c16:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <menu+0x2430>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d104      	bne.n	8003c28 <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003c1e:	4a59      	ldr	r2, [pc, #356]	; (8003d84 <menu+0x2460>)
 8003c20:	2101      	movs	r1, #1
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7fc fdc8 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003c28:	4b57      	ldr	r3, [pc, #348]	; (8003d88 <menu+0x2464>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d113      	bne.n	8003c58 <menu+0x2334>
			if(dilSecim == 0) {
 8003c30:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <menu+0x2430>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 8003c38:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <menu+0x2468>)
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	2002      	movs	r0, #2
 8003c3e:	f7fc fdbb 	bl	80007b8 <lcd_print>
 8003c42:	e020      	b.n	8003c86 <menu+0x2362>
			} else if(dilSecim == 1) {
 8003c44:	4b43      	ldr	r3, [pc, #268]	; (8003d54 <menu+0x2430>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d11c      	bne.n	8003c86 <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 8003c4c:	4a50      	ldr	r2, [pc, #320]	; (8003d90 <menu+0x246c>)
 8003c4e:	2101      	movs	r1, #1
 8003c50:	2002      	movs	r0, #2
 8003c52:	f7fc fdb1 	bl	80007b8 <lcd_print>
 8003c56:	e016      	b.n	8003c86 <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003c58:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <menu+0x2464>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d112      	bne.n	8003c86 <menu+0x2362>
			if(dilSecim == 0) {
 8003c60:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <menu+0x2430>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 8003c68:	4a4a      	ldr	r2, [pc, #296]	; (8003d94 <menu+0x2470>)
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	2002      	movs	r0, #2
 8003c6e:	f7fc fda3 	bl	80007b8 <lcd_print>
 8003c72:	e008      	b.n	8003c86 <menu+0x2362>
			} else if(dilSecim == 1) {
 8003c74:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <menu+0x2430>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d104      	bne.n	8003c86 <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 8003c7c:	4a46      	ldr	r2, [pc, #280]	; (8003d98 <menu+0x2474>)
 8003c7e:	2101      	movs	r1, #1
 8003c80:	2002      	movs	r0, #2
 8003c82:	f7fc fd99 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003c86:	2102      	movs	r1, #2
 8003c88:	4834      	ldr	r0, [pc, #208]	; (8003d5c <menu+0x2438>)
 8003c8a:	f006 f9bb 	bl	800a004 <HAL_GPIO_ReadPin>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d119      	bne.n	8003cc8 <menu+0x23a4>
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <menu+0x243c>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	f083 0301 	eor.w	r3, r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d012      	beq.n	8003cc8 <menu+0x23a4>
 8003ca2:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <menu+0x2450>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d10e      	bne.n	8003cc8 <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003caa:	4b37      	ldr	r3, [pc, #220]	; (8003d88 <menu+0x2464>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <menu+0x2464>)
 8003cb4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003cb6:	4b34      	ldr	r3, [pc, #208]	; (8003d88 <menu+0x2464>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d902      	bls.n	8003cc4 <menu+0x23a0>
				devirmeSilindirTipi = 0;
 8003cbe:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <menu+0x2464>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cc4:	f002 fc00 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003cc8:	2104      	movs	r1, #4
 8003cca:	4824      	ldr	r0, [pc, #144]	; (8003d5c <menu+0x2438>)
 8003ccc:	f006 f99a 	bl	800a004 <HAL_GPIO_ReadPin>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d119      	bne.n	8003d0a <menu+0x23e6>
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <menu+0x243c>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	f083 0301 	eor.w	r3, r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d012      	beq.n	8003d0a <menu+0x23e6>
 8003ce4:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <menu+0x2450>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d10e      	bne.n	8003d0a <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <menu+0x2464>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <menu+0x2464>)
 8003cf6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <menu+0x2464>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 8003d00:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <menu+0x2464>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d06:	f002 fbdf 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d0a:	2108      	movs	r1, #8
 8003d0c:	4813      	ldr	r0, [pc, #76]	; (8003d5c <menu+0x2438>)
 8003d0e:	f006 f979 	bl	800a004 <HAL_GPIO_ReadPin>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10d      	bne.n	8003d34 <menu+0x2410>
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <menu+0x243c>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f083 0301 	eor.w	r3, r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 8003d26:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <menu+0x2464>)
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <menu+0x2444>)
 8003d2c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <menu+0x2448>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003d34:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <menu+0x244c>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b15      	cmp	r3, #21
 8003d3a:	f040 80c2 	bne.w	8003ec2 <menu+0x259e>
		if(dilSecim == 0) {
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <menu+0x2430>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12c      	bne.n	8003da0 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <menu+0x2478>)
 8003d48:	2101      	movs	r1, #1
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f7fc fd34 	bl	80007b8 <lcd_print>
 8003d50:	e02f      	b.n	8003db2 <menu+0x248e>
 8003d52:	bf00      	nop
 8003d54:	20000c6a 	.word	0x20000c6a
 8003d58:	0800dffc 	.word	0x0800dffc
 8003d5c:	40010800 	.word	0x40010800
 8003d60:	20000c78 	.word	0x20000c78
 8003d64:	20000c5a 	.word	0x20000c5a
 8003d68:	20000b38 	.word	0x20000b38
 8003d6c:	20000c75 	.word	0x20000c75
 8003d70:	20000c49 	.word	0x20000c49
 8003d74:	20000c58 	.word	0x20000c58
 8003d78:	0800e47c 	.word	0x0800e47c
 8003d7c:	0800e490 	.word	0x0800e490
 8003d80:	0800e4a4 	.word	0x0800e4a4
 8003d84:	0800e4b8 	.word	0x0800e4b8
 8003d88:	20000c5b 	.word	0x20000c5b
 8003d8c:	0800e4cc 	.word	0x0800e4cc
 8003d90:	0800e4e0 	.word	0x0800e4e0
 8003d94:	0800e4f0 	.word	0x0800e4f0
 8003d98:	0800e504 	.word	0x0800e504
 8003d9c:	0800e514 	.word	0x0800e514
		} else if(dilSecim == 1) {
 8003da0:	4b9c      	ldr	r3, [pc, #624]	; (8004014 <menu+0x26f0>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d104      	bne.n	8003db2 <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003da8:	4a9b      	ldr	r2, [pc, #620]	; (8004018 <menu+0x26f4>)
 8003daa:	2101      	movs	r1, #1
 8003dac:	2001      	movs	r0, #1
 8003dae:	f7fc fd03 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003db2:	4b9a      	ldr	r3, [pc, #616]	; (800401c <menu+0x26f8>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d112      	bne.n	8003de0 <menu+0x24bc>
			if(dilSecim == 0) {
 8003dba:	4b96      	ldr	r3, [pc, #600]	; (8004014 <menu+0x26f0>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 8003dc2:	4a97      	ldr	r2, [pc, #604]	; (8004020 <menu+0x26fc>)
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	2002      	movs	r0, #2
 8003dc8:	f7fc fcf6 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003dcc:	4b91      	ldr	r3, [pc, #580]	; (8004014 <menu+0x26f0>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d11c      	bne.n	8003e0e <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 8003dd4:	4a93      	ldr	r2, [pc, #588]	; (8004024 <menu+0x2700>)
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	2002      	movs	r0, #2
 8003dda:	f7fc fced 	bl	80007b8 <lcd_print>
 8003dde:	e016      	b.n	8003e0e <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 8003de0:	4b8e      	ldr	r3, [pc, #568]	; (800401c <menu+0x26f8>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d112      	bne.n	8003e0e <menu+0x24ea>
			if(dilSecim == 0) {
 8003de8:	4b8a      	ldr	r3, [pc, #552]	; (8004014 <menu+0x26f0>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 8003df0:	4a8d      	ldr	r2, [pc, #564]	; (8004028 <menu+0x2704>)
 8003df2:	2101      	movs	r1, #1
 8003df4:	2002      	movs	r0, #2
 8003df6:	f7fc fcdf 	bl	80007b8 <lcd_print>
 8003dfa:	e008      	b.n	8003e0e <menu+0x24ea>
			} else if(dilSecim == 1) {
 8003dfc:	4b85      	ldr	r3, [pc, #532]	; (8004014 <menu+0x26f0>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d104      	bne.n	8003e0e <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 8003e04:	4a89      	ldr	r2, [pc, #548]	; (800402c <menu+0x2708>)
 8003e06:	2101      	movs	r1, #1
 8003e08:	2002      	movs	r0, #2
 8003e0a:	f7fc fcd5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4887      	ldr	r0, [pc, #540]	; (8004030 <menu+0x270c>)
 8003e12:	f006 f8f7 	bl	800a004 <HAL_GPIO_ReadPin>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d115      	bne.n	8003e48 <menu+0x2524>
 8003e1c:	4b85      	ldr	r3, [pc, #532]	; (8004034 <menu+0x2710>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f083 0301 	eor.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00e      	beq.n	8003e48 <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003e2a:	4b7c      	ldr	r3, [pc, #496]	; (800401c <menu+0x26f8>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4b7a      	ldr	r3, [pc, #488]	; (800401c <menu+0x26f8>)
 8003e34:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003e36:	4b79      	ldr	r3, [pc, #484]	; (800401c <menu+0x26f8>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d902      	bls.n	8003e44 <menu+0x2520>
				platformSilindirTipi = 0;
 8003e3e:	4b77      	ldr	r3, [pc, #476]	; (800401c <menu+0x26f8>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e44:	f002 fb40 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e48:	2104      	movs	r1, #4
 8003e4a:	4879      	ldr	r0, [pc, #484]	; (8004030 <menu+0x270c>)
 8003e4c:	f006 f8da 	bl	800a004 <HAL_GPIO_ReadPin>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d115      	bne.n	8003e82 <menu+0x255e>
 8003e56:	4b77      	ldr	r3, [pc, #476]	; (8004034 <menu+0x2710>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	f083 0301 	eor.w	r3, r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003e64:	4b6d      	ldr	r3, [pc, #436]	; (800401c <menu+0x26f8>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	4b6b      	ldr	r3, [pc, #428]	; (800401c <menu+0x26f8>)
 8003e6e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003e70:	4b6a      	ldr	r3, [pc, #424]	; (800401c <menu+0x26f8>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <menu+0x255a>
		   		platformSilindirTipi = 1;
 8003e78:	4b68      	ldr	r3, [pc, #416]	; (800401c <menu+0x26f8>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e7e:	f002 fb23 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e82:	2108      	movs	r1, #8
 8003e84:	486a      	ldr	r0, [pc, #424]	; (8004030 <menu+0x270c>)
 8003e86:	f006 f8bd 	bl	800a004 <HAL_GPIO_ReadPin>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d118      	bne.n	8003ec2 <menu+0x259e>
 8003e90:	4b68      	ldr	r3, [pc, #416]	; (8004034 <menu+0x2710>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	f083 0301 	eor.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d011      	beq.n	8003ec2 <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 8003e9e:	4b5f      	ldr	r3, [pc, #380]	; (800401c <menu+0x26f8>)
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	4b65      	ldr	r3, [pc, #404]	; (8004038 <menu+0x2714>)
 8003ea4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003ea6:	4b5d      	ldr	r3, [pc, #372]	; (800401c <menu+0x26f8>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d106      	bne.n	8003ebc <menu+0x2598>
				altLimit = 1;
 8003eae:	4b63      	ldr	r3, [pc, #396]	; (800403c <menu+0x2718>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003eb4:	4b61      	ldr	r3, [pc, #388]	; (800403c <menu+0x2718>)
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <menu+0x2714>)
 8003eba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003ebc:	4b60      	ldr	r3, [pc, #384]	; (8004040 <menu+0x271c>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003ec2:	4b60      	ldr	r3, [pc, #384]	; (8004044 <menu+0x2720>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b16      	cmp	r3, #22
 8003ec8:	f040 8081 	bne.w	8003fce <menu+0x26aa>
		if(dilSecim == 0) {
 8003ecc:	4b51      	ldr	r3, [pc, #324]	; (8004014 <menu+0x26f0>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003ed4:	4a5c      	ldr	r2, [pc, #368]	; (8004048 <menu+0x2724>)
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f7fc fc6d 	bl	80007b8 <lcd_print>
 8003ede:	e008      	b.n	8003ef2 <menu+0x25ce>
		} else if(dilSecim == 1) {
 8003ee0:	4b4c      	ldr	r3, [pc, #304]	; (8004014 <menu+0x26f0>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d104      	bne.n	8003ef2 <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003ee8:	4a58      	ldr	r2, [pc, #352]	; (800404c <menu+0x2728>)
 8003eea:	2101      	movs	r1, #1
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7fc fc63 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003ef2:	4b48      	ldr	r3, [pc, #288]	; (8004014 <menu+0x26f0>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8003efa:	4a55      	ldr	r2, [pc, #340]	; (8004050 <menu+0x272c>)
 8003efc:	2101      	movs	r1, #1
 8003efe:	2002      	movs	r0, #2
 8003f00:	f7fc fc5a 	bl	80007b8 <lcd_print>
 8003f04:	e008      	b.n	8003f18 <menu+0x25f4>
			} else if(dilSecim == 1){
 8003f06:	4b43      	ldr	r3, [pc, #268]	; (8004014 <menu+0x26f0>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d104      	bne.n	8003f18 <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8003f0e:	4a51      	ldr	r2, [pc, #324]	; (8004054 <menu+0x2730>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	2002      	movs	r0, #2
 8003f14:	f7fc fc50 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003f18:	4b4f      	ldr	r3, [pc, #316]	; (8004058 <menu+0x2734>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	220a      	movs	r2, #10
 8003f1e:	494f      	ldr	r1, [pc, #316]	; (800405c <menu+0x2738>)
 8003f20:	4618      	mov	r0, r3
 8003f22:	f009 f89b 	bl	800d05c <itoa>
		lcd_print(2,16,snum);
 8003f26:	4a4d      	ldr	r2, [pc, #308]	; (800405c <menu+0x2738>)
 8003f28:	2110      	movs	r1, #16
 8003f2a:	2002      	movs	r0, #2
 8003f2c:	f7fc fc44 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f30:	2102      	movs	r1, #2
 8003f32:	483f      	ldr	r0, [pc, #252]	; (8004030 <menu+0x270c>)
 8003f34:	f006 f866 	bl	800a004 <HAL_GPIO_ReadPin>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d115      	bne.n	8003f6a <menu+0x2646>
 8003f3e:	4b3d      	ldr	r3, [pc, #244]	; (8004034 <menu+0x2710>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	f083 0301 	eor.w	r3, r3, #1
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00e      	beq.n	8003f6a <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 8003f4c:	4b42      	ldr	r3, [pc, #264]	; (8004058 <menu+0x2734>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	3301      	adds	r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	4b40      	ldr	r3, [pc, #256]	; (8004058 <menu+0x2734>)
 8003f56:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003f58:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <menu+0x2734>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d902      	bls.n	8003f66 <menu+0x2642>
				yukariValfTmr = 0;
 8003f60:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <menu+0x2734>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f66:	f002 faaf 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	4830      	ldr	r0, [pc, #192]	; (8004030 <menu+0x270c>)
 8003f6e:	f006 f849 	bl	800a004 <HAL_GPIO_ReadPin>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d115      	bne.n	8003fa4 <menu+0x2680>
 8003f78:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <menu+0x2710>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f083 0301 	eor.w	r3, r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00e      	beq.n	8003fa4 <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <menu+0x2734>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4b32      	ldr	r3, [pc, #200]	; (8004058 <menu+0x2734>)
 8003f90:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <menu+0x2734>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <menu+0x267c>
		   		yukariValfTmr = 5;
 8003f9a:	4b2f      	ldr	r3, [pc, #188]	; (8004058 <menu+0x2734>)
 8003f9c:	2205      	movs	r2, #5
 8003f9e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fa0:	f002 fa92 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fa4:	2108      	movs	r1, #8
 8003fa6:	4822      	ldr	r0, [pc, #136]	; (8004030 <menu+0x270c>)
 8003fa8:	f006 f82c 	bl	800a004 <HAL_GPIO_ReadPin>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d10d      	bne.n	8003fce <menu+0x26aa>
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <menu+0x2710>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	f083 0301 	eor.w	r3, r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 8003fc0:	4b25      	ldr	r3, [pc, #148]	; (8004058 <menu+0x2734>)
 8003fc2:	781a      	ldrb	r2, [r3, #0]
 8003fc4:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <menu+0x2714>)
 8003fc6:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <menu+0x271c>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <menu+0x2720>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b17      	cmp	r3, #23
 8003fd4:	f040 80ac 	bne.w	8004130 <menu+0x280c>
		if(dilSecim == 0) {
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <menu+0x26f0>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <menu+0x273c>)
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f7fc fbe7 	bl	80007b8 <lcd_print>
 8003fea:	e008      	b.n	8003ffe <menu+0x26da>
		} else if(dilSecim == 1) {
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <menu+0x26f0>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d104      	bne.n	8003ffe <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <menu+0x2740>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f7fc fbdd 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <menu+0x26f0>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d130      	bne.n	8004068 <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 8004006:	4a12      	ldr	r2, [pc, #72]	; (8004050 <menu+0x272c>)
 8004008:	2101      	movs	r1, #1
 800400a:	2002      	movs	r0, #2
 800400c:	f7fc fbd4 	bl	80007b8 <lcd_print>
 8004010:	e033      	b.n	800407a <menu+0x2756>
 8004012:	bf00      	nop
 8004014:	20000c6a 	.word	0x20000c6a
 8004018:	0800e528 	.word	0x0800e528
 800401c:	20000c5c 	.word	0x20000c5c
 8004020:	0800e4cc 	.word	0x0800e4cc
 8004024:	0800e4e0 	.word	0x0800e4e0
 8004028:	0800e4f0 	.word	0x0800e4f0
 800402c:	0800e504 	.word	0x0800e504
 8004030:	40010800 	.word	0x40010800
 8004034:	20000c78 	.word	0x20000c78
 8004038:	20000b38 	.word	0x20000b38
 800403c:	20000c4f 	.word	0x20000c4f
 8004040:	20000c75 	.word	0x20000c75
 8004044:	20000c49 	.word	0x20000c49
 8004048:	0800e538 	.word	0x0800e538
 800404c:	0800e54c 	.word	0x0800e54c
 8004050:	0800e1ec 	.word	0x0800e1ec
 8004054:	0800e560 	.word	0x0800e560
 8004058:	20000c5d 	.word	0x20000c5d
 800405c:	20000bcc 	.word	0x20000bcc
 8004060:	0800e570 	.word	0x0800e570
 8004064:	0800e584 	.word	0x0800e584
			} else if(dilSecim == 1) {
 8004068:	4b98      	ldr	r3, [pc, #608]	; (80042cc <menu+0x29a8>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d104      	bne.n	800407a <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 8004070:	4a97      	ldr	r2, [pc, #604]	; (80042d0 <menu+0x29ac>)
 8004072:	2101      	movs	r1, #1
 8004074:	2002      	movs	r0, #2
 8004076:	f7fc fb9f 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 800407a:	4b96      	ldr	r3, [pc, #600]	; (80042d4 <menu+0x29b0>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	220a      	movs	r2, #10
 8004080:	4995      	ldr	r1, [pc, #596]	; (80042d8 <menu+0x29b4>)
 8004082:	4618      	mov	r0, r3
 8004084:	f008 ffea 	bl	800d05c <itoa>
		lcd_print(2,16,snum);
 8004088:	4a93      	ldr	r2, [pc, #588]	; (80042d8 <menu+0x29b4>)
 800408a:	2110      	movs	r1, #16
 800408c:	2002      	movs	r0, #2
 800408e:	f7fc fb93 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004092:	2102      	movs	r1, #2
 8004094:	4891      	ldr	r0, [pc, #580]	; (80042dc <menu+0x29b8>)
 8004096:	f005 ffb5 	bl	800a004 <HAL_GPIO_ReadPin>
 800409a:	4603      	mov	r3, r0
 800409c:	2b01      	cmp	r3, #1
 800409e:	d115      	bne.n	80040cc <menu+0x27a8>
 80040a0:	4b8f      	ldr	r3, [pc, #572]	; (80042e0 <menu+0x29bc>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	f083 0301 	eor.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00e      	beq.n	80040cc <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 80040ae:	4b89      	ldr	r3, [pc, #548]	; (80042d4 <menu+0x29b0>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b87      	ldr	r3, [pc, #540]	; (80042d4 <menu+0x29b0>)
 80040b8:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80040ba:	4b86      	ldr	r3, [pc, #536]	; (80042d4 <menu+0x29b0>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d902      	bls.n	80040c8 <menu+0x27a4>
				asagiValfTmr = 0;
 80040c2:	4b84      	ldr	r3, [pc, #528]	; (80042d4 <menu+0x29b0>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040c8:	f002 f9fe 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040cc:	2104      	movs	r1, #4
 80040ce:	4883      	ldr	r0, [pc, #524]	; (80042dc <menu+0x29b8>)
 80040d0:	f005 ff98 	bl	800a004 <HAL_GPIO_ReadPin>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d115      	bne.n	8004106 <menu+0x27e2>
 80040da:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <menu+0x29bc>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f083 0301 	eor.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 80040e8:	4b7a      	ldr	r3, [pc, #488]	; (80042d4 <menu+0x29b0>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4b78      	ldr	r3, [pc, #480]	; (80042d4 <menu+0x29b0>)
 80040f2:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80040f4:	4b77      	ldr	r3, [pc, #476]	; (80042d4 <menu+0x29b0>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b06      	cmp	r3, #6
 80040fa:	d902      	bls.n	8004102 <menu+0x27de>
		   		asagiValfTmr = 5;
 80040fc:	4b75      	ldr	r3, [pc, #468]	; (80042d4 <menu+0x29b0>)
 80040fe:	2205      	movs	r2, #5
 8004100:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004102:	f002 f9e1 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004106:	2108      	movs	r1, #8
 8004108:	4874      	ldr	r0, [pc, #464]	; (80042dc <menu+0x29b8>)
 800410a:	f005 ff7b 	bl	800a004 <HAL_GPIO_ReadPin>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10d      	bne.n	8004130 <menu+0x280c>
 8004114:	4b72      	ldr	r3, [pc, #456]	; (80042e0 <menu+0x29bc>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f083 0301 	eor.w	r3, r3, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 8004122:	4b6c      	ldr	r3, [pc, #432]	; (80042d4 <menu+0x29b0>)
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	4b6f      	ldr	r3, [pc, #444]	; (80042e4 <menu+0x29c0>)
 8004128:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800412a:	4b6f      	ldr	r3, [pc, #444]	; (80042e8 <menu+0x29c4>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8004130:	4b6e      	ldr	r3, [pc, #440]	; (80042ec <menu+0x29c8>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b18      	cmp	r3, #24
 8004136:	f040 809d 	bne.w	8004274 <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 800413a:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <menu+0x29cc>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d113      	bne.n	800416a <menu+0x2846>
			if(dilSecim == 0) {
 8004142:	4b62      	ldr	r3, [pc, #392]	; (80042cc <menu+0x29a8>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 800414a:	4a6a      	ldr	r2, [pc, #424]	; (80042f4 <menu+0x29d0>)
 800414c:	2101      	movs	r1, #1
 800414e:	2001      	movs	r0, #1
 8004150:	f7fc fb32 	bl	80007b8 <lcd_print>
 8004154:	e020      	b.n	8004198 <menu+0x2874>
			} else if(dilSecim == 1) {
 8004156:	4b5d      	ldr	r3, [pc, #372]	; (80042cc <menu+0x29a8>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d11c      	bne.n	8004198 <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 800415e:	4a66      	ldr	r2, [pc, #408]	; (80042f8 <menu+0x29d4>)
 8004160:	2101      	movs	r1, #1
 8004162:	2001      	movs	r0, #1
 8004164:	f7fc fb28 	bl	80007b8 <lcd_print>
 8004168:	e016      	b.n	8004198 <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800416a:	4b61      	ldr	r3, [pc, #388]	; (80042f0 <menu+0x29cc>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d112      	bne.n	8004198 <menu+0x2874>
			if(dilSecim == 0) {
 8004172:	4b56      	ldr	r3, [pc, #344]	; (80042cc <menu+0x29a8>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d105      	bne.n	8004186 <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 800417a:	4a60      	ldr	r2, [pc, #384]	; (80042fc <menu+0x29d8>)
 800417c:	2101      	movs	r1, #1
 800417e:	2001      	movs	r0, #1
 8004180:	f7fc fb1a 	bl	80007b8 <lcd_print>
 8004184:	e008      	b.n	8004198 <menu+0x2874>
			} else if(dilSecim == 1) {
 8004186:	4b51      	ldr	r3, [pc, #324]	; (80042cc <menu+0x29a8>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d104      	bne.n	8004198 <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 800418e:	4a5c      	ldr	r2, [pc, #368]	; (8004300 <menu+0x29dc>)
 8004190:	2101      	movs	r1, #1
 8004192:	2001      	movs	r0, #1
 8004194:	f7fc fb10 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <menu+0x29a8>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 80041a0:	4a58      	ldr	r2, [pc, #352]	; (8004304 <menu+0x29e0>)
 80041a2:	2101      	movs	r1, #1
 80041a4:	2002      	movs	r0, #2
 80041a6:	f7fc fb07 	bl	80007b8 <lcd_print>
 80041aa:	e008      	b.n	80041be <menu+0x289a>
			} else if(dilSecim == 1) {
 80041ac:	4b47      	ldr	r3, [pc, #284]	; (80042cc <menu+0x29a8>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d104      	bne.n	80041be <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 80041b4:	4a46      	ldr	r2, [pc, #280]	; (80042d0 <menu+0x29ac>)
 80041b6:	2101      	movs	r1, #1
 80041b8:	2002      	movs	r0, #2
 80041ba:	f7fc fafd 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80041be:	4b52      	ldr	r3, [pc, #328]	; (8004308 <menu+0x29e4>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	220a      	movs	r2, #10
 80041c4:	4944      	ldr	r1, [pc, #272]	; (80042d8 <menu+0x29b4>)
 80041c6:	4618      	mov	r0, r3
 80041c8:	f008 ff48 	bl	800d05c <itoa>
		lcd_print(2, 16, snum);
 80041cc:	4a42      	ldr	r2, [pc, #264]	; (80042d8 <menu+0x29b4>)
 80041ce:	2110      	movs	r1, #16
 80041d0:	2002      	movs	r0, #2
 80041d2:	f7fc faf1 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041d6:	2102      	movs	r1, #2
 80041d8:	4840      	ldr	r0, [pc, #256]	; (80042dc <menu+0x29b8>)
 80041da:	f005 ff13 	bl	800a004 <HAL_GPIO_ReadPin>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d115      	bne.n	8004210 <menu+0x28ec>
 80041e4:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <menu+0x29bc>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	f083 0301 	eor.w	r3, r3, #1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00e      	beq.n	8004210 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80041f2:	4b45      	ldr	r3, [pc, #276]	; (8004308 <menu+0x29e4>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	3301      	adds	r3, #1
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4b43      	ldr	r3, [pc, #268]	; (8004308 <menu+0x29e4>)
 80041fc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80041fe:	4b42      	ldr	r3, [pc, #264]	; (8004308 <menu+0x29e4>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b05      	cmp	r3, #5
 8004204:	d902      	bls.n	800420c <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 8004206:	4b40      	ldr	r3, [pc, #256]	; (8004308 <menu+0x29e4>)
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800420c:	f002 f95c 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004210:	2104      	movs	r1, #4
 8004212:	4832      	ldr	r0, [pc, #200]	; (80042dc <menu+0x29b8>)
 8004214:	f005 fef6 	bl	800a004 <HAL_GPIO_ReadPin>
 8004218:	4603      	mov	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d115      	bne.n	800424a <menu+0x2926>
 800421e:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <menu+0x29bc>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	f083 0301 	eor.w	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00e      	beq.n	800424a <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800422c:	4b36      	ldr	r3, [pc, #216]	; (8004308 <menu+0x29e4>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	3b01      	subs	r3, #1
 8004232:	b2da      	uxtb	r2, r3
 8004234:	4b34      	ldr	r3, [pc, #208]	; (8004308 <menu+0x29e4>)
 8004236:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8004238:	4b33      	ldr	r3, [pc, #204]	; (8004308 <menu+0x29e4>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b06      	cmp	r3, #6
 800423e:	d902      	bls.n	8004246 <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <menu+0x29e4>)
 8004242:	2205      	movs	r2, #5
 8004244:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004246:	f002 f93f 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800424a:	2108      	movs	r1, #8
 800424c:	4823      	ldr	r0, [pc, #140]	; (80042dc <menu+0x29b8>)
 800424e:	f005 fed9 	bl	800a004 <HAL_GPIO_ReadPin>
 8004252:	4603      	mov	r3, r0
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10d      	bne.n	8004274 <menu+0x2950>
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <menu+0x29bc>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	f083 0301 	eor.w	r3, r3, #1
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <menu+0x29e4>)
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <menu+0x29c0>)
 800426c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <menu+0x29c4>)
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8004274:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <menu+0x29c8>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b19      	cmp	r3, #25
 800427a:	f040 80c4 	bne.w	8004406 <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 800427e:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <menu+0x29cc>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d113      	bne.n	80042ae <menu+0x298a>
			if(dilSecim == 0) {
 8004286:	4b11      	ldr	r3, [pc, #68]	; (80042cc <menu+0x29a8>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 800428e:	4a1f      	ldr	r2, [pc, #124]	; (800430c <menu+0x29e8>)
 8004290:	2101      	movs	r1, #1
 8004292:	2001      	movs	r0, #1
 8004294:	f7fc fa90 	bl	80007b8 <lcd_print>
 8004298:	e047      	b.n	800432a <menu+0x2a06>
			} else if(dilSecim == 1) {
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <menu+0x29a8>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d143      	bne.n	800432a <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 80042a2:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <menu+0x29ec>)
 80042a4:	2101      	movs	r1, #1
 80042a6:	2001      	movs	r0, #1
 80042a8:	f7fc fa86 	bl	80007b8 <lcd_print>
 80042ac:	e03d      	b.n	800432a <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80042ae:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <menu+0x29cc>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d139      	bne.n	800432a <menu+0x2a06>
			if(dilSecim == 0) {
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <menu+0x29a8>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d12c      	bne.n	8004318 <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 80042be:	4a15      	ldr	r2, [pc, #84]	; (8004314 <menu+0x29f0>)
 80042c0:	2101      	movs	r1, #1
 80042c2:	2001      	movs	r0, #1
 80042c4:	f7fc fa78 	bl	80007b8 <lcd_print>
 80042c8:	e02f      	b.n	800432a <menu+0x2a06>
 80042ca:	bf00      	nop
 80042cc:	20000c6a 	.word	0x20000c6a
 80042d0:	0800e560 	.word	0x0800e560
 80042d4:	20000c5e 	.word	0x20000c5e
 80042d8:	20000bcc 	.word	0x20000bcc
 80042dc:	40010800 	.word	0x40010800
 80042e0:	20000c78 	.word	0x20000c78
 80042e4:	20000b38 	.word	0x20000b38
 80042e8:	20000c75 	.word	0x20000c75
 80042ec:	20000c49 	.word	0x20000c49
 80042f0:	20000c58 	.word	0x20000c58
 80042f4:	0800e598 	.word	0x0800e598
 80042f8:	0800e5ac 	.word	0x0800e5ac
 80042fc:	0800e5c0 	.word	0x0800e5c0
 8004300:	0800e5d4 	.word	0x0800e5d4
 8004304:	0800e1ec 	.word	0x0800e1ec
 8004308:	20000c5f 	.word	0x20000c5f
 800430c:	0800e5e8 	.word	0x0800e5e8
 8004310:	0800e5fc 	.word	0x0800e5fc
 8004314:	0800e610 	.word	0x0800e610
			} else if(dilSecim == 1) {
 8004318:	4b73      	ldr	r3, [pc, #460]	; (80044e8 <menu+0x2bc4>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d104      	bne.n	800432a <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8004320:	4a72      	ldr	r2, [pc, #456]	; (80044ec <menu+0x2bc8>)
 8004322:	2101      	movs	r1, #1
 8004324:	2001      	movs	r0, #1
 8004326:	f7fc fa47 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 800432a:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <menu+0x2bc4>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d105      	bne.n	800433e <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 8004332:	4a6f      	ldr	r2, [pc, #444]	; (80044f0 <menu+0x2bcc>)
 8004334:	2101      	movs	r1, #1
 8004336:	2002      	movs	r0, #2
 8004338:	f7fc fa3e 	bl	80007b8 <lcd_print>
 800433c:	e008      	b.n	8004350 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 800433e:	4b6a      	ldr	r3, [pc, #424]	; (80044e8 <menu+0x2bc4>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d104      	bne.n	8004350 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 8004346:	4a6b      	ldr	r2, [pc, #428]	; (80044f4 <menu+0x2bd0>)
 8004348:	2101      	movs	r1, #1
 800434a:	2002      	movs	r0, #2
 800434c:	f7fc fa34 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8004350:	4b69      	ldr	r3, [pc, #420]	; (80044f8 <menu+0x2bd4>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	220a      	movs	r2, #10
 8004356:	4969      	ldr	r1, [pc, #420]	; (80044fc <menu+0x2bd8>)
 8004358:	4618      	mov	r0, r3
 800435a:	f008 fe7f 	bl	800d05c <itoa>
		lcd_print(2,16,snum);
 800435e:	4a67      	ldr	r2, [pc, #412]	; (80044fc <menu+0x2bd8>)
 8004360:	2110      	movs	r1, #16
 8004362:	2002      	movs	r0, #2
 8004364:	f7fc fa28 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004368:	2102      	movs	r1, #2
 800436a:	4865      	ldr	r0, [pc, #404]	; (8004500 <menu+0x2bdc>)
 800436c:	f005 fe4a 	bl	800a004 <HAL_GPIO_ReadPin>
 8004370:	4603      	mov	r3, r0
 8004372:	2b01      	cmp	r3, #1
 8004374:	d115      	bne.n	80043a2 <menu+0x2a7e>
 8004376:	4b63      	ldr	r3, [pc, #396]	; (8004504 <menu+0x2be0>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	f083 0301 	eor.w	r3, r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8004384:	4b5c      	ldr	r3, [pc, #368]	; (80044f8 <menu+0x2bd4>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	3301      	adds	r3, #1
 800438a:	b2da      	uxtb	r2, r3
 800438c:	4b5a      	ldr	r3, [pc, #360]	; (80044f8 <menu+0x2bd4>)
 800438e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004390:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <menu+0x2bd4>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b05      	cmp	r3, #5
 8004396:	d902      	bls.n	800439e <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 8004398:	4b57      	ldr	r3, [pc, #348]	; (80044f8 <menu+0x2bd4>)
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800439e:	f002 f893 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043a2:	2104      	movs	r1, #4
 80043a4:	4856      	ldr	r0, [pc, #344]	; (8004500 <menu+0x2bdc>)
 80043a6:	f005 fe2d 	bl	800a004 <HAL_GPIO_ReadPin>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d115      	bne.n	80043dc <menu+0x2ab8>
 80043b0:	4b54      	ldr	r3, [pc, #336]	; (8004504 <menu+0x2be0>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f083 0301 	eor.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00e      	beq.n	80043dc <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80043be:	4b4e      	ldr	r3, [pc, #312]	; (80044f8 <menu+0x2bd4>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <menu+0x2bd4>)
 80043c8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80043ca:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <menu+0x2bd4>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d902      	bls.n	80043d8 <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 80043d2:	4b49      	ldr	r3, [pc, #292]	; (80044f8 <menu+0x2bd4>)
 80043d4:	2205      	movs	r2, #5
 80043d6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043d8:	f002 f876 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043dc:	2108      	movs	r1, #8
 80043de:	4848      	ldr	r0, [pc, #288]	; (8004500 <menu+0x2bdc>)
 80043e0:	f005 fe10 	bl	800a004 <HAL_GPIO_ReadPin>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d10d      	bne.n	8004406 <menu+0x2ae2>
 80043ea:	4b46      	ldr	r3, [pc, #280]	; (8004504 <menu+0x2be0>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	f083 0301 	eor.w	r3, r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d006      	beq.n	8004406 <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 80043f8:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <menu+0x2bd4>)
 80043fa:	781a      	ldrb	r2, [r3, #0]
 80043fc:	4b42      	ldr	r3, [pc, #264]	; (8004508 <menu+0x2be4>)
 80043fe:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004400:	4b42      	ldr	r3, [pc, #264]	; (800450c <menu+0x2be8>)
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8004406:	4b42      	ldr	r3, [pc, #264]	; (8004510 <menu+0x2bec>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b1a      	cmp	r3, #26
 800440c:	f040 80ec 	bne.w	80045e8 <menu+0x2cc4>
		if(dilSecim == 0) {
 8004410:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <menu+0x2bc4>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004418:	4a3e      	ldr	r2, [pc, #248]	; (8004514 <menu+0x2bf0>)
 800441a:	2101      	movs	r1, #1
 800441c:	2001      	movs	r0, #1
 800441e:	f7fc f9cb 	bl	80007b8 <lcd_print>
 8004422:	e008      	b.n	8004436 <menu+0x2b12>
		} else if(dilSecim == 1) {
 8004424:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <menu+0x2bc4>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d104      	bne.n	8004436 <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 800442c:	4a3a      	ldr	r2, [pc, #232]	; (8004518 <menu+0x2bf4>)
 800442e:	2101      	movs	r1, #1
 8004430:	2001      	movs	r0, #1
 8004432:	f7fc f9c1 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8004436:	4b39      	ldr	r3, [pc, #228]	; (800451c <menu+0x2bf8>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b63      	cmp	r3, #99	; 0x63
 800443c:	d91e      	bls.n	800447c <menu+0x2b58>
			if(dilSecim == 0) {
 800443e:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <menu+0x2bc4>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 8004446:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <menu+0x2bcc>)
 8004448:	2101      	movs	r1, #1
 800444a:	2002      	movs	r0, #2
 800444c:	f7fc f9b4 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <menu+0x2bc4>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d104      	bne.n	8004462 <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 8004458:	4a26      	ldr	r2, [pc, #152]	; (80044f4 <menu+0x2bd0>)
 800445a:	2101      	movs	r1, #1
 800445c:	2002      	movs	r0, #2
 800445e:	f7fc f9ab 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <menu+0x2bf8>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	220a      	movs	r2, #10
 8004468:	4924      	ldr	r1, [pc, #144]	; (80044fc <menu+0x2bd8>)
 800446a:	4618      	mov	r0, r3
 800446c:	f008 fdf6 	bl	800d05c <itoa>
			lcd_print(2,14,snum);
 8004470:	4a22      	ldr	r2, [pc, #136]	; (80044fc <menu+0x2bd8>)
 8004472:	210e      	movs	r1, #14
 8004474:	2002      	movs	r0, #2
 8004476:	f7fc f99f 	bl	80007b8 <lcd_print>
 800447a:	e066      	b.n	800454a <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800447c:	4b27      	ldr	r3, [pc, #156]	; (800451c <menu+0x2bf8>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b09      	cmp	r3, #9
 8004482:	d923      	bls.n	80044cc <menu+0x2ba8>
 8004484:	4b25      	ldr	r3, [pc, #148]	; (800451c <menu+0x2bf8>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b63      	cmp	r3, #99	; 0x63
 800448a:	d81f      	bhi.n	80044cc <menu+0x2ba8>
			if(dilSecim == 0) {
 800448c:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <menu+0x2bc4>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d105      	bne.n	80044a0 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 8004494:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <menu+0x2bcc>)
 8004496:	2101      	movs	r1, #1
 8004498:	2002      	movs	r0, #2
 800449a:	f7fc f98d 	bl	80007b8 <lcd_print>
 800449e:	e008      	b.n	80044b2 <menu+0x2b8e>
			} else if(dilSecim == 1) {
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <menu+0x2bc4>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d104      	bne.n	80044b2 <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 80044a8:	4a12      	ldr	r2, [pc, #72]	; (80044f4 <menu+0x2bd0>)
 80044aa:	2101      	movs	r1, #1
 80044ac:	2002      	movs	r0, #2
 80044ae:	f7fc f983 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80044b2:	4b1a      	ldr	r3, [pc, #104]	; (800451c <menu+0x2bf8>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	220a      	movs	r2, #10
 80044b8:	4910      	ldr	r1, [pc, #64]	; (80044fc <menu+0x2bd8>)
 80044ba:	4618      	mov	r0, r3
 80044bc:	f008 fdce 	bl	800d05c <itoa>
			lcd_print(2, 15, snum);
 80044c0:	4a0e      	ldr	r2, [pc, #56]	; (80044fc <menu+0x2bd8>)
 80044c2:	210f      	movs	r1, #15
 80044c4:	2002      	movs	r0, #2
 80044c6:	f7fc f977 	bl	80007b8 <lcd_print>
 80044ca:	e03e      	b.n	800454a <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <menu+0x2bf8>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d83a      	bhi.n	800454a <menu+0x2c26>
			if(dilSecim == 0) {
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <menu+0x2bc4>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d121      	bne.n	8004520 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <menu+0x2bcc>)
 80044de:	2101      	movs	r1, #1
 80044e0:	2002      	movs	r0, #2
 80044e2:	f7fc f969 	bl	80007b8 <lcd_print>
 80044e6:	e024      	b.n	8004532 <menu+0x2c0e>
 80044e8:	20000c6a 	.word	0x20000c6a
 80044ec:	0800e624 	.word	0x0800e624
 80044f0:	0800e1ec 	.word	0x0800e1ec
 80044f4:	0800e560 	.word	0x0800e560
 80044f8:	20000c60 	.word	0x20000c60
 80044fc:	20000bcc 	.word	0x20000bcc
 8004500:	40010800 	.word	0x40010800
 8004504:	20000c78 	.word	0x20000c78
 8004508:	20000b38 	.word	0x20000b38
 800450c:	20000c75 	.word	0x20000c75
 8004510:	20000c49 	.word	0x20000c49
 8004514:	0800e638 	.word	0x0800e638
 8004518:	0800e64c 	.word	0x0800e64c
 800451c:	20000c61 	.word	0x20000c61
			} else if(dilSecim == 1) {
 8004520:	4b8f      	ldr	r3, [pc, #572]	; (8004760 <menu+0x2e3c>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d104      	bne.n	8004532 <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 8004528:	4a8e      	ldr	r2, [pc, #568]	; (8004764 <menu+0x2e40>)
 800452a:	2101      	movs	r1, #1
 800452c:	2002      	movs	r0, #2
 800452e:	f7fc f943 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004532:	4b8d      	ldr	r3, [pc, #564]	; (8004768 <menu+0x2e44>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	220a      	movs	r2, #10
 8004538:	498c      	ldr	r1, [pc, #560]	; (800476c <menu+0x2e48>)
 800453a:	4618      	mov	r0, r3
 800453c:	f008 fd8e 	bl	800d05c <itoa>
			lcd_print(2, 16, snum);
 8004540:	4a8a      	ldr	r2, [pc, #552]	; (800476c <menu+0x2e48>)
 8004542:	2110      	movs	r1, #16
 8004544:	2002      	movs	r0, #2
 8004546:	f7fc f937 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800454a:	2102      	movs	r1, #2
 800454c:	4888      	ldr	r0, [pc, #544]	; (8004770 <menu+0x2e4c>)
 800454e:	f005 fd59 	bl	800a004 <HAL_GPIO_ReadPin>
 8004552:	4603      	mov	r3, r0
 8004554:	2b01      	cmp	r3, #1
 8004556:	d115      	bne.n	8004584 <menu+0x2c60>
 8004558:	4b86      	ldr	r3, [pc, #536]	; (8004774 <menu+0x2e50>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	f083 0301 	eor.w	r3, r3, #1
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00e      	beq.n	8004584 <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004566:	4b80      	ldr	r3, [pc, #512]	; (8004768 <menu+0x2e44>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	3301      	adds	r3, #1
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4b7e      	ldr	r3, [pc, #504]	; (8004768 <menu+0x2e44>)
 8004570:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8004572:	4b7d      	ldr	r3, [pc, #500]	; (8004768 <menu+0x2e44>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2bb4      	cmp	r3, #180	; 0xb4
 8004578:	d902      	bls.n	8004580 <menu+0x2c5c>
				makineCalismaTmr = 0;
 800457a:	4b7b      	ldr	r3, [pc, #492]	; (8004768 <menu+0x2e44>)
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004580:	f001 ffa2 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004584:	2104      	movs	r1, #4
 8004586:	487a      	ldr	r0, [pc, #488]	; (8004770 <menu+0x2e4c>)
 8004588:	f005 fd3c 	bl	800a004 <HAL_GPIO_ReadPin>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d115      	bne.n	80045be <menu+0x2c9a>
 8004592:	4b78      	ldr	r3, [pc, #480]	; (8004774 <menu+0x2e50>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f083 0301 	eor.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 80045a0:	4b71      	ldr	r3, [pc, #452]	; (8004768 <menu+0x2e44>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	4b6f      	ldr	r3, [pc, #444]	; (8004768 <menu+0x2e44>)
 80045aa:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80045ac:	4b6e      	ldr	r3, [pc, #440]	; (8004768 <menu+0x2e44>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2bb5      	cmp	r3, #181	; 0xb5
 80045b2:	d902      	bls.n	80045ba <menu+0x2c96>
		   		makineCalismaTmr = 180;
 80045b4:	4b6c      	ldr	r3, [pc, #432]	; (8004768 <menu+0x2e44>)
 80045b6:	22b4      	movs	r2, #180	; 0xb4
 80045b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045ba:	f001 ff85 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045be:	2108      	movs	r1, #8
 80045c0:	486b      	ldr	r0, [pc, #428]	; (8004770 <menu+0x2e4c>)
 80045c2:	f005 fd1f 	bl	800a004 <HAL_GPIO_ReadPin>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d10d      	bne.n	80045e8 <menu+0x2cc4>
 80045cc:	4b69      	ldr	r3, [pc, #420]	; (8004774 <menu+0x2e50>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	f083 0301 	eor.w	r3, r3, #1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d006      	beq.n	80045e8 <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <menu+0x2e44>)
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	4b66      	ldr	r3, [pc, #408]	; (8004778 <menu+0x2e54>)
 80045e0:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80045e2:	4b66      	ldr	r3, [pc, #408]	; (800477c <menu+0x2e58>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80045e8:	4b65      	ldr	r3, [pc, #404]	; (8004780 <menu+0x2e5c>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b1b      	cmp	r3, #27
 80045ee:	f040 8083 	bne.w	80046f8 <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 80045f2:	4a64      	ldr	r2, [pc, #400]	; (8004784 <menu+0x2e60>)
 80045f4:	2101      	movs	r1, #1
 80045f6:	2001      	movs	r0, #1
 80045f8:	f7fc f8de 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 80045fc:	4b62      	ldr	r3, [pc, #392]	; (8004788 <menu+0x2e64>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d113      	bne.n	800462c <menu+0x2d08>
			if(dilSecim == 0) {
 8004604:	4b56      	ldr	r3, [pc, #344]	; (8004760 <menu+0x2e3c>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d105      	bne.n	8004618 <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 800460c:	4a5f      	ldr	r2, [pc, #380]	; (800478c <menu+0x2e68>)
 800460e:	2101      	movs	r1, #1
 8004610:	2002      	movs	r0, #2
 8004612:	f7fc f8d1 	bl	80007b8 <lcd_print>
 8004616:	e020      	b.n	800465a <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004618:	4b51      	ldr	r3, [pc, #324]	; (8004760 <menu+0x2e3c>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d11c      	bne.n	800465a <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 8004620:	4a5b      	ldr	r2, [pc, #364]	; (8004790 <menu+0x2e6c>)
 8004622:	2101      	movs	r1, #1
 8004624:	2002      	movs	r0, #2
 8004626:	f7fc f8c7 	bl	80007b8 <lcd_print>
 800462a:	e016      	b.n	800465a <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 800462c:	4b56      	ldr	r3, [pc, #344]	; (8004788 <menu+0x2e64>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d112      	bne.n	800465a <menu+0x2d36>
			if(dilSecim == 0) {
 8004634:	4b4a      	ldr	r3, [pc, #296]	; (8004760 <menu+0x2e3c>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 800463c:	4a55      	ldr	r2, [pc, #340]	; (8004794 <menu+0x2e70>)
 800463e:	2101      	movs	r1, #1
 8004640:	2002      	movs	r0, #2
 8004642:	f7fc f8b9 	bl	80007b8 <lcd_print>
 8004646:	e008      	b.n	800465a <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004648:	4b45      	ldr	r3, [pc, #276]	; (8004760 <menu+0x2e3c>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d104      	bne.n	800465a <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 8004650:	4a51      	ldr	r2, [pc, #324]	; (8004798 <menu+0x2e74>)
 8004652:	2101      	movs	r1, #1
 8004654:	2002      	movs	r0, #2
 8004656:	f7fc f8af 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800465a:	2102      	movs	r1, #2
 800465c:	4844      	ldr	r0, [pc, #272]	; (8004770 <menu+0x2e4c>)
 800465e:	f005 fcd1 	bl	800a004 <HAL_GPIO_ReadPin>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d115      	bne.n	8004694 <menu+0x2d70>
 8004668:	4b42      	ldr	r3, [pc, #264]	; (8004774 <menu+0x2e50>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f083 0301 	eor.w	r3, r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00e      	beq.n	8004694 <menu+0x2d70>
			buzzer = buzzer + 1;
 8004676:	4b44      	ldr	r3, [pc, #272]	; (8004788 <menu+0x2e64>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4b42      	ldr	r3, [pc, #264]	; (8004788 <menu+0x2e64>)
 8004680:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004682:	4b41      	ldr	r3, [pc, #260]	; (8004788 <menu+0x2e64>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d902      	bls.n	8004690 <menu+0x2d6c>
				buzzer = 0;
 800468a:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <menu+0x2e64>)
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004690:	f001 ff1a 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004694:	2104      	movs	r1, #4
 8004696:	4836      	ldr	r0, [pc, #216]	; (8004770 <menu+0x2e4c>)
 8004698:	f005 fcb4 	bl	800a004 <HAL_GPIO_ReadPin>
 800469c:	4603      	mov	r3, r0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d115      	bne.n	80046ce <menu+0x2daa>
 80046a2:	4b34      	ldr	r3, [pc, #208]	; (8004774 <menu+0x2e50>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f083 0301 	eor.w	r3, r3, #1
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00e      	beq.n	80046ce <menu+0x2daa>
			buzzer = buzzer - 1;
 80046b0:	4b35      	ldr	r3, [pc, #212]	; (8004788 <menu+0x2e64>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	4b33      	ldr	r3, [pc, #204]	; (8004788 <menu+0x2e64>)
 80046ba:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80046bc:	4b32      	ldr	r3, [pc, #200]	; (8004788 <menu+0x2e64>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <menu+0x2da6>
		   		buzzer = 1;
 80046c4:	4b30      	ldr	r3, [pc, #192]	; (8004788 <menu+0x2e64>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80046ca:	f001 fefd 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ce:	2108      	movs	r1, #8
 80046d0:	4827      	ldr	r0, [pc, #156]	; (8004770 <menu+0x2e4c>)
 80046d2:	f005 fc97 	bl	800a004 <HAL_GPIO_ReadPin>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10d      	bne.n	80046f8 <menu+0x2dd4>
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <menu+0x2e50>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f083 0301 	eor.w	r3, r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d006      	beq.n	80046f8 <menu+0x2dd4>
			eepromData[25] = buzzer;
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <menu+0x2e64>)
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <menu+0x2e54>)
 80046f0:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <menu+0x2e58>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80046f8:	4b21      	ldr	r3, [pc, #132]	; (8004780 <menu+0x2e5c>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b1c      	cmp	r3, #28
 80046fe:	f040 80ab 	bne.w	8004858 <menu+0x2f34>
		calismaSayModu = 0;
 8004702:	4b26      	ldr	r3, [pc, #152]	; (800479c <menu+0x2e78>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004708:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <menu+0x2e7c>)
 800470a:	2101      	movs	r1, #1
 800470c:	2001      	movs	r0, #1
 800470e:	f7fc f853 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <menu+0x2e80>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d113      	bne.n	8004742 <menu+0x2e1e>
			if(dilSecim == 0) {
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <menu+0x2e3c>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d105      	bne.n	800472e <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 8004722:	4a1a      	ldr	r2, [pc, #104]	; (800478c <menu+0x2e68>)
 8004724:	2101      	movs	r1, #1
 8004726:	2002      	movs	r0, #2
 8004728:	f7fc f846 	bl	80007b8 <lcd_print>
 800472c:	e045      	b.n	80047ba <menu+0x2e96>
			} else if(dilSecim == 1) {
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <menu+0x2e3c>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d141      	bne.n	80047ba <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 8004736:	4a16      	ldr	r2, [pc, #88]	; (8004790 <menu+0x2e6c>)
 8004738:	2101      	movs	r1, #1
 800473a:	2002      	movs	r0, #2
 800473c:	f7fc f83c 	bl	80007b8 <lcd_print>
 8004740:	e03b      	b.n	80047ba <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <menu+0x2e80>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d137      	bne.n	80047ba <menu+0x2e96>
			if(dilSecim == 0){
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <menu+0x2e3c>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d12a      	bne.n	80047a8 <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 8004752:	4a10      	ldr	r2, [pc, #64]	; (8004794 <menu+0x2e70>)
 8004754:	2101      	movs	r1, #1
 8004756:	2002      	movs	r0, #2
 8004758:	f7fc f82e 	bl	80007b8 <lcd_print>
 800475c:	e02d      	b.n	80047ba <menu+0x2e96>
 800475e:	bf00      	nop
 8004760:	20000c6a 	.word	0x20000c6a
 8004764:	0800e560 	.word	0x0800e560
 8004768:	20000c61 	.word	0x20000c61
 800476c:	20000bcc 	.word	0x20000bcc
 8004770:	40010800 	.word	0x40010800
 8004774:	20000c78 	.word	0x20000c78
 8004778:	20000b38 	.word	0x20000b38
 800477c:	20000c75 	.word	0x20000c75
 8004780:	20000c49 	.word	0x20000c49
 8004784:	0800e660 	.word	0x0800e660
 8004788:	20000c65 	.word	0x20000c65
 800478c:	0800df88 	.word	0x0800df88
 8004790:	0800df9c 	.word	0x0800df9c
 8004794:	0800dfe8 	.word	0x0800dfe8
 8004798:	0800dffc 	.word	0x0800dffc
 800479c:	20000c69 	.word	0x20000c69
 80047a0:	0800e674 	.word	0x0800e674
 80047a4:	20000c67 	.word	0x20000c67
			} else if(dilSecim == 1) {
 80047a8:	4b71      	ldr	r3, [pc, #452]	; (8004970 <menu+0x304c>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d104      	bne.n	80047ba <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 80047b0:	4a70      	ldr	r2, [pc, #448]	; (8004974 <menu+0x3050>)
 80047b2:	2101      	movs	r1, #1
 80047b4:	2002      	movs	r0, #2
 80047b6:	f7fb ffff 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ba:	2102      	movs	r1, #2
 80047bc:	486e      	ldr	r0, [pc, #440]	; (8004978 <menu+0x3054>)
 80047be:	f005 fc21 	bl	800a004 <HAL_GPIO_ReadPin>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d115      	bne.n	80047f4 <menu+0x2ed0>
 80047c8:	4b6c      	ldr	r3, [pc, #432]	; (800497c <menu+0x3058>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f083 0301 	eor.w	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00e      	beq.n	80047f4 <menu+0x2ed0>
			demoMode = demoMode + 1;
 80047d6:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <menu+0x305c>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	3301      	adds	r3, #1
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4b68      	ldr	r3, [pc, #416]	; (8004980 <menu+0x305c>)
 80047e0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <menu+0x305c>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d902      	bls.n	80047f0 <menu+0x2ecc>
				demoMode = 0;
 80047ea:	4b65      	ldr	r3, [pc, #404]	; (8004980 <menu+0x305c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80047f0:	f001 fe6a 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047f4:	2104      	movs	r1, #4
 80047f6:	4860      	ldr	r0, [pc, #384]	; (8004978 <menu+0x3054>)
 80047f8:	f005 fc04 	bl	800a004 <HAL_GPIO_ReadPin>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d115      	bne.n	800482e <menu+0x2f0a>
 8004802:	4b5e      	ldr	r3, [pc, #376]	; (800497c <menu+0x3058>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	f083 0301 	eor.w	r3, r3, #1
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00e      	beq.n	800482e <menu+0x2f0a>
			demoMode = demoMode - 1;
 8004810:	4b5b      	ldr	r3, [pc, #364]	; (8004980 <menu+0x305c>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	3b01      	subs	r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b59      	ldr	r3, [pc, #356]	; (8004980 <menu+0x305c>)
 800481a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800481c:	4b58      	ldr	r3, [pc, #352]	; (8004980 <menu+0x305c>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <menu+0x2f06>
		   		demoMode = 1;
 8004824:	4b56      	ldr	r3, [pc, #344]	; (8004980 <menu+0x305c>)
 8004826:	2201      	movs	r2, #1
 8004828:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800482a:	f001 fe4d 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800482e:	2108      	movs	r1, #8
 8004830:	4851      	ldr	r0, [pc, #324]	; (8004978 <menu+0x3054>)
 8004832:	f005 fbe7 	bl	800a004 <HAL_GPIO_ReadPin>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10d      	bne.n	8004858 <menu+0x2f34>
 800483c:	4b4f      	ldr	r3, [pc, #316]	; (800497c <menu+0x3058>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	f083 0301 	eor.w	r3, r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <menu+0x2f34>
			eepromData[26] = demoMode;
 800484a:	4b4d      	ldr	r3, [pc, #308]	; (8004980 <menu+0x305c>)
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	4b4d      	ldr	r3, [pc, #308]	; (8004984 <menu+0x3060>)
 8004850:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004852:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <menu+0x3064>)
 8004854:	2201      	movs	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004858:	4b4c      	ldr	r3, [pc, #304]	; (800498c <menu+0x3068>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b1d      	cmp	r3, #29
 800485e:	f040 8132 	bne.w	8004ac6 <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004862:	4b4b      	ldr	r3, [pc, #300]	; (8004990 <menu+0x306c>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d113      	bne.n	8004892 <menu+0x2f6e>
 800486a:	4b4a      	ldr	r3, [pc, #296]	; (8004994 <menu+0x3070>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <menu+0x2f6e>
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <menu+0x3074>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <menu+0x2f6e>
 800487a:	4b48      	ldr	r3, [pc, #288]	; (800499c <menu+0x3078>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <menu+0x2f6e>
 8004882:	4b47      	ldr	r3, [pc, #284]	; (80049a0 <menu+0x307c>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <menu+0x2f6e>
			calismaSayisiYar = 0;
 800488a:	4b46      	ldr	r3, [pc, #280]	; (80049a4 <menu+0x3080>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	e002      	b.n	8004898 <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 8004892:	4b44      	ldr	r3, [pc, #272]	; (80049a4 <menu+0x3080>)
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004898:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <menu+0x3084>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d154      	bne.n	800494a <menu+0x3026>
			if(dilSecim == 0) {
 80048a0:	4b33      	ldr	r3, [pc, #204]	; (8004970 <menu+0x304c>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80048a8:	4a40      	ldr	r2, [pc, #256]	; (80049ac <menu+0x3088>)
 80048aa:	2101      	movs	r1, #1
 80048ac:	2001      	movs	r0, #1
 80048ae:	f7fb ff83 	bl	80007b8 <lcd_print>
 80048b2:	e008      	b.n	80048c6 <menu+0x2fa2>
			} else if(dilSecim == 1) {
 80048b4:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <menu+0x304c>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d104      	bne.n	80048c6 <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 80048bc:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <menu+0x308c>)
 80048be:	2101      	movs	r1, #1
 80048c0:	2001      	movs	r0, #1
 80048c2:	f7fb ff79 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80048c6:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <menu+0x307c>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	220a      	movs	r2, #10
 80048cc:	4939      	ldr	r1, [pc, #228]	; (80049b4 <menu+0x3090>)
 80048ce:	4618      	mov	r0, r3
 80048d0:	f008 fbc4 	bl	800d05c <itoa>
			lcd_print(2, 12, snum);
 80048d4:	4a37      	ldr	r2, [pc, #220]	; (80049b4 <menu+0x3090>)
 80048d6:	210c      	movs	r1, #12
 80048d8:	2002      	movs	r0, #2
 80048da:	f7fb ff6d 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80048de:	4b2f      	ldr	r3, [pc, #188]	; (800499c <menu+0x3078>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	220a      	movs	r2, #10
 80048e4:	4933      	ldr	r1, [pc, #204]	; (80049b4 <menu+0x3090>)
 80048e6:	4618      	mov	r0, r3
 80048e8:	f008 fbb8 	bl	800d05c <itoa>
			lcd_print(2, 13, snum);
 80048ec:	4a31      	ldr	r2, [pc, #196]	; (80049b4 <menu+0x3090>)
 80048ee:	210d      	movs	r1, #13
 80048f0:	2002      	movs	r0, #2
 80048f2:	f7fb ff61 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80048f6:	4b28      	ldr	r3, [pc, #160]	; (8004998 <menu+0x3074>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	220a      	movs	r2, #10
 80048fc:	492d      	ldr	r1, [pc, #180]	; (80049b4 <menu+0x3090>)
 80048fe:	4618      	mov	r0, r3
 8004900:	f008 fbac 	bl	800d05c <itoa>
			lcd_print(2, 14, snum);
 8004904:	4a2b      	ldr	r2, [pc, #172]	; (80049b4 <menu+0x3090>)
 8004906:	210e      	movs	r1, #14
 8004908:	2002      	movs	r0, #2
 800490a:	f7fb ff55 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800490e:	4b21      	ldr	r3, [pc, #132]	; (8004994 <menu+0x3070>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	220a      	movs	r2, #10
 8004914:	4927      	ldr	r1, [pc, #156]	; (80049b4 <menu+0x3090>)
 8004916:	4618      	mov	r0, r3
 8004918:	f008 fba0 	bl	800d05c <itoa>
			lcd_print(2, 15, snum);
 800491c:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <menu+0x3090>)
 800491e:	210f      	movs	r1, #15
 8004920:	2002      	movs	r0, #2
 8004922:	f7fb ff49 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <menu+0x306c>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	220a      	movs	r2, #10
 800492c:	4921      	ldr	r1, [pc, #132]	; (80049b4 <menu+0x3090>)
 800492e:	4618      	mov	r0, r3
 8004930:	f008 fb94 	bl	800d05c <itoa>
			lcd_print(2, 16, snum);
 8004934:	4a1f      	ldr	r2, [pc, #124]	; (80049b4 <menu+0x3090>)
 8004936:	2110      	movs	r1, #16
 8004938:	2002      	movs	r0, #2
 800493a:	f7fb ff3d 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 800493e:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <menu+0x3094>)
 8004940:	2101      	movs	r1, #1
 8004942:	2002      	movs	r0, #2
 8004944:	f7fb ff38 	bl	80007b8 <lcd_print>
 8004948:	e048      	b.n	80049dc <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 800494a:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <menu+0x3084>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d144      	bne.n	80049dc <menu+0x30b8>
			if(dilSecim == 0) {
 8004952:	4b07      	ldr	r3, [pc, #28]	; (8004970 <menu+0x304c>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d132      	bne.n	80049c0 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800495a:	4a14      	ldr	r2, [pc, #80]	; (80049ac <menu+0x3088>)
 800495c:	2101      	movs	r1, #1
 800495e:	2001      	movs	r0, #1
 8004960:	f7fb ff2a 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004964:	4a15      	ldr	r2, [pc, #84]	; (80049bc <menu+0x3098>)
 8004966:	2101      	movs	r1, #1
 8004968:	2002      	movs	r0, #2
 800496a:	f7fb ff25 	bl	80007b8 <lcd_print>
 800496e:	e035      	b.n	80049dc <menu+0x30b8>
 8004970:	20000c6a 	.word	0x20000c6a
 8004974:	0800dffc 	.word	0x0800dffc
 8004978:	40010800 	.word	0x40010800
 800497c:	20000c78 	.word	0x20000c78
 8004980:	20000c67 	.word	0x20000c67
 8004984:	20000b38 	.word	0x20000b38
 8004988:	20000c75 	.word	0x20000c75
 800498c:	20000c49 	.word	0x20000c49
 8004990:	20000c46 	.word	0x20000c46
 8004994:	20000c47 	.word	0x20000c47
 8004998:	200009c2 	.word	0x200009c2
 800499c:	200009c3 	.word	0x200009c3
 80049a0:	20000c48 	.word	0x20000c48
 80049a4:	20000c8a 	.word	0x20000c8a
 80049a8:	20000c69 	.word	0x20000c69
 80049ac:	0800e684 	.word	0x0800e684
 80049b0:	0800e698 	.word	0x0800e698
 80049b4:	20000bcc 	.word	0x20000bcc
 80049b8:	0800e6ac 	.word	0x0800e6ac
 80049bc:	0800e6b8 	.word	0x0800e6b8
			} else if(dilSecim == 1) {
 80049c0:	4b94      	ldr	r3, [pc, #592]	; (8004c14 <menu+0x32f0>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d109      	bne.n	80049dc <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 80049c8:	4a93      	ldr	r2, [pc, #588]	; (8004c18 <menu+0x32f4>)
 80049ca:	2101      	movs	r1, #1
 80049cc:	2001      	movs	r0, #1
 80049ce:	f7fb fef3 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80049d2:	4a92      	ldr	r2, [pc, #584]	; (8004c1c <menu+0x32f8>)
 80049d4:	2101      	movs	r1, #1
 80049d6:	2002      	movs	r0, #2
 80049d8:	f7fb feee 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80049dc:	2102      	movs	r1, #2
 80049de:	4890      	ldr	r0, [pc, #576]	; (8004c20 <menu+0x32fc>)
 80049e0:	f005 fb10 	bl	800a004 <HAL_GPIO_ReadPin>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d119      	bne.n	8004a1e <menu+0x30fa>
 80049ea:	4b8e      	ldr	r3, [pc, #568]	; (8004c24 <menu+0x3300>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	f083 0301 	eor.w	r3, r3, #1
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d012      	beq.n	8004a1e <menu+0x30fa>
 80049f8:	4b8b      	ldr	r3, [pc, #556]	; (8004c28 <menu+0x3304>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00e      	beq.n	8004a1e <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 8004a00:	4b8a      	ldr	r3, [pc, #552]	; (8004c2c <menu+0x3308>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	4b88      	ldr	r3, [pc, #544]	; (8004c2c <menu+0x3308>)
 8004a0a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004a0c:	4b87      	ldr	r3, [pc, #540]	; (8004c2c <menu+0x3308>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d902      	bls.n	8004a1a <menu+0x30f6>
				calismaSayModu = 0;
 8004a14:	4b85      	ldr	r3, [pc, #532]	; (8004c2c <menu+0x3308>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004a1a:	f001 fd55 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004a1e:	2104      	movs	r1, #4
 8004a20:	487f      	ldr	r0, [pc, #508]	; (8004c20 <menu+0x32fc>)
 8004a22:	f005 faef 	bl	800a004 <HAL_GPIO_ReadPin>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d119      	bne.n	8004a60 <menu+0x313c>
 8004a2c:	4b7d      	ldr	r3, [pc, #500]	; (8004c24 <menu+0x3300>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	f083 0301 	eor.w	r3, r3, #1
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d012      	beq.n	8004a60 <menu+0x313c>
 8004a3a:	4b7b      	ldr	r3, [pc, #492]	; (8004c28 <menu+0x3304>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00e      	beq.n	8004a60 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 8004a42:	4b7a      	ldr	r3, [pc, #488]	; (8004c2c <menu+0x3308>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4b78      	ldr	r3, [pc, #480]	; (8004c2c <menu+0x3308>)
 8004a4c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004a4e:	4b77      	ldr	r3, [pc, #476]	; (8004c2c <menu+0x3308>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <menu+0x3138>
		   		calismaSayModu = 1;
 8004a56:	4b75      	ldr	r3, [pc, #468]	; (8004c2c <menu+0x3308>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004a5c:	f001 fd34 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a60:	2108      	movs	r1, #8
 8004a62:	486f      	ldr	r0, [pc, #444]	; (8004c20 <menu+0x32fc>)
 8004a64:	f005 face 	bl	800a004 <HAL_GPIO_ReadPin>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d12b      	bne.n	8004ac6 <menu+0x31a2>
 8004a6e:	4b6d      	ldr	r3, [pc, #436]	; (8004c24 <menu+0x3300>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	f083 0301 	eor.w	r3, r3, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d024      	beq.n	8004ac6 <menu+0x31a2>
			eepromData[32] = 0;
 8004a7c:	4b6c      	ldr	r3, [pc, #432]	; (8004c30 <menu+0x330c>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004a84:	4b6a      	ldr	r3, [pc, #424]	; (8004c30 <menu+0x330c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004a8a:	4b69      	ldr	r3, [pc, #420]	; (8004c30 <menu+0x330c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004a90:	4b67      	ldr	r3, [pc, #412]	; (8004c30 <menu+0x330c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004a96:	4b66      	ldr	r3, [pc, #408]	; (8004c30 <menu+0x330c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004a9c:	4b65      	ldr	r3, [pc, #404]	; (8004c34 <menu+0x3310>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004aa2:	4b65      	ldr	r3, [pc, #404]	; (8004c38 <menu+0x3314>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004aa8:	4b64      	ldr	r3, [pc, #400]	; (8004c3c <menu+0x3318>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004aae:	4b64      	ldr	r3, [pc, #400]	; (8004c40 <menu+0x331c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004ab4:	4b63      	ldr	r3, [pc, #396]	; (8004c44 <menu+0x3320>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004aba:	4b5c      	ldr	r3, [pc, #368]	; (8004c2c <menu+0x3308>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004ac0:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <menu+0x3324>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004ac6:	4b61      	ldr	r3, [pc, #388]	; (8004c4c <menu+0x3328>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b1e      	cmp	r3, #30
 8004acc:	d16f      	bne.n	8004bae <menu+0x328a>
		calismaSayModu = 0;
 8004ace:	4b57      	ldr	r3, [pc, #348]	; (8004c2c <menu+0x3308>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004ad4:	4b4f      	ldr	r3, [pc, #316]	; (8004c14 <menu+0x32f0>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004adc:	4a5c      	ldr	r2, [pc, #368]	; (8004c50 <menu+0x332c>)
 8004ade:	2101      	movs	r1, #1
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f7fb fe69 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004ae6:	4a5b      	ldr	r2, [pc, #364]	; (8004c54 <menu+0x3330>)
 8004ae8:	2101      	movs	r1, #1
 8004aea:	2002      	movs	r0, #2
 8004aec:	f7fb fe64 	bl	80007b8 <lcd_print>
 8004af0:	e00d      	b.n	8004b0e <menu+0x31ea>
		} else if(dilSecim == 1) {
 8004af2:	4b48      	ldr	r3, [pc, #288]	; (8004c14 <menu+0x32f0>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d109      	bne.n	8004b0e <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004afa:	4a57      	ldr	r2, [pc, #348]	; (8004c58 <menu+0x3334>)
 8004afc:	2101      	movs	r1, #1
 8004afe:	2001      	movs	r0, #1
 8004b00:	f7fb fe5a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004b04:	4a55      	ldr	r2, [pc, #340]	; (8004c5c <menu+0x3338>)
 8004b06:	2101      	movs	r1, #1
 8004b08:	2002      	movs	r0, #2
 8004b0a:	f7fb fe55 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b0e:	2102      	movs	r1, #2
 8004b10:	4843      	ldr	r0, [pc, #268]	; (8004c20 <menu+0x32fc>)
 8004b12:	f005 fa77 	bl	800a004 <HAL_GPIO_ReadPin>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d115      	bne.n	8004b48 <menu+0x3224>
 8004b1c:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <menu+0x3300>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	f083 0301 	eor.w	r3, r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <menu+0x3224>
			dilSecim = dilSecim + 1;
 8004b2a:	4b3a      	ldr	r3, [pc, #232]	; (8004c14 <menu+0x32f0>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <menu+0x32f0>)
 8004b34:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004b36:	4b37      	ldr	r3, [pc, #220]	; (8004c14 <menu+0x32f0>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d902      	bls.n	8004b44 <menu+0x3220>
				dilSecim = 0;
 8004b3e:	4b35      	ldr	r3, [pc, #212]	; (8004c14 <menu+0x32f0>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004b44:	f001 fcc0 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b48:	2104      	movs	r1, #4
 8004b4a:	4835      	ldr	r0, [pc, #212]	; (8004c20 <menu+0x32fc>)
 8004b4c:	f005 fa5a 	bl	800a004 <HAL_GPIO_ReadPin>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d115      	bne.n	8004b82 <menu+0x325e>
 8004b56:	4b33      	ldr	r3, [pc, #204]	; (8004c24 <menu+0x3300>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	f083 0301 	eor.w	r3, r3, #1
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <menu+0x325e>
			dilSecim = dilSecim - 1;
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <menu+0x32f0>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <menu+0x32f0>)
 8004b6e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004b70:	4b28      	ldr	r3, [pc, #160]	; (8004c14 <menu+0x32f0>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <menu+0x325a>
		   		dilSecim = 1;
 8004b78:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <menu+0x32f0>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004b7e:	f001 fca3 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b82:	2108      	movs	r1, #8
 8004b84:	4826      	ldr	r0, [pc, #152]	; (8004c20 <menu+0x32fc>)
 8004b86:	f005 fa3d 	bl	800a004 <HAL_GPIO_ReadPin>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d10e      	bne.n	8004bae <menu+0x328a>
 8004b90:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <menu+0x3300>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f083 0301 	eor.w	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <menu+0x328a>
			eepromData[33] = dilSecim;
 8004b9e:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <menu+0x32f0>)
 8004ba0:	781a      	ldrb	r2, [r3, #0]
 8004ba2:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <menu+0x330c>)
 8004ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004ba8:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <menu+0x3324>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004bae:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <menu+0x3328>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b1f      	cmp	r3, #31
 8004bb4:	f040 80b7 	bne.w	8004d26 <menu+0x3402>
		calismaSayModu = 0;
 8004bb8:	4b1c      	ldr	r3, [pc, #112]	; (8004c2c <menu+0x3308>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004bbe:	4a28      	ldr	r2, [pc, #160]	; (8004c60 <menu+0x333c>)
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	f7fb fdf8 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 8004bc8:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <menu+0x3340>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d113      	bne.n	8004bf8 <menu+0x32d4>
			if(dilSecim == 0) {
 8004bd0:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <menu+0x32f0>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 8004bd8:	4a23      	ldr	r2, [pc, #140]	; (8004c68 <menu+0x3344>)
 8004bda:	2101      	movs	r1, #1
 8004bdc:	2002      	movs	r0, #2
 8004bde:	f7fb fdeb 	bl	80007b8 <lcd_print>
 8004be2:	e050      	b.n	8004c86 <menu+0x3362>
			} else if(dilSecim == 1) {
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <menu+0x32f0>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d14c      	bne.n	8004c86 <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <menu+0x3348>)
 8004bee:	2101      	movs	r1, #1
 8004bf0:	2002      	movs	r0, #2
 8004bf2:	f7fb fde1 	bl	80007b8 <lcd_print>
 8004bf6:	e046      	b.n	8004c86 <menu+0x3362>
			}
		} else if(iotMode == 1) {
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <menu+0x3340>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d142      	bne.n	8004c86 <menu+0x3362>
			if(dilSecim == 0){
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <menu+0x32f0>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d135      	bne.n	8004c74 <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 8004c08:	4a19      	ldr	r2, [pc, #100]	; (8004c70 <menu+0x334c>)
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	2002      	movs	r0, #2
 8004c0e:	f7fb fdd3 	bl	80007b8 <lcd_print>
 8004c12:	e038      	b.n	8004c86 <menu+0x3362>
 8004c14:	20000c6a 	.word	0x20000c6a
 8004c18:	0800e698 	.word	0x0800e698
 8004c1c:	0800e6cc 	.word	0x0800e6cc
 8004c20:	40010800 	.word	0x40010800
 8004c24:	20000c78 	.word	0x20000c78
 8004c28:	20000c8a 	.word	0x20000c8a
 8004c2c:	20000c69 	.word	0x20000c69
 8004c30:	20000b38 	.word	0x20000b38
 8004c34:	20000c48 	.word	0x20000c48
 8004c38:	200009c3 	.word	0x200009c3
 8004c3c:	200009c2 	.word	0x200009c2
 8004c40:	20000c47 	.word	0x20000c47
 8004c44:	20000c46 	.word	0x20000c46
 8004c48:	20000c75 	.word	0x20000c75
 8004c4c:	20000c49 	.word	0x20000c49
 8004c50:	0800e6e0 	.word	0x0800e6e0
 8004c54:	0800e6f4 	.word	0x0800e6f4
 8004c58:	0800e708 	.word	0x0800e708
 8004c5c:	0800e71c 	.word	0x0800e71c
 8004c60:	0800e730 	.word	0x0800e730
 8004c64:	20000c68 	.word	0x20000c68
 8004c68:	0800df88 	.word	0x0800df88
 8004c6c:	0800df9c 	.word	0x0800df9c
 8004c70:	0800dfe8 	.word	0x0800dfe8
			} else if(dilSecim == 1) {
 8004c74:	4b9a      	ldr	r3, [pc, #616]	; (8004ee0 <menu+0x35bc>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d104      	bne.n	8004c86 <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 8004c7c:	4a99      	ldr	r2, [pc, #612]	; (8004ee4 <menu+0x35c0>)
 8004c7e:	2101      	movs	r1, #1
 8004c80:	2002      	movs	r0, #2
 8004c82:	f7fb fd99 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c86:	2102      	movs	r1, #2
 8004c88:	4897      	ldr	r0, [pc, #604]	; (8004ee8 <menu+0x35c4>)
 8004c8a:	f005 f9bb 	bl	800a004 <HAL_GPIO_ReadPin>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d115      	bne.n	8004cc0 <menu+0x339c>
 8004c94:	4b95      	ldr	r3, [pc, #596]	; (8004eec <menu+0x35c8>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	f083 0301 	eor.w	r3, r3, #1
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00e      	beq.n	8004cc0 <menu+0x339c>
			iotMode = iotMode + 1;
 8004ca2:	4b93      	ldr	r3, [pc, #588]	; (8004ef0 <menu+0x35cc>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	4b91      	ldr	r3, [pc, #580]	; (8004ef0 <menu+0x35cc>)
 8004cac:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004cae:	4b90      	ldr	r3, [pc, #576]	; (8004ef0 <menu+0x35cc>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d902      	bls.n	8004cbc <menu+0x3398>
				iotMode = 0;
 8004cb6:	4b8e      	ldr	r3, [pc, #568]	; (8004ef0 <menu+0x35cc>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004cbc:	f001 fc04 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004cc0:	2104      	movs	r1, #4
 8004cc2:	4889      	ldr	r0, [pc, #548]	; (8004ee8 <menu+0x35c4>)
 8004cc4:	f005 f99e 	bl	800a004 <HAL_GPIO_ReadPin>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d115      	bne.n	8004cfa <menu+0x33d6>
 8004cce:	4b87      	ldr	r3, [pc, #540]	; (8004eec <menu+0x35c8>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	f083 0301 	eor.w	r3, r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00e      	beq.n	8004cfa <menu+0x33d6>
			iotMode = iotMode - 1;
 8004cdc:	4b84      	ldr	r3, [pc, #528]	; (8004ef0 <menu+0x35cc>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	4b82      	ldr	r3, [pc, #520]	; (8004ef0 <menu+0x35cc>)
 8004ce6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004ce8:	4b81      	ldr	r3, [pc, #516]	; (8004ef0 <menu+0x35cc>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <menu+0x33d2>
		   		iotMode = 1;
 8004cf0:	4b7f      	ldr	r3, [pc, #508]	; (8004ef0 <menu+0x35cc>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004cf6:	f001 fbe7 	bl	80064c8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004cfa:	2108      	movs	r1, #8
 8004cfc:	487a      	ldr	r0, [pc, #488]	; (8004ee8 <menu+0x35c4>)
 8004cfe:	f005 f981 	bl	800a004 <HAL_GPIO_ReadPin>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10e      	bne.n	8004d26 <menu+0x3402>
 8004d08:	4b78      	ldr	r3, [pc, #480]	; (8004eec <menu+0x35c8>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f083 0301 	eor.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <menu+0x3402>
			eepromData[37] = iotMode;
 8004d16:	4b76      	ldr	r3, [pc, #472]	; (8004ef0 <menu+0x35cc>)
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	4b76      	ldr	r3, [pc, #472]	; (8004ef4 <menu+0x35d0>)
 8004d1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 8004d20:	4b75      	ldr	r3, [pc, #468]	; (8004ef8 <menu+0x35d4>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004d26:	4b75      	ldr	r3, [pc, #468]	; (8004efc <menu+0x35d8>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d14a      	bne.n	8004dc4 <menu+0x34a0>
		calismaSayModu = 0;
 8004d2e:	4b74      	ldr	r3, [pc, #464]	; (8004f00 <menu+0x35dc>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004d34:	4a73      	ldr	r2, [pc, #460]	; (8004f04 <menu+0x35e0>)
 8004d36:	2101      	movs	r1, #1
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f7fb fd3d 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, machineID);
 8004d3e:	4a72      	ldr	r2, [pc, #456]	; (8004f08 <menu+0x35e4>)
 8004d40:	2101      	movs	r1, #1
 8004d42:	2002      	movs	r0, #2
 8004d44:	f7fb fd38 	bl	80007b8 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 8004d48:	486f      	ldr	r0, [pc, #444]	; (8004f08 <menu+0x35e4>)
 8004d4a:	f7fb fa6b 	bl	8000224 <strlen>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	3301      	adds	r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	4a6d      	ldr	r2, [pc, #436]	; (8004f0c <menu+0x35e8>)
 8004d58:	4619      	mov	r1, r3
 8004d5a:	2002      	movs	r0, #2
 8004d5c:	f7fb fd2c 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004d60:	2102      	movs	r1, #2
 8004d62:	4861      	ldr	r0, [pc, #388]	; (8004ee8 <menu+0x35c4>)
 8004d64:	f005 f94e 	bl	800a004 <HAL_GPIO_ReadPin>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d12a      	bne.n	8004dc4 <menu+0x34a0>
 8004d6e:	2104      	movs	r1, #4
 8004d70:	485d      	ldr	r0, [pc, #372]	; (8004ee8 <menu+0x35c4>)
 8004d72:	f005 f947 	bl	800a004 <HAL_GPIO_ReadPin>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d123      	bne.n	8004dc4 <menu+0x34a0>
 8004d7c:	4b5b      	ldr	r3, [pc, #364]	; (8004eec <menu+0x35c8>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f083 0301 	eor.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01c      	beq.n	8004dc4 <menu+0x34a0>
			takeMachineID(0, hi2c1);
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f7fc f815 	bl	8000dbc <takeMachineID>

			HAL_Delay(50);
 8004d92:	2032      	movs	r0, #50	; 0x32
 8004d94:	f004 fb66 	bl	8009464 <HAL_Delay>
			takeCharFromEEPROM4ID(hi2c1);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fc fd67 	bl	800186c <takeCharFromEEPROM4ID>

			lcd_print(2, 1, machineID);
 8004d9e:	4a5a      	ldr	r2, [pc, #360]	; (8004f08 <menu+0x35e4>)
 8004da0:	2101      	movs	r1, #1
 8004da2:	2002      	movs	r0, #2
 8004da4:	f7fb fd08 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 8004da8:	4857      	ldr	r0, [pc, #348]	; (8004f08 <menu+0x35e4>)
 8004daa:	f7fb fa3b 	bl	8000224 <strlen>
 8004dae:	4603      	mov	r3, r0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	3301      	adds	r3, #1
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	4a55      	ldr	r2, [pc, #340]	; (8004f0c <menu+0x35e8>)
 8004db8:	4619      	mov	r1, r3
 8004dba:	2002      	movs	r0, #2
 8004dbc:	f7fb fcfc 	bl	80007b8 <lcd_print>

			bekle();
 8004dc0:	f001 fb82 	bl	80064c8 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004dc4:	4b4d      	ldr	r3, [pc, #308]	; (8004efc <menu+0x35d8>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b21      	cmp	r3, #33	; 0x21
 8004dca:	d163      	bne.n	8004e94 <menu+0x3570>
		calismaSayModu = 0;
 8004dcc:	4b4c      	ldr	r3, [pc, #304]	; (8004f00 <menu+0x35dc>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004dd2:	4a4f      	ldr	r2, [pc, #316]	; (8004f10 <menu+0x35ec>)
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	f7fb fcee 	bl	80007b8 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004ddc:	484d      	ldr	r0, [pc, #308]	; (8004f14 <menu+0x35f0>)
 8004dde:	f7fb fa21 	bl	8000224 <strlen>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d811      	bhi.n	8004e0c <menu+0x34e8>
			lcd_print(2, 1, wifiSSID);
 8004de8:	4a4a      	ldr	r2, [pc, #296]	; (8004f14 <menu+0x35f0>)
 8004dea:	2101      	movs	r1, #1
 8004dec:	2002      	movs	r0, #2
 8004dee:	f7fb fce3 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004df2:	4848      	ldr	r0, [pc, #288]	; (8004f14 <menu+0x35f0>)
 8004df4:	f7fb fa16 	bl	8000224 <strlen>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	4a42      	ldr	r2, [pc, #264]	; (8004f0c <menu+0x35e8>)
 8004e02:	4619      	mov	r1, r3
 8004e04:	2002      	movs	r0, #2
 8004e06:	f7fb fcd7 	bl	80007b8 <lcd_print>
 8004e0a:	e010      	b.n	8004e2e <menu+0x350a>
		} else {
			lcd_print(2, 1, wifiSSID);
 8004e0c:	4a41      	ldr	r2, [pc, #260]	; (8004f14 <menu+0x35f0>)
 8004e0e:	2101      	movs	r1, #1
 8004e10:	2002      	movs	r0, #2
 8004e12:	f7fb fcd1 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004e16:	483f      	ldr	r0, [pc, #252]	; (8004f14 <menu+0x35f0>)
 8004e18:	f7fb fa04 	bl	8000224 <strlen>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	3301      	adds	r3, #1
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	4a39      	ldr	r2, [pc, #228]	; (8004f0c <menu+0x35e8>)
 8004e26:	4619      	mov	r1, r3
 8004e28:	2002      	movs	r0, #2
 8004e2a:	f7fb fcc5 	bl	80007b8 <lcd_print>
			//slideText(wifiSSID, 1, 2);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004e2e:	2102      	movs	r1, #2
 8004e30:	482d      	ldr	r0, [pc, #180]	; (8004ee8 <menu+0x35c4>)
 8004e32:	f005 f8e7 	bl	800a004 <HAL_GPIO_ReadPin>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d12b      	bne.n	8004e94 <menu+0x3570>
 8004e3c:	2104      	movs	r1, #4
 8004e3e:	482a      	ldr	r0, [pc, #168]	; (8004ee8 <menu+0x35c4>)
 8004e40:	f005 f8e0 	bl	800a004 <HAL_GPIO_ReadPin>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d124      	bne.n	8004e94 <menu+0x3570>
 8004e4a:	4b28      	ldr	r3, [pc, #160]	; (8004eec <menu+0x35c8>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f083 0301 	eor.w	r3, r3, #1
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01d      	beq.n	8004e94 <menu+0x3570>
			takeWifiSSID(0, hi2c1);
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f7fc f8c6 	bl	8000fec <takeWifiSSID>

			HAL_Delay(50);
 8004e60:	2032      	movs	r0, #50	; 0x32
 8004e62:	f004 faff 	bl	8009464 <HAL_Delay>
			takeCharFromEEPROM4Wifi(hi2c1, 1);
 8004e66:	2101      	movs	r1, #1
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fc fd1f 	bl	80018ac <takeCharFromEEPROM4Wifi>

			lcd_print(2, 1, wifiSSID);
 8004e6e:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <menu+0x35f0>)
 8004e70:	2101      	movs	r1, #1
 8004e72:	2002      	movs	r0, #2
 8004e74:	f7fb fca0 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004e78:	4826      	ldr	r0, [pc, #152]	; (8004f14 <menu+0x35f0>)
 8004e7a:	f7fb f9d3 	bl	8000224 <strlen>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	3301      	adds	r3, #1
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	4a21      	ldr	r2, [pc, #132]	; (8004f0c <menu+0x35e8>)
 8004e88:	4619      	mov	r1, r3
 8004e8a:	2002      	movs	r0, #2
 8004e8c:	f7fb fc94 	bl	80007b8 <lcd_print>

			bekle();
 8004e90:	f001 fb1a 	bl	80064c8 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004e94:	4b19      	ldr	r3, [pc, #100]	; (8004efc <menu+0x35d8>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b22      	cmp	r3, #34	; 0x22
 8004e9a:	f040 8085 	bne.w	8004fa8 <menu+0x3684>
		calismaSayModu = 0;
 8004e9e:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <menu+0x35dc>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	; (8004f18 <menu+0x35f4>)
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	f7fb fc85 	bl	80007b8 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004eae:	481b      	ldr	r0, [pc, #108]	; (8004f1c <menu+0x35f8>)
 8004eb0:	f7fb f9b8 	bl	8000224 <strlen>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b10      	cmp	r3, #16
 8004eb8:	d832      	bhi.n	8004f20 <menu+0x35fc>
			lcd_print(2, 1, wifiPass);
 8004eba:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <menu+0x35f8>)
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	2002      	movs	r0, #2
 8004ec0:	f7fb fc7a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004ec4:	4815      	ldr	r0, [pc, #84]	; (8004f1c <menu+0x35f8>)
 8004ec6:	f7fb f9ad 	bl	8000224 <strlen>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	4a0e      	ldr	r2, [pc, #56]	; (8004f0c <menu+0x35e8>)
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	2002      	movs	r0, #2
 8004ed8:	f7fb fc6e 	bl	80007b8 <lcd_print>
 8004edc:	e031      	b.n	8004f42 <menu+0x361e>
 8004ede:	bf00      	nop
 8004ee0:	20000c6a 	.word	0x20000c6a
 8004ee4:	0800dffc 	.word	0x0800dffc
 8004ee8:	40010800 	.word	0x40010800
 8004eec:	20000c78 	.word	0x20000c78
 8004ef0:	20000c68 	.word	0x20000c68
 8004ef4:	20000b38 	.word	0x20000b38
 8004ef8:	20000c75 	.word	0x20000c75
 8004efc:	20000c49 	.word	0x20000c49
 8004f00:	20000c69 	.word	0x20000c69
 8004f04:	0800e744 	.word	0x0800e744
 8004f08:	20000bf4 	.word	0x20000bf4
 8004f0c:	2000094c 	.word	0x2000094c
 8004f10:	0800e758 	.word	0x0800e758
 8004f14:	20000c00 	.word	0x20000c00
 8004f18:	0800e76c 	.word	0x0800e76c
 8004f1c:	20000c24 	.word	0x20000c24
		} else {
			lcd_print(2, 1, wifiPass);
 8004f20:	4a3d      	ldr	r2, [pc, #244]	; (8005018 <menu+0x36f4>)
 8004f22:	2101      	movs	r1, #1
 8004f24:	2002      	movs	r0, #2
 8004f26:	f7fb fc47 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004f2a:	483b      	ldr	r0, [pc, #236]	; (8005018 <menu+0x36f4>)
 8004f2c:	f7fb f97a 	bl	8000224 <strlen>
 8004f30:	4603      	mov	r3, r0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	3301      	adds	r3, #1
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	4a38      	ldr	r2, [pc, #224]	; (800501c <menu+0x36f8>)
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	2002      	movs	r0, #2
 8004f3e:	f7fb fc3b 	bl	80007b8 <lcd_print>
			//slideText(wifiPass, 1, 2);
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004f42:	2102      	movs	r1, #2
 8004f44:	4836      	ldr	r0, [pc, #216]	; (8005020 <menu+0x36fc>)
 8004f46:	f005 f85d 	bl	800a004 <HAL_GPIO_ReadPin>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d12b      	bne.n	8004fa8 <menu+0x3684>
 8004f50:	2104      	movs	r1, #4
 8004f52:	4833      	ldr	r0, [pc, #204]	; (8005020 <menu+0x36fc>)
 8004f54:	f005 f856 	bl	800a004 <HAL_GPIO_ReadPin>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d124      	bne.n	8004fa8 <menu+0x3684>
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <menu+0x3700>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	f083 0301 	eor.w	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01d      	beq.n	8004fa8 <menu+0x3684>
			takeWifiPass(0, hi2c1);
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f7fc f9b4 	bl	80012dc <takeWifiPass>

			HAL_Delay(50);
 8004f74:	2032      	movs	r0, #50	; 0x32
 8004f76:	f004 fa75 	bl	8009464 <HAL_Delay>
			takeCharFromEEPROM4Wifi(hi2c1, 0);
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fc fc95 	bl	80018ac <takeCharFromEEPROM4Wifi>

			lcd_print(2, 1, wifiPass);
 8004f82:	4a25      	ldr	r2, [pc, #148]	; (8005018 <menu+0x36f4>)
 8004f84:	2101      	movs	r1, #1
 8004f86:	2002      	movs	r0, #2
 8004f88:	f7fb fc16 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004f8c:	4822      	ldr	r0, [pc, #136]	; (8005018 <menu+0x36f4>)
 8004f8e:	f7fb f949 	bl	8000224 <strlen>
 8004f92:	4603      	mov	r3, r0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	3301      	adds	r3, #1
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	4a20      	ldr	r2, [pc, #128]	; (800501c <menu+0x36f8>)
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	2002      	movs	r0, #2
 8004fa0:	f7fb fc0a 	bl	80007b8 <lcd_print>

			bekle();
 8004fa4:	f001 fa90 	bl	80064c8 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004fa8:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <menu+0x3704>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b23      	cmp	r3, #35	; 0x23
 8004fae:	d12e      	bne.n	800500e <menu+0x36ea>
		if(dilSecim == 0) {
 8004fb0:	4b1e      	ldr	r3, [pc, #120]	; (800502c <menu+0x3708>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <menu+0x36aa>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004fb8:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <menu+0x370c>)
 8004fba:	2101      	movs	r1, #1
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	f7fb fbfb 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004fc2:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <menu+0x3710>)
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	2002      	movs	r0, #2
 8004fc8:	f7fb fbf6 	bl	80007b8 <lcd_print>
 8004fcc:	e00d      	b.n	8004fea <menu+0x36c6>
		} else if(dilSecim == 1) {
 8004fce:	4b17      	ldr	r3, [pc, #92]	; (800502c <menu+0x3708>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d109      	bne.n	8004fea <menu+0x36c6>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004fd6:	4a18      	ldr	r2, [pc, #96]	; (8005038 <menu+0x3714>)
 8004fd8:	2101      	movs	r1, #1
 8004fda:	2001      	movs	r0, #1
 8004fdc:	f7fb fbec 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004fe0:	4a16      	ldr	r2, [pc, #88]	; (800503c <menu+0x3718>)
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	2002      	movs	r0, #2
 8004fe6:	f7fb fbe7 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004fea:	2108      	movs	r1, #8
 8004fec:	480c      	ldr	r0, [pc, #48]	; (8005020 <menu+0x36fc>)
 8004fee:	f005 f809 	bl	800a004 <HAL_GPIO_ReadPin>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d10a      	bne.n	800500e <menu+0x36ea>
			menuGiris = 0;
 8004ff8:	4b11      	ldr	r3, [pc, #68]	; (8005040 <menu+0x371c>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004ffe:	f7fb fc07 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 8005002:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005006:	f004 fa2d 	bl	8009464 <HAL_Delay>
			NVIC_SystemReset();
 800500a:	f7fb fc49 	bl	80008a0 <__NVIC_SystemReset>
		}
	}
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000c24 	.word	0x20000c24
 800501c:	2000094c 	.word	0x2000094c
 8005020:	40010800 	.word	0x40010800
 8005024:	20000c78 	.word	0x20000c78
 8005028:	20000c49 	.word	0x20000c49
 800502c:	20000c6a 	.word	0x20000c6a
 8005030:	0800e780 	.word	0x0800e780
 8005034:	0800e794 	.word	0x0800e794
 8005038:	0800e7a8 	.word	0x0800e7a8
 800503c:	0800e7bc 	.word	0x0800e7bc
 8005040:	20000c66 	.word	0x20000c66

08005044 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 800504e:	48a9      	ldr	r0, [pc, #676]	; (80052f4 <loadMenuTexts+0x2b0>)
 8005050:	f7fb fc3c 	bl	80008cc <copyText>
 8005054:	4603      	mov	r3, r0
 8005056:	4aa8      	ldr	r2, [pc, #672]	; (80052f8 <loadMenuTexts+0x2b4>)
 8005058:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 800505a:	48a8      	ldr	r0, [pc, #672]	; (80052fc <loadMenuTexts+0x2b8>)
 800505c:	f7fb fc36 	bl	80008cc <copyText>
 8005060:	4603      	mov	r3, r0
 8005062:	4aa7      	ldr	r2, [pc, #668]	; (8005300 <loadMenuTexts+0x2bc>)
 8005064:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8005066:	48a7      	ldr	r0, [pc, #668]	; (8005304 <loadMenuTexts+0x2c0>)
 8005068:	f7fb fc30 	bl	80008cc <copyText>
 800506c:	4603      	mov	r3, r0
 800506e:	4aa6      	ldr	r2, [pc, #664]	; (8005308 <loadMenuTexts+0x2c4>)
 8005070:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8005072:	48a6      	ldr	r0, [pc, #664]	; (800530c <loadMenuTexts+0x2c8>)
 8005074:	f7fb fc2a 	bl	80008cc <copyText>
 8005078:	4603      	mov	r3, r0
 800507a:	4aa5      	ldr	r2, [pc, #660]	; (8005310 <loadMenuTexts+0x2cc>)
 800507c:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 800507e:	48a5      	ldr	r0, [pc, #660]	; (8005314 <loadMenuTexts+0x2d0>)
 8005080:	f7fb fc24 	bl	80008cc <copyText>
 8005084:	4603      	mov	r3, r0
 8005086:	4aa4      	ldr	r2, [pc, #656]	; (8005318 <loadMenuTexts+0x2d4>)
 8005088:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 800508a:	48a4      	ldr	r0, [pc, #656]	; (800531c <loadMenuTexts+0x2d8>)
 800508c:	f7fb fc1e 	bl	80008cc <copyText>
 8005090:	4603      	mov	r3, r0
 8005092:	4aa3      	ldr	r2, [pc, #652]	; (8005320 <loadMenuTexts+0x2dc>)
 8005094:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8005096:	48a3      	ldr	r0, [pc, #652]	; (8005324 <loadMenuTexts+0x2e0>)
 8005098:	f7fb fc18 	bl	80008cc <copyText>
 800509c:	4603      	mov	r3, r0
 800509e:	4aa2      	ldr	r2, [pc, #648]	; (8005328 <loadMenuTexts+0x2e4>)
 80050a0:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f040 82d1 	bne.w	800564c <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 80050aa:	48a0      	ldr	r0, [pc, #640]	; (800532c <loadMenuTexts+0x2e8>)
 80050ac:	f7fb fc0e 	bl	80008cc <copyText>
 80050b0:	4603      	mov	r3, r0
 80050b2:	4a9f      	ldr	r2, [pc, #636]	; (8005330 <loadMenuTexts+0x2ec>)
 80050b4:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 80050b6:	489f      	ldr	r0, [pc, #636]	; (8005334 <loadMenuTexts+0x2f0>)
 80050b8:	f7fb fc08 	bl	80008cc <copyText>
 80050bc:	4603      	mov	r3, r0
 80050be:	4a9e      	ldr	r2, [pc, #632]	; (8005338 <loadMenuTexts+0x2f4>)
 80050c0:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 80050c2:	489e      	ldr	r0, [pc, #632]	; (800533c <loadMenuTexts+0x2f8>)
 80050c4:	f7fb fc02 	bl	80008cc <copyText>
 80050c8:	4603      	mov	r3, r0
 80050ca:	4a9d      	ldr	r2, [pc, #628]	; (8005340 <loadMenuTexts+0x2fc>)
 80050cc:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 80050ce:	489d      	ldr	r0, [pc, #628]	; (8005344 <loadMenuTexts+0x300>)
 80050d0:	f7fb fbfc 	bl	80008cc <copyText>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4a9c      	ldr	r2, [pc, #624]	; (8005348 <loadMenuTexts+0x304>)
 80050d8:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 80050da:	489c      	ldr	r0, [pc, #624]	; (800534c <loadMenuTexts+0x308>)
 80050dc:	f7fb fbf6 	bl	80008cc <copyText>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4a9b      	ldr	r2, [pc, #620]	; (8005350 <loadMenuTexts+0x30c>)
 80050e4:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 80050e6:	489b      	ldr	r0, [pc, #620]	; (8005354 <loadMenuTexts+0x310>)
 80050e8:	f7fb fbf0 	bl	80008cc <copyText>
 80050ec:	4603      	mov	r3, r0
 80050ee:	4a9a      	ldr	r2, [pc, #616]	; (8005358 <loadMenuTexts+0x314>)
 80050f0:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 80050f2:	489a      	ldr	r0, [pc, #616]	; (800535c <loadMenuTexts+0x318>)
 80050f4:	f7fb fbea 	bl	80008cc <copyText>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4a99      	ldr	r2, [pc, #612]	; (8005360 <loadMenuTexts+0x31c>)
 80050fc:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 80050fe:	4899      	ldr	r0, [pc, #612]	; (8005364 <loadMenuTexts+0x320>)
 8005100:	f7fb fbe4 	bl	80008cc <copyText>
 8005104:	4603      	mov	r3, r0
 8005106:	4a98      	ldr	r2, [pc, #608]	; (8005368 <loadMenuTexts+0x324>)
 8005108:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 800510a:	4898      	ldr	r0, [pc, #608]	; (800536c <loadMenuTexts+0x328>)
 800510c:	f7fb fbde 	bl	80008cc <copyText>
 8005110:	4603      	mov	r3, r0
 8005112:	4a97      	ldr	r2, [pc, #604]	; (8005370 <loadMenuTexts+0x32c>)
 8005114:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8005116:	4897      	ldr	r0, [pc, #604]	; (8005374 <loadMenuTexts+0x330>)
 8005118:	f7fb fbd8 	bl	80008cc <copyText>
 800511c:	4603      	mov	r3, r0
 800511e:	4a96      	ldr	r2, [pc, #600]	; (8005378 <loadMenuTexts+0x334>)
 8005120:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8005122:	4896      	ldr	r0, [pc, #600]	; (800537c <loadMenuTexts+0x338>)
 8005124:	f7fb fbd2 	bl	80008cc <copyText>
 8005128:	4603      	mov	r3, r0
 800512a:	4a95      	ldr	r2, [pc, #596]	; (8005380 <loadMenuTexts+0x33c>)
 800512c:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 800512e:	4895      	ldr	r0, [pc, #596]	; (8005384 <loadMenuTexts+0x340>)
 8005130:	f7fb fbcc 	bl	80008cc <copyText>
 8005134:	4603      	mov	r3, r0
 8005136:	4a94      	ldr	r2, [pc, #592]	; (8005388 <loadMenuTexts+0x344>)
 8005138:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 800513a:	4894      	ldr	r0, [pc, #592]	; (800538c <loadMenuTexts+0x348>)
 800513c:	f7fb fbc6 	bl	80008cc <copyText>
 8005140:	4603      	mov	r3, r0
 8005142:	4a93      	ldr	r2, [pc, #588]	; (8005390 <loadMenuTexts+0x34c>)
 8005144:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8005146:	4893      	ldr	r0, [pc, #588]	; (8005394 <loadMenuTexts+0x350>)
 8005148:	f7fb fbc0 	bl	80008cc <copyText>
 800514c:	4603      	mov	r3, r0
 800514e:	4a92      	ldr	r2, [pc, #584]	; (8005398 <loadMenuTexts+0x354>)
 8005150:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8005152:	4892      	ldr	r0, [pc, #584]	; (800539c <loadMenuTexts+0x358>)
 8005154:	f7fb fbba 	bl	80008cc <copyText>
 8005158:	4603      	mov	r3, r0
 800515a:	4a91      	ldr	r2, [pc, #580]	; (80053a0 <loadMenuTexts+0x35c>)
 800515c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 800515e:	4891      	ldr	r0, [pc, #580]	; (80053a4 <loadMenuTexts+0x360>)
 8005160:	f7fb fbb4 	bl	80008cc <copyText>
 8005164:	4603      	mov	r3, r0
 8005166:	4a90      	ldr	r2, [pc, #576]	; (80053a8 <loadMenuTexts+0x364>)
 8005168:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 800516a:	4890      	ldr	r0, [pc, #576]	; (80053ac <loadMenuTexts+0x368>)
 800516c:	f7fb fbae 	bl	80008cc <copyText>
 8005170:	4603      	mov	r3, r0
 8005172:	4a8f      	ldr	r2, [pc, #572]	; (80053b0 <loadMenuTexts+0x36c>)
 8005174:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8005176:	488f      	ldr	r0, [pc, #572]	; (80053b4 <loadMenuTexts+0x370>)
 8005178:	f7fb fba8 	bl	80008cc <copyText>
 800517c:	4603      	mov	r3, r0
 800517e:	4a8e      	ldr	r2, [pc, #568]	; (80053b8 <loadMenuTexts+0x374>)
 8005180:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8005182:	488e      	ldr	r0, [pc, #568]	; (80053bc <loadMenuTexts+0x378>)
 8005184:	f7fb fba2 	bl	80008cc <copyText>
 8005188:	4603      	mov	r3, r0
 800518a:	4a8d      	ldr	r2, [pc, #564]	; (80053c0 <loadMenuTexts+0x37c>)
 800518c:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 800518e:	488d      	ldr	r0, [pc, #564]	; (80053c4 <loadMenuTexts+0x380>)
 8005190:	f7fb fb9c 	bl	80008cc <copyText>
 8005194:	4603      	mov	r3, r0
 8005196:	4a8c      	ldr	r2, [pc, #560]	; (80053c8 <loadMenuTexts+0x384>)
 8005198:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 800519a:	488c      	ldr	r0, [pc, #560]	; (80053cc <loadMenuTexts+0x388>)
 800519c:	f7fb fb96 	bl	80008cc <copyText>
 80051a0:	4603      	mov	r3, r0
 80051a2:	4a8b      	ldr	r2, [pc, #556]	; (80053d0 <loadMenuTexts+0x38c>)
 80051a4:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 80051a6:	488b      	ldr	r0, [pc, #556]	; (80053d4 <loadMenuTexts+0x390>)
 80051a8:	f7fb fb90 	bl	80008cc <copyText>
 80051ac:	4603      	mov	r3, r0
 80051ae:	4a8a      	ldr	r2, [pc, #552]	; (80053d8 <loadMenuTexts+0x394>)
 80051b0:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 80051b2:	488a      	ldr	r0, [pc, #552]	; (80053dc <loadMenuTexts+0x398>)
 80051b4:	f7fb fb8a 	bl	80008cc <copyText>
 80051b8:	4603      	mov	r3, r0
 80051ba:	4a89      	ldr	r2, [pc, #548]	; (80053e0 <loadMenuTexts+0x39c>)
 80051bc:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 80051be:	4889      	ldr	r0, [pc, #548]	; (80053e4 <loadMenuTexts+0x3a0>)
 80051c0:	f7fb fb84 	bl	80008cc <copyText>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4a88      	ldr	r2, [pc, #544]	; (80053e8 <loadMenuTexts+0x3a4>)
 80051c8:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 80051ca:	4888      	ldr	r0, [pc, #544]	; (80053ec <loadMenuTexts+0x3a8>)
 80051cc:	f7fb fb7e 	bl	80008cc <copyText>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4a87      	ldr	r2, [pc, #540]	; (80053f0 <loadMenuTexts+0x3ac>)
 80051d4:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 80051d6:	4887      	ldr	r0, [pc, #540]	; (80053f4 <loadMenuTexts+0x3b0>)
 80051d8:	f7fb fb78 	bl	80008cc <copyText>
 80051dc:	4603      	mov	r3, r0
 80051de:	4a86      	ldr	r2, [pc, #536]	; (80053f8 <loadMenuTexts+0x3b4>)
 80051e0:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 80051e2:	4886      	ldr	r0, [pc, #536]	; (80053fc <loadMenuTexts+0x3b8>)
 80051e4:	f7fb fb72 	bl	80008cc <copyText>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4a85      	ldr	r2, [pc, #532]	; (8005400 <loadMenuTexts+0x3bc>)
 80051ec:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 80051ee:	4885      	ldr	r0, [pc, #532]	; (8005404 <loadMenuTexts+0x3c0>)
 80051f0:	f7fb fb6c 	bl	80008cc <copyText>
 80051f4:	4603      	mov	r3, r0
 80051f6:	4a84      	ldr	r2, [pc, #528]	; (8005408 <loadMenuTexts+0x3c4>)
 80051f8:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 80051fa:	4884      	ldr	r0, [pc, #528]	; (800540c <loadMenuTexts+0x3c8>)
 80051fc:	f7fb fb66 	bl	80008cc <copyText>
 8005200:	4603      	mov	r3, r0
 8005202:	4a83      	ldr	r2, [pc, #524]	; (8005410 <loadMenuTexts+0x3cc>)
 8005204:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8005206:	4883      	ldr	r0, [pc, #524]	; (8005414 <loadMenuTexts+0x3d0>)
 8005208:	f7fb fb60 	bl	80008cc <copyText>
 800520c:	4603      	mov	r3, r0
 800520e:	4a82      	ldr	r2, [pc, #520]	; (8005418 <loadMenuTexts+0x3d4>)
 8005210:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8005212:	4882      	ldr	r0, [pc, #520]	; (800541c <loadMenuTexts+0x3d8>)
 8005214:	f7fb fb5a 	bl	80008cc <copyText>
 8005218:	4603      	mov	r3, r0
 800521a:	4a81      	ldr	r2, [pc, #516]	; (8005420 <loadMenuTexts+0x3dc>)
 800521c:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 800521e:	4881      	ldr	r0, [pc, #516]	; (8005424 <loadMenuTexts+0x3e0>)
 8005220:	f7fb fb54 	bl	80008cc <copyText>
 8005224:	4603      	mov	r3, r0
 8005226:	4a80      	ldr	r2, [pc, #512]	; (8005428 <loadMenuTexts+0x3e4>)
 8005228:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 800522a:	4880      	ldr	r0, [pc, #512]	; (800542c <loadMenuTexts+0x3e8>)
 800522c:	f7fb fb4e 	bl	80008cc <copyText>
 8005230:	4603      	mov	r3, r0
 8005232:	4a7f      	ldr	r2, [pc, #508]	; (8005430 <loadMenuTexts+0x3ec>)
 8005234:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8005236:	487f      	ldr	r0, [pc, #508]	; (8005434 <loadMenuTexts+0x3f0>)
 8005238:	f7fb fb48 	bl	80008cc <copyText>
 800523c:	4603      	mov	r3, r0
 800523e:	4a7e      	ldr	r2, [pc, #504]	; (8005438 <loadMenuTexts+0x3f4>)
 8005240:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8005242:	487e      	ldr	r0, [pc, #504]	; (800543c <loadMenuTexts+0x3f8>)
 8005244:	f7fb fb42 	bl	80008cc <copyText>
 8005248:	4603      	mov	r3, r0
 800524a:	4a7d      	ldr	r2, [pc, #500]	; (8005440 <loadMenuTexts+0x3fc>)
 800524c:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 800524e:	487d      	ldr	r0, [pc, #500]	; (8005444 <loadMenuTexts+0x400>)
 8005250:	f7fb fb3c 	bl	80008cc <copyText>
 8005254:	4603      	mov	r3, r0
 8005256:	4a7c      	ldr	r2, [pc, #496]	; (8005448 <loadMenuTexts+0x404>)
 8005258:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 800525a:	487c      	ldr	r0, [pc, #496]	; (800544c <loadMenuTexts+0x408>)
 800525c:	f7fb fb36 	bl	80008cc <copyText>
 8005260:	4603      	mov	r3, r0
 8005262:	4a7b      	ldr	r2, [pc, #492]	; (8005450 <loadMenuTexts+0x40c>)
 8005264:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8005266:	487b      	ldr	r0, [pc, #492]	; (8005454 <loadMenuTexts+0x410>)
 8005268:	f7fb fb30 	bl	80008cc <copyText>
 800526c:	4603      	mov	r3, r0
 800526e:	4a7a      	ldr	r2, [pc, #488]	; (8005458 <loadMenuTexts+0x414>)
 8005270:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8005272:	487a      	ldr	r0, [pc, #488]	; (800545c <loadMenuTexts+0x418>)
 8005274:	f7fb fb2a 	bl	80008cc <copyText>
 8005278:	4603      	mov	r3, r0
 800527a:	4a79      	ldr	r2, [pc, #484]	; (8005460 <loadMenuTexts+0x41c>)
 800527c:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 800527e:	4879      	ldr	r0, [pc, #484]	; (8005464 <loadMenuTexts+0x420>)
 8005280:	f7fb fb24 	bl	80008cc <copyText>
 8005284:	4603      	mov	r3, r0
 8005286:	4a78      	ldr	r2, [pc, #480]	; (8005468 <loadMenuTexts+0x424>)
 8005288:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 800528a:	4878      	ldr	r0, [pc, #480]	; (800546c <loadMenuTexts+0x428>)
 800528c:	f7fb fb1e 	bl	80008cc <copyText>
 8005290:	4603      	mov	r3, r0
 8005292:	4a77      	ldr	r2, [pc, #476]	; (8005470 <loadMenuTexts+0x42c>)
 8005294:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8005296:	4877      	ldr	r0, [pc, #476]	; (8005474 <loadMenuTexts+0x430>)
 8005298:	f7fb fb18 	bl	80008cc <copyText>
 800529c:	4603      	mov	r3, r0
 800529e:	4a76      	ldr	r2, [pc, #472]	; (8005478 <loadMenuTexts+0x434>)
 80052a0:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 80052a2:	4876      	ldr	r0, [pc, #472]	; (800547c <loadMenuTexts+0x438>)
 80052a4:	f7fb fb12 	bl	80008cc <copyText>
 80052a8:	4603      	mov	r3, r0
 80052aa:	4a75      	ldr	r2, [pc, #468]	; (8005480 <loadMenuTexts+0x43c>)
 80052ac:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 80052ae:	4875      	ldr	r0, [pc, #468]	; (8005484 <loadMenuTexts+0x440>)
 80052b0:	f7fb fb0c 	bl	80008cc <copyText>
 80052b4:	4603      	mov	r3, r0
 80052b6:	4a74      	ldr	r2, [pc, #464]	; (8005488 <loadMenuTexts+0x444>)
 80052b8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 80052ba:	4874      	ldr	r0, [pc, #464]	; (800548c <loadMenuTexts+0x448>)
 80052bc:	f7fb fb06 	bl	80008cc <copyText>
 80052c0:	4603      	mov	r3, r0
 80052c2:	4a73      	ldr	r2, [pc, #460]	; (8005490 <loadMenuTexts+0x44c>)
 80052c4:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 80052c6:	4873      	ldr	r0, [pc, #460]	; (8005494 <loadMenuTexts+0x450>)
 80052c8:	f7fb fb00 	bl	80008cc <copyText>
 80052cc:	4603      	mov	r3, r0
 80052ce:	4a72      	ldr	r2, [pc, #456]	; (8005498 <loadMenuTexts+0x454>)
 80052d0:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 80052d2:	4872      	ldr	r0, [pc, #456]	; (800549c <loadMenuTexts+0x458>)
 80052d4:	f7fb fafa 	bl	80008cc <copyText>
 80052d8:	4603      	mov	r3, r0
 80052da:	4a71      	ldr	r2, [pc, #452]	; (80054a0 <loadMenuTexts+0x45c>)
 80052dc:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 80052de:	4871      	ldr	r0, [pc, #452]	; (80054a4 <loadMenuTexts+0x460>)
 80052e0:	f7fb faf4 	bl	80008cc <copyText>
 80052e4:	4603      	mov	r3, r0
 80052e6:	4a70      	ldr	r2, [pc, #448]	; (80054a8 <loadMenuTexts+0x464>)
 80052e8:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 80052ea:	4870      	ldr	r0, [pc, #448]	; (80054ac <loadMenuTexts+0x468>)
 80052ec:	f7fb faee 	bl	80008cc <copyText>
 80052f0:	4603      	mov	r3, r0
 80052f2:	e0dd      	b.n	80054b0 <loadMenuTexts+0x46c>
 80052f4:	20000000 	.word	0x20000000
 80052f8:	20000cb0 	.word	0x20000cb0
 80052fc:	20000010 	.word	0x20000010
 8005300:	20000cb4 	.word	0x20000cb4
 8005304:	20000020 	.word	0x20000020
 8005308:	20000d0c 	.word	0x20000d0c
 800530c:	20000030 	.word	0x20000030
 8005310:	20000d3c 	.word	0x20000d3c
 8005314:	20000040 	.word	0x20000040
 8005318:	20000d44 	.word	0x20000d44
 800531c:	20000050 	.word	0x20000050
 8005320:	20000dbc 	.word	0x20000dbc
 8005324:	20000060 	.word	0x20000060
 8005328:	20000dc0 	.word	0x20000dc0
 800532c:	20000070 	.word	0x20000070
 8005330:	20000cb8 	.word	0x20000cb8
 8005334:	20000080 	.word	0x20000080
 8005338:	20000cbc 	.word	0x20000cbc
 800533c:	20000090 	.word	0x20000090
 8005340:	20000cc0 	.word	0x20000cc0
 8005344:	200000a0 	.word	0x200000a0
 8005348:	20000cc4 	.word	0x20000cc4
 800534c:	200000b0 	.word	0x200000b0
 8005350:	20000cc8 	.word	0x20000cc8
 8005354:	200000c0 	.word	0x200000c0
 8005358:	20000ccc 	.word	0x20000ccc
 800535c:	200000d0 	.word	0x200000d0
 8005360:	20000cd0 	.word	0x20000cd0
 8005364:	200000e0 	.word	0x200000e0
 8005368:	20000cd4 	.word	0x20000cd4
 800536c:	200000f0 	.word	0x200000f0
 8005370:	20000cd8 	.word	0x20000cd8
 8005374:	20000100 	.word	0x20000100
 8005378:	20000cdc 	.word	0x20000cdc
 800537c:	20000110 	.word	0x20000110
 8005380:	20000ce0 	.word	0x20000ce0
 8005384:	20000120 	.word	0x20000120
 8005388:	20000ce4 	.word	0x20000ce4
 800538c:	20000130 	.word	0x20000130
 8005390:	20000ce8 	.word	0x20000ce8
 8005394:	20000140 	.word	0x20000140
 8005398:	20000cec 	.word	0x20000cec
 800539c:	20000150 	.word	0x20000150
 80053a0:	20000cf0 	.word	0x20000cf0
 80053a4:	20000160 	.word	0x20000160
 80053a8:	20000cf4 	.word	0x20000cf4
 80053ac:	20000170 	.word	0x20000170
 80053b0:	20000cf8 	.word	0x20000cf8
 80053b4:	20000180 	.word	0x20000180
 80053b8:	20000cfc 	.word	0x20000cfc
 80053bc:	20000190 	.word	0x20000190
 80053c0:	20000d00 	.word	0x20000d00
 80053c4:	200001a0 	.word	0x200001a0
 80053c8:	20000d04 	.word	0x20000d04
 80053cc:	200001b0 	.word	0x200001b0
 80053d0:	20000d08 	.word	0x20000d08
 80053d4:	200001c0 	.word	0x200001c0
 80053d8:	20000d10 	.word	0x20000d10
 80053dc:	200001d0 	.word	0x200001d0
 80053e0:	20000d14 	.word	0x20000d14
 80053e4:	200001e0 	.word	0x200001e0
 80053e8:	20000d18 	.word	0x20000d18
 80053ec:	200001f0 	.word	0x200001f0
 80053f0:	20000d1c 	.word	0x20000d1c
 80053f4:	20000200 	.word	0x20000200
 80053f8:	20000d20 	.word	0x20000d20
 80053fc:	20000210 	.word	0x20000210
 8005400:	20000d24 	.word	0x20000d24
 8005404:	20000220 	.word	0x20000220
 8005408:	20000d28 	.word	0x20000d28
 800540c:	20000230 	.word	0x20000230
 8005410:	20000d2c 	.word	0x20000d2c
 8005414:	20000240 	.word	0x20000240
 8005418:	20000d30 	.word	0x20000d30
 800541c:	20000250 	.word	0x20000250
 8005420:	20000d34 	.word	0x20000d34
 8005424:	20000260 	.word	0x20000260
 8005428:	20000d38 	.word	0x20000d38
 800542c:	20000270 	.word	0x20000270
 8005430:	20000d40 	.word	0x20000d40
 8005434:	20000280 	.word	0x20000280
 8005438:	20000d48 	.word	0x20000d48
 800543c:	20000290 	.word	0x20000290
 8005440:	20000d4c 	.word	0x20000d4c
 8005444:	200002a0 	.word	0x200002a0
 8005448:	20000d50 	.word	0x20000d50
 800544c:	200002b0 	.word	0x200002b0
 8005450:	20000d54 	.word	0x20000d54
 8005454:	200002c0 	.word	0x200002c0
 8005458:	20000d58 	.word	0x20000d58
 800545c:	200002d0 	.word	0x200002d0
 8005460:	20000d5c 	.word	0x20000d5c
 8005464:	200002e0 	.word	0x200002e0
 8005468:	20000d60 	.word	0x20000d60
 800546c:	200002f0 	.word	0x200002f0
 8005470:	20000d64 	.word	0x20000d64
 8005474:	20000300 	.word	0x20000300
 8005478:	20000d68 	.word	0x20000d68
 800547c:	20000310 	.word	0x20000310
 8005480:	20000d6c 	.word	0x20000d6c
 8005484:	20000320 	.word	0x20000320
 8005488:	20000d70 	.word	0x20000d70
 800548c:	20000330 	.word	0x20000330
 8005490:	20000d74 	.word	0x20000d74
 8005494:	20000340 	.word	0x20000340
 8005498:	20000d78 	.word	0x20000d78
 800549c:	20000350 	.word	0x20000350
 80054a0:	20000d7c 	.word	0x20000d7c
 80054a4:	20000360 	.word	0x20000360
 80054a8:	20000d80 	.word	0x20000d80
 80054ac:	20000370 	.word	0x20000370
 80054b0:	4a3d      	ldr	r2, [pc, #244]	; (80055a8 <loadMenuTexts+0x564>)
 80054b2:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 80054b4:	483d      	ldr	r0, [pc, #244]	; (80055ac <loadMenuTexts+0x568>)
 80054b6:	f7fb fa09 	bl	80008cc <copyText>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4a3c      	ldr	r2, [pc, #240]	; (80055b0 <loadMenuTexts+0x56c>)
 80054be:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 80054c0:	483c      	ldr	r0, [pc, #240]	; (80055b4 <loadMenuTexts+0x570>)
 80054c2:	f7fb fa03 	bl	80008cc <copyText>
 80054c6:	4603      	mov	r3, r0
 80054c8:	4a3b      	ldr	r2, [pc, #236]	; (80055b8 <loadMenuTexts+0x574>)
 80054ca:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 80054cc:	483b      	ldr	r0, [pc, #236]	; (80055bc <loadMenuTexts+0x578>)
 80054ce:	f7fb f9fd 	bl	80008cc <copyText>
 80054d2:	4603      	mov	r3, r0
 80054d4:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <loadMenuTexts+0x57c>)
 80054d6:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 80054d8:	483a      	ldr	r0, [pc, #232]	; (80055c4 <loadMenuTexts+0x580>)
 80054da:	f7fb f9f7 	bl	80008cc <copyText>
 80054de:	4603      	mov	r3, r0
 80054e0:	4a39      	ldr	r2, [pc, #228]	; (80055c8 <loadMenuTexts+0x584>)
 80054e2:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 80054e4:	4839      	ldr	r0, [pc, #228]	; (80055cc <loadMenuTexts+0x588>)
 80054e6:	f7fb f9f1 	bl	80008cc <copyText>
 80054ea:	4603      	mov	r3, r0
 80054ec:	4a38      	ldr	r2, [pc, #224]	; (80055d0 <loadMenuTexts+0x58c>)
 80054ee:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 80054f0:	4838      	ldr	r0, [pc, #224]	; (80055d4 <loadMenuTexts+0x590>)
 80054f2:	f7fb f9eb 	bl	80008cc <copyText>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4a37      	ldr	r2, [pc, #220]	; (80055d8 <loadMenuTexts+0x594>)
 80054fa:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 80054fc:	4837      	ldr	r0, [pc, #220]	; (80055dc <loadMenuTexts+0x598>)
 80054fe:	f7fb f9e5 	bl	80008cc <copyText>
 8005502:	4603      	mov	r3, r0
 8005504:	4a36      	ldr	r2, [pc, #216]	; (80055e0 <loadMenuTexts+0x59c>)
 8005506:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005508:	4836      	ldr	r0, [pc, #216]	; (80055e4 <loadMenuTexts+0x5a0>)
 800550a:	f7fb f9df 	bl	80008cc <copyText>
 800550e:	4603      	mov	r3, r0
 8005510:	4a35      	ldr	r2, [pc, #212]	; (80055e8 <loadMenuTexts+0x5a4>)
 8005512:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005514:	4835      	ldr	r0, [pc, #212]	; (80055ec <loadMenuTexts+0x5a8>)
 8005516:	f7fb f9d9 	bl	80008cc <copyText>
 800551a:	4603      	mov	r3, r0
 800551c:	4a34      	ldr	r2, [pc, #208]	; (80055f0 <loadMenuTexts+0x5ac>)
 800551e:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005520:	4834      	ldr	r0, [pc, #208]	; (80055f4 <loadMenuTexts+0x5b0>)
 8005522:	f7fb f9d3 	bl	80008cc <copyText>
 8005526:	4603      	mov	r3, r0
 8005528:	4a33      	ldr	r2, [pc, #204]	; (80055f8 <loadMenuTexts+0x5b4>)
 800552a:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 800552c:	4833      	ldr	r0, [pc, #204]	; (80055fc <loadMenuTexts+0x5b8>)
 800552e:	f7fb f9cd 	bl	80008cc <copyText>
 8005532:	4603      	mov	r3, r0
 8005534:	4a32      	ldr	r2, [pc, #200]	; (8005600 <loadMenuTexts+0x5bc>)
 8005536:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005538:	4832      	ldr	r0, [pc, #200]	; (8005604 <loadMenuTexts+0x5c0>)
 800553a:	f7fb f9c7 	bl	80008cc <copyText>
 800553e:	4603      	mov	r3, r0
 8005540:	4a31      	ldr	r2, [pc, #196]	; (8005608 <loadMenuTexts+0x5c4>)
 8005542:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8005544:	4831      	ldr	r0, [pc, #196]	; (800560c <loadMenuTexts+0x5c8>)
 8005546:	f7fb f9c1 	bl	80008cc <copyText>
 800554a:	4603      	mov	r3, r0
 800554c:	4a30      	ldr	r2, [pc, #192]	; (8005610 <loadMenuTexts+0x5cc>)
 800554e:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8005550:	4830      	ldr	r0, [pc, #192]	; (8005614 <loadMenuTexts+0x5d0>)
 8005552:	f7fb f9bb 	bl	80008cc <copyText>
 8005556:	4603      	mov	r3, r0
 8005558:	4a2f      	ldr	r2, [pc, #188]	; (8005618 <loadMenuTexts+0x5d4>)
 800555a:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 800555c:	482f      	ldr	r0, [pc, #188]	; (800561c <loadMenuTexts+0x5d8>)
 800555e:	f7fb f9b5 	bl	80008cc <copyText>
 8005562:	4603      	mov	r3, r0
 8005564:	4a2e      	ldr	r2, [pc, #184]	; (8005620 <loadMenuTexts+0x5dc>)
 8005566:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005568:	482e      	ldr	r0, [pc, #184]	; (8005624 <loadMenuTexts+0x5e0>)
 800556a:	f7fb f9af 	bl	80008cc <copyText>
 800556e:	4603      	mov	r3, r0
 8005570:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <loadMenuTexts+0x5e4>)
 8005572:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8005574:	482d      	ldr	r0, [pc, #180]	; (800562c <loadMenuTexts+0x5e8>)
 8005576:	f7fb f9a9 	bl	80008cc <copyText>
 800557a:	4603      	mov	r3, r0
 800557c:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <loadMenuTexts+0x5ec>)
 800557e:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005580:	482c      	ldr	r0, [pc, #176]	; (8005634 <loadMenuTexts+0x5f0>)
 8005582:	f7fb f9a3 	bl	80008cc <copyText>
 8005586:	4603      	mov	r3, r0
 8005588:	4a2b      	ldr	r2, [pc, #172]	; (8005638 <loadMenuTexts+0x5f4>)
 800558a:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 800558c:	482b      	ldr	r0, [pc, #172]	; (800563c <loadMenuTexts+0x5f8>)
 800558e:	f7fb f99d 	bl	80008cc <copyText>
 8005592:	4603      	mov	r3, r0
 8005594:	4a2a      	ldr	r2, [pc, #168]	; (8005640 <loadMenuTexts+0x5fc>)
 8005596:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8005598:	482a      	ldr	r0, [pc, #168]	; (8005644 <loadMenuTexts+0x600>)
 800559a:	f7fb f997 	bl	80008cc <copyText>
 800559e:	4603      	mov	r3, r0
 80055a0:	4a29      	ldr	r2, [pc, #164]	; (8005648 <loadMenuTexts+0x604>)
 80055a2:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80055a4:	e2d3      	b.n	8005b4e <loadMenuTexts+0xb0a>
 80055a6:	bf00      	nop
 80055a8:	20000d84 	.word	0x20000d84
 80055ac:	20000380 	.word	0x20000380
 80055b0:	20000d88 	.word	0x20000d88
 80055b4:	20000390 	.word	0x20000390
 80055b8:	20000d8c 	.word	0x20000d8c
 80055bc:	200003a0 	.word	0x200003a0
 80055c0:	20000d90 	.word	0x20000d90
 80055c4:	200003b0 	.word	0x200003b0
 80055c8:	20000d94 	.word	0x20000d94
 80055cc:	200003c0 	.word	0x200003c0
 80055d0:	20000d98 	.word	0x20000d98
 80055d4:	200003d0 	.word	0x200003d0
 80055d8:	20000d9c 	.word	0x20000d9c
 80055dc:	200003e0 	.word	0x200003e0
 80055e0:	20000da0 	.word	0x20000da0
 80055e4:	200003f0 	.word	0x200003f0
 80055e8:	20000da4 	.word	0x20000da4
 80055ec:	20000400 	.word	0x20000400
 80055f0:	20000da8 	.word	0x20000da8
 80055f4:	20000410 	.word	0x20000410
 80055f8:	20000dac 	.word	0x20000dac
 80055fc:	20000420 	.word	0x20000420
 8005600:	20000db0 	.word	0x20000db0
 8005604:	20000430 	.word	0x20000430
 8005608:	20000db4 	.word	0x20000db4
 800560c:	20000440 	.word	0x20000440
 8005610:	20000db8 	.word	0x20000db8
 8005614:	20000450 	.word	0x20000450
 8005618:	20000dc4 	.word	0x20000dc4
 800561c:	20000460 	.word	0x20000460
 8005620:	20000dc8 	.word	0x20000dc8
 8005624:	20000470 	.word	0x20000470
 8005628:	20000dcc 	.word	0x20000dcc
 800562c:	20000480 	.word	0x20000480
 8005630:	20000dd0 	.word	0x20000dd0
 8005634:	20000490 	.word	0x20000490
 8005638:	20000dd4 	.word	0x20000dd4
 800563c:	200004a0 	.word	0x200004a0
 8005640:	20000dd8 	.word	0x20000dd8
 8005644:	200004b0 	.word	0x200004b0
 8005648:	20000ddc 	.word	0x20000ddc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 800564c:	48a9      	ldr	r0, [pc, #676]	; (80058f4 <loadMenuTexts+0x8b0>)
 800564e:	f7fb f93d 	bl	80008cc <copyText>
 8005652:	4603      	mov	r3, r0
 8005654:	4aa8      	ldr	r2, [pc, #672]	; (80058f8 <loadMenuTexts+0x8b4>)
 8005656:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8005658:	48a8      	ldr	r0, [pc, #672]	; (80058fc <loadMenuTexts+0x8b8>)
 800565a:	f7fb f937 	bl	80008cc <copyText>
 800565e:	4603      	mov	r3, r0
 8005660:	4aa7      	ldr	r2, [pc, #668]	; (8005900 <loadMenuTexts+0x8bc>)
 8005662:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8005664:	48a7      	ldr	r0, [pc, #668]	; (8005904 <loadMenuTexts+0x8c0>)
 8005666:	f7fb f931 	bl	80008cc <copyText>
 800566a:	4603      	mov	r3, r0
 800566c:	4aa6      	ldr	r2, [pc, #664]	; (8005908 <loadMenuTexts+0x8c4>)
 800566e:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005670:	48a6      	ldr	r0, [pc, #664]	; (800590c <loadMenuTexts+0x8c8>)
 8005672:	f7fb f92b 	bl	80008cc <copyText>
 8005676:	4603      	mov	r3, r0
 8005678:	4aa5      	ldr	r2, [pc, #660]	; (8005910 <loadMenuTexts+0x8cc>)
 800567a:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 800567c:	48a5      	ldr	r0, [pc, #660]	; (8005914 <loadMenuTexts+0x8d0>)
 800567e:	f7fb f925 	bl	80008cc <copyText>
 8005682:	4603      	mov	r3, r0
 8005684:	4aa4      	ldr	r2, [pc, #656]	; (8005918 <loadMenuTexts+0x8d4>)
 8005686:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8005688:	48a4      	ldr	r0, [pc, #656]	; (800591c <loadMenuTexts+0x8d8>)
 800568a:	f7fb f91f 	bl	80008cc <copyText>
 800568e:	4603      	mov	r3, r0
 8005690:	4aa3      	ldr	r2, [pc, #652]	; (8005920 <loadMenuTexts+0x8dc>)
 8005692:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8005694:	48a3      	ldr	r0, [pc, #652]	; (8005924 <loadMenuTexts+0x8e0>)
 8005696:	f7fb f919 	bl	80008cc <copyText>
 800569a:	4603      	mov	r3, r0
 800569c:	4aa2      	ldr	r2, [pc, #648]	; (8005928 <loadMenuTexts+0x8e4>)
 800569e:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80056a0:	48a2      	ldr	r0, [pc, #648]	; (800592c <loadMenuTexts+0x8e8>)
 80056a2:	f7fb f913 	bl	80008cc <copyText>
 80056a6:	4603      	mov	r3, r0
 80056a8:	4aa1      	ldr	r2, [pc, #644]	; (8005930 <loadMenuTexts+0x8ec>)
 80056aa:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80056ac:	48a1      	ldr	r0, [pc, #644]	; (8005934 <loadMenuTexts+0x8f0>)
 80056ae:	f7fb f90d 	bl	80008cc <copyText>
 80056b2:	4603      	mov	r3, r0
 80056b4:	4aa0      	ldr	r2, [pc, #640]	; (8005938 <loadMenuTexts+0x8f4>)
 80056b6:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80056b8:	48a0      	ldr	r0, [pc, #640]	; (800593c <loadMenuTexts+0x8f8>)
 80056ba:	f7fb f907 	bl	80008cc <copyText>
 80056be:	4603      	mov	r3, r0
 80056c0:	4a9f      	ldr	r2, [pc, #636]	; (8005940 <loadMenuTexts+0x8fc>)
 80056c2:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80056c4:	489f      	ldr	r0, [pc, #636]	; (8005944 <loadMenuTexts+0x900>)
 80056c6:	f7fb f901 	bl	80008cc <copyText>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4a9e      	ldr	r2, [pc, #632]	; (8005948 <loadMenuTexts+0x904>)
 80056ce:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80056d0:	489e      	ldr	r0, [pc, #632]	; (800594c <loadMenuTexts+0x908>)
 80056d2:	f7fb f8fb 	bl	80008cc <copyText>
 80056d6:	4603      	mov	r3, r0
 80056d8:	4a9d      	ldr	r2, [pc, #628]	; (8005950 <loadMenuTexts+0x90c>)
 80056da:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80056dc:	489d      	ldr	r0, [pc, #628]	; (8005954 <loadMenuTexts+0x910>)
 80056de:	f7fb f8f5 	bl	80008cc <copyText>
 80056e2:	4603      	mov	r3, r0
 80056e4:	4a9c      	ldr	r2, [pc, #624]	; (8005958 <loadMenuTexts+0x914>)
 80056e6:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 80056e8:	489c      	ldr	r0, [pc, #624]	; (800595c <loadMenuTexts+0x918>)
 80056ea:	f7fb f8ef 	bl	80008cc <copyText>
 80056ee:	4603      	mov	r3, r0
 80056f0:	4a9b      	ldr	r2, [pc, #620]	; (8005960 <loadMenuTexts+0x91c>)
 80056f2:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 80056f4:	489b      	ldr	r0, [pc, #620]	; (8005964 <loadMenuTexts+0x920>)
 80056f6:	f7fb f8e9 	bl	80008cc <copyText>
 80056fa:	4603      	mov	r3, r0
 80056fc:	4a9a      	ldr	r2, [pc, #616]	; (8005968 <loadMenuTexts+0x924>)
 80056fe:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005700:	489a      	ldr	r0, [pc, #616]	; (800596c <loadMenuTexts+0x928>)
 8005702:	f7fb f8e3 	bl	80008cc <copyText>
 8005706:	4603      	mov	r3, r0
 8005708:	4a99      	ldr	r2, [pc, #612]	; (8005970 <loadMenuTexts+0x92c>)
 800570a:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 800570c:	4899      	ldr	r0, [pc, #612]	; (8005974 <loadMenuTexts+0x930>)
 800570e:	f7fb f8dd 	bl	80008cc <copyText>
 8005712:	4603      	mov	r3, r0
 8005714:	4a98      	ldr	r2, [pc, #608]	; (8005978 <loadMenuTexts+0x934>)
 8005716:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005718:	4898      	ldr	r0, [pc, #608]	; (800597c <loadMenuTexts+0x938>)
 800571a:	f7fb f8d7 	bl	80008cc <copyText>
 800571e:	4603      	mov	r3, r0
 8005720:	4a97      	ldr	r2, [pc, #604]	; (8005980 <loadMenuTexts+0x93c>)
 8005722:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005724:	4897      	ldr	r0, [pc, #604]	; (8005984 <loadMenuTexts+0x940>)
 8005726:	f7fb f8d1 	bl	80008cc <copyText>
 800572a:	4603      	mov	r3, r0
 800572c:	4a96      	ldr	r2, [pc, #600]	; (8005988 <loadMenuTexts+0x944>)
 800572e:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005730:	4896      	ldr	r0, [pc, #600]	; (800598c <loadMenuTexts+0x948>)
 8005732:	f7fb f8cb 	bl	80008cc <copyText>
 8005736:	4603      	mov	r3, r0
 8005738:	4a95      	ldr	r2, [pc, #596]	; (8005990 <loadMenuTexts+0x94c>)
 800573a:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 800573c:	4895      	ldr	r0, [pc, #596]	; (8005994 <loadMenuTexts+0x950>)
 800573e:	f7fb f8c5 	bl	80008cc <copyText>
 8005742:	4603      	mov	r3, r0
 8005744:	4a94      	ldr	r2, [pc, #592]	; (8005998 <loadMenuTexts+0x954>)
 8005746:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005748:	4894      	ldr	r0, [pc, #592]	; (800599c <loadMenuTexts+0x958>)
 800574a:	f7fb f8bf 	bl	80008cc <copyText>
 800574e:	4603      	mov	r3, r0
 8005750:	4a93      	ldr	r2, [pc, #588]	; (80059a0 <loadMenuTexts+0x95c>)
 8005752:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8005754:	4893      	ldr	r0, [pc, #588]	; (80059a4 <loadMenuTexts+0x960>)
 8005756:	f7fb f8b9 	bl	80008cc <copyText>
 800575a:	4603      	mov	r3, r0
 800575c:	4a92      	ldr	r2, [pc, #584]	; (80059a8 <loadMenuTexts+0x964>)
 800575e:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005760:	4892      	ldr	r0, [pc, #584]	; (80059ac <loadMenuTexts+0x968>)
 8005762:	f7fb f8b3 	bl	80008cc <copyText>
 8005766:	4603      	mov	r3, r0
 8005768:	4a91      	ldr	r2, [pc, #580]	; (80059b0 <loadMenuTexts+0x96c>)
 800576a:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 800576c:	4891      	ldr	r0, [pc, #580]	; (80059b4 <loadMenuTexts+0x970>)
 800576e:	f7fb f8ad 	bl	80008cc <copyText>
 8005772:	4603      	mov	r3, r0
 8005774:	4a90      	ldr	r2, [pc, #576]	; (80059b8 <loadMenuTexts+0x974>)
 8005776:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005778:	4890      	ldr	r0, [pc, #576]	; (80059bc <loadMenuTexts+0x978>)
 800577a:	f7fb f8a7 	bl	80008cc <copyText>
 800577e:	4603      	mov	r3, r0
 8005780:	4a8f      	ldr	r2, [pc, #572]	; (80059c0 <loadMenuTexts+0x97c>)
 8005782:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8005784:	488f      	ldr	r0, [pc, #572]	; (80059c4 <loadMenuTexts+0x980>)
 8005786:	f7fb f8a1 	bl	80008cc <copyText>
 800578a:	4603      	mov	r3, r0
 800578c:	4a8e      	ldr	r2, [pc, #568]	; (80059c8 <loadMenuTexts+0x984>)
 800578e:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8005790:	488e      	ldr	r0, [pc, #568]	; (80059cc <loadMenuTexts+0x988>)
 8005792:	f7fb f89b 	bl	80008cc <copyText>
 8005796:	4603      	mov	r3, r0
 8005798:	4a8d      	ldr	r2, [pc, #564]	; (80059d0 <loadMenuTexts+0x98c>)
 800579a:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 800579c:	488d      	ldr	r0, [pc, #564]	; (80059d4 <loadMenuTexts+0x990>)
 800579e:	f7fb f895 	bl	80008cc <copyText>
 80057a2:	4603      	mov	r3, r0
 80057a4:	4a8c      	ldr	r2, [pc, #560]	; (80059d8 <loadMenuTexts+0x994>)
 80057a6:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80057a8:	488c      	ldr	r0, [pc, #560]	; (80059dc <loadMenuTexts+0x998>)
 80057aa:	f7fb f88f 	bl	80008cc <copyText>
 80057ae:	4603      	mov	r3, r0
 80057b0:	4a8b      	ldr	r2, [pc, #556]	; (80059e0 <loadMenuTexts+0x99c>)
 80057b2:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 80057b4:	488b      	ldr	r0, [pc, #556]	; (80059e4 <loadMenuTexts+0x9a0>)
 80057b6:	f7fb f889 	bl	80008cc <copyText>
 80057ba:	4603      	mov	r3, r0
 80057bc:	4a8a      	ldr	r2, [pc, #552]	; (80059e8 <loadMenuTexts+0x9a4>)
 80057be:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 80057c0:	488a      	ldr	r0, [pc, #552]	; (80059ec <loadMenuTexts+0x9a8>)
 80057c2:	f7fb f883 	bl	80008cc <copyText>
 80057c6:	4603      	mov	r3, r0
 80057c8:	4a89      	ldr	r2, [pc, #548]	; (80059f0 <loadMenuTexts+0x9ac>)
 80057ca:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80057cc:	4889      	ldr	r0, [pc, #548]	; (80059f4 <loadMenuTexts+0x9b0>)
 80057ce:	f7fb f87d 	bl	80008cc <copyText>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4a88      	ldr	r2, [pc, #544]	; (80059f8 <loadMenuTexts+0x9b4>)
 80057d6:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 80057d8:	4888      	ldr	r0, [pc, #544]	; (80059fc <loadMenuTexts+0x9b8>)
 80057da:	f7fb f877 	bl	80008cc <copyText>
 80057de:	4603      	mov	r3, r0
 80057e0:	4a87      	ldr	r2, [pc, #540]	; (8005a00 <loadMenuTexts+0x9bc>)
 80057e2:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 80057e4:	4887      	ldr	r0, [pc, #540]	; (8005a04 <loadMenuTexts+0x9c0>)
 80057e6:	f7fb f871 	bl	80008cc <copyText>
 80057ea:	4603      	mov	r3, r0
 80057ec:	4a86      	ldr	r2, [pc, #536]	; (8005a08 <loadMenuTexts+0x9c4>)
 80057ee:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 80057f0:	4886      	ldr	r0, [pc, #536]	; (8005a0c <loadMenuTexts+0x9c8>)
 80057f2:	f7fb f86b 	bl	80008cc <copyText>
 80057f6:	4603      	mov	r3, r0
 80057f8:	4a85      	ldr	r2, [pc, #532]	; (8005a10 <loadMenuTexts+0x9cc>)
 80057fa:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 80057fc:	4885      	ldr	r0, [pc, #532]	; (8005a14 <loadMenuTexts+0x9d0>)
 80057fe:	f7fb f865 	bl	80008cc <copyText>
 8005802:	4603      	mov	r3, r0
 8005804:	4a84      	ldr	r2, [pc, #528]	; (8005a18 <loadMenuTexts+0x9d4>)
 8005806:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005808:	4884      	ldr	r0, [pc, #528]	; (8005a1c <loadMenuTexts+0x9d8>)
 800580a:	f7fb f85f 	bl	80008cc <copyText>
 800580e:	4603      	mov	r3, r0
 8005810:	4a83      	ldr	r2, [pc, #524]	; (8005a20 <loadMenuTexts+0x9dc>)
 8005812:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005814:	4883      	ldr	r0, [pc, #524]	; (8005a24 <loadMenuTexts+0x9e0>)
 8005816:	f7fb f859 	bl	80008cc <copyText>
 800581a:	4603      	mov	r3, r0
 800581c:	4a82      	ldr	r2, [pc, #520]	; (8005a28 <loadMenuTexts+0x9e4>)
 800581e:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005820:	4882      	ldr	r0, [pc, #520]	; (8005a2c <loadMenuTexts+0x9e8>)
 8005822:	f7fb f853 	bl	80008cc <copyText>
 8005826:	4603      	mov	r3, r0
 8005828:	4a81      	ldr	r2, [pc, #516]	; (8005a30 <loadMenuTexts+0x9ec>)
 800582a:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 800582c:	4881      	ldr	r0, [pc, #516]	; (8005a34 <loadMenuTexts+0x9f0>)
 800582e:	f7fb f84d 	bl	80008cc <copyText>
 8005832:	4603      	mov	r3, r0
 8005834:	4a80      	ldr	r2, [pc, #512]	; (8005a38 <loadMenuTexts+0x9f4>)
 8005836:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005838:	4880      	ldr	r0, [pc, #512]	; (8005a3c <loadMenuTexts+0x9f8>)
 800583a:	f7fb f847 	bl	80008cc <copyText>
 800583e:	4603      	mov	r3, r0
 8005840:	4a7f      	ldr	r2, [pc, #508]	; (8005a40 <loadMenuTexts+0x9fc>)
 8005842:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8005844:	487f      	ldr	r0, [pc, #508]	; (8005a44 <loadMenuTexts+0xa00>)
 8005846:	f7fb f841 	bl	80008cc <copyText>
 800584a:	4603      	mov	r3, r0
 800584c:	4a7e      	ldr	r2, [pc, #504]	; (8005a48 <loadMenuTexts+0xa04>)
 800584e:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8005850:	487e      	ldr	r0, [pc, #504]	; (8005a4c <loadMenuTexts+0xa08>)
 8005852:	f7fb f83b 	bl	80008cc <copyText>
 8005856:	4603      	mov	r3, r0
 8005858:	4a7d      	ldr	r2, [pc, #500]	; (8005a50 <loadMenuTexts+0xa0c>)
 800585a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 800585c:	487d      	ldr	r0, [pc, #500]	; (8005a54 <loadMenuTexts+0xa10>)
 800585e:	f7fb f835 	bl	80008cc <copyText>
 8005862:	4603      	mov	r3, r0
 8005864:	4a7c      	ldr	r2, [pc, #496]	; (8005a58 <loadMenuTexts+0xa14>)
 8005866:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005868:	487c      	ldr	r0, [pc, #496]	; (8005a5c <loadMenuTexts+0xa18>)
 800586a:	f7fb f82f 	bl	80008cc <copyText>
 800586e:	4603      	mov	r3, r0
 8005870:	4a7b      	ldr	r2, [pc, #492]	; (8005a60 <loadMenuTexts+0xa1c>)
 8005872:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8005874:	487b      	ldr	r0, [pc, #492]	; (8005a64 <loadMenuTexts+0xa20>)
 8005876:	f7fb f829 	bl	80008cc <copyText>
 800587a:	4603      	mov	r3, r0
 800587c:	4a7a      	ldr	r2, [pc, #488]	; (8005a68 <loadMenuTexts+0xa24>)
 800587e:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005880:	487a      	ldr	r0, [pc, #488]	; (8005a6c <loadMenuTexts+0xa28>)
 8005882:	f7fb f823 	bl	80008cc <copyText>
 8005886:	4603      	mov	r3, r0
 8005888:	4a79      	ldr	r2, [pc, #484]	; (8005a70 <loadMenuTexts+0xa2c>)
 800588a:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 800588c:	4879      	ldr	r0, [pc, #484]	; (8005a74 <loadMenuTexts+0xa30>)
 800588e:	f7fb f81d 	bl	80008cc <copyText>
 8005892:	4603      	mov	r3, r0
 8005894:	4a78      	ldr	r2, [pc, #480]	; (8005a78 <loadMenuTexts+0xa34>)
 8005896:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8005898:	4878      	ldr	r0, [pc, #480]	; (8005a7c <loadMenuTexts+0xa38>)
 800589a:	f7fb f817 	bl	80008cc <copyText>
 800589e:	4603      	mov	r3, r0
 80058a0:	4a77      	ldr	r2, [pc, #476]	; (8005a80 <loadMenuTexts+0xa3c>)
 80058a2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80058a4:	4877      	ldr	r0, [pc, #476]	; (8005a84 <loadMenuTexts+0xa40>)
 80058a6:	f7fb f811 	bl	80008cc <copyText>
 80058aa:	4603      	mov	r3, r0
 80058ac:	4a76      	ldr	r2, [pc, #472]	; (8005a88 <loadMenuTexts+0xa44>)
 80058ae:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 80058b0:	4876      	ldr	r0, [pc, #472]	; (8005a8c <loadMenuTexts+0xa48>)
 80058b2:	f7fb f80b 	bl	80008cc <copyText>
 80058b6:	4603      	mov	r3, r0
 80058b8:	4a75      	ldr	r2, [pc, #468]	; (8005a90 <loadMenuTexts+0xa4c>)
 80058ba:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 80058bc:	4875      	ldr	r0, [pc, #468]	; (8005a94 <loadMenuTexts+0xa50>)
 80058be:	f7fb f805 	bl	80008cc <copyText>
 80058c2:	4603      	mov	r3, r0
 80058c4:	4a74      	ldr	r2, [pc, #464]	; (8005a98 <loadMenuTexts+0xa54>)
 80058c6:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80058c8:	4874      	ldr	r0, [pc, #464]	; (8005a9c <loadMenuTexts+0xa58>)
 80058ca:	f7fa ffff 	bl	80008cc <copyText>
 80058ce:	4603      	mov	r3, r0
 80058d0:	4a73      	ldr	r2, [pc, #460]	; (8005aa0 <loadMenuTexts+0xa5c>)
 80058d2:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80058d4:	4873      	ldr	r0, [pc, #460]	; (8005aa4 <loadMenuTexts+0xa60>)
 80058d6:	f7fa fff9 	bl	80008cc <copyText>
 80058da:	4603      	mov	r3, r0
 80058dc:	4a72      	ldr	r2, [pc, #456]	; (8005aa8 <loadMenuTexts+0xa64>)
 80058de:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80058e0:	4872      	ldr	r0, [pc, #456]	; (8005aac <loadMenuTexts+0xa68>)
 80058e2:	f7fa fff3 	bl	80008cc <copyText>
 80058e6:	4603      	mov	r3, r0
 80058e8:	4a71      	ldr	r2, [pc, #452]	; (8005ab0 <loadMenuTexts+0xa6c>)
 80058ea:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 80058ec:	4871      	ldr	r0, [pc, #452]	; (8005ab4 <loadMenuTexts+0xa70>)
 80058ee:	f7fa ffed 	bl	80008cc <copyText>
 80058f2:	e0e1      	b.n	8005ab8 <loadMenuTexts+0xa74>
 80058f4:	200004c0 	.word	0x200004c0
 80058f8:	20000cb8 	.word	0x20000cb8
 80058fc:	200004d0 	.word	0x200004d0
 8005900:	20000cbc 	.word	0x20000cbc
 8005904:	200004e0 	.word	0x200004e0
 8005908:	20000cc0 	.word	0x20000cc0
 800590c:	200004f0 	.word	0x200004f0
 8005910:	20000cc4 	.word	0x20000cc4
 8005914:	20000500 	.word	0x20000500
 8005918:	20000cc8 	.word	0x20000cc8
 800591c:	20000510 	.word	0x20000510
 8005920:	20000ccc 	.word	0x20000ccc
 8005924:	20000520 	.word	0x20000520
 8005928:	20000cd0 	.word	0x20000cd0
 800592c:	20000530 	.word	0x20000530
 8005930:	20000cd4 	.word	0x20000cd4
 8005934:	20000540 	.word	0x20000540
 8005938:	20000cd8 	.word	0x20000cd8
 800593c:	20000550 	.word	0x20000550
 8005940:	20000cdc 	.word	0x20000cdc
 8005944:	20000560 	.word	0x20000560
 8005948:	20000ce0 	.word	0x20000ce0
 800594c:	20000570 	.word	0x20000570
 8005950:	20000ce4 	.word	0x20000ce4
 8005954:	20000580 	.word	0x20000580
 8005958:	20000ce8 	.word	0x20000ce8
 800595c:	20000590 	.word	0x20000590
 8005960:	20000cec 	.word	0x20000cec
 8005964:	200005a0 	.word	0x200005a0
 8005968:	20000cf0 	.word	0x20000cf0
 800596c:	200005b0 	.word	0x200005b0
 8005970:	20000cf4 	.word	0x20000cf4
 8005974:	200005c0 	.word	0x200005c0
 8005978:	20000cf8 	.word	0x20000cf8
 800597c:	200005d0 	.word	0x200005d0
 8005980:	20000cfc 	.word	0x20000cfc
 8005984:	200005e0 	.word	0x200005e0
 8005988:	20000d00 	.word	0x20000d00
 800598c:	200005f0 	.word	0x200005f0
 8005990:	20000d04 	.word	0x20000d04
 8005994:	20000600 	.word	0x20000600
 8005998:	20000d08 	.word	0x20000d08
 800599c:	20000610 	.word	0x20000610
 80059a0:	20000d10 	.word	0x20000d10
 80059a4:	20000620 	.word	0x20000620
 80059a8:	20000d14 	.word	0x20000d14
 80059ac:	20000630 	.word	0x20000630
 80059b0:	20000d18 	.word	0x20000d18
 80059b4:	20000640 	.word	0x20000640
 80059b8:	20000d1c 	.word	0x20000d1c
 80059bc:	20000650 	.word	0x20000650
 80059c0:	20000d20 	.word	0x20000d20
 80059c4:	20000660 	.word	0x20000660
 80059c8:	20000d24 	.word	0x20000d24
 80059cc:	20000670 	.word	0x20000670
 80059d0:	20000d28 	.word	0x20000d28
 80059d4:	20000680 	.word	0x20000680
 80059d8:	20000d2c 	.word	0x20000d2c
 80059dc:	20000690 	.word	0x20000690
 80059e0:	20000d30 	.word	0x20000d30
 80059e4:	200006a0 	.word	0x200006a0
 80059e8:	20000d34 	.word	0x20000d34
 80059ec:	200006b0 	.word	0x200006b0
 80059f0:	20000d38 	.word	0x20000d38
 80059f4:	200006c0 	.word	0x200006c0
 80059f8:	20000d40 	.word	0x20000d40
 80059fc:	200006d0 	.word	0x200006d0
 8005a00:	20000d48 	.word	0x20000d48
 8005a04:	200006e0 	.word	0x200006e0
 8005a08:	20000d4c 	.word	0x20000d4c
 8005a0c:	200006f0 	.word	0x200006f0
 8005a10:	20000d50 	.word	0x20000d50
 8005a14:	20000700 	.word	0x20000700
 8005a18:	20000d54 	.word	0x20000d54
 8005a1c:	20000710 	.word	0x20000710
 8005a20:	20000d58 	.word	0x20000d58
 8005a24:	20000720 	.word	0x20000720
 8005a28:	20000d5c 	.word	0x20000d5c
 8005a2c:	20000730 	.word	0x20000730
 8005a30:	20000d60 	.word	0x20000d60
 8005a34:	20000740 	.word	0x20000740
 8005a38:	20000d64 	.word	0x20000d64
 8005a3c:	20000750 	.word	0x20000750
 8005a40:	20000d68 	.word	0x20000d68
 8005a44:	20000760 	.word	0x20000760
 8005a48:	20000d6c 	.word	0x20000d6c
 8005a4c:	20000770 	.word	0x20000770
 8005a50:	20000d70 	.word	0x20000d70
 8005a54:	20000780 	.word	0x20000780
 8005a58:	20000d74 	.word	0x20000d74
 8005a5c:	20000790 	.word	0x20000790
 8005a60:	20000d78 	.word	0x20000d78
 8005a64:	200007a0 	.word	0x200007a0
 8005a68:	20000d7c 	.word	0x20000d7c
 8005a6c:	200007b0 	.word	0x200007b0
 8005a70:	20000d80 	.word	0x20000d80
 8005a74:	200007c0 	.word	0x200007c0
 8005a78:	20000d84 	.word	0x20000d84
 8005a7c:	200007d0 	.word	0x200007d0
 8005a80:	20000d88 	.word	0x20000d88
 8005a84:	200007e0 	.word	0x200007e0
 8005a88:	20000d8c 	.word	0x20000d8c
 8005a8c:	200007f0 	.word	0x200007f0
 8005a90:	20000d90 	.word	0x20000d90
 8005a94:	20000800 	.word	0x20000800
 8005a98:	20000d94 	.word	0x20000d94
 8005a9c:	20000810 	.word	0x20000810
 8005aa0:	20000d98 	.word	0x20000d98
 8005aa4:	20000820 	.word	0x20000820
 8005aa8:	20000d9c 	.word	0x20000d9c
 8005aac:	20000830 	.word	0x20000830
 8005ab0:	20000da0 	.word	0x20000da0
 8005ab4:	20000840 	.word	0x20000840
 8005ab8:	4603      	mov	r3, r0
 8005aba:	4a27      	ldr	r2, [pc, #156]	; (8005b58 <loadMenuTexts+0xb14>)
 8005abc:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8005abe:	4827      	ldr	r0, [pc, #156]	; (8005b5c <loadMenuTexts+0xb18>)
 8005ac0:	f7fa ff04 	bl	80008cc <copyText>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	4a26      	ldr	r2, [pc, #152]	; (8005b60 <loadMenuTexts+0xb1c>)
 8005ac8:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8005aca:	4826      	ldr	r0, [pc, #152]	; (8005b64 <loadMenuTexts+0xb20>)
 8005acc:	f7fa fefe 	bl	80008cc <copyText>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	4a25      	ldr	r2, [pc, #148]	; (8005b68 <loadMenuTexts+0xb24>)
 8005ad4:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8005ad6:	4825      	ldr	r0, [pc, #148]	; (8005b6c <loadMenuTexts+0xb28>)
 8005ad8:	f7fa fef8 	bl	80008cc <copyText>
 8005adc:	4603      	mov	r3, r0
 8005ade:	4a24      	ldr	r2, [pc, #144]	; (8005b70 <loadMenuTexts+0xb2c>)
 8005ae0:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005ae2:	4824      	ldr	r0, [pc, #144]	; (8005b74 <loadMenuTexts+0xb30>)
 8005ae4:	f7fa fef2 	bl	80008cc <copyText>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	4a23      	ldr	r2, [pc, #140]	; (8005b78 <loadMenuTexts+0xb34>)
 8005aec:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005aee:	4823      	ldr	r0, [pc, #140]	; (8005b7c <loadMenuTexts+0xb38>)
 8005af0:	f7fa feec 	bl	80008cc <copyText>
 8005af4:	4603      	mov	r3, r0
 8005af6:	4a22      	ldr	r2, [pc, #136]	; (8005b80 <loadMenuTexts+0xb3c>)
 8005af8:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8005afa:	4822      	ldr	r0, [pc, #136]	; (8005b84 <loadMenuTexts+0xb40>)
 8005afc:	f7fa fee6 	bl	80008cc <copyText>
 8005b00:	4603      	mov	r3, r0
 8005b02:	4a21      	ldr	r2, [pc, #132]	; (8005b88 <loadMenuTexts+0xb44>)
 8005b04:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8005b06:	4821      	ldr	r0, [pc, #132]	; (8005b8c <loadMenuTexts+0xb48>)
 8005b08:	f7fa fee0 	bl	80008cc <copyText>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	4a20      	ldr	r2, [pc, #128]	; (8005b90 <loadMenuTexts+0xb4c>)
 8005b10:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005b12:	4820      	ldr	r0, [pc, #128]	; (8005b94 <loadMenuTexts+0xb50>)
 8005b14:	f7fa feda 	bl	80008cc <copyText>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <loadMenuTexts+0xb54>)
 8005b1c:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005b1e:	481f      	ldr	r0, [pc, #124]	; (8005b9c <loadMenuTexts+0xb58>)
 8005b20:	f7fa fed4 	bl	80008cc <copyText>
 8005b24:	4603      	mov	r3, r0
 8005b26:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <loadMenuTexts+0xb5c>)
 8005b28:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8005b2a:	481e      	ldr	r0, [pc, #120]	; (8005ba4 <loadMenuTexts+0xb60>)
 8005b2c:	f7fa fece 	bl	80008cc <copyText>
 8005b30:	4603      	mov	r3, r0
 8005b32:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <loadMenuTexts+0xb64>)
 8005b34:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8005b36:	481d      	ldr	r0, [pc, #116]	; (8005bac <loadMenuTexts+0xb68>)
 8005b38:	f7fa fec8 	bl	80008cc <copyText>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	4a1c      	ldr	r2, [pc, #112]	; (8005bb0 <loadMenuTexts+0xb6c>)
 8005b40:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8005b42:	481c      	ldr	r0, [pc, #112]	; (8005bb4 <loadMenuTexts+0xb70>)
 8005b44:	f7fa fec2 	bl	80008cc <copyText>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	; (8005bb8 <loadMenuTexts+0xb74>)
 8005b4c:	6013      	str	r3, [r2, #0]
}
 8005b4e:	bf00      	nop
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000da4 	.word	0x20000da4
 8005b5c:	20000850 	.word	0x20000850
 8005b60:	20000da8 	.word	0x20000da8
 8005b64:	20000860 	.word	0x20000860
 8005b68:	20000dac 	.word	0x20000dac
 8005b6c:	20000870 	.word	0x20000870
 8005b70:	20000db0 	.word	0x20000db0
 8005b74:	20000880 	.word	0x20000880
 8005b78:	20000db4 	.word	0x20000db4
 8005b7c:	20000890 	.word	0x20000890
 8005b80:	20000db8 	.word	0x20000db8
 8005b84:	200008a0 	.word	0x200008a0
 8005b88:	20000dc4 	.word	0x20000dc4
 8005b8c:	200008b0 	.word	0x200008b0
 8005b90:	20000dc8 	.word	0x20000dc8
 8005b94:	200008c0 	.word	0x200008c0
 8005b98:	20000dcc 	.word	0x20000dcc
 8005b9c:	200008d0 	.word	0x200008d0
 8005ba0:	20000dd0 	.word	0x20000dd0
 8005ba4:	200008e0 	.word	0x200008e0
 8005ba8:	20000dd4 	.word	0x20000dd4
 8005bac:	200008f0 	.word	0x200008f0
 8005bb0:	20000dd8 	.word	0x20000dd8
 8005bb4:	20000900 	.word	0x20000900
 8005bb8:	20000ddc 	.word	0x20000ddc

08005bbc <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d105      	bne.n	8005bd8 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005bcc:	4a22      	ldr	r2, [pc, #136]	; (8005c58 <lcdUpdate+0x9c>)
 8005bce:	2101      	movs	r1, #1
 8005bd0:	2002      	movs	r0, #2
 8005bd2:	f7fa fdf1 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8005bd6:	e03b      	b.n	8005c50 <lcdUpdate+0x94>
	} else if(y==2) {
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d105      	bne.n	8005bea <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005bde:	4a1e      	ldr	r2, [pc, #120]	; (8005c58 <lcdUpdate+0x9c>)
 8005be0:	2102      	movs	r1, #2
 8005be2:	2002      	movs	r0, #2
 8005be4:	f7fa fde8 	bl	80007b8 <lcd_print>
}
 8005be8:	e032      	b.n	8005c50 <lcdUpdate+0x94>
	} else if(y==3) {
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d105      	bne.n	8005bfc <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005bf0:	4a19      	ldr	r2, [pc, #100]	; (8005c58 <lcdUpdate+0x9c>)
 8005bf2:	2103      	movs	r1, #3
 8005bf4:	2002      	movs	r0, #2
 8005bf6:	f7fa fddf 	bl	80007b8 <lcd_print>
}
 8005bfa:	e029      	b.n	8005c50 <lcdUpdate+0x94>
	} else if(y==4) {
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d105      	bne.n	8005c0e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005c02:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <lcdUpdate+0x9c>)
 8005c04:	2104      	movs	r1, #4
 8005c06:	2002      	movs	r0, #2
 8005c08:	f7fa fdd6 	bl	80007b8 <lcd_print>
}
 8005c0c:	e020      	b.n	8005c50 <lcdUpdate+0x94>
	} else if(y==5) {
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	2b05      	cmp	r3, #5
 8005c12:	d105      	bne.n	8005c20 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005c14:	4a10      	ldr	r2, [pc, #64]	; (8005c58 <lcdUpdate+0x9c>)
 8005c16:	2105      	movs	r1, #5
 8005c18:	2002      	movs	r0, #2
 8005c1a:	f7fa fdcd 	bl	80007b8 <lcd_print>
}
 8005c1e:	e017      	b.n	8005c50 <lcdUpdate+0x94>
	} else if(y==6) {
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	2b06      	cmp	r3, #6
 8005c24:	d105      	bne.n	8005c32 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005c26:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <lcdUpdate+0x9c>)
 8005c28:	2106      	movs	r1, #6
 8005c2a:	2002      	movs	r0, #2
 8005c2c:	f7fa fdc4 	bl	80007b8 <lcd_print>
}
 8005c30:	e00e      	b.n	8005c50 <lcdUpdate+0x94>
	} else if (y==7) {
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	2b07      	cmp	r3, #7
 8005c36:	d10b      	bne.n	8005c50 <lcdUpdate+0x94>
		lcd_clear();
 8005c38:	f7fa fdea 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005c3c:	4a07      	ldr	r2, [pc, #28]	; (8005c5c <lcdUpdate+0xa0>)
 8005c3e:	2101      	movs	r1, #1
 8005c40:	2001      	movs	r0, #1
 8005c42:	f7fa fdb9 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005c46:	4a06      	ldr	r2, [pc, #24]	; (8005c60 <lcdUpdate+0xa4>)
 8005c48:	2101      	movs	r1, #1
 8005c4a:	2002      	movs	r0, #2
 8005c4c:	f7fa fdb4 	bl	80007b8 <lcd_print>
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	0800dea4 	.word	0x0800dea4
 8005c5c:	0800e7d0 	.word	0x0800e7d0
 8005c60:	0800e7e4 	.word	0x0800e7e4

08005c64 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d11d      	bne.n	8005cb0 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8005c74:	4b62      	ldr	r3, [pc, #392]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d105      	bne.n	8005c88 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005c7c:	4a61      	ldr	r2, [pc, #388]	; (8005e04 <hataKoduLcdGoster+0x1a0>)
 8005c7e:	2101      	movs	r1, #1
 8005c80:	2001      	movs	r0, #1
 8005c82:	f7fa fd99 	bl	80007b8 <lcd_print>
 8005c86:	e008      	b.n	8005c9a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8005c88:	4b5d      	ldr	r3, [pc, #372]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d104      	bne.n	8005c9a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005c90:	4a5d      	ldr	r2, [pc, #372]	; (8005e08 <hataKoduLcdGoster+0x1a4>)
 8005c92:	2101      	movs	r1, #1
 8005c94:	2001      	movs	r0, #1
 8005c96:	f7fa fd8f 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8005c9a:	4a5c      	ldr	r2, [pc, #368]	; (8005e0c <hataKoduLcdGoster+0x1a8>)
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	2002      	movs	r0, #2
 8005ca0:	f7fa fd8a 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005ca4:	4a5a      	ldr	r2, [pc, #360]	; (8005e10 <hataKoduLcdGoster+0x1ac>)
 8005ca6:	2107      	movs	r1, #7
 8005ca8:	2002      	movs	r0, #2
 8005caa:	f7fa fd85 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8005cae:	e0a3      	b.n	8005df8 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d11d      	bne.n	8005cf2 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8005cb6:	4b52      	ldr	r3, [pc, #328]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d105      	bne.n	8005cca <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8005cbe:	4a51      	ldr	r2, [pc, #324]	; (8005e04 <hataKoduLcdGoster+0x1a0>)
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	f7fa fd78 	bl	80007b8 <lcd_print>
 8005cc8:	e008      	b.n	8005cdc <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8005cca:	4b4d      	ldr	r3, [pc, #308]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d104      	bne.n	8005cdc <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005cd2:	4a4d      	ldr	r2, [pc, #308]	; (8005e08 <hataKoduLcdGoster+0x1a4>)
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	f7fa fd6e 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 8005cdc:	4a4d      	ldr	r2, [pc, #308]	; (8005e14 <hataKoduLcdGoster+0x1b0>)
 8005cde:	2102      	movs	r1, #2
 8005ce0:	2002      	movs	r0, #2
 8005ce2:	f7fa fd69 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005ce6:	4a4a      	ldr	r2, [pc, #296]	; (8005e10 <hataKoduLcdGoster+0x1ac>)
 8005ce8:	2107      	movs	r1, #7
 8005cea:	2002      	movs	r0, #2
 8005cec:	f7fa fd64 	bl	80007b8 <lcd_print>
}
 8005cf0:	e082      	b.n	8005df8 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d11d      	bne.n	8005d34 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005cf8:	4b41      	ldr	r3, [pc, #260]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005d00:	4a40      	ldr	r2, [pc, #256]	; (8005e04 <hataKoduLcdGoster+0x1a0>)
 8005d02:	2101      	movs	r1, #1
 8005d04:	2001      	movs	r0, #1
 8005d06:	f7fa fd57 	bl	80007b8 <lcd_print>
 8005d0a:	e008      	b.n	8005d1e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005d0c:	4b3c      	ldr	r3, [pc, #240]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d104      	bne.n	8005d1e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005d14:	4a3c      	ldr	r2, [pc, #240]	; (8005e08 <hataKoduLcdGoster+0x1a4>)
 8005d16:	2101      	movs	r1, #1
 8005d18:	2001      	movs	r0, #1
 8005d1a:	f7fa fd4d 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 8005d1e:	4a3e      	ldr	r2, [pc, #248]	; (8005e18 <hataKoduLcdGoster+0x1b4>)
 8005d20:	2103      	movs	r1, #3
 8005d22:	2002      	movs	r0, #2
 8005d24:	f7fa fd48 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005d28:	4a39      	ldr	r2, [pc, #228]	; (8005e10 <hataKoduLcdGoster+0x1ac>)
 8005d2a:	2107      	movs	r1, #7
 8005d2c:	2002      	movs	r0, #2
 8005d2e:	f7fa fd43 	bl	80007b8 <lcd_print>
}
 8005d32:	e061      	b.n	8005df8 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d11d      	bne.n	8005d76 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005d3a:	4b31      	ldr	r3, [pc, #196]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d105      	bne.n	8005d4e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005d42:	4a30      	ldr	r2, [pc, #192]	; (8005e04 <hataKoduLcdGoster+0x1a0>)
 8005d44:	2101      	movs	r1, #1
 8005d46:	2001      	movs	r0, #1
 8005d48:	f7fa fd36 	bl	80007b8 <lcd_print>
 8005d4c:	e008      	b.n	8005d60 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005d4e:	4b2c      	ldr	r3, [pc, #176]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d104      	bne.n	8005d60 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005d56:	4a2c      	ldr	r2, [pc, #176]	; (8005e08 <hataKoduLcdGoster+0x1a4>)
 8005d58:	2101      	movs	r1, #1
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	f7fa fd2c 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 8005d60:	4a2e      	ldr	r2, [pc, #184]	; (8005e1c <hataKoduLcdGoster+0x1b8>)
 8005d62:	2104      	movs	r1, #4
 8005d64:	2002      	movs	r0, #2
 8005d66:	f7fa fd27 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005d6a:	4a29      	ldr	r2, [pc, #164]	; (8005e10 <hataKoduLcdGoster+0x1ac>)
 8005d6c:	2107      	movs	r1, #7
 8005d6e:	2002      	movs	r0, #2
 8005d70:	f7fa fd22 	bl	80007b8 <lcd_print>
}
 8005d74:	e040      	b.n	8005df8 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	d11d      	bne.n	8005db8 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005d7c:	4b20      	ldr	r3, [pc, #128]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8005d84:	4a1f      	ldr	r2, [pc, #124]	; (8005e04 <hataKoduLcdGoster+0x1a0>)
 8005d86:	2101      	movs	r1, #1
 8005d88:	2001      	movs	r0, #1
 8005d8a:	f7fa fd15 	bl	80007b8 <lcd_print>
 8005d8e:	e008      	b.n	8005da2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8005d90:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d104      	bne.n	8005da2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005d98:	4a1b      	ldr	r2, [pc, #108]	; (8005e08 <hataKoduLcdGoster+0x1a4>)
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	2001      	movs	r0, #1
 8005d9e:	f7fa fd0b 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 8005da2:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <hataKoduLcdGoster+0x1bc>)
 8005da4:	2105      	movs	r1, #5
 8005da6:	2002      	movs	r0, #2
 8005da8:	f7fa fd06 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005dac:	4a18      	ldr	r2, [pc, #96]	; (8005e10 <hataKoduLcdGoster+0x1ac>)
 8005dae:	2107      	movs	r1, #7
 8005db0:	2002      	movs	r0, #2
 8005db2:	f7fa fd01 	bl	80007b8 <lcd_print>
}
 8005db6:	e01f      	b.n	8005df8 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	d11c      	bne.n	8005df8 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005dbe:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d105      	bne.n	8005dd2 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8005dc6:	4a0f      	ldr	r2, [pc, #60]	; (8005e04 <hataKoduLcdGoster+0x1a0>)
 8005dc8:	2101      	movs	r1, #1
 8005dca:	2001      	movs	r0, #1
 8005dcc:	f7fa fcf4 	bl	80007b8 <lcd_print>
 8005dd0:	e008      	b.n	8005de4 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <hataKoduLcdGoster+0x19c>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d104      	bne.n	8005de4 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005dda:	4a0b      	ldr	r2, [pc, #44]	; (8005e08 <hataKoduLcdGoster+0x1a4>)
 8005ddc:	2101      	movs	r1, #1
 8005dde:	2001      	movs	r0, #1
 8005de0:	f7fa fcea 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 8005de4:	4a0f      	ldr	r2, [pc, #60]	; (8005e24 <hataKoduLcdGoster+0x1c0>)
 8005de6:	2106      	movs	r1, #6
 8005de8:	2002      	movs	r0, #2
 8005dea:	f7fa fce5 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005dee:	4a08      	ldr	r2, [pc, #32]	; (8005e10 <hataKoduLcdGoster+0x1ac>)
 8005df0:	2107      	movs	r1, #7
 8005df2:	2002      	movs	r0, #2
 8005df4:	f7fa fce0 	bl	80007b8 <lcd_print>
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000c6a 	.word	0x20000c6a
 8005e04:	0800e7f8 	.word	0x0800e7f8
 8005e08:	0800e80c 	.word	0x0800e80c
 8005e0c:	0800dc24 	.word	0x0800dc24
 8005e10:	0800e820 	.word	0x0800e820
 8005e14:	0800dc28 	.word	0x0800dc28
 8005e18:	0800dc2c 	.word	0x0800dc2c
 8005e1c:	0800dc30 	.word	0x0800dc30
 8005e20:	0800dc34 	.word	0x0800dc34
 8005e24:	0800dc38 	.word	0x0800dc38

08005e28 <convertAndSendData>:

void convertAndSendData() {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005e2e:	4a14      	ldr	r2, [pc, #80]	; (8005e80 <convertAndSendData+0x58>)
 8005e30:	2101      	movs	r1, #1
 8005e32:	2001      	movs	r0, #1
 8005e34:	f7fa fcc0 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005e38:	4a12      	ldr	r2, [pc, #72]	; (8005e84 <convertAndSendData+0x5c>)
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	2002      	movs	r0, #2
 8005e3e:	f7fa fcbb 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 8005e42:	2300      	movs	r3, #0
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	e00a      	b.n	8005e5e <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005e48:	f002 fb5e 	bl	8008508 <mergeData>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	461a      	mov	r2, r3
 8005e50:	490d      	ldr	r1, [pc, #52]	; (8005e88 <convertAndSendData+0x60>)
 8005e52:	480e      	ldr	r0, [pc, #56]	; (8005e8c <convertAndSendData+0x64>)
 8005e54:	f7fa fa96 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	ddf1      	ble.n	8005e48 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005e64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e68:	f003 fafc 	bl	8009464 <HAL_Delay>
	lcd_clear();
 8005e6c:	f7fa fcd0 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8005e70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e74:	f003 faf6 	bl	8009464 <HAL_Delay>
}
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	0800e82c 	.word	0x0800e82c
 8005e84:	0800e838 	.word	0x0800e838
 8005e88:	20000bf4 	.word	0x20000bf4
 8005e8c:	20000ea4 	.word	0x20000ea4

08005e90 <eepromKontrol>:

void eepromKontrol(int type) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af04      	add	r7, sp, #16
 8005e96:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,145,eepromData,145,3000);
 8005e98:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005e9c:	9302      	str	r3, [sp, #8]
 8005e9e:	2391      	movs	r3, #145	; 0x91
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	4b9c      	ldr	r3, [pc, #624]	; (8006114 <eepromKontrol+0x284>)
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	2391      	movs	r3, #145	; 0x91
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	21a0      	movs	r1, #160	; 0xa0
 8005eac:	489a      	ldr	r0, [pc, #616]	; (8006118 <eepromKontrol+0x288>)
 8005eae:	f004 fc5d 	bl	800a76c <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8005eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005eb6:	f003 fad5 	bl	8009464 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005eba:	4b96      	ldr	r3, [pc, #600]	; (8006114 <eepromKontrol+0x284>)
 8005ebc:	78da      	ldrb	r2, [r3, #3]
 8005ebe:	4b97      	ldr	r3, [pc, #604]	; (800611c <eepromKontrol+0x28c>)
 8005ec0:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005ec2:	4b94      	ldr	r3, [pc, #592]	; (8006114 <eepromKontrol+0x284>)
 8005ec4:	785a      	ldrb	r2, [r3, #1]
 8005ec6:	4b96      	ldr	r3, [pc, #600]	; (8006120 <eepromKontrol+0x290>)
 8005ec8:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005eca:	4b92      	ldr	r3, [pc, #584]	; (8006114 <eepromKontrol+0x284>)
 8005ecc:	789a      	ldrb	r2, [r3, #2]
 8005ece:	4b95      	ldr	r3, [pc, #596]	; (8006124 <eepromKontrol+0x294>)
 8005ed0:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005ed2:	4b90      	ldr	r3, [pc, #576]	; (8006114 <eepromKontrol+0x284>)
 8005ed4:	791a      	ldrb	r2, [r3, #4]
 8005ed6:	4b94      	ldr	r3, [pc, #592]	; (8006128 <eepromKontrol+0x298>)
 8005ed8:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005eda:	4b8e      	ldr	r3, [pc, #568]	; (8006114 <eepromKontrol+0x284>)
 8005edc:	795a      	ldrb	r2, [r3, #5]
 8005ede:	4b93      	ldr	r3, [pc, #588]	; (800612c <eepromKontrol+0x29c>)
 8005ee0:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005ee2:	4b8c      	ldr	r3, [pc, #560]	; (8006114 <eepromKontrol+0x284>)
 8005ee4:	799a      	ldrb	r2, [r3, #6]
 8005ee6:	4b92      	ldr	r3, [pc, #584]	; (8006130 <eepromKontrol+0x2a0>)
 8005ee8:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005eea:	4b8a      	ldr	r3, [pc, #552]	; (8006114 <eepromKontrol+0x284>)
 8005eec:	79da      	ldrb	r2, [r3, #7]
 8005eee:	4b91      	ldr	r3, [pc, #580]	; (8006134 <eepromKontrol+0x2a4>)
 8005ef0:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005ef2:	4b88      	ldr	r3, [pc, #544]	; (8006114 <eepromKontrol+0x284>)
 8005ef4:	7a1a      	ldrb	r2, [r3, #8]
 8005ef6:	4b90      	ldr	r3, [pc, #576]	; (8006138 <eepromKontrol+0x2a8>)
 8005ef8:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005efa:	4b86      	ldr	r3, [pc, #536]	; (8006114 <eepromKontrol+0x284>)
 8005efc:	7a5a      	ldrb	r2, [r3, #9]
 8005efe:	4b8f      	ldr	r3, [pc, #572]	; (800613c <eepromKontrol+0x2ac>)
 8005f00:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005f02:	4b84      	ldr	r3, [pc, #528]	; (8006114 <eepromKontrol+0x284>)
 8005f04:	7a9a      	ldrb	r2, [r3, #10]
 8005f06:	4b8e      	ldr	r3, [pc, #568]	; (8006140 <eepromKontrol+0x2b0>)
 8005f08:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005f0a:	4b82      	ldr	r3, [pc, #520]	; (8006114 <eepromKontrol+0x284>)
 8005f0c:	7ada      	ldrb	r2, [r3, #11]
 8005f0e:	4b8d      	ldr	r3, [pc, #564]	; (8006144 <eepromKontrol+0x2b4>)
 8005f10:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005f12:	4b80      	ldr	r3, [pc, #512]	; (8006114 <eepromKontrol+0x284>)
 8005f14:	7b1a      	ldrb	r2, [r3, #12]
 8005f16:	4b8c      	ldr	r3, [pc, #560]	; (8006148 <eepromKontrol+0x2b8>)
 8005f18:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005f1a:	4b7e      	ldr	r3, [pc, #504]	; (8006114 <eepromKontrol+0x284>)
 8005f1c:	7b5a      	ldrb	r2, [r3, #13]
 8005f1e:	4b8b      	ldr	r3, [pc, #556]	; (800614c <eepromKontrol+0x2bc>)
 8005f20:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005f22:	4b7c      	ldr	r3, [pc, #496]	; (8006114 <eepromKontrol+0x284>)
 8005f24:	7b9a      	ldrb	r2, [r3, #14]
 8005f26:	4b8a      	ldr	r3, [pc, #552]	; (8006150 <eepromKontrol+0x2c0>)
 8005f28:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005f2a:	4b7a      	ldr	r3, [pc, #488]	; (8006114 <eepromKontrol+0x284>)
 8005f2c:	7bda      	ldrb	r2, [r3, #15]
 8005f2e:	4b89      	ldr	r3, [pc, #548]	; (8006154 <eepromKontrol+0x2c4>)
 8005f30:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005f32:	4b78      	ldr	r3, [pc, #480]	; (8006114 <eepromKontrol+0x284>)
 8005f34:	7c1a      	ldrb	r2, [r3, #16]
 8005f36:	4b88      	ldr	r3, [pc, #544]	; (8006158 <eepromKontrol+0x2c8>)
 8005f38:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005f3a:	4b76      	ldr	r3, [pc, #472]	; (8006114 <eepromKontrol+0x284>)
 8005f3c:	7c5a      	ldrb	r2, [r3, #17]
 8005f3e:	4b87      	ldr	r3, [pc, #540]	; (800615c <eepromKontrol+0x2cc>)
 8005f40:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005f42:	4b74      	ldr	r3, [pc, #464]	; (8006114 <eepromKontrol+0x284>)
 8005f44:	7c9a      	ldrb	r2, [r3, #18]
 8005f46:	4b86      	ldr	r3, [pc, #536]	; (8006160 <eepromKontrol+0x2d0>)
 8005f48:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005f4a:	4b72      	ldr	r3, [pc, #456]	; (8006114 <eepromKontrol+0x284>)
 8005f4c:	7cda      	ldrb	r2, [r3, #19]
 8005f4e:	4b85      	ldr	r3, [pc, #532]	; (8006164 <eepromKontrol+0x2d4>)
 8005f50:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005f52:	4b70      	ldr	r3, [pc, #448]	; (8006114 <eepromKontrol+0x284>)
 8005f54:	7d1a      	ldrb	r2, [r3, #20]
 8005f56:	4b84      	ldr	r3, [pc, #528]	; (8006168 <eepromKontrol+0x2d8>)
 8005f58:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005f5a:	4b6e      	ldr	r3, [pc, #440]	; (8006114 <eepromKontrol+0x284>)
 8005f5c:	7d5a      	ldrb	r2, [r3, #21]
 8005f5e:	4b83      	ldr	r3, [pc, #524]	; (800616c <eepromKontrol+0x2dc>)
 8005f60:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005f62:	4b6c      	ldr	r3, [pc, #432]	; (8006114 <eepromKontrol+0x284>)
 8005f64:	7d9a      	ldrb	r2, [r3, #22]
 8005f66:	4b82      	ldr	r3, [pc, #520]	; (8006170 <eepromKontrol+0x2e0>)
 8005f68:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005f6a:	4b6a      	ldr	r3, [pc, #424]	; (8006114 <eepromKontrol+0x284>)
 8005f6c:	7dda      	ldrb	r2, [r3, #23]
 8005f6e:	4b81      	ldr	r3, [pc, #516]	; (8006174 <eepromKontrol+0x2e4>)
 8005f70:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005f72:	4b68      	ldr	r3, [pc, #416]	; (8006114 <eepromKontrol+0x284>)
 8005f74:	7e1a      	ldrb	r2, [r3, #24]
 8005f76:	4b80      	ldr	r3, [pc, #512]	; (8006178 <eepromKontrol+0x2e8>)
 8005f78:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005f7a:	4b66      	ldr	r3, [pc, #408]	; (8006114 <eepromKontrol+0x284>)
 8005f7c:	7e5a      	ldrb	r2, [r3, #25]
 8005f7e:	4b7f      	ldr	r3, [pc, #508]	; (800617c <eepromKontrol+0x2ec>)
 8005f80:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005f82:	4b64      	ldr	r3, [pc, #400]	; (8006114 <eepromKontrol+0x284>)
 8005f84:	7e9a      	ldrb	r2, [r3, #26]
 8005f86:	4b7e      	ldr	r3, [pc, #504]	; (8006180 <eepromKontrol+0x2f0>)
 8005f88:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005f8a:	4b62      	ldr	r3, [pc, #392]	; (8006114 <eepromKontrol+0x284>)
 8005f8c:	7eda      	ldrb	r2, [r3, #27]
 8005f8e:	4b7d      	ldr	r3, [pc, #500]	; (8006184 <eepromKontrol+0x2f4>)
 8005f90:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005f92:	4b60      	ldr	r3, [pc, #384]	; (8006114 <eepromKontrol+0x284>)
 8005f94:	7f1a      	ldrb	r2, [r3, #28]
 8005f96:	4b7c      	ldr	r3, [pc, #496]	; (8006188 <eepromKontrol+0x2f8>)
 8005f98:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005f9a:	4b5e      	ldr	r3, [pc, #376]	; (8006114 <eepromKontrol+0x284>)
 8005f9c:	7f5a      	ldrb	r2, [r3, #29]
 8005f9e:	4b7b      	ldr	r3, [pc, #492]	; (800618c <eepromKontrol+0x2fc>)
 8005fa0:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005fa2:	4b5c      	ldr	r3, [pc, #368]	; (8006114 <eepromKontrol+0x284>)
 8005fa4:	7f9a      	ldrb	r2, [r3, #30]
 8005fa6:	4b7a      	ldr	r3, [pc, #488]	; (8006190 <eepromKontrol+0x300>)
 8005fa8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005faa:	4b5a      	ldr	r3, [pc, #360]	; (8006114 <eepromKontrol+0x284>)
 8005fac:	7fda      	ldrb	r2, [r3, #31]
 8005fae:	4b79      	ldr	r3, [pc, #484]	; (8006194 <eepromKontrol+0x304>)
 8005fb0:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005fb2:	4b58      	ldr	r3, [pc, #352]	; (8006114 <eepromKontrol+0x284>)
 8005fb4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005fb8:	4b77      	ldr	r3, [pc, #476]	; (8006198 <eepromKontrol+0x308>)
 8005fba:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005fbc:	4b55      	ldr	r3, [pc, #340]	; (8006114 <eepromKontrol+0x284>)
 8005fbe:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005fc2:	4b76      	ldr	r3, [pc, #472]	; (800619c <eepromKontrol+0x30c>)
 8005fc4:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8005fc6:	4b53      	ldr	r3, [pc, #332]	; (8006114 <eepromKontrol+0x284>)
 8005fc8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005fcc:	4b74      	ldr	r3, [pc, #464]	; (80061a0 <eepromKontrol+0x310>)
 8005fce:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005fd0:	4b50      	ldr	r3, [pc, #320]	; (8006114 <eepromKontrol+0x284>)
 8005fd2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005fd6:	4b73      	ldr	r3, [pc, #460]	; (80061a4 <eepromKontrol+0x314>)
 8005fd8:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005fda:	4b4e      	ldr	r3, [pc, #312]	; (8006114 <eepromKontrol+0x284>)
 8005fdc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005fe0:	4b71      	ldr	r3, [pc, #452]	; (80061a8 <eepromKontrol+0x318>)
 8005fe2:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005fe4:	4b4b      	ldr	r3, [pc, #300]	; (8006114 <eepromKontrol+0x284>)
 8005fe6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005fea:	4b70      	ldr	r3, [pc, #448]	; (80061ac <eepromKontrol+0x31c>)
 8005fec:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005fee:	4b49      	ldr	r3, [pc, #292]	; (8006114 <eepromKontrol+0x284>)
 8005ff0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005ff4:	4b6e      	ldr	r3, [pc, #440]	; (80061b0 <eepromKontrol+0x320>)
 8005ff6:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005ff8:	4b46      	ldr	r3, [pc, #280]	; (8006114 <eepromKontrol+0x284>)
 8005ffa:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005ffe:	4b6d      	ldr	r3, [pc, #436]	; (80061b4 <eepromKontrol+0x324>)
 8006000:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8006002:	4b44      	ldr	r3, [pc, #272]	; (8006114 <eepromKontrol+0x284>)
 8006004:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006008:	4b6b      	ldr	r3, [pc, #428]	; (80061b8 <eepromKontrol+0x328>)
 800600a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800600c:	4b41      	ldr	r3, [pc, #260]	; (8006114 <eepromKontrol+0x284>)
 800600e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006012:	4b6a      	ldr	r3, [pc, #424]	; (80061bc <eepromKontrol+0x32c>)
 8006014:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8006016:	4b3f      	ldr	r3, [pc, #252]	; (8006114 <eepromKontrol+0x284>)
 8006018:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800601c:	4b68      	ldr	r3, [pc, #416]	; (80061c0 <eepromKontrol+0x330>)
 800601e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8006020:	4b3c      	ldr	r3, [pc, #240]	; (8006114 <eepromKontrol+0x284>)
 8006022:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8006026:	4b67      	ldr	r3, [pc, #412]	; (80061c4 <eepromKontrol+0x334>)
 8006028:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 800602a:	4b3a      	ldr	r3, [pc, #232]	; (8006114 <eepromKontrol+0x284>)
 800602c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006030:	4b65      	ldr	r3, [pc, #404]	; (80061c8 <eepromKontrol+0x338>)
 8006032:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8006034:	4b37      	ldr	r3, [pc, #220]	; (8006114 <eepromKontrol+0x284>)
 8006036:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800603a:	4b64      	ldr	r3, [pc, #400]	; (80061cc <eepromKontrol+0x33c>)
 800603c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 800603e:	4b35      	ldr	r3, [pc, #212]	; (8006114 <eepromKontrol+0x284>)
 8006040:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8006044:	4b62      	ldr	r3, [pc, #392]	; (80061d0 <eepromKontrol+0x340>)
 8006046:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8006048:	4b32      	ldr	r3, [pc, #200]	; (8006114 <eepromKontrol+0x284>)
 800604a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800604e:	4b61      	ldr	r3, [pc, #388]	; (80061d4 <eepromKontrol+0x344>)
 8006050:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8006052:	4b52      	ldr	r3, [pc, #328]	; (800619c <eepromKontrol+0x30c>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe fff4 	bl	8005044 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 800605c:	4b4e      	ldr	r3, [pc, #312]	; (8006198 <eepromKontrol+0x308>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b09      	cmp	r3, #9
 8006062:	d902      	bls.n	800606a <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8006064:	4b4c      	ldr	r3, [pc, #304]	; (8006198 <eepromKontrol+0x308>)
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800606a:	4b4a      	ldr	r3, [pc, #296]	; (8006194 <eepromKontrol+0x304>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b09      	cmp	r3, #9
 8006070:	d902      	bls.n	8006078 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8006072:	4b48      	ldr	r3, [pc, #288]	; (8006194 <eepromKontrol+0x304>)
 8006074:	2200      	movs	r2, #0
 8006076:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8006078:	4b45      	ldr	r3, [pc, #276]	; (8006190 <eepromKontrol+0x300>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b09      	cmp	r3, #9
 800607e:	d902      	bls.n	8006086 <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8006080:	4b43      	ldr	r3, [pc, #268]	; (8006190 <eepromKontrol+0x300>)
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8006086:	4b41      	ldr	r3, [pc, #260]	; (800618c <eepromKontrol+0x2fc>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b09      	cmp	r3, #9
 800608c:	d902      	bls.n	8006094 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 800608e:	4b3f      	ldr	r3, [pc, #252]	; (800618c <eepromKontrol+0x2fc>)
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8006094:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <eepromKontrol+0x2f8>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b09      	cmp	r3, #9
 800609a:	d902      	bls.n	80060a2 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 800609c:	4b3a      	ldr	r3, [pc, #232]	; (8006188 <eepromKontrol+0x2f8>)
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80060a2:	4b1f      	ldr	r3, [pc, #124]	; (8006120 <eepromKontrol+0x290>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d902      	bls.n	80060b0 <eepromKontrol+0x220>
	    calismaSekli=0;
 80060aa:	4b1d      	ldr	r3, [pc, #116]	; (8006120 <eepromKontrol+0x290>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80060b0:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <eepromKontrol+0x294>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d902      	bls.n	80060be <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 80060b8:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <eepromKontrol+0x294>)
 80060ba:	2201      	movs	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80060be:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <eepromKontrol+0x298>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d902      	bls.n	80060cc <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 80060c6:	4b18      	ldr	r3, [pc, #96]	; (8006128 <eepromKontrol+0x298>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80060cc:	4b17      	ldr	r3, [pc, #92]	; (800612c <eepromKontrol+0x29c>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d902      	bls.n	80060da <eepromKontrol+0x24a>
	    altLimit=1;
 80060d4:	4b15      	ldr	r3, [pc, #84]	; (800612c <eepromKontrol+0x29c>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 80060da:	4b15      	ldr	r3, [pc, #84]	; (8006130 <eepromKontrol+0x2a0>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d902      	bls.n	80060e8 <eepromKontrol+0x258>
	    basincSalteri=1;
 80060e2:	4b13      	ldr	r3, [pc, #76]	; (8006130 <eepromKontrol+0x2a0>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 80060e8:	4b12      	ldr	r3, [pc, #72]	; (8006134 <eepromKontrol+0x2a4>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d902      	bls.n	80060f6 <eepromKontrol+0x266>
	    kapiSecimleri=3;
 80060f0:	4b10      	ldr	r3, [pc, #64]	; (8006134 <eepromKontrol+0x2a4>)
 80060f2:	2203      	movs	r2, #3
 80060f4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 80060f6:	4b2d      	ldr	r3, [pc, #180]	; (80061ac <eepromKontrol+0x31c>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d902      	bls.n	8006104 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 80060fe:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <eepromKontrol+0x31c>)
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8006104:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <eepromKontrol+0x2a8>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d965      	bls.n	80061d8 <eepromKontrol+0x348>
	    kapi1Tip=1;
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <eepromKontrol+0x2a8>)
 800610e:	2201      	movs	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e061      	b.n	80061d8 <eepromKontrol+0x348>
 8006114:	20000b38 	.word	0x20000b38
 8006118:	20000e08 	.word	0x20000e08
 800611c:	20000bc9 	.word	0x20000bc9
 8006120:	20000c4a 	.word	0x20000c4a
 8006124:	20000c4d 	.word	0x20000c4d
 8006128:	20000c4e 	.word	0x20000c4e
 800612c:	20000c4f 	.word	0x20000c4f
 8006130:	20000c50 	.word	0x20000c50
 8006134:	20000c51 	.word	0x20000c51
 8006138:	20000c52 	.word	0x20000c52
 800613c:	20000c62 	.word	0x20000c62
 8006140:	20000c53 	.word	0x20000c53
 8006144:	20000c63 	.word	0x20000c63
 8006148:	20000c54 	.word	0x20000c54
 800614c:	20000c64 	.word	0x20000c64
 8006150:	20000c57 	.word	0x20000c57
 8006154:	20000c58 	.word	0x20000c58
 8006158:	20000c59 	.word	0x20000c59
 800615c:	20000c5a 	.word	0x20000c5a
 8006160:	20000c5b 	.word	0x20000c5b
 8006164:	20000c5c 	.word	0x20000c5c
 8006168:	20000c5d 	.word	0x20000c5d
 800616c:	20000c5e 	.word	0x20000c5e
 8006170:	20000c5f 	.word	0x20000c5f
 8006174:	20000c60 	.word	0x20000c60
 8006178:	20000c61 	.word	0x20000c61
 800617c:	20000c65 	.word	0x20000c65
 8006180:	20000c67 	.word	0x20000c67
 8006184:	20000c45 	.word	0x20000c45
 8006188:	20000c46 	.word	0x20000c46
 800618c:	20000c47 	.word	0x20000c47
 8006190:	200009c2 	.word	0x200009c2
 8006194:	200009c3 	.word	0x200009c3
 8006198:	20000c48 	.word	0x20000c48
 800619c:	20000c6a 	.word	0x20000c6a
 80061a0:	20000c68 	.word	0x20000c68
 80061a4:	20000c56 	.word	0x20000c56
 80061a8:	20000c69 	.word	0x20000c69
 80061ac:	20000c55 	.word	0x20000c55
 80061b0:	20000c6b 	.word	0x20000c6b
 80061b4:	20000c6c 	.word	0x20000c6c
 80061b8:	20000c6d 	.word	0x20000c6d
 80061bc:	20000c6e 	.word	0x20000c6e
 80061c0:	20000c6f 	.word	0x20000c6f
 80061c4:	20000c70 	.word	0x20000c70
 80061c8:	20000c71 	.word	0x20000c71
 80061cc:	20000c72 	.word	0x20000c72
 80061d0:	20000c73 	.word	0x20000c73
 80061d4:	20000c74 	.word	0x20000c74
	}

	if(kapi1AcSure>5) {
 80061d8:	4b55      	ldr	r3, [pc, #340]	; (8006330 <eepromKontrol+0x4a0>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b05      	cmp	r3, #5
 80061de:	d902      	bls.n	80061e6 <eepromKontrol+0x356>
	    kapi1AcSure=5;
 80061e0:	4b53      	ldr	r3, [pc, #332]	; (8006330 <eepromKontrol+0x4a0>)
 80061e2:	2205      	movs	r2, #5
 80061e4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 80061e6:	4b53      	ldr	r3, [pc, #332]	; (8006334 <eepromKontrol+0x4a4>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d902      	bls.n	80061f4 <eepromKontrol+0x364>
	    kapi2Tip=1;
 80061ee:	4b51      	ldr	r3, [pc, #324]	; (8006334 <eepromKontrol+0x4a4>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 80061f4:	4b50      	ldr	r3, [pc, #320]	; (8006338 <eepromKontrol+0x4a8>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b05      	cmp	r3, #5
 80061fa:	d902      	bls.n	8006202 <eepromKontrol+0x372>
	    kapi2AcSure=5;
 80061fc:	4b4e      	ldr	r3, [pc, #312]	; (8006338 <eepromKontrol+0x4a8>)
 80061fe:	2205      	movs	r2, #5
 8006200:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8006202:	4b4e      	ldr	r3, [pc, #312]	; (800633c <eepromKontrol+0x4ac>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d902      	bls.n	8006210 <eepromKontrol+0x380>
	    kapitablaTip=1;
 800620a:	4b4c      	ldr	r3, [pc, #304]	; (800633c <eepromKontrol+0x4ac>)
 800620c:	2201      	movs	r2, #1
 800620e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8006210:	4b4b      	ldr	r3, [pc, #300]	; (8006340 <eepromKontrol+0x4b0>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d902      	bls.n	800621e <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8006218:	4b49      	ldr	r3, [pc, #292]	; (8006340 <eepromKontrol+0x4b0>)
 800621a:	2202      	movs	r2, #2
 800621c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 800621e:	4b49      	ldr	r3, [pc, #292]	; (8006344 <eepromKontrol+0x4b4>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b05      	cmp	r3, #5
 8006224:	d902      	bls.n	800622c <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8006226:	4b47      	ldr	r3, [pc, #284]	; (8006344 <eepromKontrol+0x4b4>)
 8006228:	2205      	movs	r2, #5
 800622a:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 800622c:	4b46      	ldr	r3, [pc, #280]	; (8006348 <eepromKontrol+0x4b8>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d902      	bls.n	800623a <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8006234:	4b44      	ldr	r3, [pc, #272]	; (8006348 <eepromKontrol+0x4b8>)
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 800623a:	4b44      	ldr	r3, [pc, #272]	; (800634c <eepromKontrol+0x4bc>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d902      	bls.n	8006248 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8006242:	4b42      	ldr	r3, [pc, #264]	; (800634c <eepromKontrol+0x4bc>)
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8006248:	4b41      	ldr	r3, [pc, #260]	; (8006350 <eepromKontrol+0x4c0>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d902      	bls.n	8006256 <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8006250:	4b3f      	ldr	r3, [pc, #252]	; (8006350 <eepromKontrol+0x4c0>)
 8006252:	2201      	movs	r2, #1
 8006254:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8006256:	4b3f      	ldr	r3, [pc, #252]	; (8006354 <eepromKontrol+0x4c4>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d902      	bls.n	8006264 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 800625e:	4b3d      	ldr	r3, [pc, #244]	; (8006354 <eepromKontrol+0x4c4>)
 8006260:	2201      	movs	r2, #1
 8006262:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8006264:	4b3c      	ldr	r3, [pc, #240]	; (8006358 <eepromKontrol+0x4c8>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d902      	bls.n	8006272 <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 800626c:	4b3a      	ldr	r3, [pc, #232]	; (8006358 <eepromKontrol+0x4c8>)
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8006272:	4b3a      	ldr	r3, [pc, #232]	; (800635c <eepromKontrol+0x4cc>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d902      	bls.n	8006280 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 800627a:	4b38      	ldr	r3, [pc, #224]	; (800635c <eepromKontrol+0x4cc>)
 800627c:	2200      	movs	r2, #0
 800627e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8006280:	4b37      	ldr	r3, [pc, #220]	; (8006360 <eepromKontrol+0x4d0>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b05      	cmp	r3, #5
 8006286:	d902      	bls.n	800628e <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8006288:	4b35      	ldr	r3, [pc, #212]	; (8006360 <eepromKontrol+0x4d0>)
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 800628e:	4b35      	ldr	r3, [pc, #212]	; (8006364 <eepromKontrol+0x4d4>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b05      	cmp	r3, #5
 8006294:	d902      	bls.n	800629c <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8006296:	4b33      	ldr	r3, [pc, #204]	; (8006364 <eepromKontrol+0x4d4>)
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 800629c:	4b32      	ldr	r3, [pc, #200]	; (8006368 <eepromKontrol+0x4d8>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b05      	cmp	r3, #5
 80062a2:	d902      	bls.n	80062aa <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 80062a4:	4b30      	ldr	r3, [pc, #192]	; (8006368 <eepromKontrol+0x4d8>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80062aa:	4b30      	ldr	r3, [pc, #192]	; (800636c <eepromKontrol+0x4dc>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	d902      	bls.n	80062b8 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 80062b2:	4b2e      	ldr	r3, [pc, #184]	; (800636c <eepromKontrol+0x4dc>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80062b8:	4b2d      	ldr	r3, [pc, #180]	; (8006370 <eepromKontrol+0x4e0>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2bb4      	cmp	r3, #180	; 0xb4
 80062be:	d902      	bls.n	80062c6 <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 80062c0:	4b2b      	ldr	r3, [pc, #172]	; (8006370 <eepromKontrol+0x4e0>)
 80062c2:	223c      	movs	r2, #60	; 0x3c
 80062c4:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80062c6:	4b2b      	ldr	r3, [pc, #172]	; (8006374 <eepromKontrol+0x4e4>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d902      	bls.n	80062d4 <eepromKontrol+0x444>
	    buzzer=0;
 80062ce:	4b29      	ldr	r3, [pc, #164]	; (8006374 <eepromKontrol+0x4e4>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80062d4:	4b28      	ldr	r3, [pc, #160]	; (8006378 <eepromKontrol+0x4e8>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d902      	bls.n	80062e2 <eepromKontrol+0x452>
	    demoMode=0;
 80062dc:	4b26      	ldr	r3, [pc, #152]	; (8006378 <eepromKontrol+0x4e8>)
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 80062e2:	4b26      	ldr	r3, [pc, #152]	; (800637c <eepromKontrol+0x4ec>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d902      	bls.n	80062f0 <eepromKontrol+0x460>
	    calismaSayModu=0;
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <eepromKontrol+0x4ec>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 80062f0:	4b23      	ldr	r3, [pc, #140]	; (8006380 <eepromKontrol+0x4f0>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d902      	bls.n	80062fe <eepromKontrol+0x46e>
	    dilSecim=0;
 80062f8:	4b21      	ldr	r3, [pc, #132]	; (8006380 <eepromKontrol+0x4f0>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80062fe:	4b21      	ldr	r3, [pc, #132]	; (8006384 <eepromKontrol+0x4f4>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d902      	bls.n	800630c <eepromKontrol+0x47c>
		iotMode=0;
 8006306:	4b1f      	ldr	r3, [pc, #124]	; (8006384 <eepromKontrol+0x4f4>)
 8006308:	2200      	movs	r2, #0
 800630a:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 800630c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006310:	f003 f8a8 	bl	8009464 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8006314:	4b1b      	ldr	r3, [pc, #108]	; (8006384 <eepromKontrol+0x4f4>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d104      	bne.n	8006326 <eepromKontrol+0x496>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <eepromKontrol+0x496>
		convertAndSendData();
 8006322:	f7ff fd81 	bl	8005e28 <convertAndSendData>
	}
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20000c62 	.word	0x20000c62
 8006334:	20000c53 	.word	0x20000c53
 8006338:	20000c63 	.word	0x20000c63
 800633c:	20000c54 	.word	0x20000c54
 8006340:	20000c56 	.word	0x20000c56
 8006344:	20000c64 	.word	0x20000c64
 8006348:	20000c57 	.word	0x20000c57
 800634c:	20000c58 	.word	0x20000c58
 8006350:	20000c59 	.word	0x20000c59
 8006354:	20000c5a 	.word	0x20000c5a
 8006358:	20000c5b 	.word	0x20000c5b
 800635c:	20000c5c 	.word	0x20000c5c
 8006360:	20000c5d 	.word	0x20000c5d
 8006364:	20000c5e 	.word	0x20000c5e
 8006368:	20000c5f 	.word	0x20000c5f
 800636c:	20000c60 	.word	0x20000c60
 8006370:	20000c61 	.word	0x20000c61
 8006374:	20000c65 	.word	0x20000c65
 8006378:	20000c67 	.word	0x20000c67
 800637c:	20000c69 	.word	0x20000c69
 8006380:	20000c6a 	.word	0x20000c6a
 8006384:	20000c68 	.word	0x20000c68

08006388 <eepromKontrol4IoT>:

void eepromKontrol4IoT() {
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
	takeCharFromEEPROM4ID(&hi2c1);
 800638c:	480e      	ldr	r0, [pc, #56]	; (80063c8 <eepromKontrol4IoT+0x40>)
 800638e:	f7fb fa6d 	bl	800186c <takeCharFromEEPROM4ID>
	HAL_Delay(500);
 8006392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006396:	f003 f865 	bl	8009464 <HAL_Delay>
	if(iotMode == 1) {
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <eepromKontrol4IoT+0x44>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d10f      	bne.n	80063c2 <eepromKontrol4IoT+0x3a>
		takeCharFromEEPROM4Wifi(&hi2c1, 1);
 80063a2:	2101      	movs	r1, #1
 80063a4:	4808      	ldr	r0, [pc, #32]	; (80063c8 <eepromKontrol4IoT+0x40>)
 80063a6:	f7fb fa81 	bl	80018ac <takeCharFromEEPROM4Wifi>
		HAL_Delay(500);
 80063aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063ae:	f003 f859 	bl	8009464 <HAL_Delay>
		takeCharFromEEPROM4Wifi(&hi2c1, 2);
 80063b2:	2102      	movs	r1, #2
 80063b4:	4804      	ldr	r0, [pc, #16]	; (80063c8 <eepromKontrol4IoT+0x40>)
 80063b6:	f7fb fa79 	bl	80018ac <takeCharFromEEPROM4Wifi>
		HAL_Delay(500);
 80063ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063be:	f003 f851 	bl	8009464 <HAL_Delay>
	}
}
 80063c2:	bf00      	nop
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000e08 	.word	0x20000e08
 80063cc:	20000c68 	.word	0x20000c68

080063d0 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 80063d0:	b590      	push	{r4, r7, lr}
 80063d2:	b089      	sub	sp, #36	; 0x24
 80063d4:	af04      	add	r7, sp, #16
 80063d6:	4603      	mov	r3, r0
 80063d8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80063da:	4b26      	ldr	r3, [pc, #152]	; (8006474 <hata2EEPROM+0xa4>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	1e5a      	subs	r2, r3, #1
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <hata2EEPROM+0xa8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4413      	add	r3, r2
 80063e6:	4a25      	ldr	r2, [pc, #148]	; (800647c <hata2EEPROM+0xac>)
 80063e8:	5cd3      	ldrb	r3, [r2, r3]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80063ee:	f000 f849 	bl	8006484 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80063f2:	e000      	b.n	80063f6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80063f4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80063f6:	2300      	movs	r3, #0
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	e012      	b.n	8006422 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80063fc:	4b1e      	ldr	r3, [pc, #120]	; (8006478 <hata2EEPROM+0xa8>)
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	4a1d      	ldr	r2, [pc, #116]	; (800647c <hata2EEPROM+0xac>)
 8006406:	5cd3      	ldrb	r3, [r2, r3]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d107      	bne.n	800641c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 800640c:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <hata2EEPROM+0xa8>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	4919      	ldr	r1, [pc, #100]	; (800647c <hata2EEPROM+0xac>)
 8006416:	79fa      	ldrb	r2, [r7, #7]
 8006418:	54ca      	strb	r2, [r1, r3]
					break;
 800641a:	e007      	b.n	800642c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3301      	adds	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <hata2EEPROM+0xa4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	429a      	cmp	r2, r3
 800642a:	dbe7      	blt.n	80063fc <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 800642c:	4b12      	ldr	r3, [pc, #72]	; (8006478 <hata2EEPROM+0xa8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	b299      	uxth	r1, r3
 8006432:	4b10      	ldr	r3, [pc, #64]	; (8006474 <hata2EEPROM+0xa4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	b298      	uxth	r0, r3
 8006438:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <hata2EEPROM+0xa8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a0f      	ldr	r2, [pc, #60]	; (800647c <hata2EEPROM+0xac>)
 800643e:	4413      	add	r3, r2
 8006440:	4a0c      	ldr	r2, [pc, #48]	; (8006474 <hata2EEPROM+0xa4>)
 8006442:	6812      	ldr	r2, [r2, #0]
 8006444:	b292      	uxth	r2, r2
 8006446:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800644a:	9402      	str	r4, [sp, #8]
 800644c:	9201      	str	r2, [sp, #4]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	4603      	mov	r3, r0
 8006452:	460a      	mov	r2, r1
 8006454:	21a0      	movs	r1, #160	; 0xa0
 8006456:	480a      	ldr	r0, [pc, #40]	; (8006480 <hata2EEPROM+0xb0>)
 8006458:	f004 f88e 	bl	800a578 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800645c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006460:	f003 f800 	bl	8009464 <HAL_Delay>
	eepromKontrol(1);
 8006464:	2001      	movs	r0, #1
 8006466:	f7ff fd13 	bl	8005e90 <eepromKontrol>
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	bd90      	pop	{r4, r7, pc}
 8006472:	bf00      	nop
 8006474:	20000938 	.word	0x20000938
 8006478:	2000093c 	.word	0x2000093c
 800647c:	20000b38 	.word	0x20000b38
 8006480:	20000e08 	.word	0x20000e08

08006484 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800648a:	2300      	movs	r3, #0
 800648c:	607b      	str	r3, [r7, #4]
 800648e:	e009      	b.n	80064a4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8006490:	4a0a      	ldr	r2, [pc, #40]	; (80064bc <eepromDataFillWithEmpty+0x38>)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006498:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <eepromDataFillWithEmpty+0x3c>)
 800649a:	2100      	movs	r1, #0
 800649c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3301      	adds	r3, #1
 80064a2:	607b      	str	r3, [r7, #4]
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <eepromDataFillWithEmpty+0x40>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	dbf0      	blt.n	8006490 <eepromDataFillWithEmpty+0xc>
	}
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	20000910 	.word	0x20000910
 80064c0:	20000b38 	.word	0x20000b38
 80064c4:	20000938 	.word	0x20000938

080064c8 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
	timer1=millis;
 80064cc:	4b47      	ldr	r3, [pc, #284]	; (80065ec <bekle+0x124>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a47      	ldr	r2, [pc, #284]	; (80065f0 <bekle+0x128>)
 80064d2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80064d4:	e002      	b.n	80064dc <bekle+0x14>
    	butonKontrol = 1;
 80064d6:	4b47      	ldr	r3, [pc, #284]	; (80065f4 <bekle+0x12c>)
 80064d8:	2201      	movs	r2, #1
 80064da:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80064dc:	2101      	movs	r1, #1
 80064de:	4846      	ldr	r0, [pc, #280]	; (80065f8 <bekle+0x130>)
 80064e0:	f003 fd90 	bl	800a004 <HAL_GPIO_ReadPin>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d109      	bne.n	80064fe <bekle+0x36>
 80064ea:	4b40      	ldr	r3, [pc, #256]	; (80065ec <bekle+0x124>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4b40      	ldr	r3, [pc, #256]	; (80065f0 <bekle+0x128>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d0ef      	beq.n	80064d6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80064f6:	e002      	b.n	80064fe <bekle+0x36>
    	butonKontrol = 1;
 80064f8:	4b3e      	ldr	r3, [pc, #248]	; (80065f4 <bekle+0x12c>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80064fe:	2108      	movs	r1, #8
 8006500:	483e      	ldr	r0, [pc, #248]	; (80065fc <bekle+0x134>)
 8006502:	f003 fd7f 	bl	800a004 <HAL_GPIO_ReadPin>
 8006506:	4603      	mov	r3, r0
 8006508:	2b01      	cmp	r3, #1
 800650a:	d109      	bne.n	8006520 <bekle+0x58>
 800650c:	4b37      	ldr	r3, [pc, #220]	; (80065ec <bekle+0x124>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b37      	ldr	r3, [pc, #220]	; (80065f0 <bekle+0x128>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d0ef      	beq.n	80064f8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006518:	e002      	b.n	8006520 <bekle+0x58>
    	butonKontrol = 1;
 800651a:	4b36      	ldr	r3, [pc, #216]	; (80065f4 <bekle+0x12c>)
 800651c:	2201      	movs	r2, #1
 800651e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006520:	2102      	movs	r1, #2
 8006522:	4835      	ldr	r0, [pc, #212]	; (80065f8 <bekle+0x130>)
 8006524:	f003 fd6e 	bl	800a004 <HAL_GPIO_ReadPin>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d109      	bne.n	8006542 <bekle+0x7a>
 800652e:	4b2f      	ldr	r3, [pc, #188]	; (80065ec <bekle+0x124>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b2f      	ldr	r3, [pc, #188]	; (80065f0 <bekle+0x128>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d0ef      	beq.n	800651a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800653a:	e002      	b.n	8006542 <bekle+0x7a>
    	butonKontrol = 1;
 800653c:	4b2d      	ldr	r3, [pc, #180]	; (80065f4 <bekle+0x12c>)
 800653e:	2201      	movs	r2, #1
 8006540:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006542:	2104      	movs	r1, #4
 8006544:	482c      	ldr	r0, [pc, #176]	; (80065f8 <bekle+0x130>)
 8006546:	f003 fd5d 	bl	800a004 <HAL_GPIO_ReadPin>
 800654a:	4603      	mov	r3, r0
 800654c:	2b01      	cmp	r3, #1
 800654e:	d109      	bne.n	8006564 <bekle+0x9c>
 8006550:	4b26      	ldr	r3, [pc, #152]	; (80065ec <bekle+0x124>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4b26      	ldr	r3, [pc, #152]	; (80065f0 <bekle+0x128>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d0ef      	beq.n	800653c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800655c:	e002      	b.n	8006564 <bekle+0x9c>
    	butonKontrol = 1;
 800655e:	4b25      	ldr	r3, [pc, #148]	; (80065f4 <bekle+0x12c>)
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006564:	2108      	movs	r1, #8
 8006566:	4824      	ldr	r0, [pc, #144]	; (80065f8 <bekle+0x130>)
 8006568:	f003 fd4c 	bl	800a004 <HAL_GPIO_ReadPin>
 800656c:	4603      	mov	r3, r0
 800656e:	2b01      	cmp	r3, #1
 8006570:	d109      	bne.n	8006586 <bekle+0xbe>
 8006572:	4b1e      	ldr	r3, [pc, #120]	; (80065ec <bekle+0x124>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b1e      	ldr	r3, [pc, #120]	; (80065f0 <bekle+0x128>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d0ef      	beq.n	800655e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800657e:	e002      	b.n	8006586 <bekle+0xbe>
    	butonKontrol = 1;
 8006580:	4b1c      	ldr	r3, [pc, #112]	; (80065f4 <bekle+0x12c>)
 8006582:	2201      	movs	r2, #1
 8006584:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006586:	2180      	movs	r1, #128	; 0x80
 8006588:	481c      	ldr	r0, [pc, #112]	; (80065fc <bekle+0x134>)
 800658a:	f003 fd3b 	bl	800a004 <HAL_GPIO_ReadPin>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <bekle+0xe0>
 8006594:	4b15      	ldr	r3, [pc, #84]	; (80065ec <bekle+0x124>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <bekle+0x128>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d0ef      	beq.n	8006580 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80065a0:	e002      	b.n	80065a8 <bekle+0xe0>
    	butonKontrol = 1;
 80065a2:	4b14      	ldr	r3, [pc, #80]	; (80065f4 <bekle+0x12c>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80065a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065ac:	4813      	ldr	r0, [pc, #76]	; (80065fc <bekle+0x134>)
 80065ae:	f003 fd29 	bl	800a004 <HAL_GPIO_ReadPin>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <bekle+0x104>
 80065b8:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <bekle+0x124>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <bekle+0x128>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d0ee      	beq.n	80065a2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80065c4:	e002      	b.n	80065cc <bekle+0x104>
    	butonKontrol = 1;
 80065c6:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <bekle+0x12c>)
 80065c8:	2201      	movs	r2, #1
 80065ca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80065cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065d0:	480a      	ldr	r0, [pc, #40]	; (80065fc <bekle+0x134>)
 80065d2:	f003 fd17 	bl	800a004 <HAL_GPIO_ReadPin>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <bekle+0x120>
 80065dc:	4b03      	ldr	r3, [pc, #12]	; (80065ec <bekle+0x124>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4b03      	ldr	r3, [pc, #12]	; (80065f0 <bekle+0x128>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d0ee      	beq.n	80065c6 <bekle+0xfe>
    }

}
 80065e8:	bf00      	nop
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20000bd4 	.word	0x20000bd4
 80065f0:	20000bdc 	.word	0x20000bdc
 80065f4:	20000c78 	.word	0x20000c78
 80065f8:	40010800 	.word	0x40010800
 80065fc:	40011000 	.word	0x40011000

08006600 <i2cTest>:

void i2cTest() {
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8006606:	463b      	mov	r3, r7
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	605a      	str	r2, [r3, #4]
 800660e:	609a      	str	r2, [r3, #8]
 8006610:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8006612:	4b50      	ldr	r3, [pc, #320]	; (8006754 <i2cTest+0x154>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4b4e      	ldr	r3, [pc, #312]	; (8006754 <i2cTest+0x154>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8006622:	484c      	ldr	r0, [pc, #304]	; (8006754 <i2cTest+0x154>)
 8006624:	f003 fe7a 	bl	800a31c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006628:	23c0      	movs	r3, #192	; 0xc0
 800662a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 800662c:	2311      	movs	r3, #17
 800662e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006630:	2301      	movs	r3, #1
 8006632:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006634:	2303      	movs	r3, #3
 8006636:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006638:	463b      	mov	r3, r7
 800663a:	4619      	mov	r1, r3
 800663c:	4846      	ldr	r0, [pc, #280]	; (8006758 <i2cTest+0x158>)
 800663e:	f003 fa81 	bl	8009b44 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006642:	2201      	movs	r2, #1
 8006644:	2140      	movs	r1, #64	; 0x40
 8006646:	4844      	ldr	r0, [pc, #272]	; (8006758 <i2cTest+0x158>)
 8006648:	f003 fcf3 	bl	800a032 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800664c:	2201      	movs	r2, #1
 800664e:	2180      	movs	r1, #128	; 0x80
 8006650:	4841      	ldr	r0, [pc, #260]	; (8006758 <i2cTest+0x158>)
 8006652:	f003 fcee 	bl	800a032 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8006656:	200a      	movs	r0, #10
 8006658:	f002 ff04 	bl	8009464 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800665c:	bf00      	nop
 800665e:	2140      	movs	r1, #64	; 0x40
 8006660:	483d      	ldr	r0, [pc, #244]	; (8006758 <i2cTest+0x158>)
 8006662:	f003 fccf 	bl	800a004 <HAL_GPIO_ReadPin>
 8006666:	4603      	mov	r3, r0
 8006668:	2b01      	cmp	r3, #1
 800666a:	d006      	beq.n	800667a <i2cTest+0x7a>
 800666c:	2180      	movs	r1, #128	; 0x80
 800666e:	483a      	ldr	r0, [pc, #232]	; (8006758 <i2cTest+0x158>)
 8006670:	f003 fcc8 	bl	800a004 <HAL_GPIO_ReadPin>
 8006674:	4603      	mov	r3, r0
 8006676:	2b01      	cmp	r3, #1
 8006678:	d1f1      	bne.n	800665e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800667a:	2200      	movs	r2, #0
 800667c:	2180      	movs	r1, #128	; 0x80
 800667e:	4836      	ldr	r0, [pc, #216]	; (8006758 <i2cTest+0x158>)
 8006680:	f003 fcd7 	bl	800a032 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8006684:	200a      	movs	r0, #10
 8006686:	f002 feed 	bl	8009464 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800668a:	bf00      	nop
 800668c:	2180      	movs	r1, #128	; 0x80
 800668e:	4832      	ldr	r0, [pc, #200]	; (8006758 <i2cTest+0x158>)
 8006690:	f003 fcb8 	bl	800a004 <HAL_GPIO_ReadPin>
 8006694:	4603      	mov	r3, r0
 8006696:	2b01      	cmp	r3, #1
 8006698:	d0f8      	beq.n	800668c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800669a:	2200      	movs	r2, #0
 800669c:	2140      	movs	r1, #64	; 0x40
 800669e:	482e      	ldr	r0, [pc, #184]	; (8006758 <i2cTest+0x158>)
 80066a0:	f003 fcc7 	bl	800a032 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80066a4:	200a      	movs	r0, #10
 80066a6:	f002 fedd 	bl	8009464 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80066aa:	bf00      	nop
 80066ac:	2140      	movs	r1, #64	; 0x40
 80066ae:	482a      	ldr	r0, [pc, #168]	; (8006758 <i2cTest+0x158>)
 80066b0:	f003 fca8 	bl	800a004 <HAL_GPIO_ReadPin>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d0f8      	beq.n	80066ac <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80066ba:	2201      	movs	r2, #1
 80066bc:	2140      	movs	r1, #64	; 0x40
 80066be:	4826      	ldr	r0, [pc, #152]	; (8006758 <i2cTest+0x158>)
 80066c0:	f003 fcb7 	bl	800a032 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80066c4:	200a      	movs	r0, #10
 80066c6:	f002 fecd 	bl	8009464 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80066ca:	bf00      	nop
 80066cc:	2140      	movs	r1, #64	; 0x40
 80066ce:	4822      	ldr	r0, [pc, #136]	; (8006758 <i2cTest+0x158>)
 80066d0:	f003 fc98 	bl	800a004 <HAL_GPIO_ReadPin>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d1f8      	bne.n	80066cc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80066da:	2201      	movs	r2, #1
 80066dc:	2180      	movs	r1, #128	; 0x80
 80066de:	481e      	ldr	r0, [pc, #120]	; (8006758 <i2cTest+0x158>)
 80066e0:	f003 fca7 	bl	800a032 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80066e4:	200a      	movs	r0, #10
 80066e6:	f002 febd 	bl	8009464 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80066ea:	bf00      	nop
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	481a      	ldr	r0, [pc, #104]	; (8006758 <i2cTest+0x158>)
 80066f0:	f003 fc88 	bl	800a004 <HAL_GPIO_ReadPin>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d1f8      	bne.n	80066ec <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80066fa:	23c0      	movs	r3, #192	; 0xc0
 80066fc:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80066fe:	2312      	movs	r3, #18
 8006700:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006702:	2301      	movs	r3, #1
 8006704:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006706:	2303      	movs	r3, #3
 8006708:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800670a:	463b      	mov	r3, r7
 800670c:	4619      	mov	r1, r3
 800670e:	4812      	ldr	r0, [pc, #72]	; (8006758 <i2cTest+0x158>)
 8006710:	f003 fa18 	bl	8009b44 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8006714:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <i2cTest+0x154>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <i2cTest+0x154>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006722:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8006724:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <i2cTest+0x154>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <i2cTest+0x154>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006732:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006734:	4b07      	ldr	r3, [pc, #28]	; (8006754 <i2cTest+0x154>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <i2cTest+0x154>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0201 	orr.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006744:	4803      	ldr	r0, [pc, #12]	; (8006754 <i2cTest+0x154>)
 8006746:	f003 fca5 	bl	800a094 <HAL_I2C_Init>
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000e08 	.word	0x20000e08
 8006758:	40010c00 	.word	0x40010c00

0800675c <checkLCDBacklight>:

void checkLCDBacklight() {
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <checkLCDBacklight+0x34>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <checkLCDBacklight+0x38>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	1ad2      	subs	r2, r2, r3
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <checkLCDBacklight+0x3c>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	4619      	mov	r1, r3
 8006770:	460b      	mov	r3, r1
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	429a      	cmp	r2, r3
 800677a:	d303      	bcc.n	8006784 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 800677c:	2000      	movs	r0, #0
 800677e:	f7fa f867 	bl	8000850 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8006782:	e002      	b.n	800678a <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8006784:	2001      	movs	r0, #1
 8006786:	f7fa f863 	bl	8000850 <lcd_backlight>
}
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000bd4 	.word	0x20000bd4
 8006794:	20000bf0 	.word	0x20000bf0
 8006798:	20000940 	.word	0x20000940

0800679c <checkBasincSalteri>:

void checkBasincSalteri() {
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80067a0:	4b13      	ldr	r3, [pc, #76]	; (80067f0 <checkBasincSalteri+0x54>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <checkBasincSalteri+0x12>
		basincVar=1;
 80067a8:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <checkBasincSalteri+0x58>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80067ae:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <checkBasincSalteri+0x54>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d119      	bne.n	80067ea <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80067b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067ba:	480f      	ldr	r0, [pc, #60]	; (80067f8 <checkBasincSalteri+0x5c>)
 80067bc:	f003 fc22 	bl	800a004 <HAL_GPIO_ReadPin>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80067c6:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <checkBasincSalteri+0x60>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <checkBasincSalteri+0x64>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d90a      	bls.n	80067ea <checkBasincSalteri+0x4e>
				basincVar=1;
 80067d4:	4b07      	ldr	r3, [pc, #28]	; (80067f4 <checkBasincSalteri+0x58>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80067da:	e006      	b.n	80067ea <checkBasincSalteri+0x4e>
			timer5=millis;
 80067dc:	4b07      	ldr	r3, [pc, #28]	; (80067fc <checkBasincSalteri+0x60>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a07      	ldr	r2, [pc, #28]	; (8006800 <checkBasincSalteri+0x64>)
 80067e2:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80067e4:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <checkBasincSalteri+0x58>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	701a      	strb	r2, [r3, #0]
}
 80067ea:	bf00      	nop
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000c50 	.word	0x20000c50
 80067f4:	20000c4c 	.word	0x20000c4c
 80067f8:	40011000 	.word	0x40011000
 80067fc:	20000bd4 	.word	0x20000bd4
 8006800:	20000bec 	.word	0x20000bec

08006804 <checkBasGonder>:

void checkBasGonder() {
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006808:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <checkBasGonder+0x74>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d10b      	bne.n	8006828 <checkBasGonder+0x24>
 8006810:	4b1a      	ldr	r3, [pc, #104]	; (800687c <checkBasGonder+0x78>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <checkBasGonder+0x24>
 8006818:	4b19      	ldr	r3, [pc, #100]	; (8006880 <checkBasGonder+0x7c>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d103      	bne.n	8006828 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8006820:	4b18      	ldr	r3, [pc, #96]	; (8006884 <checkBasGonder+0x80>)
 8006822:	2201      	movs	r2, #1
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	e009      	b.n	800683c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006828:	4b14      	ldr	r3, [pc, #80]	; (800687c <checkBasGonder+0x78>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f083 0301 	eor.w	r3, r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8006836:	4b13      	ldr	r3, [pc, #76]	; (8006884 <checkBasGonder+0x80>)
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800683c:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <checkBasGonder+0x74>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d10b      	bne.n	800685c <checkBasGonder+0x58>
 8006844:	4b10      	ldr	r3, [pc, #64]	; (8006888 <checkBasGonder+0x84>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <checkBasGonder+0x58>
 800684c:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <checkBasGonder+0x7c>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d103      	bne.n	800685c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <checkBasGonder+0x88>)
 8006856:	2201      	movs	r2, #1
 8006858:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800685a:	e009      	b.n	8006870 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 800685c:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <checkBasGonder+0x84>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f083 0301 	eor.w	r3, r3, #1
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <checkBasGonder+0x88>)
 800686c:	2200      	movs	r2, #0
 800686e:	701a      	strb	r2, [r3, #0]
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr
 8006878:	20000c4a 	.word	0x20000c4a
 800687c:	20000c7e 	.word	0x20000c7e
 8006880:	20000c58 	.word	0x20000c58
 8006884:	20000c85 	.word	0x20000c85
 8006888:	20000c81 	.word	0x20000c81
 800688c:	20000c86 	.word	0x20000c86

08006890 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006894:	4b24      	ldr	r3, [pc, #144]	; (8006928 <checkKapiSecimleri+0x98>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 800689c:	4b23      	ldr	r3, [pc, #140]	; (800692c <checkKapiSecimleri+0x9c>)
 800689e:	2201      	movs	r2, #1
 80068a0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80068a2:	4b21      	ldr	r3, [pc, #132]	; (8006928 <checkKapiSecimleri+0x98>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d10e      	bne.n	80068c8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80068aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068ae:	4820      	ldr	r0, [pc, #128]	; (8006930 <checkKapiSecimleri+0xa0>)
 80068b0:	f003 fba8 	bl	800a004 <HAL_GPIO_ReadPin>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d103      	bne.n	80068c2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80068ba:	4b1c      	ldr	r3, [pc, #112]	; (800692c <checkKapiSecimleri+0x9c>)
 80068bc:	2201      	movs	r2, #1
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	e002      	b.n	80068c8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80068c2:	4b1a      	ldr	r3, [pc, #104]	; (800692c <checkKapiSecimleri+0x9c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80068c8:	4b17      	ldr	r3, [pc, #92]	; (8006928 <checkKapiSecimleri+0x98>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d10e      	bne.n	80068ee <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80068d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068d4:	4816      	ldr	r0, [pc, #88]	; (8006930 <checkKapiSecimleri+0xa0>)
 80068d6:	f003 fb95 	bl	800a004 <HAL_GPIO_ReadPin>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d103      	bne.n	80068e8 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80068e0:	4b12      	ldr	r3, [pc, #72]	; (800692c <checkKapiSecimleri+0x9c>)
 80068e2:	2201      	movs	r2, #1
 80068e4:	701a      	strb	r2, [r3, #0]
 80068e6:	e002      	b.n	80068ee <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80068e8:	4b10      	ldr	r3, [pc, #64]	; (800692c <checkKapiSecimleri+0x9c>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80068ee:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <checkKapiSecimleri+0x98>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d116      	bne.n	8006924 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80068f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068fa:	480d      	ldr	r0, [pc, #52]	; (8006930 <checkKapiSecimleri+0xa0>)
 80068fc:	f003 fb82 	bl	800a004 <HAL_GPIO_ReadPin>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10b      	bne.n	800691e <checkKapiSecimleri+0x8e>
 8006906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800690a:	4809      	ldr	r0, [pc, #36]	; (8006930 <checkKapiSecimleri+0xa0>)
 800690c:	f003 fb7a 	bl	800a004 <HAL_GPIO_ReadPin>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8006916:	4b05      	ldr	r3, [pc, #20]	; (800692c <checkKapiSecimleri+0x9c>)
 8006918:	2201      	movs	r2, #1
 800691a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800691c:	e002      	b.n	8006924 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800691e:	4b03      	ldr	r3, [pc, #12]	; (800692c <checkKapiSecimleri+0x9c>)
 8006920:	2200      	movs	r2, #0
 8006922:	701a      	strb	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20000c51 	.word	0x20000c51
 800692c:	20000c9c 	.word	0x20000c9c
 8006930:	40010800 	.word	0x40010800

08006934 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006938:	4b62      	ldr	r3, [pc, #392]	; (8006ac4 <checkAktifCalisma+0x190>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f041 8332 	bne.w	8007fa6 <checkAktifCalisma+0x1672>
 8006942:	4b61      	ldr	r3, [pc, #388]	; (8006ac8 <checkAktifCalisma+0x194>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f041 832d 	bne.w	8007fa6 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 800694c:	4b5f      	ldr	r3, [pc, #380]	; (8006acc <checkAktifCalisma+0x198>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11a      	bne.n	800698a <checkAktifCalisma+0x56>
 8006954:	4b5e      	ldr	r3, [pc, #376]	; (8006ad0 <checkAktifCalisma+0x19c>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d116      	bne.n	800698a <checkAktifCalisma+0x56>
 800695c:	4b5d      	ldr	r3, [pc, #372]	; (8006ad4 <checkAktifCalisma+0x1a0>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <checkAktifCalisma+0x46>
 8006964:	4b5c      	ldr	r3, [pc, #368]	; (8006ad8 <checkAktifCalisma+0x1a4>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	f083 0301 	eor.w	r3, r3, #1
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <checkAktifCalisma+0x46>
 8006972:	4b5a      	ldr	r3, [pc, #360]	; (8006adc <checkAktifCalisma+0x1a8>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d007      	beq.n	800698a <checkAktifCalisma+0x56>
 800697a:	4b59      	ldr	r3, [pc, #356]	; (8006ae0 <checkAktifCalisma+0x1ac>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d018      	beq.n	80069b4 <checkAktifCalisma+0x80>
 8006982:	4b58      	ldr	r3, [pc, #352]	; (8006ae4 <checkAktifCalisma+0x1b0>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d114      	bne.n	80069b4 <checkAktifCalisma+0x80>
 800698a:	4b57      	ldr	r3, [pc, #348]	; (8006ae8 <checkAktifCalisma+0x1b4>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d010      	beq.n	80069b4 <checkAktifCalisma+0x80>
 8006992:	4b56      	ldr	r3, [pc, #344]	; (8006aec <checkAktifCalisma+0x1b8>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00c      	beq.n	80069b4 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800699a:	2201      	movs	r2, #1
 800699c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80069a0:	4853      	ldr	r0, [pc, #332]	; (8006af0 <checkAktifCalisma+0x1bc>)
 80069a2:	f003 fb46 	bl	800a032 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80069a6:	4b53      	ldr	r3, [pc, #332]	; (8006af4 <checkAktifCalisma+0x1c0>)
 80069a8:	2201      	movs	r2, #1
 80069aa:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80069ac:	4b52      	ldr	r3, [pc, #328]	; (8006af8 <checkAktifCalisma+0x1c4>)
 80069ae:	2201      	movs	r2, #1
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	e008      	b.n	80069c6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80069b4:	2200      	movs	r2, #0
 80069b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80069ba:	484d      	ldr	r0, [pc, #308]	; (8006af0 <checkAktifCalisma+0x1bc>)
 80069bc:	f003 fb39 	bl	800a032 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80069c0:	4b4c      	ldr	r3, [pc, #304]	; (8006af4 <checkAktifCalisma+0x1c0>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80069c6:	4b40      	ldr	r3, [pc, #256]	; (8006ac8 <checkAktifCalisma+0x194>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d160      	bne.n	8006a90 <checkAktifCalisma+0x15c>
 80069ce:	4b46      	ldr	r3, [pc, #280]	; (8006ae8 <checkAktifCalisma+0x1b4>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d05c      	beq.n	8006a90 <checkAktifCalisma+0x15c>
 80069d6:	4b45      	ldr	r3, [pc, #276]	; (8006aec <checkAktifCalisma+0x1b8>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d058      	beq.n	8006a90 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80069de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069e2:	4843      	ldr	r0, [pc, #268]	; (8006af0 <checkAktifCalisma+0x1bc>)
 80069e4:	f003 fb0e 	bl	800a004 <HAL_GPIO_ReadPin>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <checkAktifCalisma+0xc2>
 80069ee:	4b43      	ldr	r3, [pc, #268]	; (8006afc <checkAktifCalisma+0x1c8>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04c      	beq.n	8006a90 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80069f6:	2102      	movs	r1, #2
 80069f8:	4841      	ldr	r0, [pc, #260]	; (8006b00 <checkAktifCalisma+0x1cc>)
 80069fa:	f003 fb03 	bl	800a004 <HAL_GPIO_ReadPin>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d145      	bne.n	8006a90 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8006a04:	4b3f      	ldr	r3, [pc, #252]	; (8006b04 <checkAktifCalisma+0x1d0>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d041      	beq.n	8006a90 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8006a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a10:	4837      	ldr	r0, [pc, #220]	; (8006af0 <checkAktifCalisma+0x1bc>)
 8006a12:	f003 faf7 	bl	800a004 <HAL_GPIO_ReadPin>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d10e      	bne.n	8006a3a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a20:	4833      	ldr	r0, [pc, #204]	; (8006af0 <checkAktifCalisma+0x1bc>)
 8006a22:	f003 faef 	bl	800a004 <HAL_GPIO_ReadPin>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d106      	bne.n	8006a3a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006a2c:	2140      	movs	r1, #64	; 0x40
 8006a2e:	4834      	ldr	r0, [pc, #208]	; (8006b00 <checkAktifCalisma+0x1cc>)
 8006a30:	f003 fae8 	bl	800a004 <HAL_GPIO_ReadPin>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d003      	beq.n	8006a42 <checkAktifCalisma+0x10e>
 8006a3a:	4b24      	ldr	r3, [pc, #144]	; (8006acc <checkAktifCalisma+0x198>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d026      	beq.n	8006a90 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8006a42:	4b24      	ldr	r3, [pc, #144]	; (8006ad4 <checkAktifCalisma+0x1a0>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f083 0301 	eor.w	r3, r3, #1
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01f      	beq.n	8006a90 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006a50:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <checkAktifCalisma+0x19c>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	f083 0301 	eor.w	r3, r3, #1
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d018      	beq.n	8006a90 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8006a5e:	4b20      	ldr	r3, [pc, #128]	; (8006ae0 <checkAktifCalisma+0x1ac>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	f083 0301 	eor.w	r3, r3, #1
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d011      	beq.n	8006a90 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006a6c:	4b26      	ldr	r3, [pc, #152]	; (8006b08 <checkAktifCalisma+0x1d4>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	f083 0301 	eor.w	r3, r3, #1
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8006a7a:	4b24      	ldr	r3, [pc, #144]	; (8006b0c <checkAktifCalisma+0x1d8>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	f083 0301 	eor.w	r3, r3, #1
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006a88:	4b10      	ldr	r3, [pc, #64]	; (8006acc <checkAktifCalisma+0x198>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	701a      	strb	r2, [r3, #0]
 8006a8e:	e002      	b.n	8006a96 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006a90:	4b0e      	ldr	r3, [pc, #56]	; (8006acc <checkAktifCalisma+0x198>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8006a96:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <checkAktifCalisma+0x198>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d03a      	beq.n	8006b14 <checkAktifCalisma+0x1e0>
 8006a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006aa2:	4817      	ldr	r0, [pc, #92]	; (8006b00 <checkAktifCalisma+0x1cc>)
 8006aa4:	f003 faae 	bl	800a004 <HAL_GPIO_ReadPin>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d132      	bne.n	8006b14 <checkAktifCalisma+0x1e0>
 8006aae:	4b18      	ldr	r3, [pc, #96]	; (8006b10 <checkAktifCalisma+0x1dc>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d02e      	beq.n	8006b14 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006abc:	480c      	ldr	r0, [pc, #48]	; (8006af0 <checkAktifCalisma+0x1bc>)
 8006abe:	f003 fab8 	bl	800a032 <HAL_GPIO_WritePin>
 8006ac2:	e02d      	b.n	8006b20 <checkAktifCalisma+0x1ec>
 8006ac4:	20000c67 	.word	0x20000c67
 8006ac8:	20000c66 	.word	0x20000c66
 8006acc:	20000c7e 	.word	0x20000c7e
 8006ad0:	20000c7f 	.word	0x20000c7f
 8006ad4:	20000c81 	.word	0x20000c81
 8006ad8:	20000c79 	.word	0x20000c79
 8006adc:	20000c5c 	.word	0x20000c5c
 8006ae0:	20000c80 	.word	0x20000c80
 8006ae4:	20000c5b 	.word	0x20000c5b
 8006ae8:	20000c9b 	.word	0x20000c9b
 8006aec:	20000c9c 	.word	0x20000c9c
 8006af0:	40010c00 	.word	0x40010c00
 8006af4:	20000c9d 	.word	0x20000c9d
 8006af8:	20000c88 	.word	0x20000c88
 8006afc:	20000c85 	.word	0x20000c85
 8006b00:	40011000 	.word	0x40011000
 8006b04:	20000c4c 	.word	0x20000c4c
 8006b08:	20000c83 	.word	0x20000c83
 8006b0c:	20000c84 	.word	0x20000c84
 8006b10:	20000c57 	.word	0x20000c57
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006b14:	2200      	movs	r2, #0
 8006b16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b1a:	4860      	ldr	r0, [pc, #384]	; (8006c9c <checkAktifCalisma+0x368>)
 8006b1c:	f003 fa89 	bl	800a032 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006b20:	4b5f      	ldr	r3, [pc, #380]	; (8006ca0 <checkAktifCalisma+0x36c>)
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d013      	beq.n	8006b50 <checkAktifCalisma+0x21c>
 8006b28:	4b5e      	ldr	r3, [pc, #376]	; (8006ca4 <checkAktifCalisma+0x370>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d007      	beq.n	8006b40 <checkAktifCalisma+0x20c>
 8006b30:	4b5c      	ldr	r3, [pc, #368]	; (8006ca4 <checkAktifCalisma+0x370>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d003      	beq.n	8006b40 <checkAktifCalisma+0x20c>
 8006b38:	4b5b      	ldr	r3, [pc, #364]	; (8006ca8 <checkAktifCalisma+0x374>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d107      	bne.n	8006b50 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006b40:	2201      	movs	r2, #1
 8006b42:	2104      	movs	r1, #4
 8006b44:	4855      	ldr	r0, [pc, #340]	; (8006c9c <checkAktifCalisma+0x368>)
 8006b46:	f003 fa74 	bl	800a032 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8006b4a:	4b58      	ldr	r3, [pc, #352]	; (8006cac <checkAktifCalisma+0x378>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006b50:	4b56      	ldr	r3, [pc, #344]	; (8006cac <checkAktifCalisma+0x378>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d02f      	beq.n	8006bb8 <checkAktifCalisma+0x284>
 8006b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b5c:	484f      	ldr	r0, [pc, #316]	; (8006c9c <checkAktifCalisma+0x368>)
 8006b5e:	f003 fa51 	bl	800a004 <HAL_GPIO_ReadPin>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d106      	bne.n	8006b76 <checkAktifCalisma+0x242>
 8006b68:	4b51      	ldr	r3, [pc, #324]	; (8006cb0 <checkAktifCalisma+0x37c>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f083 0301 	eor.w	r3, r3, #1
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <checkAktifCalisma+0x250>
 8006b76:	2102      	movs	r1, #2
 8006b78:	484e      	ldr	r0, [pc, #312]	; (8006cb4 <checkAktifCalisma+0x380>)
 8006b7a:	f003 fa43 	bl	800a004 <HAL_GPIO_ReadPin>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d119      	bne.n	8006bb8 <checkAktifCalisma+0x284>
 8006b84:	4b4c      	ldr	r3, [pc, #304]	; (8006cb8 <checkAktifCalisma+0x384>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d015      	beq.n	8006bb8 <checkAktifCalisma+0x284>
 8006b8c:	4b4b      	ldr	r3, [pc, #300]	; (8006cbc <checkAktifCalisma+0x388>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d011      	beq.n	8006bb8 <checkAktifCalisma+0x284>
 8006b94:	4b4a      	ldr	r3, [pc, #296]	; (8006cc0 <checkAktifCalisma+0x38c>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00d      	beq.n	8006bb8 <checkAktifCalisma+0x284>
 8006b9c:	4b49      	ldr	r3, [pc, #292]	; (8006cc4 <checkAktifCalisma+0x390>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f083 0301 	eor.w	r3, r3, #1
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d006      	beq.n	8006bb8 <checkAktifCalisma+0x284>
			timer2=millis;
 8006baa:	4b47      	ldr	r3, [pc, #284]	; (8006cc8 <checkAktifCalisma+0x394>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a47      	ldr	r2, [pc, #284]	; (8006ccc <checkAktifCalisma+0x398>)
 8006bb0:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006bb2:	4b44      	ldr	r3, [pc, #272]	; (8006cc4 <checkAktifCalisma+0x390>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006bb8:	4b43      	ldr	r3, [pc, #268]	; (8006cc8 <checkAktifCalisma+0x394>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4b43      	ldr	r3, [pc, #268]	; (8006ccc <checkAktifCalisma+0x398>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	4a43      	ldr	r2, [pc, #268]	; (8006cd0 <checkAktifCalisma+0x39c>)
 8006bc4:	7812      	ldrb	r2, [r2, #0]
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d303      	bcc.n	8006bd2 <checkAktifCalisma+0x29e>
 8006bca:	4b3e      	ldr	r3, [pc, #248]	; (8006cc4 <checkAktifCalisma+0x390>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d111      	bne.n	8006bf6 <checkAktifCalisma+0x2c2>
 8006bd2:	4b39      	ldr	r3, [pc, #228]	; (8006cb8 <checkAktifCalisma+0x384>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f083 0301 	eor.w	r3, r3, #1
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <checkAktifCalisma+0x2c2>
 8006be0:	4b36      	ldr	r3, [pc, #216]	; (8006cbc <checkAktifCalisma+0x388>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	f083 0301 	eor.w	r3, r3, #1
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <checkAktifCalisma+0x2c2>
 8006bee:	4b34      	ldr	r3, [pc, #208]	; (8006cc0 <checkAktifCalisma+0x38c>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2104      	movs	r1, #4
 8006bfa:	4828      	ldr	r0, [pc, #160]	; (8006c9c <checkAktifCalisma+0x368>)
 8006bfc:	f003 fa19 	bl	800a032 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006c00:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <checkAktifCalisma+0x378>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006c06:	4b2f      	ldr	r3, [pc, #188]	; (8006cc4 <checkAktifCalisma+0x390>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006c0c:	4b31      	ldr	r3, [pc, #196]	; (8006cd4 <checkAktifCalisma+0x3a0>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006c14:	4b30      	ldr	r3, [pc, #192]	; (8006cd8 <checkAktifCalisma+0x3a4>)
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006c1a:	4b2e      	ldr	r3, [pc, #184]	; (8006cd4 <checkAktifCalisma+0x3a0>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d116      	bne.n	8006c50 <checkAktifCalisma+0x31c>
 8006c22:	4b2e      	ldr	r3, [pc, #184]	; (8006cdc <checkAktifCalisma+0x3a8>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d112      	bne.n	8006c50 <checkAktifCalisma+0x31c>
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	4821      	ldr	r0, [pc, #132]	; (8006cb4 <checkAktifCalisma+0x380>)
 8006c2e:	f003 f9e9 	bl	800a004 <HAL_GPIO_ReadPin>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10b      	bne.n	8006c50 <checkAktifCalisma+0x31c>
 8006c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c3c:	4817      	ldr	r0, [pc, #92]	; (8006c9c <checkAktifCalisma+0x368>)
 8006c3e:	f003 f9e1 	bl	800a004 <HAL_GPIO_ReadPin>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d103      	bne.n	8006c50 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006c48:	4b23      	ldr	r3, [pc, #140]	; (8006cd8 <checkAktifCalisma+0x3a4>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e011      	b.n	8006c74 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006c50:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <checkAktifCalisma+0x3a0>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d10d      	bne.n	8006c74 <checkAktifCalisma+0x340>
 8006c58:	2101      	movs	r1, #1
 8006c5a:	4816      	ldr	r0, [pc, #88]	; (8006cb4 <checkAktifCalisma+0x380>)
 8006c5c:	f003 f9d2 	bl	800a004 <HAL_GPIO_ReadPin>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d106      	bne.n	8006c74 <checkAktifCalisma+0x340>
 8006c66:	4b1d      	ldr	r3, [pc, #116]	; (8006cdc <checkAktifCalisma+0x3a8>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006c6e:	4b1a      	ldr	r3, [pc, #104]	; (8006cd8 <checkAktifCalisma+0x3a4>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006c74:	4b17      	ldr	r3, [pc, #92]	; (8006cd4 <checkAktifCalisma+0x3a0>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d134      	bne.n	8006ce6 <checkAktifCalisma+0x3b2>
 8006c7c:	4b17      	ldr	r3, [pc, #92]	; (8006cdc <checkAktifCalisma+0x3a8>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d130      	bne.n	8006ce6 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006c84:	2101      	movs	r1, #1
 8006c86:	480b      	ldr	r0, [pc, #44]	; (8006cb4 <checkAktifCalisma+0x380>)
 8006c88:	f003 f9bc 	bl	800a004 <HAL_GPIO_ReadPin>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d126      	bne.n	8006ce0 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006c92:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <checkAktifCalisma+0x3a4>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	e025      	b.n	8006ce6 <checkAktifCalisma+0x3b2>
 8006c9a:	bf00      	nop
 8006c9c:	40010c00 	.word	0x40010c00
 8006ca0:	20000c7e 	.word	0x20000c7e
 8006ca4:	20000c58 	.word	0x20000c58
 8006ca8:	20000c5c 	.word	0x20000c5c
 8006cac:	20000c82 	.word	0x20000c82
 8006cb0:	20000c85 	.word	0x20000c85
 8006cb4:	40011000 	.word	0x40011000
 8006cb8:	20000c9b 	.word	0x20000c9b
 8006cbc:	20000c9c 	.word	0x20000c9c
 8006cc0:	20000c4c 	.word	0x20000c4c
 8006cc4:	20000c7a 	.word	0x20000c7a
 8006cc8:	20000bd4 	.word	0x20000bd4
 8006ccc:	20000be0 	.word	0x20000be0
 8006cd0:	20000c5d 	.word	0x20000c5d
 8006cd4:	20000c4d 	.word	0x20000c4d
 8006cd8:	20000ca0 	.word	0x20000ca0
 8006cdc:	20000c4a 	.word	0x20000c4a
			} else {
				cerceveVar=0;
 8006ce0:	4b7f      	ldr	r3, [pc, #508]	; (8006ee0 <checkAktifCalisma+0x5ac>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006ce6:	4b7f      	ldr	r3, [pc, #508]	; (8006ee4 <checkAktifCalisma+0x5b0>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d17c      	bne.n	8006de8 <checkAktifCalisma+0x4b4>
 8006cee:	4b7e      	ldr	r3, [pc, #504]	; (8006ee8 <checkAktifCalisma+0x5b4>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d078      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
 8006cf6:	4b7d      	ldr	r3, [pc, #500]	; (8006eec <checkAktifCalisma+0x5b8>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d074      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006cfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d02:	487b      	ldr	r0, [pc, #492]	; (8006ef0 <checkAktifCalisma+0x5bc>)
 8006d04:	f003 f97e 	bl	800a004 <HAL_GPIO_ReadPin>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <checkAktifCalisma+0x3e2>
 8006d0e:	4b79      	ldr	r3, [pc, #484]	; (8006ef4 <checkAktifCalisma+0x5c0>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d068      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006d16:	4b72      	ldr	r3, [pc, #456]	; (8006ee0 <checkAktifCalisma+0x5ac>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d064      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
 8006d1e:	4b76      	ldr	r3, [pc, #472]	; (8006ef8 <checkAktifCalisma+0x5c4>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f083 0301 	eor.w	r3, r3, #1
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d05d      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006d2c:	2104      	movs	r1, #4
 8006d2e:	4873      	ldr	r0, [pc, #460]	; (8006efc <checkAktifCalisma+0x5c8>)
 8006d30:	f003 f968 	bl	800a004 <HAL_GPIO_ReadPin>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <checkAktifCalisma+0x40e>
 8006d3a:	4b71      	ldr	r3, [pc, #452]	; (8006f00 <checkAktifCalisma+0x5cc>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d152      	bne.n	8006de8 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d46:	486a      	ldr	r0, [pc, #424]	; (8006ef0 <checkAktifCalisma+0x5bc>)
 8006d48:	f003 f95c 	bl	800a004 <HAL_GPIO_ReadPin>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d10e      	bne.n	8006d70 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d56:	4866      	ldr	r0, [pc, #408]	; (8006ef0 <checkAktifCalisma+0x5bc>)
 8006d58:	f003 f954 	bl	800a004 <HAL_GPIO_ReadPin>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d106      	bne.n	8006d70 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006d62:	2140      	movs	r1, #64	; 0x40
 8006d64:	4865      	ldr	r0, [pc, #404]	; (8006efc <checkAktifCalisma+0x5c8>)
 8006d66:	f003 f94d 	bl	800a004 <HAL_GPIO_ReadPin>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d003      	beq.n	8006d78 <checkAktifCalisma+0x444>
 8006d70:	4b64      	ldr	r3, [pc, #400]	; (8006f04 <checkAktifCalisma+0x5d0>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d037      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006d78:	4b63      	ldr	r3, [pc, #396]	; (8006f08 <checkAktifCalisma+0x5d4>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f083 0301 	eor.w	r3, r3, #1
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d030      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8006d86:	4b61      	ldr	r3, [pc, #388]	; (8006f0c <checkAktifCalisma+0x5d8>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f083 0301 	eor.w	r3, r3, #1
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d029      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006d94:	4b5e      	ldr	r3, [pc, #376]	; (8006f10 <checkAktifCalisma+0x5dc>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	f083 0301 	eor.w	r3, r3, #1
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d022      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8006da2:	4b5c      	ldr	r3, [pc, #368]	; (8006f14 <checkAktifCalisma+0x5e0>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f083 0301 	eor.w	r3, r3, #1
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01b      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006db0:	4b59      	ldr	r3, [pc, #356]	; (8006f18 <checkAktifCalisma+0x5e4>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	f083 0301 	eor.w	r3, r3, #1
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d014      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006dbe:	4b57      	ldr	r3, [pc, #348]	; (8006f1c <checkAktifCalisma+0x5e8>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	f083 0301 	eor.w	r3, r3, #1
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00d      	beq.n	8006de8 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006dcc:	2201      	movs	r2, #1
 8006dce:	2102      	movs	r1, #2
 8006dd0:	4847      	ldr	r0, [pc, #284]	; (8006ef0 <checkAktifCalisma+0x5bc>)
 8006dd2:	f003 f92e 	bl	800a032 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006dd6:	4b4b      	ldr	r3, [pc, #300]	; (8006f04 <checkAktifCalisma+0x5d0>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006ddc:	4b50      	ldr	r3, [pc, #320]	; (8006f20 <checkAktifCalisma+0x5ec>)
 8006dde:	2201      	movs	r2, #1
 8006de0:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8006de2:	4b50      	ldr	r3, [pc, #320]	; (8006f24 <checkAktifCalisma+0x5f0>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006de8:	4b46      	ldr	r3, [pc, #280]	; (8006f04 <checkAktifCalisma+0x5d0>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d033      	beq.n	8006e58 <checkAktifCalisma+0x524>
 8006df0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006df4:	483e      	ldr	r0, [pc, #248]	; (8006ef0 <checkAktifCalisma+0x5bc>)
 8006df6:	f003 f905 	bl	800a004 <HAL_GPIO_ReadPin>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d106      	bne.n	8006e0e <checkAktifCalisma+0x4da>
 8006e00:	4b3c      	ldr	r3, [pc, #240]	; (8006ef4 <checkAktifCalisma+0x5c0>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f083 0301 	eor.w	r3, r3, #1
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <checkAktifCalisma+0x4f0>
 8006e0e:	2104      	movs	r1, #4
 8006e10:	483a      	ldr	r0, [pc, #232]	; (8006efc <checkAktifCalisma+0x5c8>)
 8006e12:	f003 f8f7 	bl	800a004 <HAL_GPIO_ReadPin>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d11d      	bne.n	8006e58 <checkAktifCalisma+0x524>
 8006e1c:	4b38      	ldr	r3, [pc, #224]	; (8006f00 <checkAktifCalisma+0x5cc>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d019      	beq.n	8006e58 <checkAktifCalisma+0x524>
 8006e24:	4b30      	ldr	r3, [pc, #192]	; (8006ee8 <checkAktifCalisma+0x5b4>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d015      	beq.n	8006e58 <checkAktifCalisma+0x524>
 8006e2c:	4b2f      	ldr	r3, [pc, #188]	; (8006eec <checkAktifCalisma+0x5b8>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d011      	beq.n	8006e58 <checkAktifCalisma+0x524>
 8006e34:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <checkAktifCalisma+0x5ac>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00d      	beq.n	8006e58 <checkAktifCalisma+0x524>
 8006e3c:	4b3a      	ldr	r3, [pc, #232]	; (8006f28 <checkAktifCalisma+0x5f4>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f083 0301 	eor.w	r3, r3, #1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d006      	beq.n	8006e58 <checkAktifCalisma+0x524>
			timer2=millis;
 8006e4a:	4b38      	ldr	r3, [pc, #224]	; (8006f2c <checkAktifCalisma+0x5f8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a38      	ldr	r2, [pc, #224]	; (8006f30 <checkAktifCalisma+0x5fc>)
 8006e50:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006e52:	4b35      	ldr	r3, [pc, #212]	; (8006f28 <checkAktifCalisma+0x5f4>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006e58:	4b34      	ldr	r3, [pc, #208]	; (8006f2c <checkAktifCalisma+0x5f8>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	4b34      	ldr	r3, [pc, #208]	; (8006f30 <checkAktifCalisma+0x5fc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	4a34      	ldr	r2, [pc, #208]	; (8006f34 <checkAktifCalisma+0x600>)
 8006e64:	7812      	ldrb	r2, [r2, #0]
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d303      	bcc.n	8006e72 <checkAktifCalisma+0x53e>
 8006e6a:	4b2f      	ldr	r3, [pc, #188]	; (8006f28 <checkAktifCalisma+0x5f4>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d114      	bne.n	8006e9c <checkAktifCalisma+0x568>
 8006e72:	4b1d      	ldr	r3, [pc, #116]	; (8006ee8 <checkAktifCalisma+0x5b4>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	f083 0301 	eor.w	r3, r3, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10d      	bne.n	8006e9c <checkAktifCalisma+0x568>
 8006e80:	4b1a      	ldr	r3, [pc, #104]	; (8006eec <checkAktifCalisma+0x5b8>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f083 0301 	eor.w	r3, r3, #1
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <checkAktifCalisma+0x568>
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <checkAktifCalisma+0x5ac>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	f083 0301 	eor.w	r3, r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	4813      	ldr	r0, [pc, #76]	; (8006ef0 <checkAktifCalisma+0x5bc>)
 8006ea2:	f003 f8c6 	bl	800a032 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006ea6:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <checkAktifCalisma+0x5d0>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006eac:	4b1e      	ldr	r3, [pc, #120]	; (8006f28 <checkAktifCalisma+0x5f4>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006eb2:	4b14      	ldr	r3, [pc, #80]	; (8006f04 <checkAktifCalisma+0x5d0>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d040      	beq.n	8006f3c <checkAktifCalisma+0x608>
 8006eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ebe:	480f      	ldr	r0, [pc, #60]	; (8006efc <checkAktifCalisma+0x5c8>)
 8006ec0:	f003 f8a0 	bl	800a004 <HAL_GPIO_ReadPin>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d138      	bne.n	8006f3c <checkAktifCalisma+0x608>
 8006eca:	4b1b      	ldr	r3, [pc, #108]	; (8006f38 <checkAktifCalisma+0x604>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d034      	beq.n	8006f3c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	4806      	ldr	r0, [pc, #24]	; (8006ef0 <checkAktifCalisma+0x5bc>)
 8006ed8:	f003 f8ab 	bl	800a032 <HAL_GPIO_WritePin>
 8006edc:	e033      	b.n	8006f46 <checkAktifCalisma+0x612>
 8006ede:	bf00      	nop
 8006ee0:	20000ca0 	.word	0x20000ca0
 8006ee4:	20000c66 	.word	0x20000c66
 8006ee8:	20000c9b 	.word	0x20000c9b
 8006eec:	20000c9c 	.word	0x20000c9c
 8006ef0:	40010c00 	.word	0x40010c00
 8006ef4:	20000c86 	.word	0x20000c86
 8006ef8:	20000c9a 	.word	0x20000c9a
 8006efc:	40011000 	.word	0x40011000
 8006f00:	20000c4f 	.word	0x20000c4f
 8006f04:	20000c81 	.word	0x20000c81
 8006f08:	20000c7e 	.word	0x20000c7e
 8006f0c:	20000c82 	.word	0x20000c82
 8006f10:	20000c7f 	.word	0x20000c7f
 8006f14:	20000c80 	.word	0x20000c80
 8006f18:	20000c83 	.word	0x20000c83
 8006f1c:	20000c84 	.word	0x20000c84
 8006f20:	20000c89 	.word	0x20000c89
 8006f24:	20000caa 	.word	0x20000caa
 8006f28:	20000c79 	.word	0x20000c79
 8006f2c:	20000bd4 	.word	0x20000bd4
 8006f30:	20000be0 	.word	0x20000be0
 8006f34:	20000c5e 	.word	0x20000c5e
 8006f38:	20000c4e 	.word	0x20000c4e
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2101      	movs	r1, #1
 8006f40:	4836      	ldr	r0, [pc, #216]	; (800701c <checkAktifCalisma+0x6e8>)
 8006f42:	f003 f876 	bl	800a032 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006f46:	4b36      	ldr	r3, [pc, #216]	; (8007020 <checkAktifCalisma+0x6ec>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f040 8080 	bne.w	8007050 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006f50:	4b34      	ldr	r3, [pc, #208]	; (8007024 <checkAktifCalisma+0x6f0>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d003      	beq.n	8006f60 <checkAktifCalisma+0x62c>
 8006f58:	4b32      	ldr	r3, [pc, #200]	; (8007024 <checkAktifCalisma+0x6f0>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d177      	bne.n	8007050 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006f60:	4b31      	ldr	r3, [pc, #196]	; (8007028 <checkAktifCalisma+0x6f4>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d073      	beq.n	8007050 <checkAktifCalisma+0x71c>
 8006f68:	4b30      	ldr	r3, [pc, #192]	; (800702c <checkAktifCalisma+0x6f8>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d06f      	beq.n	8007050 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f74:	4829      	ldr	r0, [pc, #164]	; (800701c <checkAktifCalisma+0x6e8>)
 8006f76:	f003 f845 	bl	800a004 <HAL_GPIO_ReadPin>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d167      	bne.n	8007050 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f84:	482a      	ldr	r0, [pc, #168]	; (8007030 <checkAktifCalisma+0x6fc>)
 8006f86:	f003 f83d 	bl	800a004 <HAL_GPIO_ReadPin>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <checkAktifCalisma+0x664>
 8006f90:	4b28      	ldr	r3, [pc, #160]	; (8007034 <checkAktifCalisma+0x700>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d15b      	bne.n	8007050 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006f98:	2140      	movs	r1, #64	; 0x40
 8006f9a:	4825      	ldr	r0, [pc, #148]	; (8007030 <checkAktifCalisma+0x6fc>)
 8006f9c:	f003 f832 	bl	800a004 <HAL_GPIO_ReadPin>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d10f      	bne.n	8006fc6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006faa:	481c      	ldr	r0, [pc, #112]	; (800701c <checkAktifCalisma+0x6e8>)
 8006fac:	f003 f82a 	bl	800a004 <HAL_GPIO_ReadPin>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d107      	bne.n	8006fc6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fba:	4818      	ldr	r0, [pc, #96]	; (800701c <checkAktifCalisma+0x6e8>)
 8006fbc:	f003 f822 	bl	800a004 <HAL_GPIO_ReadPin>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d003      	beq.n	8006fce <checkAktifCalisma+0x69a>
 8006fc6:	4b1c      	ldr	r3, [pc, #112]	; (8007038 <checkAktifCalisma+0x704>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d040      	beq.n	8007050 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006fce:	4b1b      	ldr	r3, [pc, #108]	; (800703c <checkAktifCalisma+0x708>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	f083 0301 	eor.w	r3, r3, #1
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d039      	beq.n	8007050 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006fdc:	4b18      	ldr	r3, [pc, #96]	; (8007040 <checkAktifCalisma+0x70c>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	f083 0301 	eor.w	r3, r3, #1
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d032      	beq.n	8007050 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006fea:	4b16      	ldr	r3, [pc, #88]	; (8007044 <checkAktifCalisma+0x710>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	f083 0301 	eor.w	r3, r3, #1
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d02b      	beq.n	8007050 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006ff8:	4b13      	ldr	r3, [pc, #76]	; (8007048 <checkAktifCalisma+0x714>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f083 0301 	eor.w	r3, r3, #1
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d024      	beq.n	8007050 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8007006:	4b11      	ldr	r3, [pc, #68]	; (800704c <checkAktifCalisma+0x718>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	f083 0301 	eor.w	r3, r3, #1
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01d      	beq.n	8007050 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8007014:	4b08      	ldr	r3, [pc, #32]	; (8007038 <checkAktifCalisma+0x704>)
 8007016:	2201      	movs	r2, #1
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	e01c      	b.n	8007056 <checkAktifCalisma+0x722>
 800701c:	40010c00 	.word	0x40010c00
 8007020:	20000c66 	.word	0x20000c66
 8007024:	20000c58 	.word	0x20000c58
 8007028:	20000c9b 	.word	0x20000c9b
 800702c:	20000c9c 	.word	0x20000c9c
 8007030:	40011000 	.word	0x40011000
 8007034:	20000c59 	.word	0x20000c59
 8007038:	20000c7f 	.word	0x20000c7f
 800703c:	20000c7e 	.word	0x20000c7e
 8007040:	20000c82 	.word	0x20000c82
 8007044:	20000c81 	.word	0x20000c81
 8007048:	20000c80 	.word	0x20000c80
 800704c:	20000c84 	.word	0x20000c84
		} else {
			devmotoryukaricalisiyor=0;
 8007050:	4b64      	ldr	r3, [pc, #400]	; (80071e4 <checkAktifCalisma+0x8b0>)
 8007052:	2200      	movs	r2, #0
 8007054:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8007056:	4b63      	ldr	r3, [pc, #396]	; (80071e4 <checkAktifCalisma+0x8b0>)
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d007      	beq.n	800706e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800705e:	2201      	movs	r2, #1
 8007060:	2120      	movs	r1, #32
 8007062:	4861      	ldr	r0, [pc, #388]	; (80071e8 <checkAktifCalisma+0x8b4>)
 8007064:	f002 ffe5 	bl	800a032 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8007068:	4b60      	ldr	r3, [pc, #384]	; (80071ec <checkAktifCalisma+0x8b8>)
 800706a:	2201      	movs	r2, #1
 800706c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800706e:	4b5f      	ldr	r3, [pc, #380]	; (80071ec <checkAktifCalisma+0x8b8>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d025      	beq.n	80070c2 <checkAktifCalisma+0x78e>
 8007076:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800707a:	485d      	ldr	r0, [pc, #372]	; (80071f0 <checkAktifCalisma+0x8bc>)
 800707c:	f002 ffc2 	bl	800a004 <HAL_GPIO_ReadPin>
 8007080:	4603      	mov	r3, r0
 8007082:	2b01      	cmp	r3, #1
 8007084:	d007      	beq.n	8007096 <checkAktifCalisma+0x762>
 8007086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800708a:	4857      	ldr	r0, [pc, #348]	; (80071e8 <checkAktifCalisma+0x8b4>)
 800708c:	f002 ffba 	bl	800a004 <HAL_GPIO_ReadPin>
 8007090:	4603      	mov	r3, r0
 8007092:	2b01      	cmp	r3, #1
 8007094:	d115      	bne.n	80070c2 <checkAktifCalisma+0x78e>
 8007096:	4b57      	ldr	r3, [pc, #348]	; (80071f4 <checkAktifCalisma+0x8c0>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d011      	beq.n	80070c2 <checkAktifCalisma+0x78e>
 800709e:	4b56      	ldr	r3, [pc, #344]	; (80071f8 <checkAktifCalisma+0x8c4>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00d      	beq.n	80070c2 <checkAktifCalisma+0x78e>
 80070a6:	4b55      	ldr	r3, [pc, #340]	; (80071fc <checkAktifCalisma+0x8c8>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	f083 0301 	eor.w	r3, r3, #1
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <checkAktifCalisma+0x78e>
			timer2=millis;
 80070b4:	4b52      	ldr	r3, [pc, #328]	; (8007200 <checkAktifCalisma+0x8cc>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a52      	ldr	r2, [pc, #328]	; (8007204 <checkAktifCalisma+0x8d0>)
 80070ba:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80070bc:	4b4f      	ldr	r3, [pc, #316]	; (80071fc <checkAktifCalisma+0x8c8>)
 80070be:	2201      	movs	r2, #1
 80070c0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80070c2:	4b4f      	ldr	r3, [pc, #316]	; (8007200 <checkAktifCalisma+0x8cc>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b4f      	ldr	r3, [pc, #316]	; (8007204 <checkAktifCalisma+0x8d0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	4a4e      	ldr	r2, [pc, #312]	; (8007208 <checkAktifCalisma+0x8d4>)
 80070ce:	7812      	ldrb	r2, [r2, #0]
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d303      	bcc.n	80070dc <checkAktifCalisma+0x7a8>
 80070d4:	4b49      	ldr	r3, [pc, #292]	; (80071fc <checkAktifCalisma+0x8c8>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10d      	bne.n	80070f8 <checkAktifCalisma+0x7c4>
 80070dc:	4b45      	ldr	r3, [pc, #276]	; (80071f4 <checkAktifCalisma+0x8c0>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f083 0301 	eor.w	r3, r3, #1
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <checkAktifCalisma+0x7c4>
 80070ea:	4b43      	ldr	r3, [pc, #268]	; (80071f8 <checkAktifCalisma+0x8c4>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f083 0301 	eor.w	r3, r3, #1
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80070f8:	2200      	movs	r2, #0
 80070fa:	2120      	movs	r1, #32
 80070fc:	483a      	ldr	r0, [pc, #232]	; (80071e8 <checkAktifCalisma+0x8b4>)
 80070fe:	f002 ff98 	bl	800a032 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8007102:	4b3a      	ldr	r3, [pc, #232]	; (80071ec <checkAktifCalisma+0x8b8>)
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8007108:	4b3c      	ldr	r3, [pc, #240]	; (80071fc <checkAktifCalisma+0x8c8>)
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800710e:	4b3f      	ldr	r3, [pc, #252]	; (800720c <checkAktifCalisma+0x8d8>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	f040 8088 	bne.w	8007228 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8007118:	4b3d      	ldr	r3, [pc, #244]	; (8007210 <checkAktifCalisma+0x8dc>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d003      	beq.n	8007128 <checkAktifCalisma+0x7f4>
 8007120:	4b3b      	ldr	r3, [pc, #236]	; (8007210 <checkAktifCalisma+0x8dc>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d17f      	bne.n	8007228 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8007128:	4b32      	ldr	r3, [pc, #200]	; (80071f4 <checkAktifCalisma+0x8c0>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d07b      	beq.n	8007228 <checkAktifCalisma+0x8f4>
 8007130:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <checkAktifCalisma+0x8c4>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d077      	beq.n	8007228 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8007138:	2140      	movs	r1, #64	; 0x40
 800713a:	482b      	ldr	r0, [pc, #172]	; (80071e8 <checkAktifCalisma+0x8b4>)
 800713c:	f002 ff62 	bl	800a004 <HAL_GPIO_ReadPin>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d170      	bne.n	8007228 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8007146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800714a:	4827      	ldr	r0, [pc, #156]	; (80071e8 <checkAktifCalisma+0x8b4>)
 800714c:	f002 ff5a 	bl	800a004 <HAL_GPIO_ReadPin>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <checkAktifCalisma+0x82a>
 8007156:	4b2f      	ldr	r3, [pc, #188]	; (8007214 <checkAktifCalisma+0x8e0>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d164      	bne.n	8007228 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800715e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007162:	4823      	ldr	r0, [pc, #140]	; (80071f0 <checkAktifCalisma+0x8bc>)
 8007164:	f002 ff4e 	bl	800a004 <HAL_GPIO_ReadPin>
 8007168:	4603      	mov	r3, r0
 800716a:	2b01      	cmp	r3, #1
 800716c:	d10f      	bne.n	800718e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800716e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007172:	481f      	ldr	r0, [pc, #124]	; (80071f0 <checkAktifCalisma+0x8bc>)
 8007174:	f002 ff46 	bl	800a004 <HAL_GPIO_ReadPin>
 8007178:	4603      	mov	r3, r0
 800717a:	2b01      	cmp	r3, #1
 800717c:	d107      	bne.n	800718e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800717e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007182:	481b      	ldr	r0, [pc, #108]	; (80071f0 <checkAktifCalisma+0x8bc>)
 8007184:	f002 ff3e 	bl	800a004 <HAL_GPIO_ReadPin>
 8007188:	4603      	mov	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	d003      	beq.n	8007196 <checkAktifCalisma+0x862>
 800718e:	4b22      	ldr	r3, [pc, #136]	; (8007218 <checkAktifCalisma+0x8e4>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d048      	beq.n	8007228 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8007196:	4b21      	ldr	r3, [pc, #132]	; (800721c <checkAktifCalisma+0x8e8>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	f083 0301 	eor.w	r3, r3, #1
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d041      	beq.n	8007228 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80071a4:	4b1e      	ldr	r3, [pc, #120]	; (8007220 <checkAktifCalisma+0x8ec>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	f083 0301 	eor.w	r3, r3, #1
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d03a      	beq.n	8007228 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80071b2:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <checkAktifCalisma+0x8f0>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	f083 0301 	eor.w	r3, r3, #1
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d033      	beq.n	8007228 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80071c0:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <checkAktifCalisma+0x8b8>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	f083 0301 	eor.w	r3, r3, #1
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d02c      	beq.n	8007228 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <checkAktifCalisma+0x8b0>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f083 0301 	eor.w	r3, r3, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d025      	beq.n	8007228 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80071dc:	4b0e      	ldr	r3, [pc, #56]	; (8007218 <checkAktifCalisma+0x8e4>)
 80071de:	2201      	movs	r2, #1
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	e024      	b.n	800722e <checkAktifCalisma+0x8fa>
 80071e4:	20000c7f 	.word	0x20000c7f
 80071e8:	40011000 	.word	0x40011000
 80071ec:	20000c83 	.word	0x20000c83
 80071f0:	40010c00 	.word	0x40010c00
 80071f4:	20000c9b 	.word	0x20000c9b
 80071f8:	20000c9c 	.word	0x20000c9c
 80071fc:	20000c7b 	.word	0x20000c7b
 8007200:	20000bd4 	.word	0x20000bd4
 8007204:	20000be0 	.word	0x20000be0
 8007208:	20000c5f 	.word	0x20000c5f
 800720c:	20000c66 	.word	0x20000c66
 8007210:	20000c58 	.word	0x20000c58
 8007214:	20000c5a 	.word	0x20000c5a
 8007218:	20000c80 	.word	0x20000c80
 800721c:	20000c7e 	.word	0x20000c7e
 8007220:	20000c82 	.word	0x20000c82
 8007224:	20000c81 	.word	0x20000c81
		} else {
			devmotorasagicalisiyor=0;
 8007228:	4b96      	ldr	r3, [pc, #600]	; (8007484 <checkAktifCalisma+0xb50>)
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800722e:	4b95      	ldr	r3, [pc, #596]	; (8007484 <checkAktifCalisma+0xb50>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007236:	2201      	movs	r2, #1
 8007238:	2110      	movs	r1, #16
 800723a:	4893      	ldr	r0, [pc, #588]	; (8007488 <checkAktifCalisma+0xb54>)
 800723c:	f002 fef9 	bl	800a032 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8007240:	4b92      	ldr	r3, [pc, #584]	; (800748c <checkAktifCalisma+0xb58>)
 8007242:	2201      	movs	r2, #1
 8007244:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8007246:	4b91      	ldr	r3, [pc, #580]	; (800748c <checkAktifCalisma+0xb58>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d024      	beq.n	8007298 <checkAktifCalisma+0x964>
 800724e:	2140      	movs	r1, #64	; 0x40
 8007250:	488d      	ldr	r0, [pc, #564]	; (8007488 <checkAktifCalisma+0xb54>)
 8007252:	f002 fed7 	bl	800a004 <HAL_GPIO_ReadPin>
 8007256:	4603      	mov	r3, r0
 8007258:	2b01      	cmp	r3, #1
 800725a:	d007      	beq.n	800726c <checkAktifCalisma+0x938>
 800725c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007260:	4889      	ldr	r0, [pc, #548]	; (8007488 <checkAktifCalisma+0xb54>)
 8007262:	f002 fecf 	bl	800a004 <HAL_GPIO_ReadPin>
 8007266:	4603      	mov	r3, r0
 8007268:	2b01      	cmp	r3, #1
 800726a:	d115      	bne.n	8007298 <checkAktifCalisma+0x964>
 800726c:	4b88      	ldr	r3, [pc, #544]	; (8007490 <checkAktifCalisma+0xb5c>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d011      	beq.n	8007298 <checkAktifCalisma+0x964>
 8007274:	4b87      	ldr	r3, [pc, #540]	; (8007494 <checkAktifCalisma+0xb60>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00d      	beq.n	8007298 <checkAktifCalisma+0x964>
 800727c:	4b86      	ldr	r3, [pc, #536]	; (8007498 <checkAktifCalisma+0xb64>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	f083 0301 	eor.w	r3, r3, #1
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d006      	beq.n	8007298 <checkAktifCalisma+0x964>
			timer2=millis;
 800728a:	4b84      	ldr	r3, [pc, #528]	; (800749c <checkAktifCalisma+0xb68>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a84      	ldr	r2, [pc, #528]	; (80074a0 <checkAktifCalisma+0xb6c>)
 8007290:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8007292:	4b81      	ldr	r3, [pc, #516]	; (8007498 <checkAktifCalisma+0xb64>)
 8007294:	2201      	movs	r2, #1
 8007296:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8007298:	4b80      	ldr	r3, [pc, #512]	; (800749c <checkAktifCalisma+0xb68>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4b80      	ldr	r3, [pc, #512]	; (80074a0 <checkAktifCalisma+0xb6c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	4a80      	ldr	r2, [pc, #512]	; (80074a4 <checkAktifCalisma+0xb70>)
 80072a4:	7812      	ldrb	r2, [r2, #0]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d303      	bcc.n	80072b2 <checkAktifCalisma+0x97e>
 80072aa:	4b7b      	ldr	r3, [pc, #492]	; (8007498 <checkAktifCalisma+0xb64>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10d      	bne.n	80072ce <checkAktifCalisma+0x99a>
 80072b2:	4b77      	ldr	r3, [pc, #476]	; (8007490 <checkAktifCalisma+0xb5c>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	f083 0301 	eor.w	r3, r3, #1
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <checkAktifCalisma+0x99a>
 80072c0:	4b74      	ldr	r3, [pc, #464]	; (8007494 <checkAktifCalisma+0xb60>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	f083 0301 	eor.w	r3, r3, #1
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80072ce:	2200      	movs	r2, #0
 80072d0:	2110      	movs	r1, #16
 80072d2:	486d      	ldr	r0, [pc, #436]	; (8007488 <checkAktifCalisma+0xb54>)
 80072d4:	f002 fead 	bl	800a032 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80072d8:	4b6c      	ldr	r3, [pc, #432]	; (800748c <checkAktifCalisma+0xb58>)
 80072da:	2200      	movs	r2, #0
 80072dc:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80072de:	4b6e      	ldr	r3, [pc, #440]	; (8007498 <checkAktifCalisma+0xb64>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80072e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072e8:	486f      	ldr	r0, [pc, #444]	; (80074a8 <checkAktifCalisma+0xb74>)
 80072ea:	f002 fe8b 	bl	800a004 <HAL_GPIO_ReadPin>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d120      	bne.n	8007336 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80072f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80072f8:	486b      	ldr	r0, [pc, #428]	; (80074a8 <checkAktifCalisma+0xb74>)
 80072fa:	f002 fe83 	bl	800a004 <HAL_GPIO_ReadPin>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d118      	bne.n	8007336 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8007304:	2104      	movs	r1, #4
 8007306:	4868      	ldr	r0, [pc, #416]	; (80074a8 <checkAktifCalisma+0xb74>)
 8007308:	f002 fe7c 	bl	800a004 <HAL_GPIO_ReadPin>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d111      	bne.n	8007336 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8007312:	2102      	movs	r1, #2
 8007314:	4864      	ldr	r0, [pc, #400]	; (80074a8 <checkAktifCalisma+0xb74>)
 8007316:	f002 fe75 	bl	800a004 <HAL_GPIO_ReadPin>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8007320:	2101      	movs	r1, #1
 8007322:	4861      	ldr	r0, [pc, #388]	; (80074a8 <checkAktifCalisma+0xb74>)
 8007324:	f002 fe6e 	bl	800a004 <HAL_GPIO_ReadPin>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <checkAktifCalisma+0xa02>
			makineStop=1;
 800732e:	4b5f      	ldr	r3, [pc, #380]	; (80074ac <checkAktifCalisma+0xb78>)
 8007330:	2201      	movs	r2, #1
 8007332:	701a      	strb	r2, [r3, #0]
 8007334:	e002      	b.n	800733c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8007336:	4b5d      	ldr	r3, [pc, #372]	; (80074ac <checkAktifCalisma+0xb78>)
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800733c:	4b5c      	ldr	r3, [pc, #368]	; (80074b0 <checkAktifCalisma+0xb7c>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d144      	bne.n	80073ce <checkAktifCalisma+0xa9a>
 8007344:	4b5b      	ldr	r3, [pc, #364]	; (80074b4 <checkAktifCalisma+0xb80>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d003      	beq.n	8007354 <checkAktifCalisma+0xa20>
 800734c:	4b59      	ldr	r3, [pc, #356]	; (80074b4 <checkAktifCalisma+0xb80>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b03      	cmp	r3, #3
 8007352:	d13c      	bne.n	80073ce <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007354:	2180      	movs	r1, #128	; 0x80
 8007356:	484c      	ldr	r0, [pc, #304]	; (8007488 <checkAktifCalisma+0xb54>)
 8007358:	f002 fe54 	bl	800a004 <HAL_GPIO_ReadPin>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d103      	bne.n	800736a <checkAktifCalisma+0xa36>
 8007362:	4b55      	ldr	r3, [pc, #340]	; (80074b8 <checkAktifCalisma+0xb84>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <checkAktifCalisma+0xa4e>
 800736a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800736e:	484e      	ldr	r0, [pc, #312]	; (80074a8 <checkAktifCalisma+0xb74>)
 8007370:	f002 fe48 	bl	800a004 <HAL_GPIO_ReadPin>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d129      	bne.n	80073ce <checkAktifCalisma+0xa9a>
 800737a:	4b4f      	ldr	r3, [pc, #316]	; (80074b8 <checkAktifCalisma+0xb84>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d125      	bne.n	80073ce <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007382:	2104      	movs	r1, #4
 8007384:	4840      	ldr	r0, [pc, #256]	; (8007488 <checkAktifCalisma+0xb54>)
 8007386:	f002 fe3d 	bl	800a004 <HAL_GPIO_ReadPin>
 800738a:	4603      	mov	r3, r0
 800738c:	2b01      	cmp	r3, #1
 800738e:	d003      	beq.n	8007398 <checkAktifCalisma+0xa64>
 8007390:	4b4a      	ldr	r3, [pc, #296]	; (80074bc <checkAktifCalisma+0xb88>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d11a      	bne.n	80073ce <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007398:	2102      	movs	r1, #2
 800739a:	483b      	ldr	r0, [pc, #236]	; (8007488 <checkAktifCalisma+0xb54>)
 800739c:	f002 fe32 	bl	800a004 <HAL_GPIO_ReadPin>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d113      	bne.n	80073ce <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 80073a6:	4b46      	ldr	r3, [pc, #280]	; (80074c0 <checkAktifCalisma+0xb8c>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f083 0301 	eor.w	r3, r3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00c      	beq.n	80073ce <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80073b4:	4b3d      	ldr	r3, [pc, #244]	; (80074ac <checkAktifCalisma+0xb78>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d008      	beq.n	80073ce <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80073bc:	4b41      	ldr	r3, [pc, #260]	; (80074c4 <checkAktifCalisma+0xb90>)
 80073be:	2201      	movs	r2, #1
 80073c0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80073c2:	4b36      	ldr	r3, [pc, #216]	; (800749c <checkAktifCalisma+0xb68>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a40      	ldr	r2, [pc, #256]	; (80074c8 <checkAktifCalisma+0xb94>)
 80073c8:	6013      	str	r3, [r2, #0]
			bekle();
 80073ca:	f7ff f87d 	bl	80064c8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80073ce:	4b33      	ldr	r3, [pc, #204]	; (800749c <checkAktifCalisma+0xb68>)
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b3d      	ldr	r3, [pc, #244]	; (80074c8 <checkAktifCalisma+0xb94>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	4a3c      	ldr	r2, [pc, #240]	; (80074cc <checkAktifCalisma+0xb98>)
 80073da:	7812      	ldrb	r2, [r2, #0]
 80073dc:	4293      	cmp	r3, r2
 80073de:	d211      	bcs.n	8007404 <checkAktifCalisma+0xad0>
 80073e0:	2104      	movs	r1, #4
 80073e2:	4829      	ldr	r0, [pc, #164]	; (8007488 <checkAktifCalisma+0xb54>)
 80073e4:	f002 fe0e 	bl	800a004 <HAL_GPIO_ReadPin>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <checkAktifCalisma+0xad0>
 80073ee:	4b33      	ldr	r3, [pc, #204]	; (80074bc <checkAktifCalisma+0xb88>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d006      	beq.n	8007404 <checkAktifCalisma+0xad0>
 80073f6:	4b2d      	ldr	r3, [pc, #180]	; (80074ac <checkAktifCalisma+0xb78>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f083 0301 	eor.w	r3, r3, #1
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8007404:	4b2f      	ldr	r3, [pc, #188]	; (80074c4 <checkAktifCalisma+0xb90>)
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800740a:	4b29      	ldr	r3, [pc, #164]	; (80074b0 <checkAktifCalisma+0xb7c>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d160      	bne.n	80074d4 <checkAktifCalisma+0xba0>
 8007412:	4b28      	ldr	r3, [pc, #160]	; (80074b4 <checkAktifCalisma+0xb80>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d003      	beq.n	8007422 <checkAktifCalisma+0xaee>
 800741a:	4b26      	ldr	r3, [pc, #152]	; (80074b4 <checkAktifCalisma+0xb80>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b03      	cmp	r3, #3
 8007420:	d158      	bne.n	80074d4 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007422:	2104      	movs	r1, #4
 8007424:	4818      	ldr	r0, [pc, #96]	; (8007488 <checkAktifCalisma+0xb54>)
 8007426:	f002 fded 	bl	800a004 <HAL_GPIO_ReadPin>
 800742a:	4603      	mov	r3, r0
 800742c:	2b01      	cmp	r3, #1
 800742e:	d003      	beq.n	8007438 <checkAktifCalisma+0xb04>
 8007430:	4b22      	ldr	r3, [pc, #136]	; (80074bc <checkAktifCalisma+0xb88>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d14d      	bne.n	80074d4 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007438:	2102      	movs	r1, #2
 800743a:	4813      	ldr	r0, [pc, #76]	; (8007488 <checkAktifCalisma+0xb54>)
 800743c:	f002 fde2 	bl	800a004 <HAL_GPIO_ReadPin>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d146      	bne.n	80074d4 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007446:	2180      	movs	r1, #128	; 0x80
 8007448:	480f      	ldr	r0, [pc, #60]	; (8007488 <checkAktifCalisma+0xb54>)
 800744a:	f002 fddb 	bl	800a004 <HAL_GPIO_ReadPin>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d103      	bne.n	800745c <checkAktifCalisma+0xb28>
 8007454:	4b18      	ldr	r3, [pc, #96]	; (80074b8 <checkAktifCalisma+0xb84>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <checkAktifCalisma+0xb40>
 800745c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007460:	4811      	ldr	r0, [pc, #68]	; (80074a8 <checkAktifCalisma+0xb74>)
 8007462:	f002 fdcf 	bl	800a004 <HAL_GPIO_ReadPin>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d133      	bne.n	80074d4 <checkAktifCalisma+0xba0>
 800746c:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <checkAktifCalisma+0xb84>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d12f      	bne.n	80074d4 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8007474:	4b0d      	ldr	r3, [pc, #52]	; (80074ac <checkAktifCalisma+0xb78>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d02b      	beq.n	80074d4 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800747c:	4b14      	ldr	r3, [pc, #80]	; (80074d0 <checkAktifCalisma+0xb9c>)
 800747e:	2201      	movs	r2, #1
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	e02a      	b.n	80074da <checkAktifCalisma+0xba6>
 8007484:	20000c80 	.word	0x20000c80
 8007488:	40011000 	.word	0x40011000
 800748c:	20000c84 	.word	0x20000c84
 8007490:	20000c9b 	.word	0x20000c9b
 8007494:	20000c9c 	.word	0x20000c9c
 8007498:	20000c7c 	.word	0x20000c7c
 800749c:	20000bd4 	.word	0x20000bd4
 80074a0:	20000be0 	.word	0x20000be0
 80074a4:	20000c5f 	.word	0x20000c5f
 80074a8:	40010c00 	.word	0x40010c00
 80074ac:	20000c8b 	.word	0x20000c8b
 80074b0:	20000c52 	.word	0x20000c52
 80074b4:	20000c51 	.word	0x20000c51
 80074b8:	20000c55 	.word	0x20000c55
 80074bc:	20000c4f 	.word	0x20000c4f
 80074c0:	20000c78 	.word	0x20000c78
 80074c4:	20000c8c 	.word	0x20000c8c
 80074c8:	20000bd8 	.word	0x20000bd8
 80074cc:	20000c62 	.word	0x20000c62
 80074d0:	20000c8d 	.word	0x20000c8d
		} else {
			kapi1butonkontrol=0;
 80074d4:	4b8b      	ldr	r3, [pc, #556]	; (8007704 <checkAktifCalisma+0xdd0>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80074da:	4b8b      	ldr	r3, [pc, #556]	; (8007708 <checkAktifCalisma+0xdd4>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d121      	bne.n	8007526 <checkAktifCalisma+0xbf2>
 80074e2:	4b8a      	ldr	r3, [pc, #552]	; (800770c <checkAktifCalisma+0xdd8>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d003      	beq.n	80074f2 <checkAktifCalisma+0xbbe>
 80074ea:	4b88      	ldr	r3, [pc, #544]	; (800770c <checkAktifCalisma+0xdd8>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d119      	bne.n	8007526 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80074f2:	2104      	movs	r1, #4
 80074f4:	4886      	ldr	r0, [pc, #536]	; (8007710 <checkAktifCalisma+0xddc>)
 80074f6:	f002 fd85 	bl	800a004 <HAL_GPIO_ReadPin>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d003      	beq.n	8007508 <checkAktifCalisma+0xbd4>
 8007500:	4b84      	ldr	r3, [pc, #528]	; (8007714 <checkAktifCalisma+0xde0>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10e      	bne.n	8007526 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007508:	2102      	movs	r1, #2
 800750a:	4881      	ldr	r0, [pc, #516]	; (8007710 <checkAktifCalisma+0xddc>)
 800750c:	f002 fd7a 	bl	800a004 <HAL_GPIO_ReadPin>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d107      	bne.n	8007526 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8007516:	4b80      	ldr	r3, [pc, #512]	; (8007718 <checkAktifCalisma+0xde4>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800751e:	4b7f      	ldr	r3, [pc, #508]	; (800771c <checkAktifCalisma+0xde8>)
 8007520:	2201      	movs	r2, #1
 8007522:	701a      	strb	r2, [r3, #0]
 8007524:	e002      	b.n	800752c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8007526:	4b7d      	ldr	r3, [pc, #500]	; (800771c <checkAktifCalisma+0xde8>)
 8007528:	2200      	movs	r2, #0
 800752a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800752c:	4b75      	ldr	r3, [pc, #468]	; (8007704 <checkAktifCalisma+0xdd0>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d107      	bne.n	8007544 <checkAktifCalisma+0xc10>
 8007534:	4b79      	ldr	r3, [pc, #484]	; (800771c <checkAktifCalisma+0xde8>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <checkAktifCalisma+0xc10>
 800753c:	4b78      	ldr	r3, [pc, #480]	; (8007720 <checkAktifCalisma+0xdec>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007544:	2201      	movs	r2, #1
 8007546:	2180      	movs	r1, #128	; 0x80
 8007548:	4876      	ldr	r0, [pc, #472]	; (8007724 <checkAktifCalisma+0xdf0>)
 800754a:	f002 fd72 	bl	800a032 <HAL_GPIO_WritePin>
 800754e:	e004      	b.n	800755a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007550:	2200      	movs	r2, #0
 8007552:	2180      	movs	r1, #128	; 0x80
 8007554:	4873      	ldr	r0, [pc, #460]	; (8007724 <checkAktifCalisma+0xdf0>)
 8007556:	f002 fd6c 	bl	800a032 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800755a:	4b73      	ldr	r3, [pc, #460]	; (8007728 <checkAktifCalisma+0xdf4>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d141      	bne.n	80075e6 <checkAktifCalisma+0xcb2>
 8007562:	4b6a      	ldr	r3, [pc, #424]	; (800770c <checkAktifCalisma+0xdd8>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d003      	beq.n	8007572 <checkAktifCalisma+0xc3e>
 800756a:	4b68      	ldr	r3, [pc, #416]	; (800770c <checkAktifCalisma+0xdd8>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2b03      	cmp	r3, #3
 8007570:	d139      	bne.n	80075e6 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007576:	4866      	ldr	r0, [pc, #408]	; (8007710 <checkAktifCalisma+0xddc>)
 8007578:	f002 fd44 	bl	800a004 <HAL_GPIO_ReadPin>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d103      	bne.n	800758a <checkAktifCalisma+0xc56>
 8007582:	4b6a      	ldr	r3, [pc, #424]	; (800772c <checkAktifCalisma+0xdf8>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <checkAktifCalisma+0xc6e>
 800758a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800758e:	4868      	ldr	r0, [pc, #416]	; (8007730 <checkAktifCalisma+0xdfc>)
 8007590:	f002 fd38 	bl	800a004 <HAL_GPIO_ReadPin>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d125      	bne.n	80075e6 <checkAktifCalisma+0xcb2>
 800759a:	4b64      	ldr	r3, [pc, #400]	; (800772c <checkAktifCalisma+0xdf8>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d121      	bne.n	80075e6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80075a2:	2102      	movs	r1, #2
 80075a4:	485a      	ldr	r0, [pc, #360]	; (8007710 <checkAktifCalisma+0xddc>)
 80075a6:	f002 fd2d 	bl	800a004 <HAL_GPIO_ReadPin>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d11a      	bne.n	80075e6 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80075b0:	2104      	movs	r1, #4
 80075b2:	4857      	ldr	r0, [pc, #348]	; (8007710 <checkAktifCalisma+0xddc>)
 80075b4:	f002 fd26 	bl	800a004 <HAL_GPIO_ReadPin>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d113      	bne.n	80075e6 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80075be:	4b56      	ldr	r3, [pc, #344]	; (8007718 <checkAktifCalisma+0xde4>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00f      	beq.n	80075e6 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80075c6:	4b5b      	ldr	r3, [pc, #364]	; (8007734 <checkAktifCalisma+0xe00>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	f083 0301 	eor.w	r3, r3, #1
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d008      	beq.n	80075e6 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80075d4:	4b58      	ldr	r3, [pc, #352]	; (8007738 <checkAktifCalisma+0xe04>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80075da:	4b58      	ldr	r3, [pc, #352]	; (800773c <checkAktifCalisma+0xe08>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a58      	ldr	r2, [pc, #352]	; (8007740 <checkAktifCalisma+0xe0c>)
 80075e0:	6013      	str	r3, [r2, #0]
			bekle();
 80075e2:	f7fe ff71 	bl	80064c8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80075e6:	4b55      	ldr	r3, [pc, #340]	; (800773c <checkAktifCalisma+0xe08>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	4b55      	ldr	r3, [pc, #340]	; (8007740 <checkAktifCalisma+0xe0c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	4a54      	ldr	r2, [pc, #336]	; (8007744 <checkAktifCalisma+0xe10>)
 80075f2:	7812      	ldrb	r2, [r2, #0]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d20d      	bcs.n	8007614 <checkAktifCalisma+0xce0>
 80075f8:	2102      	movs	r1, #2
 80075fa:	4845      	ldr	r0, [pc, #276]	; (8007710 <checkAktifCalisma+0xddc>)
 80075fc:	f002 fd02 	bl	800a004 <HAL_GPIO_ReadPin>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d006      	beq.n	8007614 <checkAktifCalisma+0xce0>
 8007606:	4b44      	ldr	r3, [pc, #272]	; (8007718 <checkAktifCalisma+0xde4>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	f083 0301 	eor.w	r3, r3, #1
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8007614:	4b48      	ldr	r3, [pc, #288]	; (8007738 <checkAktifCalisma+0xe04>)
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800761a:	4b43      	ldr	r3, [pc, #268]	; (8007728 <checkAktifCalisma+0xdf4>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d135      	bne.n	800768e <checkAktifCalisma+0xd5a>
 8007622:	4b3a      	ldr	r3, [pc, #232]	; (800770c <checkAktifCalisma+0xdd8>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d003      	beq.n	8007632 <checkAktifCalisma+0xcfe>
 800762a:	4b38      	ldr	r3, [pc, #224]	; (800770c <checkAktifCalisma+0xdd8>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b03      	cmp	r3, #3
 8007630:	d12d      	bne.n	800768e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007636:	4836      	ldr	r0, [pc, #216]	; (8007710 <checkAktifCalisma+0xddc>)
 8007638:	f002 fce4 	bl	800a004 <HAL_GPIO_ReadPin>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d103      	bne.n	800764a <checkAktifCalisma+0xd16>
 8007642:	4b3a      	ldr	r3, [pc, #232]	; (800772c <checkAktifCalisma+0xdf8>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00b      	beq.n	8007662 <checkAktifCalisma+0xd2e>
 800764a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800764e:	4838      	ldr	r0, [pc, #224]	; (8007730 <checkAktifCalisma+0xdfc>)
 8007650:	f002 fcd8 	bl	800a004 <HAL_GPIO_ReadPin>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d119      	bne.n	800768e <checkAktifCalisma+0xd5a>
 800765a:	4b34      	ldr	r3, [pc, #208]	; (800772c <checkAktifCalisma+0xdf8>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d115      	bne.n	800768e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007662:	2102      	movs	r1, #2
 8007664:	482a      	ldr	r0, [pc, #168]	; (8007710 <checkAktifCalisma+0xddc>)
 8007666:	f002 fccd 	bl	800a004 <HAL_GPIO_ReadPin>
 800766a:	4603      	mov	r3, r0
 800766c:	2b01      	cmp	r3, #1
 800766e:	d10e      	bne.n	800768e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007670:	2104      	movs	r1, #4
 8007672:	4827      	ldr	r0, [pc, #156]	; (8007710 <checkAktifCalisma+0xddc>)
 8007674:	f002 fcc6 	bl	800a004 <HAL_GPIO_ReadPin>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d107      	bne.n	800768e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800767e:	4b26      	ldr	r3, [pc, #152]	; (8007718 <checkAktifCalisma+0xde4>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d003      	beq.n	800768e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8007686:	4b30      	ldr	r3, [pc, #192]	; (8007748 <checkAktifCalisma+0xe14>)
 8007688:	2201      	movs	r2, #1
 800768a:	701a      	strb	r2, [r3, #0]
 800768c:	e002      	b.n	8007694 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800768e:	4b2e      	ldr	r3, [pc, #184]	; (8007748 <checkAktifCalisma+0xe14>)
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007694:	4b24      	ldr	r3, [pc, #144]	; (8007728 <checkAktifCalisma+0xdf4>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d11d      	bne.n	80076d8 <checkAktifCalisma+0xda4>
 800769c:	4b1b      	ldr	r3, [pc, #108]	; (800770c <checkAktifCalisma+0xdd8>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d003      	beq.n	80076ac <checkAktifCalisma+0xd78>
 80076a4:	4b19      	ldr	r3, [pc, #100]	; (800770c <checkAktifCalisma+0xdd8>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d115      	bne.n	80076d8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80076ac:	2102      	movs	r1, #2
 80076ae:	4818      	ldr	r0, [pc, #96]	; (8007710 <checkAktifCalisma+0xddc>)
 80076b0:	f002 fca8 	bl	800a004 <HAL_GPIO_ReadPin>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d10e      	bne.n	80076d8 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80076ba:	2104      	movs	r1, #4
 80076bc:	4814      	ldr	r0, [pc, #80]	; (8007710 <checkAktifCalisma+0xddc>)
 80076be:	f002 fca1 	bl	800a004 <HAL_GPIO_ReadPin>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d107      	bne.n	80076d8 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80076c8:	4b13      	ldr	r3, [pc, #76]	; (8007718 <checkAktifCalisma+0xde4>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80076d0:	4b1e      	ldr	r3, [pc, #120]	; (800774c <checkAktifCalisma+0xe18>)
 80076d2:	2201      	movs	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	e002      	b.n	80076de <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80076d8:	4b1c      	ldr	r3, [pc, #112]	; (800774c <checkAktifCalisma+0xe18>)
 80076da:	2200      	movs	r2, #0
 80076dc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80076de:	4b1a      	ldr	r3, [pc, #104]	; (8007748 <checkAktifCalisma+0xe14>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d107      	bne.n	80076f6 <checkAktifCalisma+0xdc2>
 80076e6:	4b19      	ldr	r3, [pc, #100]	; (800774c <checkAktifCalisma+0xe18>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d103      	bne.n	80076f6 <checkAktifCalisma+0xdc2>
 80076ee:	4b12      	ldr	r3, [pc, #72]	; (8007738 <checkAktifCalisma+0xe04>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d02c      	beq.n	8007750 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80076f6:	2201      	movs	r2, #1
 80076f8:	2140      	movs	r1, #64	; 0x40
 80076fa:	480a      	ldr	r0, [pc, #40]	; (8007724 <checkAktifCalisma+0xdf0>)
 80076fc:	f002 fc99 	bl	800a032 <HAL_GPIO_WritePin>
 8007700:	e02b      	b.n	800775a <checkAktifCalisma+0xe26>
 8007702:	bf00      	nop
 8007704:	20000c8d 	.word	0x20000c8d
 8007708:	20000c52 	.word	0x20000c52
 800770c:	20000c51 	.word	0x20000c51
 8007710:	40011000 	.word	0x40011000
 8007714:	20000c4f 	.word	0x20000c4f
 8007718:	20000c8b 	.word	0x20000c8b
 800771c:	20000c8e 	.word	0x20000c8e
 8007720:	20000c8c 	.word	0x20000c8c
 8007724:	40010800 	.word	0x40010800
 8007728:	20000c53 	.word	0x20000c53
 800772c:	20000c55 	.word	0x20000c55
 8007730:	40010c00 	.word	0x40010c00
 8007734:	20000c78 	.word	0x20000c78
 8007738:	20000c8f 	.word	0x20000c8f
 800773c:	20000bd4 	.word	0x20000bd4
 8007740:	20000bd8 	.word	0x20000bd8
 8007744:	20000c63 	.word	0x20000c63
 8007748:	20000c90 	.word	0x20000c90
 800774c:	20000c91 	.word	0x20000c91
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007750:	2200      	movs	r2, #0
 8007752:	2140      	movs	r1, #64	; 0x40
 8007754:	488d      	ldr	r0, [pc, #564]	; (800798c <checkAktifCalisma+0x1058>)
 8007756:	f002 fc6c 	bl	800a032 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800775a:	4b8d      	ldr	r3, [pc, #564]	; (8007990 <checkAktifCalisma+0x105c>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <checkAktifCalisma+0xe36>
 8007762:	4b8b      	ldr	r3, [pc, #556]	; (8007990 <checkAktifCalisma+0x105c>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d115      	bne.n	8007796 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800776a:	2104      	movs	r1, #4
 800776c:	4889      	ldr	r0, [pc, #548]	; (8007994 <checkAktifCalisma+0x1060>)
 800776e:	f002 fc49 	bl	800a004 <HAL_GPIO_ReadPin>
 8007772:	4603      	mov	r3, r0
 8007774:	2b01      	cmp	r3, #1
 8007776:	d003      	beq.n	8007780 <checkAktifCalisma+0xe4c>
 8007778:	4b87      	ldr	r3, [pc, #540]	; (8007998 <checkAktifCalisma+0x1064>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007780:	2102      	movs	r1, #2
 8007782:	4884      	ldr	r0, [pc, #528]	; (8007994 <checkAktifCalisma+0x1060>)
 8007784:	f002 fc3e 	bl	800a004 <HAL_GPIO_ReadPin>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 800778e:	4b83      	ldr	r3, [pc, #524]	; (800799c <checkAktifCalisma+0x1068>)
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	e002      	b.n	800779c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8007796:	4b81      	ldr	r3, [pc, #516]	; (800799c <checkAktifCalisma+0x1068>)
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800779c:	4b7c      	ldr	r3, [pc, #496]	; (8007990 <checkAktifCalisma+0x105c>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d003      	beq.n	80077ac <checkAktifCalisma+0xe78>
 80077a4:	4b7a      	ldr	r3, [pc, #488]	; (8007990 <checkAktifCalisma+0x105c>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d111      	bne.n	80077d0 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80077ac:	2102      	movs	r1, #2
 80077ae:	4879      	ldr	r0, [pc, #484]	; (8007994 <checkAktifCalisma+0x1060>)
 80077b0:	f002 fc28 	bl	800a004 <HAL_GPIO_ReadPin>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d10a      	bne.n	80077d0 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80077ba:	2104      	movs	r1, #4
 80077bc:	4875      	ldr	r0, [pc, #468]	; (8007994 <checkAktifCalisma+0x1060>)
 80077be:	f002 fc21 	bl	800a004 <HAL_GPIO_ReadPin>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d103      	bne.n	80077d0 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80077c8:	4b75      	ldr	r3, [pc, #468]	; (80079a0 <checkAktifCalisma+0x106c>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	e002      	b.n	80077d6 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80077d0:	4b73      	ldr	r3, [pc, #460]	; (80079a0 <checkAktifCalisma+0x106c>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80077d6:	4b71      	ldr	r3, [pc, #452]	; (800799c <checkAktifCalisma+0x1068>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00f      	beq.n	80077fe <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80077de:	4b71      	ldr	r3, [pc, #452]	; (80079a4 <checkAktifCalisma+0x1070>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d10b      	bne.n	80077fe <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80077e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80077ea:	486f      	ldr	r0, [pc, #444]	; (80079a8 <checkAktifCalisma+0x1074>)
 80077ec:	f002 fc0a 	bl	800a004 <HAL_GPIO_ReadPin>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d103      	bne.n	80077fe <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80077f6:	4b6d      	ldr	r3, [pc, #436]	; (80079ac <checkAktifCalisma+0x1078>)
 80077f8:	2201      	movs	r2, #1
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	e002      	b.n	8007804 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80077fe:	4b6b      	ldr	r3, [pc, #428]	; (80079ac <checkAktifCalisma+0x1078>)
 8007800:	2200      	movs	r2, #0
 8007802:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8007804:	4b66      	ldr	r3, [pc, #408]	; (80079a0 <checkAktifCalisma+0x106c>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00f      	beq.n	800782c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 800780c:	4b65      	ldr	r3, [pc, #404]	; (80079a4 <checkAktifCalisma+0x1070>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d10b      	bne.n	800782c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007818:	4863      	ldr	r0, [pc, #396]	; (80079a8 <checkAktifCalisma+0x1074>)
 800781a:	f002 fbf3 	bl	800a004 <HAL_GPIO_ReadPin>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d103      	bne.n	800782c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8007824:	4b62      	ldr	r3, [pc, #392]	; (80079b0 <checkAktifCalisma+0x107c>)
 8007826:	2201      	movs	r2, #1
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	e002      	b.n	8007832 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 800782c:	4b60      	ldr	r3, [pc, #384]	; (80079b0 <checkAktifCalisma+0x107c>)
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007832:	4b60      	ldr	r3, [pc, #384]	; (80079b4 <checkAktifCalisma+0x1080>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d137      	bne.n	80078aa <checkAktifCalisma+0xf76>
 800783a:	4b5f      	ldr	r3, [pc, #380]	; (80079b8 <checkAktifCalisma+0x1084>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d003      	beq.n	800784a <checkAktifCalisma+0xf16>
 8007842:	4b5d      	ldr	r3, [pc, #372]	; (80079b8 <checkAktifCalisma+0x1084>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b03      	cmp	r3, #3
 8007848:	d12f      	bne.n	80078aa <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800784a:	4b54      	ldr	r3, [pc, #336]	; (800799c <checkAktifCalisma+0x1068>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <checkAktifCalisma+0xf26>
 8007852:	4b53      	ldr	r3, [pc, #332]	; (80079a0 <checkAktifCalisma+0x106c>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d027      	beq.n	80078aa <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800785a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800785e:	484d      	ldr	r0, [pc, #308]	; (8007994 <checkAktifCalisma+0x1060>)
 8007860:	f002 fbd0 	bl	800a004 <HAL_GPIO_ReadPin>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <checkAktifCalisma+0xf3e>
 800786a:	4b4e      	ldr	r3, [pc, #312]	; (80079a4 <checkAktifCalisma+0x1070>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007872:	4b4e      	ldr	r3, [pc, #312]	; (80079ac <checkAktifCalisma+0x1078>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d103      	bne.n	8007882 <checkAktifCalisma+0xf4e>
 800787a:	4b4d      	ldr	r3, [pc, #308]	; (80079b0 <checkAktifCalisma+0x107c>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d013      	beq.n	80078aa <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8007882:	4b4e      	ldr	r3, [pc, #312]	; (80079bc <checkAktifCalisma+0x1088>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00f      	beq.n	80078aa <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800788a:	4b4d      	ldr	r3, [pc, #308]	; (80079c0 <checkAktifCalisma+0x108c>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	f083 0301 	eor.w	r3, r3, #1
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d008      	beq.n	80078aa <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007898:	4b4a      	ldr	r3, [pc, #296]	; (80079c4 <checkAktifCalisma+0x1090>)
 800789a:	2201      	movs	r2, #1
 800789c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800789e:	4b4a      	ldr	r3, [pc, #296]	; (80079c8 <checkAktifCalisma+0x1094>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a4a      	ldr	r2, [pc, #296]	; (80079cc <checkAktifCalisma+0x1098>)
 80078a4:	6013      	str	r3, [r2, #0]
			bekle();
 80078a6:	f7fe fe0f 	bl	80064c8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80078aa:	4b47      	ldr	r3, [pc, #284]	; (80079c8 <checkAktifCalisma+0x1094>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b47      	ldr	r3, [pc, #284]	; (80079cc <checkAktifCalisma+0x1098>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	4a46      	ldr	r2, [pc, #280]	; (80079d0 <checkAktifCalisma+0x109c>)
 80078b6:	7812      	ldrb	r2, [r2, #0]
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d214      	bcs.n	80078e6 <checkAktifCalisma+0xfb2>
 80078bc:	4b37      	ldr	r3, [pc, #220]	; (800799c <checkAktifCalisma+0x1068>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f083 0301 	eor.w	r3, r3, #1
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d006      	beq.n	80078d8 <checkAktifCalisma+0xfa4>
 80078ca:	4b35      	ldr	r3, [pc, #212]	; (80079a0 <checkAktifCalisma+0x106c>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	f083 0301 	eor.w	r3, r3, #1
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d106      	bne.n	80078e6 <checkAktifCalisma+0xfb2>
 80078d8:	4b38      	ldr	r3, [pc, #224]	; (80079bc <checkAktifCalisma+0x1088>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	f083 0301 	eor.w	r3, r3, #1
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80078e6:	4b37      	ldr	r3, [pc, #220]	; (80079c4 <checkAktifCalisma+0x1090>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80078ec:	4b31      	ldr	r3, [pc, #196]	; (80079b4 <checkAktifCalisma+0x1080>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d12b      	bne.n	800794c <checkAktifCalisma+0x1018>
 80078f4:	4b30      	ldr	r3, [pc, #192]	; (80079b8 <checkAktifCalisma+0x1084>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d003      	beq.n	8007904 <checkAktifCalisma+0xfd0>
 80078fc:	4b2e      	ldr	r3, [pc, #184]	; (80079b8 <checkAktifCalisma+0x1084>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d123      	bne.n	800794c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007904:	4b25      	ldr	r3, [pc, #148]	; (800799c <checkAktifCalisma+0x1068>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d103      	bne.n	8007914 <checkAktifCalisma+0xfe0>
 800790c:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <checkAktifCalisma+0x106c>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d01b      	beq.n	800794c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007918:	481e      	ldr	r0, [pc, #120]	; (8007994 <checkAktifCalisma+0x1060>)
 800791a:	f002 fb73 	bl	800a004 <HAL_GPIO_ReadPin>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <checkAktifCalisma+0xff8>
 8007924:	4b1f      	ldr	r3, [pc, #124]	; (80079a4 <checkAktifCalisma+0x1070>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d007      	beq.n	800793c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800792c:	4b1f      	ldr	r3, [pc, #124]	; (80079ac <checkAktifCalisma+0x1078>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <checkAktifCalisma+0x1008>
 8007934:	4b1e      	ldr	r3, [pc, #120]	; (80079b0 <checkAktifCalisma+0x107c>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d007      	beq.n	800794c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 800793c:	4b1f      	ldr	r3, [pc, #124]	; (80079bc <checkAktifCalisma+0x1088>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007944:	4b23      	ldr	r3, [pc, #140]	; (80079d4 <checkAktifCalisma+0x10a0>)
 8007946:	2201      	movs	r2, #1
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e002      	b.n	8007952 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 800794c:	4b21      	ldr	r3, [pc, #132]	; (80079d4 <checkAktifCalisma+0x10a0>)
 800794e:	2200      	movs	r2, #0
 8007950:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007952:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <checkAktifCalisma+0x1080>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d140      	bne.n	80079dc <checkAktifCalisma+0x10a8>
 800795a:	4b17      	ldr	r3, [pc, #92]	; (80079b8 <checkAktifCalisma+0x1084>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b02      	cmp	r3, #2
 8007960:	d003      	beq.n	800796a <checkAktifCalisma+0x1036>
 8007962:	4b15      	ldr	r3, [pc, #84]	; (80079b8 <checkAktifCalisma+0x1084>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b03      	cmp	r3, #3
 8007968:	d138      	bne.n	80079dc <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800796a:	4b0c      	ldr	r3, [pc, #48]	; (800799c <checkAktifCalisma+0x1068>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d103      	bne.n	800797a <checkAktifCalisma+0x1046>
 8007972:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <checkAktifCalisma+0x106c>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d030      	beq.n	80079dc <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800797a:	4b10      	ldr	r3, [pc, #64]	; (80079bc <checkAktifCalisma+0x1088>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d02c      	beq.n	80079dc <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <checkAktifCalisma+0x10a4>)
 8007984:	2201      	movs	r2, #1
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	e02b      	b.n	80079e2 <checkAktifCalisma+0x10ae>
 800798a:	bf00      	nop
 800798c:	40010800 	.word	0x40010800
 8007990:	20000c56 	.word	0x20000c56
 8007994:	40011000 	.word	0x40011000
 8007998:	20000c4f 	.word	0x20000c4f
 800799c:	20000c95 	.word	0x20000c95
 80079a0:	20000c96 	.word	0x20000c96
 80079a4:	20000c55 	.word	0x20000c55
 80079a8:	40010c00 	.word	0x40010c00
 80079ac:	20000ca5 	.word	0x20000ca5
 80079b0:	20000ca6 	.word	0x20000ca6
 80079b4:	20000c54 	.word	0x20000c54
 80079b8:	20000c51 	.word	0x20000c51
 80079bc:	20000c8b 	.word	0x20000c8b
 80079c0:	20000c78 	.word	0x20000c78
 80079c4:	20000c92 	.word	0x20000c92
 80079c8:	20000bd4 	.word	0x20000bd4
 80079cc:	20000bd8 	.word	0x20000bd8
 80079d0:	20000c64 	.word	0x20000c64
 80079d4:	20000c93 	.word	0x20000c93
 80079d8:	20000c94 	.word	0x20000c94
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80079dc:	4b89      	ldr	r3, [pc, #548]	; (8007c04 <checkAktifCalisma+0x12d0>)
 80079de:	2200      	movs	r2, #0
 80079e0:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80079e2:	4b89      	ldr	r3, [pc, #548]	; (8007c08 <checkAktifCalisma+0x12d4>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d107      	bne.n	80079fa <checkAktifCalisma+0x10c6>
 80079ea:	4b88      	ldr	r3, [pc, #544]	; (8007c0c <checkAktifCalisma+0x12d8>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d103      	bne.n	80079fa <checkAktifCalisma+0x10c6>
 80079f2:	4b84      	ldr	r3, [pc, #528]	; (8007c04 <checkAktifCalisma+0x12d0>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d005      	beq.n	8007a06 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80079fa:	2201      	movs	r2, #1
 80079fc:	2120      	movs	r1, #32
 80079fe:	4884      	ldr	r0, [pc, #528]	; (8007c10 <checkAktifCalisma+0x12dc>)
 8007a00:	f002 fb17 	bl	800a032 <HAL_GPIO_WritePin>
 8007a04:	e004      	b.n	8007a10 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007a06:	2200      	movs	r2, #0
 8007a08:	2120      	movs	r1, #32
 8007a0a:	4881      	ldr	r0, [pc, #516]	; (8007c10 <checkAktifCalisma+0x12dc>)
 8007a0c:	f002 fb11 	bl	800a032 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8007a10:	4b80      	ldr	r3, [pc, #512]	; (8007c14 <checkAktifCalisma+0x12e0>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00e      	beq.n	8007a36 <checkAktifCalisma+0x1102>
 8007a18:	2102      	movs	r1, #2
 8007a1a:	487f      	ldr	r0, [pc, #508]	; (8007c18 <checkAktifCalisma+0x12e4>)
 8007a1c:	f002 faf2 	bl	800a004 <HAL_GPIO_ReadPin>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d107      	bne.n	8007a36 <checkAktifCalisma+0x1102>
 8007a26:	4b7d      	ldr	r3, [pc, #500]	; (8007c1c <checkAktifCalisma+0x12e8>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <checkAktifCalisma+0x1102>
 8007a2e:	4b7c      	ldr	r3, [pc, #496]	; (8007c20 <checkAktifCalisma+0x12ec>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d112      	bne.n	8007a5c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8007a36:	4b7b      	ldr	r3, [pc, #492]	; (8007c24 <checkAktifCalisma+0x12f0>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d066      	beq.n	8007b0c <checkAktifCalisma+0x11d8>
 8007a3e:	2104      	movs	r1, #4
 8007a40:	4875      	ldr	r0, [pc, #468]	; (8007c18 <checkAktifCalisma+0x12e4>)
 8007a42:	f002 fadf 	bl	800a004 <HAL_GPIO_ReadPin>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d15f      	bne.n	8007b0c <checkAktifCalisma+0x11d8>
 8007a4c:	4b73      	ldr	r3, [pc, #460]	; (8007c1c <checkAktifCalisma+0x12e8>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d05b      	beq.n	8007b0c <checkAktifCalisma+0x11d8>
 8007a54:	4b72      	ldr	r3, [pc, #456]	; (8007c20 <checkAktifCalisma+0x12ec>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d057      	beq.n	8007b0c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007a5c:	4b72      	ldr	r3, [pc, #456]	; (8007c28 <checkAktifCalisma+0x12f4>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	4b70      	ldr	r3, [pc, #448]	; (8007c28 <checkAktifCalisma+0x12f4>)
 8007a66:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007a68:	4b6f      	ldr	r3, [pc, #444]	; (8007c28 <checkAktifCalisma+0x12f4>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b09      	cmp	r3, #9
 8007a6e:	d908      	bls.n	8007a82 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007a70:	4b6d      	ldr	r3, [pc, #436]	; (8007c28 <checkAktifCalisma+0x12f4>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8007a76:	4b6d      	ldr	r3, [pc, #436]	; (8007c2c <checkAktifCalisma+0x12f8>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	4b6b      	ldr	r3, [pc, #428]	; (8007c2c <checkAktifCalisma+0x12f8>)
 8007a80:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8007a82:	4b6a      	ldr	r3, [pc, #424]	; (8007c2c <checkAktifCalisma+0x12f8>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b09      	cmp	r3, #9
 8007a88:	d908      	bls.n	8007a9c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8007a8a:	4b68      	ldr	r3, [pc, #416]	; (8007c2c <checkAktifCalisma+0x12f8>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007a90:	4b67      	ldr	r3, [pc, #412]	; (8007c30 <checkAktifCalisma+0x12fc>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	3301      	adds	r3, #1
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	4b65      	ldr	r3, [pc, #404]	; (8007c30 <checkAktifCalisma+0x12fc>)
 8007a9a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007a9c:	4b64      	ldr	r3, [pc, #400]	; (8007c30 <checkAktifCalisma+0x12fc>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b09      	cmp	r3, #9
 8007aa2:	d908      	bls.n	8007ab6 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007aa4:	4b62      	ldr	r3, [pc, #392]	; (8007c30 <checkAktifCalisma+0x12fc>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8007aaa:	4b62      	ldr	r3, [pc, #392]	; (8007c34 <checkAktifCalisma+0x1300>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	4b60      	ldr	r3, [pc, #384]	; (8007c34 <checkAktifCalisma+0x1300>)
 8007ab4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8007ab6:	4b5f      	ldr	r3, [pc, #380]	; (8007c34 <checkAktifCalisma+0x1300>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b09      	cmp	r3, #9
 8007abc:	d908      	bls.n	8007ad0 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8007abe:	4b5d      	ldr	r3, [pc, #372]	; (8007c34 <checkAktifCalisma+0x1300>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007ac4:	4b5c      	ldr	r3, [pc, #368]	; (8007c38 <checkAktifCalisma+0x1304>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	4b5a      	ldr	r3, [pc, #360]	; (8007c38 <checkAktifCalisma+0x1304>)
 8007ace:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007ad0:	4b59      	ldr	r3, [pc, #356]	; (8007c38 <checkAktifCalisma+0x1304>)
 8007ad2:	781a      	ldrb	r2, [r3, #0]
 8007ad4:	4b59      	ldr	r3, [pc, #356]	; (8007c3c <checkAktifCalisma+0x1308>)
 8007ad6:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007ada:	4b56      	ldr	r3, [pc, #344]	; (8007c34 <checkAktifCalisma+0x1300>)
 8007adc:	781a      	ldrb	r2, [r3, #0]
 8007ade:	4b57      	ldr	r3, [pc, #348]	; (8007c3c <checkAktifCalisma+0x1308>)
 8007ae0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007ae2:	4b53      	ldr	r3, [pc, #332]	; (8007c30 <checkAktifCalisma+0x12fc>)
 8007ae4:	781a      	ldrb	r2, [r3, #0]
 8007ae6:	4b55      	ldr	r3, [pc, #340]	; (8007c3c <checkAktifCalisma+0x1308>)
 8007ae8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007aea:	4b50      	ldr	r3, [pc, #320]	; (8007c2c <checkAktifCalisma+0x12f8>)
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	4b53      	ldr	r3, [pc, #332]	; (8007c3c <checkAktifCalisma+0x1308>)
 8007af0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007af2:	4b4d      	ldr	r3, [pc, #308]	; (8007c28 <checkAktifCalisma+0x12f4>)
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	4b51      	ldr	r3, [pc, #324]	; (8007c3c <checkAktifCalisma+0x1308>)
 8007af8:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8007afa:	4b51      	ldr	r3, [pc, #324]	; (8007c40 <checkAktifCalisma+0x130c>)
 8007afc:	2201      	movs	r2, #1
 8007afe:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007b00:	4b44      	ldr	r3, [pc, #272]	; (8007c14 <checkAktifCalisma+0x12e0>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8007b06:	4b47      	ldr	r3, [pc, #284]	; (8007c24 <checkAktifCalisma+0x12f0>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b10:	484c      	ldr	r0, [pc, #304]	; (8007c44 <checkAktifCalisma+0x1310>)
 8007b12:	f002 fa77 	bl	800a004 <HAL_GPIO_ReadPin>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d016      	beq.n	8007b4a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b20:	4848      	ldr	r0, [pc, #288]	; (8007c44 <checkAktifCalisma+0x1310>)
 8007b22:	f002 fa6f 	bl	800a004 <HAL_GPIO_ReadPin>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00e      	beq.n	8007b4a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b30:	4844      	ldr	r0, [pc, #272]	; (8007c44 <checkAktifCalisma+0x1310>)
 8007b32:	f002 fa67 	bl	800a004 <HAL_GPIO_ReadPin>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d006      	beq.n	8007b4a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007b3c:	2140      	movs	r1, #64	; 0x40
 8007b3e:	4836      	ldr	r0, [pc, #216]	; (8007c18 <checkAktifCalisma+0x12e4>)
 8007b40:	f002 fa60 	bl	800a004 <HAL_GPIO_ReadPin>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d103      	bne.n	8007b52 <checkAktifCalisma+0x121e>
			startBasili=1;
 8007b4a:	4b3f      	ldr	r3, [pc, #252]	; (8007c48 <checkAktifCalisma+0x1314>)
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	701a      	strb	r2, [r3, #0]
 8007b50:	e002      	b.n	8007b58 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007b52:	4b3d      	ldr	r3, [pc, #244]	; (8007c48 <checkAktifCalisma+0x1314>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007b58:	4b3b      	ldr	r3, [pc, #236]	; (8007c48 <checkAktifCalisma+0x1314>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d014      	beq.n	8007b8a <checkAktifCalisma+0x1256>
 8007b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b64:	4837      	ldr	r0, [pc, #220]	; (8007c44 <checkAktifCalisma+0x1310>)
 8007b66:	f002 fa4d 	bl	800a004 <HAL_GPIO_ReadPin>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d10c      	bne.n	8007b8a <checkAktifCalisma+0x1256>
			hataVar=1;
 8007b70:	4b36      	ldr	r3, [pc, #216]	; (8007c4c <checkAktifCalisma+0x1318>)
 8007b72:	2201      	movs	r2, #1
 8007b74:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8007b76:	2001      	movs	r0, #1
 8007b78:	f7fe f874 	bl	8005c64 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007b7c:	2001      	movs	r0, #1
 8007b7e:	f7fe fc27 	bl	80063d0 <hata2EEPROM>
			acilstophatasi=1;
 8007b82:	4b33      	ldr	r3, [pc, #204]	; (8007c50 <checkAktifCalisma+0x131c>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	e018      	b.n	8007bbc <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8007b8a:	4b31      	ldr	r3, [pc, #196]	; (8007c50 <checkAktifCalisma+0x131c>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d014      	beq.n	8007bbc <checkAktifCalisma+0x1288>
 8007b92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b96:	482b      	ldr	r0, [pc, #172]	; (8007c44 <checkAktifCalisma+0x1310>)
 8007b98:	f002 fa34 	bl	800a004 <HAL_GPIO_ReadPin>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10c      	bne.n	8007bbc <checkAktifCalisma+0x1288>
 8007ba2:	4b29      	ldr	r3, [pc, #164]	; (8007c48 <checkAktifCalisma+0x1314>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	f083 0301 	eor.w	r3, r3, #1
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007bb0:	4b27      	ldr	r3, [pc, #156]	; (8007c50 <checkAktifCalisma+0x131c>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	f7fe f800 	bl	8005bbc <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007bbc:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <checkAktifCalisma+0x1320>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	f083 0301 	eor.w	r3, r3, #1
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d04c      	beq.n	8007c64 <checkAktifCalisma+0x1330>
 8007bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007bce:	481d      	ldr	r0, [pc, #116]	; (8007c44 <checkAktifCalisma+0x1310>)
 8007bd0:	f002 fa18 	bl	800a004 <HAL_GPIO_ReadPin>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <checkAktifCalisma+0x12ae>
 8007bda:	4b1f      	ldr	r3, [pc, #124]	; (8007c58 <checkAktifCalisma+0x1324>)
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d040      	beq.n	8007c64 <checkAktifCalisma+0x1330>
 8007be2:	4b1e      	ldr	r3, [pc, #120]	; (8007c5c <checkAktifCalisma+0x1328>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d13c      	bne.n	8007c64 <checkAktifCalisma+0x1330>
			hataVar=1;
 8007bea:	4b18      	ldr	r3, [pc, #96]	; (8007c4c <checkAktifCalisma+0x1318>)
 8007bec:	2201      	movs	r2, #1
 8007bee:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8007bf0:	2002      	movs	r0, #2
 8007bf2:	f7fe f837 	bl	8005c64 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007bf6:	2002      	movs	r0, #2
 8007bf8:	f7fe fbea 	bl	80063d0 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8007bfc:	4b18      	ldr	r3, [pc, #96]	; (8007c60 <checkAktifCalisma+0x132c>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	e047      	b.n	8007c94 <checkAktifCalisma+0x1360>
 8007c04:	20000c94 	.word	0x20000c94
 8007c08:	20000c93 	.word	0x20000c93
 8007c0c:	20000c92 	.word	0x20000c92
 8007c10:	40010800 	.word	0x40010800
 8007c14:	20000c88 	.word	0x20000c88
 8007c18:	40011000 	.word	0x40011000
 8007c1c:	20000c4f 	.word	0x20000c4f
 8007c20:	20000c8b 	.word	0x20000c8b
 8007c24:	20000c89 	.word	0x20000c89
 8007c28:	20000c46 	.word	0x20000c46
 8007c2c:	20000c47 	.word	0x20000c47
 8007c30:	200009c2 	.word	0x200009c2
 8007c34:	200009c3 	.word	0x200009c3
 8007c38:	20000c48 	.word	0x20000c48
 8007c3c:	20000b38 	.word	0x20000b38
 8007c40:	20000c75 	.word	0x20000c75
 8007c44:	40010c00 	.word	0x40010c00
 8007c48:	20000c97 	.word	0x20000c97
 8007c4c:	20000c9e 	.word	0x20000c9e
 8007c50:	20000c99 	.word	0x20000c99
 8007c54:	20000ca0 	.word	0x20000ca0
 8007c58:	20000caa 	.word	0x20000caa
 8007c5c:	20000c4d 	.word	0x20000c4d
 8007c60:	20000c9a 	.word	0x20000c9a
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007c64:	4b97      	ldr	r3, [pc, #604]	; (8007ec4 <checkAktifCalisma+0x1590>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d013      	beq.n	8007c94 <checkAktifCalisma+0x1360>
 8007c6c:	4b96      	ldr	r3, [pc, #600]	; (8007ec8 <checkAktifCalisma+0x1594>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00f      	beq.n	8007c94 <checkAktifCalisma+0x1360>
 8007c74:	4b95      	ldr	r3, [pc, #596]	; (8007ecc <checkAktifCalisma+0x1598>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f083 0301 	eor.w	r3, r3, #1
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d008      	beq.n	8007c94 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007c82:	4b90      	ldr	r3, [pc, #576]	; (8007ec4 <checkAktifCalisma+0x1590>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007c88:	4b91      	ldr	r3, [pc, #580]	; (8007ed0 <checkAktifCalisma+0x159c>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007c8e:	2002      	movs	r0, #2
 8007c90:	f7fd ff94 	bl	8005bbc <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007c94:	4b8f      	ldr	r3, [pc, #572]	; (8007ed4 <checkAktifCalisma+0x15a0>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d11c      	bne.n	8007cd6 <checkAktifCalisma+0x13a2>
 8007c9c:	4b8e      	ldr	r3, [pc, #568]	; (8007ed8 <checkAktifCalisma+0x15a4>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d118      	bne.n	8007cd6 <checkAktifCalisma+0x13a2>
 8007ca4:	4b8d      	ldr	r3, [pc, #564]	; (8007edc <checkAktifCalisma+0x15a8>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d014      	beq.n	8007cd6 <checkAktifCalisma+0x13a2>
 8007cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cb0:	488b      	ldr	r0, [pc, #556]	; (8007ee0 <checkAktifCalisma+0x15ac>)
 8007cb2:	f002 f9a7 	bl	800a004 <HAL_GPIO_ReadPin>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d10c      	bne.n	8007cd6 <checkAktifCalisma+0x13a2>
			hataVar=1;
 8007cbc:	4b89      	ldr	r3, [pc, #548]	; (8007ee4 <checkAktifCalisma+0x15b0>)
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007cc2:	2003      	movs	r0, #3
 8007cc4:	f7fd ffce 	bl	8005c64 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007cc8:	2003      	movs	r0, #3
 8007cca:	f7fe fb81 	bl	80063d0 <hata2EEPROM>
			basinchatasi=1;
 8007cce:	4b86      	ldr	r3, [pc, #536]	; (8007ee8 <checkAktifCalisma+0x15b4>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	701a      	strb	r2, [r3, #0]
 8007cd4:	e015      	b.n	8007d02 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007cd6:	4b84      	ldr	r3, [pc, #528]	; (8007ee8 <checkAktifCalisma+0x15b4>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d011      	beq.n	8007d02 <checkAktifCalisma+0x13ce>
 8007cde:	4b7d      	ldr	r3, [pc, #500]	; (8007ed4 <checkAktifCalisma+0x15a0>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d10d      	bne.n	8007d02 <checkAktifCalisma+0x13ce>
 8007ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007cea:	4880      	ldr	r0, [pc, #512]	; (8007eec <checkAktifCalisma+0x15b8>)
 8007cec:	f002 f98a 	bl	800a004 <HAL_GPIO_ReadPin>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d105      	bne.n	8007d02 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007cf6:	4b7c      	ldr	r3, [pc, #496]	; (8007ee8 <checkAktifCalisma+0x15b4>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007cfc:	2003      	movs	r0, #3
 8007cfe:	f7fd ff5d 	bl	8005bbc <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007d02:	4b7b      	ldr	r3, [pc, #492]	; (8007ef0 <checkAktifCalisma+0x15bc>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d103      	bne.n	8007d12 <checkAktifCalisma+0x13de>
 8007d0a:	4b7a      	ldr	r3, [pc, #488]	; (8007ef4 <checkAktifCalisma+0x15c0>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01c      	beq.n	8007d4c <checkAktifCalisma+0x1418>
 8007d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d16:	4878      	ldr	r0, [pc, #480]	; (8007ef8 <checkAktifCalisma+0x15c4>)
 8007d18:	f002 f974 	bl	800a004 <HAL_GPIO_ReadPin>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d114      	bne.n	8007d4c <checkAktifCalisma+0x1418>
 8007d22:	4b76      	ldr	r3, [pc, #472]	; (8007efc <checkAktifCalisma+0x15c8>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d003      	beq.n	8007d32 <checkAktifCalisma+0x13fe>
 8007d2a:	4b74      	ldr	r3, [pc, #464]	; (8007efc <checkAktifCalisma+0x15c8>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d10c      	bne.n	8007d4c <checkAktifCalisma+0x1418>
			hataVar=1;
 8007d32:	4b6c      	ldr	r3, [pc, #432]	; (8007ee4 <checkAktifCalisma+0x15b0>)
 8007d34:	2201      	movs	r2, #1
 8007d36:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007d38:	2004      	movs	r0, #4
 8007d3a:	f7fd ff93 	bl	8005c64 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007d3e:	2004      	movs	r0, #4
 8007d40:	f7fe fb46 	bl	80063d0 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007d44:	4b6e      	ldr	r3, [pc, #440]	; (8007f00 <checkAktifCalisma+0x15cc>)
 8007d46:	2201      	movs	r2, #1
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	e01f      	b.n	8007d8c <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007d4c:	4b6c      	ldr	r3, [pc, #432]	; (8007f00 <checkAktifCalisma+0x15cc>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01b      	beq.n	8007d8c <checkAktifCalisma+0x1458>
 8007d54:	4b6b      	ldr	r3, [pc, #428]	; (8007f04 <checkAktifCalisma+0x15d0>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d017      	beq.n	8007d8c <checkAktifCalisma+0x1458>
 8007d5c:	4b64      	ldr	r3, [pc, #400]	; (8007ef0 <checkAktifCalisma+0x15bc>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	f083 0301 	eor.w	r3, r3, #1
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d010      	beq.n	8007d8c <checkAktifCalisma+0x1458>
 8007d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d6e:	4862      	ldr	r0, [pc, #392]	; (8007ef8 <checkAktifCalisma+0x15c4>)
 8007d70:	f002 f948 	bl	800a004 <HAL_GPIO_ReadPin>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d108      	bne.n	8007d8c <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8007d7a:	4b61      	ldr	r3, [pc, #388]	; (8007f00 <checkAktifCalisma+0x15cc>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007d80:	4b5c      	ldr	r3, [pc, #368]	; (8007ef4 <checkAktifCalisma+0x15c0>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8007d86:	2004      	movs	r0, #4
 8007d88:	f7fd ff18 	bl	8005bbc <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007d8c:	4b58      	ldr	r3, [pc, #352]	; (8007ef0 <checkAktifCalisma+0x15bc>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d103      	bne.n	8007d9c <checkAktifCalisma+0x1468>
 8007d94:	4b5c      	ldr	r3, [pc, #368]	; (8007f08 <checkAktifCalisma+0x15d4>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01c      	beq.n	8007dd6 <checkAktifCalisma+0x14a2>
 8007d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007da0:	4855      	ldr	r0, [pc, #340]	; (8007ef8 <checkAktifCalisma+0x15c4>)
 8007da2:	f002 f92f 	bl	800a004 <HAL_GPIO_ReadPin>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d114      	bne.n	8007dd6 <checkAktifCalisma+0x14a2>
 8007dac:	4b53      	ldr	r3, [pc, #332]	; (8007efc <checkAktifCalisma+0x15c8>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d003      	beq.n	8007dbc <checkAktifCalisma+0x1488>
 8007db4:	4b51      	ldr	r3, [pc, #324]	; (8007efc <checkAktifCalisma+0x15c8>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d10c      	bne.n	8007dd6 <checkAktifCalisma+0x14a2>
			hataVar=1;
 8007dbc:	4b49      	ldr	r3, [pc, #292]	; (8007ee4 <checkAktifCalisma+0x15b0>)
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8007dc2:	2005      	movs	r0, #5
 8007dc4:	f7fd ff4e 	bl	8005c64 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007dc8:	2005      	movs	r0, #5
 8007dca:	f7fe fb01 	bl	80063d0 <hata2EEPROM>
			tablakapisivicihatasi=1;
 8007dce:	4b4f      	ldr	r3, [pc, #316]	; (8007f0c <checkAktifCalisma+0x15d8>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	e023      	b.n	8007e1e <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007dd6:	4b4d      	ldr	r3, [pc, #308]	; (8007f0c <checkAktifCalisma+0x15d8>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01f      	beq.n	8007e1e <checkAktifCalisma+0x14ea>
 8007dde:	4b49      	ldr	r3, [pc, #292]	; (8007f04 <checkAktifCalisma+0x15d0>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d01b      	beq.n	8007e1e <checkAktifCalisma+0x14ea>
 8007de6:	4b42      	ldr	r3, [pc, #264]	; (8007ef0 <checkAktifCalisma+0x15bc>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	f083 0301 	eor.w	r3, r3, #1
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d014      	beq.n	8007e1e <checkAktifCalisma+0x14ea>
 8007df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007df8:	483f      	ldr	r0, [pc, #252]	; (8007ef8 <checkAktifCalisma+0x15c4>)
 8007dfa:	f002 f903 	bl	800a004 <HAL_GPIO_ReadPin>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10c      	bne.n	8007e1e <checkAktifCalisma+0x14ea>
 8007e04:	4b3f      	ldr	r3, [pc, #252]	; (8007f04 <checkAktifCalisma+0x15d0>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8007e0c:	4b3f      	ldr	r3, [pc, #252]	; (8007f0c <checkAktifCalisma+0x15d8>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007e12:	4b3d      	ldr	r3, [pc, #244]	; (8007f08 <checkAktifCalisma+0x15d4>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007e18:	2005      	movs	r0, #5
 8007e1a:	f7fd fecf 	bl	8005bbc <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8007e1e:	4b2f      	ldr	r3, [pc, #188]	; (8007edc <checkAktifCalisma+0x15a8>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d107      	bne.n	8007e36 <checkAktifCalisma+0x1502>
 8007e26:	4b29      	ldr	r3, [pc, #164]	; (8007ecc <checkAktifCalisma+0x1598>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d103      	bne.n	8007e36 <checkAktifCalisma+0x1502>
 8007e2e:	4b38      	ldr	r3, [pc, #224]	; (8007f10 <checkAktifCalisma+0x15dc>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d014      	beq.n	8007e60 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007e36:	4b37      	ldr	r3, [pc, #220]	; (8007f14 <checkAktifCalisma+0x15e0>)
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4b37      	ldr	r3, [pc, #220]	; (8007f18 <checkAktifCalisma+0x15e4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	4a36      	ldr	r2, [pc, #216]	; (8007f1c <checkAktifCalisma+0x15e8>)
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d30b      	bcc.n	8007e60 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007e48:	4b26      	ldr	r3, [pc, #152]	; (8007ee4 <checkAktifCalisma+0x15b0>)
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007e4e:	2006      	movs	r0, #6
 8007e50:	f7fd ff08 	bl	8005c64 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007e54:	2006      	movs	r0, #6
 8007e56:	f7fe fabb 	bl	80063d0 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007e5a:	4b31      	ldr	r3, [pc, #196]	; (8007f20 <checkAktifCalisma+0x15ec>)
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007e60:	4b2f      	ldr	r3, [pc, #188]	; (8007f20 <checkAktifCalisma+0x15ec>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d013      	beq.n	8007e90 <checkAktifCalisma+0x155c>
 8007e68:	2108      	movs	r1, #8
 8007e6a:	4823      	ldr	r0, [pc, #140]	; (8007ef8 <checkAktifCalisma+0x15c4>)
 8007e6c:	f002 f8ca 	bl	800a004 <HAL_GPIO_ReadPin>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00c      	beq.n	8007e90 <checkAktifCalisma+0x155c>
 8007e76:	4b1e      	ldr	r3, [pc, #120]	; (8007ef0 <checkAktifCalisma+0x15bc>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	f083 0301 	eor.w	r3, r3, #1
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d005      	beq.n	8007e90 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007e84:	4b26      	ldr	r3, [pc, #152]	; (8007f20 <checkAktifCalisma+0x15ec>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007e8a:	2006      	movs	r0, #6
 8007e8c:	f7fd fe96 	bl	8005bbc <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007e90:	4b24      	ldr	r3, [pc, #144]	; (8007f24 <checkAktifCalisma+0x15f0>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10b      	bne.n	8007eb0 <checkAktifCalisma+0x157c>
 8007e98:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <checkAktifCalisma+0x1598>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d107      	bne.n	8007eb0 <checkAktifCalisma+0x157c>
 8007ea0:	4b21      	ldr	r3, [pc, #132]	; (8007f28 <checkAktifCalisma+0x15f4>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d103      	bne.n	8007eb0 <checkAktifCalisma+0x157c>
 8007ea8:	4b19      	ldr	r3, [pc, #100]	; (8007f10 <checkAktifCalisma+0x15dc>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d03f      	beq.n	8007f30 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007eb0:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <checkAktifCalisma+0x15f8>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007eb6:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <checkAktifCalisma+0x15c0>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007ebc:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <checkAktifCalisma+0x15d4>)
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	e03c      	b.n	8007f3e <checkAktifCalisma+0x160a>
 8007ec4:	20000c9a 	.word	0x20000c9a
 8007ec8:	20000ca0 	.word	0x20000ca0
 8007ecc:	20000c81 	.word	0x20000c81
 8007ed0:	20000caa 	.word	0x20000caa
 8007ed4:	20000c4c 	.word	0x20000c4c
 8007ed8:	20000c50 	.word	0x20000c50
 8007edc:	20000c9d 	.word	0x20000c9d
 8007ee0:	40011000 	.word	0x40011000
 8007ee4:	20000c9e 	.word	0x20000c9e
 8007ee8:	20000ca7 	.word	0x20000ca7
 8007eec:	40010c00 	.word	0x40010c00
 8007ef0:	20000c97 	.word	0x20000c97
 8007ef4:	20000cab 	.word	0x20000cab
 8007ef8:	40010800 	.word	0x40010800
 8007efc:	20000c51 	.word	0x20000c51
 8007f00:	20000ca8 	.word	0x20000ca8
 8007f04:	20000c8b 	.word	0x20000c8b
 8007f08:	20000cac 	.word	0x20000cac
 8007f0c:	20000ca9 	.word	0x20000ca9
 8007f10:	20000c80 	.word	0x20000c80
 8007f14:	20000bd4 	.word	0x20000bd4
 8007f18:	20000be8 	.word	0x20000be8
 8007f1c:	20000c61 	.word	0x20000c61
 8007f20:	20000c98 	.word	0x20000c98
 8007f24:	20000c7e 	.word	0x20000c7e
 8007f28:	20000c7f 	.word	0x20000c7f
 8007f2c:	20000c9f 	.word	0x20000c9f
		} else {
			makineCalisiyor=1;
 8007f30:	4b1e      	ldr	r3, [pc, #120]	; (8007fac <checkAktifCalisma+0x1678>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007f36:	4b1e      	ldr	r3, [pc, #120]	; (8007fb0 <checkAktifCalisma+0x167c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a1e      	ldr	r2, [pc, #120]	; (8007fb4 <checkAktifCalisma+0x1680>)
 8007f3c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007f3e:	4b1e      	ldr	r3, [pc, #120]	; (8007fb8 <checkAktifCalisma+0x1684>)
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d02f      	beq.n	8007fa6 <checkAktifCalisma+0x1672>
 8007f46:	4b1d      	ldr	r3, [pc, #116]	; (8007fbc <checkAktifCalisma+0x1688>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	f083 0301 	eor.w	r3, r3, #1
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d028      	beq.n	8007fa6 <checkAktifCalisma+0x1672>
 8007f54:	4b1a      	ldr	r3, [pc, #104]	; (8007fc0 <checkAktifCalisma+0x168c>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	f083 0301 	eor.w	r3, r3, #1
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d021      	beq.n	8007fa6 <checkAktifCalisma+0x1672>
 8007f62:	4b18      	ldr	r3, [pc, #96]	; (8007fc4 <checkAktifCalisma+0x1690>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f083 0301 	eor.w	r3, r3, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01a      	beq.n	8007fa6 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007f70:	4b15      	ldr	r3, [pc, #84]	; (8007fc8 <checkAktifCalisma+0x1694>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	f083 0301 	eor.w	r3, r3, #1
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d013      	beq.n	8007fa6 <checkAktifCalisma+0x1672>
 8007f7e:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <checkAktifCalisma+0x1698>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	f083 0301 	eor.w	r3, r3, #1
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00c      	beq.n	8007fa6 <checkAktifCalisma+0x1672>
 8007f8c:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <checkAktifCalisma+0x169c>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	f083 0301 	eor.w	r3, r3, #1
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <checkAktifCalisma+0x1672>
			hataVar=0;
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <checkAktifCalisma+0x1684>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007fa0:	2007      	movs	r0, #7
 8007fa2:	f7fd fe0b 	bl	8005bbc <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007fa6:	bf00      	nop
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000c9f 	.word	0x20000c9f
 8007fb0:	20000bd4 	.word	0x20000bd4
 8007fb4:	20000be8 	.word	0x20000be8
 8007fb8:	20000c9e 	.word	0x20000c9e
 8007fbc:	20000c99 	.word	0x20000c99
 8007fc0:	20000c9a 	.word	0x20000c9a
 8007fc4:	20000ca7 	.word	0x20000ca7
 8007fc8:	20000ca8 	.word	0x20000ca8
 8007fcc:	20000ca9 	.word	0x20000ca9
 8007fd0:	20000c98 	.word	0x20000c98

08007fd4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007fd8:	4b8b      	ldr	r3, [pc, #556]	; (8008208 <checkDemoModCalisma+0x234>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	f040 8229 	bne.w	8008434 <checkDemoModCalisma+0x460>
 8007fe2:	4b8a      	ldr	r3, [pc, #552]	; (800820c <checkDemoModCalisma+0x238>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 8224 	beq.w	8008434 <checkDemoModCalisma+0x460>
 8007fec:	4b88      	ldr	r3, [pc, #544]	; (8008210 <checkDemoModCalisma+0x23c>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f040 821f 	bne.w	8008434 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007ff6:	2102      	movs	r1, #2
 8007ff8:	4886      	ldr	r0, [pc, #536]	; (8008214 <checkDemoModCalisma+0x240>)
 8007ffa:	f002 f803 	bl	800a004 <HAL_GPIO_ReadPin>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d11d      	bne.n	8008040 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8008004:	4b84      	ldr	r3, [pc, #528]	; (8008218 <checkDemoModCalisma+0x244>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	f083 0301 	eor.w	r3, r3, #1
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d016      	beq.n	8008040 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8008012:	4b82      	ldr	r3, [pc, #520]	; (800821c <checkDemoModCalisma+0x248>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	f083 0301 	eor.w	r3, r3, #1
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00f      	beq.n	8008040 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8008020:	4b7f      	ldr	r3, [pc, #508]	; (8008220 <checkDemoModCalisma+0x24c>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	f083 0301 	eor.w	r3, r3, #1
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d008      	beq.n	8008040 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800802e:	2201      	movs	r2, #1
 8008030:	2104      	movs	r1, #4
 8008032:	487c      	ldr	r0, [pc, #496]	; (8008224 <checkDemoModCalisma+0x250>)
 8008034:	f001 fffd 	bl	800a032 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8008038:	4b7b      	ldr	r3, [pc, #492]	; (8008228 <checkDemoModCalisma+0x254>)
 800803a:	2201      	movs	r2, #1
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	e00e      	b.n	800805e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8008040:	2102      	movs	r1, #2
 8008042:	4874      	ldr	r0, [pc, #464]	; (8008214 <checkDemoModCalisma+0x240>)
 8008044:	f001 ffde 	bl	800a004 <HAL_GPIO_ReadPin>
 8008048:	4603      	mov	r3, r0
 800804a:	2b01      	cmp	r3, #1
 800804c:	d107      	bne.n	800805e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800804e:	2200      	movs	r2, #0
 8008050:	2104      	movs	r1, #4
 8008052:	4874      	ldr	r0, [pc, #464]	; (8008224 <checkDemoModCalisma+0x250>)
 8008054:	f001 ffed 	bl	800a032 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8008058:	4b73      	ldr	r3, [pc, #460]	; (8008228 <checkDemoModCalisma+0x254>)
 800805a:	2200      	movs	r2, #0
 800805c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800805e:	4b72      	ldr	r3, [pc, #456]	; (8008228 <checkDemoModCalisma+0x254>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10b      	bne.n	800807e <checkDemoModCalisma+0xaa>
 8008066:	4b6d      	ldr	r3, [pc, #436]	; (800821c <checkDemoModCalisma+0x248>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d107      	bne.n	800807e <checkDemoModCalisma+0xaa>
 800806e:	4b6c      	ldr	r3, [pc, #432]	; (8008220 <checkDemoModCalisma+0x24c>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d103      	bne.n	800807e <checkDemoModCalisma+0xaa>
 8008076:	4b68      	ldr	r3, [pc, #416]	; (8008218 <checkDemoModCalisma+0x244>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00c      	beq.n	8008098 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800807e:	2201      	movs	r2, #1
 8008080:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008084:	4867      	ldr	r0, [pc, #412]	; (8008224 <checkDemoModCalisma+0x250>)
 8008086:	f001 ffd4 	bl	800a032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800808a:	2201      	movs	r2, #1
 800808c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008090:	4864      	ldr	r0, [pc, #400]	; (8008224 <checkDemoModCalisma+0x250>)
 8008092:	f001 ffce 	bl	800a032 <HAL_GPIO_WritePin>
 8008096:	e00b      	b.n	80080b0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008098:	2200      	movs	r2, #0
 800809a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800809e:	4861      	ldr	r0, [pc, #388]	; (8008224 <checkDemoModCalisma+0x250>)
 80080a0:	f001 ffc7 	bl	800a032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80080a4:	2200      	movs	r2, #0
 80080a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080aa:	485e      	ldr	r0, [pc, #376]	; (8008224 <checkDemoModCalisma+0x250>)
 80080ac:	f001 ffc1 	bl	800a032 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80080b0:	2102      	movs	r1, #2
 80080b2:	4858      	ldr	r0, [pc, #352]	; (8008214 <checkDemoModCalisma+0x240>)
 80080b4:	f001 ffa6 	bl	800a004 <HAL_GPIO_ReadPin>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d10d      	bne.n	80080da <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80080be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080c2:	4854      	ldr	r0, [pc, #336]	; (8008214 <checkDemoModCalisma+0x240>)
 80080c4:	f001 ff9e 	bl	800a004 <HAL_GPIO_ReadPin>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d105      	bne.n	80080da <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80080ce:	4b56      	ldr	r3, [pc, #344]	; (8008228 <checkDemoModCalisma+0x254>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	f083 0301 	eor.w	r3, r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80080da:	2102      	movs	r1, #2
 80080dc:	484d      	ldr	r0, [pc, #308]	; (8008214 <checkDemoModCalisma+0x240>)
 80080de:	f001 ff91 	bl	800a004 <HAL_GPIO_ReadPin>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d125      	bne.n	8008134 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80080e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080ec:	4849      	ldr	r0, [pc, #292]	; (8008214 <checkDemoModCalisma+0x240>)
 80080ee:	f001 ff89 	bl	800a004 <HAL_GPIO_ReadPin>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11d      	bne.n	8008134 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80080f8:	4b4b      	ldr	r3, [pc, #300]	; (8008228 <checkDemoModCalisma+0x254>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f083 0301 	eor.w	r3, r3, #1
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d016      	beq.n	8008134 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8008106:	4b44      	ldr	r3, [pc, #272]	; (8008218 <checkDemoModCalisma+0x244>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	f083 0301 	eor.w	r3, r3, #1
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00f      	beq.n	8008134 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8008114:	4b42      	ldr	r3, [pc, #264]	; (8008220 <checkDemoModCalisma+0x24c>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	f083 0301 	eor.w	r3, r3, #1
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d008      	beq.n	8008134 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8008122:	2201      	movs	r2, #1
 8008124:	2120      	movs	r1, #32
 8008126:	483b      	ldr	r0, [pc, #236]	; (8008214 <checkDemoModCalisma+0x240>)
 8008128:	f001 ff83 	bl	800a032 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800812c:	4b3b      	ldr	r3, [pc, #236]	; (800821c <checkDemoModCalisma+0x248>)
 800812e:	2201      	movs	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	e007      	b.n	8008144 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008134:	2200      	movs	r2, #0
 8008136:	2120      	movs	r1, #32
 8008138:	4836      	ldr	r0, [pc, #216]	; (8008214 <checkDemoModCalisma+0x240>)
 800813a:	f001 ff7a 	bl	800a032 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800813e:	4b37      	ldr	r3, [pc, #220]	; (800821c <checkDemoModCalisma+0x248>)
 8008140:	2200      	movs	r2, #0
 8008142:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8008144:	2102      	movs	r1, #2
 8008146:	4833      	ldr	r0, [pc, #204]	; (8008214 <checkDemoModCalisma+0x240>)
 8008148:	f001 ff5c 	bl	800a004 <HAL_GPIO_ReadPin>
 800814c:	4603      	mov	r3, r0
 800814e:	2b01      	cmp	r3, #1
 8008150:	d125      	bne.n	800819e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8008152:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008156:	482f      	ldr	r0, [pc, #188]	; (8008214 <checkDemoModCalisma+0x240>)
 8008158:	f001 ff54 	bl	800a004 <HAL_GPIO_ReadPin>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d11d      	bne.n	800819e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8008162:	4b31      	ldr	r3, [pc, #196]	; (8008228 <checkDemoModCalisma+0x254>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	f083 0301 	eor.w	r3, r3, #1
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d016      	beq.n	800819e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8008170:	4b2a      	ldr	r3, [pc, #168]	; (800821c <checkDemoModCalisma+0x248>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	f083 0301 	eor.w	r3, r3, #1
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00f      	beq.n	800819e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800817e:	4b26      	ldr	r3, [pc, #152]	; (8008218 <checkDemoModCalisma+0x244>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	f083 0301 	eor.w	r3, r3, #1
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d008      	beq.n	800819e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800818c:	2201      	movs	r2, #1
 800818e:	2110      	movs	r1, #16
 8008190:	4820      	ldr	r0, [pc, #128]	; (8008214 <checkDemoModCalisma+0x240>)
 8008192:	f001 ff4e 	bl	800a032 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8008196:	4b22      	ldr	r3, [pc, #136]	; (8008220 <checkDemoModCalisma+0x24c>)
 8008198:	2201      	movs	r2, #1
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	e007      	b.n	80081ae <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800819e:	2200      	movs	r2, #0
 80081a0:	2110      	movs	r1, #16
 80081a2:	481c      	ldr	r0, [pc, #112]	; (8008214 <checkDemoModCalisma+0x240>)
 80081a4:	f001 ff45 	bl	800a032 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80081a8:	4b1d      	ldr	r3, [pc, #116]	; (8008220 <checkDemoModCalisma+0x24c>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80081ae:	2104      	movs	r1, #4
 80081b0:	4818      	ldr	r0, [pc, #96]	; (8008214 <checkDemoModCalisma+0x240>)
 80081b2:	f001 ff27 	bl	800a004 <HAL_GPIO_ReadPin>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d139      	bne.n	8008230 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80081bc:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <checkDemoModCalisma+0x254>)
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f083 0301 	eor.w	r3, r3, #1
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d032      	beq.n	8008230 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80081ca:	4b15      	ldr	r3, [pc, #84]	; (8008220 <checkDemoModCalisma+0x24c>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	f083 0301 	eor.w	r3, r3, #1
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d02b      	beq.n	8008230 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80081d8:	4b10      	ldr	r3, [pc, #64]	; (800821c <checkDemoModCalisma+0x248>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	f083 0301 	eor.w	r3, r3, #1
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d024      	beq.n	8008230 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80081e6:	2201      	movs	r2, #1
 80081e8:	2102      	movs	r1, #2
 80081ea:	480e      	ldr	r0, [pc, #56]	; (8008224 <checkDemoModCalisma+0x250>)
 80081ec:	f001 ff21 	bl	800a032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80081f0:	2201      	movs	r2, #1
 80081f2:	2101      	movs	r1, #1
 80081f4:	480b      	ldr	r0, [pc, #44]	; (8008224 <checkDemoModCalisma+0x250>)
 80081f6:	f001 ff1c 	bl	800a032 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80081fa:	4b07      	ldr	r3, [pc, #28]	; (8008218 <checkDemoModCalisma+0x244>)
 80081fc:	2201      	movs	r2, #1
 80081fe:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8008200:	4b0a      	ldr	r3, [pc, #40]	; (800822c <checkDemoModCalisma+0x258>)
 8008202:	2201      	movs	r2, #1
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	e027      	b.n	8008258 <checkDemoModCalisma+0x284>
 8008208:	20000c67 	.word	0x20000c67
 800820c:	20000c9b 	.word	0x20000c9b
 8008210:	20000c66 	.word	0x20000c66
 8008214:	40011000 	.word	0x40011000
 8008218:	20000ca2 	.word	0x20000ca2
 800821c:	20000ca3 	.word	0x20000ca3
 8008220:	20000ca4 	.word	0x20000ca4
 8008224:	40010c00 	.word	0x40010c00
 8008228:	20000ca1 	.word	0x20000ca1
 800822c:	20000c87 	.word	0x20000c87
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8008230:	2104      	movs	r1, #4
 8008232:	48a0      	ldr	r0, [pc, #640]	; (80084b4 <checkDemoModCalisma+0x4e0>)
 8008234:	f001 fee6 	bl	800a004 <HAL_GPIO_ReadPin>
 8008238:	4603      	mov	r3, r0
 800823a:	2b01      	cmp	r3, #1
 800823c:	d10c      	bne.n	8008258 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800823e:	2200      	movs	r2, #0
 8008240:	2102      	movs	r1, #2
 8008242:	489d      	ldr	r0, [pc, #628]	; (80084b8 <checkDemoModCalisma+0x4e4>)
 8008244:	f001 fef5 	bl	800a032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008248:	2200      	movs	r2, #0
 800824a:	2101      	movs	r1, #1
 800824c:	489a      	ldr	r0, [pc, #616]	; (80084b8 <checkDemoModCalisma+0x4e4>)
 800824e:	f001 fef0 	bl	800a032 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8008252:	4b9a      	ldr	r3, [pc, #616]	; (80084bc <checkDemoModCalisma+0x4e8>)
 8008254:	2200      	movs	r2, #0
 8008256:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8008258:	2104      	movs	r1, #4
 800825a:	4896      	ldr	r0, [pc, #600]	; (80084b4 <checkDemoModCalisma+0x4e0>)
 800825c:	f001 fed2 	bl	800a004 <HAL_GPIO_ReadPin>
 8008260:	4603      	mov	r3, r0
 8008262:	2b01      	cmp	r3, #1
 8008264:	d10d      	bne.n	8008282 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8008266:	2201      	movs	r2, #1
 8008268:	2180      	movs	r1, #128	; 0x80
 800826a:	4895      	ldr	r0, [pc, #596]	; (80084c0 <checkDemoModCalisma+0x4ec>)
 800826c:	f001 fee1 	bl	800a032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8008270:	2201      	movs	r2, #1
 8008272:	2120      	movs	r1, #32
 8008274:	4892      	ldr	r0, [pc, #584]	; (80084c0 <checkDemoModCalisma+0x4ec>)
 8008276:	f001 fedc 	bl	800a032 <HAL_GPIO_WritePin>
			timer3 = millis;
 800827a:	4b92      	ldr	r3, [pc, #584]	; (80084c4 <checkDemoModCalisma+0x4f0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a92      	ldr	r2, [pc, #584]	; (80084c8 <checkDemoModCalisma+0x4f4>)
 8008280:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8008282:	4b90      	ldr	r3, [pc, #576]	; (80084c4 <checkDemoModCalisma+0x4f0>)
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b90      	ldr	r3, [pc, #576]	; (80084c8 <checkDemoModCalisma+0x4f4>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b04      	cmp	r3, #4
 800828e:	d909      	bls.n	80082a4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008290:	2200      	movs	r2, #0
 8008292:	2180      	movs	r1, #128	; 0x80
 8008294:	488a      	ldr	r0, [pc, #552]	; (80084c0 <checkDemoModCalisma+0x4ec>)
 8008296:	f001 fecc 	bl	800a032 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800829a:	2200      	movs	r2, #0
 800829c:	2120      	movs	r1, #32
 800829e:	4888      	ldr	r0, [pc, #544]	; (80084c0 <checkDemoModCalisma+0x4ec>)
 80082a0:	f001 fec7 	bl	800a032 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80082a4:	2102      	movs	r1, #2
 80082a6:	4883      	ldr	r0, [pc, #524]	; (80084b4 <checkDemoModCalisma+0x4e0>)
 80082a8:	f001 feac 	bl	800a004 <HAL_GPIO_ReadPin>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d108      	bne.n	80082c4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80082b2:	2201      	movs	r2, #1
 80082b4:	2140      	movs	r1, #64	; 0x40
 80082b6:	4882      	ldr	r0, [pc, #520]	; (80084c0 <checkDemoModCalisma+0x4ec>)
 80082b8:	f001 febb 	bl	800a032 <HAL_GPIO_WritePin>
			timer3 = millis;
 80082bc:	4b81      	ldr	r3, [pc, #516]	; (80084c4 <checkDemoModCalisma+0x4f0>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a81      	ldr	r2, [pc, #516]	; (80084c8 <checkDemoModCalisma+0x4f4>)
 80082c2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80082c4:	4b7f      	ldr	r3, [pc, #508]	; (80084c4 <checkDemoModCalisma+0x4f0>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b7f      	ldr	r3, [pc, #508]	; (80084c8 <checkDemoModCalisma+0x4f4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d904      	bls.n	80082dc <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80082d2:	2200      	movs	r2, #0
 80082d4:	2140      	movs	r1, #64	; 0x40
 80082d6:	487a      	ldr	r0, [pc, #488]	; (80084c0 <checkDemoModCalisma+0x4ec>)
 80082d8:	f001 feab 	bl	800a032 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80082dc:	4b7b      	ldr	r3, [pc, #492]	; (80084cc <checkDemoModCalisma+0x4f8>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d058      	beq.n	8008396 <checkDemoModCalisma+0x3c2>
 80082e4:	4b7a      	ldr	r3, [pc, #488]	; (80084d0 <checkDemoModCalisma+0x4fc>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d054      	beq.n	8008396 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80082ec:	4b79      	ldr	r3, [pc, #484]	; (80084d4 <checkDemoModCalisma+0x500>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	3301      	adds	r3, #1
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	4b77      	ldr	r3, [pc, #476]	; (80084d4 <checkDemoModCalisma+0x500>)
 80082f6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80082f8:	4b76      	ldr	r3, [pc, #472]	; (80084d4 <checkDemoModCalisma+0x500>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b09      	cmp	r3, #9
 80082fe:	d908      	bls.n	8008312 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8008300:	4b74      	ldr	r3, [pc, #464]	; (80084d4 <checkDemoModCalisma+0x500>)
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8008306:	4b74      	ldr	r3, [pc, #464]	; (80084d8 <checkDemoModCalisma+0x504>)
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	3301      	adds	r3, #1
 800830c:	b2da      	uxtb	r2, r3
 800830e:	4b72      	ldr	r3, [pc, #456]	; (80084d8 <checkDemoModCalisma+0x504>)
 8008310:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8008312:	4b71      	ldr	r3, [pc, #452]	; (80084d8 <checkDemoModCalisma+0x504>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b09      	cmp	r3, #9
 8008318:	d908      	bls.n	800832c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800831a:	4b6f      	ldr	r3, [pc, #444]	; (80084d8 <checkDemoModCalisma+0x504>)
 800831c:	2200      	movs	r2, #0
 800831e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8008320:	4b6e      	ldr	r3, [pc, #440]	; (80084dc <checkDemoModCalisma+0x508>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	3301      	adds	r3, #1
 8008326:	b2da      	uxtb	r2, r3
 8008328:	4b6c      	ldr	r3, [pc, #432]	; (80084dc <checkDemoModCalisma+0x508>)
 800832a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800832c:	4b6b      	ldr	r3, [pc, #428]	; (80084dc <checkDemoModCalisma+0x508>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b09      	cmp	r3, #9
 8008332:	d908      	bls.n	8008346 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8008334:	4b69      	ldr	r3, [pc, #420]	; (80084dc <checkDemoModCalisma+0x508>)
 8008336:	2200      	movs	r2, #0
 8008338:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800833a:	4b69      	ldr	r3, [pc, #420]	; (80084e0 <checkDemoModCalisma+0x50c>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	3301      	adds	r3, #1
 8008340:	b2da      	uxtb	r2, r3
 8008342:	4b67      	ldr	r3, [pc, #412]	; (80084e0 <checkDemoModCalisma+0x50c>)
 8008344:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8008346:	4b66      	ldr	r3, [pc, #408]	; (80084e0 <checkDemoModCalisma+0x50c>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b09      	cmp	r3, #9
 800834c:	d908      	bls.n	8008360 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800834e:	4b64      	ldr	r3, [pc, #400]	; (80084e0 <checkDemoModCalisma+0x50c>)
 8008350:	2200      	movs	r2, #0
 8008352:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8008354:	4b63      	ldr	r3, [pc, #396]	; (80084e4 <checkDemoModCalisma+0x510>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	3301      	adds	r3, #1
 800835a:	b2da      	uxtb	r2, r3
 800835c:	4b61      	ldr	r3, [pc, #388]	; (80084e4 <checkDemoModCalisma+0x510>)
 800835e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8008360:	4b60      	ldr	r3, [pc, #384]	; (80084e4 <checkDemoModCalisma+0x510>)
 8008362:	781a      	ldrb	r2, [r3, #0]
 8008364:	4b60      	ldr	r3, [pc, #384]	; (80084e8 <checkDemoModCalisma+0x514>)
 8008366:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800836a:	4b5d      	ldr	r3, [pc, #372]	; (80084e0 <checkDemoModCalisma+0x50c>)
 800836c:	781a      	ldrb	r2, [r3, #0]
 800836e:	4b5e      	ldr	r3, [pc, #376]	; (80084e8 <checkDemoModCalisma+0x514>)
 8008370:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8008372:	4b5a      	ldr	r3, [pc, #360]	; (80084dc <checkDemoModCalisma+0x508>)
 8008374:	781a      	ldrb	r2, [r3, #0]
 8008376:	4b5c      	ldr	r3, [pc, #368]	; (80084e8 <checkDemoModCalisma+0x514>)
 8008378:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800837a:	4b57      	ldr	r3, [pc, #348]	; (80084d8 <checkDemoModCalisma+0x504>)
 800837c:	781a      	ldrb	r2, [r3, #0]
 800837e:	4b5a      	ldr	r3, [pc, #360]	; (80084e8 <checkDemoModCalisma+0x514>)
 8008380:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8008382:	4b54      	ldr	r3, [pc, #336]	; (80084d4 <checkDemoModCalisma+0x500>)
 8008384:	781a      	ldrb	r2, [r3, #0]
 8008386:	4b58      	ldr	r3, [pc, #352]	; (80084e8 <checkDemoModCalisma+0x514>)
 8008388:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800838a:	4b58      	ldr	r3, [pc, #352]	; (80084ec <checkDemoModCalisma+0x518>)
 800838c:	2201      	movs	r2, #1
 800838e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8008390:	4b4f      	ldr	r3, [pc, #316]	; (80084d0 <checkDemoModCalisma+0x4fc>)
 8008392:	2200      	movs	r2, #0
 8008394:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8008396:	4b56      	ldr	r3, [pc, #344]	; (80084f0 <checkDemoModCalisma+0x51c>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	f040 8087 	bne.w	80084ae <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 80083a0:	4a54      	ldr	r2, [pc, #336]	; (80084f4 <checkDemoModCalisma+0x520>)
 80083a2:	2101      	movs	r1, #1
 80083a4:	2002      	movs	r0, #2
 80083a6:	f7f8 fa07 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80083aa:	4a53      	ldr	r2, [pc, #332]	; (80084f8 <checkDemoModCalisma+0x524>)
 80083ac:	2101      	movs	r1, #1
 80083ae:	2001      	movs	r0, #1
 80083b0:	f7f8 fa02 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80083b4:	4b4b      	ldr	r3, [pc, #300]	; (80084e4 <checkDemoModCalisma+0x510>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	220a      	movs	r2, #10
 80083ba:	4950      	ldr	r1, [pc, #320]	; (80084fc <checkDemoModCalisma+0x528>)
 80083bc:	4618      	mov	r0, r3
 80083be:	f004 fe4d 	bl	800d05c <itoa>
			lcd_print(2,12,snum);
 80083c2:	4a4e      	ldr	r2, [pc, #312]	; (80084fc <checkDemoModCalisma+0x528>)
 80083c4:	210c      	movs	r1, #12
 80083c6:	2002      	movs	r0, #2
 80083c8:	f7f8 f9f6 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80083cc:	4b44      	ldr	r3, [pc, #272]	; (80084e0 <checkDemoModCalisma+0x50c>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	220a      	movs	r2, #10
 80083d2:	494a      	ldr	r1, [pc, #296]	; (80084fc <checkDemoModCalisma+0x528>)
 80083d4:	4618      	mov	r0, r3
 80083d6:	f004 fe41 	bl	800d05c <itoa>
			lcd_print(2,13,snum);
 80083da:	4a48      	ldr	r2, [pc, #288]	; (80084fc <checkDemoModCalisma+0x528>)
 80083dc:	210d      	movs	r1, #13
 80083de:	2002      	movs	r0, #2
 80083e0:	f7f8 f9ea 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80083e4:	4b3d      	ldr	r3, [pc, #244]	; (80084dc <checkDemoModCalisma+0x508>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	220a      	movs	r2, #10
 80083ea:	4944      	ldr	r1, [pc, #272]	; (80084fc <checkDemoModCalisma+0x528>)
 80083ec:	4618      	mov	r0, r3
 80083ee:	f004 fe35 	bl	800d05c <itoa>
			lcd_print(2,14,snum);
 80083f2:	4a42      	ldr	r2, [pc, #264]	; (80084fc <checkDemoModCalisma+0x528>)
 80083f4:	210e      	movs	r1, #14
 80083f6:	2002      	movs	r0, #2
 80083f8:	f7f8 f9de 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80083fc:	4b36      	ldr	r3, [pc, #216]	; (80084d8 <checkDemoModCalisma+0x504>)
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	220a      	movs	r2, #10
 8008402:	493e      	ldr	r1, [pc, #248]	; (80084fc <checkDemoModCalisma+0x528>)
 8008404:	4618      	mov	r0, r3
 8008406:	f004 fe29 	bl	800d05c <itoa>
			lcd_print(2,15,snum);
 800840a:	4a3c      	ldr	r2, [pc, #240]	; (80084fc <checkDemoModCalisma+0x528>)
 800840c:	210f      	movs	r1, #15
 800840e:	2002      	movs	r0, #2
 8008410:	f7f8 f9d2 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8008414:	4b2f      	ldr	r3, [pc, #188]	; (80084d4 <checkDemoModCalisma+0x500>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	220a      	movs	r2, #10
 800841a:	4938      	ldr	r1, [pc, #224]	; (80084fc <checkDemoModCalisma+0x528>)
 800841c:	4618      	mov	r0, r3
 800841e:	f004 fe1d 	bl	800d05c <itoa>
			lcd_print(2,16,snum);
 8008422:	4a36      	ldr	r2, [pc, #216]	; (80084fc <checkDemoModCalisma+0x528>)
 8008424:	2110      	movs	r1, #16
 8008426:	2002      	movs	r0, #2
 8008428:	f7f8 f9c6 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 800842c:	4b34      	ldr	r3, [pc, #208]	; (8008500 <checkDemoModCalisma+0x52c>)
 800842e:	2201      	movs	r2, #1
 8008430:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8008432:	e03c      	b.n	80084ae <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8008434:	4b33      	ldr	r3, [pc, #204]	; (8008504 <checkDemoModCalisma+0x530>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d003      	beq.n	8008444 <checkDemoModCalisma+0x470>
 800843c:	4b2c      	ldr	r3, [pc, #176]	; (80084f0 <checkDemoModCalisma+0x51c>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d134      	bne.n	80084ae <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008444:	2200      	movs	r2, #0
 8008446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800844a:	481b      	ldr	r0, [pc, #108]	; (80084b8 <checkDemoModCalisma+0x4e4>)
 800844c:	f001 fdf1 	bl	800a032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008450:	2200      	movs	r2, #0
 8008452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008456:	4818      	ldr	r0, [pc, #96]	; (80084b8 <checkDemoModCalisma+0x4e4>)
 8008458:	f001 fdeb 	bl	800a032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800845c:	2200      	movs	r2, #0
 800845e:	2104      	movs	r1, #4
 8008460:	4815      	ldr	r0, [pc, #84]	; (80084b8 <checkDemoModCalisma+0x4e4>)
 8008462:	f001 fde6 	bl	800a032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008466:	2200      	movs	r2, #0
 8008468:	2102      	movs	r1, #2
 800846a:	4813      	ldr	r0, [pc, #76]	; (80084b8 <checkDemoModCalisma+0x4e4>)
 800846c:	f001 fde1 	bl	800a032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008470:	2200      	movs	r2, #0
 8008472:	2101      	movs	r1, #1
 8008474:	4810      	ldr	r0, [pc, #64]	; (80084b8 <checkDemoModCalisma+0x4e4>)
 8008476:	f001 fddc 	bl	800a032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800847a:	2200      	movs	r2, #0
 800847c:	2120      	movs	r1, #32
 800847e:	480d      	ldr	r0, [pc, #52]	; (80084b4 <checkDemoModCalisma+0x4e0>)
 8008480:	f001 fdd7 	bl	800a032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008484:	2200      	movs	r2, #0
 8008486:	2110      	movs	r1, #16
 8008488:	480a      	ldr	r0, [pc, #40]	; (80084b4 <checkDemoModCalisma+0x4e0>)
 800848a:	f001 fdd2 	bl	800a032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800848e:	2200      	movs	r2, #0
 8008490:	2180      	movs	r1, #128	; 0x80
 8008492:	480b      	ldr	r0, [pc, #44]	; (80084c0 <checkDemoModCalisma+0x4ec>)
 8008494:	f001 fdcd 	bl	800a032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008498:	2200      	movs	r2, #0
 800849a:	2140      	movs	r1, #64	; 0x40
 800849c:	4808      	ldr	r0, [pc, #32]	; (80084c0 <checkDemoModCalisma+0x4ec>)
 800849e:	f001 fdc8 	bl	800a032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80084a2:	2200      	movs	r2, #0
 80084a4:	2120      	movs	r1, #32
 80084a6:	4806      	ldr	r0, [pc, #24]	; (80084c0 <checkDemoModCalisma+0x4ec>)
 80084a8:	f001 fdc3 	bl	800a032 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80084ac:	e7ff      	b.n	80084ae <checkDemoModCalisma+0x4da>
 80084ae:	bf00      	nop
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	40011000 	.word	0x40011000
 80084b8:	40010c00 	.word	0x40010c00
 80084bc:	20000ca2 	.word	0x20000ca2
 80084c0:	40010800 	.word	0x40010800
 80084c4:	20000bd4 	.word	0x20000bd4
 80084c8:	20000be4 	.word	0x20000be4
 80084cc:	20000ca1 	.word	0x20000ca1
 80084d0:	20000c87 	.word	0x20000c87
 80084d4:	20000c46 	.word	0x20000c46
 80084d8:	20000c47 	.word	0x20000c47
 80084dc:	200009c2 	.word	0x200009c2
 80084e0:	200009c3 	.word	0x200009c3
 80084e4:	20000c48 	.word	0x20000c48
 80084e8:	20000b38 	.word	0x20000b38
 80084ec:	20000c75 	.word	0x20000c75
 80084f0:	20000c66 	.word	0x20000c66
 80084f4:	0800e848 	.word	0x0800e848
 80084f8:	0800e854 	.word	0x0800e854
 80084fc:	20000bcc 	.word	0x20000bcc
 8008500:	20000c7d 	.word	0x20000c7d
 8008504:	20000c67 	.word	0x20000c67

08008508 <mergeData>:

char* mergeData() {
 8008508:	b580      	push	{r7, lr}
 800850a:	b09e      	sub	sp, #120	; 0x78
 800850c:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800850e:	2300      	movs	r3, #0
 8008510:	643b      	str	r3, [r7, #64]	; 0x40
 8008512:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008516:	2229      	movs	r2, #41	; 0x29
 8008518:	2100      	movs	r1, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f004 feb6 	bl	800d28c <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008520:	4b6a      	ldr	r3, [pc, #424]	; (80086cc <mergeData+0x1c4>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	713b      	strb	r3, [r7, #4]
 8008526:	4b6a      	ldr	r3, [pc, #424]	; (80086d0 <mergeData+0x1c8>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	717b      	strb	r3, [r7, #5]
 800852c:	4b69      	ldr	r3, [pc, #420]	; (80086d4 <mergeData+0x1cc>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	71bb      	strb	r3, [r7, #6]
 8008532:	4b69      	ldr	r3, [pc, #420]	; (80086d8 <mergeData+0x1d0>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	71fb      	strb	r3, [r7, #7]
 8008538:	4b68      	ldr	r3, [pc, #416]	; (80086dc <mergeData+0x1d4>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	723b      	strb	r3, [r7, #8]
 800853e:	4b68      	ldr	r3, [pc, #416]	; (80086e0 <mergeData+0x1d8>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	727b      	strb	r3, [r7, #9]
 8008544:	4b67      	ldr	r3, [pc, #412]	; (80086e4 <mergeData+0x1dc>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	72bb      	strb	r3, [r7, #10]
 800854a:	4b67      	ldr	r3, [pc, #412]	; (80086e8 <mergeData+0x1e0>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	72fb      	strb	r3, [r7, #11]
 8008550:	4b66      	ldr	r3, [pc, #408]	; (80086ec <mergeData+0x1e4>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	733b      	strb	r3, [r7, #12]
 8008556:	4b66      	ldr	r3, [pc, #408]	; (80086f0 <mergeData+0x1e8>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	737b      	strb	r3, [r7, #13]
 800855c:	4b65      	ldr	r3, [pc, #404]	; (80086f4 <mergeData+0x1ec>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	73bb      	strb	r3, [r7, #14]
 8008562:	4b65      	ldr	r3, [pc, #404]	; (80086f8 <mergeData+0x1f0>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	73fb      	strb	r3, [r7, #15]
 8008568:	4b64      	ldr	r3, [pc, #400]	; (80086fc <mergeData+0x1f4>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	743b      	strb	r3, [r7, #16]
 800856e:	4b64      	ldr	r3, [pc, #400]	; (8008700 <mergeData+0x1f8>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	747b      	strb	r3, [r7, #17]
 8008574:	4b63      	ldr	r3, [pc, #396]	; (8008704 <mergeData+0x1fc>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	74bb      	strb	r3, [r7, #18]
 800857a:	4b63      	ldr	r3, [pc, #396]	; (8008708 <mergeData+0x200>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	74fb      	strb	r3, [r7, #19]
 8008580:	4b62      	ldr	r3, [pc, #392]	; (800870c <mergeData+0x204>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	753b      	strb	r3, [r7, #20]
 8008586:	4b62      	ldr	r3, [pc, #392]	; (8008710 <mergeData+0x208>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	757b      	strb	r3, [r7, #21]
 800858c:	4b61      	ldr	r3, [pc, #388]	; (8008714 <mergeData+0x20c>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	75bb      	strb	r3, [r7, #22]
 8008592:	4b61      	ldr	r3, [pc, #388]	; (8008718 <mergeData+0x210>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	75fb      	strb	r3, [r7, #23]
 8008598:	4b60      	ldr	r3, [pc, #384]	; (800871c <mergeData+0x214>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	763b      	strb	r3, [r7, #24]
 800859e:	4b60      	ldr	r3, [pc, #384]	; (8008720 <mergeData+0x218>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	767b      	strb	r3, [r7, #25]
 80085a4:	4b5f      	ldr	r3, [pc, #380]	; (8008724 <mergeData+0x21c>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	76bb      	strb	r3, [r7, #26]
 80085aa:	4b5f      	ldr	r3, [pc, #380]	; (8008728 <mergeData+0x220>)
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	76fb      	strb	r3, [r7, #27]
 80085b0:	4b5e      	ldr	r3, [pc, #376]	; (800872c <mergeData+0x224>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	773b      	strb	r3, [r7, #28]
 80085b6:	4b5e      	ldr	r3, [pc, #376]	; (8008730 <mergeData+0x228>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	777b      	strb	r3, [r7, #29]
 80085bc:	4b5d      	ldr	r3, [pc, #372]	; (8008734 <mergeData+0x22c>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	77bb      	strb	r3, [r7, #30]
 80085c2:	4b5d      	ldr	r3, [pc, #372]	; (8008738 <mergeData+0x230>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	77fb      	strb	r3, [r7, #31]
 80085c8:	4b5c      	ldr	r3, [pc, #368]	; (800873c <mergeData+0x234>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	f887 3020 	strb.w	r3, [r7, #32]
 80085d0:	4b5b      	ldr	r3, [pc, #364]	; (8008740 <mergeData+0x238>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80085d8:	4b5a      	ldr	r3, [pc, #360]	; (8008744 <mergeData+0x23c>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80085e0:	4b59      	ldr	r3, [pc, #356]	; (8008748 <mergeData+0x240>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085e8:	4b58      	ldr	r3, [pc, #352]	; (800874c <mergeData+0x244>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80085f0:	4b57      	ldr	r3, [pc, #348]	; (8008750 <mergeData+0x248>)
 80085f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80085f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80085fa:	4b55      	ldr	r3, [pc, #340]	; (8008750 <mergeData+0x248>)
 80085fc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8008600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8008604:	4b52      	ldr	r3, [pc, #328]	; (8008750 <mergeData+0x248>)
 8008606:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800860a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 800860e:	4b50      	ldr	r3, [pc, #320]	; (8008750 <mergeData+0x248>)
 8008610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8008614:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8008618:	4b4d      	ldr	r3, [pc, #308]	; (8008750 <mergeData+0x248>)
 800861a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800861e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8008622:	4b4b      	ldr	r3, [pc, #300]	; (8008750 <mergeData+0x248>)
 8008624:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8008628:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 800862c:	4b48      	ldr	r3, [pc, #288]	; (8008750 <mergeData+0x248>)
 800862e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8008632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8008636:	4b46      	ldr	r3, [pc, #280]	; (8008750 <mergeData+0x248>)
 8008638:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800863c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8008640:	4b43      	ldr	r3, [pc, #268]	; (8008750 <mergeData+0x248>)
 8008642:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8008646:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800864a:	4b41      	ldr	r3, [pc, #260]	; (8008750 <mergeData+0x248>)
 800864c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008650:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8008654:	4b3e      	ldr	r3, [pc, #248]	; (8008750 <mergeData+0x248>)
 8008656:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800865a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800865e:	4b3d      	ldr	r3, [pc, #244]	; (8008754 <mergeData+0x24c>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008666:	2300      	movs	r3, #0
 8008668:	677b      	str	r3, [r7, #116]	; 0x74
 800866a:	e015      	b.n	8008698 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 800866c:	1d3a      	adds	r2, r7, #4
 800866e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008670:	4413      	add	r3, r2
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	461a      	mov	r2, r3
 8008676:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800867a:	4937      	ldr	r1, [pc, #220]	; (8008758 <mergeData+0x250>)
 800867c:	4618      	mov	r0, r3
 800867e:	f004 fde5 	bl	800d24c <siprintf>
	    strcat(combinedString, temp);
 8008682:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008686:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f004 fe05 	bl	800d29c <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008694:	3301      	adds	r3, #1
 8008696:	677b      	str	r3, [r7, #116]	; 0x74
 8008698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800869a:	2b2c      	cmp	r3, #44	; 0x2c
 800869c:	d9e6      	bls.n	800866c <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800869e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f7 fdbe 	bl	8000224 <strlen>
 80086a8:	4603      	mov	r3, r0
 80086aa:	3301      	adds	r3, #1
 80086ac:	4618      	mov	r0, r3
 80086ae:	f004 fcd7 	bl	800d060 <malloc>
 80086b2:	4603      	mov	r3, r0
 80086b4:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 80086b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086ba:	4619      	mov	r1, r3
 80086bc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80086be:	f004 fe39 	bl	800d334 <strcpy>
	return result;
 80086c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3778      	adds	r7, #120	; 0x78
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	20000c58 	.word	0x20000c58
 80086d0:	20000c4a 	.word	0x20000c4a
 80086d4:	20000c4d 	.word	0x20000c4d
 80086d8:	20000c4e 	.word	0x20000c4e
 80086dc:	20000c4f 	.word	0x20000c4f
 80086e0:	20000c56 	.word	0x20000c56
 80086e4:	20000c50 	.word	0x20000c50
 80086e8:	20000c51 	.word	0x20000c51
 80086ec:	20000c55 	.word	0x20000c55
 80086f0:	20000c52 	.word	0x20000c52
 80086f4:	20000c62 	.word	0x20000c62
 80086f8:	20000c53 	.word	0x20000c53
 80086fc:	20000c63 	.word	0x20000c63
 8008700:	20000c54 	.word	0x20000c54
 8008704:	20000c64 	.word	0x20000c64
 8008708:	20000c57 	.word	0x20000c57
 800870c:	20000c59 	.word	0x20000c59
 8008710:	20000c5a 	.word	0x20000c5a
 8008714:	20000c5b 	.word	0x20000c5b
 8008718:	20000c5c 	.word	0x20000c5c
 800871c:	20000c5d 	.word	0x20000c5d
 8008720:	20000c5e 	.word	0x20000c5e
 8008724:	20000c5f 	.word	0x20000c5f
 8008728:	20000c60 	.word	0x20000c60
 800872c:	20000c61 	.word	0x20000c61
 8008730:	20000c65 	.word	0x20000c65
 8008734:	20000c67 	.word	0x20000c67
 8008738:	20000c46 	.word	0x20000c46
 800873c:	20000c47 	.word	0x20000c47
 8008740:	200009c2 	.word	0x200009c2
 8008744:	200009c3 	.word	0x200009c3
 8008748:	20000c48 	.word	0x20000c48
 800874c:	20000c6a 	.word	0x20000c6a
 8008750:	20000b38 	.word	0x20000b38
 8008754:	20000940 	.word	0x20000940
 8008758:	0800e868 	.word	0x0800e868

0800875c <mainLoop>:

void mainLoop() {
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8008762:	f7fd fffb 	bl	800675c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8008766:	2101      	movs	r1, #1
 8008768:	48ac      	ldr	r0, [pc, #688]	; (8008a1c <mainLoop+0x2c0>)
 800876a:	f001 fc4b 	bl	800a004 <HAL_GPIO_ReadPin>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d136      	bne.n	80087e2 <mainLoop+0x86>
 8008774:	2108      	movs	r1, #8
 8008776:	48aa      	ldr	r0, [pc, #680]	; (8008a20 <mainLoop+0x2c4>)
 8008778:	f001 fc44 	bl	800a004 <HAL_GPIO_ReadPin>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d12f      	bne.n	80087e2 <mainLoop+0x86>
 8008782:	2102      	movs	r1, #2
 8008784:	48a5      	ldr	r0, [pc, #660]	; (8008a1c <mainLoop+0x2c0>)
 8008786:	f001 fc3d 	bl	800a004 <HAL_GPIO_ReadPin>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d128      	bne.n	80087e2 <mainLoop+0x86>
 8008790:	2104      	movs	r1, #4
 8008792:	48a2      	ldr	r0, [pc, #648]	; (8008a1c <mainLoop+0x2c0>)
 8008794:	f001 fc36 	bl	800a004 <HAL_GPIO_ReadPin>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d121      	bne.n	80087e2 <mainLoop+0x86>
 800879e:	2108      	movs	r1, #8
 80087a0:	489e      	ldr	r0, [pc, #632]	; (8008a1c <mainLoop+0x2c0>)
 80087a2:	f001 fc2f 	bl	800a004 <HAL_GPIO_ReadPin>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d11a      	bne.n	80087e2 <mainLoop+0x86>
 80087ac:	2180      	movs	r1, #128	; 0x80
 80087ae:	489c      	ldr	r0, [pc, #624]	; (8008a20 <mainLoop+0x2c4>)
 80087b0:	f001 fc28 	bl	800a004 <HAL_GPIO_ReadPin>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d113      	bne.n	80087e2 <mainLoop+0x86>
 80087ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80087be:	4898      	ldr	r0, [pc, #608]	; (8008a20 <mainLoop+0x2c4>)
 80087c0:	f001 fc20 	bl	800a004 <HAL_GPIO_ReadPin>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d10b      	bne.n	80087e2 <mainLoop+0x86>
 80087ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087ce:	4894      	ldr	r0, [pc, #592]	; (8008a20 <mainLoop+0x2c4>)
 80087d0:	f001 fc18 	bl	800a004 <HAL_GPIO_ReadPin>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d103      	bne.n	80087e2 <mainLoop+0x86>
			butonKontrol=0;
 80087da:	4b92      	ldr	r3, [pc, #584]	; (8008a24 <mainLoop+0x2c8>)
 80087dc:	2200      	movs	r2, #0
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	e003      	b.n	80087ea <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80087e2:	4b91      	ldr	r3, [pc, #580]	; (8008a28 <mainLoop+0x2cc>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a91      	ldr	r2, [pc, #580]	; (8008a2c <mainLoop+0x2d0>)
 80087e8:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80087ea:	4b91      	ldr	r3, [pc, #580]	; (8008a30 <mainLoop+0x2d4>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d039      	beq.n	8008866 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80087f2:	bf00      	nop
 80087f4:	488f      	ldr	r0, [pc, #572]	; (8008a34 <mainLoop+0x2d8>)
 80087f6:	f002 fa2e 	bl	800ac56 <HAL_I2C_GetError>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d0f9      	beq.n	80087f4 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008800:	bf00      	nop
 8008802:	488c      	ldr	r0, [pc, #560]	; (8008a34 <mainLoop+0x2d8>)
 8008804:	f002 fa1a 	bl	800ac3c <HAL_I2C_GetState>
 8008808:	4603      	mov	r3, r0
 800880a:	2b20      	cmp	r3, #32
 800880c:	d1f9      	bne.n	8008802 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 800880e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008812:	9302      	str	r3, [sp, #8]
 8008814:	233f      	movs	r3, #63	; 0x3f
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	4b87      	ldr	r3, [pc, #540]	; (8008a38 <mainLoop+0x2dc>)
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	233f      	movs	r3, #63	; 0x3f
 800881e:	2200      	movs	r2, #0
 8008820:	21a0      	movs	r1, #160	; 0xa0
 8008822:	4884      	ldr	r0, [pc, #528]	; (8008a34 <mainLoop+0x2d8>)
 8008824:	f001 fea8 	bl	800a578 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8008828:	2005      	movs	r0, #5
 800882a:	f000 fe1b 	bl	8009464 <HAL_Delay>

		  hafizaYaz=0;
 800882e:	4b80      	ldr	r3, [pc, #512]	; (8008a30 <mainLoop+0x2d4>)
 8008830:	2200      	movs	r2, #0
 8008832:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8008834:	4b81      	ldr	r3, [pc, #516]	; (8008a3c <mainLoop+0x2e0>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d105      	bne.n	8008848 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 800883c:	4a80      	ldr	r2, [pc, #512]	; (8008a40 <mainLoop+0x2e4>)
 800883e:	2101      	movs	r1, #1
 8008840:	2002      	movs	r0, #2
 8008842:	f7f7 ffb9 	bl	80007b8 <lcd_print>
 8008846:	e008      	b.n	800885a <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8008848:	4b7c      	ldr	r3, [pc, #496]	; (8008a3c <mainLoop+0x2e0>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d104      	bne.n	800885a <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8008850:	4a7c      	ldr	r2, [pc, #496]	; (8008a44 <mainLoop+0x2e8>)
 8008852:	2101      	movs	r1, #1
 8008854:	2002      	movs	r0, #2
 8008856:	f7f7 ffaf 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 800885a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800885e:	f000 fe01 	bl	8009464 <HAL_Delay>
		  lcd_clear();
 8008862:	f7f7 ffd5 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8008866:	4b78      	ldr	r3, [pc, #480]	; (8008a48 <mainLoop+0x2ec>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f083 0301 	eor.w	r3, r3, #1
 800886e:	b2db      	uxtb	r3, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	d06e      	beq.n	8008952 <mainLoop+0x1f6>
 8008874:	486f      	ldr	r0, [pc, #444]	; (8008a34 <mainLoop+0x2d8>)
 8008876:	f002 f9e1 	bl	800ac3c <HAL_I2C_GetState>
 800887a:	4603      	mov	r3, r0
 800887c:	2b20      	cmp	r3, #32
 800887e:	d168      	bne.n	8008952 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8008880:	4b72      	ldr	r3, [pc, #456]	; (8008a4c <mainLoop+0x2f0>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	f083 0301 	eor.w	r3, r3, #1
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d044      	beq.n	8008918 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 800888e:	4a70      	ldr	r2, [pc, #448]	; (8008a50 <mainLoop+0x2f4>)
 8008890:	2101      	movs	r1, #1
 8008892:	2001      	movs	r0, #1
 8008894:	f7f7 ff90 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 8008898:	4b68      	ldr	r3, [pc, #416]	; (8008a3c <mainLoop+0x2e0>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 80088a0:	4a6c      	ldr	r2, [pc, #432]	; (8008a54 <mainLoop+0x2f8>)
 80088a2:	2101      	movs	r1, #1
 80088a4:	2002      	movs	r0, #2
 80088a6:	f7f7 ff87 	bl	80007b8 <lcd_print>
 80088aa:	e008      	b.n	80088be <mainLoop+0x162>
			  } else if(dilSecim==1) {
 80088ac:	4b63      	ldr	r3, [pc, #396]	; (8008a3c <mainLoop+0x2e0>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d104      	bne.n	80088be <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 80088b4:	4a68      	ldr	r2, [pc, #416]	; (8008a58 <mainLoop+0x2fc>)
 80088b6:	2101      	movs	r1, #1
 80088b8:	2002      	movs	r0, #2
 80088ba:	f7f7 ff7d 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 80088be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088c2:	f000 fdcf 	bl	8009464 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80088c6:	bf00      	nop
 80088c8:	485a      	ldr	r0, [pc, #360]	; (8008a34 <mainLoop+0x2d8>)
 80088ca:	f002 f9c4 	bl	800ac56 <HAL_I2C_GetError>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d0f9      	beq.n	80088c8 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80088d4:	e003      	b.n	80088de <mainLoop+0x182>
				  HAL_Delay(1000);
 80088d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80088da:	f000 fdc3 	bl	8009464 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80088de:	4855      	ldr	r0, [pc, #340]	; (8008a34 <mainLoop+0x2d8>)
 80088e0:	f002 f9ac 	bl	800ac3c <HAL_I2C_GetState>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	d1f5      	bne.n	80088d6 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 80088ea:	4b54      	ldr	r3, [pc, #336]	; (8008a3c <mainLoop+0x2e0>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d105      	bne.n	80088fe <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 80088f2:	4a5a      	ldr	r2, [pc, #360]	; (8008a5c <mainLoop+0x300>)
 80088f4:	2101      	movs	r1, #1
 80088f6:	2002      	movs	r0, #2
 80088f8:	f7f7 ff5e 	bl	80007b8 <lcd_print>
 80088fc:	e008      	b.n	8008910 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 80088fe:	4b4f      	ldr	r3, [pc, #316]	; (8008a3c <mainLoop+0x2e0>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d104      	bne.n	8008910 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 8008906:	4a56      	ldr	r2, [pc, #344]	; (8008a60 <mainLoop+0x304>)
 8008908:	2101      	movs	r1, #1
 800890a:	2002      	movs	r0, #2
 800890c:	f7f7 ff54 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 8008910:	4b4e      	ldr	r3, [pc, #312]	; (8008a4c <mainLoop+0x2f0>)
 8008912:	2201      	movs	r2, #1
 8008914:	701a      	strb	r2, [r3, #0]
 8008916:	e014      	b.n	8008942 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8008918:	4b48      	ldr	r3, [pc, #288]	; (8008a3c <mainLoop+0x2e0>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d105      	bne.n	800892c <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8008920:	4a50      	ldr	r2, [pc, #320]	; (8008a64 <mainLoop+0x308>)
 8008922:	2101      	movs	r1, #1
 8008924:	2002      	movs	r0, #2
 8008926:	f7f7 ff47 	bl	80007b8 <lcd_print>
 800892a:	e008      	b.n	800893e <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 800892c:	4b43      	ldr	r3, [pc, #268]	; (8008a3c <mainLoop+0x2e0>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d104      	bne.n	800893e <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8008934:	4a4c      	ldr	r2, [pc, #304]	; (8008a68 <mainLoop+0x30c>)
 8008936:	2101      	movs	r1, #1
 8008938:	2002      	movs	r0, #2
 800893a:	f7f7 ff3d 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 800893e:	f7f7 ff67 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 8008942:	f7f7 ff65 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 8008946:	2001      	movs	r0, #1
 8008948:	f7fd faa2 	bl	8005e90 <eepromKontrol>
		  hafizaOku=1;
 800894c:	4b3e      	ldr	r3, [pc, #248]	; (8008a48 <mainLoop+0x2ec>)
 800894e:	2201      	movs	r2, #1
 8008950:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8008952:	4b46      	ldr	r3, [pc, #280]	; (8008a6c <mainLoop+0x310>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d11c      	bne.n	8008994 <mainLoop+0x238>
 800895a:	4b45      	ldr	r3, [pc, #276]	; (8008a70 <mainLoop+0x314>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	f083 0301 	eor.w	r3, r3, #1
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d015      	beq.n	8008994 <mainLoop+0x238>
 8008968:	4b42      	ldr	r3, [pc, #264]	; (8008a74 <mainLoop+0x318>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d111      	bne.n	8008994 <mainLoop+0x238>
			lcd_clear();
 8008970:	f7f7 ff4e 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 8008974:	200a      	movs	r0, #10
 8008976:	f000 fd75 	bl	8009464 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800897a:	4a3f      	ldr	r2, [pc, #252]	; (8008a78 <mainLoop+0x31c>)
 800897c:	2101      	movs	r1, #1
 800897e:	2001      	movs	r0, #1
 8008980:	f7f7 ff1a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8008984:	4a3d      	ldr	r2, [pc, #244]	; (8008a7c <mainLoop+0x320>)
 8008986:	2101      	movs	r1, #1
 8008988:	2002      	movs	r0, #2
 800898a:	f7f7 ff15 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 800898e:	4b38      	ldr	r3, [pc, #224]	; (8008a70 <mainLoop+0x314>)
 8008990:	2201      	movs	r2, #1
 8008992:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8008994:	4b35      	ldr	r3, [pc, #212]	; (8008a6c <mainLoop+0x310>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d112      	bne.n	80089c2 <mainLoop+0x266>
 800899c:	2102      	movs	r1, #2
 800899e:	481f      	ldr	r0, [pc, #124]	; (8008a1c <mainLoop+0x2c0>)
 80089a0:	f001 fb30 	bl	800a004 <HAL_GPIO_ReadPin>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d10b      	bne.n	80089c2 <mainLoop+0x266>
 80089aa:	2104      	movs	r1, #4
 80089ac:	481b      	ldr	r0, [pc, #108]	; (8008a1c <mainLoop+0x2c0>)
 80089ae:	f001 fb29 	bl	800a004 <HAL_GPIO_ReadPin>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d104      	bne.n	80089c2 <mainLoop+0x266>
			menuGiris=1;
 80089b8:	4b2c      	ldr	r3, [pc, #176]	; (8008a6c <mainLoop+0x310>)
 80089ba:	2201      	movs	r2, #1
 80089bc:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80089be:	f7f7 ff27 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 80089c2:	4b2a      	ldr	r3, [pc, #168]	; (8008a6c <mainLoop+0x310>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d102      	bne.n	80089d0 <mainLoop+0x274>
			menu(&hi2c1);
 80089ca:	481a      	ldr	r0, [pc, #104]	; (8008a34 <mainLoop+0x2d8>)
 80089cc:	f7f8 ffaa 	bl	8001924 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80089d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089d4:	4812      	ldr	r0, [pc, #72]	; (8008a20 <mainLoop+0x2c4>)
 80089d6:	f001 fb44 	bl	800a062 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80089da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089de:	4828      	ldr	r0, [pc, #160]	; (8008a80 <mainLoop+0x324>)
 80089e0:	f001 fb10 	bl	800a004 <HAL_GPIO_ReadPin>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <mainLoop+0x2a4>
 80089ea:	4b26      	ldr	r3, [pc, #152]	; (8008a84 <mainLoop+0x328>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	f083 0301 	eor.w	r3, r3, #1
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <mainLoop+0x2a4>
			stopVar=1;
 80089f8:	4b23      	ldr	r3, [pc, #140]	; (8008a88 <mainLoop+0x32c>)
 80089fa:	2201      	movs	r2, #1
 80089fc:	701a      	strb	r2, [r3, #0]
 80089fe:	e002      	b.n	8008a06 <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8008a00:	4b21      	ldr	r3, [pc, #132]	; (8008a88 <mainLoop+0x32c>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8008a06:	f7fd fec9 	bl	800679c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8008a0a:	f7fd fefb 	bl	8006804 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8008a0e:	f7fd ff3f 	bl	8006890 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8008a12:	f7fd ff8f 	bl	8006934 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8008a16:	f7ff fadd 	bl	8007fd4 <checkDemoModCalisma>
		checkLCDBacklight();
 8008a1a:	e6a2      	b.n	8008762 <mainLoop+0x6>
 8008a1c:	40010800 	.word	0x40010800
 8008a20:	40011000 	.word	0x40011000
 8008a24:	20000c78 	.word	0x20000c78
 8008a28:	20000bd4 	.word	0x20000bd4
 8008a2c:	20000bf0 	.word	0x20000bf0
 8008a30:	20000c75 	.word	0x20000c75
 8008a34:	20000e08 	.word	0x20000e08
 8008a38:	20000b38 	.word	0x20000b38
 8008a3c:	20000c6a 	.word	0x20000c6a
 8008a40:	0800e86c 	.word	0x0800e86c
 8008a44:	0800e880 	.word	0x0800e880
 8008a48:	20000c76 	.word	0x20000c76
 8008a4c:	20000c77 	.word	0x20000c77
 8008a50:	0800e894 	.word	0x0800e894
 8008a54:	0800e8a8 	.word	0x0800e8a8
 8008a58:	0800e8bc 	.word	0x0800e8bc
 8008a5c:	0800e8d0 	.word	0x0800e8d0
 8008a60:	0800e8e4 	.word	0x0800e8e4
 8008a64:	0800e8f8 	.word	0x0800e8f8
 8008a68:	0800e90c 	.word	0x0800e90c
 8008a6c:	20000c66 	.word	0x20000c66
 8008a70:	20000c7d 	.word	0x20000c7d
 8008a74:	20000c67 	.word	0x20000c67
 8008a78:	0800e7d0 	.word	0x0800e7d0
 8008a7c:	0800e7e4 	.word	0x0800e7e4
 8008a80:	40010c00 	.word	0x40010c00
 8008a84:	20000c9e 	.word	0x20000c9e
 8008a88:	20000c9b 	.word	0x20000c9b

08008a8c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008a94:	4b04      	ldr	r3, [pc, #16]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	4a03      	ldr	r2, [pc, #12]	; (8008aa8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008a9c:	6013      	str	r3, [r2, #0]
}
 8008a9e:	bf00      	nop
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr
 8008aa8:	20000bd4 	.word	0x20000bd4

08008aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008ab0:	f000 fc76 	bl	80093a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ab8:	f000 fcd4 	bl	8009464 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008abc:	f000 f8a6 	bl	8008c0c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008ac0:	f000 f9c8 	bl	8008e54 <MX_GPIO_Init>
  MX_CAN_Init();
 8008ac4:	f000 f8e8 	bl	8008c98 <MX_CAN_Init>
  MX_I2C1_Init();
 8008ac8:	f000 f91a 	bl	8008d00 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008acc:	f000 f946 	bl	8008d5c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008ad0:	f000 f996 	bl	8008e00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	2140      	movs	r1, #64	; 0x40
 8008ad8:	4842      	ldr	r0, [pc, #264]	; (8008be4 <main+0x138>)
 8008ada:	f001 faaa 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008ade:	2201      	movs	r2, #1
 8008ae0:	2180      	movs	r1, #128	; 0x80
 8008ae2:	4840      	ldr	r0, [pc, #256]	; (8008be4 <main+0x138>)
 8008ae4:	f001 faa5 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008ae8:	200a      	movs	r0, #10
 8008aea:	f000 fcbb 	bl	8009464 <HAL_Delay>
  lcd_init();
 8008aee:	f7f7 fe31 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 8008af2:	200a      	movs	r0, #10
 8008af4:	f000 fcb6 	bl	8009464 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008af8:	483b      	ldr	r0, [pc, #236]	; (8008be8 <main+0x13c>)
 8008afa:	f003 f94d 	bl	800bd98 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008afe:	bf00      	nop
 8008b00:	483a      	ldr	r0, [pc, #232]	; (8008bec <main+0x140>)
 8008b02:	f002 f8a8 	bl	800ac56 <HAL_I2C_GetError>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d0f9      	beq.n	8008b00 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008b0c:	bf00      	nop
 8008b0e:	4837      	ldr	r0, [pc, #220]	; (8008bec <main+0x140>)
 8008b10:	f002 f894 	bl	800ac3c <HAL_I2C_GetState>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d1f9      	bne.n	8008b0e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b20:	4830      	ldr	r0, [pc, #192]	; (8008be4 <main+0x138>)
 8008b22:	f001 fa86 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008b26:	2200      	movs	r2, #0
 8008b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008b2c:	482d      	ldr	r0, [pc, #180]	; (8008be4 <main+0x138>)
 8008b2e:	f001 fa80 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008b32:	2200      	movs	r2, #0
 8008b34:	2104      	movs	r1, #4
 8008b36:	482b      	ldr	r0, [pc, #172]	; (8008be4 <main+0x138>)
 8008b38:	f001 fa7b 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2102      	movs	r1, #2
 8008b40:	4828      	ldr	r0, [pc, #160]	; (8008be4 <main+0x138>)
 8008b42:	f001 fa76 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008b46:	2200      	movs	r2, #0
 8008b48:	2101      	movs	r1, #1
 8008b4a:	4826      	ldr	r0, [pc, #152]	; (8008be4 <main+0x138>)
 8008b4c:	f001 fa71 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008b50:	2200      	movs	r2, #0
 8008b52:	2120      	movs	r1, #32
 8008b54:	4826      	ldr	r0, [pc, #152]	; (8008bf0 <main+0x144>)
 8008b56:	f001 fa6c 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2110      	movs	r1, #16
 8008b5e:	4824      	ldr	r0, [pc, #144]	; (8008bf0 <main+0x144>)
 8008b60:	f001 fa67 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008b64:	2200      	movs	r2, #0
 8008b66:	2180      	movs	r1, #128	; 0x80
 8008b68:	4822      	ldr	r0, [pc, #136]	; (8008bf4 <main+0x148>)
 8008b6a:	f001 fa62 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2140      	movs	r1, #64	; 0x40
 8008b72:	4820      	ldr	r0, [pc, #128]	; (8008bf4 <main+0x148>)
 8008b74:	f001 fa5d 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2120      	movs	r1, #32
 8008b7c:	481d      	ldr	r0, [pc, #116]	; (8008bf4 <main+0x148>)
 8008b7e:	f001 fa58 	bl	800a032 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008b82:	2200      	movs	r2, #0
 8008b84:	2110      	movs	r1, #16
 8008b86:	481b      	ldr	r0, [pc, #108]	; (8008bf4 <main+0x148>)
 8008b88:	f001 fa53 	bl	800a032 <HAL_GPIO_WritePin>

  i2cTest();
 8008b8c:	f7fd fd38 	bl	8006600 <i2cTest>
  HAL_Delay(100);
 8008b90:	2064      	movs	r0, #100	; 0x64
 8008b92:	f000 fc67 	bl	8009464 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008b96:	4a18      	ldr	r2, [pc, #96]	; (8008bf8 <main+0x14c>)
 8008b98:	2101      	movs	r1, #1
 8008b9a:	2001      	movs	r0, #1
 8008b9c:	f7f7 fe0c 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008ba0:	4a16      	ldr	r2, [pc, #88]	; (8008bfc <main+0x150>)
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	2002      	movs	r0, #2
 8008ba6:	f7f7 fe07 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 8008baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008bae:	f000 fc59 	bl	8009464 <HAL_Delay>
  lcd_clear();
 8008bb2:	f7f7 fe2d 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	f7fd f96a 	bl	8005e90 <eepromKontrol>
  HAL_Delay(200);
 8008bbc:	20c8      	movs	r0, #200	; 0xc8
 8008bbe:	f000 fc51 	bl	8009464 <HAL_Delay>
  iotModeStartup(&hi2c1, &huart1);
 8008bc2:	490f      	ldr	r1, [pc, #60]	; (8008c00 <main+0x154>)
 8008bc4:	4809      	ldr	r0, [pc, #36]	; (8008bec <main+0x140>)
 8008bc6:	f7f8 f8a3 	bl	8000d10 <iotModeStartup>

  lcd_clear();
 8008bca:	f7f7 fe21 	bl	8000810 <lcd_clear>
  HAL_Delay(200);
 8008bce:	20c8      	movs	r0, #200	; 0xc8
 8008bd0:	f000 fc48 	bl	8009464 <HAL_Delay>

  backLightTimer = millis;
 8008bd4:	4b0b      	ldr	r3, [pc, #44]	; (8008c04 <main+0x158>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a0b      	ldr	r2, [pc, #44]	; (8008c08 <main+0x15c>)
 8008bda:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008bdc:	f7ff fdbe 	bl	800875c <mainLoop>
 8008be0:	e7fc      	b.n	8008bdc <main+0x130>
 8008be2:	bf00      	nop
 8008be4:	40010c00 	.word	0x40010c00
 8008be8:	20000e5c 	.word	0x20000e5c
 8008bec:	20000e08 	.word	0x20000e08
 8008bf0:	40011000 	.word	0x40011000
 8008bf4:	40010800 	.word	0x40010800
 8008bf8:	0800e920 	.word	0x0800e920
 8008bfc:	0800e934 	.word	0x0800e934
 8008c00:	20000ea4 	.word	0x20000ea4
 8008c04:	20000bd4 	.word	0x20000bd4
 8008c08:	20000bf0 	.word	0x20000bf0

08008c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b090      	sub	sp, #64	; 0x40
 8008c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c12:	f107 0318 	add.w	r3, r7, #24
 8008c16:	2228      	movs	r2, #40	; 0x28
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f004 fb36 	bl	800d28c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c20:	1d3b      	adds	r3, r7, #4
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	605a      	str	r2, [r3, #4]
 8008c28:	609a      	str	r2, [r3, #8]
 8008c2a:	60da      	str	r2, [r3, #12]
 8008c2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c40:	2302      	movs	r3, #2
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008c4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008c50:	f107 0318 	add.w	r3, r7, #24
 8008c54:	4618      	mov	r0, r3
 8008c56:	f002 fc3f 	bl	800b4d8 <HAL_RCC_OscConfig>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008c60:	f000 f9a2 	bl	8008fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008c64:	230f      	movs	r3, #15
 8008c66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008c76:	2300      	movs	r3, #0
 8008c78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008c7a:	1d3b      	adds	r3, r7, #4
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f002 feac 	bl	800b9dc <HAL_RCC_ClockConfig>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008c8a:	f000 f98d 	bl	8008fa8 <Error_Handler>
  }
}
 8008c8e:	bf00      	nop
 8008c90:	3740      	adds	r7, #64	; 0x40
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008c9c:	4b16      	ldr	r3, [pc, #88]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008c9e:	4a17      	ldr	r2, [pc, #92]	; (8008cfc <MX_CAN_Init+0x64>)
 8008ca0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008ca2:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008ca4:	2210      	movs	r2, #16
 8008ca6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008ca8:	4b13      	ldr	r3, [pc, #76]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008cae:	4b12      	ldr	r3, [pc, #72]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008cb4:	4b10      	ldr	r3, [pc, #64]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008cba:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008cc0:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008cc6:	4b0c      	ldr	r3, [pc, #48]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008ccc:	4b0a      	ldr	r3, [pc, #40]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008cd2:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008cd8:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008cde:	4b06      	ldr	r3, [pc, #24]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008ce4:	4804      	ldr	r0, [pc, #16]	; (8008cf8 <MX_CAN_Init+0x60>)
 8008ce6:	f000 fbe1 	bl	80094ac <HAL_CAN_Init>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008cf0:	f000 f95a 	bl	8008fa8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008cf4:	bf00      	nop
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20000de0 	.word	0x20000de0
 8008cfc:	40006400 	.word	0x40006400

08008d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008d04:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <MX_I2C1_Init+0x50>)
 8008d06:	4a13      	ldr	r2, [pc, #76]	; (8008d54 <MX_I2C1_Init+0x54>)
 8008d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008d0a:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <MX_I2C1_Init+0x50>)
 8008d0c:	4a12      	ldr	r2, [pc, #72]	; (8008d58 <MX_I2C1_Init+0x58>)
 8008d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008d10:	4b0f      	ldr	r3, [pc, #60]	; (8008d50 <MX_I2C1_Init+0x50>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008d16:	4b0e      	ldr	r3, [pc, #56]	; (8008d50 <MX_I2C1_Init+0x50>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <MX_I2C1_Init+0x50>)
 8008d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008d24:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <MX_I2C1_Init+0x50>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008d2a:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <MX_I2C1_Init+0x50>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008d30:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <MX_I2C1_Init+0x50>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008d36:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <MX_I2C1_Init+0x50>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008d3c:	4804      	ldr	r0, [pc, #16]	; (8008d50 <MX_I2C1_Init+0x50>)
 8008d3e:	f001 f9a9 	bl	800a094 <HAL_I2C_Init>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008d48:	f000 f92e 	bl	8008fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008d4c:	bf00      	nop
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20000e08 	.word	0x20000e08
 8008d54:	40005400 	.word	0x40005400
 8008d58:	00061a80 	.word	0x00061a80

08008d5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d62:	f107 0308 	add.w	r3, r7, #8
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]
 8008d6a:	605a      	str	r2, [r3, #4]
 8008d6c:	609a      	str	r2, [r3, #8]
 8008d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d70:	463b      	mov	r3, r7
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008d78:	4b1f      	ldr	r3, [pc, #124]	; (8008df8 <MX_TIM1_Init+0x9c>)
 8008d7a:	4a20      	ldr	r2, [pc, #128]	; (8008dfc <MX_TIM1_Init+0xa0>)
 8008d7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008d7e:	4b1e      	ldr	r3, [pc, #120]	; (8008df8 <MX_TIM1_Init+0x9c>)
 8008d80:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008d84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d86:	4b1c      	ldr	r3, [pc, #112]	; (8008df8 <MX_TIM1_Init+0x9c>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <MX_TIM1_Init+0x9c>)
 8008d8e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008d92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d94:	4b18      	ldr	r3, [pc, #96]	; (8008df8 <MX_TIM1_Init+0x9c>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008d9a:	4b17      	ldr	r3, [pc, #92]	; (8008df8 <MX_TIM1_Init+0x9c>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008da0:	4b15      	ldr	r3, [pc, #84]	; (8008df8 <MX_TIM1_Init+0x9c>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008da6:	4814      	ldr	r0, [pc, #80]	; (8008df8 <MX_TIM1_Init+0x9c>)
 8008da8:	f002 ffa6 	bl	800bcf8 <HAL_TIM_Base_Init>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008db2:	f000 f8f9 	bl	8008fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	480d      	ldr	r0, [pc, #52]	; (8008df8 <MX_TIM1_Init+0x9c>)
 8008dc4:	f003 f950 	bl	800c068 <HAL_TIM_ConfigClockSource>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008dce:	f000 f8eb 	bl	8008fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008dda:	463b      	mov	r3, r7
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4806      	ldr	r0, [pc, #24]	; (8008df8 <MX_TIM1_Init+0x9c>)
 8008de0:	f003 fb3e 	bl	800c460 <HAL_TIMEx_MasterConfigSynchronization>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008dea:	f000 f8dd 	bl	8008fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008dee:	bf00      	nop
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000e5c 	.word	0x20000e5c
 8008dfc:	40012c00 	.word	0x40012c00

08008e00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008e04:	4b11      	ldr	r3, [pc, #68]	; (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e06:	4a12      	ldr	r2, [pc, #72]	; (8008e50 <MX_USART1_UART_Init+0x50>)
 8008e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008e0a:	4b10      	ldr	r3, [pc, #64]	; (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008e12:	4b0e      	ldr	r3, [pc, #56]	; (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008e18:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008e1e:	4b0b      	ldr	r3, [pc, #44]	; (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e26:	220c      	movs	r2, #12
 8008e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e2a:	4b08      	ldr	r3, [pc, #32]	; (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e30:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e36:	4805      	ldr	r0, [pc, #20]	; (8008e4c <MX_USART1_UART_Init+0x4c>)
 8008e38:	f003 fb90 	bl	800c55c <HAL_UART_Init>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008e42:	f000 f8b1 	bl	8008fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e46:	bf00      	nop
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000ea4 	.word	0x20000ea4
 8008e50:	40013800 	.word	0x40013800

08008e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	605a      	str	r2, [r3, #4]
 8008e64:	609a      	str	r2, [r3, #8]
 8008e66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e68:	4b4b      	ldr	r3, [pc, #300]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	4a4a      	ldr	r2, [pc, #296]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008e6e:	f043 0310 	orr.w	r3, r3, #16
 8008e72:	6193      	str	r3, [r2, #24]
 8008e74:	4b48      	ldr	r3, [pc, #288]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e80:	4b45      	ldr	r3, [pc, #276]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	4a44      	ldr	r2, [pc, #272]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008e86:	f043 0320 	orr.w	r3, r3, #32
 8008e8a:	6193      	str	r3, [r2, #24]
 8008e8c:	4b42      	ldr	r3, [pc, #264]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f003 0320 	and.w	r3, r3, #32
 8008e94:	60bb      	str	r3, [r7, #8]
 8008e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e98:	4b3f      	ldr	r3, [pc, #252]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	4a3e      	ldr	r2, [pc, #248]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008e9e:	f043 0304 	orr.w	r3, r3, #4
 8008ea2:	6193      	str	r3, [r2, #24]
 8008ea4:	4b3c      	ldr	r3, [pc, #240]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	607b      	str	r3, [r7, #4]
 8008eae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008eb0:	4b39      	ldr	r3, [pc, #228]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	4a38      	ldr	r2, [pc, #224]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008eb6:	f043 0308 	orr.w	r3, r3, #8
 8008eba:	6193      	str	r3, [r2, #24]
 8008ebc:	4b36      	ldr	r3, [pc, #216]	; (8008f98 <MX_GPIO_Init+0x144>)
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	f003 0308 	and.w	r3, r3, #8
 8008ec4:	603b      	str	r3, [r7, #0]
 8008ec6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008ec8:	2200      	movs	r2, #0
 8008eca:	21f0      	movs	r1, #240	; 0xf0
 8008ecc:	4833      	ldr	r0, [pc, #204]	; (8008f9c <MX_GPIO_Init+0x148>)
 8008ece:	f001 f8b0 	bl	800a032 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f241 0130 	movw	r1, #4144	; 0x1030
 8008ed8:	4831      	ldr	r0, [pc, #196]	; (8008fa0 <MX_GPIO_Init+0x14c>)
 8008eda:	f001 f8aa 	bl	800a032 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f640 4107 	movw	r1, #3079	; 0xc07
 8008ee4:	482f      	ldr	r0, [pc, #188]	; (8008fa4 <MX_GPIO_Init+0x150>)
 8008ee6:	f001 f8a4 	bl	800a032 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008eea:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008eee:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ef8:	f107 0310 	add.w	r3, r7, #16
 8008efc:	4619      	mov	r1, r3
 8008efe:	4828      	ldr	r0, [pc, #160]	; (8008fa0 <MX_GPIO_Init+0x14c>)
 8008f00:	f000 fe20 	bl	8009b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008f04:	f248 130f 	movw	r3, #33039	; 0x810f
 8008f08:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f12:	f107 0310 	add.w	r3, r7, #16
 8008f16:	4619      	mov	r1, r3
 8008f18:	4820      	ldr	r0, [pc, #128]	; (8008f9c <MX_GPIO_Init+0x148>)
 8008f1a:	f000 fe13 	bl	8009b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008f1e:	23f0      	movs	r3, #240	; 0xf0
 8008f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f22:	2301      	movs	r3, #1
 8008f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f2e:	f107 0310 	add.w	r3, r7, #16
 8008f32:	4619      	mov	r1, r3
 8008f34:	4819      	ldr	r0, [pc, #100]	; (8008f9c <MX_GPIO_Init+0x148>)
 8008f36:	f000 fe05 	bl	8009b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008f3a:	f241 0330 	movw	r3, #4144	; 0x1030
 8008f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f40:	2301      	movs	r3, #1
 8008f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f4c:	f107 0310 	add.w	r3, r7, #16
 8008f50:	4619      	mov	r1, r3
 8008f52:	4813      	ldr	r0, [pc, #76]	; (8008fa0 <MX_GPIO_Init+0x14c>)
 8008f54:	f000 fdf6 	bl	8009b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008f58:	f640 4307 	movw	r3, #3079	; 0xc07
 8008f5c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f66:	2302      	movs	r3, #2
 8008f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	4619      	mov	r1, r3
 8008f70:	480c      	ldr	r0, [pc, #48]	; (8008fa4 <MX_GPIO_Init+0x150>)
 8008f72:	f000 fde7 	bl	8009b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008f76:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f84:	f107 0310 	add.w	r3, r7, #16
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4806      	ldr	r0, [pc, #24]	; (8008fa4 <MX_GPIO_Init+0x150>)
 8008f8c:	f000 fdda 	bl	8009b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008f90:	bf00      	nop
 8008f92:	3720      	adds	r7, #32
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	40010800 	.word	0x40010800
 8008fa0:	40011000 	.word	0x40011000
 8008fa4:	40010c00 	.word	0x40010c00

08008fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008fac:	bf00      	nop
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bc80      	pop	{r7}
 8008fb2:	4770      	bx	lr

08008fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008fba:	4b15      	ldr	r3, [pc, #84]	; (8009010 <HAL_MspInit+0x5c>)
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	4a14      	ldr	r2, [pc, #80]	; (8009010 <HAL_MspInit+0x5c>)
 8008fc0:	f043 0301 	orr.w	r3, r3, #1
 8008fc4:	6193      	str	r3, [r2, #24]
 8008fc6:	4b12      	ldr	r3, [pc, #72]	; (8009010 <HAL_MspInit+0x5c>)
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	60bb      	str	r3, [r7, #8]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <HAL_MspInit+0x5c>)
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	4a0e      	ldr	r2, [pc, #56]	; (8009010 <HAL_MspInit+0x5c>)
 8008fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fdc:	61d3      	str	r3, [r2, #28]
 8008fde:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <HAL_MspInit+0x5c>)
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008fea:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <HAL_MspInit+0x60>)
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	4a04      	ldr	r2, [pc, #16]	; (8009014 <HAL_MspInit+0x60>)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009006:	bf00      	nop
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr
 8009010:	40021000 	.word	0x40021000
 8009014:	40010000 	.word	0x40010000

08009018 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009020:	f107 0310 	add.w	r3, r7, #16
 8009024:	2200      	movs	r2, #0
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	605a      	str	r2, [r3, #4]
 800902a:	609a      	str	r2, [r3, #8]
 800902c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1c      	ldr	r2, [pc, #112]	; (80090a4 <HAL_CAN_MspInit+0x8c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d131      	bne.n	800909c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009038:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <HAL_CAN_MspInit+0x90>)
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	4a1a      	ldr	r2, [pc, #104]	; (80090a8 <HAL_CAN_MspInit+0x90>)
 800903e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009042:	61d3      	str	r3, [r2, #28]
 8009044:	4b18      	ldr	r3, [pc, #96]	; (80090a8 <HAL_CAN_MspInit+0x90>)
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009050:	4b15      	ldr	r3, [pc, #84]	; (80090a8 <HAL_CAN_MspInit+0x90>)
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	4a14      	ldr	r2, [pc, #80]	; (80090a8 <HAL_CAN_MspInit+0x90>)
 8009056:	f043 0304 	orr.w	r3, r3, #4
 800905a:	6193      	str	r3, [r2, #24]
 800905c:	4b12      	ldr	r3, [pc, #72]	; (80090a8 <HAL_CAN_MspInit+0x90>)
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	60bb      	str	r3, [r7, #8]
 8009066:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009068:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800906c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800906e:	2300      	movs	r3, #0
 8009070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009072:	2300      	movs	r3, #0
 8009074:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009076:	f107 0310 	add.w	r3, r7, #16
 800907a:	4619      	mov	r1, r3
 800907c:	480b      	ldr	r0, [pc, #44]	; (80090ac <HAL_CAN_MspInit+0x94>)
 800907e:	f000 fd61 	bl	8009b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009088:	2302      	movs	r3, #2
 800908a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800908c:	2303      	movs	r3, #3
 800908e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009090:	f107 0310 	add.w	r3, r7, #16
 8009094:	4619      	mov	r1, r3
 8009096:	4805      	ldr	r0, [pc, #20]	; (80090ac <HAL_CAN_MspInit+0x94>)
 8009098:	f000 fd54 	bl	8009b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800909c:	bf00      	nop
 800909e:	3720      	adds	r7, #32
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	40006400 	.word	0x40006400
 80090a8:	40021000 	.word	0x40021000
 80090ac:	40010800 	.word	0x40010800

080090b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090b8:	f107 0310 	add.w	r3, r7, #16
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	609a      	str	r2, [r3, #8]
 80090c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a15      	ldr	r2, [pc, #84]	; (8009120 <HAL_I2C_MspInit+0x70>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d123      	bne.n	8009118 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80090d0:	4b14      	ldr	r3, [pc, #80]	; (8009124 <HAL_I2C_MspInit+0x74>)
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	4a13      	ldr	r2, [pc, #76]	; (8009124 <HAL_I2C_MspInit+0x74>)
 80090d6:	f043 0308 	orr.w	r3, r3, #8
 80090da:	6193      	str	r3, [r2, #24]
 80090dc:	4b11      	ldr	r3, [pc, #68]	; (8009124 <HAL_I2C_MspInit+0x74>)
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	f003 0308 	and.w	r3, r3, #8
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80090e8:	23c0      	movs	r3, #192	; 0xc0
 80090ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80090ec:	2312      	movs	r3, #18
 80090ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80090f0:	2303      	movs	r3, #3
 80090f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090f4:	f107 0310 	add.w	r3, r7, #16
 80090f8:	4619      	mov	r1, r3
 80090fa:	480b      	ldr	r0, [pc, #44]	; (8009128 <HAL_I2C_MspInit+0x78>)
 80090fc:	f000 fd22 	bl	8009b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009100:	4b08      	ldr	r3, [pc, #32]	; (8009124 <HAL_I2C_MspInit+0x74>)
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	4a07      	ldr	r2, [pc, #28]	; (8009124 <HAL_I2C_MspInit+0x74>)
 8009106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800910a:	61d3      	str	r3, [r2, #28]
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <HAL_I2C_MspInit+0x74>)
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009114:	60bb      	str	r3, [r7, #8]
 8009116:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009118:	bf00      	nop
 800911a:	3720      	adds	r7, #32
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	40005400 	.word	0x40005400
 8009124:	40021000 	.word	0x40021000
 8009128:	40010c00 	.word	0x40010c00

0800912c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a0a      	ldr	r2, [pc, #40]	; (8009164 <HAL_I2C_MspDeInit+0x38>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d10d      	bne.n	800915a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800913e:	4b0a      	ldr	r3, [pc, #40]	; (8009168 <HAL_I2C_MspDeInit+0x3c>)
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	4a09      	ldr	r2, [pc, #36]	; (8009168 <HAL_I2C_MspDeInit+0x3c>)
 8009144:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009148:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800914a:	2140      	movs	r1, #64	; 0x40
 800914c:	4807      	ldr	r0, [pc, #28]	; (800916c <HAL_I2C_MspDeInit+0x40>)
 800914e:	f000 fe8d 	bl	8009e6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009152:	2180      	movs	r1, #128	; 0x80
 8009154:	4805      	ldr	r0, [pc, #20]	; (800916c <HAL_I2C_MspDeInit+0x40>)
 8009156:	f000 fe89 	bl	8009e6c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	40005400 	.word	0x40005400
 8009168:	40021000 	.word	0x40021000
 800916c:	40010c00 	.word	0x40010c00

08009170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a0d      	ldr	r2, [pc, #52]	; (80091b4 <HAL_TIM_Base_MspInit+0x44>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d113      	bne.n	80091aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009182:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <HAL_TIM_Base_MspInit+0x48>)
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	4a0c      	ldr	r2, [pc, #48]	; (80091b8 <HAL_TIM_Base_MspInit+0x48>)
 8009188:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800918c:	6193      	str	r3, [r2, #24]
 800918e:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <HAL_TIM_Base_MspInit+0x48>)
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800919a:	2200      	movs	r2, #0
 800919c:	2100      	movs	r1, #0
 800919e:	2019      	movs	r0, #25
 80091a0:	f000 fb57 	bl	8009852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80091a4:	2019      	movs	r0, #25
 80091a6:	f000 fb70 	bl	800988a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	40012c00 	.word	0x40012c00
 80091b8:	40021000 	.word	0x40021000

080091bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091c4:	f107 0310 	add.w	r3, r7, #16
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	605a      	str	r2, [r3, #4]
 80091ce:	609a      	str	r2, [r3, #8]
 80091d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a20      	ldr	r2, [pc, #128]	; (8009258 <HAL_UART_MspInit+0x9c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d139      	bne.n	8009250 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80091dc:	4b1f      	ldr	r3, [pc, #124]	; (800925c <HAL_UART_MspInit+0xa0>)
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	4a1e      	ldr	r2, [pc, #120]	; (800925c <HAL_UART_MspInit+0xa0>)
 80091e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091e6:	6193      	str	r3, [r2, #24]
 80091e8:	4b1c      	ldr	r3, [pc, #112]	; (800925c <HAL_UART_MspInit+0xa0>)
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091f0:	60fb      	str	r3, [r7, #12]
 80091f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091f4:	4b19      	ldr	r3, [pc, #100]	; (800925c <HAL_UART_MspInit+0xa0>)
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	4a18      	ldr	r2, [pc, #96]	; (800925c <HAL_UART_MspInit+0xa0>)
 80091fa:	f043 0304 	orr.w	r3, r3, #4
 80091fe:	6193      	str	r3, [r2, #24]
 8009200:	4b16      	ldr	r3, [pc, #88]	; (800925c <HAL_UART_MspInit+0xa0>)
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	60bb      	str	r3, [r7, #8]
 800920a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800920c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009212:	2302      	movs	r3, #2
 8009214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009216:	2303      	movs	r3, #3
 8009218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800921a:	f107 0310 	add.w	r3, r7, #16
 800921e:	4619      	mov	r1, r3
 8009220:	480f      	ldr	r0, [pc, #60]	; (8009260 <HAL_UART_MspInit+0xa4>)
 8009222:	f000 fc8f 	bl	8009b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800922a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800922c:	2300      	movs	r3, #0
 800922e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009230:	2300      	movs	r3, #0
 8009232:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009234:	f107 0310 	add.w	r3, r7, #16
 8009238:	4619      	mov	r1, r3
 800923a:	4809      	ldr	r0, [pc, #36]	; (8009260 <HAL_UART_MspInit+0xa4>)
 800923c:	f000 fc82 	bl	8009b44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009240:	2200      	movs	r2, #0
 8009242:	2100      	movs	r1, #0
 8009244:	2025      	movs	r0, #37	; 0x25
 8009246:	f000 fb04 	bl	8009852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800924a:	2025      	movs	r0, #37	; 0x25
 800924c:	f000 fb1d 	bl	800988a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009250:	bf00      	nop
 8009252:	3720      	adds	r7, #32
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	40013800 	.word	0x40013800
 800925c:	40021000 	.word	0x40021000
 8009260:	40010800 	.word	0x40010800

08009264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009268:	e7fe      	b.n	8009268 <NMI_Handler+0x4>

0800926a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800926a:	b480      	push	{r7}
 800926c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800926e:	e7fe      	b.n	800926e <HardFault_Handler+0x4>

08009270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009274:	e7fe      	b.n	8009274 <MemManage_Handler+0x4>

08009276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009276:	b480      	push	{r7}
 8009278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800927a:	e7fe      	b.n	800927a <BusFault_Handler+0x4>

0800927c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800927c:	b480      	push	{r7}
 800927e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009280:	e7fe      	b.n	8009280 <UsageFault_Handler+0x4>

08009282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009282:	b480      	push	{r7}
 8009284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009286:	bf00      	nop
 8009288:	46bd      	mov	sp, r7
 800928a:	bc80      	pop	{r7}
 800928c:	4770      	bx	lr

0800928e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800928e:	b480      	push	{r7}
 8009290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009292:	bf00      	nop
 8009294:	46bd      	mov	sp, r7
 8009296:	bc80      	pop	{r7}
 8009298:	4770      	bx	lr

0800929a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800929a:	b480      	push	{r7}
 800929c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800929e:	bf00      	nop
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bc80      	pop	{r7}
 80092a4:	4770      	bx	lr

080092a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80092aa:	f000 f8bf 	bl	800942c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80092ae:	bf00      	nop
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80092b8:	4802      	ldr	r0, [pc, #8]	; (80092c4 <TIM1_UP_IRQHandler+0x10>)
 80092ba:	f002 fdcd 	bl	800be58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80092be:	bf00      	nop
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	20000e5c 	.word	0x20000e5c

080092c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80092cc:	4802      	ldr	r0, [pc, #8]	; (80092d8 <USART1_IRQHandler+0x10>)
 80092ce:	f003 f9cb 	bl	800c668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80092d2:	bf00      	nop
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000ea4 	.word	0x20000ea4

080092dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80092e4:	4a14      	ldr	r2, [pc, #80]	; (8009338 <_sbrk+0x5c>)
 80092e6:	4b15      	ldr	r3, [pc, #84]	; (800933c <_sbrk+0x60>)
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80092f0:	4b13      	ldr	r3, [pc, #76]	; (8009340 <_sbrk+0x64>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80092f8:	4b11      	ldr	r3, [pc, #68]	; (8009340 <_sbrk+0x64>)
 80092fa:	4a12      	ldr	r2, [pc, #72]	; (8009344 <_sbrk+0x68>)
 80092fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80092fe:	4b10      	ldr	r3, [pc, #64]	; (8009340 <_sbrk+0x64>)
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4413      	add	r3, r2
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	429a      	cmp	r2, r3
 800930a:	d207      	bcs.n	800931c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800930c:	f003 ffe6 	bl	800d2dc <__errno>
 8009310:	4603      	mov	r3, r0
 8009312:	220c      	movs	r2, #12
 8009314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009316:	f04f 33ff 	mov.w	r3, #4294967295
 800931a:	e009      	b.n	8009330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800931c:	4b08      	ldr	r3, [pc, #32]	; (8009340 <_sbrk+0x64>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009322:	4b07      	ldr	r3, [pc, #28]	; (8009340 <_sbrk+0x64>)
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4413      	add	r3, r2
 800932a:	4a05      	ldr	r2, [pc, #20]	; (8009340 <_sbrk+0x64>)
 800932c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800932e:	68fb      	ldr	r3, [r7, #12]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	2000c000 	.word	0x2000c000
 800933c:	00000400 	.word	0x00000400
 8009340:	20000eec 	.word	0x20000eec
 8009344:	20001040 	.word	0x20001040

08009348 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800934c:	bf00      	nop
 800934e:	46bd      	mov	sp, r7
 8009350:	bc80      	pop	{r7}
 8009352:	4770      	bx	lr

08009354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009354:	480c      	ldr	r0, [pc, #48]	; (8009388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009356:	490d      	ldr	r1, [pc, #52]	; (800938c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009358:	4a0d      	ldr	r2, [pc, #52]	; (8009390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800935a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800935c:	e002      	b.n	8009364 <LoopCopyDataInit>

0800935e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800935e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009362:	3304      	adds	r3, #4

08009364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009368:	d3f9      	bcc.n	800935e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800936a:	4a0a      	ldr	r2, [pc, #40]	; (8009394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800936c:	4c0a      	ldr	r4, [pc, #40]	; (8009398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800936e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009370:	e001      	b.n	8009376 <LoopFillZerobss>

08009372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009374:	3204      	adds	r2, #4

08009376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009378:	d3fb      	bcc.n	8009372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800937a:	f7ff ffe5 	bl	8009348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800937e:	f003 ffb3 	bl	800d2e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009382:	f7ff fb93 	bl	8008aac <main>
  bx lr
 8009386:	4770      	bx	lr
  ldr r0, =_sdata
 8009388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800938c:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8009390:	0800e9d4 	.word	0x0800e9d4
  ldr r2, =_sbss
 8009394:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8009398:	2000103c 	.word	0x2000103c

0800939c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800939c:	e7fe      	b.n	800939c <ADC1_2_IRQHandler>
	...

080093a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80093a4:	4b08      	ldr	r3, [pc, #32]	; (80093c8 <HAL_Init+0x28>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a07      	ldr	r2, [pc, #28]	; (80093c8 <HAL_Init+0x28>)
 80093aa:	f043 0310 	orr.w	r3, r3, #16
 80093ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80093b0:	2003      	movs	r0, #3
 80093b2:	f000 fa43 	bl	800983c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80093b6:	200f      	movs	r0, #15
 80093b8:	f000 f808 	bl	80093cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80093bc:	f7ff fdfa 	bl	8008fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	40022000 	.word	0x40022000

080093cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80093d4:	4b12      	ldr	r3, [pc, #72]	; (8009420 <HAL_InitTick+0x54>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	4b12      	ldr	r3, [pc, #72]	; (8009424 <HAL_InitTick+0x58>)
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	4619      	mov	r1, r3
 80093de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80093e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fa5b 	bl	80098a6 <HAL_SYSTICK_Config>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e00e      	b.n	8009418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b0f      	cmp	r3, #15
 80093fe:	d80a      	bhi.n	8009416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009400:	2200      	movs	r2, #0
 8009402:	6879      	ldr	r1, [r7, #4]
 8009404:	f04f 30ff 	mov.w	r0, #4294967295
 8009408:	f000 fa23 	bl	8009852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800940c:	4a06      	ldr	r2, [pc, #24]	; (8009428 <HAL_InitTick+0x5c>)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	e000      	b.n	8009418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
}
 8009418:	4618      	mov	r0, r3
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	200009c4 	.word	0x200009c4
 8009424:	200009cc 	.word	0x200009cc
 8009428:	200009c8 	.word	0x200009c8

0800942c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009430:	4b05      	ldr	r3, [pc, #20]	; (8009448 <HAL_IncTick+0x1c>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	4b05      	ldr	r3, [pc, #20]	; (800944c <HAL_IncTick+0x20>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4413      	add	r3, r2
 800943c:	4a03      	ldr	r2, [pc, #12]	; (800944c <HAL_IncTick+0x20>)
 800943e:	6013      	str	r3, [r2, #0]
}
 8009440:	bf00      	nop
 8009442:	46bd      	mov	sp, r7
 8009444:	bc80      	pop	{r7}
 8009446:	4770      	bx	lr
 8009448:	200009cc 	.word	0x200009cc
 800944c:	20000ef0 	.word	0x20000ef0

08009450 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0
  return uwTick;
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <HAL_GetTick+0x10>)
 8009456:	681b      	ldr	r3, [r3, #0]
}
 8009458:	4618      	mov	r0, r3
 800945a:	46bd      	mov	sp, r7
 800945c:	bc80      	pop	{r7}
 800945e:	4770      	bx	lr
 8009460:	20000ef0 	.word	0x20000ef0

08009464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800946c:	f7ff fff0 	bl	8009450 <HAL_GetTick>
 8009470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947c:	d005      	beq.n	800948a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800947e:	4b0a      	ldr	r3, [pc, #40]	; (80094a8 <HAL_Delay+0x44>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800948a:	bf00      	nop
 800948c:	f7ff ffe0 	bl	8009450 <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	429a      	cmp	r2, r3
 800949a:	d8f7      	bhi.n	800948c <HAL_Delay+0x28>
  {
  }
}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	200009cc 	.word	0x200009cc

080094ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e0ed      	b.n	800969a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d102      	bne.n	80094d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff fda4 	bl	8009018 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f042 0201 	orr.w	r2, r2, #1
 80094de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094e0:	f7ff ffb6 	bl	8009450 <HAL_GetTick>
 80094e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80094e6:	e012      	b.n	800950e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80094e8:	f7ff ffb2 	bl	8009450 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	2b0a      	cmp	r3, #10
 80094f4:	d90b      	bls.n	800950e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2205      	movs	r2, #5
 8009506:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e0c5      	b.n	800969a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	d0e5      	beq.n	80094e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f022 0202 	bic.w	r2, r2, #2
 800952a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800952c:	f7ff ff90 	bl	8009450 <HAL_GetTick>
 8009530:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009532:	e012      	b.n	800955a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009534:	f7ff ff8c 	bl	8009450 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	2b0a      	cmp	r3, #10
 8009540:	d90b      	bls.n	800955a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2205      	movs	r2, #5
 8009552:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e09f      	b.n	800969a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	f003 0302 	and.w	r3, r3, #2
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e5      	bne.n	8009534 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	7e1b      	ldrb	r3, [r3, #24]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d108      	bne.n	8009582 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	e007      	b.n	8009592 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009590:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	7e5b      	ldrb	r3, [r3, #25]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d108      	bne.n	80095ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	e007      	b.n	80095bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	7e9b      	ldrb	r3, [r3, #26]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d108      	bne.n	80095d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f042 0220 	orr.w	r2, r2, #32
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	e007      	b.n	80095e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f022 0220 	bic.w	r2, r2, #32
 80095e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	7edb      	ldrb	r3, [r3, #27]
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d108      	bne.n	8009600 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0210 	bic.w	r2, r2, #16
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	e007      	b.n	8009610 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f042 0210 	orr.w	r2, r2, #16
 800960e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	7f1b      	ldrb	r3, [r3, #28]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d108      	bne.n	800962a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0208 	orr.w	r2, r2, #8
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	e007      	b.n	800963a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0208 	bic.w	r2, r2, #8
 8009638:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	7f5b      	ldrb	r3, [r3, #29]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d108      	bne.n	8009654 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f042 0204 	orr.w	r2, r2, #4
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	e007      	b.n	8009664 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f022 0204 	bic.w	r2, r2, #4
 8009662:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	431a      	orrs	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	431a      	orrs	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	ea42 0103 	orr.w	r1, r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	1e5a      	subs	r2, r3, #1
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	430a      	orrs	r2, r1
 8009688:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <__NVIC_SetPriorityGrouping>:
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f003 0307 	and.w	r3, r3, #7
 80096b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096b4:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <__NVIC_SetPriorityGrouping+0x44>)
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80096c0:	4013      	ands	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80096cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80096d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096d6:	4a04      	ldr	r2, [pc, #16]	; (80096e8 <__NVIC_SetPriorityGrouping+0x44>)
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	60d3      	str	r3, [r2, #12]
}
 80096dc:	bf00      	nop
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	e000ed00 	.word	0xe000ed00

080096ec <__NVIC_GetPriorityGrouping>:
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80096f0:	4b04      	ldr	r3, [pc, #16]	; (8009704 <__NVIC_GetPriorityGrouping+0x18>)
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	0a1b      	lsrs	r3, r3, #8
 80096f6:	f003 0307 	and.w	r3, r3, #7
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bc80      	pop	{r7}
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	e000ed00 	.word	0xe000ed00

08009708 <__NVIC_EnableIRQ>:
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009716:	2b00      	cmp	r3, #0
 8009718:	db0b      	blt.n	8009732 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	f003 021f 	and.w	r2, r3, #31
 8009720:	4906      	ldr	r1, [pc, #24]	; (800973c <__NVIC_EnableIRQ+0x34>)
 8009722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009726:	095b      	lsrs	r3, r3, #5
 8009728:	2001      	movs	r0, #1
 800972a:	fa00 f202 	lsl.w	r2, r0, r2
 800972e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009732:	bf00      	nop
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	bc80      	pop	{r7}
 800973a:	4770      	bx	lr
 800973c:	e000e100 	.word	0xe000e100

08009740 <__NVIC_SetPriority>:
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	6039      	str	r1, [r7, #0]
 800974a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800974c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009750:	2b00      	cmp	r3, #0
 8009752:	db0a      	blt.n	800976a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	b2da      	uxtb	r2, r3
 8009758:	490c      	ldr	r1, [pc, #48]	; (800978c <__NVIC_SetPriority+0x4c>)
 800975a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800975e:	0112      	lsls	r2, r2, #4
 8009760:	b2d2      	uxtb	r2, r2
 8009762:	440b      	add	r3, r1
 8009764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009768:	e00a      	b.n	8009780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	b2da      	uxtb	r2, r3
 800976e:	4908      	ldr	r1, [pc, #32]	; (8009790 <__NVIC_SetPriority+0x50>)
 8009770:	79fb      	ldrb	r3, [r7, #7]
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	3b04      	subs	r3, #4
 8009778:	0112      	lsls	r2, r2, #4
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	440b      	add	r3, r1
 800977e:	761a      	strb	r2, [r3, #24]
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	bc80      	pop	{r7}
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	e000e100 	.word	0xe000e100
 8009790:	e000ed00 	.word	0xe000ed00

08009794 <NVIC_EncodePriority>:
{
 8009794:	b480      	push	{r7}
 8009796:	b089      	sub	sp, #36	; 0x24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f003 0307 	and.w	r3, r3, #7
 80097a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f1c3 0307 	rsb	r3, r3, #7
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	bf28      	it	cs
 80097b2:	2304      	movcs	r3, #4
 80097b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	3304      	adds	r3, #4
 80097ba:	2b06      	cmp	r3, #6
 80097bc:	d902      	bls.n	80097c4 <NVIC_EncodePriority+0x30>
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	3b03      	subs	r3, #3
 80097c2:	e000      	b.n	80097c6 <NVIC_EncodePriority+0x32>
 80097c4:	2300      	movs	r3, #0
 80097c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097c8:	f04f 32ff 	mov.w	r2, #4294967295
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	fa02 f303 	lsl.w	r3, r2, r3
 80097d2:	43da      	mvns	r2, r3
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	401a      	ands	r2, r3
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097dc:	f04f 31ff 	mov.w	r1, #4294967295
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	fa01 f303 	lsl.w	r3, r1, r3
 80097e6:	43d9      	mvns	r1, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097ec:	4313      	orrs	r3, r2
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3724      	adds	r7, #36	; 0x24
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bc80      	pop	{r7}
 80097f6:	4770      	bx	lr

080097f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3b01      	subs	r3, #1
 8009804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009808:	d301      	bcc.n	800980e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800980a:	2301      	movs	r3, #1
 800980c:	e00f      	b.n	800982e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800980e:	4a0a      	ldr	r2, [pc, #40]	; (8009838 <SysTick_Config+0x40>)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3b01      	subs	r3, #1
 8009814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009816:	210f      	movs	r1, #15
 8009818:	f04f 30ff 	mov.w	r0, #4294967295
 800981c:	f7ff ff90 	bl	8009740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009820:	4b05      	ldr	r3, [pc, #20]	; (8009838 <SysTick_Config+0x40>)
 8009822:	2200      	movs	r2, #0
 8009824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009826:	4b04      	ldr	r3, [pc, #16]	; (8009838 <SysTick_Config+0x40>)
 8009828:	2207      	movs	r2, #7
 800982a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	e000e010 	.word	0xe000e010

0800983c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff ff2d 	bl	80096a4 <__NVIC_SetPriorityGrouping>
}
 800984a:	bf00      	nop
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009852:	b580      	push	{r7, lr}
 8009854:	b086      	sub	sp, #24
 8009856:	af00      	add	r7, sp, #0
 8009858:	4603      	mov	r3, r0
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	607a      	str	r2, [r7, #4]
 800985e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009864:	f7ff ff42 	bl	80096ec <__NVIC_GetPriorityGrouping>
 8009868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	6978      	ldr	r0, [r7, #20]
 8009870:	f7ff ff90 	bl	8009794 <NVIC_EncodePriority>
 8009874:	4602      	mov	r2, r0
 8009876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff ff5f 	bl	8009740 <__NVIC_SetPriority>
}
 8009882:	bf00      	nop
 8009884:	3718      	adds	r7, #24
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	af00      	add	r7, sp, #0
 8009890:	4603      	mov	r3, r0
 8009892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009898:	4618      	mov	r0, r3
 800989a:	f7ff ff35 	bl	8009708 <__NVIC_EnableIRQ>
}
 800989e:	bf00      	nop
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7ff ffa2 	bl	80097f8 <SysTick_Config>
 80098b4:	4603      	mov	r3, r0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80098be:	b480      	push	{r7}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d008      	beq.n	80098e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2204      	movs	r2, #4
 80098da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e020      	b.n	800992a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 020e 	bic.w	r2, r2, #14
 80098f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0201 	bic.w	r2, r2, #1
 8009906:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009910:	2101      	movs	r1, #1
 8009912:	fa01 f202 	lsl.w	r2, r1, r2
 8009916:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr

08009934 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b02      	cmp	r3, #2
 800994a:	d005      	beq.n	8009958 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2204      	movs	r2, #4
 8009950:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	73fb      	strb	r3, [r7, #15]
 8009956:	e0d6      	b.n	8009b06 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 020e 	bic.w	r2, r2, #14
 8009966:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 0201 	bic.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	4b64      	ldr	r3, [pc, #400]	; (8009b10 <HAL_DMA_Abort_IT+0x1dc>)
 8009980:	429a      	cmp	r2, r3
 8009982:	d958      	bls.n	8009a36 <HAL_DMA_Abort_IT+0x102>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a62      	ldr	r2, [pc, #392]	; (8009b14 <HAL_DMA_Abort_IT+0x1e0>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d04f      	beq.n	8009a2e <HAL_DMA_Abort_IT+0xfa>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a61      	ldr	r2, [pc, #388]	; (8009b18 <HAL_DMA_Abort_IT+0x1e4>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d048      	beq.n	8009a2a <HAL_DMA_Abort_IT+0xf6>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a5f      	ldr	r2, [pc, #380]	; (8009b1c <HAL_DMA_Abort_IT+0x1e8>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d040      	beq.n	8009a24 <HAL_DMA_Abort_IT+0xf0>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a5e      	ldr	r2, [pc, #376]	; (8009b20 <HAL_DMA_Abort_IT+0x1ec>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d038      	beq.n	8009a1e <HAL_DMA_Abort_IT+0xea>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a5c      	ldr	r2, [pc, #368]	; (8009b24 <HAL_DMA_Abort_IT+0x1f0>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d030      	beq.n	8009a18 <HAL_DMA_Abort_IT+0xe4>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a5b      	ldr	r2, [pc, #364]	; (8009b28 <HAL_DMA_Abort_IT+0x1f4>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d028      	beq.n	8009a12 <HAL_DMA_Abort_IT+0xde>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a52      	ldr	r2, [pc, #328]	; (8009b10 <HAL_DMA_Abort_IT+0x1dc>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d020      	beq.n	8009a0c <HAL_DMA_Abort_IT+0xd8>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a57      	ldr	r2, [pc, #348]	; (8009b2c <HAL_DMA_Abort_IT+0x1f8>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d019      	beq.n	8009a08 <HAL_DMA_Abort_IT+0xd4>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a55      	ldr	r2, [pc, #340]	; (8009b30 <HAL_DMA_Abort_IT+0x1fc>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d012      	beq.n	8009a04 <HAL_DMA_Abort_IT+0xd0>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a54      	ldr	r2, [pc, #336]	; (8009b34 <HAL_DMA_Abort_IT+0x200>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d00a      	beq.n	80099fe <HAL_DMA_Abort_IT+0xca>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a52      	ldr	r2, [pc, #328]	; (8009b38 <HAL_DMA_Abort_IT+0x204>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d102      	bne.n	80099f8 <HAL_DMA_Abort_IT+0xc4>
 80099f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099f6:	e01b      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 80099f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80099fc:	e018      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 80099fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a02:	e015      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 8009a04:	2310      	movs	r3, #16
 8009a06:	e013      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e011      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 8009a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a10:	e00e      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 8009a12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a16:	e00b      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 8009a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009a1c:	e008      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 8009a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a22:	e005      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 8009a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a28:	e002      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 8009a2a:	2310      	movs	r3, #16
 8009a2c:	e000      	b.n	8009a30 <HAL_DMA_Abort_IT+0xfc>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4a42      	ldr	r2, [pc, #264]	; (8009b3c <HAL_DMA_Abort_IT+0x208>)
 8009a32:	6053      	str	r3, [r2, #4]
 8009a34:	e057      	b.n	8009ae6 <HAL_DMA_Abort_IT+0x1b2>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a36      	ldr	r2, [pc, #216]	; (8009b14 <HAL_DMA_Abort_IT+0x1e0>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d04f      	beq.n	8009ae0 <HAL_DMA_Abort_IT+0x1ac>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a34      	ldr	r2, [pc, #208]	; (8009b18 <HAL_DMA_Abort_IT+0x1e4>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d048      	beq.n	8009adc <HAL_DMA_Abort_IT+0x1a8>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a33      	ldr	r2, [pc, #204]	; (8009b1c <HAL_DMA_Abort_IT+0x1e8>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d040      	beq.n	8009ad6 <HAL_DMA_Abort_IT+0x1a2>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a31      	ldr	r2, [pc, #196]	; (8009b20 <HAL_DMA_Abort_IT+0x1ec>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d038      	beq.n	8009ad0 <HAL_DMA_Abort_IT+0x19c>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a30      	ldr	r2, [pc, #192]	; (8009b24 <HAL_DMA_Abort_IT+0x1f0>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d030      	beq.n	8009aca <HAL_DMA_Abort_IT+0x196>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a2e      	ldr	r2, [pc, #184]	; (8009b28 <HAL_DMA_Abort_IT+0x1f4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d028      	beq.n	8009ac4 <HAL_DMA_Abort_IT+0x190>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a26      	ldr	r2, [pc, #152]	; (8009b10 <HAL_DMA_Abort_IT+0x1dc>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d020      	beq.n	8009abe <HAL_DMA_Abort_IT+0x18a>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a2a      	ldr	r2, [pc, #168]	; (8009b2c <HAL_DMA_Abort_IT+0x1f8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d019      	beq.n	8009aba <HAL_DMA_Abort_IT+0x186>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a29      	ldr	r2, [pc, #164]	; (8009b30 <HAL_DMA_Abort_IT+0x1fc>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d012      	beq.n	8009ab6 <HAL_DMA_Abort_IT+0x182>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a27      	ldr	r2, [pc, #156]	; (8009b34 <HAL_DMA_Abort_IT+0x200>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00a      	beq.n	8009ab0 <HAL_DMA_Abort_IT+0x17c>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a26      	ldr	r2, [pc, #152]	; (8009b38 <HAL_DMA_Abort_IT+0x204>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d102      	bne.n	8009aaa <HAL_DMA_Abort_IT+0x176>
 8009aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aa8:	e01b      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009aae:	e018      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ab4:	e015      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009ab6:	2310      	movs	r3, #16
 8009ab8:	e013      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e011      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009abe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ac2:	e00e      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009ac4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009ac8:	e00b      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009ace:	e008      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ad4:	e005      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ada:	e002      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009adc:	2310      	movs	r3, #16
 8009ade:	e000      	b.n	8009ae2 <HAL_DMA_Abort_IT+0x1ae>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	4a17      	ldr	r2, [pc, #92]	; (8009b40 <HAL_DMA_Abort_IT+0x20c>)
 8009ae4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	4798      	blx	r3
    } 
  }
  return status;
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	40020080 	.word	0x40020080
 8009b14:	40020008 	.word	0x40020008
 8009b18:	4002001c 	.word	0x4002001c
 8009b1c:	40020030 	.word	0x40020030
 8009b20:	40020044 	.word	0x40020044
 8009b24:	40020058 	.word	0x40020058
 8009b28:	4002006c 	.word	0x4002006c
 8009b2c:	40020408 	.word	0x40020408
 8009b30:	4002041c 	.word	0x4002041c
 8009b34:	40020430 	.word	0x40020430
 8009b38:	40020444 	.word	0x40020444
 8009b3c:	40020400 	.word	0x40020400
 8009b40:	40020000 	.word	0x40020000

08009b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b08b      	sub	sp, #44	; 0x2c
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009b52:	2300      	movs	r3, #0
 8009b54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009b56:	e179      	b.n	8009e4c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009b58:	2201      	movs	r2, #1
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	4013      	ands	r3, r2
 8009b6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009b6c:	69ba      	ldr	r2, [r7, #24]
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	f040 8168 	bne.w	8009e46 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	4a96      	ldr	r2, [pc, #600]	; (8009dd4 <HAL_GPIO_Init+0x290>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d05e      	beq.n	8009c3e <HAL_GPIO_Init+0xfa>
 8009b80:	4a94      	ldr	r2, [pc, #592]	; (8009dd4 <HAL_GPIO_Init+0x290>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d875      	bhi.n	8009c72 <HAL_GPIO_Init+0x12e>
 8009b86:	4a94      	ldr	r2, [pc, #592]	; (8009dd8 <HAL_GPIO_Init+0x294>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d058      	beq.n	8009c3e <HAL_GPIO_Init+0xfa>
 8009b8c:	4a92      	ldr	r2, [pc, #584]	; (8009dd8 <HAL_GPIO_Init+0x294>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d86f      	bhi.n	8009c72 <HAL_GPIO_Init+0x12e>
 8009b92:	4a92      	ldr	r2, [pc, #584]	; (8009ddc <HAL_GPIO_Init+0x298>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d052      	beq.n	8009c3e <HAL_GPIO_Init+0xfa>
 8009b98:	4a90      	ldr	r2, [pc, #576]	; (8009ddc <HAL_GPIO_Init+0x298>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d869      	bhi.n	8009c72 <HAL_GPIO_Init+0x12e>
 8009b9e:	4a90      	ldr	r2, [pc, #576]	; (8009de0 <HAL_GPIO_Init+0x29c>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d04c      	beq.n	8009c3e <HAL_GPIO_Init+0xfa>
 8009ba4:	4a8e      	ldr	r2, [pc, #568]	; (8009de0 <HAL_GPIO_Init+0x29c>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d863      	bhi.n	8009c72 <HAL_GPIO_Init+0x12e>
 8009baa:	4a8e      	ldr	r2, [pc, #568]	; (8009de4 <HAL_GPIO_Init+0x2a0>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d046      	beq.n	8009c3e <HAL_GPIO_Init+0xfa>
 8009bb0:	4a8c      	ldr	r2, [pc, #560]	; (8009de4 <HAL_GPIO_Init+0x2a0>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d85d      	bhi.n	8009c72 <HAL_GPIO_Init+0x12e>
 8009bb6:	2b12      	cmp	r3, #18
 8009bb8:	d82a      	bhi.n	8009c10 <HAL_GPIO_Init+0xcc>
 8009bba:	2b12      	cmp	r3, #18
 8009bbc:	d859      	bhi.n	8009c72 <HAL_GPIO_Init+0x12e>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <HAL_GPIO_Init+0x80>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009c3f 	.word	0x08009c3f
 8009bc8:	08009c19 	.word	0x08009c19
 8009bcc:	08009c2b 	.word	0x08009c2b
 8009bd0:	08009c6d 	.word	0x08009c6d
 8009bd4:	08009c73 	.word	0x08009c73
 8009bd8:	08009c73 	.word	0x08009c73
 8009bdc:	08009c73 	.word	0x08009c73
 8009be0:	08009c73 	.word	0x08009c73
 8009be4:	08009c73 	.word	0x08009c73
 8009be8:	08009c73 	.word	0x08009c73
 8009bec:	08009c73 	.word	0x08009c73
 8009bf0:	08009c73 	.word	0x08009c73
 8009bf4:	08009c73 	.word	0x08009c73
 8009bf8:	08009c73 	.word	0x08009c73
 8009bfc:	08009c73 	.word	0x08009c73
 8009c00:	08009c73 	.word	0x08009c73
 8009c04:	08009c73 	.word	0x08009c73
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009c35 	.word	0x08009c35
 8009c10:	4a75      	ldr	r2, [pc, #468]	; (8009de8 <HAL_GPIO_Init+0x2a4>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d013      	beq.n	8009c3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009c16:	e02c      	b.n	8009c72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	623b      	str	r3, [r7, #32]
          break;
 8009c1e:	e029      	b.n	8009c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	3304      	adds	r3, #4
 8009c26:	623b      	str	r3, [r7, #32]
          break;
 8009c28:	e024      	b.n	8009c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	3308      	adds	r3, #8
 8009c30:	623b      	str	r3, [r7, #32]
          break;
 8009c32:	e01f      	b.n	8009c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	330c      	adds	r3, #12
 8009c3a:	623b      	str	r3, [r7, #32]
          break;
 8009c3c:	e01a      	b.n	8009c74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d102      	bne.n	8009c4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009c46:	2304      	movs	r3, #4
 8009c48:	623b      	str	r3, [r7, #32]
          break;
 8009c4a:	e013      	b.n	8009c74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d105      	bne.n	8009c60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009c54:	2308      	movs	r3, #8
 8009c56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	69fa      	ldr	r2, [r7, #28]
 8009c5c:	611a      	str	r2, [r3, #16]
          break;
 8009c5e:	e009      	b.n	8009c74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009c60:	2308      	movs	r3, #8
 8009c62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	69fa      	ldr	r2, [r7, #28]
 8009c68:	615a      	str	r2, [r3, #20]
          break;
 8009c6a:	e003      	b.n	8009c74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	623b      	str	r3, [r7, #32]
          break;
 8009c70:	e000      	b.n	8009c74 <HAL_GPIO_Init+0x130>
          break;
 8009c72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	2bff      	cmp	r3, #255	; 0xff
 8009c78:	d801      	bhi.n	8009c7e <HAL_GPIO_Init+0x13a>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	e001      	b.n	8009c82 <HAL_GPIO_Init+0x13e>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	3304      	adds	r3, #4
 8009c82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	2bff      	cmp	r3, #255	; 0xff
 8009c88:	d802      	bhi.n	8009c90 <HAL_GPIO_Init+0x14c>
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	e002      	b.n	8009c96 <HAL_GPIO_Init+0x152>
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	3b08      	subs	r3, #8
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	210f      	movs	r1, #15
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ca4:	43db      	mvns	r3, r3
 8009ca6:	401a      	ands	r2, r3
 8009ca8:	6a39      	ldr	r1, [r7, #32]
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb0:	431a      	orrs	r2, r3
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 80c1 	beq.w	8009e46 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009cc4:	4b49      	ldr	r3, [pc, #292]	; (8009dec <HAL_GPIO_Init+0x2a8>)
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	4a48      	ldr	r2, [pc, #288]	; (8009dec <HAL_GPIO_Init+0x2a8>)
 8009cca:	f043 0301 	orr.w	r3, r3, #1
 8009cce:	6193      	str	r3, [r2, #24]
 8009cd0:	4b46      	ldr	r3, [pc, #280]	; (8009dec <HAL_GPIO_Init+0x2a8>)
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	60bb      	str	r3, [r7, #8]
 8009cda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009cdc:	4a44      	ldr	r2, [pc, #272]	; (8009df0 <HAL_GPIO_Init+0x2ac>)
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	089b      	lsrs	r3, r3, #2
 8009ce2:	3302      	adds	r3, #2
 8009ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ce8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	220f      	movs	r2, #15
 8009cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf8:	43db      	mvns	r3, r3
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a3c      	ldr	r2, [pc, #240]	; (8009df4 <HAL_GPIO_Init+0x2b0>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d01f      	beq.n	8009d48 <HAL_GPIO_Init+0x204>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a3b      	ldr	r2, [pc, #236]	; (8009df8 <HAL_GPIO_Init+0x2b4>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d019      	beq.n	8009d44 <HAL_GPIO_Init+0x200>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a3a      	ldr	r2, [pc, #232]	; (8009dfc <HAL_GPIO_Init+0x2b8>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d013      	beq.n	8009d40 <HAL_GPIO_Init+0x1fc>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a39      	ldr	r2, [pc, #228]	; (8009e00 <HAL_GPIO_Init+0x2bc>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d00d      	beq.n	8009d3c <HAL_GPIO_Init+0x1f8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a38      	ldr	r2, [pc, #224]	; (8009e04 <HAL_GPIO_Init+0x2c0>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d007      	beq.n	8009d38 <HAL_GPIO_Init+0x1f4>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a37      	ldr	r2, [pc, #220]	; (8009e08 <HAL_GPIO_Init+0x2c4>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d101      	bne.n	8009d34 <HAL_GPIO_Init+0x1f0>
 8009d30:	2305      	movs	r3, #5
 8009d32:	e00a      	b.n	8009d4a <HAL_GPIO_Init+0x206>
 8009d34:	2306      	movs	r3, #6
 8009d36:	e008      	b.n	8009d4a <HAL_GPIO_Init+0x206>
 8009d38:	2304      	movs	r3, #4
 8009d3a:	e006      	b.n	8009d4a <HAL_GPIO_Init+0x206>
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e004      	b.n	8009d4a <HAL_GPIO_Init+0x206>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e002      	b.n	8009d4a <HAL_GPIO_Init+0x206>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e000      	b.n	8009d4a <HAL_GPIO_Init+0x206>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4c:	f002 0203 	and.w	r2, r2, #3
 8009d50:	0092      	lsls	r2, r2, #2
 8009d52:	4093      	lsls	r3, r2
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009d5a:	4925      	ldr	r1, [pc, #148]	; (8009df0 <HAL_GPIO_Init+0x2ac>)
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	089b      	lsrs	r3, r3, #2
 8009d60:	3302      	adds	r3, #2
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d006      	beq.n	8009d82 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009d74:	4b25      	ldr	r3, [pc, #148]	; (8009e0c <HAL_GPIO_Init+0x2c8>)
 8009d76:	689a      	ldr	r2, [r3, #8]
 8009d78:	4924      	ldr	r1, [pc, #144]	; (8009e0c <HAL_GPIO_Init+0x2c8>)
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	608b      	str	r3, [r1, #8]
 8009d80:	e006      	b.n	8009d90 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009d82:	4b22      	ldr	r3, [pc, #136]	; (8009e0c <HAL_GPIO_Init+0x2c8>)
 8009d84:	689a      	ldr	r2, [r3, #8]
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	4920      	ldr	r1, [pc, #128]	; (8009e0c <HAL_GPIO_Init+0x2c8>)
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d006      	beq.n	8009daa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009d9c:	4b1b      	ldr	r3, [pc, #108]	; (8009e0c <HAL_GPIO_Init+0x2c8>)
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	491a      	ldr	r1, [pc, #104]	; (8009e0c <HAL_GPIO_Init+0x2c8>)
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60cb      	str	r3, [r1, #12]
 8009da8:	e006      	b.n	8009db8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009daa:	4b18      	ldr	r3, [pc, #96]	; (8009e0c <HAL_GPIO_Init+0x2c8>)
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	43db      	mvns	r3, r3
 8009db2:	4916      	ldr	r1, [pc, #88]	; (8009e0c <HAL_GPIO_Init+0x2c8>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d025      	beq.n	8009e10 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009dc4:	4b11      	ldr	r3, [pc, #68]	; (8009e0c <HAL_GPIO_Init+0x2c8>)
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	4910      	ldr	r1, [pc, #64]	; (8009e0c <HAL_GPIO_Init+0x2c8>)
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	604b      	str	r3, [r1, #4]
 8009dd0:	e025      	b.n	8009e1e <HAL_GPIO_Init+0x2da>
 8009dd2:	bf00      	nop
 8009dd4:	10320000 	.word	0x10320000
 8009dd8:	10310000 	.word	0x10310000
 8009ddc:	10220000 	.word	0x10220000
 8009de0:	10210000 	.word	0x10210000
 8009de4:	10120000 	.word	0x10120000
 8009de8:	10110000 	.word	0x10110000
 8009dec:	40021000 	.word	0x40021000
 8009df0:	40010000 	.word	0x40010000
 8009df4:	40010800 	.word	0x40010800
 8009df8:	40010c00 	.word	0x40010c00
 8009dfc:	40011000 	.word	0x40011000
 8009e00:	40011400 	.word	0x40011400
 8009e04:	40011800 	.word	0x40011800
 8009e08:	40011c00 	.word	0x40011c00
 8009e0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009e10:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <HAL_GPIO_Init+0x324>)
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	43db      	mvns	r3, r3
 8009e18:	4913      	ldr	r1, [pc, #76]	; (8009e68 <HAL_GPIO_Init+0x324>)
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d006      	beq.n	8009e38 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <HAL_GPIO_Init+0x324>)
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	490e      	ldr	r1, [pc, #56]	; (8009e68 <HAL_GPIO_Init+0x324>)
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	600b      	str	r3, [r1, #0]
 8009e36:	e006      	b.n	8009e46 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009e38:	4b0b      	ldr	r3, [pc, #44]	; (8009e68 <HAL_GPIO_Init+0x324>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	43db      	mvns	r3, r3
 8009e40:	4909      	ldr	r1, [pc, #36]	; (8009e68 <HAL_GPIO_Init+0x324>)
 8009e42:	4013      	ands	r3, r2
 8009e44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	3301      	adds	r3, #1
 8009e4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	fa22 f303 	lsr.w	r3, r2, r3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f47f ae7e 	bne.w	8009b58 <HAL_GPIO_Init+0x14>
  }
}
 8009e5c:	bf00      	nop
 8009e5e:	bf00      	nop
 8009e60:	372c      	adds	r7, #44	; 0x2c
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bc80      	pop	{r7}
 8009e66:	4770      	bx	lr
 8009e68:	40010400 	.word	0x40010400

08009e6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b089      	sub	sp, #36	; 0x24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e76:	2300      	movs	r3, #0
 8009e78:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009e7a:	e0a6      	b.n	8009fca <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	fa02 f303 	lsl.w	r3, r2, r3
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	4013      	ands	r3, r2
 8009e88:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 8099 	beq.w	8009fc4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009e92:	4a54      	ldr	r2, [pc, #336]	; (8009fe4 <HAL_GPIO_DeInit+0x178>)
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	089b      	lsrs	r3, r3, #2
 8009e98:	3302      	adds	r3, #2
 8009e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e9e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	f003 0303 	and.w	r3, r3, #3
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	220f      	movs	r2, #15
 8009eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a4c      	ldr	r2, [pc, #304]	; (8009fe8 <HAL_GPIO_DeInit+0x17c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d01f      	beq.n	8009efc <HAL_GPIO_DeInit+0x90>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a4b      	ldr	r2, [pc, #300]	; (8009fec <HAL_GPIO_DeInit+0x180>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d019      	beq.n	8009ef8 <HAL_GPIO_DeInit+0x8c>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a4a      	ldr	r2, [pc, #296]	; (8009ff0 <HAL_GPIO_DeInit+0x184>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d013      	beq.n	8009ef4 <HAL_GPIO_DeInit+0x88>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a49      	ldr	r2, [pc, #292]	; (8009ff4 <HAL_GPIO_DeInit+0x188>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d00d      	beq.n	8009ef0 <HAL_GPIO_DeInit+0x84>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a48      	ldr	r2, [pc, #288]	; (8009ff8 <HAL_GPIO_DeInit+0x18c>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d007      	beq.n	8009eec <HAL_GPIO_DeInit+0x80>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a47      	ldr	r2, [pc, #284]	; (8009ffc <HAL_GPIO_DeInit+0x190>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d101      	bne.n	8009ee8 <HAL_GPIO_DeInit+0x7c>
 8009ee4:	2305      	movs	r3, #5
 8009ee6:	e00a      	b.n	8009efe <HAL_GPIO_DeInit+0x92>
 8009ee8:	2306      	movs	r3, #6
 8009eea:	e008      	b.n	8009efe <HAL_GPIO_DeInit+0x92>
 8009eec:	2304      	movs	r3, #4
 8009eee:	e006      	b.n	8009efe <HAL_GPIO_DeInit+0x92>
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	e004      	b.n	8009efe <HAL_GPIO_DeInit+0x92>
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	e002      	b.n	8009efe <HAL_GPIO_DeInit+0x92>
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e000      	b.n	8009efe <HAL_GPIO_DeInit+0x92>
 8009efc:	2300      	movs	r3, #0
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	f002 0203 	and.w	r2, r2, #3
 8009f04:	0092      	lsls	r2, r2, #2
 8009f06:	4093      	lsls	r3, r2
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d132      	bne.n	8009f74 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009f0e:	4b3c      	ldr	r3, [pc, #240]	; (800a000 <HAL_GPIO_DeInit+0x194>)
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	43db      	mvns	r3, r3
 8009f16:	493a      	ldr	r1, [pc, #232]	; (800a000 <HAL_GPIO_DeInit+0x194>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009f1c:	4b38      	ldr	r3, [pc, #224]	; (800a000 <HAL_GPIO_DeInit+0x194>)
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	43db      	mvns	r3, r3
 8009f24:	4936      	ldr	r1, [pc, #216]	; (800a000 <HAL_GPIO_DeInit+0x194>)
 8009f26:	4013      	ands	r3, r2
 8009f28:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009f2a:	4b35      	ldr	r3, [pc, #212]	; (800a000 <HAL_GPIO_DeInit+0x194>)
 8009f2c:	68da      	ldr	r2, [r3, #12]
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	43db      	mvns	r3, r3
 8009f32:	4933      	ldr	r1, [pc, #204]	; (800a000 <HAL_GPIO_DeInit+0x194>)
 8009f34:	4013      	ands	r3, r2
 8009f36:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009f38:	4b31      	ldr	r3, [pc, #196]	; (800a000 <HAL_GPIO_DeInit+0x194>)
 8009f3a:	689a      	ldr	r2, [r3, #8]
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	43db      	mvns	r3, r3
 8009f40:	492f      	ldr	r1, [pc, #188]	; (800a000 <HAL_GPIO_DeInit+0x194>)
 8009f42:	4013      	ands	r3, r2
 8009f44:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	f003 0303 	and.w	r3, r3, #3
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	220f      	movs	r2, #15
 8009f50:	fa02 f303 	lsl.w	r3, r2, r3
 8009f54:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009f56:	4a23      	ldr	r2, [pc, #140]	; (8009fe4 <HAL_GPIO_DeInit+0x178>)
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	089b      	lsrs	r3, r3, #2
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	43da      	mvns	r2, r3
 8009f66:	481f      	ldr	r0, [pc, #124]	; (8009fe4 <HAL_GPIO_DeInit+0x178>)
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	089b      	lsrs	r3, r3, #2
 8009f6c:	400a      	ands	r2, r1
 8009f6e:	3302      	adds	r3, #2
 8009f70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	2bff      	cmp	r3, #255	; 0xff
 8009f78:	d801      	bhi.n	8009f7e <HAL_GPIO_DeInit+0x112>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	e001      	b.n	8009f82 <HAL_GPIO_DeInit+0x116>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3304      	adds	r3, #4
 8009f82:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	2bff      	cmp	r3, #255	; 0xff
 8009f88:	d802      	bhi.n	8009f90 <HAL_GPIO_DeInit+0x124>
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	e002      	b.n	8009f96 <HAL_GPIO_DeInit+0x12a>
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	3b08      	subs	r3, #8
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	210f      	movs	r1, #15
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa4:	43db      	mvns	r3, r3
 8009fa6:	401a      	ands	r2, r3
 8009fa8:	2104      	movs	r1, #4
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb0:	431a      	orrs	r2, r3
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	68da      	ldr	r2, [r3, #12]
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	43db      	mvns	r3, r3
 8009fbe:	401a      	ands	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f47f af52 	bne.w	8009e7c <HAL_GPIO_DeInit+0x10>
  }
}
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	3724      	adds	r7, #36	; 0x24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bc80      	pop	{r7}
 8009fe2:	4770      	bx	lr
 8009fe4:	40010000 	.word	0x40010000
 8009fe8:	40010800 	.word	0x40010800
 8009fec:	40010c00 	.word	0x40010c00
 8009ff0:	40011000 	.word	0x40011000
 8009ff4:	40011400 	.word	0x40011400
 8009ff8:	40011800 	.word	0x40011800
 8009ffc:	40011c00 	.word	0x40011c00
 800a000:	40010400 	.word	0x40010400

0800a004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	887b      	ldrh	r3, [r7, #2]
 800a016:	4013      	ands	r3, r2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a01c:	2301      	movs	r3, #1
 800a01e:	73fb      	strb	r3, [r7, #15]
 800a020:	e001      	b.n	800a026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a022:	2300      	movs	r3, #0
 800a024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a026:	7bfb      	ldrb	r3, [r7, #15]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bc80      	pop	{r7}
 800a030:	4770      	bx	lr

0800a032 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a032:	b480      	push	{r7}
 800a034:	b083      	sub	sp, #12
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	807b      	strh	r3, [r7, #2]
 800a03e:	4613      	mov	r3, r2
 800a040:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a042:	787b      	ldrb	r3, [r7, #1]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a048:	887a      	ldrh	r2, [r7, #2]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a04e:	e003      	b.n	800a058 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a050:	887b      	ldrh	r3, [r7, #2]
 800a052:	041a      	lsls	r2, r3, #16
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	611a      	str	r2, [r3, #16]
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bc80      	pop	{r7}
 800a060:	4770      	bx	lr

0800a062 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a062:	b480      	push	{r7}
 800a064:	b085      	sub	sp, #20
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	460b      	mov	r3, r1
 800a06c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a074:	887a      	ldrh	r2, [r7, #2]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4013      	ands	r3, r2
 800a07a:	041a      	lsls	r2, r3, #16
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	43d9      	mvns	r1, r3
 800a080:	887b      	ldrh	r3, [r7, #2]
 800a082:	400b      	ands	r3, r1
 800a084:	431a      	orrs	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	611a      	str	r2, [r3, #16]
}
 800a08a:	bf00      	nop
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	bc80      	pop	{r7}
 800a092:	4770      	bx	lr

0800a094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e12b      	b.n	800a2fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7fe fff8 	bl	80090b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2224      	movs	r2, #36	; 0x24
 800a0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 0201 	bic.w	r2, r2, #1
 800a0d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a0f8:	f001 fdb8 	bl	800bc6c <HAL_RCC_GetPCLK1Freq>
 800a0fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	4a81      	ldr	r2, [pc, #516]	; (800a308 <HAL_I2C_Init+0x274>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d807      	bhi.n	800a118 <HAL_I2C_Init+0x84>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4a80      	ldr	r2, [pc, #512]	; (800a30c <HAL_I2C_Init+0x278>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	bf94      	ite	ls
 800a110:	2301      	movls	r3, #1
 800a112:	2300      	movhi	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	e006      	b.n	800a126 <HAL_I2C_Init+0x92>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4a7d      	ldr	r2, [pc, #500]	; (800a310 <HAL_I2C_Init+0x27c>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	bf94      	ite	ls
 800a120:	2301      	movls	r3, #1
 800a122:	2300      	movhi	r3, #0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e0e7      	b.n	800a2fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4a78      	ldr	r2, [pc, #480]	; (800a314 <HAL_I2C_Init+0x280>)
 800a132:	fba2 2303 	umull	r2, r3, r2, r3
 800a136:	0c9b      	lsrs	r3, r3, #18
 800a138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	430a      	orrs	r2, r1
 800a14c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	4a6a      	ldr	r2, [pc, #424]	; (800a308 <HAL_I2C_Init+0x274>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d802      	bhi.n	800a168 <HAL_I2C_Init+0xd4>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	3301      	adds	r3, #1
 800a166:	e009      	b.n	800a17c <HAL_I2C_Init+0xe8>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a16e:	fb02 f303 	mul.w	r3, r2, r3
 800a172:	4a69      	ldr	r2, [pc, #420]	; (800a318 <HAL_I2C_Init+0x284>)
 800a174:	fba2 2303 	umull	r2, r3, r2, r3
 800a178:	099b      	lsrs	r3, r3, #6
 800a17a:	3301      	adds	r3, #1
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	6812      	ldr	r2, [r2, #0]
 800a180:	430b      	orrs	r3, r1
 800a182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a18e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	495c      	ldr	r1, [pc, #368]	; (800a308 <HAL_I2C_Init+0x274>)
 800a198:	428b      	cmp	r3, r1
 800a19a:	d819      	bhi.n	800a1d0 <HAL_I2C_Init+0x13c>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	1e59      	subs	r1, r3, #1
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1aa:	1c59      	adds	r1, r3, #1
 800a1ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a1b0:	400b      	ands	r3, r1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00a      	beq.n	800a1cc <HAL_I2C_Init+0x138>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	1e59      	subs	r1, r3, #1
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1ca:	e051      	b.n	800a270 <HAL_I2C_Init+0x1dc>
 800a1cc:	2304      	movs	r3, #4
 800a1ce:	e04f      	b.n	800a270 <HAL_I2C_Init+0x1dc>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d111      	bne.n	800a1fc <HAL_I2C_Init+0x168>
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	1e58      	subs	r0, r3, #1
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6859      	ldr	r1, [r3, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	440b      	add	r3, r1
 800a1e6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	bf0c      	ite	eq
 800a1f4:	2301      	moveq	r3, #1
 800a1f6:	2300      	movne	r3, #0
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	e012      	b.n	800a222 <HAL_I2C_Init+0x18e>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	1e58      	subs	r0, r3, #1
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6859      	ldr	r1, [r3, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	0099      	lsls	r1, r3, #2
 800a20c:	440b      	add	r3, r1
 800a20e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a212:	3301      	adds	r3, #1
 800a214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bf0c      	ite	eq
 800a21c:	2301      	moveq	r3, #1
 800a21e:	2300      	movne	r3, #0
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <HAL_I2C_Init+0x196>
 800a226:	2301      	movs	r3, #1
 800a228:	e022      	b.n	800a270 <HAL_I2C_Init+0x1dc>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10e      	bne.n	800a250 <HAL_I2C_Init+0x1bc>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	1e58      	subs	r0, r3, #1
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6859      	ldr	r1, [r3, #4]
 800a23a:	460b      	mov	r3, r1
 800a23c:	005b      	lsls	r3, r3, #1
 800a23e:	440b      	add	r3, r1
 800a240:	fbb0 f3f3 	udiv	r3, r0, r3
 800a244:	3301      	adds	r3, #1
 800a246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a24a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a24e:	e00f      	b.n	800a270 <HAL_I2C_Init+0x1dc>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	1e58      	subs	r0, r3, #1
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6859      	ldr	r1, [r3, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	440b      	add	r3, r1
 800a25e:	0099      	lsls	r1, r3, #2
 800a260:	440b      	add	r3, r1
 800a262:	fbb0 f3f3 	udiv	r3, r0, r3
 800a266:	3301      	adds	r3, #1
 800a268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a26c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	6809      	ldr	r1, [r1, #0]
 800a274:	4313      	orrs	r3, r2
 800a276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	69da      	ldr	r2, [r3, #28]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	431a      	orrs	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a29e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	6911      	ldr	r1, [r2, #16]
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	68d2      	ldr	r2, [r2, #12]
 800a2aa:	4311      	orrs	r1, r2
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	6812      	ldr	r2, [r2, #0]
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	695a      	ldr	r2, [r3, #20]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f042 0201 	orr.w	r2, r2, #1
 800a2de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	000186a0 	.word	0x000186a0
 800a30c:	001e847f 	.word	0x001e847f
 800a310:	003d08ff 	.word	0x003d08ff
 800a314:	431bde83 	.word	0x431bde83
 800a318:	10624dd3 	.word	0x10624dd3

0800a31c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e021      	b.n	800a372 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2224      	movs	r2, #36	; 0x24
 800a332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f022 0201 	bic.w	r2, r2, #1
 800a344:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7fe fef0 	bl	800912c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af02      	add	r7, sp, #8
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	607a      	str	r2, [r7, #4]
 800a386:	461a      	mov	r2, r3
 800a388:	460b      	mov	r3, r1
 800a38a:	817b      	strh	r3, [r7, #10]
 800a38c:	4613      	mov	r3, r2
 800a38e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a390:	f7ff f85e 	bl	8009450 <HAL_GetTick>
 800a394:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	f040 80e0 	bne.w	800a564 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	2319      	movs	r3, #25
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	4970      	ldr	r1, [pc, #448]	; (800a570 <HAL_I2C_Master_Transmit+0x1f4>)
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 fe5c 	bl	800b06c <I2C_WaitOnFlagUntilTimeout>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	e0d3      	b.n	800a566 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d101      	bne.n	800a3cc <HAL_I2C_Master_Transmit+0x50>
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	e0cc      	b.n	800a566 <HAL_I2C_Master_Transmit+0x1ea>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d007      	beq.n	800a3f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f042 0201 	orr.w	r2, r2, #1
 800a3f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a400:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2221      	movs	r2, #33	; 0x21
 800a406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2210      	movs	r2, #16
 800a40e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	893a      	ldrh	r2, [r7, #8]
 800a422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a428:	b29a      	uxth	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4a50      	ldr	r2, [pc, #320]	; (800a574 <HAL_I2C_Master_Transmit+0x1f8>)
 800a432:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a434:	8979      	ldrh	r1, [r7, #10]
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	6a3a      	ldr	r2, [r7, #32]
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 fc16 	bl	800ac6c <I2C_MasterRequestWrite>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e08d      	b.n	800a566 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a44a:	2300      	movs	r3, #0
 800a44c:	613b      	str	r3, [r7, #16]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	695b      	ldr	r3, [r3, #20]
 800a454:	613b      	str	r3, [r7, #16]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	613b      	str	r3, [r7, #16]
 800a45e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a460:	e066      	b.n	800a530 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	6a39      	ldr	r1, [r7, #32]
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 ff1a 	bl	800b2a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00d      	beq.n	800a48e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	2b04      	cmp	r3, #4
 800a478:	d107      	bne.n	800a48a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a488:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e06b      	b.n	800a566 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a492:	781a      	ldrb	r2, [r3, #0]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	1c5a      	adds	r2, r3, #1
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b04      	cmp	r3, #4
 800a4ca:	d11b      	bne.n	800a504 <HAL_I2C_Master_Transmit+0x188>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d017      	beq.n	800a504 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	781a      	ldrb	r2, [r3, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e4:	1c5a      	adds	r2, r3, #1
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	6a39      	ldr	r1, [r7, #32]
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 ff11 	bl	800b330 <I2C_WaitOnBTFFlagUntilTimeout>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00d      	beq.n	800a530 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d107      	bne.n	800a52c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a52a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e01a      	b.n	800a566 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a534:	2b00      	cmp	r3, #0
 800a536:	d194      	bne.n	800a462 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2220      	movs	r2, #32
 800a54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	e000      	b.n	800a566 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a564:	2302      	movs	r3, #2
  }
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	00100002 	.word	0x00100002
 800a574:	ffff0000 	.word	0xffff0000

0800a578 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b088      	sub	sp, #32
 800a57c:	af02      	add	r7, sp, #8
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	4608      	mov	r0, r1
 800a582:	4611      	mov	r1, r2
 800a584:	461a      	mov	r2, r3
 800a586:	4603      	mov	r3, r0
 800a588:	817b      	strh	r3, [r7, #10]
 800a58a:	460b      	mov	r3, r1
 800a58c:	813b      	strh	r3, [r7, #8]
 800a58e:	4613      	mov	r3, r2
 800a590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a592:	f7fe ff5d 	bl	8009450 <HAL_GetTick>
 800a596:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b20      	cmp	r3, #32
 800a5a2:	f040 80d9 	bne.w	800a758 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	2319      	movs	r3, #25
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	496d      	ldr	r1, [pc, #436]	; (800a764 <HAL_I2C_Mem_Write+0x1ec>)
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 fd5b 	bl	800b06c <I2C_WaitOnFlagUntilTimeout>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	e0cc      	b.n	800a75a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d101      	bne.n	800a5ce <HAL_I2C_Mem_Write+0x56>
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	e0c5      	b.n	800a75a <HAL_I2C_Mem_Write+0x1e2>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d007      	beq.n	800a5f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f042 0201 	orr.w	r2, r2, #1
 800a5f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a602:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2221      	movs	r2, #33	; 0x21
 800a608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2240      	movs	r2, #64	; 0x40
 800a610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6a3a      	ldr	r2, [r7, #32]
 800a61e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4a4d      	ldr	r2, [pc, #308]	; (800a768 <HAL_I2C_Mem_Write+0x1f0>)
 800a634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a636:	88f8      	ldrh	r0, [r7, #6]
 800a638:	893a      	ldrh	r2, [r7, #8]
 800a63a:	8979      	ldrh	r1, [r7, #10]
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	4603      	mov	r3, r0
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 fb92 	bl	800ad70 <I2C_RequestMemoryWrite>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d052      	beq.n	800a6f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e081      	b.n	800a75a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 fe20 	bl	800b2a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00d      	beq.n	800a682 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	d107      	bne.n	800a67e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a67c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e06b      	b.n	800a75a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	781a      	ldrb	r2, [r3, #0]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a69c:	3b01      	subs	r3, #1
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	f003 0304 	and.w	r3, r3, #4
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	d11b      	bne.n	800a6f8 <HAL_I2C_Mem_Write+0x180>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d017      	beq.n	800a6f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	781a      	ldrb	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1aa      	bne.n	800a656 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 fe13 	bl	800b330 <I2C_WaitOnBTFFlagUntilTimeout>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00d      	beq.n	800a72c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a714:	2b04      	cmp	r3, #4
 800a716:	d107      	bne.n	800a728 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a726:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e016      	b.n	800a75a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a73a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2220      	movs	r2, #32
 800a740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	e000      	b.n	800a75a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a758:	2302      	movs	r3, #2
  }
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3718      	adds	r7, #24
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	00100002 	.word	0x00100002
 800a768:	ffff0000 	.word	0xffff0000

0800a76c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08c      	sub	sp, #48	; 0x30
 800a770:	af02      	add	r7, sp, #8
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	4608      	mov	r0, r1
 800a776:	4611      	mov	r1, r2
 800a778:	461a      	mov	r2, r3
 800a77a:	4603      	mov	r3, r0
 800a77c:	817b      	strh	r3, [r7, #10]
 800a77e:	460b      	mov	r3, r1
 800a780:	813b      	strh	r3, [r7, #8]
 800a782:	4613      	mov	r3, r2
 800a784:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a78a:	f7fe fe61 	bl	8009450 <HAL_GetTick>
 800a78e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b20      	cmp	r3, #32
 800a79a:	f040 8244 	bne.w	800ac26 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	2319      	movs	r3, #25
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	4982      	ldr	r1, [pc, #520]	; (800a9b0 <HAL_I2C_Mem_Read+0x244>)
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 fc5f 	bl	800b06c <I2C_WaitOnFlagUntilTimeout>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e237      	b.n	800ac28 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d101      	bne.n	800a7c6 <HAL_I2C_Mem_Read+0x5a>
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	e230      	b.n	800ac28 <HAL_I2C_Mem_Read+0x4bc>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d007      	beq.n	800a7ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f042 0201 	orr.w	r2, r2, #1
 800a7ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2222      	movs	r2, #34	; 0x22
 800a800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2240      	movs	r2, #64	; 0x40
 800a808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a81c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a822:	b29a      	uxth	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	4a62      	ldr	r2, [pc, #392]	; (800a9b4 <HAL_I2C_Mem_Read+0x248>)
 800a82c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a82e:	88f8      	ldrh	r0, [r7, #6]
 800a830:	893a      	ldrh	r2, [r7, #8]
 800a832:	8979      	ldrh	r1, [r7, #10]
 800a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	4603      	mov	r3, r0
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 fb2c 	bl	800ae9c <I2C_RequestMemoryRead>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d001      	beq.n	800a84e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e1ec      	b.n	800ac28 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a852:	2b00      	cmp	r3, #0
 800a854:	d113      	bne.n	800a87e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a856:	2300      	movs	r3, #0
 800a858:	61fb      	str	r3, [r7, #28]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	695b      	ldr	r3, [r3, #20]
 800a860:	61fb      	str	r3, [r7, #28]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	61fb      	str	r3, [r7, #28]
 800a86a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	e1c0      	b.n	800ac00 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a882:	2b01      	cmp	r3, #1
 800a884:	d11e      	bne.n	800a8c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a894:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a896:	b672      	cpsid	i
}
 800a898:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a89a:	2300      	movs	r3, #0
 800a89c:	61bb      	str	r3, [r7, #24]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	61bb      	str	r3, [r7, #24]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	61bb      	str	r3, [r7, #24]
 800a8ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a8c0:	b662      	cpsie	i
}
 800a8c2:	e035      	b.n	800a930 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d11e      	bne.n	800a90a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8dc:	b672      	cpsid	i
}
 800a8de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	617b      	str	r3, [r7, #20]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	617b      	str	r3, [r7, #20]
 800a8f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a904:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a906:	b662      	cpsie	i
}
 800a908:	e012      	b.n	800a930 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a918:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a91a:	2300      	movs	r3, #0
 800a91c:	613b      	str	r3, [r7, #16]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	695b      	ldr	r3, [r3, #20]
 800a924:	613b      	str	r3, [r7, #16]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	613b      	str	r3, [r7, #16]
 800a92e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a930:	e166      	b.n	800ac00 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a936:	2b03      	cmp	r3, #3
 800a938:	f200 811f 	bhi.w	800ab7a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a940:	2b01      	cmp	r3, #1
 800a942:	d123      	bne.n	800a98c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a946:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a948:	68f8      	ldr	r0, [r7, #12]
 800a94a:	f000 fd39 	bl	800b3c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	e167      	b.n	800ac28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	691a      	ldr	r2, [r3, #16]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a962:	b2d2      	uxtb	r2, r2
 800a964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96a:	1c5a      	adds	r2, r3, #1
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a974:	3b01      	subs	r3, #1
 800a976:	b29a      	uxth	r2, r3
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a980:	b29b      	uxth	r3, r3
 800a982:	3b01      	subs	r3, #1
 800a984:	b29a      	uxth	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a98a:	e139      	b.n	800ac00 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a990:	2b02      	cmp	r3, #2
 800a992:	d152      	bne.n	800aa3a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	2200      	movs	r2, #0
 800a99c:	4906      	ldr	r1, [pc, #24]	; (800a9b8 <HAL_I2C_Mem_Read+0x24c>)
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f000 fb64 	bl	800b06c <I2C_WaitOnFlagUntilTimeout>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d008      	beq.n	800a9bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e13c      	b.n	800ac28 <HAL_I2C_Mem_Read+0x4bc>
 800a9ae:	bf00      	nop
 800a9b0:	00100002 	.word	0x00100002
 800a9b4:	ffff0000 	.word	0xffff0000
 800a9b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a9bc:	b672      	cpsid	i
}
 800a9be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	691a      	ldr	r2, [r3, #16]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9da:	b2d2      	uxtb	r2, r2
 800a9dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800aa02:	b662      	cpsie	i
}
 800aa04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	691a      	ldr	r2, [r3, #16]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	b2d2      	uxtb	r2, r2
 800aa12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa22:	3b01      	subs	r3, #1
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	3b01      	subs	r3, #1
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa38:	e0e2      	b.n	800ac00 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa40:	2200      	movs	r2, #0
 800aa42:	497b      	ldr	r1, [pc, #492]	; (800ac30 <HAL_I2C_Mem_Read+0x4c4>)
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 fb11 	bl	800b06c <I2C_WaitOnFlagUntilTimeout>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e0e9      	b.n	800ac28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa64:	b672      	cpsid	i
}
 800aa66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	691a      	ldr	r2, [r3, #16]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	b2d2      	uxtb	r2, r2
 800aa74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa84:	3b01      	subs	r3, #1
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	3b01      	subs	r3, #1
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800aa9a:	4b66      	ldr	r3, [pc, #408]	; (800ac34 <HAL_I2C_Mem_Read+0x4c8>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	08db      	lsrs	r3, r3, #3
 800aaa0:	4a65      	ldr	r2, [pc, #404]	; (800ac38 <HAL_I2C_Mem_Read+0x4cc>)
 800aaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa6:	0a1a      	lsrs	r2, r3, #8
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	00da      	lsls	r2, r3, #3
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	3b01      	subs	r3, #1
 800aab8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d118      	bne.n	800aaf2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2220      	movs	r2, #32
 800aaca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	f043 0220 	orr.w	r2, r3, #32
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800aae2:	b662      	cpsie	i
}
 800aae4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e09a      	b.n	800ac28 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	f003 0304 	and.w	r3, r3, #4
 800aafc:	2b04      	cmp	r3, #4
 800aafe:	d1d9      	bne.n	800aab4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	691a      	ldr	r2, [r3, #16]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1a:	b2d2      	uxtb	r2, r2
 800ab1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ab42:	b662      	cpsie	i
}
 800ab44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	691a      	ldr	r2, [r3, #16]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab50:	b2d2      	uxtb	r2, r2
 800ab52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab62:	3b01      	subs	r3, #1
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	3b01      	subs	r3, #1
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab78:	e042      	b.n	800ac00 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f000 fc1e 	bl	800b3c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e04c      	b.n	800ac28 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	691a      	ldr	r2, [r3, #16]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab98:	b2d2      	uxtb	r2, r2
 800ab9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abaa:	3b01      	subs	r3, #1
 800abac:	b29a      	uxth	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	3b01      	subs	r3, #1
 800abba:	b29a      	uxth	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	f003 0304 	and.w	r3, r3, #4
 800abca:	2b04      	cmp	r3, #4
 800abcc:	d118      	bne.n	800ac00 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	691a      	ldr	r2, [r3, #16]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd8:	b2d2      	uxtb	r2, r2
 800abda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe0:	1c5a      	adds	r2, r3, #1
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abea:	3b01      	subs	r3, #1
 800abec:	b29a      	uxth	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f47f ae94 	bne.w	800a932 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	e000      	b.n	800ac28 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800ac26:	2302      	movs	r3, #2
  }
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3728      	adds	r7, #40	; 0x28
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	00010004 	.word	0x00010004
 800ac34:	200009c4 	.word	0x200009c4
 800ac38:	14f8b589 	.word	0x14f8b589

0800ac3c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac4a:	b2db      	uxtb	r3, r3
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bc80      	pop	{r7}
 800ac54:	4770      	bx	lr

0800ac56 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bc80      	pop	{r7}
 800ac6a:	4770      	bx	lr

0800ac6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	607a      	str	r2, [r7, #4]
 800ac76:	603b      	str	r3, [r7, #0]
 800ac78:	460b      	mov	r3, r1
 800ac7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b08      	cmp	r3, #8
 800ac86:	d006      	beq.n	800ac96 <I2C_MasterRequestWrite+0x2a>
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d003      	beq.n	800ac96 <I2C_MasterRequestWrite+0x2a>
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ac94:	d108      	bne.n	800aca8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	e00b      	b.n	800acc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acac:	2b12      	cmp	r3, #18
 800acae:	d107      	bne.n	800acc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 f9cd 	bl	800b06c <I2C_WaitOnFlagUntilTimeout>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00d      	beq.n	800acf4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ace2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ace6:	d103      	bne.n	800acf0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e035      	b.n	800ad60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acfc:	d108      	bne.n	800ad10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800acfe:	897b      	ldrh	r3, [r7, #10]
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	461a      	mov	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ad0c:	611a      	str	r2, [r3, #16]
 800ad0e:	e01b      	b.n	800ad48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ad10:	897b      	ldrh	r3, [r7, #10]
 800ad12:	11db      	asrs	r3, r3, #7
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f003 0306 	and.w	r3, r3, #6
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	f063 030f 	orn	r3, r3, #15
 800ad20:	b2da      	uxtb	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	490e      	ldr	r1, [pc, #56]	; (800ad68 <I2C_MasterRequestWrite+0xfc>)
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 fa16 	bl	800b160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e010      	b.n	800ad60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ad3e:	897b      	ldrh	r3, [r7, #10]
 800ad40:	b2da      	uxtb	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	4907      	ldr	r1, [pc, #28]	; (800ad6c <I2C_MasterRequestWrite+0x100>)
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f000 fa06 	bl	800b160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e000      	b.n	800ad60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3718      	adds	r7, #24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	00010008 	.word	0x00010008
 800ad6c:	00010002 	.word	0x00010002

0800ad70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af02      	add	r7, sp, #8
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	4608      	mov	r0, r1
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	4603      	mov	r3, r0
 800ad80:	817b      	strh	r3, [r7, #10]
 800ad82:	460b      	mov	r3, r1
 800ad84:	813b      	strh	r3, [r7, #8]
 800ad86:	4613      	mov	r3, r2
 800ad88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 f960 	bl	800b06c <I2C_WaitOnFlagUntilTimeout>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00d      	beq.n	800adce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adc0:	d103      	bne.n	800adca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e05f      	b.n	800ae8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800adce:	897b      	ldrh	r3, [r7, #10]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	461a      	mov	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800addc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	6a3a      	ldr	r2, [r7, #32]
 800ade2:	492d      	ldr	r1, [pc, #180]	; (800ae98 <I2C_RequestMemoryWrite+0x128>)
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 f9bb 	bl	800b160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e04c      	b.n	800ae8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adf4:	2300      	movs	r3, #0
 800adf6:	617b      	str	r3, [r7, #20]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	617b      	str	r3, [r7, #20]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	617b      	str	r3, [r7, #20]
 800ae08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae0c:	6a39      	ldr	r1, [r7, #32]
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f000 fa46 	bl	800b2a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00d      	beq.n	800ae36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1e:	2b04      	cmp	r3, #4
 800ae20:	d107      	bne.n	800ae32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e02b      	b.n	800ae8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae36:	88fb      	ldrh	r3, [r7, #6]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d105      	bne.n	800ae48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae3c:	893b      	ldrh	r3, [r7, #8]
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	611a      	str	r2, [r3, #16]
 800ae46:	e021      	b.n	800ae8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ae48:	893b      	ldrh	r3, [r7, #8]
 800ae4a:	0a1b      	lsrs	r3, r3, #8
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae58:	6a39      	ldr	r1, [r7, #32]
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 fa20 	bl	800b2a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00d      	beq.n	800ae82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	2b04      	cmp	r3, #4
 800ae6c:	d107      	bne.n	800ae7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e005      	b.n	800ae8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae82:	893b      	ldrh	r3, [r7, #8]
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3718      	adds	r7, #24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	00010002 	.word	0x00010002

0800ae9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	4608      	mov	r0, r1
 800aea6:	4611      	mov	r1, r2
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4603      	mov	r3, r0
 800aeac:	817b      	strh	r3, [r7, #10]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	813b      	strh	r3, [r7, #8]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aec4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aed4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	2200      	movs	r2, #0
 800aede:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f000 f8c2 	bl	800b06c <I2C_WaitOnFlagUntilTimeout>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00d      	beq.n	800af0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aefc:	d103      	bne.n	800af06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e0aa      	b.n	800b060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800af0a:	897b      	ldrh	r3, [r7, #10]
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	461a      	mov	r2, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800af18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	6a3a      	ldr	r2, [r7, #32]
 800af1e:	4952      	ldr	r1, [pc, #328]	; (800b068 <I2C_RequestMemoryRead+0x1cc>)
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 f91d 	bl	800b160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e097      	b.n	800b060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af30:	2300      	movs	r3, #0
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	617b      	str	r3, [r7, #20]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af48:	6a39      	ldr	r1, [r7, #32]
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f000 f9a8 	bl	800b2a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00d      	beq.n	800af72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	d107      	bne.n	800af6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e076      	b.n	800b060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800af72:	88fb      	ldrh	r3, [r7, #6]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d105      	bne.n	800af84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800af78:	893b      	ldrh	r3, [r7, #8]
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	611a      	str	r2, [r3, #16]
 800af82:	e021      	b.n	800afc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800af84:	893b      	ldrh	r3, [r7, #8]
 800af86:	0a1b      	lsrs	r3, r3, #8
 800af88:	b29b      	uxth	r3, r3
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af94:	6a39      	ldr	r1, [r7, #32]
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f000 f982 	bl	800b2a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00d      	beq.n	800afbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa6:	2b04      	cmp	r3, #4
 800afa8:	d107      	bne.n	800afba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e050      	b.n	800b060 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800afbe:	893b      	ldrh	r3, [r7, #8]
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afca:	6a39      	ldr	r1, [r7, #32]
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f000 f967 	bl	800b2a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00d      	beq.n	800aff4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afdc:	2b04      	cmp	r3, #4
 800afde:	d107      	bne.n	800aff0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e035      	b.n	800b060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b002:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	6a3b      	ldr	r3, [r7, #32]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f000 f82b 	bl	800b06c <I2C_WaitOnFlagUntilTimeout>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00d      	beq.n	800b038 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b02a:	d103      	bne.n	800b034 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b032:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e013      	b.n	800b060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b038:	897b      	ldrh	r3, [r7, #10]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	f043 0301 	orr.w	r3, r3, #1
 800b040:	b2da      	uxtb	r2, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	6a3a      	ldr	r2, [r7, #32]
 800b04c:	4906      	ldr	r1, [pc, #24]	; (800b068 <I2C_RequestMemoryRead+0x1cc>)
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f000 f886 	bl	800b160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e000      	b.n	800b060 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3718      	adds	r7, #24
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	00010002 	.word	0x00010002

0800b06c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	4613      	mov	r3, r2
 800b07a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b07c:	e048      	b.n	800b110 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b084:	d044      	beq.n	800b110 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b086:	f7fe f9e3 	bl	8009450 <HAL_GetTick>
 800b08a:	4602      	mov	r2, r0
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	683a      	ldr	r2, [r7, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d302      	bcc.n	800b09c <I2C_WaitOnFlagUntilTimeout+0x30>
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d139      	bne.n	800b110 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	0c1b      	lsrs	r3, r3, #16
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d10d      	bne.n	800b0c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	43da      	mvns	r2, r3
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bf0c      	ite	eq
 800b0b8:	2301      	moveq	r3, #1
 800b0ba:	2300      	movne	r3, #0
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	461a      	mov	r2, r3
 800b0c0:	e00c      	b.n	800b0dc <I2C_WaitOnFlagUntilTimeout+0x70>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	43da      	mvns	r2, r3
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	bf0c      	ite	eq
 800b0d4:	2301      	moveq	r3, #1
 800b0d6:	2300      	movne	r3, #0
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	461a      	mov	r2, r3
 800b0dc:	79fb      	ldrb	r3, [r7, #7]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d116      	bne.n	800b110 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fc:	f043 0220 	orr.w	r2, r3, #32
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e023      	b.n	800b158 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	0c1b      	lsrs	r3, r3, #16
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b01      	cmp	r3, #1
 800b118:	d10d      	bne.n	800b136 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	43da      	mvns	r2, r3
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	4013      	ands	r3, r2
 800b126:	b29b      	uxth	r3, r3
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bf0c      	ite	eq
 800b12c:	2301      	moveq	r3, #1
 800b12e:	2300      	movne	r3, #0
 800b130:	b2db      	uxtb	r3, r3
 800b132:	461a      	mov	r2, r3
 800b134:	e00c      	b.n	800b150 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	43da      	mvns	r2, r3
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	4013      	ands	r3, r2
 800b142:	b29b      	uxth	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	bf0c      	ite	eq
 800b148:	2301      	moveq	r3, #1
 800b14a:	2300      	movne	r3, #0
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	461a      	mov	r2, r3
 800b150:	79fb      	ldrb	r3, [r7, #7]
 800b152:	429a      	cmp	r2, r3
 800b154:	d093      	beq.n	800b07e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
 800b16c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b16e:	e071      	b.n	800b254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b17a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b17e:	d123      	bne.n	800b1c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b18e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b4:	f043 0204 	orr.w	r2, r3, #4
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e067      	b.n	800b298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ce:	d041      	beq.n	800b254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1d0:	f7fe f93e 	bl	8009450 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d302      	bcc.n	800b1e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d136      	bne.n	800b254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	0c1b      	lsrs	r3, r3, #16
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d10c      	bne.n	800b20a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	43da      	mvns	r2, r3
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	bf14      	ite	ne
 800b202:	2301      	movne	r3, #1
 800b204:	2300      	moveq	r3, #0
 800b206:	b2db      	uxtb	r3, r3
 800b208:	e00b      	b.n	800b222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	43da      	mvns	r2, r3
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	4013      	ands	r3, r2
 800b216:	b29b      	uxth	r3, r3
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bf14      	ite	ne
 800b21c:	2301      	movne	r3, #1
 800b21e:	2300      	moveq	r3, #0
 800b220:	b2db      	uxtb	r3, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d016      	beq.n	800b254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2220      	movs	r2, #32
 800b230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b240:	f043 0220 	orr.w	r2, r3, #32
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	e021      	b.n	800b298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	0c1b      	lsrs	r3, r3, #16
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d10c      	bne.n	800b278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	43da      	mvns	r2, r3
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	4013      	ands	r3, r2
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	bf14      	ite	ne
 800b270:	2301      	movne	r3, #1
 800b272:	2300      	moveq	r3, #0
 800b274:	b2db      	uxtb	r3, r3
 800b276:	e00b      	b.n	800b290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	43da      	mvns	r2, r3
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	4013      	ands	r3, r2
 800b284:	b29b      	uxth	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	bf14      	ite	ne
 800b28a:	2301      	movne	r3, #1
 800b28c:	2300      	moveq	r3, #0
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b00      	cmp	r3, #0
 800b292:	f47f af6d 	bne.w	800b170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b2ac:	e034      	b.n	800b318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f000 f8e3 	bl	800b47a <I2C_IsAcknowledgeFailed>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e034      	b.n	800b328 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c4:	d028      	beq.n	800b318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2c6:	f7fe f8c3 	bl	8009450 <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d302      	bcc.n	800b2dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d11d      	bne.n	800b318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2e6:	2b80      	cmp	r3, #128	; 0x80
 800b2e8:	d016      	beq.n	800b318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2220      	movs	r2, #32
 800b2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b304:	f043 0220 	orr.w	r2, r3, #32
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e007      	b.n	800b328 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b322:	2b80      	cmp	r3, #128	; 0x80
 800b324:	d1c3      	bne.n	800b2ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b33c:	e034      	b.n	800b3a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 f89b 	bl	800b47a <I2C_IsAcknowledgeFailed>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d001      	beq.n	800b34e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e034      	b.n	800b3b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b354:	d028      	beq.n	800b3a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b356:	f7fe f87b 	bl	8009450 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	429a      	cmp	r2, r3
 800b364:	d302      	bcc.n	800b36c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d11d      	bne.n	800b3a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	f003 0304 	and.w	r3, r3, #4
 800b376:	2b04      	cmp	r3, #4
 800b378:	d016      	beq.n	800b3a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2220      	movs	r2, #32
 800b384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b394:	f043 0220 	orr.w	r2, r3, #32
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e007      	b.n	800b3b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	f003 0304 	and.w	r3, r3, #4
 800b3b2:	2b04      	cmp	r3, #4
 800b3b4:	d1c3      	bne.n	800b33e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b3cc:	e049      	b.n	800b462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	695b      	ldr	r3, [r3, #20]
 800b3d4:	f003 0310 	and.w	r3, r3, #16
 800b3d8:	2b10      	cmp	r3, #16
 800b3da:	d119      	bne.n	800b410 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f06f 0210 	mvn.w	r2, #16
 800b3e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2220      	movs	r2, #32
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e030      	b.n	800b472 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b410:	f7fe f81e 	bl	8009450 <HAL_GetTick>
 800b414:	4602      	mov	r2, r0
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d302      	bcc.n	800b426 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d11d      	bne.n	800b462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b430:	2b40      	cmp	r3, #64	; 0x40
 800b432:	d016      	beq.n	800b462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2200      	movs	r2, #0
 800b438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44e:	f043 0220 	orr.w	r2, r3, #32
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e007      	b.n	800b472 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46c:	2b40      	cmp	r3, #64	; 0x40
 800b46e:	d1ae      	bne.n	800b3ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b47a:	b480      	push	{r7}
 800b47c:	b083      	sub	sp, #12
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b48c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b490:	d11b      	bne.n	800b4ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b49a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2220      	movs	r2, #32
 800b4a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b6:	f043 0204 	orr.w	r2, r3, #4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e000      	b.n	800b4cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bc80      	pop	{r7}
 800b4d4:	4770      	bx	lr
	...

0800b4d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e272      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0301 	and.w	r3, r3, #1
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 8087 	beq.w	800b606 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b4f8:	4b92      	ldr	r3, [pc, #584]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	f003 030c 	and.w	r3, r3, #12
 800b500:	2b04      	cmp	r3, #4
 800b502:	d00c      	beq.n	800b51e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b504:	4b8f      	ldr	r3, [pc, #572]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f003 030c 	and.w	r3, r3, #12
 800b50c:	2b08      	cmp	r3, #8
 800b50e:	d112      	bne.n	800b536 <HAL_RCC_OscConfig+0x5e>
 800b510:	4b8c      	ldr	r3, [pc, #560]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b51c:	d10b      	bne.n	800b536 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b51e:	4b89      	ldr	r3, [pc, #548]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b526:	2b00      	cmp	r3, #0
 800b528:	d06c      	beq.n	800b604 <HAL_RCC_OscConfig+0x12c>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d168      	bne.n	800b604 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e24c      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b53e:	d106      	bne.n	800b54e <HAL_RCC_OscConfig+0x76>
 800b540:	4b80      	ldr	r3, [pc, #512]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a7f      	ldr	r2, [pc, #508]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	e02e      	b.n	800b5ac <HAL_RCC_OscConfig+0xd4>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d10c      	bne.n	800b570 <HAL_RCC_OscConfig+0x98>
 800b556:	4b7b      	ldr	r3, [pc, #492]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a7a      	ldr	r2, [pc, #488]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b55c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b560:	6013      	str	r3, [r2, #0]
 800b562:	4b78      	ldr	r3, [pc, #480]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a77      	ldr	r2, [pc, #476]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	e01d      	b.n	800b5ac <HAL_RCC_OscConfig+0xd4>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b578:	d10c      	bne.n	800b594 <HAL_RCC_OscConfig+0xbc>
 800b57a:	4b72      	ldr	r3, [pc, #456]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a71      	ldr	r2, [pc, #452]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	4b6f      	ldr	r3, [pc, #444]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a6e      	ldr	r2, [pc, #440]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b58c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	e00b      	b.n	800b5ac <HAL_RCC_OscConfig+0xd4>
 800b594:	4b6b      	ldr	r3, [pc, #428]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a6a      	ldr	r2, [pc, #424]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b59a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b59e:	6013      	str	r3, [r2, #0]
 800b5a0:	4b68      	ldr	r3, [pc, #416]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a67      	ldr	r2, [pc, #412]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b5a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d013      	beq.n	800b5dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5b4:	f7fd ff4c 	bl	8009450 <HAL_GetTick>
 800b5b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5ba:	e008      	b.n	800b5ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5bc:	f7fd ff48 	bl	8009450 <HAL_GetTick>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	2b64      	cmp	r3, #100	; 0x64
 800b5c8:	d901      	bls.n	800b5ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e200      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5ce:	4b5d      	ldr	r3, [pc, #372]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d0f0      	beq.n	800b5bc <HAL_RCC_OscConfig+0xe4>
 800b5da:	e014      	b.n	800b606 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5dc:	f7fd ff38 	bl	8009450 <HAL_GetTick>
 800b5e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5e2:	e008      	b.n	800b5f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5e4:	f7fd ff34 	bl	8009450 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	2b64      	cmp	r3, #100	; 0x64
 800b5f0:	d901      	bls.n	800b5f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e1ec      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5f6:	4b53      	ldr	r3, [pc, #332]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1f0      	bne.n	800b5e4 <HAL_RCC_OscConfig+0x10c>
 800b602:	e000      	b.n	800b606 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 0302 	and.w	r3, r3, #2
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d063      	beq.n	800b6da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b612:	4b4c      	ldr	r3, [pc, #304]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f003 030c 	and.w	r3, r3, #12
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00b      	beq.n	800b636 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b61e:	4b49      	ldr	r3, [pc, #292]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f003 030c 	and.w	r3, r3, #12
 800b626:	2b08      	cmp	r3, #8
 800b628:	d11c      	bne.n	800b664 <HAL_RCC_OscConfig+0x18c>
 800b62a:	4b46      	ldr	r3, [pc, #280]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d116      	bne.n	800b664 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b636:	4b43      	ldr	r3, [pc, #268]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 0302 	and.w	r3, r3, #2
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d005      	beq.n	800b64e <HAL_RCC_OscConfig+0x176>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d001      	beq.n	800b64e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e1c0      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b64e:	4b3d      	ldr	r3, [pc, #244]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	00db      	lsls	r3, r3, #3
 800b65c:	4939      	ldr	r1, [pc, #228]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b662:	e03a      	b.n	800b6da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d020      	beq.n	800b6ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b66c:	4b36      	ldr	r3, [pc, #216]	; (800b748 <HAL_RCC_OscConfig+0x270>)
 800b66e:	2201      	movs	r2, #1
 800b670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b672:	f7fd feed 	bl	8009450 <HAL_GetTick>
 800b676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b678:	e008      	b.n	800b68c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b67a:	f7fd fee9 	bl	8009450 <HAL_GetTick>
 800b67e:	4602      	mov	r2, r0
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	2b02      	cmp	r3, #2
 800b686:	d901      	bls.n	800b68c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b688:	2303      	movs	r3, #3
 800b68a:	e1a1      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b68c:	4b2d      	ldr	r3, [pc, #180]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 0302 	and.w	r3, r3, #2
 800b694:	2b00      	cmp	r3, #0
 800b696:	d0f0      	beq.n	800b67a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b698:	4b2a      	ldr	r3, [pc, #168]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	695b      	ldr	r3, [r3, #20]
 800b6a4:	00db      	lsls	r3, r3, #3
 800b6a6:	4927      	ldr	r1, [pc, #156]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	600b      	str	r3, [r1, #0]
 800b6ac:	e015      	b.n	800b6da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b6ae:	4b26      	ldr	r3, [pc, #152]	; (800b748 <HAL_RCC_OscConfig+0x270>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6b4:	f7fd fecc 	bl	8009450 <HAL_GetTick>
 800b6b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b6ba:	e008      	b.n	800b6ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6bc:	f7fd fec8 	bl	8009450 <HAL_GetTick>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d901      	bls.n	800b6ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e180      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b6ce:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f003 0302 	and.w	r3, r3, #2
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1f0      	bne.n	800b6bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 0308 	and.w	r3, r3, #8
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d03a      	beq.n	800b75c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d019      	beq.n	800b722 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6ee:	4b17      	ldr	r3, [pc, #92]	; (800b74c <HAL_RCC_OscConfig+0x274>)
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b6f4:	f7fd feac 	bl	8009450 <HAL_GetTick>
 800b6f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b6fa:	e008      	b.n	800b70e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6fc:	f7fd fea8 	bl	8009450 <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	2b02      	cmp	r3, #2
 800b708:	d901      	bls.n	800b70e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e160      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b70e:	4b0d      	ldr	r3, [pc, #52]	; (800b744 <HAL_RCC_OscConfig+0x26c>)
 800b710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b712:	f003 0302 	and.w	r3, r3, #2
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0f0      	beq.n	800b6fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b71a:	2001      	movs	r0, #1
 800b71c:	f000 face 	bl	800bcbc <RCC_Delay>
 800b720:	e01c      	b.n	800b75c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b722:	4b0a      	ldr	r3, [pc, #40]	; (800b74c <HAL_RCC_OscConfig+0x274>)
 800b724:	2200      	movs	r2, #0
 800b726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b728:	f7fd fe92 	bl	8009450 <HAL_GetTick>
 800b72c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b72e:	e00f      	b.n	800b750 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b730:	f7fd fe8e 	bl	8009450 <HAL_GetTick>
 800b734:	4602      	mov	r2, r0
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d908      	bls.n	800b750 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
 800b740:	e146      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
 800b742:	bf00      	nop
 800b744:	40021000 	.word	0x40021000
 800b748:	42420000 	.word	0x42420000
 800b74c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b750:	4b92      	ldr	r3, [pc, #584]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	f003 0302 	and.w	r3, r3, #2
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1e9      	bne.n	800b730 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f003 0304 	and.w	r3, r3, #4
 800b764:	2b00      	cmp	r3, #0
 800b766:	f000 80a6 	beq.w	800b8b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b76a:	2300      	movs	r3, #0
 800b76c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b76e:	4b8b      	ldr	r3, [pc, #556]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b770:	69db      	ldr	r3, [r3, #28]
 800b772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10d      	bne.n	800b796 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b77a:	4b88      	ldr	r3, [pc, #544]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b77c:	69db      	ldr	r3, [r3, #28]
 800b77e:	4a87      	ldr	r2, [pc, #540]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b784:	61d3      	str	r3, [r2, #28]
 800b786:	4b85      	ldr	r3, [pc, #532]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b788:	69db      	ldr	r3, [r3, #28]
 800b78a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b78e:	60bb      	str	r3, [r7, #8]
 800b790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b792:	2301      	movs	r3, #1
 800b794:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b796:	4b82      	ldr	r3, [pc, #520]	; (800b9a0 <HAL_RCC_OscConfig+0x4c8>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d118      	bne.n	800b7d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b7a2:	4b7f      	ldr	r3, [pc, #508]	; (800b9a0 <HAL_RCC_OscConfig+0x4c8>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a7e      	ldr	r2, [pc, #504]	; (800b9a0 <HAL_RCC_OscConfig+0x4c8>)
 800b7a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b7ae:	f7fd fe4f 	bl	8009450 <HAL_GetTick>
 800b7b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7b4:	e008      	b.n	800b7c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7b6:	f7fd fe4b 	bl	8009450 <HAL_GetTick>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	2b64      	cmp	r3, #100	; 0x64
 800b7c2:	d901      	bls.n	800b7c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e103      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7c8:	4b75      	ldr	r3, [pc, #468]	; (800b9a0 <HAL_RCC_OscConfig+0x4c8>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d0f0      	beq.n	800b7b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d106      	bne.n	800b7ea <HAL_RCC_OscConfig+0x312>
 800b7dc:	4b6f      	ldr	r3, [pc, #444]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	4a6e      	ldr	r2, [pc, #440]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b7e2:	f043 0301 	orr.w	r3, r3, #1
 800b7e6:	6213      	str	r3, [r2, #32]
 800b7e8:	e02d      	b.n	800b846 <HAL_RCC_OscConfig+0x36e>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10c      	bne.n	800b80c <HAL_RCC_OscConfig+0x334>
 800b7f2:	4b6a      	ldr	r3, [pc, #424]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	4a69      	ldr	r2, [pc, #420]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b7f8:	f023 0301 	bic.w	r3, r3, #1
 800b7fc:	6213      	str	r3, [r2, #32]
 800b7fe:	4b67      	ldr	r3, [pc, #412]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	4a66      	ldr	r2, [pc, #408]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b804:	f023 0304 	bic.w	r3, r3, #4
 800b808:	6213      	str	r3, [r2, #32]
 800b80a:	e01c      	b.n	800b846 <HAL_RCC_OscConfig+0x36e>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	2b05      	cmp	r3, #5
 800b812:	d10c      	bne.n	800b82e <HAL_RCC_OscConfig+0x356>
 800b814:	4b61      	ldr	r3, [pc, #388]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b816:	6a1b      	ldr	r3, [r3, #32]
 800b818:	4a60      	ldr	r2, [pc, #384]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b81a:	f043 0304 	orr.w	r3, r3, #4
 800b81e:	6213      	str	r3, [r2, #32]
 800b820:	4b5e      	ldr	r3, [pc, #376]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b822:	6a1b      	ldr	r3, [r3, #32]
 800b824:	4a5d      	ldr	r2, [pc, #372]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b826:	f043 0301 	orr.w	r3, r3, #1
 800b82a:	6213      	str	r3, [r2, #32]
 800b82c:	e00b      	b.n	800b846 <HAL_RCC_OscConfig+0x36e>
 800b82e:	4b5b      	ldr	r3, [pc, #364]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b830:	6a1b      	ldr	r3, [r3, #32]
 800b832:	4a5a      	ldr	r2, [pc, #360]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b834:	f023 0301 	bic.w	r3, r3, #1
 800b838:	6213      	str	r3, [r2, #32]
 800b83a:	4b58      	ldr	r3, [pc, #352]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b83c:	6a1b      	ldr	r3, [r3, #32]
 800b83e:	4a57      	ldr	r2, [pc, #348]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b840:	f023 0304 	bic.w	r3, r3, #4
 800b844:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d015      	beq.n	800b87a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b84e:	f7fd fdff 	bl	8009450 <HAL_GetTick>
 800b852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b854:	e00a      	b.n	800b86c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b856:	f7fd fdfb 	bl	8009450 <HAL_GetTick>
 800b85a:	4602      	mov	r2, r0
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	f241 3288 	movw	r2, #5000	; 0x1388
 800b864:	4293      	cmp	r3, r2
 800b866:	d901      	bls.n	800b86c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b868:	2303      	movs	r3, #3
 800b86a:	e0b1      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b86c:	4b4b      	ldr	r3, [pc, #300]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	f003 0302 	and.w	r3, r3, #2
 800b874:	2b00      	cmp	r3, #0
 800b876:	d0ee      	beq.n	800b856 <HAL_RCC_OscConfig+0x37e>
 800b878:	e014      	b.n	800b8a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b87a:	f7fd fde9 	bl	8009450 <HAL_GetTick>
 800b87e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b880:	e00a      	b.n	800b898 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b882:	f7fd fde5 	bl	8009450 <HAL_GetTick>
 800b886:	4602      	mov	r2, r0
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b890:	4293      	cmp	r3, r2
 800b892:	d901      	bls.n	800b898 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b894:	2303      	movs	r3, #3
 800b896:	e09b      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b898:	4b40      	ldr	r3, [pc, #256]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b89a:	6a1b      	ldr	r3, [r3, #32]
 800b89c:	f003 0302 	and.w	r3, r3, #2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d1ee      	bne.n	800b882 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b8a4:	7dfb      	ldrb	r3, [r7, #23]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d105      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8aa:	4b3c      	ldr	r3, [pc, #240]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b8ac:	69db      	ldr	r3, [r3, #28]
 800b8ae:	4a3b      	ldr	r2, [pc, #236]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b8b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	69db      	ldr	r3, [r3, #28]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f000 8087 	beq.w	800b9ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b8c0:	4b36      	ldr	r3, [pc, #216]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	f003 030c 	and.w	r3, r3, #12
 800b8c8:	2b08      	cmp	r3, #8
 800b8ca:	d061      	beq.n	800b990 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d146      	bne.n	800b962 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8d4:	4b33      	ldr	r3, [pc, #204]	; (800b9a4 <HAL_RCC_OscConfig+0x4cc>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8da:	f7fd fdb9 	bl	8009450 <HAL_GetTick>
 800b8de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b8e0:	e008      	b.n	800b8f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8e2:	f7fd fdb5 	bl	8009450 <HAL_GetTick>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d901      	bls.n	800b8f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	e06d      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b8f4:	4b29      	ldr	r3, [pc, #164]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1f0      	bne.n	800b8e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6a1b      	ldr	r3, [r3, #32]
 800b904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b908:	d108      	bne.n	800b91c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b90a:	4b24      	ldr	r3, [pc, #144]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	4921      	ldr	r1, [pc, #132]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b91c:	4b1f      	ldr	r3, [pc, #124]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a19      	ldr	r1, [r3, #32]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92c:	430b      	orrs	r3, r1
 800b92e:	491b      	ldr	r1, [pc, #108]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b930:	4313      	orrs	r3, r2
 800b932:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b934:	4b1b      	ldr	r3, [pc, #108]	; (800b9a4 <HAL_RCC_OscConfig+0x4cc>)
 800b936:	2201      	movs	r2, #1
 800b938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b93a:	f7fd fd89 	bl	8009450 <HAL_GetTick>
 800b93e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b940:	e008      	b.n	800b954 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b942:	f7fd fd85 	bl	8009450 <HAL_GetTick>
 800b946:	4602      	mov	r2, r0
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d901      	bls.n	800b954 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b950:	2303      	movs	r3, #3
 800b952:	e03d      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b954:	4b11      	ldr	r3, [pc, #68]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d0f0      	beq.n	800b942 <HAL_RCC_OscConfig+0x46a>
 800b960:	e035      	b.n	800b9ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b962:	4b10      	ldr	r3, [pc, #64]	; (800b9a4 <HAL_RCC_OscConfig+0x4cc>)
 800b964:	2200      	movs	r2, #0
 800b966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b968:	f7fd fd72 	bl	8009450 <HAL_GetTick>
 800b96c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b96e:	e008      	b.n	800b982 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b970:	f7fd fd6e 	bl	8009450 <HAL_GetTick>
 800b974:	4602      	mov	r2, r0
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d901      	bls.n	800b982 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e026      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b982:	4b06      	ldr	r3, [pc, #24]	; (800b99c <HAL_RCC_OscConfig+0x4c4>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1f0      	bne.n	800b970 <HAL_RCC_OscConfig+0x498>
 800b98e:	e01e      	b.n	800b9ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	69db      	ldr	r3, [r3, #28]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d107      	bne.n	800b9a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	e019      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
 800b99c:	40021000 	.word	0x40021000
 800b9a0:	40007000 	.word	0x40007000
 800b9a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b9a8:	4b0b      	ldr	r3, [pc, #44]	; (800b9d8 <HAL_RCC_OscConfig+0x500>)
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d106      	bne.n	800b9ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d001      	beq.n	800b9ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e000      	b.n	800b9d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	40021000 	.word	0x40021000

0800b9dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e0d0      	b.n	800bb92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b9f0:	4b6a      	ldr	r3, [pc, #424]	; (800bb9c <HAL_RCC_ClockConfig+0x1c0>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 0307 	and.w	r3, r3, #7
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d910      	bls.n	800ba20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9fe:	4b67      	ldr	r3, [pc, #412]	; (800bb9c <HAL_RCC_ClockConfig+0x1c0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f023 0207 	bic.w	r2, r3, #7
 800ba06:	4965      	ldr	r1, [pc, #404]	; (800bb9c <HAL_RCC_ClockConfig+0x1c0>)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba0e:	4b63      	ldr	r3, [pc, #396]	; (800bb9c <HAL_RCC_ClockConfig+0x1c0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0307 	and.w	r3, r3, #7
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d001      	beq.n	800ba20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e0b8      	b.n	800bb92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f003 0302 	and.w	r3, r3, #2
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d020      	beq.n	800ba6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 0304 	and.w	r3, r3, #4
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d005      	beq.n	800ba44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ba38:	4b59      	ldr	r3, [pc, #356]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	4a58      	ldr	r2, [pc, #352]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ba42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 0308 	and.w	r3, r3, #8
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d005      	beq.n	800ba5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ba50:	4b53      	ldr	r3, [pc, #332]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	4a52      	ldr	r2, [pc, #328]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ba5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba5c:	4b50      	ldr	r3, [pc, #320]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	494d      	ldr	r1, [pc, #308]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f003 0301 	and.w	r3, r3, #1
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d040      	beq.n	800bafc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d107      	bne.n	800ba92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba82:	4b47      	ldr	r3, [pc, #284]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d115      	bne.n	800baba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e07f      	b.n	800bb92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d107      	bne.n	800baaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba9a:	4b41      	ldr	r3, [pc, #260]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d109      	bne.n	800baba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e073      	b.n	800bb92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800baaa:	4b3d      	ldr	r3, [pc, #244]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 0302 	and.w	r3, r3, #2
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e06b      	b.n	800bb92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800baba:	4b39      	ldr	r3, [pc, #228]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f023 0203 	bic.w	r2, r3, #3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	4936      	ldr	r1, [pc, #216]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800bac8:	4313      	orrs	r3, r2
 800baca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bacc:	f7fd fcc0 	bl	8009450 <HAL_GetTick>
 800bad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bad2:	e00a      	b.n	800baea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bad4:	f7fd fcbc 	bl	8009450 <HAL_GetTick>
 800bad8:	4602      	mov	r2, r0
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d901      	bls.n	800baea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bae6:	2303      	movs	r3, #3
 800bae8:	e053      	b.n	800bb92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baea:	4b2d      	ldr	r3, [pc, #180]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	f003 020c 	and.w	r2, r3, #12
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d1eb      	bne.n	800bad4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bafc:	4b27      	ldr	r3, [pc, #156]	; (800bb9c <HAL_RCC_ClockConfig+0x1c0>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 0307 	and.w	r3, r3, #7
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d210      	bcs.n	800bb2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb0a:	4b24      	ldr	r3, [pc, #144]	; (800bb9c <HAL_RCC_ClockConfig+0x1c0>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f023 0207 	bic.w	r2, r3, #7
 800bb12:	4922      	ldr	r1, [pc, #136]	; (800bb9c <HAL_RCC_ClockConfig+0x1c0>)
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb1a:	4b20      	ldr	r3, [pc, #128]	; (800bb9c <HAL_RCC_ClockConfig+0x1c0>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f003 0307 	and.w	r3, r3, #7
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d001      	beq.n	800bb2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e032      	b.n	800bb92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f003 0304 	and.w	r3, r3, #4
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d008      	beq.n	800bb4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb38:	4b19      	ldr	r3, [pc, #100]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	4916      	ldr	r1, [pc, #88]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800bb46:	4313      	orrs	r3, r2
 800bb48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 0308 	and.w	r3, r3, #8
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d009      	beq.n	800bb6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bb56:	4b12      	ldr	r3, [pc, #72]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	490e      	ldr	r1, [pc, #56]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800bb66:	4313      	orrs	r3, r2
 800bb68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bb6a:	f000 f821 	bl	800bbb0 <HAL_RCC_GetSysClockFreq>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	4b0b      	ldr	r3, [pc, #44]	; (800bba0 <HAL_RCC_ClockConfig+0x1c4>)
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	091b      	lsrs	r3, r3, #4
 800bb76:	f003 030f 	and.w	r3, r3, #15
 800bb7a:	490a      	ldr	r1, [pc, #40]	; (800bba4 <HAL_RCC_ClockConfig+0x1c8>)
 800bb7c:	5ccb      	ldrb	r3, [r1, r3]
 800bb7e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb82:	4a09      	ldr	r2, [pc, #36]	; (800bba8 <HAL_RCC_ClockConfig+0x1cc>)
 800bb84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bb86:	4b09      	ldr	r3, [pc, #36]	; (800bbac <HAL_RCC_ClockConfig+0x1d0>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fd fc1e 	bl	80093cc <HAL_InitTick>

  return HAL_OK;
 800bb90:	2300      	movs	r3, #0
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	40022000 	.word	0x40022000
 800bba0:	40021000 	.word	0x40021000
 800bba4:	0800e948 	.word	0x0800e948
 800bba8:	200009c4 	.word	0x200009c4
 800bbac:	200009c8 	.word	0x200009c8

0800bbb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b087      	sub	sp, #28
 800bbb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60fb      	str	r3, [r7, #12]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	60bb      	str	r3, [r7, #8]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	617b      	str	r3, [r7, #20]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800bbca:	4b1e      	ldr	r3, [pc, #120]	; (800bc44 <HAL_RCC_GetSysClockFreq+0x94>)
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f003 030c 	and.w	r3, r3, #12
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d002      	beq.n	800bbe0 <HAL_RCC_GetSysClockFreq+0x30>
 800bbda:	2b08      	cmp	r3, #8
 800bbdc:	d003      	beq.n	800bbe6 <HAL_RCC_GetSysClockFreq+0x36>
 800bbde:	e027      	b.n	800bc30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bbe0:	4b19      	ldr	r3, [pc, #100]	; (800bc48 <HAL_RCC_GetSysClockFreq+0x98>)
 800bbe2:	613b      	str	r3, [r7, #16]
      break;
 800bbe4:	e027      	b.n	800bc36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	0c9b      	lsrs	r3, r3, #18
 800bbea:	f003 030f 	and.w	r3, r3, #15
 800bbee:	4a17      	ldr	r2, [pc, #92]	; (800bc4c <HAL_RCC_GetSysClockFreq+0x9c>)
 800bbf0:	5cd3      	ldrb	r3, [r2, r3]
 800bbf2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d010      	beq.n	800bc20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bbfe:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <HAL_RCC_GetSysClockFreq+0x94>)
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	0c5b      	lsrs	r3, r3, #17
 800bc04:	f003 0301 	and.w	r3, r3, #1
 800bc08:	4a11      	ldr	r2, [pc, #68]	; (800bc50 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bc0a:	5cd3      	ldrb	r3, [r2, r3]
 800bc0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a0d      	ldr	r2, [pc, #52]	; (800bc48 <HAL_RCC_GetSysClockFreq+0x98>)
 800bc12:	fb03 f202 	mul.w	r2, r3, r2
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc1c:	617b      	str	r3, [r7, #20]
 800bc1e:	e004      	b.n	800bc2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a0c      	ldr	r2, [pc, #48]	; (800bc54 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bc24:	fb02 f303 	mul.w	r3, r2, r3
 800bc28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	613b      	str	r3, [r7, #16]
      break;
 800bc2e:	e002      	b.n	800bc36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bc30:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <HAL_RCC_GetSysClockFreq+0x98>)
 800bc32:	613b      	str	r3, [r7, #16]
      break;
 800bc34:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bc36:	693b      	ldr	r3, [r7, #16]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	371c      	adds	r7, #28
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bc80      	pop	{r7}
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	40021000 	.word	0x40021000
 800bc48:	007a1200 	.word	0x007a1200
 800bc4c:	0800e960 	.word	0x0800e960
 800bc50:	0800e970 	.word	0x0800e970
 800bc54:	003d0900 	.word	0x003d0900

0800bc58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc5c:	4b02      	ldr	r3, [pc, #8]	; (800bc68 <HAL_RCC_GetHCLKFreq+0x10>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bc80      	pop	{r7}
 800bc66:	4770      	bx	lr
 800bc68:	200009c4 	.word	0x200009c4

0800bc6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bc70:	f7ff fff2 	bl	800bc58 <HAL_RCC_GetHCLKFreq>
 800bc74:	4602      	mov	r2, r0
 800bc76:	4b05      	ldr	r3, [pc, #20]	; (800bc8c <HAL_RCC_GetPCLK1Freq+0x20>)
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	0a1b      	lsrs	r3, r3, #8
 800bc7c:	f003 0307 	and.w	r3, r3, #7
 800bc80:	4903      	ldr	r1, [pc, #12]	; (800bc90 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bc82:	5ccb      	ldrb	r3, [r1, r3]
 800bc84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	40021000 	.word	0x40021000
 800bc90:	0800e958 	.word	0x0800e958

0800bc94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bc98:	f7ff ffde 	bl	800bc58 <HAL_RCC_GetHCLKFreq>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	0adb      	lsrs	r3, r3, #11
 800bca4:	f003 0307 	and.w	r3, r3, #7
 800bca8:	4903      	ldr	r1, [pc, #12]	; (800bcb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bcaa:	5ccb      	ldrb	r3, [r1, r3]
 800bcac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	40021000 	.word	0x40021000
 800bcb8:	0800e958 	.word	0x0800e958

0800bcbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bcc4:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <RCC_Delay+0x34>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a0a      	ldr	r2, [pc, #40]	; (800bcf4 <RCC_Delay+0x38>)
 800bcca:	fba2 2303 	umull	r2, r3, r2, r3
 800bcce:	0a5b      	lsrs	r3, r3, #9
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	fb02 f303 	mul.w	r3, r2, r3
 800bcd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bcd8:	bf00      	nop
  }
  while (Delay --);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	1e5a      	subs	r2, r3, #1
 800bcde:	60fa      	str	r2, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1f9      	bne.n	800bcd8 <RCC_Delay+0x1c>
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bc80      	pop	{r7}
 800bcee:	4770      	bx	lr
 800bcf0:	200009c4 	.word	0x200009c4
 800bcf4:	10624dd3 	.word	0x10624dd3

0800bcf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd06:	2301      	movs	r3, #1
 800bd08:	e041      	b.n	800bd8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7fd fa26 	bl	8009170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2202      	movs	r2, #2
 800bd28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	3304      	adds	r3, #4
 800bd34:	4619      	mov	r1, r3
 800bd36:	4610      	mov	r0, r2
 800bd38:	f000 fa82 	bl	800c240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
	...

0800bd98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d001      	beq.n	800bdb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	e044      	b.n	800be3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68da      	ldr	r2, [r3, #12]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f042 0201 	orr.w	r2, r2, #1
 800bdc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a1d      	ldr	r2, [pc, #116]	; (800be44 <HAL_TIM_Base_Start_IT+0xac>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d018      	beq.n	800be04 <HAL_TIM_Base_Start_IT+0x6c>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a1c      	ldr	r2, [pc, #112]	; (800be48 <HAL_TIM_Base_Start_IT+0xb0>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d013      	beq.n	800be04 <HAL_TIM_Base_Start_IT+0x6c>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bde4:	d00e      	beq.n	800be04 <HAL_TIM_Base_Start_IT+0x6c>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a18      	ldr	r2, [pc, #96]	; (800be4c <HAL_TIM_Base_Start_IT+0xb4>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d009      	beq.n	800be04 <HAL_TIM_Base_Start_IT+0x6c>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a16      	ldr	r2, [pc, #88]	; (800be50 <HAL_TIM_Base_Start_IT+0xb8>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d004      	beq.n	800be04 <HAL_TIM_Base_Start_IT+0x6c>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a15      	ldr	r2, [pc, #84]	; (800be54 <HAL_TIM_Base_Start_IT+0xbc>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d111      	bne.n	800be28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	f003 0307 	and.w	r3, r3, #7
 800be0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2b06      	cmp	r3, #6
 800be14:	d010      	beq.n	800be38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f042 0201 	orr.w	r2, r2, #1
 800be24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be26:	e007      	b.n	800be38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f042 0201 	orr.w	r2, r2, #1
 800be36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	bc80      	pop	{r7}
 800be42:	4770      	bx	lr
 800be44:	40012c00 	.word	0x40012c00
 800be48:	40013400 	.word	0x40013400
 800be4c:	40000400 	.word	0x40000400
 800be50:	40000800 	.word	0x40000800
 800be54:	40000c00 	.word	0x40000c00

0800be58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	f003 0302 	and.w	r3, r3, #2
 800be6a:	2b02      	cmp	r3, #2
 800be6c:	d122      	bne.n	800beb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	f003 0302 	and.w	r3, r3, #2
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d11b      	bne.n	800beb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f06f 0202 	mvn.w	r2, #2
 800be84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	f003 0303 	and.w	r3, r3, #3
 800be96:	2b00      	cmp	r3, #0
 800be98:	d003      	beq.n	800bea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f9b4 	bl	800c208 <HAL_TIM_IC_CaptureCallback>
 800bea0:	e005      	b.n	800beae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f9a7 	bl	800c1f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f9b6 	bl	800c21a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	f003 0304 	and.w	r3, r3, #4
 800bebe:	2b04      	cmp	r3, #4
 800bec0:	d122      	bne.n	800bf08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	f003 0304 	and.w	r3, r3, #4
 800becc:	2b04      	cmp	r3, #4
 800bece:	d11b      	bne.n	800bf08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f06f 0204 	mvn.w	r2, #4
 800bed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2202      	movs	r2, #2
 800bede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	699b      	ldr	r3, [r3, #24]
 800bee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800beea:	2b00      	cmp	r3, #0
 800beec:	d003      	beq.n	800bef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 f98a 	bl	800c208 <HAL_TIM_IC_CaptureCallback>
 800bef4:	e005      	b.n	800bf02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f97d 	bl	800c1f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 f98c 	bl	800c21a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	f003 0308 	and.w	r3, r3, #8
 800bf12:	2b08      	cmp	r3, #8
 800bf14:	d122      	bne.n	800bf5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	f003 0308 	and.w	r3, r3, #8
 800bf20:	2b08      	cmp	r3, #8
 800bf22:	d11b      	bne.n	800bf5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f06f 0208 	mvn.w	r2, #8
 800bf2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2204      	movs	r2, #4
 800bf32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	69db      	ldr	r3, [r3, #28]
 800bf3a:	f003 0303 	and.w	r3, r3, #3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f960 	bl	800c208 <HAL_TIM_IC_CaptureCallback>
 800bf48:	e005      	b.n	800bf56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f953 	bl	800c1f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 f962 	bl	800c21a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	f003 0310 	and.w	r3, r3, #16
 800bf66:	2b10      	cmp	r3, #16
 800bf68:	d122      	bne.n	800bfb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	f003 0310 	and.w	r3, r3, #16
 800bf74:	2b10      	cmp	r3, #16
 800bf76:	d11b      	bne.n	800bfb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f06f 0210 	mvn.w	r2, #16
 800bf80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2208      	movs	r2, #8
 800bf86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	69db      	ldr	r3, [r3, #28]
 800bf8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d003      	beq.n	800bf9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f936 	bl	800c208 <HAL_TIM_IC_CaptureCallback>
 800bf9c:	e005      	b.n	800bfaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f929 	bl	800c1f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f938 	bl	800c21a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	f003 0301 	and.w	r3, r3, #1
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d10e      	bne.n	800bfdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d107      	bne.n	800bfdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f06f 0201 	mvn.w	r2, #1
 800bfd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7fc fd58 	bl	8008a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfe6:	2b80      	cmp	r3, #128	; 0x80
 800bfe8:	d10e      	bne.n	800c008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff4:	2b80      	cmp	r3, #128	; 0x80
 800bff6:	d107      	bne.n	800c008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 faa1 	bl	800c54a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c012:	2b40      	cmp	r3, #64	; 0x40
 800c014:	d10e      	bne.n	800c034 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c020:	2b40      	cmp	r3, #64	; 0x40
 800c022:	d107      	bne.n	800c034 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c02c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f8fc 	bl	800c22c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	691b      	ldr	r3, [r3, #16]
 800c03a:	f003 0320 	and.w	r3, r3, #32
 800c03e:	2b20      	cmp	r3, #32
 800c040:	d10e      	bne.n	800c060 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	f003 0320 	and.w	r3, r3, #32
 800c04c:	2b20      	cmp	r3, #32
 800c04e:	d107      	bne.n	800c060 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f06f 0220 	mvn.w	r2, #32
 800c058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 fa6c 	bl	800c538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d101      	bne.n	800c084 <HAL_TIM_ConfigClockSource+0x1c>
 800c080:	2302      	movs	r3, #2
 800c082:	e0b4      	b.n	800c1ee <HAL_TIM_ConfigClockSource+0x186>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2202      	movs	r2, #2
 800c090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c0a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0bc:	d03e      	beq.n	800c13c <HAL_TIM_ConfigClockSource+0xd4>
 800c0be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0c2:	f200 8087 	bhi.w	800c1d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0ca:	f000 8086 	beq.w	800c1da <HAL_TIM_ConfigClockSource+0x172>
 800c0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0d2:	d87f      	bhi.n	800c1d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c0d4:	2b70      	cmp	r3, #112	; 0x70
 800c0d6:	d01a      	beq.n	800c10e <HAL_TIM_ConfigClockSource+0xa6>
 800c0d8:	2b70      	cmp	r3, #112	; 0x70
 800c0da:	d87b      	bhi.n	800c1d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c0dc:	2b60      	cmp	r3, #96	; 0x60
 800c0de:	d050      	beq.n	800c182 <HAL_TIM_ConfigClockSource+0x11a>
 800c0e0:	2b60      	cmp	r3, #96	; 0x60
 800c0e2:	d877      	bhi.n	800c1d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c0e4:	2b50      	cmp	r3, #80	; 0x50
 800c0e6:	d03c      	beq.n	800c162 <HAL_TIM_ConfigClockSource+0xfa>
 800c0e8:	2b50      	cmp	r3, #80	; 0x50
 800c0ea:	d873      	bhi.n	800c1d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c0ec:	2b40      	cmp	r3, #64	; 0x40
 800c0ee:	d058      	beq.n	800c1a2 <HAL_TIM_ConfigClockSource+0x13a>
 800c0f0:	2b40      	cmp	r3, #64	; 0x40
 800c0f2:	d86f      	bhi.n	800c1d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c0f4:	2b30      	cmp	r3, #48	; 0x30
 800c0f6:	d064      	beq.n	800c1c2 <HAL_TIM_ConfigClockSource+0x15a>
 800c0f8:	2b30      	cmp	r3, #48	; 0x30
 800c0fa:	d86b      	bhi.n	800c1d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c0fc:	2b20      	cmp	r3, #32
 800c0fe:	d060      	beq.n	800c1c2 <HAL_TIM_ConfigClockSource+0x15a>
 800c100:	2b20      	cmp	r3, #32
 800c102:	d867      	bhi.n	800c1d4 <HAL_TIM_ConfigClockSource+0x16c>
 800c104:	2b00      	cmp	r3, #0
 800c106:	d05c      	beq.n	800c1c2 <HAL_TIM_ConfigClockSource+0x15a>
 800c108:	2b10      	cmp	r3, #16
 800c10a:	d05a      	beq.n	800c1c2 <HAL_TIM_ConfigClockSource+0x15a>
 800c10c:	e062      	b.n	800c1d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c11e:	f000 f980 	bl	800c422 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	609a      	str	r2, [r3, #8]
      break;
 800c13a:	e04f      	b.n	800c1dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c14c:	f000 f969 	bl	800c422 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	689a      	ldr	r2, [r3, #8]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c15e:	609a      	str	r2, [r3, #8]
      break;
 800c160:	e03c      	b.n	800c1dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c16e:	461a      	mov	r2, r3
 800c170:	f000 f8e0 	bl	800c334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2150      	movs	r1, #80	; 0x50
 800c17a:	4618      	mov	r0, r3
 800c17c:	f000 f937 	bl	800c3ee <TIM_ITRx_SetConfig>
      break;
 800c180:	e02c      	b.n	800c1dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c18e:	461a      	mov	r2, r3
 800c190:	f000 f8fe 	bl	800c390 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2160      	movs	r1, #96	; 0x60
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 f927 	bl	800c3ee <TIM_ITRx_SetConfig>
      break;
 800c1a0:	e01c      	b.n	800c1dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f000 f8c0 	bl	800c334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2140      	movs	r1, #64	; 0x40
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 f917 	bl	800c3ee <TIM_ITRx_SetConfig>
      break;
 800c1c0:	e00c      	b.n	800c1dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	f000 f90e 	bl	800c3ee <TIM_ITRx_SetConfig>
      break;
 800c1d2:	e003      	b.n	800c1dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c1d8:	e000      	b.n	800c1dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c1da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1fe:	bf00      	nop
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	bc80      	pop	{r7}
 800c206:	4770      	bx	lr

0800c208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	bc80      	pop	{r7}
 800c218:	4770      	bx	lr

0800c21a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c21a:	b480      	push	{r7}
 800c21c:	b083      	sub	sp, #12
 800c21e:	af00      	add	r7, sp, #0
 800c220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c222:	bf00      	nop
 800c224:	370c      	adds	r7, #12
 800c226:	46bd      	mov	sp, r7
 800c228:	bc80      	pop	{r7}
 800c22a:	4770      	bx	lr

0800c22c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c234:	bf00      	nop
 800c236:	370c      	adds	r7, #12
 800c238:	46bd      	mov	sp, r7
 800c23a:	bc80      	pop	{r7}
 800c23c:	4770      	bx	lr
	...

0800c240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a33      	ldr	r2, [pc, #204]	; (800c320 <TIM_Base_SetConfig+0xe0>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d013      	beq.n	800c280 <TIM_Base_SetConfig+0x40>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a32      	ldr	r2, [pc, #200]	; (800c324 <TIM_Base_SetConfig+0xe4>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d00f      	beq.n	800c280 <TIM_Base_SetConfig+0x40>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c266:	d00b      	beq.n	800c280 <TIM_Base_SetConfig+0x40>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a2f      	ldr	r2, [pc, #188]	; (800c328 <TIM_Base_SetConfig+0xe8>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d007      	beq.n	800c280 <TIM_Base_SetConfig+0x40>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a2e      	ldr	r2, [pc, #184]	; (800c32c <TIM_Base_SetConfig+0xec>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d003      	beq.n	800c280 <TIM_Base_SetConfig+0x40>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a2d      	ldr	r2, [pc, #180]	; (800c330 <TIM_Base_SetConfig+0xf0>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d108      	bne.n	800c292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	4313      	orrs	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a22      	ldr	r2, [pc, #136]	; (800c320 <TIM_Base_SetConfig+0xe0>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d013      	beq.n	800c2c2 <TIM_Base_SetConfig+0x82>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a21      	ldr	r2, [pc, #132]	; (800c324 <TIM_Base_SetConfig+0xe4>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00f      	beq.n	800c2c2 <TIM_Base_SetConfig+0x82>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2a8:	d00b      	beq.n	800c2c2 <TIM_Base_SetConfig+0x82>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a1e      	ldr	r2, [pc, #120]	; (800c328 <TIM_Base_SetConfig+0xe8>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d007      	beq.n	800c2c2 <TIM_Base_SetConfig+0x82>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a1d      	ldr	r2, [pc, #116]	; (800c32c <TIM_Base_SetConfig+0xec>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d003      	beq.n	800c2c2 <TIM_Base_SetConfig+0x82>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a1c      	ldr	r2, [pc, #112]	; (800c330 <TIM_Base_SetConfig+0xf0>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d108      	bne.n	800c2d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	695b      	ldr	r3, [r3, #20]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	689a      	ldr	r2, [r3, #8]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a09      	ldr	r2, [pc, #36]	; (800c320 <TIM_Base_SetConfig+0xe0>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d003      	beq.n	800c308 <TIM_Base_SetConfig+0xc8>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a08      	ldr	r2, [pc, #32]	; (800c324 <TIM_Base_SetConfig+0xe4>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d103      	bne.n	800c310 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	691a      	ldr	r2, [r3, #16]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	615a      	str	r2, [r3, #20]
}
 800c316:	bf00      	nop
 800c318:	3714      	adds	r7, #20
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bc80      	pop	{r7}
 800c31e:	4770      	bx	lr
 800c320:	40012c00 	.word	0x40012c00
 800c324:	40013400 	.word	0x40013400
 800c328:	40000400 	.word	0x40000400
 800c32c:	40000800 	.word	0x40000800
 800c330:	40000c00 	.word	0x40000c00

0800c334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c334:	b480      	push	{r7}
 800c336:	b087      	sub	sp, #28
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6a1b      	ldr	r3, [r3, #32]
 800c344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	f023 0201 	bic.w	r2, r3, #1
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	699b      	ldr	r3, [r3, #24]
 800c356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c35e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	011b      	lsls	r3, r3, #4
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	4313      	orrs	r3, r2
 800c368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	f023 030a 	bic.w	r3, r3, #10
 800c370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	4313      	orrs	r3, r2
 800c378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	621a      	str	r2, [r3, #32]
}
 800c386:	bf00      	nop
 800c388:	371c      	adds	r7, #28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bc80      	pop	{r7}
 800c38e:	4770      	bx	lr

0800c390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c390:	b480      	push	{r7}
 800c392:	b087      	sub	sp, #28
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6a1b      	ldr	r3, [r3, #32]
 800c3a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	f023 0210 	bic.w	r2, r3, #16
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	699b      	ldr	r3, [r3, #24]
 800c3b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c3ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	031b      	lsls	r3, r3, #12
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c3cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	011b      	lsls	r3, r3, #4
 800c3d2:	697a      	ldr	r2, [r7, #20]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	697a      	ldr	r2, [r7, #20]
 800c3e2:	621a      	str	r2, [r3, #32]
}
 800c3e4:	bf00      	nop
 800c3e6:	371c      	adds	r7, #28
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bc80      	pop	{r7}
 800c3ec:	4770      	bx	lr

0800c3ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c3ee:	b480      	push	{r7}
 800c3f0:	b085      	sub	sp, #20
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	689b      	ldr	r3, [r3, #8]
 800c3fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	f043 0307 	orr.w	r3, r3, #7
 800c410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	609a      	str	r2, [r3, #8]
}
 800c418:	bf00      	nop
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bc80      	pop	{r7}
 800c420:	4770      	bx	lr

0800c422 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c422:	b480      	push	{r7}
 800c424:	b087      	sub	sp, #28
 800c426:	af00      	add	r7, sp, #0
 800c428:	60f8      	str	r0, [r7, #12]
 800c42a:	60b9      	str	r1, [r7, #8]
 800c42c:	607a      	str	r2, [r7, #4]
 800c42e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c43c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	021a      	lsls	r2, r3, #8
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	431a      	orrs	r2, r3
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	4313      	orrs	r3, r2
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	609a      	str	r2, [r3, #8]
}
 800c456:	bf00      	nop
 800c458:	371c      	adds	r7, #28
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bc80      	pop	{r7}
 800c45e:	4770      	bx	lr

0800c460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c460:	b480      	push	{r7}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c470:	2b01      	cmp	r3, #1
 800c472:	d101      	bne.n	800c478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c474:	2302      	movs	r3, #2
 800c476:	e050      	b.n	800c51a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2202      	movs	r2, #2
 800c484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c49e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68fa      	ldr	r2, [r7, #12]
 800c4b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	4a1b      	ldr	r2, [pc, #108]	; (800c524 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d018      	beq.n	800c4ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a19      	ldr	r2, [pc, #100]	; (800c528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d013      	beq.n	800c4ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4ce:	d00e      	beq.n	800c4ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a15      	ldr	r2, [pc, #84]	; (800c52c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d009      	beq.n	800c4ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a14      	ldr	r2, [pc, #80]	; (800c530 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d004      	beq.n	800c4ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a12      	ldr	r2, [pc, #72]	; (800c534 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d10c      	bne.n	800c508 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	bc80      	pop	{r7}
 800c522:	4770      	bx	lr
 800c524:	40012c00 	.word	0x40012c00
 800c528:	40013400 	.word	0x40013400
 800c52c:	40000400 	.word	0x40000400
 800c530:	40000800 	.word	0x40000800
 800c534:	40000c00 	.word	0x40000c00

0800c538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	bc80      	pop	{r7}
 800c548:	4770      	bx	lr

0800c54a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c54a:	b480      	push	{r7}
 800c54c:	b083      	sub	sp, #12
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c552:	bf00      	nop
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	bc80      	pop	{r7}
 800c55a:	4770      	bx	lr

0800c55c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c56a:	2301      	movs	r3, #1
 800c56c:	e042      	b.n	800c5f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c574:	b2db      	uxtb	r3, r3
 800c576:	2b00      	cmp	r3, #0
 800c578:	d106      	bne.n	800c588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f7fc fe1a 	bl	80091bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2224      	movs	r2, #36	; 0x24
 800c58c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68da      	ldr	r2, [r3, #12]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c59e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fcb5 	bl	800cf10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	691a      	ldr	r2, [r3, #16]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	695a      	ldr	r2, [r3, #20]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68da      	ldr	r2, [r3, #12]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c5d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2220      	movs	r2, #32
 800c5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b085      	sub	sp, #20
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	4613      	mov	r3, r2
 800c608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b20      	cmp	r3, #32
 800c614:	d121      	bne.n	800c65a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d002      	beq.n	800c622 <HAL_UART_Transmit_IT+0x26>
 800c61c:	88fb      	ldrh	r3, [r7, #6]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d101      	bne.n	800c626 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e01a      	b.n	800c65c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	88fa      	ldrh	r2, [r7, #6]
 800c630:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	88fa      	ldrh	r2, [r7, #6]
 800c636:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2200      	movs	r2, #0
 800c63c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2221      	movs	r2, #33	; 0x21
 800c642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68da      	ldr	r2, [r3, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c654:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c656:	2300      	movs	r3, #0
 800c658:	e000      	b.n	800c65c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c65a:	2302      	movs	r3, #2
  }
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	bc80      	pop	{r7}
 800c664:	4770      	bx	lr
	...

0800c668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b0ba      	sub	sp, #232	; 0xe8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c68e:	2300      	movs	r3, #0
 800c690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c694:	2300      	movs	r3, #0
 800c696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c69a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c69e:	f003 030f 	and.w	r3, r3, #15
 800c6a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c6a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10f      	bne.n	800c6ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6b2:	f003 0320 	and.w	r3, r3, #32
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d009      	beq.n	800c6ce <HAL_UART_IRQHandler+0x66>
 800c6ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6be:	f003 0320 	and.w	r3, r3, #32
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d003      	beq.n	800c6ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fb63 	bl	800cd92 <UART_Receive_IT>
      return;
 800c6cc:	e25b      	b.n	800cb86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c6ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 80de 	beq.w	800c894 <HAL_UART_IRQHandler+0x22c>
 800c6d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6dc:	f003 0301 	and.w	r3, r3, #1
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d106      	bne.n	800c6f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f000 80d1 	beq.w	800c894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6f6:	f003 0301 	and.w	r3, r3, #1
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00b      	beq.n	800c716 <HAL_UART_IRQHandler+0xae>
 800c6fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c706:	2b00      	cmp	r3, #0
 800c708:	d005      	beq.n	800c716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c70e:	f043 0201 	orr.w	r2, r3, #1
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c71a:	f003 0304 	and.w	r3, r3, #4
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00b      	beq.n	800c73a <HAL_UART_IRQHandler+0xd2>
 800c722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c726:	f003 0301 	and.w	r3, r3, #1
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d005      	beq.n	800c73a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c732:	f043 0202 	orr.w	r2, r3, #2
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c73e:	f003 0302 	and.w	r3, r3, #2
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00b      	beq.n	800c75e <HAL_UART_IRQHandler+0xf6>
 800c746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d005      	beq.n	800c75e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c756:	f043 0204 	orr.w	r2, r3, #4
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c762:	f003 0308 	and.w	r3, r3, #8
 800c766:	2b00      	cmp	r3, #0
 800c768:	d011      	beq.n	800c78e <HAL_UART_IRQHandler+0x126>
 800c76a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c76e:	f003 0320 	and.w	r3, r3, #32
 800c772:	2b00      	cmp	r3, #0
 800c774:	d105      	bne.n	800c782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c77a:	f003 0301 	and.w	r3, r3, #1
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d005      	beq.n	800c78e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c786:	f043 0208 	orr.w	r2, r3, #8
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c792:	2b00      	cmp	r3, #0
 800c794:	f000 81f2 	beq.w	800cb7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c79c:	f003 0320 	and.w	r3, r3, #32
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d008      	beq.n	800c7b6 <HAL_UART_IRQHandler+0x14e>
 800c7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7a8:	f003 0320 	and.w	r3, r3, #32
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d002      	beq.n	800c7b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 faee 	bl	800cd92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	695b      	ldr	r3, [r3, #20]
 800c7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	bf14      	ite	ne
 800c7c4:	2301      	movne	r3, #1
 800c7c6:	2300      	moveq	r3, #0
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d2:	f003 0308 	and.w	r3, r3, #8
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d103      	bne.n	800c7e2 <HAL_UART_IRQHandler+0x17a>
 800c7da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d04f      	beq.n	800c882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f9f8 	bl	800cbd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d041      	beq.n	800c87a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	3314      	adds	r3, #20
 800c7fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c804:	e853 3f00 	ldrex	r3, [r3]
 800c808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c80c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	3314      	adds	r3, #20
 800c81e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c82e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c832:	e841 2300 	strex	r3, r2, [r1]
 800c836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c83a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1d9      	bne.n	800c7f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d013      	beq.n	800c872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c84e:	4a7e      	ldr	r2, [pc, #504]	; (800ca48 <HAL_UART_IRQHandler+0x3e0>)
 800c850:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c856:	4618      	mov	r0, r3
 800c858:	f7fd f86c 	bl	8009934 <HAL_DMA_Abort_IT>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d016      	beq.n	800c890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c86c:	4610      	mov	r0, r2
 800c86e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c870:	e00e      	b.n	800c890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f99c 	bl	800cbb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c878:	e00a      	b.n	800c890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f998 	bl	800cbb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c880:	e006      	b.n	800c890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f994 	bl	800cbb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c88e:	e175      	b.n	800cb7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c890:	bf00      	nop
    return;
 800c892:	e173      	b.n	800cb7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c898:	2b01      	cmp	r3, #1
 800c89a:	f040 814f 	bne.w	800cb3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8a2:	f003 0310 	and.w	r3, r3, #16
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	f000 8148 	beq.w	800cb3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8b0:	f003 0310 	and.w	r3, r3, #16
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 8141 	beq.w	800cb3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	60bb      	str	r3, [r7, #8]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	60bb      	str	r3, [r7, #8]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	60bb      	str	r3, [r7, #8]
 800c8ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	695b      	ldr	r3, [r3, #20]
 800c8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f000 80b6 	beq.w	800ca4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c8ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 8145 	beq.w	800cb80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c8fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c8fe:	429a      	cmp	r2, r3
 800c900:	f080 813e 	bcs.w	800cb80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c90a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c910:	699b      	ldr	r3, [r3, #24]
 800c912:	2b20      	cmp	r3, #32
 800c914:	f000 8088 	beq.w	800ca28 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	330c      	adds	r3, #12
 800c91e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c922:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c926:	e853 3f00 	ldrex	r3, [r3]
 800c92a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c92e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c932:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	330c      	adds	r3, #12
 800c940:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c944:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c950:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c954:	e841 2300 	strex	r3, r2, [r1]
 800c958:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c95c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1d9      	bne.n	800c918 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3314      	adds	r3, #20
 800c96a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c96c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c96e:	e853 3f00 	ldrex	r3, [r3]
 800c972:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c976:	f023 0301 	bic.w	r3, r3, #1
 800c97a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	3314      	adds	r3, #20
 800c984:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c988:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c98c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c990:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c994:	e841 2300 	strex	r3, r2, [r1]
 800c998:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c99a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d1e1      	bne.n	800c964 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	3314      	adds	r3, #20
 800c9a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9aa:	e853 3f00 	ldrex	r3, [r3]
 800c9ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c9b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	3314      	adds	r3, #20
 800c9c0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c9c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c9c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c9cc:	e841 2300 	strex	r3, r2, [r1]
 800c9d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1e3      	bne.n	800c9a0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2220      	movs	r2, #32
 800c9dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	330c      	adds	r3, #12
 800c9ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9f0:	e853 3f00 	ldrex	r3, [r3]
 800c9f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c9f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9f8:	f023 0310 	bic.w	r3, r3, #16
 800c9fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	330c      	adds	r3, #12
 800ca06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ca0a:	65ba      	str	r2, [r7, #88]	; 0x58
 800ca0c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca12:	e841 2300 	strex	r3, r2, [r1]
 800ca16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1e3      	bne.n	800c9e6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fc ff4b 	bl	80098be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 f8bf 	bl	800cbc2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca44:	e09c      	b.n	800cb80 <HAL_UART_IRQHandler+0x518>
 800ca46:	bf00      	nop
 800ca48:	0800cc9d 	.word	0x0800cc9d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 808e 	beq.w	800cb84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ca68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 8089 	beq.w	800cb84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	330c      	adds	r3, #12
 800ca78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7c:	e853 3f00 	ldrex	r3, [r3]
 800ca80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	330c      	adds	r3, #12
 800ca92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ca96:	647a      	str	r2, [r7, #68]	; 0x44
 800ca98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca9e:	e841 2300 	strex	r3, r2, [r1]
 800caa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800caa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1e3      	bne.n	800ca72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3314      	adds	r3, #20
 800cab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab4:	e853 3f00 	ldrex	r3, [r3]
 800cab8:	623b      	str	r3, [r7, #32]
   return(result);
 800caba:	6a3b      	ldr	r3, [r7, #32]
 800cabc:	f023 0301 	bic.w	r3, r3, #1
 800cac0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	3314      	adds	r3, #20
 800caca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cace:	633a      	str	r2, [r7, #48]	; 0x30
 800cad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cad6:	e841 2300 	strex	r3, r2, [r1]
 800cada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1e3      	bne.n	800caaa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2220      	movs	r2, #32
 800cae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	330c      	adds	r3, #12
 800caf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	e853 3f00 	ldrex	r3, [r3]
 800cafe:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f023 0310 	bic.w	r3, r3, #16
 800cb06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	330c      	adds	r3, #12
 800cb10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cb14:	61fa      	str	r2, [r7, #28]
 800cb16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb18:	69b9      	ldr	r1, [r7, #24]
 800cb1a:	69fa      	ldr	r2, [r7, #28]
 800cb1c:	e841 2300 	strex	r3, r2, [r1]
 800cb20:	617b      	str	r3, [r7, #20]
   return(result);
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1e3      	bne.n	800caf0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2202      	movs	r2, #2
 800cb2c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 f844 	bl	800cbc2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb3a:	e023      	b.n	800cb84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cb3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d009      	beq.n	800cb5c <HAL_UART_IRQHandler+0x4f4>
 800cb48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d003      	beq.n	800cb5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f8b5 	bl	800ccc4 <UART_Transmit_IT>
    return;
 800cb5a:	e014      	b.n	800cb86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d00e      	beq.n	800cb86 <HAL_UART_IRQHandler+0x51e>
 800cb68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d008      	beq.n	800cb86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 f8f4 	bl	800cd62 <UART_EndTransmit_IT>
    return;
 800cb7a:	e004      	b.n	800cb86 <HAL_UART_IRQHandler+0x51e>
    return;
 800cb7c:	bf00      	nop
 800cb7e:	e002      	b.n	800cb86 <HAL_UART_IRQHandler+0x51e>
      return;
 800cb80:	bf00      	nop
 800cb82:	e000      	b.n	800cb86 <HAL_UART_IRQHandler+0x51e>
      return;
 800cb84:	bf00      	nop
  }
}
 800cb86:	37e8      	adds	r7, #232	; 0xe8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bc80      	pop	{r7}
 800cb9c:	4770      	bx	lr

0800cb9e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb9e:	b480      	push	{r7}
 800cba0:	b083      	sub	sp, #12
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cba6:	bf00      	nop
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bc80      	pop	{r7}
 800cbae:	4770      	bx	lr

0800cbb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cbb8:	bf00      	nop
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bc80      	pop	{r7}
 800cbc0:	4770      	bx	lr

0800cbc2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	b083      	sub	sp, #12
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	460b      	mov	r3, r1
 800cbcc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cbce:	bf00      	nop
 800cbd0:	370c      	adds	r7, #12
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bc80      	pop	{r7}
 800cbd6:	4770      	bx	lr

0800cbd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b095      	sub	sp, #84	; 0x54
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	330c      	adds	r3, #12
 800cbe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbea:	e853 3f00 	ldrex	r3, [r3]
 800cbee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cbf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc00:	643a      	str	r2, [r7, #64]	; 0x40
 800cc02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc08:	e841 2300 	strex	r3, r2, [r1]
 800cc0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1e5      	bne.n	800cbe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3314      	adds	r3, #20
 800cc1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	e853 3f00 	ldrex	r3, [r3]
 800cc22:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	f023 0301 	bic.w	r3, r3, #1
 800cc2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	3314      	adds	r3, #20
 800cc32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc34:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc3c:	e841 2300 	strex	r3, r2, [r1]
 800cc40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1e5      	bne.n	800cc14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d119      	bne.n	800cc84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	330c      	adds	r3, #12
 800cc56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	e853 3f00 	ldrex	r3, [r3]
 800cc5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	f023 0310 	bic.w	r3, r3, #16
 800cc66:	647b      	str	r3, [r7, #68]	; 0x44
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	330c      	adds	r3, #12
 800cc6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc70:	61ba      	str	r2, [r7, #24]
 800cc72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc74:	6979      	ldr	r1, [r7, #20]
 800cc76:	69ba      	ldr	r2, [r7, #24]
 800cc78:	e841 2300 	strex	r3, r2, [r1]
 800cc7c:	613b      	str	r3, [r7, #16]
   return(result);
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1e5      	bne.n	800cc50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2220      	movs	r2, #32
 800cc88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cc92:	bf00      	nop
 800cc94:	3754      	adds	r7, #84	; 0x54
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bc80      	pop	{r7}
 800cc9a:	4770      	bx	lr

0800cc9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2200      	movs	r2, #0
 800ccae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f7ff ff7a 	bl	800cbb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccbc:	bf00      	nop
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	2b21      	cmp	r3, #33	; 0x21
 800ccd6:	d13e      	bne.n	800cd56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cce0:	d114      	bne.n	800cd0c <UART_Transmit_IT+0x48>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	691b      	ldr	r3, [r3, #16]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d110      	bne.n	800cd0c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	881b      	ldrh	r3, [r3, #0]
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccfe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	1c9a      	adds	r2, r3, #2
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	621a      	str	r2, [r3, #32]
 800cd0a:	e008      	b.n	800cd1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a1b      	ldr	r3, [r3, #32]
 800cd10:	1c59      	adds	r1, r3, #1
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	6211      	str	r1, [r2, #32]
 800cd16:	781a      	ldrb	r2, [r3, #0]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	3b01      	subs	r3, #1
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10f      	bne.n	800cd52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68da      	ldr	r2, [r3, #12]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68da      	ldr	r2, [r3, #12]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	e000      	b.n	800cd58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cd56:	2302      	movs	r3, #2
  }
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bc80      	pop	{r7}
 800cd60:	4770      	bx	lr

0800cd62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b082      	sub	sp, #8
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68da      	ldr	r2, [r3, #12]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2220      	movs	r2, #32
 800cd7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7ff ff02 	bl	800cb8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3708      	adds	r7, #8
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b08c      	sub	sp, #48	; 0x30
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	2b22      	cmp	r3, #34	; 0x22
 800cda4:	f040 80ae 	bne.w	800cf04 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdb0:	d117      	bne.n	800cde2 <UART_Receive_IT+0x50>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d113      	bne.n	800cde2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdda:	1c9a      	adds	r2, r3, #2
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	629a      	str	r2, [r3, #40]	; 0x28
 800cde0:	e026      	b.n	800ce30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cde8:	2300      	movs	r3, #0
 800cdea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	689b      	ldr	r3, [r3, #8]
 800cdf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdf4:	d007      	beq.n	800ce06 <UART_Receive_IT+0x74>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d10a      	bne.n	800ce14 <UART_Receive_IT+0x82>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d106      	bne.n	800ce14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce10:	701a      	strb	r2, [r3, #0]
 800ce12:	e008      	b.n	800ce26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2a:	1c5a      	adds	r2, r3, #1
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	3b01      	subs	r3, #1
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d15d      	bne.n	800cf00 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	68da      	ldr	r2, [r3, #12]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f022 0220 	bic.w	r2, r2, #32
 800ce52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	68da      	ldr	r2, [r3, #12]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	695a      	ldr	r2, [r3, #20]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f022 0201 	bic.w	r2, r2, #1
 800ce72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2220      	movs	r2, #32
 800ce78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d135      	bne.n	800cef6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	330c      	adds	r3, #12
 800ce96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	e853 3f00 	ldrex	r3, [r3]
 800ce9e:	613b      	str	r3, [r7, #16]
   return(result);
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f023 0310 	bic.w	r3, r3, #16
 800cea6:	627b      	str	r3, [r7, #36]	; 0x24
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	330c      	adds	r3, #12
 800ceae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceb0:	623a      	str	r2, [r7, #32]
 800ceb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb4:	69f9      	ldr	r1, [r7, #28]
 800ceb6:	6a3a      	ldr	r2, [r7, #32]
 800ceb8:	e841 2300 	strex	r3, r2, [r1]
 800cebc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1e5      	bne.n	800ce90 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f003 0310 	and.w	r3, r3, #16
 800cece:	2b10      	cmp	r3, #16
 800ced0:	d10a      	bne.n	800cee8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ced2:	2300      	movs	r3, #0
 800ced4:	60fb      	str	r3, [r7, #12]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	60fb      	str	r3, [r7, #12]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	60fb      	str	r3, [r7, #12]
 800cee6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ceec:	4619      	mov	r1, r3
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7ff fe67 	bl	800cbc2 <HAL_UARTEx_RxEventCallback>
 800cef4:	e002      	b.n	800cefc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff fe51 	bl	800cb9e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	e002      	b.n	800cf06 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cf00:	2300      	movs	r3, #0
 800cf02:	e000      	b.n	800cf06 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cf04:	2302      	movs	r3, #2
  }
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3730      	adds	r7, #48	; 0x30
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
	...

0800cf10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	68da      	ldr	r2, [r3, #12]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	430a      	orrs	r2, r1
 800cf2c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	689a      	ldr	r2, [r3, #8]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	431a      	orrs	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	695b      	ldr	r3, [r3, #20]
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cf4a:	f023 030c 	bic.w	r3, r3, #12
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	6812      	ldr	r2, [r2, #0]
 800cf52:	68b9      	ldr	r1, [r7, #8]
 800cf54:	430b      	orrs	r3, r1
 800cf56:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	695b      	ldr	r3, [r3, #20]
 800cf5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	699a      	ldr	r2, [r3, #24]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	430a      	orrs	r2, r1
 800cf6c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a2c      	ldr	r2, [pc, #176]	; (800d024 <UART_SetConfig+0x114>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d103      	bne.n	800cf80 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cf78:	f7fe fe8c 	bl	800bc94 <HAL_RCC_GetPCLK2Freq>
 800cf7c:	60f8      	str	r0, [r7, #12]
 800cf7e:	e002      	b.n	800cf86 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cf80:	f7fe fe74 	bl	800bc6c <HAL_RCC_GetPCLK1Freq>
 800cf84:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	009a      	lsls	r2, r3, #2
 800cf90:	441a      	add	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf9c:	4a22      	ldr	r2, [pc, #136]	; (800d028 <UART_SetConfig+0x118>)
 800cf9e:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa2:	095b      	lsrs	r3, r3, #5
 800cfa4:	0119      	lsls	r1, r3, #4
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	009a      	lsls	r2, r3, #2
 800cfb0:	441a      	add	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfbc:	4b1a      	ldr	r3, [pc, #104]	; (800d028 <UART_SetConfig+0x118>)
 800cfbe:	fba3 0302 	umull	r0, r3, r3, r2
 800cfc2:	095b      	lsrs	r3, r3, #5
 800cfc4:	2064      	movs	r0, #100	; 0x64
 800cfc6:	fb00 f303 	mul.w	r3, r0, r3
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	011b      	lsls	r3, r3, #4
 800cfce:	3332      	adds	r3, #50	; 0x32
 800cfd0:	4a15      	ldr	r2, [pc, #84]	; (800d028 <UART_SetConfig+0x118>)
 800cfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd6:	095b      	lsrs	r3, r3, #5
 800cfd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfdc:	4419      	add	r1, r3
 800cfde:	68fa      	ldr	r2, [r7, #12]
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4413      	add	r3, r2
 800cfe6:	009a      	lsls	r2, r3, #2
 800cfe8:	441a      	add	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	fbb2 f2f3 	udiv	r2, r2, r3
 800cff4:	4b0c      	ldr	r3, [pc, #48]	; (800d028 <UART_SetConfig+0x118>)
 800cff6:	fba3 0302 	umull	r0, r3, r3, r2
 800cffa:	095b      	lsrs	r3, r3, #5
 800cffc:	2064      	movs	r0, #100	; 0x64
 800cffe:	fb00 f303 	mul.w	r3, r0, r3
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	011b      	lsls	r3, r3, #4
 800d006:	3332      	adds	r3, #50	; 0x32
 800d008:	4a07      	ldr	r2, [pc, #28]	; (800d028 <UART_SetConfig+0x118>)
 800d00a:	fba2 2303 	umull	r2, r3, r2, r3
 800d00e:	095b      	lsrs	r3, r3, #5
 800d010:	f003 020f 	and.w	r2, r3, #15
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	440a      	add	r2, r1
 800d01a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d01c:	bf00      	nop
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	40013800 	.word	0x40013800
 800d028:	51eb851f 	.word	0x51eb851f

0800d02c <__itoa>:
 800d02c:	1e93      	subs	r3, r2, #2
 800d02e:	2b22      	cmp	r3, #34	; 0x22
 800d030:	b510      	push	{r4, lr}
 800d032:	460c      	mov	r4, r1
 800d034:	d904      	bls.n	800d040 <__itoa+0x14>
 800d036:	2300      	movs	r3, #0
 800d038:	461c      	mov	r4, r3
 800d03a:	700b      	strb	r3, [r1, #0]
 800d03c:	4620      	mov	r0, r4
 800d03e:	bd10      	pop	{r4, pc}
 800d040:	2a0a      	cmp	r2, #10
 800d042:	d109      	bne.n	800d058 <__itoa+0x2c>
 800d044:	2800      	cmp	r0, #0
 800d046:	da07      	bge.n	800d058 <__itoa+0x2c>
 800d048:	232d      	movs	r3, #45	; 0x2d
 800d04a:	700b      	strb	r3, [r1, #0]
 800d04c:	2101      	movs	r1, #1
 800d04e:	4240      	negs	r0, r0
 800d050:	4421      	add	r1, r4
 800d052:	f000 f8b9 	bl	800d1c8 <__utoa>
 800d056:	e7f1      	b.n	800d03c <__itoa+0x10>
 800d058:	2100      	movs	r1, #0
 800d05a:	e7f9      	b.n	800d050 <__itoa+0x24>

0800d05c <itoa>:
 800d05c:	f7ff bfe6 	b.w	800d02c <__itoa>

0800d060 <malloc>:
 800d060:	4b02      	ldr	r3, [pc, #8]	; (800d06c <malloc+0xc>)
 800d062:	4601      	mov	r1, r0
 800d064:	6818      	ldr	r0, [r3, #0]
 800d066:	f000 b823 	b.w	800d0b0 <_malloc_r>
 800d06a:	bf00      	nop
 800d06c:	20000a1c 	.word	0x20000a1c

0800d070 <sbrk_aligned>:
 800d070:	b570      	push	{r4, r5, r6, lr}
 800d072:	4e0e      	ldr	r6, [pc, #56]	; (800d0ac <sbrk_aligned+0x3c>)
 800d074:	460c      	mov	r4, r1
 800d076:	6831      	ldr	r1, [r6, #0]
 800d078:	4605      	mov	r5, r0
 800d07a:	b911      	cbnz	r1, 800d082 <sbrk_aligned+0x12>
 800d07c:	f000 f91e 	bl	800d2bc <_sbrk_r>
 800d080:	6030      	str	r0, [r6, #0]
 800d082:	4621      	mov	r1, r4
 800d084:	4628      	mov	r0, r5
 800d086:	f000 f919 	bl	800d2bc <_sbrk_r>
 800d08a:	1c43      	adds	r3, r0, #1
 800d08c:	d00a      	beq.n	800d0a4 <sbrk_aligned+0x34>
 800d08e:	1cc4      	adds	r4, r0, #3
 800d090:	f024 0403 	bic.w	r4, r4, #3
 800d094:	42a0      	cmp	r0, r4
 800d096:	d007      	beq.n	800d0a8 <sbrk_aligned+0x38>
 800d098:	1a21      	subs	r1, r4, r0
 800d09a:	4628      	mov	r0, r5
 800d09c:	f000 f90e 	bl	800d2bc <_sbrk_r>
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	d101      	bne.n	800d0a8 <sbrk_aligned+0x38>
 800d0a4:	f04f 34ff 	mov.w	r4, #4294967295
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	bd70      	pop	{r4, r5, r6, pc}
 800d0ac:	20000ef8 	.word	0x20000ef8

0800d0b0 <_malloc_r>:
 800d0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b4:	1ccd      	adds	r5, r1, #3
 800d0b6:	f025 0503 	bic.w	r5, r5, #3
 800d0ba:	3508      	adds	r5, #8
 800d0bc:	2d0c      	cmp	r5, #12
 800d0be:	bf38      	it	cc
 800d0c0:	250c      	movcc	r5, #12
 800d0c2:	2d00      	cmp	r5, #0
 800d0c4:	4607      	mov	r7, r0
 800d0c6:	db01      	blt.n	800d0cc <_malloc_r+0x1c>
 800d0c8:	42a9      	cmp	r1, r5
 800d0ca:	d905      	bls.n	800d0d8 <_malloc_r+0x28>
 800d0cc:	230c      	movs	r3, #12
 800d0ce:	2600      	movs	r6, #0
 800d0d0:	603b      	str	r3, [r7, #0]
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d1ac <_malloc_r+0xfc>
 800d0dc:	f000 f868 	bl	800d1b0 <__malloc_lock>
 800d0e0:	f8d8 3000 	ldr.w	r3, [r8]
 800d0e4:	461c      	mov	r4, r3
 800d0e6:	bb5c      	cbnz	r4, 800d140 <_malloc_r+0x90>
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	4638      	mov	r0, r7
 800d0ec:	f7ff ffc0 	bl	800d070 <sbrk_aligned>
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	d155      	bne.n	800d1a2 <_malloc_r+0xf2>
 800d0f6:	f8d8 4000 	ldr.w	r4, [r8]
 800d0fa:	4626      	mov	r6, r4
 800d0fc:	2e00      	cmp	r6, #0
 800d0fe:	d145      	bne.n	800d18c <_malloc_r+0xdc>
 800d100:	2c00      	cmp	r4, #0
 800d102:	d048      	beq.n	800d196 <_malloc_r+0xe6>
 800d104:	6823      	ldr	r3, [r4, #0]
 800d106:	4631      	mov	r1, r6
 800d108:	4638      	mov	r0, r7
 800d10a:	eb04 0903 	add.w	r9, r4, r3
 800d10e:	f000 f8d5 	bl	800d2bc <_sbrk_r>
 800d112:	4581      	cmp	r9, r0
 800d114:	d13f      	bne.n	800d196 <_malloc_r+0xe6>
 800d116:	6821      	ldr	r1, [r4, #0]
 800d118:	4638      	mov	r0, r7
 800d11a:	1a6d      	subs	r5, r5, r1
 800d11c:	4629      	mov	r1, r5
 800d11e:	f7ff ffa7 	bl	800d070 <sbrk_aligned>
 800d122:	3001      	adds	r0, #1
 800d124:	d037      	beq.n	800d196 <_malloc_r+0xe6>
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	442b      	add	r3, r5
 800d12a:	6023      	str	r3, [r4, #0]
 800d12c:	f8d8 3000 	ldr.w	r3, [r8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d038      	beq.n	800d1a6 <_malloc_r+0xf6>
 800d134:	685a      	ldr	r2, [r3, #4]
 800d136:	42a2      	cmp	r2, r4
 800d138:	d12b      	bne.n	800d192 <_malloc_r+0xe2>
 800d13a:	2200      	movs	r2, #0
 800d13c:	605a      	str	r2, [r3, #4]
 800d13e:	e00f      	b.n	800d160 <_malloc_r+0xb0>
 800d140:	6822      	ldr	r2, [r4, #0]
 800d142:	1b52      	subs	r2, r2, r5
 800d144:	d41f      	bmi.n	800d186 <_malloc_r+0xd6>
 800d146:	2a0b      	cmp	r2, #11
 800d148:	d917      	bls.n	800d17a <_malloc_r+0xca>
 800d14a:	1961      	adds	r1, r4, r5
 800d14c:	42a3      	cmp	r3, r4
 800d14e:	6025      	str	r5, [r4, #0]
 800d150:	bf18      	it	ne
 800d152:	6059      	strne	r1, [r3, #4]
 800d154:	6863      	ldr	r3, [r4, #4]
 800d156:	bf08      	it	eq
 800d158:	f8c8 1000 	streq.w	r1, [r8]
 800d15c:	5162      	str	r2, [r4, r5]
 800d15e:	604b      	str	r3, [r1, #4]
 800d160:	4638      	mov	r0, r7
 800d162:	f104 060b 	add.w	r6, r4, #11
 800d166:	f000 f829 	bl	800d1bc <__malloc_unlock>
 800d16a:	f026 0607 	bic.w	r6, r6, #7
 800d16e:	1d23      	adds	r3, r4, #4
 800d170:	1af2      	subs	r2, r6, r3
 800d172:	d0ae      	beq.n	800d0d2 <_malloc_r+0x22>
 800d174:	1b9b      	subs	r3, r3, r6
 800d176:	50a3      	str	r3, [r4, r2]
 800d178:	e7ab      	b.n	800d0d2 <_malloc_r+0x22>
 800d17a:	42a3      	cmp	r3, r4
 800d17c:	6862      	ldr	r2, [r4, #4]
 800d17e:	d1dd      	bne.n	800d13c <_malloc_r+0x8c>
 800d180:	f8c8 2000 	str.w	r2, [r8]
 800d184:	e7ec      	b.n	800d160 <_malloc_r+0xb0>
 800d186:	4623      	mov	r3, r4
 800d188:	6864      	ldr	r4, [r4, #4]
 800d18a:	e7ac      	b.n	800d0e6 <_malloc_r+0x36>
 800d18c:	4634      	mov	r4, r6
 800d18e:	6876      	ldr	r6, [r6, #4]
 800d190:	e7b4      	b.n	800d0fc <_malloc_r+0x4c>
 800d192:	4613      	mov	r3, r2
 800d194:	e7cc      	b.n	800d130 <_malloc_r+0x80>
 800d196:	230c      	movs	r3, #12
 800d198:	4638      	mov	r0, r7
 800d19a:	603b      	str	r3, [r7, #0]
 800d19c:	f000 f80e 	bl	800d1bc <__malloc_unlock>
 800d1a0:	e797      	b.n	800d0d2 <_malloc_r+0x22>
 800d1a2:	6025      	str	r5, [r4, #0]
 800d1a4:	e7dc      	b.n	800d160 <_malloc_r+0xb0>
 800d1a6:	605b      	str	r3, [r3, #4]
 800d1a8:	deff      	udf	#255	; 0xff
 800d1aa:	bf00      	nop
 800d1ac:	20000ef4 	.word	0x20000ef4

0800d1b0 <__malloc_lock>:
 800d1b0:	4801      	ldr	r0, [pc, #4]	; (800d1b8 <__malloc_lock+0x8>)
 800d1b2:	f000 b8bd 	b.w	800d330 <__retarget_lock_acquire_recursive>
 800d1b6:	bf00      	nop
 800d1b8:	20001038 	.word	0x20001038

0800d1bc <__malloc_unlock>:
 800d1bc:	4801      	ldr	r0, [pc, #4]	; (800d1c4 <__malloc_unlock+0x8>)
 800d1be:	f000 b8b8 	b.w	800d332 <__retarget_lock_release_recursive>
 800d1c2:	bf00      	nop
 800d1c4:	20001038 	.word	0x20001038

0800d1c8 <__utoa>:
 800d1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ca:	b08b      	sub	sp, #44	; 0x2c
 800d1cc:	4605      	mov	r5, r0
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	466e      	mov	r6, sp
 800d1d2:	4c1d      	ldr	r4, [pc, #116]	; (800d248 <__utoa+0x80>)
 800d1d4:	f104 0c20 	add.w	ip, r4, #32
 800d1d8:	4637      	mov	r7, r6
 800d1da:	6820      	ldr	r0, [r4, #0]
 800d1dc:	6861      	ldr	r1, [r4, #4]
 800d1de:	3408      	adds	r4, #8
 800d1e0:	c703      	stmia	r7!, {r0, r1}
 800d1e2:	4564      	cmp	r4, ip
 800d1e4:	463e      	mov	r6, r7
 800d1e6:	d1f7      	bne.n	800d1d8 <__utoa+0x10>
 800d1e8:	7921      	ldrb	r1, [r4, #4]
 800d1ea:	6820      	ldr	r0, [r4, #0]
 800d1ec:	7139      	strb	r1, [r7, #4]
 800d1ee:	1e91      	subs	r1, r2, #2
 800d1f0:	2922      	cmp	r1, #34	; 0x22
 800d1f2:	6038      	str	r0, [r7, #0]
 800d1f4:	f04f 0100 	mov.w	r1, #0
 800d1f8:	d904      	bls.n	800d204 <__utoa+0x3c>
 800d1fa:	7019      	strb	r1, [r3, #0]
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	4618      	mov	r0, r3
 800d200:	b00b      	add	sp, #44	; 0x2c
 800d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d204:	1e58      	subs	r0, r3, #1
 800d206:	4684      	mov	ip, r0
 800d208:	fbb5 f7f2 	udiv	r7, r5, r2
 800d20c:	fb02 5617 	mls	r6, r2, r7, r5
 800d210:	3628      	adds	r6, #40	; 0x28
 800d212:	446e      	add	r6, sp
 800d214:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d218:	460c      	mov	r4, r1
 800d21a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d21e:	462e      	mov	r6, r5
 800d220:	42b2      	cmp	r2, r6
 800d222:	463d      	mov	r5, r7
 800d224:	f101 0101 	add.w	r1, r1, #1
 800d228:	d9ee      	bls.n	800d208 <__utoa+0x40>
 800d22a:	2200      	movs	r2, #0
 800d22c:	545a      	strb	r2, [r3, r1]
 800d22e:	1919      	adds	r1, r3, r4
 800d230:	1aa5      	subs	r5, r4, r2
 800d232:	42aa      	cmp	r2, r5
 800d234:	dae3      	bge.n	800d1fe <__utoa+0x36>
 800d236:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d23a:	780e      	ldrb	r6, [r1, #0]
 800d23c:	3201      	adds	r2, #1
 800d23e:	7006      	strb	r6, [r0, #0]
 800d240:	f801 5901 	strb.w	r5, [r1], #-1
 800d244:	e7f4      	b.n	800d230 <__utoa+0x68>
 800d246:	bf00      	nop
 800d248:	0800e972 	.word	0x0800e972

0800d24c <siprintf>:
 800d24c:	b40e      	push	{r1, r2, r3}
 800d24e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d252:	b500      	push	{lr}
 800d254:	b09c      	sub	sp, #112	; 0x70
 800d256:	ab1d      	add	r3, sp, #116	; 0x74
 800d258:	9002      	str	r0, [sp, #8]
 800d25a:	9006      	str	r0, [sp, #24]
 800d25c:	9107      	str	r1, [sp, #28]
 800d25e:	9104      	str	r1, [sp, #16]
 800d260:	4808      	ldr	r0, [pc, #32]	; (800d284 <siprintf+0x38>)
 800d262:	4909      	ldr	r1, [pc, #36]	; (800d288 <siprintf+0x3c>)
 800d264:	f853 2b04 	ldr.w	r2, [r3], #4
 800d268:	9105      	str	r1, [sp, #20]
 800d26a:	6800      	ldr	r0, [r0, #0]
 800d26c:	a902      	add	r1, sp, #8
 800d26e:	9301      	str	r3, [sp, #4]
 800d270:	f000 f90a 	bl	800d488 <_svfiprintf_r>
 800d274:	2200      	movs	r2, #0
 800d276:	9b02      	ldr	r3, [sp, #8]
 800d278:	701a      	strb	r2, [r3, #0]
 800d27a:	b01c      	add	sp, #112	; 0x70
 800d27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d280:	b003      	add	sp, #12
 800d282:	4770      	bx	lr
 800d284:	20000a1c 	.word	0x20000a1c
 800d288:	ffff0208 	.word	0xffff0208

0800d28c <memset>:
 800d28c:	4603      	mov	r3, r0
 800d28e:	4402      	add	r2, r0
 800d290:	4293      	cmp	r3, r2
 800d292:	d100      	bne.n	800d296 <memset+0xa>
 800d294:	4770      	bx	lr
 800d296:	f803 1b01 	strb.w	r1, [r3], #1
 800d29a:	e7f9      	b.n	800d290 <memset+0x4>

0800d29c <strcat>:
 800d29c:	4602      	mov	r2, r0
 800d29e:	b510      	push	{r4, lr}
 800d2a0:	7814      	ldrb	r4, [r2, #0]
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	3201      	adds	r2, #1
 800d2a6:	2c00      	cmp	r4, #0
 800d2a8:	d1fa      	bne.n	800d2a0 <strcat+0x4>
 800d2aa:	3b01      	subs	r3, #1
 800d2ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2b4:	2a00      	cmp	r2, #0
 800d2b6:	d1f9      	bne.n	800d2ac <strcat+0x10>
 800d2b8:	bd10      	pop	{r4, pc}
	...

0800d2bc <_sbrk_r>:
 800d2bc:	b538      	push	{r3, r4, r5, lr}
 800d2be:	2300      	movs	r3, #0
 800d2c0:	4d05      	ldr	r5, [pc, #20]	; (800d2d8 <_sbrk_r+0x1c>)
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	4608      	mov	r0, r1
 800d2c6:	602b      	str	r3, [r5, #0]
 800d2c8:	f7fc f808 	bl	80092dc <_sbrk>
 800d2cc:	1c43      	adds	r3, r0, #1
 800d2ce:	d102      	bne.n	800d2d6 <_sbrk_r+0x1a>
 800d2d0:	682b      	ldr	r3, [r5, #0]
 800d2d2:	b103      	cbz	r3, 800d2d6 <_sbrk_r+0x1a>
 800d2d4:	6023      	str	r3, [r4, #0]
 800d2d6:	bd38      	pop	{r3, r4, r5, pc}
 800d2d8:	20001034 	.word	0x20001034

0800d2dc <__errno>:
 800d2dc:	4b01      	ldr	r3, [pc, #4]	; (800d2e4 <__errno+0x8>)
 800d2de:	6818      	ldr	r0, [r3, #0]
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	20000a1c 	.word	0x20000a1c

0800d2e8 <__libc_init_array>:
 800d2e8:	b570      	push	{r4, r5, r6, lr}
 800d2ea:	2600      	movs	r6, #0
 800d2ec:	4d0c      	ldr	r5, [pc, #48]	; (800d320 <__libc_init_array+0x38>)
 800d2ee:	4c0d      	ldr	r4, [pc, #52]	; (800d324 <__libc_init_array+0x3c>)
 800d2f0:	1b64      	subs	r4, r4, r5
 800d2f2:	10a4      	asrs	r4, r4, #2
 800d2f4:	42a6      	cmp	r6, r4
 800d2f6:	d109      	bne.n	800d30c <__libc_init_array+0x24>
 800d2f8:	f000 fbc6 	bl	800da88 <_init>
 800d2fc:	2600      	movs	r6, #0
 800d2fe:	4d0a      	ldr	r5, [pc, #40]	; (800d328 <__libc_init_array+0x40>)
 800d300:	4c0a      	ldr	r4, [pc, #40]	; (800d32c <__libc_init_array+0x44>)
 800d302:	1b64      	subs	r4, r4, r5
 800d304:	10a4      	asrs	r4, r4, #2
 800d306:	42a6      	cmp	r6, r4
 800d308:	d105      	bne.n	800d316 <__libc_init_array+0x2e>
 800d30a:	bd70      	pop	{r4, r5, r6, pc}
 800d30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d310:	4798      	blx	r3
 800d312:	3601      	adds	r6, #1
 800d314:	e7ee      	b.n	800d2f4 <__libc_init_array+0xc>
 800d316:	f855 3b04 	ldr.w	r3, [r5], #4
 800d31a:	4798      	blx	r3
 800d31c:	3601      	adds	r6, #1
 800d31e:	e7f2      	b.n	800d306 <__libc_init_array+0x1e>
 800d320:	0800e9cc 	.word	0x0800e9cc
 800d324:	0800e9cc 	.word	0x0800e9cc
 800d328:	0800e9cc 	.word	0x0800e9cc
 800d32c:	0800e9d0 	.word	0x0800e9d0

0800d330 <__retarget_lock_acquire_recursive>:
 800d330:	4770      	bx	lr

0800d332 <__retarget_lock_release_recursive>:
 800d332:	4770      	bx	lr

0800d334 <strcpy>:
 800d334:	4603      	mov	r3, r0
 800d336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d33a:	f803 2b01 	strb.w	r2, [r3], #1
 800d33e:	2a00      	cmp	r2, #0
 800d340:	d1f9      	bne.n	800d336 <strcpy+0x2>
 800d342:	4770      	bx	lr

0800d344 <_free_r>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	4605      	mov	r5, r0
 800d348:	2900      	cmp	r1, #0
 800d34a:	d040      	beq.n	800d3ce <_free_r+0x8a>
 800d34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d350:	1f0c      	subs	r4, r1, #4
 800d352:	2b00      	cmp	r3, #0
 800d354:	bfb8      	it	lt
 800d356:	18e4      	addlt	r4, r4, r3
 800d358:	f7ff ff2a 	bl	800d1b0 <__malloc_lock>
 800d35c:	4a1c      	ldr	r2, [pc, #112]	; (800d3d0 <_free_r+0x8c>)
 800d35e:	6813      	ldr	r3, [r2, #0]
 800d360:	b933      	cbnz	r3, 800d370 <_free_r+0x2c>
 800d362:	6063      	str	r3, [r4, #4]
 800d364:	6014      	str	r4, [r2, #0]
 800d366:	4628      	mov	r0, r5
 800d368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d36c:	f7ff bf26 	b.w	800d1bc <__malloc_unlock>
 800d370:	42a3      	cmp	r3, r4
 800d372:	d908      	bls.n	800d386 <_free_r+0x42>
 800d374:	6820      	ldr	r0, [r4, #0]
 800d376:	1821      	adds	r1, r4, r0
 800d378:	428b      	cmp	r3, r1
 800d37a:	bf01      	itttt	eq
 800d37c:	6819      	ldreq	r1, [r3, #0]
 800d37e:	685b      	ldreq	r3, [r3, #4]
 800d380:	1809      	addeq	r1, r1, r0
 800d382:	6021      	streq	r1, [r4, #0]
 800d384:	e7ed      	b.n	800d362 <_free_r+0x1e>
 800d386:	461a      	mov	r2, r3
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	b10b      	cbz	r3, 800d390 <_free_r+0x4c>
 800d38c:	42a3      	cmp	r3, r4
 800d38e:	d9fa      	bls.n	800d386 <_free_r+0x42>
 800d390:	6811      	ldr	r1, [r2, #0]
 800d392:	1850      	adds	r0, r2, r1
 800d394:	42a0      	cmp	r0, r4
 800d396:	d10b      	bne.n	800d3b0 <_free_r+0x6c>
 800d398:	6820      	ldr	r0, [r4, #0]
 800d39a:	4401      	add	r1, r0
 800d39c:	1850      	adds	r0, r2, r1
 800d39e:	4283      	cmp	r3, r0
 800d3a0:	6011      	str	r1, [r2, #0]
 800d3a2:	d1e0      	bne.n	800d366 <_free_r+0x22>
 800d3a4:	6818      	ldr	r0, [r3, #0]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	4408      	add	r0, r1
 800d3aa:	6010      	str	r0, [r2, #0]
 800d3ac:	6053      	str	r3, [r2, #4]
 800d3ae:	e7da      	b.n	800d366 <_free_r+0x22>
 800d3b0:	d902      	bls.n	800d3b8 <_free_r+0x74>
 800d3b2:	230c      	movs	r3, #12
 800d3b4:	602b      	str	r3, [r5, #0]
 800d3b6:	e7d6      	b.n	800d366 <_free_r+0x22>
 800d3b8:	6820      	ldr	r0, [r4, #0]
 800d3ba:	1821      	adds	r1, r4, r0
 800d3bc:	428b      	cmp	r3, r1
 800d3be:	bf01      	itttt	eq
 800d3c0:	6819      	ldreq	r1, [r3, #0]
 800d3c2:	685b      	ldreq	r3, [r3, #4]
 800d3c4:	1809      	addeq	r1, r1, r0
 800d3c6:	6021      	streq	r1, [r4, #0]
 800d3c8:	6063      	str	r3, [r4, #4]
 800d3ca:	6054      	str	r4, [r2, #4]
 800d3cc:	e7cb      	b.n	800d366 <_free_r+0x22>
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
 800d3d0:	20000ef4 	.word	0x20000ef4

0800d3d4 <__ssputs_r>:
 800d3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d8:	461f      	mov	r7, r3
 800d3da:	688e      	ldr	r6, [r1, #8]
 800d3dc:	4682      	mov	sl, r0
 800d3de:	42be      	cmp	r6, r7
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	4690      	mov	r8, r2
 800d3e4:	680b      	ldr	r3, [r1, #0]
 800d3e6:	d82c      	bhi.n	800d442 <__ssputs_r+0x6e>
 800d3e8:	898a      	ldrh	r2, [r1, #12]
 800d3ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3ee:	d026      	beq.n	800d43e <__ssputs_r+0x6a>
 800d3f0:	6965      	ldr	r5, [r4, #20]
 800d3f2:	6909      	ldr	r1, [r1, #16]
 800d3f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3f8:	eba3 0901 	sub.w	r9, r3, r1
 800d3fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d400:	1c7b      	adds	r3, r7, #1
 800d402:	444b      	add	r3, r9
 800d404:	106d      	asrs	r5, r5, #1
 800d406:	429d      	cmp	r5, r3
 800d408:	bf38      	it	cc
 800d40a:	461d      	movcc	r5, r3
 800d40c:	0553      	lsls	r3, r2, #21
 800d40e:	d527      	bpl.n	800d460 <__ssputs_r+0x8c>
 800d410:	4629      	mov	r1, r5
 800d412:	f7ff fe4d 	bl	800d0b0 <_malloc_r>
 800d416:	4606      	mov	r6, r0
 800d418:	b360      	cbz	r0, 800d474 <__ssputs_r+0xa0>
 800d41a:	464a      	mov	r2, r9
 800d41c:	6921      	ldr	r1, [r4, #16]
 800d41e:	f000 faed 	bl	800d9fc <memcpy>
 800d422:	89a3      	ldrh	r3, [r4, #12]
 800d424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d42c:	81a3      	strh	r3, [r4, #12]
 800d42e:	6126      	str	r6, [r4, #16]
 800d430:	444e      	add	r6, r9
 800d432:	6026      	str	r6, [r4, #0]
 800d434:	463e      	mov	r6, r7
 800d436:	6165      	str	r5, [r4, #20]
 800d438:	eba5 0509 	sub.w	r5, r5, r9
 800d43c:	60a5      	str	r5, [r4, #8]
 800d43e:	42be      	cmp	r6, r7
 800d440:	d900      	bls.n	800d444 <__ssputs_r+0x70>
 800d442:	463e      	mov	r6, r7
 800d444:	4632      	mov	r2, r6
 800d446:	4641      	mov	r1, r8
 800d448:	6820      	ldr	r0, [r4, #0]
 800d44a:	f000 faaf 	bl	800d9ac <memmove>
 800d44e:	2000      	movs	r0, #0
 800d450:	68a3      	ldr	r3, [r4, #8]
 800d452:	1b9b      	subs	r3, r3, r6
 800d454:	60a3      	str	r3, [r4, #8]
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	4433      	add	r3, r6
 800d45a:	6023      	str	r3, [r4, #0]
 800d45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d460:	462a      	mov	r2, r5
 800d462:	f000 fad9 	bl	800da18 <_realloc_r>
 800d466:	4606      	mov	r6, r0
 800d468:	2800      	cmp	r0, #0
 800d46a:	d1e0      	bne.n	800d42e <__ssputs_r+0x5a>
 800d46c:	4650      	mov	r0, sl
 800d46e:	6921      	ldr	r1, [r4, #16]
 800d470:	f7ff ff68 	bl	800d344 <_free_r>
 800d474:	230c      	movs	r3, #12
 800d476:	f8ca 3000 	str.w	r3, [sl]
 800d47a:	89a3      	ldrh	r3, [r4, #12]
 800d47c:	f04f 30ff 	mov.w	r0, #4294967295
 800d480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d484:	81a3      	strh	r3, [r4, #12]
 800d486:	e7e9      	b.n	800d45c <__ssputs_r+0x88>

0800d488 <_svfiprintf_r>:
 800d488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d48c:	4698      	mov	r8, r3
 800d48e:	898b      	ldrh	r3, [r1, #12]
 800d490:	4607      	mov	r7, r0
 800d492:	061b      	lsls	r3, r3, #24
 800d494:	460d      	mov	r5, r1
 800d496:	4614      	mov	r4, r2
 800d498:	b09d      	sub	sp, #116	; 0x74
 800d49a:	d50e      	bpl.n	800d4ba <_svfiprintf_r+0x32>
 800d49c:	690b      	ldr	r3, [r1, #16]
 800d49e:	b963      	cbnz	r3, 800d4ba <_svfiprintf_r+0x32>
 800d4a0:	2140      	movs	r1, #64	; 0x40
 800d4a2:	f7ff fe05 	bl	800d0b0 <_malloc_r>
 800d4a6:	6028      	str	r0, [r5, #0]
 800d4a8:	6128      	str	r0, [r5, #16]
 800d4aa:	b920      	cbnz	r0, 800d4b6 <_svfiprintf_r+0x2e>
 800d4ac:	230c      	movs	r3, #12
 800d4ae:	603b      	str	r3, [r7, #0]
 800d4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b4:	e0d0      	b.n	800d658 <_svfiprintf_r+0x1d0>
 800d4b6:	2340      	movs	r3, #64	; 0x40
 800d4b8:	616b      	str	r3, [r5, #20]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d4be:	2320      	movs	r3, #32
 800d4c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4c4:	2330      	movs	r3, #48	; 0x30
 800d4c6:	f04f 0901 	mov.w	r9, #1
 800d4ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4ce:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d670 <_svfiprintf_r+0x1e8>
 800d4d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4d6:	4623      	mov	r3, r4
 800d4d8:	469a      	mov	sl, r3
 800d4da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4de:	b10a      	cbz	r2, 800d4e4 <_svfiprintf_r+0x5c>
 800d4e0:	2a25      	cmp	r2, #37	; 0x25
 800d4e2:	d1f9      	bne.n	800d4d8 <_svfiprintf_r+0x50>
 800d4e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d4e8:	d00b      	beq.n	800d502 <_svfiprintf_r+0x7a>
 800d4ea:	465b      	mov	r3, fp
 800d4ec:	4622      	mov	r2, r4
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	f7ff ff6f 	bl	800d3d4 <__ssputs_r>
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	f000 80a9 	beq.w	800d64e <_svfiprintf_r+0x1c6>
 800d4fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4fe:	445a      	add	r2, fp
 800d500:	9209      	str	r2, [sp, #36]	; 0x24
 800d502:	f89a 3000 	ldrb.w	r3, [sl]
 800d506:	2b00      	cmp	r3, #0
 800d508:	f000 80a1 	beq.w	800d64e <_svfiprintf_r+0x1c6>
 800d50c:	2300      	movs	r3, #0
 800d50e:	f04f 32ff 	mov.w	r2, #4294967295
 800d512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d516:	f10a 0a01 	add.w	sl, sl, #1
 800d51a:	9304      	str	r3, [sp, #16]
 800d51c:	9307      	str	r3, [sp, #28]
 800d51e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d522:	931a      	str	r3, [sp, #104]	; 0x68
 800d524:	4654      	mov	r4, sl
 800d526:	2205      	movs	r2, #5
 800d528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d52c:	4850      	ldr	r0, [pc, #320]	; (800d670 <_svfiprintf_r+0x1e8>)
 800d52e:	f000 fa57 	bl	800d9e0 <memchr>
 800d532:	9a04      	ldr	r2, [sp, #16]
 800d534:	b9d8      	cbnz	r0, 800d56e <_svfiprintf_r+0xe6>
 800d536:	06d0      	lsls	r0, r2, #27
 800d538:	bf44      	itt	mi
 800d53a:	2320      	movmi	r3, #32
 800d53c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d540:	0711      	lsls	r1, r2, #28
 800d542:	bf44      	itt	mi
 800d544:	232b      	movmi	r3, #43	; 0x2b
 800d546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d54a:	f89a 3000 	ldrb.w	r3, [sl]
 800d54e:	2b2a      	cmp	r3, #42	; 0x2a
 800d550:	d015      	beq.n	800d57e <_svfiprintf_r+0xf6>
 800d552:	4654      	mov	r4, sl
 800d554:	2000      	movs	r0, #0
 800d556:	f04f 0c0a 	mov.w	ip, #10
 800d55a:	9a07      	ldr	r2, [sp, #28]
 800d55c:	4621      	mov	r1, r4
 800d55e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d562:	3b30      	subs	r3, #48	; 0x30
 800d564:	2b09      	cmp	r3, #9
 800d566:	d94d      	bls.n	800d604 <_svfiprintf_r+0x17c>
 800d568:	b1b0      	cbz	r0, 800d598 <_svfiprintf_r+0x110>
 800d56a:	9207      	str	r2, [sp, #28]
 800d56c:	e014      	b.n	800d598 <_svfiprintf_r+0x110>
 800d56e:	eba0 0308 	sub.w	r3, r0, r8
 800d572:	fa09 f303 	lsl.w	r3, r9, r3
 800d576:	4313      	orrs	r3, r2
 800d578:	46a2      	mov	sl, r4
 800d57a:	9304      	str	r3, [sp, #16]
 800d57c:	e7d2      	b.n	800d524 <_svfiprintf_r+0x9c>
 800d57e:	9b03      	ldr	r3, [sp, #12]
 800d580:	1d19      	adds	r1, r3, #4
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	9103      	str	r1, [sp, #12]
 800d586:	2b00      	cmp	r3, #0
 800d588:	bfbb      	ittet	lt
 800d58a:	425b      	neglt	r3, r3
 800d58c:	f042 0202 	orrlt.w	r2, r2, #2
 800d590:	9307      	strge	r3, [sp, #28]
 800d592:	9307      	strlt	r3, [sp, #28]
 800d594:	bfb8      	it	lt
 800d596:	9204      	strlt	r2, [sp, #16]
 800d598:	7823      	ldrb	r3, [r4, #0]
 800d59a:	2b2e      	cmp	r3, #46	; 0x2e
 800d59c:	d10c      	bne.n	800d5b8 <_svfiprintf_r+0x130>
 800d59e:	7863      	ldrb	r3, [r4, #1]
 800d5a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5a2:	d134      	bne.n	800d60e <_svfiprintf_r+0x186>
 800d5a4:	9b03      	ldr	r3, [sp, #12]
 800d5a6:	3402      	adds	r4, #2
 800d5a8:	1d1a      	adds	r2, r3, #4
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	9203      	str	r2, [sp, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	bfb8      	it	lt
 800d5b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5b6:	9305      	str	r3, [sp, #20]
 800d5b8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d674 <_svfiprintf_r+0x1ec>
 800d5bc:	2203      	movs	r2, #3
 800d5be:	4650      	mov	r0, sl
 800d5c0:	7821      	ldrb	r1, [r4, #0]
 800d5c2:	f000 fa0d 	bl	800d9e0 <memchr>
 800d5c6:	b138      	cbz	r0, 800d5d8 <_svfiprintf_r+0x150>
 800d5c8:	2240      	movs	r2, #64	; 0x40
 800d5ca:	9b04      	ldr	r3, [sp, #16]
 800d5cc:	eba0 000a 	sub.w	r0, r0, sl
 800d5d0:	4082      	lsls	r2, r0
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	3401      	adds	r4, #1
 800d5d6:	9304      	str	r3, [sp, #16]
 800d5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5dc:	2206      	movs	r2, #6
 800d5de:	4826      	ldr	r0, [pc, #152]	; (800d678 <_svfiprintf_r+0x1f0>)
 800d5e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5e4:	f000 f9fc 	bl	800d9e0 <memchr>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d038      	beq.n	800d65e <_svfiprintf_r+0x1d6>
 800d5ec:	4b23      	ldr	r3, [pc, #140]	; (800d67c <_svfiprintf_r+0x1f4>)
 800d5ee:	bb1b      	cbnz	r3, 800d638 <_svfiprintf_r+0x1b0>
 800d5f0:	9b03      	ldr	r3, [sp, #12]
 800d5f2:	3307      	adds	r3, #7
 800d5f4:	f023 0307 	bic.w	r3, r3, #7
 800d5f8:	3308      	adds	r3, #8
 800d5fa:	9303      	str	r3, [sp, #12]
 800d5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5fe:	4433      	add	r3, r6
 800d600:	9309      	str	r3, [sp, #36]	; 0x24
 800d602:	e768      	b.n	800d4d6 <_svfiprintf_r+0x4e>
 800d604:	460c      	mov	r4, r1
 800d606:	2001      	movs	r0, #1
 800d608:	fb0c 3202 	mla	r2, ip, r2, r3
 800d60c:	e7a6      	b.n	800d55c <_svfiprintf_r+0xd4>
 800d60e:	2300      	movs	r3, #0
 800d610:	f04f 0c0a 	mov.w	ip, #10
 800d614:	4619      	mov	r1, r3
 800d616:	3401      	adds	r4, #1
 800d618:	9305      	str	r3, [sp, #20]
 800d61a:	4620      	mov	r0, r4
 800d61c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d620:	3a30      	subs	r2, #48	; 0x30
 800d622:	2a09      	cmp	r2, #9
 800d624:	d903      	bls.n	800d62e <_svfiprintf_r+0x1a6>
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0c6      	beq.n	800d5b8 <_svfiprintf_r+0x130>
 800d62a:	9105      	str	r1, [sp, #20]
 800d62c:	e7c4      	b.n	800d5b8 <_svfiprintf_r+0x130>
 800d62e:	4604      	mov	r4, r0
 800d630:	2301      	movs	r3, #1
 800d632:	fb0c 2101 	mla	r1, ip, r1, r2
 800d636:	e7f0      	b.n	800d61a <_svfiprintf_r+0x192>
 800d638:	ab03      	add	r3, sp, #12
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	462a      	mov	r2, r5
 800d63e:	4638      	mov	r0, r7
 800d640:	4b0f      	ldr	r3, [pc, #60]	; (800d680 <_svfiprintf_r+0x1f8>)
 800d642:	a904      	add	r1, sp, #16
 800d644:	f3af 8000 	nop.w
 800d648:	1c42      	adds	r2, r0, #1
 800d64a:	4606      	mov	r6, r0
 800d64c:	d1d6      	bne.n	800d5fc <_svfiprintf_r+0x174>
 800d64e:	89ab      	ldrh	r3, [r5, #12]
 800d650:	065b      	lsls	r3, r3, #25
 800d652:	f53f af2d 	bmi.w	800d4b0 <_svfiprintf_r+0x28>
 800d656:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d658:	b01d      	add	sp, #116	; 0x74
 800d65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65e:	ab03      	add	r3, sp, #12
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	462a      	mov	r2, r5
 800d664:	4638      	mov	r0, r7
 800d666:	4b06      	ldr	r3, [pc, #24]	; (800d680 <_svfiprintf_r+0x1f8>)
 800d668:	a904      	add	r1, sp, #16
 800d66a:	f000 f87d 	bl	800d768 <_printf_i>
 800d66e:	e7eb      	b.n	800d648 <_svfiprintf_r+0x1c0>
 800d670:	0800e997 	.word	0x0800e997
 800d674:	0800e99d 	.word	0x0800e99d
 800d678:	0800e9a1 	.word	0x0800e9a1
 800d67c:	00000000 	.word	0x00000000
 800d680:	0800d3d5 	.word	0x0800d3d5

0800d684 <_printf_common>:
 800d684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d688:	4616      	mov	r6, r2
 800d68a:	4699      	mov	r9, r3
 800d68c:	688a      	ldr	r2, [r1, #8]
 800d68e:	690b      	ldr	r3, [r1, #16]
 800d690:	4607      	mov	r7, r0
 800d692:	4293      	cmp	r3, r2
 800d694:	bfb8      	it	lt
 800d696:	4613      	movlt	r3, r2
 800d698:	6033      	str	r3, [r6, #0]
 800d69a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d69e:	460c      	mov	r4, r1
 800d6a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6a4:	b10a      	cbz	r2, 800d6aa <_printf_common+0x26>
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	6033      	str	r3, [r6, #0]
 800d6aa:	6823      	ldr	r3, [r4, #0]
 800d6ac:	0699      	lsls	r1, r3, #26
 800d6ae:	bf42      	ittt	mi
 800d6b0:	6833      	ldrmi	r3, [r6, #0]
 800d6b2:	3302      	addmi	r3, #2
 800d6b4:	6033      	strmi	r3, [r6, #0]
 800d6b6:	6825      	ldr	r5, [r4, #0]
 800d6b8:	f015 0506 	ands.w	r5, r5, #6
 800d6bc:	d106      	bne.n	800d6cc <_printf_common+0x48>
 800d6be:	f104 0a19 	add.w	sl, r4, #25
 800d6c2:	68e3      	ldr	r3, [r4, #12]
 800d6c4:	6832      	ldr	r2, [r6, #0]
 800d6c6:	1a9b      	subs	r3, r3, r2
 800d6c8:	42ab      	cmp	r3, r5
 800d6ca:	dc2b      	bgt.n	800d724 <_printf_common+0xa0>
 800d6cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6d0:	1e13      	subs	r3, r2, #0
 800d6d2:	6822      	ldr	r2, [r4, #0]
 800d6d4:	bf18      	it	ne
 800d6d6:	2301      	movne	r3, #1
 800d6d8:	0692      	lsls	r2, r2, #26
 800d6da:	d430      	bmi.n	800d73e <_printf_common+0xba>
 800d6dc:	4649      	mov	r1, r9
 800d6de:	4638      	mov	r0, r7
 800d6e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6e4:	47c0      	blx	r8
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	d023      	beq.n	800d732 <_printf_common+0xae>
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	6922      	ldr	r2, [r4, #16]
 800d6ee:	f003 0306 	and.w	r3, r3, #6
 800d6f2:	2b04      	cmp	r3, #4
 800d6f4:	bf14      	ite	ne
 800d6f6:	2500      	movne	r5, #0
 800d6f8:	6833      	ldreq	r3, [r6, #0]
 800d6fa:	f04f 0600 	mov.w	r6, #0
 800d6fe:	bf08      	it	eq
 800d700:	68e5      	ldreq	r5, [r4, #12]
 800d702:	f104 041a 	add.w	r4, r4, #26
 800d706:	bf08      	it	eq
 800d708:	1aed      	subeq	r5, r5, r3
 800d70a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d70e:	bf08      	it	eq
 800d710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d714:	4293      	cmp	r3, r2
 800d716:	bfc4      	itt	gt
 800d718:	1a9b      	subgt	r3, r3, r2
 800d71a:	18ed      	addgt	r5, r5, r3
 800d71c:	42b5      	cmp	r5, r6
 800d71e:	d11a      	bne.n	800d756 <_printf_common+0xd2>
 800d720:	2000      	movs	r0, #0
 800d722:	e008      	b.n	800d736 <_printf_common+0xb2>
 800d724:	2301      	movs	r3, #1
 800d726:	4652      	mov	r2, sl
 800d728:	4649      	mov	r1, r9
 800d72a:	4638      	mov	r0, r7
 800d72c:	47c0      	blx	r8
 800d72e:	3001      	adds	r0, #1
 800d730:	d103      	bne.n	800d73a <_printf_common+0xb6>
 800d732:	f04f 30ff 	mov.w	r0, #4294967295
 800d736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d73a:	3501      	adds	r5, #1
 800d73c:	e7c1      	b.n	800d6c2 <_printf_common+0x3e>
 800d73e:	2030      	movs	r0, #48	; 0x30
 800d740:	18e1      	adds	r1, r4, r3
 800d742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d746:	1c5a      	adds	r2, r3, #1
 800d748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d74c:	4422      	add	r2, r4
 800d74e:	3302      	adds	r3, #2
 800d750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d754:	e7c2      	b.n	800d6dc <_printf_common+0x58>
 800d756:	2301      	movs	r3, #1
 800d758:	4622      	mov	r2, r4
 800d75a:	4649      	mov	r1, r9
 800d75c:	4638      	mov	r0, r7
 800d75e:	47c0      	blx	r8
 800d760:	3001      	adds	r0, #1
 800d762:	d0e6      	beq.n	800d732 <_printf_common+0xae>
 800d764:	3601      	adds	r6, #1
 800d766:	e7d9      	b.n	800d71c <_printf_common+0x98>

0800d768 <_printf_i>:
 800d768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d76c:	7e0f      	ldrb	r7, [r1, #24]
 800d76e:	4691      	mov	r9, r2
 800d770:	2f78      	cmp	r7, #120	; 0x78
 800d772:	4680      	mov	r8, r0
 800d774:	460c      	mov	r4, r1
 800d776:	469a      	mov	sl, r3
 800d778:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d77a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d77e:	d807      	bhi.n	800d790 <_printf_i+0x28>
 800d780:	2f62      	cmp	r7, #98	; 0x62
 800d782:	d80a      	bhi.n	800d79a <_printf_i+0x32>
 800d784:	2f00      	cmp	r7, #0
 800d786:	f000 80d5 	beq.w	800d934 <_printf_i+0x1cc>
 800d78a:	2f58      	cmp	r7, #88	; 0x58
 800d78c:	f000 80c1 	beq.w	800d912 <_printf_i+0x1aa>
 800d790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d798:	e03a      	b.n	800d810 <_printf_i+0xa8>
 800d79a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d79e:	2b15      	cmp	r3, #21
 800d7a0:	d8f6      	bhi.n	800d790 <_printf_i+0x28>
 800d7a2:	a101      	add	r1, pc, #4	; (adr r1, 800d7a8 <_printf_i+0x40>)
 800d7a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7a8:	0800d801 	.word	0x0800d801
 800d7ac:	0800d815 	.word	0x0800d815
 800d7b0:	0800d791 	.word	0x0800d791
 800d7b4:	0800d791 	.word	0x0800d791
 800d7b8:	0800d791 	.word	0x0800d791
 800d7bc:	0800d791 	.word	0x0800d791
 800d7c0:	0800d815 	.word	0x0800d815
 800d7c4:	0800d791 	.word	0x0800d791
 800d7c8:	0800d791 	.word	0x0800d791
 800d7cc:	0800d791 	.word	0x0800d791
 800d7d0:	0800d791 	.word	0x0800d791
 800d7d4:	0800d91b 	.word	0x0800d91b
 800d7d8:	0800d841 	.word	0x0800d841
 800d7dc:	0800d8d5 	.word	0x0800d8d5
 800d7e0:	0800d791 	.word	0x0800d791
 800d7e4:	0800d791 	.word	0x0800d791
 800d7e8:	0800d93d 	.word	0x0800d93d
 800d7ec:	0800d791 	.word	0x0800d791
 800d7f0:	0800d841 	.word	0x0800d841
 800d7f4:	0800d791 	.word	0x0800d791
 800d7f8:	0800d791 	.word	0x0800d791
 800d7fc:	0800d8dd 	.word	0x0800d8dd
 800d800:	682b      	ldr	r3, [r5, #0]
 800d802:	1d1a      	adds	r2, r3, #4
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	602a      	str	r2, [r5, #0]
 800d808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d80c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d810:	2301      	movs	r3, #1
 800d812:	e0a0      	b.n	800d956 <_printf_i+0x1ee>
 800d814:	6820      	ldr	r0, [r4, #0]
 800d816:	682b      	ldr	r3, [r5, #0]
 800d818:	0607      	lsls	r7, r0, #24
 800d81a:	f103 0104 	add.w	r1, r3, #4
 800d81e:	6029      	str	r1, [r5, #0]
 800d820:	d501      	bpl.n	800d826 <_printf_i+0xbe>
 800d822:	681e      	ldr	r6, [r3, #0]
 800d824:	e003      	b.n	800d82e <_printf_i+0xc6>
 800d826:	0646      	lsls	r6, r0, #25
 800d828:	d5fb      	bpl.n	800d822 <_printf_i+0xba>
 800d82a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d82e:	2e00      	cmp	r6, #0
 800d830:	da03      	bge.n	800d83a <_printf_i+0xd2>
 800d832:	232d      	movs	r3, #45	; 0x2d
 800d834:	4276      	negs	r6, r6
 800d836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d83a:	230a      	movs	r3, #10
 800d83c:	4859      	ldr	r0, [pc, #356]	; (800d9a4 <_printf_i+0x23c>)
 800d83e:	e012      	b.n	800d866 <_printf_i+0xfe>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	6820      	ldr	r0, [r4, #0]
 800d844:	1d19      	adds	r1, r3, #4
 800d846:	6029      	str	r1, [r5, #0]
 800d848:	0605      	lsls	r5, r0, #24
 800d84a:	d501      	bpl.n	800d850 <_printf_i+0xe8>
 800d84c:	681e      	ldr	r6, [r3, #0]
 800d84e:	e002      	b.n	800d856 <_printf_i+0xee>
 800d850:	0641      	lsls	r1, r0, #25
 800d852:	d5fb      	bpl.n	800d84c <_printf_i+0xe4>
 800d854:	881e      	ldrh	r6, [r3, #0]
 800d856:	2f6f      	cmp	r7, #111	; 0x6f
 800d858:	bf0c      	ite	eq
 800d85a:	2308      	moveq	r3, #8
 800d85c:	230a      	movne	r3, #10
 800d85e:	4851      	ldr	r0, [pc, #324]	; (800d9a4 <_printf_i+0x23c>)
 800d860:	2100      	movs	r1, #0
 800d862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d866:	6865      	ldr	r5, [r4, #4]
 800d868:	2d00      	cmp	r5, #0
 800d86a:	bfa8      	it	ge
 800d86c:	6821      	ldrge	r1, [r4, #0]
 800d86e:	60a5      	str	r5, [r4, #8]
 800d870:	bfa4      	itt	ge
 800d872:	f021 0104 	bicge.w	r1, r1, #4
 800d876:	6021      	strge	r1, [r4, #0]
 800d878:	b90e      	cbnz	r6, 800d87e <_printf_i+0x116>
 800d87a:	2d00      	cmp	r5, #0
 800d87c:	d04b      	beq.n	800d916 <_printf_i+0x1ae>
 800d87e:	4615      	mov	r5, r2
 800d880:	fbb6 f1f3 	udiv	r1, r6, r3
 800d884:	fb03 6711 	mls	r7, r3, r1, r6
 800d888:	5dc7      	ldrb	r7, [r0, r7]
 800d88a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d88e:	4637      	mov	r7, r6
 800d890:	42bb      	cmp	r3, r7
 800d892:	460e      	mov	r6, r1
 800d894:	d9f4      	bls.n	800d880 <_printf_i+0x118>
 800d896:	2b08      	cmp	r3, #8
 800d898:	d10b      	bne.n	800d8b2 <_printf_i+0x14a>
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	07de      	lsls	r6, r3, #31
 800d89e:	d508      	bpl.n	800d8b2 <_printf_i+0x14a>
 800d8a0:	6923      	ldr	r3, [r4, #16]
 800d8a2:	6861      	ldr	r1, [r4, #4]
 800d8a4:	4299      	cmp	r1, r3
 800d8a6:	bfde      	ittt	le
 800d8a8:	2330      	movle	r3, #48	; 0x30
 800d8aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8b2:	1b52      	subs	r2, r2, r5
 800d8b4:	6122      	str	r2, [r4, #16]
 800d8b6:	464b      	mov	r3, r9
 800d8b8:	4621      	mov	r1, r4
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	f8cd a000 	str.w	sl, [sp]
 800d8c0:	aa03      	add	r2, sp, #12
 800d8c2:	f7ff fedf 	bl	800d684 <_printf_common>
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	d14a      	bne.n	800d960 <_printf_i+0x1f8>
 800d8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ce:	b004      	add	sp, #16
 800d8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	f043 0320 	orr.w	r3, r3, #32
 800d8da:	6023      	str	r3, [r4, #0]
 800d8dc:	2778      	movs	r7, #120	; 0x78
 800d8de:	4832      	ldr	r0, [pc, #200]	; (800d9a8 <_printf_i+0x240>)
 800d8e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	6829      	ldr	r1, [r5, #0]
 800d8e8:	061f      	lsls	r7, r3, #24
 800d8ea:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8ee:	d402      	bmi.n	800d8f6 <_printf_i+0x18e>
 800d8f0:	065f      	lsls	r7, r3, #25
 800d8f2:	bf48      	it	mi
 800d8f4:	b2b6      	uxthmi	r6, r6
 800d8f6:	07df      	lsls	r7, r3, #31
 800d8f8:	bf48      	it	mi
 800d8fa:	f043 0320 	orrmi.w	r3, r3, #32
 800d8fe:	6029      	str	r1, [r5, #0]
 800d900:	bf48      	it	mi
 800d902:	6023      	strmi	r3, [r4, #0]
 800d904:	b91e      	cbnz	r6, 800d90e <_printf_i+0x1a6>
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	f023 0320 	bic.w	r3, r3, #32
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	2310      	movs	r3, #16
 800d910:	e7a6      	b.n	800d860 <_printf_i+0xf8>
 800d912:	4824      	ldr	r0, [pc, #144]	; (800d9a4 <_printf_i+0x23c>)
 800d914:	e7e4      	b.n	800d8e0 <_printf_i+0x178>
 800d916:	4615      	mov	r5, r2
 800d918:	e7bd      	b.n	800d896 <_printf_i+0x12e>
 800d91a:	682b      	ldr	r3, [r5, #0]
 800d91c:	6826      	ldr	r6, [r4, #0]
 800d91e:	1d18      	adds	r0, r3, #4
 800d920:	6961      	ldr	r1, [r4, #20]
 800d922:	6028      	str	r0, [r5, #0]
 800d924:	0635      	lsls	r5, r6, #24
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	d501      	bpl.n	800d92e <_printf_i+0x1c6>
 800d92a:	6019      	str	r1, [r3, #0]
 800d92c:	e002      	b.n	800d934 <_printf_i+0x1cc>
 800d92e:	0670      	lsls	r0, r6, #25
 800d930:	d5fb      	bpl.n	800d92a <_printf_i+0x1c2>
 800d932:	8019      	strh	r1, [r3, #0]
 800d934:	2300      	movs	r3, #0
 800d936:	4615      	mov	r5, r2
 800d938:	6123      	str	r3, [r4, #16]
 800d93a:	e7bc      	b.n	800d8b6 <_printf_i+0x14e>
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	2100      	movs	r1, #0
 800d940:	1d1a      	adds	r2, r3, #4
 800d942:	602a      	str	r2, [r5, #0]
 800d944:	681d      	ldr	r5, [r3, #0]
 800d946:	6862      	ldr	r2, [r4, #4]
 800d948:	4628      	mov	r0, r5
 800d94a:	f000 f849 	bl	800d9e0 <memchr>
 800d94e:	b108      	cbz	r0, 800d954 <_printf_i+0x1ec>
 800d950:	1b40      	subs	r0, r0, r5
 800d952:	6060      	str	r0, [r4, #4]
 800d954:	6863      	ldr	r3, [r4, #4]
 800d956:	6123      	str	r3, [r4, #16]
 800d958:	2300      	movs	r3, #0
 800d95a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d95e:	e7aa      	b.n	800d8b6 <_printf_i+0x14e>
 800d960:	462a      	mov	r2, r5
 800d962:	4649      	mov	r1, r9
 800d964:	4640      	mov	r0, r8
 800d966:	6923      	ldr	r3, [r4, #16]
 800d968:	47d0      	blx	sl
 800d96a:	3001      	adds	r0, #1
 800d96c:	d0ad      	beq.n	800d8ca <_printf_i+0x162>
 800d96e:	6823      	ldr	r3, [r4, #0]
 800d970:	079b      	lsls	r3, r3, #30
 800d972:	d413      	bmi.n	800d99c <_printf_i+0x234>
 800d974:	68e0      	ldr	r0, [r4, #12]
 800d976:	9b03      	ldr	r3, [sp, #12]
 800d978:	4298      	cmp	r0, r3
 800d97a:	bfb8      	it	lt
 800d97c:	4618      	movlt	r0, r3
 800d97e:	e7a6      	b.n	800d8ce <_printf_i+0x166>
 800d980:	2301      	movs	r3, #1
 800d982:	4632      	mov	r2, r6
 800d984:	4649      	mov	r1, r9
 800d986:	4640      	mov	r0, r8
 800d988:	47d0      	blx	sl
 800d98a:	3001      	adds	r0, #1
 800d98c:	d09d      	beq.n	800d8ca <_printf_i+0x162>
 800d98e:	3501      	adds	r5, #1
 800d990:	68e3      	ldr	r3, [r4, #12]
 800d992:	9903      	ldr	r1, [sp, #12]
 800d994:	1a5b      	subs	r3, r3, r1
 800d996:	42ab      	cmp	r3, r5
 800d998:	dcf2      	bgt.n	800d980 <_printf_i+0x218>
 800d99a:	e7eb      	b.n	800d974 <_printf_i+0x20c>
 800d99c:	2500      	movs	r5, #0
 800d99e:	f104 0619 	add.w	r6, r4, #25
 800d9a2:	e7f5      	b.n	800d990 <_printf_i+0x228>
 800d9a4:	0800e9a8 	.word	0x0800e9a8
 800d9a8:	0800e9b9 	.word	0x0800e9b9

0800d9ac <memmove>:
 800d9ac:	4288      	cmp	r0, r1
 800d9ae:	b510      	push	{r4, lr}
 800d9b0:	eb01 0402 	add.w	r4, r1, r2
 800d9b4:	d902      	bls.n	800d9bc <memmove+0x10>
 800d9b6:	4284      	cmp	r4, r0
 800d9b8:	4623      	mov	r3, r4
 800d9ba:	d807      	bhi.n	800d9cc <memmove+0x20>
 800d9bc:	1e43      	subs	r3, r0, #1
 800d9be:	42a1      	cmp	r1, r4
 800d9c0:	d008      	beq.n	800d9d4 <memmove+0x28>
 800d9c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9ca:	e7f8      	b.n	800d9be <memmove+0x12>
 800d9cc:	4601      	mov	r1, r0
 800d9ce:	4402      	add	r2, r0
 800d9d0:	428a      	cmp	r2, r1
 800d9d2:	d100      	bne.n	800d9d6 <memmove+0x2a>
 800d9d4:	bd10      	pop	{r4, pc}
 800d9d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9de:	e7f7      	b.n	800d9d0 <memmove+0x24>

0800d9e0 <memchr>:
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	b510      	push	{r4, lr}
 800d9e4:	b2c9      	uxtb	r1, r1
 800d9e6:	4402      	add	r2, r0
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	d101      	bne.n	800d9f2 <memchr+0x12>
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	e003      	b.n	800d9fa <memchr+0x1a>
 800d9f2:	7804      	ldrb	r4, [r0, #0]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	428c      	cmp	r4, r1
 800d9f8:	d1f6      	bne.n	800d9e8 <memchr+0x8>
 800d9fa:	bd10      	pop	{r4, pc}

0800d9fc <memcpy>:
 800d9fc:	440a      	add	r2, r1
 800d9fe:	4291      	cmp	r1, r2
 800da00:	f100 33ff 	add.w	r3, r0, #4294967295
 800da04:	d100      	bne.n	800da08 <memcpy+0xc>
 800da06:	4770      	bx	lr
 800da08:	b510      	push	{r4, lr}
 800da0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da0e:	4291      	cmp	r1, r2
 800da10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da14:	d1f9      	bne.n	800da0a <memcpy+0xe>
 800da16:	bd10      	pop	{r4, pc}

0800da18 <_realloc_r>:
 800da18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da1c:	4680      	mov	r8, r0
 800da1e:	4614      	mov	r4, r2
 800da20:	460e      	mov	r6, r1
 800da22:	b921      	cbnz	r1, 800da2e <_realloc_r+0x16>
 800da24:	4611      	mov	r1, r2
 800da26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da2a:	f7ff bb41 	b.w	800d0b0 <_malloc_r>
 800da2e:	b92a      	cbnz	r2, 800da3c <_realloc_r+0x24>
 800da30:	f7ff fc88 	bl	800d344 <_free_r>
 800da34:	4625      	mov	r5, r4
 800da36:	4628      	mov	r0, r5
 800da38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da3c:	f000 f81b 	bl	800da76 <_malloc_usable_size_r>
 800da40:	4284      	cmp	r4, r0
 800da42:	4607      	mov	r7, r0
 800da44:	d802      	bhi.n	800da4c <_realloc_r+0x34>
 800da46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da4a:	d812      	bhi.n	800da72 <_realloc_r+0x5a>
 800da4c:	4621      	mov	r1, r4
 800da4e:	4640      	mov	r0, r8
 800da50:	f7ff fb2e 	bl	800d0b0 <_malloc_r>
 800da54:	4605      	mov	r5, r0
 800da56:	2800      	cmp	r0, #0
 800da58:	d0ed      	beq.n	800da36 <_realloc_r+0x1e>
 800da5a:	42bc      	cmp	r4, r7
 800da5c:	4622      	mov	r2, r4
 800da5e:	4631      	mov	r1, r6
 800da60:	bf28      	it	cs
 800da62:	463a      	movcs	r2, r7
 800da64:	f7ff ffca 	bl	800d9fc <memcpy>
 800da68:	4631      	mov	r1, r6
 800da6a:	4640      	mov	r0, r8
 800da6c:	f7ff fc6a 	bl	800d344 <_free_r>
 800da70:	e7e1      	b.n	800da36 <_realloc_r+0x1e>
 800da72:	4635      	mov	r5, r6
 800da74:	e7df      	b.n	800da36 <_realloc_r+0x1e>

0800da76 <_malloc_usable_size_r>:
 800da76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da7a:	1f18      	subs	r0, r3, #4
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	bfbc      	itt	lt
 800da80:	580b      	ldrlt	r3, [r1, r0]
 800da82:	18c0      	addlt	r0, r0, r3
 800da84:	4770      	bx	lr
	...

0800da88 <_init>:
 800da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8a:	bf00      	nop
 800da8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da8e:	bc08      	pop	{r3}
 800da90:	469e      	mov	lr, r3
 800da92:	4770      	bx	lr

0800da94 <_fini>:
 800da94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da96:	bf00      	nop
 800da98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da9a:	bc08      	pop	{r3}
 800da9c:	469e      	mov	lr, r3
 800da9e:	4770      	bx	lr
