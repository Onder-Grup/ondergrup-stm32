
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c798  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  0800c97c  0800c97c  0001c97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8ec  0800d8ec  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  0800d8ec  0800d8ec  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d8ec  0800d8ec  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8ec  0800d8ec  0001d8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8f0  0800d8f0  0001d8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800d8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000104  0800d9f8  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800d9f8  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001255a  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b5  00000000  00000000  000326ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00034d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e00  00000000  00000000  00035f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a1fd  00000000  00000000  00036d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f49  00000000  00000000  00050f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ec81  00000000  00000000  00068e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005154  00000000  00000000  00107af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010cc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000104 	.word	0x20000104
 8000200:	00000000 	.word	0x00000000
 8000204:	0800c964 	.word	0x0800c964

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000108 	.word	0x20000108
 8000220:	0800c964 	.word	0x0800c964

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include <Essentials.h>
#include "ESP8266.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00b ff36 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00b f94e 	bl	800b4f8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f008 f87e 	bl	8008360 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00b ff24 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00b f93c 	bl	800b4f8 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f008 f86c 	bl	8008360 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00b ff12 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00b f92a 	bl	800b4f8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f008 f85a 	bl	8008360 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00b ff00 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00b f918 	bl	800b4f8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f008 f848 	bl	8008360 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00b ff45 	bl	800c178 <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00b ff32 	bl	800c178 <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00b febc 	bl	800c0b4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00b f8d4 	bl	800b4f8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f008 f804 	bl	8008360 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800c97c 	.word	0x0800c97c
 8000364:	20000120 	.word	0x20000120
 8000368:	0800c98c 	.word	0x0800c98c
 800036c:	0800c998 	.word	0x0800c998
 8000370:	0800c9a0 	.word	0x0800c9a0
 8000374:	0800c9b0 	.word	0x0800c9b0
 8000378:	0800c9bc 	.word	0x0800c9bc
 800037c:	0800c9c0 	.word	0x0800c9c0
 8000380:	0800c9c4 	.word	0x0800c9c4

08000384 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af02      	add	r7, sp, #8
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	f023 030f 	bic.w	r3, r3, #15
 8000394:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	011b      	lsls	r3, r3, #4
 800039a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800039c:	7b7b      	ldrb	r3, [r7, #13]
 800039e:	f043 030c 	orr.w	r3, r3, #12
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80003a6:	7b7b      	ldrb	r3, [r7, #13]
 80003a8:	f043 0308 	orr.w	r3, r3, #8
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80003b0:	7b3b      	ldrb	r3, [r7, #12]
 80003b2:	f043 030c 	orr.w	r3, r3, #12
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80003ba:	7b3b      	ldrb	r3, [r7, #12]
 80003bc:	f043 0308 	orr.w	r3, r3, #8
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80003c4:	bf00      	nop
 80003c6:	4825      	ldr	r0, [pc, #148]	; (800045c <lcd_send_cmd+0xd8>)
 80003c8:	f009 fbc3 	bl	8009b52 <HAL_I2C_GetError>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b04      	cmp	r3, #4
 80003d0:	d0f9      	beq.n	80003c6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80003d2:	bf00      	nop
 80003d4:	4821      	ldr	r0, [pc, #132]	; (800045c <lcd_send_cmd+0xd8>)
 80003d6:	f009 fbaf 	bl	8009b38 <HAL_I2C_GetState>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b20      	cmp	r3, #32
 80003de:	d1f9      	bne.n	80003d4 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80003e0:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <lcd_send_cmd+0xdc>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d116      	bne.n	8000416 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80003e8:	2300      	movs	r3, #0
 80003ea:	73fb      	strb	r3, [r7, #15]
 80003ec:	e00f      	b.n	800040e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	3310      	adds	r3, #16
 80003f2:	443b      	add	r3, r7
 80003f4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	f022 0208 	bic.w	r2, r2, #8
 80003fe:	b2d2      	uxtb	r2, r2
 8000400:	3310      	adds	r3, #16
 8000402:	443b      	add	r3, r7
 8000404:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000408:	7bfb      	ldrb	r3, [r7, #15]
 800040a:	3301      	adds	r3, #1
 800040c:	73fb      	strb	r3, [r7, #15]
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	2b03      	cmp	r3, #3
 8000412:	d9ec      	bls.n	80003ee <lcd_send_cmd+0x6a>
 8000414:	e015      	b.n	8000442 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000416:	2300      	movs	r3, #0
 8000418:	73bb      	strb	r3, [r7, #14]
 800041a:	e00f      	b.n	800043c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800041c:	7bbb      	ldrb	r3, [r7, #14]
 800041e:	3310      	adds	r3, #16
 8000420:	443b      	add	r3, r7
 8000422:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000426:	7bbb      	ldrb	r3, [r7, #14]
 8000428:	f042 0208 	orr.w	r2, r2, #8
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	3310      	adds	r3, #16
 8000430:	443b      	add	r3, r7
 8000432:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000436:	7bbb      	ldrb	r3, [r7, #14]
 8000438:	3301      	adds	r3, #1
 800043a:	73bb      	strb	r3, [r7, #14]
 800043c:	7bbb      	ldrb	r3, [r7, #14]
 800043e:	2b03      	cmp	r3, #3
 8000440:	d9ec      	bls.n	800041c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000442:	f107 0208 	add.w	r2, r7, #8
 8000446:	2364      	movs	r3, #100	; 0x64
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2304      	movs	r3, #4
 800044c:	214e      	movs	r1, #78	; 0x4e
 800044e:	4803      	ldr	r0, [pc, #12]	; (800045c <lcd_send_cmd+0xd8>)
 8000450:	f008 ff12 	bl	8009278 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000244 	.word	0x20000244
 8000460:	2000021a 	.word	0x2000021a

08000464 <lcd_send_data>:

void lcd_send_data (char data) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af02      	add	r7, sp, #8
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f023 030f 	bic.w	r3, r3, #15
 8000474:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	011b      	lsls	r3, r3, #4
 800047a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800047c:	7b7b      	ldrb	r3, [r7, #13]
 800047e:	f043 030d 	orr.w	r3, r3, #13
 8000482:	b2db      	uxtb	r3, r3
 8000484:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000486:	7b7b      	ldrb	r3, [r7, #13]
 8000488:	f043 0309 	orr.w	r3, r3, #9
 800048c:	b2db      	uxtb	r3, r3
 800048e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000490:	7b3b      	ldrb	r3, [r7, #12]
 8000492:	f043 030d 	orr.w	r3, r3, #13
 8000496:	b2db      	uxtb	r3, r3
 8000498:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800049a:	7b3b      	ldrb	r3, [r7, #12]
 800049c:	f043 0309 	orr.w	r3, r3, #9
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004a4:	bf00      	nop
 80004a6:	4825      	ldr	r0, [pc, #148]	; (800053c <lcd_send_data+0xd8>)
 80004a8:	f009 fb53 	bl	8009b52 <HAL_I2C_GetError>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	d0f9      	beq.n	80004a6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004b2:	bf00      	nop
 80004b4:	4821      	ldr	r0, [pc, #132]	; (800053c <lcd_send_data+0xd8>)
 80004b6:	f009 fb3f 	bl	8009b38 <HAL_I2C_GetState>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b20      	cmp	r3, #32
 80004be:	d1f9      	bne.n	80004b4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004c0:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <lcd_send_data+0xdc>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d116      	bne.n	80004f6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004c8:	2300      	movs	r3, #0
 80004ca:	73fb      	strb	r3, [r7, #15]
 80004cc:	e00f      	b.n	80004ee <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	3310      	adds	r3, #16
 80004d2:	443b      	add	r3, r7
 80004d4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	f022 0208 	bic.w	r2, r2, #8
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	3310      	adds	r3, #16
 80004e2:	443b      	add	r3, r7
 80004e4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	3301      	adds	r3, #1
 80004ec:	73fb      	strb	r3, [r7, #15]
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d9ec      	bls.n	80004ce <lcd_send_data+0x6a>
 80004f4:	e015      	b.n	8000522 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80004f6:	2300      	movs	r3, #0
 80004f8:	73bb      	strb	r3, [r7, #14]
 80004fa:	e00f      	b.n	800051c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004fc:	7bbb      	ldrb	r3, [r7, #14]
 80004fe:	3310      	adds	r3, #16
 8000500:	443b      	add	r3, r7
 8000502:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000506:	7bbb      	ldrb	r3, [r7, #14]
 8000508:	f042 0208 	orr.w	r2, r2, #8
 800050c:	b2d2      	uxtb	r2, r2
 800050e:	3310      	adds	r3, #16
 8000510:	443b      	add	r3, r7
 8000512:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000516:	7bbb      	ldrb	r3, [r7, #14]
 8000518:	3301      	adds	r3, #1
 800051a:	73bb      	strb	r3, [r7, #14]
 800051c:	7bbb      	ldrb	r3, [r7, #14]
 800051e:	2b03      	cmp	r3, #3
 8000520:	d9ec      	bls.n	80004fc <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000522:	f107 0208 	add.w	r2, r7, #8
 8000526:	2364      	movs	r3, #100	; 0x64
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2304      	movs	r3, #4
 800052c:	214e      	movs	r1, #78	; 0x4e
 800052e:	4803      	ldr	r0, [pc, #12]	; (800053c <lcd_send_data+0xd8>)
 8000530:	f008 fea2 	bl	8009278 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000244 	.word	0x20000244
 8000540:	2000021a 	.word	0x2000021a

08000544 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800054c:	e006      	b.n	800055c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	1c5a      	adds	r2, r3, #1
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ff84 	bl	8000464 <lcd_send_data>
	while (*str) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1f4      	bne.n	800054e <lcd_send_string+0xa>
	}
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8000588:	7b7b      	ldrb	r3, [r7, #13]
 800058a:	f043 030d 	orr.w	r3, r3, #13
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000592:	7b7b      	ldrb	r3, [r7, #13]
 8000594:	f043 0309 	orr.w	r3, r3, #9
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800059c:	7b3b      	ldrb	r3, [r7, #12]
 800059e:	f043 030d 	orr.w	r3, r3, #13
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80005a6:	7b3b      	ldrb	r3, [r7, #12]
 80005a8:	f043 0309 	orr.w	r3, r3, #9
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005b0:	bf00      	nop
 80005b2:	4825      	ldr	r0, [pc, #148]	; (8000648 <lcd_send_char+0xd8>)
 80005b4:	f009 facd 	bl	8009b52 <HAL_I2C_GetError>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d0f9      	beq.n	80005b2 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005be:	bf00      	nop
 80005c0:	4821      	ldr	r0, [pc, #132]	; (8000648 <lcd_send_char+0xd8>)
 80005c2:	f009 fab9 	bl	8009b38 <HAL_I2C_GetState>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b20      	cmp	r3, #32
 80005ca:	d1f9      	bne.n	80005c0 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <lcd_send_char+0xdc>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d116      	bne.n	8000602 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	e00f      	b.n	80005fa <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	3310      	adds	r3, #16
 80005de:	443b      	add	r3, r7
 80005e0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	f022 0208 	bic.w	r2, r2, #8
 80005ea:	b2d2      	uxtb	r2, r2
 80005ec:	3310      	adds	r3, #16
 80005ee:	443b      	add	r3, r7
 80005f0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	3301      	adds	r3, #1
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	d9ec      	bls.n	80005da <lcd_send_char+0x6a>
 8000600:	e015      	b.n	800062e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000602:	2300      	movs	r3, #0
 8000604:	73bb      	strb	r3, [r7, #14]
 8000606:	e00f      	b.n	8000628 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	3310      	adds	r3, #16
 800060c:	443b      	add	r3, r7
 800060e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	f042 0208 	orr.w	r2, r2, #8
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	3310      	adds	r3, #16
 800061c:	443b      	add	r3, r7
 800061e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	3301      	adds	r3, #1
 8000626:	73bb      	strb	r3, [r7, #14]
 8000628:	7bbb      	ldrb	r3, [r7, #14]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d9ec      	bls.n	8000608 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800062e:	f107 0208 	add.w	r2, r7, #8
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2304      	movs	r3, #4
 8000638:	214e      	movs	r1, #78	; 0x4e
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <lcd_send_char+0xd8>)
 800063c:	f008 fe1c 	bl	8009278 <HAL_I2C_Master_Transmit>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000244 	.word	0x20000244
 800064c:	2000021a 	.word	0x2000021a

08000650 <lcd_init>:

void lcd_init (void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000654:	2002      	movs	r0, #2
 8000656:	f7ff fe95 	bl	8000384 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800065a:	2028      	movs	r0, #40	; 0x28
 800065c:	f7ff fe92 	bl	8000384 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000660:	200c      	movs	r0, #12
 8000662:	f7ff fe8f 	bl	8000384 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000666:	2080      	movs	r0, #128	; 0x80
 8000668:	f7ff fe8c 	bl	8000384 <lcd_send_cmd>
	lcd_backlight(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 f86d 	bl	800074c <lcd_backlight>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}

08000676 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	460a      	mov	r2, r1
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	4613      	mov	r3, r2
 8000684:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d106      	bne.n	800069a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	337f      	adds	r3, #127	; 0x7f
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fe76 	bl	8000384 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000698:	e008      	b.n	80006ac <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d105      	bne.n	80006ac <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	3b41      	subs	r3, #65	; 0x41
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff fe6c 	bl	8000384 <lcd_send_cmd>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	603a      	str	r2, [r7, #0]
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	460b      	mov	r3, r1
 80006c2:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80006c4:	79ba      	ldrb	r2, [r7, #6]
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffd3 	bl	8000676 <lcd_gotoxy>
	lcd_send_string(str);
 80006d0:	6838      	ldr	r0, [r7, #0]
 80006d2:	f7ff ff37 	bl	8000544 <lcd_send_string>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	460b      	mov	r3, r1
 80006ea:	71bb      	strb	r3, [r7, #6]
 80006ec:	4613      	mov	r3, r2
 80006ee:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80006f0:	79ba      	ldrb	r2, [r7, #6]
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	4611      	mov	r1, r2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ffbd 	bl	8000676 <lcd_gotoxy>
    lcd_send_char(ch);
 80006fc:	797b      	ldrb	r3, [r7, #5]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff36 	bl	8000570 <lcd_send_char>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <lcd_clear>:

void lcd_clear(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff fe37 	bl	8000384 <lcd_send_cmd>
    HAL_Delay(2);
 8000716:	2002      	movs	r0, #2
 8000718:	f007 fe22 	bl	8008360 <HAL_Delay>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000730:	79ba      	ldrb	r2, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9d 	bl	8000676 <lcd_gotoxy>

    lcd_send_char(' ');
 800073c:	2020      	movs	r0, #32
 800073e:	f7ff ff17 	bl	8000570 <lcd_send_char>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <lcd_backlight+0x20>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff fe11 	bl	8000384 <lcd_send_cmd>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000021a 	.word	0x2000021a

08000770 <lcd_cursor>:

void lcd_cursor(int state) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d106      	bne.n	800078c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800077e:	200e      	movs	r0, #14
 8000780:	f7ff fe00 	bl	8000384 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000784:	200f      	movs	r0, #15
 8000786:	f7ff fdfd 	bl	8000384 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800078a:	e002      	b.n	8000792 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800078c:	200c      	movs	r0, #12
 800078e:	f7ff fdf9 	bl	8000384 <lcd_send_cmd>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007a0:	f3bf 8f4f 	dsb	sy
}
 80007a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <__NVIC_SystemReset+0x24>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80007ae:	4904      	ldr	r1, [pc, #16]	; (80007c0 <__NVIC_SystemReset+0x24>)
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_SystemReset+0x28>)
 80007b2:	4313      	orrs	r3, r2
 80007b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80007b6:	f3bf 8f4f 	dsb	sy
}
 80007ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <__NVIC_SystemReset+0x20>
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	05fa0004 	.word	0x05fa0004

080007c8 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80007d2:	20c8      	movs	r0, #200	; 0xc8
 80007d4:	f007 fdc4 	bl	8008360 <HAL_Delay>
	lcd_clear();
 80007d8:	f7ff ff98 	bl	800070c <lcd_clear>
	if(type == 1 && page == 0) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d143      	bne.n	800086a <printTemplate+0xa2>
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d140      	bne.n	800086a <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80007e8:	4a9d      	ldr	r2, [pc, #628]	; (8000a60 <printTemplate+0x298>)
 80007ea:	2101      	movs	r1, #1
 80007ec:	2001      	movs	r0, #1
 80007ee:	f7ff ff61 	bl	80006b4 <lcd_print>
		lcd_print(2, 3, "0");
 80007f2:	4a9c      	ldr	r2, [pc, #624]	; (8000a64 <printTemplate+0x29c>)
 80007f4:	2103      	movs	r1, #3
 80007f6:	2002      	movs	r0, #2
 80007f8:	f7ff ff5c 	bl	80006b4 <lcd_print>
		lcd_print(2, 4, "1");
 80007fc:	4a9a      	ldr	r2, [pc, #616]	; (8000a68 <printTemplate+0x2a0>)
 80007fe:	2104      	movs	r1, #4
 8000800:	2002      	movs	r0, #2
 8000802:	f7ff ff57 	bl	80006b4 <lcd_print>
		lcd_print(2, 5, "2");
 8000806:	4a99      	ldr	r2, [pc, #612]	; (8000a6c <printTemplate+0x2a4>)
 8000808:	2105      	movs	r1, #5
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff ff52 	bl	80006b4 <lcd_print>
		lcd_print(2, 6, "3");
 8000810:	4a97      	ldr	r2, [pc, #604]	; (8000a70 <printTemplate+0x2a8>)
 8000812:	2106      	movs	r1, #6
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff ff4d 	bl	80006b4 <lcd_print>
		lcd_print(2, 7, "4");
 800081a:	4a96      	ldr	r2, [pc, #600]	; (8000a74 <printTemplate+0x2ac>)
 800081c:	2107      	movs	r1, #7
 800081e:	2002      	movs	r0, #2
 8000820:	f7ff ff48 	bl	80006b4 <lcd_print>
		lcd_print(2, 10, "5");
 8000824:	4a94      	ldr	r2, [pc, #592]	; (8000a78 <printTemplate+0x2b0>)
 8000826:	210a      	movs	r1, #10
 8000828:	2002      	movs	r0, #2
 800082a:	f7ff ff43 	bl	80006b4 <lcd_print>
		lcd_print(2, 11, "6");
 800082e:	4a93      	ldr	r2, [pc, #588]	; (8000a7c <printTemplate+0x2b4>)
 8000830:	210b      	movs	r1, #11
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff ff3e 	bl	80006b4 <lcd_print>
		lcd_print(2, 12, "7");
 8000838:	4a91      	ldr	r2, [pc, #580]	; (8000a80 <printTemplate+0x2b8>)
 800083a:	210c      	movs	r1, #12
 800083c:	2002      	movs	r0, #2
 800083e:	f7ff ff39 	bl	80006b4 <lcd_print>
		lcd_print(2, 13, "8");
 8000842:	4a90      	ldr	r2, [pc, #576]	; (8000a84 <printTemplate+0x2bc>)
 8000844:	210d      	movs	r1, #13
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff ff34 	bl	80006b4 <lcd_print>
		lcd_print(2, 14, "9");
 800084c:	4a8e      	ldr	r2, [pc, #568]	; (8000a88 <printTemplate+0x2c0>)
 800084e:	210e      	movs	r1, #14
 8000850:	2002      	movs	r0, #2
 8000852:	f7ff ff2f 	bl	80006b4 <lcd_print>
		lcd_print(1, 5, machineID);
 8000856:	4a8d      	ldr	r2, [pc, #564]	; (8000a8c <printTemplate+0x2c4>)
 8000858:	2105      	movs	r1, #5
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff ff2a 	bl	80006b4 <lcd_print>
		lcd_gotoxy(2, 3);
 8000860:	2103      	movs	r1, #3
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff ff07 	bl	8000676 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000868:	e0f5      	b.n	8000a56 <printTemplate+0x28e>
	} else if(type == 2) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d178      	bne.n	8000962 <printTemplate+0x19a>
		if(page == 1) {
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d114      	bne.n	80008a0 <printTemplate+0xd8>
			lcd_clear();
 8000876:	f7ff ff49 	bl	800070c <lcd_clear>
			HAL_Delay(100);
 800087a:	2064      	movs	r0, #100	; 0x64
 800087c:	f007 fd70 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000880:	4a83      	ldr	r2, [pc, #524]	; (8000a90 <printTemplate+0x2c8>)
 8000882:	2101      	movs	r1, #1
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff ff15 	bl	80006b4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800088a:	4a82      	ldr	r2, [pc, #520]	; (8000a94 <printTemplate+0x2cc>)
 800088c:	2107      	movs	r1, #7
 800088e:	2001      	movs	r0, #1
 8000890:	f7ff ff10 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000894:	4a80      	ldr	r2, [pc, #512]	; (8000a98 <printTemplate+0x2d0>)
 8000896:	2101      	movs	r1, #1
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff ff0b 	bl	80006b4 <lcd_print>
}
 800089e:	e0da      	b.n	8000a56 <printTemplate+0x28e>
		} else if(page == 2) {
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d114      	bne.n	80008d0 <printTemplate+0x108>
			lcd_clear();
 80008a6:	f7ff ff31 	bl	800070c <lcd_clear>
			HAL_Delay(100);
 80008aa:	2064      	movs	r0, #100	; 0x64
 80008ac:	f007 fd58 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008b0:	4a77      	ldr	r2, [pc, #476]	; (8000a90 <printTemplate+0x2c8>)
 80008b2:	2101      	movs	r1, #1
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fefd 	bl	80006b4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008ba:	4a76      	ldr	r2, [pc, #472]	; (8000a94 <printTemplate+0x2cc>)
 80008bc:	2107      	movs	r1, #7
 80008be:	2001      	movs	r0, #1
 80008c0:	f7ff fef8 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008c4:	4a75      	ldr	r2, [pc, #468]	; (8000a9c <printTemplate+0x2d4>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	2002      	movs	r0, #2
 80008ca:	f7ff fef3 	bl	80006b4 <lcd_print>
}
 80008ce:	e0c2      	b.n	8000a56 <printTemplate+0x28e>
		} else if(page == 3) {
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d114      	bne.n	8000900 <printTemplate+0x138>
			lcd_clear();
 80008d6:	f7ff ff19 	bl	800070c <lcd_clear>
			HAL_Delay(100);
 80008da:	2064      	movs	r0, #100	; 0x64
 80008dc:	f007 fd40 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008e0:	4a6b      	ldr	r2, [pc, #428]	; (8000a90 <printTemplate+0x2c8>)
 80008e2:	2101      	movs	r1, #1
 80008e4:	2001      	movs	r0, #1
 80008e6:	f7ff fee5 	bl	80006b4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008ea:	4a6a      	ldr	r2, [pc, #424]	; (8000a94 <printTemplate+0x2cc>)
 80008ec:	2107      	movs	r1, #7
 80008ee:	2001      	movs	r0, #1
 80008f0:	f7ff fee0 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80008f4:	4a6a      	ldr	r2, [pc, #424]	; (8000aa0 <printTemplate+0x2d8>)
 80008f6:	2101      	movs	r1, #1
 80008f8:	2002      	movs	r0, #2
 80008fa:	f7ff fedb 	bl	80006b4 <lcd_print>
}
 80008fe:	e0aa      	b.n	8000a56 <printTemplate+0x28e>
		} else if(page == 4) {
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	2b04      	cmp	r3, #4
 8000904:	d114      	bne.n	8000930 <printTemplate+0x168>
			lcd_clear();
 8000906:	f7ff ff01 	bl	800070c <lcd_clear>
			HAL_Delay(100);
 800090a:	2064      	movs	r0, #100	; 0x64
 800090c:	f007 fd28 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000910:	4a5f      	ldr	r2, [pc, #380]	; (8000a90 <printTemplate+0x2c8>)
 8000912:	2101      	movs	r1, #1
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff fecd 	bl	80006b4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800091a:	4a5e      	ldr	r2, [pc, #376]	; (8000a94 <printTemplate+0x2cc>)
 800091c:	2107      	movs	r1, #7
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff fec8 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000924:	4a5f      	ldr	r2, [pc, #380]	; (8000aa4 <printTemplate+0x2dc>)
 8000926:	2101      	movs	r1, #1
 8000928:	2002      	movs	r0, #2
 800092a:	f7ff fec3 	bl	80006b4 <lcd_print>
}
 800092e:	e092      	b.n	8000a56 <printTemplate+0x28e>
		} else if(page == 5) {
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	2b05      	cmp	r3, #5
 8000934:	f040 808f 	bne.w	8000a56 <printTemplate+0x28e>
			lcd_clear();
 8000938:	f7ff fee8 	bl	800070c <lcd_clear>
			HAL_Delay(100);
 800093c:	2064      	movs	r0, #100	; 0x64
 800093e:	f007 fd0f 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000942:	4a53      	ldr	r2, [pc, #332]	; (8000a90 <printTemplate+0x2c8>)
 8000944:	2101      	movs	r1, #1
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff feb4 	bl	80006b4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800094c:	4a51      	ldr	r2, [pc, #324]	; (8000a94 <printTemplate+0x2cc>)
 800094e:	2107      	movs	r1, #7
 8000950:	2001      	movs	r0, #1
 8000952:	f7ff feaf 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000956:	4a54      	ldr	r2, [pc, #336]	; (8000aa8 <printTemplate+0x2e0>)
 8000958:	2101      	movs	r1, #1
 800095a:	2002      	movs	r0, #2
 800095c:	f7ff feaa 	bl	80006b4 <lcd_print>
}
 8000960:	e079      	b.n	8000a56 <printTemplate+0x28e>
	} else if(type == 3) {
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d176      	bne.n	8000a56 <printTemplate+0x28e>
		if(page == 1) {
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d114      	bne.n	8000998 <printTemplate+0x1d0>
			lcd_clear();
 800096e:	f7ff fecd 	bl	800070c <lcd_clear>
			HAL_Delay(100);
 8000972:	2064      	movs	r0, #100	; 0x64
 8000974:	f007 fcf4 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000978:	4a4c      	ldr	r2, [pc, #304]	; (8000aac <printTemplate+0x2e4>)
 800097a:	2101      	movs	r1, #1
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fe99 	bl	80006b4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000982:	4a4b      	ldr	r2, [pc, #300]	; (8000ab0 <printTemplate+0x2e8>)
 8000984:	2107      	movs	r1, #7
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fe94 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800098c:	4a42      	ldr	r2, [pc, #264]	; (8000a98 <printTemplate+0x2d0>)
 800098e:	2101      	movs	r1, #1
 8000990:	2002      	movs	r0, #2
 8000992:	f7ff fe8f 	bl	80006b4 <lcd_print>
}
 8000996:	e05e      	b.n	8000a56 <printTemplate+0x28e>
		} else if(page == 2) {
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d114      	bne.n	80009c8 <printTemplate+0x200>
			lcd_clear();
 800099e:	f7ff feb5 	bl	800070c <lcd_clear>
			HAL_Delay(100);
 80009a2:	2064      	movs	r0, #100	; 0x64
 80009a4:	f007 fcdc 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009a8:	4a40      	ldr	r2, [pc, #256]	; (8000aac <printTemplate+0x2e4>)
 80009aa:	2101      	movs	r1, #1
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff fe81 	bl	80006b4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009b2:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <printTemplate+0x2e8>)
 80009b4:	2107      	movs	r1, #7
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff fe7c 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80009bc:	4a37      	ldr	r2, [pc, #220]	; (8000a9c <printTemplate+0x2d4>)
 80009be:	2101      	movs	r1, #1
 80009c0:	2002      	movs	r0, #2
 80009c2:	f7ff fe77 	bl	80006b4 <lcd_print>
}
 80009c6:	e046      	b.n	8000a56 <printTemplate+0x28e>
		} else if(page == 3) {
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d114      	bne.n	80009f8 <printTemplate+0x230>
			lcd_clear();
 80009ce:	f7ff fe9d 	bl	800070c <lcd_clear>
			HAL_Delay(100);
 80009d2:	2064      	movs	r0, #100	; 0x64
 80009d4:	f007 fcc4 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009d8:	4a34      	ldr	r2, [pc, #208]	; (8000aac <printTemplate+0x2e4>)
 80009da:	2101      	movs	r1, #1
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fe69 	bl	80006b4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009e2:	4a33      	ldr	r2, [pc, #204]	; (8000ab0 <printTemplate+0x2e8>)
 80009e4:	2107      	movs	r1, #7
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff fe64 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80009ec:	4a2c      	ldr	r2, [pc, #176]	; (8000aa0 <printTemplate+0x2d8>)
 80009ee:	2101      	movs	r1, #1
 80009f0:	2002      	movs	r0, #2
 80009f2:	f7ff fe5f 	bl	80006b4 <lcd_print>
}
 80009f6:	e02e      	b.n	8000a56 <printTemplate+0x28e>
		} else if(page == 4) {
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d114      	bne.n	8000a28 <printTemplate+0x260>
			lcd_clear();
 80009fe:	f7ff fe85 	bl	800070c <lcd_clear>
			HAL_Delay(100);
 8000a02:	2064      	movs	r0, #100	; 0x64
 8000a04:	f007 fcac 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a08:	4a28      	ldr	r2, [pc, #160]	; (8000aac <printTemplate+0x2e4>)
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff fe51 	bl	80006b4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000a12:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <printTemplate+0x2e8>)
 8000a14:	2107      	movs	r1, #7
 8000a16:	2001      	movs	r0, #1
 8000a18:	f7ff fe4c 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a1c:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <printTemplate+0x2dc>)
 8000a1e:	2101      	movs	r1, #1
 8000a20:	2002      	movs	r0, #2
 8000a22:	f7ff fe47 	bl	80006b4 <lcd_print>
}
 8000a26:	e016      	b.n	8000a56 <printTemplate+0x28e>
		} else if(page == 5) {
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	d113      	bne.n	8000a56 <printTemplate+0x28e>
			lcd_clear();
 8000a2e:	f7ff fe6d 	bl	800070c <lcd_clear>
			HAL_Delay(100);
 8000a32:	2064      	movs	r0, #100	; 0x64
 8000a34:	f007 fc94 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a38:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <printTemplate+0x2e4>)
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f7ff fe39 	bl	80006b4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000a42:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <printTemplate+0x2e8>)
 8000a44:	2107      	movs	r1, #7
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff fe34 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000a4c:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <printTemplate+0x2e0>)
 8000a4e:	2101      	movs	r1, #1
 8000a50:	2002      	movs	r0, #2
 8000a52:	f7ff fe2f 	bl	80006b4 <lcd_print>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	0800caf4 	.word	0x0800caf4
 8000a64:	0800cafc 	.word	0x0800cafc
 8000a68:	0800cb00 	.word	0x0800cb00
 8000a6c:	0800cb04 	.word	0x0800cb04
 8000a70:	0800cb08 	.word	0x0800cb08
 8000a74:	0800cb0c 	.word	0x0800cb0c
 8000a78:	0800cb10 	.word	0x0800cb10
 8000a7c:	0800cb14 	.word	0x0800cb14
 8000a80:	0800cb18 	.word	0x0800cb18
 8000a84:	0800cb1c 	.word	0x0800cb1c
 8000a88:	0800cb20 	.word	0x0800cb20
 8000a8c:	200003c0 	.word	0x200003c0
 8000a90:	0800cb24 	.word	0x0800cb24
 8000a94:	200003cc 	.word	0x200003cc
 8000a98:	0800cb2c 	.word	0x0800cb2c
 8000a9c:	0800cb40 	.word	0x0800cb40
 8000aa0:	0800cb54 	.word	0x0800cb54
 8000aa4:	0800cb68 	.word	0x0800cb68
 8000aa8:	0800cb7c 	.word	0x0800cb7c
 8000aac:	0800cb90 	.word	0x0800cb90
 8000ab0:	200003e0 	.word	0x200003e0

08000ab4 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <getCharFromCursorPosition+0x1c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000050 	.word	0x20000050

08000ad4 <takeMachineID>:

void takeMachineID(int state) {
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b08b      	sub	sp, #44	; 0x2c
 8000ad8:	af04      	add	r7, sp, #16
 8000ada:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fe47 	bl	8000770 <lcd_cursor>

    int cursorPosition = 3;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000aea:	2305      	movs	r3, #5
 8000aec:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d104      	bne.n	8000afe <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8000af4:	220c      	movs	r2, #12
 8000af6:	2100      	movs	r1, #0
 8000af8:	4899      	ldr	r0, [pc, #612]	; (8000d60 <takeMachineID+0x28c>)
 8000afa:	f00b fb4c 	bl	800c196 <memset>
    }
    HAL_Delay(100);
 8000afe:	2064      	movs	r0, #100	; 0x64
 8000b00:	f007 fc2e 	bl	8008360 <HAL_Delay>

    printTemplate(1, 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fe5e 	bl	80007c8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4895      	ldr	r0, [pc, #596]	; (8000d64 <takeMachineID+0x290>)
 8000b10:	f008 f9f6 	bl	8008f00 <HAL_GPIO_ReadPin>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d138      	bne.n	8000b8c <takeMachineID+0xb8>
        	lcd_cursor(0);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fe28 	bl	8000770 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000b20:	4b8f      	ldr	r3, [pc, #572]	; (8000d60 <takeMachineID+0x28c>)
 8000b22:	7adb      	ldrb	r3, [r3, #11]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d110      	bne.n	8000b4a <takeMachineID+0x76>
        		lcd_clear();
 8000b28:	f7ff fdf0 	bl	800070c <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000b2c:	4a8e      	ldr	r2, [pc, #568]	; (8000d68 <takeMachineID+0x294>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff fdbf 	bl	80006b4 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000b36:	4a8d      	ldr	r2, [pc, #564]	; (8000d6c <takeMachineID+0x298>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f7ff fdba 	bl	80006b4 <lcd_print>
        		HAL_Delay(1200);
 8000b40:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000b44:	f007 fc0c 	bl	8008360 <HAL_Delay>
        		goto mainSection;
 8000b48:	e7c8      	b.n	8000adc <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000b4a:	4b89      	ldr	r3, [pc, #548]	; (8000d70 <takeMachineID+0x29c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b88      	ldr	r3, [pc, #544]	; (8000d74 <takeMachineID+0x2a0>)
 8000b52:	4413      	add	r3, r2
 8000b54:	4a82      	ldr	r2, [pc, #520]	; (8000d60 <takeMachineID+0x28c>)
 8000b56:	461c      	mov	r4, r3
 8000b58:	4613      	mov	r3, r2
 8000b5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b5c:	6020      	str	r0, [r4, #0]
 8000b5e:	6061      	str	r1, [r4, #4]
 8000b60:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000b62:	20c8      	movs	r0, #200	; 0xc8
 8000b64:	f007 fbfc 	bl	8008360 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000b68:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	236e      	movs	r3, #110	; 0x6e
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	4b80      	ldr	r3, [pc, #512]	; (8000d74 <takeMachineID+0x2a0>)
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	236e      	movs	r3, #110	; 0x6e
 8000b78:	2200      	movs	r2, #0
 8000b7a:	21a0      	movs	r1, #160	; 0xa0
 8000b7c:	487e      	ldr	r0, [pc, #504]	; (8000d78 <takeMachineID+0x2a4>)
 8000b7e:	f008 fc79 	bl	8009474 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b86:	f007 fbeb 	bl	8008360 <HAL_Delay>

            break;
 8000b8a:	e0e5      	b.n	8000d58 <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4875      	ldr	r0, [pc, #468]	; (8000d64 <takeMachineID+0x290>)
 8000b90:	f008 f9b6 	bl	8008f00 <HAL_GPIO_ReadPin>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d112      	bne.n	8000bc0 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	2b07      	cmp	r3, #7
 8000b9e:	d102      	bne.n	8000ba6 <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000ba0:	230a      	movs	r3, #10
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	e008      	b.n	8000bb8 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	2b0e      	cmp	r3, #14
 8000baa:	d102      	bne.n	8000bb2 <takeMachineID+0xde>
                cursorPosition = 3;
 8000bac:	2303      	movs	r3, #3
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e002      	b.n	8000bb8 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000bb8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000bbc:	f007 fbd0 	bl	8008360 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	486e      	ldr	r0, [pc, #440]	; (8000d7c <takeMachineID+0x2a8>)
 8000bc4:	f008 f99c 	bl	8008f00 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d112      	bne.n	8000bf4 <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d102      	bne.n	8000bda <takeMachineID+0x106>
                cursorPosition = 14;
 8000bd4:	230e      	movs	r3, #14
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e008      	b.n	8000bec <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2b0a      	cmp	r3, #10
 8000bde:	d102      	bne.n	8000be6 <takeMachineID+0x112>
            	cursorPosition = 7;
 8000be0:	2307      	movs	r3, #7
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	e002      	b.n	8000bec <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000bec:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000bf0:	f007 fbb6 	bl	8008360 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	485b      	ldr	r0, [pc, #364]	; (8000d64 <takeMachineID+0x290>)
 8000bf8:	f008 f982 	bl	8008f00 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d16c      	bne.n	8000cdc <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d105      	bne.n	8000c14 <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000c08:	4a55      	ldr	r2, [pc, #340]	; (8000d60 <takeMachineID+0x28c>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	2230      	movs	r2, #48	; 0x30
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e04f      	b.n	8000cb4 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d105      	bne.n	8000c26 <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000c1a:	4a51      	ldr	r2, [pc, #324]	; (8000d60 <takeMachineID+0x28c>)
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	4413      	add	r3, r2
 8000c20:	2231      	movs	r2, #49	; 0x31
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e046      	b.n	8000cb4 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	d105      	bne.n	8000c38 <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000c2c:	4a4c      	ldr	r2, [pc, #304]	; (8000d60 <takeMachineID+0x28c>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4413      	add	r3, r2
 8000c32:	2232      	movs	r2, #50	; 0x32
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e03d      	b.n	8000cb4 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d105      	bne.n	8000c4a <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000c3e:	4a48      	ldr	r2, [pc, #288]	; (8000d60 <takeMachineID+0x28c>)
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4413      	add	r3, r2
 8000c44:	2233      	movs	r2, #51	; 0x33
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e034      	b.n	8000cb4 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	2b07      	cmp	r3, #7
 8000c4e:	d105      	bne.n	8000c5c <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000c50:	4a43      	ldr	r2, [pc, #268]	; (8000d60 <takeMachineID+0x28c>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4413      	add	r3, r2
 8000c56:	2234      	movs	r2, #52	; 0x34
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e02b      	b.n	8000cb4 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	2b0a      	cmp	r3, #10
 8000c60:	d105      	bne.n	8000c6e <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000c62:	4a3f      	ldr	r2, [pc, #252]	; (8000d60 <takeMachineID+0x28c>)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4413      	add	r3, r2
 8000c68:	2235      	movs	r2, #53	; 0x35
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e022      	b.n	8000cb4 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b0b      	cmp	r3, #11
 8000c72:	d105      	bne.n	8000c80 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000c74:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <takeMachineID+0x28c>)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4413      	add	r3, r2
 8000c7a:	2236      	movs	r2, #54	; 0x36
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	e019      	b.n	8000cb4 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	2b0c      	cmp	r3, #12
 8000c84:	d105      	bne.n	8000c92 <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000c86:	4a36      	ldr	r2, [pc, #216]	; (8000d60 <takeMachineID+0x28c>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2237      	movs	r2, #55	; 0x37
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e010      	b.n	8000cb4 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2b0d      	cmp	r3, #13
 8000c96:	d105      	bne.n	8000ca4 <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000c98:	4a31      	ldr	r2, [pc, #196]	; (8000d60 <takeMachineID+0x28c>)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2238      	movs	r2, #56	; 0x38
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e007      	b.n	8000cb4 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	2b0e      	cmp	r3, #14
 8000ca8:	d104      	bne.n	8000cb4 <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000caa:	4a2d      	ldr	r2, [pc, #180]	; (8000d60 <takeMachineID+0x28c>)
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4413      	add	r3, r2
 8000cb0:	2239      	movs	r2, #57	; 0x39
 8000cb2:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	b2d9      	uxtb	r1, r3
 8000cb8:	4a29      	ldr	r2, [pc, #164]	; (8000d60 <takeMachineID+0x28c>)
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f7ff fd0b 	bl	80006de <lcd_print_char>

        	writeLoc++;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000cd4:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000cd8:	f007 fb42 	bl	8008360 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000cdc:	2104      	movs	r1, #4
 8000cde:	4821      	ldr	r0, [pc, #132]	; (8000d64 <takeMachineID+0x290>)
 8000ce0:	f008 f90e 	bl	8008f00 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d12f      	bne.n	8000d4a <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <takeMachineID+0x28c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d027      	beq.n	8000d42 <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000cf2:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <takeMachineID+0x28c>)
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	3304      	adds	r3, #4
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fd0a 	bl	8000720 <lcd_delete_char>
                HAL_Delay(50);
 8000d0c:	2032      	movs	r0, #50	; 0x32
 8000d0e:	f007 fb27 	bl	8008360 <HAL_Delay>

                if(writeLoc > 5) {
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	dd03      	ble.n	8000d20 <takeMachineID+0x24c>
                	writeLoc--;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	e004      	b.n	8000d2a <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	dc01      	bgt.n	8000d2a <takeMachineID+0x256>
                	writeLoc = 5;
 8000d26:	2305      	movs	r3, #5
 8000d28:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dd03      	ble.n	8000d38 <takeMachineID+0x264>
                	machineIDLoc--;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	e004      	b.n	8000d42 <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da01      	bge.n	8000d42 <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000d42:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d46:	f007 fb0b 	bl	8008360 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4619      	mov	r1, r3
 8000d50:	2002      	movs	r0, #2
 8000d52:	f7ff fc90 	bl	8000676 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d56:	e6d9      	b.n	8000b0c <takeMachineID+0x38>
    }
}
 8000d58:	bf00      	nop
 8000d5a:	371c      	adds	r7, #28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd90      	pop	{r4, r7, pc}
 8000d60:	200003c0 	.word	0x200003c0
 8000d64:	40010800 	.word	0x40010800
 8000d68:	0800cb98 	.word	0x0800cb98
 8000d6c:	0800cbac 	.word	0x0800cbac
 8000d70:	200000a1 	.word	0x200000a1
 8000d74:	20000328 	.word	0x20000328
 8000d78:	20000244 	.word	0x20000244
 8000d7c:	40011000 	.word	0x40011000

08000d80 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af04      	add	r7, sp, #16
 8000d86:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff fcf1 	bl	8000770 <lcd_cursor>

    if(state == 0) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d104      	bne.n	8000d9e <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000d94:	2214      	movs	r2, #20
 8000d96:	2100      	movs	r1, #0
 8000d98:	488a      	ldr	r0, [pc, #552]	; (8000fc4 <takeWifiSSID+0x244>)
 8000d9a:	f00b f9fc 	bl	800c196 <memset>
    }

    int realCharPos = 1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000da2:	4b89      	ldr	r3, [pc, #548]	; (8000fc8 <takeWifiSSID+0x248>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
    page = 1;
 8000da8:	4b88      	ldr	r3, [pc, #544]	; (8000fcc <takeWifiSSID+0x24c>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000db2:	2307      	movs	r3, #7
 8000db4:	60fb      	str	r3, [r7, #12]

    uint8_t tempSSIDStartPos = ssidStartPos;
 8000db6:	4b86      	ldr	r3, [pc, #536]	; (8000fd0 <takeWifiSSID+0x250>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	72fb      	strb	r3, [r7, #11]

    printTemplate(2, 1);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f7ff fd02 	bl	80007c8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4883      	ldr	r0, [pc, #524]	; (8000fd4 <takeWifiSSID+0x254>)
 8000dc8:	f008 f89a 	bl	8008f00 <HAL_GPIO_ReadPin>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d12b      	bne.n	8000e2a <takeWifiSSID+0xaa>
            lcd_cursor(0);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f7ff fccc 	bl	8000770 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000dd8:	487a      	ldr	r0, [pc, #488]	; (8000fc4 <takeWifiSSID+0x244>)
 8000dda:	f7ff fa23 	bl	8000224 <strlen>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b14      	cmp	r3, #20
 8000de2:	d910      	bls.n	8000e06 <takeWifiSSID+0x86>
                lcd_clear();
 8000de4:	f7ff fc92 	bl	800070c <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000de8:	4a7b      	ldr	r2, [pc, #492]	; (8000fd8 <takeWifiSSID+0x258>)
 8000dea:	2101      	movs	r1, #1
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff fc61 	bl	80006b4 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000df2:	4a7a      	ldr	r2, [pc, #488]	; (8000fdc <takeWifiSSID+0x25c>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	2002      	movs	r0, #2
 8000df8:	f7ff fc5c 	bl	80006b4 <lcd_print>
                HAL_Delay(1200);
 8000dfc:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e00:	f007 faae 	bl	8008360 <HAL_Delay>
                goto mainSSIDSection;
 8000e04:	e7c0      	b.n	8000d88 <takeWifiSSID+0x8>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000e06:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e0a:	9302      	str	r3, [sp, #8]
 8000e0c:	236e      	movs	r3, #110	; 0x6e
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	4b73      	ldr	r3, [pc, #460]	; (8000fe0 <takeWifiSSID+0x260>)
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	236e      	movs	r3, #110	; 0x6e
 8000e16:	2200      	movs	r2, #0
 8000e18:	21a0      	movs	r1, #160	; 0xa0
 8000e1a:	4872      	ldr	r0, [pc, #456]	; (8000fe4 <takeWifiSSID+0x264>)
 8000e1c:	f008 fb2a 	bl	8009474 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8000e20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e24:	f007 fa9c 	bl	8008360 <HAL_Delay>

            break;
 8000e28:	e156      	b.n	80010d8 <takeWifiSSID+0x358>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4869      	ldr	r0, [pc, #420]	; (8000fd4 <takeWifiSSID+0x254>)
 8000e2e:	f008 f867 	bl	8008f00 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d166      	bne.n	8000f06 <takeWifiSSID+0x186>
        	realCharPos++;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2b50      	cmp	r3, #80	; 0x50
 8000e42:	dd01      	ble.n	8000e48 <takeWifiSSID+0xc8>
        		realCharPos = 1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000e48:	4b5f      	ldr	r3, [pc, #380]	; (8000fc8 <takeWifiSSID+0x248>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b10      	cmp	r3, #16
 8000e4e:	d152      	bne.n	8000ef6 <takeWifiSSID+0x176>
            	if(page == 1) {
 8000e50:	4b5e      	ldr	r3, [pc, #376]	; (8000fcc <takeWifiSSID+0x24c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d10c      	bne.n	8000e72 <takeWifiSSID+0xf2>
            		cursorPosition = 1;
 8000e58:	4b5b      	ldr	r3, [pc, #364]	; (8000fc8 <takeWifiSSID+0x248>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
            		page++;
 8000e5e:	4b5b      	ldr	r3, [pc, #364]	; (8000fcc <takeWifiSSID+0x24c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a59      	ldr	r2, [pc, #356]	; (8000fcc <takeWifiSSID+0x24c>)
 8000e66:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000e68:	2102      	movs	r1, #2
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f7ff fcac 	bl	80007c8 <printTemplate>
 8000e70:	e046      	b.n	8000f00 <takeWifiSSID+0x180>
            	} else if(page == 2) {
 8000e72:	4b56      	ldr	r3, [pc, #344]	; (8000fcc <takeWifiSSID+0x24c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d10c      	bne.n	8000e94 <takeWifiSSID+0x114>
            		cursorPosition = 1;
 8000e7a:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <takeWifiSSID+0x248>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
            		page++;
 8000e80:	4b52      	ldr	r3, [pc, #328]	; (8000fcc <takeWifiSSID+0x24c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a51      	ldr	r2, [pc, #324]	; (8000fcc <takeWifiSSID+0x24c>)
 8000e88:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f7ff fc9b 	bl	80007c8 <printTemplate>
 8000e92:	e035      	b.n	8000f00 <takeWifiSSID+0x180>
            	} else if(page == 3) {
 8000e94:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <takeWifiSSID+0x24c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d10c      	bne.n	8000eb6 <takeWifiSSID+0x136>
            		cursorPosition = 1;
 8000e9c:	4b4a      	ldr	r3, [pc, #296]	; (8000fc8 <takeWifiSSID+0x248>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
            		page++;
 8000ea2:	4b4a      	ldr	r3, [pc, #296]	; (8000fcc <takeWifiSSID+0x24c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a48      	ldr	r2, [pc, #288]	; (8000fcc <takeWifiSSID+0x24c>)
 8000eaa:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000eac:	2104      	movs	r1, #4
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f7ff fc8a 	bl	80007c8 <printTemplate>
 8000eb4:	e024      	b.n	8000f00 <takeWifiSSID+0x180>
            	} else if(page == 4) {
 8000eb6:	4b45      	ldr	r3, [pc, #276]	; (8000fcc <takeWifiSSID+0x24c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d10c      	bne.n	8000ed8 <takeWifiSSID+0x158>
            		cursorPosition = 1;
 8000ebe:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <takeWifiSSID+0x248>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
            		page++;
 8000ec4:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <takeWifiSSID+0x24c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a40      	ldr	r2, [pc, #256]	; (8000fcc <takeWifiSSID+0x24c>)
 8000ecc:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000ece:	2105      	movs	r1, #5
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f7ff fc79 	bl	80007c8 <printTemplate>
 8000ed6:	e013      	b.n	8000f00 <takeWifiSSID+0x180>
            	} else if(page == 5) {
 8000ed8:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <takeWifiSSID+0x24c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d10f      	bne.n	8000f00 <takeWifiSSID+0x180>
            		cursorPosition = 1;
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <takeWifiSSID+0x248>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000ee6:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <takeWifiSSID+0x24c>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000eec:	2101      	movs	r1, #1
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f7ff fc6a 	bl	80007c8 <printTemplate>
 8000ef4:	e004      	b.n	8000f00 <takeWifiSSID+0x180>
            	}
            } else {
            	cursorPosition++;
 8000ef6:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <takeWifiSSID+0x248>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a32      	ldr	r2, [pc, #200]	; (8000fc8 <takeWifiSSID+0x248>)
 8000efe:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000f00:	20fa      	movs	r0, #250	; 0xfa
 8000f02:	f007 fa2d 	bl	8008360 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f06:	2108      	movs	r1, #8
 8000f08:	4837      	ldr	r0, [pc, #220]	; (8000fe8 <takeWifiSSID+0x268>)
 8000f0a:	f007 fff9 	bl	8008f00 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d173      	bne.n	8000ffc <takeWifiSSID+0x27c>
        	realCharPos--;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dc01      	bgt.n	8000f24 <takeWifiSSID+0x1a4>
        		realCharPos = 80;
 8000f20:	2350      	movs	r3, #80	; 0x50
 8000f22:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <takeWifiSSID+0x248>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d15f      	bne.n	8000fec <takeWifiSSID+0x26c>
            	if(page == 1) {
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <takeWifiSSID+0x24c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d10a      	bne.n	8000f4a <takeWifiSSID+0x1ca>
            		cursorPosition = 16;
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <takeWifiSSID+0x248>)
 8000f36:	2210      	movs	r2, #16
 8000f38:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <takeWifiSSID+0x24c>)
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000f40:	2105      	movs	r1, #5
 8000f42:	2002      	movs	r0, #2
 8000f44:	f7ff fc40 	bl	80007c8 <printTemplate>
 8000f48:	e055      	b.n	8000ff6 <takeWifiSSID+0x276>
            	} else if(page == 2) {
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <takeWifiSSID+0x24c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d10a      	bne.n	8000f68 <takeWifiSSID+0x1e8>
            		cursorPosition = 16;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <takeWifiSSID+0x248>)
 8000f54:	2210      	movs	r2, #16
 8000f56:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <takeWifiSSID+0x24c>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f5e:	2101      	movs	r1, #1
 8000f60:	2002      	movs	r0, #2
 8000f62:	f7ff fc31 	bl	80007c8 <printTemplate>
 8000f66:	e046      	b.n	8000ff6 <takeWifiSSID+0x276>
            	} else if(page == 3) {
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <takeWifiSSID+0x24c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d10a      	bne.n	8000f86 <takeWifiSSID+0x206>
            		cursorPosition = 16;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <takeWifiSSID+0x248>)
 8000f72:	2210      	movs	r2, #16
 8000f74:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <takeWifiSSID+0x24c>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f7ff fc22 	bl	80007c8 <printTemplate>
 8000f84:	e037      	b.n	8000ff6 <takeWifiSSID+0x276>
            	} else if(page == 4) {
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <takeWifiSSID+0x24c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d10a      	bne.n	8000fa4 <takeWifiSSID+0x224>
            		cursorPosition = 16;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <takeWifiSSID+0x248>)
 8000f90:	2210      	movs	r2, #16
 8000f92:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <takeWifiSSID+0x24c>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f7ff fc13 	bl	80007c8 <printTemplate>
 8000fa2:	e028      	b.n	8000ff6 <takeWifiSSID+0x276>
            	} else if(page == 5) {
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <takeWifiSSID+0x24c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	d124      	bne.n	8000ff6 <takeWifiSSID+0x276>
            		cursorPosition = 16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <takeWifiSSID+0x248>)
 8000fae:	2210      	movs	r2, #16
 8000fb0:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <takeWifiSSID+0x24c>)
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000fb8:	2104      	movs	r1, #4
 8000fba:	2002      	movs	r0, #2
 8000fbc:	f7ff fc04 	bl	80007c8 <printTemplate>
 8000fc0:	e019      	b.n	8000ff6 <takeWifiSSID+0x276>
 8000fc2:	bf00      	nop
 8000fc4:	200003cc 	.word	0x200003cc
 8000fc8:	20000034 	.word	0x20000034
 8000fcc:	20000038 	.word	0x20000038
 8000fd0:	200000a2 	.word	0x200000a2
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	0800cbc0 	.word	0x0800cbc0
 8000fdc:	0800cbd4 	.word	0x0800cbd4
 8000fe0:	20000328 	.word	0x20000328
 8000fe4:	20000244 	.word	0x20000244
 8000fe8:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8000fec:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <takeWifiSSID+0x360>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	4a3b      	ldr	r2, [pc, #236]	; (80010e0 <takeWifiSSID+0x360>)
 8000ff4:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000ff6:	20fa      	movs	r0, #250	; 0xfa
 8000ff8:	f007 f9b2 	bl	8008360 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4839      	ldr	r0, [pc, #228]	; (80010e4 <takeWifiSSID+0x364>)
 8001000:	f007 ff7e 	bl	8008f00 <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d128      	bne.n	800105c <takeWifiSSID+0x2dc>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3b01      	subs	r3, #1
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fd50 	bl	8000ab4 <getCharFromCursorPosition>
 8001014:	4603      	mov	r3, r0
 8001016:	4619      	mov	r1, r3
 8001018:	4a33      	ldr	r2, [pc, #204]	; (80010e8 <takeWifiSSID+0x368>)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4413      	add	r3, r2
 800101e:	460a      	mov	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]

            eepromData[tempSSIDStartPos] = realCharPos - 1;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	3a01      	subs	r2, #1
 800102a:	b2d1      	uxtb	r1, r2
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <takeWifiSSID+0x36c>)
 800102e:	54d1      	strb	r1, [r2, r3]
            tempSSIDStartPos++;
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	3301      	adds	r3, #1
 8001034:	72fb      	strb	r3, [r7, #11]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	b2d9      	uxtb	r1, r3
 800103a:	4a2b      	ldr	r2, [pc, #172]	; (80010e8 <takeWifiSSID+0x368>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff fb4a 	bl	80006de <lcd_print_char>

            writeLoc++;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3301      	adds	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	3301      	adds	r3, #1
 8001054:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001056:	20fa      	movs	r0, #250	; 0xfa
 8001058:	f007 f982 	bl	8008360 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800105c:	2104      	movs	r1, #4
 800105e:	4821      	ldr	r0, [pc, #132]	; (80010e4 <takeWifiSSID+0x364>)
 8001060:	f007 ff4e 	bl	8008f00 <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b01      	cmp	r3, #1
 8001068:	d12e      	bne.n	80010c8 <takeWifiSSID+0x348>
        	if(strlen(wifiSSID) >= 1) {
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <takeWifiSSID+0x368>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d027      	beq.n	80010c2 <takeWifiSSID+0x342>
        		wifiSSID[wifiNameLoc] = '\0';
 8001072:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <takeWifiSSID+0x368>)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4413      	add	r3, r2
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	3306      	adds	r3, #6
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fb4a 	bl	8000720 <lcd_delete_char>
        		HAL_Delay(50);
 800108c:	2032      	movs	r0, #50	; 0x32
 800108e:	f007 f967 	bl	8008360 <HAL_Delay>
        		if(writeLoc > 7) {
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b07      	cmp	r3, #7
 8001096:	dd03      	ble.n	80010a0 <takeWifiSSID+0x320>
        			writeLoc--;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	3b01      	subs	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e004      	b.n	80010aa <takeWifiSSID+0x32a>
        		} else if(writeLoc < 7) {
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	dc01      	bgt.n	80010aa <takeWifiSSID+0x32a>
        			writeLoc = 7;
 80010a6:	2307      	movs	r3, #7
 80010a8:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dd03      	ble.n	80010b8 <takeWifiSSID+0x338>
        			wifiNameLoc--;
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	e004      	b.n	80010c2 <takeWifiSSID+0x342>
        		} else if(wifiNameLoc < 0) {
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da01      	bge.n	80010c2 <takeWifiSSID+0x342>
        			wifiNameLoc = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 80010c2:	20fa      	movs	r0, #250	; 0xfa
 80010c4:	f007 f94c 	bl	8008360 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <takeWifiSSID+0x360>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	2002      	movs	r0, #2
 80010d2:	f7ff fad0 	bl	8000676 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80010d6:	e675      	b.n	8000dc4 <takeWifiSSID+0x44>
    }
}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000034 	.word	0x20000034
 80010e4:	40010800 	.word	0x40010800
 80010e8:	200003cc 	.word	0x200003cc
 80010ec:	20000328 	.word	0x20000328

080010f0 <takeWifiPass>:

void takeWifiPass(int state) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af04      	add	r7, sp, #16
 80010f6:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff fb39 	bl	8000770 <lcd_cursor>

    if(state == 0) {
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d104      	bne.n	800110e <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001104:	2214      	movs	r2, #20
 8001106:	2100      	movs	r1, #0
 8001108:	488a      	ldr	r0, [pc, #552]	; (8001334 <takeWifiPass+0x244>)
 800110a:	f00b f844 	bl	800c196 <memset>
    }

    int realCharPos = 1;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8001112:	4b89      	ldr	r3, [pc, #548]	; (8001338 <takeWifiPass+0x248>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]
    page = 1;
 8001118:	4b88      	ldr	r3, [pc, #544]	; (800133c <takeWifiPass+0x24c>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8001122:	2307      	movs	r3, #7
 8001124:	60fb      	str	r3, [r7, #12]

    uint8_t tempPassStartPos = passStartPos;
 8001126:	4b86      	ldr	r3, [pc, #536]	; (8001340 <takeWifiPass+0x250>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	72fb      	strb	r3, [r7, #11]

    printTemplate(3, 1);
 800112c:	2101      	movs	r1, #1
 800112e:	2003      	movs	r0, #3
 8001130:	f7ff fb4a 	bl	80007c8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001134:	2108      	movs	r1, #8
 8001136:	4883      	ldr	r0, [pc, #524]	; (8001344 <takeWifiPass+0x254>)
 8001138:	f007 fee2 	bl	8008f00 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d12b      	bne.n	800119a <takeWifiPass+0xaa>
            lcd_cursor(0);
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fb14 	bl	8000770 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8001148:	487a      	ldr	r0, [pc, #488]	; (8001334 <takeWifiPass+0x244>)
 800114a:	f7ff f86b 	bl	8000224 <strlen>
 800114e:	4603      	mov	r3, r0
 8001150:	2b14      	cmp	r3, #20
 8001152:	d910      	bls.n	8001176 <takeWifiPass+0x86>
                lcd_clear();
 8001154:	f7ff fada 	bl	800070c <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8001158:	4a7b      	ldr	r2, [pc, #492]	; (8001348 <takeWifiPass+0x258>)
 800115a:	2101      	movs	r1, #1
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff faa9 	bl	80006b4 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8001162:	4a7a      	ldr	r2, [pc, #488]	; (800134c <takeWifiPass+0x25c>)
 8001164:	2101      	movs	r1, #1
 8001166:	2002      	movs	r0, #2
 8001168:	f7ff faa4 	bl	80006b4 <lcd_print>
                HAL_Delay(1200);
 800116c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001170:	f007 f8f6 	bl	8008360 <HAL_Delay>
                goto mainPASSSection;
 8001174:	e7c0      	b.n	80010f8 <takeWifiPass+0x8>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8001176:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	236e      	movs	r3, #110	; 0x6e
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	4b73      	ldr	r3, [pc, #460]	; (8001350 <takeWifiPass+0x260>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	236e      	movs	r3, #110	; 0x6e
 8001186:	2200      	movs	r2, #0
 8001188:	21a0      	movs	r1, #160	; 0xa0
 800118a:	4872      	ldr	r0, [pc, #456]	; (8001354 <takeWifiPass+0x264>)
 800118c:	f008 f972 	bl	8009474 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8001190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001194:	f007 f8e4 	bl	8008360 <HAL_Delay>

            break;
 8001198:	e156      	b.n	8001448 <takeWifiPass+0x358>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800119a:	2101      	movs	r1, #1
 800119c:	4869      	ldr	r0, [pc, #420]	; (8001344 <takeWifiPass+0x254>)
 800119e:	f007 feaf 	bl	8008f00 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d166      	bne.n	8001276 <takeWifiPass+0x186>
        	realCharPos++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2b50      	cmp	r3, #80	; 0x50
 80011b2:	dd01      	ble.n	80011b8 <takeWifiPass+0xc8>
        	    realCharPos = 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80011b8:	4b5f      	ldr	r3, [pc, #380]	; (8001338 <takeWifiPass+0x248>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b10      	cmp	r3, #16
 80011be:	d152      	bne.n	8001266 <takeWifiPass+0x176>
            	if(page == 1) {
 80011c0:	4b5e      	ldr	r3, [pc, #376]	; (800133c <takeWifiPass+0x24c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d10c      	bne.n	80011e2 <takeWifiPass+0xf2>
            		cursorPosition = 1;
 80011c8:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <takeWifiPass+0x248>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
            		page++;
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <takeWifiPass+0x24c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a59      	ldr	r2, [pc, #356]	; (800133c <takeWifiPass+0x24c>)
 80011d6:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80011d8:	2102      	movs	r1, #2
 80011da:	2003      	movs	r0, #3
 80011dc:	f7ff faf4 	bl	80007c8 <printTemplate>
 80011e0:	e046      	b.n	8001270 <takeWifiPass+0x180>
            	} else if(page == 2) {
 80011e2:	4b56      	ldr	r3, [pc, #344]	; (800133c <takeWifiPass+0x24c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d10c      	bne.n	8001204 <takeWifiPass+0x114>
            		cursorPosition = 1;
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <takeWifiPass+0x248>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
            		page++;
 80011f0:	4b52      	ldr	r3, [pc, #328]	; (800133c <takeWifiPass+0x24c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a51      	ldr	r2, [pc, #324]	; (800133c <takeWifiPass+0x24c>)
 80011f8:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80011fa:	2103      	movs	r1, #3
 80011fc:	2003      	movs	r0, #3
 80011fe:	f7ff fae3 	bl	80007c8 <printTemplate>
 8001202:	e035      	b.n	8001270 <takeWifiPass+0x180>
            	} else if(page == 3) {
 8001204:	4b4d      	ldr	r3, [pc, #308]	; (800133c <takeWifiPass+0x24c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d10c      	bne.n	8001226 <takeWifiPass+0x136>
            		cursorPosition = 1;
 800120c:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <takeWifiPass+0x248>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]
            		page++;
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <takeWifiPass+0x24c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	4a48      	ldr	r2, [pc, #288]	; (800133c <takeWifiPass+0x24c>)
 800121a:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 800121c:	2104      	movs	r1, #4
 800121e:	2003      	movs	r0, #3
 8001220:	f7ff fad2 	bl	80007c8 <printTemplate>
 8001224:	e024      	b.n	8001270 <takeWifiPass+0x180>
            	} else if(page == 4) {
 8001226:	4b45      	ldr	r3, [pc, #276]	; (800133c <takeWifiPass+0x24c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b04      	cmp	r3, #4
 800122c:	d10c      	bne.n	8001248 <takeWifiPass+0x158>
            		cursorPosition = 1;
 800122e:	4b42      	ldr	r3, [pc, #264]	; (8001338 <takeWifiPass+0x248>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
            		page++;
 8001234:	4b41      	ldr	r3, [pc, #260]	; (800133c <takeWifiPass+0x24c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	4a40      	ldr	r2, [pc, #256]	; (800133c <takeWifiPass+0x24c>)
 800123c:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 800123e:	2105      	movs	r1, #5
 8001240:	2003      	movs	r0, #3
 8001242:	f7ff fac1 	bl	80007c8 <printTemplate>
 8001246:	e013      	b.n	8001270 <takeWifiPass+0x180>
            	} else if(page == 5) {
 8001248:	4b3c      	ldr	r3, [pc, #240]	; (800133c <takeWifiPass+0x24c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d10f      	bne.n	8001270 <takeWifiPass+0x180>
            		cursorPosition = 1;
 8001250:	4b39      	ldr	r3, [pc, #228]	; (8001338 <takeWifiPass+0x248>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001256:	4b39      	ldr	r3, [pc, #228]	; (800133c <takeWifiPass+0x24c>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800125c:	2101      	movs	r1, #1
 800125e:	2003      	movs	r0, #3
 8001260:	f7ff fab2 	bl	80007c8 <printTemplate>
 8001264:	e004      	b.n	8001270 <takeWifiPass+0x180>
            	}
            } else {
            	cursorPosition++;
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <takeWifiPass+0x248>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a32      	ldr	r2, [pc, #200]	; (8001338 <takeWifiPass+0x248>)
 800126e:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001270:	20fa      	movs	r0, #250	; 0xfa
 8001272:	f007 f875 	bl	8008360 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001276:	2108      	movs	r1, #8
 8001278:	4837      	ldr	r0, [pc, #220]	; (8001358 <takeWifiPass+0x268>)
 800127a:	f007 fe41 	bl	8008f00 <HAL_GPIO_ReadPin>
 800127e:	4603      	mov	r3, r0
 8001280:	2b01      	cmp	r3, #1
 8001282:	d173      	bne.n	800136c <takeWifiPass+0x27c>
        	realCharPos--;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3b01      	subs	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b00      	cmp	r3, #0
 800128e:	dc01      	bgt.n	8001294 <takeWifiPass+0x1a4>
        	    realCharPos = 80;
 8001290:	2350      	movs	r3, #80	; 0x50
 8001292:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8001294:	4b28      	ldr	r3, [pc, #160]	; (8001338 <takeWifiPass+0x248>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d15f      	bne.n	800135c <takeWifiPass+0x26c>
            	if(page == 1) {
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <takeWifiPass+0x24c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d10a      	bne.n	80012ba <takeWifiPass+0x1ca>
            		cursorPosition = 16;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <takeWifiPass+0x248>)
 80012a6:	2210      	movs	r2, #16
 80012a8:	601a      	str	r2, [r3, #0]
            		page = 5;
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <takeWifiPass+0x24c>)
 80012ac:	2205      	movs	r2, #5
 80012ae:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80012b0:	2105      	movs	r1, #5
 80012b2:	2003      	movs	r0, #3
 80012b4:	f7ff fa88 	bl	80007c8 <printTemplate>
 80012b8:	e055      	b.n	8001366 <takeWifiPass+0x276>
            	} else if(page == 2) {
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <takeWifiPass+0x24c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d10a      	bne.n	80012d8 <takeWifiPass+0x1e8>
            		cursorPosition = 16;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <takeWifiPass+0x248>)
 80012c4:	2210      	movs	r2, #16
 80012c6:	601a      	str	r2, [r3, #0]
            		page = 1;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <takeWifiPass+0x24c>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80012ce:	2101      	movs	r1, #1
 80012d0:	2003      	movs	r0, #3
 80012d2:	f7ff fa79 	bl	80007c8 <printTemplate>
 80012d6:	e046      	b.n	8001366 <takeWifiPass+0x276>
            	} else if(page == 3) {
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <takeWifiPass+0x24c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d10a      	bne.n	80012f6 <takeWifiPass+0x206>
            		cursorPosition = 16;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <takeWifiPass+0x248>)
 80012e2:	2210      	movs	r2, #16
 80012e4:	601a      	str	r2, [r3, #0]
            		page = 2;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <takeWifiPass+0x24c>)
 80012e8:	2202      	movs	r2, #2
 80012ea:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80012ec:	2102      	movs	r1, #2
 80012ee:	2003      	movs	r0, #3
 80012f0:	f7ff fa6a 	bl	80007c8 <printTemplate>
 80012f4:	e037      	b.n	8001366 <takeWifiPass+0x276>
            	} else if(page == 4) {
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <takeWifiPass+0x24c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d10a      	bne.n	8001314 <takeWifiPass+0x224>
            		cursorPosition = 16;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <takeWifiPass+0x248>)
 8001300:	2210      	movs	r2, #16
 8001302:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <takeWifiPass+0x24c>)
 8001306:	2203      	movs	r2, #3
 8001308:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 800130a:	2103      	movs	r1, #3
 800130c:	2003      	movs	r0, #3
 800130e:	f7ff fa5b 	bl	80007c8 <printTemplate>
 8001312:	e028      	b.n	8001366 <takeWifiPass+0x276>
            	} else if(page == 5) {
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <takeWifiPass+0x24c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d124      	bne.n	8001366 <takeWifiPass+0x276>
            		cursorPosition = 16;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <takeWifiPass+0x248>)
 800131e:	2210      	movs	r2, #16
 8001320:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <takeWifiPass+0x24c>)
 8001324:	2204      	movs	r2, #4
 8001326:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 8001328:	2104      	movs	r1, #4
 800132a:	2003      	movs	r0, #3
 800132c:	f7ff fa4c 	bl	80007c8 <printTemplate>
 8001330:	e019      	b.n	8001366 <takeWifiPass+0x276>
 8001332:	bf00      	nop
 8001334:	200003e0 	.word	0x200003e0
 8001338:	20000034 	.word	0x20000034
 800133c:	20000038 	.word	0x20000038
 8001340:	200000a3 	.word	0x200000a3
 8001344:	40010800 	.word	0x40010800
 8001348:	0800cbc0 	.word	0x0800cbc0
 800134c:	0800cbe8 	.word	0x0800cbe8
 8001350:	20000328 	.word	0x20000328
 8001354:	20000244 	.word	0x20000244
 8001358:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800135c:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <takeWifiPass+0x360>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	4a3b      	ldr	r2, [pc, #236]	; (8001450 <takeWifiPass+0x360>)
 8001364:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001366:	20fa      	movs	r0, #250	; 0xfa
 8001368:	f006 fffa 	bl	8008360 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800136c:	2102      	movs	r1, #2
 800136e:	4839      	ldr	r0, [pc, #228]	; (8001454 <takeWifiPass+0x364>)
 8001370:	f007 fdc6 	bl	8008f00 <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b01      	cmp	r3, #1
 8001378:	d128      	bne.n	80013cc <takeWifiPass+0x2dc>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3b01      	subs	r3, #1
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fb98 	bl	8000ab4 <getCharFromCursorPosition>
 8001384:	4603      	mov	r3, r0
 8001386:	4619      	mov	r1, r3
 8001388:	4a33      	ldr	r2, [pc, #204]	; (8001458 <takeWifiPass+0x368>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4413      	add	r3, r2
 800138e:	460a      	mov	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]

        	eepromData[tempPassStartPos] = realCharPos - 1;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	7afb      	ldrb	r3, [r7, #11]
 8001398:	3a01      	subs	r2, #1
 800139a:	b2d1      	uxtb	r1, r2
 800139c:	4a2f      	ldr	r2, [pc, #188]	; (800145c <takeWifiPass+0x36c>)
 800139e:	54d1      	strb	r1, [r2, r3]
        	tempPassStartPos++;
 80013a0:	7afb      	ldrb	r3, [r7, #11]
 80013a2:	3301      	adds	r3, #1
 80013a4:	72fb      	strb	r3, [r7, #11]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	b2d9      	uxtb	r1, r3
 80013aa:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <takeWifiPass+0x368>)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	2001      	movs	r0, #1
 80013b6:	f7ff f992 	bl	80006de <lcd_print_char>

            writeLoc++;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3301      	adds	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	3301      	adds	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 80013c6:	20fa      	movs	r0, #250	; 0xfa
 80013c8:	f006 ffca 	bl	8008360 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80013cc:	2104      	movs	r1, #4
 80013ce:	4821      	ldr	r0, [pc, #132]	; (8001454 <takeWifiPass+0x364>)
 80013d0:	f007 fd96 	bl	8008f00 <HAL_GPIO_ReadPin>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d12e      	bne.n	8001438 <takeWifiPass+0x348>
            if(strlen(wifiPass) >= 1) {
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <takeWifiPass+0x368>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d027      	beq.n	8001432 <takeWifiPass+0x342>
            	wifiPass[wifiPassLoc] = '\0';
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <takeWifiPass+0x368>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4413      	add	r3, r2
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	3306      	adds	r3, #6
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	4619      	mov	r1, r3
 80013f6:	2001      	movs	r0, #1
 80013f8:	f7ff f992 	bl	8000720 <lcd_delete_char>
            	HAL_Delay(50);
 80013fc:	2032      	movs	r0, #50	; 0x32
 80013fe:	f006 ffaf 	bl	8008360 <HAL_Delay>

            	if(writeLoc > 7) {
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b07      	cmp	r3, #7
 8001406:	dd03      	ble.n	8001410 <takeWifiPass+0x320>
            		writeLoc--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3b01      	subs	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	e004      	b.n	800141a <takeWifiPass+0x32a>
            	} else if(writeLoc < 7) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b06      	cmp	r3, #6
 8001414:	dc01      	bgt.n	800141a <takeWifiPass+0x32a>
            		writeLoc = 7;
 8001416:	2307      	movs	r3, #7
 8001418:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	dd03      	ble.n	8001428 <takeWifiPass+0x338>
            		wifiPassLoc--;
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	3b01      	subs	r3, #1
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	e004      	b.n	8001432 <takeWifiPass+0x342>
            	} else if(wifiPassLoc < 0) {
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	2b00      	cmp	r3, #0
 800142c:	da01      	bge.n	8001432 <takeWifiPass+0x342>
            		wifiPassLoc = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 8001432:	20fa      	movs	r0, #250	; 0xfa
 8001434:	f006 ff94 	bl	8008360 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <takeWifiPass+0x360>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4619      	mov	r1, r3
 8001440:	2002      	movs	r0, #2
 8001442:	f7ff f918 	bl	8000676 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001446:	e675      	b.n	8001134 <takeWifiPass+0x44>
    }
}
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000034 	.word	0x20000034
 8001454:	40010800 	.word	0x40010800
 8001458:	200003e0 	.word	0x200003e0
 800145c:	20000328 	.word	0x20000328

08001460 <checkSlideVal>:

int checkSlideVal(int state) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d111      	bne.n	8001492 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800146e:	2101      	movs	r1, #1
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <checkSlideVal+0x60>)
 8001472:	f007 fd45 	bl	8008f00 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <checkSlideVal+0x20>
			return 34;
 800147c:	2322      	movs	r3, #34	; 0x22
 800147e:	e01b      	b.n	80014b8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001480:	2108      	movs	r1, #8
 8001482:	4810      	ldr	r0, [pc, #64]	; (80014c4 <checkSlideVal+0x64>)
 8001484:	f007 fd3c 	bl	8008f00 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	2b01      	cmp	r3, #1
 800148c:	d113      	bne.n	80014b6 <checkSlideVal+0x56>
			return 32;
 800148e:	2320      	movs	r3, #32
 8001490:	e012      	b.n	80014b8 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001492:	2101      	movs	r1, #1
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <checkSlideVal+0x60>)
 8001496:	f007 fd33 	bl	8008f00 <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <checkSlideVal+0x44>
			return 35;
 80014a0:	2323      	movs	r3, #35	; 0x23
 80014a2:	e009      	b.n	80014b8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80014a4:	2108      	movs	r1, #8
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <checkSlideVal+0x64>)
 80014a8:	f007 fd2a 	bl	8008f00 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d101      	bne.n	80014b6 <checkSlideVal+0x56>
			return 33;
 80014b2:	2321      	movs	r3, #33	; 0x21
 80014b4:	e000      	b.n	80014b8 <checkSlideVal+0x58>
		}
	}
	return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40010800 	.word	0x40010800
 80014c4:	40011000 	.word	0x40011000

080014c8 <readValFromEEPROM>:

void readValFromEEPROM(int state) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d11c      	bne.n	8001510 <readValFromEEPROM+0x48>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <readValFromEEPROM+0x88>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharLimit; i++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	e012      	b.n	8001508 <readValFromEEPROM+0x40>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <readValFromEEPROM+0x8c>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fae3 	bl	8000ab4 <getCharFromCursorPosition>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4619      	mov	r1, r3
 80014f2:	4a19      	ldr	r2, [pc, #100]	; (8001558 <readValFromEEPROM+0x90>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4413      	add	r3, r2
 80014f8:	460a      	mov	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
			tempSSIDStartPos++;
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	3301      	adds	r3, #1
 8001500:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharLimit; i++) {
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	3301      	adds	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	2b13      	cmp	r3, #19
 800150c:	dde9      	ble.n	80014e2 <readValFromEEPROM+0x1a>
		for(int i=0; i<wifiCharLimit; i++) {
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
			tempPassStartPos++;
		}
	}
}
 800150e:	e01b      	b.n	8001548 <readValFromEEPROM+0x80>
		uint8_t tempPassStartPos = passStartPos;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <readValFromEEPROM+0x94>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharLimit; i++) {
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	e012      	b.n	8001542 <readValFromEEPROM+0x7a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	4a0d      	ldr	r2, [pc, #52]	; (8001554 <readValFromEEPROM+0x8c>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fac6 	bl	8000ab4 <getCharFromCursorPosition>
 8001528:	4603      	mov	r3, r0
 800152a:	4619      	mov	r1, r3
 800152c:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <readValFromEEPROM+0x98>)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	4413      	add	r3, r2
 8001532:	460a      	mov	r2, r1
 8001534:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3301      	adds	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharLimit; i++) {
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	3301      	adds	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b13      	cmp	r3, #19
 8001546:	dde9      	ble.n	800151c <readValFromEEPROM+0x54>
}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200000a2 	.word	0x200000a2
 8001554:	20000328 	.word	0x20000328
 8001558:	200003cc 	.word	0x200003cc
 800155c:	200000a3 	.word	0x200000a3
 8001560:	200003e0 	.word	0x200003e0

08001564 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7fe fe56 	bl	8000224 <strlen>
 8001578:	4603      	mov	r3, r0
 800157a:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001580:	e08a      	b.n	8001698 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	f7ff ff6c 	bl	8001460 <checkSlideVal>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	dd07      	ble.n	800159e <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f7ff ff66 	bl	8001460 <checkSlideVal>
 8001594:	4603      	mov	r3, r0
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b44      	ldr	r3, [pc, #272]	; (80016ac <slideText+0x148>)
 800159a:	701a      	strb	r2, [r3, #0]
			break;
 800159c:	e081      	b.n	80016a2 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
 80015a2:	e075      	b.n	8001690 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff ff5b 	bl	8001460 <checkSlideVal>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dd09      	ble.n	80015c4 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80015b0:	6838      	ldr	r0, [r7, #0]
 80015b2:	f7ff ff55 	bl	8001460 <checkSlideVal>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <slideText+0x148>)
 80015bc:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80015c2:	e069      	b.n	8001698 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	4413      	add	r3, r2
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	e029      	b.n	8001622 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80015ce:	6838      	ldr	r0, [r7, #0]
 80015d0:	f7ff ff46 	bl	8001460 <checkSlideVal>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	dd0b      	ble.n	80015f2 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f7ff ff40 	bl	8001460 <checkSlideVal>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <slideText+0x148>)
 80015e6:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80015f0:	e01d      	b.n	800162e <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	b2d8      	uxtb	r0, r3
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b2d9      	uxtb	r1, r3
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	461a      	mov	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	f7ff f864 	bl	80006de <lcd_print_char>
				HAL_Delay(30);
 8001616:	201e      	movs	r0, #30
 8001618:	f006 fea2 	bl	8008360 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	3301      	adds	r3, #1
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	7dfa      	ldrb	r2, [r7, #23]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4413      	add	r3, r2
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	429a      	cmp	r2, r3
 800162c:	dbcf      	blt.n	80015ce <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	3b01      	subs	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	e023      	b.n	800167e <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001636:	6838      	ldr	r0, [r7, #0]
 8001638:	f7ff ff12 	bl	8001460 <checkSlideVal>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	dd0b      	ble.n	800165a <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f7ff ff0c 	bl	8001460 <checkSlideVal>
 8001648:	4603      	mov	r3, r0
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <slideText+0x148>)
 800164e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001658:	e017      	b.n	800168a <slideText+0x126>
				}
			     if(j >= startPos) {
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	429a      	cmp	r2, r3
 8001660:	db0a      	blt.n	8001678 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	b2d1      	uxtb	r1, r2
 800166a:	2220      	movs	r2, #32
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff f836 	bl	80006de <lcd_print_char>
			    	 HAL_Delay(30);
 8001672:	201e      	movs	r0, #30
 8001674:	f006 fe74 	bl	8008360 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	3b01      	subs	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	7dfa      	ldrb	r2, [r7, #23]
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	429a      	cmp	r2, r3
 8001688:	dad5      	bge.n	8001636 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	3301      	adds	r3, #1
 800168e:	623b      	str	r3, [r7, #32]
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	6a3a      	ldr	r2, [r7, #32]
 8001694:	429a      	cmp	r2, r3
 8001696:	db85      	blt.n	80015a4 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	2b01      	cmp	r3, #1
 800169c:	f43f af71 	beq.w	8001582 <slideText+0x1e>
			     }
			}
		}
	}
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200003f8 	.word	0x200003f8

080016b0 <menu>:

void menu() {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016b4:	2101      	movs	r1, #1
 80016b6:	488f      	ldr	r0, [pc, #572]	; (80018f4 <menu+0x244>)
 80016b8:	f007 fc22 	bl	8008f00 <HAL_GPIO_ReadPin>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	f040 808e 	bne.w	80017e0 <menu+0x130>
 80016c4:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <menu+0x248>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f083 0301 	eor.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8086 	beq.w	80017e0 <menu+0x130>
		menuSayac = menuSayac+1;
 80016d4:	4b89      	ldr	r3, [pc, #548]	; (80018fc <menu+0x24c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	4b87      	ldr	r3, [pc, #540]	; (80018fc <menu+0x24c>)
 80016de:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80016e0:	4b86      	ldr	r3, [pc, #536]	; (80018fc <menu+0x24c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b24      	cmp	r3, #36	; 0x24
 80016e6:	d102      	bne.n	80016ee <menu+0x3e>
			menuSayac = 1;
 80016e8:	4b84      	ldr	r3, [pc, #528]	; (80018fc <menu+0x24c>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80016ee:	4b83      	ldr	r3, [pc, #524]	; (80018fc <menu+0x24c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d106      	bne.n	8001704 <menu+0x54>
 80016f6:	4b82      	ldr	r3, [pc, #520]	; (8001900 <menu+0x250>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <menu+0x54>
			menuSayac = 21;
 80016fe:	4b7f      	ldr	r3, [pc, #508]	; (80018fc <menu+0x24c>)
 8001700:	2215      	movs	r2, #21
 8001702:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001704:	4b7d      	ldr	r3, [pc, #500]	; (80018fc <menu+0x24c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b08      	cmp	r3, #8
 800170a:	d106      	bne.n	800171a <menu+0x6a>
 800170c:	4b7d      	ldr	r3, [pc, #500]	; (8001904 <menu+0x254>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <menu+0x6a>
			menuSayac = 16;
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <menu+0x24c>)
 8001716:	2210      	movs	r2, #16
 8001718:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800171a:	4b78      	ldr	r3, [pc, #480]	; (80018fc <menu+0x24c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b0d      	cmp	r3, #13
 8001720:	d106      	bne.n	8001730 <menu+0x80>
 8001722:	4b78      	ldr	r3, [pc, #480]	; (8001904 <menu+0x254>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d102      	bne.n	8001730 <menu+0x80>
			menuSayac = 16;
 800172a:	4b74      	ldr	r3, [pc, #464]	; (80018fc <menu+0x24c>)
 800172c:	2210      	movs	r2, #16
 800172e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001730:	4b72      	ldr	r3, [pc, #456]	; (80018fc <menu+0x24c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b09      	cmp	r3, #9
 8001736:	d106      	bne.n	8001746 <menu+0x96>
 8001738:	4b72      	ldr	r3, [pc, #456]	; (8001904 <menu+0x254>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d102      	bne.n	8001746 <menu+0x96>
			menuSayac = 13;
 8001740:	4b6e      	ldr	r3, [pc, #440]	; (80018fc <menu+0x24c>)
 8001742:	220d      	movs	r2, #13
 8001744:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001746:	4b6d      	ldr	r3, [pc, #436]	; (80018fc <menu+0x24c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b0a      	cmp	r3, #10
 800174c:	d10a      	bne.n	8001764 <menu+0xb4>
 800174e:	4b6e      	ldr	r3, [pc, #440]	; (8001908 <menu+0x258>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d003      	beq.n	800175e <menu+0xae>
 8001756:	4b6c      	ldr	r3, [pc, #432]	; (8001908 <menu+0x258>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d102      	bne.n	8001764 <menu+0xb4>
			menuSayac = 11;
 800175e:	4b67      	ldr	r3, [pc, #412]	; (80018fc <menu+0x24c>)
 8001760:	220b      	movs	r2, #11
 8001762:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001764:	4b65      	ldr	r3, [pc, #404]	; (80018fc <menu+0x24c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b0c      	cmp	r3, #12
 800176a:	d10e      	bne.n	800178a <menu+0xda>
 800176c:	4b67      	ldr	r3, [pc, #412]	; (800190c <menu+0x25c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d003      	beq.n	800177c <menu+0xcc>
 8001774:	4b65      	ldr	r3, [pc, #404]	; (800190c <menu+0x25c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d106      	bne.n	800178a <menu+0xda>
 800177c:	4b61      	ldr	r3, [pc, #388]	; (8001904 <menu+0x254>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d102      	bne.n	800178a <menu+0xda>
			menuSayac = 16;
 8001784:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <menu+0x24c>)
 8001786:	2210      	movs	r2, #16
 8001788:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800178a:	4b5c      	ldr	r3, [pc, #368]	; (80018fc <menu+0x24c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d10e      	bne.n	80017b0 <menu+0x100>
 8001792:	4b5e      	ldr	r3, [pc, #376]	; (800190c <menu+0x25c>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d003      	beq.n	80017a2 <menu+0xf2>
 800179a:	4b5c      	ldr	r3, [pc, #368]	; (800190c <menu+0x25c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d106      	bne.n	80017b0 <menu+0x100>
 80017a2:	4b58      	ldr	r3, [pc, #352]	; (8001904 <menu+0x254>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d102      	bne.n	80017b0 <menu+0x100>
			menuSayac = 13;
 80017aa:	4b54      	ldr	r3, [pc, #336]	; (80018fc <menu+0x24c>)
 80017ac:	220d      	movs	r2, #13
 80017ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017b0:	4b52      	ldr	r3, [pc, #328]	; (80018fc <menu+0x24c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d106      	bne.n	80017c6 <menu+0x116>
 80017b8:	4b55      	ldr	r3, [pc, #340]	; (8001910 <menu+0x260>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d102      	bne.n	80017c6 <menu+0x116>
			menuSayac = 16;
 80017c0:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <menu+0x24c>)
 80017c2:	2210      	movs	r2, #16
 80017c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80017c6:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <menu+0x24c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b18      	cmp	r3, #24
 80017cc:	d106      	bne.n	80017dc <menu+0x12c>
 80017ce:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <menu+0x250>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <menu+0x12c>
			menuSayac = 26;
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <menu+0x24c>)
 80017d8:	221a      	movs	r2, #26
 80017da:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017dc:	f003 fef0 	bl	80055c0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80017e0:	2108      	movs	r1, #8
 80017e2:	484c      	ldr	r0, [pc, #304]	; (8001914 <menu+0x264>)
 80017e4:	f007 fb8c 	bl	8008f00 <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d175      	bne.n	80018da <menu+0x22a>
 80017ee:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <menu+0x248>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	f083 0301 	eor.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d06e      	beq.n	80018da <menu+0x22a>
		if (menuSayac <= 1) {
 80017fc:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <menu+0x24c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d802      	bhi.n	800180a <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001804:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <menu+0x24c>)
 8001806:	2224      	movs	r2, #36	; 0x24
 8001808:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <menu+0x24c>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	3b01      	subs	r3, #1
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <menu+0x24c>)
 8001814:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <menu+0x24c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b14      	cmp	r3, #20
 800181c:	d106      	bne.n	800182c <menu+0x17c>
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <menu+0x250>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <menu+0x17c>
			menuSayac = 17;
 8001826:	4b35      	ldr	r3, [pc, #212]	; (80018fc <menu+0x24c>)
 8001828:	2211      	movs	r2, #17
 800182a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800182c:	4b33      	ldr	r3, [pc, #204]	; (80018fc <menu+0x24c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d106      	bne.n	8001842 <menu+0x192>
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <menu+0x254>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <menu+0x192>
			menuSayac = 7;
 800183c:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <menu+0x24c>)
 800183e:	2207      	movs	r2, #7
 8001840:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <menu+0x24c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	d106      	bne.n	8001858 <menu+0x1a8>
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <menu+0x254>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d102      	bne.n	8001858 <menu+0x1a8>
			menuSayac = 12;
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <menu+0x24c>)
 8001854:	220c      	movs	r2, #12
 8001856:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <menu+0x24c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d106      	bne.n	800186e <menu+0x1be>
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <menu+0x254>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d102      	bne.n	800186e <menu+0x1be>
			menuSayac = 8;
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <menu+0x24c>)
 800186a:	2208      	movs	r2, #8
 800186c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <menu+0x24c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d10a      	bne.n	800188c <menu+0x1dc>
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <menu+0x258>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d003      	beq.n	8001886 <menu+0x1d6>
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <menu+0x258>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d102      	bne.n	800188c <menu+0x1dc>
			menuSayac = 9;
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <menu+0x24c>)
 8001888:	2209      	movs	r2, #9
 800188a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <menu+0x24c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b0c      	cmp	r3, #12
 8001892:	d10a      	bne.n	80018aa <menu+0x1fa>
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <menu+0x25c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d003      	beq.n	80018a4 <menu+0x1f4>
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <menu+0x25c>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d102      	bne.n	80018aa <menu+0x1fa>
			menuSayac = 11;
 80018a4:	4b15      	ldr	r3, [pc, #84]	; (80018fc <menu+0x24c>)
 80018a6:	220b      	movs	r2, #11
 80018a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <menu+0x24c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	d106      	bne.n	80018c0 <menu+0x210>
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <menu+0x260>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d102      	bne.n	80018c0 <menu+0x210>
			menuSayac = 14;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <menu+0x24c>)
 80018bc:	220e      	movs	r2, #14
 80018be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <menu+0x24c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b19      	cmp	r3, #25
 80018c6:	d106      	bne.n	80018d6 <menu+0x226>
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <menu+0x250>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <menu+0x226>
			menuSayac = 23;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <menu+0x24c>)
 80018d2:	2217      	movs	r2, #23
 80018d4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80018d6:	f003 fe73 	bl	80055c0 <bekle>
	}

	if (menuSayac == 0) {
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <menu+0x24c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d134      	bne.n	800194c <menu+0x29c>
		if(dilSecim == 0) {
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <menu+0x268>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d122      	bne.n	8001930 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80018ea:	4a0c      	ldr	r2, [pc, #48]	; (800191c <menu+0x26c>)
 80018ec:	2101      	movs	r1, #1
 80018ee:	2001      	movs	r0, #1
 80018f0:	e016      	b.n	8001920 <menu+0x270>
 80018f2:	bf00      	nop
 80018f4:	40010800 	.word	0x40010800
 80018f8:	20000427 	.word	0x20000427
 80018fc:	200003f8 	.word	0x200003f8
 8001900:	20000407 	.word	0x20000407
 8001904:	20000400 	.word	0x20000400
 8001908:	20000401 	.word	0x20000401
 800190c:	20000402 	.word	0x20000402
 8001910:	20000403 	.word	0x20000403
 8001914:	40011000 	.word	0x40011000
 8001918:	20000419 	.word	0x20000419
 800191c:	0800cbfc 	.word	0x0800cbfc
 8001920:	f7fe fec8 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001924:	4a94      	ldr	r2, [pc, #592]	; (8001b78 <menu+0x4c8>)
 8001926:	2101      	movs	r1, #1
 8001928:	2002      	movs	r0, #2
 800192a:	f7fe fec3 	bl	80006b4 <lcd_print>
 800192e:	e00d      	b.n	800194c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001930:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <menu+0x4cc>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d109      	bne.n	800194c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001938:	4a91      	ldr	r2, [pc, #580]	; (8001b80 <menu+0x4d0>)
 800193a:	2101      	movs	r1, #1
 800193c:	2001      	movs	r0, #1
 800193e:	f7fe feb9 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001942:	4a90      	ldr	r2, [pc, #576]	; (8001b84 <menu+0x4d4>)
 8001944:	2101      	movs	r1, #1
 8001946:	2002      	movs	r0, #2
 8001948:	f7fe feb4 	bl	80006b4 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800194c:	4b8e      	ldr	r3, [pc, #568]	; (8001b88 <menu+0x4d8>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	f040 82b5 	bne.w	8001ec0 <menu+0x810>
		if(dilSecim == 0) {
 8001956:	4b89      	ldr	r3, [pc, #548]	; (8001b7c <menu+0x4cc>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d105      	bne.n	800196a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800195e:	4a8b      	ldr	r2, [pc, #556]	; (8001b8c <menu+0x4dc>)
 8001960:	2101      	movs	r1, #1
 8001962:	2001      	movs	r0, #1
 8001964:	f7fe fea6 	bl	80006b4 <lcd_print>
 8001968:	e008      	b.n	800197c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800196a:	4b84      	ldr	r3, [pc, #528]	; (8001b7c <menu+0x4cc>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d104      	bne.n	800197c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001972:	4a87      	ldr	r2, [pc, #540]	; (8001b90 <menu+0x4e0>)
 8001974:	2101      	movs	r1, #1
 8001976:	2001      	movs	r0, #1
 8001978:	f7fe fe9c 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800197c:	4b85      	ldr	r3, [pc, #532]	; (8001b94 <menu+0x4e4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d123      	bne.n	80019cc <menu+0x31c>
			if(dilSecim == 0) {
 8001984:	4b7d      	ldr	r3, [pc, #500]	; (8001b7c <menu+0x4cc>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800198c:	4a82      	ldr	r2, [pc, #520]	; (8001b98 <menu+0x4e8>)
 800198e:	2101      	movs	r1, #1
 8001990:	2002      	movs	r0, #2
 8001992:	f7fe fe8f 	bl	80006b4 <lcd_print>
 8001996:	e008      	b.n	80019aa <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001998:	4b78      	ldr	r3, [pc, #480]	; (8001b7c <menu+0x4cc>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d104      	bne.n	80019aa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80019a0:	4a7e      	ldr	r2, [pc, #504]	; (8001b9c <menu+0x4ec>)
 80019a2:	2101      	movs	r1, #1
 80019a4:	2002      	movs	r0, #2
 80019a6:	f7fe fe85 	bl	80006b4 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80019aa:	4a7d      	ldr	r2, [pc, #500]	; (8001ba0 <menu+0x4f0>)
 80019ac:	210f      	movs	r1, #15
 80019ae:	2002      	movs	r0, #2
 80019b0:	f7fe fe80 	bl	80006b4 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80019b4:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <menu+0x4f4>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	220a      	movs	r2, #10
 80019ba:	497b      	ldr	r1, [pc, #492]	; (8001ba8 <menu+0x4f8>)
 80019bc:	4618      	mov	r0, r3
 80019be:	f00a facb 	bl	800bf58 <itoa>
			lcd_print(2, 14, snum);
 80019c2:	4a79      	ldr	r2, [pc, #484]	; (8001ba8 <menu+0x4f8>)
 80019c4:	210e      	movs	r1, #14
 80019c6:	2002      	movs	r0, #2
 80019c8:	f7fe fe74 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80019cc:	4b71      	ldr	r3, [pc, #452]	; (8001b94 <menu+0x4e4>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d123      	bne.n	8001a1c <menu+0x36c>
			if(dilSecim == 0) {
 80019d4:	4b69      	ldr	r3, [pc, #420]	; (8001b7c <menu+0x4cc>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80019dc:	4a73      	ldr	r2, [pc, #460]	; (8001bac <menu+0x4fc>)
 80019de:	2101      	movs	r1, #1
 80019e0:	2002      	movs	r0, #2
 80019e2:	f7fe fe67 	bl	80006b4 <lcd_print>
 80019e6:	e008      	b.n	80019fa <menu+0x34a>
			} else if(dilSecim == 1) {
 80019e8:	4b64      	ldr	r3, [pc, #400]	; (8001b7c <menu+0x4cc>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d104      	bne.n	80019fa <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80019f0:	4a6f      	ldr	r2, [pc, #444]	; (8001bb0 <menu+0x500>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	2002      	movs	r0, #2
 80019f6:	f7fe fe5d 	bl	80006b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019fa:	4a6e      	ldr	r2, [pc, #440]	; (8001bb4 <menu+0x504>)
 80019fc:	210f      	movs	r1, #15
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7fe fe58 	bl	80006b4 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001a04:	4b6c      	ldr	r3, [pc, #432]	; (8001bb8 <menu+0x508>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	220a      	movs	r2, #10
 8001a0a:	4967      	ldr	r1, [pc, #412]	; (8001ba8 <menu+0x4f8>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f00a faa3 	bl	800bf58 <itoa>
			lcd_print(2, 14, snum);
 8001a12:	4a65      	ldr	r2, [pc, #404]	; (8001ba8 <menu+0x4f8>)
 8001a14:	210e      	movs	r1, #14
 8001a16:	2002      	movs	r0, #2
 8001a18:	f7fe fe4c 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001a1c:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <menu+0x4e4>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d123      	bne.n	8001a6c <menu+0x3bc>
			if(dilSecim == 0) {
 8001a24:	4b55      	ldr	r3, [pc, #340]	; (8001b7c <menu+0x4cc>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001a2c:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <menu+0x50c>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	2002      	movs	r0, #2
 8001a32:	f7fe fe3f 	bl	80006b4 <lcd_print>
 8001a36:	e008      	b.n	8001a4a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001a38:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <menu+0x4cc>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d104      	bne.n	8001a4a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001a40:	4a5f      	ldr	r2, [pc, #380]	; (8001bc0 <menu+0x510>)
 8001a42:	2101      	movs	r1, #1
 8001a44:	2002      	movs	r0, #2
 8001a46:	f7fe fe35 	bl	80006b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a4a:	4a5a      	ldr	r2, [pc, #360]	; (8001bb4 <menu+0x504>)
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	2002      	movs	r0, #2
 8001a50:	f7fe fe30 	bl	80006b4 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001a54:	4b5b      	ldr	r3, [pc, #364]	; (8001bc4 <menu+0x514>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	220a      	movs	r2, #10
 8001a5a:	4953      	ldr	r1, [pc, #332]	; (8001ba8 <menu+0x4f8>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00a fa7b 	bl	800bf58 <itoa>
			lcd_print(2, 14, snum);
 8001a62:	4a51      	ldr	r2, [pc, #324]	; (8001ba8 <menu+0x4f8>)
 8001a64:	210e      	movs	r1, #14
 8001a66:	2002      	movs	r0, #2
 8001a68:	f7fe fe24 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001a6c:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <menu+0x4e4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d123      	bne.n	8001abc <menu+0x40c>
			if(dilSecim == 0) {
 8001a74:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <menu+0x4cc>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <menu+0x518>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7fe fe17 	bl	80006b4 <lcd_print>
 8001a86:	e008      	b.n	8001a9a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001a88:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <menu+0x4cc>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d104      	bne.n	8001a9a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001a90:	4a4e      	ldr	r2, [pc, #312]	; (8001bcc <menu+0x51c>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	2002      	movs	r0, #2
 8001a96:	f7fe fe0d 	bl	80006b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a9a:	4a46      	ldr	r2, [pc, #280]	; (8001bb4 <menu+0x504>)
 8001a9c:	210f      	movs	r1, #15
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	f7fe fe08 	bl	80006b4 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001aa4:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <menu+0x520>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	220a      	movs	r2, #10
 8001aaa:	493f      	ldr	r1, [pc, #252]	; (8001ba8 <menu+0x4f8>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00a fa53 	bl	800bf58 <itoa>
			lcd_print(2, 14, snum);
 8001ab2:	4a3d      	ldr	r2, [pc, #244]	; (8001ba8 <menu+0x4f8>)
 8001ab4:	210e      	movs	r1, #14
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f7fe fdfc 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001abc:	4b35      	ldr	r3, [pc, #212]	; (8001b94 <menu+0x4e4>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d123      	bne.n	8001b0c <menu+0x45c>
			if(dilSecim == 0) {
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <menu+0x4cc>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001acc:	4a41      	ldr	r2, [pc, #260]	; (8001bd4 <menu+0x524>)
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f7fe fdef 	bl	80006b4 <lcd_print>
 8001ad6:	e008      	b.n	8001aea <menu+0x43a>
			} else if(dilSecim == 1) {
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <menu+0x4cc>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d104      	bne.n	8001aea <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001ae0:	4a3d      	ldr	r2, [pc, #244]	; (8001bd8 <menu+0x528>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f7fe fde5 	bl	80006b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001aea:	4a32      	ldr	r2, [pc, #200]	; (8001bb4 <menu+0x504>)
 8001aec:	210f      	movs	r1, #15
 8001aee:	2002      	movs	r0, #2
 8001af0:	f7fe fde0 	bl	80006b4 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001af4:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <menu+0x52c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	220a      	movs	r2, #10
 8001afa:	492b      	ldr	r1, [pc, #172]	; (8001ba8 <menu+0x4f8>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00a fa2b 	bl	800bf58 <itoa>
			lcd_print(2, 14, snum);
 8001b02:	4a29      	ldr	r2, [pc, #164]	; (8001ba8 <menu+0x4f8>)
 8001b04:	210e      	movs	r1, #14
 8001b06:	2002      	movs	r0, #2
 8001b08:	f7fe fdd4 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <menu+0x4e4>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d123      	bne.n	8001b5c <menu+0x4ac>
			if(dilSecim == 0) {
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <menu+0x4cc>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001b1c:	4a30      	ldr	r2, [pc, #192]	; (8001be0 <menu+0x530>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	2002      	movs	r0, #2
 8001b22:	f7fe fdc7 	bl	80006b4 <lcd_print>
 8001b26:	e008      	b.n	8001b3a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <menu+0x4cc>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d104      	bne.n	8001b3a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001b30:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <menu+0x534>)
 8001b32:	2101      	movs	r1, #1
 8001b34:	2002      	movs	r0, #2
 8001b36:	f7fe fdbd 	bl	80006b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <menu+0x504>)
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f7fe fdb8 	bl	80006b4 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <menu+0x538>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	220a      	movs	r2, #10
 8001b4a:	4917      	ldr	r1, [pc, #92]	; (8001ba8 <menu+0x4f8>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f00a fa03 	bl	800bf58 <itoa>
			lcd_print(2, 14, snum);
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <menu+0x4f8>)
 8001b54:	210e      	movs	r1, #14
 8001b56:	2002      	movs	r0, #2
 8001b58:	f7fe fdac 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <menu+0x4e4>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b06      	cmp	r3, #6
 8001b62:	d15f      	bne.n	8001c24 <menu+0x574>
			if(dilSecim == 0) {
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <menu+0x4cc>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d141      	bne.n	8001bf0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001b6c:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <menu+0x53c>)
 8001b6e:	2101      	movs	r1, #1
 8001b70:	2002      	movs	r0, #2
 8001b72:	f7fe fd9f 	bl	80006b4 <lcd_print>
 8001b76:	e044      	b.n	8001c02 <menu+0x552>
 8001b78:	0800cc10 	.word	0x0800cc10
 8001b7c:	20000419 	.word	0x20000419
 8001b80:	0800cc24 	.word	0x0800cc24
 8001b84:	0800cc38 	.word	0x0800cc38
 8001b88:	200003f8 	.word	0x200003f8
 8001b8c:	0800cc4c 	.word	0x0800cc4c
 8001b90:	0800cc60 	.word	0x0800cc60
 8001b94:	200003fa 	.word	0x200003fa
 8001b98:	0800cc74 	.word	0x0800cc74
 8001b9c:	0800cc84 	.word	0x0800cc84
 8001ba0:	0800cc94 	.word	0x0800cc94
 8001ba4:	2000041a 	.word	0x2000041a
 8001ba8:	20000398 	.word	0x20000398
 8001bac:	0800cc98 	.word	0x0800cc98
 8001bb0:	0800cca8 	.word	0x0800cca8
 8001bb4:	0800ccb8 	.word	0x0800ccb8
 8001bb8:	2000041b 	.word	0x2000041b
 8001bbc:	0800ccbc 	.word	0x0800ccbc
 8001bc0:	0800cccc 	.word	0x0800cccc
 8001bc4:	2000041c 	.word	0x2000041c
 8001bc8:	0800ccdc 	.word	0x0800ccdc
 8001bcc:	0800ccec 	.word	0x0800ccec
 8001bd0:	2000041d 	.word	0x2000041d
 8001bd4:	0800ccfc 	.word	0x0800ccfc
 8001bd8:	0800cd0c 	.word	0x0800cd0c
 8001bdc:	2000041e 	.word	0x2000041e
 8001be0:	0800cd1c 	.word	0x0800cd1c
 8001be4:	0800cd2c 	.word	0x0800cd2c
 8001be8:	2000041f 	.word	0x2000041f
 8001bec:	0800cd3c 	.word	0x0800cd3c
			} else if(dilSecim == 1) {
 8001bf0:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <menu+0x680>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d104      	bne.n	8001c02 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001bf8:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <menu+0x684>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f7fe fd59 	bl	80006b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c02:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <menu+0x688>)
 8001c04:	210f      	movs	r1, #15
 8001c06:	2002      	movs	r0, #2
 8001c08:	f7fe fd54 	bl	80006b4 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <menu+0x68c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	220a      	movs	r2, #10
 8001c12:	494b      	ldr	r1, [pc, #300]	; (8001d40 <menu+0x690>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00a f99f 	bl	800bf58 <itoa>
			lcd_print(2, 14, snum);
 8001c1a:	4a49      	ldr	r2, [pc, #292]	; (8001d40 <menu+0x690>)
 8001c1c:	210e      	movs	r1, #14
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f7fe fd48 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001c24:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <menu+0x694>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b07      	cmp	r3, #7
 8001c2a:	d123      	bne.n	8001c74 <menu+0x5c4>
			if(dilSecim == 0) {
 8001c2c:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <menu+0x680>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001c34:	4a44      	ldr	r2, [pc, #272]	; (8001d48 <menu+0x698>)
 8001c36:	2101      	movs	r1, #1
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f7fe fd3b 	bl	80006b4 <lcd_print>
 8001c3e:	e008      	b.n	8001c52 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001c40:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <menu+0x680>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d104      	bne.n	8001c52 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001c48:	4a40      	ldr	r2, [pc, #256]	; (8001d4c <menu+0x69c>)
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f7fe fd31 	bl	80006b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c52:	4a39      	ldr	r2, [pc, #228]	; (8001d38 <menu+0x688>)
 8001c54:	210f      	movs	r1, #15
 8001c56:	2002      	movs	r0, #2
 8001c58:	f7fe fd2c 	bl	80006b4 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001c5c:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <menu+0x6a0>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	220a      	movs	r2, #10
 8001c62:	4937      	ldr	r1, [pc, #220]	; (8001d40 <menu+0x690>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f00a f977 	bl	800bf58 <itoa>
			lcd_print(2, 14, snum);
 8001c6a:	4a35      	ldr	r2, [pc, #212]	; (8001d40 <menu+0x690>)
 8001c6c:	210e      	movs	r1, #14
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f7fe fd20 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001c74:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <menu+0x694>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d123      	bne.n	8001cc4 <menu+0x614>
			if(dilSecim == 0) {
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <menu+0x680>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001c84:	4a33      	ldr	r2, [pc, #204]	; (8001d54 <menu+0x6a4>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f7fe fd13 	bl	80006b4 <lcd_print>
 8001c8e:	e008      	b.n	8001ca2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <menu+0x680>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d104      	bne.n	8001ca2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001c98:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <menu+0x6a8>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	f7fe fd09 	bl	80006b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001ca2:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <menu+0x688>)
 8001ca4:	210f      	movs	r1, #15
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f7fe fd04 	bl	80006b4 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001cac:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <menu+0x6ac>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	220a      	movs	r2, #10
 8001cb2:	4923      	ldr	r1, [pc, #140]	; (8001d40 <menu+0x690>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f00a f94f 	bl	800bf58 <itoa>
			lcd_print(2, 14, snum);
 8001cba:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <menu+0x690>)
 8001cbc:	210e      	movs	r1, #14
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f7fe fcf8 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <menu+0x694>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b09      	cmp	r3, #9
 8001cca:	d123      	bne.n	8001d14 <menu+0x664>
			if(dilSecim == 0) {
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <menu+0x680>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001cd4:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <menu+0x6b0>)
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f7fe fceb 	bl	80006b4 <lcd_print>
 8001cde:	e008      	b.n	8001cf2 <menu+0x642>
			} else if(dilSecim == 1) {
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <menu+0x680>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d104      	bne.n	8001cf2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001ce8:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <menu+0x6b4>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	2002      	movs	r0, #2
 8001cee:	f7fe fce1 	bl	80006b4 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001cf2:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <menu+0x6b8>)
 8001cf4:	2110      	movs	r1, #16
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	f7fe fcdc 	bl	80006b4 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <menu+0x6bc>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	220a      	movs	r2, #10
 8001d02:	490f      	ldr	r1, [pc, #60]	; (8001d40 <menu+0x690>)
 8001d04:	4618      	mov	r0, r3
 8001d06:	f00a f927 	bl	800bf58 <itoa>
			lcd_print(2, 15, snum);
 8001d0a:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <menu+0x690>)
 8001d0c:	210f      	movs	r1, #15
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f7fe fcd0 	bl	80006b4 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <menu+0x694>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b0a      	cmp	r3, #10
 8001d1a:	d134      	bne.n	8001d86 <menu+0x6d6>
			if(dilSecim == 0) {
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <menu+0x680>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d127      	bne.n	8001d74 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001d24:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <menu+0x6c0>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	2002      	movs	r0, #2
 8001d2a:	f7fe fcc3 	bl	80006b4 <lcd_print>
 8001d2e:	e02a      	b.n	8001d86 <menu+0x6d6>
 8001d30:	20000419 	.word	0x20000419
 8001d34:	0800cd4c 	.word	0x0800cd4c
 8001d38:	0800ccb8 	.word	0x0800ccb8
 8001d3c:	20000420 	.word	0x20000420
 8001d40:	20000398 	.word	0x20000398
 8001d44:	200003fa 	.word	0x200003fa
 8001d48:	0800cd5c 	.word	0x0800cd5c
 8001d4c:	0800cd6c 	.word	0x0800cd6c
 8001d50:	20000421 	.word	0x20000421
 8001d54:	0800cd7c 	.word	0x0800cd7c
 8001d58:	0800cd8c 	.word	0x0800cd8c
 8001d5c:	20000422 	.word	0x20000422
 8001d60:	0800cd9c 	.word	0x0800cd9c
 8001d64:	0800cdac 	.word	0x0800cdac
 8001d68:	0800cdbc 	.word	0x0800cdbc
 8001d6c:	20000423 	.word	0x20000423
 8001d70:	0800cdc0 	.word	0x0800cdc0
			} else if(dilSecim == 1) {
 8001d74:	4b82      	ldr	r3, [pc, #520]	; (8001f80 <menu+0x8d0>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d104      	bne.n	8001d86 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001d7c:	4a81      	ldr	r2, [pc, #516]	; (8001f84 <menu+0x8d4>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	2002      	movs	r0, #2
 8001d82:	f7fe fc97 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d86:	2102      	movs	r1, #2
 8001d88:	487f      	ldr	r0, [pc, #508]	; (8001f88 <menu+0x8d8>)
 8001d8a:	f007 f8b9 	bl	8008f00 <HAL_GPIO_ReadPin>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d119      	bne.n	8001dc8 <menu+0x718>
 8001d94:	4b7d      	ldr	r3, [pc, #500]	; (8001f8c <menu+0x8dc>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f083 0301 	eor.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d012      	beq.n	8001dc8 <menu+0x718>
 8001da2:	4b7b      	ldr	r3, [pc, #492]	; (8001f90 <menu+0x8e0>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10e      	bne.n	8001dc8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001daa:	4b7a      	ldr	r3, [pc, #488]	; (8001f94 <menu+0x8e4>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <menu+0x8e4>)
 8001db4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001db6:	4b77      	ldr	r3, [pc, #476]	; (8001f94 <menu+0x8e4>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b0a      	cmp	r3, #10
 8001dbc:	d902      	bls.n	8001dc4 <menu+0x714>
				hataGostermeSirasi = 0;
 8001dbe:	4b75      	ldr	r3, [pc, #468]	; (8001f94 <menu+0x8e4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dc4:	f003 fbfc 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001dc8:	2104      	movs	r1, #4
 8001dca:	486f      	ldr	r0, [pc, #444]	; (8001f88 <menu+0x8d8>)
 8001dcc:	f007 f898 	bl	8008f00 <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d119      	bne.n	8001e0a <menu+0x75a>
 8001dd6:	4b6d      	ldr	r3, [pc, #436]	; (8001f8c <menu+0x8dc>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	f083 0301 	eor.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d012      	beq.n	8001e0a <menu+0x75a>
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <menu+0x8e0>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10e      	bne.n	8001e0a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001dec:	4b69      	ldr	r3, [pc, #420]	; (8001f94 <menu+0x8e4>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <menu+0x8e4>)
 8001df6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001df8:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <menu+0x8e4>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b0b      	cmp	r3, #11
 8001dfe:	d902      	bls.n	8001e06 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001e00:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <menu+0x8e4>)
 8001e02:	220a      	movs	r2, #10
 8001e04:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e06:	f003 fbdb 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	485e      	ldr	r0, [pc, #376]	; (8001f88 <menu+0x8d8>)
 8001e0e:	f007 f877 	bl	8008f00 <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d153      	bne.n	8001ec0 <menu+0x810>
 8001e18:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <menu+0x8dc>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f083 0301 	eor.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d04c      	beq.n	8001ec0 <menu+0x810>
 8001e26:	4b5b      	ldr	r3, [pc, #364]	; (8001f94 <menu+0x8e4>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b0a      	cmp	r3, #10
 8001e2c:	d148      	bne.n	8001ec0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001e2e:	4b5a      	ldr	r3, [pc, #360]	; (8001f98 <menu+0x8e8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <menu+0x8ec>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001e3c:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <menu+0x8f0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <menu+0x8ec>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001e4a:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <menu+0x8f4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <menu+0x8ec>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <menu+0x8f8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <menu+0x8ec>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001e66:	4b51      	ldr	r3, [pc, #324]	; (8001fac <menu+0x8fc>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	; (8001f9c <menu+0x8ec>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001e74:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <menu+0x900>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	4b48      	ldr	r3, [pc, #288]	; (8001f9c <menu+0x8ec>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001e82:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <menu+0x904>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	4b44      	ldr	r3, [pc, #272]	; (8001f9c <menu+0x8ec>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001e90:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <menu+0x908>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <menu+0x8ec>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001e9e:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <menu+0x90c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <menu+0x8ec>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001eac:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <menu+0x910>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <menu+0x8ec>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001eba:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <menu+0x914>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001ec0:	4b41      	ldr	r3, [pc, #260]	; (8001fc8 <menu+0x918>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	f040 80fc 	bne.w	80020c2 <menu+0xa12>
		if(dilSecim == 0) {
 8001eca:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <menu+0x8d0>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001ed2:	4a3e      	ldr	r2, [pc, #248]	; (8001fcc <menu+0x91c>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7fe fbec 	bl	80006b4 <lcd_print>
 8001edc:	e008      	b.n	8001ef0 <menu+0x840>
		} else if(dilSecim == 1) {
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <menu+0x8d0>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d104      	bne.n	8001ef0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <menu+0x920>)
 8001ee8:	2101      	movs	r1, #1
 8001eea:	2001      	movs	r0, #1
 8001eec:	f7fe fbe2 	bl	80006b4 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <menu+0x8e0>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d003      	beq.n	8001f00 <menu+0x850>
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <menu+0x8e0>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d112      	bne.n	8001f26 <menu+0x876>
			if(dilSecim == 0) {
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <menu+0x8d0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001f08:	4a32      	ldr	r2, [pc, #200]	; (8001fd4 <menu+0x924>)
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f7fe fbd1 	bl	80006b4 <lcd_print>
 8001f12:	e008      	b.n	8001f26 <menu+0x876>
			} else if(dilSecim == 1) {
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <menu+0x8d0>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d104      	bne.n	8001f26 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001f1c:	4a2e      	ldr	r2, [pc, #184]	; (8001fd8 <menu+0x928>)
 8001f1e:	2101      	movs	r1, #1
 8001f20:	2002      	movs	r0, #2
 8001f22:	f7fe fbc7 	bl	80006b4 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <menu+0x92c>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d116      	bne.n	8001f5c <menu+0x8ac>
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <menu+0x8e0>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d112      	bne.n	8001f5c <menu+0x8ac>
			if(dilSecim == 0) {
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <menu+0x8d0>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <menu+0x930>)
 8001f40:	2101      	movs	r1, #1
 8001f42:	2002      	movs	r0, #2
 8001f44:	f7fe fbb6 	bl	80006b4 <lcd_print>
 8001f48:	e008      	b.n	8001f5c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <menu+0x8d0>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d104      	bne.n	8001f5c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001f52:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <menu+0x934>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	2002      	movs	r0, #2
 8001f58:	f7fe fbac 	bl	80006b4 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <menu+0x92c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d14c      	bne.n	8001ffe <menu+0x94e>
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <menu+0x8e0>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d148      	bne.n	8001ffe <menu+0x94e>
			if(dilSecim == 0) {
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <menu+0x8d0>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d13b      	bne.n	8001fec <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001f74:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <menu+0x938>)
 8001f76:	2101      	movs	r1, #1
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f7fe fb9b 	bl	80006b4 <lcd_print>
 8001f7e:	e03e      	b.n	8001ffe <menu+0x94e>
 8001f80:	20000419 	.word	0x20000419
 8001f84:	0800cdd4 	.word	0x0800cdd4
 8001f88:	40010800 	.word	0x40010800
 8001f8c:	20000427 	.word	0x20000427
 8001f90:	20000407 	.word	0x20000407
 8001f94:	200003fa 	.word	0x200003fa
 8001f98:	2000041a 	.word	0x2000041a
 8001f9c:	20000328 	.word	0x20000328
 8001fa0:	2000041b 	.word	0x2000041b
 8001fa4:	2000041c 	.word	0x2000041c
 8001fa8:	2000041d 	.word	0x2000041d
 8001fac:	2000041e 	.word	0x2000041e
 8001fb0:	2000041f 	.word	0x2000041f
 8001fb4:	20000420 	.word	0x20000420
 8001fb8:	20000421 	.word	0x20000421
 8001fbc:	20000422 	.word	0x20000422
 8001fc0:	20000423 	.word	0x20000423
 8001fc4:	20000424 	.word	0x20000424
 8001fc8:	200003f8 	.word	0x200003f8
 8001fcc:	0800cde8 	.word	0x0800cde8
 8001fd0:	0800cdfc 	.word	0x0800cdfc
 8001fd4:	0800ce10 	.word	0x0800ce10
 8001fd8:	0800ce24 	.word	0x0800ce24
 8001fdc:	200003f9 	.word	0x200003f9
 8001fe0:	0800ce38 	.word	0x0800ce38
 8001fe4:	0800ce48 	.word	0x0800ce48
 8001fe8:	0800ce58 	.word	0x0800ce58
			} else if(dilSecim == 1) {
 8001fec:	4b98      	ldr	r3, [pc, #608]	; (8002250 <menu+0xba0>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d104      	bne.n	8001ffe <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001ff4:	4a97      	ldr	r2, [pc, #604]	; (8002254 <menu+0xba4>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f7fe fb5b 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ffe:	2102      	movs	r1, #2
 8002000:	4895      	ldr	r0, [pc, #596]	; (8002258 <menu+0xba8>)
 8002002:	f006 ff7d 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d119      	bne.n	8002040 <menu+0x990>
 800200c:	4b93      	ldr	r3, [pc, #588]	; (800225c <menu+0xbac>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <menu+0x990>
 800201a:	4b91      	ldr	r3, [pc, #580]	; (8002260 <menu+0xbb0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10e      	bne.n	8002040 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8002022:	4b90      	ldr	r3, [pc, #576]	; (8002264 <menu+0xbb4>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b8e      	ldr	r3, [pc, #568]	; (8002264 <menu+0xbb4>)
 800202c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 800202e:	4b8d      	ldr	r3, [pc, #564]	; (8002264 <menu+0xbb4>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d902      	bls.n	800203c <menu+0x98c>
				calismaSekli = 0;
 8002036:	4b8b      	ldr	r3, [pc, #556]	; (8002264 <menu+0xbb4>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800203c:	f003 fac0 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002040:	2104      	movs	r1, #4
 8002042:	4885      	ldr	r0, [pc, #532]	; (8002258 <menu+0xba8>)
 8002044:	f006 ff5c 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002048:	4603      	mov	r3, r0
 800204a:	2b01      	cmp	r3, #1
 800204c:	d119      	bne.n	8002082 <menu+0x9d2>
 800204e:	4b83      	ldr	r3, [pc, #524]	; (800225c <menu+0xbac>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d012      	beq.n	8002082 <menu+0x9d2>
 800205c:	4b80      	ldr	r3, [pc, #512]	; (8002260 <menu+0xbb0>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10e      	bne.n	8002082 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8002064:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <menu+0xbb4>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	4b7d      	ldr	r3, [pc, #500]	; (8002264 <menu+0xbb4>)
 800206e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8002070:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <menu+0xbb4>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <menu+0x9ce>
	    		calismaSekli = 1;
 8002078:	4b7a      	ldr	r3, [pc, #488]	; (8002264 <menu+0xbb4>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800207e:	f003 fa9f 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002082:	2108      	movs	r1, #8
 8002084:	4874      	ldr	r0, [pc, #464]	; (8002258 <menu+0xba8>)
 8002086:	f006 ff3b 	bl	8008f00 <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	d118      	bne.n	80020c2 <menu+0xa12>
 8002090:	4b72      	ldr	r3, [pc, #456]	; (800225c <menu+0xbac>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f083 0301 	eor.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d011      	beq.n	80020c2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 800209e:	4b71      	ldr	r3, [pc, #452]	; (8002264 <menu+0xbb4>)
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	4b71      	ldr	r3, [pc, #452]	; (8002268 <menu+0xbb8>)
 80020a4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80020a6:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <menu+0xbb4>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d106      	bne.n	80020bc <menu+0xa0c>
				altLimit = 1;
 80020ae:	4b6f      	ldr	r3, [pc, #444]	; (800226c <menu+0xbbc>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80020b4:	4b6d      	ldr	r3, [pc, #436]	; (800226c <menu+0xbbc>)
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	4b6b      	ldr	r3, [pc, #428]	; (8002268 <menu+0xbb8>)
 80020ba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80020bc:	4b6c      	ldr	r3, [pc, #432]	; (8002270 <menu+0xbc0>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 80020c2:	4b6c      	ldr	r3, [pc, #432]	; (8002274 <menu+0xbc4>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	f040 8083 	bne.w	80021d2 <menu+0xb22>
		if(dilSecim == 0) {
 80020cc:	4b60      	ldr	r3, [pc, #384]	; (8002250 <menu+0xba0>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d105      	bne.n	80020e0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 80020d4:	4a68      	ldr	r2, [pc, #416]	; (8002278 <menu+0xbc8>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	2001      	movs	r0, #1
 80020da:	f7fe faeb 	bl	80006b4 <lcd_print>
 80020de:	e008      	b.n	80020f2 <menu+0xa42>
		} else if(dilSecim == 1) {
 80020e0:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <menu+0xba0>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d104      	bne.n	80020f2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 80020e8:	4a64      	ldr	r2, [pc, #400]	; (800227c <menu+0xbcc>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7fe fae1 	bl	80006b4 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 80020f2:	4b63      	ldr	r3, [pc, #396]	; (8002280 <menu+0xbd0>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d113      	bne.n	8002122 <menu+0xa72>
			if(dilSecim == 0) {
 80020fa:	4b55      	ldr	r3, [pc, #340]	; (8002250 <menu+0xba0>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8002102:	4a60      	ldr	r2, [pc, #384]	; (8002284 <menu+0xbd4>)
 8002104:	2101      	movs	r1, #1
 8002106:	2002      	movs	r0, #2
 8002108:	f7fe fad4 	bl	80006b4 <lcd_print>
 800210c:	e012      	b.n	8002134 <menu+0xa84>
			} else if(dilSecim == 1) {
 800210e:	4b50      	ldr	r3, [pc, #320]	; (8002250 <menu+0xba0>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10e      	bne.n	8002134 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8002116:	4a5c      	ldr	r2, [pc, #368]	; (8002288 <menu+0xbd8>)
 8002118:	2101      	movs	r1, #1
 800211a:	2002      	movs	r0, #2
 800211c:	f7fe faca 	bl	80006b4 <lcd_print>
 8002120:	e008      	b.n	8002134 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8002122:	4b57      	ldr	r3, [pc, #348]	; (8002280 <menu+0xbd0>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d104      	bne.n	8002134 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 800212a:	4a58      	ldr	r2, [pc, #352]	; (800228c <menu+0xbdc>)
 800212c:	2101      	movs	r1, #1
 800212e:	2002      	movs	r0, #2
 8002130:	f7fe fac0 	bl	80006b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002134:	2102      	movs	r1, #2
 8002136:	4848      	ldr	r0, [pc, #288]	; (8002258 <menu+0xba8>)
 8002138:	f006 fee2 	bl	8008f00 <HAL_GPIO_ReadPin>
 800213c:	4603      	mov	r3, r0
 800213e:	2b01      	cmp	r3, #1
 8002140:	d115      	bne.n	800216e <menu+0xabe>
 8002142:	4b46      	ldr	r3, [pc, #280]	; (800225c <menu+0xbac>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	f083 0301 	eor.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00e      	beq.n	800216e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8002150:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <menu+0xbd0>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b49      	ldr	r3, [pc, #292]	; (8002280 <menu+0xbd0>)
 800215a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800215c:	4b48      	ldr	r3, [pc, #288]	; (8002280 <menu+0xbd0>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d902      	bls.n	800216a <menu+0xaba>
				emniyetCercevesi = 0;
 8002164:	4b46      	ldr	r3, [pc, #280]	; (8002280 <menu+0xbd0>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800216a:	f003 fa29 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800216e:	2104      	movs	r1, #4
 8002170:	4839      	ldr	r0, [pc, #228]	; (8002258 <menu+0xba8>)
 8002172:	f006 fec5 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002176:	4603      	mov	r3, r0
 8002178:	2b01      	cmp	r3, #1
 800217a:	d115      	bne.n	80021a8 <menu+0xaf8>
 800217c:	4b37      	ldr	r3, [pc, #220]	; (800225c <menu+0xbac>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f083 0301 	eor.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00e      	beq.n	80021a8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <menu+0xbd0>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	3b01      	subs	r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <menu+0xbd0>)
 8002194:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <menu+0xbd0>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <menu+0xbd0>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021a4:	f003 fa0c 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80021a8:	2108      	movs	r1, #8
 80021aa:	482b      	ldr	r0, [pc, #172]	; (8002258 <menu+0xba8>)
 80021ac:	f006 fea8 	bl	8008f00 <HAL_GPIO_ReadPin>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10d      	bne.n	80021d2 <menu+0xb22>
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <menu+0xbac>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f083 0301 	eor.w	r3, r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <menu+0xbd0>)
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <menu+0xbb8>)
 80021ca:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80021cc:	4b28      	ldr	r3, [pc, #160]	; (8002270 <menu+0xbc0>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80021d2:	4b28      	ldr	r3, [pc, #160]	; (8002274 <menu+0xbc4>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	f040 80ba 	bne.w	8002350 <menu+0xca0>
		if(dilSecim == 0) {
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <menu+0xba0>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80021e4:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <menu+0xbe0>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7fe fa63 	bl	80006b4 <lcd_print>
 80021ee:	e008      	b.n	8002202 <menu+0xb52>
		} else if(dilSecim == 1) {
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <menu+0xba0>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d104      	bne.n	8002202 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80021f8:	4a26      	ldr	r2, [pc, #152]	; (8002294 <menu+0xbe4>)
 80021fa:	2101      	movs	r1, #1
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7fe fa59 	bl	80006b4 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <menu+0xbe8>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d113      	bne.n	8002232 <menu+0xb82>
			if(dilSecim == 0) {
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <menu+0xba0>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d105      	bne.n	800221e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8002212:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <menu+0xbd4>)
 8002214:	2101      	movs	r1, #1
 8002216:	2002      	movs	r0, #2
 8002218:	f7fe fa4c 	bl	80006b4 <lcd_print>
 800221c:	e049      	b.n	80022b2 <menu+0xc02>
			} else if(dilSecim == 1) {
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <menu+0xba0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d145      	bne.n	80022b2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8002226:	4a18      	ldr	r2, [pc, #96]	; (8002288 <menu+0xbd8>)
 8002228:	2101      	movs	r1, #1
 800222a:	2002      	movs	r0, #2
 800222c:	f7fe fa42 	bl	80006b4 <lcd_print>
 8002230:	e03f      	b.n	80022b2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <menu+0xbe8>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d13b      	bne.n	80022b2 <menu+0xc02>
			if(dilSecim == 0) {
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <menu+0xba0>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d12e      	bne.n	80022a0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8002242:	4a16      	ldr	r2, [pc, #88]	; (800229c <menu+0xbec>)
 8002244:	2101      	movs	r1, #1
 8002246:	2002      	movs	r0, #2
 8002248:	f7fe fa34 	bl	80006b4 <lcd_print>
 800224c:	e031      	b.n	80022b2 <menu+0xc02>
 800224e:	bf00      	nop
 8002250:	20000419 	.word	0x20000419
 8002254:	0800ce68 	.word	0x0800ce68
 8002258:	40010800 	.word	0x40010800
 800225c:	20000427 	.word	0x20000427
 8002260:	20000407 	.word	0x20000407
 8002264:	200003f9 	.word	0x200003f9
 8002268:	20000328 	.word	0x20000328
 800226c:	200003fe 	.word	0x200003fe
 8002270:	20000424 	.word	0x20000424
 8002274:	200003f8 	.word	0x200003f8
 8002278:	0800ce78 	.word	0x0800ce78
 800227c:	0800ce8c 	.word	0x0800ce8c
 8002280:	200003fc 	.word	0x200003fc
 8002284:	0800cea0 	.word	0x0800cea0
 8002288:	0800ceb4 	.word	0x0800ceb4
 800228c:	0800cec8 	.word	0x0800cec8
 8002290:	0800ced8 	.word	0x0800ced8
 8002294:	0800ceec 	.word	0x0800ceec
 8002298:	200003fd 	.word	0x200003fd
 800229c:	0800cf00 	.word	0x0800cf00
			} else if(dilSecim == 1) {
 80022a0:	4b92      	ldr	r3, [pc, #584]	; (80024ec <menu+0xe3c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d104      	bne.n	80022b2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80022a8:	4a91      	ldr	r2, [pc, #580]	; (80024f0 <menu+0xe40>)
 80022aa:	2101      	movs	r1, #1
 80022ac:	2002      	movs	r0, #2
 80022ae:	f7fe fa01 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022b2:	2102      	movs	r1, #2
 80022b4:	488f      	ldr	r0, [pc, #572]	; (80024f4 <menu+0xe44>)
 80022b6:	f006 fe23 	bl	8008f00 <HAL_GPIO_ReadPin>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d115      	bne.n	80022ec <menu+0xc3c>
 80022c0:	4b8d      	ldr	r3, [pc, #564]	; (80024f8 <menu+0xe48>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	f083 0301 	eor.w	r3, r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00e      	beq.n	80022ec <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80022ce:	4b8b      	ldr	r3, [pc, #556]	; (80024fc <menu+0xe4c>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	3301      	adds	r3, #1
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b89      	ldr	r3, [pc, #548]	; (80024fc <menu+0xe4c>)
 80022d8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80022da:	4b88      	ldr	r3, [pc, #544]	; (80024fc <menu+0xe4c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d902      	bls.n	80022e8 <menu+0xc38>
				yavaslamaLimit = 0;
 80022e2:	4b86      	ldr	r3, [pc, #536]	; (80024fc <menu+0xe4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022e8:	f003 f96a 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022ec:	2104      	movs	r1, #4
 80022ee:	4881      	ldr	r0, [pc, #516]	; (80024f4 <menu+0xe44>)
 80022f0:	f006 fe06 	bl	8008f00 <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d115      	bne.n	8002326 <menu+0xc76>
 80022fa:	4b7f      	ldr	r3, [pc, #508]	; (80024f8 <menu+0xe48>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f083 0301 	eor.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00e      	beq.n	8002326 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002308:	4b7c      	ldr	r3, [pc, #496]	; (80024fc <menu+0xe4c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	3b01      	subs	r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b7a      	ldr	r3, [pc, #488]	; (80024fc <menu+0xe4c>)
 8002312:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002314:	4b79      	ldr	r3, [pc, #484]	; (80024fc <menu+0xe4c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800231c:	4b77      	ldr	r3, [pc, #476]	; (80024fc <menu+0xe4c>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002322:	f003 f94d 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002326:	2108      	movs	r1, #8
 8002328:	4872      	ldr	r0, [pc, #456]	; (80024f4 <menu+0xe44>)
 800232a:	f006 fde9 	bl	8008f00 <HAL_GPIO_ReadPin>
 800232e:	4603      	mov	r3, r0
 8002330:	2b01      	cmp	r3, #1
 8002332:	d10d      	bne.n	8002350 <menu+0xca0>
 8002334:	4b70      	ldr	r3, [pc, #448]	; (80024f8 <menu+0xe48>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	f083 0301 	eor.w	r3, r3, #1
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002342:	4b6e      	ldr	r3, [pc, #440]	; (80024fc <menu+0xe4c>)
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	4b6e      	ldr	r3, [pc, #440]	; (8002500 <menu+0xe50>)
 8002348:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800234a:	4b6e      	ldr	r3, [pc, #440]	; (8002504 <menu+0xe54>)
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002350:	4b6d      	ldr	r3, [pc, #436]	; (8002508 <menu+0xe58>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b05      	cmp	r3, #5
 8002356:	f040 80b9 	bne.w	80024cc <menu+0xe1c>
		if(dilSecim == 0) {
 800235a:	4b64      	ldr	r3, [pc, #400]	; (80024ec <menu+0xe3c>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002362:	4a6a      	ldr	r2, [pc, #424]	; (800250c <menu+0xe5c>)
 8002364:	2101      	movs	r1, #1
 8002366:	2001      	movs	r0, #1
 8002368:	f7fe f9a4 	bl	80006b4 <lcd_print>
 800236c:	e008      	b.n	8002380 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800236e:	4b5f      	ldr	r3, [pc, #380]	; (80024ec <menu+0xe3c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d104      	bne.n	8002380 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002376:	4a66      	ldr	r2, [pc, #408]	; (8002510 <menu+0xe60>)
 8002378:	2101      	movs	r1, #1
 800237a:	2001      	movs	r0, #1
 800237c:	f7fe f99a 	bl	80006b4 <lcd_print>
		}

		if(altLimit == 0) {
 8002380:	4b64      	ldr	r3, [pc, #400]	; (8002514 <menu+0xe64>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d113      	bne.n	80023b0 <menu+0xd00>
			if(dilSecim == 0) {
 8002388:	4b58      	ldr	r3, [pc, #352]	; (80024ec <menu+0xe3c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d105      	bne.n	800239c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002390:	4a61      	ldr	r2, [pc, #388]	; (8002518 <menu+0xe68>)
 8002392:	2101      	movs	r1, #1
 8002394:	2002      	movs	r0, #2
 8002396:	f7fe f98d 	bl	80006b4 <lcd_print>
 800239a:	e020      	b.n	80023de <menu+0xd2e>
			} else if(dilSecim == 1) {
 800239c:	4b53      	ldr	r3, [pc, #332]	; (80024ec <menu+0xe3c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d11c      	bne.n	80023de <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80023a4:	4a5d      	ldr	r2, [pc, #372]	; (800251c <menu+0xe6c>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	2002      	movs	r0, #2
 80023aa:	f7fe f983 	bl	80006b4 <lcd_print>
 80023ae:	e016      	b.n	80023de <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80023b0:	4b58      	ldr	r3, [pc, #352]	; (8002514 <menu+0xe64>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d112      	bne.n	80023de <menu+0xd2e>
			if(dilSecim == 0){
 80023b8:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <menu+0xe3c>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80023c0:	4a57      	ldr	r2, [pc, #348]	; (8002520 <menu+0xe70>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	2002      	movs	r0, #2
 80023c6:	f7fe f975 	bl	80006b4 <lcd_print>
 80023ca:	e008      	b.n	80023de <menu+0xd2e>
			} else if(dilSecim == 1){
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <menu+0xe3c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d104      	bne.n	80023de <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80023d4:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <menu+0xe40>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	2002      	movs	r0, #2
 80023da:	f7fe f96b 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80023de:	2102      	movs	r1, #2
 80023e0:	4844      	ldr	r0, [pc, #272]	; (80024f4 <menu+0xe44>)
 80023e2:	f006 fd8d 	bl	8008f00 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d119      	bne.n	8002420 <menu+0xd70>
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <menu+0xe48>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d012      	beq.n	8002420 <menu+0xd70>
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <menu+0xe74>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10e      	bne.n	8002420 <menu+0xd70>
			altLimit = altLimit + 1;
 8002402:	4b44      	ldr	r3, [pc, #272]	; (8002514 <menu+0xe64>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <menu+0xe64>)
 800240c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <menu+0xe64>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d902      	bls.n	800241c <menu+0xd6c>
				altLimit = 0;
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <menu+0xe64>)
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800241c:	f003 f8d0 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002420:	2104      	movs	r1, #4
 8002422:	4834      	ldr	r0, [pc, #208]	; (80024f4 <menu+0xe44>)
 8002424:	f006 fd6c 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d119      	bne.n	8002462 <menu+0xdb2>
 800242e:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <menu+0xe48>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <menu+0xdb2>
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <menu+0xe74>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10e      	bne.n	8002462 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <menu+0xe64>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3b01      	subs	r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b31      	ldr	r3, [pc, #196]	; (8002514 <menu+0xe64>)
 800244e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002450:	4b30      	ldr	r3, [pc, #192]	; (8002514 <menu+0xe64>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <menu+0xdae>
		   		altLimit = 1;
 8002458:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <menu+0xe64>)
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800245e:	f003 f8af 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002462:	2108      	movs	r1, #8
 8002464:	4823      	ldr	r0, [pc, #140]	; (80024f4 <menu+0xe44>)
 8002466:	f006 fd4b 	bl	8008f00 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	2b01      	cmp	r3, #1
 800246e:	d12d      	bne.n	80024cc <menu+0xe1c>
 8002470:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <menu+0xe48>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	f083 0301 	eor.w	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d026      	beq.n	80024cc <menu+0xe1c>
			eepromData[5] = altLimit;
 800247e:	4b25      	ldr	r3, [pc, #148]	; (8002514 <menu+0xe64>)
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <menu+0xe50>)
 8002484:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <menu+0xe64>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d110      	bne.n	80024b0 <menu+0xe00>
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <menu+0xe78>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <menu+0xdee>
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <menu+0xe78>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d108      	bne.n	80024b0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <menu+0xe78>)
 80024a0:	2203      	movs	r2, #3
 80024a2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <menu+0xe78>)
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <menu+0xe50>)
 80024aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80024ae:	e00a      	b.n	80024c6 <menu+0xe16>
			} else if(altLimit == 0) {
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <menu+0xe64>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <menu+0xe16>
				platformSilindirTipi = 0;
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <menu+0xe7c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <menu+0xe7c>)
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <menu+0xe50>)
 80024c4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <menu+0xe54>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <menu+0xe58>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b06      	cmp	r3, #6
 80024d2:	f040 80b6 	bne.w	8002642 <menu+0xf92>
		if(dilSecim == 0) {
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <menu+0xe3c>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d12a      	bne.n	8002534 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80024de:	4a14      	ldr	r2, [pc, #80]	; (8002530 <menu+0xe80>)
 80024e0:	2101      	movs	r1, #1
 80024e2:	2001      	movs	r0, #1
 80024e4:	f7fe f8e6 	bl	80006b4 <lcd_print>
 80024e8:	e02d      	b.n	8002546 <menu+0xe96>
 80024ea:	bf00      	nop
 80024ec:	20000419 	.word	0x20000419
 80024f0:	0800cf14 	.word	0x0800cf14
 80024f4:	40010800 	.word	0x40010800
 80024f8:	20000427 	.word	0x20000427
 80024fc:	200003fd 	.word	0x200003fd
 8002500:	20000328 	.word	0x20000328
 8002504:	20000424 	.word	0x20000424
 8002508:	200003f8 	.word	0x200003f8
 800250c:	0800cf28 	.word	0x0800cf28
 8002510:	0800cf3c 	.word	0x0800cf3c
 8002514:	200003fe 	.word	0x200003fe
 8002518:	0800cea0 	.word	0x0800cea0
 800251c:	0800ceb4 	.word	0x0800ceb4
 8002520:	0800cf00 	.word	0x0800cf00
 8002524:	200003f9 	.word	0x200003f9
 8002528:	20000405 	.word	0x20000405
 800252c:	2000040b 	.word	0x2000040b
 8002530:	0800cf50 	.word	0x0800cf50
		} else if(dilSecim == 1){
 8002534:	4b7a      	ldr	r3, [pc, #488]	; (8002720 <menu+0x1070>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d104      	bne.n	8002546 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800253c:	4a79      	ldr	r2, [pc, #484]	; (8002724 <menu+0x1074>)
 800253e:	2101      	movs	r1, #1
 8002540:	2001      	movs	r0, #1
 8002542:	f7fe f8b7 	bl	80006b4 <lcd_print>
		}
		if(basincSalteri == 0){
 8002546:	4b78      	ldr	r3, [pc, #480]	; (8002728 <menu+0x1078>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d113      	bne.n	8002576 <menu+0xec6>
			if(dilSecim == 0) {
 800254e:	4b74      	ldr	r3, [pc, #464]	; (8002720 <menu+0x1070>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d105      	bne.n	8002562 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002556:	4a75      	ldr	r2, [pc, #468]	; (800272c <menu+0x107c>)
 8002558:	2101      	movs	r1, #1
 800255a:	2002      	movs	r0, #2
 800255c:	f7fe f8aa 	bl	80006b4 <lcd_print>
 8002560:	e020      	b.n	80025a4 <menu+0xef4>
			} else if(dilSecim == 1){
 8002562:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <menu+0x1070>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d11c      	bne.n	80025a4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800256a:	4a71      	ldr	r2, [pc, #452]	; (8002730 <menu+0x1080>)
 800256c:	2101      	movs	r1, #1
 800256e:	2002      	movs	r0, #2
 8002570:	f7fe f8a0 	bl	80006b4 <lcd_print>
 8002574:	e016      	b.n	80025a4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002576:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <menu+0x1078>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d112      	bne.n	80025a4 <menu+0xef4>
			if(dilSecim == 0) {
 800257e:	4b68      	ldr	r3, [pc, #416]	; (8002720 <menu+0x1070>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002586:	4a6b      	ldr	r2, [pc, #428]	; (8002734 <menu+0x1084>)
 8002588:	2101      	movs	r1, #1
 800258a:	2002      	movs	r0, #2
 800258c:	f7fe f892 	bl	80006b4 <lcd_print>
 8002590:	e008      	b.n	80025a4 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002592:	4b63      	ldr	r3, [pc, #396]	; (8002720 <menu+0x1070>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d104      	bne.n	80025a4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800259a:	4a67      	ldr	r2, [pc, #412]	; (8002738 <menu+0x1088>)
 800259c:	2101      	movs	r1, #1
 800259e:	2002      	movs	r0, #2
 80025a0:	f7fe f888 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025a4:	2102      	movs	r1, #2
 80025a6:	4865      	ldr	r0, [pc, #404]	; (800273c <menu+0x108c>)
 80025a8:	f006 fcaa 	bl	8008f00 <HAL_GPIO_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d115      	bne.n	80025de <menu+0xf2e>
 80025b2:	4b63      	ldr	r3, [pc, #396]	; (8002740 <menu+0x1090>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	f083 0301 	eor.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00e      	beq.n	80025de <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80025c0:	4b59      	ldr	r3, [pc, #356]	; (8002728 <menu+0x1078>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	3301      	adds	r3, #1
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	4b57      	ldr	r3, [pc, #348]	; (8002728 <menu+0x1078>)
 80025ca:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80025cc:	4b56      	ldr	r3, [pc, #344]	; (8002728 <menu+0x1078>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d902      	bls.n	80025da <menu+0xf2a>
				basincSalteri = 0;
 80025d4:	4b54      	ldr	r3, [pc, #336]	; (8002728 <menu+0x1078>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025da:	f002 fff1 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025de:	2104      	movs	r1, #4
 80025e0:	4856      	ldr	r0, [pc, #344]	; (800273c <menu+0x108c>)
 80025e2:	f006 fc8d 	bl	8008f00 <HAL_GPIO_ReadPin>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d115      	bne.n	8002618 <menu+0xf68>
 80025ec:	4b54      	ldr	r3, [pc, #336]	; (8002740 <menu+0x1090>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00e      	beq.n	8002618 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80025fa:	4b4b      	ldr	r3, [pc, #300]	; (8002728 <menu+0x1078>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	3b01      	subs	r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <menu+0x1078>)
 8002604:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002606:	4b48      	ldr	r3, [pc, #288]	; (8002728 <menu+0x1078>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <menu+0xf64>
		   		basincSalteri = 1;
 800260e:	4b46      	ldr	r3, [pc, #280]	; (8002728 <menu+0x1078>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002614:	f002 ffd4 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002618:	2108      	movs	r1, #8
 800261a:	4848      	ldr	r0, [pc, #288]	; (800273c <menu+0x108c>)
 800261c:	f006 fc70 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10d      	bne.n	8002642 <menu+0xf92>
 8002626:	4b46      	ldr	r3, [pc, #280]	; (8002740 <menu+0x1090>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	f083 0301 	eor.w	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d006      	beq.n	8002642 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002634:	4b3c      	ldr	r3, [pc, #240]	; (8002728 <menu+0x1078>)
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <menu+0x1094>)
 800263a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800263c:	4b42      	ldr	r3, [pc, #264]	; (8002748 <menu+0x1098>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002642:	4b42      	ldr	r3, [pc, #264]	; (800274c <menu+0x109c>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b07      	cmp	r3, #7
 8002648:	f040 80f5 	bne.w	8002836 <menu+0x1186>
		if(dilSecim == 0) {
 800264c:	4b34      	ldr	r3, [pc, #208]	; (8002720 <menu+0x1070>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002654:	4a3e      	ldr	r2, [pc, #248]	; (8002750 <menu+0x10a0>)
 8002656:	2101      	movs	r1, #1
 8002658:	2001      	movs	r0, #1
 800265a:	f7fe f82b 	bl	80006b4 <lcd_print>
 800265e:	e008      	b.n	8002672 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <menu+0x1070>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d104      	bne.n	8002672 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002668:	4a3a      	ldr	r2, [pc, #232]	; (8002754 <menu+0x10a4>)
 800266a:	2101      	movs	r1, #1
 800266c:	2001      	movs	r0, #1
 800266e:	f7fe f821 	bl	80006b4 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <menu+0x10a8>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d113      	bne.n	80026a2 <menu+0xff2>
			if(dilSecim == 0) {
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <menu+0x1070>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002682:	4a2a      	ldr	r2, [pc, #168]	; (800272c <menu+0x107c>)
 8002684:	2101      	movs	r1, #1
 8002686:	2002      	movs	r0, #2
 8002688:	f7fe f814 	bl	80006b4 <lcd_print>
 800268c:	e079      	b.n	8002782 <menu+0x10d2>
			} else if(dilSecim == 1){
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <menu+0x1070>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d175      	bne.n	8002782 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002696:	4a26      	ldr	r2, [pc, #152]	; (8002730 <menu+0x1080>)
 8002698:	2101      	movs	r1, #1
 800269a:	2002      	movs	r0, #2
 800269c:	f7fe f80a 	bl	80006b4 <lcd_print>
 80026a0:	e06f      	b.n	8002782 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <menu+0x10a8>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d113      	bne.n	80026d2 <menu+0x1022>
			if(dilSecim == 0) {
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <menu+0x1070>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d105      	bne.n	80026be <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80026b2:	4a2a      	ldr	r2, [pc, #168]	; (800275c <menu+0x10ac>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	2002      	movs	r0, #2
 80026b8:	f7fd fffc 	bl	80006b4 <lcd_print>
 80026bc:	e061      	b.n	8002782 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <menu+0x1070>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d15d      	bne.n	8002782 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80026c6:	4a26      	ldr	r2, [pc, #152]	; (8002760 <menu+0x10b0>)
 80026c8:	2101      	movs	r1, #1
 80026ca:	2002      	movs	r0, #2
 80026cc:	f7fd fff2 	bl	80006b4 <lcd_print>
 80026d0:	e057      	b.n	8002782 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <menu+0x10a8>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d113      	bne.n	8002702 <menu+0x1052>
			if(dilSecim == 0) {
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <menu+0x1070>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80026e2:	4a20      	ldr	r2, [pc, #128]	; (8002764 <menu+0x10b4>)
 80026e4:	2101      	movs	r1, #1
 80026e6:	2002      	movs	r0, #2
 80026e8:	f7fd ffe4 	bl	80006b4 <lcd_print>
 80026ec:	e049      	b.n	8002782 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <menu+0x1070>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d145      	bne.n	8002782 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80026f6:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <menu+0x10b8>)
 80026f8:	2101      	movs	r1, #1
 80026fa:	2002      	movs	r0, #2
 80026fc:	f7fd ffda 	bl	80006b4 <lcd_print>
 8002700:	e03f      	b.n	8002782 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002702:	4b15      	ldr	r3, [pc, #84]	; (8002758 <menu+0x10a8>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d13b      	bne.n	8002782 <menu+0x10d2>
			if(dilSecim == 0) {
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <menu+0x1070>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d12e      	bne.n	8002770 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002712:	4a16      	ldr	r2, [pc, #88]	; (800276c <menu+0x10bc>)
 8002714:	2101      	movs	r1, #1
 8002716:	2002      	movs	r0, #2
 8002718:	f7fd ffcc 	bl	80006b4 <lcd_print>
 800271c:	e031      	b.n	8002782 <menu+0x10d2>
 800271e:	bf00      	nop
 8002720:	20000419 	.word	0x20000419
 8002724:	0800cf60 	.word	0x0800cf60
 8002728:	200003ff 	.word	0x200003ff
 800272c:	0800cea0 	.word	0x0800cea0
 8002730:	0800ceb4 	.word	0x0800ceb4
 8002734:	0800cf00 	.word	0x0800cf00
 8002738:	0800cf14 	.word	0x0800cf14
 800273c:	40010800 	.word	0x40010800
 8002740:	20000427 	.word	0x20000427
 8002744:	20000328 	.word	0x20000328
 8002748:	20000424 	.word	0x20000424
 800274c:	200003f8 	.word	0x200003f8
 8002750:	0800cf70 	.word	0x0800cf70
 8002754:	0800cf84 	.word	0x0800cf84
 8002758:	20000400 	.word	0x20000400
 800275c:	0800cf98 	.word	0x0800cf98
 8002760:	0800cfac 	.word	0x0800cfac
 8002764:	0800cfc0 	.word	0x0800cfc0
 8002768:	0800cfd4 	.word	0x0800cfd4
 800276c:	0800cfe8 	.word	0x0800cfe8
			} else if(dilSecim == 1){
 8002770:	4b99      	ldr	r3, [pc, #612]	; (80029d8 <menu+0x1328>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d104      	bne.n	8002782 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002778:	4a98      	ldr	r2, [pc, #608]	; (80029dc <menu+0x132c>)
 800277a:	2101      	movs	r1, #1
 800277c:	2002      	movs	r0, #2
 800277e:	f7fd ff99 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002782:	2102      	movs	r1, #2
 8002784:	4896      	ldr	r0, [pc, #600]	; (80029e0 <menu+0x1330>)
 8002786:	f006 fbbb 	bl	8008f00 <HAL_GPIO_ReadPin>
 800278a:	4603      	mov	r3, r0
 800278c:	2b01      	cmp	r3, #1
 800278e:	d115      	bne.n	80027bc <menu+0x110c>
 8002790:	4b94      	ldr	r3, [pc, #592]	; (80029e4 <menu+0x1334>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	f083 0301 	eor.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00e      	beq.n	80027bc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800279e:	4b92      	ldr	r3, [pc, #584]	; (80029e8 <menu+0x1338>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b90      	ldr	r3, [pc, #576]	; (80029e8 <menu+0x1338>)
 80027a8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80027aa:	4b8f      	ldr	r3, [pc, #572]	; (80029e8 <menu+0x1338>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d902      	bls.n	80027b8 <menu+0x1108>
				kapiSecimleri = 0;
 80027b2:	4b8d      	ldr	r3, [pc, #564]	; (80029e8 <menu+0x1338>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027b8:	f002 ff02 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027bc:	2104      	movs	r1, #4
 80027be:	4888      	ldr	r0, [pc, #544]	; (80029e0 <menu+0x1330>)
 80027c0:	f006 fb9e 	bl	8008f00 <HAL_GPIO_ReadPin>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d115      	bne.n	80027f6 <menu+0x1146>
 80027ca:	4b86      	ldr	r3, [pc, #536]	; (80029e4 <menu+0x1334>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	f083 0301 	eor.w	r3, r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80027d8:	4b83      	ldr	r3, [pc, #524]	; (80029e8 <menu+0x1338>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	3b01      	subs	r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b81      	ldr	r3, [pc, #516]	; (80029e8 <menu+0x1338>)
 80027e2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80027e4:	4b80      	ldr	r3, [pc, #512]	; (80029e8 <menu+0x1338>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d902      	bls.n	80027f2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80027ec:	4b7e      	ldr	r3, [pc, #504]	; (80029e8 <menu+0x1338>)
 80027ee:	2203      	movs	r2, #3
 80027f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027f2:	f002 fee5 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027f6:	2108      	movs	r1, #8
 80027f8:	4879      	ldr	r0, [pc, #484]	; (80029e0 <menu+0x1330>)
 80027fa:	f006 fb81 	bl	8008f00 <HAL_GPIO_ReadPin>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b01      	cmp	r3, #1
 8002802:	d118      	bne.n	8002836 <menu+0x1186>
 8002804:	4b77      	ldr	r3, [pc, #476]	; (80029e4 <menu+0x1334>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	f083 0301 	eor.w	r3, r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d011      	beq.n	8002836 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002812:	4b75      	ldr	r3, [pc, #468]	; (80029e8 <menu+0x1338>)
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	4b75      	ldr	r3, [pc, #468]	; (80029ec <menu+0x133c>)
 8002818:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800281a:	4b73      	ldr	r3, [pc, #460]	; (80029e8 <menu+0x1338>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d006      	beq.n	8002830 <menu+0x1180>
				altLimit = 1;
 8002822:	4b73      	ldr	r3, [pc, #460]	; (80029f0 <menu+0x1340>)
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002828:	4b71      	ldr	r3, [pc, #452]	; (80029f0 <menu+0x1340>)
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <menu+0x133c>)
 800282e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002830:	4b70      	ldr	r3, [pc, #448]	; (80029f4 <menu+0x1344>)
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002836:	4b70      	ldr	r3, [pc, #448]	; (80029f8 <menu+0x1348>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b08      	cmp	r3, #8
 800283c:	f040 8092 	bne.w	8002964 <menu+0x12b4>
		if(dilSecim == 0) {
 8002840:	4b65      	ldr	r3, [pc, #404]	; (80029d8 <menu+0x1328>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002848:	4a6c      	ldr	r2, [pc, #432]	; (80029fc <menu+0x134c>)
 800284a:	2101      	movs	r1, #1
 800284c:	2001      	movs	r0, #1
 800284e:	f7fd ff31 	bl	80006b4 <lcd_print>
 8002852:	e008      	b.n	8002866 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002854:	4b60      	ldr	r3, [pc, #384]	; (80029d8 <menu+0x1328>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d104      	bne.n	8002866 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800285c:	4a68      	ldr	r2, [pc, #416]	; (8002a00 <menu+0x1350>)
 800285e:	2101      	movs	r1, #1
 8002860:	2001      	movs	r0, #1
 8002862:	f7fd ff27 	bl	80006b4 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002866:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <menu+0x1354>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d113      	bne.n	8002896 <menu+0x11e6>
			if(dilSecim == 0) {
 800286e:	4b5a      	ldr	r3, [pc, #360]	; (80029d8 <menu+0x1328>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002876:	4a64      	ldr	r2, [pc, #400]	; (8002a08 <menu+0x1358>)
 8002878:	2101      	movs	r1, #1
 800287a:	2002      	movs	r0, #2
 800287c:	f7fd ff1a 	bl	80006b4 <lcd_print>
 8002880:	e020      	b.n	80028c4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002882:	4b55      	ldr	r3, [pc, #340]	; (80029d8 <menu+0x1328>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d11c      	bne.n	80028c4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800288a:	4a60      	ldr	r2, [pc, #384]	; (8002a0c <menu+0x135c>)
 800288c:	2101      	movs	r1, #1
 800288e:	2002      	movs	r0, #2
 8002890:	f7fd ff10 	bl	80006b4 <lcd_print>
 8002894:	e016      	b.n	80028c4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002896:	4b5b      	ldr	r3, [pc, #364]	; (8002a04 <menu+0x1354>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d112      	bne.n	80028c4 <menu+0x1214>
			if(dilSecim == 0){
 800289e:	4b4e      	ldr	r3, [pc, #312]	; (80029d8 <menu+0x1328>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80028a6:	4a5a      	ldr	r2, [pc, #360]	; (8002a10 <menu+0x1360>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	2002      	movs	r0, #2
 80028ac:	f7fd ff02 	bl	80006b4 <lcd_print>
 80028b0:	e008      	b.n	80028c4 <menu+0x1214>
			} else if(dilSecim == 1){
 80028b2:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <menu+0x1328>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d104      	bne.n	80028c4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80028ba:	4a56      	ldr	r2, [pc, #344]	; (8002a14 <menu+0x1364>)
 80028bc:	2101      	movs	r1, #1
 80028be:	2002      	movs	r0, #2
 80028c0:	f7fd fef8 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c4:	2102      	movs	r1, #2
 80028c6:	4846      	ldr	r0, [pc, #280]	; (80029e0 <menu+0x1330>)
 80028c8:	f006 fb1a 	bl	8008f00 <HAL_GPIO_ReadPin>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d115      	bne.n	80028fe <menu+0x124e>
 80028d2:	4b44      	ldr	r3, [pc, #272]	; (80029e4 <menu+0x1334>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	f083 0301 	eor.w	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00e      	beq.n	80028fe <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80028e0:	4b48      	ldr	r3, [pc, #288]	; (8002a04 <menu+0x1354>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b46      	ldr	r3, [pc, #280]	; (8002a04 <menu+0x1354>)
 80028ea:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80028ec:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <menu+0x1354>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d902      	bls.n	80028fa <menu+0x124a>
				kapiAcTipi = 0;
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <menu+0x1354>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028fa:	f002 fe61 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028fe:	2104      	movs	r1, #4
 8002900:	4837      	ldr	r0, [pc, #220]	; (80029e0 <menu+0x1330>)
 8002902:	f006 fafd 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002906:	4603      	mov	r3, r0
 8002908:	2b01      	cmp	r3, #1
 800290a:	d115      	bne.n	8002938 <menu+0x1288>
 800290c:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <menu+0x1334>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	f083 0301 	eor.w	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00e      	beq.n	8002938 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800291a:	4b3a      	ldr	r3, [pc, #232]	; (8002a04 <menu+0x1354>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <menu+0x1354>)
 8002924:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <menu+0x1354>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <menu+0x1284>
		   		kapiAcTipi = 1;
 800292e:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <menu+0x1354>)
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002934:	f002 fe44 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002938:	2108      	movs	r1, #8
 800293a:	4829      	ldr	r0, [pc, #164]	; (80029e0 <menu+0x1330>)
 800293c:	f006 fae0 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002940:	4603      	mov	r3, r0
 8002942:	2b01      	cmp	r3, #1
 8002944:	d10e      	bne.n	8002964 <menu+0x12b4>
 8002946:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <menu+0x1334>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	f083 0301 	eor.w	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002954:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <menu+0x1354>)
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	4b24      	ldr	r3, [pc, #144]	; (80029ec <menu+0x133c>)
 800295a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800295e:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <menu+0x1344>)
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002964:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <menu+0x1348>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b09      	cmp	r3, #9
 800296a:	f040 80b9 	bne.w	8002ae0 <menu+0x1430>
		if(dilSecim == 0){
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <menu+0x1328>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d105      	bne.n	8002982 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002976:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <menu+0x1368>)
 8002978:	2101      	movs	r1, #1
 800297a:	2001      	movs	r0, #1
 800297c:	f7fd fe9a 	bl	80006b4 <lcd_print>
 8002980:	e008      	b.n	8002994 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <menu+0x1328>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d104      	bne.n	8002994 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800298a:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <menu+0x136c>)
 800298c:	2101      	movs	r1, #1
 800298e:	2001      	movs	r0, #1
 8002990:	f7fd fe90 	bl	80006b4 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002994:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <menu+0x1370>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800299c:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <menu+0x1374>)
 800299e:	2101      	movs	r1, #1
 80029a0:	2002      	movs	r0, #2
 80029a2:	f7fd fe87 	bl	80006b4 <lcd_print>
 80029a6:	e04c      	b.n	8002a42 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80029a8:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <menu+0x1370>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d13f      	bne.n	8002a30 <menu+0x1380>
			if(dilSecim == 0){
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <menu+0x1328>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <menu+0x1378>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	2002      	movs	r0, #2
 80029be:	f7fd fe79 	bl	80006b4 <lcd_print>
 80029c2:	e03e      	b.n	8002a42 <menu+0x1392>
			} else if(dilSecim == 1) {
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <menu+0x1328>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d13a      	bne.n	8002a42 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80029cc:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <menu+0x137c>)
 80029ce:	2101      	movs	r1, #1
 80029d0:	2002      	movs	r0, #2
 80029d2:	f7fd fe6f 	bl	80006b4 <lcd_print>
 80029d6:	e034      	b.n	8002a42 <menu+0x1392>
 80029d8:	20000419 	.word	0x20000419
 80029dc:	0800cffc 	.word	0x0800cffc
 80029e0:	40010800 	.word	0x40010800
 80029e4:	20000427 	.word	0x20000427
 80029e8:	20000400 	.word	0x20000400
 80029ec:	20000328 	.word	0x20000328
 80029f0:	200003fe 	.word	0x200003fe
 80029f4:	20000424 	.word	0x20000424
 80029f8:	200003f8 	.word	0x200003f8
 80029fc:	0800d010 	.word	0x0800d010
 8002a00:	0800d024 	.word	0x0800d024
 8002a04:	20000404 	.word	0x20000404
 8002a08:	0800d038 	.word	0x0800d038
 8002a0c:	0800d048 	.word	0x0800d048
 8002a10:	0800d058 	.word	0x0800d058
 8002a14:	0800d06c 	.word	0x0800d06c
 8002a18:	0800d080 	.word	0x0800d080
 8002a1c:	0800d094 	.word	0x0800d094
 8002a20:	20000401 	.word	0x20000401
 8002a24:	0800d0a8 	.word	0x0800d0a8
 8002a28:	0800d0bc 	.word	0x0800d0bc
 8002a2c:	0800d0cc 	.word	0x0800d0cc
			}
		} else if(kapi1Tip == 2) {
 8002a30:	4b8a      	ldr	r3, [pc, #552]	; (8002c5c <menu+0x15ac>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d104      	bne.n	8002a42 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002a38:	4a89      	ldr	r2, [pc, #548]	; (8002c60 <menu+0x15b0>)
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	2002      	movs	r0, #2
 8002a3e:	f7fd fe39 	bl	80006b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a42:	2102      	movs	r1, #2
 8002a44:	4887      	ldr	r0, [pc, #540]	; (8002c64 <menu+0x15b4>)
 8002a46:	f006 fa5b 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d115      	bne.n	8002a7c <menu+0x13cc>
 8002a50:	4b85      	ldr	r3, [pc, #532]	; (8002c68 <menu+0x15b8>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	f083 0301 	eor.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00e      	beq.n	8002a7c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002a5e:	4b7f      	ldr	r3, [pc, #508]	; (8002c5c <menu+0x15ac>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b7d      	ldr	r3, [pc, #500]	; (8002c5c <menu+0x15ac>)
 8002a68:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002a6a:	4b7c      	ldr	r3, [pc, #496]	; (8002c5c <menu+0x15ac>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d902      	bls.n	8002a78 <menu+0x13c8>
				kapi1Tip = 0;
 8002a72:	4b7a      	ldr	r3, [pc, #488]	; (8002c5c <menu+0x15ac>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a78:	f002 fda2 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	4879      	ldr	r0, [pc, #484]	; (8002c64 <menu+0x15b4>)
 8002a80:	f006 fa3e 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d115      	bne.n	8002ab6 <menu+0x1406>
 8002a8a:	4b77      	ldr	r3, [pc, #476]	; (8002c68 <menu+0x15b8>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00e      	beq.n	8002ab6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002a98:	4b70      	ldr	r3, [pc, #448]	; (8002c5c <menu+0x15ac>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b6e      	ldr	r3, [pc, #440]	; (8002c5c <menu+0x15ac>)
 8002aa2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002aa4:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <menu+0x15ac>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d902      	bls.n	8002ab2 <menu+0x1402>
		   		kapi1Tip = 2;
 8002aac:	4b6b      	ldr	r3, [pc, #428]	; (8002c5c <menu+0x15ac>)
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ab2:	f002 fd85 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ab6:	2108      	movs	r1, #8
 8002ab8:	486a      	ldr	r0, [pc, #424]	; (8002c64 <menu+0x15b4>)
 8002aba:	f006 fa21 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10d      	bne.n	8002ae0 <menu+0x1430>
 8002ac4:	4b68      	ldr	r3, [pc, #416]	; (8002c68 <menu+0x15b8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002ad2:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <menu+0x15ac>)
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <menu+0x15bc>)
 8002ad8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002ada:	4b65      	ldr	r3, [pc, #404]	; (8002c70 <menu+0x15c0>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002ae0:	4b64      	ldr	r3, [pc, #400]	; (8002c74 <menu+0x15c4>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b0a      	cmp	r3, #10
 8002ae6:	d17f      	bne.n	8002be8 <menu+0x1538>
		if(dilSecim == 0) {
 8002ae8:	4b63      	ldr	r3, [pc, #396]	; (8002c78 <menu+0x15c8>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002af0:	4a62      	ldr	r2, [pc, #392]	; (8002c7c <menu+0x15cc>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	2001      	movs	r0, #1
 8002af6:	f7fd fddd 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002afa:	4a61      	ldr	r2, [pc, #388]	; (8002c80 <menu+0x15d0>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	2002      	movs	r0, #2
 8002b00:	f7fd fdd8 	bl	80006b4 <lcd_print>
 8002b04:	e00d      	b.n	8002b22 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <menu+0x15c8>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d109      	bne.n	8002b22 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002b0e:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <menu+0x15d4>)
 8002b10:	2101      	movs	r1, #1
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7fd fdce 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002b18:	4a5b      	ldr	r2, [pc, #364]	; (8002c88 <menu+0x15d8>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f7fd fdc9 	bl	80006b4 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002b22:	4b5a      	ldr	r3, [pc, #360]	; (8002c8c <menu+0x15dc>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	220a      	movs	r2, #10
 8002b28:	4959      	ldr	r1, [pc, #356]	; (8002c90 <menu+0x15e0>)
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f009 fa14 	bl	800bf58 <itoa>
		lcd_print(2,16,snum);
 8002b30:	4a57      	ldr	r2, [pc, #348]	; (8002c90 <menu+0x15e0>)
 8002b32:	2110      	movs	r1, #16
 8002b34:	2002      	movs	r0, #2
 8002b36:	f7fd fdbd 	bl	80006b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	4849      	ldr	r0, [pc, #292]	; (8002c64 <menu+0x15b4>)
 8002b3e:	f006 f9df 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d119      	bne.n	8002b7c <menu+0x14cc>
 8002b48:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <menu+0x15b8>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f083 0301 	eor.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d012      	beq.n	8002b7c <menu+0x14cc>
 8002b56:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <menu+0x15ac>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10e      	bne.n	8002b7c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002b5e:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <menu+0x15dc>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b49      	ldr	r3, [pc, #292]	; (8002c8c <menu+0x15dc>)
 8002b68:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002b6a:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <menu+0x15dc>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d902      	bls.n	8002b78 <menu+0x14c8>
				kapi1AcSure = 0;
 8002b72:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <menu+0x15dc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b78:	f002 fd22 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	4839      	ldr	r0, [pc, #228]	; (8002c64 <menu+0x15b4>)
 8002b80:	f006 f9be 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d119      	bne.n	8002bbe <menu+0x150e>
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <menu+0x15b8>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	f083 0301 	eor.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d012      	beq.n	8002bbe <menu+0x150e>
 8002b98:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <menu+0x15ac>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10e      	bne.n	8002bbe <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <menu+0x15dc>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	4b38      	ldr	r3, [pc, #224]	; (8002c8c <menu+0x15dc>)
 8002baa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002bac:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <menu+0x15dc>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b06      	cmp	r3, #6
 8002bb2:	d902      	bls.n	8002bba <menu+0x150a>
		   		kapi1AcSure = 5;
 8002bb4:	4b35      	ldr	r3, [pc, #212]	; (8002c8c <menu+0x15dc>)
 8002bb6:	2205      	movs	r2, #5
 8002bb8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bba:	f002 fd01 	bl	80055c0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bbe:	2108      	movs	r1, #8
 8002bc0:	4828      	ldr	r0, [pc, #160]	; (8002c64 <menu+0x15b4>)
 8002bc2:	f006 f99d 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d10d      	bne.n	8002be8 <menu+0x1538>
 8002bcc:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <menu+0x15b8>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f083 0301 	eor.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002bda:	4b2c      	ldr	r3, [pc, #176]	; (8002c8c <menu+0x15dc>)
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <menu+0x15bc>)
 8002be0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <menu+0x15c0>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <menu+0x15c4>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b0b      	cmp	r3, #11
 8002bee:	f040 80b5 	bne.w	8002d5c <menu+0x16ac>
		if(dilSecim == 0) {
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <menu+0x15c8>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002bfa:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <menu+0x15e4>)
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2001      	movs	r0, #1
 8002c00:	f7fd fd58 	bl	80006b4 <lcd_print>
 8002c04:	e008      	b.n	8002c18 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <menu+0x15c8>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d104      	bne.n	8002c18 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002c0e:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <menu+0x15e8>)
 8002c10:	2101      	movs	r1, #1
 8002c12:	2001      	movs	r0, #1
 8002c14:	f7fd fd4e 	bl	80006b4 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <menu+0x15ec>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002c20:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <menu+0x15f0>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	2002      	movs	r0, #2
 8002c26:	f7fd fd45 	bl	80006b4 <lcd_print>
 8002c2a:	e048      	b.n	8002cbe <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <menu+0x15ec>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d13b      	bne.n	8002cac <menu+0x15fc>
			if(dilSecim == 0) {
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <menu+0x15c8>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002c3c:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <menu+0x15f4>)
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2002      	movs	r0, #2
 8002c42:	f7fd fd37 	bl	80006b4 <lcd_print>
 8002c46:	e03a      	b.n	8002cbe <menu+0x160e>
			} else if(dilSecim == 1) {
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <menu+0x15c8>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d136      	bne.n	8002cbe <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002c50:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <menu+0x15f8>)
 8002c52:	2101      	movs	r1, #1
 8002c54:	2002      	movs	r0, #2
 8002c56:	f7fd fd2d 	bl	80006b4 <lcd_print>
 8002c5a:	e030      	b.n	8002cbe <menu+0x160e>
 8002c5c:	20000401 	.word	0x20000401
 8002c60:	0800d0e0 	.word	0x0800d0e0
 8002c64:	40010800 	.word	0x40010800
 8002c68:	20000427 	.word	0x20000427
 8002c6c:	20000328 	.word	0x20000328
 8002c70:	20000424 	.word	0x20000424
 8002c74:	200003f8 	.word	0x200003f8
 8002c78:	20000419 	.word	0x20000419
 8002c7c:	0800d0f0 	.word	0x0800d0f0
 8002c80:	0800d104 	.word	0x0800d104
 8002c84:	0800d114 	.word	0x0800d114
 8002c88:	0800d128 	.word	0x0800d128
 8002c8c:	20000411 	.word	0x20000411
 8002c90:	20000398 	.word	0x20000398
 8002c94:	0800d138 	.word	0x0800d138
 8002c98:	0800d14c 	.word	0x0800d14c
 8002c9c:	20000402 	.word	0x20000402
 8002ca0:	0800d0a8 	.word	0x0800d0a8
 8002ca4:	0800d0bc 	.word	0x0800d0bc
 8002ca8:	0800d0cc 	.word	0x0800d0cc
			}
		} else if(kapi2Tip == 2) {
 8002cac:	4b8a      	ldr	r3, [pc, #552]	; (8002ed8 <menu+0x1828>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d104      	bne.n	8002cbe <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002cb4:	4a89      	ldr	r2, [pc, #548]	; (8002edc <menu+0x182c>)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f7fd fcfb 	bl	80006b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	4887      	ldr	r0, [pc, #540]	; (8002ee0 <menu+0x1830>)
 8002cc2:	f006 f91d 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d115      	bne.n	8002cf8 <menu+0x1648>
 8002ccc:	4b85      	ldr	r3, [pc, #532]	; (8002ee4 <menu+0x1834>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	f083 0301 	eor.w	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002cda:	4b7f      	ldr	r3, [pc, #508]	; (8002ed8 <menu+0x1828>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b7d      	ldr	r3, [pc, #500]	; (8002ed8 <menu+0x1828>)
 8002ce4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002ce6:	4b7c      	ldr	r3, [pc, #496]	; (8002ed8 <menu+0x1828>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <menu+0x1644>
				kapi2Tip = 0;
 8002cee:	4b7a      	ldr	r3, [pc, #488]	; (8002ed8 <menu+0x1828>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cf4:	f002 fc64 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	4879      	ldr	r0, [pc, #484]	; (8002ee0 <menu+0x1830>)
 8002cfc:	f006 f900 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d115      	bne.n	8002d32 <menu+0x1682>
 8002d06:	4b77      	ldr	r3, [pc, #476]	; (8002ee4 <menu+0x1834>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f083 0301 	eor.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002d14:	4b70      	ldr	r3, [pc, #448]	; (8002ed8 <menu+0x1828>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b6e      	ldr	r3, [pc, #440]	; (8002ed8 <menu+0x1828>)
 8002d1e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002d20:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <menu+0x1828>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d902      	bls.n	8002d2e <menu+0x167e>
		   		kapi2Tip = 2;
 8002d28:	4b6b      	ldr	r3, [pc, #428]	; (8002ed8 <menu+0x1828>)
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d2e:	f002 fc47 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d32:	2108      	movs	r1, #8
 8002d34:	486a      	ldr	r0, [pc, #424]	; (8002ee0 <menu+0x1830>)
 8002d36:	f006 f8e3 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10d      	bne.n	8002d5c <menu+0x16ac>
 8002d40:	4b68      	ldr	r3, [pc, #416]	; (8002ee4 <menu+0x1834>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002d4e:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <menu+0x1828>)
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <menu+0x1838>)
 8002d54:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002d56:	4b65      	ldr	r3, [pc, #404]	; (8002eec <menu+0x183c>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002d5c:	4b64      	ldr	r3, [pc, #400]	; (8002ef0 <menu+0x1840>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b0c      	cmp	r3, #12
 8002d62:	d17f      	bne.n	8002e64 <menu+0x17b4>
		if(dilSecim == 0) {
 8002d64:	4b63      	ldr	r3, [pc, #396]	; (8002ef4 <menu+0x1844>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002d6c:	4a62      	ldr	r2, [pc, #392]	; (8002ef8 <menu+0x1848>)
 8002d6e:	2101      	movs	r1, #1
 8002d70:	2001      	movs	r0, #1
 8002d72:	f7fd fc9f 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002d76:	4a61      	ldr	r2, [pc, #388]	; (8002efc <menu+0x184c>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f7fd fc9a 	bl	80006b4 <lcd_print>
 8002d80:	e00d      	b.n	8002d9e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002d82:	4b5c      	ldr	r3, [pc, #368]	; (8002ef4 <menu+0x1844>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d109      	bne.n	8002d9e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002d8a:	4a5d      	ldr	r2, [pc, #372]	; (8002f00 <menu+0x1850>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f7fd fc90 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d94:	4a5b      	ldr	r2, [pc, #364]	; (8002f04 <menu+0x1854>)
 8002d96:	2101      	movs	r1, #1
 8002d98:	2002      	movs	r0, #2
 8002d9a:	f7fd fc8b 	bl	80006b4 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002d9e:	4b5a      	ldr	r3, [pc, #360]	; (8002f08 <menu+0x1858>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	220a      	movs	r2, #10
 8002da4:	4959      	ldr	r1, [pc, #356]	; (8002f0c <menu+0x185c>)
 8002da6:	4618      	mov	r0, r3
 8002da8:	f009 f8d6 	bl	800bf58 <itoa>
		lcd_print(2,16,snum);
 8002dac:	4a57      	ldr	r2, [pc, #348]	; (8002f0c <menu+0x185c>)
 8002dae:	2110      	movs	r1, #16
 8002db0:	2002      	movs	r0, #2
 8002db2:	f7fd fc7f 	bl	80006b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002db6:	2102      	movs	r1, #2
 8002db8:	4849      	ldr	r0, [pc, #292]	; (8002ee0 <menu+0x1830>)
 8002dba:	f006 f8a1 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d119      	bne.n	8002df8 <menu+0x1748>
 8002dc4:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <menu+0x1834>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	f083 0301 	eor.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d012      	beq.n	8002df8 <menu+0x1748>
 8002dd2:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <menu+0x1828>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10e      	bne.n	8002df8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002dda:	4b4b      	ldr	r3, [pc, #300]	; (8002f08 <menu+0x1858>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b49      	ldr	r3, [pc, #292]	; (8002f08 <menu+0x1858>)
 8002de4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002de6:	4b48      	ldr	r3, [pc, #288]	; (8002f08 <menu+0x1858>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d902      	bls.n	8002df4 <menu+0x1744>
				kapi2AcSure = 0;
 8002dee:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <menu+0x1858>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002df4:	f002 fbe4 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002df8:	2104      	movs	r1, #4
 8002dfa:	4839      	ldr	r0, [pc, #228]	; (8002ee0 <menu+0x1830>)
 8002dfc:	f006 f880 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d119      	bne.n	8002e3a <menu+0x178a>
 8002e06:	4b37      	ldr	r3, [pc, #220]	; (8002ee4 <menu+0x1834>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f083 0301 	eor.w	r3, r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <menu+0x178a>
 8002e14:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <menu+0x1828>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10e      	bne.n	8002e3a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <menu+0x1858>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <menu+0x1858>)
 8002e26:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002e28:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <menu+0x1858>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b06      	cmp	r3, #6
 8002e2e:	d902      	bls.n	8002e36 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002e30:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <menu+0x1858>)
 8002e32:	2205      	movs	r2, #5
 8002e34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e36:	f002 fbc3 	bl	80055c0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3a:	2108      	movs	r1, #8
 8002e3c:	4828      	ldr	r0, [pc, #160]	; (8002ee0 <menu+0x1830>)
 8002e3e:	f006 f85f 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d10d      	bne.n	8002e64 <menu+0x17b4>
 8002e48:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <menu+0x1834>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	f083 0301 	eor.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002e56:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <menu+0x1858>)
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <menu+0x1838>)
 8002e5c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002e5e:	4b23      	ldr	r3, [pc, #140]	; (8002eec <menu+0x183c>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002e64:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <menu+0x1840>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b0d      	cmp	r3, #13
 8002e6a:	f040 80b5 	bne.w	8002fd8 <menu+0x1928>
		if(dilSecim == 0) {
 8002e6e:	4b21      	ldr	r3, [pc, #132]	; (8002ef4 <menu+0x1844>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002e76:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <menu+0x1860>)
 8002e78:	2101      	movs	r1, #1
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f7fd fc1a 	bl	80006b4 <lcd_print>
 8002e80:	e008      	b.n	8002e94 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002e82:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <menu+0x1844>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d104      	bne.n	8002e94 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002e8a:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <menu+0x1864>)
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7fd fc10 	bl	80006b4 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002e94:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <menu+0x1868>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002e9c:	4a1f      	ldr	r2, [pc, #124]	; (8002f1c <menu+0x186c>)
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	2002      	movs	r0, #2
 8002ea2:	f7fd fc07 	bl	80006b4 <lcd_print>
 8002ea6:	e048      	b.n	8002f3a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <menu+0x1868>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d13b      	bne.n	8002f28 <menu+0x1878>
			if(dilSecim == 0) {
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <menu+0x1844>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <menu+0x1870>)
 8002eba:	2101      	movs	r1, #1
 8002ebc:	2002      	movs	r0, #2
 8002ebe:	f7fd fbf9 	bl	80006b4 <lcd_print>
 8002ec2:	e03a      	b.n	8002f3a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <menu+0x1844>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d136      	bne.n	8002f3a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002ecc:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <menu+0x1874>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	f7fd fbef 	bl	80006b4 <lcd_print>
 8002ed6:	e030      	b.n	8002f3a <menu+0x188a>
 8002ed8:	20000402 	.word	0x20000402
 8002edc:	0800d0e0 	.word	0x0800d0e0
 8002ee0:	40010800 	.word	0x40010800
 8002ee4:	20000427 	.word	0x20000427
 8002ee8:	20000328 	.word	0x20000328
 8002eec:	20000424 	.word	0x20000424
 8002ef0:	200003f8 	.word	0x200003f8
 8002ef4:	20000419 	.word	0x20000419
 8002ef8:	0800d160 	.word	0x0800d160
 8002efc:	0800d104 	.word	0x0800d104
 8002f00:	0800d174 	.word	0x0800d174
 8002f04:	0800d128 	.word	0x0800d128
 8002f08:	20000412 	.word	0x20000412
 8002f0c:	20000398 	.word	0x20000398
 8002f10:	0800d188 	.word	0x0800d188
 8002f14:	0800d19c 	.word	0x0800d19c
 8002f18:	20000403 	.word	0x20000403
 8002f1c:	0800d0a8 	.word	0x0800d0a8
 8002f20:	0800d0bc 	.word	0x0800d0bc
 8002f24:	0800d0cc 	.word	0x0800d0cc
			}
		} else if(kapitablaTip == 2) {
 8002f28:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <menu+0x19e8>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d104      	bne.n	8002f3a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002f30:	4a5a      	ldr	r2, [pc, #360]	; (800309c <menu+0x19ec>)
 8002f32:	2101      	movs	r1, #1
 8002f34:	2002      	movs	r0, #2
 8002f36:	f7fd fbbd 	bl	80006b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	4858      	ldr	r0, [pc, #352]	; (80030a0 <menu+0x19f0>)
 8002f3e:	f005 ffdf 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d115      	bne.n	8002f74 <menu+0x18c4>
 8002f48:	4b56      	ldr	r3, [pc, #344]	; (80030a4 <menu+0x19f4>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	f083 0301 	eor.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00e      	beq.n	8002f74 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002f56:	4b50      	ldr	r3, [pc, #320]	; (8003098 <menu+0x19e8>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4b4e      	ldr	r3, [pc, #312]	; (8003098 <menu+0x19e8>)
 8002f60:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002f62:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <menu+0x19e8>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d902      	bls.n	8002f70 <menu+0x18c0>
				kapitablaTip = 0;
 8002f6a:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <menu+0x19e8>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f70:	f002 fb26 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f74:	2104      	movs	r1, #4
 8002f76:	484a      	ldr	r0, [pc, #296]	; (80030a0 <menu+0x19f0>)
 8002f78:	f005 ffc2 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d115      	bne.n	8002fae <menu+0x18fe>
 8002f82:	4b48      	ldr	r3, [pc, #288]	; (80030a4 <menu+0x19f4>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	f083 0301 	eor.w	r3, r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002f90:	4b41      	ldr	r3, [pc, #260]	; (8003098 <menu+0x19e8>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <menu+0x19e8>)
 8002f9a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002f9c:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <menu+0x19e8>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d902      	bls.n	8002faa <menu+0x18fa>
		   		kapitablaTip = 2;
 8002fa4:	4b3c      	ldr	r3, [pc, #240]	; (8003098 <menu+0x19e8>)
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002faa:	f002 fb09 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fae:	2108      	movs	r1, #8
 8002fb0:	483b      	ldr	r0, [pc, #236]	; (80030a0 <menu+0x19f0>)
 8002fb2:	f005 ffa5 	bl	8008f00 <HAL_GPIO_ReadPin>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d10d      	bne.n	8002fd8 <menu+0x1928>
 8002fbc:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <menu+0x19f4>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	f083 0301 	eor.w	r3, r3, #1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <menu+0x19e8>)
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <menu+0x19f8>)
 8002fd0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002fd2:	4b36      	ldr	r3, [pc, #216]	; (80030ac <menu+0x19fc>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002fd8:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <menu+0x1a00>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b0e      	cmp	r3, #14
 8002fde:	f040 80f2 	bne.w	80031c6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <menu+0x1a04>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002fea:	4a33      	ldr	r2, [pc, #204]	; (80030b8 <menu+0x1a08>)
 8002fec:	2101      	movs	r1, #1
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f7fd fb60 	bl	80006b4 <lcd_print>
 8002ff4:	e008      	b.n	8003008 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002ff6:	4b2f      	ldr	r3, [pc, #188]	; (80030b4 <menu+0x1a04>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d104      	bne.n	8003008 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002ffe:	4a2f      	ldr	r2, [pc, #188]	; (80030bc <menu+0x1a0c>)
 8003000:	2101      	movs	r1, #1
 8003002:	2001      	movs	r0, #1
 8003004:	f7fd fb56 	bl	80006b4 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8003008:	4b2d      	ldr	r3, [pc, #180]	; (80030c0 <menu+0x1a10>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d113      	bne.n	8003038 <menu+0x1988>
			if(dilSecim == 0){
 8003010:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <menu+0x1a04>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d105      	bne.n	8003024 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8003018:	4a2a      	ldr	r2, [pc, #168]	; (80030c4 <menu+0x1a14>)
 800301a:	2101      	movs	r1, #1
 800301c:	2002      	movs	r0, #2
 800301e:	f7fd fb49 	bl	80006b4 <lcd_print>
 8003022:	e071      	b.n	8003108 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8003024:	4b23      	ldr	r3, [pc, #140]	; (80030b4 <menu+0x1a04>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d16d      	bne.n	8003108 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 800302c:	4a26      	ldr	r2, [pc, #152]	; (80030c8 <menu+0x1a18>)
 800302e:	2101      	movs	r1, #1
 8003030:	2002      	movs	r0, #2
 8003032:	f7fd fb3f 	bl	80006b4 <lcd_print>
 8003036:	e067      	b.n	8003108 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <menu+0x1a10>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d112      	bne.n	8003066 <menu+0x19b6>
			if(dilSecim == 0){
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <menu+0x1a04>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8003048:	4a20      	ldr	r2, [pc, #128]	; (80030cc <menu+0x1a1c>)
 800304a:	2101      	movs	r1, #1
 800304c:	2002      	movs	r0, #2
 800304e:	f7fd fb31 	bl	80006b4 <lcd_print>
			}
			if(dilSecim == 1){
 8003052:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <menu+0x1a04>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d156      	bne.n	8003108 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 800305a:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <menu+0x1a20>)
 800305c:	2101      	movs	r1, #1
 800305e:	2002      	movs	r0, #2
 8003060:	f7fd fb28 	bl	80006b4 <lcd_print>
 8003064:	e050      	b.n	8003108 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <menu+0x1a10>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d136      	bne.n	80030dc <menu+0x1a2c>
			if(dilSecim == 0){
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <menu+0x1a04>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d105      	bne.n	8003082 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <menu+0x1a24>)
 8003078:	2101      	movs	r1, #1
 800307a:	2002      	movs	r0, #2
 800307c:	f7fd fb1a 	bl	80006b4 <lcd_print>
 8003080:	e042      	b.n	8003108 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <menu+0x1a04>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d13e      	bne.n	8003108 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 800308a:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <menu+0x1a28>)
 800308c:	2101      	movs	r1, #1
 800308e:	2002      	movs	r0, #2
 8003090:	f7fd fb10 	bl	80006b4 <lcd_print>
 8003094:	e038      	b.n	8003108 <menu+0x1a58>
 8003096:	bf00      	nop
 8003098:	20000403 	.word	0x20000403
 800309c:	0800d0e0 	.word	0x0800d0e0
 80030a0:	40010800 	.word	0x40010800
 80030a4:	20000427 	.word	0x20000427
 80030a8:	20000328 	.word	0x20000328
 80030ac:	20000424 	.word	0x20000424
 80030b0:	200003f8 	.word	0x200003f8
 80030b4:	20000419 	.word	0x20000419
 80030b8:	0800d1b0 	.word	0x0800d1b0
 80030bc:	0800d1c4 	.word	0x0800d1c4
 80030c0:	20000405 	.word	0x20000405
 80030c4:	0800d1d8 	.word	0x0800d1d8
 80030c8:	0800d1e8 	.word	0x0800d1e8
 80030cc:	0800d1f8 	.word	0x0800d1f8
 80030d0:	0800d208 	.word	0x0800d208
 80030d4:	0800d218 	.word	0x0800d218
 80030d8:	0800d22c 	.word	0x0800d22c
			}
		} else if(kapiTablaAcKonum == 3) {
 80030dc:	4b9b      	ldr	r3, [pc, #620]	; (800334c <menu+0x1c9c>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d111      	bne.n	8003108 <menu+0x1a58>
			if(dilSecim == 0) {
 80030e4:	4b9a      	ldr	r3, [pc, #616]	; (8003350 <menu+0x1ca0>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 80030ec:	4a99      	ldr	r2, [pc, #612]	; (8003354 <menu+0x1ca4>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	2002      	movs	r0, #2
 80030f2:	f7fd fadf 	bl	80006b4 <lcd_print>
			}
			if(dilSecim == 1) {
 80030f6:	4b96      	ldr	r3, [pc, #600]	; (8003350 <menu+0x1ca0>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d104      	bne.n	8003108 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 80030fe:	4a96      	ldr	r2, [pc, #600]	; (8003358 <menu+0x1ca8>)
 8003100:	2101      	movs	r1, #1
 8003102:	2002      	movs	r0, #2
 8003104:	f7fd fad6 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003108:	2102      	movs	r1, #2
 800310a:	4894      	ldr	r0, [pc, #592]	; (800335c <menu+0x1cac>)
 800310c:	f005 fef8 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003110:	4603      	mov	r3, r0
 8003112:	2b01      	cmp	r3, #1
 8003114:	d115      	bne.n	8003142 <menu+0x1a92>
 8003116:	4b92      	ldr	r3, [pc, #584]	; (8003360 <menu+0x1cb0>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	f083 0301 	eor.w	r3, r3, #1
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00e      	beq.n	8003142 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8003124:	4b89      	ldr	r3, [pc, #548]	; (800334c <menu+0x1c9c>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	b2da      	uxtb	r2, r3
 800312c:	4b87      	ldr	r3, [pc, #540]	; (800334c <menu+0x1c9c>)
 800312e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8003130:	4b86      	ldr	r3, [pc, #536]	; (800334c <menu+0x1c9c>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d902      	bls.n	800313e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8003138:	4b84      	ldr	r3, [pc, #528]	; (800334c <menu+0x1c9c>)
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800313e:	f002 fa3f 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003142:	2104      	movs	r1, #4
 8003144:	4885      	ldr	r0, [pc, #532]	; (800335c <menu+0x1cac>)
 8003146:	f005 fedb 	bl	8008f00 <HAL_GPIO_ReadPin>
 800314a:	4603      	mov	r3, r0
 800314c:	2b01      	cmp	r3, #1
 800314e:	d115      	bne.n	800317c <menu+0x1acc>
 8003150:	4b83      	ldr	r3, [pc, #524]	; (8003360 <menu+0x1cb0>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00e      	beq.n	800317c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800315e:	4b7b      	ldr	r3, [pc, #492]	; (800334c <menu+0x1c9c>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	3b01      	subs	r3, #1
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4b79      	ldr	r3, [pc, #484]	; (800334c <menu+0x1c9c>)
 8003168:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800316a:	4b78      	ldr	r3, [pc, #480]	; (800334c <menu+0x1c9c>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d902      	bls.n	8003178 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8003172:	4b76      	ldr	r3, [pc, #472]	; (800334c <menu+0x1c9c>)
 8003174:	2202      	movs	r2, #2
 8003176:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003178:	f002 fa22 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800317c:	2108      	movs	r1, #8
 800317e:	4877      	ldr	r0, [pc, #476]	; (800335c <menu+0x1cac>)
 8003180:	f005 febe 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003184:	4603      	mov	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	d11d      	bne.n	80031c6 <menu+0x1b16>
 800318a:	4b75      	ldr	r3, [pc, #468]	; (8003360 <menu+0x1cb0>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	f083 0301 	eor.w	r3, r3, #1
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d016      	beq.n	80031c6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8003198:	4b6c      	ldr	r3, [pc, #432]	; (800334c <menu+0x1c9c>)
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	4b71      	ldr	r3, [pc, #452]	; (8003364 <menu+0x1cb4>)
 800319e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80031a2:	4b6a      	ldr	r3, [pc, #424]	; (800334c <menu+0x1c9c>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <menu+0x1b02>
 80031aa:	4b68      	ldr	r3, [pc, #416]	; (800334c <menu+0x1c9c>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d106      	bne.n	80031c0 <menu+0x1b10>
				altLimit = 1;
 80031b2:	4b6d      	ldr	r3, [pc, #436]	; (8003368 <menu+0x1cb8>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80031b8:	4b6b      	ldr	r3, [pc, #428]	; (8003368 <menu+0x1cb8>)
 80031ba:	781a      	ldrb	r2, [r3, #0]
 80031bc:	4b69      	ldr	r3, [pc, #420]	; (8003364 <menu+0x1cb4>)
 80031be:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <menu+0x1cbc>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80031c6:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <menu+0x1cc0>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	d17f      	bne.n	80032ce <menu+0x1c1e>
		if(dilSecim == 0) {
 80031ce:	4b60      	ldr	r3, [pc, #384]	; (8003350 <menu+0x1ca0>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80031d6:	4a67      	ldr	r2, [pc, #412]	; (8003374 <menu+0x1cc4>)
 80031d8:	2101      	movs	r1, #1
 80031da:	2001      	movs	r0, #1
 80031dc:	f7fd fa6a 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80031e0:	4a65      	ldr	r2, [pc, #404]	; (8003378 <menu+0x1cc8>)
 80031e2:	2101      	movs	r1, #1
 80031e4:	2002      	movs	r0, #2
 80031e6:	f7fd fa65 	bl	80006b4 <lcd_print>
 80031ea:	e00d      	b.n	8003208 <menu+0x1b58>
		} else if(dilSecim == 1) {
 80031ec:	4b58      	ldr	r3, [pc, #352]	; (8003350 <menu+0x1ca0>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d109      	bne.n	8003208 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80031f4:	4a61      	ldr	r2, [pc, #388]	; (800337c <menu+0x1ccc>)
 80031f6:	2101      	movs	r1, #1
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7fd fa5b 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80031fe:	4a60      	ldr	r2, [pc, #384]	; (8003380 <menu+0x1cd0>)
 8003200:	2101      	movs	r1, #1
 8003202:	2002      	movs	r0, #2
 8003204:	f7fd fa56 	bl	80006b4 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003208:	4b5e      	ldr	r3, [pc, #376]	; (8003384 <menu+0x1cd4>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	220a      	movs	r2, #10
 800320e:	495e      	ldr	r1, [pc, #376]	; (8003388 <menu+0x1cd8>)
 8003210:	4618      	mov	r0, r3
 8003212:	f008 fea1 	bl	800bf58 <itoa>
		lcd_print(2,16,snum);
 8003216:	4a5c      	ldr	r2, [pc, #368]	; (8003388 <menu+0x1cd8>)
 8003218:	2110      	movs	r1, #16
 800321a:	2002      	movs	r0, #2
 800321c:	f7fd fa4a 	bl	80006b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003220:	2102      	movs	r1, #2
 8003222:	484e      	ldr	r0, [pc, #312]	; (800335c <menu+0x1cac>)
 8003224:	f005 fe6c 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	d119      	bne.n	8003262 <menu+0x1bb2>
 800322e:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <menu+0x1cb0>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	f083 0301 	eor.w	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d012      	beq.n	8003262 <menu+0x1bb2>
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <menu+0x1cdc>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10e      	bne.n	8003262 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003244:	4b4f      	ldr	r3, [pc, #316]	; (8003384 <menu+0x1cd4>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	b2da      	uxtb	r2, r3
 800324c:	4b4d      	ldr	r3, [pc, #308]	; (8003384 <menu+0x1cd4>)
 800324e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003250:	4b4c      	ldr	r3, [pc, #304]	; (8003384 <menu+0x1cd4>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b05      	cmp	r3, #5
 8003256:	d902      	bls.n	800325e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8003258:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <menu+0x1cd4>)
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800325e:	f002 f9af 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003262:	2104      	movs	r1, #4
 8003264:	483d      	ldr	r0, [pc, #244]	; (800335c <menu+0x1cac>)
 8003266:	f005 fe4b 	bl	8008f00 <HAL_GPIO_ReadPin>
 800326a:	4603      	mov	r3, r0
 800326c:	2b01      	cmp	r3, #1
 800326e:	d119      	bne.n	80032a4 <menu+0x1bf4>
 8003270:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <menu+0x1cb0>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	f083 0301 	eor.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d012      	beq.n	80032a4 <menu+0x1bf4>
 800327e:	4b43      	ldr	r3, [pc, #268]	; (800338c <menu+0x1cdc>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10e      	bne.n	80032a4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003286:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <menu+0x1cd4>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	3b01      	subs	r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <menu+0x1cd4>)
 8003290:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003292:	4b3c      	ldr	r3, [pc, #240]	; (8003384 <menu+0x1cd4>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b06      	cmp	r3, #6
 8003298:	d902      	bls.n	80032a0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800329a:	4b3a      	ldr	r3, [pc, #232]	; (8003384 <menu+0x1cd4>)
 800329c:	2205      	movs	r2, #5
 800329e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80032a0:	f002 f98e 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032a4:	2108      	movs	r1, #8
 80032a6:	482d      	ldr	r0, [pc, #180]	; (800335c <menu+0x1cac>)
 80032a8:	f005 fe2a 	bl	8008f00 <HAL_GPIO_ReadPin>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d10d      	bne.n	80032ce <menu+0x1c1e>
 80032b2:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <menu+0x1cb0>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	f083 0301 	eor.w	r3, r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d006      	beq.n	80032ce <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80032c0:	4b30      	ldr	r3, [pc, #192]	; (8003384 <menu+0x1cd4>)
 80032c2:	781a      	ldrb	r2, [r3, #0]
 80032c4:	4b27      	ldr	r3, [pc, #156]	; (8003364 <menu+0x1cb4>)
 80032c6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80032c8:	4b28      	ldr	r3, [pc, #160]	; (800336c <menu+0x1cbc>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80032ce:	4b28      	ldr	r3, [pc, #160]	; (8003370 <menu+0x1cc0>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	f040 80bc 	bne.w	8003450 <menu+0x1da0>
		if(dilSecim == 0) {
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <menu+0x1ca0>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <menu+0x1ce0>)
 80032e2:	2101      	movs	r1, #1
 80032e4:	2001      	movs	r0, #1
 80032e6:	f7fd f9e5 	bl	80006b4 <lcd_print>
 80032ea:	e008      	b.n	80032fe <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <menu+0x1ca0>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d104      	bne.n	80032fe <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80032f4:	4a27      	ldr	r2, [pc, #156]	; (8003394 <menu+0x1ce4>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	2001      	movs	r0, #1
 80032fa:	f7fd f9db 	bl	80006b4 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <menu+0x1ce8>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d113      	bne.n	800332e <menu+0x1c7e>
			if(dilSecim == 0) {
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <menu+0x1ca0>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <menu+0x1ca4>)
 8003310:	2101      	movs	r1, #1
 8003312:	2002      	movs	r0, #2
 8003314:	f7fd f9ce 	bl	80006b4 <lcd_print>
 8003318:	e04b      	b.n	80033b2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <menu+0x1ca0>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d147      	bne.n	80033b2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003322:	4a0d      	ldr	r2, [pc, #52]	; (8003358 <menu+0x1ca8>)
 8003324:	2101      	movs	r1, #1
 8003326:	2002      	movs	r0, #2
 8003328:	f7fd f9c4 	bl	80006b4 <lcd_print>
 800332c:	e041      	b.n	80033b2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800332e:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <menu+0x1ce8>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d13d      	bne.n	80033b2 <menu+0x1d02>
			if(dilSecim == 0) {
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <menu+0x1ca0>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d130      	bne.n	80033a0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800333e:	4a17      	ldr	r2, [pc, #92]	; (800339c <menu+0x1cec>)
 8003340:	2101      	movs	r1, #1
 8003342:	2002      	movs	r0, #2
 8003344:	f7fd f9b6 	bl	80006b4 <lcd_print>
 8003348:	e033      	b.n	80033b2 <menu+0x1d02>
 800334a:	bf00      	nop
 800334c:	20000405 	.word	0x20000405
 8003350:	20000419 	.word	0x20000419
 8003354:	0800cea0 	.word	0x0800cea0
 8003358:	0800ceb4 	.word	0x0800ceb4
 800335c:	40010800 	.word	0x40010800
 8003360:	20000427 	.word	0x20000427
 8003364:	20000328 	.word	0x20000328
 8003368:	200003fe 	.word	0x200003fe
 800336c:	20000424 	.word	0x20000424
 8003370:	200003f8 	.word	0x200003f8
 8003374:	0800d240 	.word	0x0800d240
 8003378:	0800d104 	.word	0x0800d104
 800337c:	0800d254 	.word	0x0800d254
 8003380:	0800d128 	.word	0x0800d128
 8003384:	20000413 	.word	0x20000413
 8003388:	20000398 	.word	0x20000398
 800338c:	20000403 	.word	0x20000403
 8003390:	0800d268 	.word	0x0800d268
 8003394:	0800d27c 	.word	0x0800d27c
 8003398:	20000406 	.word	0x20000406
 800339c:	0800cf00 	.word	0x0800cf00
			} else if(dilSecim == 1) {
 80033a0:	4b99      	ldr	r3, [pc, #612]	; (8003608 <menu+0x1f58>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d104      	bne.n	80033b2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80033a8:	4a98      	ldr	r2, [pc, #608]	; (800360c <menu+0x1f5c>)
 80033aa:	2101      	movs	r1, #1
 80033ac:	2002      	movs	r0, #2
 80033ae:	f7fd f981 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033b2:	2102      	movs	r1, #2
 80033b4:	4896      	ldr	r0, [pc, #600]	; (8003610 <menu+0x1f60>)
 80033b6:	f005 fda3 	bl	8008f00 <HAL_GPIO_ReadPin>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d115      	bne.n	80033ec <menu+0x1d3c>
 80033c0:	4b94      	ldr	r3, [pc, #592]	; (8003614 <menu+0x1f64>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	f083 0301 	eor.w	r3, r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00e      	beq.n	80033ec <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80033ce:	4b92      	ldr	r3, [pc, #584]	; (8003618 <menu+0x1f68>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b90      	ldr	r3, [pc, #576]	; (8003618 <menu+0x1f68>)
 80033d8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80033da:	4b8f      	ldr	r3, [pc, #572]	; (8003618 <menu+0x1f68>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d902      	bls.n	80033e8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80033e2:	4b8d      	ldr	r3, [pc, #564]	; (8003618 <menu+0x1f68>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033e8:	f002 f8ea 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ec:	2104      	movs	r1, #4
 80033ee:	4888      	ldr	r0, [pc, #544]	; (8003610 <menu+0x1f60>)
 80033f0:	f005 fd86 	bl	8008f00 <HAL_GPIO_ReadPin>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d115      	bne.n	8003426 <menu+0x1d76>
 80033fa:	4b86      	ldr	r3, [pc, #536]	; (8003614 <menu+0x1f64>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	f083 0301 	eor.w	r3, r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003408:	4b83      	ldr	r3, [pc, #524]	; (8003618 <menu+0x1f68>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	3b01      	subs	r3, #1
 800340e:	b2da      	uxtb	r2, r3
 8003410:	4b81      	ldr	r3, [pc, #516]	; (8003618 <menu+0x1f68>)
 8003412:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003414:	4b80      	ldr	r3, [pc, #512]	; (8003618 <menu+0x1f68>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800341c:	4b7e      	ldr	r3, [pc, #504]	; (8003618 <menu+0x1f68>)
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003422:	f002 f8cd 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003426:	2108      	movs	r1, #8
 8003428:	4879      	ldr	r0, [pc, #484]	; (8003610 <menu+0x1f60>)
 800342a:	f005 fd69 	bl	8008f00 <HAL_GPIO_ReadPin>
 800342e:	4603      	mov	r3, r0
 8003430:	2b01      	cmp	r3, #1
 8003432:	d10d      	bne.n	8003450 <menu+0x1da0>
 8003434:	4b77      	ldr	r3, [pc, #476]	; (8003614 <menu+0x1f64>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003442:	4b75      	ldr	r3, [pc, #468]	; (8003618 <menu+0x1f68>)
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	4b75      	ldr	r3, [pc, #468]	; (800361c <menu+0x1f6c>)
 8003448:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800344a:	4b75      	ldr	r3, [pc, #468]	; (8003620 <menu+0x1f70>)
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003450:	4b74      	ldr	r3, [pc, #464]	; (8003624 <menu+0x1f74>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b11      	cmp	r3, #17
 8003456:	f040 80c3 	bne.w	80035e0 <menu+0x1f30>
		if(dilSecim == 0) {
 800345a:	4b6b      	ldr	r3, [pc, #428]	; (8003608 <menu+0x1f58>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003462:	4a71      	ldr	r2, [pc, #452]	; (8003628 <menu+0x1f78>)
 8003464:	2101      	movs	r1, #1
 8003466:	2001      	movs	r0, #1
 8003468:	f7fd f924 	bl	80006b4 <lcd_print>
 800346c:	e008      	b.n	8003480 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800346e:	4b66      	ldr	r3, [pc, #408]	; (8003608 <menu+0x1f58>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d104      	bne.n	8003480 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003476:	4a6d      	ldr	r2, [pc, #436]	; (800362c <menu+0x1f7c>)
 8003478:	2101      	movs	r1, #1
 800347a:	2001      	movs	r0, #1
 800347c:	f7fd f91a 	bl	80006b4 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003480:	4b6b      	ldr	r3, [pc, #428]	; (8003630 <menu+0x1f80>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d113      	bne.n	80034b0 <menu+0x1e00>
			if(dilSecim == 0){
 8003488:	4b5f      	ldr	r3, [pc, #380]	; (8003608 <menu+0x1f58>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003490:	4a68      	ldr	r2, [pc, #416]	; (8003634 <menu+0x1f84>)
 8003492:	2101      	movs	r1, #1
 8003494:	2002      	movs	r0, #2
 8003496:	f7fd f90d 	bl	80006b4 <lcd_print>
 800349a:	e038      	b.n	800350e <menu+0x1e5e>
			} else if(dilSecim == 1){
 800349c:	4b5a      	ldr	r3, [pc, #360]	; (8003608 <menu+0x1f58>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d134      	bne.n	800350e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80034a4:	4a64      	ldr	r2, [pc, #400]	; (8003638 <menu+0x1f88>)
 80034a6:	2101      	movs	r1, #1
 80034a8:	2002      	movs	r0, #2
 80034aa:	f7fd f903 	bl	80006b4 <lcd_print>
 80034ae:	e02e      	b.n	800350e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80034b0:	4b5f      	ldr	r3, [pc, #380]	; (8003630 <menu+0x1f80>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d113      	bne.n	80034e0 <menu+0x1e30>
			if(dilSecim == 0){
 80034b8:	4b53      	ldr	r3, [pc, #332]	; (8003608 <menu+0x1f58>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80034c0:	4a5e      	ldr	r2, [pc, #376]	; (800363c <menu+0x1f8c>)
 80034c2:	2101      	movs	r1, #1
 80034c4:	2002      	movs	r0, #2
 80034c6:	f7fd f8f5 	bl	80006b4 <lcd_print>
 80034ca:	e020      	b.n	800350e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80034cc:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <menu+0x1f58>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d11c      	bne.n	800350e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80034d4:	4a5a      	ldr	r2, [pc, #360]	; (8003640 <menu+0x1f90>)
 80034d6:	2101      	movs	r1, #1
 80034d8:	2002      	movs	r0, #2
 80034da:	f7fd f8eb 	bl	80006b4 <lcd_print>
 80034de:	e016      	b.n	800350e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80034e0:	4b53      	ldr	r3, [pc, #332]	; (8003630 <menu+0x1f80>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d112      	bne.n	800350e <menu+0x1e5e>
			if(dilSecim == 0) {
 80034e8:	4b47      	ldr	r3, [pc, #284]	; (8003608 <menu+0x1f58>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80034f0:	4a54      	ldr	r2, [pc, #336]	; (8003644 <menu+0x1f94>)
 80034f2:	2101      	movs	r1, #1
 80034f4:	2002      	movs	r0, #2
 80034f6:	f7fd f8dd 	bl	80006b4 <lcd_print>
 80034fa:	e008      	b.n	800350e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80034fc:	4b42      	ldr	r3, [pc, #264]	; (8003608 <menu+0x1f58>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d104      	bne.n	800350e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003504:	4a50      	ldr	r2, [pc, #320]	; (8003648 <menu+0x1f98>)
 8003506:	2101      	movs	r1, #1
 8003508:	2002      	movs	r0, #2
 800350a:	f7fd f8d3 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800350e:	2102      	movs	r1, #2
 8003510:	483f      	ldr	r0, [pc, #252]	; (8003610 <menu+0x1f60>)
 8003512:	f005 fcf5 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003516:	4603      	mov	r3, r0
 8003518:	2b01      	cmp	r3, #1
 800351a:	d115      	bne.n	8003548 <menu+0x1e98>
 800351c:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <menu+0x1f64>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	f083 0301 	eor.w	r3, r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00e      	beq.n	8003548 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <menu+0x1f80>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	b2da      	uxtb	r2, r3
 8003532:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <menu+0x1f80>)
 8003534:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003536:	4b3e      	ldr	r3, [pc, #248]	; (8003630 <menu+0x1f80>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d902      	bls.n	8003544 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800353e:	4b3c      	ldr	r3, [pc, #240]	; (8003630 <menu+0x1f80>)
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003544:	f002 f83c 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003548:	2104      	movs	r1, #4
 800354a:	4831      	ldr	r0, [pc, #196]	; (8003610 <menu+0x1f60>)
 800354c:	f005 fcd8 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003550:	4603      	mov	r3, r0
 8003552:	2b01      	cmp	r3, #1
 8003554:	d115      	bne.n	8003582 <menu+0x1ed2>
 8003556:	4b2f      	ldr	r3, [pc, #188]	; (8003614 <menu+0x1f64>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	f083 0301 	eor.w	r3, r3, #1
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00e      	beq.n	8003582 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003564:	4b32      	ldr	r3, [pc, #200]	; (8003630 <menu+0x1f80>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	3b01      	subs	r3, #1
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b30      	ldr	r3, [pc, #192]	; (8003630 <menu+0x1f80>)
 800356e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003570:	4b2f      	ldr	r3, [pc, #188]	; (8003630 <menu+0x1f80>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d902      	bls.n	800357e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003578:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <menu+0x1f80>)
 800357a:	2202      	movs	r2, #2
 800357c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800357e:	f002 f81f 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003582:	2108      	movs	r1, #8
 8003584:	4822      	ldr	r0, [pc, #136]	; (8003610 <menu+0x1f60>)
 8003586:	f005 fcbb 	bl	8008f00 <HAL_GPIO_ReadPin>
 800358a:	4603      	mov	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	d127      	bne.n	80035e0 <menu+0x1f30>
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <menu+0x1f64>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	f083 0301 	eor.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <menu+0x1f80>)
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <menu+0x1f6c>)
 80035a4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80035a6:	4b22      	ldr	r3, [pc, #136]	; (8003630 <menu+0x1f80>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d003      	beq.n	80035b6 <menu+0x1f06>
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <menu+0x1f80>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d106      	bne.n	80035c4 <menu+0x1f14>
				calismaSekli = 0;
 80035b6:	4b25      	ldr	r3, [pc, #148]	; (800364c <menu+0x1f9c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80035bc:	4b23      	ldr	r3, [pc, #140]	; (800364c <menu+0x1f9c>)
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	4b16      	ldr	r3, [pc, #88]	; (800361c <menu+0x1f6c>)
 80035c2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80035c4:	4b1a      	ldr	r3, [pc, #104]	; (8003630 <menu+0x1f80>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <menu+0x1fa0>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80035d2:	4b1f      	ldr	r3, [pc, #124]	; (8003650 <menu+0x1fa0>)
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <menu+0x1f6c>)
 80035d8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <menu+0x1f70>)
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <menu+0x1f74>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b12      	cmp	r3, #18
 80035e6:	f040 80d5 	bne.w	8003794 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80035ea:	4b11      	ldr	r3, [pc, #68]	; (8003630 <menu+0x1f80>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d13c      	bne.n	800366c <menu+0x1fbc>
			if(dilSecim == 0) {
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <menu+0x1f58>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d12e      	bne.n	8003658 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80035fa:	4a16      	ldr	r2, [pc, #88]	; (8003654 <menu+0x1fa4>)
 80035fc:	2101      	movs	r1, #1
 80035fe:	2001      	movs	r0, #1
 8003600:	f7fd f858 	bl	80006b4 <lcd_print>
 8003604:	e048      	b.n	8003698 <menu+0x1fe8>
 8003606:	bf00      	nop
 8003608:	20000419 	.word	0x20000419
 800360c:	0800cf14 	.word	0x0800cf14
 8003610:	40010800 	.word	0x40010800
 8003614:	20000427 	.word	0x20000427
 8003618:	20000406 	.word	0x20000406
 800361c:	20000328 	.word	0x20000328
 8003620:	20000424 	.word	0x20000424
 8003624:	200003f8 	.word	0x200003f8
 8003628:	0800d290 	.word	0x0800d290
 800362c:	0800d2a4 	.word	0x0800d2a4
 8003630:	20000407 	.word	0x20000407
 8003634:	0800d2b8 	.word	0x0800d2b8
 8003638:	0800d2c8 	.word	0x0800d2c8
 800363c:	0800d2d8 	.word	0x0800d2d8
 8003640:	0800d2e8 	.word	0x0800d2e8
 8003644:	0800cea0 	.word	0x0800cea0
 8003648:	0800ceb4 	.word	0x0800ceb4
 800364c:	200003f9 	.word	0x200003f9
 8003650:	2000040a 	.word	0x2000040a
 8003654:	0800d2f8 	.word	0x0800d2f8
			} else if(dilSecim == 1) {
 8003658:	4b7b      	ldr	r3, [pc, #492]	; (8003848 <menu+0x2198>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d11b      	bne.n	8003698 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003660:	4a7a      	ldr	r2, [pc, #488]	; (800384c <menu+0x219c>)
 8003662:	2101      	movs	r1, #1
 8003664:	2001      	movs	r0, #1
 8003666:	f7fd f825 	bl	80006b4 <lcd_print>
 800366a:	e015      	b.n	8003698 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800366c:	4b78      	ldr	r3, [pc, #480]	; (8003850 <menu+0x21a0>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d111      	bne.n	8003698 <menu+0x1fe8>
			if(dilSecim == 0){
 8003674:	4b74      	ldr	r3, [pc, #464]	; (8003848 <menu+0x2198>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800367c:	4a75      	ldr	r2, [pc, #468]	; (8003854 <menu+0x21a4>)
 800367e:	2101      	movs	r1, #1
 8003680:	2001      	movs	r0, #1
 8003682:	f7fd f817 	bl	80006b4 <lcd_print>
			}
			if(dilSecim == 1){
 8003686:	4b70      	ldr	r3, [pc, #448]	; (8003848 <menu+0x2198>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d104      	bne.n	8003698 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800368e:	4a72      	ldr	r2, [pc, #456]	; (8003858 <menu+0x21a8>)
 8003690:	2101      	movs	r1, #1
 8003692:	2001      	movs	r0, #1
 8003694:	f7fd f80e 	bl	80006b4 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003698:	4b70      	ldr	r3, [pc, #448]	; (800385c <menu+0x21ac>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d113      	bne.n	80036c8 <menu+0x2018>
			if(dilSecim == 0) {
 80036a0:	4b69      	ldr	r3, [pc, #420]	; (8003848 <menu+0x2198>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80036a8:	4a6d      	ldr	r2, [pc, #436]	; (8003860 <menu+0x21b0>)
 80036aa:	2101      	movs	r1, #1
 80036ac:	2002      	movs	r0, #2
 80036ae:	f7fd f801 	bl	80006b4 <lcd_print>
 80036b2:	e020      	b.n	80036f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80036b4:	4b64      	ldr	r3, [pc, #400]	; (8003848 <menu+0x2198>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d11c      	bne.n	80036f6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80036bc:	4a69      	ldr	r2, [pc, #420]	; (8003864 <menu+0x21b4>)
 80036be:	2101      	movs	r1, #1
 80036c0:	2002      	movs	r0, #2
 80036c2:	f7fc fff7 	bl	80006b4 <lcd_print>
 80036c6:	e016      	b.n	80036f6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80036c8:	4b64      	ldr	r3, [pc, #400]	; (800385c <menu+0x21ac>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d112      	bne.n	80036f6 <menu+0x2046>
			if(dilSecim == 0){
 80036d0:	4b5d      	ldr	r3, [pc, #372]	; (8003848 <menu+0x2198>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80036d8:	4a63      	ldr	r2, [pc, #396]	; (8003868 <menu+0x21b8>)
 80036da:	2101      	movs	r1, #1
 80036dc:	2002      	movs	r0, #2
 80036de:	f7fc ffe9 	bl	80006b4 <lcd_print>
 80036e2:	e008      	b.n	80036f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80036e4:	4b58      	ldr	r3, [pc, #352]	; (8003848 <menu+0x2198>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d104      	bne.n	80036f6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80036ec:	4a5f      	ldr	r2, [pc, #380]	; (800386c <menu+0x21bc>)
 80036ee:	2101      	movs	r1, #1
 80036f0:	2002      	movs	r0, #2
 80036f2:	f7fc ffdf 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f6:	2102      	movs	r1, #2
 80036f8:	485d      	ldr	r0, [pc, #372]	; (8003870 <menu+0x21c0>)
 80036fa:	f005 fc01 	bl	8008f00 <HAL_GPIO_ReadPin>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b01      	cmp	r3, #1
 8003702:	d115      	bne.n	8003730 <menu+0x2080>
 8003704:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <menu+0x21c4>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	f083 0301 	eor.w	r3, r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00e      	beq.n	8003730 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003712:	4b52      	ldr	r3, [pc, #328]	; (800385c <menu+0x21ac>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b50      	ldr	r3, [pc, #320]	; (800385c <menu+0x21ac>)
 800371c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800371e:	4b4f      	ldr	r3, [pc, #316]	; (800385c <menu+0x21ac>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d902      	bls.n	800372c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003726:	4b4d      	ldr	r3, [pc, #308]	; (800385c <menu+0x21ac>)
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800372c:	f001 ff48 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003730:	2104      	movs	r1, #4
 8003732:	484f      	ldr	r0, [pc, #316]	; (8003870 <menu+0x21c0>)
 8003734:	f005 fbe4 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d115      	bne.n	800376a <menu+0x20ba>
 800373e:	4b4d      	ldr	r3, [pc, #308]	; (8003874 <menu+0x21c4>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	f083 0301 	eor.w	r3, r3, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00e      	beq.n	800376a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800374c:	4b43      	ldr	r3, [pc, #268]	; (800385c <menu+0x21ac>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	3b01      	subs	r3, #1
 8003752:	b2da      	uxtb	r2, r3
 8003754:	4b41      	ldr	r3, [pc, #260]	; (800385c <menu+0x21ac>)
 8003756:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003758:	4b40      	ldr	r3, [pc, #256]	; (800385c <menu+0x21ac>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003760:	4b3e      	ldr	r3, [pc, #248]	; (800385c <menu+0x21ac>)
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003766:	f001 ff2b 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800376a:	2108      	movs	r1, #8
 800376c:	4840      	ldr	r0, [pc, #256]	; (8003870 <menu+0x21c0>)
 800376e:	f005 fbc7 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003772:	4603      	mov	r3, r0
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10d      	bne.n	8003794 <menu+0x20e4>
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <menu+0x21c4>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	f083 0301 	eor.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d006      	beq.n	8003794 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003786:	4b35      	ldr	r3, [pc, #212]	; (800385c <menu+0x21ac>)
 8003788:	781a      	ldrb	r2, [r3, #0]
 800378a:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <menu+0x21c8>)
 800378c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800378e:	4b3b      	ldr	r3, [pc, #236]	; (800387c <menu+0x21cc>)
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003794:	4b3a      	ldr	r3, [pc, #232]	; (8003880 <menu+0x21d0>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b13      	cmp	r3, #19
 800379a:	f040 80d5 	bne.w	8003948 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800379e:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <menu+0x21a0>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d113      	bne.n	80037ce <menu+0x211e>
			if(dilSecim == 0) {
 80037a6:	4b28      	ldr	r3, [pc, #160]	; (8003848 <menu+0x2198>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d105      	bne.n	80037ba <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80037ae:	4a35      	ldr	r2, [pc, #212]	; (8003884 <menu+0x21d4>)
 80037b0:	2101      	movs	r1, #1
 80037b2:	2001      	movs	r0, #1
 80037b4:	f7fc ff7e 	bl	80006b4 <lcd_print>
 80037b8:	e01f      	b.n	80037fa <menu+0x214a>
			} else if(dilSecim == 1) {
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <menu+0x2198>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d11b      	bne.n	80037fa <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80037c2:	4a31      	ldr	r2, [pc, #196]	; (8003888 <menu+0x21d8>)
 80037c4:	2101      	movs	r1, #1
 80037c6:	2001      	movs	r0, #1
 80037c8:	f7fc ff74 	bl	80006b4 <lcd_print>
 80037cc:	e015      	b.n	80037fa <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <menu+0x21a0>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d111      	bne.n	80037fa <menu+0x214a>
			if(dilSecim == 0) {
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <menu+0x2198>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d104      	bne.n	80037e8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80037de:	4a2b      	ldr	r2, [pc, #172]	; (800388c <menu+0x21dc>)
 80037e0:	2101      	movs	r1, #1
 80037e2:	2001      	movs	r0, #1
 80037e4:	f7fc ff66 	bl	80006b4 <lcd_print>
			}
			if(dilSecim == 1) {
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <menu+0x2198>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d104      	bne.n	80037fa <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80037f0:	4a27      	ldr	r2, [pc, #156]	; (8003890 <menu+0x21e0>)
 80037f2:	2101      	movs	r1, #1
 80037f4:	2001      	movs	r0, #1
 80037f6:	f7fc ff5d 	bl	80006b4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <menu+0x21e4>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d113      	bne.n	800382a <menu+0x217a>
			if(dilSecim == 0) {
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <menu+0x2198>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800380a:	4a15      	ldr	r2, [pc, #84]	; (8003860 <menu+0x21b0>)
 800380c:	2101      	movs	r1, #1
 800380e:	2002      	movs	r0, #2
 8003810:	f7fc ff50 	bl	80006b4 <lcd_print>
 8003814:	e049      	b.n	80038aa <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <menu+0x2198>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d145      	bne.n	80038aa <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800381e:	4a11      	ldr	r2, [pc, #68]	; (8003864 <menu+0x21b4>)
 8003820:	2101      	movs	r1, #1
 8003822:	2002      	movs	r0, #2
 8003824:	f7fc ff46 	bl	80006b4 <lcd_print>
 8003828:	e03f      	b.n	80038aa <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800382a:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <menu+0x21e4>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d13b      	bne.n	80038aa <menu+0x21fa>
			if(dilSecim == 0) {
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <menu+0x2198>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d12e      	bne.n	8003898 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800383a:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <menu+0x21b8>)
 800383c:	2101      	movs	r1, #1
 800383e:	2002      	movs	r0, #2
 8003840:	f7fc ff38 	bl	80006b4 <lcd_print>
 8003844:	e031      	b.n	80038aa <menu+0x21fa>
 8003846:	bf00      	nop
 8003848:	20000419 	.word	0x20000419
 800384c:	0800d30c 	.word	0x0800d30c
 8003850:	20000407 	.word	0x20000407
 8003854:	0800d31c 	.word	0x0800d31c
 8003858:	0800d330 	.word	0x0800d330
 800385c:	20000408 	.word	0x20000408
 8003860:	0800cea0 	.word	0x0800cea0
 8003864:	0800ceb4 	.word	0x0800ceb4
 8003868:	0800cf00 	.word	0x0800cf00
 800386c:	0800cf14 	.word	0x0800cf14
 8003870:	40010800 	.word	0x40010800
 8003874:	20000427 	.word	0x20000427
 8003878:	20000328 	.word	0x20000328
 800387c:	20000424 	.word	0x20000424
 8003880:	200003f8 	.word	0x200003f8
 8003884:	0800d344 	.word	0x0800d344
 8003888:	0800d358 	.word	0x0800d358
 800388c:	0800d36c 	.word	0x0800d36c
 8003890:	0800d380 	.word	0x0800d380
 8003894:	20000409 	.word	0x20000409
			} else if(dilSecim == 1) {
 8003898:	4b90      	ldr	r3, [pc, #576]	; (8003adc <menu+0x242c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d104      	bne.n	80038aa <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80038a0:	4a8f      	ldr	r2, [pc, #572]	; (8003ae0 <menu+0x2430>)
 80038a2:	2101      	movs	r1, #1
 80038a4:	2002      	movs	r0, #2
 80038a6:	f7fc ff05 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038aa:	2102      	movs	r1, #2
 80038ac:	488d      	ldr	r0, [pc, #564]	; (8003ae4 <menu+0x2434>)
 80038ae:	f005 fb27 	bl	8008f00 <HAL_GPIO_ReadPin>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d115      	bne.n	80038e4 <menu+0x2234>
 80038b8:	4b8b      	ldr	r3, [pc, #556]	; (8003ae8 <menu+0x2438>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	f083 0301 	eor.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00e      	beq.n	80038e4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80038c6:	4b89      	ldr	r3, [pc, #548]	; (8003aec <menu+0x243c>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	3301      	adds	r3, #1
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4b87      	ldr	r3, [pc, #540]	; (8003aec <menu+0x243c>)
 80038d0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80038d2:	4b86      	ldr	r3, [pc, #536]	; (8003aec <menu+0x243c>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d902      	bls.n	80038e0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80038da:	4b84      	ldr	r3, [pc, #528]	; (8003aec <menu+0x243c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038e0:	f001 fe6e 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038e4:	2104      	movs	r1, #4
 80038e6:	487f      	ldr	r0, [pc, #508]	; (8003ae4 <menu+0x2434>)
 80038e8:	f005 fb0a 	bl	8008f00 <HAL_GPIO_ReadPin>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d115      	bne.n	800391e <menu+0x226e>
 80038f2:	4b7d      	ldr	r3, [pc, #500]	; (8003ae8 <menu+0x2438>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	f083 0301 	eor.w	r3, r3, #1
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00e      	beq.n	800391e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003900:	4b7a      	ldr	r3, [pc, #488]	; (8003aec <menu+0x243c>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	3b01      	subs	r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	4b78      	ldr	r3, [pc, #480]	; (8003aec <menu+0x243c>)
 800390a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800390c:	4b77      	ldr	r3, [pc, #476]	; (8003aec <menu+0x243c>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003914:	4b75      	ldr	r3, [pc, #468]	; (8003aec <menu+0x243c>)
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800391a:	f001 fe51 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800391e:	2108      	movs	r1, #8
 8003920:	4870      	ldr	r0, [pc, #448]	; (8003ae4 <menu+0x2434>)
 8003922:	f005 faed 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003926:	4603      	mov	r3, r0
 8003928:	2b01      	cmp	r3, #1
 800392a:	d10d      	bne.n	8003948 <menu+0x2298>
 800392c:	4b6e      	ldr	r3, [pc, #440]	; (8003ae8 <menu+0x2438>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	f083 0301 	eor.w	r3, r3, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800393a:	4b6c      	ldr	r3, [pc, #432]	; (8003aec <menu+0x243c>)
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	4b6c      	ldr	r3, [pc, #432]	; (8003af0 <menu+0x2440>)
 8003940:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003942:	4b6c      	ldr	r3, [pc, #432]	; (8003af4 <menu+0x2444>)
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003948:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <menu+0x2448>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b14      	cmp	r3, #20
 800394e:	f040 80b5 	bne.w	8003abc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003952:	4b6a      	ldr	r3, [pc, #424]	; (8003afc <menu+0x244c>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d113      	bne.n	8003982 <menu+0x22d2>
			if(dilSecim == 0) {
 800395a:	4b60      	ldr	r3, [pc, #384]	; (8003adc <menu+0x242c>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003962:	4a67      	ldr	r2, [pc, #412]	; (8003b00 <menu+0x2450>)
 8003964:	2101      	movs	r1, #1
 8003966:	2001      	movs	r0, #1
 8003968:	f7fc fea4 	bl	80006b4 <lcd_print>
 800396c:	e020      	b.n	80039b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800396e:	4b5b      	ldr	r3, [pc, #364]	; (8003adc <menu+0x242c>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d11c      	bne.n	80039b0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003976:	4a63      	ldr	r2, [pc, #396]	; (8003b04 <menu+0x2454>)
 8003978:	2101      	movs	r1, #1
 800397a:	2001      	movs	r0, #1
 800397c:	f7fc fe9a 	bl	80006b4 <lcd_print>
 8003980:	e016      	b.n	80039b0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003982:	4b5e      	ldr	r3, [pc, #376]	; (8003afc <menu+0x244c>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d112      	bne.n	80039b0 <menu+0x2300>
			if(dilSecim == 0) {
 800398a:	4b54      	ldr	r3, [pc, #336]	; (8003adc <menu+0x242c>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d105      	bne.n	800399e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003992:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <menu+0x2458>)
 8003994:	2101      	movs	r1, #1
 8003996:	2001      	movs	r0, #1
 8003998:	f7fc fe8c 	bl	80006b4 <lcd_print>
 800399c:	e008      	b.n	80039b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800399e:	4b4f      	ldr	r3, [pc, #316]	; (8003adc <menu+0x242c>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d104      	bne.n	80039b0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80039a6:	4a59      	ldr	r2, [pc, #356]	; (8003b0c <menu+0x245c>)
 80039a8:	2101      	movs	r1, #1
 80039aa:	2001      	movs	r0, #1
 80039ac:	f7fc fe82 	bl	80006b4 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80039b0:	4b57      	ldr	r3, [pc, #348]	; (8003b10 <menu+0x2460>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d113      	bne.n	80039e0 <menu+0x2330>
			if(dilSecim == 0) {
 80039b8:	4b48      	ldr	r3, [pc, #288]	; (8003adc <menu+0x242c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d105      	bne.n	80039cc <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80039c0:	4a54      	ldr	r2, [pc, #336]	; (8003b14 <menu+0x2464>)
 80039c2:	2101      	movs	r1, #1
 80039c4:	2002      	movs	r0, #2
 80039c6:	f7fc fe75 	bl	80006b4 <lcd_print>
 80039ca:	e020      	b.n	8003a0e <menu+0x235e>
			} else if(dilSecim == 1) {
 80039cc:	4b43      	ldr	r3, [pc, #268]	; (8003adc <menu+0x242c>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d11c      	bne.n	8003a0e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80039d4:	4a50      	ldr	r2, [pc, #320]	; (8003b18 <menu+0x2468>)
 80039d6:	2101      	movs	r1, #1
 80039d8:	2002      	movs	r0, #2
 80039da:	f7fc fe6b 	bl	80006b4 <lcd_print>
 80039de:	e016      	b.n	8003a0e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80039e0:	4b4b      	ldr	r3, [pc, #300]	; (8003b10 <menu+0x2460>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d112      	bne.n	8003a0e <menu+0x235e>
			if(dilSecim == 0) {
 80039e8:	4b3c      	ldr	r3, [pc, #240]	; (8003adc <menu+0x242c>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80039f0:	4a4a      	ldr	r2, [pc, #296]	; (8003b1c <menu+0x246c>)
 80039f2:	2101      	movs	r1, #1
 80039f4:	2002      	movs	r0, #2
 80039f6:	f7fc fe5d 	bl	80006b4 <lcd_print>
 80039fa:	e008      	b.n	8003a0e <menu+0x235e>
			} else if(dilSecim == 1) {
 80039fc:	4b37      	ldr	r3, [pc, #220]	; (8003adc <menu+0x242c>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d104      	bne.n	8003a0e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003a04:	4a46      	ldr	r2, [pc, #280]	; (8003b20 <menu+0x2470>)
 8003a06:	2101      	movs	r1, #1
 8003a08:	2002      	movs	r0, #2
 8003a0a:	f7fc fe53 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003a0e:	2102      	movs	r1, #2
 8003a10:	4834      	ldr	r0, [pc, #208]	; (8003ae4 <menu+0x2434>)
 8003a12:	f005 fa75 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d119      	bne.n	8003a50 <menu+0x23a0>
 8003a1c:	4b32      	ldr	r3, [pc, #200]	; (8003ae8 <menu+0x2438>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	f083 0301 	eor.w	r3, r3, #1
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d012      	beq.n	8003a50 <menu+0x23a0>
 8003a2a:	4b34      	ldr	r3, [pc, #208]	; (8003afc <menu+0x244c>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d10e      	bne.n	8003a50 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003a32:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <menu+0x2460>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	3301      	adds	r3, #1
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <menu+0x2460>)
 8003a3c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003a3e:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <menu+0x2460>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d902      	bls.n	8003a4c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003a46:	4b32      	ldr	r3, [pc, #200]	; (8003b10 <menu+0x2460>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a4c:	f001 fdb8 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003a50:	2104      	movs	r1, #4
 8003a52:	4824      	ldr	r0, [pc, #144]	; (8003ae4 <menu+0x2434>)
 8003a54:	f005 fa54 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d119      	bne.n	8003a92 <menu+0x23e2>
 8003a5e:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <menu+0x2438>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	f083 0301 	eor.w	r3, r3, #1
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <menu+0x23e2>
 8003a6c:	4b23      	ldr	r3, [pc, #140]	; (8003afc <menu+0x244c>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d10e      	bne.n	8003a92 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003a74:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <menu+0x2460>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <menu+0x2460>)
 8003a7e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003a80:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <menu+0x2460>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003a88:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <menu+0x2460>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a8e:	f001 fd97 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a92:	2108      	movs	r1, #8
 8003a94:	4813      	ldr	r0, [pc, #76]	; (8003ae4 <menu+0x2434>)
 8003a96:	f005 fa33 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10d      	bne.n	8003abc <menu+0x240c>
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <menu+0x2438>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	f083 0301 	eor.w	r3, r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003aae:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <menu+0x2460>)
 8003ab0:	781a      	ldrb	r2, [r3, #0]
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <menu+0x2440>)
 8003ab4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <menu+0x2444>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <menu+0x2448>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b15      	cmp	r3, #21
 8003ac2:	f040 80c2 	bne.w	8003c4a <menu+0x259a>
		if(dilSecim == 0) {
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <menu+0x242c>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d12c      	bne.n	8003b28 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003ace:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <menu+0x2474>)
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f7fc fdee 	bl	80006b4 <lcd_print>
 8003ad8:	e02f      	b.n	8003b3a <menu+0x248a>
 8003ada:	bf00      	nop
 8003adc:	20000419 	.word	0x20000419
 8003ae0:	0800cf14 	.word	0x0800cf14
 8003ae4:	40010800 	.word	0x40010800
 8003ae8:	20000427 	.word	0x20000427
 8003aec:	20000409 	.word	0x20000409
 8003af0:	20000328 	.word	0x20000328
 8003af4:	20000424 	.word	0x20000424
 8003af8:	200003f8 	.word	0x200003f8
 8003afc:	20000407 	.word	0x20000407
 8003b00:	0800d394 	.word	0x0800d394
 8003b04:	0800d3a8 	.word	0x0800d3a8
 8003b08:	0800d3bc 	.word	0x0800d3bc
 8003b0c:	0800d3d0 	.word	0x0800d3d0
 8003b10:	2000040a 	.word	0x2000040a
 8003b14:	0800d3e4 	.word	0x0800d3e4
 8003b18:	0800d3f8 	.word	0x0800d3f8
 8003b1c:	0800d408 	.word	0x0800d408
 8003b20:	0800d41c 	.word	0x0800d41c
 8003b24:	0800d42c 	.word	0x0800d42c
		} else if(dilSecim == 1) {
 8003b28:	4b9c      	ldr	r3, [pc, #624]	; (8003d9c <menu+0x26ec>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d104      	bne.n	8003b3a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003b30:	4a9b      	ldr	r2, [pc, #620]	; (8003da0 <menu+0x26f0>)
 8003b32:	2101      	movs	r1, #1
 8003b34:	2001      	movs	r0, #1
 8003b36:	f7fc fdbd 	bl	80006b4 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003b3a:	4b9a      	ldr	r3, [pc, #616]	; (8003da4 <menu+0x26f4>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d112      	bne.n	8003b68 <menu+0x24b8>
			if(dilSecim == 0) {
 8003b42:	4b96      	ldr	r3, [pc, #600]	; (8003d9c <menu+0x26ec>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d104      	bne.n	8003b54 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003b4a:	4a97      	ldr	r2, [pc, #604]	; (8003da8 <menu+0x26f8>)
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	2002      	movs	r0, #2
 8003b50:	f7fc fdb0 	bl	80006b4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003b54:	4b91      	ldr	r3, [pc, #580]	; (8003d9c <menu+0x26ec>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d11c      	bne.n	8003b96 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003b5c:	4a93      	ldr	r2, [pc, #588]	; (8003dac <menu+0x26fc>)
 8003b5e:	2101      	movs	r1, #1
 8003b60:	2002      	movs	r0, #2
 8003b62:	f7fc fda7 	bl	80006b4 <lcd_print>
 8003b66:	e016      	b.n	8003b96 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003b68:	4b8e      	ldr	r3, [pc, #568]	; (8003da4 <menu+0x26f4>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d112      	bne.n	8003b96 <menu+0x24e6>
			if(dilSecim == 0) {
 8003b70:	4b8a      	ldr	r3, [pc, #552]	; (8003d9c <menu+0x26ec>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003b78:	4a8d      	ldr	r2, [pc, #564]	; (8003db0 <menu+0x2700>)
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	2002      	movs	r0, #2
 8003b7e:	f7fc fd99 	bl	80006b4 <lcd_print>
 8003b82:	e008      	b.n	8003b96 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003b84:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <menu+0x26ec>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d104      	bne.n	8003b96 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003b8c:	4a89      	ldr	r2, [pc, #548]	; (8003db4 <menu+0x2704>)
 8003b8e:	2101      	movs	r1, #1
 8003b90:	2002      	movs	r0, #2
 8003b92:	f7fc fd8f 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b96:	2102      	movs	r1, #2
 8003b98:	4887      	ldr	r0, [pc, #540]	; (8003db8 <menu+0x2708>)
 8003b9a:	f005 f9b1 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d115      	bne.n	8003bd0 <menu+0x2520>
 8003ba4:	4b85      	ldr	r3, [pc, #532]	; (8003dbc <menu+0x270c>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f083 0301 	eor.w	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00e      	beq.n	8003bd0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003bb2:	4b7c      	ldr	r3, [pc, #496]	; (8003da4 <menu+0x26f4>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	4b7a      	ldr	r3, [pc, #488]	; (8003da4 <menu+0x26f4>)
 8003bbc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003bbe:	4b79      	ldr	r3, [pc, #484]	; (8003da4 <menu+0x26f4>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d902      	bls.n	8003bcc <menu+0x251c>
				platformSilindirTipi = 0;
 8003bc6:	4b77      	ldr	r3, [pc, #476]	; (8003da4 <menu+0x26f4>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bcc:	f001 fcf8 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bd0:	2104      	movs	r1, #4
 8003bd2:	4879      	ldr	r0, [pc, #484]	; (8003db8 <menu+0x2708>)
 8003bd4:	f005 f994 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d115      	bne.n	8003c0a <menu+0x255a>
 8003bde:	4b77      	ldr	r3, [pc, #476]	; (8003dbc <menu+0x270c>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	f083 0301 	eor.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003bec:	4b6d      	ldr	r3, [pc, #436]	; (8003da4 <menu+0x26f4>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b6b      	ldr	r3, [pc, #428]	; (8003da4 <menu+0x26f4>)
 8003bf6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003bf8:	4b6a      	ldr	r3, [pc, #424]	; (8003da4 <menu+0x26f4>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003c00:	4b68      	ldr	r3, [pc, #416]	; (8003da4 <menu+0x26f4>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c06:	f001 fcdb 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c0a:	2108      	movs	r1, #8
 8003c0c:	486a      	ldr	r0, [pc, #424]	; (8003db8 <menu+0x2708>)
 8003c0e:	f005 f977 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d118      	bne.n	8003c4a <menu+0x259a>
 8003c18:	4b68      	ldr	r3, [pc, #416]	; (8003dbc <menu+0x270c>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	f083 0301 	eor.w	r3, r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003c26:	4b5f      	ldr	r3, [pc, #380]	; (8003da4 <menu+0x26f4>)
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <menu+0x2710>)
 8003c2c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003c2e:	4b5d      	ldr	r3, [pc, #372]	; (8003da4 <menu+0x26f4>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d106      	bne.n	8003c44 <menu+0x2594>
				altLimit = 1;
 8003c36:	4b63      	ldr	r3, [pc, #396]	; (8003dc4 <menu+0x2714>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003c3c:	4b61      	ldr	r3, [pc, #388]	; (8003dc4 <menu+0x2714>)
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	4b5f      	ldr	r3, [pc, #380]	; (8003dc0 <menu+0x2710>)
 8003c42:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003c44:	4b60      	ldr	r3, [pc, #384]	; (8003dc8 <menu+0x2718>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003c4a:	4b60      	ldr	r3, [pc, #384]	; (8003dcc <menu+0x271c>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b16      	cmp	r3, #22
 8003c50:	f040 8081 	bne.w	8003d56 <menu+0x26a6>
		if(dilSecim == 0) {
 8003c54:	4b51      	ldr	r3, [pc, #324]	; (8003d9c <menu+0x26ec>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003c5c:	4a5c      	ldr	r2, [pc, #368]	; (8003dd0 <menu+0x2720>)
 8003c5e:	2101      	movs	r1, #1
 8003c60:	2001      	movs	r0, #1
 8003c62:	f7fc fd27 	bl	80006b4 <lcd_print>
 8003c66:	e008      	b.n	8003c7a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003c68:	4b4c      	ldr	r3, [pc, #304]	; (8003d9c <menu+0x26ec>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d104      	bne.n	8003c7a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003c70:	4a58      	ldr	r2, [pc, #352]	; (8003dd4 <menu+0x2724>)
 8003c72:	2101      	movs	r1, #1
 8003c74:	2001      	movs	r0, #1
 8003c76:	f7fc fd1d 	bl	80006b4 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c7a:	4b48      	ldr	r3, [pc, #288]	; (8003d9c <menu+0x26ec>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c82:	4a55      	ldr	r2, [pc, #340]	; (8003dd8 <menu+0x2728>)
 8003c84:	2101      	movs	r1, #1
 8003c86:	2002      	movs	r0, #2
 8003c88:	f7fc fd14 	bl	80006b4 <lcd_print>
 8003c8c:	e008      	b.n	8003ca0 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003c8e:	4b43      	ldr	r3, [pc, #268]	; (8003d9c <menu+0x26ec>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d104      	bne.n	8003ca0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003c96:	4a51      	ldr	r2, [pc, #324]	; (8003ddc <menu+0x272c>)
 8003c98:	2101      	movs	r1, #1
 8003c9a:	2002      	movs	r0, #2
 8003c9c:	f7fc fd0a 	bl	80006b4 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003ca0:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <menu+0x2730>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	220a      	movs	r2, #10
 8003ca6:	494f      	ldr	r1, [pc, #316]	; (8003de4 <menu+0x2734>)
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f008 f955 	bl	800bf58 <itoa>
		lcd_print(2,16,snum);
 8003cae:	4a4d      	ldr	r2, [pc, #308]	; (8003de4 <menu+0x2734>)
 8003cb0:	2110      	movs	r1, #16
 8003cb2:	2002      	movs	r0, #2
 8003cb4:	f7fc fcfe 	bl	80006b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cb8:	2102      	movs	r1, #2
 8003cba:	483f      	ldr	r0, [pc, #252]	; (8003db8 <menu+0x2708>)
 8003cbc:	f005 f920 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d115      	bne.n	8003cf2 <menu+0x2642>
 8003cc6:	4b3d      	ldr	r3, [pc, #244]	; (8003dbc <menu+0x270c>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	f083 0301 	eor.w	r3, r3, #1
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00e      	beq.n	8003cf2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003cd4:	4b42      	ldr	r3, [pc, #264]	; (8003de0 <menu+0x2730>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	4b40      	ldr	r3, [pc, #256]	; (8003de0 <menu+0x2730>)
 8003cde:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003ce0:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <menu+0x2730>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d902      	bls.n	8003cee <menu+0x263e>
				yukariValfTmr = 0;
 8003ce8:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <menu+0x2730>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cee:	f001 fc67 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cf2:	2104      	movs	r1, #4
 8003cf4:	4830      	ldr	r0, [pc, #192]	; (8003db8 <menu+0x2708>)
 8003cf6:	f005 f903 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d115      	bne.n	8003d2c <menu+0x267c>
 8003d00:	4b2e      	ldr	r3, [pc, #184]	; (8003dbc <menu+0x270c>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	f083 0301 	eor.w	r3, r3, #1
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00e      	beq.n	8003d2c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003d0e:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <menu+0x2730>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	4b32      	ldr	r3, [pc, #200]	; (8003de0 <menu+0x2730>)
 8003d18:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003d1a:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <menu+0x2730>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003d22:	4b2f      	ldr	r3, [pc, #188]	; (8003de0 <menu+0x2730>)
 8003d24:	2205      	movs	r2, #5
 8003d26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d28:	f001 fc4a 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d2c:	2108      	movs	r1, #8
 8003d2e:	4822      	ldr	r0, [pc, #136]	; (8003db8 <menu+0x2708>)
 8003d30:	f005 f8e6 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10d      	bne.n	8003d56 <menu+0x26a6>
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <menu+0x270c>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	f083 0301 	eor.w	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d006      	beq.n	8003d56 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003d48:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <menu+0x2730>)
 8003d4a:	781a      	ldrb	r2, [r3, #0]
 8003d4c:	4b1c      	ldr	r3, [pc, #112]	; (8003dc0 <menu+0x2710>)
 8003d4e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003d50:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <menu+0x2718>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <menu+0x271c>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b17      	cmp	r3, #23
 8003d5c:	f040 80ac 	bne.w	8003eb8 <menu+0x2808>
		if(dilSecim == 0) {
 8003d60:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <menu+0x26ec>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <menu+0x2738>)
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7fc fca1 	bl	80006b4 <lcd_print>
 8003d72:	e008      	b.n	8003d86 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <menu+0x26ec>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d104      	bne.n	8003d86 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <menu+0x273c>)
 8003d7e:	2101      	movs	r1, #1
 8003d80:	2001      	movs	r0, #1
 8003d82:	f7fc fc97 	bl	80006b4 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <menu+0x26ec>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d130      	bne.n	8003df0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d8e:	4a12      	ldr	r2, [pc, #72]	; (8003dd8 <menu+0x2728>)
 8003d90:	2101      	movs	r1, #1
 8003d92:	2002      	movs	r0, #2
 8003d94:	f7fc fc8e 	bl	80006b4 <lcd_print>
 8003d98:	e033      	b.n	8003e02 <menu+0x2752>
 8003d9a:	bf00      	nop
 8003d9c:	20000419 	.word	0x20000419
 8003da0:	0800d440 	.word	0x0800d440
 8003da4:	2000040b 	.word	0x2000040b
 8003da8:	0800d3e4 	.word	0x0800d3e4
 8003dac:	0800d3f8 	.word	0x0800d3f8
 8003db0:	0800d408 	.word	0x0800d408
 8003db4:	0800d41c 	.word	0x0800d41c
 8003db8:	40010800 	.word	0x40010800
 8003dbc:	20000427 	.word	0x20000427
 8003dc0:	20000328 	.word	0x20000328
 8003dc4:	200003fe 	.word	0x200003fe
 8003dc8:	20000424 	.word	0x20000424
 8003dcc:	200003f8 	.word	0x200003f8
 8003dd0:	0800d450 	.word	0x0800d450
 8003dd4:	0800d464 	.word	0x0800d464
 8003dd8:	0800d104 	.word	0x0800d104
 8003ddc:	0800d478 	.word	0x0800d478
 8003de0:	2000040c 	.word	0x2000040c
 8003de4:	20000398 	.word	0x20000398
 8003de8:	0800d488 	.word	0x0800d488
 8003dec:	0800d49c 	.word	0x0800d49c
			} else if(dilSecim == 1) {
 8003df0:	4b98      	ldr	r3, [pc, #608]	; (8004054 <menu+0x29a4>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d104      	bne.n	8003e02 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003df8:	4a97      	ldr	r2, [pc, #604]	; (8004058 <menu+0x29a8>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	2002      	movs	r0, #2
 8003dfe:	f7fc fc59 	bl	80006b4 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003e02:	4b96      	ldr	r3, [pc, #600]	; (800405c <menu+0x29ac>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	220a      	movs	r2, #10
 8003e08:	4995      	ldr	r1, [pc, #596]	; (8004060 <menu+0x29b0>)
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f008 f8a4 	bl	800bf58 <itoa>
		lcd_print(2,16,snum);
 8003e10:	4a93      	ldr	r2, [pc, #588]	; (8004060 <menu+0x29b0>)
 8003e12:	2110      	movs	r1, #16
 8003e14:	2002      	movs	r0, #2
 8003e16:	f7fc fc4d 	bl	80006b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e1a:	2102      	movs	r1, #2
 8003e1c:	4891      	ldr	r0, [pc, #580]	; (8004064 <menu+0x29b4>)
 8003e1e:	f005 f86f 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d115      	bne.n	8003e54 <menu+0x27a4>
 8003e28:	4b8f      	ldr	r3, [pc, #572]	; (8004068 <menu+0x29b8>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	f083 0301 	eor.w	r3, r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00e      	beq.n	8003e54 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003e36:	4b89      	ldr	r3, [pc, #548]	; (800405c <menu+0x29ac>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4b87      	ldr	r3, [pc, #540]	; (800405c <menu+0x29ac>)
 8003e40:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003e42:	4b86      	ldr	r3, [pc, #536]	; (800405c <menu+0x29ac>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b05      	cmp	r3, #5
 8003e48:	d902      	bls.n	8003e50 <menu+0x27a0>
				asagiValfTmr = 0;
 8003e4a:	4b84      	ldr	r3, [pc, #528]	; (800405c <menu+0x29ac>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e50:	f001 fbb6 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e54:	2104      	movs	r1, #4
 8003e56:	4883      	ldr	r0, [pc, #524]	; (8004064 <menu+0x29b4>)
 8003e58:	f005 f852 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d115      	bne.n	8003e8e <menu+0x27de>
 8003e62:	4b81      	ldr	r3, [pc, #516]	; (8004068 <menu+0x29b8>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	f083 0301 	eor.w	r3, r3, #1
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00e      	beq.n	8003e8e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003e70:	4b7a      	ldr	r3, [pc, #488]	; (800405c <menu+0x29ac>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b78      	ldr	r3, [pc, #480]	; (800405c <menu+0x29ac>)
 8003e7a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003e7c:	4b77      	ldr	r3, [pc, #476]	; (800405c <menu+0x29ac>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d902      	bls.n	8003e8a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003e84:	4b75      	ldr	r3, [pc, #468]	; (800405c <menu+0x29ac>)
 8003e86:	2205      	movs	r2, #5
 8003e88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e8a:	f001 fb99 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e8e:	2108      	movs	r1, #8
 8003e90:	4874      	ldr	r0, [pc, #464]	; (8004064 <menu+0x29b4>)
 8003e92:	f005 f835 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10d      	bne.n	8003eb8 <menu+0x2808>
 8003e9c:	4b72      	ldr	r3, [pc, #456]	; (8004068 <menu+0x29b8>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	f083 0301 	eor.w	r3, r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003eaa:	4b6c      	ldr	r3, [pc, #432]	; (800405c <menu+0x29ac>)
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	4b6f      	ldr	r3, [pc, #444]	; (800406c <menu+0x29bc>)
 8003eb0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003eb2:	4b6f      	ldr	r3, [pc, #444]	; (8004070 <menu+0x29c0>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003eb8:	4b6e      	ldr	r3, [pc, #440]	; (8004074 <menu+0x29c4>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b18      	cmp	r3, #24
 8003ebe:	f040 809d 	bne.w	8003ffc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003ec2:	4b6d      	ldr	r3, [pc, #436]	; (8004078 <menu+0x29c8>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d113      	bne.n	8003ef2 <menu+0x2842>
			if(dilSecim == 0) {
 8003eca:	4b62      	ldr	r3, [pc, #392]	; (8004054 <menu+0x29a4>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003ed2:	4a6a      	ldr	r2, [pc, #424]	; (800407c <menu+0x29cc>)
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f7fc fbec 	bl	80006b4 <lcd_print>
 8003edc:	e020      	b.n	8003f20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003ede:	4b5d      	ldr	r3, [pc, #372]	; (8004054 <menu+0x29a4>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d11c      	bne.n	8003f20 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003ee6:	4a66      	ldr	r2, [pc, #408]	; (8004080 <menu+0x29d0>)
 8003ee8:	2101      	movs	r1, #1
 8003eea:	2001      	movs	r0, #1
 8003eec:	f7fc fbe2 	bl	80006b4 <lcd_print>
 8003ef0:	e016      	b.n	8003f20 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003ef2:	4b61      	ldr	r3, [pc, #388]	; (8004078 <menu+0x29c8>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d112      	bne.n	8003f20 <menu+0x2870>
			if(dilSecim == 0) {
 8003efa:	4b56      	ldr	r3, [pc, #344]	; (8004054 <menu+0x29a4>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d105      	bne.n	8003f0e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003f02:	4a60      	ldr	r2, [pc, #384]	; (8004084 <menu+0x29d4>)
 8003f04:	2101      	movs	r1, #1
 8003f06:	2001      	movs	r0, #1
 8003f08:	f7fc fbd4 	bl	80006b4 <lcd_print>
 8003f0c:	e008      	b.n	8003f20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003f0e:	4b51      	ldr	r3, [pc, #324]	; (8004054 <menu+0x29a4>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d104      	bne.n	8003f20 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003f16:	4a5c      	ldr	r2, [pc, #368]	; (8004088 <menu+0x29d8>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f7fc fbca 	bl	80006b4 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003f20:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <menu+0x29a4>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d105      	bne.n	8003f34 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f28:	4a58      	ldr	r2, [pc, #352]	; (800408c <menu+0x29dc>)
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	2002      	movs	r0, #2
 8003f2e:	f7fc fbc1 	bl	80006b4 <lcd_print>
 8003f32:	e008      	b.n	8003f46 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003f34:	4b47      	ldr	r3, [pc, #284]	; (8004054 <menu+0x29a4>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d104      	bne.n	8003f46 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003f3c:	4a46      	ldr	r2, [pc, #280]	; (8004058 <menu+0x29a8>)
 8003f3e:	2101      	movs	r1, #1
 8003f40:	2002      	movs	r0, #2
 8003f42:	f7fc fbb7 	bl	80006b4 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003f46:	4b52      	ldr	r3, [pc, #328]	; (8004090 <menu+0x29e0>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	220a      	movs	r2, #10
 8003f4c:	4944      	ldr	r1, [pc, #272]	; (8004060 <menu+0x29b0>)
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f008 f802 	bl	800bf58 <itoa>
		lcd_print(2, 16, snum);
 8003f54:	4a42      	ldr	r2, [pc, #264]	; (8004060 <menu+0x29b0>)
 8003f56:	2110      	movs	r1, #16
 8003f58:	2002      	movs	r0, #2
 8003f5a:	f7fc fbab 	bl	80006b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f5e:	2102      	movs	r1, #2
 8003f60:	4840      	ldr	r0, [pc, #256]	; (8004064 <menu+0x29b4>)
 8003f62:	f004 ffcd 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d115      	bne.n	8003f98 <menu+0x28e8>
 8003f6c:	4b3e      	ldr	r3, [pc, #248]	; (8004068 <menu+0x29b8>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	f083 0301 	eor.w	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00e      	beq.n	8003f98 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003f7a:	4b45      	ldr	r3, [pc, #276]	; (8004090 <menu+0x29e0>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	4b43      	ldr	r3, [pc, #268]	; (8004090 <menu+0x29e0>)
 8003f84:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003f86:	4b42      	ldr	r3, [pc, #264]	; (8004090 <menu+0x29e0>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d902      	bls.n	8003f94 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003f8e:	4b40      	ldr	r3, [pc, #256]	; (8004090 <menu+0x29e0>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f94:	f001 fb14 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f98:	2104      	movs	r1, #4
 8003f9a:	4832      	ldr	r0, [pc, #200]	; (8004064 <menu+0x29b4>)
 8003f9c:	f004 ffb0 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d115      	bne.n	8003fd2 <menu+0x2922>
 8003fa6:	4b30      	ldr	r3, [pc, #192]	; (8004068 <menu+0x29b8>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	f083 0301 	eor.w	r3, r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00e      	beq.n	8003fd2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003fb4:	4b36      	ldr	r3, [pc, #216]	; (8004090 <menu+0x29e0>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	4b34      	ldr	r3, [pc, #208]	; (8004090 <menu+0x29e0>)
 8003fbe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	; (8004090 <menu+0x29e0>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b06      	cmp	r3, #6
 8003fc6:	d902      	bls.n	8003fce <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003fc8:	4b31      	ldr	r3, [pc, #196]	; (8004090 <menu+0x29e0>)
 8003fca:	2205      	movs	r2, #5
 8003fcc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fce:	f001 faf7 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fd2:	2108      	movs	r1, #8
 8003fd4:	4823      	ldr	r0, [pc, #140]	; (8004064 <menu+0x29b4>)
 8003fd6:	f004 ff93 	bl	8008f00 <HAL_GPIO_ReadPin>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10d      	bne.n	8003ffc <menu+0x294c>
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <menu+0x29b8>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f083 0301 	eor.w	r3, r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d006      	beq.n	8003ffc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003fee:	4b28      	ldr	r3, [pc, #160]	; (8004090 <menu+0x29e0>)
 8003ff0:	781a      	ldrb	r2, [r3, #0]
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	; (800406c <menu+0x29bc>)
 8003ff4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003ff6:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <menu+0x29c0>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <menu+0x29c4>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b19      	cmp	r3, #25
 8004002:	f040 80c4 	bne.w	800418e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8004006:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <menu+0x29c8>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d113      	bne.n	8004036 <menu+0x2986>
			if(dilSecim == 0) {
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <menu+0x29a4>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8004016:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <menu+0x29e4>)
 8004018:	2101      	movs	r1, #1
 800401a:	2001      	movs	r0, #1
 800401c:	f7fc fb4a 	bl	80006b4 <lcd_print>
 8004020:	e047      	b.n	80040b2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <menu+0x29a4>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d143      	bne.n	80040b2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 800402a:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <menu+0x29e8>)
 800402c:	2101      	movs	r1, #1
 800402e:	2001      	movs	r0, #1
 8004030:	f7fc fb40 	bl	80006b4 <lcd_print>
 8004034:	e03d      	b.n	80040b2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <menu+0x29c8>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d139      	bne.n	80040b2 <menu+0x2a02>
			if(dilSecim == 0) {
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <menu+0x29a4>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d12c      	bne.n	80040a0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <menu+0x29ec>)
 8004048:	2101      	movs	r1, #1
 800404a:	2001      	movs	r0, #1
 800404c:	f7fc fb32 	bl	80006b4 <lcd_print>
 8004050:	e02f      	b.n	80040b2 <menu+0x2a02>
 8004052:	bf00      	nop
 8004054:	20000419 	.word	0x20000419
 8004058:	0800d478 	.word	0x0800d478
 800405c:	2000040d 	.word	0x2000040d
 8004060:	20000398 	.word	0x20000398
 8004064:	40010800 	.word	0x40010800
 8004068:	20000427 	.word	0x20000427
 800406c:	20000328 	.word	0x20000328
 8004070:	20000424 	.word	0x20000424
 8004074:	200003f8 	.word	0x200003f8
 8004078:	20000407 	.word	0x20000407
 800407c:	0800d4b0 	.word	0x0800d4b0
 8004080:	0800d4c4 	.word	0x0800d4c4
 8004084:	0800d4d8 	.word	0x0800d4d8
 8004088:	0800d4ec 	.word	0x0800d4ec
 800408c:	0800d104 	.word	0x0800d104
 8004090:	2000040e 	.word	0x2000040e
 8004094:	0800d500 	.word	0x0800d500
 8004098:	0800d514 	.word	0x0800d514
 800409c:	0800d528 	.word	0x0800d528
			} else if(dilSecim == 1) {
 80040a0:	4b73      	ldr	r3, [pc, #460]	; (8004270 <menu+0x2bc0>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d104      	bne.n	80040b2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 80040a8:	4a72      	ldr	r2, [pc, #456]	; (8004274 <menu+0x2bc4>)
 80040aa:	2101      	movs	r1, #1
 80040ac:	2001      	movs	r0, #1
 80040ae:	f7fc fb01 	bl	80006b4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 80040b2:	4b6f      	ldr	r3, [pc, #444]	; (8004270 <menu+0x2bc0>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d105      	bne.n	80040c6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 80040ba:	4a6f      	ldr	r2, [pc, #444]	; (8004278 <menu+0x2bc8>)
 80040bc:	2101      	movs	r1, #1
 80040be:	2002      	movs	r0, #2
 80040c0:	f7fc faf8 	bl	80006b4 <lcd_print>
 80040c4:	e008      	b.n	80040d8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 80040c6:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <menu+0x2bc0>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d104      	bne.n	80040d8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 80040ce:	4a6b      	ldr	r2, [pc, #428]	; (800427c <menu+0x2bcc>)
 80040d0:	2101      	movs	r1, #1
 80040d2:	2002      	movs	r0, #2
 80040d4:	f7fc faee 	bl	80006b4 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80040d8:	4b69      	ldr	r3, [pc, #420]	; (8004280 <menu+0x2bd0>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	220a      	movs	r2, #10
 80040de:	4969      	ldr	r1, [pc, #420]	; (8004284 <menu+0x2bd4>)
 80040e0:	4618      	mov	r0, r3
 80040e2:	f007 ff39 	bl	800bf58 <itoa>
		lcd_print(2,16,snum);
 80040e6:	4a67      	ldr	r2, [pc, #412]	; (8004284 <menu+0x2bd4>)
 80040e8:	2110      	movs	r1, #16
 80040ea:	2002      	movs	r0, #2
 80040ec:	f7fc fae2 	bl	80006b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040f0:	2102      	movs	r1, #2
 80040f2:	4865      	ldr	r0, [pc, #404]	; (8004288 <menu+0x2bd8>)
 80040f4:	f004 ff04 	bl	8008f00 <HAL_GPIO_ReadPin>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d115      	bne.n	800412a <menu+0x2a7a>
 80040fe:	4b63      	ldr	r3, [pc, #396]	; (800428c <menu+0x2bdc>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	f083 0301 	eor.w	r3, r3, #1
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00e      	beq.n	800412a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800410c:	4b5c      	ldr	r3, [pc, #368]	; (8004280 <menu+0x2bd0>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	3301      	adds	r3, #1
 8004112:	b2da      	uxtb	r2, r3
 8004114:	4b5a      	ldr	r3, [pc, #360]	; (8004280 <menu+0x2bd0>)
 8004116:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004118:	4b59      	ldr	r3, [pc, #356]	; (8004280 <menu+0x2bd0>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b05      	cmp	r3, #5
 800411e:	d902      	bls.n	8004126 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8004120:	4b57      	ldr	r3, [pc, #348]	; (8004280 <menu+0x2bd0>)
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004126:	f001 fa4b 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800412a:	2104      	movs	r1, #4
 800412c:	4856      	ldr	r0, [pc, #344]	; (8004288 <menu+0x2bd8>)
 800412e:	f004 fee7 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004132:	4603      	mov	r3, r0
 8004134:	2b01      	cmp	r3, #1
 8004136:	d115      	bne.n	8004164 <menu+0x2ab4>
 8004138:	4b54      	ldr	r3, [pc, #336]	; (800428c <menu+0x2bdc>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	f083 0301 	eor.w	r3, r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00e      	beq.n	8004164 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8004146:	4b4e      	ldr	r3, [pc, #312]	; (8004280 <menu+0x2bd0>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	3b01      	subs	r3, #1
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4b4c      	ldr	r3, [pc, #304]	; (8004280 <menu+0x2bd0>)
 8004150:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8004152:	4b4b      	ldr	r3, [pc, #300]	; (8004280 <menu+0x2bd0>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d902      	bls.n	8004160 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 800415a:	4b49      	ldr	r3, [pc, #292]	; (8004280 <menu+0x2bd0>)
 800415c:	2205      	movs	r2, #5
 800415e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004160:	f001 fa2e 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004164:	2108      	movs	r1, #8
 8004166:	4848      	ldr	r0, [pc, #288]	; (8004288 <menu+0x2bd8>)
 8004168:	f004 feca 	bl	8008f00 <HAL_GPIO_ReadPin>
 800416c:	4603      	mov	r3, r0
 800416e:	2b01      	cmp	r3, #1
 8004170:	d10d      	bne.n	800418e <menu+0x2ade>
 8004172:	4b46      	ldr	r3, [pc, #280]	; (800428c <menu+0x2bdc>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	f083 0301 	eor.w	r3, r3, #1
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d006      	beq.n	800418e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004180:	4b3f      	ldr	r3, [pc, #252]	; (8004280 <menu+0x2bd0>)
 8004182:	781a      	ldrb	r2, [r3, #0]
 8004184:	4b42      	ldr	r3, [pc, #264]	; (8004290 <menu+0x2be0>)
 8004186:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004188:	4b42      	ldr	r3, [pc, #264]	; (8004294 <menu+0x2be4>)
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800418e:	4b42      	ldr	r3, [pc, #264]	; (8004298 <menu+0x2be8>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b1a      	cmp	r3, #26
 8004194:	f040 80ec 	bne.w	8004370 <menu+0x2cc0>
		if(dilSecim == 0) {
 8004198:	4b35      	ldr	r3, [pc, #212]	; (8004270 <menu+0x2bc0>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80041a0:	4a3e      	ldr	r2, [pc, #248]	; (800429c <menu+0x2bec>)
 80041a2:	2101      	movs	r1, #1
 80041a4:	2001      	movs	r0, #1
 80041a6:	f7fc fa85 	bl	80006b4 <lcd_print>
 80041aa:	e008      	b.n	80041be <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80041ac:	4b30      	ldr	r3, [pc, #192]	; (8004270 <menu+0x2bc0>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d104      	bne.n	80041be <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 80041b4:	4a3a      	ldr	r2, [pc, #232]	; (80042a0 <menu+0x2bf0>)
 80041b6:	2101      	movs	r1, #1
 80041b8:	2001      	movs	r0, #1
 80041ba:	f7fc fa7b 	bl	80006b4 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80041be:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <menu+0x2bf4>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b63      	cmp	r3, #99	; 0x63
 80041c4:	d91e      	bls.n	8004204 <menu+0x2b54>
			if(dilSecim == 0) {
 80041c6:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <menu+0x2bc0>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80041ce:	4a2a      	ldr	r2, [pc, #168]	; (8004278 <menu+0x2bc8>)
 80041d0:	2101      	movs	r1, #1
 80041d2:	2002      	movs	r0, #2
 80041d4:	f7fc fa6e 	bl	80006b4 <lcd_print>
			}
			if(dilSecim == 1) {
 80041d8:	4b25      	ldr	r3, [pc, #148]	; (8004270 <menu+0x2bc0>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d104      	bne.n	80041ea <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80041e0:	4a26      	ldr	r2, [pc, #152]	; (800427c <menu+0x2bcc>)
 80041e2:	2101      	movs	r1, #1
 80041e4:	2002      	movs	r0, #2
 80041e6:	f7fc fa65 	bl	80006b4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041ea:	4b2e      	ldr	r3, [pc, #184]	; (80042a4 <menu+0x2bf4>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	220a      	movs	r2, #10
 80041f0:	4924      	ldr	r1, [pc, #144]	; (8004284 <menu+0x2bd4>)
 80041f2:	4618      	mov	r0, r3
 80041f4:	f007 feb0 	bl	800bf58 <itoa>
			lcd_print(2,14,snum);
 80041f8:	4a22      	ldr	r2, [pc, #136]	; (8004284 <menu+0x2bd4>)
 80041fa:	210e      	movs	r1, #14
 80041fc:	2002      	movs	r0, #2
 80041fe:	f7fc fa59 	bl	80006b4 <lcd_print>
 8004202:	e066      	b.n	80042d2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <menu+0x2bf4>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b09      	cmp	r3, #9
 800420a:	d923      	bls.n	8004254 <menu+0x2ba4>
 800420c:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <menu+0x2bf4>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b63      	cmp	r3, #99	; 0x63
 8004212:	d81f      	bhi.n	8004254 <menu+0x2ba4>
			if(dilSecim == 0) {
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <menu+0x2bc0>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 800421c:	4a16      	ldr	r2, [pc, #88]	; (8004278 <menu+0x2bc8>)
 800421e:	2101      	movs	r1, #1
 8004220:	2002      	movs	r0, #2
 8004222:	f7fc fa47 	bl	80006b4 <lcd_print>
 8004226:	e008      	b.n	800423a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <menu+0x2bc0>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d104      	bne.n	800423a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8004230:	4a12      	ldr	r2, [pc, #72]	; (800427c <menu+0x2bcc>)
 8004232:	2101      	movs	r1, #1
 8004234:	2002      	movs	r0, #2
 8004236:	f7fc fa3d 	bl	80006b4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <menu+0x2bf4>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	220a      	movs	r2, #10
 8004240:	4910      	ldr	r1, [pc, #64]	; (8004284 <menu+0x2bd4>)
 8004242:	4618      	mov	r0, r3
 8004244:	f007 fe88 	bl	800bf58 <itoa>
			lcd_print(2, 15, snum);
 8004248:	4a0e      	ldr	r2, [pc, #56]	; (8004284 <menu+0x2bd4>)
 800424a:	210f      	movs	r1, #15
 800424c:	2002      	movs	r0, #2
 800424e:	f7fc fa31 	bl	80006b4 <lcd_print>
 8004252:	e03e      	b.n	80042d2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <menu+0x2bf4>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b09      	cmp	r3, #9
 800425a:	d83a      	bhi.n	80042d2 <menu+0x2c22>
			if(dilSecim == 0) {
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <menu+0x2bc0>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d121      	bne.n	80042a8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <menu+0x2bc8>)
 8004266:	2101      	movs	r1, #1
 8004268:	2002      	movs	r0, #2
 800426a:	f7fc fa23 	bl	80006b4 <lcd_print>
 800426e:	e024      	b.n	80042ba <menu+0x2c0a>
 8004270:	20000419 	.word	0x20000419
 8004274:	0800d53c 	.word	0x0800d53c
 8004278:	0800d104 	.word	0x0800d104
 800427c:	0800d478 	.word	0x0800d478
 8004280:	2000040f 	.word	0x2000040f
 8004284:	20000398 	.word	0x20000398
 8004288:	40010800 	.word	0x40010800
 800428c:	20000427 	.word	0x20000427
 8004290:	20000328 	.word	0x20000328
 8004294:	20000424 	.word	0x20000424
 8004298:	200003f8 	.word	0x200003f8
 800429c:	0800d550 	.word	0x0800d550
 80042a0:	0800d564 	.word	0x0800d564
 80042a4:	20000410 	.word	0x20000410
			} else if(dilSecim == 1) {
 80042a8:	4b8f      	ldr	r3, [pc, #572]	; (80044e8 <menu+0x2e38>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d104      	bne.n	80042ba <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80042b0:	4a8e      	ldr	r2, [pc, #568]	; (80044ec <menu+0x2e3c>)
 80042b2:	2101      	movs	r1, #1
 80042b4:	2002      	movs	r0, #2
 80042b6:	f7fc f9fd 	bl	80006b4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80042ba:	4b8d      	ldr	r3, [pc, #564]	; (80044f0 <menu+0x2e40>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	220a      	movs	r2, #10
 80042c0:	498c      	ldr	r1, [pc, #560]	; (80044f4 <menu+0x2e44>)
 80042c2:	4618      	mov	r0, r3
 80042c4:	f007 fe48 	bl	800bf58 <itoa>
			lcd_print(2, 16, snum);
 80042c8:	4a8a      	ldr	r2, [pc, #552]	; (80044f4 <menu+0x2e44>)
 80042ca:	2110      	movs	r1, #16
 80042cc:	2002      	movs	r0, #2
 80042ce:	f7fc f9f1 	bl	80006b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042d2:	2102      	movs	r1, #2
 80042d4:	4888      	ldr	r0, [pc, #544]	; (80044f8 <menu+0x2e48>)
 80042d6:	f004 fe13 	bl	8008f00 <HAL_GPIO_ReadPin>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d115      	bne.n	800430c <menu+0x2c5c>
 80042e0:	4b86      	ldr	r3, [pc, #536]	; (80044fc <menu+0x2e4c>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	f083 0301 	eor.w	r3, r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00e      	beq.n	800430c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80042ee:	4b80      	ldr	r3, [pc, #512]	; (80044f0 <menu+0x2e40>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b7e      	ldr	r3, [pc, #504]	; (80044f0 <menu+0x2e40>)
 80042f8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80042fa:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <menu+0x2e40>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2bb4      	cmp	r3, #180	; 0xb4
 8004300:	d902      	bls.n	8004308 <menu+0x2c58>
				makineCalismaTmr = 0;
 8004302:	4b7b      	ldr	r3, [pc, #492]	; (80044f0 <menu+0x2e40>)
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004308:	f001 f95a 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800430c:	2104      	movs	r1, #4
 800430e:	487a      	ldr	r0, [pc, #488]	; (80044f8 <menu+0x2e48>)
 8004310:	f004 fdf6 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004314:	4603      	mov	r3, r0
 8004316:	2b01      	cmp	r3, #1
 8004318:	d115      	bne.n	8004346 <menu+0x2c96>
 800431a:	4b78      	ldr	r3, [pc, #480]	; (80044fc <menu+0x2e4c>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	f083 0301 	eor.w	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00e      	beq.n	8004346 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004328:	4b71      	ldr	r3, [pc, #452]	; (80044f0 <menu+0x2e40>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	3b01      	subs	r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <menu+0x2e40>)
 8004332:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004334:	4b6e      	ldr	r3, [pc, #440]	; (80044f0 <menu+0x2e40>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2bb5      	cmp	r3, #181	; 0xb5
 800433a:	d902      	bls.n	8004342 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800433c:	4b6c      	ldr	r3, [pc, #432]	; (80044f0 <menu+0x2e40>)
 800433e:	22b4      	movs	r2, #180	; 0xb4
 8004340:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004342:	f001 f93d 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004346:	2108      	movs	r1, #8
 8004348:	486b      	ldr	r0, [pc, #428]	; (80044f8 <menu+0x2e48>)
 800434a:	f004 fdd9 	bl	8008f00 <HAL_GPIO_ReadPin>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	d10d      	bne.n	8004370 <menu+0x2cc0>
 8004354:	4b69      	ldr	r3, [pc, #420]	; (80044fc <menu+0x2e4c>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	f083 0301 	eor.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004362:	4b63      	ldr	r3, [pc, #396]	; (80044f0 <menu+0x2e40>)
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	4b66      	ldr	r3, [pc, #408]	; (8004500 <menu+0x2e50>)
 8004368:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800436a:	4b66      	ldr	r3, [pc, #408]	; (8004504 <menu+0x2e54>)
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004370:	4b65      	ldr	r3, [pc, #404]	; (8004508 <menu+0x2e58>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b1b      	cmp	r3, #27
 8004376:	f040 8083 	bne.w	8004480 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800437a:	4a64      	ldr	r2, [pc, #400]	; (800450c <menu+0x2e5c>)
 800437c:	2101      	movs	r1, #1
 800437e:	2001      	movs	r0, #1
 8004380:	f7fc f998 	bl	80006b4 <lcd_print>

		if(buzzer == 0) {
 8004384:	4b62      	ldr	r3, [pc, #392]	; (8004510 <menu+0x2e60>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d113      	bne.n	80043b4 <menu+0x2d04>
			if(dilSecim == 0) {
 800438c:	4b56      	ldr	r3, [pc, #344]	; (80044e8 <menu+0x2e38>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004394:	4a5f      	ldr	r2, [pc, #380]	; (8004514 <menu+0x2e64>)
 8004396:	2101      	movs	r1, #1
 8004398:	2002      	movs	r0, #2
 800439a:	f7fc f98b 	bl	80006b4 <lcd_print>
 800439e:	e020      	b.n	80043e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80043a0:	4b51      	ldr	r3, [pc, #324]	; (80044e8 <menu+0x2e38>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d11c      	bne.n	80043e2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80043a8:	4a5b      	ldr	r2, [pc, #364]	; (8004518 <menu+0x2e68>)
 80043aa:	2101      	movs	r1, #1
 80043ac:	2002      	movs	r0, #2
 80043ae:	f7fc f981 	bl	80006b4 <lcd_print>
 80043b2:	e016      	b.n	80043e2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80043b4:	4b56      	ldr	r3, [pc, #344]	; (8004510 <menu+0x2e60>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d112      	bne.n	80043e2 <menu+0x2d32>
			if(dilSecim == 0) {
 80043bc:	4b4a      	ldr	r3, [pc, #296]	; (80044e8 <menu+0x2e38>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80043c4:	4a55      	ldr	r2, [pc, #340]	; (800451c <menu+0x2e6c>)
 80043c6:	2101      	movs	r1, #1
 80043c8:	2002      	movs	r0, #2
 80043ca:	f7fc f973 	bl	80006b4 <lcd_print>
 80043ce:	e008      	b.n	80043e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80043d0:	4b45      	ldr	r3, [pc, #276]	; (80044e8 <menu+0x2e38>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d104      	bne.n	80043e2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80043d8:	4a51      	ldr	r2, [pc, #324]	; (8004520 <menu+0x2e70>)
 80043da:	2101      	movs	r1, #1
 80043dc:	2002      	movs	r0, #2
 80043de:	f7fc f969 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80043e2:	2102      	movs	r1, #2
 80043e4:	4844      	ldr	r0, [pc, #272]	; (80044f8 <menu+0x2e48>)
 80043e6:	f004 fd8b 	bl	8008f00 <HAL_GPIO_ReadPin>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d115      	bne.n	800441c <menu+0x2d6c>
 80043f0:	4b42      	ldr	r3, [pc, #264]	; (80044fc <menu+0x2e4c>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	f083 0301 	eor.w	r3, r3, #1
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00e      	beq.n	800441c <menu+0x2d6c>
			buzzer = buzzer + 1;
 80043fe:	4b44      	ldr	r3, [pc, #272]	; (8004510 <menu+0x2e60>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	4b42      	ldr	r3, [pc, #264]	; (8004510 <menu+0x2e60>)
 8004408:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800440a:	4b41      	ldr	r3, [pc, #260]	; (8004510 <menu+0x2e60>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d902      	bls.n	8004418 <menu+0x2d68>
				buzzer = 0;
 8004412:	4b3f      	ldr	r3, [pc, #252]	; (8004510 <menu+0x2e60>)
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004418:	f001 f8d2 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800441c:	2104      	movs	r1, #4
 800441e:	4836      	ldr	r0, [pc, #216]	; (80044f8 <menu+0x2e48>)
 8004420:	f004 fd6e 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004424:	4603      	mov	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d115      	bne.n	8004456 <menu+0x2da6>
 800442a:	4b34      	ldr	r3, [pc, #208]	; (80044fc <menu+0x2e4c>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	f083 0301 	eor.w	r3, r3, #1
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00e      	beq.n	8004456 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004438:	4b35      	ldr	r3, [pc, #212]	; (8004510 <menu+0x2e60>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	3b01      	subs	r3, #1
 800443e:	b2da      	uxtb	r2, r3
 8004440:	4b33      	ldr	r3, [pc, #204]	; (8004510 <menu+0x2e60>)
 8004442:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004444:	4b32      	ldr	r3, [pc, #200]	; (8004510 <menu+0x2e60>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <menu+0x2da2>
		   		buzzer = 1;
 800444c:	4b30      	ldr	r3, [pc, #192]	; (8004510 <menu+0x2e60>)
 800444e:	2201      	movs	r2, #1
 8004450:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004452:	f001 f8b5 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004456:	2108      	movs	r1, #8
 8004458:	4827      	ldr	r0, [pc, #156]	; (80044f8 <menu+0x2e48>)
 800445a:	f004 fd51 	bl	8008f00 <HAL_GPIO_ReadPin>
 800445e:	4603      	mov	r3, r0
 8004460:	2b01      	cmp	r3, #1
 8004462:	d10d      	bne.n	8004480 <menu+0x2dd0>
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <menu+0x2e4c>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	f083 0301 	eor.w	r3, r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d006      	beq.n	8004480 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <menu+0x2e60>)
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	4b22      	ldr	r3, [pc, #136]	; (8004500 <menu+0x2e50>)
 8004478:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800447a:	4b22      	ldr	r3, [pc, #136]	; (8004504 <menu+0x2e54>)
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004480:	4b21      	ldr	r3, [pc, #132]	; (8004508 <menu+0x2e58>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b1c      	cmp	r3, #28
 8004486:	f040 80ab 	bne.w	80045e0 <menu+0x2f30>
		calismaSayModu = 0;
 800448a:	4b26      	ldr	r3, [pc, #152]	; (8004524 <menu+0x2e74>)
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004490:	4a25      	ldr	r2, [pc, #148]	; (8004528 <menu+0x2e78>)
 8004492:	2101      	movs	r1, #1
 8004494:	2001      	movs	r0, #1
 8004496:	f7fc f90d 	bl	80006b4 <lcd_print>

		if(demoMode == 0) {
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <menu+0x2e7c>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d113      	bne.n	80044ca <menu+0x2e1a>
			if(dilSecim == 0) {
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <menu+0x2e38>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80044aa:	4a1a      	ldr	r2, [pc, #104]	; (8004514 <menu+0x2e64>)
 80044ac:	2101      	movs	r1, #1
 80044ae:	2002      	movs	r0, #2
 80044b0:	f7fc f900 	bl	80006b4 <lcd_print>
 80044b4:	e045      	b.n	8004542 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80044b6:	4b0c      	ldr	r3, [pc, #48]	; (80044e8 <menu+0x2e38>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d141      	bne.n	8004542 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80044be:	4a16      	ldr	r2, [pc, #88]	; (8004518 <menu+0x2e68>)
 80044c0:	2101      	movs	r1, #1
 80044c2:	2002      	movs	r0, #2
 80044c4:	f7fc f8f6 	bl	80006b4 <lcd_print>
 80044c8:	e03b      	b.n	8004542 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80044ca:	4b18      	ldr	r3, [pc, #96]	; (800452c <menu+0x2e7c>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d137      	bne.n	8004542 <menu+0x2e92>
			if(dilSecim == 0){
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <menu+0x2e38>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d12a      	bne.n	8004530 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80044da:	4a10      	ldr	r2, [pc, #64]	; (800451c <menu+0x2e6c>)
 80044dc:	2101      	movs	r1, #1
 80044de:	2002      	movs	r0, #2
 80044e0:	f7fc f8e8 	bl	80006b4 <lcd_print>
 80044e4:	e02d      	b.n	8004542 <menu+0x2e92>
 80044e6:	bf00      	nop
 80044e8:	20000419 	.word	0x20000419
 80044ec:	0800d478 	.word	0x0800d478
 80044f0:	20000410 	.word	0x20000410
 80044f4:	20000398 	.word	0x20000398
 80044f8:	40010800 	.word	0x40010800
 80044fc:	20000427 	.word	0x20000427
 8004500:	20000328 	.word	0x20000328
 8004504:	20000424 	.word	0x20000424
 8004508:	200003f8 	.word	0x200003f8
 800450c:	0800d578 	.word	0x0800d578
 8004510:	20000414 	.word	0x20000414
 8004514:	0800cea0 	.word	0x0800cea0
 8004518:	0800ceb4 	.word	0x0800ceb4
 800451c:	0800cf00 	.word	0x0800cf00
 8004520:	0800cf14 	.word	0x0800cf14
 8004524:	20000418 	.word	0x20000418
 8004528:	0800d58c 	.word	0x0800d58c
 800452c:	20000416 	.word	0x20000416
			} else if(dilSecim == 1) {
 8004530:	4b71      	ldr	r3, [pc, #452]	; (80046f8 <menu+0x3048>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d104      	bne.n	8004542 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004538:	4a70      	ldr	r2, [pc, #448]	; (80046fc <menu+0x304c>)
 800453a:	2101      	movs	r1, #1
 800453c:	2002      	movs	r0, #2
 800453e:	f7fc f8b9 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004542:	2102      	movs	r1, #2
 8004544:	486e      	ldr	r0, [pc, #440]	; (8004700 <menu+0x3050>)
 8004546:	f004 fcdb 	bl	8008f00 <HAL_GPIO_ReadPin>
 800454a:	4603      	mov	r3, r0
 800454c:	2b01      	cmp	r3, #1
 800454e:	d115      	bne.n	800457c <menu+0x2ecc>
 8004550:	4b6c      	ldr	r3, [pc, #432]	; (8004704 <menu+0x3054>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	f083 0301 	eor.w	r3, r3, #1
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00e      	beq.n	800457c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800455e:	4b6a      	ldr	r3, [pc, #424]	; (8004708 <menu+0x3058>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	b2da      	uxtb	r2, r3
 8004566:	4b68      	ldr	r3, [pc, #416]	; (8004708 <menu+0x3058>)
 8004568:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800456a:	4b67      	ldr	r3, [pc, #412]	; (8004708 <menu+0x3058>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d902      	bls.n	8004578 <menu+0x2ec8>
				demoMode = 0;
 8004572:	4b65      	ldr	r3, [pc, #404]	; (8004708 <menu+0x3058>)
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004578:	f001 f822 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800457c:	2104      	movs	r1, #4
 800457e:	4860      	ldr	r0, [pc, #384]	; (8004700 <menu+0x3050>)
 8004580:	f004 fcbe 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004584:	4603      	mov	r3, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	d115      	bne.n	80045b6 <menu+0x2f06>
 800458a:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <menu+0x3054>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f083 0301 	eor.w	r3, r3, #1
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00e      	beq.n	80045b6 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004598:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <menu+0x3058>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	3b01      	subs	r3, #1
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	4b59      	ldr	r3, [pc, #356]	; (8004708 <menu+0x3058>)
 80045a2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80045a4:	4b58      	ldr	r3, [pc, #352]	; (8004708 <menu+0x3058>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <menu+0x2f02>
		   		demoMode = 1;
 80045ac:	4b56      	ldr	r3, [pc, #344]	; (8004708 <menu+0x3058>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045b2:	f001 f805 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045b6:	2108      	movs	r1, #8
 80045b8:	4851      	ldr	r0, [pc, #324]	; (8004700 <menu+0x3050>)
 80045ba:	f004 fca1 	bl	8008f00 <HAL_GPIO_ReadPin>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d10d      	bne.n	80045e0 <menu+0x2f30>
 80045c4:	4b4f      	ldr	r3, [pc, #316]	; (8004704 <menu+0x3054>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	f083 0301 	eor.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d006      	beq.n	80045e0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80045d2:	4b4d      	ldr	r3, [pc, #308]	; (8004708 <menu+0x3058>)
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	4b4d      	ldr	r3, [pc, #308]	; (800470c <menu+0x305c>)
 80045d8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80045da:	4b4d      	ldr	r3, [pc, #308]	; (8004710 <menu+0x3060>)
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80045e0:	4b4c      	ldr	r3, [pc, #304]	; (8004714 <menu+0x3064>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b1d      	cmp	r3, #29
 80045e6:	f040 8132 	bne.w	800484e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80045ea:	4b4b      	ldr	r3, [pc, #300]	; (8004718 <menu+0x3068>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d113      	bne.n	800461a <menu+0x2f6a>
 80045f2:	4b4a      	ldr	r3, [pc, #296]	; (800471c <menu+0x306c>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <menu+0x2f6a>
 80045fa:	4b49      	ldr	r3, [pc, #292]	; (8004720 <menu+0x3070>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <menu+0x2f6a>
 8004602:	4b48      	ldr	r3, [pc, #288]	; (8004724 <menu+0x3074>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <menu+0x2f6a>
 800460a:	4b47      	ldr	r3, [pc, #284]	; (8004728 <menu+0x3078>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004612:	4b46      	ldr	r3, [pc, #280]	; (800472c <menu+0x307c>)
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	e002      	b.n	8004620 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800461a:	4b44      	ldr	r3, [pc, #272]	; (800472c <menu+0x307c>)
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004620:	4b43      	ldr	r3, [pc, #268]	; (8004730 <menu+0x3080>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d154      	bne.n	80046d2 <menu+0x3022>
			if(dilSecim == 0) {
 8004628:	4b33      	ldr	r3, [pc, #204]	; (80046f8 <menu+0x3048>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004630:	4a40      	ldr	r2, [pc, #256]	; (8004734 <menu+0x3084>)
 8004632:	2101      	movs	r1, #1
 8004634:	2001      	movs	r0, #1
 8004636:	f7fc f83d 	bl	80006b4 <lcd_print>
 800463a:	e008      	b.n	800464e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800463c:	4b2e      	ldr	r3, [pc, #184]	; (80046f8 <menu+0x3048>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d104      	bne.n	800464e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004644:	4a3c      	ldr	r2, [pc, #240]	; (8004738 <menu+0x3088>)
 8004646:	2101      	movs	r1, #1
 8004648:	2001      	movs	r0, #1
 800464a:	f7fc f833 	bl	80006b4 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800464e:	4b36      	ldr	r3, [pc, #216]	; (8004728 <menu+0x3078>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	220a      	movs	r2, #10
 8004654:	4939      	ldr	r1, [pc, #228]	; (800473c <menu+0x308c>)
 8004656:	4618      	mov	r0, r3
 8004658:	f007 fc7e 	bl	800bf58 <itoa>
			lcd_print(2, 12, snum);
 800465c:	4a37      	ldr	r2, [pc, #220]	; (800473c <menu+0x308c>)
 800465e:	210c      	movs	r1, #12
 8004660:	2002      	movs	r0, #2
 8004662:	f7fc f827 	bl	80006b4 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004666:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <menu+0x3074>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	220a      	movs	r2, #10
 800466c:	4933      	ldr	r1, [pc, #204]	; (800473c <menu+0x308c>)
 800466e:	4618      	mov	r0, r3
 8004670:	f007 fc72 	bl	800bf58 <itoa>
			lcd_print(2, 13, snum);
 8004674:	4a31      	ldr	r2, [pc, #196]	; (800473c <menu+0x308c>)
 8004676:	210d      	movs	r1, #13
 8004678:	2002      	movs	r0, #2
 800467a:	f7fc f81b 	bl	80006b4 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800467e:	4b28      	ldr	r3, [pc, #160]	; (8004720 <menu+0x3070>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	220a      	movs	r2, #10
 8004684:	492d      	ldr	r1, [pc, #180]	; (800473c <menu+0x308c>)
 8004686:	4618      	mov	r0, r3
 8004688:	f007 fc66 	bl	800bf58 <itoa>
			lcd_print(2, 14, snum);
 800468c:	4a2b      	ldr	r2, [pc, #172]	; (800473c <menu+0x308c>)
 800468e:	210e      	movs	r1, #14
 8004690:	2002      	movs	r0, #2
 8004692:	f7fc f80f 	bl	80006b4 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004696:	4b21      	ldr	r3, [pc, #132]	; (800471c <menu+0x306c>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	220a      	movs	r2, #10
 800469c:	4927      	ldr	r1, [pc, #156]	; (800473c <menu+0x308c>)
 800469e:	4618      	mov	r0, r3
 80046a0:	f007 fc5a 	bl	800bf58 <itoa>
			lcd_print(2, 15, snum);
 80046a4:	4a25      	ldr	r2, [pc, #148]	; (800473c <menu+0x308c>)
 80046a6:	210f      	movs	r1, #15
 80046a8:	2002      	movs	r0, #2
 80046aa:	f7fc f803 	bl	80006b4 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80046ae:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <menu+0x3068>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	220a      	movs	r2, #10
 80046b4:	4921      	ldr	r1, [pc, #132]	; (800473c <menu+0x308c>)
 80046b6:	4618      	mov	r0, r3
 80046b8:	f007 fc4e 	bl	800bf58 <itoa>
			lcd_print(2, 16, snum);
 80046bc:	4a1f      	ldr	r2, [pc, #124]	; (800473c <menu+0x308c>)
 80046be:	2110      	movs	r1, #16
 80046c0:	2002      	movs	r0, #2
 80046c2:	f7fb fff7 	bl	80006b4 <lcd_print>

			lcd_print(2, 1, "           ");
 80046c6:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <menu+0x3090>)
 80046c8:	2101      	movs	r1, #1
 80046ca:	2002      	movs	r0, #2
 80046cc:	f7fb fff2 	bl	80006b4 <lcd_print>
 80046d0:	e048      	b.n	8004764 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <menu+0x3080>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d144      	bne.n	8004764 <menu+0x30b4>
			if(dilSecim == 0) {
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <menu+0x3048>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d132      	bne.n	8004748 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80046e2:	4a14      	ldr	r2, [pc, #80]	; (8004734 <menu+0x3084>)
 80046e4:	2101      	movs	r1, #1
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7fb ffe4 	bl	80006b4 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80046ec:	4a15      	ldr	r2, [pc, #84]	; (8004744 <menu+0x3094>)
 80046ee:	2101      	movs	r1, #1
 80046f0:	2002      	movs	r0, #2
 80046f2:	f7fb ffdf 	bl	80006b4 <lcd_print>
 80046f6:	e035      	b.n	8004764 <menu+0x30b4>
 80046f8:	20000419 	.word	0x20000419
 80046fc:	0800cf14 	.word	0x0800cf14
 8004700:	40010800 	.word	0x40010800
 8004704:	20000427 	.word	0x20000427
 8004708:	20000416 	.word	0x20000416
 800470c:	20000328 	.word	0x20000328
 8004710:	20000424 	.word	0x20000424
 8004714:	200003f8 	.word	0x200003f8
 8004718:	200003f5 	.word	0x200003f5
 800471c:	200003f6 	.word	0x200003f6
 8004720:	200000a4 	.word	0x200000a4
 8004724:	200000a5 	.word	0x200000a5
 8004728:	200003f7 	.word	0x200003f7
 800472c:	20000439 	.word	0x20000439
 8004730:	20000418 	.word	0x20000418
 8004734:	0800d59c 	.word	0x0800d59c
 8004738:	0800d5b0 	.word	0x0800d5b0
 800473c:	20000398 	.word	0x20000398
 8004740:	0800d5c4 	.word	0x0800d5c4
 8004744:	0800d5d0 	.word	0x0800d5d0
			} else if(dilSecim == 1) {
 8004748:	4b94      	ldr	r3, [pc, #592]	; (800499c <menu+0x32ec>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d109      	bne.n	8004764 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004750:	4a93      	ldr	r2, [pc, #588]	; (80049a0 <menu+0x32f0>)
 8004752:	2101      	movs	r1, #1
 8004754:	2001      	movs	r0, #1
 8004756:	f7fb ffad 	bl	80006b4 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800475a:	4a92      	ldr	r2, [pc, #584]	; (80049a4 <menu+0x32f4>)
 800475c:	2101      	movs	r1, #1
 800475e:	2002      	movs	r0, #2
 8004760:	f7fb ffa8 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004764:	2102      	movs	r1, #2
 8004766:	4890      	ldr	r0, [pc, #576]	; (80049a8 <menu+0x32f8>)
 8004768:	f004 fbca 	bl	8008f00 <HAL_GPIO_ReadPin>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d119      	bne.n	80047a6 <menu+0x30f6>
 8004772:	4b8e      	ldr	r3, [pc, #568]	; (80049ac <menu+0x32fc>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	f083 0301 	eor.w	r3, r3, #1
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d012      	beq.n	80047a6 <menu+0x30f6>
 8004780:	4b8b      	ldr	r3, [pc, #556]	; (80049b0 <menu+0x3300>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00e      	beq.n	80047a6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004788:	4b8a      	ldr	r3, [pc, #552]	; (80049b4 <menu+0x3304>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	b2da      	uxtb	r2, r3
 8004790:	4b88      	ldr	r3, [pc, #544]	; (80049b4 <menu+0x3304>)
 8004792:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004794:	4b87      	ldr	r3, [pc, #540]	; (80049b4 <menu+0x3304>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d902      	bls.n	80047a2 <menu+0x30f2>
				calismaSayModu = 0;
 800479c:	4b85      	ldr	r3, [pc, #532]	; (80049b4 <menu+0x3304>)
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80047a2:	f000 ff0d 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80047a6:	2104      	movs	r1, #4
 80047a8:	487f      	ldr	r0, [pc, #508]	; (80049a8 <menu+0x32f8>)
 80047aa:	f004 fba9 	bl	8008f00 <HAL_GPIO_ReadPin>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d119      	bne.n	80047e8 <menu+0x3138>
 80047b4:	4b7d      	ldr	r3, [pc, #500]	; (80049ac <menu+0x32fc>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	f083 0301 	eor.w	r3, r3, #1
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d012      	beq.n	80047e8 <menu+0x3138>
 80047c2:	4b7b      	ldr	r3, [pc, #492]	; (80049b0 <menu+0x3300>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80047ca:	4b7a      	ldr	r3, [pc, #488]	; (80049b4 <menu+0x3304>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4b78      	ldr	r3, [pc, #480]	; (80049b4 <menu+0x3304>)
 80047d4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80047d6:	4b77      	ldr	r3, [pc, #476]	; (80049b4 <menu+0x3304>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <menu+0x3134>
		   		calismaSayModu = 1;
 80047de:	4b75      	ldr	r3, [pc, #468]	; (80049b4 <menu+0x3304>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80047e4:	f000 feec 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80047e8:	2108      	movs	r1, #8
 80047ea:	486f      	ldr	r0, [pc, #444]	; (80049a8 <menu+0x32f8>)
 80047ec:	f004 fb88 	bl	8008f00 <HAL_GPIO_ReadPin>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d12b      	bne.n	800484e <menu+0x319e>
 80047f6:	4b6d      	ldr	r3, [pc, #436]	; (80049ac <menu+0x32fc>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f083 0301 	eor.w	r3, r3, #1
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d024      	beq.n	800484e <menu+0x319e>
			eepromData[32] = 0;
 8004804:	4b6c      	ldr	r3, [pc, #432]	; (80049b8 <menu+0x3308>)
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800480c:	4b6a      	ldr	r3, [pc, #424]	; (80049b8 <menu+0x3308>)
 800480e:	2200      	movs	r2, #0
 8004810:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004812:	4b69      	ldr	r3, [pc, #420]	; (80049b8 <menu+0x3308>)
 8004814:	2200      	movs	r2, #0
 8004816:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004818:	4b67      	ldr	r3, [pc, #412]	; (80049b8 <menu+0x3308>)
 800481a:	2200      	movs	r2, #0
 800481c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800481e:	4b66      	ldr	r3, [pc, #408]	; (80049b8 <menu+0x3308>)
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004824:	4b65      	ldr	r3, [pc, #404]	; (80049bc <menu+0x330c>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800482a:	4b65      	ldr	r3, [pc, #404]	; (80049c0 <menu+0x3310>)
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004830:	4b64      	ldr	r3, [pc, #400]	; (80049c4 <menu+0x3314>)
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004836:	4b64      	ldr	r3, [pc, #400]	; (80049c8 <menu+0x3318>)
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800483c:	4b63      	ldr	r3, [pc, #396]	; (80049cc <menu+0x331c>)
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004842:	4b5c      	ldr	r3, [pc, #368]	; (80049b4 <menu+0x3304>)
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004848:	4b61      	ldr	r3, [pc, #388]	; (80049d0 <menu+0x3320>)
 800484a:	2201      	movs	r2, #1
 800484c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800484e:	4b61      	ldr	r3, [pc, #388]	; (80049d4 <menu+0x3324>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b1e      	cmp	r3, #30
 8004854:	d16f      	bne.n	8004936 <menu+0x3286>
		calismaSayModu = 0;
 8004856:	4b57      	ldr	r3, [pc, #348]	; (80049b4 <menu+0x3304>)
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800485c:	4b4f      	ldr	r3, [pc, #316]	; (800499c <menu+0x32ec>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004864:	4a5c      	ldr	r2, [pc, #368]	; (80049d8 <menu+0x3328>)
 8004866:	2101      	movs	r1, #1
 8004868:	2001      	movs	r0, #1
 800486a:	f7fb ff23 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800486e:	4a5b      	ldr	r2, [pc, #364]	; (80049dc <menu+0x332c>)
 8004870:	2101      	movs	r1, #1
 8004872:	2002      	movs	r0, #2
 8004874:	f7fb ff1e 	bl	80006b4 <lcd_print>
 8004878:	e00d      	b.n	8004896 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800487a:	4b48      	ldr	r3, [pc, #288]	; (800499c <menu+0x32ec>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d109      	bne.n	8004896 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004882:	4a57      	ldr	r2, [pc, #348]	; (80049e0 <menu+0x3330>)
 8004884:	2101      	movs	r1, #1
 8004886:	2001      	movs	r0, #1
 8004888:	f7fb ff14 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800488c:	4a55      	ldr	r2, [pc, #340]	; (80049e4 <menu+0x3334>)
 800488e:	2101      	movs	r1, #1
 8004890:	2002      	movs	r0, #2
 8004892:	f7fb ff0f 	bl	80006b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004896:	2102      	movs	r1, #2
 8004898:	4843      	ldr	r0, [pc, #268]	; (80049a8 <menu+0x32f8>)
 800489a:	f004 fb31 	bl	8008f00 <HAL_GPIO_ReadPin>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d115      	bne.n	80048d0 <menu+0x3220>
 80048a4:	4b41      	ldr	r3, [pc, #260]	; (80049ac <menu+0x32fc>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	f083 0301 	eor.w	r3, r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00e      	beq.n	80048d0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80048b2:	4b3a      	ldr	r3, [pc, #232]	; (800499c <menu+0x32ec>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	3301      	adds	r3, #1
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	4b38      	ldr	r3, [pc, #224]	; (800499c <menu+0x32ec>)
 80048bc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80048be:	4b37      	ldr	r3, [pc, #220]	; (800499c <menu+0x32ec>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d902      	bls.n	80048cc <menu+0x321c>
				dilSecim = 0;
 80048c6:	4b35      	ldr	r3, [pc, #212]	; (800499c <menu+0x32ec>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80048cc:	f000 fe78 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048d0:	2104      	movs	r1, #4
 80048d2:	4835      	ldr	r0, [pc, #212]	; (80049a8 <menu+0x32f8>)
 80048d4:	f004 fb14 	bl	8008f00 <HAL_GPIO_ReadPin>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d115      	bne.n	800490a <menu+0x325a>
 80048de:	4b33      	ldr	r3, [pc, #204]	; (80049ac <menu+0x32fc>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	f083 0301 	eor.w	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00e      	beq.n	800490a <menu+0x325a>
			dilSecim = dilSecim - 1;
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <menu+0x32ec>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	4b29      	ldr	r3, [pc, #164]	; (800499c <menu+0x32ec>)
 80048f6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80048f8:	4b28      	ldr	r3, [pc, #160]	; (800499c <menu+0x32ec>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <menu+0x3256>
		   		dilSecim = 1;
 8004900:	4b26      	ldr	r3, [pc, #152]	; (800499c <menu+0x32ec>)
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004906:	f000 fe5b 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800490a:	2108      	movs	r1, #8
 800490c:	4826      	ldr	r0, [pc, #152]	; (80049a8 <menu+0x32f8>)
 800490e:	f004 faf7 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004912:	4603      	mov	r3, r0
 8004914:	2b01      	cmp	r3, #1
 8004916:	d10e      	bne.n	8004936 <menu+0x3286>
 8004918:	4b24      	ldr	r3, [pc, #144]	; (80049ac <menu+0x32fc>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	f083 0301 	eor.w	r3, r3, #1
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <menu+0x32ec>)
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	4b23      	ldr	r3, [pc, #140]	; (80049b8 <menu+0x3308>)
 800492c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004930:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <menu+0x3320>)
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004936:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <menu+0x3324>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b1f      	cmp	r3, #31
 800493c:	f040 80b7 	bne.w	8004aae <menu+0x33fe>
		calismaSayModu = 0;
 8004940:	4b1c      	ldr	r3, [pc, #112]	; (80049b4 <menu+0x3304>)
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004946:	4a28      	ldr	r2, [pc, #160]	; (80049e8 <menu+0x3338>)
 8004948:	2101      	movs	r1, #1
 800494a:	2001      	movs	r0, #1
 800494c:	f7fb feb2 	bl	80006b4 <lcd_print>

		if(iotMode == 0) {
 8004950:	4b26      	ldr	r3, [pc, #152]	; (80049ec <menu+0x333c>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d113      	bne.n	8004980 <menu+0x32d0>
			if(dilSecim == 0) {
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <menu+0x32ec>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <menu+0x3340>)
 8004962:	2101      	movs	r1, #1
 8004964:	2002      	movs	r0, #2
 8004966:	f7fb fea5 	bl	80006b4 <lcd_print>
 800496a:	e050      	b.n	8004a0e <menu+0x335e>
			} else if(dilSecim == 1) {
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <menu+0x32ec>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d14c      	bne.n	8004a0e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004974:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <menu+0x3344>)
 8004976:	2101      	movs	r1, #1
 8004978:	2002      	movs	r0, #2
 800497a:	f7fb fe9b 	bl	80006b4 <lcd_print>
 800497e:	e046      	b.n	8004a0e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004980:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <menu+0x333c>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d142      	bne.n	8004a0e <menu+0x335e>
			if(dilSecim == 0){
 8004988:	4b04      	ldr	r3, [pc, #16]	; (800499c <menu+0x32ec>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d135      	bne.n	80049fc <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004990:	4a19      	ldr	r2, [pc, #100]	; (80049f8 <menu+0x3348>)
 8004992:	2101      	movs	r1, #1
 8004994:	2002      	movs	r0, #2
 8004996:	f7fb fe8d 	bl	80006b4 <lcd_print>
 800499a:	e038      	b.n	8004a0e <menu+0x335e>
 800499c:	20000419 	.word	0x20000419
 80049a0:	0800d5b0 	.word	0x0800d5b0
 80049a4:	0800d5e4 	.word	0x0800d5e4
 80049a8:	40010800 	.word	0x40010800
 80049ac:	20000427 	.word	0x20000427
 80049b0:	20000439 	.word	0x20000439
 80049b4:	20000418 	.word	0x20000418
 80049b8:	20000328 	.word	0x20000328
 80049bc:	200003f7 	.word	0x200003f7
 80049c0:	200000a5 	.word	0x200000a5
 80049c4:	200000a4 	.word	0x200000a4
 80049c8:	200003f6 	.word	0x200003f6
 80049cc:	200003f5 	.word	0x200003f5
 80049d0:	20000424 	.word	0x20000424
 80049d4:	200003f8 	.word	0x200003f8
 80049d8:	0800d5f8 	.word	0x0800d5f8
 80049dc:	0800d60c 	.word	0x0800d60c
 80049e0:	0800d620 	.word	0x0800d620
 80049e4:	0800d634 	.word	0x0800d634
 80049e8:	0800d648 	.word	0x0800d648
 80049ec:	20000417 	.word	0x20000417
 80049f0:	0800cea0 	.word	0x0800cea0
 80049f4:	0800ceb4 	.word	0x0800ceb4
 80049f8:	0800cf00 	.word	0x0800cf00
			} else if(dilSecim == 1) {
 80049fc:	4bac      	ldr	r3, [pc, #688]	; (8004cb0 <menu+0x3600>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d104      	bne.n	8004a0e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004a04:	4aab      	ldr	r2, [pc, #684]	; (8004cb4 <menu+0x3604>)
 8004a06:	2101      	movs	r1, #1
 8004a08:	2002      	movs	r0, #2
 8004a0a:	f7fb fe53 	bl	80006b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a0e:	2102      	movs	r1, #2
 8004a10:	48a9      	ldr	r0, [pc, #676]	; (8004cb8 <menu+0x3608>)
 8004a12:	f004 fa75 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d115      	bne.n	8004a48 <menu+0x3398>
 8004a1c:	4ba7      	ldr	r3, [pc, #668]	; (8004cbc <menu+0x360c>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	f083 0301 	eor.w	r3, r3, #1
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00e      	beq.n	8004a48 <menu+0x3398>
			iotMode = iotMode + 1;
 8004a2a:	4ba5      	ldr	r3, [pc, #660]	; (8004cc0 <menu+0x3610>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4ba3      	ldr	r3, [pc, #652]	; (8004cc0 <menu+0x3610>)
 8004a34:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004a36:	4ba2      	ldr	r3, [pc, #648]	; (8004cc0 <menu+0x3610>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d902      	bls.n	8004a44 <menu+0x3394>
				iotMode = 0;
 8004a3e:	4ba0      	ldr	r3, [pc, #640]	; (8004cc0 <menu+0x3610>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004a44:	f000 fdbc 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a48:	2104      	movs	r1, #4
 8004a4a:	489b      	ldr	r0, [pc, #620]	; (8004cb8 <menu+0x3608>)
 8004a4c:	f004 fa58 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d115      	bne.n	8004a82 <menu+0x33d2>
 8004a56:	4b99      	ldr	r3, [pc, #612]	; (8004cbc <menu+0x360c>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	f083 0301 	eor.w	r3, r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004a64:	4b96      	ldr	r3, [pc, #600]	; (8004cc0 <menu+0x3610>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4b94      	ldr	r3, [pc, #592]	; (8004cc0 <menu+0x3610>)
 8004a6e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004a70:	4b93      	ldr	r3, [pc, #588]	; (8004cc0 <menu+0x3610>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <menu+0x33ce>
		   		iotMode = 1;
 8004a78:	4b91      	ldr	r3, [pc, #580]	; (8004cc0 <menu+0x3610>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004a7e:	f000 fd9f 	bl	80055c0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a82:	2108      	movs	r1, #8
 8004a84:	488c      	ldr	r0, [pc, #560]	; (8004cb8 <menu+0x3608>)
 8004a86:	f004 fa3b 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d10e      	bne.n	8004aae <menu+0x33fe>
 8004a90:	4b8a      	ldr	r3, [pc, #552]	; (8004cbc <menu+0x360c>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f083 0301 	eor.w	r3, r3, #1
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <menu+0x33fe>
			eepromData[48] = iotMode;
 8004a9e:	4b88      	ldr	r3, [pc, #544]	; (8004cc0 <menu+0x3610>)
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	4b88      	ldr	r3, [pc, #544]	; (8004cc4 <menu+0x3614>)
 8004aa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004aa8:	4b87      	ldr	r3, [pc, #540]	; (8004cc8 <menu+0x3618>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004aae:	4b87      	ldr	r3, [pc, #540]	; (8004ccc <menu+0x361c>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d138      	bne.n	8004b28 <menu+0x3478>
		calismaSayModu = 0;
 8004ab6:	4b86      	ldr	r3, [pc, #536]	; (8004cd0 <menu+0x3620>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004abc:	4a85      	ldr	r2, [pc, #532]	; (8004cd4 <menu+0x3624>)
 8004abe:	2101      	movs	r1, #1
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	f7fb fdf7 	bl	80006b4 <lcd_print>

		lcd_print(2, 1, machineID);
 8004ac6:	4a84      	ldr	r2, [pc, #528]	; (8004cd8 <menu+0x3628>)
 8004ac8:	2101      	movs	r1, #1
 8004aca:	2002      	movs	r0, #2
 8004acc:	f7fb fdf2 	bl	80006b4 <lcd_print>
		lcd_print(2, 13, "    ");
 8004ad0:	4a82      	ldr	r2, [pc, #520]	; (8004cdc <menu+0x362c>)
 8004ad2:	210d      	movs	r1, #13
 8004ad4:	2002      	movs	r0, #2
 8004ad6:	f7fb fded 	bl	80006b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004ada:	2102      	movs	r1, #2
 8004adc:	4876      	ldr	r0, [pc, #472]	; (8004cb8 <menu+0x3608>)
 8004ade:	f004 fa0f 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d11f      	bne.n	8004b28 <menu+0x3478>
 8004ae8:	2104      	movs	r1, #4
 8004aea:	4873      	ldr	r0, [pc, #460]	; (8004cb8 <menu+0x3608>)
 8004aec:	f004 fa08 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d118      	bne.n	8004b28 <menu+0x3478>
 8004af6:	4b71      	ldr	r3, [pc, #452]	; (8004cbc <menu+0x360c>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	f083 0301 	eor.w	r3, r3, #1
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d011      	beq.n	8004b28 <menu+0x3478>
			takeMachineID(0);
 8004b04:	2000      	movs	r0, #0
 8004b06:	f7fb ffe5 	bl	8000ad4 <takeMachineID>

			HAL_Delay(50);
 8004b0a:	2032      	movs	r0, #50	; 0x32
 8004b0c:	f003 fc28 	bl	8008360 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004b10:	4a71      	ldr	r2, [pc, #452]	; (8004cd8 <menu+0x3628>)
 8004b12:	2101      	movs	r1, #1
 8004b14:	2002      	movs	r0, #2
 8004b16:	f7fb fdcd 	bl	80006b4 <lcd_print>
			lcd_print(2, 13, "    ");
 8004b1a:	4a70      	ldr	r2, [pc, #448]	; (8004cdc <menu+0x362c>)
 8004b1c:	210d      	movs	r1, #13
 8004b1e:	2002      	movs	r0, #2
 8004b20:	f7fb fdc8 	bl	80006b4 <lcd_print>

			bekle();
 8004b24:	f000 fd4c 	bl	80055c0 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004b28:	4b68      	ldr	r3, [pc, #416]	; (8004ccc <menu+0x361c>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b21      	cmp	r3, #33	; 0x21
 8004b2e:	d153      	bne.n	8004bd8 <menu+0x3528>
		calismaSayModu = 0;
 8004b30:	4b67      	ldr	r3, [pc, #412]	; (8004cd0 <menu+0x3620>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004b36:	4a6a      	ldr	r2, [pc, #424]	; (8004ce0 <menu+0x3630>)
 8004b38:	2101      	movs	r1, #1
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	f7fb fdba 	bl	80006b4 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004b40:	4868      	ldr	r0, [pc, #416]	; (8004ce4 <menu+0x3634>)
 8004b42:	f7fb fb6f 	bl	8000224 <strlen>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d811      	bhi.n	8004b70 <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8004b4c:	4a65      	ldr	r2, [pc, #404]	; (8004ce4 <menu+0x3634>)
 8004b4e:	2101      	movs	r1, #1
 8004b50:	2002      	movs	r0, #2
 8004b52:	f7fb fdaf 	bl	80006b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004b56:	4863      	ldr	r0, [pc, #396]	; (8004ce4 <menu+0x3634>)
 8004b58:	f7fb fb64 	bl	8000224 <strlen>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	3301      	adds	r3, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	4a60      	ldr	r2, [pc, #384]	; (8004ce8 <menu+0x3638>)
 8004b66:	4619      	mov	r1, r3
 8004b68:	2002      	movs	r0, #2
 8004b6a:	f7fb fda3 	bl	80006b4 <lcd_print>
 8004b6e:	e005      	b.n	8004b7c <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004b70:	2300      	movs	r3, #0
 8004b72:	2202      	movs	r2, #2
 8004b74:	2101      	movs	r1, #1
 8004b76:	485b      	ldr	r0, [pc, #364]	; (8004ce4 <menu+0x3634>)
 8004b78:	f7fc fcf4 	bl	8001564 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b7c:	2102      	movs	r1, #2
 8004b7e:	484e      	ldr	r0, [pc, #312]	; (8004cb8 <menu+0x3608>)
 8004b80:	f004 f9be 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d126      	bne.n	8004bd8 <menu+0x3528>
 8004b8a:	2104      	movs	r1, #4
 8004b8c:	484a      	ldr	r0, [pc, #296]	; (8004cb8 <menu+0x3608>)
 8004b8e:	f004 f9b7 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d11f      	bne.n	8004bd8 <menu+0x3528>
 8004b98:	4b48      	ldr	r3, [pc, #288]	; (8004cbc <menu+0x360c>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	f083 0301 	eor.w	r3, r3, #1
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d018      	beq.n	8004bd8 <menu+0x3528>
			takeWifiSSID(0);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fc f8ea 	bl	8000d80 <takeWifiSSID>

			HAL_Delay(100);
 8004bac:	2064      	movs	r0, #100	; 0x64
 8004bae:	f003 fbd7 	bl	8008360 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004bb2:	4a4c      	ldr	r2, [pc, #304]	; (8004ce4 <menu+0x3634>)
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	2002      	movs	r0, #2
 8004bb8:	f7fb fd7c 	bl	80006b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004bbc:	4849      	ldr	r0, [pc, #292]	; (8004ce4 <menu+0x3634>)
 8004bbe:	f7fb fb31 	bl	8000224 <strlen>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	4a47      	ldr	r2, [pc, #284]	; (8004ce8 <menu+0x3638>)
 8004bcc:	4619      	mov	r1, r3
 8004bce:	2002      	movs	r0, #2
 8004bd0:	f7fb fd70 	bl	80006b4 <lcd_print>

			bekle();
 8004bd4:	f000 fcf4 	bl	80055c0 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004bd8:	4b3c      	ldr	r3, [pc, #240]	; (8004ccc <menu+0x361c>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b22      	cmp	r3, #34	; 0x22
 8004bde:	d153      	bne.n	8004c88 <menu+0x35d8>
		calismaSayModu = 0;
 8004be0:	4b3b      	ldr	r3, [pc, #236]	; (8004cd0 <menu+0x3620>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004be6:	4a41      	ldr	r2, [pc, #260]	; (8004cec <menu+0x363c>)
 8004be8:	2101      	movs	r1, #1
 8004bea:	2001      	movs	r0, #1
 8004bec:	f7fb fd62 	bl	80006b4 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004bf0:	483f      	ldr	r0, [pc, #252]	; (8004cf0 <menu+0x3640>)
 8004bf2:	f7fb fb17 	bl	8000224 <strlen>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d811      	bhi.n	8004c20 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004bfc:	4a3c      	ldr	r2, [pc, #240]	; (8004cf0 <menu+0x3640>)
 8004bfe:	2101      	movs	r1, #1
 8004c00:	2002      	movs	r0, #2
 8004c02:	f7fb fd57 	bl	80006b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004c06:	483a      	ldr	r0, [pc, #232]	; (8004cf0 <menu+0x3640>)
 8004c08:	f7fb fb0c 	bl	8000224 <strlen>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	3301      	adds	r3, #1
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	4a34      	ldr	r2, [pc, #208]	; (8004ce8 <menu+0x3638>)
 8004c16:	4619      	mov	r1, r3
 8004c18:	2002      	movs	r0, #2
 8004c1a:	f7fb fd4b 	bl	80006b4 <lcd_print>
 8004c1e:	e005      	b.n	8004c2c <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004c20:	2301      	movs	r3, #1
 8004c22:	2202      	movs	r2, #2
 8004c24:	2101      	movs	r1, #1
 8004c26:	4832      	ldr	r0, [pc, #200]	; (8004cf0 <menu+0x3640>)
 8004c28:	f7fc fc9c 	bl	8001564 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	4822      	ldr	r0, [pc, #136]	; (8004cb8 <menu+0x3608>)
 8004c30:	f004 f966 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d126      	bne.n	8004c88 <menu+0x35d8>
 8004c3a:	2104      	movs	r1, #4
 8004c3c:	481e      	ldr	r0, [pc, #120]	; (8004cb8 <menu+0x3608>)
 8004c3e:	f004 f95f 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d11f      	bne.n	8004c88 <menu+0x35d8>
 8004c48:	4b1c      	ldr	r3, [pc, #112]	; (8004cbc <menu+0x360c>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f083 0301 	eor.w	r3, r3, #1
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d018      	beq.n	8004c88 <menu+0x35d8>
			takeWifiPass(0);
 8004c56:	2000      	movs	r0, #0
 8004c58:	f7fc fa4a 	bl	80010f0 <takeWifiPass>

			HAL_Delay(50);
 8004c5c:	2032      	movs	r0, #50	; 0x32
 8004c5e:	f003 fb7f 	bl	8008360 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004c62:	4a23      	ldr	r2, [pc, #140]	; (8004cf0 <menu+0x3640>)
 8004c64:	2101      	movs	r1, #1
 8004c66:	2002      	movs	r0, #2
 8004c68:	f7fb fd24 	bl	80006b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004c6c:	4820      	ldr	r0, [pc, #128]	; (8004cf0 <menu+0x3640>)
 8004c6e:	f7fb fad9 	bl	8000224 <strlen>
 8004c72:	4603      	mov	r3, r0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	3301      	adds	r3, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <menu+0x3638>)
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	2002      	movs	r0, #2
 8004c80:	f7fb fd18 	bl	80006b4 <lcd_print>

			bekle();
 8004c84:	f000 fc9c 	bl	80055c0 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004c88:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <menu+0x361c>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b23      	cmp	r3, #35	; 0x23
 8004c8e:	d155      	bne.n	8004d3c <menu+0x368c>
		if(dilSecim == 0) {
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <menu+0x3600>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d131      	bne.n	8004cfc <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004c98:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <menu+0x3644>)
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	f7fb fd09 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <menu+0x3648>)
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	2002      	movs	r0, #2
 8004ca8:	f7fb fd04 	bl	80006b4 <lcd_print>
 8004cac:	e034      	b.n	8004d18 <menu+0x3668>
 8004cae:	bf00      	nop
 8004cb0:	20000419 	.word	0x20000419
 8004cb4:	0800cf14 	.word	0x0800cf14
 8004cb8:	40010800 	.word	0x40010800
 8004cbc:	20000427 	.word	0x20000427
 8004cc0:	20000417 	.word	0x20000417
 8004cc4:	20000328 	.word	0x20000328
 8004cc8:	20000424 	.word	0x20000424
 8004ccc:	200003f8 	.word	0x200003f8
 8004cd0:	20000418 	.word	0x20000418
 8004cd4:	0800d65c 	.word	0x0800d65c
 8004cd8:	200003c0 	.word	0x200003c0
 8004cdc:	0800d670 	.word	0x0800d670
 8004ce0:	0800d678 	.word	0x0800d678
 8004ce4:	200003cc 	.word	0x200003cc
 8004ce8:	2000003c 	.word	0x2000003c
 8004cec:	0800d68c 	.word	0x0800d68c
 8004cf0:	200003e0 	.word	0x200003e0
 8004cf4:	0800d6a0 	.word	0x0800d6a0
 8004cf8:	0800d6b4 	.word	0x0800d6b4
		} else if(dilSecim == 1) {
 8004cfc:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <menu+0x3690>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d109      	bne.n	8004d18 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004d04:	4a0f      	ldr	r2, [pc, #60]	; (8004d44 <menu+0x3694>)
 8004d06:	2101      	movs	r1, #1
 8004d08:	2001      	movs	r0, #1
 8004d0a:	f7fb fcd3 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004d0e:	4a0e      	ldr	r2, [pc, #56]	; (8004d48 <menu+0x3698>)
 8004d10:	2101      	movs	r1, #1
 8004d12:	2002      	movs	r0, #2
 8004d14:	f7fb fcce 	bl	80006b4 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004d18:	2108      	movs	r1, #8
 8004d1a:	480c      	ldr	r0, [pc, #48]	; (8004d4c <menu+0x369c>)
 8004d1c:	f004 f8f0 	bl	8008f00 <HAL_GPIO_ReadPin>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10a      	bne.n	8004d3c <menu+0x368c>
			menuGiris = 0;
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <menu+0x36a0>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004d2c:	f7fb fcee 	bl	800070c <lcd_clear>
			HAL_Delay(500);
 8004d30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d34:	f003 fb14 	bl	8008360 <HAL_Delay>
			NVIC_SystemReset();
 8004d38:	f7fb fd30 	bl	800079c <__NVIC_SystemReset>
		}
	}
}
 8004d3c:	bf00      	nop
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000419 	.word	0x20000419
 8004d44:	0800d6c8 	.word	0x0800d6c8
 8004d48:	0800d6dc 	.word	0x0800d6dc
 8004d4c:	40010800 	.word	0x40010800
 8004d50:	20000415 	.word	0x20000415

08004d54 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d105      	bne.n	8004d70 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004d64:	4a22      	ldr	r2, [pc, #136]	; (8004df0 <lcdUpdate+0x9c>)
 8004d66:	2101      	movs	r1, #1
 8004d68:	2002      	movs	r0, #2
 8004d6a:	f7fb fca3 	bl	80006b4 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8004d6e:	e03b      	b.n	8004de8 <lcdUpdate+0x94>
	} else if(y==2) {
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d105      	bne.n	8004d82 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004d76:	4a1e      	ldr	r2, [pc, #120]	; (8004df0 <lcdUpdate+0x9c>)
 8004d78:	2102      	movs	r1, #2
 8004d7a:	2002      	movs	r0, #2
 8004d7c:	f7fb fc9a 	bl	80006b4 <lcd_print>
}
 8004d80:	e032      	b.n	8004de8 <lcdUpdate+0x94>
	} else if(y==3) {
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d105      	bne.n	8004d94 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004d88:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <lcdUpdate+0x9c>)
 8004d8a:	2103      	movs	r1, #3
 8004d8c:	2002      	movs	r0, #2
 8004d8e:	f7fb fc91 	bl	80006b4 <lcd_print>
}
 8004d92:	e029      	b.n	8004de8 <lcdUpdate+0x94>
	} else if(y==4) {
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d105      	bne.n	8004da6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004d9a:	4a15      	ldr	r2, [pc, #84]	; (8004df0 <lcdUpdate+0x9c>)
 8004d9c:	2104      	movs	r1, #4
 8004d9e:	2002      	movs	r0, #2
 8004da0:	f7fb fc88 	bl	80006b4 <lcd_print>
}
 8004da4:	e020      	b.n	8004de8 <lcdUpdate+0x94>
	} else if(y==5) {
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	2b05      	cmp	r3, #5
 8004daa:	d105      	bne.n	8004db8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004dac:	4a10      	ldr	r2, [pc, #64]	; (8004df0 <lcdUpdate+0x9c>)
 8004dae:	2105      	movs	r1, #5
 8004db0:	2002      	movs	r0, #2
 8004db2:	f7fb fc7f 	bl	80006b4 <lcd_print>
}
 8004db6:	e017      	b.n	8004de8 <lcdUpdate+0x94>
	} else if(y==6) {
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d105      	bne.n	8004dca <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004dbe:	4a0c      	ldr	r2, [pc, #48]	; (8004df0 <lcdUpdate+0x9c>)
 8004dc0:	2106      	movs	r1, #6
 8004dc2:	2002      	movs	r0, #2
 8004dc4:	f7fb fc76 	bl	80006b4 <lcd_print>
}
 8004dc8:	e00e      	b.n	8004de8 <lcdUpdate+0x94>
	} else if (y==7) {
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	2b07      	cmp	r3, #7
 8004dce:	d10b      	bne.n	8004de8 <lcdUpdate+0x94>
		lcd_clear();
 8004dd0:	f7fb fc9c 	bl	800070c <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004dd4:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <lcdUpdate+0xa0>)
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	2001      	movs	r0, #1
 8004dda:	f7fb fc6b 	bl	80006b4 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8004dde:	4a06      	ldr	r2, [pc, #24]	; (8004df8 <lcdUpdate+0xa4>)
 8004de0:	2101      	movs	r1, #1
 8004de2:	2002      	movs	r0, #2
 8004de4:	f7fb fc66 	bl	80006b4 <lcd_print>
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	0800cdbc 	.word	0x0800cdbc
 8004df4:	0800d6f0 	.word	0x0800d6f0
 8004df8:	0800d704 	.word	0x0800d704

08004dfc <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d11d      	bne.n	8004e48 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004e0c:	4b62      	ldr	r3, [pc, #392]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004e14:	4a61      	ldr	r2, [pc, #388]	; (8004f9c <hataKoduLcdGoster+0x1a0>)
 8004e16:	2101      	movs	r1, #1
 8004e18:	2001      	movs	r0, #1
 8004e1a:	f7fb fc4b 	bl	80006b4 <lcd_print>
 8004e1e:	e008      	b.n	8004e32 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8004e20:	4b5d      	ldr	r3, [pc, #372]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d104      	bne.n	8004e32 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004e28:	4a5d      	ldr	r2, [pc, #372]	; (8004fa0 <hataKoduLcdGoster+0x1a4>)
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	f7fb fc41 	bl	80006b4 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004e32:	4a5c      	ldr	r2, [pc, #368]	; (8004fa4 <hataKoduLcdGoster+0x1a8>)
 8004e34:	2101      	movs	r1, #1
 8004e36:	2002      	movs	r0, #2
 8004e38:	f7fb fc3c 	bl	80006b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8004e3c:	4a5a      	ldr	r2, [pc, #360]	; (8004fa8 <hataKoduLcdGoster+0x1ac>)
 8004e3e:	2107      	movs	r1, #7
 8004e40:	2002      	movs	r0, #2
 8004e42:	f7fb fc37 	bl	80006b4 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004e46:	e0a3      	b.n	8004f90 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d11d      	bne.n	8004e8a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004e4e:	4b52      	ldr	r3, [pc, #328]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d105      	bne.n	8004e62 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004e56:	4a51      	ldr	r2, [pc, #324]	; (8004f9c <hataKoduLcdGoster+0x1a0>)
 8004e58:	2101      	movs	r1, #1
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	f7fb fc2a 	bl	80006b4 <lcd_print>
 8004e60:	e008      	b.n	8004e74 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8004e62:	4b4d      	ldr	r3, [pc, #308]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d104      	bne.n	8004e74 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004e6a:	4a4d      	ldr	r2, [pc, #308]	; (8004fa0 <hataKoduLcdGoster+0x1a4>)
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	2001      	movs	r0, #1
 8004e70:	f7fb fc20 	bl	80006b4 <lcd_print>
		lcd_print(2, 2, "2");
 8004e74:	4a4d      	ldr	r2, [pc, #308]	; (8004fac <hataKoduLcdGoster+0x1b0>)
 8004e76:	2102      	movs	r1, #2
 8004e78:	2002      	movs	r0, #2
 8004e7a:	f7fb fc1b 	bl	80006b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8004e7e:	4a4a      	ldr	r2, [pc, #296]	; (8004fa8 <hataKoduLcdGoster+0x1ac>)
 8004e80:	2107      	movs	r1, #7
 8004e82:	2002      	movs	r0, #2
 8004e84:	f7fb fc16 	bl	80006b4 <lcd_print>
}
 8004e88:	e082      	b.n	8004f90 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d11d      	bne.n	8004ecc <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8004e90:	4b41      	ldr	r3, [pc, #260]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8004e98:	4a40      	ldr	r2, [pc, #256]	; (8004f9c <hataKoduLcdGoster+0x1a0>)
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	f7fb fc09 	bl	80006b4 <lcd_print>
 8004ea2:	e008      	b.n	8004eb6 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8004ea4:	4b3c      	ldr	r3, [pc, #240]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d104      	bne.n	8004eb6 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004eac:	4a3c      	ldr	r2, [pc, #240]	; (8004fa0 <hataKoduLcdGoster+0x1a4>)
 8004eae:	2101      	movs	r1, #1
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	f7fb fbff 	bl	80006b4 <lcd_print>
		lcd_print(2, 3, "3");
 8004eb6:	4a3e      	ldr	r2, [pc, #248]	; (8004fb0 <hataKoduLcdGoster+0x1b4>)
 8004eb8:	2103      	movs	r1, #3
 8004eba:	2002      	movs	r0, #2
 8004ebc:	f7fb fbfa 	bl	80006b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8004ec0:	4a39      	ldr	r2, [pc, #228]	; (8004fa8 <hataKoduLcdGoster+0x1ac>)
 8004ec2:	2107      	movs	r1, #7
 8004ec4:	2002      	movs	r0, #2
 8004ec6:	f7fb fbf5 	bl	80006b4 <lcd_print>
}
 8004eca:	e061      	b.n	8004f90 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d11d      	bne.n	8004f0e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8004ed2:	4b31      	ldr	r3, [pc, #196]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d105      	bne.n	8004ee6 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8004eda:	4a30      	ldr	r2, [pc, #192]	; (8004f9c <hataKoduLcdGoster+0x1a0>)
 8004edc:	2101      	movs	r1, #1
 8004ede:	2001      	movs	r0, #1
 8004ee0:	f7fb fbe8 	bl	80006b4 <lcd_print>
 8004ee4:	e008      	b.n	8004ef8 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8004ee6:	4b2c      	ldr	r3, [pc, #176]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d104      	bne.n	8004ef8 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004eee:	4a2c      	ldr	r2, [pc, #176]	; (8004fa0 <hataKoduLcdGoster+0x1a4>)
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f7fb fbde 	bl	80006b4 <lcd_print>
		lcd_print(2, 4, "4");
 8004ef8:	4a2e      	ldr	r2, [pc, #184]	; (8004fb4 <hataKoduLcdGoster+0x1b8>)
 8004efa:	2104      	movs	r1, #4
 8004efc:	2002      	movs	r0, #2
 8004efe:	f7fb fbd9 	bl	80006b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8004f02:	4a29      	ldr	r2, [pc, #164]	; (8004fa8 <hataKoduLcdGoster+0x1ac>)
 8004f04:	2107      	movs	r1, #7
 8004f06:	2002      	movs	r0, #2
 8004f08:	f7fb fbd4 	bl	80006b4 <lcd_print>
}
 8004f0c:	e040      	b.n	8004f90 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	2b05      	cmp	r3, #5
 8004f12:	d11d      	bne.n	8004f50 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004f14:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d105      	bne.n	8004f28 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004f1c:	4a1f      	ldr	r2, [pc, #124]	; (8004f9c <hataKoduLcdGoster+0x1a0>)
 8004f1e:	2101      	movs	r1, #1
 8004f20:	2001      	movs	r0, #1
 8004f22:	f7fb fbc7 	bl	80006b4 <lcd_print>
 8004f26:	e008      	b.n	8004f3a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8004f28:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d104      	bne.n	8004f3a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004f30:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <hataKoduLcdGoster+0x1a4>)
 8004f32:	2101      	movs	r1, #1
 8004f34:	2001      	movs	r0, #1
 8004f36:	f7fb fbbd 	bl	80006b4 <lcd_print>
		lcd_print(2, 5, "5");
 8004f3a:	4a1f      	ldr	r2, [pc, #124]	; (8004fb8 <hataKoduLcdGoster+0x1bc>)
 8004f3c:	2105      	movs	r1, #5
 8004f3e:	2002      	movs	r0, #2
 8004f40:	f7fb fbb8 	bl	80006b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <hataKoduLcdGoster+0x1ac>)
 8004f46:	2107      	movs	r1, #7
 8004f48:	2002      	movs	r0, #2
 8004f4a:	f7fb fbb3 	bl	80006b4 <lcd_print>
}
 8004f4e:	e01f      	b.n	8004f90 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	d11c      	bne.n	8004f90 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8004f5e:	4a0f      	ldr	r2, [pc, #60]	; (8004f9c <hataKoduLcdGoster+0x1a0>)
 8004f60:	2101      	movs	r1, #1
 8004f62:	2001      	movs	r0, #1
 8004f64:	f7fb fba6 	bl	80006b4 <lcd_print>
 8004f68:	e008      	b.n	8004f7c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <hataKoduLcdGoster+0x19c>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d104      	bne.n	8004f7c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004f72:	4a0b      	ldr	r2, [pc, #44]	; (8004fa0 <hataKoduLcdGoster+0x1a4>)
 8004f74:	2101      	movs	r1, #1
 8004f76:	2001      	movs	r0, #1
 8004f78:	f7fb fb9c 	bl	80006b4 <lcd_print>
		lcd_print(2, 6, "6");
 8004f7c:	4a0f      	ldr	r2, [pc, #60]	; (8004fbc <hataKoduLcdGoster+0x1c0>)
 8004f7e:	2106      	movs	r1, #6
 8004f80:	2002      	movs	r0, #2
 8004f82:	f7fb fb97 	bl	80006b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8004f86:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <hataKoduLcdGoster+0x1ac>)
 8004f88:	2107      	movs	r1, #7
 8004f8a:	2002      	movs	r0, #2
 8004f8c:	f7fb fb92 	bl	80006b4 <lcd_print>
}
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000419 	.word	0x20000419
 8004f9c:	0800d718 	.word	0x0800d718
 8004fa0:	0800d72c 	.word	0x0800d72c
 8004fa4:	0800cb00 	.word	0x0800cb00
 8004fa8:	0800d740 	.word	0x0800d740
 8004fac:	0800cb04 	.word	0x0800cb04
 8004fb0:	0800cb08 	.word	0x0800cb08
 8004fb4:	0800cb0c 	.word	0x0800cb0c
 8004fb8:	0800cb10 	.word	0x0800cb10
 8004fbc:	0800cb14 	.word	0x0800cb14

08004fc0 <eepromKontrol>:
	HAL_Delay(500);
	lcd_clear();
	HAL_Delay(500);
}

void eepromKontrol(int type) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af04      	add	r7, sp, #16
 8004fc6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004fc8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004fcc:	9302      	str	r3, [sp, #8]
 8004fce:	236e      	movs	r3, #110	; 0x6e
 8004fd0:	9301      	str	r3, [sp, #4]
 8004fd2:	4b9c      	ldr	r3, [pc, #624]	; (8005244 <eepromKontrol+0x284>)
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	236e      	movs	r3, #110	; 0x6e
 8004fd8:	2200      	movs	r2, #0
 8004fda:	21a0      	movs	r1, #160	; 0xa0
 8004fdc:	489a      	ldr	r0, [pc, #616]	; (8005248 <eepromKontrol+0x288>)
 8004fde:	f004 fb43 	bl	8009668 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8004fe2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004fe6:	f003 f9bb 	bl	8008360 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004fea:	4b96      	ldr	r3, [pc, #600]	; (8005244 <eepromKontrol+0x284>)
 8004fec:	78da      	ldrb	r2, [r3, #3]
 8004fee:	4b97      	ldr	r3, [pc, #604]	; (800524c <eepromKontrol+0x28c>)
 8004ff0:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8004ff2:	4b94      	ldr	r3, [pc, #592]	; (8005244 <eepromKontrol+0x284>)
 8004ff4:	785a      	ldrb	r2, [r3, #1]
 8004ff6:	4b96      	ldr	r3, [pc, #600]	; (8005250 <eepromKontrol+0x290>)
 8004ff8:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004ffa:	4b92      	ldr	r3, [pc, #584]	; (8005244 <eepromKontrol+0x284>)
 8004ffc:	789a      	ldrb	r2, [r3, #2]
 8004ffe:	4b95      	ldr	r3, [pc, #596]	; (8005254 <eepromKontrol+0x294>)
 8005000:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005002:	4b90      	ldr	r3, [pc, #576]	; (8005244 <eepromKontrol+0x284>)
 8005004:	791a      	ldrb	r2, [r3, #4]
 8005006:	4b94      	ldr	r3, [pc, #592]	; (8005258 <eepromKontrol+0x298>)
 8005008:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800500a:	4b8e      	ldr	r3, [pc, #568]	; (8005244 <eepromKontrol+0x284>)
 800500c:	795a      	ldrb	r2, [r3, #5]
 800500e:	4b93      	ldr	r3, [pc, #588]	; (800525c <eepromKontrol+0x29c>)
 8005010:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005012:	4b8c      	ldr	r3, [pc, #560]	; (8005244 <eepromKontrol+0x284>)
 8005014:	799a      	ldrb	r2, [r3, #6]
 8005016:	4b92      	ldr	r3, [pc, #584]	; (8005260 <eepromKontrol+0x2a0>)
 8005018:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800501a:	4b8a      	ldr	r3, [pc, #552]	; (8005244 <eepromKontrol+0x284>)
 800501c:	79da      	ldrb	r2, [r3, #7]
 800501e:	4b91      	ldr	r3, [pc, #580]	; (8005264 <eepromKontrol+0x2a4>)
 8005020:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005022:	4b88      	ldr	r3, [pc, #544]	; (8005244 <eepromKontrol+0x284>)
 8005024:	7a1a      	ldrb	r2, [r3, #8]
 8005026:	4b90      	ldr	r3, [pc, #576]	; (8005268 <eepromKontrol+0x2a8>)
 8005028:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800502a:	4b86      	ldr	r3, [pc, #536]	; (8005244 <eepromKontrol+0x284>)
 800502c:	7a5a      	ldrb	r2, [r3, #9]
 800502e:	4b8f      	ldr	r3, [pc, #572]	; (800526c <eepromKontrol+0x2ac>)
 8005030:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005032:	4b84      	ldr	r3, [pc, #528]	; (8005244 <eepromKontrol+0x284>)
 8005034:	7a9a      	ldrb	r2, [r3, #10]
 8005036:	4b8e      	ldr	r3, [pc, #568]	; (8005270 <eepromKontrol+0x2b0>)
 8005038:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 800503a:	4b82      	ldr	r3, [pc, #520]	; (8005244 <eepromKontrol+0x284>)
 800503c:	7ada      	ldrb	r2, [r3, #11]
 800503e:	4b8d      	ldr	r3, [pc, #564]	; (8005274 <eepromKontrol+0x2b4>)
 8005040:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005042:	4b80      	ldr	r3, [pc, #512]	; (8005244 <eepromKontrol+0x284>)
 8005044:	7b1a      	ldrb	r2, [r3, #12]
 8005046:	4b8c      	ldr	r3, [pc, #560]	; (8005278 <eepromKontrol+0x2b8>)
 8005048:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 800504a:	4b7e      	ldr	r3, [pc, #504]	; (8005244 <eepromKontrol+0x284>)
 800504c:	7b5a      	ldrb	r2, [r3, #13]
 800504e:	4b8b      	ldr	r3, [pc, #556]	; (800527c <eepromKontrol+0x2bc>)
 8005050:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005052:	4b7c      	ldr	r3, [pc, #496]	; (8005244 <eepromKontrol+0x284>)
 8005054:	7b9a      	ldrb	r2, [r3, #14]
 8005056:	4b8a      	ldr	r3, [pc, #552]	; (8005280 <eepromKontrol+0x2c0>)
 8005058:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 800505a:	4b7a      	ldr	r3, [pc, #488]	; (8005244 <eepromKontrol+0x284>)
 800505c:	7bda      	ldrb	r2, [r3, #15]
 800505e:	4b89      	ldr	r3, [pc, #548]	; (8005284 <eepromKontrol+0x2c4>)
 8005060:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005062:	4b78      	ldr	r3, [pc, #480]	; (8005244 <eepromKontrol+0x284>)
 8005064:	7c1a      	ldrb	r2, [r3, #16]
 8005066:	4b88      	ldr	r3, [pc, #544]	; (8005288 <eepromKontrol+0x2c8>)
 8005068:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 800506a:	4b76      	ldr	r3, [pc, #472]	; (8005244 <eepromKontrol+0x284>)
 800506c:	7c5a      	ldrb	r2, [r3, #17]
 800506e:	4b87      	ldr	r3, [pc, #540]	; (800528c <eepromKontrol+0x2cc>)
 8005070:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005072:	4b74      	ldr	r3, [pc, #464]	; (8005244 <eepromKontrol+0x284>)
 8005074:	7c9a      	ldrb	r2, [r3, #18]
 8005076:	4b86      	ldr	r3, [pc, #536]	; (8005290 <eepromKontrol+0x2d0>)
 8005078:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 800507a:	4b72      	ldr	r3, [pc, #456]	; (8005244 <eepromKontrol+0x284>)
 800507c:	7cda      	ldrb	r2, [r3, #19]
 800507e:	4b85      	ldr	r3, [pc, #532]	; (8005294 <eepromKontrol+0x2d4>)
 8005080:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005082:	4b70      	ldr	r3, [pc, #448]	; (8005244 <eepromKontrol+0x284>)
 8005084:	7d1a      	ldrb	r2, [r3, #20]
 8005086:	4b84      	ldr	r3, [pc, #528]	; (8005298 <eepromKontrol+0x2d8>)
 8005088:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 800508a:	4b6e      	ldr	r3, [pc, #440]	; (8005244 <eepromKontrol+0x284>)
 800508c:	7d5a      	ldrb	r2, [r3, #21]
 800508e:	4b83      	ldr	r3, [pc, #524]	; (800529c <eepromKontrol+0x2dc>)
 8005090:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005092:	4b6c      	ldr	r3, [pc, #432]	; (8005244 <eepromKontrol+0x284>)
 8005094:	7d9a      	ldrb	r2, [r3, #22]
 8005096:	4b82      	ldr	r3, [pc, #520]	; (80052a0 <eepromKontrol+0x2e0>)
 8005098:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800509a:	4b6a      	ldr	r3, [pc, #424]	; (8005244 <eepromKontrol+0x284>)
 800509c:	7dda      	ldrb	r2, [r3, #23]
 800509e:	4b81      	ldr	r3, [pc, #516]	; (80052a4 <eepromKontrol+0x2e4>)
 80050a0:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80050a2:	4b68      	ldr	r3, [pc, #416]	; (8005244 <eepromKontrol+0x284>)
 80050a4:	7e1a      	ldrb	r2, [r3, #24]
 80050a6:	4b80      	ldr	r3, [pc, #512]	; (80052a8 <eepromKontrol+0x2e8>)
 80050a8:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80050aa:	4b66      	ldr	r3, [pc, #408]	; (8005244 <eepromKontrol+0x284>)
 80050ac:	7e5a      	ldrb	r2, [r3, #25]
 80050ae:	4b7f      	ldr	r3, [pc, #508]	; (80052ac <eepromKontrol+0x2ec>)
 80050b0:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80050b2:	4b64      	ldr	r3, [pc, #400]	; (8005244 <eepromKontrol+0x284>)
 80050b4:	7e9a      	ldrb	r2, [r3, #26]
 80050b6:	4b7e      	ldr	r3, [pc, #504]	; (80052b0 <eepromKontrol+0x2f0>)
 80050b8:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80050ba:	4b62      	ldr	r3, [pc, #392]	; (8005244 <eepromKontrol+0x284>)
 80050bc:	7eda      	ldrb	r2, [r3, #27]
 80050be:	4b7d      	ldr	r3, [pc, #500]	; (80052b4 <eepromKontrol+0x2f4>)
 80050c0:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80050c2:	4b60      	ldr	r3, [pc, #384]	; (8005244 <eepromKontrol+0x284>)
 80050c4:	7f1a      	ldrb	r2, [r3, #28]
 80050c6:	4b7c      	ldr	r3, [pc, #496]	; (80052b8 <eepromKontrol+0x2f8>)
 80050c8:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 80050ca:	4b5e      	ldr	r3, [pc, #376]	; (8005244 <eepromKontrol+0x284>)
 80050cc:	7f5a      	ldrb	r2, [r3, #29]
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <eepromKontrol+0x2fc>)
 80050d0:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 80050d2:	4b5c      	ldr	r3, [pc, #368]	; (8005244 <eepromKontrol+0x284>)
 80050d4:	7f9a      	ldrb	r2, [r3, #30]
 80050d6:	4b7a      	ldr	r3, [pc, #488]	; (80052c0 <eepromKontrol+0x300>)
 80050d8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 80050da:	4b5a      	ldr	r3, [pc, #360]	; (8005244 <eepromKontrol+0x284>)
 80050dc:	7fda      	ldrb	r2, [r3, #31]
 80050de:	4b79      	ldr	r3, [pc, #484]	; (80052c4 <eepromKontrol+0x304>)
 80050e0:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 80050e2:	4b58      	ldr	r3, [pc, #352]	; (8005244 <eepromKontrol+0x284>)
 80050e4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80050e8:	4b77      	ldr	r3, [pc, #476]	; (80052c8 <eepromKontrol+0x308>)
 80050ea:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 80050ec:	4b55      	ldr	r3, [pc, #340]	; (8005244 <eepromKontrol+0x284>)
 80050ee:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80050f2:	4b76      	ldr	r3, [pc, #472]	; (80052cc <eepromKontrol+0x30c>)
 80050f4:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 80050f6:	4b53      	ldr	r3, [pc, #332]	; (8005244 <eepromKontrol+0x284>)
 80050f8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80050fc:	4b74      	ldr	r3, [pc, #464]	; (80052d0 <eepromKontrol+0x310>)
 80050fe:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005100:	4b50      	ldr	r3, [pc, #320]	; (8005244 <eepromKontrol+0x284>)
 8005102:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005106:	4b73      	ldr	r3, [pc, #460]	; (80052d4 <eepromKontrol+0x314>)
 8005108:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800510a:	4b4e      	ldr	r3, [pc, #312]	; (8005244 <eepromKontrol+0x284>)
 800510c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005110:	4b71      	ldr	r3, [pc, #452]	; (80052d8 <eepromKontrol+0x318>)
 8005112:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005114:	4b4b      	ldr	r3, [pc, #300]	; (8005244 <eepromKontrol+0x284>)
 8005116:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800511a:	4b70      	ldr	r3, [pc, #448]	; (80052dc <eepromKontrol+0x31c>)
 800511c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800511e:	4b49      	ldr	r3, [pc, #292]	; (8005244 <eepromKontrol+0x284>)
 8005120:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005124:	4b6e      	ldr	r3, [pc, #440]	; (80052e0 <eepromKontrol+0x320>)
 8005126:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005128:	4b46      	ldr	r3, [pc, #280]	; (8005244 <eepromKontrol+0x284>)
 800512a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800512e:	4b6d      	ldr	r3, [pc, #436]	; (80052e4 <eepromKontrol+0x324>)
 8005130:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005132:	4b44      	ldr	r3, [pc, #272]	; (8005244 <eepromKontrol+0x284>)
 8005134:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005138:	4b6b      	ldr	r3, [pc, #428]	; (80052e8 <eepromKontrol+0x328>)
 800513a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800513c:	4b41      	ldr	r3, [pc, #260]	; (8005244 <eepromKontrol+0x284>)
 800513e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005142:	4b6a      	ldr	r3, [pc, #424]	; (80052ec <eepromKontrol+0x32c>)
 8005144:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005146:	4b3f      	ldr	r3, [pc, #252]	; (8005244 <eepromKontrol+0x284>)
 8005148:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800514c:	4b68      	ldr	r3, [pc, #416]	; (80052f0 <eepromKontrol+0x330>)
 800514e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005150:	4b3c      	ldr	r3, [pc, #240]	; (8005244 <eepromKontrol+0x284>)
 8005152:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005156:	4b67      	ldr	r3, [pc, #412]	; (80052f4 <eepromKontrol+0x334>)
 8005158:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 800515a:	4b3a      	ldr	r3, [pc, #232]	; (8005244 <eepromKontrol+0x284>)
 800515c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005160:	4b65      	ldr	r3, [pc, #404]	; (80052f8 <eepromKontrol+0x338>)
 8005162:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005164:	4b37      	ldr	r3, [pc, #220]	; (8005244 <eepromKontrol+0x284>)
 8005166:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800516a:	4b64      	ldr	r3, [pc, #400]	; (80052fc <eepromKontrol+0x33c>)
 800516c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 800516e:	4b35      	ldr	r3, [pc, #212]	; (8005244 <eepromKontrol+0x284>)
 8005170:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005174:	4b62      	ldr	r3, [pc, #392]	; (8005300 <eepromKontrol+0x340>)
 8005176:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005178:	4b32      	ldr	r3, [pc, #200]	; (8005244 <eepromKontrol+0x284>)
 800517a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800517e:	4b61      	ldr	r3, [pc, #388]	; (8005304 <eepromKontrol+0x344>)
 8005180:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 8005182:	4b51      	ldr	r3, [pc, #324]	; (80052c8 <eepromKontrol+0x308>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b09      	cmp	r3, #9
 8005188:	d902      	bls.n	8005190 <eepromKontrol+0x1d0>
	    calismaSayisi10000=0;
 800518a:	4b4f      	ldr	r3, [pc, #316]	; (80052c8 <eepromKontrol+0x308>)
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005190:	4b4c      	ldr	r3, [pc, #304]	; (80052c4 <eepromKontrol+0x304>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b09      	cmp	r3, #9
 8005196:	d902      	bls.n	800519e <eepromKontrol+0x1de>
	    calismaSayisi1000=0;
 8005198:	4b4a      	ldr	r3, [pc, #296]	; (80052c4 <eepromKontrol+0x304>)
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800519e:	4b48      	ldr	r3, [pc, #288]	; (80052c0 <eepromKontrol+0x300>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b09      	cmp	r3, #9
 80051a4:	d902      	bls.n	80051ac <eepromKontrol+0x1ec>
	    calismaSayisi100=0;
 80051a6:	4b46      	ldr	r3, [pc, #280]	; (80052c0 <eepromKontrol+0x300>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 80051ac:	4b43      	ldr	r3, [pc, #268]	; (80052bc <eepromKontrol+0x2fc>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b09      	cmp	r3, #9
 80051b2:	d902      	bls.n	80051ba <eepromKontrol+0x1fa>
	    calismaSayisi10=0;
 80051b4:	4b41      	ldr	r3, [pc, #260]	; (80052bc <eepromKontrol+0x2fc>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80051ba:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <eepromKontrol+0x2f8>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b09      	cmp	r3, #9
 80051c0:	d902      	bls.n	80051c8 <eepromKontrol+0x208>
	    calismaSayisi1=0;
 80051c2:	4b3d      	ldr	r3, [pc, #244]	; (80052b8 <eepromKontrol+0x2f8>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80051c8:	4b21      	ldr	r3, [pc, #132]	; (8005250 <eepromKontrol+0x290>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d902      	bls.n	80051d6 <eepromKontrol+0x216>
	    calismaSekli=0;
 80051d0:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <eepromKontrol+0x290>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80051d6:	4b1f      	ldr	r3, [pc, #124]	; (8005254 <eepromKontrol+0x294>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d902      	bls.n	80051e4 <eepromKontrol+0x224>
	    emniyetCercevesi=1;
 80051de:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <eepromKontrol+0x294>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80051e4:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <eepromKontrol+0x298>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d902      	bls.n	80051f2 <eepromKontrol+0x232>
	    yavaslamaLimit=0;
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <eepromKontrol+0x298>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80051f2:	4b1a      	ldr	r3, [pc, #104]	; (800525c <eepromKontrol+0x29c>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d902      	bls.n	8005200 <eepromKontrol+0x240>
	    altLimit=1;
 80051fa:	4b18      	ldr	r3, [pc, #96]	; (800525c <eepromKontrol+0x29c>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005200:	4b17      	ldr	r3, [pc, #92]	; (8005260 <eepromKontrol+0x2a0>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d902      	bls.n	800520e <eepromKontrol+0x24e>
	    basincSalteri=1;
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <eepromKontrol+0x2a0>)
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <eepromKontrol+0x2a4>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b03      	cmp	r3, #3
 8005214:	d902      	bls.n	800521c <eepromKontrol+0x25c>
	    kapiSecimleri=3;
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <eepromKontrol+0x2a4>)
 8005218:	2203      	movs	r2, #3
 800521a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800521c:	4b2f      	ldr	r3, [pc, #188]	; (80052dc <eepromKontrol+0x31c>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d902      	bls.n	800522a <eepromKontrol+0x26a>
	    kapiAcTipi=0;
 8005224:	4b2d      	ldr	r3, [pc, #180]	; (80052dc <eepromKontrol+0x31c>)
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800522a:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <eepromKontrol+0x2a8>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d902      	bls.n	8005238 <eepromKontrol+0x278>
	    kapi1Tip=1;
 8005232:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <eepromKontrol+0x2a8>)
 8005234:	2201      	movs	r2, #1
 8005236:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <eepromKontrol+0x2ac>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b05      	cmp	r3, #5
 800523e:	d966      	bls.n	800530e <eepromKontrol+0x34e>
 8005240:	e062      	b.n	8005308 <eepromKontrol+0x348>
 8005242:	bf00      	nop
 8005244:	20000328 	.word	0x20000328
 8005248:	20000244 	.word	0x20000244
 800524c:	20000396 	.word	0x20000396
 8005250:	200003f9 	.word	0x200003f9
 8005254:	200003fc 	.word	0x200003fc
 8005258:	200003fd 	.word	0x200003fd
 800525c:	200003fe 	.word	0x200003fe
 8005260:	200003ff 	.word	0x200003ff
 8005264:	20000400 	.word	0x20000400
 8005268:	20000401 	.word	0x20000401
 800526c:	20000411 	.word	0x20000411
 8005270:	20000402 	.word	0x20000402
 8005274:	20000412 	.word	0x20000412
 8005278:	20000403 	.word	0x20000403
 800527c:	20000413 	.word	0x20000413
 8005280:	20000406 	.word	0x20000406
 8005284:	20000407 	.word	0x20000407
 8005288:	20000408 	.word	0x20000408
 800528c:	20000409 	.word	0x20000409
 8005290:	2000040a 	.word	0x2000040a
 8005294:	2000040b 	.word	0x2000040b
 8005298:	2000040c 	.word	0x2000040c
 800529c:	2000040d 	.word	0x2000040d
 80052a0:	2000040e 	.word	0x2000040e
 80052a4:	2000040f 	.word	0x2000040f
 80052a8:	20000410 	.word	0x20000410
 80052ac:	20000414 	.word	0x20000414
 80052b0:	20000416 	.word	0x20000416
 80052b4:	200003f4 	.word	0x200003f4
 80052b8:	200003f5 	.word	0x200003f5
 80052bc:	200003f6 	.word	0x200003f6
 80052c0:	200000a4 	.word	0x200000a4
 80052c4:	200000a5 	.word	0x200000a5
 80052c8:	200003f7 	.word	0x200003f7
 80052cc:	20000419 	.word	0x20000419
 80052d0:	20000417 	.word	0x20000417
 80052d4:	20000405 	.word	0x20000405
 80052d8:	20000418 	.word	0x20000418
 80052dc:	20000404 	.word	0x20000404
 80052e0:	2000041a 	.word	0x2000041a
 80052e4:	2000041b 	.word	0x2000041b
 80052e8:	2000041c 	.word	0x2000041c
 80052ec:	2000041d 	.word	0x2000041d
 80052f0:	2000041e 	.word	0x2000041e
 80052f4:	2000041f 	.word	0x2000041f
 80052f8:	20000420 	.word	0x20000420
 80052fc:	20000421 	.word	0x20000421
 8005300:	20000422 	.word	0x20000422
 8005304:	20000423 	.word	0x20000423
	    kapi1AcSure=5;
 8005308:	4b56      	ldr	r3, [pc, #344]	; (8005464 <eepromKontrol+0x4a4>)
 800530a:	2205      	movs	r2, #5
 800530c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800530e:	4b56      	ldr	r3, [pc, #344]	; (8005468 <eepromKontrol+0x4a8>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d902      	bls.n	800531c <eepromKontrol+0x35c>
	    kapi2Tip=1;
 8005316:	4b54      	ldr	r3, [pc, #336]	; (8005468 <eepromKontrol+0x4a8>)
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800531c:	4b53      	ldr	r3, [pc, #332]	; (800546c <eepromKontrol+0x4ac>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b05      	cmp	r3, #5
 8005322:	d902      	bls.n	800532a <eepromKontrol+0x36a>
	    kapi2AcSure=5;
 8005324:	4b51      	ldr	r3, [pc, #324]	; (800546c <eepromKontrol+0x4ac>)
 8005326:	2205      	movs	r2, #5
 8005328:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800532a:	4b51      	ldr	r3, [pc, #324]	; (8005470 <eepromKontrol+0x4b0>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d902      	bls.n	8005338 <eepromKontrol+0x378>
	    kapitablaTip=1;
 8005332:	4b4f      	ldr	r3, [pc, #316]	; (8005470 <eepromKontrol+0x4b0>)
 8005334:	2201      	movs	r2, #1
 8005336:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005338:	4b4e      	ldr	r3, [pc, #312]	; (8005474 <eepromKontrol+0x4b4>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d902      	bls.n	8005346 <eepromKontrol+0x386>
	    kapiTablaAcKonum=2;
 8005340:	4b4c      	ldr	r3, [pc, #304]	; (8005474 <eepromKontrol+0x4b4>)
 8005342:	2202      	movs	r2, #2
 8005344:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005346:	4b4c      	ldr	r3, [pc, #304]	; (8005478 <eepromKontrol+0x4b8>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b05      	cmp	r3, #5
 800534c:	d902      	bls.n	8005354 <eepromKontrol+0x394>
	    kapiTablaAcSure=5;
 800534e:	4b4a      	ldr	r3, [pc, #296]	; (8005478 <eepromKontrol+0x4b8>)
 8005350:	2205      	movs	r2, #5
 8005352:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005354:	4b49      	ldr	r3, [pc, #292]	; (800547c <eepromKontrol+0x4bc>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d902      	bls.n	8005362 <eepromKontrol+0x3a2>
	    yukariYavasLimit=0;
 800535c:	4b47      	ldr	r3, [pc, #284]	; (800547c <eepromKontrol+0x4bc>)
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <eepromKontrol+0x4c0>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d902      	bls.n	8005370 <eepromKontrol+0x3b0>
	    devirmeYuruyusSecim=0;
 800536a:	4b45      	ldr	r3, [pc, #276]	; (8005480 <eepromKontrol+0x4c0>)
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005370:	4b44      	ldr	r3, [pc, #272]	; (8005484 <eepromKontrol+0x4c4>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d902      	bls.n	800537e <eepromKontrol+0x3be>
	    devirmeYukariIleriLimit=1;
 8005378:	4b42      	ldr	r3, [pc, #264]	; (8005484 <eepromKontrol+0x4c4>)
 800537a:	2201      	movs	r2, #1
 800537c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800537e:	4b42      	ldr	r3, [pc, #264]	; (8005488 <eepromKontrol+0x4c8>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d902      	bls.n	800538c <eepromKontrol+0x3cc>
	    devirmeAsagiGeriLimit=1;
 8005386:	4b40      	ldr	r3, [pc, #256]	; (8005488 <eepromKontrol+0x4c8>)
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800538c:	4b3f      	ldr	r3, [pc, #252]	; (800548c <eepromKontrol+0x4cc>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d902      	bls.n	800539a <eepromKontrol+0x3da>
	    devirmeSilindirTipi=0;
 8005394:	4b3d      	ldr	r3, [pc, #244]	; (800548c <eepromKontrol+0x4cc>)
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800539a:	4b3d      	ldr	r3, [pc, #244]	; (8005490 <eepromKontrol+0x4d0>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d902      	bls.n	80053a8 <eepromKontrol+0x3e8>
	    platformSilindirTipi=0;
 80053a2:	4b3b      	ldr	r3, [pc, #236]	; (8005490 <eepromKontrol+0x4d0>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80053a8:	4b3a      	ldr	r3, [pc, #232]	; (8005494 <eepromKontrol+0x4d4>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b05      	cmp	r3, #5
 80053ae:	d902      	bls.n	80053b6 <eepromKontrol+0x3f6>
	    yukariValfTmr=0;
 80053b0:	4b38      	ldr	r3, [pc, #224]	; (8005494 <eepromKontrol+0x4d4>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80053b6:	4b38      	ldr	r3, [pc, #224]	; (8005498 <eepromKontrol+0x4d8>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d902      	bls.n	80053c4 <eepromKontrol+0x404>
	    asagiValfTmr=0;
 80053be:	4b36      	ldr	r3, [pc, #216]	; (8005498 <eepromKontrol+0x4d8>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80053c4:	4b35      	ldr	r3, [pc, #212]	; (800549c <eepromKontrol+0x4dc>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b05      	cmp	r3, #5
 80053ca:	d902      	bls.n	80053d2 <eepromKontrol+0x412>
	    devirmeYukariIleriTmr=0;
 80053cc:	4b33      	ldr	r3, [pc, #204]	; (800549c <eepromKontrol+0x4dc>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80053d2:	4b33      	ldr	r3, [pc, #204]	; (80054a0 <eepromKontrol+0x4e0>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d902      	bls.n	80053e0 <eepromKontrol+0x420>
	    devirmeAsagiGeriTmr=0;
 80053da:	4b31      	ldr	r3, [pc, #196]	; (80054a0 <eepromKontrol+0x4e0>)
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80053e0:	4b30      	ldr	r3, [pc, #192]	; (80054a4 <eepromKontrol+0x4e4>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2bb4      	cmp	r3, #180	; 0xb4
 80053e6:	d902      	bls.n	80053ee <eepromKontrol+0x42e>
	    makineCalismaTmr=60;
 80053e8:	4b2e      	ldr	r3, [pc, #184]	; (80054a4 <eepromKontrol+0x4e4>)
 80053ea:	223c      	movs	r2, #60	; 0x3c
 80053ec:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80053ee:	4b2e      	ldr	r3, [pc, #184]	; (80054a8 <eepromKontrol+0x4e8>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d902      	bls.n	80053fc <eepromKontrol+0x43c>
	    buzzer=0;
 80053f6:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <eepromKontrol+0x4e8>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80053fc:	4b2b      	ldr	r3, [pc, #172]	; (80054ac <eepromKontrol+0x4ec>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d902      	bls.n	800540a <eepromKontrol+0x44a>
	    demoMode=0;
 8005404:	4b29      	ldr	r3, [pc, #164]	; (80054ac <eepromKontrol+0x4ec>)
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800540a:	4b29      	ldr	r3, [pc, #164]	; (80054b0 <eepromKontrol+0x4f0>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d902      	bls.n	8005418 <eepromKontrol+0x458>
	    calismaSayModu=0;
 8005412:	4b27      	ldr	r3, [pc, #156]	; (80054b0 <eepromKontrol+0x4f0>)
 8005414:	2200      	movs	r2, #0
 8005416:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005418:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <eepromKontrol+0x4f4>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d902      	bls.n	8005426 <eepromKontrol+0x466>
	    dilSecim=0;
 8005420:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <eepromKontrol+0x4f4>)
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005426:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <eepromKontrol+0x4f8>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d902      	bls.n	8005434 <eepromKontrol+0x474>
		iotMode=0;
 800542e:	4b22      	ldr	r3, [pc, #136]	; (80054b8 <eepromKontrol+0x4f8>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8005434:	4b21      	ldr	r3, [pc, #132]	; (80054bc <eepromKontrol+0x4fc>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	4b21      	ldr	r3, [pc, #132]	; (80054c0 <eepromKontrol+0x500>)
 800543c:	441a      	add	r2, r3
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <eepromKontrol+0x504>)
 8005440:	6810      	ldr	r0, [r2, #0]
 8005442:	6851      	ldr	r1, [r2, #4]
 8005444:	6892      	ldr	r2, [r2, #8]
 8005446:	c307      	stmia	r3!, {r0, r1, r2}
	readValFromEEPROM(1); //SSID Okuma
 8005448:	2001      	movs	r0, #1
 800544a:	f7fc f83d 	bl	80014c8 <readValFromEEPROM>
	HAL_Delay(250);
 800544e:	20fa      	movs	r0, #250	; 0xfa
 8005450:	f002 ff86 	bl	8008360 <HAL_Delay>
	readValFromEEPROM(2); //Pass Okuma
 8005454:	2002      	movs	r0, #2
 8005456:	f7fc f837 	bl	80014c8 <readValFromEEPROM>
	//readWiFiCredentialsFromEEPROM(wifiSSID, wifiPass);
}
 800545a:	bf00      	nop
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000411 	.word	0x20000411
 8005468:	20000402 	.word	0x20000402
 800546c:	20000412 	.word	0x20000412
 8005470:	20000403 	.word	0x20000403
 8005474:	20000405 	.word	0x20000405
 8005478:	20000413 	.word	0x20000413
 800547c:	20000406 	.word	0x20000406
 8005480:	20000407 	.word	0x20000407
 8005484:	20000408 	.word	0x20000408
 8005488:	20000409 	.word	0x20000409
 800548c:	2000040a 	.word	0x2000040a
 8005490:	2000040b 	.word	0x2000040b
 8005494:	2000040c 	.word	0x2000040c
 8005498:	2000040d 	.word	0x2000040d
 800549c:	2000040e 	.word	0x2000040e
 80054a0:	2000040f 	.word	0x2000040f
 80054a4:	20000410 	.word	0x20000410
 80054a8:	20000414 	.word	0x20000414
 80054ac:	20000416 	.word	0x20000416
 80054b0:	20000418 	.word	0x20000418
 80054b4:	20000419 	.word	0x20000419
 80054b8:	20000417 	.word	0x20000417
 80054bc:	200000a1 	.word	0x200000a1
 80054c0:	20000328 	.word	0x20000328
 80054c4:	200003c0 	.word	0x200003c0

080054c8 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 80054c8:	b590      	push	{r4, r7, lr}
 80054ca:	b089      	sub	sp, #36	; 0x24
 80054cc:	af04      	add	r7, sp, #16
 80054ce:	4603      	mov	r3, r0
 80054d0:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80054d2:	4b26      	ldr	r3, [pc, #152]	; (800556c <hata2EEPROM+0xa4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	1e5a      	subs	r2, r3, #1
 80054d8:	4b25      	ldr	r3, [pc, #148]	; (8005570 <hata2EEPROM+0xa8>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4413      	add	r3, r2
 80054de:	4a25      	ldr	r2, [pc, #148]	; (8005574 <hata2EEPROM+0xac>)
 80054e0:	5cd3      	ldrb	r3, [r2, r3]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80054e6:	f000 f849 	bl	800557c <eepromDataFillWithEmpty>
		goto veriEkleme;
 80054ea:	e000      	b.n	80054ee <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80054ec:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	e012      	b.n	800551a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80054f4:	4b1e      	ldr	r3, [pc, #120]	; (8005570 <hata2EEPROM+0xa8>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <hata2EEPROM+0xac>)
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d107      	bne.n	8005514 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <hata2EEPROM+0xa8>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	4919      	ldr	r1, [pc, #100]	; (8005574 <hata2EEPROM+0xac>)
 800550e:	79fa      	ldrb	r2, [r7, #7]
 8005510:	54ca      	strb	r2, [r1, r3]
					break;
 8005512:	e007      	b.n	8005524 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3301      	adds	r3, #1
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	4b14      	ldr	r3, [pc, #80]	; (800556c <hata2EEPROM+0xa4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	429a      	cmp	r2, r3
 8005522:	dbe7      	blt.n	80054f4 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8005524:	4b12      	ldr	r3, [pc, #72]	; (8005570 <hata2EEPROM+0xa8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	b299      	uxth	r1, r3
 800552a:	4b10      	ldr	r3, [pc, #64]	; (800556c <hata2EEPROM+0xa4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	b298      	uxth	r0, r3
 8005530:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <hata2EEPROM+0xa8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a0f      	ldr	r2, [pc, #60]	; (8005574 <hata2EEPROM+0xac>)
 8005536:	4413      	add	r3, r2
 8005538:	4a0c      	ldr	r2, [pc, #48]	; (800556c <hata2EEPROM+0xa4>)
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	b292      	uxth	r2, r2
 800553e:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005542:	9402      	str	r4, [sp, #8]
 8005544:	9201      	str	r2, [sp, #4]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	4603      	mov	r3, r0
 800554a:	460a      	mov	r2, r1
 800554c:	21a0      	movs	r1, #160	; 0xa0
 800554e:	480a      	ldr	r0, [pc, #40]	; (8005578 <hata2EEPROM+0xb0>)
 8005550:	f003 ff90 	bl	8009474 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005558:	f002 ff02 	bl	8008360 <HAL_Delay>
	eepromKontrol(1);
 800555c:	2001      	movs	r0, #1
 800555e:	f7ff fd2f 	bl	8004fc0 <eepromKontrol>
}
 8005562:	bf00      	nop
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bd90      	pop	{r4, r7, pc}
 800556a:	bf00      	nop
 800556c:	20000028 	.word	0x20000028
 8005570:	2000002c 	.word	0x2000002c
 8005574:	20000328 	.word	0x20000328
 8005578:	20000244 	.word	0x20000244

0800557c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005582:	2300      	movs	r3, #0
 8005584:	607b      	str	r3, [r7, #4]
 8005586:	e009      	b.n	800559c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005588:	4a0a      	ldr	r2, [pc, #40]	; (80055b4 <eepromDataFillWithEmpty+0x38>)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005590:	4a09      	ldr	r2, [pc, #36]	; (80055b8 <eepromDataFillWithEmpty+0x3c>)
 8005592:	2100      	movs	r1, #0
 8005594:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3301      	adds	r3, #1
 800559a:	607b      	str	r3, [r7, #4]
 800559c:	4b07      	ldr	r3, [pc, #28]	; (80055bc <eepromDataFillWithEmpty+0x40>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	dbf0      	blt.n	8005588 <eepromDataFillWithEmpty+0xc>
	}
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000000 	.word	0x20000000
 80055b8:	20000328 	.word	0x20000328
 80055bc:	20000028 	.word	0x20000028

080055c0 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
	timer1=millis;
 80055c4:	4b47      	ldr	r3, [pc, #284]	; (80056e4 <bekle+0x124>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a47      	ldr	r2, [pc, #284]	; (80056e8 <bekle+0x128>)
 80055ca:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80055cc:	e002      	b.n	80055d4 <bekle+0x14>
    	butonKontrol = 1;
 80055ce:	4b47      	ldr	r3, [pc, #284]	; (80056ec <bekle+0x12c>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80055d4:	2101      	movs	r1, #1
 80055d6:	4846      	ldr	r0, [pc, #280]	; (80056f0 <bekle+0x130>)
 80055d8:	f003 fc92 	bl	8008f00 <HAL_GPIO_ReadPin>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d109      	bne.n	80055f6 <bekle+0x36>
 80055e2:	4b40      	ldr	r3, [pc, #256]	; (80056e4 <bekle+0x124>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4b40      	ldr	r3, [pc, #256]	; (80056e8 <bekle+0x128>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d0ef      	beq.n	80055ce <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80055ee:	e002      	b.n	80055f6 <bekle+0x36>
    	butonKontrol = 1;
 80055f0:	4b3e      	ldr	r3, [pc, #248]	; (80056ec <bekle+0x12c>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80055f6:	2108      	movs	r1, #8
 80055f8:	483e      	ldr	r0, [pc, #248]	; (80056f4 <bekle+0x134>)
 80055fa:	f003 fc81 	bl	8008f00 <HAL_GPIO_ReadPin>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b01      	cmp	r3, #1
 8005602:	d109      	bne.n	8005618 <bekle+0x58>
 8005604:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <bekle+0x124>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4b37      	ldr	r3, [pc, #220]	; (80056e8 <bekle+0x128>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d0ef      	beq.n	80055f0 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005610:	e002      	b.n	8005618 <bekle+0x58>
    	butonKontrol = 1;
 8005612:	4b36      	ldr	r3, [pc, #216]	; (80056ec <bekle+0x12c>)
 8005614:	2201      	movs	r2, #1
 8005616:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005618:	2102      	movs	r1, #2
 800561a:	4835      	ldr	r0, [pc, #212]	; (80056f0 <bekle+0x130>)
 800561c:	f003 fc70 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005620:	4603      	mov	r3, r0
 8005622:	2b01      	cmp	r3, #1
 8005624:	d109      	bne.n	800563a <bekle+0x7a>
 8005626:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <bekle+0x124>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <bekle+0x128>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d0ef      	beq.n	8005612 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005632:	e002      	b.n	800563a <bekle+0x7a>
    	butonKontrol = 1;
 8005634:	4b2d      	ldr	r3, [pc, #180]	; (80056ec <bekle+0x12c>)
 8005636:	2201      	movs	r2, #1
 8005638:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800563a:	2104      	movs	r1, #4
 800563c:	482c      	ldr	r0, [pc, #176]	; (80056f0 <bekle+0x130>)
 800563e:	f003 fc5f 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d109      	bne.n	800565c <bekle+0x9c>
 8005648:	4b26      	ldr	r3, [pc, #152]	; (80056e4 <bekle+0x124>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <bekle+0x128>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d0ef      	beq.n	8005634 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005654:	e002      	b.n	800565c <bekle+0x9c>
    	butonKontrol = 1;
 8005656:	4b25      	ldr	r3, [pc, #148]	; (80056ec <bekle+0x12c>)
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800565c:	2108      	movs	r1, #8
 800565e:	4824      	ldr	r0, [pc, #144]	; (80056f0 <bekle+0x130>)
 8005660:	f003 fc4e 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005664:	4603      	mov	r3, r0
 8005666:	2b01      	cmp	r3, #1
 8005668:	d109      	bne.n	800567e <bekle+0xbe>
 800566a:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <bekle+0x124>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <bekle+0x128>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d0ef      	beq.n	8005656 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005676:	e002      	b.n	800567e <bekle+0xbe>
    	butonKontrol = 1;
 8005678:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <bekle+0x12c>)
 800567a:	2201      	movs	r2, #1
 800567c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	481c      	ldr	r0, [pc, #112]	; (80056f4 <bekle+0x134>)
 8005682:	f003 fc3d 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <bekle+0xe0>
 800568c:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <bekle+0x124>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <bekle+0x128>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d0ef      	beq.n	8005678 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005698:	e002      	b.n	80056a0 <bekle+0xe0>
    	butonKontrol = 1;
 800569a:	4b14      	ldr	r3, [pc, #80]	; (80056ec <bekle+0x12c>)
 800569c:	2201      	movs	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80056a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056a4:	4813      	ldr	r0, [pc, #76]	; (80056f4 <bekle+0x134>)
 80056a6:	f003 fc2b 	bl	8008f00 <HAL_GPIO_ReadPin>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <bekle+0x104>
 80056b0:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <bekle+0x124>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <bekle+0x128>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d0ee      	beq.n	800569a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80056bc:	e002      	b.n	80056c4 <bekle+0x104>
    	butonKontrol = 1;
 80056be:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <bekle+0x12c>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80056c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056c8:	480a      	ldr	r0, [pc, #40]	; (80056f4 <bekle+0x134>)
 80056ca:	f003 fc19 	bl	8008f00 <HAL_GPIO_ReadPin>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d105      	bne.n	80056e0 <bekle+0x120>
 80056d4:	4b03      	ldr	r3, [pc, #12]	; (80056e4 <bekle+0x124>)
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <bekle+0x128>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d0ee      	beq.n	80056be <bekle+0xfe>
    }

}
 80056e0:	bf00      	nop
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	200003a0 	.word	0x200003a0
 80056e8:	200003a8 	.word	0x200003a8
 80056ec:	20000427 	.word	0x20000427
 80056f0:	40010800 	.word	0x40010800
 80056f4:	40011000 	.word	0x40011000

080056f8 <i2cTest>:

void i2cTest() {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80056fe:	463b      	mov	r3, r7
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	609a      	str	r2, [r3, #8]
 8005708:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800570a:	4b50      	ldr	r3, [pc, #320]	; (800584c <i2cTest+0x154>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b4e      	ldr	r3, [pc, #312]	; (800584c <i2cTest+0x154>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800571a:	484c      	ldr	r0, [pc, #304]	; (800584c <i2cTest+0x154>)
 800571c:	f003 fd7c 	bl	8009218 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005720:	23c0      	movs	r3, #192	; 0xc0
 8005722:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005724:	2311      	movs	r3, #17
 8005726:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005728:	2301      	movs	r3, #1
 800572a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800572c:	2303      	movs	r3, #3
 800572e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005730:	463b      	mov	r3, r7
 8005732:	4619      	mov	r1, r3
 8005734:	4846      	ldr	r0, [pc, #280]	; (8005850 <i2cTest+0x158>)
 8005736:	f003 f983 	bl	8008a40 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800573a:	2201      	movs	r2, #1
 800573c:	2140      	movs	r1, #64	; 0x40
 800573e:	4844      	ldr	r0, [pc, #272]	; (8005850 <i2cTest+0x158>)
 8005740:	f003 fbf5 	bl	8008f2e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005744:	2201      	movs	r2, #1
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	4841      	ldr	r0, [pc, #260]	; (8005850 <i2cTest+0x158>)
 800574a:	f003 fbf0 	bl	8008f2e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800574e:	200a      	movs	r0, #10
 8005750:	f002 fe06 	bl	8008360 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005754:	bf00      	nop
 8005756:	2140      	movs	r1, #64	; 0x40
 8005758:	483d      	ldr	r0, [pc, #244]	; (8005850 <i2cTest+0x158>)
 800575a:	f003 fbd1 	bl	8008f00 <HAL_GPIO_ReadPin>
 800575e:	4603      	mov	r3, r0
 8005760:	2b01      	cmp	r3, #1
 8005762:	d006      	beq.n	8005772 <i2cTest+0x7a>
 8005764:	2180      	movs	r1, #128	; 0x80
 8005766:	483a      	ldr	r0, [pc, #232]	; (8005850 <i2cTest+0x158>)
 8005768:	f003 fbca 	bl	8008f00 <HAL_GPIO_ReadPin>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d1f1      	bne.n	8005756 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8005772:	2200      	movs	r2, #0
 8005774:	2180      	movs	r1, #128	; 0x80
 8005776:	4836      	ldr	r0, [pc, #216]	; (8005850 <i2cTest+0x158>)
 8005778:	f003 fbd9 	bl	8008f2e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800577c:	200a      	movs	r0, #10
 800577e:	f002 fdef 	bl	8008360 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8005782:	bf00      	nop
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	4832      	ldr	r0, [pc, #200]	; (8005850 <i2cTest+0x158>)
 8005788:	f003 fbba 	bl	8008f00 <HAL_GPIO_ReadPin>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	d0f8      	beq.n	8005784 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8005792:	2200      	movs	r2, #0
 8005794:	2140      	movs	r1, #64	; 0x40
 8005796:	482e      	ldr	r0, [pc, #184]	; (8005850 <i2cTest+0x158>)
 8005798:	f003 fbc9 	bl	8008f2e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800579c:	200a      	movs	r0, #10
 800579e:	f002 fddf 	bl	8008360 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80057a2:	bf00      	nop
 80057a4:	2140      	movs	r1, #64	; 0x40
 80057a6:	482a      	ldr	r0, [pc, #168]	; (8005850 <i2cTest+0x158>)
 80057a8:	f003 fbaa 	bl	8008f00 <HAL_GPIO_ReadPin>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d0f8      	beq.n	80057a4 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80057b2:	2201      	movs	r2, #1
 80057b4:	2140      	movs	r1, #64	; 0x40
 80057b6:	4826      	ldr	r0, [pc, #152]	; (8005850 <i2cTest+0x158>)
 80057b8:	f003 fbb9 	bl	8008f2e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80057bc:	200a      	movs	r0, #10
 80057be:	f002 fdcf 	bl	8008360 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80057c2:	bf00      	nop
 80057c4:	2140      	movs	r1, #64	; 0x40
 80057c6:	4822      	ldr	r0, [pc, #136]	; (8005850 <i2cTest+0x158>)
 80057c8:	f003 fb9a 	bl	8008f00 <HAL_GPIO_ReadPin>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d1f8      	bne.n	80057c4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80057d2:	2201      	movs	r2, #1
 80057d4:	2180      	movs	r1, #128	; 0x80
 80057d6:	481e      	ldr	r0, [pc, #120]	; (8005850 <i2cTest+0x158>)
 80057d8:	f003 fba9 	bl	8008f2e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80057dc:	200a      	movs	r0, #10
 80057de:	f002 fdbf 	bl	8008360 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80057e2:	bf00      	nop
 80057e4:	2180      	movs	r1, #128	; 0x80
 80057e6:	481a      	ldr	r0, [pc, #104]	; (8005850 <i2cTest+0x158>)
 80057e8:	f003 fb8a 	bl	8008f00 <HAL_GPIO_ReadPin>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d1f8      	bne.n	80057e4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057f2:	23c0      	movs	r3, #192	; 0xc0
 80057f4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80057f6:	2312      	movs	r3, #18
 80057f8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80057fa:	2301      	movs	r3, #1
 80057fc:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80057fe:	2303      	movs	r3, #3
 8005800:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005802:	463b      	mov	r3, r7
 8005804:	4619      	mov	r1, r3
 8005806:	4812      	ldr	r0, [pc, #72]	; (8005850 <i2cTest+0x158>)
 8005808:	f003 f91a 	bl	8008a40 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 800580c:	4b0f      	ldr	r3, [pc, #60]	; (800584c <i2cTest+0x154>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b0e      	ldr	r3, [pc, #56]	; (800584c <i2cTest+0x154>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800581a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <i2cTest+0x154>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b0a      	ldr	r3, [pc, #40]	; (800584c <i2cTest+0x154>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800582a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 800582c:	4b07      	ldr	r3, [pc, #28]	; (800584c <i2cTest+0x154>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <i2cTest+0x154>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 800583c:	4803      	ldr	r0, [pc, #12]	; (800584c <i2cTest+0x154>)
 800583e:	f003 fba7 	bl	8008f90 <HAL_I2C_Init>
}
 8005842:	bf00      	nop
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20000244 	.word	0x20000244
 8005850:	40010c00 	.word	0x40010c00

08005854 <checkLCDBacklight>:

void checkLCDBacklight() {
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8005858:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <checkLCDBacklight+0x34>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <checkLCDBacklight+0x38>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	1ad2      	subs	r2, r2, r3
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <checkLCDBacklight+0x3c>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	4619      	mov	r1, r3
 8005868:	460b      	mov	r3, r1
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	429a      	cmp	r2, r3
 8005872:	d303      	bcc.n	800587c <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8005874:	2000      	movs	r0, #0
 8005876:	f7fa ff69 	bl	800074c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 800587a:	e002      	b.n	8005882 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 800587c:	2001      	movs	r0, #1
 800587e:	f7fa ff65 	bl	800074c <lcd_backlight>
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	200003a0 	.word	0x200003a0
 800588c:	200003bc 	.word	0x200003bc
 8005890:	20000030 	.word	0x20000030

08005894 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8005898:	4b13      	ldr	r3, [pc, #76]	; (80058e8 <checkBasincSalteri+0x54>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <checkBasincSalteri+0x12>
		basincVar=1;
 80058a0:	4b12      	ldr	r3, [pc, #72]	; (80058ec <checkBasincSalteri+0x58>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <checkBasincSalteri+0x54>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d119      	bne.n	80058e2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80058ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058b2:	480f      	ldr	r0, [pc, #60]	; (80058f0 <checkBasincSalteri+0x5c>)
 80058b4:	f003 fb24 	bl	8008f00 <HAL_GPIO_ReadPin>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <checkBasincSalteri+0x60>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <checkBasincSalteri+0x64>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d90a      	bls.n	80058e2 <checkBasincSalteri+0x4e>
				basincVar=1;
 80058cc:	4b07      	ldr	r3, [pc, #28]	; (80058ec <checkBasincSalteri+0x58>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80058d2:	e006      	b.n	80058e2 <checkBasincSalteri+0x4e>
			timer5=millis;
 80058d4:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <checkBasincSalteri+0x60>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <checkBasincSalteri+0x64>)
 80058da:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80058dc:	4b03      	ldr	r3, [pc, #12]	; (80058ec <checkBasincSalteri+0x58>)
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
}
 80058e2:	bf00      	nop
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	200003ff 	.word	0x200003ff
 80058ec:	200003fb 	.word	0x200003fb
 80058f0:	40011000 	.word	0x40011000
 80058f4:	200003a0 	.word	0x200003a0
 80058f8:	200003b8 	.word	0x200003b8

080058fc <checkBasGonder>:

void checkBasGonder() {
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005900:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <checkBasGonder+0x74>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d10b      	bne.n	8005920 <checkBasGonder+0x24>
 8005908:	4b1a      	ldr	r3, [pc, #104]	; (8005974 <checkBasGonder+0x78>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d007      	beq.n	8005920 <checkBasGonder+0x24>
 8005910:	4b19      	ldr	r3, [pc, #100]	; (8005978 <checkBasGonder+0x7c>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <checkBasGonder+0x80>)
 800591a:	2201      	movs	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	e009      	b.n	8005934 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8005920:	4b14      	ldr	r3, [pc, #80]	; (8005974 <checkBasGonder+0x78>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f083 0301 	eor.w	r3, r3, #1
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800592e:	4b13      	ldr	r3, [pc, #76]	; (800597c <checkBasGonder+0x80>)
 8005930:	2200      	movs	r2, #0
 8005932:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <checkBasGonder+0x74>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10b      	bne.n	8005954 <checkBasGonder+0x58>
 800593c:	4b10      	ldr	r3, [pc, #64]	; (8005980 <checkBasGonder+0x84>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <checkBasGonder+0x58>
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <checkBasGonder+0x7c>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d103      	bne.n	8005954 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <checkBasGonder+0x88>)
 800594e:	2201      	movs	r2, #1
 8005950:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8005952:	e009      	b.n	8005968 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8005954:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <checkBasGonder+0x84>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f083 0301 	eor.w	r3, r3, #1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8005962:	4b08      	ldr	r3, [pc, #32]	; (8005984 <checkBasGonder+0x88>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr
 8005970:	200003f9 	.word	0x200003f9
 8005974:	2000042d 	.word	0x2000042d
 8005978:	20000407 	.word	0x20000407
 800597c:	20000434 	.word	0x20000434
 8005980:	20000430 	.word	0x20000430
 8005984:	20000435 	.word	0x20000435

08005988 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800598c:	4b24      	ldr	r3, [pc, #144]	; (8005a20 <checkKapiSecimleri+0x98>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8005994:	4b23      	ldr	r3, [pc, #140]	; (8005a24 <checkKapiSecimleri+0x9c>)
 8005996:	2201      	movs	r2, #1
 8005998:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800599a:	4b21      	ldr	r3, [pc, #132]	; (8005a20 <checkKapiSecimleri+0x98>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d10e      	bne.n	80059c0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80059a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059a6:	4820      	ldr	r0, [pc, #128]	; (8005a28 <checkKapiSecimleri+0xa0>)
 80059a8:	f003 faaa 	bl	8008f00 <HAL_GPIO_ReadPin>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d103      	bne.n	80059ba <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80059b2:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <checkKapiSecimleri+0x9c>)
 80059b4:	2201      	movs	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	e002      	b.n	80059c0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80059ba:	4b1a      	ldr	r3, [pc, #104]	; (8005a24 <checkKapiSecimleri+0x9c>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80059c0:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <checkKapiSecimleri+0x98>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d10e      	bne.n	80059e6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80059c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059cc:	4816      	ldr	r0, [pc, #88]	; (8005a28 <checkKapiSecimleri+0xa0>)
 80059ce:	f003 fa97 	bl	8008f00 <HAL_GPIO_ReadPin>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80059d8:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <checkKapiSecimleri+0x9c>)
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	e002      	b.n	80059e6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80059e0:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <checkKapiSecimleri+0x9c>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80059e6:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <checkKapiSecimleri+0x98>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d116      	bne.n	8005a1c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80059ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059f2:	480d      	ldr	r0, [pc, #52]	; (8005a28 <checkKapiSecimleri+0xa0>)
 80059f4:	f003 fa84 	bl	8008f00 <HAL_GPIO_ReadPin>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <checkKapiSecimleri+0x8e>
 80059fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a02:	4809      	ldr	r0, [pc, #36]	; (8005a28 <checkKapiSecimleri+0xa0>)
 8005a04:	f003 fa7c 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <checkKapiSecimleri+0x9c>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8005a14:	e002      	b.n	8005a1c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8005a16:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <checkKapiSecimleri+0x9c>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000400 	.word	0x20000400
 8005a24:	2000044b 	.word	0x2000044b
 8005a28:	40010800 	.word	0x40010800

08005a2c <checkAktifCalisma>:

void checkAktifCalisma() {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005a30:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <checkAktifCalisma+0x190>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f041 8332 	bne.w	800709e <checkAktifCalisma+0x1672>
 8005a3a:	4b61      	ldr	r3, [pc, #388]	; (8005bc0 <checkAktifCalisma+0x194>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f041 832d 	bne.w	800709e <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005a44:	4b5f      	ldr	r3, [pc, #380]	; (8005bc4 <checkAktifCalisma+0x198>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d11a      	bne.n	8005a82 <checkAktifCalisma+0x56>
 8005a4c:	4b5e      	ldr	r3, [pc, #376]	; (8005bc8 <checkAktifCalisma+0x19c>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d116      	bne.n	8005a82 <checkAktifCalisma+0x56>
 8005a54:	4b5d      	ldr	r3, [pc, #372]	; (8005bcc <checkAktifCalisma+0x1a0>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <checkAktifCalisma+0x46>
 8005a5c:	4b5c      	ldr	r3, [pc, #368]	; (8005bd0 <checkAktifCalisma+0x1a4>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	f083 0301 	eor.w	r3, r3, #1
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <checkAktifCalisma+0x46>
 8005a6a:	4b5a      	ldr	r3, [pc, #360]	; (8005bd4 <checkAktifCalisma+0x1a8>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d007      	beq.n	8005a82 <checkAktifCalisma+0x56>
 8005a72:	4b59      	ldr	r3, [pc, #356]	; (8005bd8 <checkAktifCalisma+0x1ac>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d018      	beq.n	8005aac <checkAktifCalisma+0x80>
 8005a7a:	4b58      	ldr	r3, [pc, #352]	; (8005bdc <checkAktifCalisma+0x1b0>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d114      	bne.n	8005aac <checkAktifCalisma+0x80>
 8005a82:	4b57      	ldr	r3, [pc, #348]	; (8005be0 <checkAktifCalisma+0x1b4>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d010      	beq.n	8005aac <checkAktifCalisma+0x80>
 8005a8a:	4b56      	ldr	r3, [pc, #344]	; (8005be4 <checkAktifCalisma+0x1b8>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00c      	beq.n	8005aac <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005a92:	2201      	movs	r2, #1
 8005a94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a98:	4853      	ldr	r0, [pc, #332]	; (8005be8 <checkAktifCalisma+0x1bc>)
 8005a9a:	f003 fa48 	bl	8008f2e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8005a9e:	4b53      	ldr	r3, [pc, #332]	; (8005bec <checkAktifCalisma+0x1c0>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8005aa4:	4b52      	ldr	r3, [pc, #328]	; (8005bf0 <checkAktifCalisma+0x1c4>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	e008      	b.n	8005abe <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005aac:	2200      	movs	r2, #0
 8005aae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ab2:	484d      	ldr	r0, [pc, #308]	; (8005be8 <checkAktifCalisma+0x1bc>)
 8005ab4:	f003 fa3b 	bl	8008f2e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8005ab8:	4b4c      	ldr	r3, [pc, #304]	; (8005bec <checkAktifCalisma+0x1c0>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8005abe:	4b40      	ldr	r3, [pc, #256]	; (8005bc0 <checkAktifCalisma+0x194>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d160      	bne.n	8005b88 <checkAktifCalisma+0x15c>
 8005ac6:	4b46      	ldr	r3, [pc, #280]	; (8005be0 <checkAktifCalisma+0x1b4>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d05c      	beq.n	8005b88 <checkAktifCalisma+0x15c>
 8005ace:	4b45      	ldr	r3, [pc, #276]	; (8005be4 <checkAktifCalisma+0x1b8>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d058      	beq.n	8005b88 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ada:	4843      	ldr	r0, [pc, #268]	; (8005be8 <checkAktifCalisma+0x1bc>)
 8005adc:	f003 fa10 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <checkAktifCalisma+0xc2>
 8005ae6:	4b43      	ldr	r3, [pc, #268]	; (8005bf4 <checkAktifCalisma+0x1c8>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d04c      	beq.n	8005b88 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005aee:	2102      	movs	r1, #2
 8005af0:	4841      	ldr	r0, [pc, #260]	; (8005bf8 <checkAktifCalisma+0x1cc>)
 8005af2:	f003 fa05 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d145      	bne.n	8005b88 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8005afc:	4b3f      	ldr	r3, [pc, #252]	; (8005bfc <checkAktifCalisma+0x1d0>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d041      	beq.n	8005b88 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005b04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b08:	4837      	ldr	r0, [pc, #220]	; (8005be8 <checkAktifCalisma+0x1bc>)
 8005b0a:	f003 f9f9 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10e      	bne.n	8005b32 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b18:	4833      	ldr	r0, [pc, #204]	; (8005be8 <checkAktifCalisma+0x1bc>)
 8005b1a:	f003 f9f1 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d106      	bne.n	8005b32 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005b24:	2140      	movs	r1, #64	; 0x40
 8005b26:	4834      	ldr	r0, [pc, #208]	; (8005bf8 <checkAktifCalisma+0x1cc>)
 8005b28:	f003 f9ea 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d003      	beq.n	8005b3a <checkAktifCalisma+0x10e>
 8005b32:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <checkAktifCalisma+0x198>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d026      	beq.n	8005b88 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005b3a:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <checkAktifCalisma+0x1a0>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	f083 0301 	eor.w	r3, r3, #1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01f      	beq.n	8005b88 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005b48:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <checkAktifCalisma+0x19c>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	f083 0301 	eor.w	r3, r3, #1
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d018      	beq.n	8005b88 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8005b56:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <checkAktifCalisma+0x1ac>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	f083 0301 	eor.w	r3, r3, #1
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d011      	beq.n	8005b88 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8005b64:	4b26      	ldr	r3, [pc, #152]	; (8005c00 <checkAktifCalisma+0x1d4>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f083 0301 	eor.w	r3, r3, #1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8005b72:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <checkAktifCalisma+0x1d8>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f083 0301 	eor.w	r3, r3, #1
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005b80:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <checkAktifCalisma+0x198>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	e002      	b.n	8005b8e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <checkAktifCalisma+0x198>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <checkAktifCalisma+0x198>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d03a      	beq.n	8005c0c <checkAktifCalisma+0x1e0>
 8005b96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b9a:	4817      	ldr	r0, [pc, #92]	; (8005bf8 <checkAktifCalisma+0x1cc>)
 8005b9c:	f003 f9b0 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d132      	bne.n	8005c0c <checkAktifCalisma+0x1e0>
 8005ba6:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <checkAktifCalisma+0x1dc>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d02e      	beq.n	8005c0c <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005bb4:	480c      	ldr	r0, [pc, #48]	; (8005be8 <checkAktifCalisma+0x1bc>)
 8005bb6:	f003 f9ba 	bl	8008f2e <HAL_GPIO_WritePin>
 8005bba:	e02d      	b.n	8005c18 <checkAktifCalisma+0x1ec>
 8005bbc:	20000416 	.word	0x20000416
 8005bc0:	20000415 	.word	0x20000415
 8005bc4:	2000042d 	.word	0x2000042d
 8005bc8:	2000042e 	.word	0x2000042e
 8005bcc:	20000430 	.word	0x20000430
 8005bd0:	20000428 	.word	0x20000428
 8005bd4:	2000040b 	.word	0x2000040b
 8005bd8:	2000042f 	.word	0x2000042f
 8005bdc:	2000040a 	.word	0x2000040a
 8005be0:	2000044a 	.word	0x2000044a
 8005be4:	2000044b 	.word	0x2000044b
 8005be8:	40010c00 	.word	0x40010c00
 8005bec:	2000044c 	.word	0x2000044c
 8005bf0:	20000437 	.word	0x20000437
 8005bf4:	20000434 	.word	0x20000434
 8005bf8:	40011000 	.word	0x40011000
 8005bfc:	200003fb 	.word	0x200003fb
 8005c00:	20000432 	.word	0x20000432
 8005c04:	20000433 	.word	0x20000433
 8005c08:	20000406 	.word	0x20000406
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c12:	4860      	ldr	r0, [pc, #384]	; (8005d94 <checkAktifCalisma+0x368>)
 8005c14:	f003 f98b 	bl	8008f2e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005c18:	4b5f      	ldr	r3, [pc, #380]	; (8005d98 <checkAktifCalisma+0x36c>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d013      	beq.n	8005c48 <checkAktifCalisma+0x21c>
 8005c20:	4b5e      	ldr	r3, [pc, #376]	; (8005d9c <checkAktifCalisma+0x370>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d007      	beq.n	8005c38 <checkAktifCalisma+0x20c>
 8005c28:	4b5c      	ldr	r3, [pc, #368]	; (8005d9c <checkAktifCalisma+0x370>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d003      	beq.n	8005c38 <checkAktifCalisma+0x20c>
 8005c30:	4b5b      	ldr	r3, [pc, #364]	; (8005da0 <checkAktifCalisma+0x374>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d107      	bne.n	8005c48 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005c38:	2201      	movs	r2, #1
 8005c3a:	2104      	movs	r1, #4
 8005c3c:	4855      	ldr	r0, [pc, #340]	; (8005d94 <checkAktifCalisma+0x368>)
 8005c3e:	f003 f976 	bl	8008f2e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005c42:	4b58      	ldr	r3, [pc, #352]	; (8005da4 <checkAktifCalisma+0x378>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005c48:	4b56      	ldr	r3, [pc, #344]	; (8005da4 <checkAktifCalisma+0x378>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d02f      	beq.n	8005cb0 <checkAktifCalisma+0x284>
 8005c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c54:	484f      	ldr	r0, [pc, #316]	; (8005d94 <checkAktifCalisma+0x368>)
 8005c56:	f003 f953 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d106      	bne.n	8005c6e <checkAktifCalisma+0x242>
 8005c60:	4b51      	ldr	r3, [pc, #324]	; (8005da8 <checkAktifCalisma+0x37c>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	f083 0301 	eor.w	r3, r3, #1
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <checkAktifCalisma+0x250>
 8005c6e:	2102      	movs	r1, #2
 8005c70:	484e      	ldr	r0, [pc, #312]	; (8005dac <checkAktifCalisma+0x380>)
 8005c72:	f003 f945 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d119      	bne.n	8005cb0 <checkAktifCalisma+0x284>
 8005c7c:	4b4c      	ldr	r3, [pc, #304]	; (8005db0 <checkAktifCalisma+0x384>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d015      	beq.n	8005cb0 <checkAktifCalisma+0x284>
 8005c84:	4b4b      	ldr	r3, [pc, #300]	; (8005db4 <checkAktifCalisma+0x388>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d011      	beq.n	8005cb0 <checkAktifCalisma+0x284>
 8005c8c:	4b4a      	ldr	r3, [pc, #296]	; (8005db8 <checkAktifCalisma+0x38c>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00d      	beq.n	8005cb0 <checkAktifCalisma+0x284>
 8005c94:	4b49      	ldr	r3, [pc, #292]	; (8005dbc <checkAktifCalisma+0x390>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	f083 0301 	eor.w	r3, r3, #1
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d006      	beq.n	8005cb0 <checkAktifCalisma+0x284>
			timer2=millis;
 8005ca2:	4b47      	ldr	r3, [pc, #284]	; (8005dc0 <checkAktifCalisma+0x394>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a47      	ldr	r2, [pc, #284]	; (8005dc4 <checkAktifCalisma+0x398>)
 8005ca8:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005caa:	4b44      	ldr	r3, [pc, #272]	; (8005dbc <checkAktifCalisma+0x390>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005cb0:	4b43      	ldr	r3, [pc, #268]	; (8005dc0 <checkAktifCalisma+0x394>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4b43      	ldr	r3, [pc, #268]	; (8005dc4 <checkAktifCalisma+0x398>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	4a43      	ldr	r2, [pc, #268]	; (8005dc8 <checkAktifCalisma+0x39c>)
 8005cbc:	7812      	ldrb	r2, [r2, #0]
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d303      	bcc.n	8005cca <checkAktifCalisma+0x29e>
 8005cc2:	4b3e      	ldr	r3, [pc, #248]	; (8005dbc <checkAktifCalisma+0x390>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d111      	bne.n	8005cee <checkAktifCalisma+0x2c2>
 8005cca:	4b39      	ldr	r3, [pc, #228]	; (8005db0 <checkAktifCalisma+0x384>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	f083 0301 	eor.w	r3, r3, #1
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <checkAktifCalisma+0x2c2>
 8005cd8:	4b36      	ldr	r3, [pc, #216]	; (8005db4 <checkAktifCalisma+0x388>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	f083 0301 	eor.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <checkAktifCalisma+0x2c2>
 8005ce6:	4b34      	ldr	r3, [pc, #208]	; (8005db8 <checkAktifCalisma+0x38c>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	4828      	ldr	r0, [pc, #160]	; (8005d94 <checkAktifCalisma+0x368>)
 8005cf4:	f003 f91b 	bl	8008f2e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005cf8:	4b2a      	ldr	r3, [pc, #168]	; (8005da4 <checkAktifCalisma+0x378>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005cfe:	4b2f      	ldr	r3, [pc, #188]	; (8005dbc <checkAktifCalisma+0x390>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005d04:	4b31      	ldr	r3, [pc, #196]	; (8005dcc <checkAktifCalisma+0x3a0>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005d0c:	4b30      	ldr	r3, [pc, #192]	; (8005dd0 <checkAktifCalisma+0x3a4>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005d12:	4b2e      	ldr	r3, [pc, #184]	; (8005dcc <checkAktifCalisma+0x3a0>)
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d116      	bne.n	8005d48 <checkAktifCalisma+0x31c>
 8005d1a:	4b2e      	ldr	r3, [pc, #184]	; (8005dd4 <checkAktifCalisma+0x3a8>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d112      	bne.n	8005d48 <checkAktifCalisma+0x31c>
 8005d22:	2101      	movs	r1, #1
 8005d24:	4821      	ldr	r0, [pc, #132]	; (8005dac <checkAktifCalisma+0x380>)
 8005d26:	f003 f8eb 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10b      	bne.n	8005d48 <checkAktifCalisma+0x31c>
 8005d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d34:	4817      	ldr	r0, [pc, #92]	; (8005d94 <checkAktifCalisma+0x368>)
 8005d36:	f003 f8e3 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005d40:	4b23      	ldr	r3, [pc, #140]	; (8005dd0 <checkAktifCalisma+0x3a4>)
 8005d42:	2201      	movs	r2, #1
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e011      	b.n	8005d6c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005d48:	4b20      	ldr	r3, [pc, #128]	; (8005dcc <checkAktifCalisma+0x3a0>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10d      	bne.n	8005d6c <checkAktifCalisma+0x340>
 8005d50:	2101      	movs	r1, #1
 8005d52:	4816      	ldr	r0, [pc, #88]	; (8005dac <checkAktifCalisma+0x380>)
 8005d54:	f003 f8d4 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d106      	bne.n	8005d6c <checkAktifCalisma+0x340>
 8005d5e:	4b1d      	ldr	r3, [pc, #116]	; (8005dd4 <checkAktifCalisma+0x3a8>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005d66:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <checkAktifCalisma+0x3a4>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005d6c:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <checkAktifCalisma+0x3a0>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d134      	bne.n	8005dde <checkAktifCalisma+0x3b2>
 8005d74:	4b17      	ldr	r3, [pc, #92]	; (8005dd4 <checkAktifCalisma+0x3a8>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d130      	bne.n	8005dde <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	480b      	ldr	r0, [pc, #44]	; (8005dac <checkAktifCalisma+0x380>)
 8005d80:	f003 f8be 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d126      	bne.n	8005dd8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005d8a:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <checkAktifCalisma+0x3a4>)
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e025      	b.n	8005dde <checkAktifCalisma+0x3b2>
 8005d92:	bf00      	nop
 8005d94:	40010c00 	.word	0x40010c00
 8005d98:	2000042d 	.word	0x2000042d
 8005d9c:	20000407 	.word	0x20000407
 8005da0:	2000040b 	.word	0x2000040b
 8005da4:	20000431 	.word	0x20000431
 8005da8:	20000434 	.word	0x20000434
 8005dac:	40011000 	.word	0x40011000
 8005db0:	2000044a 	.word	0x2000044a
 8005db4:	2000044b 	.word	0x2000044b
 8005db8:	200003fb 	.word	0x200003fb
 8005dbc:	20000429 	.word	0x20000429
 8005dc0:	200003a0 	.word	0x200003a0
 8005dc4:	200003ac 	.word	0x200003ac
 8005dc8:	2000040c 	.word	0x2000040c
 8005dcc:	200003fc 	.word	0x200003fc
 8005dd0:	2000044f 	.word	0x2000044f
 8005dd4:	200003f9 	.word	0x200003f9
			} else {
				cerceveVar=0;
 8005dd8:	4b7f      	ldr	r3, [pc, #508]	; (8005fd8 <checkAktifCalisma+0x5ac>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005dde:	4b7f      	ldr	r3, [pc, #508]	; (8005fdc <checkAktifCalisma+0x5b0>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d17c      	bne.n	8005ee0 <checkAktifCalisma+0x4b4>
 8005de6:	4b7e      	ldr	r3, [pc, #504]	; (8005fe0 <checkAktifCalisma+0x5b4>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d078      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
 8005dee:	4b7d      	ldr	r3, [pc, #500]	; (8005fe4 <checkAktifCalisma+0x5b8>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d074      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005dfa:	487b      	ldr	r0, [pc, #492]	; (8005fe8 <checkAktifCalisma+0x5bc>)
 8005dfc:	f003 f880 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <checkAktifCalisma+0x3e2>
 8005e06:	4b79      	ldr	r3, [pc, #484]	; (8005fec <checkAktifCalisma+0x5c0>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d068      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005e0e:	4b72      	ldr	r3, [pc, #456]	; (8005fd8 <checkAktifCalisma+0x5ac>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d064      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
 8005e16:	4b76      	ldr	r3, [pc, #472]	; (8005ff0 <checkAktifCalisma+0x5c4>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	f083 0301 	eor.w	r3, r3, #1
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d05d      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005e24:	2104      	movs	r1, #4
 8005e26:	4873      	ldr	r0, [pc, #460]	; (8005ff4 <checkAktifCalisma+0x5c8>)
 8005e28:	f003 f86a 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <checkAktifCalisma+0x40e>
 8005e32:	4b71      	ldr	r3, [pc, #452]	; (8005ff8 <checkAktifCalisma+0x5cc>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d152      	bne.n	8005ee0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e3e:	486a      	ldr	r0, [pc, #424]	; (8005fe8 <checkAktifCalisma+0x5bc>)
 8005e40:	f003 f85e 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d10e      	bne.n	8005e68 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e4e:	4866      	ldr	r0, [pc, #408]	; (8005fe8 <checkAktifCalisma+0x5bc>)
 8005e50:	f003 f856 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d106      	bne.n	8005e68 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005e5a:	2140      	movs	r1, #64	; 0x40
 8005e5c:	4865      	ldr	r0, [pc, #404]	; (8005ff4 <checkAktifCalisma+0x5c8>)
 8005e5e:	f003 f84f 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d003      	beq.n	8005e70 <checkAktifCalisma+0x444>
 8005e68:	4b64      	ldr	r3, [pc, #400]	; (8005ffc <checkAktifCalisma+0x5d0>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d037      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005e70:	4b63      	ldr	r3, [pc, #396]	; (8006000 <checkAktifCalisma+0x5d4>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	f083 0301 	eor.w	r3, r3, #1
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d030      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005e7e:	4b61      	ldr	r3, [pc, #388]	; (8006004 <checkAktifCalisma+0x5d8>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	f083 0301 	eor.w	r3, r3, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d029      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005e8c:	4b5e      	ldr	r3, [pc, #376]	; (8006008 <checkAktifCalisma+0x5dc>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f083 0301 	eor.w	r3, r3, #1
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d022      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005e9a:	4b5c      	ldr	r3, [pc, #368]	; (800600c <checkAktifCalisma+0x5e0>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f083 0301 	eor.w	r3, r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01b      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005ea8:	4b59      	ldr	r3, [pc, #356]	; (8006010 <checkAktifCalisma+0x5e4>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f083 0301 	eor.w	r3, r3, #1
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d014      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005eb6:	4b57      	ldr	r3, [pc, #348]	; (8006014 <checkAktifCalisma+0x5e8>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f083 0301 	eor.w	r3, r3, #1
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	4847      	ldr	r0, [pc, #284]	; (8005fe8 <checkAktifCalisma+0x5bc>)
 8005eca:	f003 f830 	bl	8008f2e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005ece:	4b4b      	ldr	r3, [pc, #300]	; (8005ffc <checkAktifCalisma+0x5d0>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005ed4:	4b50      	ldr	r3, [pc, #320]	; (8006018 <checkAktifCalisma+0x5ec>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005eda:	4b50      	ldr	r3, [pc, #320]	; (800601c <checkAktifCalisma+0x5f0>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005ee0:	4b46      	ldr	r3, [pc, #280]	; (8005ffc <checkAktifCalisma+0x5d0>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d033      	beq.n	8005f50 <checkAktifCalisma+0x524>
 8005ee8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005eec:	483e      	ldr	r0, [pc, #248]	; (8005fe8 <checkAktifCalisma+0x5bc>)
 8005eee:	f003 f807 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d106      	bne.n	8005f06 <checkAktifCalisma+0x4da>
 8005ef8:	4b3c      	ldr	r3, [pc, #240]	; (8005fec <checkAktifCalisma+0x5c0>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f083 0301 	eor.w	r3, r3, #1
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <checkAktifCalisma+0x4f0>
 8005f06:	2104      	movs	r1, #4
 8005f08:	483a      	ldr	r0, [pc, #232]	; (8005ff4 <checkAktifCalisma+0x5c8>)
 8005f0a:	f002 fff9 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d11d      	bne.n	8005f50 <checkAktifCalisma+0x524>
 8005f14:	4b38      	ldr	r3, [pc, #224]	; (8005ff8 <checkAktifCalisma+0x5cc>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d019      	beq.n	8005f50 <checkAktifCalisma+0x524>
 8005f1c:	4b30      	ldr	r3, [pc, #192]	; (8005fe0 <checkAktifCalisma+0x5b4>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d015      	beq.n	8005f50 <checkAktifCalisma+0x524>
 8005f24:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <checkAktifCalisma+0x5b8>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d011      	beq.n	8005f50 <checkAktifCalisma+0x524>
 8005f2c:	4b2a      	ldr	r3, [pc, #168]	; (8005fd8 <checkAktifCalisma+0x5ac>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00d      	beq.n	8005f50 <checkAktifCalisma+0x524>
 8005f34:	4b3a      	ldr	r3, [pc, #232]	; (8006020 <checkAktifCalisma+0x5f4>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	f083 0301 	eor.w	r3, r3, #1
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d006      	beq.n	8005f50 <checkAktifCalisma+0x524>
			timer2=millis;
 8005f42:	4b38      	ldr	r3, [pc, #224]	; (8006024 <checkAktifCalisma+0x5f8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a38      	ldr	r2, [pc, #224]	; (8006028 <checkAktifCalisma+0x5fc>)
 8005f48:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005f4a:	4b35      	ldr	r3, [pc, #212]	; (8006020 <checkAktifCalisma+0x5f4>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005f50:	4b34      	ldr	r3, [pc, #208]	; (8006024 <checkAktifCalisma+0x5f8>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b34      	ldr	r3, [pc, #208]	; (8006028 <checkAktifCalisma+0x5fc>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	4a34      	ldr	r2, [pc, #208]	; (800602c <checkAktifCalisma+0x600>)
 8005f5c:	7812      	ldrb	r2, [r2, #0]
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d303      	bcc.n	8005f6a <checkAktifCalisma+0x53e>
 8005f62:	4b2f      	ldr	r3, [pc, #188]	; (8006020 <checkAktifCalisma+0x5f4>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d114      	bne.n	8005f94 <checkAktifCalisma+0x568>
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <checkAktifCalisma+0x5b4>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	f083 0301 	eor.w	r3, r3, #1
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <checkAktifCalisma+0x568>
 8005f78:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <checkAktifCalisma+0x5b8>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f083 0301 	eor.w	r3, r3, #1
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d106      	bne.n	8005f94 <checkAktifCalisma+0x568>
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <checkAktifCalisma+0x5ac>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	f083 0301 	eor.w	r3, r3, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005f94:	2200      	movs	r2, #0
 8005f96:	2102      	movs	r1, #2
 8005f98:	4813      	ldr	r0, [pc, #76]	; (8005fe8 <checkAktifCalisma+0x5bc>)
 8005f9a:	f002 ffc8 	bl	8008f2e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005f9e:	4b17      	ldr	r3, [pc, #92]	; (8005ffc <checkAktifCalisma+0x5d0>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005fa4:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <checkAktifCalisma+0x5f4>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005faa:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <checkAktifCalisma+0x5d0>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d040      	beq.n	8006034 <checkAktifCalisma+0x608>
 8005fb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fb6:	480f      	ldr	r0, [pc, #60]	; (8005ff4 <checkAktifCalisma+0x5c8>)
 8005fb8:	f002 ffa2 	bl	8008f00 <HAL_GPIO_ReadPin>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d138      	bne.n	8006034 <checkAktifCalisma+0x608>
 8005fc2:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <checkAktifCalisma+0x604>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d034      	beq.n	8006034 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005fca:	2201      	movs	r2, #1
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4806      	ldr	r0, [pc, #24]	; (8005fe8 <checkAktifCalisma+0x5bc>)
 8005fd0:	f002 ffad 	bl	8008f2e <HAL_GPIO_WritePin>
 8005fd4:	e033      	b.n	800603e <checkAktifCalisma+0x612>
 8005fd6:	bf00      	nop
 8005fd8:	2000044f 	.word	0x2000044f
 8005fdc:	20000415 	.word	0x20000415
 8005fe0:	2000044a 	.word	0x2000044a
 8005fe4:	2000044b 	.word	0x2000044b
 8005fe8:	40010c00 	.word	0x40010c00
 8005fec:	20000435 	.word	0x20000435
 8005ff0:	20000449 	.word	0x20000449
 8005ff4:	40011000 	.word	0x40011000
 8005ff8:	200003fe 	.word	0x200003fe
 8005ffc:	20000430 	.word	0x20000430
 8006000:	2000042d 	.word	0x2000042d
 8006004:	20000431 	.word	0x20000431
 8006008:	2000042e 	.word	0x2000042e
 800600c:	2000042f 	.word	0x2000042f
 8006010:	20000432 	.word	0x20000432
 8006014:	20000433 	.word	0x20000433
 8006018:	20000438 	.word	0x20000438
 800601c:	20000459 	.word	0x20000459
 8006020:	20000428 	.word	0x20000428
 8006024:	200003a0 	.word	0x200003a0
 8006028:	200003ac 	.word	0x200003ac
 800602c:	2000040d 	.word	0x2000040d
 8006030:	200003fd 	.word	0x200003fd
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006034:	2200      	movs	r2, #0
 8006036:	2101      	movs	r1, #1
 8006038:	4836      	ldr	r0, [pc, #216]	; (8006114 <checkAktifCalisma+0x6e8>)
 800603a:	f002 ff78 	bl	8008f2e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800603e:	4b36      	ldr	r3, [pc, #216]	; (8006118 <checkAktifCalisma+0x6ec>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 8080 	bne.w	8006148 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006048:	4b34      	ldr	r3, [pc, #208]	; (800611c <checkAktifCalisma+0x6f0>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d003      	beq.n	8006058 <checkAktifCalisma+0x62c>
 8006050:	4b32      	ldr	r3, [pc, #200]	; (800611c <checkAktifCalisma+0x6f0>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d177      	bne.n	8006148 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006058:	4b31      	ldr	r3, [pc, #196]	; (8006120 <checkAktifCalisma+0x6f4>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d073      	beq.n	8006148 <checkAktifCalisma+0x71c>
 8006060:	4b30      	ldr	r3, [pc, #192]	; (8006124 <checkAktifCalisma+0x6f8>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d06f      	beq.n	8006148 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800606c:	4829      	ldr	r0, [pc, #164]	; (8006114 <checkAktifCalisma+0x6e8>)
 800606e:	f002 ff47 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d167      	bne.n	8006148 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800607c:	482a      	ldr	r0, [pc, #168]	; (8006128 <checkAktifCalisma+0x6fc>)
 800607e:	f002 ff3f 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <checkAktifCalisma+0x664>
 8006088:	4b28      	ldr	r3, [pc, #160]	; (800612c <checkAktifCalisma+0x700>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d15b      	bne.n	8006148 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	4825      	ldr	r0, [pc, #148]	; (8006128 <checkAktifCalisma+0x6fc>)
 8006094:	f002 ff34 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006098:	4603      	mov	r3, r0
 800609a:	2b01      	cmp	r3, #1
 800609c:	d10f      	bne.n	80060be <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800609e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060a2:	481c      	ldr	r0, [pc, #112]	; (8006114 <checkAktifCalisma+0x6e8>)
 80060a4:	f002 ff2c 	bl	8008f00 <HAL_GPIO_ReadPin>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d107      	bne.n	80060be <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80060ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060b2:	4818      	ldr	r0, [pc, #96]	; (8006114 <checkAktifCalisma+0x6e8>)
 80060b4:	f002 ff24 	bl	8008f00 <HAL_GPIO_ReadPin>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d003      	beq.n	80060c6 <checkAktifCalisma+0x69a>
 80060be:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <checkAktifCalisma+0x704>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d040      	beq.n	8006148 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80060c6:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <checkAktifCalisma+0x708>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	f083 0301 	eor.w	r3, r3, #1
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d039      	beq.n	8006148 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80060d4:	4b18      	ldr	r3, [pc, #96]	; (8006138 <checkAktifCalisma+0x70c>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f083 0301 	eor.w	r3, r3, #1
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d032      	beq.n	8006148 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80060e2:	4b16      	ldr	r3, [pc, #88]	; (800613c <checkAktifCalisma+0x710>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f083 0301 	eor.w	r3, r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d02b      	beq.n	8006148 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80060f0:	4b13      	ldr	r3, [pc, #76]	; (8006140 <checkAktifCalisma+0x714>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	f083 0301 	eor.w	r3, r3, #1
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d024      	beq.n	8006148 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80060fe:	4b11      	ldr	r3, [pc, #68]	; (8006144 <checkAktifCalisma+0x718>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	f083 0301 	eor.w	r3, r3, #1
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01d      	beq.n	8006148 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 800610c:	4b08      	ldr	r3, [pc, #32]	; (8006130 <checkAktifCalisma+0x704>)
 800610e:	2201      	movs	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e01c      	b.n	800614e <checkAktifCalisma+0x722>
 8006114:	40010c00 	.word	0x40010c00
 8006118:	20000415 	.word	0x20000415
 800611c:	20000407 	.word	0x20000407
 8006120:	2000044a 	.word	0x2000044a
 8006124:	2000044b 	.word	0x2000044b
 8006128:	40011000 	.word	0x40011000
 800612c:	20000408 	.word	0x20000408
 8006130:	2000042e 	.word	0x2000042e
 8006134:	2000042d 	.word	0x2000042d
 8006138:	20000431 	.word	0x20000431
 800613c:	20000430 	.word	0x20000430
 8006140:	2000042f 	.word	0x2000042f
 8006144:	20000433 	.word	0x20000433
		} else {
			devmotoryukaricalisiyor=0;
 8006148:	4b64      	ldr	r3, [pc, #400]	; (80062dc <checkAktifCalisma+0x8b0>)
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800614e:	4b63      	ldr	r3, [pc, #396]	; (80062dc <checkAktifCalisma+0x8b0>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006156:	2201      	movs	r2, #1
 8006158:	2120      	movs	r1, #32
 800615a:	4861      	ldr	r0, [pc, #388]	; (80062e0 <checkAktifCalisma+0x8b4>)
 800615c:	f002 fee7 	bl	8008f2e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006160:	4b60      	ldr	r3, [pc, #384]	; (80062e4 <checkAktifCalisma+0x8b8>)
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006166:	4b5f      	ldr	r3, [pc, #380]	; (80062e4 <checkAktifCalisma+0x8b8>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d025      	beq.n	80061ba <checkAktifCalisma+0x78e>
 800616e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006172:	485d      	ldr	r0, [pc, #372]	; (80062e8 <checkAktifCalisma+0x8bc>)
 8006174:	f002 fec4 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006178:	4603      	mov	r3, r0
 800617a:	2b01      	cmp	r3, #1
 800617c:	d007      	beq.n	800618e <checkAktifCalisma+0x762>
 800617e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006182:	4857      	ldr	r0, [pc, #348]	; (80062e0 <checkAktifCalisma+0x8b4>)
 8006184:	f002 febc 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d115      	bne.n	80061ba <checkAktifCalisma+0x78e>
 800618e:	4b57      	ldr	r3, [pc, #348]	; (80062ec <checkAktifCalisma+0x8c0>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d011      	beq.n	80061ba <checkAktifCalisma+0x78e>
 8006196:	4b56      	ldr	r3, [pc, #344]	; (80062f0 <checkAktifCalisma+0x8c4>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <checkAktifCalisma+0x78e>
 800619e:	4b55      	ldr	r3, [pc, #340]	; (80062f4 <checkAktifCalisma+0x8c8>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	f083 0301 	eor.w	r3, r3, #1
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d006      	beq.n	80061ba <checkAktifCalisma+0x78e>
			timer2=millis;
 80061ac:	4b52      	ldr	r3, [pc, #328]	; (80062f8 <checkAktifCalisma+0x8cc>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a52      	ldr	r2, [pc, #328]	; (80062fc <checkAktifCalisma+0x8d0>)
 80061b2:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80061b4:	4b4f      	ldr	r3, [pc, #316]	; (80062f4 <checkAktifCalisma+0x8c8>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80061ba:	4b4f      	ldr	r3, [pc, #316]	; (80062f8 <checkAktifCalisma+0x8cc>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4b4f      	ldr	r3, [pc, #316]	; (80062fc <checkAktifCalisma+0x8d0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	4a4e      	ldr	r2, [pc, #312]	; (8006300 <checkAktifCalisma+0x8d4>)
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d303      	bcc.n	80061d4 <checkAktifCalisma+0x7a8>
 80061cc:	4b49      	ldr	r3, [pc, #292]	; (80062f4 <checkAktifCalisma+0x8c8>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10d      	bne.n	80061f0 <checkAktifCalisma+0x7c4>
 80061d4:	4b45      	ldr	r3, [pc, #276]	; (80062ec <checkAktifCalisma+0x8c0>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	f083 0301 	eor.w	r3, r3, #1
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <checkAktifCalisma+0x7c4>
 80061e2:	4b43      	ldr	r3, [pc, #268]	; (80062f0 <checkAktifCalisma+0x8c4>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f083 0301 	eor.w	r3, r3, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80061f0:	2200      	movs	r2, #0
 80061f2:	2120      	movs	r1, #32
 80061f4:	483a      	ldr	r0, [pc, #232]	; (80062e0 <checkAktifCalisma+0x8b4>)
 80061f6:	f002 fe9a 	bl	8008f2e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80061fa:	4b3a      	ldr	r3, [pc, #232]	; (80062e4 <checkAktifCalisma+0x8b8>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006200:	4b3c      	ldr	r3, [pc, #240]	; (80062f4 <checkAktifCalisma+0x8c8>)
 8006202:	2200      	movs	r2, #0
 8006204:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006206:	4b3f      	ldr	r3, [pc, #252]	; (8006304 <checkAktifCalisma+0x8d8>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 8088 	bne.w	8006320 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006210:	4b3d      	ldr	r3, [pc, #244]	; (8006308 <checkAktifCalisma+0x8dc>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d003      	beq.n	8006220 <checkAktifCalisma+0x7f4>
 8006218:	4b3b      	ldr	r3, [pc, #236]	; (8006308 <checkAktifCalisma+0x8dc>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d17f      	bne.n	8006320 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006220:	4b32      	ldr	r3, [pc, #200]	; (80062ec <checkAktifCalisma+0x8c0>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d07b      	beq.n	8006320 <checkAktifCalisma+0x8f4>
 8006228:	4b31      	ldr	r3, [pc, #196]	; (80062f0 <checkAktifCalisma+0x8c4>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d077      	beq.n	8006320 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006230:	2140      	movs	r1, #64	; 0x40
 8006232:	482b      	ldr	r0, [pc, #172]	; (80062e0 <checkAktifCalisma+0x8b4>)
 8006234:	f002 fe64 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d170      	bne.n	8006320 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800623e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006242:	4827      	ldr	r0, [pc, #156]	; (80062e0 <checkAktifCalisma+0x8b4>)
 8006244:	f002 fe5c 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <checkAktifCalisma+0x82a>
 800624e:	4b2f      	ldr	r3, [pc, #188]	; (800630c <checkAktifCalisma+0x8e0>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d164      	bne.n	8006320 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800625a:	4823      	ldr	r0, [pc, #140]	; (80062e8 <checkAktifCalisma+0x8bc>)
 800625c:	f002 fe50 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006260:	4603      	mov	r3, r0
 8006262:	2b01      	cmp	r3, #1
 8006264:	d10f      	bne.n	8006286 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800626a:	481f      	ldr	r0, [pc, #124]	; (80062e8 <checkAktifCalisma+0x8bc>)
 800626c:	f002 fe48 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006270:	4603      	mov	r3, r0
 8006272:	2b01      	cmp	r3, #1
 8006274:	d107      	bne.n	8006286 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800627a:	481b      	ldr	r0, [pc, #108]	; (80062e8 <checkAktifCalisma+0x8bc>)
 800627c:	f002 fe40 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006280:	4603      	mov	r3, r0
 8006282:	2b01      	cmp	r3, #1
 8006284:	d003      	beq.n	800628e <checkAktifCalisma+0x862>
 8006286:	4b22      	ldr	r3, [pc, #136]	; (8006310 <checkAktifCalisma+0x8e4>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d048      	beq.n	8006320 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800628e:	4b21      	ldr	r3, [pc, #132]	; (8006314 <checkAktifCalisma+0x8e8>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f083 0301 	eor.w	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d041      	beq.n	8006320 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800629c:	4b1e      	ldr	r3, [pc, #120]	; (8006318 <checkAktifCalisma+0x8ec>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f083 0301 	eor.w	r3, r3, #1
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d03a      	beq.n	8006320 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80062aa:	4b1c      	ldr	r3, [pc, #112]	; (800631c <checkAktifCalisma+0x8f0>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f083 0301 	eor.w	r3, r3, #1
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d033      	beq.n	8006320 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80062b8:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <checkAktifCalisma+0x8b8>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f083 0301 	eor.w	r3, r3, #1
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d02c      	beq.n	8006320 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80062c6:	4b05      	ldr	r3, [pc, #20]	; (80062dc <checkAktifCalisma+0x8b0>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f083 0301 	eor.w	r3, r3, #1
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d025      	beq.n	8006320 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80062d4:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <checkAktifCalisma+0x8e4>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	e024      	b.n	8006326 <checkAktifCalisma+0x8fa>
 80062dc:	2000042e 	.word	0x2000042e
 80062e0:	40011000 	.word	0x40011000
 80062e4:	20000432 	.word	0x20000432
 80062e8:	40010c00 	.word	0x40010c00
 80062ec:	2000044a 	.word	0x2000044a
 80062f0:	2000044b 	.word	0x2000044b
 80062f4:	2000042a 	.word	0x2000042a
 80062f8:	200003a0 	.word	0x200003a0
 80062fc:	200003ac 	.word	0x200003ac
 8006300:	2000040e 	.word	0x2000040e
 8006304:	20000415 	.word	0x20000415
 8006308:	20000407 	.word	0x20000407
 800630c:	20000409 	.word	0x20000409
 8006310:	2000042f 	.word	0x2000042f
 8006314:	2000042d 	.word	0x2000042d
 8006318:	20000431 	.word	0x20000431
 800631c:	20000430 	.word	0x20000430
		} else {
			devmotorasagicalisiyor=0;
 8006320:	4b96      	ldr	r3, [pc, #600]	; (800657c <checkAktifCalisma+0xb50>)
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006326:	4b95      	ldr	r3, [pc, #596]	; (800657c <checkAktifCalisma+0xb50>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800632e:	2201      	movs	r2, #1
 8006330:	2110      	movs	r1, #16
 8006332:	4893      	ldr	r0, [pc, #588]	; (8006580 <checkAktifCalisma+0xb54>)
 8006334:	f002 fdfb 	bl	8008f2e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006338:	4b92      	ldr	r3, [pc, #584]	; (8006584 <checkAktifCalisma+0xb58>)
 800633a:	2201      	movs	r2, #1
 800633c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800633e:	4b91      	ldr	r3, [pc, #580]	; (8006584 <checkAktifCalisma+0xb58>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d024      	beq.n	8006390 <checkAktifCalisma+0x964>
 8006346:	2140      	movs	r1, #64	; 0x40
 8006348:	488d      	ldr	r0, [pc, #564]	; (8006580 <checkAktifCalisma+0xb54>)
 800634a:	f002 fdd9 	bl	8008f00 <HAL_GPIO_ReadPin>
 800634e:	4603      	mov	r3, r0
 8006350:	2b01      	cmp	r3, #1
 8006352:	d007      	beq.n	8006364 <checkAktifCalisma+0x938>
 8006354:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006358:	4889      	ldr	r0, [pc, #548]	; (8006580 <checkAktifCalisma+0xb54>)
 800635a:	f002 fdd1 	bl	8008f00 <HAL_GPIO_ReadPin>
 800635e:	4603      	mov	r3, r0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d115      	bne.n	8006390 <checkAktifCalisma+0x964>
 8006364:	4b88      	ldr	r3, [pc, #544]	; (8006588 <checkAktifCalisma+0xb5c>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d011      	beq.n	8006390 <checkAktifCalisma+0x964>
 800636c:	4b87      	ldr	r3, [pc, #540]	; (800658c <checkAktifCalisma+0xb60>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00d      	beq.n	8006390 <checkAktifCalisma+0x964>
 8006374:	4b86      	ldr	r3, [pc, #536]	; (8006590 <checkAktifCalisma+0xb64>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	f083 0301 	eor.w	r3, r3, #1
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d006      	beq.n	8006390 <checkAktifCalisma+0x964>
			timer2=millis;
 8006382:	4b84      	ldr	r3, [pc, #528]	; (8006594 <checkAktifCalisma+0xb68>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a84      	ldr	r2, [pc, #528]	; (8006598 <checkAktifCalisma+0xb6c>)
 8006388:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800638a:	4b81      	ldr	r3, [pc, #516]	; (8006590 <checkAktifCalisma+0xb64>)
 800638c:	2201      	movs	r2, #1
 800638e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006390:	4b80      	ldr	r3, [pc, #512]	; (8006594 <checkAktifCalisma+0xb68>)
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4b80      	ldr	r3, [pc, #512]	; (8006598 <checkAktifCalisma+0xb6c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	4a80      	ldr	r2, [pc, #512]	; (800659c <checkAktifCalisma+0xb70>)
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	4293      	cmp	r3, r2
 80063a0:	d303      	bcc.n	80063aa <checkAktifCalisma+0x97e>
 80063a2:	4b7b      	ldr	r3, [pc, #492]	; (8006590 <checkAktifCalisma+0xb64>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <checkAktifCalisma+0x99a>
 80063aa:	4b77      	ldr	r3, [pc, #476]	; (8006588 <checkAktifCalisma+0xb5c>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	f083 0301 	eor.w	r3, r3, #1
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d106      	bne.n	80063c6 <checkAktifCalisma+0x99a>
 80063b8:	4b74      	ldr	r3, [pc, #464]	; (800658c <checkAktifCalisma+0xb60>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	f083 0301 	eor.w	r3, r3, #1
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80063c6:	2200      	movs	r2, #0
 80063c8:	2110      	movs	r1, #16
 80063ca:	486d      	ldr	r0, [pc, #436]	; (8006580 <checkAktifCalisma+0xb54>)
 80063cc:	f002 fdaf 	bl	8008f2e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80063d0:	4b6c      	ldr	r3, [pc, #432]	; (8006584 <checkAktifCalisma+0xb58>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80063d6:	4b6e      	ldr	r3, [pc, #440]	; (8006590 <checkAktifCalisma+0xb64>)
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80063dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063e0:	486f      	ldr	r0, [pc, #444]	; (80065a0 <checkAktifCalisma+0xb74>)
 80063e2:	f002 fd8d 	bl	8008f00 <HAL_GPIO_ReadPin>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d120      	bne.n	800642e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80063ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063f0:	486b      	ldr	r0, [pc, #428]	; (80065a0 <checkAktifCalisma+0xb74>)
 80063f2:	f002 fd85 	bl	8008f00 <HAL_GPIO_ReadPin>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d118      	bne.n	800642e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80063fc:	2104      	movs	r1, #4
 80063fe:	4868      	ldr	r0, [pc, #416]	; (80065a0 <checkAktifCalisma+0xb74>)
 8006400:	f002 fd7e 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d111      	bne.n	800642e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 800640a:	2102      	movs	r1, #2
 800640c:	4864      	ldr	r0, [pc, #400]	; (80065a0 <checkAktifCalisma+0xb74>)
 800640e:	f002 fd77 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006418:	2101      	movs	r1, #1
 800641a:	4861      	ldr	r0, [pc, #388]	; (80065a0 <checkAktifCalisma+0xb74>)
 800641c:	f002 fd70 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <checkAktifCalisma+0xa02>
			makineStop=1;
 8006426:	4b5f      	ldr	r3, [pc, #380]	; (80065a4 <checkAktifCalisma+0xb78>)
 8006428:	2201      	movs	r2, #1
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	e002      	b.n	8006434 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800642e:	4b5d      	ldr	r3, [pc, #372]	; (80065a4 <checkAktifCalisma+0xb78>)
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006434:	4b5c      	ldr	r3, [pc, #368]	; (80065a8 <checkAktifCalisma+0xb7c>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d144      	bne.n	80064c6 <checkAktifCalisma+0xa9a>
 800643c:	4b5b      	ldr	r3, [pc, #364]	; (80065ac <checkAktifCalisma+0xb80>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d003      	beq.n	800644c <checkAktifCalisma+0xa20>
 8006444:	4b59      	ldr	r3, [pc, #356]	; (80065ac <checkAktifCalisma+0xb80>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d13c      	bne.n	80064c6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800644c:	2180      	movs	r1, #128	; 0x80
 800644e:	484c      	ldr	r0, [pc, #304]	; (8006580 <checkAktifCalisma+0xb54>)
 8006450:	f002 fd56 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d103      	bne.n	8006462 <checkAktifCalisma+0xa36>
 800645a:	4b55      	ldr	r3, [pc, #340]	; (80065b0 <checkAktifCalisma+0xb84>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <checkAktifCalisma+0xa4e>
 8006462:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006466:	484e      	ldr	r0, [pc, #312]	; (80065a0 <checkAktifCalisma+0xb74>)
 8006468:	f002 fd4a 	bl	8008f00 <HAL_GPIO_ReadPin>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d129      	bne.n	80064c6 <checkAktifCalisma+0xa9a>
 8006472:	4b4f      	ldr	r3, [pc, #316]	; (80065b0 <checkAktifCalisma+0xb84>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d125      	bne.n	80064c6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800647a:	2104      	movs	r1, #4
 800647c:	4840      	ldr	r0, [pc, #256]	; (8006580 <checkAktifCalisma+0xb54>)
 800647e:	f002 fd3f 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006482:	4603      	mov	r3, r0
 8006484:	2b01      	cmp	r3, #1
 8006486:	d003      	beq.n	8006490 <checkAktifCalisma+0xa64>
 8006488:	4b4a      	ldr	r3, [pc, #296]	; (80065b4 <checkAktifCalisma+0xb88>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d11a      	bne.n	80064c6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006490:	2102      	movs	r1, #2
 8006492:	483b      	ldr	r0, [pc, #236]	; (8006580 <checkAktifCalisma+0xb54>)
 8006494:	f002 fd34 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d113      	bne.n	80064c6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800649e:	4b46      	ldr	r3, [pc, #280]	; (80065b8 <checkAktifCalisma+0xb8c>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f083 0301 	eor.w	r3, r3, #1
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00c      	beq.n	80064c6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 80064ac:	4b3d      	ldr	r3, [pc, #244]	; (80065a4 <checkAktifCalisma+0xb78>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80064b4:	4b41      	ldr	r3, [pc, #260]	; (80065bc <checkAktifCalisma+0xb90>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80064ba:	4b36      	ldr	r3, [pc, #216]	; (8006594 <checkAktifCalisma+0xb68>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a40      	ldr	r2, [pc, #256]	; (80065c0 <checkAktifCalisma+0xb94>)
 80064c0:	6013      	str	r3, [r2, #0]
			bekle();
 80064c2:	f7ff f87d 	bl	80055c0 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80064c6:	4b33      	ldr	r3, [pc, #204]	; (8006594 <checkAktifCalisma+0xb68>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b3d      	ldr	r3, [pc, #244]	; (80065c0 <checkAktifCalisma+0xb94>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	4a3c      	ldr	r2, [pc, #240]	; (80065c4 <checkAktifCalisma+0xb98>)
 80064d2:	7812      	ldrb	r2, [r2, #0]
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d211      	bcs.n	80064fc <checkAktifCalisma+0xad0>
 80064d8:	2104      	movs	r1, #4
 80064da:	4829      	ldr	r0, [pc, #164]	; (8006580 <checkAktifCalisma+0xb54>)
 80064dc:	f002 fd10 	bl	8008f00 <HAL_GPIO_ReadPin>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <checkAktifCalisma+0xad0>
 80064e6:	4b33      	ldr	r3, [pc, #204]	; (80065b4 <checkAktifCalisma+0xb88>)
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d006      	beq.n	80064fc <checkAktifCalisma+0xad0>
 80064ee:	4b2d      	ldr	r3, [pc, #180]	; (80065a4 <checkAktifCalisma+0xb78>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	f083 0301 	eor.w	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80064fc:	4b2f      	ldr	r3, [pc, #188]	; (80065bc <checkAktifCalisma+0xb90>)
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006502:	4b29      	ldr	r3, [pc, #164]	; (80065a8 <checkAktifCalisma+0xb7c>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d160      	bne.n	80065cc <checkAktifCalisma+0xba0>
 800650a:	4b28      	ldr	r3, [pc, #160]	; (80065ac <checkAktifCalisma+0xb80>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d003      	beq.n	800651a <checkAktifCalisma+0xaee>
 8006512:	4b26      	ldr	r3, [pc, #152]	; (80065ac <checkAktifCalisma+0xb80>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b03      	cmp	r3, #3
 8006518:	d158      	bne.n	80065cc <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800651a:	2104      	movs	r1, #4
 800651c:	4818      	ldr	r0, [pc, #96]	; (8006580 <checkAktifCalisma+0xb54>)
 800651e:	f002 fcef 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006522:	4603      	mov	r3, r0
 8006524:	2b01      	cmp	r3, #1
 8006526:	d003      	beq.n	8006530 <checkAktifCalisma+0xb04>
 8006528:	4b22      	ldr	r3, [pc, #136]	; (80065b4 <checkAktifCalisma+0xb88>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d14d      	bne.n	80065cc <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006530:	2102      	movs	r1, #2
 8006532:	4813      	ldr	r0, [pc, #76]	; (8006580 <checkAktifCalisma+0xb54>)
 8006534:	f002 fce4 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d146      	bne.n	80065cc <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	480f      	ldr	r0, [pc, #60]	; (8006580 <checkAktifCalisma+0xb54>)
 8006542:	f002 fcdd 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d103      	bne.n	8006554 <checkAktifCalisma+0xb28>
 800654c:	4b18      	ldr	r3, [pc, #96]	; (80065b0 <checkAktifCalisma+0xb84>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <checkAktifCalisma+0xb40>
 8006554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006558:	4811      	ldr	r0, [pc, #68]	; (80065a0 <checkAktifCalisma+0xb74>)
 800655a:	f002 fcd1 	bl	8008f00 <HAL_GPIO_ReadPin>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d133      	bne.n	80065cc <checkAktifCalisma+0xba0>
 8006564:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <checkAktifCalisma+0xb84>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d12f      	bne.n	80065cc <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800656c:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <checkAktifCalisma+0xb78>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d02b      	beq.n	80065cc <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006574:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <checkAktifCalisma+0xb9c>)
 8006576:	2201      	movs	r2, #1
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	e02a      	b.n	80065d2 <checkAktifCalisma+0xba6>
 800657c:	2000042f 	.word	0x2000042f
 8006580:	40011000 	.word	0x40011000
 8006584:	20000433 	.word	0x20000433
 8006588:	2000044a 	.word	0x2000044a
 800658c:	2000044b 	.word	0x2000044b
 8006590:	2000042b 	.word	0x2000042b
 8006594:	200003a0 	.word	0x200003a0
 8006598:	200003ac 	.word	0x200003ac
 800659c:	2000040e 	.word	0x2000040e
 80065a0:	40010c00 	.word	0x40010c00
 80065a4:	2000043a 	.word	0x2000043a
 80065a8:	20000401 	.word	0x20000401
 80065ac:	20000400 	.word	0x20000400
 80065b0:	20000404 	.word	0x20000404
 80065b4:	200003fe 	.word	0x200003fe
 80065b8:	20000427 	.word	0x20000427
 80065bc:	2000043b 	.word	0x2000043b
 80065c0:	200003a4 	.word	0x200003a4
 80065c4:	20000411 	.word	0x20000411
 80065c8:	2000043c 	.word	0x2000043c
		} else {
			kapi1butonkontrol=0;
 80065cc:	4b8b      	ldr	r3, [pc, #556]	; (80067fc <checkAktifCalisma+0xdd0>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80065d2:	4b8b      	ldr	r3, [pc, #556]	; (8006800 <checkAktifCalisma+0xdd4>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d121      	bne.n	800661e <checkAktifCalisma+0xbf2>
 80065da:	4b8a      	ldr	r3, [pc, #552]	; (8006804 <checkAktifCalisma+0xdd8>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d003      	beq.n	80065ea <checkAktifCalisma+0xbbe>
 80065e2:	4b88      	ldr	r3, [pc, #544]	; (8006804 <checkAktifCalisma+0xdd8>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d119      	bne.n	800661e <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80065ea:	2104      	movs	r1, #4
 80065ec:	4886      	ldr	r0, [pc, #536]	; (8006808 <checkAktifCalisma+0xddc>)
 80065ee:	f002 fc87 	bl	8008f00 <HAL_GPIO_ReadPin>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d003      	beq.n	8006600 <checkAktifCalisma+0xbd4>
 80065f8:	4b84      	ldr	r3, [pc, #528]	; (800680c <checkAktifCalisma+0xde0>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10e      	bne.n	800661e <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006600:	2102      	movs	r1, #2
 8006602:	4881      	ldr	r0, [pc, #516]	; (8006808 <checkAktifCalisma+0xddc>)
 8006604:	f002 fc7c 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d107      	bne.n	800661e <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800660e:	4b80      	ldr	r3, [pc, #512]	; (8006810 <checkAktifCalisma+0xde4>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8006616:	4b7f      	ldr	r3, [pc, #508]	; (8006814 <checkAktifCalisma+0xde8>)
 8006618:	2201      	movs	r2, #1
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	e002      	b.n	8006624 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800661e:	4b7d      	ldr	r3, [pc, #500]	; (8006814 <checkAktifCalisma+0xde8>)
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006624:	4b75      	ldr	r3, [pc, #468]	; (80067fc <checkAktifCalisma+0xdd0>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d107      	bne.n	800663c <checkAktifCalisma+0xc10>
 800662c:	4b79      	ldr	r3, [pc, #484]	; (8006814 <checkAktifCalisma+0xde8>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <checkAktifCalisma+0xc10>
 8006634:	4b78      	ldr	r3, [pc, #480]	; (8006818 <checkAktifCalisma+0xdec>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800663c:	2201      	movs	r2, #1
 800663e:	2180      	movs	r1, #128	; 0x80
 8006640:	4876      	ldr	r0, [pc, #472]	; (800681c <checkAktifCalisma+0xdf0>)
 8006642:	f002 fc74 	bl	8008f2e <HAL_GPIO_WritePin>
 8006646:	e004      	b.n	8006652 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006648:	2200      	movs	r2, #0
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	4873      	ldr	r0, [pc, #460]	; (800681c <checkAktifCalisma+0xdf0>)
 800664e:	f002 fc6e 	bl	8008f2e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006652:	4b73      	ldr	r3, [pc, #460]	; (8006820 <checkAktifCalisma+0xdf4>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d141      	bne.n	80066de <checkAktifCalisma+0xcb2>
 800665a:	4b6a      	ldr	r3, [pc, #424]	; (8006804 <checkAktifCalisma+0xdd8>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d003      	beq.n	800666a <checkAktifCalisma+0xc3e>
 8006662:	4b68      	ldr	r3, [pc, #416]	; (8006804 <checkAktifCalisma+0xdd8>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b03      	cmp	r3, #3
 8006668:	d139      	bne.n	80066de <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800666a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800666e:	4866      	ldr	r0, [pc, #408]	; (8006808 <checkAktifCalisma+0xddc>)
 8006670:	f002 fc46 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d103      	bne.n	8006682 <checkAktifCalisma+0xc56>
 800667a:	4b6a      	ldr	r3, [pc, #424]	; (8006824 <checkAktifCalisma+0xdf8>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <checkAktifCalisma+0xc6e>
 8006682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006686:	4868      	ldr	r0, [pc, #416]	; (8006828 <checkAktifCalisma+0xdfc>)
 8006688:	f002 fc3a 	bl	8008f00 <HAL_GPIO_ReadPin>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d125      	bne.n	80066de <checkAktifCalisma+0xcb2>
 8006692:	4b64      	ldr	r3, [pc, #400]	; (8006824 <checkAktifCalisma+0xdf8>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d121      	bne.n	80066de <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800669a:	2102      	movs	r1, #2
 800669c:	485a      	ldr	r0, [pc, #360]	; (8006808 <checkAktifCalisma+0xddc>)
 800669e:	f002 fc2f 	bl	8008f00 <HAL_GPIO_ReadPin>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d11a      	bne.n	80066de <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80066a8:	2104      	movs	r1, #4
 80066aa:	4857      	ldr	r0, [pc, #348]	; (8006808 <checkAktifCalisma+0xddc>)
 80066ac:	f002 fc28 	bl	8008f00 <HAL_GPIO_ReadPin>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d113      	bne.n	80066de <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80066b6:	4b56      	ldr	r3, [pc, #344]	; (8006810 <checkAktifCalisma+0xde4>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00f      	beq.n	80066de <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80066be:	4b5b      	ldr	r3, [pc, #364]	; (800682c <checkAktifCalisma+0xe00>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f083 0301 	eor.w	r3, r3, #1
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80066cc:	4b58      	ldr	r3, [pc, #352]	; (8006830 <checkAktifCalisma+0xe04>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80066d2:	4b58      	ldr	r3, [pc, #352]	; (8006834 <checkAktifCalisma+0xe08>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a58      	ldr	r2, [pc, #352]	; (8006838 <checkAktifCalisma+0xe0c>)
 80066d8:	6013      	str	r3, [r2, #0]
			bekle();
 80066da:	f7fe ff71 	bl	80055c0 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80066de:	4b55      	ldr	r3, [pc, #340]	; (8006834 <checkAktifCalisma+0xe08>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b55      	ldr	r3, [pc, #340]	; (8006838 <checkAktifCalisma+0xe0c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	4a54      	ldr	r2, [pc, #336]	; (800683c <checkAktifCalisma+0xe10>)
 80066ea:	7812      	ldrb	r2, [r2, #0]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d20d      	bcs.n	800670c <checkAktifCalisma+0xce0>
 80066f0:	2102      	movs	r1, #2
 80066f2:	4845      	ldr	r0, [pc, #276]	; (8006808 <checkAktifCalisma+0xddc>)
 80066f4:	f002 fc04 	bl	8008f00 <HAL_GPIO_ReadPin>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d006      	beq.n	800670c <checkAktifCalisma+0xce0>
 80066fe:	4b44      	ldr	r3, [pc, #272]	; (8006810 <checkAktifCalisma+0xde4>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	f083 0301 	eor.w	r3, r3, #1
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 800670c:	4b48      	ldr	r3, [pc, #288]	; (8006830 <checkAktifCalisma+0xe04>)
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006712:	4b43      	ldr	r3, [pc, #268]	; (8006820 <checkAktifCalisma+0xdf4>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d135      	bne.n	8006786 <checkAktifCalisma+0xd5a>
 800671a:	4b3a      	ldr	r3, [pc, #232]	; (8006804 <checkAktifCalisma+0xdd8>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d003      	beq.n	800672a <checkAktifCalisma+0xcfe>
 8006722:	4b38      	ldr	r3, [pc, #224]	; (8006804 <checkAktifCalisma+0xdd8>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b03      	cmp	r3, #3
 8006728:	d12d      	bne.n	8006786 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800672a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800672e:	4836      	ldr	r0, [pc, #216]	; (8006808 <checkAktifCalisma+0xddc>)
 8006730:	f002 fbe6 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d103      	bne.n	8006742 <checkAktifCalisma+0xd16>
 800673a:	4b3a      	ldr	r3, [pc, #232]	; (8006824 <checkAktifCalisma+0xdf8>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <checkAktifCalisma+0xd2e>
 8006742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006746:	4838      	ldr	r0, [pc, #224]	; (8006828 <checkAktifCalisma+0xdfc>)
 8006748:	f002 fbda 	bl	8008f00 <HAL_GPIO_ReadPin>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d119      	bne.n	8006786 <checkAktifCalisma+0xd5a>
 8006752:	4b34      	ldr	r3, [pc, #208]	; (8006824 <checkAktifCalisma+0xdf8>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d115      	bne.n	8006786 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800675a:	2102      	movs	r1, #2
 800675c:	482a      	ldr	r0, [pc, #168]	; (8006808 <checkAktifCalisma+0xddc>)
 800675e:	f002 fbcf 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006762:	4603      	mov	r3, r0
 8006764:	2b01      	cmp	r3, #1
 8006766:	d10e      	bne.n	8006786 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006768:	2104      	movs	r1, #4
 800676a:	4827      	ldr	r0, [pc, #156]	; (8006808 <checkAktifCalisma+0xddc>)
 800676c:	f002 fbc8 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d107      	bne.n	8006786 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8006776:	4b26      	ldr	r3, [pc, #152]	; (8006810 <checkAktifCalisma+0xde4>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800677e:	4b30      	ldr	r3, [pc, #192]	; (8006840 <checkAktifCalisma+0xe14>)
 8006780:	2201      	movs	r2, #1
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	e002      	b.n	800678c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8006786:	4b2e      	ldr	r3, [pc, #184]	; (8006840 <checkAktifCalisma+0xe14>)
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800678c:	4b24      	ldr	r3, [pc, #144]	; (8006820 <checkAktifCalisma+0xdf4>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d11d      	bne.n	80067d0 <checkAktifCalisma+0xda4>
 8006794:	4b1b      	ldr	r3, [pc, #108]	; (8006804 <checkAktifCalisma+0xdd8>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d003      	beq.n	80067a4 <checkAktifCalisma+0xd78>
 800679c:	4b19      	ldr	r3, [pc, #100]	; (8006804 <checkAktifCalisma+0xdd8>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d115      	bne.n	80067d0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80067a4:	2102      	movs	r1, #2
 80067a6:	4818      	ldr	r0, [pc, #96]	; (8006808 <checkAktifCalisma+0xddc>)
 80067a8:	f002 fbaa 	bl	8008f00 <HAL_GPIO_ReadPin>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d10e      	bne.n	80067d0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80067b2:	2104      	movs	r1, #4
 80067b4:	4814      	ldr	r0, [pc, #80]	; (8006808 <checkAktifCalisma+0xddc>)
 80067b6:	f002 fba3 	bl	8008f00 <HAL_GPIO_ReadPin>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80067c0:	4b13      	ldr	r3, [pc, #76]	; (8006810 <checkAktifCalisma+0xde4>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80067c8:	4b1e      	ldr	r3, [pc, #120]	; (8006844 <checkAktifCalisma+0xe18>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	e002      	b.n	80067d6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80067d0:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <checkAktifCalisma+0xe18>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80067d6:	4b1a      	ldr	r3, [pc, #104]	; (8006840 <checkAktifCalisma+0xe14>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d107      	bne.n	80067ee <checkAktifCalisma+0xdc2>
 80067de:	4b19      	ldr	r3, [pc, #100]	; (8006844 <checkAktifCalisma+0xe18>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <checkAktifCalisma+0xdc2>
 80067e6:	4b12      	ldr	r3, [pc, #72]	; (8006830 <checkAktifCalisma+0xe04>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d02c      	beq.n	8006848 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80067ee:	2201      	movs	r2, #1
 80067f0:	2140      	movs	r1, #64	; 0x40
 80067f2:	480a      	ldr	r0, [pc, #40]	; (800681c <checkAktifCalisma+0xdf0>)
 80067f4:	f002 fb9b 	bl	8008f2e <HAL_GPIO_WritePin>
 80067f8:	e02b      	b.n	8006852 <checkAktifCalisma+0xe26>
 80067fa:	bf00      	nop
 80067fc:	2000043c 	.word	0x2000043c
 8006800:	20000401 	.word	0x20000401
 8006804:	20000400 	.word	0x20000400
 8006808:	40011000 	.word	0x40011000
 800680c:	200003fe 	.word	0x200003fe
 8006810:	2000043a 	.word	0x2000043a
 8006814:	2000043d 	.word	0x2000043d
 8006818:	2000043b 	.word	0x2000043b
 800681c:	40010800 	.word	0x40010800
 8006820:	20000402 	.word	0x20000402
 8006824:	20000404 	.word	0x20000404
 8006828:	40010c00 	.word	0x40010c00
 800682c:	20000427 	.word	0x20000427
 8006830:	2000043e 	.word	0x2000043e
 8006834:	200003a0 	.word	0x200003a0
 8006838:	200003a4 	.word	0x200003a4
 800683c:	20000412 	.word	0x20000412
 8006840:	2000043f 	.word	0x2000043f
 8006844:	20000440 	.word	0x20000440
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006848:	2200      	movs	r2, #0
 800684a:	2140      	movs	r1, #64	; 0x40
 800684c:	488d      	ldr	r0, [pc, #564]	; (8006a84 <checkAktifCalisma+0x1058>)
 800684e:	f002 fb6e 	bl	8008f2e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8006852:	4b8d      	ldr	r3, [pc, #564]	; (8006a88 <checkAktifCalisma+0x105c>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <checkAktifCalisma+0xe36>
 800685a:	4b8b      	ldr	r3, [pc, #556]	; (8006a88 <checkAktifCalisma+0x105c>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b02      	cmp	r3, #2
 8006860:	d115      	bne.n	800688e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006862:	2104      	movs	r1, #4
 8006864:	4889      	ldr	r0, [pc, #548]	; (8006a8c <checkAktifCalisma+0x1060>)
 8006866:	f002 fb4b 	bl	8008f00 <HAL_GPIO_ReadPin>
 800686a:	4603      	mov	r3, r0
 800686c:	2b01      	cmp	r3, #1
 800686e:	d003      	beq.n	8006878 <checkAktifCalisma+0xe4c>
 8006870:	4b87      	ldr	r3, [pc, #540]	; (8006a90 <checkAktifCalisma+0x1064>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006878:	2102      	movs	r1, #2
 800687a:	4884      	ldr	r0, [pc, #528]	; (8006a8c <checkAktifCalisma+0x1060>)
 800687c:	f002 fb40 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8006886:	4b83      	ldr	r3, [pc, #524]	; (8006a94 <checkAktifCalisma+0x1068>)
 8006888:	2201      	movs	r2, #1
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	e002      	b.n	8006894 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 800688e:	4b81      	ldr	r3, [pc, #516]	; (8006a94 <checkAktifCalisma+0x1068>)
 8006890:	2200      	movs	r2, #0
 8006892:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006894:	4b7c      	ldr	r3, [pc, #496]	; (8006a88 <checkAktifCalisma+0x105c>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d003      	beq.n	80068a4 <checkAktifCalisma+0xe78>
 800689c:	4b7a      	ldr	r3, [pc, #488]	; (8006a88 <checkAktifCalisma+0x105c>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d111      	bne.n	80068c8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80068a4:	2102      	movs	r1, #2
 80068a6:	4879      	ldr	r0, [pc, #484]	; (8006a8c <checkAktifCalisma+0x1060>)
 80068a8:	f002 fb2a 	bl	8008f00 <HAL_GPIO_ReadPin>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d10a      	bne.n	80068c8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80068b2:	2104      	movs	r1, #4
 80068b4:	4875      	ldr	r0, [pc, #468]	; (8006a8c <checkAktifCalisma+0x1060>)
 80068b6:	f002 fb23 	bl	8008f00 <HAL_GPIO_ReadPin>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d103      	bne.n	80068c8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80068c0:	4b75      	ldr	r3, [pc, #468]	; (8006a98 <checkAktifCalisma+0x106c>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e002      	b.n	80068ce <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80068c8:	4b73      	ldr	r3, [pc, #460]	; (8006a98 <checkAktifCalisma+0x106c>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80068ce:	4b71      	ldr	r3, [pc, #452]	; (8006a94 <checkAktifCalisma+0x1068>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00f      	beq.n	80068f6 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80068d6:	4b71      	ldr	r3, [pc, #452]	; (8006a9c <checkAktifCalisma+0x1070>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10b      	bne.n	80068f6 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80068de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068e2:	486f      	ldr	r0, [pc, #444]	; (8006aa0 <checkAktifCalisma+0x1074>)
 80068e4:	f002 fb0c 	bl	8008f00 <HAL_GPIO_ReadPin>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d103      	bne.n	80068f6 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80068ee:	4b6d      	ldr	r3, [pc, #436]	; (8006aa4 <checkAktifCalisma+0x1078>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	e002      	b.n	80068fc <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80068f6:	4b6b      	ldr	r3, [pc, #428]	; (8006aa4 <checkAktifCalisma+0x1078>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80068fc:	4b66      	ldr	r3, [pc, #408]	; (8006a98 <checkAktifCalisma+0x106c>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00f      	beq.n	8006924 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8006904:	4b65      	ldr	r3, [pc, #404]	; (8006a9c <checkAktifCalisma+0x1070>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d10b      	bne.n	8006924 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 800690c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006910:	4863      	ldr	r0, [pc, #396]	; (8006aa0 <checkAktifCalisma+0x1074>)
 8006912:	f002 faf5 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 800691c:	4b62      	ldr	r3, [pc, #392]	; (8006aa8 <checkAktifCalisma+0x107c>)
 800691e:	2201      	movs	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	e002      	b.n	800692a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8006924:	4b60      	ldr	r3, [pc, #384]	; (8006aa8 <checkAktifCalisma+0x107c>)
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800692a:	4b60      	ldr	r3, [pc, #384]	; (8006aac <checkAktifCalisma+0x1080>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d137      	bne.n	80069a2 <checkAktifCalisma+0xf76>
 8006932:	4b5f      	ldr	r3, [pc, #380]	; (8006ab0 <checkAktifCalisma+0x1084>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d003      	beq.n	8006942 <checkAktifCalisma+0xf16>
 800693a:	4b5d      	ldr	r3, [pc, #372]	; (8006ab0 <checkAktifCalisma+0x1084>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d12f      	bne.n	80069a2 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006942:	4b54      	ldr	r3, [pc, #336]	; (8006a94 <checkAktifCalisma+0x1068>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <checkAktifCalisma+0xf26>
 800694a:	4b53      	ldr	r3, [pc, #332]	; (8006a98 <checkAktifCalisma+0x106c>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d027      	beq.n	80069a2 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006956:	484d      	ldr	r0, [pc, #308]	; (8006a8c <checkAktifCalisma+0x1060>)
 8006958:	f002 fad2 	bl	8008f00 <HAL_GPIO_ReadPin>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d103      	bne.n	800696a <checkAktifCalisma+0xf3e>
 8006962:	4b4e      	ldr	r3, [pc, #312]	; (8006a9c <checkAktifCalisma+0x1070>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d007      	beq.n	800697a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800696a:	4b4e      	ldr	r3, [pc, #312]	; (8006aa4 <checkAktifCalisma+0x1078>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <checkAktifCalisma+0xf4e>
 8006972:	4b4d      	ldr	r3, [pc, #308]	; (8006aa8 <checkAktifCalisma+0x107c>)
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d013      	beq.n	80069a2 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 800697a:	4b4e      	ldr	r3, [pc, #312]	; (8006ab4 <checkAktifCalisma+0x1088>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00f      	beq.n	80069a2 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8006982:	4b4d      	ldr	r3, [pc, #308]	; (8006ab8 <checkAktifCalisma+0x108c>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	f083 0301 	eor.w	r3, r3, #1
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8006990:	4b4a      	ldr	r3, [pc, #296]	; (8006abc <checkAktifCalisma+0x1090>)
 8006992:	2201      	movs	r2, #1
 8006994:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006996:	4b4a      	ldr	r3, [pc, #296]	; (8006ac0 <checkAktifCalisma+0x1094>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a4a      	ldr	r2, [pc, #296]	; (8006ac4 <checkAktifCalisma+0x1098>)
 800699c:	6013      	str	r3, [r2, #0]
			bekle();
 800699e:	f7fe fe0f 	bl	80055c0 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80069a2:	4b47      	ldr	r3, [pc, #284]	; (8006ac0 <checkAktifCalisma+0x1094>)
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4b47      	ldr	r3, [pc, #284]	; (8006ac4 <checkAktifCalisma+0x1098>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	4a46      	ldr	r2, [pc, #280]	; (8006ac8 <checkAktifCalisma+0x109c>)
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d214      	bcs.n	80069de <checkAktifCalisma+0xfb2>
 80069b4:	4b37      	ldr	r3, [pc, #220]	; (8006a94 <checkAktifCalisma+0x1068>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f083 0301 	eor.w	r3, r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d006      	beq.n	80069d0 <checkAktifCalisma+0xfa4>
 80069c2:	4b35      	ldr	r3, [pc, #212]	; (8006a98 <checkAktifCalisma+0x106c>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	f083 0301 	eor.w	r3, r3, #1
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d106      	bne.n	80069de <checkAktifCalisma+0xfb2>
 80069d0:	4b38      	ldr	r3, [pc, #224]	; (8006ab4 <checkAktifCalisma+0x1088>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f083 0301 	eor.w	r3, r3, #1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80069de:	4b37      	ldr	r3, [pc, #220]	; (8006abc <checkAktifCalisma+0x1090>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80069e4:	4b31      	ldr	r3, [pc, #196]	; (8006aac <checkAktifCalisma+0x1080>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d12b      	bne.n	8006a44 <checkAktifCalisma+0x1018>
 80069ec:	4b30      	ldr	r3, [pc, #192]	; (8006ab0 <checkAktifCalisma+0x1084>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d003      	beq.n	80069fc <checkAktifCalisma+0xfd0>
 80069f4:	4b2e      	ldr	r3, [pc, #184]	; (8006ab0 <checkAktifCalisma+0x1084>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d123      	bne.n	8006a44 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80069fc:	4b25      	ldr	r3, [pc, #148]	; (8006a94 <checkAktifCalisma+0x1068>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d103      	bne.n	8006a0c <checkAktifCalisma+0xfe0>
 8006a04:	4b24      	ldr	r3, [pc, #144]	; (8006a98 <checkAktifCalisma+0x106c>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01b      	beq.n	8006a44 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006a0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a10:	481e      	ldr	r0, [pc, #120]	; (8006a8c <checkAktifCalisma+0x1060>)
 8006a12:	f002 fa75 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <checkAktifCalisma+0xff8>
 8006a1c:	4b1f      	ldr	r3, [pc, #124]	; (8006a9c <checkAktifCalisma+0x1070>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006a24:	4b1f      	ldr	r3, [pc, #124]	; (8006aa4 <checkAktifCalisma+0x1078>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <checkAktifCalisma+0x1008>
 8006a2c:	4b1e      	ldr	r3, [pc, #120]	; (8006aa8 <checkAktifCalisma+0x107c>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d007      	beq.n	8006a44 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8006a34:	4b1f      	ldr	r3, [pc, #124]	; (8006ab4 <checkAktifCalisma+0x1088>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8006a3c:	4b23      	ldr	r3, [pc, #140]	; (8006acc <checkAktifCalisma+0x10a0>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e002      	b.n	8006a4a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8006a44:	4b21      	ldr	r3, [pc, #132]	; (8006acc <checkAktifCalisma+0x10a0>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006a4a:	4b18      	ldr	r3, [pc, #96]	; (8006aac <checkAktifCalisma+0x1080>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d140      	bne.n	8006ad4 <checkAktifCalisma+0x10a8>
 8006a52:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <checkAktifCalisma+0x1084>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d003      	beq.n	8006a62 <checkAktifCalisma+0x1036>
 8006a5a:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <checkAktifCalisma+0x1084>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d138      	bne.n	8006ad4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006a62:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <checkAktifCalisma+0x1068>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d103      	bne.n	8006a72 <checkAktifCalisma+0x1046>
 8006a6a:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <checkAktifCalisma+0x106c>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d030      	beq.n	8006ad4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8006a72:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <checkAktifCalisma+0x1088>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d02c      	beq.n	8006ad4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8006a7a:	4b15      	ldr	r3, [pc, #84]	; (8006ad0 <checkAktifCalisma+0x10a4>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	e02b      	b.n	8006ada <checkAktifCalisma+0x10ae>
 8006a82:	bf00      	nop
 8006a84:	40010800 	.word	0x40010800
 8006a88:	20000405 	.word	0x20000405
 8006a8c:	40011000 	.word	0x40011000
 8006a90:	200003fe 	.word	0x200003fe
 8006a94:	20000444 	.word	0x20000444
 8006a98:	20000445 	.word	0x20000445
 8006a9c:	20000404 	.word	0x20000404
 8006aa0:	40010c00 	.word	0x40010c00
 8006aa4:	20000454 	.word	0x20000454
 8006aa8:	20000455 	.word	0x20000455
 8006aac:	20000403 	.word	0x20000403
 8006ab0:	20000400 	.word	0x20000400
 8006ab4:	2000043a 	.word	0x2000043a
 8006ab8:	20000427 	.word	0x20000427
 8006abc:	20000441 	.word	0x20000441
 8006ac0:	200003a0 	.word	0x200003a0
 8006ac4:	200003a4 	.word	0x200003a4
 8006ac8:	20000413 	.word	0x20000413
 8006acc:	20000442 	.word	0x20000442
 8006ad0:	20000443 	.word	0x20000443
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8006ad4:	4b89      	ldr	r3, [pc, #548]	; (8006cfc <checkAktifCalisma+0x12d0>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006ada:	4b89      	ldr	r3, [pc, #548]	; (8006d00 <checkAktifCalisma+0x12d4>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d107      	bne.n	8006af2 <checkAktifCalisma+0x10c6>
 8006ae2:	4b88      	ldr	r3, [pc, #544]	; (8006d04 <checkAktifCalisma+0x12d8>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <checkAktifCalisma+0x10c6>
 8006aea:	4b84      	ldr	r3, [pc, #528]	; (8006cfc <checkAktifCalisma+0x12d0>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006af2:	2201      	movs	r2, #1
 8006af4:	2120      	movs	r1, #32
 8006af6:	4884      	ldr	r0, [pc, #528]	; (8006d08 <checkAktifCalisma+0x12dc>)
 8006af8:	f002 fa19 	bl	8008f2e <HAL_GPIO_WritePin>
 8006afc:	e004      	b.n	8006b08 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006afe:	2200      	movs	r2, #0
 8006b00:	2120      	movs	r1, #32
 8006b02:	4881      	ldr	r0, [pc, #516]	; (8006d08 <checkAktifCalisma+0x12dc>)
 8006b04:	f002 fa13 	bl	8008f2e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006b08:	4b80      	ldr	r3, [pc, #512]	; (8006d0c <checkAktifCalisma+0x12e0>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <checkAktifCalisma+0x1102>
 8006b10:	2102      	movs	r1, #2
 8006b12:	487f      	ldr	r0, [pc, #508]	; (8006d10 <checkAktifCalisma+0x12e4>)
 8006b14:	f002 f9f4 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d107      	bne.n	8006b2e <checkAktifCalisma+0x1102>
 8006b1e:	4b7d      	ldr	r3, [pc, #500]	; (8006d14 <checkAktifCalisma+0x12e8>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <checkAktifCalisma+0x1102>
 8006b26:	4b7c      	ldr	r3, [pc, #496]	; (8006d18 <checkAktifCalisma+0x12ec>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d112      	bne.n	8006b54 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006b2e:	4b7b      	ldr	r3, [pc, #492]	; (8006d1c <checkAktifCalisma+0x12f0>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d066      	beq.n	8006c04 <checkAktifCalisma+0x11d8>
 8006b36:	2104      	movs	r1, #4
 8006b38:	4875      	ldr	r0, [pc, #468]	; (8006d10 <checkAktifCalisma+0x12e4>)
 8006b3a:	f002 f9e1 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d15f      	bne.n	8006c04 <checkAktifCalisma+0x11d8>
 8006b44:	4b73      	ldr	r3, [pc, #460]	; (8006d14 <checkAktifCalisma+0x12e8>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d05b      	beq.n	8006c04 <checkAktifCalisma+0x11d8>
 8006b4c:	4b72      	ldr	r3, [pc, #456]	; (8006d18 <checkAktifCalisma+0x12ec>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d057      	beq.n	8006c04 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8006b54:	4b72      	ldr	r3, [pc, #456]	; (8006d20 <checkAktifCalisma+0x12f4>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	4b70      	ldr	r3, [pc, #448]	; (8006d20 <checkAktifCalisma+0x12f4>)
 8006b5e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006b60:	4b6f      	ldr	r3, [pc, #444]	; (8006d20 <checkAktifCalisma+0x12f4>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b09      	cmp	r3, #9
 8006b66:	d908      	bls.n	8006b7a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006b68:	4b6d      	ldr	r3, [pc, #436]	; (8006d20 <checkAktifCalisma+0x12f4>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006b6e:	4b6d      	ldr	r3, [pc, #436]	; (8006d24 <checkAktifCalisma+0x12f8>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	4b6b      	ldr	r3, [pc, #428]	; (8006d24 <checkAktifCalisma+0x12f8>)
 8006b78:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006b7a:	4b6a      	ldr	r3, [pc, #424]	; (8006d24 <checkAktifCalisma+0x12f8>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b09      	cmp	r3, #9
 8006b80:	d908      	bls.n	8006b94 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8006b82:	4b68      	ldr	r3, [pc, #416]	; (8006d24 <checkAktifCalisma+0x12f8>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006b88:	4b67      	ldr	r3, [pc, #412]	; (8006d28 <checkAktifCalisma+0x12fc>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	4b65      	ldr	r3, [pc, #404]	; (8006d28 <checkAktifCalisma+0x12fc>)
 8006b92:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006b94:	4b64      	ldr	r3, [pc, #400]	; (8006d28 <checkAktifCalisma+0x12fc>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b09      	cmp	r3, #9
 8006b9a:	d908      	bls.n	8006bae <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006b9c:	4b62      	ldr	r3, [pc, #392]	; (8006d28 <checkAktifCalisma+0x12fc>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8006ba2:	4b62      	ldr	r3, [pc, #392]	; (8006d2c <checkAktifCalisma+0x1300>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	4b60      	ldr	r3, [pc, #384]	; (8006d2c <checkAktifCalisma+0x1300>)
 8006bac:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006bae:	4b5f      	ldr	r3, [pc, #380]	; (8006d2c <checkAktifCalisma+0x1300>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b09      	cmp	r3, #9
 8006bb4:	d908      	bls.n	8006bc8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8006bb6:	4b5d      	ldr	r3, [pc, #372]	; (8006d2c <checkAktifCalisma+0x1300>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006bbc:	4b5c      	ldr	r3, [pc, #368]	; (8006d30 <checkAktifCalisma+0x1304>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	4b5a      	ldr	r3, [pc, #360]	; (8006d30 <checkAktifCalisma+0x1304>)
 8006bc6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006bc8:	4b59      	ldr	r3, [pc, #356]	; (8006d30 <checkAktifCalisma+0x1304>)
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	4b59      	ldr	r3, [pc, #356]	; (8006d34 <checkAktifCalisma+0x1308>)
 8006bce:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006bd2:	4b56      	ldr	r3, [pc, #344]	; (8006d2c <checkAktifCalisma+0x1300>)
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	4b57      	ldr	r3, [pc, #348]	; (8006d34 <checkAktifCalisma+0x1308>)
 8006bd8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006bda:	4b53      	ldr	r3, [pc, #332]	; (8006d28 <checkAktifCalisma+0x12fc>)
 8006bdc:	781a      	ldrb	r2, [r3, #0]
 8006bde:	4b55      	ldr	r3, [pc, #340]	; (8006d34 <checkAktifCalisma+0x1308>)
 8006be0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006be2:	4b50      	ldr	r3, [pc, #320]	; (8006d24 <checkAktifCalisma+0x12f8>)
 8006be4:	781a      	ldrb	r2, [r3, #0]
 8006be6:	4b53      	ldr	r3, [pc, #332]	; (8006d34 <checkAktifCalisma+0x1308>)
 8006be8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006bea:	4b4d      	ldr	r3, [pc, #308]	; (8006d20 <checkAktifCalisma+0x12f4>)
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	4b51      	ldr	r3, [pc, #324]	; (8006d34 <checkAktifCalisma+0x1308>)
 8006bf0:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006bf2:	4b51      	ldr	r3, [pc, #324]	; (8006d38 <checkAktifCalisma+0x130c>)
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006bf8:	4b44      	ldr	r3, [pc, #272]	; (8006d0c <checkAktifCalisma+0x12e0>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006bfe:	4b47      	ldr	r3, [pc, #284]	; (8006d1c <checkAktifCalisma+0x12f0>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c08:	484c      	ldr	r0, [pc, #304]	; (8006d3c <checkAktifCalisma+0x1310>)
 8006c0a:	f002 f979 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d016      	beq.n	8006c42 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006c14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c18:	4848      	ldr	r0, [pc, #288]	; (8006d3c <checkAktifCalisma+0x1310>)
 8006c1a:	f002 f971 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00e      	beq.n	8006c42 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c28:	4844      	ldr	r0, [pc, #272]	; (8006d3c <checkAktifCalisma+0x1310>)
 8006c2a:	f002 f969 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006c34:	2140      	movs	r1, #64	; 0x40
 8006c36:	4836      	ldr	r0, [pc, #216]	; (8006d10 <checkAktifCalisma+0x12e4>)
 8006c38:	f002 f962 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d103      	bne.n	8006c4a <checkAktifCalisma+0x121e>
			startBasili=1;
 8006c42:	4b3f      	ldr	r3, [pc, #252]	; (8006d40 <checkAktifCalisma+0x1314>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e002      	b.n	8006c50 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006c4a:	4b3d      	ldr	r3, [pc, #244]	; (8006d40 <checkAktifCalisma+0x1314>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006c50:	4b3b      	ldr	r3, [pc, #236]	; (8006d40 <checkAktifCalisma+0x1314>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d014      	beq.n	8006c82 <checkAktifCalisma+0x1256>
 8006c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c5c:	4837      	ldr	r0, [pc, #220]	; (8006d3c <checkAktifCalisma+0x1310>)
 8006c5e:	f002 f94f 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d10c      	bne.n	8006c82 <checkAktifCalisma+0x1256>
			hataVar=1;
 8006c68:	4b36      	ldr	r3, [pc, #216]	; (8006d44 <checkAktifCalisma+0x1318>)
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006c6e:	2001      	movs	r0, #1
 8006c70:	f7fe f8c4 	bl	8004dfc <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006c74:	2001      	movs	r0, #1
 8006c76:	f7fe fc27 	bl	80054c8 <hata2EEPROM>
			acilstophatasi=1;
 8006c7a:	4b33      	ldr	r3, [pc, #204]	; (8006d48 <checkAktifCalisma+0x131c>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	e018      	b.n	8006cb4 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006c82:	4b31      	ldr	r3, [pc, #196]	; (8006d48 <checkAktifCalisma+0x131c>)
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d014      	beq.n	8006cb4 <checkAktifCalisma+0x1288>
 8006c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c8e:	482b      	ldr	r0, [pc, #172]	; (8006d3c <checkAktifCalisma+0x1310>)
 8006c90:	f002 f936 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10c      	bne.n	8006cb4 <checkAktifCalisma+0x1288>
 8006c9a:	4b29      	ldr	r3, [pc, #164]	; (8006d40 <checkAktifCalisma+0x1314>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	f083 0301 	eor.w	r3, r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8006ca8:	4b27      	ldr	r3, [pc, #156]	; (8006d48 <checkAktifCalisma+0x131c>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006cae:	2001      	movs	r0, #1
 8006cb0:	f7fe f850 	bl	8004d54 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006cb4:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <checkAktifCalisma+0x1320>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f083 0301 	eor.w	r3, r3, #1
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d04c      	beq.n	8006d5c <checkAktifCalisma+0x1330>
 8006cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006cc6:	481d      	ldr	r0, [pc, #116]	; (8006d3c <checkAktifCalisma+0x1310>)
 8006cc8:	f002 f91a 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <checkAktifCalisma+0x12ae>
 8006cd2:	4b1f      	ldr	r3, [pc, #124]	; (8006d50 <checkAktifCalisma+0x1324>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d040      	beq.n	8006d5c <checkAktifCalisma+0x1330>
 8006cda:	4b1e      	ldr	r3, [pc, #120]	; (8006d54 <checkAktifCalisma+0x1328>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d13c      	bne.n	8006d5c <checkAktifCalisma+0x1330>
			hataVar=1;
 8006ce2:	4b18      	ldr	r3, [pc, #96]	; (8006d44 <checkAktifCalisma+0x1318>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006ce8:	2002      	movs	r0, #2
 8006cea:	f7fe f887 	bl	8004dfc <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006cee:	2002      	movs	r0, #2
 8006cf0:	f7fe fbea 	bl	80054c8 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8006cf4:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <checkAktifCalisma+0x132c>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e047      	b.n	8006d8c <checkAktifCalisma+0x1360>
 8006cfc:	20000443 	.word	0x20000443
 8006d00:	20000442 	.word	0x20000442
 8006d04:	20000441 	.word	0x20000441
 8006d08:	40010800 	.word	0x40010800
 8006d0c:	20000437 	.word	0x20000437
 8006d10:	40011000 	.word	0x40011000
 8006d14:	200003fe 	.word	0x200003fe
 8006d18:	2000043a 	.word	0x2000043a
 8006d1c:	20000438 	.word	0x20000438
 8006d20:	200003f5 	.word	0x200003f5
 8006d24:	200003f6 	.word	0x200003f6
 8006d28:	200000a4 	.word	0x200000a4
 8006d2c:	200000a5 	.word	0x200000a5
 8006d30:	200003f7 	.word	0x200003f7
 8006d34:	20000328 	.word	0x20000328
 8006d38:	20000424 	.word	0x20000424
 8006d3c:	40010c00 	.word	0x40010c00
 8006d40:	20000446 	.word	0x20000446
 8006d44:	2000044d 	.word	0x2000044d
 8006d48:	20000448 	.word	0x20000448
 8006d4c:	2000044f 	.word	0x2000044f
 8006d50:	20000459 	.word	0x20000459
 8006d54:	200003fc 	.word	0x200003fc
 8006d58:	20000449 	.word	0x20000449
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006d5c:	4b97      	ldr	r3, [pc, #604]	; (8006fbc <checkAktifCalisma+0x1590>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d013      	beq.n	8006d8c <checkAktifCalisma+0x1360>
 8006d64:	4b96      	ldr	r3, [pc, #600]	; (8006fc0 <checkAktifCalisma+0x1594>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00f      	beq.n	8006d8c <checkAktifCalisma+0x1360>
 8006d6c:	4b95      	ldr	r3, [pc, #596]	; (8006fc4 <checkAktifCalisma+0x1598>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	f083 0301 	eor.w	r3, r3, #1
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d008      	beq.n	8006d8c <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8006d7a:	4b90      	ldr	r3, [pc, #576]	; (8006fbc <checkAktifCalisma+0x1590>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006d80:	4b91      	ldr	r3, [pc, #580]	; (8006fc8 <checkAktifCalisma+0x159c>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006d86:	2002      	movs	r0, #2
 8006d88:	f7fd ffe4 	bl	8004d54 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006d8c:	4b8f      	ldr	r3, [pc, #572]	; (8006fcc <checkAktifCalisma+0x15a0>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d11c      	bne.n	8006dce <checkAktifCalisma+0x13a2>
 8006d94:	4b8e      	ldr	r3, [pc, #568]	; (8006fd0 <checkAktifCalisma+0x15a4>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d118      	bne.n	8006dce <checkAktifCalisma+0x13a2>
 8006d9c:	4b8d      	ldr	r3, [pc, #564]	; (8006fd4 <checkAktifCalisma+0x15a8>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d014      	beq.n	8006dce <checkAktifCalisma+0x13a2>
 8006da4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006da8:	488b      	ldr	r0, [pc, #556]	; (8006fd8 <checkAktifCalisma+0x15ac>)
 8006daa:	f002 f8a9 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d10c      	bne.n	8006dce <checkAktifCalisma+0x13a2>
			hataVar=1;
 8006db4:	4b89      	ldr	r3, [pc, #548]	; (8006fdc <checkAktifCalisma+0x15b0>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006dba:	2003      	movs	r0, #3
 8006dbc:	f7fe f81e 	bl	8004dfc <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006dc0:	2003      	movs	r0, #3
 8006dc2:	f7fe fb81 	bl	80054c8 <hata2EEPROM>
			basinchatasi=1;
 8006dc6:	4b86      	ldr	r3, [pc, #536]	; (8006fe0 <checkAktifCalisma+0x15b4>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	e015      	b.n	8006dfa <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006dce:	4b84      	ldr	r3, [pc, #528]	; (8006fe0 <checkAktifCalisma+0x15b4>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d011      	beq.n	8006dfa <checkAktifCalisma+0x13ce>
 8006dd6:	4b7d      	ldr	r3, [pc, #500]	; (8006fcc <checkAktifCalisma+0x15a0>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d10d      	bne.n	8006dfa <checkAktifCalisma+0x13ce>
 8006dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006de2:	4880      	ldr	r0, [pc, #512]	; (8006fe4 <checkAktifCalisma+0x15b8>)
 8006de4:	f002 f88c 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d105      	bne.n	8006dfa <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8006dee:	4b7c      	ldr	r3, [pc, #496]	; (8006fe0 <checkAktifCalisma+0x15b4>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006df4:	2003      	movs	r0, #3
 8006df6:	f7fd ffad 	bl	8004d54 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006dfa:	4b7b      	ldr	r3, [pc, #492]	; (8006fe8 <checkAktifCalisma+0x15bc>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d103      	bne.n	8006e0a <checkAktifCalisma+0x13de>
 8006e02:	4b7a      	ldr	r3, [pc, #488]	; (8006fec <checkAktifCalisma+0x15c0>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d01c      	beq.n	8006e44 <checkAktifCalisma+0x1418>
 8006e0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e0e:	4878      	ldr	r0, [pc, #480]	; (8006ff0 <checkAktifCalisma+0x15c4>)
 8006e10:	f002 f876 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d114      	bne.n	8006e44 <checkAktifCalisma+0x1418>
 8006e1a:	4b76      	ldr	r3, [pc, #472]	; (8006ff4 <checkAktifCalisma+0x15c8>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d003      	beq.n	8006e2a <checkAktifCalisma+0x13fe>
 8006e22:	4b74      	ldr	r3, [pc, #464]	; (8006ff4 <checkAktifCalisma+0x15c8>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d10c      	bne.n	8006e44 <checkAktifCalisma+0x1418>
			hataVar=1;
 8006e2a:	4b6c      	ldr	r3, [pc, #432]	; (8006fdc <checkAktifCalisma+0x15b0>)
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006e30:	2004      	movs	r0, #4
 8006e32:	f7fd ffe3 	bl	8004dfc <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006e36:	2004      	movs	r0, #4
 8006e38:	f7fe fb46 	bl	80054c8 <hata2EEPROM>
			katkapisivicihatasi=1;
 8006e3c:	4b6e      	ldr	r3, [pc, #440]	; (8006ff8 <checkAktifCalisma+0x15cc>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	e01f      	b.n	8006e84 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006e44:	4b6c      	ldr	r3, [pc, #432]	; (8006ff8 <checkAktifCalisma+0x15cc>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01b      	beq.n	8006e84 <checkAktifCalisma+0x1458>
 8006e4c:	4b6b      	ldr	r3, [pc, #428]	; (8006ffc <checkAktifCalisma+0x15d0>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d017      	beq.n	8006e84 <checkAktifCalisma+0x1458>
 8006e54:	4b64      	ldr	r3, [pc, #400]	; (8006fe8 <checkAktifCalisma+0x15bc>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f083 0301 	eor.w	r3, r3, #1
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d010      	beq.n	8006e84 <checkAktifCalisma+0x1458>
 8006e62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e66:	4862      	ldr	r0, [pc, #392]	; (8006ff0 <checkAktifCalisma+0x15c4>)
 8006e68:	f002 f84a 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d108      	bne.n	8006e84 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8006e72:	4b61      	ldr	r3, [pc, #388]	; (8006ff8 <checkAktifCalisma+0x15cc>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006e78:	4b5c      	ldr	r3, [pc, #368]	; (8006fec <checkAktifCalisma+0x15c0>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006e7e:	2004      	movs	r0, #4
 8006e80:	f7fd ff68 	bl	8004d54 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006e84:	4b58      	ldr	r3, [pc, #352]	; (8006fe8 <checkAktifCalisma+0x15bc>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <checkAktifCalisma+0x1468>
 8006e8c:	4b5c      	ldr	r3, [pc, #368]	; (8007000 <checkAktifCalisma+0x15d4>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01c      	beq.n	8006ece <checkAktifCalisma+0x14a2>
 8006e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e98:	4855      	ldr	r0, [pc, #340]	; (8006ff0 <checkAktifCalisma+0x15c4>)
 8006e9a:	f002 f831 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d114      	bne.n	8006ece <checkAktifCalisma+0x14a2>
 8006ea4:	4b53      	ldr	r3, [pc, #332]	; (8006ff4 <checkAktifCalisma+0x15c8>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d003      	beq.n	8006eb4 <checkAktifCalisma+0x1488>
 8006eac:	4b51      	ldr	r3, [pc, #324]	; (8006ff4 <checkAktifCalisma+0x15c8>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d10c      	bne.n	8006ece <checkAktifCalisma+0x14a2>
			hataVar=1;
 8006eb4:	4b49      	ldr	r3, [pc, #292]	; (8006fdc <checkAktifCalisma+0x15b0>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006eba:	2005      	movs	r0, #5
 8006ebc:	f7fd ff9e 	bl	8004dfc <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006ec0:	2005      	movs	r0, #5
 8006ec2:	f7fe fb01 	bl	80054c8 <hata2EEPROM>
			tablakapisivicihatasi=1;
 8006ec6:	4b4f      	ldr	r3, [pc, #316]	; (8007004 <checkAktifCalisma+0x15d8>)
 8006ec8:	2201      	movs	r2, #1
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	e023      	b.n	8006f16 <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006ece:	4b4d      	ldr	r3, [pc, #308]	; (8007004 <checkAktifCalisma+0x15d8>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d01f      	beq.n	8006f16 <checkAktifCalisma+0x14ea>
 8006ed6:	4b49      	ldr	r3, [pc, #292]	; (8006ffc <checkAktifCalisma+0x15d0>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d01b      	beq.n	8006f16 <checkAktifCalisma+0x14ea>
 8006ede:	4b42      	ldr	r3, [pc, #264]	; (8006fe8 <checkAktifCalisma+0x15bc>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	f083 0301 	eor.w	r3, r3, #1
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d014      	beq.n	8006f16 <checkAktifCalisma+0x14ea>
 8006eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ef0:	483f      	ldr	r0, [pc, #252]	; (8006ff0 <checkAktifCalisma+0x15c4>)
 8006ef2:	f002 f805 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10c      	bne.n	8006f16 <checkAktifCalisma+0x14ea>
 8006efc:	4b3f      	ldr	r3, [pc, #252]	; (8006ffc <checkAktifCalisma+0x15d0>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8006f04:	4b3f      	ldr	r3, [pc, #252]	; (8007004 <checkAktifCalisma+0x15d8>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006f0a:	4b3d      	ldr	r3, [pc, #244]	; (8007000 <checkAktifCalisma+0x15d4>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006f10:	2005      	movs	r0, #5
 8006f12:	f7fd ff1f 	bl	8004d54 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006f16:	4b2f      	ldr	r3, [pc, #188]	; (8006fd4 <checkAktifCalisma+0x15a8>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d107      	bne.n	8006f2e <checkAktifCalisma+0x1502>
 8006f1e:	4b29      	ldr	r3, [pc, #164]	; (8006fc4 <checkAktifCalisma+0x1598>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d103      	bne.n	8006f2e <checkAktifCalisma+0x1502>
 8006f26:	4b38      	ldr	r3, [pc, #224]	; (8007008 <checkAktifCalisma+0x15dc>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d014      	beq.n	8006f58 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8006f2e:	4b37      	ldr	r3, [pc, #220]	; (800700c <checkAktifCalisma+0x15e0>)
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b37      	ldr	r3, [pc, #220]	; (8007010 <checkAktifCalisma+0x15e4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	4a36      	ldr	r2, [pc, #216]	; (8007014 <checkAktifCalisma+0x15e8>)
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d30b      	bcc.n	8006f58 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8006f40:	4b26      	ldr	r3, [pc, #152]	; (8006fdc <checkAktifCalisma+0x15b0>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006f46:	2006      	movs	r0, #6
 8006f48:	f7fd ff58 	bl	8004dfc <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006f4c:	2006      	movs	r0, #6
 8006f4e:	f7fe fabb 	bl	80054c8 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8006f52:	4b31      	ldr	r3, [pc, #196]	; (8007018 <checkAktifCalisma+0x15ec>)
 8006f54:	2201      	movs	r2, #1
 8006f56:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006f58:	4b2f      	ldr	r3, [pc, #188]	; (8007018 <checkAktifCalisma+0x15ec>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d013      	beq.n	8006f88 <checkAktifCalisma+0x155c>
 8006f60:	2108      	movs	r1, #8
 8006f62:	4823      	ldr	r0, [pc, #140]	; (8006ff0 <checkAktifCalisma+0x15c4>)
 8006f64:	f001 ffcc 	bl	8008f00 <HAL_GPIO_ReadPin>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00c      	beq.n	8006f88 <checkAktifCalisma+0x155c>
 8006f6e:	4b1e      	ldr	r3, [pc, #120]	; (8006fe8 <checkAktifCalisma+0x15bc>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	f083 0301 	eor.w	r3, r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8006f7c:	4b26      	ldr	r3, [pc, #152]	; (8007018 <checkAktifCalisma+0x15ec>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006f82:	2006      	movs	r0, #6
 8006f84:	f7fd fee6 	bl	8004d54 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006f88:	4b24      	ldr	r3, [pc, #144]	; (800701c <checkAktifCalisma+0x15f0>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <checkAktifCalisma+0x157c>
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <checkAktifCalisma+0x1598>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d107      	bne.n	8006fa8 <checkAktifCalisma+0x157c>
 8006f98:	4b21      	ldr	r3, [pc, #132]	; (8007020 <checkAktifCalisma+0x15f4>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d103      	bne.n	8006fa8 <checkAktifCalisma+0x157c>
 8006fa0:	4b19      	ldr	r3, [pc, #100]	; (8007008 <checkAktifCalisma+0x15dc>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d03f      	beq.n	8007028 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8006fa8:	4b1e      	ldr	r3, [pc, #120]	; (8007024 <checkAktifCalisma+0x15f8>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <checkAktifCalisma+0x15c0>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006fb4:	4b12      	ldr	r3, [pc, #72]	; (8007000 <checkAktifCalisma+0x15d4>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	e03c      	b.n	8007036 <checkAktifCalisma+0x160a>
 8006fbc:	20000449 	.word	0x20000449
 8006fc0:	2000044f 	.word	0x2000044f
 8006fc4:	20000430 	.word	0x20000430
 8006fc8:	20000459 	.word	0x20000459
 8006fcc:	200003fb 	.word	0x200003fb
 8006fd0:	200003ff 	.word	0x200003ff
 8006fd4:	2000044c 	.word	0x2000044c
 8006fd8:	40011000 	.word	0x40011000
 8006fdc:	2000044d 	.word	0x2000044d
 8006fe0:	20000456 	.word	0x20000456
 8006fe4:	40010c00 	.word	0x40010c00
 8006fe8:	20000446 	.word	0x20000446
 8006fec:	2000045a 	.word	0x2000045a
 8006ff0:	40010800 	.word	0x40010800
 8006ff4:	20000400 	.word	0x20000400
 8006ff8:	20000457 	.word	0x20000457
 8006ffc:	2000043a 	.word	0x2000043a
 8007000:	2000045b 	.word	0x2000045b
 8007004:	20000458 	.word	0x20000458
 8007008:	2000042f 	.word	0x2000042f
 800700c:	200003a0 	.word	0x200003a0
 8007010:	200003b4 	.word	0x200003b4
 8007014:	20000410 	.word	0x20000410
 8007018:	20000447 	.word	0x20000447
 800701c:	2000042d 	.word	0x2000042d
 8007020:	2000042e 	.word	0x2000042e
 8007024:	2000044e 	.word	0x2000044e
		} else {
			makineCalisiyor=1;
 8007028:	4b1e      	ldr	r3, [pc, #120]	; (80070a4 <checkAktifCalisma+0x1678>)
 800702a:	2201      	movs	r2, #1
 800702c:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800702e:	4b1e      	ldr	r3, [pc, #120]	; (80070a8 <checkAktifCalisma+0x167c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1e      	ldr	r2, [pc, #120]	; (80070ac <checkAktifCalisma+0x1680>)
 8007034:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007036:	4b1e      	ldr	r3, [pc, #120]	; (80070b0 <checkAktifCalisma+0x1684>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d02f      	beq.n	800709e <checkAktifCalisma+0x1672>
 800703e:	4b1d      	ldr	r3, [pc, #116]	; (80070b4 <checkAktifCalisma+0x1688>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f083 0301 	eor.w	r3, r3, #1
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d028      	beq.n	800709e <checkAktifCalisma+0x1672>
 800704c:	4b1a      	ldr	r3, [pc, #104]	; (80070b8 <checkAktifCalisma+0x168c>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	f083 0301 	eor.w	r3, r3, #1
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d021      	beq.n	800709e <checkAktifCalisma+0x1672>
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <checkAktifCalisma+0x1690>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	f083 0301 	eor.w	r3, r3, #1
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01a      	beq.n	800709e <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007068:	4b15      	ldr	r3, [pc, #84]	; (80070c0 <checkAktifCalisma+0x1694>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	f083 0301 	eor.w	r3, r3, #1
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d013      	beq.n	800709e <checkAktifCalisma+0x1672>
 8007076:	4b13      	ldr	r3, [pc, #76]	; (80070c4 <checkAktifCalisma+0x1698>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	f083 0301 	eor.w	r3, r3, #1
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00c      	beq.n	800709e <checkAktifCalisma+0x1672>
 8007084:	4b10      	ldr	r3, [pc, #64]	; (80070c8 <checkAktifCalisma+0x169c>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	f083 0301 	eor.w	r3, r3, #1
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <checkAktifCalisma+0x1672>
			hataVar=0;
 8007092:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <checkAktifCalisma+0x1684>)
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007098:	2007      	movs	r0, #7
 800709a:	f7fd fe5b 	bl	8004d54 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800709e:	bf00      	nop
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	2000044e 	.word	0x2000044e
 80070a8:	200003a0 	.word	0x200003a0
 80070ac:	200003b4 	.word	0x200003b4
 80070b0:	2000044d 	.word	0x2000044d
 80070b4:	20000448 	.word	0x20000448
 80070b8:	20000449 	.word	0x20000449
 80070bc:	20000456 	.word	0x20000456
 80070c0:	20000457 	.word	0x20000457
 80070c4:	20000458 	.word	0x20000458
 80070c8:	20000447 	.word	0x20000447

080070cc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80070d0:	4b8b      	ldr	r3, [pc, #556]	; (8007300 <checkDemoModCalisma+0x234>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	f040 8229 	bne.w	800752c <checkDemoModCalisma+0x460>
 80070da:	4b8a      	ldr	r3, [pc, #552]	; (8007304 <checkDemoModCalisma+0x238>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 8224 	beq.w	800752c <checkDemoModCalisma+0x460>
 80070e4:	4b88      	ldr	r3, [pc, #544]	; (8007308 <checkDemoModCalisma+0x23c>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 821f 	bne.w	800752c <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80070ee:	2102      	movs	r1, #2
 80070f0:	4886      	ldr	r0, [pc, #536]	; (800730c <checkDemoModCalisma+0x240>)
 80070f2:	f001 ff05 	bl	8008f00 <HAL_GPIO_ReadPin>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d11d      	bne.n	8007138 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80070fc:	4b84      	ldr	r3, [pc, #528]	; (8007310 <checkDemoModCalisma+0x244>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	f083 0301 	eor.w	r3, r3, #1
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d016      	beq.n	8007138 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800710a:	4b82      	ldr	r3, [pc, #520]	; (8007314 <checkDemoModCalisma+0x248>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	f083 0301 	eor.w	r3, r3, #1
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00f      	beq.n	8007138 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007118:	4b7f      	ldr	r3, [pc, #508]	; (8007318 <checkDemoModCalisma+0x24c>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	f083 0301 	eor.w	r3, r3, #1
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d008      	beq.n	8007138 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007126:	2201      	movs	r2, #1
 8007128:	2104      	movs	r1, #4
 800712a:	487c      	ldr	r0, [pc, #496]	; (800731c <checkDemoModCalisma+0x250>)
 800712c:	f001 feff 	bl	8008f2e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007130:	4b7b      	ldr	r3, [pc, #492]	; (8007320 <checkDemoModCalisma+0x254>)
 8007132:	2201      	movs	r2, #1
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	e00e      	b.n	8007156 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007138:	2102      	movs	r1, #2
 800713a:	4874      	ldr	r0, [pc, #464]	; (800730c <checkDemoModCalisma+0x240>)
 800713c:	f001 fee0 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007140:	4603      	mov	r3, r0
 8007142:	2b01      	cmp	r3, #1
 8007144:	d107      	bne.n	8007156 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007146:	2200      	movs	r2, #0
 8007148:	2104      	movs	r1, #4
 800714a:	4874      	ldr	r0, [pc, #464]	; (800731c <checkDemoModCalisma+0x250>)
 800714c:	f001 feef 	bl	8008f2e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007150:	4b73      	ldr	r3, [pc, #460]	; (8007320 <checkDemoModCalisma+0x254>)
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007156:	4b72      	ldr	r3, [pc, #456]	; (8007320 <checkDemoModCalisma+0x254>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10b      	bne.n	8007176 <checkDemoModCalisma+0xaa>
 800715e:	4b6d      	ldr	r3, [pc, #436]	; (8007314 <checkDemoModCalisma+0x248>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d107      	bne.n	8007176 <checkDemoModCalisma+0xaa>
 8007166:	4b6c      	ldr	r3, [pc, #432]	; (8007318 <checkDemoModCalisma+0x24c>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <checkDemoModCalisma+0xaa>
 800716e:	4b68      	ldr	r3, [pc, #416]	; (8007310 <checkDemoModCalisma+0x244>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007176:	2201      	movs	r2, #1
 8007178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800717c:	4867      	ldr	r0, [pc, #412]	; (800731c <checkDemoModCalisma+0x250>)
 800717e:	f001 fed6 	bl	8008f2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007182:	2201      	movs	r2, #1
 8007184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007188:	4864      	ldr	r0, [pc, #400]	; (800731c <checkDemoModCalisma+0x250>)
 800718a:	f001 fed0 	bl	8008f2e <HAL_GPIO_WritePin>
 800718e:	e00b      	b.n	80071a8 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007190:	2200      	movs	r2, #0
 8007192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007196:	4861      	ldr	r0, [pc, #388]	; (800731c <checkDemoModCalisma+0x250>)
 8007198:	f001 fec9 	bl	8008f2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800719c:	2200      	movs	r2, #0
 800719e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80071a2:	485e      	ldr	r0, [pc, #376]	; (800731c <checkDemoModCalisma+0x250>)
 80071a4:	f001 fec3 	bl	8008f2e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80071a8:	2102      	movs	r1, #2
 80071aa:	4858      	ldr	r0, [pc, #352]	; (800730c <checkDemoModCalisma+0x240>)
 80071ac:	f001 fea8 	bl	8008f00 <HAL_GPIO_ReadPin>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d10d      	bne.n	80071d2 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80071b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80071ba:	4854      	ldr	r0, [pc, #336]	; (800730c <checkDemoModCalisma+0x240>)
 80071bc:	f001 fea0 	bl	8008f00 <HAL_GPIO_ReadPin>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d105      	bne.n	80071d2 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80071c6:	4b56      	ldr	r3, [pc, #344]	; (8007320 <checkDemoModCalisma+0x254>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	f083 0301 	eor.w	r3, r3, #1
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80071d2:	2102      	movs	r1, #2
 80071d4:	484d      	ldr	r0, [pc, #308]	; (800730c <checkDemoModCalisma+0x240>)
 80071d6:	f001 fe93 	bl	8008f00 <HAL_GPIO_ReadPin>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d125      	bne.n	800722c <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80071e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80071e4:	4849      	ldr	r0, [pc, #292]	; (800730c <checkDemoModCalisma+0x240>)
 80071e6:	f001 fe8b 	bl	8008f00 <HAL_GPIO_ReadPin>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d11d      	bne.n	800722c <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80071f0:	4b4b      	ldr	r3, [pc, #300]	; (8007320 <checkDemoModCalisma+0x254>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f083 0301 	eor.w	r3, r3, #1
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d016      	beq.n	800722c <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80071fe:	4b44      	ldr	r3, [pc, #272]	; (8007310 <checkDemoModCalisma+0x244>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	f083 0301 	eor.w	r3, r3, #1
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00f      	beq.n	800722c <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 800720c:	4b42      	ldr	r3, [pc, #264]	; (8007318 <checkDemoModCalisma+0x24c>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	f083 0301 	eor.w	r3, r3, #1
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d008      	beq.n	800722c <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800721a:	2201      	movs	r2, #1
 800721c:	2120      	movs	r1, #32
 800721e:	483b      	ldr	r0, [pc, #236]	; (800730c <checkDemoModCalisma+0x240>)
 8007220:	f001 fe85 	bl	8008f2e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007224:	4b3b      	ldr	r3, [pc, #236]	; (8007314 <checkDemoModCalisma+0x248>)
 8007226:	2201      	movs	r2, #1
 8007228:	701a      	strb	r2, [r3, #0]
 800722a:	e007      	b.n	800723c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800722c:	2200      	movs	r2, #0
 800722e:	2120      	movs	r1, #32
 8007230:	4836      	ldr	r0, [pc, #216]	; (800730c <checkDemoModCalisma+0x240>)
 8007232:	f001 fe7c 	bl	8008f2e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007236:	4b37      	ldr	r3, [pc, #220]	; (8007314 <checkDemoModCalisma+0x248>)
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800723c:	2102      	movs	r1, #2
 800723e:	4833      	ldr	r0, [pc, #204]	; (800730c <checkDemoModCalisma+0x240>)
 8007240:	f001 fe5e 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d125      	bne.n	8007296 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800724a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800724e:	482f      	ldr	r0, [pc, #188]	; (800730c <checkDemoModCalisma+0x240>)
 8007250:	f001 fe56 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d11d      	bne.n	8007296 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800725a:	4b31      	ldr	r3, [pc, #196]	; (8007320 <checkDemoModCalisma+0x254>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	f083 0301 	eor.w	r3, r3, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d016      	beq.n	8007296 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007268:	4b2a      	ldr	r3, [pc, #168]	; (8007314 <checkDemoModCalisma+0x248>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	f083 0301 	eor.w	r3, r3, #1
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00f      	beq.n	8007296 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007276:	4b26      	ldr	r3, [pc, #152]	; (8007310 <checkDemoModCalisma+0x244>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	f083 0301 	eor.w	r3, r3, #1
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007284:	2201      	movs	r2, #1
 8007286:	2110      	movs	r1, #16
 8007288:	4820      	ldr	r0, [pc, #128]	; (800730c <checkDemoModCalisma+0x240>)
 800728a:	f001 fe50 	bl	8008f2e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800728e:	4b22      	ldr	r3, [pc, #136]	; (8007318 <checkDemoModCalisma+0x24c>)
 8007290:	2201      	movs	r2, #1
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	e007      	b.n	80072a6 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007296:	2200      	movs	r2, #0
 8007298:	2110      	movs	r1, #16
 800729a:	481c      	ldr	r0, [pc, #112]	; (800730c <checkDemoModCalisma+0x240>)
 800729c:	f001 fe47 	bl	8008f2e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80072a0:	4b1d      	ldr	r3, [pc, #116]	; (8007318 <checkDemoModCalisma+0x24c>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80072a6:	2104      	movs	r1, #4
 80072a8:	4818      	ldr	r0, [pc, #96]	; (800730c <checkDemoModCalisma+0x240>)
 80072aa:	f001 fe29 	bl	8008f00 <HAL_GPIO_ReadPin>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d139      	bne.n	8007328 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80072b4:	4b1a      	ldr	r3, [pc, #104]	; (8007320 <checkDemoModCalisma+0x254>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	f083 0301 	eor.w	r3, r3, #1
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d032      	beq.n	8007328 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80072c2:	4b15      	ldr	r3, [pc, #84]	; (8007318 <checkDemoModCalisma+0x24c>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	f083 0301 	eor.w	r3, r3, #1
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d02b      	beq.n	8007328 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80072d0:	4b10      	ldr	r3, [pc, #64]	; (8007314 <checkDemoModCalisma+0x248>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	f083 0301 	eor.w	r3, r3, #1
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d024      	beq.n	8007328 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80072de:	2201      	movs	r2, #1
 80072e0:	2102      	movs	r1, #2
 80072e2:	480e      	ldr	r0, [pc, #56]	; (800731c <checkDemoModCalisma+0x250>)
 80072e4:	f001 fe23 	bl	8008f2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80072e8:	2201      	movs	r2, #1
 80072ea:	2101      	movs	r1, #1
 80072ec:	480b      	ldr	r0, [pc, #44]	; (800731c <checkDemoModCalisma+0x250>)
 80072ee:	f001 fe1e 	bl	8008f2e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80072f2:	4b07      	ldr	r3, [pc, #28]	; (8007310 <checkDemoModCalisma+0x244>)
 80072f4:	2201      	movs	r2, #1
 80072f6:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80072f8:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <checkDemoModCalisma+0x258>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	e027      	b.n	8007350 <checkDemoModCalisma+0x284>
 8007300:	20000416 	.word	0x20000416
 8007304:	2000044a 	.word	0x2000044a
 8007308:	20000415 	.word	0x20000415
 800730c:	40011000 	.word	0x40011000
 8007310:	20000451 	.word	0x20000451
 8007314:	20000452 	.word	0x20000452
 8007318:	20000453 	.word	0x20000453
 800731c:	40010c00 	.word	0x40010c00
 8007320:	20000450 	.word	0x20000450
 8007324:	20000436 	.word	0x20000436
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007328:	2104      	movs	r1, #4
 800732a:	48a0      	ldr	r0, [pc, #640]	; (80075ac <checkDemoModCalisma+0x4e0>)
 800732c:	f001 fde8 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007330:	4603      	mov	r3, r0
 8007332:	2b01      	cmp	r3, #1
 8007334:	d10c      	bne.n	8007350 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007336:	2200      	movs	r2, #0
 8007338:	2102      	movs	r1, #2
 800733a:	489d      	ldr	r0, [pc, #628]	; (80075b0 <checkDemoModCalisma+0x4e4>)
 800733c:	f001 fdf7 	bl	8008f2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007340:	2200      	movs	r2, #0
 8007342:	2101      	movs	r1, #1
 8007344:	489a      	ldr	r0, [pc, #616]	; (80075b0 <checkDemoModCalisma+0x4e4>)
 8007346:	f001 fdf2 	bl	8008f2e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800734a:	4b9a      	ldr	r3, [pc, #616]	; (80075b4 <checkDemoModCalisma+0x4e8>)
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007350:	2104      	movs	r1, #4
 8007352:	4896      	ldr	r0, [pc, #600]	; (80075ac <checkDemoModCalisma+0x4e0>)
 8007354:	f001 fdd4 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007358:	4603      	mov	r3, r0
 800735a:	2b01      	cmp	r3, #1
 800735c:	d10d      	bne.n	800737a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800735e:	2201      	movs	r2, #1
 8007360:	2180      	movs	r1, #128	; 0x80
 8007362:	4895      	ldr	r0, [pc, #596]	; (80075b8 <checkDemoModCalisma+0x4ec>)
 8007364:	f001 fde3 	bl	8008f2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007368:	2201      	movs	r2, #1
 800736a:	2120      	movs	r1, #32
 800736c:	4892      	ldr	r0, [pc, #584]	; (80075b8 <checkDemoModCalisma+0x4ec>)
 800736e:	f001 fdde 	bl	8008f2e <HAL_GPIO_WritePin>
			timer3 = millis;
 8007372:	4b92      	ldr	r3, [pc, #584]	; (80075bc <checkDemoModCalisma+0x4f0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a92      	ldr	r2, [pc, #584]	; (80075c0 <checkDemoModCalisma+0x4f4>)
 8007378:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800737a:	4b90      	ldr	r3, [pc, #576]	; (80075bc <checkDemoModCalisma+0x4f0>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b90      	ldr	r3, [pc, #576]	; (80075c0 <checkDemoModCalisma+0x4f4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b04      	cmp	r3, #4
 8007386:	d909      	bls.n	800739c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007388:	2200      	movs	r2, #0
 800738a:	2180      	movs	r1, #128	; 0x80
 800738c:	488a      	ldr	r0, [pc, #552]	; (80075b8 <checkDemoModCalisma+0x4ec>)
 800738e:	f001 fdce 	bl	8008f2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007392:	2200      	movs	r2, #0
 8007394:	2120      	movs	r1, #32
 8007396:	4888      	ldr	r0, [pc, #544]	; (80075b8 <checkDemoModCalisma+0x4ec>)
 8007398:	f001 fdc9 	bl	8008f2e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800739c:	2102      	movs	r1, #2
 800739e:	4883      	ldr	r0, [pc, #524]	; (80075ac <checkDemoModCalisma+0x4e0>)
 80073a0:	f001 fdae 	bl	8008f00 <HAL_GPIO_ReadPin>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d108      	bne.n	80073bc <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80073aa:	2201      	movs	r2, #1
 80073ac:	2140      	movs	r1, #64	; 0x40
 80073ae:	4882      	ldr	r0, [pc, #520]	; (80075b8 <checkDemoModCalisma+0x4ec>)
 80073b0:	f001 fdbd 	bl	8008f2e <HAL_GPIO_WritePin>
			timer3 = millis;
 80073b4:	4b81      	ldr	r3, [pc, #516]	; (80075bc <checkDemoModCalisma+0x4f0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a81      	ldr	r2, [pc, #516]	; (80075c0 <checkDemoModCalisma+0x4f4>)
 80073ba:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80073bc:	4b7f      	ldr	r3, [pc, #508]	; (80075bc <checkDemoModCalisma+0x4f0>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4b7f      	ldr	r3, [pc, #508]	; (80075c0 <checkDemoModCalisma+0x4f4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d904      	bls.n	80073d4 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80073ca:	2200      	movs	r2, #0
 80073cc:	2140      	movs	r1, #64	; 0x40
 80073ce:	487a      	ldr	r0, [pc, #488]	; (80075b8 <checkDemoModCalisma+0x4ec>)
 80073d0:	f001 fdad 	bl	8008f2e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80073d4:	4b7b      	ldr	r3, [pc, #492]	; (80075c4 <checkDemoModCalisma+0x4f8>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d058      	beq.n	800748e <checkDemoModCalisma+0x3c2>
 80073dc:	4b7a      	ldr	r3, [pc, #488]	; (80075c8 <checkDemoModCalisma+0x4fc>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d054      	beq.n	800748e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80073e4:	4b79      	ldr	r3, [pc, #484]	; (80075cc <checkDemoModCalisma+0x500>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	3301      	adds	r3, #1
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	4b77      	ldr	r3, [pc, #476]	; (80075cc <checkDemoModCalisma+0x500>)
 80073ee:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80073f0:	4b76      	ldr	r3, [pc, #472]	; (80075cc <checkDemoModCalisma+0x500>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b09      	cmp	r3, #9
 80073f6:	d908      	bls.n	800740a <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80073f8:	4b74      	ldr	r3, [pc, #464]	; (80075cc <checkDemoModCalisma+0x500>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80073fe:	4b74      	ldr	r3, [pc, #464]	; (80075d0 <checkDemoModCalisma+0x504>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	3301      	adds	r3, #1
 8007404:	b2da      	uxtb	r2, r3
 8007406:	4b72      	ldr	r3, [pc, #456]	; (80075d0 <checkDemoModCalisma+0x504>)
 8007408:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800740a:	4b71      	ldr	r3, [pc, #452]	; (80075d0 <checkDemoModCalisma+0x504>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b09      	cmp	r3, #9
 8007410:	d908      	bls.n	8007424 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007412:	4b6f      	ldr	r3, [pc, #444]	; (80075d0 <checkDemoModCalisma+0x504>)
 8007414:	2200      	movs	r2, #0
 8007416:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007418:	4b6e      	ldr	r3, [pc, #440]	; (80075d4 <checkDemoModCalisma+0x508>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	3301      	adds	r3, #1
 800741e:	b2da      	uxtb	r2, r3
 8007420:	4b6c      	ldr	r3, [pc, #432]	; (80075d4 <checkDemoModCalisma+0x508>)
 8007422:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007424:	4b6b      	ldr	r3, [pc, #428]	; (80075d4 <checkDemoModCalisma+0x508>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b09      	cmp	r3, #9
 800742a:	d908      	bls.n	800743e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 800742c:	4b69      	ldr	r3, [pc, #420]	; (80075d4 <checkDemoModCalisma+0x508>)
 800742e:	2200      	movs	r2, #0
 8007430:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007432:	4b69      	ldr	r3, [pc, #420]	; (80075d8 <checkDemoModCalisma+0x50c>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	3301      	adds	r3, #1
 8007438:	b2da      	uxtb	r2, r3
 800743a:	4b67      	ldr	r3, [pc, #412]	; (80075d8 <checkDemoModCalisma+0x50c>)
 800743c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800743e:	4b66      	ldr	r3, [pc, #408]	; (80075d8 <checkDemoModCalisma+0x50c>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b09      	cmp	r3, #9
 8007444:	d908      	bls.n	8007458 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007446:	4b64      	ldr	r3, [pc, #400]	; (80075d8 <checkDemoModCalisma+0x50c>)
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 800744c:	4b63      	ldr	r3, [pc, #396]	; (80075dc <checkDemoModCalisma+0x510>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	3301      	adds	r3, #1
 8007452:	b2da      	uxtb	r2, r3
 8007454:	4b61      	ldr	r3, [pc, #388]	; (80075dc <checkDemoModCalisma+0x510>)
 8007456:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007458:	4b60      	ldr	r3, [pc, #384]	; (80075dc <checkDemoModCalisma+0x510>)
 800745a:	781a      	ldrb	r2, [r3, #0]
 800745c:	4b60      	ldr	r3, [pc, #384]	; (80075e0 <checkDemoModCalisma+0x514>)
 800745e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007462:	4b5d      	ldr	r3, [pc, #372]	; (80075d8 <checkDemoModCalisma+0x50c>)
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	4b5e      	ldr	r3, [pc, #376]	; (80075e0 <checkDemoModCalisma+0x514>)
 8007468:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800746a:	4b5a      	ldr	r3, [pc, #360]	; (80075d4 <checkDemoModCalisma+0x508>)
 800746c:	781a      	ldrb	r2, [r3, #0]
 800746e:	4b5c      	ldr	r3, [pc, #368]	; (80075e0 <checkDemoModCalisma+0x514>)
 8007470:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007472:	4b57      	ldr	r3, [pc, #348]	; (80075d0 <checkDemoModCalisma+0x504>)
 8007474:	781a      	ldrb	r2, [r3, #0]
 8007476:	4b5a      	ldr	r3, [pc, #360]	; (80075e0 <checkDemoModCalisma+0x514>)
 8007478:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800747a:	4b54      	ldr	r3, [pc, #336]	; (80075cc <checkDemoModCalisma+0x500>)
 800747c:	781a      	ldrb	r2, [r3, #0]
 800747e:	4b58      	ldr	r3, [pc, #352]	; (80075e0 <checkDemoModCalisma+0x514>)
 8007480:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007482:	4b58      	ldr	r3, [pc, #352]	; (80075e4 <checkDemoModCalisma+0x518>)
 8007484:	2201      	movs	r2, #1
 8007486:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007488:	4b4f      	ldr	r3, [pc, #316]	; (80075c8 <checkDemoModCalisma+0x4fc>)
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800748e:	4b56      	ldr	r3, [pc, #344]	; (80075e8 <checkDemoModCalisma+0x51c>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f040 8087 	bne.w	80075a6 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007498:	4a54      	ldr	r2, [pc, #336]	; (80075ec <checkDemoModCalisma+0x520>)
 800749a:	2101      	movs	r1, #1
 800749c:	2002      	movs	r0, #2
 800749e:	f7f9 f909 	bl	80006b4 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 80074a2:	4a53      	ldr	r2, [pc, #332]	; (80075f0 <checkDemoModCalisma+0x524>)
 80074a4:	2101      	movs	r1, #1
 80074a6:	2001      	movs	r0, #1
 80074a8:	f7f9 f904 	bl	80006b4 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80074ac:	4b4b      	ldr	r3, [pc, #300]	; (80075dc <checkDemoModCalisma+0x510>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	220a      	movs	r2, #10
 80074b2:	4950      	ldr	r1, [pc, #320]	; (80075f4 <checkDemoModCalisma+0x528>)
 80074b4:	4618      	mov	r0, r3
 80074b6:	f004 fd4f 	bl	800bf58 <itoa>
			lcd_print(2,12,snum);
 80074ba:	4a4e      	ldr	r2, [pc, #312]	; (80075f4 <checkDemoModCalisma+0x528>)
 80074bc:	210c      	movs	r1, #12
 80074be:	2002      	movs	r0, #2
 80074c0:	f7f9 f8f8 	bl	80006b4 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80074c4:	4b44      	ldr	r3, [pc, #272]	; (80075d8 <checkDemoModCalisma+0x50c>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	220a      	movs	r2, #10
 80074ca:	494a      	ldr	r1, [pc, #296]	; (80075f4 <checkDemoModCalisma+0x528>)
 80074cc:	4618      	mov	r0, r3
 80074ce:	f004 fd43 	bl	800bf58 <itoa>
			lcd_print(2,13,snum);
 80074d2:	4a48      	ldr	r2, [pc, #288]	; (80075f4 <checkDemoModCalisma+0x528>)
 80074d4:	210d      	movs	r1, #13
 80074d6:	2002      	movs	r0, #2
 80074d8:	f7f9 f8ec 	bl	80006b4 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80074dc:	4b3d      	ldr	r3, [pc, #244]	; (80075d4 <checkDemoModCalisma+0x508>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	220a      	movs	r2, #10
 80074e2:	4944      	ldr	r1, [pc, #272]	; (80075f4 <checkDemoModCalisma+0x528>)
 80074e4:	4618      	mov	r0, r3
 80074e6:	f004 fd37 	bl	800bf58 <itoa>
			lcd_print(2,14,snum);
 80074ea:	4a42      	ldr	r2, [pc, #264]	; (80075f4 <checkDemoModCalisma+0x528>)
 80074ec:	210e      	movs	r1, #14
 80074ee:	2002      	movs	r0, #2
 80074f0:	f7f9 f8e0 	bl	80006b4 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80074f4:	4b36      	ldr	r3, [pc, #216]	; (80075d0 <checkDemoModCalisma+0x504>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	220a      	movs	r2, #10
 80074fa:	493e      	ldr	r1, [pc, #248]	; (80075f4 <checkDemoModCalisma+0x528>)
 80074fc:	4618      	mov	r0, r3
 80074fe:	f004 fd2b 	bl	800bf58 <itoa>
			lcd_print(2,15,snum);
 8007502:	4a3c      	ldr	r2, [pc, #240]	; (80075f4 <checkDemoModCalisma+0x528>)
 8007504:	210f      	movs	r1, #15
 8007506:	2002      	movs	r0, #2
 8007508:	f7f9 f8d4 	bl	80006b4 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 800750c:	4b2f      	ldr	r3, [pc, #188]	; (80075cc <checkDemoModCalisma+0x500>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	220a      	movs	r2, #10
 8007512:	4938      	ldr	r1, [pc, #224]	; (80075f4 <checkDemoModCalisma+0x528>)
 8007514:	4618      	mov	r0, r3
 8007516:	f004 fd1f 	bl	800bf58 <itoa>
			lcd_print(2,16,snum);
 800751a:	4a36      	ldr	r2, [pc, #216]	; (80075f4 <checkDemoModCalisma+0x528>)
 800751c:	2110      	movs	r1, #16
 800751e:	2002      	movs	r0, #2
 8007520:	f7f9 f8c8 	bl	80006b4 <lcd_print>
			mesajYazildi=1;
 8007524:	4b34      	ldr	r3, [pc, #208]	; (80075f8 <checkDemoModCalisma+0x52c>)
 8007526:	2201      	movs	r2, #1
 8007528:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800752a:	e03c      	b.n	80075a6 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 800752c:	4b33      	ldr	r3, [pc, #204]	; (80075fc <checkDemoModCalisma+0x530>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d003      	beq.n	800753c <checkDemoModCalisma+0x470>
 8007534:	4b2c      	ldr	r3, [pc, #176]	; (80075e8 <checkDemoModCalisma+0x51c>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d134      	bne.n	80075a6 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800753c:	2200      	movs	r2, #0
 800753e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007542:	481b      	ldr	r0, [pc, #108]	; (80075b0 <checkDemoModCalisma+0x4e4>)
 8007544:	f001 fcf3 	bl	8008f2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007548:	2200      	movs	r2, #0
 800754a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800754e:	4818      	ldr	r0, [pc, #96]	; (80075b0 <checkDemoModCalisma+0x4e4>)
 8007550:	f001 fced 	bl	8008f2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007554:	2200      	movs	r2, #0
 8007556:	2104      	movs	r1, #4
 8007558:	4815      	ldr	r0, [pc, #84]	; (80075b0 <checkDemoModCalisma+0x4e4>)
 800755a:	f001 fce8 	bl	8008f2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800755e:	2200      	movs	r2, #0
 8007560:	2102      	movs	r1, #2
 8007562:	4813      	ldr	r0, [pc, #76]	; (80075b0 <checkDemoModCalisma+0x4e4>)
 8007564:	f001 fce3 	bl	8008f2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007568:	2200      	movs	r2, #0
 800756a:	2101      	movs	r1, #1
 800756c:	4810      	ldr	r0, [pc, #64]	; (80075b0 <checkDemoModCalisma+0x4e4>)
 800756e:	f001 fcde 	bl	8008f2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007572:	2200      	movs	r2, #0
 8007574:	2120      	movs	r1, #32
 8007576:	480d      	ldr	r0, [pc, #52]	; (80075ac <checkDemoModCalisma+0x4e0>)
 8007578:	f001 fcd9 	bl	8008f2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800757c:	2200      	movs	r2, #0
 800757e:	2110      	movs	r1, #16
 8007580:	480a      	ldr	r0, [pc, #40]	; (80075ac <checkDemoModCalisma+0x4e0>)
 8007582:	f001 fcd4 	bl	8008f2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007586:	2200      	movs	r2, #0
 8007588:	2180      	movs	r1, #128	; 0x80
 800758a:	480b      	ldr	r0, [pc, #44]	; (80075b8 <checkDemoModCalisma+0x4ec>)
 800758c:	f001 fccf 	bl	8008f2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007590:	2200      	movs	r2, #0
 8007592:	2140      	movs	r1, #64	; 0x40
 8007594:	4808      	ldr	r0, [pc, #32]	; (80075b8 <checkDemoModCalisma+0x4ec>)
 8007596:	f001 fcca 	bl	8008f2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800759a:	2200      	movs	r2, #0
 800759c:	2120      	movs	r1, #32
 800759e:	4806      	ldr	r0, [pc, #24]	; (80075b8 <checkDemoModCalisma+0x4ec>)
 80075a0:	f001 fcc5 	bl	8008f2e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80075a4:	e7ff      	b.n	80075a6 <checkDemoModCalisma+0x4da>
 80075a6:	bf00      	nop
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	40011000 	.word	0x40011000
 80075b0:	40010c00 	.word	0x40010c00
 80075b4:	20000451 	.word	0x20000451
 80075b8:	40010800 	.word	0x40010800
 80075bc:	200003a0 	.word	0x200003a0
 80075c0:	200003b0 	.word	0x200003b0
 80075c4:	20000450 	.word	0x20000450
 80075c8:	20000436 	.word	0x20000436
 80075cc:	200003f5 	.word	0x200003f5
 80075d0:	200003f6 	.word	0x200003f6
 80075d4:	200000a4 	.word	0x200000a4
 80075d8:	200000a5 	.word	0x200000a5
 80075dc:	200003f7 	.word	0x200003f7
 80075e0:	20000328 	.word	0x20000328
 80075e4:	20000424 	.word	0x20000424
 80075e8:	20000415 	.word	0x20000415
 80075ec:	0800d768 	.word	0x0800d768
 80075f0:	0800d774 	.word	0x0800d774
 80075f4:	20000398 	.word	0x20000398
 80075f8:	2000042c 	.word	0x2000042c
 80075fc:	20000416 	.word	0x20000416

08007600 <mainLoop>:
	char* result = malloc(strlen(combinedString) + 1);
	strcpy(result, combinedString);
	return result;
}

void mainLoop() {
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8007606:	f7fe f925 	bl	8005854 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800760a:	2101      	movs	r1, #1
 800760c:	48ad      	ldr	r0, [pc, #692]	; (80078c4 <mainLoop+0x2c4>)
 800760e:	f001 fc77 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d136      	bne.n	8007686 <mainLoop+0x86>
 8007618:	2108      	movs	r1, #8
 800761a:	48ab      	ldr	r0, [pc, #684]	; (80078c8 <mainLoop+0x2c8>)
 800761c:	f001 fc70 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d12f      	bne.n	8007686 <mainLoop+0x86>
 8007626:	2102      	movs	r1, #2
 8007628:	48a6      	ldr	r0, [pc, #664]	; (80078c4 <mainLoop+0x2c4>)
 800762a:	f001 fc69 	bl	8008f00 <HAL_GPIO_ReadPin>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d128      	bne.n	8007686 <mainLoop+0x86>
 8007634:	2104      	movs	r1, #4
 8007636:	48a3      	ldr	r0, [pc, #652]	; (80078c4 <mainLoop+0x2c4>)
 8007638:	f001 fc62 	bl	8008f00 <HAL_GPIO_ReadPin>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d121      	bne.n	8007686 <mainLoop+0x86>
 8007642:	2108      	movs	r1, #8
 8007644:	489f      	ldr	r0, [pc, #636]	; (80078c4 <mainLoop+0x2c4>)
 8007646:	f001 fc5b 	bl	8008f00 <HAL_GPIO_ReadPin>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d11a      	bne.n	8007686 <mainLoop+0x86>
 8007650:	2180      	movs	r1, #128	; 0x80
 8007652:	489d      	ldr	r0, [pc, #628]	; (80078c8 <mainLoop+0x2c8>)
 8007654:	f001 fc54 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007658:	4603      	mov	r3, r0
 800765a:	2b01      	cmp	r3, #1
 800765c:	d113      	bne.n	8007686 <mainLoop+0x86>
 800765e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007662:	4899      	ldr	r0, [pc, #612]	; (80078c8 <mainLoop+0x2c8>)
 8007664:	f001 fc4c 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007668:	4603      	mov	r3, r0
 800766a:	2b01      	cmp	r3, #1
 800766c:	d10b      	bne.n	8007686 <mainLoop+0x86>
 800766e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007672:	4895      	ldr	r0, [pc, #596]	; (80078c8 <mainLoop+0x2c8>)
 8007674:	f001 fc44 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007678:	4603      	mov	r3, r0
 800767a:	2b01      	cmp	r3, #1
 800767c:	d103      	bne.n	8007686 <mainLoop+0x86>
			butonKontrol=0;
 800767e:	4b93      	ldr	r3, [pc, #588]	; (80078cc <mainLoop+0x2cc>)
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	e003      	b.n	800768e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8007686:	4b92      	ldr	r3, [pc, #584]	; (80078d0 <mainLoop+0x2d0>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a92      	ldr	r2, [pc, #584]	; (80078d4 <mainLoop+0x2d4>)
 800768c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800768e:	4b92      	ldr	r3, [pc, #584]	; (80078d8 <mainLoop+0x2d8>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d03a      	beq.n	800770c <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007696:	bf00      	nop
 8007698:	4890      	ldr	r0, [pc, #576]	; (80078dc <mainLoop+0x2dc>)
 800769a:	f002 fa5a 	bl	8009b52 <HAL_I2C_GetError>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d0f9      	beq.n	8007698 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80076a4:	bf00      	nop
 80076a6:	488d      	ldr	r0, [pc, #564]	; (80078dc <mainLoop+0x2dc>)
 80076a8:	f002 fa46 	bl	8009b38 <HAL_I2C_GetState>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d1f9      	bne.n	80076a6 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80076b2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80076b6:	9302      	str	r3, [sp, #8]
 80076b8:	236e      	movs	r3, #110	; 0x6e
 80076ba:	9301      	str	r3, [sp, #4]
 80076bc:	4b88      	ldr	r3, [pc, #544]	; (80078e0 <mainLoop+0x2e0>)
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	236e      	movs	r3, #110	; 0x6e
 80076c2:	2200      	movs	r2, #0
 80076c4:	21a0      	movs	r1, #160	; 0xa0
 80076c6:	4885      	ldr	r0, [pc, #532]	; (80078dc <mainLoop+0x2dc>)
 80076c8:	f001 fed4 	bl	8009474 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80076cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076d0:	f000 fe46 	bl	8008360 <HAL_Delay>

		  hafizaYaz=0;
 80076d4:	4b80      	ldr	r3, [pc, #512]	; (80078d8 <mainLoop+0x2d8>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80076da:	4b82      	ldr	r3, [pc, #520]	; (80078e4 <mainLoop+0x2e4>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d105      	bne.n	80076ee <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80076e2:	4a81      	ldr	r2, [pc, #516]	; (80078e8 <mainLoop+0x2e8>)
 80076e4:	2101      	movs	r1, #1
 80076e6:	2002      	movs	r0, #2
 80076e8:	f7f8 ffe4 	bl	80006b4 <lcd_print>
 80076ec:	e008      	b.n	8007700 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80076ee:	4b7d      	ldr	r3, [pc, #500]	; (80078e4 <mainLoop+0x2e4>)
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d104      	bne.n	8007700 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80076f6:	4a7d      	ldr	r2, [pc, #500]	; (80078ec <mainLoop+0x2ec>)
 80076f8:	2101      	movs	r1, #1
 80076fa:	2002      	movs	r0, #2
 80076fc:	f7f8 ffda 	bl	80006b4 <lcd_print>
		  }

		  HAL_Delay(1000);
 8007700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007704:	f000 fe2c 	bl	8008360 <HAL_Delay>
		  lcd_clear();
 8007708:	f7f9 f800 	bl	800070c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800770c:	4b78      	ldr	r3, [pc, #480]	; (80078f0 <mainLoop+0x2f0>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	f083 0301 	eor.w	r3, r3, #1
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d06e      	beq.n	80077f8 <mainLoop+0x1f8>
 800771a:	4870      	ldr	r0, [pc, #448]	; (80078dc <mainLoop+0x2dc>)
 800771c:	f002 fa0c 	bl	8009b38 <HAL_I2C_GetState>
 8007720:	4603      	mov	r3, r0
 8007722:	2b20      	cmp	r3, #32
 8007724:	d168      	bne.n	80077f8 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8007726:	4b73      	ldr	r3, [pc, #460]	; (80078f4 <mainLoop+0x2f4>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	f083 0301 	eor.w	r3, r3, #1
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d044      	beq.n	80077be <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8007734:	4a70      	ldr	r2, [pc, #448]	; (80078f8 <mainLoop+0x2f8>)
 8007736:	2101      	movs	r1, #1
 8007738:	2001      	movs	r0, #1
 800773a:	f7f8 ffbb 	bl	80006b4 <lcd_print>
			  if(dilSecim==0) {
 800773e:	4b69      	ldr	r3, [pc, #420]	; (80078e4 <mainLoop+0x2e4>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d105      	bne.n	8007752 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8007746:	4a6d      	ldr	r2, [pc, #436]	; (80078fc <mainLoop+0x2fc>)
 8007748:	2101      	movs	r1, #1
 800774a:	2002      	movs	r0, #2
 800774c:	f7f8 ffb2 	bl	80006b4 <lcd_print>
 8007750:	e008      	b.n	8007764 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8007752:	4b64      	ldr	r3, [pc, #400]	; (80078e4 <mainLoop+0x2e4>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d104      	bne.n	8007764 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 800775a:	4a69      	ldr	r2, [pc, #420]	; (8007900 <mainLoop+0x300>)
 800775c:	2101      	movs	r1, #1
 800775e:	2002      	movs	r0, #2
 8007760:	f7f8 ffa8 	bl	80006b4 <lcd_print>
			  }
			  HAL_Delay(1000);
 8007764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007768:	f000 fdfa 	bl	8008360 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800776c:	bf00      	nop
 800776e:	485b      	ldr	r0, [pc, #364]	; (80078dc <mainLoop+0x2dc>)
 8007770:	f002 f9ef 	bl	8009b52 <HAL_I2C_GetError>
 8007774:	4603      	mov	r3, r0
 8007776:	2b04      	cmp	r3, #4
 8007778:	d0f9      	beq.n	800776e <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800777a:	e003      	b.n	8007784 <mainLoop+0x184>
				  HAL_Delay(1000);
 800777c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007780:	f000 fdee 	bl	8008360 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007784:	4855      	ldr	r0, [pc, #340]	; (80078dc <mainLoop+0x2dc>)
 8007786:	f002 f9d7 	bl	8009b38 <HAL_I2C_GetState>
 800778a:	4603      	mov	r3, r0
 800778c:	2b20      	cmp	r3, #32
 800778e:	d1f5      	bne.n	800777c <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8007790:	4b54      	ldr	r3, [pc, #336]	; (80078e4 <mainLoop+0x2e4>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d105      	bne.n	80077a4 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8007798:	4a5a      	ldr	r2, [pc, #360]	; (8007904 <mainLoop+0x304>)
 800779a:	2101      	movs	r1, #1
 800779c:	2002      	movs	r0, #2
 800779e:	f7f8 ff89 	bl	80006b4 <lcd_print>
 80077a2:	e008      	b.n	80077b6 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80077a4:	4b4f      	ldr	r3, [pc, #316]	; (80078e4 <mainLoop+0x2e4>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d104      	bne.n	80077b6 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80077ac:	4a56      	ldr	r2, [pc, #344]	; (8007908 <mainLoop+0x308>)
 80077ae:	2101      	movs	r1, #1
 80077b0:	2002      	movs	r0, #2
 80077b2:	f7f8 ff7f 	bl	80006b4 <lcd_print>
			  }

			  ilkOkuma=1;
 80077b6:	4b4f      	ldr	r3, [pc, #316]	; (80078f4 <mainLoop+0x2f4>)
 80077b8:	2201      	movs	r2, #1
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	e014      	b.n	80077e8 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80077be:	4b49      	ldr	r3, [pc, #292]	; (80078e4 <mainLoop+0x2e4>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80077c6:	4a51      	ldr	r2, [pc, #324]	; (800790c <mainLoop+0x30c>)
 80077c8:	2101      	movs	r1, #1
 80077ca:	2002      	movs	r0, #2
 80077cc:	f7f8 ff72 	bl	80006b4 <lcd_print>
 80077d0:	e008      	b.n	80077e4 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80077d2:	4b44      	ldr	r3, [pc, #272]	; (80078e4 <mainLoop+0x2e4>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d104      	bne.n	80077e4 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80077da:	4a4d      	ldr	r2, [pc, #308]	; (8007910 <mainLoop+0x310>)
 80077dc:	2101      	movs	r1, #1
 80077de:	2002      	movs	r0, #2
 80077e0:	f7f8 ff68 	bl	80006b4 <lcd_print>
			  }
			  lcd_clear();
 80077e4:	f7f8 ff92 	bl	800070c <lcd_clear>
		  }

		  lcd_clear();
 80077e8:	f7f8 ff90 	bl	800070c <lcd_clear>

		  eepromKontrol(1);
 80077ec:	2001      	movs	r0, #1
 80077ee:	f7fd fbe7 	bl	8004fc0 <eepromKontrol>
		  hafizaOku=1;
 80077f2:	4b3f      	ldr	r3, [pc, #252]	; (80078f0 <mainLoop+0x2f0>)
 80077f4:	2201      	movs	r2, #1
 80077f6:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80077f8:	4b46      	ldr	r3, [pc, #280]	; (8007914 <mainLoop+0x314>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d11c      	bne.n	800783a <mainLoop+0x23a>
 8007800:	4b45      	ldr	r3, [pc, #276]	; (8007918 <mainLoop+0x318>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	f083 0301 	eor.w	r3, r3, #1
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d015      	beq.n	800783a <mainLoop+0x23a>
 800780e:	4b43      	ldr	r3, [pc, #268]	; (800791c <mainLoop+0x31c>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d111      	bne.n	800783a <mainLoop+0x23a>
			lcd_clear();
 8007816:	f7f8 ff79 	bl	800070c <lcd_clear>
			HAL_Delay(10);
 800781a:	200a      	movs	r0, #10
 800781c:	f000 fda0 	bl	8008360 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8007820:	4a3f      	ldr	r2, [pc, #252]	; (8007920 <mainLoop+0x320>)
 8007822:	2101      	movs	r1, #1
 8007824:	2001      	movs	r0, #1
 8007826:	f7f8 ff45 	bl	80006b4 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 800782a:	4a3e      	ldr	r2, [pc, #248]	; (8007924 <mainLoop+0x324>)
 800782c:	2101      	movs	r1, #1
 800782e:	2002      	movs	r0, #2
 8007830:	f7f8 ff40 	bl	80006b4 <lcd_print>
			mesajYazildi=1;
 8007834:	4b38      	ldr	r3, [pc, #224]	; (8007918 <mainLoop+0x318>)
 8007836:	2201      	movs	r2, #1
 8007838:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800783a:	4b36      	ldr	r3, [pc, #216]	; (8007914 <mainLoop+0x314>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d112      	bne.n	8007868 <mainLoop+0x268>
 8007842:	2102      	movs	r1, #2
 8007844:	481f      	ldr	r0, [pc, #124]	; (80078c4 <mainLoop+0x2c4>)
 8007846:	f001 fb5b 	bl	8008f00 <HAL_GPIO_ReadPin>
 800784a:	4603      	mov	r3, r0
 800784c:	2b01      	cmp	r3, #1
 800784e:	d10b      	bne.n	8007868 <mainLoop+0x268>
 8007850:	2104      	movs	r1, #4
 8007852:	481c      	ldr	r0, [pc, #112]	; (80078c4 <mainLoop+0x2c4>)
 8007854:	f001 fb54 	bl	8008f00 <HAL_GPIO_ReadPin>
 8007858:	4603      	mov	r3, r0
 800785a:	2b01      	cmp	r3, #1
 800785c:	d104      	bne.n	8007868 <mainLoop+0x268>
			menuGiris=1;
 800785e:	4b2d      	ldr	r3, [pc, #180]	; (8007914 <mainLoop+0x314>)
 8007860:	2201      	movs	r2, #1
 8007862:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007864:	f7f8 ff52 	bl	800070c <lcd_clear>
		}

		if(menuGiris==1) {
 8007868:	4b2a      	ldr	r3, [pc, #168]	; (8007914 <mainLoop+0x314>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d102      	bne.n	8007876 <mainLoop+0x276>
			menu(&hi2c1);
 8007870:	481a      	ldr	r0, [pc, #104]	; (80078dc <mainLoop+0x2dc>)
 8007872:	f7f9 ff1d 	bl	80016b0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800787a:	4813      	ldr	r0, [pc, #76]	; (80078c8 <mainLoop+0x2c8>)
 800787c:	f001 fb6f 	bl	8008f5e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8007880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007884:	4828      	ldr	r0, [pc, #160]	; (8007928 <mainLoop+0x328>)
 8007886:	f001 fb3b 	bl	8008f00 <HAL_GPIO_ReadPin>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <mainLoop+0x2a6>
 8007890:	4b26      	ldr	r3, [pc, #152]	; (800792c <mainLoop+0x32c>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f083 0301 	eor.w	r3, r3, #1
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <mainLoop+0x2a6>
			stopVar=1;
 800789e:	4b24      	ldr	r3, [pc, #144]	; (8007930 <mainLoop+0x330>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	701a      	strb	r2, [r3, #0]
 80078a4:	e002      	b.n	80078ac <mainLoop+0x2ac>
		} else {
			stopVar=0;
 80078a6:	4b22      	ldr	r3, [pc, #136]	; (8007930 <mainLoop+0x330>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80078ac:	f7fd fff2 	bl	8005894 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80078b0:	f7fe f824 	bl	80058fc <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80078b4:	f7fe f868 	bl	8005988 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80078b8:	f7fe f8b8 	bl	8005a2c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80078bc:	f7ff fc06 	bl	80070cc <checkDemoModCalisma>
		checkLCDBacklight();
 80078c0:	e6a1      	b.n	8007606 <mainLoop+0x6>
 80078c2:	bf00      	nop
 80078c4:	40010800 	.word	0x40010800
 80078c8:	40011000 	.word	0x40011000
 80078cc:	20000427 	.word	0x20000427
 80078d0:	200003a0 	.word	0x200003a0
 80078d4:	200003bc 	.word	0x200003bc
 80078d8:	20000424 	.word	0x20000424
 80078dc:	20000244 	.word	0x20000244
 80078e0:	20000328 	.word	0x20000328
 80078e4:	20000419 	.word	0x20000419
 80078e8:	0800d78c 	.word	0x0800d78c
 80078ec:	0800d7a0 	.word	0x0800d7a0
 80078f0:	20000425 	.word	0x20000425
 80078f4:	20000426 	.word	0x20000426
 80078f8:	0800d7b4 	.word	0x0800d7b4
 80078fc:	0800d7c8 	.word	0x0800d7c8
 8007900:	0800d7dc 	.word	0x0800d7dc
 8007904:	0800d7f0 	.word	0x0800d7f0
 8007908:	0800d804 	.word	0x0800d804
 800790c:	0800d818 	.word	0x0800d818
 8007910:	0800d82c 	.word	0x0800d82c
 8007914:	20000415 	.word	0x20000415
 8007918:	2000042c 	.word	0x2000042c
 800791c:	20000416 	.word	0x20000416
 8007920:	0800d6f0 	.word	0x0800d6f0
 8007924:	0800d704 	.word	0x0800d704
 8007928:	40010c00 	.word	0x40010c00
 800792c:	2000044d 	.word	0x2000044d
 8007930:	2000044a 	.word	0x2000044a

08007934 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800793c:	4b04      	ldr	r3, [pc, #16]	; (8007950 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3301      	adds	r3, #1
 8007942:	4a03      	ldr	r2, [pc, #12]	; (8007950 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007944:	6013      	str	r3, [r2, #0]
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr
 8007950:	200003a0 	.word	0x200003a0

08007954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007958:	f000 fca0 	bl	800829c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800795c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007960:	f000 fcfe 	bl	8008360 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007964:	f000 f8d0 	bl	8007b08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007968:	f000 f9f2 	bl	8007d50 <MX_GPIO_Init>
  MX_CAN_Init();
 800796c:	f000 f912 	bl	8007b94 <MX_CAN_Init>
  MX_I2C1_Init();
 8007970:	f000 f944 	bl	8007bfc <MX_I2C1_Init>
  MX_TIM1_Init();
 8007974:	f000 f970 	bl	8007c58 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007978:	f000 f9c0 	bl	8007cfc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800797c:	2201      	movs	r2, #1
 800797e:	2140      	movs	r1, #64	; 0x40
 8007980:	4853      	ldr	r0, [pc, #332]	; (8007ad0 <main+0x17c>)
 8007982:	f001 fad4 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007986:	2201      	movs	r2, #1
 8007988:	2180      	movs	r1, #128	; 0x80
 800798a:	4851      	ldr	r0, [pc, #324]	; (8007ad0 <main+0x17c>)
 800798c:	f001 facf 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007990:	200a      	movs	r0, #10
 8007992:	f000 fce5 	bl	8008360 <HAL_Delay>
  lcd_init();
 8007996:	f7f8 fe5b 	bl	8000650 <lcd_init>
  HAL_Delay(10);
 800799a:	200a      	movs	r0, #10
 800799c:	f000 fce0 	bl	8008360 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80079a0:	484c      	ldr	r0, [pc, #304]	; (8007ad4 <main+0x180>)
 80079a2:	f003 f977 	bl	800ac94 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079a6:	bf00      	nop
 80079a8:	484b      	ldr	r0, [pc, #300]	; (8007ad8 <main+0x184>)
 80079aa:	f002 f8d2 	bl	8009b52 <HAL_I2C_GetError>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d0f9      	beq.n	80079a8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80079b4:	bf00      	nop
 80079b6:	4848      	ldr	r0, [pc, #288]	; (8007ad8 <main+0x184>)
 80079b8:	f002 f8be 	bl	8009b38 <HAL_I2C_GetState>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d1f9      	bne.n	80079b6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80079c2:	2200      	movs	r2, #0
 80079c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80079c8:	4841      	ldr	r0, [pc, #260]	; (8007ad0 <main+0x17c>)
 80079ca:	f001 fab0 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80079ce:	2200      	movs	r2, #0
 80079d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079d4:	483e      	ldr	r0, [pc, #248]	; (8007ad0 <main+0x17c>)
 80079d6:	f001 faaa 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80079da:	2200      	movs	r2, #0
 80079dc:	2104      	movs	r1, #4
 80079de:	483c      	ldr	r0, [pc, #240]	; (8007ad0 <main+0x17c>)
 80079e0:	f001 faa5 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80079e4:	2200      	movs	r2, #0
 80079e6:	2102      	movs	r1, #2
 80079e8:	4839      	ldr	r0, [pc, #228]	; (8007ad0 <main+0x17c>)
 80079ea:	f001 faa0 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2101      	movs	r1, #1
 80079f2:	4837      	ldr	r0, [pc, #220]	; (8007ad0 <main+0x17c>)
 80079f4:	f001 fa9b 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80079f8:	2200      	movs	r2, #0
 80079fa:	2120      	movs	r1, #32
 80079fc:	4837      	ldr	r0, [pc, #220]	; (8007adc <main+0x188>)
 80079fe:	f001 fa96 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007a02:	2200      	movs	r2, #0
 8007a04:	2110      	movs	r1, #16
 8007a06:	4835      	ldr	r0, [pc, #212]	; (8007adc <main+0x188>)
 8007a08:	f001 fa91 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	2180      	movs	r1, #128	; 0x80
 8007a10:	4833      	ldr	r0, [pc, #204]	; (8007ae0 <main+0x18c>)
 8007a12:	f001 fa8c 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007a16:	2200      	movs	r2, #0
 8007a18:	2140      	movs	r1, #64	; 0x40
 8007a1a:	4831      	ldr	r0, [pc, #196]	; (8007ae0 <main+0x18c>)
 8007a1c:	f001 fa87 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007a20:	2200      	movs	r2, #0
 8007a22:	2120      	movs	r1, #32
 8007a24:	482e      	ldr	r0, [pc, #184]	; (8007ae0 <main+0x18c>)
 8007a26:	f001 fa82 	bl	8008f2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2110      	movs	r1, #16
 8007a2e:	482c      	ldr	r0, [pc, #176]	; (8007ae0 <main+0x18c>)
 8007a30:	f001 fa7d 	bl	8008f2e <HAL_GPIO_WritePin>

  i2cTest();
 8007a34:	f7fd fe60 	bl	80056f8 <i2cTest>
  HAL_Delay(100);
 8007a38:	2064      	movs	r0, #100	; 0x64
 8007a3a:	f000 fc91 	bl	8008360 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007a3e:	4a29      	ldr	r2, [pc, #164]	; (8007ae4 <main+0x190>)
 8007a40:	2101      	movs	r1, #1
 8007a42:	2001      	movs	r0, #1
 8007a44:	f7f8 fe36 	bl	80006b4 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007a48:	4a27      	ldr	r2, [pc, #156]	; (8007ae8 <main+0x194>)
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	2002      	movs	r0, #2
 8007a4e:	f7f8 fe31 	bl	80006b4 <lcd_print>
  HAL_Delay(1000);
 8007a52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a56:	f000 fc83 	bl	8008360 <HAL_Delay>
  lcd_clear();
 8007a5a:	f7f8 fe57 	bl	800070c <lcd_clear>

  eepromKontrol(0);
 8007a5e:	2000      	movs	r0, #0
 8007a60:	f7fd faae 	bl	8004fc0 <eepromKontrol>
  HAL_Delay(200);
 8007a64:	20c8      	movs	r0, #200	; 0xc8
 8007a66:	f000 fc7b 	bl	8008360 <HAL_Delay>

  lcd_clear();
 8007a6a:	f7f8 fe4f 	bl	800070c <lcd_clear>
  HAL_Delay(200);
 8007a6e:	20c8      	movs	r0, #200	; 0xc8
 8007a70:	f000 fc76 	bl	8008360 <HAL_Delay>

  backLightTimer = millis;
 8007a74:	4b1d      	ldr	r3, [pc, #116]	; (8007aec <main+0x198>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1d      	ldr	r2, [pc, #116]	; (8007af0 <main+0x19c>)
 8007a7a:	6013      	str	r3, [r2, #0]

  if(iotMode != 0) {
 8007a7c:	4b1d      	ldr	r3, [pc, #116]	; (8007af4 <main+0x1a0>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01c      	beq.n	8007abe <main+0x16a>
	  if(machineID[11] == '\0') {
 8007a84:	4b1c      	ldr	r3, [pc, #112]	; (8007af8 <main+0x1a4>)
 8007a86:	7adb      	ldrb	r3, [r3, #11]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <main+0x13e>
	  	  takeMachineID(0);
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f7f9 f821 	bl	8000ad4 <takeMachineID>
	  }

	  if(wifiSSID[0] == '\0') {
 8007a92:	4b1a      	ldr	r3, [pc, #104]	; (8007afc <main+0x1a8>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d106      	bne.n	8007aa8 <main+0x154>
		  takeWifiSSID(0);
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f7f9 f970 	bl	8000d80 <takeWifiSSID>
		  HAL_Delay(500);
 8007aa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007aa4:	f000 fc5c 	bl	8008360 <HAL_Delay>
	  }

	  if(wifiPass[0] == '\0') {
 8007aa8:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <main+0x1ac>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d106      	bne.n	8007abe <main+0x16a>
		  takeWifiPass(0);
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f7f9 fb1d 	bl	80010f0 <takeWifiPass>
		  HAL_Delay(500);
 8007ab6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007aba:	f000 fc51 	bl	8008360 <HAL_Delay>
	  }
  }

  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007abe:	4a10      	ldr	r2, [pc, #64]	; (8007b00 <main+0x1ac>)
 8007ac0:	490e      	ldr	r1, [pc, #56]	; (8007afc <main+0x1a8>)
 8007ac2:	4810      	ldr	r0, [pc, #64]	; (8007b04 <main+0x1b0>)
 8007ac4:	f7f8 fbb6 	bl	8000234 <ESP8266_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007ac8:	f7ff fd9a 	bl	8007600 <mainLoop>
 8007acc:	e7fc      	b.n	8007ac8 <main+0x174>
 8007ace:	bf00      	nop
 8007ad0:	40010c00 	.word	0x40010c00
 8007ad4:	20000298 	.word	0x20000298
 8007ad8:	20000244 	.word	0x20000244
 8007adc:	40011000 	.word	0x40011000
 8007ae0:	40010800 	.word	0x40010800
 8007ae4:	0800d840 	.word	0x0800d840
 8007ae8:	0800d854 	.word	0x0800d854
 8007aec:	200003a0 	.word	0x200003a0
 8007af0:	200003bc 	.word	0x200003bc
 8007af4:	20000417 	.word	0x20000417
 8007af8:	200003c0 	.word	0x200003c0
 8007afc:	200003cc 	.word	0x200003cc
 8007b00:	200003e0 	.word	0x200003e0
 8007b04:	200002e0 	.word	0x200002e0

08007b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b090      	sub	sp, #64	; 0x40
 8007b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b0e:	f107 0318 	add.w	r3, r7, #24
 8007b12:	2228      	movs	r2, #40	; 0x28
 8007b14:	2100      	movs	r1, #0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f004 fb3d 	bl	800c196 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b1c:	1d3b      	adds	r3, r7, #4
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	605a      	str	r2, [r3, #4]
 8007b24:	609a      	str	r2, [r3, #8]
 8007b26:	60da      	str	r2, [r3, #12]
 8007b28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007b34:	2300      	movs	r3, #0
 8007b36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007b46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b4c:	f107 0318 	add.w	r3, r7, #24
 8007b50:	4618      	mov	r0, r3
 8007b52:	f002 fc3f 	bl	800a3d4 <HAL_RCC_OscConfig>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007b5c:	f000 f9a2 	bl	8007ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b60:	230f      	movs	r3, #15
 8007b62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b64:	2302      	movs	r3, #2
 8007b66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007b76:	1d3b      	adds	r3, r7, #4
 8007b78:	2102      	movs	r1, #2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f002 feac 	bl	800a8d8 <HAL_RCC_ClockConfig>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007b86:	f000 f98d 	bl	8007ea4 <Error_Handler>
  }
}
 8007b8a:	bf00      	nop
 8007b8c:	3740      	adds	r7, #64	; 0x40
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007b98:	4b16      	ldr	r3, [pc, #88]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007b9a:	4a17      	ldr	r2, [pc, #92]	; (8007bf8 <MX_CAN_Init+0x64>)
 8007b9c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007b9e:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007ba0:	2210      	movs	r2, #16
 8007ba2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007ba4:	4b13      	ldr	r3, [pc, #76]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007bb0:	4b10      	ldr	r3, [pc, #64]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007bbc:	4b0d      	ldr	r3, [pc, #52]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007bc8:	4b0a      	ldr	r3, [pc, #40]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007bd4:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007bda:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007be0:	4804      	ldr	r0, [pc, #16]	; (8007bf4 <MX_CAN_Init+0x60>)
 8007be2:	f000 fbe1 	bl	80083a8 <HAL_CAN_Init>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007bec:	f000 f95a 	bl	8007ea4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007bf0:	bf00      	nop
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	2000021c 	.word	0x2000021c
 8007bf8:	40006400 	.word	0x40006400

08007bfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007c00:	4b12      	ldr	r3, [pc, #72]	; (8007c4c <MX_I2C1_Init+0x50>)
 8007c02:	4a13      	ldr	r2, [pc, #76]	; (8007c50 <MX_I2C1_Init+0x54>)
 8007c04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007c06:	4b11      	ldr	r3, [pc, #68]	; (8007c4c <MX_I2C1_Init+0x50>)
 8007c08:	4a12      	ldr	r2, [pc, #72]	; (8007c54 <MX_I2C1_Init+0x58>)
 8007c0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007c0c:	4b0f      	ldr	r3, [pc, #60]	; (8007c4c <MX_I2C1_Init+0x50>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007c12:	4b0e      	ldr	r3, [pc, #56]	; (8007c4c <MX_I2C1_Init+0x50>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007c18:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <MX_I2C1_Init+0x50>)
 8007c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007c1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007c20:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <MX_I2C1_Init+0x50>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007c26:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <MX_I2C1_Init+0x50>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007c2c:	4b07      	ldr	r3, [pc, #28]	; (8007c4c <MX_I2C1_Init+0x50>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007c32:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <MX_I2C1_Init+0x50>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007c38:	4804      	ldr	r0, [pc, #16]	; (8007c4c <MX_I2C1_Init+0x50>)
 8007c3a:	f001 f9a9 	bl	8008f90 <HAL_I2C_Init>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007c44:	f000 f92e 	bl	8007ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007c48:	bf00      	nop
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20000244 	.word	0x20000244
 8007c50:	40005400 	.word	0x40005400
 8007c54:	00061a80 	.word	0x00061a80

08007c58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c5e:	f107 0308 	add.w	r3, r7, #8
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	605a      	str	r2, [r3, #4]
 8007c68:	609a      	str	r2, [r3, #8]
 8007c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007c74:	4b1f      	ldr	r3, [pc, #124]	; (8007cf4 <MX_TIM1_Init+0x9c>)
 8007c76:	4a20      	ldr	r2, [pc, #128]	; (8007cf8 <MX_TIM1_Init+0xa0>)
 8007c78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007c7a:	4b1e      	ldr	r3, [pc, #120]	; (8007cf4 <MX_TIM1_Init+0x9c>)
 8007c7c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007c80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c82:	4b1c      	ldr	r3, [pc, #112]	; (8007cf4 <MX_TIM1_Init+0x9c>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007c88:	4b1a      	ldr	r3, [pc, #104]	; (8007cf4 <MX_TIM1_Init+0x9c>)
 8007c8a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007c8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c90:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <MX_TIM1_Init+0x9c>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007c96:	4b17      	ldr	r3, [pc, #92]	; (8007cf4 <MX_TIM1_Init+0x9c>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c9c:	4b15      	ldr	r3, [pc, #84]	; (8007cf4 <MX_TIM1_Init+0x9c>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007ca2:	4814      	ldr	r0, [pc, #80]	; (8007cf4 <MX_TIM1_Init+0x9c>)
 8007ca4:	f002 ffa6 	bl	800abf4 <HAL_TIM_Base_Init>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007cae:	f000 f8f9 	bl	8007ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007cb8:	f107 0308 	add.w	r3, r7, #8
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	480d      	ldr	r0, [pc, #52]	; (8007cf4 <MX_TIM1_Init+0x9c>)
 8007cc0:	f003 f950 	bl	800af64 <HAL_TIM_ConfigClockSource>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007cca:	f000 f8eb 	bl	8007ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4806      	ldr	r0, [pc, #24]	; (8007cf4 <MX_TIM1_Init+0x9c>)
 8007cdc:	f003 fb3e 	bl	800b35c <HAL_TIMEx_MasterConfigSynchronization>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007ce6:	f000 f8dd 	bl	8007ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007cea:	bf00      	nop
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000298 	.word	0x20000298
 8007cf8:	40012c00 	.word	0x40012c00

08007cfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007d00:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <MX_USART1_UART_Init+0x4c>)
 8007d02:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <MX_USART1_UART_Init+0x50>)
 8007d04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <MX_USART1_UART_Init+0x4c>)
 8007d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007d0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d0e:	4b0e      	ldr	r3, [pc, #56]	; (8007d48 <MX_USART1_UART_Init+0x4c>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <MX_USART1_UART_Init+0x4c>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <MX_USART1_UART_Init+0x4c>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <MX_USART1_UART_Init+0x4c>)
 8007d22:	220c      	movs	r2, #12
 8007d24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d26:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <MX_USART1_UART_Init+0x4c>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <MX_USART1_UART_Init+0x4c>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007d32:	4805      	ldr	r0, [pc, #20]	; (8007d48 <MX_USART1_UART_Init+0x4c>)
 8007d34:	f003 fb90 	bl	800b458 <HAL_UART_Init>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007d3e:	f000 f8b1 	bl	8007ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007d42:	bf00      	nop
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	200002e0 	.word	0x200002e0
 8007d4c:	40013800 	.word	0x40013800

08007d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	605a      	str	r2, [r3, #4]
 8007d60:	609a      	str	r2, [r3, #8]
 8007d62:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d64:	4b4b      	ldr	r3, [pc, #300]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	4a4a      	ldr	r2, [pc, #296]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007d6a:	f043 0310 	orr.w	r3, r3, #16
 8007d6e:	6193      	str	r3, [r2, #24]
 8007d70:	4b48      	ldr	r3, [pc, #288]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d7c:	4b45      	ldr	r3, [pc, #276]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	4a44      	ldr	r2, [pc, #272]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007d82:	f043 0320 	orr.w	r3, r3, #32
 8007d86:	6193      	str	r3, [r2, #24]
 8007d88:	4b42      	ldr	r3, [pc, #264]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d94:	4b3f      	ldr	r3, [pc, #252]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	4a3e      	ldr	r2, [pc, #248]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007d9a:	f043 0304 	orr.w	r3, r3, #4
 8007d9e:	6193      	str	r3, [r2, #24]
 8007da0:	4b3c      	ldr	r3, [pc, #240]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007dac:	4b39      	ldr	r3, [pc, #228]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	4a38      	ldr	r2, [pc, #224]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007db2:	f043 0308 	orr.w	r3, r3, #8
 8007db6:	6193      	str	r3, [r2, #24]
 8007db8:	4b36      	ldr	r3, [pc, #216]	; (8007e94 <MX_GPIO_Init+0x144>)
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
 8007dc0:	603b      	str	r3, [r7, #0]
 8007dc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	21f0      	movs	r1, #240	; 0xf0
 8007dc8:	4833      	ldr	r0, [pc, #204]	; (8007e98 <MX_GPIO_Init+0x148>)
 8007dca:	f001 f8b0 	bl	8008f2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f241 0130 	movw	r1, #4144	; 0x1030
 8007dd4:	4831      	ldr	r0, [pc, #196]	; (8007e9c <MX_GPIO_Init+0x14c>)
 8007dd6:	f001 f8aa 	bl	8008f2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f640 4107 	movw	r1, #3079	; 0xc07
 8007de0:	482f      	ldr	r0, [pc, #188]	; (8007ea0 <MX_GPIO_Init+0x150>)
 8007de2:	f001 f8a4 	bl	8008f2e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007de6:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007dea:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dec:	2300      	movs	r3, #0
 8007dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4828      	ldr	r0, [pc, #160]	; (8007e9c <MX_GPIO_Init+0x14c>)
 8007dfc:	f000 fe20 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007e00:	f248 130f 	movw	r3, #33039	; 0x810f
 8007e04:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e0e:	f107 0310 	add.w	r3, r7, #16
 8007e12:	4619      	mov	r1, r3
 8007e14:	4820      	ldr	r0, [pc, #128]	; (8007e98 <MX_GPIO_Init+0x148>)
 8007e16:	f000 fe13 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007e1a:	23f0      	movs	r3, #240	; 0xf0
 8007e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e26:	2302      	movs	r3, #2
 8007e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e2a:	f107 0310 	add.w	r3, r7, #16
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4819      	ldr	r0, [pc, #100]	; (8007e98 <MX_GPIO_Init+0x148>)
 8007e32:	f000 fe05 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007e36:	f241 0330 	movw	r3, #4144	; 0x1030
 8007e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e44:	2302      	movs	r3, #2
 8007e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e48:	f107 0310 	add.w	r3, r7, #16
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4813      	ldr	r0, [pc, #76]	; (8007e9c <MX_GPIO_Init+0x14c>)
 8007e50:	f000 fdf6 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007e54:	f640 4307 	movw	r3, #3079	; 0xc07
 8007e58:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e62:	2302      	movs	r3, #2
 8007e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e66:	f107 0310 	add.w	r3, r7, #16
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	480c      	ldr	r0, [pc, #48]	; (8007ea0 <MX_GPIO_Init+0x150>)
 8007e6e:	f000 fde7 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007e72:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e80:	f107 0310 	add.w	r3, r7, #16
 8007e84:	4619      	mov	r1, r3
 8007e86:	4806      	ldr	r0, [pc, #24]	; (8007ea0 <MX_GPIO_Init+0x150>)
 8007e88:	f000 fdda 	bl	8008a40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007e8c:	bf00      	nop
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40021000 	.word	0x40021000
 8007e98:	40010800 	.word	0x40010800
 8007e9c:	40011000 	.word	0x40011000
 8007ea0:	40010c00 	.word	0x40010c00

08007ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007ea8:	bf00      	nop
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr

08007eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007eb6:	4b15      	ldr	r3, [pc, #84]	; (8007f0c <HAL_MspInit+0x5c>)
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	4a14      	ldr	r2, [pc, #80]	; (8007f0c <HAL_MspInit+0x5c>)
 8007ebc:	f043 0301 	orr.w	r3, r3, #1
 8007ec0:	6193      	str	r3, [r2, #24]
 8007ec2:	4b12      	ldr	r3, [pc, #72]	; (8007f0c <HAL_MspInit+0x5c>)
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	60bb      	str	r3, [r7, #8]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ece:	4b0f      	ldr	r3, [pc, #60]	; (8007f0c <HAL_MspInit+0x5c>)
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	4a0e      	ldr	r2, [pc, #56]	; (8007f0c <HAL_MspInit+0x5c>)
 8007ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ed8:	61d3      	str	r3, [r2, #28]
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <HAL_MspInit+0x5c>)
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ee2:	607b      	str	r3, [r7, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007ee6:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <HAL_MspInit+0x60>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <HAL_MspInit+0x60>)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr
 8007f0c:	40021000 	.word	0x40021000
 8007f10:	40010000 	.word	0x40010000

08007f14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f1c:	f107 0310 	add.w	r3, r7, #16
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	605a      	str	r2, [r3, #4]
 8007f26:	609a      	str	r2, [r3, #8]
 8007f28:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <HAL_CAN_MspInit+0x8c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d131      	bne.n	8007f98 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007f34:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <HAL_CAN_MspInit+0x90>)
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	4a1a      	ldr	r2, [pc, #104]	; (8007fa4 <HAL_CAN_MspInit+0x90>)
 8007f3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f3e:	61d3      	str	r3, [r2, #28]
 8007f40:	4b18      	ldr	r3, [pc, #96]	; (8007fa4 <HAL_CAN_MspInit+0x90>)
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f4c:	4b15      	ldr	r3, [pc, #84]	; (8007fa4 <HAL_CAN_MspInit+0x90>)
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	4a14      	ldr	r2, [pc, #80]	; (8007fa4 <HAL_CAN_MspInit+0x90>)
 8007f52:	f043 0304 	orr.w	r3, r3, #4
 8007f56:	6193      	str	r3, [r2, #24]
 8007f58:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <HAL_CAN_MspInit+0x90>)
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	60bb      	str	r3, [r7, #8]
 8007f62:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f72:	f107 0310 	add.w	r3, r7, #16
 8007f76:	4619      	mov	r1, r3
 8007f78:	480b      	ldr	r0, [pc, #44]	; (8007fa8 <HAL_CAN_MspInit+0x94>)
 8007f7a:	f000 fd61 	bl	8008a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f84:	2302      	movs	r3, #2
 8007f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f8c:	f107 0310 	add.w	r3, r7, #16
 8007f90:	4619      	mov	r1, r3
 8007f92:	4805      	ldr	r0, [pc, #20]	; (8007fa8 <HAL_CAN_MspInit+0x94>)
 8007f94:	f000 fd54 	bl	8008a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007f98:	bf00      	nop
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	40006400 	.word	0x40006400
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	40010800 	.word	0x40010800

08007fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fb4:	f107 0310 	add.w	r3, r7, #16
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	605a      	str	r2, [r3, #4]
 8007fbe:	609a      	str	r2, [r3, #8]
 8007fc0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a15      	ldr	r2, [pc, #84]	; (800801c <HAL_I2C_MspInit+0x70>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d123      	bne.n	8008014 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fcc:	4b14      	ldr	r3, [pc, #80]	; (8008020 <HAL_I2C_MspInit+0x74>)
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	4a13      	ldr	r2, [pc, #76]	; (8008020 <HAL_I2C_MspInit+0x74>)
 8007fd2:	f043 0308 	orr.w	r3, r3, #8
 8007fd6:	6193      	str	r3, [r2, #24]
 8007fd8:	4b11      	ldr	r3, [pc, #68]	; (8008020 <HAL_I2C_MspInit+0x74>)
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	f003 0308 	and.w	r3, r3, #8
 8007fe0:	60fb      	str	r3, [r7, #12]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007fe4:	23c0      	movs	r3, #192	; 0xc0
 8007fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007fe8:	2312      	movs	r3, #18
 8007fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007fec:	2303      	movs	r3, #3
 8007fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ff0:	f107 0310 	add.w	r3, r7, #16
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	480b      	ldr	r0, [pc, #44]	; (8008024 <HAL_I2C_MspInit+0x78>)
 8007ff8:	f000 fd22 	bl	8008a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ffc:	4b08      	ldr	r3, [pc, #32]	; (8008020 <HAL_I2C_MspInit+0x74>)
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	4a07      	ldr	r2, [pc, #28]	; (8008020 <HAL_I2C_MspInit+0x74>)
 8008002:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008006:	61d3      	str	r3, [r2, #28]
 8008008:	4b05      	ldr	r3, [pc, #20]	; (8008020 <HAL_I2C_MspInit+0x74>)
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008010:	60bb      	str	r3, [r7, #8]
 8008012:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008014:	bf00      	nop
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40005400 	.word	0x40005400
 8008020:	40021000 	.word	0x40021000
 8008024:	40010c00 	.word	0x40010c00

08008028 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a0a      	ldr	r2, [pc, #40]	; (8008060 <HAL_I2C_MspDeInit+0x38>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d10d      	bne.n	8008056 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800803a:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <HAL_I2C_MspDeInit+0x3c>)
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	4a09      	ldr	r2, [pc, #36]	; (8008064 <HAL_I2C_MspDeInit+0x3c>)
 8008040:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008044:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008046:	2140      	movs	r1, #64	; 0x40
 8008048:	4807      	ldr	r0, [pc, #28]	; (8008068 <HAL_I2C_MspDeInit+0x40>)
 800804a:	f000 fe8d 	bl	8008d68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800804e:	2180      	movs	r1, #128	; 0x80
 8008050:	4805      	ldr	r0, [pc, #20]	; (8008068 <HAL_I2C_MspDeInit+0x40>)
 8008052:	f000 fe89 	bl	8008d68 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	40005400 	.word	0x40005400
 8008064:	40021000 	.word	0x40021000
 8008068:	40010c00 	.word	0x40010c00

0800806c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a0d      	ldr	r2, [pc, #52]	; (80080b0 <HAL_TIM_Base_MspInit+0x44>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d113      	bne.n	80080a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800807e:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <HAL_TIM_Base_MspInit+0x48>)
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	4a0c      	ldr	r2, [pc, #48]	; (80080b4 <HAL_TIM_Base_MspInit+0x48>)
 8008084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008088:	6193      	str	r3, [r2, #24]
 800808a:	4b0a      	ldr	r3, [pc, #40]	; (80080b4 <HAL_TIM_Base_MspInit+0x48>)
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008096:	2200      	movs	r2, #0
 8008098:	2100      	movs	r1, #0
 800809a:	2019      	movs	r0, #25
 800809c:	f000 fb57 	bl	800874e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80080a0:	2019      	movs	r0, #25
 80080a2:	f000 fb70 	bl	8008786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	40012c00 	.word	0x40012c00
 80080b4:	40021000 	.word	0x40021000

080080b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080c0:	f107 0310 	add.w	r3, r7, #16
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]
 80080c8:	605a      	str	r2, [r3, #4]
 80080ca:	609a      	str	r2, [r3, #8]
 80080cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a20      	ldr	r2, [pc, #128]	; (8008154 <HAL_UART_MspInit+0x9c>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d139      	bne.n	800814c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80080d8:	4b1f      	ldr	r3, [pc, #124]	; (8008158 <HAL_UART_MspInit+0xa0>)
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	4a1e      	ldr	r2, [pc, #120]	; (8008158 <HAL_UART_MspInit+0xa0>)
 80080de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080e2:	6193      	str	r3, [r2, #24]
 80080e4:	4b1c      	ldr	r3, [pc, #112]	; (8008158 <HAL_UART_MspInit+0xa0>)
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080f0:	4b19      	ldr	r3, [pc, #100]	; (8008158 <HAL_UART_MspInit+0xa0>)
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	4a18      	ldr	r2, [pc, #96]	; (8008158 <HAL_UART_MspInit+0xa0>)
 80080f6:	f043 0304 	orr.w	r3, r3, #4
 80080fa:	6193      	str	r3, [r2, #24]
 80080fc:	4b16      	ldr	r3, [pc, #88]	; (8008158 <HAL_UART_MspInit+0xa0>)
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	60bb      	str	r3, [r7, #8]
 8008106:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800810c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800810e:	2302      	movs	r3, #2
 8008110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008112:	2303      	movs	r3, #3
 8008114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008116:	f107 0310 	add.w	r3, r7, #16
 800811a:	4619      	mov	r1, r3
 800811c:	480f      	ldr	r0, [pc, #60]	; (800815c <HAL_UART_MspInit+0xa4>)
 800811e:	f000 fc8f 	bl	8008a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008128:	2300      	movs	r3, #0
 800812a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800812c:	2300      	movs	r3, #0
 800812e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008130:	f107 0310 	add.w	r3, r7, #16
 8008134:	4619      	mov	r1, r3
 8008136:	4809      	ldr	r0, [pc, #36]	; (800815c <HAL_UART_MspInit+0xa4>)
 8008138:	f000 fc82 	bl	8008a40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800813c:	2200      	movs	r2, #0
 800813e:	2100      	movs	r1, #0
 8008140:	2025      	movs	r0, #37	; 0x25
 8008142:	f000 fb04 	bl	800874e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008146:	2025      	movs	r0, #37	; 0x25
 8008148:	f000 fb1d 	bl	8008786 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800814c:	bf00      	nop
 800814e:	3720      	adds	r7, #32
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	40013800 	.word	0x40013800
 8008158:	40021000 	.word	0x40021000
 800815c:	40010800 	.word	0x40010800

08008160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008164:	e7fe      	b.n	8008164 <NMI_Handler+0x4>

08008166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008166:	b480      	push	{r7}
 8008168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800816a:	e7fe      	b.n	800816a <HardFault_Handler+0x4>

0800816c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008170:	e7fe      	b.n	8008170 <MemManage_Handler+0x4>

08008172 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008172:	b480      	push	{r7}
 8008174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008176:	e7fe      	b.n	8008176 <BusFault_Handler+0x4>

08008178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800817c:	e7fe      	b.n	800817c <UsageFault_Handler+0x4>

0800817e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800817e:	b480      	push	{r7}
 8008180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008182:	bf00      	nop
 8008184:	46bd      	mov	sp, r7
 8008186:	bc80      	pop	{r7}
 8008188:	4770      	bx	lr

0800818a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800818a:	b480      	push	{r7}
 800818c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800818e:	bf00      	nop
 8008190:	46bd      	mov	sp, r7
 8008192:	bc80      	pop	{r7}
 8008194:	4770      	bx	lr

08008196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008196:	b480      	push	{r7}
 8008198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800819a:	bf00      	nop
 800819c:	46bd      	mov	sp, r7
 800819e:	bc80      	pop	{r7}
 80081a0:	4770      	bx	lr

080081a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081a6:	f000 f8bf 	bl	8008328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081aa:	bf00      	nop
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80081b4:	4802      	ldr	r0, [pc, #8]	; (80081c0 <TIM1_UP_IRQHandler+0x10>)
 80081b6:	f002 fdcd 	bl	800ad54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80081ba:	bf00      	nop
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000298 	.word	0x20000298

080081c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80081c8:	4802      	ldr	r0, [pc, #8]	; (80081d4 <USART1_IRQHandler+0x10>)
 80081ca:	f003 f9cb 	bl	800b564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80081ce:	bf00      	nop
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200002e0 	.word	0x200002e0

080081d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80081e0:	4a14      	ldr	r2, [pc, #80]	; (8008234 <_sbrk+0x5c>)
 80081e2:	4b15      	ldr	r3, [pc, #84]	; (8008238 <_sbrk+0x60>)
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80081ec:	4b13      	ldr	r3, [pc, #76]	; (800823c <_sbrk+0x64>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80081f4:	4b11      	ldr	r3, [pc, #68]	; (800823c <_sbrk+0x64>)
 80081f6:	4a12      	ldr	r2, [pc, #72]	; (8008240 <_sbrk+0x68>)
 80081f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80081fa:	4b10      	ldr	r3, [pc, #64]	; (800823c <_sbrk+0x64>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4413      	add	r3, r2
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	429a      	cmp	r2, r3
 8008206:	d207      	bcs.n	8008218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008208:	f003 ffde 	bl	800c1c8 <__errno>
 800820c:	4603      	mov	r3, r0
 800820e:	220c      	movs	r2, #12
 8008210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008216:	e009      	b.n	800822c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008218:	4b08      	ldr	r3, [pc, #32]	; (800823c <_sbrk+0x64>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800821e:	4b07      	ldr	r3, [pc, #28]	; (800823c <_sbrk+0x64>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4413      	add	r3, r2
 8008226:	4a05      	ldr	r2, [pc, #20]	; (800823c <_sbrk+0x64>)
 8008228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800822a:	68fb      	ldr	r3, [r7, #12]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	2000c000 	.word	0x2000c000
 8008238:	00000400 	.word	0x00000400
 800823c:	2000045c 	.word	0x2000045c
 8008240:	200005b0 	.word	0x200005b0

08008244 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008244:	b480      	push	{r7}
 8008246:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008248:	bf00      	nop
 800824a:	46bd      	mov	sp, r7
 800824c:	bc80      	pop	{r7}
 800824e:	4770      	bx	lr

08008250 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008250:	480c      	ldr	r0, [pc, #48]	; (8008284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008252:	490d      	ldr	r1, [pc, #52]	; (8008288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008254:	4a0d      	ldr	r2, [pc, #52]	; (800828c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008258:	e002      	b.n	8008260 <LoopCopyDataInit>

0800825a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800825a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800825c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800825e:	3304      	adds	r3, #4

08008260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008264:	d3f9      	bcc.n	800825a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008266:	4a0a      	ldr	r2, [pc, #40]	; (8008290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008268:	4c0a      	ldr	r4, [pc, #40]	; (8008294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800826a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800826c:	e001      	b.n	8008272 <LoopFillZerobss>

0800826e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800826e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008270:	3204      	adds	r2, #4

08008272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008274:	d3fb      	bcc.n	800826e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008276:	f7ff ffe5 	bl	8008244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800827a:	f003 ffab 	bl	800c1d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800827e:	f7ff fb69 	bl	8007954 <main>
  bx lr
 8008282:	4770      	bx	lr
  ldr r0, =_sdata
 8008284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008288:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 800828c:	0800d8f4 	.word	0x0800d8f4
  ldr r2, =_sbss
 8008290:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8008294:	200005ac 	.word	0x200005ac

08008298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008298:	e7fe      	b.n	8008298 <ADC1_2_IRQHandler>
	...

0800829c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80082a0:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <HAL_Init+0x28>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a07      	ldr	r2, [pc, #28]	; (80082c4 <HAL_Init+0x28>)
 80082a6:	f043 0310 	orr.w	r3, r3, #16
 80082aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082ac:	2003      	movs	r0, #3
 80082ae:	f000 fa43 	bl	8008738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80082b2:	200f      	movs	r0, #15
 80082b4:	f000 f808 	bl	80082c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80082b8:	f7ff fdfa 	bl	8007eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	40022000 	.word	0x40022000

080082c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80082d0:	4b12      	ldr	r3, [pc, #72]	; (800831c <HAL_InitTick+0x54>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b12      	ldr	r3, [pc, #72]	; (8008320 <HAL_InitTick+0x58>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	4619      	mov	r1, r3
 80082da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082de:	fbb3 f3f1 	udiv	r3, r3, r1
 80082e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fa5b 	bl	80087a2 <HAL_SYSTICK_Config>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e00e      	b.n	8008314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b0f      	cmp	r3, #15
 80082fa:	d80a      	bhi.n	8008312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80082fc:	2200      	movs	r2, #0
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008304:	f000 fa23 	bl	800874e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008308:	4a06      	ldr	r2, [pc, #24]	; (8008324 <HAL_InitTick+0x5c>)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	e000      	b.n	8008314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	200000a8 	.word	0x200000a8
 8008320:	200000b0 	.word	0x200000b0
 8008324:	200000ac 	.word	0x200000ac

08008328 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800832c:	4b05      	ldr	r3, [pc, #20]	; (8008344 <HAL_IncTick+0x1c>)
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	4b05      	ldr	r3, [pc, #20]	; (8008348 <HAL_IncTick+0x20>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4413      	add	r3, r2
 8008338:	4a03      	ldr	r2, [pc, #12]	; (8008348 <HAL_IncTick+0x20>)
 800833a:	6013      	str	r3, [r2, #0]
}
 800833c:	bf00      	nop
 800833e:	46bd      	mov	sp, r7
 8008340:	bc80      	pop	{r7}
 8008342:	4770      	bx	lr
 8008344:	200000b0 	.word	0x200000b0
 8008348:	20000460 	.word	0x20000460

0800834c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  return uwTick;
 8008350:	4b02      	ldr	r3, [pc, #8]	; (800835c <HAL_GetTick+0x10>)
 8008352:	681b      	ldr	r3, [r3, #0]
}
 8008354:	4618      	mov	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	bc80      	pop	{r7}
 800835a:	4770      	bx	lr
 800835c:	20000460 	.word	0x20000460

08008360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008368:	f7ff fff0 	bl	800834c <HAL_GetTick>
 800836c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008378:	d005      	beq.n	8008386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800837a:	4b0a      	ldr	r3, [pc, #40]	; (80083a4 <HAL_Delay+0x44>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008386:	bf00      	nop
 8008388:	f7ff ffe0 	bl	800834c <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	429a      	cmp	r2, r3
 8008396:	d8f7      	bhi.n	8008388 <HAL_Delay+0x28>
  {
  }
}
 8008398:	bf00      	nop
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	200000b0 	.word	0x200000b0

080083a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e0ed      	b.n	8008596 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d102      	bne.n	80083cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff fda4 	bl	8007f14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0201 	orr.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083dc:	f7ff ffb6 	bl	800834c <HAL_GetTick>
 80083e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80083e2:	e012      	b.n	800840a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80083e4:	f7ff ffb2 	bl	800834c <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b0a      	cmp	r3, #10
 80083f0:	d90b      	bls.n	800840a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2205      	movs	r2, #5
 8008402:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e0c5      	b.n	8008596 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0e5      	beq.n	80083e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0202 	bic.w	r2, r2, #2
 8008426:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008428:	f7ff ff90 	bl	800834c <HAL_GetTick>
 800842c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800842e:	e012      	b.n	8008456 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008430:	f7ff ff8c 	bl	800834c <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	2b0a      	cmp	r3, #10
 800843c:	d90b      	bls.n	8008456 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2205      	movs	r2, #5
 800844e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e09f      	b.n	8008596 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f003 0302 	and.w	r3, r3, #2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e5      	bne.n	8008430 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7e1b      	ldrb	r3, [r3, #24]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d108      	bne.n	800847e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	e007      	b.n	800848e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800848c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7e5b      	ldrb	r3, [r3, #25]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d108      	bne.n	80084a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	e007      	b.n	80084b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	7e9b      	ldrb	r3, [r3, #26]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d108      	bne.n	80084d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0220 	orr.w	r2, r2, #32
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	e007      	b.n	80084e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0220 	bic.w	r2, r2, #32
 80084e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	7edb      	ldrb	r3, [r3, #27]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d108      	bne.n	80084fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0210 	bic.w	r2, r2, #16
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e007      	b.n	800850c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 0210 	orr.w	r2, r2, #16
 800850a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	7f1b      	ldrb	r3, [r3, #28]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d108      	bne.n	8008526 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0208 	orr.w	r2, r2, #8
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	e007      	b.n	8008536 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0208 	bic.w	r2, r2, #8
 8008534:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	7f5b      	ldrb	r3, [r3, #29]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d108      	bne.n	8008550 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f042 0204 	orr.w	r2, r2, #4
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	e007      	b.n	8008560 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0204 	bic.w	r2, r2, #4
 800855e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	ea42 0103 	orr.w	r1, r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	1e5a      	subs	r2, r3, #1
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <__NVIC_SetPriorityGrouping>:
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085b0:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <__NVIC_SetPriorityGrouping+0x44>)
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085bc:	4013      	ands	r3, r2
 80085be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085d2:	4a04      	ldr	r2, [pc, #16]	; (80085e4 <__NVIC_SetPriorityGrouping+0x44>)
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	60d3      	str	r3, [r2, #12]
}
 80085d8:	bf00      	nop
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	bc80      	pop	{r7}
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	e000ed00 	.word	0xe000ed00

080085e8 <__NVIC_GetPriorityGrouping>:
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085ec:	4b04      	ldr	r3, [pc, #16]	; (8008600 <__NVIC_GetPriorityGrouping+0x18>)
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	0a1b      	lsrs	r3, r3, #8
 80085f2:	f003 0307 	and.w	r3, r3, #7
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	e000ed00 	.word	0xe000ed00

08008604 <__NVIC_EnableIRQ>:
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800860e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008612:	2b00      	cmp	r3, #0
 8008614:	db0b      	blt.n	800862e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	f003 021f 	and.w	r2, r3, #31
 800861c:	4906      	ldr	r1, [pc, #24]	; (8008638 <__NVIC_EnableIRQ+0x34>)
 800861e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008622:	095b      	lsrs	r3, r3, #5
 8008624:	2001      	movs	r0, #1
 8008626:	fa00 f202 	lsl.w	r2, r0, r2
 800862a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800862e:	bf00      	nop
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	bc80      	pop	{r7}
 8008636:	4770      	bx	lr
 8008638:	e000e100 	.word	0xe000e100

0800863c <__NVIC_SetPriority>:
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	6039      	str	r1, [r7, #0]
 8008646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800864c:	2b00      	cmp	r3, #0
 800864e:	db0a      	blt.n	8008666 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	b2da      	uxtb	r2, r3
 8008654:	490c      	ldr	r1, [pc, #48]	; (8008688 <__NVIC_SetPriority+0x4c>)
 8008656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865a:	0112      	lsls	r2, r2, #4
 800865c:	b2d2      	uxtb	r2, r2
 800865e:	440b      	add	r3, r1
 8008660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008664:	e00a      	b.n	800867c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	b2da      	uxtb	r2, r3
 800866a:	4908      	ldr	r1, [pc, #32]	; (800868c <__NVIC_SetPriority+0x50>)
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	f003 030f 	and.w	r3, r3, #15
 8008672:	3b04      	subs	r3, #4
 8008674:	0112      	lsls	r2, r2, #4
 8008676:	b2d2      	uxtb	r2, r2
 8008678:	440b      	add	r3, r1
 800867a:	761a      	strb	r2, [r3, #24]
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	e000e100 	.word	0xe000e100
 800868c:	e000ed00 	.word	0xe000ed00

08008690 <NVIC_EncodePriority>:
{
 8008690:	b480      	push	{r7}
 8008692:	b089      	sub	sp, #36	; 0x24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f003 0307 	and.w	r3, r3, #7
 80086a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	f1c3 0307 	rsb	r3, r3, #7
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	bf28      	it	cs
 80086ae:	2304      	movcs	r3, #4
 80086b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	3304      	adds	r3, #4
 80086b6:	2b06      	cmp	r3, #6
 80086b8:	d902      	bls.n	80086c0 <NVIC_EncodePriority+0x30>
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	3b03      	subs	r3, #3
 80086be:	e000      	b.n	80086c2 <NVIC_EncodePriority+0x32>
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	43da      	mvns	r2, r3
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	401a      	ands	r2, r3
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	fa01 f303 	lsl.w	r3, r1, r3
 80086e2:	43d9      	mvns	r1, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086e8:	4313      	orrs	r3, r2
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3724      	adds	r7, #36	; 0x24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr

080086f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3b01      	subs	r3, #1
 8008700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008704:	d301      	bcc.n	800870a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008706:	2301      	movs	r3, #1
 8008708:	e00f      	b.n	800872a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800870a:	4a0a      	ldr	r2, [pc, #40]	; (8008734 <SysTick_Config+0x40>)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3b01      	subs	r3, #1
 8008710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008712:	210f      	movs	r1, #15
 8008714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008718:	f7ff ff90 	bl	800863c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800871c:	4b05      	ldr	r3, [pc, #20]	; (8008734 <SysTick_Config+0x40>)
 800871e:	2200      	movs	r2, #0
 8008720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008722:	4b04      	ldr	r3, [pc, #16]	; (8008734 <SysTick_Config+0x40>)
 8008724:	2207      	movs	r2, #7
 8008726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	e000e010 	.word	0xe000e010

08008738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ff2d 	bl	80085a0 <__NVIC_SetPriorityGrouping>
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	4603      	mov	r3, r0
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800875c:	2300      	movs	r3, #0
 800875e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008760:	f7ff ff42 	bl	80085e8 <__NVIC_GetPriorityGrouping>
 8008764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	6978      	ldr	r0, [r7, #20]
 800876c:	f7ff ff90 	bl	8008690 <NVIC_EncodePriority>
 8008770:	4602      	mov	r2, r0
 8008772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008776:	4611      	mov	r1, r2
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff ff5f 	bl	800863c <__NVIC_SetPriority>
}
 800877e:	bf00      	nop
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	4603      	mov	r3, r0
 800878e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff ff35 	bl	8008604 <__NVIC_EnableIRQ>
}
 800879a:	bf00      	nop
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff ffa2 	bl	80086f4 <SysTick_Config>
 80087b0:	4603      	mov	r3, r0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b085      	sub	sp, #20
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d008      	beq.n	80087e4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2204      	movs	r2, #4
 80087d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e020      	b.n	8008826 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 020e 	bic.w	r2, r2, #14
 80087f2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0201 	bic.w	r2, r2, #1
 8008802:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880c:	2101      	movs	r1, #1
 800880e:	fa01 f202 	lsl.w	r2, r1, r2
 8008812:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008824:	7bfb      	ldrb	r3, [r7, #15]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	bc80      	pop	{r7}
 800882e:	4770      	bx	lr

08008830 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b02      	cmp	r3, #2
 8008846:	d005      	beq.n	8008854 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2204      	movs	r2, #4
 800884c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	73fb      	strb	r3, [r7, #15]
 8008852:	e0d6      	b.n	8008a02 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 020e 	bic.w	r2, r2, #14
 8008862:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0201 	bic.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	4b64      	ldr	r3, [pc, #400]	; (8008a0c <HAL_DMA_Abort_IT+0x1dc>)
 800887c:	429a      	cmp	r2, r3
 800887e:	d958      	bls.n	8008932 <HAL_DMA_Abort_IT+0x102>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a62      	ldr	r2, [pc, #392]	; (8008a10 <HAL_DMA_Abort_IT+0x1e0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d04f      	beq.n	800892a <HAL_DMA_Abort_IT+0xfa>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a61      	ldr	r2, [pc, #388]	; (8008a14 <HAL_DMA_Abort_IT+0x1e4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d048      	beq.n	8008926 <HAL_DMA_Abort_IT+0xf6>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a5f      	ldr	r2, [pc, #380]	; (8008a18 <HAL_DMA_Abort_IT+0x1e8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d040      	beq.n	8008920 <HAL_DMA_Abort_IT+0xf0>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a5e      	ldr	r2, [pc, #376]	; (8008a1c <HAL_DMA_Abort_IT+0x1ec>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d038      	beq.n	800891a <HAL_DMA_Abort_IT+0xea>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a5c      	ldr	r2, [pc, #368]	; (8008a20 <HAL_DMA_Abort_IT+0x1f0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d030      	beq.n	8008914 <HAL_DMA_Abort_IT+0xe4>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a5b      	ldr	r2, [pc, #364]	; (8008a24 <HAL_DMA_Abort_IT+0x1f4>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d028      	beq.n	800890e <HAL_DMA_Abort_IT+0xde>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a52      	ldr	r2, [pc, #328]	; (8008a0c <HAL_DMA_Abort_IT+0x1dc>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d020      	beq.n	8008908 <HAL_DMA_Abort_IT+0xd8>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a57      	ldr	r2, [pc, #348]	; (8008a28 <HAL_DMA_Abort_IT+0x1f8>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d019      	beq.n	8008904 <HAL_DMA_Abort_IT+0xd4>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a55      	ldr	r2, [pc, #340]	; (8008a2c <HAL_DMA_Abort_IT+0x1fc>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d012      	beq.n	8008900 <HAL_DMA_Abort_IT+0xd0>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a54      	ldr	r2, [pc, #336]	; (8008a30 <HAL_DMA_Abort_IT+0x200>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00a      	beq.n	80088fa <HAL_DMA_Abort_IT+0xca>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a52      	ldr	r2, [pc, #328]	; (8008a34 <HAL_DMA_Abort_IT+0x204>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d102      	bne.n	80088f4 <HAL_DMA_Abort_IT+0xc4>
 80088ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088f2:	e01b      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 80088f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088f8:	e018      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 80088fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088fe:	e015      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 8008900:	2310      	movs	r3, #16
 8008902:	e013      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 8008904:	2301      	movs	r3, #1
 8008906:	e011      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 8008908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800890c:	e00e      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 800890e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008912:	e00b      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 8008914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008918:	e008      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 800891a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800891e:	e005      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 8008920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008924:	e002      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 8008926:	2310      	movs	r3, #16
 8008928:	e000      	b.n	800892c <HAL_DMA_Abort_IT+0xfc>
 800892a:	2301      	movs	r3, #1
 800892c:	4a42      	ldr	r2, [pc, #264]	; (8008a38 <HAL_DMA_Abort_IT+0x208>)
 800892e:	6053      	str	r3, [r2, #4]
 8008930:	e057      	b.n	80089e2 <HAL_DMA_Abort_IT+0x1b2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a36      	ldr	r2, [pc, #216]	; (8008a10 <HAL_DMA_Abort_IT+0x1e0>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d04f      	beq.n	80089dc <HAL_DMA_Abort_IT+0x1ac>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a34      	ldr	r2, [pc, #208]	; (8008a14 <HAL_DMA_Abort_IT+0x1e4>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d048      	beq.n	80089d8 <HAL_DMA_Abort_IT+0x1a8>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a33      	ldr	r2, [pc, #204]	; (8008a18 <HAL_DMA_Abort_IT+0x1e8>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d040      	beq.n	80089d2 <HAL_DMA_Abort_IT+0x1a2>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a31      	ldr	r2, [pc, #196]	; (8008a1c <HAL_DMA_Abort_IT+0x1ec>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d038      	beq.n	80089cc <HAL_DMA_Abort_IT+0x19c>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a30      	ldr	r2, [pc, #192]	; (8008a20 <HAL_DMA_Abort_IT+0x1f0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d030      	beq.n	80089c6 <HAL_DMA_Abort_IT+0x196>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a2e      	ldr	r2, [pc, #184]	; (8008a24 <HAL_DMA_Abort_IT+0x1f4>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d028      	beq.n	80089c0 <HAL_DMA_Abort_IT+0x190>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a26      	ldr	r2, [pc, #152]	; (8008a0c <HAL_DMA_Abort_IT+0x1dc>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d020      	beq.n	80089ba <HAL_DMA_Abort_IT+0x18a>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a2a      	ldr	r2, [pc, #168]	; (8008a28 <HAL_DMA_Abort_IT+0x1f8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d019      	beq.n	80089b6 <HAL_DMA_Abort_IT+0x186>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a29      	ldr	r2, [pc, #164]	; (8008a2c <HAL_DMA_Abort_IT+0x1fc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d012      	beq.n	80089b2 <HAL_DMA_Abort_IT+0x182>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a27      	ldr	r2, [pc, #156]	; (8008a30 <HAL_DMA_Abort_IT+0x200>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d00a      	beq.n	80089ac <HAL_DMA_Abort_IT+0x17c>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a26      	ldr	r2, [pc, #152]	; (8008a34 <HAL_DMA_Abort_IT+0x204>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d102      	bne.n	80089a6 <HAL_DMA_Abort_IT+0x176>
 80089a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089a4:	e01b      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089aa:	e018      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089b0:	e015      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089b2:	2310      	movs	r3, #16
 80089b4:	e013      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e011      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089be:	e00e      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80089c4:	e00b      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089ca:	e008      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089d0:	e005      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089d6:	e002      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089d8:	2310      	movs	r3, #16
 80089da:	e000      	b.n	80089de <HAL_DMA_Abort_IT+0x1ae>
 80089dc:	2301      	movs	r3, #1
 80089de:	4a17      	ldr	r2, [pc, #92]	; (8008a3c <HAL_DMA_Abort_IT+0x20c>)
 80089e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
    } 
  }
  return status;
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	40020080 	.word	0x40020080
 8008a10:	40020008 	.word	0x40020008
 8008a14:	4002001c 	.word	0x4002001c
 8008a18:	40020030 	.word	0x40020030
 8008a1c:	40020044 	.word	0x40020044
 8008a20:	40020058 	.word	0x40020058
 8008a24:	4002006c 	.word	0x4002006c
 8008a28:	40020408 	.word	0x40020408
 8008a2c:	4002041c 	.word	0x4002041c
 8008a30:	40020430 	.word	0x40020430
 8008a34:	40020444 	.word	0x40020444
 8008a38:	40020400 	.word	0x40020400
 8008a3c:	40020000 	.word	0x40020000

08008a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b08b      	sub	sp, #44	; 0x2c
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a52:	e179      	b.n	8008d48 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008a54:	2201      	movs	r2, #1
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	4013      	ands	r3, r2
 8008a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	f040 8168 	bne.w	8008d42 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	4a96      	ldr	r2, [pc, #600]	; (8008cd0 <HAL_GPIO_Init+0x290>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d05e      	beq.n	8008b3a <HAL_GPIO_Init+0xfa>
 8008a7c:	4a94      	ldr	r2, [pc, #592]	; (8008cd0 <HAL_GPIO_Init+0x290>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d875      	bhi.n	8008b6e <HAL_GPIO_Init+0x12e>
 8008a82:	4a94      	ldr	r2, [pc, #592]	; (8008cd4 <HAL_GPIO_Init+0x294>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d058      	beq.n	8008b3a <HAL_GPIO_Init+0xfa>
 8008a88:	4a92      	ldr	r2, [pc, #584]	; (8008cd4 <HAL_GPIO_Init+0x294>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d86f      	bhi.n	8008b6e <HAL_GPIO_Init+0x12e>
 8008a8e:	4a92      	ldr	r2, [pc, #584]	; (8008cd8 <HAL_GPIO_Init+0x298>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d052      	beq.n	8008b3a <HAL_GPIO_Init+0xfa>
 8008a94:	4a90      	ldr	r2, [pc, #576]	; (8008cd8 <HAL_GPIO_Init+0x298>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d869      	bhi.n	8008b6e <HAL_GPIO_Init+0x12e>
 8008a9a:	4a90      	ldr	r2, [pc, #576]	; (8008cdc <HAL_GPIO_Init+0x29c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d04c      	beq.n	8008b3a <HAL_GPIO_Init+0xfa>
 8008aa0:	4a8e      	ldr	r2, [pc, #568]	; (8008cdc <HAL_GPIO_Init+0x29c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d863      	bhi.n	8008b6e <HAL_GPIO_Init+0x12e>
 8008aa6:	4a8e      	ldr	r2, [pc, #568]	; (8008ce0 <HAL_GPIO_Init+0x2a0>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d046      	beq.n	8008b3a <HAL_GPIO_Init+0xfa>
 8008aac:	4a8c      	ldr	r2, [pc, #560]	; (8008ce0 <HAL_GPIO_Init+0x2a0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d85d      	bhi.n	8008b6e <HAL_GPIO_Init+0x12e>
 8008ab2:	2b12      	cmp	r3, #18
 8008ab4:	d82a      	bhi.n	8008b0c <HAL_GPIO_Init+0xcc>
 8008ab6:	2b12      	cmp	r3, #18
 8008ab8:	d859      	bhi.n	8008b6e <HAL_GPIO_Init+0x12e>
 8008aba:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <HAL_GPIO_Init+0x80>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008b3b 	.word	0x08008b3b
 8008ac4:	08008b15 	.word	0x08008b15
 8008ac8:	08008b27 	.word	0x08008b27
 8008acc:	08008b69 	.word	0x08008b69
 8008ad0:	08008b6f 	.word	0x08008b6f
 8008ad4:	08008b6f 	.word	0x08008b6f
 8008ad8:	08008b6f 	.word	0x08008b6f
 8008adc:	08008b6f 	.word	0x08008b6f
 8008ae0:	08008b6f 	.word	0x08008b6f
 8008ae4:	08008b6f 	.word	0x08008b6f
 8008ae8:	08008b6f 	.word	0x08008b6f
 8008aec:	08008b6f 	.word	0x08008b6f
 8008af0:	08008b6f 	.word	0x08008b6f
 8008af4:	08008b6f 	.word	0x08008b6f
 8008af8:	08008b6f 	.word	0x08008b6f
 8008afc:	08008b6f 	.word	0x08008b6f
 8008b00:	08008b6f 	.word	0x08008b6f
 8008b04:	08008b1d 	.word	0x08008b1d
 8008b08:	08008b31 	.word	0x08008b31
 8008b0c:	4a75      	ldr	r2, [pc, #468]	; (8008ce4 <HAL_GPIO_Init+0x2a4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d013      	beq.n	8008b3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008b12:	e02c      	b.n	8008b6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	623b      	str	r3, [r7, #32]
          break;
 8008b1a:	e029      	b.n	8008b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	3304      	adds	r3, #4
 8008b22:	623b      	str	r3, [r7, #32]
          break;
 8008b24:	e024      	b.n	8008b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	623b      	str	r3, [r7, #32]
          break;
 8008b2e:	e01f      	b.n	8008b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	330c      	adds	r3, #12
 8008b36:	623b      	str	r3, [r7, #32]
          break;
 8008b38:	e01a      	b.n	8008b70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d102      	bne.n	8008b48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008b42:	2304      	movs	r3, #4
 8008b44:	623b      	str	r3, [r7, #32]
          break;
 8008b46:	e013      	b.n	8008b70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d105      	bne.n	8008b5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008b50:	2308      	movs	r3, #8
 8008b52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	611a      	str	r2, [r3, #16]
          break;
 8008b5a:	e009      	b.n	8008b70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008b5c:	2308      	movs	r3, #8
 8008b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	69fa      	ldr	r2, [r7, #28]
 8008b64:	615a      	str	r2, [r3, #20]
          break;
 8008b66:	e003      	b.n	8008b70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	623b      	str	r3, [r7, #32]
          break;
 8008b6c:	e000      	b.n	8008b70 <HAL_GPIO_Init+0x130>
          break;
 8008b6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	2bff      	cmp	r3, #255	; 0xff
 8008b74:	d801      	bhi.n	8008b7a <HAL_GPIO_Init+0x13a>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	e001      	b.n	8008b7e <HAL_GPIO_Init+0x13e>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	2bff      	cmp	r3, #255	; 0xff
 8008b84:	d802      	bhi.n	8008b8c <HAL_GPIO_Init+0x14c>
 8008b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	e002      	b.n	8008b92 <HAL_GPIO_Init+0x152>
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	3b08      	subs	r3, #8
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	210f      	movs	r1, #15
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba0:	43db      	mvns	r3, r3
 8008ba2:	401a      	ands	r2, r3
 8008ba4:	6a39      	ldr	r1, [r7, #32]
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bac:	431a      	orrs	r2, r3
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 80c1 	beq.w	8008d42 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008bc0:	4b49      	ldr	r3, [pc, #292]	; (8008ce8 <HAL_GPIO_Init+0x2a8>)
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	4a48      	ldr	r2, [pc, #288]	; (8008ce8 <HAL_GPIO_Init+0x2a8>)
 8008bc6:	f043 0301 	orr.w	r3, r3, #1
 8008bca:	6193      	str	r3, [r2, #24]
 8008bcc:	4b46      	ldr	r3, [pc, #280]	; (8008ce8 <HAL_GPIO_Init+0x2a8>)
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	60bb      	str	r3, [r7, #8]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008bd8:	4a44      	ldr	r2, [pc, #272]	; (8008cec <HAL_GPIO_Init+0x2ac>)
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	089b      	lsrs	r3, r3, #2
 8008bde:	3302      	adds	r3, #2
 8008be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008be4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	f003 0303 	and.w	r3, r3, #3
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	220f      	movs	r2, #15
 8008bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a3c      	ldr	r2, [pc, #240]	; (8008cf0 <HAL_GPIO_Init+0x2b0>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d01f      	beq.n	8008c44 <HAL_GPIO_Init+0x204>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a3b      	ldr	r2, [pc, #236]	; (8008cf4 <HAL_GPIO_Init+0x2b4>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d019      	beq.n	8008c40 <HAL_GPIO_Init+0x200>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a3a      	ldr	r2, [pc, #232]	; (8008cf8 <HAL_GPIO_Init+0x2b8>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d013      	beq.n	8008c3c <HAL_GPIO_Init+0x1fc>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a39      	ldr	r2, [pc, #228]	; (8008cfc <HAL_GPIO_Init+0x2bc>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d00d      	beq.n	8008c38 <HAL_GPIO_Init+0x1f8>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a38      	ldr	r2, [pc, #224]	; (8008d00 <HAL_GPIO_Init+0x2c0>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d007      	beq.n	8008c34 <HAL_GPIO_Init+0x1f4>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a37      	ldr	r2, [pc, #220]	; (8008d04 <HAL_GPIO_Init+0x2c4>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d101      	bne.n	8008c30 <HAL_GPIO_Init+0x1f0>
 8008c2c:	2305      	movs	r3, #5
 8008c2e:	e00a      	b.n	8008c46 <HAL_GPIO_Init+0x206>
 8008c30:	2306      	movs	r3, #6
 8008c32:	e008      	b.n	8008c46 <HAL_GPIO_Init+0x206>
 8008c34:	2304      	movs	r3, #4
 8008c36:	e006      	b.n	8008c46 <HAL_GPIO_Init+0x206>
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e004      	b.n	8008c46 <HAL_GPIO_Init+0x206>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e002      	b.n	8008c46 <HAL_GPIO_Init+0x206>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e000      	b.n	8008c46 <HAL_GPIO_Init+0x206>
 8008c44:	2300      	movs	r3, #0
 8008c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c48:	f002 0203 	and.w	r2, r2, #3
 8008c4c:	0092      	lsls	r2, r2, #2
 8008c4e:	4093      	lsls	r3, r2
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008c56:	4925      	ldr	r1, [pc, #148]	; (8008cec <HAL_GPIO_Init+0x2ac>)
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	089b      	lsrs	r3, r3, #2
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d006      	beq.n	8008c7e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008c70:	4b25      	ldr	r3, [pc, #148]	; (8008d08 <HAL_GPIO_Init+0x2c8>)
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	4924      	ldr	r1, [pc, #144]	; (8008d08 <HAL_GPIO_Init+0x2c8>)
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	608b      	str	r3, [r1, #8]
 8008c7c:	e006      	b.n	8008c8c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008c7e:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <HAL_GPIO_Init+0x2c8>)
 8008c80:	689a      	ldr	r2, [r3, #8]
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	43db      	mvns	r3, r3
 8008c86:	4920      	ldr	r1, [pc, #128]	; (8008d08 <HAL_GPIO_Init+0x2c8>)
 8008c88:	4013      	ands	r3, r2
 8008c8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d006      	beq.n	8008ca6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008c98:	4b1b      	ldr	r3, [pc, #108]	; (8008d08 <HAL_GPIO_Init+0x2c8>)
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	491a      	ldr	r1, [pc, #104]	; (8008d08 <HAL_GPIO_Init+0x2c8>)
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	60cb      	str	r3, [r1, #12]
 8008ca4:	e006      	b.n	8008cb4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008ca6:	4b18      	ldr	r3, [pc, #96]	; (8008d08 <HAL_GPIO_Init+0x2c8>)
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	43db      	mvns	r3, r3
 8008cae:	4916      	ldr	r1, [pc, #88]	; (8008d08 <HAL_GPIO_Init+0x2c8>)
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d025      	beq.n	8008d0c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008cc0:	4b11      	ldr	r3, [pc, #68]	; (8008d08 <HAL_GPIO_Init+0x2c8>)
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	4910      	ldr	r1, [pc, #64]	; (8008d08 <HAL_GPIO_Init+0x2c8>)
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	604b      	str	r3, [r1, #4]
 8008ccc:	e025      	b.n	8008d1a <HAL_GPIO_Init+0x2da>
 8008cce:	bf00      	nop
 8008cd0:	10320000 	.word	0x10320000
 8008cd4:	10310000 	.word	0x10310000
 8008cd8:	10220000 	.word	0x10220000
 8008cdc:	10210000 	.word	0x10210000
 8008ce0:	10120000 	.word	0x10120000
 8008ce4:	10110000 	.word	0x10110000
 8008ce8:	40021000 	.word	0x40021000
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40010800 	.word	0x40010800
 8008cf4:	40010c00 	.word	0x40010c00
 8008cf8:	40011000 	.word	0x40011000
 8008cfc:	40011400 	.word	0x40011400
 8008d00:	40011800 	.word	0x40011800
 8008d04:	40011c00 	.word	0x40011c00
 8008d08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008d0c:	4b15      	ldr	r3, [pc, #84]	; (8008d64 <HAL_GPIO_Init+0x324>)
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	43db      	mvns	r3, r3
 8008d14:	4913      	ldr	r1, [pc, #76]	; (8008d64 <HAL_GPIO_Init+0x324>)
 8008d16:	4013      	ands	r3, r2
 8008d18:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d006      	beq.n	8008d34 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008d26:	4b0f      	ldr	r3, [pc, #60]	; (8008d64 <HAL_GPIO_Init+0x324>)
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	490e      	ldr	r1, [pc, #56]	; (8008d64 <HAL_GPIO_Init+0x324>)
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	600b      	str	r3, [r1, #0]
 8008d32:	e006      	b.n	8008d42 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008d34:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <HAL_GPIO_Init+0x324>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	4909      	ldr	r1, [pc, #36]	; (8008d64 <HAL_GPIO_Init+0x324>)
 8008d3e:	4013      	ands	r3, r2
 8008d40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	3301      	adds	r3, #1
 8008d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f47f ae7e 	bne.w	8008a54 <HAL_GPIO_Init+0x14>
  }
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop
 8008d5c:	372c      	adds	r7, #44	; 0x2c
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bc80      	pop	{r7}
 8008d62:	4770      	bx	lr
 8008d64:	40010400 	.word	0x40010400

08008d68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b089      	sub	sp, #36	; 0x24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d72:	2300      	movs	r3, #0
 8008d74:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008d76:	e0a6      	b.n	8008ec6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008d78:	2201      	movs	r2, #1
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	4013      	ands	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 8099 	beq.w	8008ec0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008d8e:	4a54      	ldr	r2, [pc, #336]	; (8008ee0 <HAL_GPIO_DeInit+0x178>)
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	089b      	lsrs	r3, r3, #2
 8008d94:	3302      	adds	r3, #2
 8008d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d9a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	f003 0303 	and.w	r3, r3, #3
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	220f      	movs	r2, #15
 8008da6:	fa02 f303 	lsl.w	r3, r2, r3
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	4013      	ands	r3, r2
 8008dae:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a4c      	ldr	r2, [pc, #304]	; (8008ee4 <HAL_GPIO_DeInit+0x17c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d01f      	beq.n	8008df8 <HAL_GPIO_DeInit+0x90>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a4b      	ldr	r2, [pc, #300]	; (8008ee8 <HAL_GPIO_DeInit+0x180>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d019      	beq.n	8008df4 <HAL_GPIO_DeInit+0x8c>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a4a      	ldr	r2, [pc, #296]	; (8008eec <HAL_GPIO_DeInit+0x184>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d013      	beq.n	8008df0 <HAL_GPIO_DeInit+0x88>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a49      	ldr	r2, [pc, #292]	; (8008ef0 <HAL_GPIO_DeInit+0x188>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d00d      	beq.n	8008dec <HAL_GPIO_DeInit+0x84>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a48      	ldr	r2, [pc, #288]	; (8008ef4 <HAL_GPIO_DeInit+0x18c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d007      	beq.n	8008de8 <HAL_GPIO_DeInit+0x80>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a47      	ldr	r2, [pc, #284]	; (8008ef8 <HAL_GPIO_DeInit+0x190>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d101      	bne.n	8008de4 <HAL_GPIO_DeInit+0x7c>
 8008de0:	2305      	movs	r3, #5
 8008de2:	e00a      	b.n	8008dfa <HAL_GPIO_DeInit+0x92>
 8008de4:	2306      	movs	r3, #6
 8008de6:	e008      	b.n	8008dfa <HAL_GPIO_DeInit+0x92>
 8008de8:	2304      	movs	r3, #4
 8008dea:	e006      	b.n	8008dfa <HAL_GPIO_DeInit+0x92>
 8008dec:	2303      	movs	r3, #3
 8008dee:	e004      	b.n	8008dfa <HAL_GPIO_DeInit+0x92>
 8008df0:	2302      	movs	r3, #2
 8008df2:	e002      	b.n	8008dfa <HAL_GPIO_DeInit+0x92>
 8008df4:	2301      	movs	r3, #1
 8008df6:	e000      	b.n	8008dfa <HAL_GPIO_DeInit+0x92>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	f002 0203 	and.w	r2, r2, #3
 8008e00:	0092      	lsls	r2, r2, #2
 8008e02:	4093      	lsls	r3, r2
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d132      	bne.n	8008e70 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008e0a:	4b3c      	ldr	r3, [pc, #240]	; (8008efc <HAL_GPIO_DeInit+0x194>)
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	43db      	mvns	r3, r3
 8008e12:	493a      	ldr	r1, [pc, #232]	; (8008efc <HAL_GPIO_DeInit+0x194>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008e18:	4b38      	ldr	r3, [pc, #224]	; (8008efc <HAL_GPIO_DeInit+0x194>)
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	43db      	mvns	r3, r3
 8008e20:	4936      	ldr	r1, [pc, #216]	; (8008efc <HAL_GPIO_DeInit+0x194>)
 8008e22:	4013      	ands	r3, r2
 8008e24:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008e26:	4b35      	ldr	r3, [pc, #212]	; (8008efc <HAL_GPIO_DeInit+0x194>)
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	43db      	mvns	r3, r3
 8008e2e:	4933      	ldr	r1, [pc, #204]	; (8008efc <HAL_GPIO_DeInit+0x194>)
 8008e30:	4013      	ands	r3, r2
 8008e32:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008e34:	4b31      	ldr	r3, [pc, #196]	; (8008efc <HAL_GPIO_DeInit+0x194>)
 8008e36:	689a      	ldr	r2, [r3, #8]
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	43db      	mvns	r3, r3
 8008e3c:	492f      	ldr	r1, [pc, #188]	; (8008efc <HAL_GPIO_DeInit+0x194>)
 8008e3e:	4013      	ands	r3, r2
 8008e40:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	f003 0303 	and.w	r3, r3, #3
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	220f      	movs	r2, #15
 8008e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e50:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008e52:	4a23      	ldr	r2, [pc, #140]	; (8008ee0 <HAL_GPIO_DeInit+0x178>)
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	089b      	lsrs	r3, r3, #2
 8008e58:	3302      	adds	r3, #2
 8008e5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	43da      	mvns	r2, r3
 8008e62:	481f      	ldr	r0, [pc, #124]	; (8008ee0 <HAL_GPIO_DeInit+0x178>)
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	089b      	lsrs	r3, r3, #2
 8008e68:	400a      	ands	r2, r1
 8008e6a:	3302      	adds	r3, #2
 8008e6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	2bff      	cmp	r3, #255	; 0xff
 8008e74:	d801      	bhi.n	8008e7a <HAL_GPIO_DeInit+0x112>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	e001      	b.n	8008e7e <HAL_GPIO_DeInit+0x116>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2bff      	cmp	r3, #255	; 0xff
 8008e84:	d802      	bhi.n	8008e8c <HAL_GPIO_DeInit+0x124>
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	e002      	b.n	8008e92 <HAL_GPIO_DeInit+0x12a>
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	3b08      	subs	r3, #8
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	210f      	movs	r1, #15
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	401a      	ands	r2, r3
 8008ea4:	2104      	movs	r1, #4
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8008eac:	431a      	orrs	r2, r3
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	43db      	mvns	r3, r3
 8008eba:	401a      	ands	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	fa22 f303 	lsr.w	r3, r2, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f47f af52 	bne.w	8008d78 <HAL_GPIO_DeInit+0x10>
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	3724      	adds	r7, #36	; 0x24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr
 8008ee0:	40010000 	.word	0x40010000
 8008ee4:	40010800 	.word	0x40010800
 8008ee8:	40010c00 	.word	0x40010c00
 8008eec:	40011000 	.word	0x40011000
 8008ef0:	40011400 	.word	0x40011400
 8008ef4:	40011800 	.word	0x40011800
 8008ef8:	40011c00 	.word	0x40011c00
 8008efc:	40010400 	.word	0x40010400

08008f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	887b      	ldrh	r3, [r7, #2]
 8008f12:	4013      	ands	r3, r2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	73fb      	strb	r3, [r7, #15]
 8008f1c:	e001      	b.n	8008f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bc80      	pop	{r7}
 8008f2c:	4770      	bx	lr

08008f2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	807b      	strh	r3, [r7, #2]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f3e:	787b      	ldrb	r3, [r7, #1]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f44:	887a      	ldrh	r2, [r7, #2]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008f4a:	e003      	b.n	8008f54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008f4c:	887b      	ldrh	r3, [r7, #2]
 8008f4e:	041a      	lsls	r2, r3, #16
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	611a      	str	r2, [r3, #16]
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr

08008f5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f70:	887a      	ldrh	r2, [r7, #2]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4013      	ands	r3, r2
 8008f76:	041a      	lsls	r2, r3, #16
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	43d9      	mvns	r1, r3
 8008f7c:	887b      	ldrh	r3, [r7, #2]
 8008f7e:	400b      	ands	r3, r1
 8008f80:	431a      	orrs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	611a      	str	r2, [r3, #16]
}
 8008f86:	bf00      	nop
 8008f88:	3714      	adds	r7, #20
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bc80      	pop	{r7}
 8008f8e:	4770      	bx	lr

08008f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e12b      	b.n	80091fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7fe fff8 	bl	8007fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2224      	movs	r2, #36	; 0x24
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0201 	bic.w	r2, r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ff4:	f001 fdb8 	bl	800ab68 <HAL_RCC_GetPCLK1Freq>
 8008ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	4a81      	ldr	r2, [pc, #516]	; (8009204 <HAL_I2C_Init+0x274>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d807      	bhi.n	8009014 <HAL_I2C_Init+0x84>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4a80      	ldr	r2, [pc, #512]	; (8009208 <HAL_I2C_Init+0x278>)
 8009008:	4293      	cmp	r3, r2
 800900a:	bf94      	ite	ls
 800900c:	2301      	movls	r3, #1
 800900e:	2300      	movhi	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	e006      	b.n	8009022 <HAL_I2C_Init+0x92>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	4a7d      	ldr	r2, [pc, #500]	; (800920c <HAL_I2C_Init+0x27c>)
 8009018:	4293      	cmp	r3, r2
 800901a:	bf94      	ite	ls
 800901c:	2301      	movls	r3, #1
 800901e:	2300      	movhi	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009026:	2301      	movs	r3, #1
 8009028:	e0e7      	b.n	80091fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4a78      	ldr	r2, [pc, #480]	; (8009210 <HAL_I2C_Init+0x280>)
 800902e:	fba2 2303 	umull	r2, r3, r2, r3
 8009032:	0c9b      	lsrs	r3, r3, #18
 8009034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	430a      	orrs	r2, r1
 8009048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4a6a      	ldr	r2, [pc, #424]	; (8009204 <HAL_I2C_Init+0x274>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d802      	bhi.n	8009064 <HAL_I2C_Init+0xd4>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	3301      	adds	r3, #1
 8009062:	e009      	b.n	8009078 <HAL_I2C_Init+0xe8>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800906a:	fb02 f303 	mul.w	r3, r2, r3
 800906e:	4a69      	ldr	r2, [pc, #420]	; (8009214 <HAL_I2C_Init+0x284>)
 8009070:	fba2 2303 	umull	r2, r3, r2, r3
 8009074:	099b      	lsrs	r3, r3, #6
 8009076:	3301      	adds	r3, #1
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	6812      	ldr	r2, [r2, #0]
 800907c:	430b      	orrs	r3, r1
 800907e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800908a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	495c      	ldr	r1, [pc, #368]	; (8009204 <HAL_I2C_Init+0x274>)
 8009094:	428b      	cmp	r3, r1
 8009096:	d819      	bhi.n	80090cc <HAL_I2C_Init+0x13c>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	1e59      	subs	r1, r3, #1
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	005b      	lsls	r3, r3, #1
 80090a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80090a6:	1c59      	adds	r1, r3, #1
 80090a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80090ac:	400b      	ands	r3, r1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00a      	beq.n	80090c8 <HAL_I2C_Init+0x138>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	1e59      	subs	r1, r3, #1
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	005b      	lsls	r3, r3, #1
 80090bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80090c0:	3301      	adds	r3, #1
 80090c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090c6:	e051      	b.n	800916c <HAL_I2C_Init+0x1dc>
 80090c8:	2304      	movs	r3, #4
 80090ca:	e04f      	b.n	800916c <HAL_I2C_Init+0x1dc>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d111      	bne.n	80090f8 <HAL_I2C_Init+0x168>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	1e58      	subs	r0, r3, #1
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6859      	ldr	r1, [r3, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	440b      	add	r3, r1
 80090e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80090e6:	3301      	adds	r3, #1
 80090e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	bf0c      	ite	eq
 80090f0:	2301      	moveq	r3, #1
 80090f2:	2300      	movne	r3, #0
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	e012      	b.n	800911e <HAL_I2C_Init+0x18e>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	1e58      	subs	r0, r3, #1
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6859      	ldr	r1, [r3, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	440b      	add	r3, r1
 8009106:	0099      	lsls	r1, r3, #2
 8009108:	440b      	add	r3, r1
 800910a:	fbb0 f3f3 	udiv	r3, r0, r3
 800910e:	3301      	adds	r3, #1
 8009110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009114:	2b00      	cmp	r3, #0
 8009116:	bf0c      	ite	eq
 8009118:	2301      	moveq	r3, #1
 800911a:	2300      	movne	r3, #0
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <HAL_I2C_Init+0x196>
 8009122:	2301      	movs	r3, #1
 8009124:	e022      	b.n	800916c <HAL_I2C_Init+0x1dc>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10e      	bne.n	800914c <HAL_I2C_Init+0x1bc>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	1e58      	subs	r0, r3, #1
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6859      	ldr	r1, [r3, #4]
 8009136:	460b      	mov	r3, r1
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	440b      	add	r3, r1
 800913c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009140:	3301      	adds	r3, #1
 8009142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800914a:	e00f      	b.n	800916c <HAL_I2C_Init+0x1dc>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	1e58      	subs	r0, r3, #1
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6859      	ldr	r1, [r3, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	0099      	lsls	r1, r3, #2
 800915c:	440b      	add	r3, r1
 800915e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009162:	3301      	adds	r3, #1
 8009164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	6809      	ldr	r1, [r1, #0]
 8009170:	4313      	orrs	r3, r2
 8009172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	69da      	ldr	r2, [r3, #28]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800919a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	6911      	ldr	r1, [r2, #16]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	68d2      	ldr	r2, [r2, #12]
 80091a6:	4311      	orrs	r1, r2
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	6812      	ldr	r2, [r2, #0]
 80091ac:	430b      	orrs	r3, r1
 80091ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	695a      	ldr	r2, [r3, #20]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	431a      	orrs	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f042 0201 	orr.w	r2, r2, #1
 80091da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	000186a0 	.word	0x000186a0
 8009208:	001e847f 	.word	0x001e847f
 800920c:	003d08ff 	.word	0x003d08ff
 8009210:	431bde83 	.word	0x431bde83
 8009214:	10624dd3 	.word	0x10624dd3

08009218 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e021      	b.n	800926e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2224      	movs	r2, #36	; 0x24
 800922e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0201 	bic.w	r2, r2, #1
 8009240:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7fe fef0 	bl	8008028 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af02      	add	r7, sp, #8
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	461a      	mov	r2, r3
 8009284:	460b      	mov	r3, r1
 8009286:	817b      	strh	r3, [r7, #10]
 8009288:	4613      	mov	r3, r2
 800928a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800928c:	f7ff f85e 	bl	800834c <HAL_GetTick>
 8009290:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b20      	cmp	r3, #32
 800929c:	f040 80e0 	bne.w	8009460 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	2319      	movs	r3, #25
 80092a6:	2201      	movs	r2, #1
 80092a8:	4970      	ldr	r1, [pc, #448]	; (800946c <HAL_I2C_Master_Transmit+0x1f4>)
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fe5c 	bl	8009f68 <I2C_WaitOnFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80092b6:	2302      	movs	r3, #2
 80092b8:	e0d3      	b.n	8009462 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d101      	bne.n	80092c8 <HAL_I2C_Master_Transmit+0x50>
 80092c4:	2302      	movs	r3, #2
 80092c6:	e0cc      	b.n	8009462 <HAL_I2C_Master_Transmit+0x1ea>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d007      	beq.n	80092ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f042 0201 	orr.w	r2, r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2221      	movs	r2, #33	; 0x21
 8009302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2210      	movs	r2, #16
 800930a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	893a      	ldrh	r2, [r7, #8]
 800931e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4a50      	ldr	r2, [pc, #320]	; (8009470 <HAL_I2C_Master_Transmit+0x1f8>)
 800932e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009330:	8979      	ldrh	r1, [r7, #10]
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	6a3a      	ldr	r2, [r7, #32]
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fc16 	bl	8009b68 <I2C_MasterRequestWrite>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e08d      	b.n	8009462 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009346:	2300      	movs	r3, #0
 8009348:	613b      	str	r3, [r7, #16]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	613b      	str	r3, [r7, #16]
 800935a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800935c:	e066      	b.n	800942c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	6a39      	ldr	r1, [r7, #32]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 ff1a 	bl	800a19c <I2C_WaitOnTXEFlagUntilTimeout>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00d      	beq.n	800938a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009372:	2b04      	cmp	r3, #4
 8009374:	d107      	bne.n	8009386 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e06b      	b.n	8009462 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	781a      	ldrb	r2, [r3, #0]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	f003 0304 	and.w	r3, r3, #4
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d11b      	bne.n	8009400 <HAL_I2C_Master_Transmit+0x188>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d017      	beq.n	8009400 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	781a      	ldrb	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	1c5a      	adds	r2, r3, #1
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	3b01      	subs	r3, #1
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f8:	3b01      	subs	r3, #1
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	6a39      	ldr	r1, [r7, #32]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 ff11 	bl	800a22c <I2C_WaitOnBTFFlagUntilTimeout>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00d      	beq.n	800942c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009414:	2b04      	cmp	r3, #4
 8009416:	d107      	bne.n	8009428 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009426:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e01a      	b.n	8009462 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009430:	2b00      	cmp	r3, #0
 8009432:	d194      	bne.n	800935e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2220      	movs	r2, #32
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	e000      	b.n	8009462 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009460:	2302      	movs	r3, #2
  }
}
 8009462:	4618      	mov	r0, r3
 8009464:	3718      	adds	r7, #24
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	00100002 	.word	0x00100002
 8009470:	ffff0000 	.word	0xffff0000

08009474 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b088      	sub	sp, #32
 8009478:	af02      	add	r7, sp, #8
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	4608      	mov	r0, r1
 800947e:	4611      	mov	r1, r2
 8009480:	461a      	mov	r2, r3
 8009482:	4603      	mov	r3, r0
 8009484:	817b      	strh	r3, [r7, #10]
 8009486:	460b      	mov	r3, r1
 8009488:	813b      	strh	r3, [r7, #8]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800948e:	f7fe ff5d 	bl	800834c <HAL_GetTick>
 8009492:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b20      	cmp	r3, #32
 800949e:	f040 80d9 	bne.w	8009654 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	2319      	movs	r3, #25
 80094a8:	2201      	movs	r2, #1
 80094aa:	496d      	ldr	r1, [pc, #436]	; (8009660 <HAL_I2C_Mem_Write+0x1ec>)
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 fd5b 	bl	8009f68 <I2C_WaitOnFlagUntilTimeout>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80094b8:	2302      	movs	r3, #2
 80094ba:	e0cc      	b.n	8009656 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <HAL_I2C_Mem_Write+0x56>
 80094c6:	2302      	movs	r3, #2
 80094c8:	e0c5      	b.n	8009656 <HAL_I2C_Mem_Write+0x1e2>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d007      	beq.n	80094f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0201 	orr.w	r2, r2, #1
 80094ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2221      	movs	r2, #33	; 0x21
 8009504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2240      	movs	r2, #64	; 0x40
 800950c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6a3a      	ldr	r2, [r7, #32]
 800951a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009520:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009526:	b29a      	uxth	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4a4d      	ldr	r2, [pc, #308]	; (8009664 <HAL_I2C_Mem_Write+0x1f0>)
 8009530:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009532:	88f8      	ldrh	r0, [r7, #6]
 8009534:	893a      	ldrh	r2, [r7, #8]
 8009536:	8979      	ldrh	r1, [r7, #10]
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	9301      	str	r3, [sp, #4]
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	4603      	mov	r3, r0
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 fb92 	bl	8009c6c <I2C_RequestMemoryWrite>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d052      	beq.n	80095f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e081      	b.n	8009656 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 fe20 	bl	800a19c <I2C_WaitOnTXEFlagUntilTimeout>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00d      	beq.n	800957e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009566:	2b04      	cmp	r3, #4
 8009568:	d107      	bne.n	800957a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009578:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	e06b      	b.n	8009656 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	1c5a      	adds	r2, r3, #1
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009598:	3b01      	subs	r3, #1
 800959a:	b29a      	uxth	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d11b      	bne.n	80095f4 <HAL_I2C_Mem_Write+0x180>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d017      	beq.n	80095f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	781a      	ldrb	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095de:	3b01      	subs	r3, #1
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	3b01      	subs	r3, #1
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1aa      	bne.n	8009552 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f000 fe13 	bl	800a22c <I2C_WaitOnBTFFlagUntilTimeout>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00d      	beq.n	8009628 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009610:	2b04      	cmp	r3, #4
 8009612:	d107      	bne.n	8009624 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009622:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e016      	b.n	8009656 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2220      	movs	r2, #32
 800963c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	e000      	b.n	8009656 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009654:	2302      	movs	r3, #2
  }
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	00100002 	.word	0x00100002
 8009664:	ffff0000 	.word	0xffff0000

08009668 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08c      	sub	sp, #48	; 0x30
 800966c:	af02      	add	r7, sp, #8
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	4608      	mov	r0, r1
 8009672:	4611      	mov	r1, r2
 8009674:	461a      	mov	r2, r3
 8009676:	4603      	mov	r3, r0
 8009678:	817b      	strh	r3, [r7, #10]
 800967a:	460b      	mov	r3, r1
 800967c:	813b      	strh	r3, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009686:	f7fe fe61 	bl	800834c <HAL_GetTick>
 800968a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009692:	b2db      	uxtb	r3, r3
 8009694:	2b20      	cmp	r3, #32
 8009696:	f040 8244 	bne.w	8009b22 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	2319      	movs	r3, #25
 80096a0:	2201      	movs	r2, #1
 80096a2:	4982      	ldr	r1, [pc, #520]	; (80098ac <HAL_I2C_Mem_Read+0x244>)
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 fc5f 	bl	8009f68 <I2C_WaitOnFlagUntilTimeout>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80096b0:	2302      	movs	r3, #2
 80096b2:	e237      	b.n	8009b24 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d101      	bne.n	80096c2 <HAL_I2C_Mem_Read+0x5a>
 80096be:	2302      	movs	r3, #2
 80096c0:	e230      	b.n	8009b24 <HAL_I2C_Mem_Read+0x4bc>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d007      	beq.n	80096e8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2222      	movs	r2, #34	; 0x22
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2240      	movs	r2, #64	; 0x40
 8009704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009718:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800971e:	b29a      	uxth	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4a62      	ldr	r2, [pc, #392]	; (80098b0 <HAL_I2C_Mem_Read+0x248>)
 8009728:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800972a:	88f8      	ldrh	r0, [r7, #6]
 800972c:	893a      	ldrh	r2, [r7, #8]
 800972e:	8979      	ldrh	r1, [r7, #10]
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	4603      	mov	r3, r0
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 fb2c 	bl	8009d98 <I2C_RequestMemoryRead>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e1ec      	b.n	8009b24 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974e:	2b00      	cmp	r3, #0
 8009750:	d113      	bne.n	800977a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009752:	2300      	movs	r3, #0
 8009754:	61fb      	str	r3, [r7, #28]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	61fb      	str	r3, [r7, #28]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	61fb      	str	r3, [r7, #28]
 8009766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	e1c0      	b.n	8009afc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800977e:	2b01      	cmp	r3, #1
 8009780:	d11e      	bne.n	80097c0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009790:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009792:	b672      	cpsid	i
}
 8009794:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009796:	2300      	movs	r3, #0
 8009798:	61bb      	str	r3, [r7, #24]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	61bb      	str	r3, [r7, #24]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	61bb      	str	r3, [r7, #24]
 80097aa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80097bc:	b662      	cpsie	i
}
 80097be:	e035      	b.n	800982c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d11e      	bne.n	8009806 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80097d8:	b672      	cpsid	i
}
 80097da:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097dc:	2300      	movs	r3, #0
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	617b      	str	r3, [r7, #20]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009800:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009802:	b662      	cpsie	i
}
 8009804:	e012      	b.n	800982c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009814:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009816:	2300      	movs	r3, #0
 8009818:	613b      	str	r3, [r7, #16]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	613b      	str	r3, [r7, #16]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	613b      	str	r3, [r7, #16]
 800982a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800982c:	e166      	b.n	8009afc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009832:	2b03      	cmp	r3, #3
 8009834:	f200 811f 	bhi.w	8009a76 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800983c:	2b01      	cmp	r3, #1
 800983e:	d123      	bne.n	8009888 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 fd39 	bl	800a2bc <I2C_WaitOnRXNEFlagUntilTimeout>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e167      	b.n	8009b24 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	691a      	ldr	r2, [r3, #16]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985e:	b2d2      	uxtb	r2, r2
 8009860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009870:	3b01      	subs	r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800987c:	b29b      	uxth	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	b29a      	uxth	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009886:	e139      	b.n	8009afc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988c:	2b02      	cmp	r3, #2
 800988e:	d152      	bne.n	8009936 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	2200      	movs	r2, #0
 8009898:	4906      	ldr	r1, [pc, #24]	; (80098b4 <HAL_I2C_Mem_Read+0x24c>)
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 fb64 	bl	8009f68 <I2C_WaitOnFlagUntilTimeout>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d008      	beq.n	80098b8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e13c      	b.n	8009b24 <HAL_I2C_Mem_Read+0x4bc>
 80098aa:	bf00      	nop
 80098ac:	00100002 	.word	0x00100002
 80098b0:	ffff0000 	.word	0xffff0000
 80098b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80098b8:	b672      	cpsid	i
}
 80098ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	691a      	ldr	r2, [r3, #16]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80098fe:	b662      	cpsie	i
}
 8009900:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	691a      	ldr	r2, [r3, #16]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	b2d2      	uxtb	r2, r2
 800990e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800991e:	3b01      	subs	r3, #1
 8009920:	b29a      	uxth	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800992a:	b29b      	uxth	r3, r3
 800992c:	3b01      	subs	r3, #1
 800992e:	b29a      	uxth	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009934:	e0e2      	b.n	8009afc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	2200      	movs	r2, #0
 800993e:	497b      	ldr	r1, [pc, #492]	; (8009b2c <HAL_I2C_Mem_Read+0x4c4>)
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 fb11 	bl	8009f68 <I2C_WaitOnFlagUntilTimeout>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e0e9      	b.n	8009b24 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800995e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009960:	b672      	cpsid	i
}
 8009962:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	691a      	ldr	r2, [r3, #16]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996e:	b2d2      	uxtb	r2, r2
 8009970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	1c5a      	adds	r2, r3, #1
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009980:	3b01      	subs	r3, #1
 8009982:	b29a      	uxth	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009996:	4b66      	ldr	r3, [pc, #408]	; (8009b30 <HAL_I2C_Mem_Read+0x4c8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	08db      	lsrs	r3, r3, #3
 800999c:	4a65      	ldr	r2, [pc, #404]	; (8009b34 <HAL_I2C_Mem_Read+0x4cc>)
 800999e:	fba2 2303 	umull	r2, r3, r2, r3
 80099a2:	0a1a      	lsrs	r2, r3, #8
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	00da      	lsls	r2, r3, #3
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80099b6:	6a3b      	ldr	r3, [r7, #32]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d118      	bne.n	80099ee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	f043 0220 	orr.w	r2, r3, #32
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80099de:	b662      	cpsie	i
}
 80099e0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e09a      	b.n	8009b24 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d1d9      	bne.n	80099b0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691a      	ldr	r2, [r3, #16]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	3b01      	subs	r3, #1
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009a3e:	b662      	cpsie	i
}
 8009a40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	691a      	ldr	r2, [r3, #16]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	b2d2      	uxtb	r2, r2
 8009a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	1c5a      	adds	r2, r3, #1
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a74:	e042      	b.n	8009afc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f000 fc1e 	bl	800a2bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d001      	beq.n	8009a8a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e04c      	b.n	8009b24 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	691a      	ldr	r2, [r3, #16]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a94:	b2d2      	uxtb	r2, r2
 8009a96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	f003 0304 	and.w	r3, r3, #4
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d118      	bne.n	8009afc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	691a      	ldr	r2, [r3, #16]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	b2d2      	uxtb	r2, r2
 8009ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f47f ae94 	bne.w	800982e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e000      	b.n	8009b24 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009b22:	2302      	movs	r3, #2
  }
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3728      	adds	r7, #40	; 0x28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	00010004 	.word	0x00010004
 8009b30:	200000a8 	.word	0x200000a8
 8009b34:	14f8b589 	.word	0x14f8b589

08009b38 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b46:	b2db      	uxtb	r3, r3
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bc80      	pop	{r7}
 8009b50:	4770      	bx	lr

08009b52 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bc80      	pop	{r7}
 8009b66:	4770      	bx	lr

08009b68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	607a      	str	r2, [r7, #4]
 8009b72:	603b      	str	r3, [r7, #0]
 8009b74:	460b      	mov	r3, r1
 8009b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d006      	beq.n	8009b92 <I2C_MasterRequestWrite+0x2a>
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d003      	beq.n	8009b92 <I2C_MasterRequestWrite+0x2a>
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b90:	d108      	bne.n	8009ba4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e00b      	b.n	8009bbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba8:	2b12      	cmp	r3, #18
 8009baa:	d107      	bne.n	8009bbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f000 f9cd 	bl	8009f68 <I2C_WaitOnFlagUntilTimeout>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00d      	beq.n	8009bf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009be2:	d103      	bne.n	8009bec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	e035      	b.n	8009c5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bf8:	d108      	bne.n	8009c0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009bfa:	897b      	ldrh	r3, [r7, #10]
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	461a      	mov	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c08:	611a      	str	r2, [r3, #16]
 8009c0a:	e01b      	b.n	8009c44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009c0c:	897b      	ldrh	r3, [r7, #10]
 8009c0e:	11db      	asrs	r3, r3, #7
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	f003 0306 	and.w	r3, r3, #6
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	f063 030f 	orn	r3, r3, #15
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	490e      	ldr	r1, [pc, #56]	; (8009c64 <I2C_MasterRequestWrite+0xfc>)
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f000 fa16 	bl	800a05c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e010      	b.n	8009c5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009c3a:	897b      	ldrh	r3, [r7, #10]
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	4907      	ldr	r1, [pc, #28]	; (8009c68 <I2C_MasterRequestWrite+0x100>)
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 fa06 	bl	800a05c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e000      	b.n	8009c5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	00010008 	.word	0x00010008
 8009c68:	00010002 	.word	0x00010002

08009c6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	4608      	mov	r0, r1
 8009c76:	4611      	mov	r1, r2
 8009c78:	461a      	mov	r2, r3
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	817b      	strh	r3, [r7, #10]
 8009c7e:	460b      	mov	r3, r1
 8009c80:	813b      	strh	r3, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f000 f960 	bl	8009f68 <I2C_WaitOnFlagUntilTimeout>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00d      	beq.n	8009cca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cbc:	d103      	bne.n	8009cc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e05f      	b.n	8009d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cca:	897b      	ldrh	r3, [r7, #10]
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	461a      	mov	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	6a3a      	ldr	r2, [r7, #32]
 8009cde:	492d      	ldr	r1, [pc, #180]	; (8009d94 <I2C_RequestMemoryWrite+0x128>)
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f9bb 	bl	800a05c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d001      	beq.n	8009cf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e04c      	b.n	8009d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	617b      	str	r3, [r7, #20]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	617b      	str	r3, [r7, #20]
 8009d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d08:	6a39      	ldr	r1, [r7, #32]
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 fa46 	bl	800a19c <I2C_WaitOnTXEFlagUntilTimeout>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00d      	beq.n	8009d32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d107      	bne.n	8009d2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e02b      	b.n	8009d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009d32:	88fb      	ldrh	r3, [r7, #6]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d105      	bne.n	8009d44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d38:	893b      	ldrh	r3, [r7, #8]
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	611a      	str	r2, [r3, #16]
 8009d42:	e021      	b.n	8009d88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009d44:	893b      	ldrh	r3, [r7, #8]
 8009d46:	0a1b      	lsrs	r3, r3, #8
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d54:	6a39      	ldr	r1, [r7, #32]
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 fa20 	bl	800a19c <I2C_WaitOnTXEFlagUntilTimeout>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00d      	beq.n	8009d7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d66:	2b04      	cmp	r3, #4
 8009d68:	d107      	bne.n	8009d7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e005      	b.n	8009d8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d7e:	893b      	ldrh	r3, [r7, #8]
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	00010002 	.word	0x00010002

08009d98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b088      	sub	sp, #32
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	4608      	mov	r0, r1
 8009da2:	4611      	mov	r1, r2
 8009da4:	461a      	mov	r2, r3
 8009da6:	4603      	mov	r3, r0
 8009da8:	817b      	strh	r3, [r7, #10]
 8009daa:	460b      	mov	r3, r1
 8009dac:	813b      	strh	r3, [r7, #8]
 8009dae:	4613      	mov	r3, r2
 8009db0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009dc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 f8c2 	bl	8009f68 <I2C_WaitOnFlagUntilTimeout>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00d      	beq.n	8009e06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df8:	d103      	bne.n	8009e02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e0aa      	b.n	8009f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e06:	897b      	ldrh	r3, [r7, #10]
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	6a3a      	ldr	r2, [r7, #32]
 8009e1a:	4952      	ldr	r1, [pc, #328]	; (8009f64 <I2C_RequestMemoryRead+0x1cc>)
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f91d 	bl	800a05c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d001      	beq.n	8009e2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e097      	b.n	8009f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	617b      	str	r3, [r7, #20]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	617b      	str	r3, [r7, #20]
 8009e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e44:	6a39      	ldr	r1, [r7, #32]
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f000 f9a8 	bl	800a19c <I2C_WaitOnTXEFlagUntilTimeout>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00d      	beq.n	8009e6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	d107      	bne.n	8009e6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e076      	b.n	8009f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e6e:	88fb      	ldrh	r3, [r7, #6]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d105      	bne.n	8009e80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e74:	893b      	ldrh	r3, [r7, #8]
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	611a      	str	r2, [r3, #16]
 8009e7e:	e021      	b.n	8009ec4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e80:	893b      	ldrh	r3, [r7, #8]
 8009e82:	0a1b      	lsrs	r3, r3, #8
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e90:	6a39      	ldr	r1, [r7, #32]
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f000 f982 	bl	800a19c <I2C_WaitOnTXEFlagUntilTimeout>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00d      	beq.n	8009eba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea2:	2b04      	cmp	r3, #4
 8009ea4:	d107      	bne.n	8009eb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e050      	b.n	8009f5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009eba:	893b      	ldrh	r3, [r7, #8]
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec6:	6a39      	ldr	r1, [r7, #32]
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 f967 	bl	800a19c <I2C_WaitOnTXEFlagUntilTimeout>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00d      	beq.n	8009ef0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed8:	2b04      	cmp	r3, #4
 8009eda:	d107      	bne.n	8009eec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e035      	b.n	8009f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009efe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f000 f82b 	bl	8009f68 <I2C_WaitOnFlagUntilTimeout>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00d      	beq.n	8009f34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f26:	d103      	bne.n	8009f30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f30:	2303      	movs	r3, #3
 8009f32:	e013      	b.n	8009f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009f34:	897b      	ldrh	r3, [r7, #10]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f043 0301 	orr.w	r3, r3, #1
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	6a3a      	ldr	r2, [r7, #32]
 8009f48:	4906      	ldr	r1, [pc, #24]	; (8009f64 <I2C_RequestMemoryRead+0x1cc>)
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f000 f886 	bl	800a05c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e000      	b.n	8009f5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	00010002 	.word	0x00010002

08009f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	4613      	mov	r3, r2
 8009f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f78:	e048      	b.n	800a00c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f80:	d044      	beq.n	800a00c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f82:	f7fe f9e3 	bl	800834c <HAL_GetTick>
 8009f86:	4602      	mov	r2, r0
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d302      	bcc.n	8009f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d139      	bne.n	800a00c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	0c1b      	lsrs	r3, r3, #16
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d10d      	bne.n	8009fbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	43da      	mvns	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	4013      	ands	r3, r2
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	bf0c      	ite	eq
 8009fb4:	2301      	moveq	r3, #1
 8009fb6:	2300      	movne	r3, #0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	461a      	mov	r2, r3
 8009fbc:	e00c      	b.n	8009fd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	43da      	mvns	r2, r3
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	4013      	ands	r3, r2
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	bf0c      	ite	eq
 8009fd0:	2301      	moveq	r3, #1
 8009fd2:	2300      	movne	r3, #0
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d116      	bne.n	800a00c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2220      	movs	r2, #32
 8009fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	f043 0220 	orr.w	r2, r3, #32
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e023      	b.n	800a054 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	0c1b      	lsrs	r3, r3, #16
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b01      	cmp	r3, #1
 800a014:	d10d      	bne.n	800a032 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	43da      	mvns	r2, r3
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	4013      	ands	r3, r2
 800a022:	b29b      	uxth	r3, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	bf0c      	ite	eq
 800a028:	2301      	moveq	r3, #1
 800a02a:	2300      	movne	r3, #0
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	461a      	mov	r2, r3
 800a030:	e00c      	b.n	800a04c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	43da      	mvns	r2, r3
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	4013      	ands	r3, r2
 800a03e:	b29b      	uxth	r3, r3
 800a040:	2b00      	cmp	r3, #0
 800a042:	bf0c      	ite	eq
 800a044:	2301      	moveq	r3, #1
 800a046:	2300      	movne	r3, #0
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	461a      	mov	r2, r3
 800a04c:	79fb      	ldrb	r3, [r7, #7]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d093      	beq.n	8009f7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a06a:	e071      	b.n	800a150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a07a:	d123      	bne.n	800a0c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a08a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2220      	movs	r2, #32
 800a0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b0:	f043 0204 	orr.w	r2, r3, #4
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e067      	b.n	800a194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ca:	d041      	beq.n	800a150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0cc:	f7fe f93e 	bl	800834c <HAL_GetTick>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d302      	bcc.n	800a0e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d136      	bne.n	800a150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	0c1b      	lsrs	r3, r3, #16
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d10c      	bne.n	800a106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	43da      	mvns	r2, r3
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	bf14      	ite	ne
 800a0fe:	2301      	movne	r3, #1
 800a100:	2300      	moveq	r3, #0
 800a102:	b2db      	uxtb	r3, r3
 800a104:	e00b      	b.n	800a11e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	43da      	mvns	r2, r3
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	4013      	ands	r3, r2
 800a112:	b29b      	uxth	r3, r3
 800a114:	2b00      	cmp	r3, #0
 800a116:	bf14      	ite	ne
 800a118:	2301      	movne	r3, #1
 800a11a:	2300      	moveq	r3, #0
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d016      	beq.n	800a150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2220      	movs	r2, #32
 800a12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13c:	f043 0220 	orr.w	r2, r3, #32
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e021      	b.n	800a194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	0c1b      	lsrs	r3, r3, #16
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b01      	cmp	r3, #1
 800a158:	d10c      	bne.n	800a174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	695b      	ldr	r3, [r3, #20]
 800a160:	43da      	mvns	r2, r3
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	4013      	ands	r3, r2
 800a166:	b29b      	uxth	r3, r3
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bf14      	ite	ne
 800a16c:	2301      	movne	r3, #1
 800a16e:	2300      	moveq	r3, #0
 800a170:	b2db      	uxtb	r3, r3
 800a172:	e00b      	b.n	800a18c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	43da      	mvns	r2, r3
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	4013      	ands	r3, r2
 800a180:	b29b      	uxth	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	bf14      	ite	ne
 800a186:	2301      	movne	r3, #1
 800a188:	2300      	moveq	r3, #0
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f47f af6d 	bne.w	800a06c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1a8:	e034      	b.n	800a214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 f8e3 	bl	800a376 <I2C_IsAcknowledgeFailed>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e034      	b.n	800a224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1c0:	d028      	beq.n	800a214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1c2:	f7fe f8c3 	bl	800834c <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	68ba      	ldr	r2, [r7, #8]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d302      	bcc.n	800a1d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d11d      	bne.n	800a214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e2:	2b80      	cmp	r3, #128	; 0x80
 800a1e4:	d016      	beq.n	800a214 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a200:	f043 0220 	orr.w	r2, r3, #32
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e007      	b.n	800a224 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a21e:	2b80      	cmp	r3, #128	; 0x80
 800a220:	d1c3      	bne.n	800a1aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a238:	e034      	b.n	800a2a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 f89b 	bl	800a376 <I2C_IsAcknowledgeFailed>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e034      	b.n	800a2b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a250:	d028      	beq.n	800a2a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a252:	f7fe f87b 	bl	800834c <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d302      	bcc.n	800a268 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d11d      	bne.n	800a2a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	f003 0304 	and.w	r3, r3, #4
 800a272:	2b04      	cmp	r3, #4
 800a274:	d016      	beq.n	800a2a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2220      	movs	r2, #32
 800a280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a290:	f043 0220 	orr.w	r2, r3, #32
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e007      	b.n	800a2b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	f003 0304 	and.w	r3, r3, #4
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	d1c3      	bne.n	800a23a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a2c8:	e049      	b.n	800a35e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	f003 0310 	and.w	r3, r3, #16
 800a2d4:	2b10      	cmp	r3, #16
 800a2d6:	d119      	bne.n	800a30c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f06f 0210 	mvn.w	r2, #16
 800a2e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e030      	b.n	800a36e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a30c:	f7fe f81e 	bl	800834c <HAL_GetTick>
 800a310:	4602      	mov	r2, r0
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d302      	bcc.n	800a322 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d11d      	bne.n	800a35e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32c:	2b40      	cmp	r3, #64	; 0x40
 800a32e:	d016      	beq.n	800a35e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2220      	movs	r2, #32
 800a33a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	f043 0220 	orr.w	r2, r3, #32
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e007      	b.n	800a36e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a368:	2b40      	cmp	r3, #64	; 0x40
 800a36a:	d1ae      	bne.n	800a2ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	695b      	ldr	r3, [r3, #20]
 800a384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a38c:	d11b      	bne.n	800a3c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a396:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b2:	f043 0204 	orr.w	r2, r3, #4
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e000      	b.n	800a3c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bc80      	pop	{r7}
 800a3d0:	4770      	bx	lr
	...

0800a3d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e272      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 8087 	beq.w	800a502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a3f4:	4b92      	ldr	r3, [pc, #584]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f003 030c 	and.w	r3, r3, #12
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d00c      	beq.n	800a41a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a400:	4b8f      	ldr	r3, [pc, #572]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f003 030c 	and.w	r3, r3, #12
 800a408:	2b08      	cmp	r3, #8
 800a40a:	d112      	bne.n	800a432 <HAL_RCC_OscConfig+0x5e>
 800a40c:	4b8c      	ldr	r3, [pc, #560]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a418:	d10b      	bne.n	800a432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a41a:	4b89      	ldr	r3, [pc, #548]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d06c      	beq.n	800a500 <HAL_RCC_OscConfig+0x12c>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d168      	bne.n	800a500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e24c      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a43a:	d106      	bne.n	800a44a <HAL_RCC_OscConfig+0x76>
 800a43c:	4b80      	ldr	r3, [pc, #512]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a7f      	ldr	r2, [pc, #508]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a446:	6013      	str	r3, [r2, #0]
 800a448:	e02e      	b.n	800a4a8 <HAL_RCC_OscConfig+0xd4>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10c      	bne.n	800a46c <HAL_RCC_OscConfig+0x98>
 800a452:	4b7b      	ldr	r3, [pc, #492]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a7a      	ldr	r2, [pc, #488]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	4b78      	ldr	r3, [pc, #480]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a77      	ldr	r2, [pc, #476]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a468:	6013      	str	r3, [r2, #0]
 800a46a:	e01d      	b.n	800a4a8 <HAL_RCC_OscConfig+0xd4>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a474:	d10c      	bne.n	800a490 <HAL_RCC_OscConfig+0xbc>
 800a476:	4b72      	ldr	r3, [pc, #456]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a71      	ldr	r2, [pc, #452]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a47c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	4b6f      	ldr	r3, [pc, #444]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a6e      	ldr	r2, [pc, #440]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	e00b      	b.n	800a4a8 <HAL_RCC_OscConfig+0xd4>
 800a490:	4b6b      	ldr	r3, [pc, #428]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a6a      	ldr	r2, [pc, #424]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	4b68      	ldr	r3, [pc, #416]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a67      	ldr	r2, [pc, #412]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a4a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d013      	beq.n	800a4d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4b0:	f7fd ff4c 	bl	800834c <HAL_GetTick>
 800a4b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4b6:	e008      	b.n	800a4ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4b8:	f7fd ff48 	bl	800834c <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	2b64      	cmp	r3, #100	; 0x64
 800a4c4:	d901      	bls.n	800a4ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e200      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4ca:	4b5d      	ldr	r3, [pc, #372]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0f0      	beq.n	800a4b8 <HAL_RCC_OscConfig+0xe4>
 800a4d6:	e014      	b.n	800a502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4d8:	f7fd ff38 	bl	800834c <HAL_GetTick>
 800a4dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4de:	e008      	b.n	800a4f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4e0:	f7fd ff34 	bl	800834c <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	2b64      	cmp	r3, #100	; 0x64
 800a4ec:	d901      	bls.n	800a4f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e1ec      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4f2:	4b53      	ldr	r3, [pc, #332]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1f0      	bne.n	800a4e0 <HAL_RCC_OscConfig+0x10c>
 800a4fe:	e000      	b.n	800a502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d063      	beq.n	800a5d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a50e:	4b4c      	ldr	r3, [pc, #304]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f003 030c 	and.w	r3, r3, #12
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00b      	beq.n	800a532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a51a:	4b49      	ldr	r3, [pc, #292]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f003 030c 	and.w	r3, r3, #12
 800a522:	2b08      	cmp	r3, #8
 800a524:	d11c      	bne.n	800a560 <HAL_RCC_OscConfig+0x18c>
 800a526:	4b46      	ldr	r3, [pc, #280]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d116      	bne.n	800a560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a532:	4b43      	ldr	r3, [pc, #268]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d005      	beq.n	800a54a <HAL_RCC_OscConfig+0x176>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d001      	beq.n	800a54a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e1c0      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a54a:	4b3d      	ldr	r3, [pc, #244]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	4939      	ldr	r1, [pc, #228]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a55a:	4313      	orrs	r3, r2
 800a55c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a55e:	e03a      	b.n	800a5d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d020      	beq.n	800a5aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a568:	4b36      	ldr	r3, [pc, #216]	; (800a644 <HAL_RCC_OscConfig+0x270>)
 800a56a:	2201      	movs	r2, #1
 800a56c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a56e:	f7fd feed 	bl	800834c <HAL_GetTick>
 800a572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a574:	e008      	b.n	800a588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a576:	f7fd fee9 	bl	800834c <HAL_GetTick>
 800a57a:	4602      	mov	r2, r0
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	2b02      	cmp	r3, #2
 800a582:	d901      	bls.n	800a588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a584:	2303      	movs	r3, #3
 800a586:	e1a1      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a588:	4b2d      	ldr	r3, [pc, #180]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0302 	and.w	r3, r3, #2
 800a590:	2b00      	cmp	r3, #0
 800a592:	d0f0      	beq.n	800a576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a594:	4b2a      	ldr	r3, [pc, #168]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	695b      	ldr	r3, [r3, #20]
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	4927      	ldr	r1, [pc, #156]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	600b      	str	r3, [r1, #0]
 800a5a8:	e015      	b.n	800a5d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5aa:	4b26      	ldr	r3, [pc, #152]	; (800a644 <HAL_RCC_OscConfig+0x270>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5b0:	f7fd fecc 	bl	800834c <HAL_GetTick>
 800a5b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5b6:	e008      	b.n	800a5ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5b8:	f7fd fec8 	bl	800834c <HAL_GetTick>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d901      	bls.n	800a5ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e180      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5ca:	4b1d      	ldr	r3, [pc, #116]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0302 	and.w	r3, r3, #2
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1f0      	bne.n	800a5b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0308 	and.w	r3, r3, #8
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d03a      	beq.n	800a658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d019      	beq.n	800a61e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5ea:	4b17      	ldr	r3, [pc, #92]	; (800a648 <HAL_RCC_OscConfig+0x274>)
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5f0:	f7fd feac 	bl	800834c <HAL_GetTick>
 800a5f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5f6:	e008      	b.n	800a60a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5f8:	f7fd fea8 	bl	800834c <HAL_GetTick>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	2b02      	cmp	r3, #2
 800a604:	d901      	bls.n	800a60a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e160      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a60a:	4b0d      	ldr	r3, [pc, #52]	; (800a640 <HAL_RCC_OscConfig+0x26c>)
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0f0      	beq.n	800a5f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a616:	2001      	movs	r0, #1
 800a618:	f000 face 	bl	800abb8 <RCC_Delay>
 800a61c:	e01c      	b.n	800a658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a61e:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <HAL_RCC_OscConfig+0x274>)
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a624:	f7fd fe92 	bl	800834c <HAL_GetTick>
 800a628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a62a:	e00f      	b.n	800a64c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a62c:	f7fd fe8e 	bl	800834c <HAL_GetTick>
 800a630:	4602      	mov	r2, r0
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	2b02      	cmp	r3, #2
 800a638:	d908      	bls.n	800a64c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e146      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
 800a63e:	bf00      	nop
 800a640:	40021000 	.word	0x40021000
 800a644:	42420000 	.word	0x42420000
 800a648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a64c:	4b92      	ldr	r3, [pc, #584]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	f003 0302 	and.w	r3, r3, #2
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e9      	bne.n	800a62c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 0304 	and.w	r3, r3, #4
 800a660:	2b00      	cmp	r3, #0
 800a662:	f000 80a6 	beq.w	800a7b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a666:	2300      	movs	r3, #0
 800a668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a66a:	4b8b      	ldr	r3, [pc, #556]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a66c:	69db      	ldr	r3, [r3, #28]
 800a66e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10d      	bne.n	800a692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a676:	4b88      	ldr	r3, [pc, #544]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	4a87      	ldr	r2, [pc, #540]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a67c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a680:	61d3      	str	r3, [r2, #28]
 800a682:	4b85      	ldr	r3, [pc, #532]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a684:	69db      	ldr	r3, [r3, #28]
 800a686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a68a:	60bb      	str	r3, [r7, #8]
 800a68c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a68e:	2301      	movs	r3, #1
 800a690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a692:	4b82      	ldr	r3, [pc, #520]	; (800a89c <HAL_RCC_OscConfig+0x4c8>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d118      	bne.n	800a6d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a69e:	4b7f      	ldr	r3, [pc, #508]	; (800a89c <HAL_RCC_OscConfig+0x4c8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a7e      	ldr	r2, [pc, #504]	; (800a89c <HAL_RCC_OscConfig+0x4c8>)
 800a6a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6aa:	f7fd fe4f 	bl	800834c <HAL_GetTick>
 800a6ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6b0:	e008      	b.n	800a6c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6b2:	f7fd fe4b 	bl	800834c <HAL_GetTick>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	2b64      	cmp	r3, #100	; 0x64
 800a6be:	d901      	bls.n	800a6c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e103      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6c4:	4b75      	ldr	r3, [pc, #468]	; (800a89c <HAL_RCC_OscConfig+0x4c8>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d0f0      	beq.n	800a6b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d106      	bne.n	800a6e6 <HAL_RCC_OscConfig+0x312>
 800a6d8:	4b6f      	ldr	r3, [pc, #444]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	4a6e      	ldr	r2, [pc, #440]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a6de:	f043 0301 	orr.w	r3, r3, #1
 800a6e2:	6213      	str	r3, [r2, #32]
 800a6e4:	e02d      	b.n	800a742 <HAL_RCC_OscConfig+0x36e>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10c      	bne.n	800a708 <HAL_RCC_OscConfig+0x334>
 800a6ee:	4b6a      	ldr	r3, [pc, #424]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	4a69      	ldr	r2, [pc, #420]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a6f4:	f023 0301 	bic.w	r3, r3, #1
 800a6f8:	6213      	str	r3, [r2, #32]
 800a6fa:	4b67      	ldr	r3, [pc, #412]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	4a66      	ldr	r2, [pc, #408]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a700:	f023 0304 	bic.w	r3, r3, #4
 800a704:	6213      	str	r3, [r2, #32]
 800a706:	e01c      	b.n	800a742 <HAL_RCC_OscConfig+0x36e>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	2b05      	cmp	r3, #5
 800a70e:	d10c      	bne.n	800a72a <HAL_RCC_OscConfig+0x356>
 800a710:	4b61      	ldr	r3, [pc, #388]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	4a60      	ldr	r2, [pc, #384]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a716:	f043 0304 	orr.w	r3, r3, #4
 800a71a:	6213      	str	r3, [r2, #32]
 800a71c:	4b5e      	ldr	r3, [pc, #376]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	4a5d      	ldr	r2, [pc, #372]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a722:	f043 0301 	orr.w	r3, r3, #1
 800a726:	6213      	str	r3, [r2, #32]
 800a728:	e00b      	b.n	800a742 <HAL_RCC_OscConfig+0x36e>
 800a72a:	4b5b      	ldr	r3, [pc, #364]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	4a5a      	ldr	r2, [pc, #360]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a730:	f023 0301 	bic.w	r3, r3, #1
 800a734:	6213      	str	r3, [r2, #32]
 800a736:	4b58      	ldr	r3, [pc, #352]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	4a57      	ldr	r2, [pc, #348]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a73c:	f023 0304 	bic.w	r3, r3, #4
 800a740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d015      	beq.n	800a776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a74a:	f7fd fdff 	bl	800834c <HAL_GetTick>
 800a74e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a750:	e00a      	b.n	800a768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a752:	f7fd fdfb 	bl	800834c <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a760:	4293      	cmp	r3, r2
 800a762:	d901      	bls.n	800a768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e0b1      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a768:	4b4b      	ldr	r3, [pc, #300]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a76a:	6a1b      	ldr	r3, [r3, #32]
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d0ee      	beq.n	800a752 <HAL_RCC_OscConfig+0x37e>
 800a774:	e014      	b.n	800a7a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a776:	f7fd fde9 	bl	800834c <HAL_GetTick>
 800a77a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a77c:	e00a      	b.n	800a794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a77e:	f7fd fde5 	bl	800834c <HAL_GetTick>
 800a782:	4602      	mov	r2, r0
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	f241 3288 	movw	r2, #5000	; 0x1388
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d901      	bls.n	800a794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e09b      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a794:	4b40      	ldr	r3, [pc, #256]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a796:	6a1b      	ldr	r3, [r3, #32]
 800a798:	f003 0302 	and.w	r3, r3, #2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1ee      	bne.n	800a77e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d105      	bne.n	800a7b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7a6:	4b3c      	ldr	r3, [pc, #240]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	4a3b      	ldr	r2, [pc, #236]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a7ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 8087 	beq.w	800a8ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a7bc:	4b36      	ldr	r3, [pc, #216]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	f003 030c 	and.w	r3, r3, #12
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d061      	beq.n	800a88c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	69db      	ldr	r3, [r3, #28]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d146      	bne.n	800a85e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7d0:	4b33      	ldr	r3, [pc, #204]	; (800a8a0 <HAL_RCC_OscConfig+0x4cc>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7d6:	f7fd fdb9 	bl	800834c <HAL_GetTick>
 800a7da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a7dc:	e008      	b.n	800a7f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7de:	f7fd fdb5 	bl	800834c <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	2b02      	cmp	r3, #2
 800a7ea:	d901      	bls.n	800a7f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e06d      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a7f0:	4b29      	ldr	r3, [pc, #164]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1f0      	bne.n	800a7de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a804:	d108      	bne.n	800a818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a806:	4b24      	ldr	r3, [pc, #144]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	4921      	ldr	r1, [pc, #132]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a814:	4313      	orrs	r3, r2
 800a816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a818:	4b1f      	ldr	r3, [pc, #124]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a19      	ldr	r1, [r3, #32]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a828:	430b      	orrs	r3, r1
 800a82a:	491b      	ldr	r1, [pc, #108]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a82c:	4313      	orrs	r3, r2
 800a82e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a830:	4b1b      	ldr	r3, [pc, #108]	; (800a8a0 <HAL_RCC_OscConfig+0x4cc>)
 800a832:	2201      	movs	r2, #1
 800a834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a836:	f7fd fd89 	bl	800834c <HAL_GetTick>
 800a83a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a83c:	e008      	b.n	800a850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a83e:	f7fd fd85 	bl	800834c <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d901      	bls.n	800a850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e03d      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a850:	4b11      	ldr	r3, [pc, #68]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0f0      	beq.n	800a83e <HAL_RCC_OscConfig+0x46a>
 800a85c:	e035      	b.n	800a8ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a85e:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <HAL_RCC_OscConfig+0x4cc>)
 800a860:	2200      	movs	r2, #0
 800a862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a864:	f7fd fd72 	bl	800834c <HAL_GetTick>
 800a868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a86a:	e008      	b.n	800a87e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a86c:	f7fd fd6e 	bl	800834c <HAL_GetTick>
 800a870:	4602      	mov	r2, r0
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	2b02      	cmp	r3, #2
 800a878:	d901      	bls.n	800a87e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e026      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a87e:	4b06      	ldr	r3, [pc, #24]	; (800a898 <HAL_RCC_OscConfig+0x4c4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1f0      	bne.n	800a86c <HAL_RCC_OscConfig+0x498>
 800a88a:	e01e      	b.n	800a8ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	69db      	ldr	r3, [r3, #28]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d107      	bne.n	800a8a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e019      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
 800a898:	40021000 	.word	0x40021000
 800a89c:	40007000 	.word	0x40007000
 800a8a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a8a4:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <HAL_RCC_OscConfig+0x500>)
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d106      	bne.n	800a8c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d001      	beq.n	800a8ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	40021000 	.word	0x40021000

0800a8d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e0d0      	b.n	800aa8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8ec:	4b6a      	ldr	r3, [pc, #424]	; (800aa98 <HAL_RCC_ClockConfig+0x1c0>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0307 	and.w	r3, r3, #7
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d910      	bls.n	800a91c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8fa:	4b67      	ldr	r3, [pc, #412]	; (800aa98 <HAL_RCC_ClockConfig+0x1c0>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f023 0207 	bic.w	r2, r3, #7
 800a902:	4965      	ldr	r1, [pc, #404]	; (800aa98 <HAL_RCC_ClockConfig+0x1c0>)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	4313      	orrs	r3, r2
 800a908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a90a:	4b63      	ldr	r3, [pc, #396]	; (800aa98 <HAL_RCC_ClockConfig+0x1c0>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0307 	and.w	r3, r3, #7
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	429a      	cmp	r2, r3
 800a916:	d001      	beq.n	800a91c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e0b8      	b.n	800aa8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0302 	and.w	r3, r3, #2
 800a924:	2b00      	cmp	r3, #0
 800a926:	d020      	beq.n	800a96a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 0304 	and.w	r3, r3, #4
 800a930:	2b00      	cmp	r3, #0
 800a932:	d005      	beq.n	800a940 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a934:	4b59      	ldr	r3, [pc, #356]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	4a58      	ldr	r2, [pc, #352]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a93a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a93e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 0308 	and.w	r3, r3, #8
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d005      	beq.n	800a958 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a94c:	4b53      	ldr	r3, [pc, #332]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	4a52      	ldr	r2, [pc, #328]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a952:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a956:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a958:	4b50      	ldr	r3, [pc, #320]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	494d      	ldr	r1, [pc, #308]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a966:	4313      	orrs	r3, r2
 800a968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d040      	beq.n	800a9f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d107      	bne.n	800a98e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a97e:	4b47      	ldr	r3, [pc, #284]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a986:	2b00      	cmp	r3, #0
 800a988:	d115      	bne.n	800a9b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e07f      	b.n	800aa8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	2b02      	cmp	r3, #2
 800a994:	d107      	bne.n	800a9a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a996:	4b41      	ldr	r3, [pc, #260]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d109      	bne.n	800a9b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e073      	b.n	800aa8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9a6:	4b3d      	ldr	r3, [pc, #244]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 0302 	and.w	r3, r3, #2
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e06b      	b.n	800aa8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9b6:	4b39      	ldr	r3, [pc, #228]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f023 0203 	bic.w	r2, r3, #3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	4936      	ldr	r1, [pc, #216]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a9c8:	f7fd fcc0 	bl	800834c <HAL_GetTick>
 800a9cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9ce:	e00a      	b.n	800a9e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9d0:	f7fd fcbc 	bl	800834c <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d901      	bls.n	800a9e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e053      	b.n	800aa8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9e6:	4b2d      	ldr	r3, [pc, #180]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	f003 020c 	and.w	r2, r3, #12
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d1eb      	bne.n	800a9d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9f8:	4b27      	ldr	r3, [pc, #156]	; (800aa98 <HAL_RCC_ClockConfig+0x1c0>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0307 	and.w	r3, r3, #7
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d210      	bcs.n	800aa28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa06:	4b24      	ldr	r3, [pc, #144]	; (800aa98 <HAL_RCC_ClockConfig+0x1c0>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f023 0207 	bic.w	r2, r3, #7
 800aa0e:	4922      	ldr	r1, [pc, #136]	; (800aa98 <HAL_RCC_ClockConfig+0x1c0>)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa16:	4b20      	ldr	r3, [pc, #128]	; (800aa98 <HAL_RCC_ClockConfig+0x1c0>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 0307 	and.w	r3, r3, #7
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d001      	beq.n	800aa28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e032      	b.n	800aa8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0304 	and.w	r3, r3, #4
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d008      	beq.n	800aa46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa34:	4b19      	ldr	r3, [pc, #100]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	4916      	ldr	r1, [pc, #88]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800aa42:	4313      	orrs	r3, r2
 800aa44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0308 	and.w	r3, r3, #8
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d009      	beq.n	800aa66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aa52:	4b12      	ldr	r3, [pc, #72]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	490e      	ldr	r1, [pc, #56]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800aa62:	4313      	orrs	r3, r2
 800aa64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aa66:	f000 f821 	bl	800aaac <HAL_RCC_GetSysClockFreq>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <HAL_RCC_ClockConfig+0x1c4>)
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	091b      	lsrs	r3, r3, #4
 800aa72:	f003 030f 	and.w	r3, r3, #15
 800aa76:	490a      	ldr	r1, [pc, #40]	; (800aaa0 <HAL_RCC_ClockConfig+0x1c8>)
 800aa78:	5ccb      	ldrb	r3, [r1, r3]
 800aa7a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7e:	4a09      	ldr	r2, [pc, #36]	; (800aaa4 <HAL_RCC_ClockConfig+0x1cc>)
 800aa80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aa82:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <HAL_RCC_ClockConfig+0x1d0>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fd fc1e 	bl	80082c8 <HAL_InitTick>

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	40022000 	.word	0x40022000
 800aa9c:	40021000 	.word	0x40021000
 800aaa0:	0800d868 	.word	0x0800d868
 800aaa4:	200000a8 	.word	0x200000a8
 800aaa8:	200000ac 	.word	0x200000ac

0800aaac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800aab2:	2300      	movs	r3, #0
 800aab4:	60fb      	str	r3, [r7, #12]
 800aab6:	2300      	movs	r3, #0
 800aab8:	60bb      	str	r3, [r7, #8]
 800aaba:	2300      	movs	r3, #0
 800aabc:	617b      	str	r3, [r7, #20]
 800aabe:	2300      	movs	r3, #0
 800aac0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aac6:	4b1e      	ldr	r3, [pc, #120]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x94>)
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f003 030c 	and.w	r3, r3, #12
 800aad2:	2b04      	cmp	r3, #4
 800aad4:	d002      	beq.n	800aadc <HAL_RCC_GetSysClockFreq+0x30>
 800aad6:	2b08      	cmp	r3, #8
 800aad8:	d003      	beq.n	800aae2 <HAL_RCC_GetSysClockFreq+0x36>
 800aada:	e027      	b.n	800ab2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aadc:	4b19      	ldr	r3, [pc, #100]	; (800ab44 <HAL_RCC_GetSysClockFreq+0x98>)
 800aade:	613b      	str	r3, [r7, #16]
      break;
 800aae0:	e027      	b.n	800ab32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	0c9b      	lsrs	r3, r3, #18
 800aae6:	f003 030f 	and.w	r3, r3, #15
 800aaea:	4a17      	ldr	r2, [pc, #92]	; (800ab48 <HAL_RCC_GetSysClockFreq+0x9c>)
 800aaec:	5cd3      	ldrb	r3, [r2, r3]
 800aaee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d010      	beq.n	800ab1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aafa:	4b11      	ldr	r3, [pc, #68]	; (800ab40 <HAL_RCC_GetSysClockFreq+0x94>)
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	0c5b      	lsrs	r3, r3, #17
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	4a11      	ldr	r2, [pc, #68]	; (800ab4c <HAL_RCC_GetSysClockFreq+0xa0>)
 800ab06:	5cd3      	ldrb	r3, [r2, r3]
 800ab08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a0d      	ldr	r2, [pc, #52]	; (800ab44 <HAL_RCC_GetSysClockFreq+0x98>)
 800ab0e:	fb03 f202 	mul.w	r2, r3, r2
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	e004      	b.n	800ab26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a0c      	ldr	r2, [pc, #48]	; (800ab50 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ab20:	fb02 f303 	mul.w	r3, r2, r3
 800ab24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	613b      	str	r3, [r7, #16]
      break;
 800ab2a:	e002      	b.n	800ab32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ab2c:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <HAL_RCC_GetSysClockFreq+0x98>)
 800ab2e:	613b      	str	r3, [r7, #16]
      break;
 800ab30:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab32:	693b      	ldr	r3, [r7, #16]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	371c      	adds	r7, #28
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bc80      	pop	{r7}
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	40021000 	.word	0x40021000
 800ab44:	007a1200 	.word	0x007a1200
 800ab48:	0800d880 	.word	0x0800d880
 800ab4c:	0800d890 	.word	0x0800d890
 800ab50:	003d0900 	.word	0x003d0900

0800ab54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab54:	b480      	push	{r7}
 800ab56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab58:	4b02      	ldr	r3, [pc, #8]	; (800ab64 <HAL_RCC_GetHCLKFreq+0x10>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bc80      	pop	{r7}
 800ab62:	4770      	bx	lr
 800ab64:	200000a8 	.word	0x200000a8

0800ab68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ab6c:	f7ff fff2 	bl	800ab54 <HAL_RCC_GetHCLKFreq>
 800ab70:	4602      	mov	r2, r0
 800ab72:	4b05      	ldr	r3, [pc, #20]	; (800ab88 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	f003 0307 	and.w	r3, r3, #7
 800ab7c:	4903      	ldr	r1, [pc, #12]	; (800ab8c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab7e:	5ccb      	ldrb	r3, [r1, r3]
 800ab80:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	40021000 	.word	0x40021000
 800ab8c:	0800d878 	.word	0x0800d878

0800ab90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ab94:	f7ff ffde 	bl	800ab54 <HAL_RCC_GetHCLKFreq>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	0adb      	lsrs	r3, r3, #11
 800aba0:	f003 0307 	and.w	r3, r3, #7
 800aba4:	4903      	ldr	r1, [pc, #12]	; (800abb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aba6:	5ccb      	ldrb	r3, [r1, r3]
 800aba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800abac:	4618      	mov	r0, r3
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	40021000 	.word	0x40021000
 800abb4:	0800d878 	.word	0x0800d878

0800abb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <RCC_Delay+0x34>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a0a      	ldr	r2, [pc, #40]	; (800abf0 <RCC_Delay+0x38>)
 800abc6:	fba2 2303 	umull	r2, r3, r2, r3
 800abca:	0a5b      	lsrs	r3, r3, #9
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	fb02 f303 	mul.w	r3, r2, r3
 800abd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800abd4:	bf00      	nop
  }
  while (Delay --);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	1e5a      	subs	r2, r3, #1
 800abda:	60fa      	str	r2, [r7, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1f9      	bne.n	800abd4 <RCC_Delay+0x1c>
}
 800abe0:	bf00      	nop
 800abe2:	bf00      	nop
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bc80      	pop	{r7}
 800abea:	4770      	bx	lr
 800abec:	200000a8 	.word	0x200000a8
 800abf0:	10624dd3 	.word	0x10624dd3

0800abf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e041      	b.n	800ac8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d106      	bne.n	800ac20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7fd fa26 	bl	800806c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	4619      	mov	r1, r3
 800ac32:	4610      	mov	r0, r2
 800ac34:	f000 fa82 	bl	800b13c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
	...

0800ac94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d001      	beq.n	800acac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e044      	b.n	800ad36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2202      	movs	r2, #2
 800acb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f042 0201 	orr.w	r2, r2, #1
 800acc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a1d      	ldr	r2, [pc, #116]	; (800ad40 <HAL_TIM_Base_Start_IT+0xac>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d018      	beq.n	800ad00 <HAL_TIM_Base_Start_IT+0x6c>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a1c      	ldr	r2, [pc, #112]	; (800ad44 <HAL_TIM_Base_Start_IT+0xb0>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d013      	beq.n	800ad00 <HAL_TIM_Base_Start_IT+0x6c>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ace0:	d00e      	beq.n	800ad00 <HAL_TIM_Base_Start_IT+0x6c>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a18      	ldr	r2, [pc, #96]	; (800ad48 <HAL_TIM_Base_Start_IT+0xb4>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d009      	beq.n	800ad00 <HAL_TIM_Base_Start_IT+0x6c>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a16      	ldr	r2, [pc, #88]	; (800ad4c <HAL_TIM_Base_Start_IT+0xb8>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d004      	beq.n	800ad00 <HAL_TIM_Base_Start_IT+0x6c>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a15      	ldr	r2, [pc, #84]	; (800ad50 <HAL_TIM_Base_Start_IT+0xbc>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d111      	bne.n	800ad24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2b06      	cmp	r3, #6
 800ad10:	d010      	beq.n	800ad34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f042 0201 	orr.w	r2, r2, #1
 800ad20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad22:	e007      	b.n	800ad34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f042 0201 	orr.w	r2, r2, #1
 800ad32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bc80      	pop	{r7}
 800ad3e:	4770      	bx	lr
 800ad40:	40012c00 	.word	0x40012c00
 800ad44:	40013400 	.word	0x40013400
 800ad48:	40000400 	.word	0x40000400
 800ad4c:	40000800 	.word	0x40000800
 800ad50:	40000c00 	.word	0x40000c00

0800ad54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d122      	bne.n	800adb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	f003 0302 	and.w	r3, r3, #2
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d11b      	bne.n	800adb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f06f 0202 	mvn.w	r2, #2
 800ad80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2201      	movs	r2, #1
 800ad86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f9b4 	bl	800b104 <HAL_TIM_IC_CaptureCallback>
 800ad9c:	e005      	b.n	800adaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f9a7 	bl	800b0f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f9b6 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	f003 0304 	and.w	r3, r3, #4
 800adba:	2b04      	cmp	r3, #4
 800adbc:	d122      	bne.n	800ae04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	2b04      	cmp	r3, #4
 800adca:	d11b      	bne.n	800ae04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f06f 0204 	mvn.w	r2, #4
 800add4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2202      	movs	r2, #2
 800adda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f98a 	bl	800b104 <HAL_TIM_IC_CaptureCallback>
 800adf0:	e005      	b.n	800adfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f97d 	bl	800b0f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f98c 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	f003 0308 	and.w	r3, r3, #8
 800ae0e:	2b08      	cmp	r3, #8
 800ae10:	d122      	bne.n	800ae58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	f003 0308 	and.w	r3, r3, #8
 800ae1c:	2b08      	cmp	r3, #8
 800ae1e:	d11b      	bne.n	800ae58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f06f 0208 	mvn.w	r2, #8
 800ae28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2204      	movs	r2, #4
 800ae2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	69db      	ldr	r3, [r3, #28]
 800ae36:	f003 0303 	and.w	r3, r3, #3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d003      	beq.n	800ae46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f960 	bl	800b104 <HAL_TIM_IC_CaptureCallback>
 800ae44:	e005      	b.n	800ae52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f953 	bl	800b0f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f962 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	f003 0310 	and.w	r3, r3, #16
 800ae62:	2b10      	cmp	r3, #16
 800ae64:	d122      	bne.n	800aeac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	f003 0310 	and.w	r3, r3, #16
 800ae70:	2b10      	cmp	r3, #16
 800ae72:	d11b      	bne.n	800aeac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f06f 0210 	mvn.w	r2, #16
 800ae7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2208      	movs	r2, #8
 800ae82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d003      	beq.n	800ae9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f936 	bl	800b104 <HAL_TIM_IC_CaptureCallback>
 800ae98:	e005      	b.n	800aea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f929 	bl	800b0f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f938 	bl	800b116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d10e      	bne.n	800aed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d107      	bne.n	800aed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f06f 0201 	mvn.w	r2, #1
 800aed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7fc fd2e 	bl	8007934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aee2:	2b80      	cmp	r3, #128	; 0x80
 800aee4:	d10e      	bne.n	800af04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef0:	2b80      	cmp	r3, #128	; 0x80
 800aef2:	d107      	bne.n	800af04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aefc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 faa1 	bl	800b446 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af0e:	2b40      	cmp	r3, #64	; 0x40
 800af10:	d10e      	bne.n	800af30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1c:	2b40      	cmp	r3, #64	; 0x40
 800af1e:	d107      	bne.n	800af30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f8fc 	bl	800b128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	f003 0320 	and.w	r3, r3, #32
 800af3a:	2b20      	cmp	r3, #32
 800af3c:	d10e      	bne.n	800af5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	f003 0320 	and.w	r3, r3, #32
 800af48:	2b20      	cmp	r3, #32
 800af4a:	d107      	bne.n	800af5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f06f 0220 	mvn.w	r2, #32
 800af54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fa6c 	bl	800b434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d101      	bne.n	800af80 <HAL_TIM_ConfigClockSource+0x1c>
 800af7c:	2302      	movs	r3, #2
 800af7e:	e0b4      	b.n	800b0ea <HAL_TIM_ConfigClockSource+0x186>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2202      	movs	r2, #2
 800af8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800af9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afb8:	d03e      	beq.n	800b038 <HAL_TIM_ConfigClockSource+0xd4>
 800afba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afbe:	f200 8087 	bhi.w	800b0d0 <HAL_TIM_ConfigClockSource+0x16c>
 800afc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afc6:	f000 8086 	beq.w	800b0d6 <HAL_TIM_ConfigClockSource+0x172>
 800afca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afce:	d87f      	bhi.n	800b0d0 <HAL_TIM_ConfigClockSource+0x16c>
 800afd0:	2b70      	cmp	r3, #112	; 0x70
 800afd2:	d01a      	beq.n	800b00a <HAL_TIM_ConfigClockSource+0xa6>
 800afd4:	2b70      	cmp	r3, #112	; 0x70
 800afd6:	d87b      	bhi.n	800b0d0 <HAL_TIM_ConfigClockSource+0x16c>
 800afd8:	2b60      	cmp	r3, #96	; 0x60
 800afda:	d050      	beq.n	800b07e <HAL_TIM_ConfigClockSource+0x11a>
 800afdc:	2b60      	cmp	r3, #96	; 0x60
 800afde:	d877      	bhi.n	800b0d0 <HAL_TIM_ConfigClockSource+0x16c>
 800afe0:	2b50      	cmp	r3, #80	; 0x50
 800afe2:	d03c      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0xfa>
 800afe4:	2b50      	cmp	r3, #80	; 0x50
 800afe6:	d873      	bhi.n	800b0d0 <HAL_TIM_ConfigClockSource+0x16c>
 800afe8:	2b40      	cmp	r3, #64	; 0x40
 800afea:	d058      	beq.n	800b09e <HAL_TIM_ConfigClockSource+0x13a>
 800afec:	2b40      	cmp	r3, #64	; 0x40
 800afee:	d86f      	bhi.n	800b0d0 <HAL_TIM_ConfigClockSource+0x16c>
 800aff0:	2b30      	cmp	r3, #48	; 0x30
 800aff2:	d064      	beq.n	800b0be <HAL_TIM_ConfigClockSource+0x15a>
 800aff4:	2b30      	cmp	r3, #48	; 0x30
 800aff6:	d86b      	bhi.n	800b0d0 <HAL_TIM_ConfigClockSource+0x16c>
 800aff8:	2b20      	cmp	r3, #32
 800affa:	d060      	beq.n	800b0be <HAL_TIM_ConfigClockSource+0x15a>
 800affc:	2b20      	cmp	r3, #32
 800affe:	d867      	bhi.n	800b0d0 <HAL_TIM_ConfigClockSource+0x16c>
 800b000:	2b00      	cmp	r3, #0
 800b002:	d05c      	beq.n	800b0be <HAL_TIM_ConfigClockSource+0x15a>
 800b004:	2b10      	cmp	r3, #16
 800b006:	d05a      	beq.n	800b0be <HAL_TIM_ConfigClockSource+0x15a>
 800b008:	e062      	b.n	800b0d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b01a:	f000 f980 	bl	800b31e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b02c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	609a      	str	r2, [r3, #8]
      break;
 800b036:	e04f      	b.n	800b0d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b048:	f000 f969 	bl	800b31e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689a      	ldr	r2, [r3, #8]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b05a:	609a      	str	r2, [r3, #8]
      break;
 800b05c:	e03c      	b.n	800b0d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b06a:	461a      	mov	r2, r3
 800b06c:	f000 f8e0 	bl	800b230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2150      	movs	r1, #80	; 0x50
 800b076:	4618      	mov	r0, r3
 800b078:	f000 f937 	bl	800b2ea <TIM_ITRx_SetConfig>
      break;
 800b07c:	e02c      	b.n	800b0d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b08a:	461a      	mov	r2, r3
 800b08c:	f000 f8fe 	bl	800b28c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2160      	movs	r1, #96	; 0x60
 800b096:	4618      	mov	r0, r3
 800b098:	f000 f927 	bl	800b2ea <TIM_ITRx_SetConfig>
      break;
 800b09c:	e01c      	b.n	800b0d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	f000 f8c0 	bl	800b230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2140      	movs	r1, #64	; 0x40
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 f917 	bl	800b2ea <TIM_ITRx_SetConfig>
      break;
 800b0bc:	e00c      	b.n	800b0d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	f000 f90e 	bl	800b2ea <TIM_ITRx_SetConfig>
      break;
 800b0ce:	e003      	b.n	800b0d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0d4:	e000      	b.n	800b0d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b0d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0fa:	bf00      	nop
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bc80      	pop	{r7}
 800b102:	4770      	bx	lr

0800b104 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b10c:	bf00      	nop
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	bc80      	pop	{r7}
 800b114:	4770      	bx	lr

0800b116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b116:	b480      	push	{r7}
 800b118:	b083      	sub	sp, #12
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b11e:	bf00      	nop
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	bc80      	pop	{r7}
 800b126:	4770      	bx	lr

0800b128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	bc80      	pop	{r7}
 800b138:	4770      	bx	lr
	...

0800b13c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	4a33      	ldr	r2, [pc, #204]	; (800b21c <TIM_Base_SetConfig+0xe0>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d013      	beq.n	800b17c <TIM_Base_SetConfig+0x40>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	4a32      	ldr	r2, [pc, #200]	; (800b220 <TIM_Base_SetConfig+0xe4>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d00f      	beq.n	800b17c <TIM_Base_SetConfig+0x40>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b162:	d00b      	beq.n	800b17c <TIM_Base_SetConfig+0x40>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a2f      	ldr	r2, [pc, #188]	; (800b224 <TIM_Base_SetConfig+0xe8>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d007      	beq.n	800b17c <TIM_Base_SetConfig+0x40>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a2e      	ldr	r2, [pc, #184]	; (800b228 <TIM_Base_SetConfig+0xec>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d003      	beq.n	800b17c <TIM_Base_SetConfig+0x40>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a2d      	ldr	r2, [pc, #180]	; (800b22c <TIM_Base_SetConfig+0xf0>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d108      	bne.n	800b18e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a22      	ldr	r2, [pc, #136]	; (800b21c <TIM_Base_SetConfig+0xe0>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d013      	beq.n	800b1be <TIM_Base_SetConfig+0x82>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a21      	ldr	r2, [pc, #132]	; (800b220 <TIM_Base_SetConfig+0xe4>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d00f      	beq.n	800b1be <TIM_Base_SetConfig+0x82>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a4:	d00b      	beq.n	800b1be <TIM_Base_SetConfig+0x82>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a1e      	ldr	r2, [pc, #120]	; (800b224 <TIM_Base_SetConfig+0xe8>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d007      	beq.n	800b1be <TIM_Base_SetConfig+0x82>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a1d      	ldr	r2, [pc, #116]	; (800b228 <TIM_Base_SetConfig+0xec>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d003      	beq.n	800b1be <TIM_Base_SetConfig+0x82>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a1c      	ldr	r2, [pc, #112]	; (800b22c <TIM_Base_SetConfig+0xf0>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d108      	bne.n	800b1d0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	689a      	ldr	r2, [r3, #8]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a09      	ldr	r2, [pc, #36]	; (800b21c <TIM_Base_SetConfig+0xe0>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d003      	beq.n	800b204 <TIM_Base_SetConfig+0xc8>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a08      	ldr	r2, [pc, #32]	; (800b220 <TIM_Base_SetConfig+0xe4>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d103      	bne.n	800b20c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	691a      	ldr	r2, [r3, #16]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	615a      	str	r2, [r3, #20]
}
 800b212:	bf00      	nop
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	bc80      	pop	{r7}
 800b21a:	4770      	bx	lr
 800b21c:	40012c00 	.word	0x40012c00
 800b220:	40013400 	.word	0x40013400
 800b224:	40000400 	.word	0x40000400
 800b228:	40000800 	.word	0x40000800
 800b22c:	40000c00 	.word	0x40000c00

0800b230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	60b9      	str	r1, [r7, #8]
 800b23a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	f023 0201 	bic.w	r2, r3, #1
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b25a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	011b      	lsls	r3, r3, #4
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	4313      	orrs	r3, r2
 800b264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f023 030a 	bic.w	r3, r3, #10
 800b26c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	4313      	orrs	r3, r2
 800b274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	621a      	str	r2, [r3, #32]
}
 800b282:	bf00      	nop
 800b284:	371c      	adds	r7, #28
 800b286:	46bd      	mov	sp, r7
 800b288:	bc80      	pop	{r7}
 800b28a:	4770      	bx	lr

0800b28c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b087      	sub	sp, #28
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	f023 0210 	bic.w	r2, r3, #16
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	031b      	lsls	r3, r3, #12
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b2c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	011b      	lsls	r3, r3, #4
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	693a      	ldr	r2, [r7, #16]
 800b2d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	621a      	str	r2, [r3, #32]
}
 800b2e0:	bf00      	nop
 800b2e2:	371c      	adds	r7, #28
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bc80      	pop	{r7}
 800b2e8:	4770      	bx	lr

0800b2ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b085      	sub	sp, #20
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	f043 0307 	orr.w	r3, r3, #7
 800b30c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	609a      	str	r2, [r3, #8]
}
 800b314:	bf00      	nop
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	bc80      	pop	{r7}
 800b31c:	4770      	bx	lr

0800b31e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b31e:	b480      	push	{r7}
 800b320:	b087      	sub	sp, #28
 800b322:	af00      	add	r7, sp, #0
 800b324:	60f8      	str	r0, [r7, #12]
 800b326:	60b9      	str	r1, [r7, #8]
 800b328:	607a      	str	r2, [r7, #4]
 800b32a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b338:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	021a      	lsls	r2, r3, #8
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	431a      	orrs	r2, r3
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	4313      	orrs	r3, r2
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	4313      	orrs	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	609a      	str	r2, [r3, #8]
}
 800b352:	bf00      	nop
 800b354:	371c      	adds	r7, #28
 800b356:	46bd      	mov	sp, r7
 800b358:	bc80      	pop	{r7}
 800b35a:	4770      	bx	lr

0800b35c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d101      	bne.n	800b374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b370:	2302      	movs	r3, #2
 800b372:	e050      	b.n	800b416 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2202      	movs	r2, #2
 800b380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b39a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a1b      	ldr	r2, [pc, #108]	; (800b420 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d018      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a19      	ldr	r2, [pc, #100]	; (800b424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d013      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ca:	d00e      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a15      	ldr	r2, [pc, #84]	; (800b428 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d009      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a14      	ldr	r2, [pc, #80]	; (800b42c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d004      	beq.n	800b3ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a12      	ldr	r2, [pc, #72]	; (800b430 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d10c      	bne.n	800b404 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bc80      	pop	{r7}
 800b41e:	4770      	bx	lr
 800b420:	40012c00 	.word	0x40012c00
 800b424:	40013400 	.word	0x40013400
 800b428:	40000400 	.word	0x40000400
 800b42c:	40000800 	.word	0x40000800
 800b430:	40000c00 	.word	0x40000c00

0800b434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	bc80      	pop	{r7}
 800b444:	4770      	bx	lr

0800b446 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b446:	b480      	push	{r7}
 800b448:	b083      	sub	sp, #12
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b44e:	bf00      	nop
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	bc80      	pop	{r7}
 800b456:	4770      	bx	lr

0800b458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	e042      	b.n	800b4f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7fc fe1a 	bl	80080b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2224      	movs	r2, #36	; 0x24
 800b488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68da      	ldr	r2, [r3, #12]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b49a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fcb5 	bl	800be0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	691a      	ldr	r2, [r3, #16]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	695a      	ldr	r2, [r3, #20]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68da      	ldr	r2, [r3, #12]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2220      	movs	r2, #32
 800b4e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	4613      	mov	r3, r2
 800b504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b20      	cmp	r3, #32
 800b510:	d121      	bne.n	800b556 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d002      	beq.n	800b51e <HAL_UART_Transmit_IT+0x26>
 800b518:	88fb      	ldrh	r3, [r7, #6]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d101      	bne.n	800b522 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e01a      	b.n	800b558 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	88fa      	ldrh	r2, [r7, #6]
 800b52c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	88fa      	ldrh	r2, [r7, #6]
 800b532:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2200      	movs	r2, #0
 800b538:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2221      	movs	r2, #33	; 0x21
 800b53e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	68da      	ldr	r2, [r3, #12]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b550:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	e000      	b.n	800b558 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b556:	2302      	movs	r3, #2
  }
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bc80      	pop	{r7}
 800b560:	4770      	bx	lr
	...

0800b564 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b0ba      	sub	sp, #232	; 0xe8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	695b      	ldr	r3, [r3, #20]
 800b586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b58a:	2300      	movs	r3, #0
 800b58c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b590:	2300      	movs	r3, #0
 800b592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b59a:	f003 030f 	and.w	r3, r3, #15
 800b59e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b5a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10f      	bne.n	800b5ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ae:	f003 0320 	and.w	r3, r3, #32
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d009      	beq.n	800b5ca <HAL_UART_IRQHandler+0x66>
 800b5b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ba:	f003 0320 	and.w	r3, r3, #32
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d003      	beq.n	800b5ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 fb63 	bl	800bc8e <UART_Receive_IT>
      return;
 800b5c8:	e25b      	b.n	800ba82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b5ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 80de 	beq.w	800b790 <HAL_UART_IRQHandler+0x22c>
 800b5d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5d8:	f003 0301 	and.w	r3, r3, #1
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d106      	bne.n	800b5ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f000 80d1 	beq.w	800b790 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5f2:	f003 0301 	and.w	r3, r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00b      	beq.n	800b612 <HAL_UART_IRQHandler+0xae>
 800b5fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b602:	2b00      	cmp	r3, #0
 800b604:	d005      	beq.n	800b612 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60a:	f043 0201 	orr.w	r2, r3, #1
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b616:	f003 0304 	and.w	r3, r3, #4
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00b      	beq.n	800b636 <HAL_UART_IRQHandler+0xd2>
 800b61e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	2b00      	cmp	r3, #0
 800b628:	d005      	beq.n	800b636 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b62e:	f043 0202 	orr.w	r2, r3, #2
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b63a:	f003 0302 	and.w	r3, r3, #2
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00b      	beq.n	800b65a <HAL_UART_IRQHandler+0xf6>
 800b642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d005      	beq.n	800b65a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b652:	f043 0204 	orr.w	r2, r3, #4
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b65e:	f003 0308 	and.w	r3, r3, #8
 800b662:	2b00      	cmp	r3, #0
 800b664:	d011      	beq.n	800b68a <HAL_UART_IRQHandler+0x126>
 800b666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b66a:	f003 0320 	and.w	r3, r3, #32
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d105      	bne.n	800b67e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d005      	beq.n	800b68a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b682:	f043 0208 	orr.w	r2, r3, #8
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f000 81f2 	beq.w	800ba78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b698:	f003 0320 	and.w	r3, r3, #32
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d008      	beq.n	800b6b2 <HAL_UART_IRQHandler+0x14e>
 800b6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6a4:	f003 0320 	and.w	r3, r3, #32
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 faee 	bl	800bc8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bf14      	ite	ne
 800b6c0:	2301      	movne	r3, #1
 800b6c2:	2300      	moveq	r3, #0
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ce:	f003 0308 	and.w	r3, r3, #8
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d103      	bne.n	800b6de <HAL_UART_IRQHandler+0x17a>
 800b6d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d04f      	beq.n	800b77e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f9f8 	bl	800bad4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d041      	beq.n	800b776 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	3314      	adds	r3, #20
 800b6f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b700:	e853 3f00 	ldrex	r3, [r3]
 800b704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b708:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b70c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3314      	adds	r3, #20
 800b71a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b71e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b726:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b72a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b72e:	e841 2300 	strex	r3, r2, [r1]
 800b732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1d9      	bne.n	800b6f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b742:	2b00      	cmp	r3, #0
 800b744:	d013      	beq.n	800b76e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74a:	4a7e      	ldr	r2, [pc, #504]	; (800b944 <HAL_UART_IRQHandler+0x3e0>)
 800b74c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b752:	4618      	mov	r0, r3
 800b754:	f7fd f86c 	bl	8008830 <HAL_DMA_Abort_IT>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d016      	beq.n	800b78c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b768:	4610      	mov	r0, r2
 800b76a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b76c:	e00e      	b.n	800b78c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f99c 	bl	800baac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b774:	e00a      	b.n	800b78c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f998 	bl	800baac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b77c:	e006      	b.n	800b78c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f994 	bl	800baac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b78a:	e175      	b.n	800ba78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b78c:	bf00      	nop
    return;
 800b78e:	e173      	b.n	800ba78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b794:	2b01      	cmp	r3, #1
 800b796:	f040 814f 	bne.w	800ba38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b79e:	f003 0310 	and.w	r3, r3, #16
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 8148 	beq.w	800ba38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7ac:	f003 0310 	and.w	r3, r3, #16
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 8141 	beq.w	800ba38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60bb      	str	r3, [r7, #8]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	60bb      	str	r3, [r7, #8]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	60bb      	str	r3, [r7, #8]
 800b7ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	695b      	ldr	r3, [r3, #20]
 800b7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 80b6 	beq.w	800b948 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 8145 	beq.w	800ba7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	f080 813e 	bcs.w	800ba7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b806:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	2b20      	cmp	r3, #32
 800b810:	f000 8088 	beq.w	800b924 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	330c      	adds	r3, #12
 800b81a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b822:	e853 3f00 	ldrex	r3, [r3]
 800b826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b82a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b82e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	330c      	adds	r3, #12
 800b83c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b840:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b848:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b84c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b850:	e841 2300 	strex	r3, r2, [r1]
 800b854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1d9      	bne.n	800b814 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3314      	adds	r3, #20
 800b866:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b86a:	e853 3f00 	ldrex	r3, [r3]
 800b86e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b872:	f023 0301 	bic.w	r3, r3, #1
 800b876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3314      	adds	r3, #20
 800b880:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b884:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b888:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b88c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e1      	bne.n	800b860 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3314      	adds	r3, #20
 800b8a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8a6:	e853 3f00 	ldrex	r3, [r3]
 800b8aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3314      	adds	r3, #20
 800b8bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b8c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8c8:	e841 2300 	strex	r3, r2, [r1]
 800b8cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1e3      	bne.n	800b89c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2220      	movs	r2, #32
 800b8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	330c      	adds	r3, #12
 800b8e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ec:	e853 3f00 	ldrex	r3, [r3]
 800b8f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f4:	f023 0310 	bic.w	r3, r3, #16
 800b8f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	330c      	adds	r3, #12
 800b902:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b906:	65ba      	str	r2, [r7, #88]	; 0x58
 800b908:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b90c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b90e:	e841 2300 	strex	r3, r2, [r1]
 800b912:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1e3      	bne.n	800b8e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fc ff4b 	bl	80087ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2202      	movs	r2, #2
 800b928:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b932:	b29b      	uxth	r3, r3
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	b29b      	uxth	r3, r3
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f8bf 	bl	800babe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b940:	e09c      	b.n	800ba7c <HAL_UART_IRQHandler+0x518>
 800b942:	bf00      	nop
 800b944:	0800bb99 	.word	0x0800bb99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b950:	b29b      	uxth	r3, r3
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f000 808e 	beq.w	800ba80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 8089 	beq.w	800ba80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	330c      	adds	r3, #12
 800b974:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b978:	e853 3f00 	ldrex	r3, [r3]
 800b97c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b984:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	330c      	adds	r3, #12
 800b98e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b992:	647a      	str	r2, [r7, #68]	; 0x44
 800b994:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b996:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b99a:	e841 2300 	strex	r3, r2, [r1]
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1e3      	bne.n	800b96e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3314      	adds	r3, #20
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	e853 3f00 	ldrex	r3, [r3]
 800b9b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	f023 0301 	bic.w	r3, r3, #1
 800b9bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3314      	adds	r3, #20
 800b9c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b9ca:	633a      	str	r2, [r7, #48]	; 0x30
 800b9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9d2:	e841 2300 	strex	r3, r2, [r1]
 800b9d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1e3      	bne.n	800b9a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2220      	movs	r2, #32
 800b9e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	330c      	adds	r3, #12
 800b9f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	e853 3f00 	ldrex	r3, [r3]
 800b9fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f023 0310 	bic.w	r3, r3, #16
 800ba02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	330c      	adds	r3, #12
 800ba0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ba10:	61fa      	str	r2, [r7, #28]
 800ba12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba14:	69b9      	ldr	r1, [r7, #24]
 800ba16:	69fa      	ldr	r2, [r7, #28]
 800ba18:	e841 2300 	strex	r3, r2, [r1]
 800ba1c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1e3      	bne.n	800b9ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2202      	movs	r2, #2
 800ba28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f844 	bl	800babe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba36:	e023      	b.n	800ba80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ba38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d009      	beq.n	800ba58 <HAL_UART_IRQHandler+0x4f4>
 800ba44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f8b5 	bl	800bbc0 <UART_Transmit_IT>
    return;
 800ba56:	e014      	b.n	800ba82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00e      	beq.n	800ba82 <HAL_UART_IRQHandler+0x51e>
 800ba64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d008      	beq.n	800ba82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f8f4 	bl	800bc5e <UART_EndTransmit_IT>
    return;
 800ba76:	e004      	b.n	800ba82 <HAL_UART_IRQHandler+0x51e>
    return;
 800ba78:	bf00      	nop
 800ba7a:	e002      	b.n	800ba82 <HAL_UART_IRQHandler+0x51e>
      return;
 800ba7c:	bf00      	nop
 800ba7e:	e000      	b.n	800ba82 <HAL_UART_IRQHandler+0x51e>
      return;
 800ba80:	bf00      	nop
  }
}
 800ba82:	37e8      	adds	r7, #232	; 0xe8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bc80      	pop	{r7}
 800ba98:	4770      	bx	lr

0800ba9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b083      	sub	sp, #12
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800baa2:	bf00      	nop
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bc80      	pop	{r7}
 800baaa:	4770      	bx	lr

0800baac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	bc80      	pop	{r7}
 800babc:	4770      	bx	lr

0800babe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	460b      	mov	r3, r1
 800bac8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800baca:	bf00      	nop
 800bacc:	370c      	adds	r7, #12
 800bace:	46bd      	mov	sp, r7
 800bad0:	bc80      	pop	{r7}
 800bad2:	4770      	bx	lr

0800bad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b095      	sub	sp, #84	; 0x54
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	330c      	adds	r3, #12
 800bae2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae6:	e853 3f00 	ldrex	r3, [r3]
 800baea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800baec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800baf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	330c      	adds	r3, #12
 800bafa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bafc:	643a      	str	r2, [r7, #64]	; 0x40
 800bafe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb04:	e841 2300 	strex	r3, r2, [r1]
 800bb08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1e5      	bne.n	800badc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3314      	adds	r3, #20
 800bb16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	e853 3f00 	ldrex	r3, [r3]
 800bb1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	f023 0301 	bic.w	r3, r3, #1
 800bb26:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	3314      	adds	r3, #20
 800bb2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb30:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb38:	e841 2300 	strex	r3, r2, [r1]
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1e5      	bne.n	800bb10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d119      	bne.n	800bb80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	330c      	adds	r3, #12
 800bb52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	e853 3f00 	ldrex	r3, [r3]
 800bb5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	f023 0310 	bic.w	r3, r3, #16
 800bb62:	647b      	str	r3, [r7, #68]	; 0x44
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	330c      	adds	r3, #12
 800bb6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb6c:	61ba      	str	r2, [r7, #24]
 800bb6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb70:	6979      	ldr	r1, [r7, #20]
 800bb72:	69ba      	ldr	r2, [r7, #24]
 800bb74:	e841 2300 	strex	r3, r2, [r1]
 800bb78:	613b      	str	r3, [r7, #16]
   return(result);
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1e5      	bne.n	800bb4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2220      	movs	r2, #32
 800bb84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bb8e:	bf00      	nop
 800bb90:	3754      	adds	r7, #84	; 0x54
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bc80      	pop	{r7}
 800bb96:	4770      	bx	lr

0800bb98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f7ff ff7a 	bl	800baac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbb8:	bf00      	nop
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b21      	cmp	r3, #33	; 0x21
 800bbd2:	d13e      	bne.n	800bc52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbdc:	d114      	bne.n	800bc08 <UART_Transmit_IT+0x48>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d110      	bne.n	800bc08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a1b      	ldr	r3, [r3, #32]
 800bc00:	1c9a      	adds	r2, r3, #2
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	621a      	str	r2, [r3, #32]
 800bc06:	e008      	b.n	800bc1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a1b      	ldr	r3, [r3, #32]
 800bc0c:	1c59      	adds	r1, r3, #1
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	6211      	str	r1, [r2, #32]
 800bc12:	781a      	ldrb	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	3b01      	subs	r3, #1
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	4619      	mov	r1, r3
 800bc28:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10f      	bne.n	800bc4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68da      	ldr	r2, [r3, #12]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68da      	ldr	r2, [r3, #12]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	e000      	b.n	800bc54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bc52:	2302      	movs	r3, #2
  }
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bc80      	pop	{r7}
 800bc5c:	4770      	bx	lr

0800bc5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68da      	ldr	r2, [r3, #12]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2220      	movs	r2, #32
 800bc7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f7ff ff02 	bl	800ba88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b08c      	sub	sp, #48	; 0x30
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	2b22      	cmp	r3, #34	; 0x22
 800bca0:	f040 80ae 	bne.w	800be00 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcac:	d117      	bne.n	800bcde <UART_Receive_IT+0x50>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	691b      	ldr	r3, [r3, #16]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d113      	bne.n	800bcde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd6:	1c9a      	adds	r2, r3, #2
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	629a      	str	r2, [r3, #40]	; 0x28
 800bcdc:	e026      	b.n	800bd2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bce4:	2300      	movs	r3, #0
 800bce6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcf0:	d007      	beq.n	800bd02 <UART_Receive_IT+0x74>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10a      	bne.n	800bd10 <UART_Receive_IT+0x82>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d106      	bne.n	800bd10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	b2da      	uxtb	r2, r3
 800bd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0c:	701a      	strb	r2, [r3, #0]
 800bd0e:	e008      	b.n	800bd22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd26:	1c5a      	adds	r2, r3, #1
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	3b01      	subs	r3, #1
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d15d      	bne.n	800bdfc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68da      	ldr	r2, [r3, #12]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f022 0220 	bic.w	r2, r2, #32
 800bd4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	695a      	ldr	r2, [r3, #20]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f022 0201 	bic.w	r2, r2, #1
 800bd6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2220      	movs	r2, #32
 800bd74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d135      	bne.n	800bdf2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	330c      	adds	r3, #12
 800bd92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	e853 3f00 	ldrex	r3, [r3]
 800bd9a:	613b      	str	r3, [r7, #16]
   return(result);
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f023 0310 	bic.w	r3, r3, #16
 800bda2:	627b      	str	r3, [r7, #36]	; 0x24
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	330c      	adds	r3, #12
 800bdaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdac:	623a      	str	r2, [r7, #32]
 800bdae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb0:	69f9      	ldr	r1, [r7, #28]
 800bdb2:	6a3a      	ldr	r2, [r7, #32]
 800bdb4:	e841 2300 	strex	r3, r2, [r1]
 800bdb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e5      	bne.n	800bd8c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 0310 	and.w	r3, r3, #16
 800bdca:	2b10      	cmp	r3, #16
 800bdcc:	d10a      	bne.n	800bde4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bdce:	2300      	movs	r3, #0
 800bdd0:	60fb      	str	r3, [r7, #12]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	60fb      	str	r3, [r7, #12]
 800bde2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bde8:	4619      	mov	r1, r3
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7ff fe67 	bl	800babe <HAL_UARTEx_RxEventCallback>
 800bdf0:	e002      	b.n	800bdf8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7ff fe51 	bl	800ba9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	e002      	b.n	800be02 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	e000      	b.n	800be02 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800be00:	2302      	movs	r3, #2
  }
}
 800be02:	4618      	mov	r0, r3
 800be04:	3730      	adds	r7, #48	; 0x30
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
	...

0800be0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68da      	ldr	r2, [r3, #12]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	430a      	orrs	r2, r1
 800be28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	689a      	ldr	r2, [r3, #8]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	431a      	orrs	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	4313      	orrs	r3, r2
 800be3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800be46:	f023 030c 	bic.w	r3, r3, #12
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	6812      	ldr	r2, [r2, #0]
 800be4e:	68b9      	ldr	r1, [r7, #8]
 800be50:	430b      	orrs	r3, r1
 800be52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	699a      	ldr	r2, [r3, #24]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	430a      	orrs	r2, r1
 800be68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a2c      	ldr	r2, [pc, #176]	; (800bf20 <UART_SetConfig+0x114>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d103      	bne.n	800be7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800be74:	f7fe fe8c 	bl	800ab90 <HAL_RCC_GetPCLK2Freq>
 800be78:	60f8      	str	r0, [r7, #12]
 800be7a:	e002      	b.n	800be82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800be7c:	f7fe fe74 	bl	800ab68 <HAL_RCC_GetPCLK1Freq>
 800be80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	4613      	mov	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	009a      	lsls	r2, r3, #2
 800be8c:	441a      	add	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	fbb2 f3f3 	udiv	r3, r2, r3
 800be98:	4a22      	ldr	r2, [pc, #136]	; (800bf24 <UART_SetConfig+0x118>)
 800be9a:	fba2 2303 	umull	r2, r3, r2, r3
 800be9e:	095b      	lsrs	r3, r3, #5
 800bea0:	0119      	lsls	r1, r3, #4
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	4613      	mov	r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	009a      	lsls	r2, r3, #2
 800beac:	441a      	add	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	fbb2 f2f3 	udiv	r2, r2, r3
 800beb8:	4b1a      	ldr	r3, [pc, #104]	; (800bf24 <UART_SetConfig+0x118>)
 800beba:	fba3 0302 	umull	r0, r3, r3, r2
 800bebe:	095b      	lsrs	r3, r3, #5
 800bec0:	2064      	movs	r0, #100	; 0x64
 800bec2:	fb00 f303 	mul.w	r3, r0, r3
 800bec6:	1ad3      	subs	r3, r2, r3
 800bec8:	011b      	lsls	r3, r3, #4
 800beca:	3332      	adds	r3, #50	; 0x32
 800becc:	4a15      	ldr	r2, [pc, #84]	; (800bf24 <UART_SetConfig+0x118>)
 800bece:	fba2 2303 	umull	r2, r3, r2, r3
 800bed2:	095b      	lsrs	r3, r3, #5
 800bed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bed8:	4419      	add	r1, r3
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	4613      	mov	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	009a      	lsls	r2, r3, #2
 800bee4:	441a      	add	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	fbb2 f2f3 	udiv	r2, r2, r3
 800bef0:	4b0c      	ldr	r3, [pc, #48]	; (800bf24 <UART_SetConfig+0x118>)
 800bef2:	fba3 0302 	umull	r0, r3, r3, r2
 800bef6:	095b      	lsrs	r3, r3, #5
 800bef8:	2064      	movs	r0, #100	; 0x64
 800befa:	fb00 f303 	mul.w	r3, r0, r3
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	011b      	lsls	r3, r3, #4
 800bf02:	3332      	adds	r3, #50	; 0x32
 800bf04:	4a07      	ldr	r2, [pc, #28]	; (800bf24 <UART_SetConfig+0x118>)
 800bf06:	fba2 2303 	umull	r2, r3, r2, r3
 800bf0a:	095b      	lsrs	r3, r3, #5
 800bf0c:	f003 020f 	and.w	r2, r3, #15
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	440a      	add	r2, r1
 800bf16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bf18:	bf00      	nop
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	40013800 	.word	0x40013800
 800bf24:	51eb851f 	.word	0x51eb851f

0800bf28 <__itoa>:
 800bf28:	1e93      	subs	r3, r2, #2
 800bf2a:	2b22      	cmp	r3, #34	; 0x22
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	460c      	mov	r4, r1
 800bf30:	d904      	bls.n	800bf3c <__itoa+0x14>
 800bf32:	2300      	movs	r3, #0
 800bf34:	461c      	mov	r4, r3
 800bf36:	700b      	strb	r3, [r1, #0]
 800bf38:	4620      	mov	r0, r4
 800bf3a:	bd10      	pop	{r4, pc}
 800bf3c:	2a0a      	cmp	r2, #10
 800bf3e:	d109      	bne.n	800bf54 <__itoa+0x2c>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	da07      	bge.n	800bf54 <__itoa+0x2c>
 800bf44:	232d      	movs	r3, #45	; 0x2d
 800bf46:	700b      	strb	r3, [r1, #0]
 800bf48:	2101      	movs	r1, #1
 800bf4a:	4240      	negs	r0, r0
 800bf4c:	4421      	add	r1, r4
 800bf4e:	f000 f8d1 	bl	800c0f4 <__utoa>
 800bf52:	e7f1      	b.n	800bf38 <__itoa+0x10>
 800bf54:	2100      	movs	r1, #0
 800bf56:	e7f9      	b.n	800bf4c <__itoa+0x24>

0800bf58 <itoa>:
 800bf58:	f7ff bfe6 	b.w	800bf28 <__itoa>

0800bf5c <sbrk_aligned>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	4e0e      	ldr	r6, [pc, #56]	; (800bf98 <sbrk_aligned+0x3c>)
 800bf60:	460c      	mov	r4, r1
 800bf62:	6831      	ldr	r1, [r6, #0]
 800bf64:	4605      	mov	r5, r0
 800bf66:	b911      	cbnz	r1, 800bf6e <sbrk_aligned+0x12>
 800bf68:	f000 f91e 	bl	800c1a8 <_sbrk_r>
 800bf6c:	6030      	str	r0, [r6, #0]
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4628      	mov	r0, r5
 800bf72:	f000 f919 	bl	800c1a8 <_sbrk_r>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d00a      	beq.n	800bf90 <sbrk_aligned+0x34>
 800bf7a:	1cc4      	adds	r4, r0, #3
 800bf7c:	f024 0403 	bic.w	r4, r4, #3
 800bf80:	42a0      	cmp	r0, r4
 800bf82:	d007      	beq.n	800bf94 <sbrk_aligned+0x38>
 800bf84:	1a21      	subs	r1, r4, r0
 800bf86:	4628      	mov	r0, r5
 800bf88:	f000 f90e 	bl	800c1a8 <_sbrk_r>
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	d101      	bne.n	800bf94 <sbrk_aligned+0x38>
 800bf90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf94:	4620      	mov	r0, r4
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
 800bf98:	20000468 	.word	0x20000468

0800bf9c <_malloc_r>:
 800bf9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa0:	1ccd      	adds	r5, r1, #3
 800bfa2:	f025 0503 	bic.w	r5, r5, #3
 800bfa6:	3508      	adds	r5, #8
 800bfa8:	2d0c      	cmp	r5, #12
 800bfaa:	bf38      	it	cc
 800bfac:	250c      	movcc	r5, #12
 800bfae:	2d00      	cmp	r5, #0
 800bfb0:	4607      	mov	r7, r0
 800bfb2:	db01      	blt.n	800bfb8 <_malloc_r+0x1c>
 800bfb4:	42a9      	cmp	r1, r5
 800bfb6:	d905      	bls.n	800bfc4 <_malloc_r+0x28>
 800bfb8:	230c      	movs	r3, #12
 800bfba:	2600      	movs	r6, #0
 800bfbc:	603b      	str	r3, [r7, #0]
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c098 <_malloc_r+0xfc>
 800bfc8:	f000 f868 	bl	800c09c <__malloc_lock>
 800bfcc:	f8d8 3000 	ldr.w	r3, [r8]
 800bfd0:	461c      	mov	r4, r3
 800bfd2:	bb5c      	cbnz	r4, 800c02c <_malloc_r+0x90>
 800bfd4:	4629      	mov	r1, r5
 800bfd6:	4638      	mov	r0, r7
 800bfd8:	f7ff ffc0 	bl	800bf5c <sbrk_aligned>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	4604      	mov	r4, r0
 800bfe0:	d155      	bne.n	800c08e <_malloc_r+0xf2>
 800bfe2:	f8d8 4000 	ldr.w	r4, [r8]
 800bfe6:	4626      	mov	r6, r4
 800bfe8:	2e00      	cmp	r6, #0
 800bfea:	d145      	bne.n	800c078 <_malloc_r+0xdc>
 800bfec:	2c00      	cmp	r4, #0
 800bfee:	d048      	beq.n	800c082 <_malloc_r+0xe6>
 800bff0:	6823      	ldr	r3, [r4, #0]
 800bff2:	4631      	mov	r1, r6
 800bff4:	4638      	mov	r0, r7
 800bff6:	eb04 0903 	add.w	r9, r4, r3
 800bffa:	f000 f8d5 	bl	800c1a8 <_sbrk_r>
 800bffe:	4581      	cmp	r9, r0
 800c000:	d13f      	bne.n	800c082 <_malloc_r+0xe6>
 800c002:	6821      	ldr	r1, [r4, #0]
 800c004:	4638      	mov	r0, r7
 800c006:	1a6d      	subs	r5, r5, r1
 800c008:	4629      	mov	r1, r5
 800c00a:	f7ff ffa7 	bl	800bf5c <sbrk_aligned>
 800c00e:	3001      	adds	r0, #1
 800c010:	d037      	beq.n	800c082 <_malloc_r+0xe6>
 800c012:	6823      	ldr	r3, [r4, #0]
 800c014:	442b      	add	r3, r5
 800c016:	6023      	str	r3, [r4, #0]
 800c018:	f8d8 3000 	ldr.w	r3, [r8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d038      	beq.n	800c092 <_malloc_r+0xf6>
 800c020:	685a      	ldr	r2, [r3, #4]
 800c022:	42a2      	cmp	r2, r4
 800c024:	d12b      	bne.n	800c07e <_malloc_r+0xe2>
 800c026:	2200      	movs	r2, #0
 800c028:	605a      	str	r2, [r3, #4]
 800c02a:	e00f      	b.n	800c04c <_malloc_r+0xb0>
 800c02c:	6822      	ldr	r2, [r4, #0]
 800c02e:	1b52      	subs	r2, r2, r5
 800c030:	d41f      	bmi.n	800c072 <_malloc_r+0xd6>
 800c032:	2a0b      	cmp	r2, #11
 800c034:	d917      	bls.n	800c066 <_malloc_r+0xca>
 800c036:	1961      	adds	r1, r4, r5
 800c038:	42a3      	cmp	r3, r4
 800c03a:	6025      	str	r5, [r4, #0]
 800c03c:	bf18      	it	ne
 800c03e:	6059      	strne	r1, [r3, #4]
 800c040:	6863      	ldr	r3, [r4, #4]
 800c042:	bf08      	it	eq
 800c044:	f8c8 1000 	streq.w	r1, [r8]
 800c048:	5162      	str	r2, [r4, r5]
 800c04a:	604b      	str	r3, [r1, #4]
 800c04c:	4638      	mov	r0, r7
 800c04e:	f104 060b 	add.w	r6, r4, #11
 800c052:	f000 f829 	bl	800c0a8 <__malloc_unlock>
 800c056:	f026 0607 	bic.w	r6, r6, #7
 800c05a:	1d23      	adds	r3, r4, #4
 800c05c:	1af2      	subs	r2, r6, r3
 800c05e:	d0ae      	beq.n	800bfbe <_malloc_r+0x22>
 800c060:	1b9b      	subs	r3, r3, r6
 800c062:	50a3      	str	r3, [r4, r2]
 800c064:	e7ab      	b.n	800bfbe <_malloc_r+0x22>
 800c066:	42a3      	cmp	r3, r4
 800c068:	6862      	ldr	r2, [r4, #4]
 800c06a:	d1dd      	bne.n	800c028 <_malloc_r+0x8c>
 800c06c:	f8c8 2000 	str.w	r2, [r8]
 800c070:	e7ec      	b.n	800c04c <_malloc_r+0xb0>
 800c072:	4623      	mov	r3, r4
 800c074:	6864      	ldr	r4, [r4, #4]
 800c076:	e7ac      	b.n	800bfd2 <_malloc_r+0x36>
 800c078:	4634      	mov	r4, r6
 800c07a:	6876      	ldr	r6, [r6, #4]
 800c07c:	e7b4      	b.n	800bfe8 <_malloc_r+0x4c>
 800c07e:	4613      	mov	r3, r2
 800c080:	e7cc      	b.n	800c01c <_malloc_r+0x80>
 800c082:	230c      	movs	r3, #12
 800c084:	4638      	mov	r0, r7
 800c086:	603b      	str	r3, [r7, #0]
 800c088:	f000 f80e 	bl	800c0a8 <__malloc_unlock>
 800c08c:	e797      	b.n	800bfbe <_malloc_r+0x22>
 800c08e:	6025      	str	r5, [r4, #0]
 800c090:	e7dc      	b.n	800c04c <_malloc_r+0xb0>
 800c092:	605b      	str	r3, [r3, #4]
 800c094:	deff      	udf	#255	; 0xff
 800c096:	bf00      	nop
 800c098:	20000464 	.word	0x20000464

0800c09c <__malloc_lock>:
 800c09c:	4801      	ldr	r0, [pc, #4]	; (800c0a4 <__malloc_lock+0x8>)
 800c09e:	f000 b8bd 	b.w	800c21c <__retarget_lock_acquire_recursive>
 800c0a2:	bf00      	nop
 800c0a4:	200005a4 	.word	0x200005a4

0800c0a8 <__malloc_unlock>:
 800c0a8:	4801      	ldr	r0, [pc, #4]	; (800c0b0 <__malloc_unlock+0x8>)
 800c0aa:	f000 b8b8 	b.w	800c21e <__retarget_lock_release_recursive>
 800c0ae:	bf00      	nop
 800c0b0:	200005a4 	.word	0x200005a4

0800c0b4 <siprintf>:
 800c0b4:	b40e      	push	{r1, r2, r3}
 800c0b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0ba:	b500      	push	{lr}
 800c0bc:	b09c      	sub	sp, #112	; 0x70
 800c0be:	ab1d      	add	r3, sp, #116	; 0x74
 800c0c0:	9002      	str	r0, [sp, #8]
 800c0c2:	9006      	str	r0, [sp, #24]
 800c0c4:	9107      	str	r1, [sp, #28]
 800c0c6:	9104      	str	r1, [sp, #16]
 800c0c8:	4808      	ldr	r0, [pc, #32]	; (800c0ec <siprintf+0x38>)
 800c0ca:	4909      	ldr	r1, [pc, #36]	; (800c0f0 <siprintf+0x3c>)
 800c0cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0d0:	9105      	str	r1, [sp, #20]
 800c0d2:	6800      	ldr	r0, [r0, #0]
 800c0d4:	a902      	add	r1, sp, #8
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	f000 f944 	bl	800c364 <_svfiprintf_r>
 800c0dc:	2200      	movs	r2, #0
 800c0de:	9b02      	ldr	r3, [sp, #8]
 800c0e0:	701a      	strb	r2, [r3, #0]
 800c0e2:	b01c      	add	sp, #112	; 0x70
 800c0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0e8:	b003      	add	sp, #12
 800c0ea:	4770      	bx	lr
 800c0ec:	20000100 	.word	0x20000100
 800c0f0:	ffff0208 	.word	0xffff0208

0800c0f4 <__utoa>:
 800c0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0f6:	b08b      	sub	sp, #44	; 0x2c
 800c0f8:	4605      	mov	r5, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	466e      	mov	r6, sp
 800c0fe:	4c1d      	ldr	r4, [pc, #116]	; (800c174 <__utoa+0x80>)
 800c100:	f104 0c20 	add.w	ip, r4, #32
 800c104:	4637      	mov	r7, r6
 800c106:	6820      	ldr	r0, [r4, #0]
 800c108:	6861      	ldr	r1, [r4, #4]
 800c10a:	3408      	adds	r4, #8
 800c10c:	c703      	stmia	r7!, {r0, r1}
 800c10e:	4564      	cmp	r4, ip
 800c110:	463e      	mov	r6, r7
 800c112:	d1f7      	bne.n	800c104 <__utoa+0x10>
 800c114:	7921      	ldrb	r1, [r4, #4]
 800c116:	6820      	ldr	r0, [r4, #0]
 800c118:	7139      	strb	r1, [r7, #4]
 800c11a:	1e91      	subs	r1, r2, #2
 800c11c:	2922      	cmp	r1, #34	; 0x22
 800c11e:	6038      	str	r0, [r7, #0]
 800c120:	f04f 0100 	mov.w	r1, #0
 800c124:	d904      	bls.n	800c130 <__utoa+0x3c>
 800c126:	7019      	strb	r1, [r3, #0]
 800c128:	460b      	mov	r3, r1
 800c12a:	4618      	mov	r0, r3
 800c12c:	b00b      	add	sp, #44	; 0x2c
 800c12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c130:	1e58      	subs	r0, r3, #1
 800c132:	4684      	mov	ip, r0
 800c134:	fbb5 f7f2 	udiv	r7, r5, r2
 800c138:	fb02 5617 	mls	r6, r2, r7, r5
 800c13c:	3628      	adds	r6, #40	; 0x28
 800c13e:	446e      	add	r6, sp
 800c140:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c144:	460c      	mov	r4, r1
 800c146:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c14a:	462e      	mov	r6, r5
 800c14c:	42b2      	cmp	r2, r6
 800c14e:	463d      	mov	r5, r7
 800c150:	f101 0101 	add.w	r1, r1, #1
 800c154:	d9ee      	bls.n	800c134 <__utoa+0x40>
 800c156:	2200      	movs	r2, #0
 800c158:	545a      	strb	r2, [r3, r1]
 800c15a:	1919      	adds	r1, r3, r4
 800c15c:	1aa5      	subs	r5, r4, r2
 800c15e:	42aa      	cmp	r2, r5
 800c160:	dae3      	bge.n	800c12a <__utoa+0x36>
 800c162:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c166:	780e      	ldrb	r6, [r1, #0]
 800c168:	3201      	adds	r2, #1
 800c16a:	7006      	strb	r6, [r0, #0]
 800c16c:	f801 5901 	strb.w	r5, [r1], #-1
 800c170:	e7f4      	b.n	800c15c <__utoa+0x68>
 800c172:	bf00      	nop
 800c174:	0800d892 	.word	0x0800d892

0800c178 <strcat>:
 800c178:	4602      	mov	r2, r0
 800c17a:	b510      	push	{r4, lr}
 800c17c:	7814      	ldrb	r4, [r2, #0]
 800c17e:	4613      	mov	r3, r2
 800c180:	3201      	adds	r2, #1
 800c182:	2c00      	cmp	r4, #0
 800c184:	d1fa      	bne.n	800c17c <strcat+0x4>
 800c186:	3b01      	subs	r3, #1
 800c188:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c18c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c190:	2a00      	cmp	r2, #0
 800c192:	d1f9      	bne.n	800c188 <strcat+0x10>
 800c194:	bd10      	pop	{r4, pc}

0800c196 <memset>:
 800c196:	4603      	mov	r3, r0
 800c198:	4402      	add	r2, r0
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d100      	bne.n	800c1a0 <memset+0xa>
 800c19e:	4770      	bx	lr
 800c1a0:	f803 1b01 	strb.w	r1, [r3], #1
 800c1a4:	e7f9      	b.n	800c19a <memset+0x4>
	...

0800c1a8 <_sbrk_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	4d05      	ldr	r5, [pc, #20]	; (800c1c4 <_sbrk_r+0x1c>)
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	4608      	mov	r0, r1
 800c1b2:	602b      	str	r3, [r5, #0]
 800c1b4:	f7fc f810 	bl	80081d8 <_sbrk>
 800c1b8:	1c43      	adds	r3, r0, #1
 800c1ba:	d102      	bne.n	800c1c2 <_sbrk_r+0x1a>
 800c1bc:	682b      	ldr	r3, [r5, #0]
 800c1be:	b103      	cbz	r3, 800c1c2 <_sbrk_r+0x1a>
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	bd38      	pop	{r3, r4, r5, pc}
 800c1c4:	200005a8 	.word	0x200005a8

0800c1c8 <__errno>:
 800c1c8:	4b01      	ldr	r3, [pc, #4]	; (800c1d0 <__errno+0x8>)
 800c1ca:	6818      	ldr	r0, [r3, #0]
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	20000100 	.word	0x20000100

0800c1d4 <__libc_init_array>:
 800c1d4:	b570      	push	{r4, r5, r6, lr}
 800c1d6:	2600      	movs	r6, #0
 800c1d8:	4d0c      	ldr	r5, [pc, #48]	; (800c20c <__libc_init_array+0x38>)
 800c1da:	4c0d      	ldr	r4, [pc, #52]	; (800c210 <__libc_init_array+0x3c>)
 800c1dc:	1b64      	subs	r4, r4, r5
 800c1de:	10a4      	asrs	r4, r4, #2
 800c1e0:	42a6      	cmp	r6, r4
 800c1e2:	d109      	bne.n	800c1f8 <__libc_init_array+0x24>
 800c1e4:	f000 fbbe 	bl	800c964 <_init>
 800c1e8:	2600      	movs	r6, #0
 800c1ea:	4d0a      	ldr	r5, [pc, #40]	; (800c214 <__libc_init_array+0x40>)
 800c1ec:	4c0a      	ldr	r4, [pc, #40]	; (800c218 <__libc_init_array+0x44>)
 800c1ee:	1b64      	subs	r4, r4, r5
 800c1f0:	10a4      	asrs	r4, r4, #2
 800c1f2:	42a6      	cmp	r6, r4
 800c1f4:	d105      	bne.n	800c202 <__libc_init_array+0x2e>
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}
 800c1f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1fc:	4798      	blx	r3
 800c1fe:	3601      	adds	r6, #1
 800c200:	e7ee      	b.n	800c1e0 <__libc_init_array+0xc>
 800c202:	f855 3b04 	ldr.w	r3, [r5], #4
 800c206:	4798      	blx	r3
 800c208:	3601      	adds	r6, #1
 800c20a:	e7f2      	b.n	800c1f2 <__libc_init_array+0x1e>
 800c20c:	0800d8ec 	.word	0x0800d8ec
 800c210:	0800d8ec 	.word	0x0800d8ec
 800c214:	0800d8ec 	.word	0x0800d8ec
 800c218:	0800d8f0 	.word	0x0800d8f0

0800c21c <__retarget_lock_acquire_recursive>:
 800c21c:	4770      	bx	lr

0800c21e <__retarget_lock_release_recursive>:
 800c21e:	4770      	bx	lr

0800c220 <_free_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4605      	mov	r5, r0
 800c224:	2900      	cmp	r1, #0
 800c226:	d040      	beq.n	800c2aa <_free_r+0x8a>
 800c228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c22c:	1f0c      	subs	r4, r1, #4
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bfb8      	it	lt
 800c232:	18e4      	addlt	r4, r4, r3
 800c234:	f7ff ff32 	bl	800c09c <__malloc_lock>
 800c238:	4a1c      	ldr	r2, [pc, #112]	; (800c2ac <_free_r+0x8c>)
 800c23a:	6813      	ldr	r3, [r2, #0]
 800c23c:	b933      	cbnz	r3, 800c24c <_free_r+0x2c>
 800c23e:	6063      	str	r3, [r4, #4]
 800c240:	6014      	str	r4, [r2, #0]
 800c242:	4628      	mov	r0, r5
 800c244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c248:	f7ff bf2e 	b.w	800c0a8 <__malloc_unlock>
 800c24c:	42a3      	cmp	r3, r4
 800c24e:	d908      	bls.n	800c262 <_free_r+0x42>
 800c250:	6820      	ldr	r0, [r4, #0]
 800c252:	1821      	adds	r1, r4, r0
 800c254:	428b      	cmp	r3, r1
 800c256:	bf01      	itttt	eq
 800c258:	6819      	ldreq	r1, [r3, #0]
 800c25a:	685b      	ldreq	r3, [r3, #4]
 800c25c:	1809      	addeq	r1, r1, r0
 800c25e:	6021      	streq	r1, [r4, #0]
 800c260:	e7ed      	b.n	800c23e <_free_r+0x1e>
 800c262:	461a      	mov	r2, r3
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	b10b      	cbz	r3, 800c26c <_free_r+0x4c>
 800c268:	42a3      	cmp	r3, r4
 800c26a:	d9fa      	bls.n	800c262 <_free_r+0x42>
 800c26c:	6811      	ldr	r1, [r2, #0]
 800c26e:	1850      	adds	r0, r2, r1
 800c270:	42a0      	cmp	r0, r4
 800c272:	d10b      	bne.n	800c28c <_free_r+0x6c>
 800c274:	6820      	ldr	r0, [r4, #0]
 800c276:	4401      	add	r1, r0
 800c278:	1850      	adds	r0, r2, r1
 800c27a:	4283      	cmp	r3, r0
 800c27c:	6011      	str	r1, [r2, #0]
 800c27e:	d1e0      	bne.n	800c242 <_free_r+0x22>
 800c280:	6818      	ldr	r0, [r3, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	4408      	add	r0, r1
 800c286:	6010      	str	r0, [r2, #0]
 800c288:	6053      	str	r3, [r2, #4]
 800c28a:	e7da      	b.n	800c242 <_free_r+0x22>
 800c28c:	d902      	bls.n	800c294 <_free_r+0x74>
 800c28e:	230c      	movs	r3, #12
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	e7d6      	b.n	800c242 <_free_r+0x22>
 800c294:	6820      	ldr	r0, [r4, #0]
 800c296:	1821      	adds	r1, r4, r0
 800c298:	428b      	cmp	r3, r1
 800c29a:	bf01      	itttt	eq
 800c29c:	6819      	ldreq	r1, [r3, #0]
 800c29e:	685b      	ldreq	r3, [r3, #4]
 800c2a0:	1809      	addeq	r1, r1, r0
 800c2a2:	6021      	streq	r1, [r4, #0]
 800c2a4:	6063      	str	r3, [r4, #4]
 800c2a6:	6054      	str	r4, [r2, #4]
 800c2a8:	e7cb      	b.n	800c242 <_free_r+0x22>
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	20000464 	.word	0x20000464

0800c2b0 <__ssputs_r>:
 800c2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b4:	461f      	mov	r7, r3
 800c2b6:	688e      	ldr	r6, [r1, #8]
 800c2b8:	4682      	mov	sl, r0
 800c2ba:	42be      	cmp	r6, r7
 800c2bc:	460c      	mov	r4, r1
 800c2be:	4690      	mov	r8, r2
 800c2c0:	680b      	ldr	r3, [r1, #0]
 800c2c2:	d82c      	bhi.n	800c31e <__ssputs_r+0x6e>
 800c2c4:	898a      	ldrh	r2, [r1, #12]
 800c2c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2ca:	d026      	beq.n	800c31a <__ssputs_r+0x6a>
 800c2cc:	6965      	ldr	r5, [r4, #20]
 800c2ce:	6909      	ldr	r1, [r1, #16]
 800c2d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2d4:	eba3 0901 	sub.w	r9, r3, r1
 800c2d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2dc:	1c7b      	adds	r3, r7, #1
 800c2de:	444b      	add	r3, r9
 800c2e0:	106d      	asrs	r5, r5, #1
 800c2e2:	429d      	cmp	r5, r3
 800c2e4:	bf38      	it	cc
 800c2e6:	461d      	movcc	r5, r3
 800c2e8:	0553      	lsls	r3, r2, #21
 800c2ea:	d527      	bpl.n	800c33c <__ssputs_r+0x8c>
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	f7ff fe55 	bl	800bf9c <_malloc_r>
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	b360      	cbz	r0, 800c350 <__ssputs_r+0xa0>
 800c2f6:	464a      	mov	r2, r9
 800c2f8:	6921      	ldr	r1, [r4, #16]
 800c2fa:	f000 fb1c 	bl	800c936 <memcpy>
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	6126      	str	r6, [r4, #16]
 800c30c:	444e      	add	r6, r9
 800c30e:	6026      	str	r6, [r4, #0]
 800c310:	463e      	mov	r6, r7
 800c312:	6165      	str	r5, [r4, #20]
 800c314:	eba5 0509 	sub.w	r5, r5, r9
 800c318:	60a5      	str	r5, [r4, #8]
 800c31a:	42be      	cmp	r6, r7
 800c31c:	d900      	bls.n	800c320 <__ssputs_r+0x70>
 800c31e:	463e      	mov	r6, r7
 800c320:	4632      	mov	r2, r6
 800c322:	4641      	mov	r1, r8
 800c324:	6820      	ldr	r0, [r4, #0]
 800c326:	f000 fade 	bl	800c8e6 <memmove>
 800c32a:	2000      	movs	r0, #0
 800c32c:	68a3      	ldr	r3, [r4, #8]
 800c32e:	1b9b      	subs	r3, r3, r6
 800c330:	60a3      	str	r3, [r4, #8]
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	4433      	add	r3, r6
 800c336:	6023      	str	r3, [r4, #0]
 800c338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c33c:	462a      	mov	r2, r5
 800c33e:	f000 faa3 	bl	800c888 <_realloc_r>
 800c342:	4606      	mov	r6, r0
 800c344:	2800      	cmp	r0, #0
 800c346:	d1e0      	bne.n	800c30a <__ssputs_r+0x5a>
 800c348:	4650      	mov	r0, sl
 800c34a:	6921      	ldr	r1, [r4, #16]
 800c34c:	f7ff ff68 	bl	800c220 <_free_r>
 800c350:	230c      	movs	r3, #12
 800c352:	f8ca 3000 	str.w	r3, [sl]
 800c356:	89a3      	ldrh	r3, [r4, #12]
 800c358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	e7e9      	b.n	800c338 <__ssputs_r+0x88>

0800c364 <_svfiprintf_r>:
 800c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c368:	4698      	mov	r8, r3
 800c36a:	898b      	ldrh	r3, [r1, #12]
 800c36c:	4607      	mov	r7, r0
 800c36e:	061b      	lsls	r3, r3, #24
 800c370:	460d      	mov	r5, r1
 800c372:	4614      	mov	r4, r2
 800c374:	b09d      	sub	sp, #116	; 0x74
 800c376:	d50e      	bpl.n	800c396 <_svfiprintf_r+0x32>
 800c378:	690b      	ldr	r3, [r1, #16]
 800c37a:	b963      	cbnz	r3, 800c396 <_svfiprintf_r+0x32>
 800c37c:	2140      	movs	r1, #64	; 0x40
 800c37e:	f7ff fe0d 	bl	800bf9c <_malloc_r>
 800c382:	6028      	str	r0, [r5, #0]
 800c384:	6128      	str	r0, [r5, #16]
 800c386:	b920      	cbnz	r0, 800c392 <_svfiprintf_r+0x2e>
 800c388:	230c      	movs	r3, #12
 800c38a:	603b      	str	r3, [r7, #0]
 800c38c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c390:	e0d0      	b.n	800c534 <_svfiprintf_r+0x1d0>
 800c392:	2340      	movs	r3, #64	; 0x40
 800c394:	616b      	str	r3, [r5, #20]
 800c396:	2300      	movs	r3, #0
 800c398:	9309      	str	r3, [sp, #36]	; 0x24
 800c39a:	2320      	movs	r3, #32
 800c39c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3a0:	2330      	movs	r3, #48	; 0x30
 800c3a2:	f04f 0901 	mov.w	r9, #1
 800c3a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c54c <_svfiprintf_r+0x1e8>
 800c3ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3b2:	4623      	mov	r3, r4
 800c3b4:	469a      	mov	sl, r3
 800c3b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3ba:	b10a      	cbz	r2, 800c3c0 <_svfiprintf_r+0x5c>
 800c3bc:	2a25      	cmp	r2, #37	; 0x25
 800c3be:	d1f9      	bne.n	800c3b4 <_svfiprintf_r+0x50>
 800c3c0:	ebba 0b04 	subs.w	fp, sl, r4
 800c3c4:	d00b      	beq.n	800c3de <_svfiprintf_r+0x7a>
 800c3c6:	465b      	mov	r3, fp
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	4638      	mov	r0, r7
 800c3ce:	f7ff ff6f 	bl	800c2b0 <__ssputs_r>
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	f000 80a9 	beq.w	800c52a <_svfiprintf_r+0x1c6>
 800c3d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3da:	445a      	add	r2, fp
 800c3dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c3de:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 80a1 	beq.w	800c52a <_svfiprintf_r+0x1c6>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3f2:	f10a 0a01 	add.w	sl, sl, #1
 800c3f6:	9304      	str	r3, [sp, #16]
 800c3f8:	9307      	str	r3, [sp, #28]
 800c3fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3fe:	931a      	str	r3, [sp, #104]	; 0x68
 800c400:	4654      	mov	r4, sl
 800c402:	2205      	movs	r2, #5
 800c404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c408:	4850      	ldr	r0, [pc, #320]	; (800c54c <_svfiprintf_r+0x1e8>)
 800c40a:	f000 fa86 	bl	800c91a <memchr>
 800c40e:	9a04      	ldr	r2, [sp, #16]
 800c410:	b9d8      	cbnz	r0, 800c44a <_svfiprintf_r+0xe6>
 800c412:	06d0      	lsls	r0, r2, #27
 800c414:	bf44      	itt	mi
 800c416:	2320      	movmi	r3, #32
 800c418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c41c:	0711      	lsls	r1, r2, #28
 800c41e:	bf44      	itt	mi
 800c420:	232b      	movmi	r3, #43	; 0x2b
 800c422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c426:	f89a 3000 	ldrb.w	r3, [sl]
 800c42a:	2b2a      	cmp	r3, #42	; 0x2a
 800c42c:	d015      	beq.n	800c45a <_svfiprintf_r+0xf6>
 800c42e:	4654      	mov	r4, sl
 800c430:	2000      	movs	r0, #0
 800c432:	f04f 0c0a 	mov.w	ip, #10
 800c436:	9a07      	ldr	r2, [sp, #28]
 800c438:	4621      	mov	r1, r4
 800c43a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c43e:	3b30      	subs	r3, #48	; 0x30
 800c440:	2b09      	cmp	r3, #9
 800c442:	d94d      	bls.n	800c4e0 <_svfiprintf_r+0x17c>
 800c444:	b1b0      	cbz	r0, 800c474 <_svfiprintf_r+0x110>
 800c446:	9207      	str	r2, [sp, #28]
 800c448:	e014      	b.n	800c474 <_svfiprintf_r+0x110>
 800c44a:	eba0 0308 	sub.w	r3, r0, r8
 800c44e:	fa09 f303 	lsl.w	r3, r9, r3
 800c452:	4313      	orrs	r3, r2
 800c454:	46a2      	mov	sl, r4
 800c456:	9304      	str	r3, [sp, #16]
 800c458:	e7d2      	b.n	800c400 <_svfiprintf_r+0x9c>
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	1d19      	adds	r1, r3, #4
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	9103      	str	r1, [sp, #12]
 800c462:	2b00      	cmp	r3, #0
 800c464:	bfbb      	ittet	lt
 800c466:	425b      	neglt	r3, r3
 800c468:	f042 0202 	orrlt.w	r2, r2, #2
 800c46c:	9307      	strge	r3, [sp, #28]
 800c46e:	9307      	strlt	r3, [sp, #28]
 800c470:	bfb8      	it	lt
 800c472:	9204      	strlt	r2, [sp, #16]
 800c474:	7823      	ldrb	r3, [r4, #0]
 800c476:	2b2e      	cmp	r3, #46	; 0x2e
 800c478:	d10c      	bne.n	800c494 <_svfiprintf_r+0x130>
 800c47a:	7863      	ldrb	r3, [r4, #1]
 800c47c:	2b2a      	cmp	r3, #42	; 0x2a
 800c47e:	d134      	bne.n	800c4ea <_svfiprintf_r+0x186>
 800c480:	9b03      	ldr	r3, [sp, #12]
 800c482:	3402      	adds	r4, #2
 800c484:	1d1a      	adds	r2, r3, #4
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	9203      	str	r2, [sp, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bfb8      	it	lt
 800c48e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c492:	9305      	str	r3, [sp, #20]
 800c494:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c550 <_svfiprintf_r+0x1ec>
 800c498:	2203      	movs	r2, #3
 800c49a:	4650      	mov	r0, sl
 800c49c:	7821      	ldrb	r1, [r4, #0]
 800c49e:	f000 fa3c 	bl	800c91a <memchr>
 800c4a2:	b138      	cbz	r0, 800c4b4 <_svfiprintf_r+0x150>
 800c4a4:	2240      	movs	r2, #64	; 0x40
 800c4a6:	9b04      	ldr	r3, [sp, #16]
 800c4a8:	eba0 000a 	sub.w	r0, r0, sl
 800c4ac:	4082      	lsls	r2, r0
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	3401      	adds	r4, #1
 800c4b2:	9304      	str	r3, [sp, #16]
 800c4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b8:	2206      	movs	r2, #6
 800c4ba:	4826      	ldr	r0, [pc, #152]	; (800c554 <_svfiprintf_r+0x1f0>)
 800c4bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4c0:	f000 fa2b 	bl	800c91a <memchr>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d038      	beq.n	800c53a <_svfiprintf_r+0x1d6>
 800c4c8:	4b23      	ldr	r3, [pc, #140]	; (800c558 <_svfiprintf_r+0x1f4>)
 800c4ca:	bb1b      	cbnz	r3, 800c514 <_svfiprintf_r+0x1b0>
 800c4cc:	9b03      	ldr	r3, [sp, #12]
 800c4ce:	3307      	adds	r3, #7
 800c4d0:	f023 0307 	bic.w	r3, r3, #7
 800c4d4:	3308      	adds	r3, #8
 800c4d6:	9303      	str	r3, [sp, #12]
 800c4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4da:	4433      	add	r3, r6
 800c4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c4de:	e768      	b.n	800c3b2 <_svfiprintf_r+0x4e>
 800c4e0:	460c      	mov	r4, r1
 800c4e2:	2001      	movs	r0, #1
 800c4e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4e8:	e7a6      	b.n	800c438 <_svfiprintf_r+0xd4>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f04f 0c0a 	mov.w	ip, #10
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	3401      	adds	r4, #1
 800c4f4:	9305      	str	r3, [sp, #20]
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4fc:	3a30      	subs	r2, #48	; 0x30
 800c4fe:	2a09      	cmp	r2, #9
 800c500:	d903      	bls.n	800c50a <_svfiprintf_r+0x1a6>
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0c6      	beq.n	800c494 <_svfiprintf_r+0x130>
 800c506:	9105      	str	r1, [sp, #20]
 800c508:	e7c4      	b.n	800c494 <_svfiprintf_r+0x130>
 800c50a:	4604      	mov	r4, r0
 800c50c:	2301      	movs	r3, #1
 800c50e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c512:	e7f0      	b.n	800c4f6 <_svfiprintf_r+0x192>
 800c514:	ab03      	add	r3, sp, #12
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	462a      	mov	r2, r5
 800c51a:	4638      	mov	r0, r7
 800c51c:	4b0f      	ldr	r3, [pc, #60]	; (800c55c <_svfiprintf_r+0x1f8>)
 800c51e:	a904      	add	r1, sp, #16
 800c520:	f3af 8000 	nop.w
 800c524:	1c42      	adds	r2, r0, #1
 800c526:	4606      	mov	r6, r0
 800c528:	d1d6      	bne.n	800c4d8 <_svfiprintf_r+0x174>
 800c52a:	89ab      	ldrh	r3, [r5, #12]
 800c52c:	065b      	lsls	r3, r3, #25
 800c52e:	f53f af2d 	bmi.w	800c38c <_svfiprintf_r+0x28>
 800c532:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c534:	b01d      	add	sp, #116	; 0x74
 800c536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53a:	ab03      	add	r3, sp, #12
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	462a      	mov	r2, r5
 800c540:	4638      	mov	r0, r7
 800c542:	4b06      	ldr	r3, [pc, #24]	; (800c55c <_svfiprintf_r+0x1f8>)
 800c544:	a904      	add	r1, sp, #16
 800c546:	f000 f87d 	bl	800c644 <_printf_i>
 800c54a:	e7eb      	b.n	800c524 <_svfiprintf_r+0x1c0>
 800c54c:	0800d8b7 	.word	0x0800d8b7
 800c550:	0800d8bd 	.word	0x0800d8bd
 800c554:	0800d8c1 	.word	0x0800d8c1
 800c558:	00000000 	.word	0x00000000
 800c55c:	0800c2b1 	.word	0x0800c2b1

0800c560 <_printf_common>:
 800c560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c564:	4616      	mov	r6, r2
 800c566:	4699      	mov	r9, r3
 800c568:	688a      	ldr	r2, [r1, #8]
 800c56a:	690b      	ldr	r3, [r1, #16]
 800c56c:	4607      	mov	r7, r0
 800c56e:	4293      	cmp	r3, r2
 800c570:	bfb8      	it	lt
 800c572:	4613      	movlt	r3, r2
 800c574:	6033      	str	r3, [r6, #0]
 800c576:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c57a:	460c      	mov	r4, r1
 800c57c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c580:	b10a      	cbz	r2, 800c586 <_printf_common+0x26>
 800c582:	3301      	adds	r3, #1
 800c584:	6033      	str	r3, [r6, #0]
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	0699      	lsls	r1, r3, #26
 800c58a:	bf42      	ittt	mi
 800c58c:	6833      	ldrmi	r3, [r6, #0]
 800c58e:	3302      	addmi	r3, #2
 800c590:	6033      	strmi	r3, [r6, #0]
 800c592:	6825      	ldr	r5, [r4, #0]
 800c594:	f015 0506 	ands.w	r5, r5, #6
 800c598:	d106      	bne.n	800c5a8 <_printf_common+0x48>
 800c59a:	f104 0a19 	add.w	sl, r4, #25
 800c59e:	68e3      	ldr	r3, [r4, #12]
 800c5a0:	6832      	ldr	r2, [r6, #0]
 800c5a2:	1a9b      	subs	r3, r3, r2
 800c5a4:	42ab      	cmp	r3, r5
 800c5a6:	dc2b      	bgt.n	800c600 <_printf_common+0xa0>
 800c5a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5ac:	1e13      	subs	r3, r2, #0
 800c5ae:	6822      	ldr	r2, [r4, #0]
 800c5b0:	bf18      	it	ne
 800c5b2:	2301      	movne	r3, #1
 800c5b4:	0692      	lsls	r2, r2, #26
 800c5b6:	d430      	bmi.n	800c61a <_printf_common+0xba>
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5c0:	47c0      	blx	r8
 800c5c2:	3001      	adds	r0, #1
 800c5c4:	d023      	beq.n	800c60e <_printf_common+0xae>
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	6922      	ldr	r2, [r4, #16]
 800c5ca:	f003 0306 	and.w	r3, r3, #6
 800c5ce:	2b04      	cmp	r3, #4
 800c5d0:	bf14      	ite	ne
 800c5d2:	2500      	movne	r5, #0
 800c5d4:	6833      	ldreq	r3, [r6, #0]
 800c5d6:	f04f 0600 	mov.w	r6, #0
 800c5da:	bf08      	it	eq
 800c5dc:	68e5      	ldreq	r5, [r4, #12]
 800c5de:	f104 041a 	add.w	r4, r4, #26
 800c5e2:	bf08      	it	eq
 800c5e4:	1aed      	subeq	r5, r5, r3
 800c5e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c5ea:	bf08      	it	eq
 800c5ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	bfc4      	itt	gt
 800c5f4:	1a9b      	subgt	r3, r3, r2
 800c5f6:	18ed      	addgt	r5, r5, r3
 800c5f8:	42b5      	cmp	r5, r6
 800c5fa:	d11a      	bne.n	800c632 <_printf_common+0xd2>
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	e008      	b.n	800c612 <_printf_common+0xb2>
 800c600:	2301      	movs	r3, #1
 800c602:	4652      	mov	r2, sl
 800c604:	4649      	mov	r1, r9
 800c606:	4638      	mov	r0, r7
 800c608:	47c0      	blx	r8
 800c60a:	3001      	adds	r0, #1
 800c60c:	d103      	bne.n	800c616 <_printf_common+0xb6>
 800c60e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c616:	3501      	adds	r5, #1
 800c618:	e7c1      	b.n	800c59e <_printf_common+0x3e>
 800c61a:	2030      	movs	r0, #48	; 0x30
 800c61c:	18e1      	adds	r1, r4, r3
 800c61e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c628:	4422      	add	r2, r4
 800c62a:	3302      	adds	r3, #2
 800c62c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c630:	e7c2      	b.n	800c5b8 <_printf_common+0x58>
 800c632:	2301      	movs	r3, #1
 800c634:	4622      	mov	r2, r4
 800c636:	4649      	mov	r1, r9
 800c638:	4638      	mov	r0, r7
 800c63a:	47c0      	blx	r8
 800c63c:	3001      	adds	r0, #1
 800c63e:	d0e6      	beq.n	800c60e <_printf_common+0xae>
 800c640:	3601      	adds	r6, #1
 800c642:	e7d9      	b.n	800c5f8 <_printf_common+0x98>

0800c644 <_printf_i>:
 800c644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c648:	7e0f      	ldrb	r7, [r1, #24]
 800c64a:	4691      	mov	r9, r2
 800c64c:	2f78      	cmp	r7, #120	; 0x78
 800c64e:	4680      	mov	r8, r0
 800c650:	460c      	mov	r4, r1
 800c652:	469a      	mov	sl, r3
 800c654:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c65a:	d807      	bhi.n	800c66c <_printf_i+0x28>
 800c65c:	2f62      	cmp	r7, #98	; 0x62
 800c65e:	d80a      	bhi.n	800c676 <_printf_i+0x32>
 800c660:	2f00      	cmp	r7, #0
 800c662:	f000 80d5 	beq.w	800c810 <_printf_i+0x1cc>
 800c666:	2f58      	cmp	r7, #88	; 0x58
 800c668:	f000 80c1 	beq.w	800c7ee <_printf_i+0x1aa>
 800c66c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c674:	e03a      	b.n	800c6ec <_printf_i+0xa8>
 800c676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c67a:	2b15      	cmp	r3, #21
 800c67c:	d8f6      	bhi.n	800c66c <_printf_i+0x28>
 800c67e:	a101      	add	r1, pc, #4	; (adr r1, 800c684 <_printf_i+0x40>)
 800c680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c684:	0800c6dd 	.word	0x0800c6dd
 800c688:	0800c6f1 	.word	0x0800c6f1
 800c68c:	0800c66d 	.word	0x0800c66d
 800c690:	0800c66d 	.word	0x0800c66d
 800c694:	0800c66d 	.word	0x0800c66d
 800c698:	0800c66d 	.word	0x0800c66d
 800c69c:	0800c6f1 	.word	0x0800c6f1
 800c6a0:	0800c66d 	.word	0x0800c66d
 800c6a4:	0800c66d 	.word	0x0800c66d
 800c6a8:	0800c66d 	.word	0x0800c66d
 800c6ac:	0800c66d 	.word	0x0800c66d
 800c6b0:	0800c7f7 	.word	0x0800c7f7
 800c6b4:	0800c71d 	.word	0x0800c71d
 800c6b8:	0800c7b1 	.word	0x0800c7b1
 800c6bc:	0800c66d 	.word	0x0800c66d
 800c6c0:	0800c66d 	.word	0x0800c66d
 800c6c4:	0800c819 	.word	0x0800c819
 800c6c8:	0800c66d 	.word	0x0800c66d
 800c6cc:	0800c71d 	.word	0x0800c71d
 800c6d0:	0800c66d 	.word	0x0800c66d
 800c6d4:	0800c66d 	.word	0x0800c66d
 800c6d8:	0800c7b9 	.word	0x0800c7b9
 800c6dc:	682b      	ldr	r3, [r5, #0]
 800c6de:	1d1a      	adds	r2, r3, #4
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	602a      	str	r2, [r5, #0]
 800c6e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e0a0      	b.n	800c832 <_printf_i+0x1ee>
 800c6f0:	6820      	ldr	r0, [r4, #0]
 800c6f2:	682b      	ldr	r3, [r5, #0]
 800c6f4:	0607      	lsls	r7, r0, #24
 800c6f6:	f103 0104 	add.w	r1, r3, #4
 800c6fa:	6029      	str	r1, [r5, #0]
 800c6fc:	d501      	bpl.n	800c702 <_printf_i+0xbe>
 800c6fe:	681e      	ldr	r6, [r3, #0]
 800c700:	e003      	b.n	800c70a <_printf_i+0xc6>
 800c702:	0646      	lsls	r6, r0, #25
 800c704:	d5fb      	bpl.n	800c6fe <_printf_i+0xba>
 800c706:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c70a:	2e00      	cmp	r6, #0
 800c70c:	da03      	bge.n	800c716 <_printf_i+0xd2>
 800c70e:	232d      	movs	r3, #45	; 0x2d
 800c710:	4276      	negs	r6, r6
 800c712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c716:	230a      	movs	r3, #10
 800c718:	4859      	ldr	r0, [pc, #356]	; (800c880 <_printf_i+0x23c>)
 800c71a:	e012      	b.n	800c742 <_printf_i+0xfe>
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	6820      	ldr	r0, [r4, #0]
 800c720:	1d19      	adds	r1, r3, #4
 800c722:	6029      	str	r1, [r5, #0]
 800c724:	0605      	lsls	r5, r0, #24
 800c726:	d501      	bpl.n	800c72c <_printf_i+0xe8>
 800c728:	681e      	ldr	r6, [r3, #0]
 800c72a:	e002      	b.n	800c732 <_printf_i+0xee>
 800c72c:	0641      	lsls	r1, r0, #25
 800c72e:	d5fb      	bpl.n	800c728 <_printf_i+0xe4>
 800c730:	881e      	ldrh	r6, [r3, #0]
 800c732:	2f6f      	cmp	r7, #111	; 0x6f
 800c734:	bf0c      	ite	eq
 800c736:	2308      	moveq	r3, #8
 800c738:	230a      	movne	r3, #10
 800c73a:	4851      	ldr	r0, [pc, #324]	; (800c880 <_printf_i+0x23c>)
 800c73c:	2100      	movs	r1, #0
 800c73e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c742:	6865      	ldr	r5, [r4, #4]
 800c744:	2d00      	cmp	r5, #0
 800c746:	bfa8      	it	ge
 800c748:	6821      	ldrge	r1, [r4, #0]
 800c74a:	60a5      	str	r5, [r4, #8]
 800c74c:	bfa4      	itt	ge
 800c74e:	f021 0104 	bicge.w	r1, r1, #4
 800c752:	6021      	strge	r1, [r4, #0]
 800c754:	b90e      	cbnz	r6, 800c75a <_printf_i+0x116>
 800c756:	2d00      	cmp	r5, #0
 800c758:	d04b      	beq.n	800c7f2 <_printf_i+0x1ae>
 800c75a:	4615      	mov	r5, r2
 800c75c:	fbb6 f1f3 	udiv	r1, r6, r3
 800c760:	fb03 6711 	mls	r7, r3, r1, r6
 800c764:	5dc7      	ldrb	r7, [r0, r7]
 800c766:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c76a:	4637      	mov	r7, r6
 800c76c:	42bb      	cmp	r3, r7
 800c76e:	460e      	mov	r6, r1
 800c770:	d9f4      	bls.n	800c75c <_printf_i+0x118>
 800c772:	2b08      	cmp	r3, #8
 800c774:	d10b      	bne.n	800c78e <_printf_i+0x14a>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	07de      	lsls	r6, r3, #31
 800c77a:	d508      	bpl.n	800c78e <_printf_i+0x14a>
 800c77c:	6923      	ldr	r3, [r4, #16]
 800c77e:	6861      	ldr	r1, [r4, #4]
 800c780:	4299      	cmp	r1, r3
 800c782:	bfde      	ittt	le
 800c784:	2330      	movle	r3, #48	; 0x30
 800c786:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c78a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c78e:	1b52      	subs	r2, r2, r5
 800c790:	6122      	str	r2, [r4, #16]
 800c792:	464b      	mov	r3, r9
 800c794:	4621      	mov	r1, r4
 800c796:	4640      	mov	r0, r8
 800c798:	f8cd a000 	str.w	sl, [sp]
 800c79c:	aa03      	add	r2, sp, #12
 800c79e:	f7ff fedf 	bl	800c560 <_printf_common>
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	d14a      	bne.n	800c83c <_printf_i+0x1f8>
 800c7a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7aa:	b004      	add	sp, #16
 800c7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b0:	6823      	ldr	r3, [r4, #0]
 800c7b2:	f043 0320 	orr.w	r3, r3, #32
 800c7b6:	6023      	str	r3, [r4, #0]
 800c7b8:	2778      	movs	r7, #120	; 0x78
 800c7ba:	4832      	ldr	r0, [pc, #200]	; (800c884 <_printf_i+0x240>)
 800c7bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c7c0:	6823      	ldr	r3, [r4, #0]
 800c7c2:	6829      	ldr	r1, [r5, #0]
 800c7c4:	061f      	lsls	r7, r3, #24
 800c7c6:	f851 6b04 	ldr.w	r6, [r1], #4
 800c7ca:	d402      	bmi.n	800c7d2 <_printf_i+0x18e>
 800c7cc:	065f      	lsls	r7, r3, #25
 800c7ce:	bf48      	it	mi
 800c7d0:	b2b6      	uxthmi	r6, r6
 800c7d2:	07df      	lsls	r7, r3, #31
 800c7d4:	bf48      	it	mi
 800c7d6:	f043 0320 	orrmi.w	r3, r3, #32
 800c7da:	6029      	str	r1, [r5, #0]
 800c7dc:	bf48      	it	mi
 800c7de:	6023      	strmi	r3, [r4, #0]
 800c7e0:	b91e      	cbnz	r6, 800c7ea <_printf_i+0x1a6>
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	f023 0320 	bic.w	r3, r3, #32
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	2310      	movs	r3, #16
 800c7ec:	e7a6      	b.n	800c73c <_printf_i+0xf8>
 800c7ee:	4824      	ldr	r0, [pc, #144]	; (800c880 <_printf_i+0x23c>)
 800c7f0:	e7e4      	b.n	800c7bc <_printf_i+0x178>
 800c7f2:	4615      	mov	r5, r2
 800c7f4:	e7bd      	b.n	800c772 <_printf_i+0x12e>
 800c7f6:	682b      	ldr	r3, [r5, #0]
 800c7f8:	6826      	ldr	r6, [r4, #0]
 800c7fa:	1d18      	adds	r0, r3, #4
 800c7fc:	6961      	ldr	r1, [r4, #20]
 800c7fe:	6028      	str	r0, [r5, #0]
 800c800:	0635      	lsls	r5, r6, #24
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	d501      	bpl.n	800c80a <_printf_i+0x1c6>
 800c806:	6019      	str	r1, [r3, #0]
 800c808:	e002      	b.n	800c810 <_printf_i+0x1cc>
 800c80a:	0670      	lsls	r0, r6, #25
 800c80c:	d5fb      	bpl.n	800c806 <_printf_i+0x1c2>
 800c80e:	8019      	strh	r1, [r3, #0]
 800c810:	2300      	movs	r3, #0
 800c812:	4615      	mov	r5, r2
 800c814:	6123      	str	r3, [r4, #16]
 800c816:	e7bc      	b.n	800c792 <_printf_i+0x14e>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	2100      	movs	r1, #0
 800c81c:	1d1a      	adds	r2, r3, #4
 800c81e:	602a      	str	r2, [r5, #0]
 800c820:	681d      	ldr	r5, [r3, #0]
 800c822:	6862      	ldr	r2, [r4, #4]
 800c824:	4628      	mov	r0, r5
 800c826:	f000 f878 	bl	800c91a <memchr>
 800c82a:	b108      	cbz	r0, 800c830 <_printf_i+0x1ec>
 800c82c:	1b40      	subs	r0, r0, r5
 800c82e:	6060      	str	r0, [r4, #4]
 800c830:	6863      	ldr	r3, [r4, #4]
 800c832:	6123      	str	r3, [r4, #16]
 800c834:	2300      	movs	r3, #0
 800c836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c83a:	e7aa      	b.n	800c792 <_printf_i+0x14e>
 800c83c:	462a      	mov	r2, r5
 800c83e:	4649      	mov	r1, r9
 800c840:	4640      	mov	r0, r8
 800c842:	6923      	ldr	r3, [r4, #16]
 800c844:	47d0      	blx	sl
 800c846:	3001      	adds	r0, #1
 800c848:	d0ad      	beq.n	800c7a6 <_printf_i+0x162>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	079b      	lsls	r3, r3, #30
 800c84e:	d413      	bmi.n	800c878 <_printf_i+0x234>
 800c850:	68e0      	ldr	r0, [r4, #12]
 800c852:	9b03      	ldr	r3, [sp, #12]
 800c854:	4298      	cmp	r0, r3
 800c856:	bfb8      	it	lt
 800c858:	4618      	movlt	r0, r3
 800c85a:	e7a6      	b.n	800c7aa <_printf_i+0x166>
 800c85c:	2301      	movs	r3, #1
 800c85e:	4632      	mov	r2, r6
 800c860:	4649      	mov	r1, r9
 800c862:	4640      	mov	r0, r8
 800c864:	47d0      	blx	sl
 800c866:	3001      	adds	r0, #1
 800c868:	d09d      	beq.n	800c7a6 <_printf_i+0x162>
 800c86a:	3501      	adds	r5, #1
 800c86c:	68e3      	ldr	r3, [r4, #12]
 800c86e:	9903      	ldr	r1, [sp, #12]
 800c870:	1a5b      	subs	r3, r3, r1
 800c872:	42ab      	cmp	r3, r5
 800c874:	dcf2      	bgt.n	800c85c <_printf_i+0x218>
 800c876:	e7eb      	b.n	800c850 <_printf_i+0x20c>
 800c878:	2500      	movs	r5, #0
 800c87a:	f104 0619 	add.w	r6, r4, #25
 800c87e:	e7f5      	b.n	800c86c <_printf_i+0x228>
 800c880:	0800d8c8 	.word	0x0800d8c8
 800c884:	0800d8d9 	.word	0x0800d8d9

0800c888 <_realloc_r>:
 800c888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c88c:	4680      	mov	r8, r0
 800c88e:	4614      	mov	r4, r2
 800c890:	460e      	mov	r6, r1
 800c892:	b921      	cbnz	r1, 800c89e <_realloc_r+0x16>
 800c894:	4611      	mov	r1, r2
 800c896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c89a:	f7ff bb7f 	b.w	800bf9c <_malloc_r>
 800c89e:	b92a      	cbnz	r2, 800c8ac <_realloc_r+0x24>
 800c8a0:	f7ff fcbe 	bl	800c220 <_free_r>
 800c8a4:	4625      	mov	r5, r4
 800c8a6:	4628      	mov	r0, r5
 800c8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ac:	f000 f851 	bl	800c952 <_malloc_usable_size_r>
 800c8b0:	4284      	cmp	r4, r0
 800c8b2:	4607      	mov	r7, r0
 800c8b4:	d802      	bhi.n	800c8bc <_realloc_r+0x34>
 800c8b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8ba:	d812      	bhi.n	800c8e2 <_realloc_r+0x5a>
 800c8bc:	4621      	mov	r1, r4
 800c8be:	4640      	mov	r0, r8
 800c8c0:	f7ff fb6c 	bl	800bf9c <_malloc_r>
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d0ed      	beq.n	800c8a6 <_realloc_r+0x1e>
 800c8ca:	42bc      	cmp	r4, r7
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	4631      	mov	r1, r6
 800c8d0:	bf28      	it	cs
 800c8d2:	463a      	movcs	r2, r7
 800c8d4:	f000 f82f 	bl	800c936 <memcpy>
 800c8d8:	4631      	mov	r1, r6
 800c8da:	4640      	mov	r0, r8
 800c8dc:	f7ff fca0 	bl	800c220 <_free_r>
 800c8e0:	e7e1      	b.n	800c8a6 <_realloc_r+0x1e>
 800c8e2:	4635      	mov	r5, r6
 800c8e4:	e7df      	b.n	800c8a6 <_realloc_r+0x1e>

0800c8e6 <memmove>:
 800c8e6:	4288      	cmp	r0, r1
 800c8e8:	b510      	push	{r4, lr}
 800c8ea:	eb01 0402 	add.w	r4, r1, r2
 800c8ee:	d902      	bls.n	800c8f6 <memmove+0x10>
 800c8f0:	4284      	cmp	r4, r0
 800c8f2:	4623      	mov	r3, r4
 800c8f4:	d807      	bhi.n	800c906 <memmove+0x20>
 800c8f6:	1e43      	subs	r3, r0, #1
 800c8f8:	42a1      	cmp	r1, r4
 800c8fa:	d008      	beq.n	800c90e <memmove+0x28>
 800c8fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c900:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c904:	e7f8      	b.n	800c8f8 <memmove+0x12>
 800c906:	4601      	mov	r1, r0
 800c908:	4402      	add	r2, r0
 800c90a:	428a      	cmp	r2, r1
 800c90c:	d100      	bne.n	800c910 <memmove+0x2a>
 800c90e:	bd10      	pop	{r4, pc}
 800c910:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c914:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c918:	e7f7      	b.n	800c90a <memmove+0x24>

0800c91a <memchr>:
 800c91a:	4603      	mov	r3, r0
 800c91c:	b510      	push	{r4, lr}
 800c91e:	b2c9      	uxtb	r1, r1
 800c920:	4402      	add	r2, r0
 800c922:	4293      	cmp	r3, r2
 800c924:	4618      	mov	r0, r3
 800c926:	d101      	bne.n	800c92c <memchr+0x12>
 800c928:	2000      	movs	r0, #0
 800c92a:	e003      	b.n	800c934 <memchr+0x1a>
 800c92c:	7804      	ldrb	r4, [r0, #0]
 800c92e:	3301      	adds	r3, #1
 800c930:	428c      	cmp	r4, r1
 800c932:	d1f6      	bne.n	800c922 <memchr+0x8>
 800c934:	bd10      	pop	{r4, pc}

0800c936 <memcpy>:
 800c936:	440a      	add	r2, r1
 800c938:	4291      	cmp	r1, r2
 800c93a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c93e:	d100      	bne.n	800c942 <memcpy+0xc>
 800c940:	4770      	bx	lr
 800c942:	b510      	push	{r4, lr}
 800c944:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c948:	4291      	cmp	r1, r2
 800c94a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c94e:	d1f9      	bne.n	800c944 <memcpy+0xe>
 800c950:	bd10      	pop	{r4, pc}

0800c952 <_malloc_usable_size_r>:
 800c952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c956:	1f18      	subs	r0, r3, #4
 800c958:	2b00      	cmp	r3, #0
 800c95a:	bfbc      	itt	lt
 800c95c:	580b      	ldrlt	r3, [r1, r0]
 800c95e:	18c0      	addlt	r0, r0, r3
 800c960:	4770      	bx	lr
	...

0800c964 <_init>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	bf00      	nop
 800c968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96a:	bc08      	pop	{r3}
 800c96c:	469e      	mov	lr, r3
 800c96e:	4770      	bx	lr

0800c970 <_fini>:
 800c970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c972:	bf00      	nop
 800c974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c976:	bc08      	pop	{r3}
 800c978:	469e      	mov	lr, r3
 800c97a:	4770      	bx	lr
