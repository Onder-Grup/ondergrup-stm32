
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccc0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000103c  0800cea4  0800cea4  0001cea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dee0  0800dee0  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800dee0  0800dee0  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dee0  0800dee0  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dee0  0800dee0  0001dee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dee4  0800dee4  0001dee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800dee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000010c  0800dff4  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800dff4  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020135  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001682a  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003528  00000000  00000000  000369a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00039ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  0003b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c67d  00000000  00000000  0003bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0f7  00000000  00000000  00058631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee51  00000000  00000000  00074728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005218  00000000  00000000  0011357c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000010c 	.word	0x2000010c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ce8c 	.word	0x0800ce8c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000110 	.word	0x20000110
 8000220:	0800ce8c 	.word	0x0800ce8c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fc8e 	bl	8009b70 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 fb06 	bl	8008868 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000128 	.word	0x20000128
 80004bc:	200003ac 	.word	0x200003ac
 80004c0:	200001fd 	.word	0x200001fd
 80004c4:	20000225 	.word	0x20000225
 80004c8:	20000228 	.word	0x20000228
 80004cc:	20000229 	.word	0x20000229
 80004d0:	2000022a 	.word	0x2000022a
 80004d4:	2000022b 	.word	0x2000022b
 80004d8:	2000022c 	.word	0x2000022c
 80004dc:	2000022d 	.word	0x2000022d
 80004e0:	2000023d 	.word	0x2000023d
 80004e4:	2000022e 	.word	0x2000022e
 80004e8:	2000023e 	.word	0x2000023e
 80004ec:	2000022f 	.word	0x2000022f
 80004f0:	2000023f 	.word	0x2000023f
 80004f4:	20000232 	.word	0x20000232
 80004f8:	20000233 	.word	0x20000233
 80004fc:	20000234 	.word	0x20000234
 8000500:	20000235 	.word	0x20000235
 8000504:	20000236 	.word	0x20000236
 8000508:	20000237 	.word	0x20000237
 800050c:	20000238 	.word	0x20000238
 8000510:	20000239 	.word	0x20000239
 8000514:	2000023a 	.word	0x2000023a
 8000518:	2000023b 	.word	0x2000023b
 800051c:	2000023c 	.word	0x2000023c
 8000520:	20000240 	.word	0x20000240
 8000524:	20000242 	.word	0x20000242
 8000528:	20000220 	.word	0x20000220
 800052c:	20000221 	.word	0x20000221
 8000530:	20000222 	.word	0x20000222
 8000534:	20000008 	.word	0x20000008
 8000538:	20000009 	.word	0x20000009
 800053c:	20000223 	.word	0x20000223
 8000540:	20000245 	.word	0x20000245
 8000544:	20000243 	.word	0x20000243
 8000548:	20000231 	.word	0x20000231
 800054c:	20000244 	.word	0x20000244
 8000550:	20000230 	.word	0x20000230
 8000554:	20000246 	.word	0x20000246
 8000558:	20000247 	.word	0x20000247
 800055c:	20000248 	.word	0x20000248
 8000560:	20000249 	.word	0x20000249
 8000564:	2000024a 	.word	0x2000024a
 8000568:	2000024b 	.word	0x2000024b
 800056c:	2000024c 	.word	0x2000024c
 8000570:	2000024d 	.word	0x2000024d
 8000574:	2000024e 	.word	0x2000024e
 8000578:	2000024f 	.word	0x2000024f
 800057c:	200001fc 	.word	0x200001fc
	}

	if(kapi1AcSure>5) {
 8000580:	4b6f      	ldr	r3, [pc, #444]	; (8000740 <eepromKontrol+0x50c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b6d      	ldr	r3, [pc, #436]	; (8000740 <eepromKontrol+0x50c>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b6d      	ldr	r3, [pc, #436]	; (8000744 <eepromKontrol+0x510>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b6b      	ldr	r3, [pc, #428]	; (8000744 <eepromKontrol+0x510>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b6a      	ldr	r3, [pc, #424]	; (8000748 <eepromKontrol+0x514>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b68      	ldr	r3, [pc, #416]	; (8000748 <eepromKontrol+0x514>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b68      	ldr	r3, [pc, #416]	; (800074c <eepromKontrol+0x518>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b66      	ldr	r3, [pc, #408]	; (800074c <eepromKontrol+0x518>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b65      	ldr	r3, [pc, #404]	; (8000750 <eepromKontrol+0x51c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b63      	ldr	r3, [pc, #396]	; (8000750 <eepromKontrol+0x51c>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b63      	ldr	r3, [pc, #396]	; (8000754 <eepromKontrol+0x520>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b61      	ldr	r3, [pc, #388]	; (8000754 <eepromKontrol+0x520>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b60      	ldr	r3, [pc, #384]	; (8000758 <eepromKontrol+0x524>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b5e      	ldr	r3, [pc, #376]	; (8000758 <eepromKontrol+0x524>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b5e      	ldr	r3, [pc, #376]	; (800075c <eepromKontrol+0x528>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b5c      	ldr	r3, [pc, #368]	; (800075c <eepromKontrol+0x528>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b5b      	ldr	r3, [pc, #364]	; (8000760 <eepromKontrol+0x52c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b59      	ldr	r3, [pc, #356]	; (8000760 <eepromKontrol+0x52c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b59      	ldr	r3, [pc, #356]	; (8000764 <eepromKontrol+0x530>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b57      	ldr	r3, [pc, #348]	; (8000764 <eepromKontrol+0x530>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b56      	ldr	r3, [pc, #344]	; (8000768 <eepromKontrol+0x534>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b54      	ldr	r3, [pc, #336]	; (8000768 <eepromKontrol+0x534>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b54      	ldr	r3, [pc, #336]	; (800076c <eepromKontrol+0x538>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b52      	ldr	r3, [pc, #328]	; (800076c <eepromKontrol+0x538>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b51      	ldr	r3, [pc, #324]	; (8000770 <eepromKontrol+0x53c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <eepromKontrol+0x53c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b4f      	ldr	r3, [pc, #316]	; (8000774 <eepromKontrol+0x540>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b4d      	ldr	r3, [pc, #308]	; (8000774 <eepromKontrol+0x540>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b4c      	ldr	r3, [pc, #304]	; (8000778 <eepromKontrol+0x544>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b4a      	ldr	r3, [pc, #296]	; (8000778 <eepromKontrol+0x544>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b4a      	ldr	r3, [pc, #296]	; (800077c <eepromKontrol+0x548>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b48      	ldr	r3, [pc, #288]	; (800077c <eepromKontrol+0x548>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b47      	ldr	r3, [pc, #284]	; (8000780 <eepromKontrol+0x54c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b45      	ldr	r3, [pc, #276]	; (8000780 <eepromKontrol+0x54c>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b45      	ldr	r3, [pc, #276]	; (8000784 <eepromKontrol+0x550>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b43      	ldr	r3, [pc, #268]	; (8000784 <eepromKontrol+0x550>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b42      	ldr	r3, [pc, #264]	; (8000788 <eepromKontrol+0x554>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b40      	ldr	r3, [pc, #256]	; (8000788 <eepromKontrol+0x554>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b40      	ldr	r3, [pc, #256]	; (800078c <eepromKontrol+0x558>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b3e      	ldr	r3, [pc, #248]	; (800078c <eepromKontrol+0x558>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <eepromKontrol+0x55c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <eepromKontrol+0x55c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <eepromKontrol+0x560>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b39      	ldr	r3, [pc, #228]	; (8000794 <eepromKontrol+0x560>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
 80006b4:	4b38      	ldr	r3, [pc, #224]	; (8000798 <eepromKontrol+0x564>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a38      	ldr	r2, [pc, #224]	; (800079c <eepromKontrol+0x568>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <eepromKontrol+0x56c>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	HAL_Delay(500);
 80006ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006ce:	f008 f8cb 	bl	8008868 <HAL_Delay>
	memcpy(wifiSSIDLoc, &eepromData[ssidStartPos], wifiCharacterLimit);
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <eepromKontrol+0x570>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a31      	ldr	r2, [pc, #196]	; (800079c <eepromKontrol+0x568>)
 80006d8:	441a      	add	r2, r3
 80006da:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <eepromKontrol+0x574>)
 80006dc:	6811      	ldr	r1, [r2, #0]
 80006de:	6855      	ldr	r5, [r2, #4]
 80006e0:	6894      	ldr	r4, [r2, #8]
 80006e2:	68d0      	ldr	r0, [r2, #12]
 80006e4:	6019      	str	r1, [r3, #0]
 80006e6:	605d      	str	r5, [r3, #4]
 80006e8:	609c      	str	r4, [r3, #8]
 80006ea:	60d8      	str	r0, [r3, #12]
 80006ec:	6911      	ldr	r1, [r2, #16]
 80006ee:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f4:	f008 f8b8 	bl	8008868 <HAL_Delay>
	memcpy(wifiPassLocArr, &eepromData[passStartPos], wifiCharacterLimit);
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <eepromKontrol+0x578>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a27      	ldr	r2, [pc, #156]	; (800079c <eepromKontrol+0x568>)
 80006fe:	441a      	add	r2, r3
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <eepromKontrol+0x57c>)
 8000702:	6811      	ldr	r1, [r2, #0]
 8000704:	6855      	ldr	r5, [r2, #4]
 8000706:	6894      	ldr	r4, [r2, #8]
 8000708:	68d0      	ldr	r0, [r2, #12]
 800070a:	6019      	str	r1, [r3, #0]
 800070c:	605d      	str	r5, [r3, #4]
 800070e:	609c      	str	r4, [r3, #8]
 8000710:	60d8      	str	r0, [r3, #12]
 8000712:	6911      	ldr	r1, [r2, #16]
 8000714:	6119      	str	r1, [r3, #16]
	HAL_Delay(500);
 8000716:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071a:	f008 f8a5 	bl	8008868 <HAL_Delay>
	readFromEEPROM(1);
 800071e:	2001      	movs	r0, #1
 8000720:	f000 f858 	bl	80007d4 <readFromEEPROM>
	HAL_Delay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f008 f89e 	bl	8008868 <HAL_Delay>
	readFromEEPROM(2);
 800072c:	2002      	movs	r0, #2
 800072e:	f000 f851 	bl	80007d4 <readFromEEPROM>
	HAL_Delay(1000);
 8000732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000736:	f008 f897 	bl	8008868 <HAL_Delay>
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bdb0      	pop	{r4, r5, r7, pc}
 8000740:	2000023d 	.word	0x2000023d
 8000744:	2000022e 	.word	0x2000022e
 8000748:	2000023e 	.word	0x2000023e
 800074c:	2000022f 	.word	0x2000022f
 8000750:	20000231 	.word	0x20000231
 8000754:	2000023f 	.word	0x2000023f
 8000758:	20000232 	.word	0x20000232
 800075c:	20000233 	.word	0x20000233
 8000760:	20000234 	.word	0x20000234
 8000764:	20000235 	.word	0x20000235
 8000768:	20000236 	.word	0x20000236
 800076c:	20000237 	.word	0x20000237
 8000770:	20000238 	.word	0x20000238
 8000774:	20000239 	.word	0x20000239
 8000778:	2000023a 	.word	0x2000023a
 800077c:	2000023b 	.word	0x2000023b
 8000780:	2000023c 	.word	0x2000023c
 8000784:	20000240 	.word	0x20000240
 8000788:	20000242 	.word	0x20000242
 800078c:	20000244 	.word	0x20000244
 8000790:	20000245 	.word	0x20000245
 8000794:	20000243 	.word	0x20000243
 8000798:	2000000c 	.word	0x2000000c
 800079c:	20000128 	.word	0x20000128
 80007a0:	200001a0 	.word	0x200001a0
 80007a4:	20000010 	.word	0x20000010
 80007a8:	200001d4 	.word	0x200001d4
 80007ac:	20000014 	.word	0x20000014
 80007b0:	200001e8 	.word	0x200001e8

080007b4 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <getCharFromCursorPosition+0x1c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	2000002c 	.word	0x2000002c

080007d4 <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d11c      	bne.n	800081c <readFromEEPROM+0x48>
		//Wifi SSID okuma
		uint8_t tempSSIDStartPos = ssidStartPos;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <readFromEEPROM+0x88>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	e012      	b.n	8000814 <readFromEEPROM+0x40>
			wifiSSID[i] = getCharFromCursorPosition(wifiSSIDLoc[tempSSIDStartPos]);
 80007ee:	7dfb      	ldrb	r3, [r7, #23]
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <readFromEEPROM+0x8c>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffdd 	bl	80007b4 <getCharFromCursorPosition>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	4a19      	ldr	r2, [pc, #100]	; (8000864 <readFromEEPROM+0x90>)
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	4413      	add	r3, r2
 8000804:	460a      	mov	r2, r1
 8000806:	701a      	strb	r2, [r3, #0]

			tempSSIDStartPos++;
 8000808:	7dfb      	ldrb	r3, [r7, #23]
 800080a:	3301      	adds	r3, #1
 800080c:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	3301      	adds	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	2b13      	cmp	r3, #19
 8000818:	dde9      	ble.n	80007ee <readFromEEPROM+0x1a>
			wifiPass[i] = getCharFromCursorPosition(wifiPassLocArr[tempPassStartPos]);

			tempPassStartPos++;
		}
	}
}
 800081a:	e01b      	b.n	8000854 <readFromEEPROM+0x80>
		uint8_t tempPassStartPos = passStartPos;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <readFromEEPROM+0x94>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	e012      	b.n	800084e <readFromEEPROM+0x7a>
			wifiPass[i] = getCharFromCursorPosition(wifiPassLocArr[tempPassStartPos]);
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <readFromEEPROM+0x98>)
 800082c:	5cd3      	ldrb	r3, [r2, r3]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffc0 	bl	80007b4 <getCharFromCursorPosition>
 8000834:	4603      	mov	r3, r0
 8000836:	4619      	mov	r1, r3
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <readFromEEPROM+0x9c>)
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	3301      	adds	r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	2b13      	cmp	r3, #19
 8000852:	dde9      	ble.n	8000828 <readFromEEPROM+0x54>
}
 8000854:	bf00      	nop
 8000856:	3718      	adds	r7, #24
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000010 	.word	0x20000010
 8000860:	200001d4 	.word	0x200001d4
 8000864:	200001ac 	.word	0x200001ac
 8000868:	20000014 	.word	0x20000014
 800086c:	200001e8 	.word	0x200001e8
 8000870:	200001c0 	.word	0x200001c0

08000874 <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b09f      	sub	sp, #124	; 0x7c
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000880:	4948      	ldr	r1, [pc, #288]	; (80009a4 <ESP8266_Init+0x130>)
 8000882:	4849      	ldr	r0, [pc, #292]	; (80009a8 <ESP8266_Init+0x134>)
 8000884:	f00b fea2 	bl	800c5cc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000888:	4847      	ldr	r0, [pc, #284]	; (80009a8 <ESP8266_Init+0x134>)
 800088a:	f7ff fccb 	bl	8000224 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29b      	uxth	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	4944      	ldr	r1, [pc, #272]	; (80009a8 <ESP8266_Init+0x134>)
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f00b f8b2 	bl	800ba00 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f007 ffe2 	bl	8008868 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80008a4:	4941      	ldr	r1, [pc, #260]	; (80009ac <ESP8266_Init+0x138>)
 80008a6:	4840      	ldr	r0, [pc, #256]	; (80009a8 <ESP8266_Init+0x134>)
 80008a8:	f00b fe90 	bl	800c5cc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008ac:	483e      	ldr	r0, [pc, #248]	; (80009a8 <ESP8266_Init+0x134>)
 80008ae:	f7ff fcb9 	bl	8000224 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	493b      	ldr	r1, [pc, #236]	; (80009a8 <ESP8266_Init+0x134>)
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f00b f8a0 	bl	800ba00 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80008c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c4:	f007 ffd0 	bl	8008868 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 80008c8:	4939      	ldr	r1, [pc, #228]	; (80009b0 <ESP8266_Init+0x13c>)
 80008ca:	4837      	ldr	r0, [pc, #220]	; (80009a8 <ESP8266_Init+0x134>)
 80008cc:	f00b fe7e 	bl	800c5cc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008d0:	4835      	ldr	r0, [pc, #212]	; (80009a8 <ESP8266_Init+0x134>)
 80008d2:	f7ff fca7 	bl	8000224 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b29b      	uxth	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	4932      	ldr	r1, [pc, #200]	; (80009a8 <ESP8266_Init+0x134>)
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f00b f88e 	bl	800ba00 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80008e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e8:	f007 ffbe 	bl	8008868 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80008ec:	4931      	ldr	r1, [pc, #196]	; (80009b4 <ESP8266_Init+0x140>)
 80008ee:	482e      	ldr	r0, [pc, #184]	; (80009a8 <ESP8266_Init+0x134>)
 80008f0:	f00b fe6c 	bl	800c5cc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80008f4:	482c      	ldr	r0, [pc, #176]	; (80009a8 <ESP8266_Init+0x134>)
 80008f6:	f7ff fc95 	bl	8000224 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	4929      	ldr	r1, [pc, #164]	; (80009a8 <ESP8266_Init+0x134>)
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f00b f87c 	bl	800ba00 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000908:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800090c:	f007 ffac 	bl	8008868 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4a28      	ldr	r2, [pc, #160]	; (80009b8 <ESP8266_Init+0x144>)
 8000916:	461c      	mov	r4, r3
 8000918:	4613      	mov	r3, r2
 800091a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800091c:	c407      	stmia	r4!, {r0, r1, r2}
 800091e:	8023      	strh	r3, [r4, #0]
 8000920:	3402      	adds	r4, #2
 8000922:	0c1b      	lsrs	r3, r3, #16
 8000924:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	4618      	mov	r0, r3
 800092e:	f00b feaf 	bl	800c690 <strcat>
	strcat(str, "\",\"");
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc74 	bl	8000224 <strlen>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4413      	add	r3, r2
 8000946:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <ESP8266_Init+0x148>)
 8000948:	6810      	ldr	r0, [r2, #0]
 800094a:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	4618      	mov	r0, r3
 8000954:	f00b fe9c 	bl	800c690 <strcat>
	strcat(str, "\"\r\n");
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc61 	bl	8000224 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4413      	add	r3, r2
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <ESP8266_Init+0x14c>)
 800096e:	6810      	ldr	r0, [r2, #0]
 8000970:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	461a      	mov	r2, r3
 8000978:	4912      	ldr	r1, [pc, #72]	; (80009c4 <ESP8266_Init+0x150>)
 800097a:	480b      	ldr	r0, [pc, #44]	; (80009a8 <ESP8266_Init+0x134>)
 800097c:	f00b fe26 	bl	800c5cc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <ESP8266_Init+0x134>)
 8000982:	f7ff fc4f 	bl	8000224 <strlen>
 8000986:	4603      	mov	r3, r0
 8000988:	b29b      	uxth	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	4906      	ldr	r1, [pc, #24]	; (80009a8 <ESP8266_Init+0x134>)
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f00b f836 	bl	800ba00 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000994:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000998:	f007 ff66 	bl	8008868 <HAL_Delay>
}
 800099c:	bf00      	nop
 800099e:	377c      	adds	r7, #124	; 0x7c
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd90      	pop	{r4, r7, pc}
 80009a4:	0800cea4 	.word	0x0800cea4
 80009a8:	20000288 	.word	0x20000288
 80009ac:	0800ceb4 	.word	0x0800ceb4
 80009b0:	0800cec0 	.word	0x0800cec0
 80009b4:	0800cec8 	.word	0x0800cec8
 80009b8:	0800ced8 	.word	0x0800ced8
 80009bc:	0800cee8 	.word	0x0800cee8
 80009c0:	0800ceec 	.word	0x0800ceec
 80009c4:	0800cef0 	.word	0x0800cef0

080009c8 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0c6      	sub	sp, #280	; 0x118
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009d6:	6018      	str	r0, [r3, #0]
 80009d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009e0:	6019      	str	r1, [r3, #0]
 80009e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009ea:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009ec:	4a31      	ldr	r2, [pc, #196]	; (8000ab4 <sendMachineData+0xec>)
 80009ee:	4932      	ldr	r1, [pc, #200]	; (8000ab8 <sendMachineData+0xf0>)
 80009f0:	4832      	ldr	r0, [pc, #200]	; (8000abc <sendMachineData+0xf4>)
 80009f2:	f00b fdeb 	bl	800c5cc <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f6:	4831      	ldr	r0, [pc, #196]	; (8000abc <sendMachineData+0xf4>)
 80009f8:	f7ff fc14 	bl	8000224 <strlen>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a08:	492c      	ldr	r1, [pc, #176]	; (8000abc <sendMachineData+0xf4>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	f00a fff8 	bl	800ba00 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a14:	f007 ff28 	bl	8008868 <HAL_Delay>

	sprintf(local_txA,
 8000a18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a20:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a24:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000a28:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000a2c:	4924      	ldr	r1, [pc, #144]	; (8000ac0 <sendMachineData+0xf8>)
 8000a2e:	9100      	str	r1, [sp, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	4923      	ldr	r1, [pc, #140]	; (8000ac4 <sendMachineData+0xfc>)
 8000a36:	f00b fdc9 	bl	800c5cc <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, mainServerWithPort);
	len = strlen(local_txA);
 8000a3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fbf0 	bl	8000224 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000a52:	491d      	ldr	r1, [pc, #116]	; (8000ac8 <sendMachineData+0x100>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00b fdb9 	bl	800c5cc <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fbe0 	bl	8000224 <strlen>
 8000a64:	4603      	mov	r3, r0
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	f107 0110 	add.w	r1, r7, #16
 8000a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	f00a ffc3 	bl	800ba00 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a7e:	f007 fef3 	bl	8008868 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000a82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fbcc 	bl	8000224 <strlen>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f00a ffaf 	bl	800ba00 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000aa2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aa6:	f007 fedf 	bl	8008868 <HAL_Delay>
}
 8000aaa:	bf00      	nop
 8000aac:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	0800cef4 	.word	0x0800cef4
 8000ab8:	0800cf04 	.word	0x0800cf04
 8000abc:	20000288 	.word	0x20000288
 8000ac0:	0800cf80 	.word	0x0800cf80
 8000ac4:	0800cf24 	.word	0x0800cf24
 8000ac8:	0800cf94 	.word	0x0800cf94

08000acc <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af04      	add	r7, sp, #16
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <hata2EEPROM+0xa4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1e5a      	subs	r2, r3, #1
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <hata2EEPROM+0xa8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <hata2EEPROM+0xac>)
 8000ae4:	5cd3      	ldrb	r3, [r2, r3]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000aea:	f000 f92b 	bl	8000d44 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000aee:	e000      	b.n	8000af2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000af0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	e012      	b.n	8000b1e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <hata2EEPROM+0xa8>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <hata2EEPROM+0xac>)
 8000b02:	5cd3      	ldrb	r3, [r2, r3]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d107      	bne.n	8000b18 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4919      	ldr	r1, [pc, #100]	; (8000b78 <hata2EEPROM+0xac>)
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	54ca      	strb	r2, [r1, r3]
					break;
 8000b16:	e007      	b.n	8000b28 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbe7      	blt.n	8000af8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	b299      	uxth	r1, r3
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	b298      	uxth	r0, r3
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <hata2EEPROM+0xa8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <hata2EEPROM+0xac>)
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <hata2EEPROM+0xa4>)
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	b292      	uxth	r2, r2
 8000b42:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000b46:	9402      	str	r4, [sp, #8]
 8000b48:	9201      	str	r2, [sp, #4]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	460a      	mov	r2, r1
 8000b50:	21a0      	movs	r1, #160	; 0xa0
 8000b52:	480a      	ldr	r0, [pc, #40]	; (8000b7c <hata2EEPROM+0xb0>)
 8000b54:	f008 ff12 	bl	800997c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f007 fe84 	bl	8008868 <HAL_Delay>
	eepromKontrol(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fb67 	bl	8000234 <eepromKontrol>
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd90      	pop	{r4, r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200000a8 	.word	0x200000a8
 8000b74:	200000ac 	.word	0x200000ac
 8000b78:	20000128 	.word	0x20000128
 8000b7c:	200003ac 	.word	0x200003ac

08000b80 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d11d      	bne.n	8000bcc <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b90:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b98:	4a61      	ldr	r2, [pc, #388]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f007 f90d 	bl	8007dbc <lcd_print>
 8000ba2:	e008      	b.n	8000bb6 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000ba4:	4b5d      	ldr	r3, [pc, #372]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d104      	bne.n	8000bb6 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000bac:	4a5d      	ldr	r2, [pc, #372]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f007 f903 	bl	8007dbc <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000bb6:	4a5c      	ldr	r2, [pc, #368]	; (8000d28 <hataKoduLcdGoster+0x1a8>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f007 f8fe 	bl	8007dbc <lcd_print>
		lcd_print(2, 7, "          ");
 8000bc0:	4a5a      	ldr	r2, [pc, #360]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000bc2:	2107      	movs	r1, #7
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f007 f8f9 	bl	8007dbc <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000bca:	e0a3      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d11d      	bne.n	8000c0e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000bd2:	4b52      	ldr	r3, [pc, #328]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000bda:	4a51      	ldr	r2, [pc, #324]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2001      	movs	r0, #1
 8000be0:	f007 f8ec 	bl	8007dbc <lcd_print>
 8000be4:	e008      	b.n	8000bf8 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000be6:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d104      	bne.n	8000bf8 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000bee:	4a4d      	ldr	r2, [pc, #308]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f007 f8e2 	bl	8007dbc <lcd_print>
		lcd_print(2, 2, "2");
 8000bf8:	4a4d      	ldr	r2, [pc, #308]	; (8000d30 <hataKoduLcdGoster+0x1b0>)
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f007 f8dd 	bl	8007dbc <lcd_print>
		lcd_print(2, 7, "          ");
 8000c02:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c04:	2107      	movs	r1, #7
 8000c06:	2002      	movs	r0, #2
 8000c08:	f007 f8d8 	bl	8007dbc <lcd_print>
}
 8000c0c:	e082      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d11d      	bne.n	8000c50 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d105      	bne.n	8000c28 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000c1c:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	2001      	movs	r0, #1
 8000c22:	f007 f8cb 	bl	8007dbc <lcd_print>
 8000c26:	e008      	b.n	8000c3a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000c28:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d104      	bne.n	8000c3a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000c30:	4a3c      	ldr	r2, [pc, #240]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000c32:	2101      	movs	r1, #1
 8000c34:	2001      	movs	r0, #1
 8000c36:	f007 f8c1 	bl	8007dbc <lcd_print>
		lcd_print(2, 3, "3");
 8000c3a:	4a3e      	ldr	r2, [pc, #248]	; (8000d34 <hataKoduLcdGoster+0x1b4>)
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f007 f8bc 	bl	8007dbc <lcd_print>
		lcd_print(2, 7, "          ");
 8000c44:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c46:	2107      	movs	r1, #7
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f007 f8b7 	bl	8007dbc <lcd_print>
}
 8000c4e:	e061      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d11d      	bne.n	8000c92 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c56:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d105      	bne.n	8000c6a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c5e:	4a30      	ldr	r2, [pc, #192]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	2001      	movs	r0, #1
 8000c64:	f007 f8aa 	bl	8007dbc <lcd_print>
 8000c68:	e008      	b.n	8000c7c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d104      	bne.n	8000c7c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	2001      	movs	r0, #1
 8000c78:	f007 f8a0 	bl	8007dbc <lcd_print>
		lcd_print(2, 4, "4");
 8000c7c:	4a2e      	ldr	r2, [pc, #184]	; (8000d38 <hataKoduLcdGoster+0x1b8>)
 8000c7e:	2104      	movs	r1, #4
 8000c80:	2002      	movs	r0, #2
 8000c82:	f007 f89b 	bl	8007dbc <lcd_print>
		lcd_print(2, 7, "          ");
 8000c86:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000c88:	2107      	movs	r1, #7
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f007 f896 	bl	8007dbc <lcd_print>
}
 8000c90:	e040      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d11d      	bne.n	8000cd4 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d105      	bne.n	8000cac <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f007 f889 	bl	8007dbc <lcd_print>
 8000caa:	e008      	b.n	8000cbe <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d104      	bne.n	8000cbe <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f007 f87f 	bl	8007dbc <lcd_print>
		lcd_print(2, 5, "5");
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <hataKoduLcdGoster+0x1bc>)
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f007 f87a 	bl	8007dbc <lcd_print>
		lcd_print(2, 7, "          ");
 8000cc8:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000cca:	2107      	movs	r1, #7
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f007 f875 	bl	8007dbc <lcd_print>
}
 8000cd2:	e01f      	b.n	8000d14 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d11c      	bne.n	8000d14 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d105      	bne.n	8000cee <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <hataKoduLcdGoster+0x1a0>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f007 f868 	bl	8007dbc <lcd_print>
 8000cec:	e008      	b.n	8000d00 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <hataKoduLcdGoster+0x19c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d104      	bne.n	8000d00 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <hataKoduLcdGoster+0x1a4>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f007 f85e 	bl	8007dbc <lcd_print>
		lcd_print(2, 6, "6");
 8000d00:	4a0f      	ldr	r2, [pc, #60]	; (8000d40 <hataKoduLcdGoster+0x1c0>)
 8000d02:	2106      	movs	r1, #6
 8000d04:	2002      	movs	r0, #2
 8000d06:	f007 f859 	bl	8007dbc <lcd_print>
		lcd_print(2, 7, "          ");
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <hataKoduLcdGoster+0x1ac>)
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f007 f854 	bl	8007dbc <lcd_print>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000245 	.word	0x20000245
 8000d20:	0800d020 	.word	0x0800d020
 8000d24:	0800d030 	.word	0x0800d030
 8000d28:	0800d040 	.word	0x0800d040
 8000d2c:	0800d044 	.word	0x0800d044
 8000d30:	0800d050 	.word	0x0800d050
 8000d34:	0800d054 	.word	0x0800d054
 8000d38:	0800d058 	.word	0x0800d058
 8000d3c:	0800d05c 	.word	0x0800d05c
 8000d40:	0800d060 	.word	0x0800d060

08000d44 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	e009      	b.n	8000d64 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <eepromDataFillWithEmpty+0x38>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <eepromDataFillWithEmpty+0x3c>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3301      	adds	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <eepromDataFillWithEmpty+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	dbf0      	blt.n	8000d50 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000080 	.word	0x20000080
 8000d80:	20000128 	.word	0x20000128
 8000d84:	200000a8 	.word	0x200000a8

08000d88 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d9a:	4b50      	ldr	r3, [pc, #320]	; (8000edc <i2cTest+0x154>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <i2cTest+0x154>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f022 0201 	bic.w	r2, r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000daa:	484c      	ldr	r0, [pc, #304]	; (8000edc <i2cTest+0x154>)
 8000dac:	f008 fcb8 	bl	8009720 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db0:	23c0      	movs	r3, #192	; 0xc0
 8000db2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000db4:	2311      	movs	r3, #17
 8000db6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4846      	ldr	r0, [pc, #280]	; (8000ee0 <i2cTest+0x158>)
 8000dc6:	f008 f8bf 	bl	8008f48 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	4844      	ldr	r0, [pc, #272]	; (8000ee0 <i2cTest+0x158>)
 8000dd0:	f008 fb31 	bl	8009436 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	4841      	ldr	r0, [pc, #260]	; (8000ee0 <i2cTest+0x158>)
 8000dda:	f008 fb2c 	bl	8009436 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000dde:	200a      	movs	r0, #10
 8000de0:	f007 fd42 	bl	8008868 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000de4:	bf00      	nop
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	483d      	ldr	r0, [pc, #244]	; (8000ee0 <i2cTest+0x158>)
 8000dea:	f008 fb0d 	bl	8009408 <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d006      	beq.n	8000e02 <i2cTest+0x7a>
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	483a      	ldr	r0, [pc, #232]	; (8000ee0 <i2cTest+0x158>)
 8000df8:	f008 fb06 	bl	8009408 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d1f1      	bne.n	8000de6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4836      	ldr	r0, [pc, #216]	; (8000ee0 <i2cTest+0x158>)
 8000e08:	f008 fb15 	bl	8009436 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f007 fd2b 	bl	8008868 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000e12:	bf00      	nop
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	4832      	ldr	r0, [pc, #200]	; (8000ee0 <i2cTest+0x158>)
 8000e18:	f008 faf6 	bl	8009408 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d0f8      	beq.n	8000e14 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2140      	movs	r1, #64	; 0x40
 8000e26:	482e      	ldr	r0, [pc, #184]	; (8000ee0 <i2cTest+0x158>)
 8000e28:	f008 fb05 	bl	8009436 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f007 fd1b 	bl	8008868 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000e32:	bf00      	nop
 8000e34:	2140      	movs	r1, #64	; 0x40
 8000e36:	482a      	ldr	r0, [pc, #168]	; (8000ee0 <i2cTest+0x158>)
 8000e38:	f008 fae6 	bl	8009408 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d0f8      	beq.n	8000e34 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2140      	movs	r1, #64	; 0x40
 8000e46:	4826      	ldr	r0, [pc, #152]	; (8000ee0 <i2cTest+0x158>)
 8000e48:	f008 faf5 	bl	8009436 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f007 fd0b 	bl	8008868 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e52:	bf00      	nop
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	4822      	ldr	r0, [pc, #136]	; (8000ee0 <i2cTest+0x158>)
 8000e58:	f008 fad6 	bl	8009408 <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d1f8      	bne.n	8000e54 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <i2cTest+0x158>)
 8000e68:	f008 fae5 	bl	8009436 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f007 fcfb 	bl	8008868 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e72:	bf00      	nop
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	481a      	ldr	r0, [pc, #104]	; (8000ee0 <i2cTest+0x158>)
 8000e78:	f008 fac6 	bl	8009408 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d1f8      	bne.n	8000e74 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <i2cTest+0x158>)
 8000e98:	f008 f856 	bl	8008f48 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <i2cTest+0x154>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <i2cTest+0x154>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eaa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <i2cTest+0x154>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <i2cTest+0x154>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eba:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <i2cTest+0x154>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <i2cTest+0x154>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 0201 	orr.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <i2cTest+0x154>)
 8000ece:	f008 fae3 	bl	8009498 <HAL_I2C_Init>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200003ac 	.word	0x200003ac
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000eee:	20c8      	movs	r0, #200	; 0xc8
 8000ef0:	f007 fcba 	bl	8008868 <HAL_Delay>
	lcd_clear();
 8000ef4:	f006 ff8e 	bl	8007e14 <lcd_clear>
	if(type == 1 && page == 0) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d143      	bne.n	8000f86 <printTemplate+0xa2>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d140      	bne.n	8000f86 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000f04:	4a9d      	ldr	r2, [pc, #628]	; (800117c <printTemplate+0x298>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f006 ff57 	bl	8007dbc <lcd_print>
		lcd_print(2, 3, "0");
 8000f0e:	4a9c      	ldr	r2, [pc, #624]	; (8001180 <printTemplate+0x29c>)
 8000f10:	2103      	movs	r1, #3
 8000f12:	2002      	movs	r0, #2
 8000f14:	f006 ff52 	bl	8007dbc <lcd_print>
		lcd_print(2, 4, "1");
 8000f18:	4a9a      	ldr	r2, [pc, #616]	; (8001184 <printTemplate+0x2a0>)
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f006 ff4d 	bl	8007dbc <lcd_print>
		lcd_print(2, 5, "2");
 8000f22:	4a99      	ldr	r2, [pc, #612]	; (8001188 <printTemplate+0x2a4>)
 8000f24:	2105      	movs	r1, #5
 8000f26:	2002      	movs	r0, #2
 8000f28:	f006 ff48 	bl	8007dbc <lcd_print>
		lcd_print(2, 6, "3");
 8000f2c:	4a97      	ldr	r2, [pc, #604]	; (800118c <printTemplate+0x2a8>)
 8000f2e:	2106      	movs	r1, #6
 8000f30:	2002      	movs	r0, #2
 8000f32:	f006 ff43 	bl	8007dbc <lcd_print>
		lcd_print(2, 7, "4");
 8000f36:	4a96      	ldr	r2, [pc, #600]	; (8001190 <printTemplate+0x2ac>)
 8000f38:	2107      	movs	r1, #7
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f006 ff3e 	bl	8007dbc <lcd_print>
		lcd_print(2, 10, "5");
 8000f40:	4a94      	ldr	r2, [pc, #592]	; (8001194 <printTemplate+0x2b0>)
 8000f42:	210a      	movs	r1, #10
 8000f44:	2002      	movs	r0, #2
 8000f46:	f006 ff39 	bl	8007dbc <lcd_print>
		lcd_print(2, 11, "6");
 8000f4a:	4a93      	ldr	r2, [pc, #588]	; (8001198 <printTemplate+0x2b4>)
 8000f4c:	210b      	movs	r1, #11
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f006 ff34 	bl	8007dbc <lcd_print>
		lcd_print(2, 12, "7");
 8000f54:	4a91      	ldr	r2, [pc, #580]	; (800119c <printTemplate+0x2b8>)
 8000f56:	210c      	movs	r1, #12
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f006 ff2f 	bl	8007dbc <lcd_print>
		lcd_print(2, 13, "8");
 8000f5e:	4a90      	ldr	r2, [pc, #576]	; (80011a0 <printTemplate+0x2bc>)
 8000f60:	210d      	movs	r1, #13
 8000f62:	2002      	movs	r0, #2
 8000f64:	f006 ff2a 	bl	8007dbc <lcd_print>
		lcd_print(2, 14, "9");
 8000f68:	4a8e      	ldr	r2, [pc, #568]	; (80011a4 <printTemplate+0x2c0>)
 8000f6a:	210e      	movs	r1, #14
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f006 ff25 	bl	8007dbc <lcd_print>
		lcd_print(1, 5, machineID);
 8000f72:	4a8d      	ldr	r2, [pc, #564]	; (80011a8 <printTemplate+0x2c4>)
 8000f74:	2105      	movs	r1, #5
 8000f76:	2001      	movs	r0, #1
 8000f78:	f006 ff20 	bl	8007dbc <lcd_print>
		lcd_gotoxy(2, 3);
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f006 fefd 	bl	8007d7e <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f84:	e0f5      	b.n	8001172 <printTemplate+0x28e>
	} else if(type == 2) {
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d178      	bne.n	800107e <printTemplate+0x19a>
		if(page == 1) {
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d114      	bne.n	8000fbc <printTemplate+0xd8>
			lcd_clear();
 8000f92:	f006 ff3f 	bl	8007e14 <lcd_clear>
			HAL_Delay(100);
 8000f96:	2064      	movs	r0, #100	; 0x64
 8000f98:	f007 fc66 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000f9c:	4a83      	ldr	r2, [pc, #524]	; (80011ac <printTemplate+0x2c8>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f006 ff0b 	bl	8007dbc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fa6:	4a82      	ldr	r2, [pc, #520]	; (80011b0 <printTemplate+0x2cc>)
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2001      	movs	r0, #1
 8000fac:	f006 ff06 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000fb0:	4a80      	ldr	r2, [pc, #512]	; (80011b4 <printTemplate+0x2d0>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f006 ff01 	bl	8007dbc <lcd_print>
}
 8000fba:	e0da      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 2) {
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d114      	bne.n	8000fec <printTemplate+0x108>
			lcd_clear();
 8000fc2:	f006 ff27 	bl	8007e14 <lcd_clear>
			HAL_Delay(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f007 fc4e 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fcc:	4a77      	ldr	r2, [pc, #476]	; (80011ac <printTemplate+0x2c8>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f006 fef3 	bl	8007dbc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fd6:	4a76      	ldr	r2, [pc, #472]	; (80011b0 <printTemplate+0x2cc>)
 8000fd8:	2107      	movs	r1, #7
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f006 feee 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fe0:	4a75      	ldr	r2, [pc, #468]	; (80011b8 <printTemplate+0x2d4>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f006 fee9 	bl	8007dbc <lcd_print>
}
 8000fea:	e0c2      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 3) {
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d114      	bne.n	800101c <printTemplate+0x138>
			lcd_clear();
 8000ff2:	f006 ff0f 	bl	8007e14 <lcd_clear>
			HAL_Delay(100);
 8000ff6:	2064      	movs	r0, #100	; 0x64
 8000ff8:	f007 fc36 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000ffc:	4a6b      	ldr	r2, [pc, #428]	; (80011ac <printTemplate+0x2c8>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	2001      	movs	r0, #1
 8001002:	f006 fedb 	bl	8007dbc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001006:	4a6a      	ldr	r2, [pc, #424]	; (80011b0 <printTemplate+0x2cc>)
 8001008:	2107      	movs	r1, #7
 800100a:	2001      	movs	r0, #1
 800100c:	f006 fed6 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001010:	4a6a      	ldr	r2, [pc, #424]	; (80011bc <printTemplate+0x2d8>)
 8001012:	2101      	movs	r1, #1
 8001014:	2002      	movs	r0, #2
 8001016:	f006 fed1 	bl	8007dbc <lcd_print>
}
 800101a:	e0aa      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 4) {
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b04      	cmp	r3, #4
 8001020:	d114      	bne.n	800104c <printTemplate+0x168>
			lcd_clear();
 8001022:	f006 fef7 	bl	8007e14 <lcd_clear>
			HAL_Delay(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f007 fc1e 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800102c:	4a5f      	ldr	r2, [pc, #380]	; (80011ac <printTemplate+0x2c8>)
 800102e:	2101      	movs	r1, #1
 8001030:	2001      	movs	r0, #1
 8001032:	f006 fec3 	bl	8007dbc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001036:	4a5e      	ldr	r2, [pc, #376]	; (80011b0 <printTemplate+0x2cc>)
 8001038:	2107      	movs	r1, #7
 800103a:	2001      	movs	r0, #1
 800103c:	f006 febe 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001040:	4a5f      	ldr	r2, [pc, #380]	; (80011c0 <printTemplate+0x2dc>)
 8001042:	2101      	movs	r1, #1
 8001044:	2002      	movs	r0, #2
 8001046:	f006 feb9 	bl	8007dbc <lcd_print>
}
 800104a:	e092      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 5) {
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b05      	cmp	r3, #5
 8001050:	f040 808f 	bne.w	8001172 <printTemplate+0x28e>
			lcd_clear();
 8001054:	f006 fede 	bl	8007e14 <lcd_clear>
			HAL_Delay(100);
 8001058:	2064      	movs	r0, #100	; 0x64
 800105a:	f007 fc05 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800105e:	4a53      	ldr	r2, [pc, #332]	; (80011ac <printTemplate+0x2c8>)
 8001060:	2101      	movs	r1, #1
 8001062:	2001      	movs	r0, #1
 8001064:	f006 feaa 	bl	8007dbc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <printTemplate+0x2cc>)
 800106a:	2107      	movs	r1, #7
 800106c:	2001      	movs	r0, #1
 800106e:	f006 fea5 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001072:	4a54      	ldr	r2, [pc, #336]	; (80011c4 <printTemplate+0x2e0>)
 8001074:	2101      	movs	r1, #1
 8001076:	2002      	movs	r0, #2
 8001078:	f006 fea0 	bl	8007dbc <lcd_print>
}
 800107c:	e079      	b.n	8001172 <printTemplate+0x28e>
	} else if(type == 3) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b03      	cmp	r3, #3
 8001082:	d176      	bne.n	8001172 <printTemplate+0x28e>
		if(page == 1) {
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d114      	bne.n	80010b4 <printTemplate+0x1d0>
			lcd_clear();
 800108a:	f006 fec3 	bl	8007e14 <lcd_clear>
			HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f007 fbea 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001094:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <printTemplate+0x2e4>)
 8001096:	2101      	movs	r1, #1
 8001098:	2001      	movs	r0, #1
 800109a:	f006 fe8f 	bl	8007dbc <lcd_print>
			lcd_print(1, 7, wifiPass);
 800109e:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <printTemplate+0x2e8>)
 80010a0:	2107      	movs	r1, #7
 80010a2:	2001      	movs	r0, #1
 80010a4:	f006 fe8a 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <printTemplate+0x2d0>)
 80010aa:	2101      	movs	r1, #1
 80010ac:	2002      	movs	r0, #2
 80010ae:	f006 fe85 	bl	8007dbc <lcd_print>
}
 80010b2:	e05e      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 2) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d114      	bne.n	80010e4 <printTemplate+0x200>
			lcd_clear();
 80010ba:	f006 feab 	bl	8007e14 <lcd_clear>
			HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f007 fbd2 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c4:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <printTemplate+0x2e4>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	2001      	movs	r0, #1
 80010ca:	f006 fe77 	bl	8007dbc <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010ce:	4a3f      	ldr	r2, [pc, #252]	; (80011cc <printTemplate+0x2e8>)
 80010d0:	2107      	movs	r1, #7
 80010d2:	2001      	movs	r0, #1
 80010d4:	f006 fe72 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010d8:	4a37      	ldr	r2, [pc, #220]	; (80011b8 <printTemplate+0x2d4>)
 80010da:	2101      	movs	r1, #1
 80010dc:	2002      	movs	r0, #2
 80010de:	f006 fe6d 	bl	8007dbc <lcd_print>
}
 80010e2:	e046      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 3) {
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d114      	bne.n	8001114 <printTemplate+0x230>
			lcd_clear();
 80010ea:	f006 fe93 	bl	8007e14 <lcd_clear>
			HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f007 fbba 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010f4:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <printTemplate+0x2e4>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	2001      	movs	r0, #1
 80010fa:	f006 fe5f 	bl	8007dbc <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010fe:	4a33      	ldr	r2, [pc, #204]	; (80011cc <printTemplate+0x2e8>)
 8001100:	2107      	movs	r1, #7
 8001102:	2001      	movs	r0, #1
 8001104:	f006 fe5a 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001108:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <printTemplate+0x2d8>)
 800110a:	2101      	movs	r1, #1
 800110c:	2002      	movs	r0, #2
 800110e:	f006 fe55 	bl	8007dbc <lcd_print>
}
 8001112:	e02e      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 4) {
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b04      	cmp	r3, #4
 8001118:	d114      	bne.n	8001144 <printTemplate+0x260>
			lcd_clear();
 800111a:	f006 fe7b 	bl	8007e14 <lcd_clear>
			HAL_Delay(100);
 800111e:	2064      	movs	r0, #100	; 0x64
 8001120:	f007 fba2 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001124:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <printTemplate+0x2e4>)
 8001126:	2101      	movs	r1, #1
 8001128:	2001      	movs	r0, #1
 800112a:	f006 fe47 	bl	8007dbc <lcd_print>
			lcd_print(1, 7, wifiPass);
 800112e:	4a27      	ldr	r2, [pc, #156]	; (80011cc <printTemplate+0x2e8>)
 8001130:	2107      	movs	r1, #7
 8001132:	2001      	movs	r0, #1
 8001134:	f006 fe42 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <printTemplate+0x2dc>)
 800113a:	2101      	movs	r1, #1
 800113c:	2002      	movs	r0, #2
 800113e:	f006 fe3d 	bl	8007dbc <lcd_print>
}
 8001142:	e016      	b.n	8001172 <printTemplate+0x28e>
		} else if(page == 5) {
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d113      	bne.n	8001172 <printTemplate+0x28e>
			lcd_clear();
 800114a:	f006 fe63 	bl	8007e14 <lcd_clear>
			HAL_Delay(100);
 800114e:	2064      	movs	r0, #100	; 0x64
 8001150:	f007 fb8a 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001154:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <printTemplate+0x2e4>)
 8001156:	2101      	movs	r1, #1
 8001158:	2001      	movs	r0, #1
 800115a:	f006 fe2f 	bl	8007dbc <lcd_print>
			lcd_print(1, 7, wifiPass);
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <printTemplate+0x2e8>)
 8001160:	2107      	movs	r1, #7
 8001162:	2001      	movs	r0, #1
 8001164:	f006 fe2a 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <printTemplate+0x2e0>)
 800116a:	2101      	movs	r1, #1
 800116c:	2002      	movs	r0, #2
 800116e:	f006 fe25 	bl	8007dbc <lcd_print>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	0800d064 	.word	0x0800d064
 8001180:	0800d06c 	.word	0x0800d06c
 8001184:	0800d070 	.word	0x0800d070
 8001188:	0800d074 	.word	0x0800d074
 800118c:	0800d078 	.word	0x0800d078
 8001190:	0800d07c 	.word	0x0800d07c
 8001194:	0800d080 	.word	0x0800d080
 8001198:	0800d084 	.word	0x0800d084
 800119c:	0800d088 	.word	0x0800d088
 80011a0:	0800d08c 	.word	0x0800d08c
 80011a4:	0800d090 	.word	0x0800d090
 80011a8:	200001a0 	.word	0x200001a0
 80011ac:	0800d094 	.word	0x0800d094
 80011b0:	200001ac 	.word	0x200001ac
 80011b4:	0800d09c 	.word	0x0800d09c
 80011b8:	0800d0b0 	.word	0x0800d0b0
 80011bc:	0800d0c4 	.word	0x0800d0c4
 80011c0:	0800d0d8 	.word	0x0800d0d8
 80011c4:	0800d0ec 	.word	0x0800d0ec
 80011c8:	0800d100 	.word	0x0800d100
 80011cc:	200001c0 	.word	0x200001c0

080011d0 <checkSlideVal>:

int checkSlideVal(int state) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d111      	bne.n	8001202 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80011de:	2101      	movs	r1, #1
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <checkSlideVal+0x60>)
 80011e2:	f008 f911 	bl	8009408 <HAL_GPIO_ReadPin>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <checkSlideVal+0x20>
			return 34;
 80011ec:	2322      	movs	r3, #34	; 0x22
 80011ee:	e01b      	b.n	8001228 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80011f0:	2108      	movs	r1, #8
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <checkSlideVal+0x64>)
 80011f4:	f008 f908 	bl	8009408 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d113      	bne.n	8001226 <checkSlideVal+0x56>
			return 32;
 80011fe:	2320      	movs	r3, #32
 8001200:	e012      	b.n	8001228 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001202:	2101      	movs	r1, #1
 8001204:	480a      	ldr	r0, [pc, #40]	; (8001230 <checkSlideVal+0x60>)
 8001206:	f008 f8ff 	bl	8009408 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <checkSlideVal+0x44>
			return 35;
 8001210:	2323      	movs	r3, #35	; 0x23
 8001212:	e009      	b.n	8001228 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001214:	2108      	movs	r1, #8
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <checkSlideVal+0x64>)
 8001218:	f008 f8f6 	bl	8009408 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <checkSlideVal+0x56>
			return 33;
 8001222:	2321      	movs	r3, #33	; 0x21
 8001224:	e000      	b.n	8001228 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40010800 	.word	0x40010800
 8001234:	40011000 	.word	0x40011000

08001238 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7fe ffec 	bl	8000224 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001254:	e08a      	b.n	800136c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f7ff ffba 	bl	80011d0 <checkSlideVal>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	dd07      	ble.n	8001272 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001262:	6838      	ldr	r0, [r7, #0]
 8001264:	f7ff ffb4 	bl	80011d0 <checkSlideVal>
 8001268:	4603      	mov	r3, r0
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b44      	ldr	r3, [pc, #272]	; (8001380 <slideText+0x148>)
 800126e:	701a      	strb	r2, [r3, #0]
			break;
 8001270:	e081      	b.n	8001376 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
 8001276:	e075      	b.n	8001364 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001278:	6838      	ldr	r0, [r7, #0]
 800127a:	f7ff ffa9 	bl	80011d0 <checkSlideVal>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	dd09      	ble.n	8001298 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001284:	6838      	ldr	r0, [r7, #0]
 8001286:	f7ff ffa3 	bl	80011d0 <checkSlideVal>
 800128a:	4603      	mov	r3, r0
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <slideText+0x148>)
 8001290:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001296:	e069      	b.n	800136c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	4413      	add	r3, r2
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	e029      	b.n	80012f6 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80012a2:	6838      	ldr	r0, [r7, #0]
 80012a4:	f7ff ff94 	bl	80011d0 <checkSlideVal>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dd0b      	ble.n	80012c6 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f7ff ff8e 	bl	80011d0 <checkSlideVal>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b31      	ldr	r3, [pc, #196]	; (8001380 <slideText+0x148>)
 80012ba:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80012c4:	e01d      	b.n	8001302 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	b2d8      	uxtb	r0, r3
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b2d9      	uxtb	r1, r3
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	f006 fd7e 	bl	8007de6 <lcd_print_char>
				HAL_Delay(30);
 80012ea:	201e      	movs	r0, #30
 80012ec:	f007 fabc 	bl	8008868 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	3301      	adds	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	7dfa      	ldrb	r2, [r7, #23]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4413      	add	r3, r2
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbcf      	blt.n	80012a2 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	3b01      	subs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e023      	b.n	8001352 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	f7ff ff60 	bl	80011d0 <checkSlideVal>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	dd0b      	ble.n	800132e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	f7ff ff5a 	bl	80011d0 <checkSlideVal>
 800131c:	4603      	mov	r3, r0
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <slideText+0x148>)
 8001322:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800132c:	e017      	b.n	800135e <slideText+0x126>
				}
			     if(j >= startPos) {
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	429a      	cmp	r2, r3
 8001334:	db0a      	blt.n	800134c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	b2d1      	uxtb	r1, r2
 800133e:	2220      	movs	r2, #32
 8001340:	4618      	mov	r0, r3
 8001342:	f006 fd50 	bl	8007de6 <lcd_print_char>
			    	 HAL_Delay(30);
 8001346:	201e      	movs	r0, #30
 8001348:	f007 fa8e 	bl	8008868 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	3b01      	subs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	7dfa      	ldrb	r2, [r7, #23]
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	429a      	cmp	r2, r3
 800135c:	dad5      	bge.n	800130a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	3301      	adds	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	6a3a      	ldr	r2, [r7, #32]
 8001368:	429a      	cmp	r2, r3
 800136a:	db85      	blt.n	8001278 <slideText+0x40>
	while(mainLoopVal == 1) {
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	2b01      	cmp	r3, #1
 8001370:	f43f af71 	beq.w	8001256 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000224 	.word	0x20000224

08001384 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001388:	f3bf 8f4f 	dsb	sy
}
 800138c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <__NVIC_SystemReset+0x24>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001396:	4904      	ldr	r1, [pc, #16]	; (80013a8 <__NVIC_SystemReset+0x24>)
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_SystemReset+0x28>)
 800139a:	4313      	orrs	r3, r2
 800139c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800139e:	f3bf 8f4f 	dsb	sy
}
 80013a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <__NVIC_SystemReset+0x20>
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	05fa0004 	.word	0x05fa0004

080013b0 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013b6:	2101      	movs	r1, #1
 80013b8:	488e      	ldr	r0, [pc, #568]	; (80015f4 <menu+0x244>)
 80013ba:	f008 f825 	bl	8009408 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	f040 808e 	bne.w	80014e2 <menu+0x132>
 80013c6:	4b8c      	ldr	r3, [pc, #560]	; (80015f8 <menu+0x248>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8086 	beq.w	80014e2 <menu+0x132>
		menuSayac = menuSayac+1;
 80013d6:	4b89      	ldr	r3, [pc, #548]	; (80015fc <menu+0x24c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b87      	ldr	r3, [pc, #540]	; (80015fc <menu+0x24c>)
 80013e0:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80013e2:	4b86      	ldr	r3, [pc, #536]	; (80015fc <menu+0x24c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b24      	cmp	r3, #36	; 0x24
 80013e8:	d102      	bne.n	80013f0 <menu+0x40>
			menuSayac = 1;
 80013ea:	4b84      	ldr	r3, [pc, #528]	; (80015fc <menu+0x24c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80013f0:	4b82      	ldr	r3, [pc, #520]	; (80015fc <menu+0x24c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b12      	cmp	r3, #18
 80013f6:	d106      	bne.n	8001406 <menu+0x56>
 80013f8:	4b81      	ldr	r3, [pc, #516]	; (8001600 <menu+0x250>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <menu+0x56>
			menuSayac = 21;
 8001400:	4b7e      	ldr	r3, [pc, #504]	; (80015fc <menu+0x24c>)
 8001402:	2215      	movs	r2, #21
 8001404:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001406:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <menu+0x24c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b08      	cmp	r3, #8
 800140c:	d106      	bne.n	800141c <menu+0x6c>
 800140e:	4b7d      	ldr	r3, [pc, #500]	; (8001604 <menu+0x254>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d102      	bne.n	800141c <menu+0x6c>
			menuSayac = 16;
 8001416:	4b79      	ldr	r3, [pc, #484]	; (80015fc <menu+0x24c>)
 8001418:	2210      	movs	r2, #16
 800141a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800141c:	4b77      	ldr	r3, [pc, #476]	; (80015fc <menu+0x24c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b0d      	cmp	r3, #13
 8001422:	d106      	bne.n	8001432 <menu+0x82>
 8001424:	4b77      	ldr	r3, [pc, #476]	; (8001604 <menu+0x254>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d102      	bne.n	8001432 <menu+0x82>
			menuSayac = 16;
 800142c:	4b73      	ldr	r3, [pc, #460]	; (80015fc <menu+0x24c>)
 800142e:	2210      	movs	r2, #16
 8001430:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001432:	4b72      	ldr	r3, [pc, #456]	; (80015fc <menu+0x24c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b09      	cmp	r3, #9
 8001438:	d106      	bne.n	8001448 <menu+0x98>
 800143a:	4b72      	ldr	r3, [pc, #456]	; (8001604 <menu+0x254>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d102      	bne.n	8001448 <menu+0x98>
			menuSayac = 13;
 8001442:	4b6e      	ldr	r3, [pc, #440]	; (80015fc <menu+0x24c>)
 8001444:	220d      	movs	r2, #13
 8001446:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001448:	4b6c      	ldr	r3, [pc, #432]	; (80015fc <menu+0x24c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b0a      	cmp	r3, #10
 800144e:	d10a      	bne.n	8001466 <menu+0xb6>
 8001450:	4b6d      	ldr	r3, [pc, #436]	; (8001608 <menu+0x258>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d003      	beq.n	8001460 <menu+0xb0>
 8001458:	4b6b      	ldr	r3, [pc, #428]	; (8001608 <menu+0x258>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d102      	bne.n	8001466 <menu+0xb6>
			menuSayac = 11;
 8001460:	4b66      	ldr	r3, [pc, #408]	; (80015fc <menu+0x24c>)
 8001462:	220b      	movs	r2, #11
 8001464:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001466:	4b65      	ldr	r3, [pc, #404]	; (80015fc <menu+0x24c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d10e      	bne.n	800148c <menu+0xdc>
 800146e:	4b67      	ldr	r3, [pc, #412]	; (800160c <menu+0x25c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d003      	beq.n	800147e <menu+0xce>
 8001476:	4b65      	ldr	r3, [pc, #404]	; (800160c <menu+0x25c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d106      	bne.n	800148c <menu+0xdc>
 800147e:	4b61      	ldr	r3, [pc, #388]	; (8001604 <menu+0x254>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d102      	bne.n	800148c <menu+0xdc>
			menuSayac = 16;
 8001486:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <menu+0x24c>)
 8001488:	2210      	movs	r2, #16
 800148a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800148c:	4b5b      	ldr	r3, [pc, #364]	; (80015fc <menu+0x24c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b0c      	cmp	r3, #12
 8001492:	d10e      	bne.n	80014b2 <menu+0x102>
 8001494:	4b5d      	ldr	r3, [pc, #372]	; (800160c <menu+0x25c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d003      	beq.n	80014a4 <menu+0xf4>
 800149c:	4b5b      	ldr	r3, [pc, #364]	; (800160c <menu+0x25c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d106      	bne.n	80014b2 <menu+0x102>
 80014a4:	4b57      	ldr	r3, [pc, #348]	; (8001604 <menu+0x254>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d102      	bne.n	80014b2 <menu+0x102>
			menuSayac = 13;
 80014ac:	4b53      	ldr	r3, [pc, #332]	; (80015fc <menu+0x24c>)
 80014ae:	220d      	movs	r2, #13
 80014b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014b2:	4b52      	ldr	r3, [pc, #328]	; (80015fc <menu+0x24c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	d106      	bne.n	80014c8 <menu+0x118>
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <menu+0x260>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d102      	bne.n	80014c8 <menu+0x118>
			menuSayac = 16;
 80014c2:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <menu+0x24c>)
 80014c4:	2210      	movs	r2, #16
 80014c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80014c8:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <menu+0x24c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b18      	cmp	r3, #24
 80014ce:	d106      	bne.n	80014de <menu+0x12e>
 80014d0:	4b4b      	ldr	r3, [pc, #300]	; (8001600 <menu+0x250>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <menu+0x12e>
			menuSayac = 26;
 80014d8:	4b48      	ldr	r3, [pc, #288]	; (80015fc <menu+0x24c>)
 80014da:	221a      	movs	r2, #26
 80014dc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80014de:	f003 fb0d 	bl	8004afc <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014e2:	2108      	movs	r1, #8
 80014e4:	484b      	ldr	r0, [pc, #300]	; (8001614 <menu+0x264>)
 80014e6:	f007 ff8f 	bl	8009408 <HAL_GPIO_ReadPin>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d175      	bne.n	80015dc <menu+0x22c>
 80014f0:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <menu+0x248>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d06e      	beq.n	80015dc <menu+0x22c>
		if (menuSayac <= 1) {
 80014fe:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <menu+0x24c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d802      	bhi.n	800150c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <menu+0x24c>)
 8001508:	2224      	movs	r2, #36	; 0x24
 800150a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800150c:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <menu+0x24c>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	3b01      	subs	r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <menu+0x24c>)
 8001516:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <menu+0x24c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b14      	cmp	r3, #20
 800151e:	d106      	bne.n	800152e <menu+0x17e>
 8001520:	4b37      	ldr	r3, [pc, #220]	; (8001600 <menu+0x250>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <menu+0x17e>
			menuSayac = 17;
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <menu+0x24c>)
 800152a:	2211      	movs	r2, #17
 800152c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <menu+0x24c>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	d106      	bne.n	8001544 <menu+0x194>
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <menu+0x254>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <menu+0x194>
			menuSayac = 7;
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <menu+0x24c>)
 8001540:	2207      	movs	r2, #7
 8001542:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <menu+0x24c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d106      	bne.n	800155a <menu+0x1aa>
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <menu+0x254>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d102      	bne.n	800155a <menu+0x1aa>
			menuSayac = 12;
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <menu+0x24c>)
 8001556:	220c      	movs	r2, #12
 8001558:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800155a:	4b28      	ldr	r3, [pc, #160]	; (80015fc <menu+0x24c>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d106      	bne.n	8001570 <menu+0x1c0>
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <menu+0x254>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d102      	bne.n	8001570 <menu+0x1c0>
			menuSayac = 8;
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <menu+0x24c>)
 800156c:	2208      	movs	r2, #8
 800156e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <menu+0x24c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b0a      	cmp	r3, #10
 8001576:	d10a      	bne.n	800158e <menu+0x1de>
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <menu+0x258>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d003      	beq.n	8001588 <menu+0x1d8>
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <menu+0x258>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d102      	bne.n	800158e <menu+0x1de>
			menuSayac = 9;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <menu+0x24c>)
 800158a:	2209      	movs	r2, #9
 800158c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <menu+0x24c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d10a      	bne.n	80015ac <menu+0x1fc>
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <menu+0x25c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d003      	beq.n	80015a6 <menu+0x1f6>
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <menu+0x25c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d102      	bne.n	80015ac <menu+0x1fc>
			menuSayac = 11;
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <menu+0x24c>)
 80015a8:	220b      	movs	r2, #11
 80015aa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <menu+0x24c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d106      	bne.n	80015c2 <menu+0x212>
 80015b4:	4b16      	ldr	r3, [pc, #88]	; (8001610 <menu+0x260>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d102      	bne.n	80015c2 <menu+0x212>
			menuSayac = 14;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <menu+0x24c>)
 80015be:	220e      	movs	r2, #14
 80015c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <menu+0x24c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b19      	cmp	r3, #25
 80015c8:	d106      	bne.n	80015d8 <menu+0x228>
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <menu+0x250>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <menu+0x228>
			menuSayac = 23;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <menu+0x24c>)
 80015d4:	2217      	movs	r2, #23
 80015d6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015d8:	f003 fa90 	bl	8004afc <bekle>
	}

	if (menuSayac == 0) {
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <menu+0x24c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d133      	bne.n	800164c <menu+0x29c>
		if(dilSecim == 0) {
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <menu+0x268>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d121      	bne.n	8001630 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <menu+0x26c>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	2001      	movs	r0, #1
 80015f2:	e015      	b.n	8001620 <menu+0x270>
 80015f4:	40010800 	.word	0x40010800
 80015f8:	20000253 	.word	0x20000253
 80015fc:	20000224 	.word	0x20000224
 8001600:	20000233 	.word	0x20000233
 8001604:	2000022c 	.word	0x2000022c
 8001608:	2000022d 	.word	0x2000022d
 800160c:	2000022e 	.word	0x2000022e
 8001610:	2000022f 	.word	0x2000022f
 8001614:	40011000 	.word	0x40011000
 8001618:	20000245 	.word	0x20000245
 800161c:	0800d108 	.word	0x0800d108
 8001620:	f006 fbcc 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001624:	4a94      	ldr	r2, [pc, #592]	; (8001878 <menu+0x4c8>)
 8001626:	2101      	movs	r1, #1
 8001628:	2002      	movs	r0, #2
 800162a:	f006 fbc7 	bl	8007dbc <lcd_print>
 800162e:	e00d      	b.n	800164c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001630:	4b92      	ldr	r3, [pc, #584]	; (800187c <menu+0x4cc>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d109      	bne.n	800164c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001638:	4a91      	ldr	r2, [pc, #580]	; (8001880 <menu+0x4d0>)
 800163a:	2101      	movs	r1, #1
 800163c:	2001      	movs	r0, #1
 800163e:	f006 fbbd 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001642:	4a90      	ldr	r2, [pc, #576]	; (8001884 <menu+0x4d4>)
 8001644:	2101      	movs	r1, #1
 8001646:	2002      	movs	r0, #2
 8001648:	f006 fbb8 	bl	8007dbc <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800164c:	4b8e      	ldr	r3, [pc, #568]	; (8001888 <menu+0x4d8>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	f040 82b5 	bne.w	8001bc0 <menu+0x810>
		if(dilSecim == 0) {
 8001656:	4b89      	ldr	r3, [pc, #548]	; (800187c <menu+0x4cc>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800165e:	4a8b      	ldr	r2, [pc, #556]	; (800188c <menu+0x4dc>)
 8001660:	2101      	movs	r1, #1
 8001662:	2001      	movs	r0, #1
 8001664:	f006 fbaa 	bl	8007dbc <lcd_print>
 8001668:	e008      	b.n	800167c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800166a:	4b84      	ldr	r3, [pc, #528]	; (800187c <menu+0x4cc>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d104      	bne.n	800167c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001672:	4a87      	ldr	r2, [pc, #540]	; (8001890 <menu+0x4e0>)
 8001674:	2101      	movs	r1, #1
 8001676:	2001      	movs	r0, #1
 8001678:	f006 fba0 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800167c:	4b85      	ldr	r3, [pc, #532]	; (8001894 <menu+0x4e4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d123      	bne.n	80016cc <menu+0x31c>
			if(dilSecim == 0) {
 8001684:	4b7d      	ldr	r3, [pc, #500]	; (800187c <menu+0x4cc>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800168c:	4a82      	ldr	r2, [pc, #520]	; (8001898 <menu+0x4e8>)
 800168e:	2101      	movs	r1, #1
 8001690:	2002      	movs	r0, #2
 8001692:	f006 fb93 	bl	8007dbc <lcd_print>
 8001696:	e008      	b.n	80016aa <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001698:	4b78      	ldr	r3, [pc, #480]	; (800187c <menu+0x4cc>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d104      	bne.n	80016aa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80016a0:	4a7e      	ldr	r2, [pc, #504]	; (800189c <menu+0x4ec>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	2002      	movs	r0, #2
 80016a6:	f006 fb89 	bl	8007dbc <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80016aa:	4a7d      	ldr	r2, [pc, #500]	; (80018a0 <menu+0x4f0>)
 80016ac:	210f      	movs	r1, #15
 80016ae:	2002      	movs	r0, #2
 80016b0:	f006 fb84 	bl	8007dbc <lcd_print>
			itoa(hataKayit1, snum, 10);
 80016b4:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <menu+0x4f4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	220a      	movs	r2, #10
 80016ba:	497b      	ldr	r1, [pc, #492]	; (80018a8 <menu+0x4f8>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f00a fecf 	bl	800c460 <itoa>
			lcd_print(2, 14, snum);
 80016c2:	4a79      	ldr	r2, [pc, #484]	; (80018a8 <menu+0x4f8>)
 80016c4:	210e      	movs	r1, #14
 80016c6:	2002      	movs	r0, #2
 80016c8:	f006 fb78 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80016cc:	4b71      	ldr	r3, [pc, #452]	; (8001894 <menu+0x4e4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d123      	bne.n	800171c <menu+0x36c>
			if(dilSecim == 0) {
 80016d4:	4b69      	ldr	r3, [pc, #420]	; (800187c <menu+0x4cc>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80016dc:	4a73      	ldr	r2, [pc, #460]	; (80018ac <menu+0x4fc>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2002      	movs	r0, #2
 80016e2:	f006 fb6b 	bl	8007dbc <lcd_print>
 80016e6:	e008      	b.n	80016fa <menu+0x34a>
			} else if(dilSecim == 1) {
 80016e8:	4b64      	ldr	r3, [pc, #400]	; (800187c <menu+0x4cc>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d104      	bne.n	80016fa <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80016f0:	4a6f      	ldr	r2, [pc, #444]	; (80018b0 <menu+0x500>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	2002      	movs	r0, #2
 80016f6:	f006 fb61 	bl	8007dbc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016fa:	4a6e      	ldr	r2, [pc, #440]	; (80018b4 <menu+0x504>)
 80016fc:	210f      	movs	r1, #15
 80016fe:	2002      	movs	r0, #2
 8001700:	f006 fb5c 	bl	8007dbc <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001704:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <menu+0x508>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	220a      	movs	r2, #10
 800170a:	4967      	ldr	r1, [pc, #412]	; (80018a8 <menu+0x4f8>)
 800170c:	4618      	mov	r0, r3
 800170e:	f00a fea7 	bl	800c460 <itoa>
			lcd_print(2, 14, snum);
 8001712:	4a65      	ldr	r2, [pc, #404]	; (80018a8 <menu+0x4f8>)
 8001714:	210e      	movs	r1, #14
 8001716:	2002      	movs	r0, #2
 8001718:	f006 fb50 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800171c:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <menu+0x4e4>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d123      	bne.n	800176c <menu+0x3bc>
			if(dilSecim == 0) {
 8001724:	4b55      	ldr	r3, [pc, #340]	; (800187c <menu+0x4cc>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800172c:	4a63      	ldr	r2, [pc, #396]	; (80018bc <menu+0x50c>)
 800172e:	2101      	movs	r1, #1
 8001730:	2002      	movs	r0, #2
 8001732:	f006 fb43 	bl	8007dbc <lcd_print>
 8001736:	e008      	b.n	800174a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <menu+0x4cc>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d104      	bne.n	800174a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001740:	4a5f      	ldr	r2, [pc, #380]	; (80018c0 <menu+0x510>)
 8001742:	2101      	movs	r1, #1
 8001744:	2002      	movs	r0, #2
 8001746:	f006 fb39 	bl	8007dbc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <menu+0x504>)
 800174c:	210f      	movs	r1, #15
 800174e:	2002      	movs	r0, #2
 8001750:	f006 fb34 	bl	8007dbc <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001754:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <menu+0x514>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	220a      	movs	r2, #10
 800175a:	4953      	ldr	r1, [pc, #332]	; (80018a8 <menu+0x4f8>)
 800175c:	4618      	mov	r0, r3
 800175e:	f00a fe7f 	bl	800c460 <itoa>
			lcd_print(2, 14, snum);
 8001762:	4a51      	ldr	r2, [pc, #324]	; (80018a8 <menu+0x4f8>)
 8001764:	210e      	movs	r1, #14
 8001766:	2002      	movs	r0, #2
 8001768:	f006 fb28 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <menu+0x4e4>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d123      	bne.n	80017bc <menu+0x40c>
			if(dilSecim == 0) {
 8001774:	4b41      	ldr	r3, [pc, #260]	; (800187c <menu+0x4cc>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <menu+0x518>)
 800177e:	2101      	movs	r1, #1
 8001780:	2002      	movs	r0, #2
 8001782:	f006 fb1b 	bl	8007dbc <lcd_print>
 8001786:	e008      	b.n	800179a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001788:	4b3c      	ldr	r3, [pc, #240]	; (800187c <menu+0x4cc>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d104      	bne.n	800179a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <menu+0x51c>)
 8001792:	2101      	movs	r1, #1
 8001794:	2002      	movs	r0, #2
 8001796:	f006 fb11 	bl	8007dbc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800179a:	4a46      	ldr	r2, [pc, #280]	; (80018b4 <menu+0x504>)
 800179c:	210f      	movs	r1, #15
 800179e:	2002      	movs	r0, #2
 80017a0:	f006 fb0c 	bl	8007dbc <lcd_print>
			itoa(hataKayit4, snum, 10);
 80017a4:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <menu+0x520>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	220a      	movs	r2, #10
 80017aa:	493f      	ldr	r1, [pc, #252]	; (80018a8 <menu+0x4f8>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00a fe57 	bl	800c460 <itoa>
			lcd_print(2, 14, snum);
 80017b2:	4a3d      	ldr	r2, [pc, #244]	; (80018a8 <menu+0x4f8>)
 80017b4:	210e      	movs	r1, #14
 80017b6:	2002      	movs	r0, #2
 80017b8:	f006 fb00 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80017bc:	4b35      	ldr	r3, [pc, #212]	; (8001894 <menu+0x4e4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d123      	bne.n	800180c <menu+0x45c>
			if(dilSecim == 0) {
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <menu+0x4cc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80017cc:	4a41      	ldr	r2, [pc, #260]	; (80018d4 <menu+0x524>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	2002      	movs	r0, #2
 80017d2:	f006 faf3 	bl	8007dbc <lcd_print>
 80017d6:	e008      	b.n	80017ea <menu+0x43a>
			} else if(dilSecim == 1) {
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <menu+0x4cc>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d104      	bne.n	80017ea <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80017e0:	4a3d      	ldr	r2, [pc, #244]	; (80018d8 <menu+0x528>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	2002      	movs	r0, #2
 80017e6:	f006 fae9 	bl	8007dbc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017ea:	4a32      	ldr	r2, [pc, #200]	; (80018b4 <menu+0x504>)
 80017ec:	210f      	movs	r1, #15
 80017ee:	2002      	movs	r0, #2
 80017f0:	f006 fae4 	bl	8007dbc <lcd_print>
			itoa(hataKayit5, snum, 10);
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <menu+0x52c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	220a      	movs	r2, #10
 80017fa:	492b      	ldr	r1, [pc, #172]	; (80018a8 <menu+0x4f8>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00a fe2f 	bl	800c460 <itoa>
			lcd_print(2, 14, snum);
 8001802:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <menu+0x4f8>)
 8001804:	210e      	movs	r1, #14
 8001806:	2002      	movs	r0, #2
 8001808:	f006 fad8 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <menu+0x4e4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b05      	cmp	r3, #5
 8001812:	d123      	bne.n	800185c <menu+0x4ac>
			if(dilSecim == 0) {
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <menu+0x4cc>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800181c:	4a30      	ldr	r2, [pc, #192]	; (80018e0 <menu+0x530>)
 800181e:	2101      	movs	r1, #1
 8001820:	2002      	movs	r0, #2
 8001822:	f006 facb 	bl	8007dbc <lcd_print>
 8001826:	e008      	b.n	800183a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <menu+0x4cc>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d104      	bne.n	800183a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001830:	4a2c      	ldr	r2, [pc, #176]	; (80018e4 <menu+0x534>)
 8001832:	2101      	movs	r1, #1
 8001834:	2002      	movs	r0, #2
 8001836:	f006 fac1 	bl	8007dbc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <menu+0x504>)
 800183c:	210f      	movs	r1, #15
 800183e:	2002      	movs	r0, #2
 8001840:	f006 fabc 	bl	8007dbc <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <menu+0x538>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	220a      	movs	r2, #10
 800184a:	4917      	ldr	r1, [pc, #92]	; (80018a8 <menu+0x4f8>)
 800184c:	4618      	mov	r0, r3
 800184e:	f00a fe07 	bl	800c460 <itoa>
			lcd_print(2, 14, snum);
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <menu+0x4f8>)
 8001854:	210e      	movs	r1, #14
 8001856:	2002      	movs	r0, #2
 8001858:	f006 fab0 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <menu+0x4e4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b06      	cmp	r3, #6
 8001862:	d15f      	bne.n	8001924 <menu+0x574>
			if(dilSecim == 0) {
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <menu+0x4cc>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d141      	bne.n	80018f0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800186c:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <menu+0x53c>)
 800186e:	2101      	movs	r1, #1
 8001870:	2002      	movs	r0, #2
 8001872:	f006 faa3 	bl	8007dbc <lcd_print>
 8001876:	e044      	b.n	8001902 <menu+0x552>
 8001878:	0800d11c 	.word	0x0800d11c
 800187c:	20000245 	.word	0x20000245
 8001880:	0800d130 	.word	0x0800d130
 8001884:	0800d144 	.word	0x0800d144
 8001888:	20000224 	.word	0x20000224
 800188c:	0800d158 	.word	0x0800d158
 8001890:	0800d16c 	.word	0x0800d16c
 8001894:	20000226 	.word	0x20000226
 8001898:	0800d180 	.word	0x0800d180
 800189c:	0800d190 	.word	0x0800d190
 80018a0:	0800d1a0 	.word	0x0800d1a0
 80018a4:	20000246 	.word	0x20000246
 80018a8:	20000198 	.word	0x20000198
 80018ac:	0800d1a4 	.word	0x0800d1a4
 80018b0:	0800d1b4 	.word	0x0800d1b4
 80018b4:	0800d1c4 	.word	0x0800d1c4
 80018b8:	20000247 	.word	0x20000247
 80018bc:	0800d1c8 	.word	0x0800d1c8
 80018c0:	0800d1d8 	.word	0x0800d1d8
 80018c4:	20000248 	.word	0x20000248
 80018c8:	0800d1e8 	.word	0x0800d1e8
 80018cc:	0800d1f8 	.word	0x0800d1f8
 80018d0:	20000249 	.word	0x20000249
 80018d4:	0800d208 	.word	0x0800d208
 80018d8:	0800d218 	.word	0x0800d218
 80018dc:	2000024a 	.word	0x2000024a
 80018e0:	0800d228 	.word	0x0800d228
 80018e4:	0800d238 	.word	0x0800d238
 80018e8:	2000024b 	.word	0x2000024b
 80018ec:	0800d248 	.word	0x0800d248
			} else if(dilSecim == 1) {
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <menu+0x680>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d104      	bne.n	8001902 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 80018f8:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <menu+0x684>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	2002      	movs	r0, #2
 80018fe:	f006 fa5d 	bl	8007dbc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001902:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <menu+0x688>)
 8001904:	210f      	movs	r1, #15
 8001906:	2002      	movs	r0, #2
 8001908:	f006 fa58 	bl	8007dbc <lcd_print>
			itoa(hataKayit7, snum, 10);
 800190c:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <menu+0x68c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	220a      	movs	r2, #10
 8001912:	494b      	ldr	r1, [pc, #300]	; (8001a40 <menu+0x690>)
 8001914:	4618      	mov	r0, r3
 8001916:	f00a fda3 	bl	800c460 <itoa>
			lcd_print(2, 14, snum);
 800191a:	4a49      	ldr	r2, [pc, #292]	; (8001a40 <menu+0x690>)
 800191c:	210e      	movs	r1, #14
 800191e:	2002      	movs	r0, #2
 8001920:	f006 fa4c 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001924:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <menu+0x694>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b07      	cmp	r3, #7
 800192a:	d123      	bne.n	8001974 <menu+0x5c4>
			if(dilSecim == 0) {
 800192c:	4b40      	ldr	r3, [pc, #256]	; (8001a30 <menu+0x680>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001934:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <menu+0x698>)
 8001936:	2101      	movs	r1, #1
 8001938:	2002      	movs	r0, #2
 800193a:	f006 fa3f 	bl	8007dbc <lcd_print>
 800193e:	e008      	b.n	8001952 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001940:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <menu+0x680>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d104      	bne.n	8001952 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001948:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <menu+0x69c>)
 800194a:	2101      	movs	r1, #1
 800194c:	2002      	movs	r0, #2
 800194e:	f006 fa35 	bl	8007dbc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001952:	4a39      	ldr	r2, [pc, #228]	; (8001a38 <menu+0x688>)
 8001954:	210f      	movs	r1, #15
 8001956:	2002      	movs	r0, #2
 8001958:	f006 fa30 	bl	8007dbc <lcd_print>
			itoa(hataKayit8, snum, 10);
 800195c:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <menu+0x6a0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	220a      	movs	r2, #10
 8001962:	4937      	ldr	r1, [pc, #220]	; (8001a40 <menu+0x690>)
 8001964:	4618      	mov	r0, r3
 8001966:	f00a fd7b 	bl	800c460 <itoa>
			lcd_print(2, 14, snum);
 800196a:	4a35      	ldr	r2, [pc, #212]	; (8001a40 <menu+0x690>)
 800196c:	210e      	movs	r1, #14
 800196e:	2002      	movs	r0, #2
 8001970:	f006 fa24 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <menu+0x694>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b08      	cmp	r3, #8
 800197a:	d123      	bne.n	80019c4 <menu+0x614>
			if(dilSecim == 0) {
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <menu+0x680>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001984:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <menu+0x6a4>)
 8001986:	2101      	movs	r1, #1
 8001988:	2002      	movs	r0, #2
 800198a:	f006 fa17 	bl	8007dbc <lcd_print>
 800198e:	e008      	b.n	80019a2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <menu+0x680>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d104      	bne.n	80019a2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001998:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <menu+0x6a8>)
 800199a:	2101      	movs	r1, #1
 800199c:	2002      	movs	r0, #2
 800199e:	f006 fa0d 	bl	8007dbc <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019a2:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <menu+0x688>)
 80019a4:	210f      	movs	r1, #15
 80019a6:	2002      	movs	r0, #2
 80019a8:	f006 fa08 	bl	8007dbc <lcd_print>
			itoa(hataKayit9, snum, 10);
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <menu+0x6ac>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	220a      	movs	r2, #10
 80019b2:	4923      	ldr	r1, [pc, #140]	; (8001a40 <menu+0x690>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00a fd53 	bl	800c460 <itoa>
			lcd_print(2, 14, snum);
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <menu+0x690>)
 80019bc:	210e      	movs	r1, #14
 80019be:	2002      	movs	r0, #2
 80019c0:	f006 f9fc 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <menu+0x694>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b09      	cmp	r3, #9
 80019ca:	d123      	bne.n	8001a14 <menu+0x664>
			if(dilSecim == 0) {
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <menu+0x680>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 80019d4:	4a22      	ldr	r2, [pc, #136]	; (8001a60 <menu+0x6b0>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	2002      	movs	r0, #2
 80019da:	f006 f9ef 	bl	8007dbc <lcd_print>
 80019de:	e008      	b.n	80019f2 <menu+0x642>
			} else if(dilSecim == 1) {
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <menu+0x680>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d104      	bne.n	80019f2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 80019e8:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <menu+0x6b4>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	2002      	movs	r0, #2
 80019ee:	f006 f9e5 	bl	8007dbc <lcd_print>
			}
			lcd_print(2, 16, " ");
 80019f2:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <menu+0x6b8>)
 80019f4:	2110      	movs	r1, #16
 80019f6:	2002      	movs	r0, #2
 80019f8:	f006 f9e0 	bl	8007dbc <lcd_print>
			itoa(hataKayit10, snum, 10);
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <menu+0x6bc>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	220a      	movs	r2, #10
 8001a02:	490f      	ldr	r1, [pc, #60]	; (8001a40 <menu+0x690>)
 8001a04:	4618      	mov	r0, r3
 8001a06:	f00a fd2b 	bl	800c460 <itoa>
			lcd_print(2, 15, snum);
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <menu+0x690>)
 8001a0c:	210f      	movs	r1, #15
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f006 f9d4 	bl	8007dbc <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <menu+0x694>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b0a      	cmp	r3, #10
 8001a1a:	d134      	bne.n	8001a86 <menu+0x6d6>
			if(dilSecim == 0) {
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <menu+0x680>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d127      	bne.n	8001a74 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001a24:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <menu+0x6c0>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f006 f9c7 	bl	8007dbc <lcd_print>
 8001a2e:	e02a      	b.n	8001a86 <menu+0x6d6>
 8001a30:	20000245 	.word	0x20000245
 8001a34:	0800d258 	.word	0x0800d258
 8001a38:	0800d1c4 	.word	0x0800d1c4
 8001a3c:	2000024c 	.word	0x2000024c
 8001a40:	20000198 	.word	0x20000198
 8001a44:	20000226 	.word	0x20000226
 8001a48:	0800d268 	.word	0x0800d268
 8001a4c:	0800d278 	.word	0x0800d278
 8001a50:	2000024d 	.word	0x2000024d
 8001a54:	0800d288 	.word	0x0800d288
 8001a58:	0800d298 	.word	0x0800d298
 8001a5c:	2000024e 	.word	0x2000024e
 8001a60:	0800d2a8 	.word	0x0800d2a8
 8001a64:	0800d2b8 	.word	0x0800d2b8
 8001a68:	0800d2c8 	.word	0x0800d2c8
 8001a6c:	2000024f 	.word	0x2000024f
 8001a70:	0800d2cc 	.word	0x0800d2cc
			} else if(dilSecim == 1) {
 8001a74:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <menu+0x8d0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d104      	bne.n	8001a86 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001a7c:	4a81      	ldr	r2, [pc, #516]	; (8001c84 <menu+0x8d4>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2002      	movs	r0, #2
 8001a82:	f006 f99b 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a86:	2102      	movs	r1, #2
 8001a88:	487f      	ldr	r0, [pc, #508]	; (8001c88 <menu+0x8d8>)
 8001a8a:	f007 fcbd 	bl	8009408 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d119      	bne.n	8001ac8 <menu+0x718>
 8001a94:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <menu+0x8dc>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f083 0301 	eor.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d012      	beq.n	8001ac8 <menu+0x718>
 8001aa2:	4b7b      	ldr	r3, [pc, #492]	; (8001c90 <menu+0x8e0>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10e      	bne.n	8001ac8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001aaa:	4b7a      	ldr	r3, [pc, #488]	; (8001c94 <menu+0x8e4>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <menu+0x8e4>)
 8001ab4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001ab6:	4b77      	ldr	r3, [pc, #476]	; (8001c94 <menu+0x8e4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b0a      	cmp	r3, #10
 8001abc:	d902      	bls.n	8001ac4 <menu+0x714>
				hataGostermeSirasi = 0;
 8001abe:	4b75      	ldr	r3, [pc, #468]	; (8001c94 <menu+0x8e4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ac4:	f003 f81a 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ac8:	2104      	movs	r1, #4
 8001aca:	486f      	ldr	r0, [pc, #444]	; (8001c88 <menu+0x8d8>)
 8001acc:	f007 fc9c 	bl	8009408 <HAL_GPIO_ReadPin>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d119      	bne.n	8001b0a <menu+0x75a>
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <menu+0x8dc>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f083 0301 	eor.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <menu+0x75a>
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <menu+0x8e0>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10e      	bne.n	8001b0a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001aec:	4b69      	ldr	r3, [pc, #420]	; (8001c94 <menu+0x8e4>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b67      	ldr	r3, [pc, #412]	; (8001c94 <menu+0x8e4>)
 8001af6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001af8:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <menu+0x8e4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b0b      	cmp	r3, #11
 8001afe:	d902      	bls.n	8001b06 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001b00:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <menu+0x8e4>)
 8001b02:	220a      	movs	r2, #10
 8001b04:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b06:	f002 fff9 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b0a:	2108      	movs	r1, #8
 8001b0c:	485e      	ldr	r0, [pc, #376]	; (8001c88 <menu+0x8d8>)
 8001b0e:	f007 fc7b 	bl	8009408 <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d153      	bne.n	8001bc0 <menu+0x810>
 8001b18:	4b5c      	ldr	r3, [pc, #368]	; (8001c8c <menu+0x8dc>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d04c      	beq.n	8001bc0 <menu+0x810>
 8001b26:	4b5b      	ldr	r3, [pc, #364]	; (8001c94 <menu+0x8e4>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b0a      	cmp	r3, #10
 8001b2c:	d148      	bne.n	8001bc0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <menu+0x8e8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <menu+0x8ec>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001b3c:	4b58      	ldr	r3, [pc, #352]	; (8001ca0 <menu+0x8f0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <menu+0x8ec>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <menu+0x8f4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <menu+0x8ec>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <menu+0x8f8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	4b4f      	ldr	r3, [pc, #316]	; (8001c9c <menu+0x8ec>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001b66:	4b51      	ldr	r3, [pc, #324]	; (8001cac <menu+0x8fc>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <menu+0x8ec>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001b74:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <menu+0x900>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	4b48      	ldr	r3, [pc, #288]	; (8001c9c <menu+0x8ec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001b82:	4b4c      	ldr	r3, [pc, #304]	; (8001cb4 <menu+0x904>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <menu+0x8ec>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001b90:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <menu+0x908>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <menu+0x8ec>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001b9e:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <menu+0x90c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <menu+0x8ec>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <menu+0x910>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <menu+0x8ec>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001bba:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <menu+0x914>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001bc0:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <menu+0x918>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	f040 80fc 	bne.w	8001dc2 <menu+0xa12>
		if(dilSecim == 0) {
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <menu+0x8d0>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d105      	bne.n	8001bde <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001bd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ccc <menu+0x91c>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f006 f8f0 	bl	8007dbc <lcd_print>
 8001bdc:	e008      	b.n	8001bf0 <menu+0x840>
		} else if(dilSecim == 1) {
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <menu+0x8d0>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d104      	bne.n	8001bf0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001be6:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <menu+0x920>)
 8001be8:	2101      	movs	r1, #1
 8001bea:	2001      	movs	r0, #1
 8001bec:	f006 f8e6 	bl	8007dbc <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <menu+0x8e0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d003      	beq.n	8001c00 <menu+0x850>
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <menu+0x8e0>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d112      	bne.n	8001c26 <menu+0x876>
			if(dilSecim == 0) {
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <menu+0x8d0>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001c08:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <menu+0x924>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f006 f8d5 	bl	8007dbc <lcd_print>
 8001c12:	e008      	b.n	8001c26 <menu+0x876>
			} else if(dilSecim == 1) {
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <menu+0x8d0>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d104      	bne.n	8001c26 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001c1c:	4a2e      	ldr	r2, [pc, #184]	; (8001cd8 <menu+0x928>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	2002      	movs	r0, #2
 8001c22:	f006 f8cb 	bl	8007dbc <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <menu+0x92c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d116      	bne.n	8001c5c <menu+0x8ac>
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <menu+0x8e0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d112      	bne.n	8001c5c <menu+0x8ac>
			if(dilSecim == 0) {
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <menu+0x8d0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001c3e:	4a28      	ldr	r2, [pc, #160]	; (8001ce0 <menu+0x930>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	2002      	movs	r0, #2
 8001c44:	f006 f8ba 	bl	8007dbc <lcd_print>
 8001c48:	e008      	b.n	8001c5c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <menu+0x8d0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d104      	bne.n	8001c5c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001c52:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <menu+0x934>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	2002      	movs	r0, #2
 8001c58:	f006 f8b0 	bl	8007dbc <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <menu+0x92c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d14c      	bne.n	8001cfe <menu+0x94e>
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <menu+0x8e0>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d148      	bne.n	8001cfe <menu+0x94e>
			if(dilSecim == 0) {
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <menu+0x8d0>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d13b      	bne.n	8001cec <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001c74:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <menu+0x938>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f006 f89f 	bl	8007dbc <lcd_print>
 8001c7e:	e03e      	b.n	8001cfe <menu+0x94e>
 8001c80:	20000245 	.word	0x20000245
 8001c84:	0800d2e0 	.word	0x0800d2e0
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	20000253 	.word	0x20000253
 8001c90:	20000233 	.word	0x20000233
 8001c94:	20000226 	.word	0x20000226
 8001c98:	20000246 	.word	0x20000246
 8001c9c:	20000128 	.word	0x20000128
 8001ca0:	20000247 	.word	0x20000247
 8001ca4:	20000248 	.word	0x20000248
 8001ca8:	20000249 	.word	0x20000249
 8001cac:	2000024a 	.word	0x2000024a
 8001cb0:	2000024b 	.word	0x2000024b
 8001cb4:	2000024c 	.word	0x2000024c
 8001cb8:	2000024d 	.word	0x2000024d
 8001cbc:	2000024e 	.word	0x2000024e
 8001cc0:	2000024f 	.word	0x2000024f
 8001cc4:	20000250 	.word	0x20000250
 8001cc8:	20000224 	.word	0x20000224
 8001ccc:	0800d2f4 	.word	0x0800d2f4
 8001cd0:	0800d308 	.word	0x0800d308
 8001cd4:	0800d31c 	.word	0x0800d31c
 8001cd8:	0800d330 	.word	0x0800d330
 8001cdc:	20000225 	.word	0x20000225
 8001ce0:	0800d344 	.word	0x0800d344
 8001ce4:	0800d354 	.word	0x0800d354
 8001ce8:	0800d364 	.word	0x0800d364
			} else if(dilSecim == 1) {
 8001cec:	4b98      	ldr	r3, [pc, #608]	; (8001f50 <menu+0xba0>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d104      	bne.n	8001cfe <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001cf4:	4a97      	ldr	r2, [pc, #604]	; (8001f54 <menu+0xba4>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f006 f85f 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cfe:	2102      	movs	r1, #2
 8001d00:	4895      	ldr	r0, [pc, #596]	; (8001f58 <menu+0xba8>)
 8001d02:	f007 fb81 	bl	8009408 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d119      	bne.n	8001d40 <menu+0x990>
 8001d0c:	4b93      	ldr	r3, [pc, #588]	; (8001f5c <menu+0xbac>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d012      	beq.n	8001d40 <menu+0x990>
 8001d1a:	4b91      	ldr	r3, [pc, #580]	; (8001f60 <menu+0xbb0>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10e      	bne.n	8001d40 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001d22:	4b90      	ldr	r3, [pc, #576]	; (8001f64 <menu+0xbb4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b8e      	ldr	r3, [pc, #568]	; (8001f64 <menu+0xbb4>)
 8001d2c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001d2e:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <menu+0xbb4>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d902      	bls.n	8001d3c <menu+0x98c>
				calismaSekli = 0;
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <menu+0xbb4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d3c:	f002 fede 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d40:	2104      	movs	r1, #4
 8001d42:	4885      	ldr	r0, [pc, #532]	; (8001f58 <menu+0xba8>)
 8001d44:	f007 fb60 	bl	8009408 <HAL_GPIO_ReadPin>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d119      	bne.n	8001d82 <menu+0x9d2>
 8001d4e:	4b83      	ldr	r3, [pc, #524]	; (8001f5c <menu+0xbac>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d012      	beq.n	8001d82 <menu+0x9d2>
 8001d5c:	4b80      	ldr	r3, [pc, #512]	; (8001f60 <menu+0xbb0>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10e      	bne.n	8001d82 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001d64:	4b7f      	ldr	r3, [pc, #508]	; (8001f64 <menu+0xbb4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <menu+0xbb4>)
 8001d6e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d70:	4b7c      	ldr	r3, [pc, #496]	; (8001f64 <menu+0xbb4>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <menu+0x9ce>
	    		calismaSekli = 1;
 8001d78:	4b7a      	ldr	r3, [pc, #488]	; (8001f64 <menu+0xbb4>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d7e:	f002 febd 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d82:	2108      	movs	r1, #8
 8001d84:	4874      	ldr	r0, [pc, #464]	; (8001f58 <menu+0xba8>)
 8001d86:	f007 fb3f 	bl	8009408 <HAL_GPIO_ReadPin>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d118      	bne.n	8001dc2 <menu+0xa12>
 8001d90:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <menu+0xbac>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	f083 0301 	eor.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d011      	beq.n	8001dc2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001d9e:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <menu+0xbb4>)
 8001da0:	781a      	ldrb	r2, [r3, #0]
 8001da2:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <menu+0xbb8>)
 8001da4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001da6:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <menu+0xbb4>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d106      	bne.n	8001dbc <menu+0xa0c>
				altLimit = 1;
 8001dae:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <menu+0xbbc>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001db4:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <menu+0xbbc>)
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	4b6b      	ldr	r3, [pc, #428]	; (8001f68 <menu+0xbb8>)
 8001dba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001dbc:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <menu+0xbc0>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001dc2:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <menu+0xbc4>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	f040 8083 	bne.w	8001ed2 <menu+0xb22>
		if(dilSecim == 0) {
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <menu+0xba0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001dd4:	4a68      	ldr	r2, [pc, #416]	; (8001f78 <menu+0xbc8>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f005 ffef 	bl	8007dbc <lcd_print>
 8001dde:	e008      	b.n	8001df2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001de0:	4b5b      	ldr	r3, [pc, #364]	; (8001f50 <menu+0xba0>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d104      	bne.n	8001df2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001de8:	4a64      	ldr	r2, [pc, #400]	; (8001f7c <menu+0xbcc>)
 8001dea:	2101      	movs	r1, #1
 8001dec:	2001      	movs	r0, #1
 8001dee:	f005 ffe5 	bl	8007dbc <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001df2:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <menu+0xbd0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d113      	bne.n	8001e22 <menu+0xa72>
			if(dilSecim == 0) {
 8001dfa:	4b55      	ldr	r3, [pc, #340]	; (8001f50 <menu+0xba0>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d105      	bne.n	8001e0e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001e02:	4a60      	ldr	r2, [pc, #384]	; (8001f84 <menu+0xbd4>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	2002      	movs	r0, #2
 8001e08:	f005 ffd8 	bl	8007dbc <lcd_print>
 8001e0c:	e012      	b.n	8001e34 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <menu+0xba0>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d10e      	bne.n	8001e34 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001e16:	4a5c      	ldr	r2, [pc, #368]	; (8001f88 <menu+0xbd8>)
 8001e18:	2101      	movs	r1, #1
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f005 ffce 	bl	8007dbc <lcd_print>
 8001e20:	e008      	b.n	8001e34 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001e22:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <menu+0xbd0>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d104      	bne.n	8001e34 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001e2a:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <menu+0xbdc>)
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	2002      	movs	r0, #2
 8001e30:	f005 ffc4 	bl	8007dbc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e34:	2102      	movs	r1, #2
 8001e36:	4848      	ldr	r0, [pc, #288]	; (8001f58 <menu+0xba8>)
 8001e38:	f007 fae6 	bl	8009408 <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d115      	bne.n	8001e6e <menu+0xabe>
 8001e42:	4b46      	ldr	r3, [pc, #280]	; (8001f5c <menu+0xbac>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	f083 0301 	eor.w	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e50:	4b4b      	ldr	r3, [pc, #300]	; (8001f80 <menu+0xbd0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <menu+0xbd0>)
 8001e5a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e5c:	4b48      	ldr	r3, [pc, #288]	; (8001f80 <menu+0xbd0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d902      	bls.n	8001e6a <menu+0xaba>
				emniyetCercevesi = 0;
 8001e64:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <menu+0xbd0>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e6a:	f002 fe47 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e6e:	2104      	movs	r1, #4
 8001e70:	4839      	ldr	r0, [pc, #228]	; (8001f58 <menu+0xba8>)
 8001e72:	f007 fac9 	bl	8009408 <HAL_GPIO_ReadPin>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d115      	bne.n	8001ea8 <menu+0xaf8>
 8001e7c:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <menu+0xbac>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	f083 0301 	eor.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00e      	beq.n	8001ea8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e8a:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <menu+0xbd0>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <menu+0xbd0>)
 8001e94:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <menu+0xbd0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <menu+0xbd0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ea4:	f002 fe2a 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001ea8:	2108      	movs	r1, #8
 8001eaa:	482b      	ldr	r0, [pc, #172]	; (8001f58 <menu+0xba8>)
 8001eac:	f007 faac 	bl	8009408 <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10d      	bne.n	8001ed2 <menu+0xb22>
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <menu+0xbac>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <menu+0xbd0>)
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <menu+0xbb8>)
 8001eca:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <menu+0xbc0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001ed2:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <menu+0xbc4>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	f040 80ba 	bne.w	8002050 <menu+0xca0>
		if(dilSecim == 0) {
 8001edc:	4b1c      	ldr	r3, [pc, #112]	; (8001f50 <menu+0xba0>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <menu+0xbe0>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f005 ff67 	bl	8007dbc <lcd_print>
 8001eee:	e008      	b.n	8001f02 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <menu+0xba0>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d104      	bne.n	8001f02 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001ef8:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <menu+0xbe4>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	2001      	movs	r0, #1
 8001efe:	f005 ff5d 	bl	8007dbc <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <menu+0xbe8>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d113      	bne.n	8001f32 <menu+0xb82>
			if(dilSecim == 0) {
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <menu+0xba0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001f12:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <menu+0xbd4>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	2002      	movs	r0, #2
 8001f18:	f005 ff50 	bl	8007dbc <lcd_print>
 8001f1c:	e049      	b.n	8001fb2 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <menu+0xba0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d145      	bne.n	8001fb2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <menu+0xbd8>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f005 ff46 	bl	8007dbc <lcd_print>
 8001f30:	e03f      	b.n	8001fb2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <menu+0xbe8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d13b      	bne.n	8001fb2 <menu+0xc02>
			if(dilSecim == 0) {
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <menu+0xba0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d12e      	bne.n	8001fa0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <menu+0xbec>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	2002      	movs	r0, #2
 8001f48:	f005 ff38 	bl	8007dbc <lcd_print>
 8001f4c:	e031      	b.n	8001fb2 <menu+0xc02>
 8001f4e:	bf00      	nop
 8001f50:	20000245 	.word	0x20000245
 8001f54:	0800d374 	.word	0x0800d374
 8001f58:	40010800 	.word	0x40010800
 8001f5c:	20000253 	.word	0x20000253
 8001f60:	20000233 	.word	0x20000233
 8001f64:	20000225 	.word	0x20000225
 8001f68:	20000128 	.word	0x20000128
 8001f6c:	2000022a 	.word	0x2000022a
 8001f70:	20000250 	.word	0x20000250
 8001f74:	20000224 	.word	0x20000224
 8001f78:	0800d384 	.word	0x0800d384
 8001f7c:	0800d398 	.word	0x0800d398
 8001f80:	20000228 	.word	0x20000228
 8001f84:	0800d3ac 	.word	0x0800d3ac
 8001f88:	0800d3c0 	.word	0x0800d3c0
 8001f8c:	0800d3d4 	.word	0x0800d3d4
 8001f90:	0800d3e4 	.word	0x0800d3e4
 8001f94:	0800d3f8 	.word	0x0800d3f8
 8001f98:	20000229 	.word	0x20000229
 8001f9c:	0800d40c 	.word	0x0800d40c
			} else if(dilSecim == 1) {
 8001fa0:	4b92      	ldr	r3, [pc, #584]	; (80021ec <menu+0xe3c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d104      	bne.n	8001fb2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001fa8:	4a91      	ldr	r2, [pc, #580]	; (80021f0 <menu+0xe40>)
 8001faa:	2101      	movs	r1, #1
 8001fac:	2002      	movs	r0, #2
 8001fae:	f005 ff05 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	488f      	ldr	r0, [pc, #572]	; (80021f4 <menu+0xe44>)
 8001fb6:	f007 fa27 	bl	8009408 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d115      	bne.n	8001fec <menu+0xc3c>
 8001fc0:	4b8d      	ldr	r3, [pc, #564]	; (80021f8 <menu+0xe48>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00e      	beq.n	8001fec <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <menu+0xe4c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b89      	ldr	r3, [pc, #548]	; (80021fc <menu+0xe4c>)
 8001fd8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001fda:	4b88      	ldr	r3, [pc, #544]	; (80021fc <menu+0xe4c>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d902      	bls.n	8001fe8 <menu+0xc38>
				yavaslamaLimit = 0;
 8001fe2:	4b86      	ldr	r3, [pc, #536]	; (80021fc <menu+0xe4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fe8:	f002 fd88 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fec:	2104      	movs	r1, #4
 8001fee:	4881      	ldr	r0, [pc, #516]	; (80021f4 <menu+0xe44>)
 8001ff0:	f007 fa0a 	bl	8009408 <HAL_GPIO_ReadPin>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d115      	bne.n	8002026 <menu+0xc76>
 8001ffa:	4b7f      	ldr	r3, [pc, #508]	; (80021f8 <menu+0xe48>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	f083 0301 	eor.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002008:	4b7c      	ldr	r3, [pc, #496]	; (80021fc <menu+0xe4c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	3b01      	subs	r3, #1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b7a      	ldr	r3, [pc, #488]	; (80021fc <menu+0xe4c>)
 8002012:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002014:	4b79      	ldr	r3, [pc, #484]	; (80021fc <menu+0xe4c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800201c:	4b77      	ldr	r3, [pc, #476]	; (80021fc <menu+0xe4c>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002022:	f002 fd6b 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002026:	2108      	movs	r1, #8
 8002028:	4872      	ldr	r0, [pc, #456]	; (80021f4 <menu+0xe44>)
 800202a:	f007 f9ed 	bl	8009408 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d10d      	bne.n	8002050 <menu+0xca0>
 8002034:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <menu+0xe48>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002042:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <menu+0xe4c>)
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	4b6e      	ldr	r3, [pc, #440]	; (8002200 <menu+0xe50>)
 8002048:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <menu+0xe54>)
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002050:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <menu+0xe58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b05      	cmp	r3, #5
 8002056:	f040 80b9 	bne.w	80021cc <menu+0xe1c>
		if(dilSecim == 0) {
 800205a:	4b64      	ldr	r3, [pc, #400]	; (80021ec <menu+0xe3c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002062:	4a6a      	ldr	r2, [pc, #424]	; (800220c <menu+0xe5c>)
 8002064:	2101      	movs	r1, #1
 8002066:	2001      	movs	r0, #1
 8002068:	f005 fea8 	bl	8007dbc <lcd_print>
 800206c:	e008      	b.n	8002080 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800206e:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <menu+0xe3c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d104      	bne.n	8002080 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002076:	4a66      	ldr	r2, [pc, #408]	; (8002210 <menu+0xe60>)
 8002078:	2101      	movs	r1, #1
 800207a:	2001      	movs	r0, #1
 800207c:	f005 fe9e 	bl	8007dbc <lcd_print>
		}

		if(altLimit == 0) {
 8002080:	4b64      	ldr	r3, [pc, #400]	; (8002214 <menu+0xe64>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d113      	bne.n	80020b0 <menu+0xd00>
			if(dilSecim == 0) {
 8002088:	4b58      	ldr	r3, [pc, #352]	; (80021ec <menu+0xe3c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002090:	4a61      	ldr	r2, [pc, #388]	; (8002218 <menu+0xe68>)
 8002092:	2101      	movs	r1, #1
 8002094:	2002      	movs	r0, #2
 8002096:	f005 fe91 	bl	8007dbc <lcd_print>
 800209a:	e020      	b.n	80020de <menu+0xd2e>
			} else if(dilSecim == 1) {
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <menu+0xe3c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d11c      	bne.n	80020de <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80020a4:	4a5d      	ldr	r2, [pc, #372]	; (800221c <menu+0xe6c>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	2002      	movs	r0, #2
 80020aa:	f005 fe87 	bl	8007dbc <lcd_print>
 80020ae:	e016      	b.n	80020de <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80020b0:	4b58      	ldr	r3, [pc, #352]	; (8002214 <menu+0xe64>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d112      	bne.n	80020de <menu+0xd2e>
			if(dilSecim == 0){
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <menu+0xe3c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80020c0:	4a57      	ldr	r2, [pc, #348]	; (8002220 <menu+0xe70>)
 80020c2:	2101      	movs	r1, #1
 80020c4:	2002      	movs	r0, #2
 80020c6:	f005 fe79 	bl	8007dbc <lcd_print>
 80020ca:	e008      	b.n	80020de <menu+0xd2e>
			} else if(dilSecim == 1){
 80020cc:	4b47      	ldr	r3, [pc, #284]	; (80021ec <menu+0xe3c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d104      	bne.n	80020de <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80020d4:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <menu+0xe40>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	2002      	movs	r0, #2
 80020da:	f005 fe6f 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80020de:	2102      	movs	r1, #2
 80020e0:	4844      	ldr	r0, [pc, #272]	; (80021f4 <menu+0xe44>)
 80020e2:	f007 f991 	bl	8009408 <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d119      	bne.n	8002120 <menu+0xd70>
 80020ec:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <menu+0xe48>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f083 0301 	eor.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <menu+0xd70>
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <menu+0xe74>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10e      	bne.n	8002120 <menu+0xd70>
			altLimit = altLimit + 1;
 8002102:	4b44      	ldr	r3, [pc, #272]	; (8002214 <menu+0xe64>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4b42      	ldr	r3, [pc, #264]	; (8002214 <menu+0xe64>)
 800210c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <menu+0xe64>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d902      	bls.n	800211c <menu+0xd6c>
				altLimit = 0;
 8002116:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <menu+0xe64>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800211c:	f002 fcee 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002120:	2104      	movs	r1, #4
 8002122:	4834      	ldr	r0, [pc, #208]	; (80021f4 <menu+0xe44>)
 8002124:	f007 f970 	bl	8009408 <HAL_GPIO_ReadPin>
 8002128:	4603      	mov	r3, r0
 800212a:	2b01      	cmp	r3, #1
 800212c:	d119      	bne.n	8002162 <menu+0xdb2>
 800212e:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <menu+0xe48>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f083 0301 	eor.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d012      	beq.n	8002162 <menu+0xdb2>
 800213c:	4b39      	ldr	r3, [pc, #228]	; (8002224 <menu+0xe74>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10e      	bne.n	8002162 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <menu+0xe64>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	3b01      	subs	r3, #1
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <menu+0xe64>)
 800214e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <menu+0xe64>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <menu+0xdae>
		   		altLimit = 1;
 8002158:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <menu+0xe64>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800215e:	f002 fccd 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002162:	2108      	movs	r1, #8
 8002164:	4823      	ldr	r0, [pc, #140]	; (80021f4 <menu+0xe44>)
 8002166:	f007 f94f 	bl	8009408 <HAL_GPIO_ReadPin>
 800216a:	4603      	mov	r3, r0
 800216c:	2b01      	cmp	r3, #1
 800216e:	d12d      	bne.n	80021cc <menu+0xe1c>
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <menu+0xe48>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	f083 0301 	eor.w	r3, r3, #1
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d026      	beq.n	80021cc <menu+0xe1c>
			eepromData[5] = altLimit;
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <menu+0xe64>)
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <menu+0xe50>)
 8002184:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <menu+0xe64>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d110      	bne.n	80021b0 <menu+0xe00>
 800218e:	4b26      	ldr	r3, [pc, #152]	; (8002228 <menu+0xe78>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <menu+0xdee>
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <menu+0xe78>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d108      	bne.n	80021b0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800219e:	4b22      	ldr	r3, [pc, #136]	; (8002228 <menu+0xe78>)
 80021a0:	2203      	movs	r2, #3
 80021a2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <menu+0xe78>)
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <menu+0xe50>)
 80021aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80021ae:	e00a      	b.n	80021c6 <menu+0xe16>
			} else if(altLimit == 0) {
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <menu+0xe64>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <menu+0xe16>
				platformSilindirTipi = 0;
 80021b8:	4b1c      	ldr	r3, [pc, #112]	; (800222c <menu+0xe7c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80021be:	4b1b      	ldr	r3, [pc, #108]	; (800222c <menu+0xe7c>)
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <menu+0xe50>)
 80021c4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <menu+0xe54>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <menu+0xe58>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b06      	cmp	r3, #6
 80021d2:	f040 80b6 	bne.w	8002342 <menu+0xf92>
		if(dilSecim == 0) {
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <menu+0xe3c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d12a      	bne.n	8002234 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80021de:	4a14      	ldr	r2, [pc, #80]	; (8002230 <menu+0xe80>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2001      	movs	r0, #1
 80021e4:	f005 fdea 	bl	8007dbc <lcd_print>
 80021e8:	e02d      	b.n	8002246 <menu+0xe96>
 80021ea:	bf00      	nop
 80021ec:	20000245 	.word	0x20000245
 80021f0:	0800d420 	.word	0x0800d420
 80021f4:	40010800 	.word	0x40010800
 80021f8:	20000253 	.word	0x20000253
 80021fc:	20000229 	.word	0x20000229
 8002200:	20000128 	.word	0x20000128
 8002204:	20000250 	.word	0x20000250
 8002208:	20000224 	.word	0x20000224
 800220c:	0800d434 	.word	0x0800d434
 8002210:	0800d448 	.word	0x0800d448
 8002214:	2000022a 	.word	0x2000022a
 8002218:	0800d3ac 	.word	0x0800d3ac
 800221c:	0800d3c0 	.word	0x0800d3c0
 8002220:	0800d40c 	.word	0x0800d40c
 8002224:	20000225 	.word	0x20000225
 8002228:	20000231 	.word	0x20000231
 800222c:	20000237 	.word	0x20000237
 8002230:	0800d45c 	.word	0x0800d45c
		} else if(dilSecim == 1){
 8002234:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <menu+0x1070>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d104      	bne.n	8002246 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800223c:	4a79      	ldr	r2, [pc, #484]	; (8002424 <menu+0x1074>)
 800223e:	2101      	movs	r1, #1
 8002240:	2001      	movs	r0, #1
 8002242:	f005 fdbb 	bl	8007dbc <lcd_print>
		}
		if(basincSalteri == 0){
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <menu+0x1078>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d113      	bne.n	8002276 <menu+0xec6>
			if(dilSecim == 0) {
 800224e:	4b74      	ldr	r3, [pc, #464]	; (8002420 <menu+0x1070>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002256:	4a75      	ldr	r2, [pc, #468]	; (800242c <menu+0x107c>)
 8002258:	2101      	movs	r1, #1
 800225a:	2002      	movs	r0, #2
 800225c:	f005 fdae 	bl	8007dbc <lcd_print>
 8002260:	e020      	b.n	80022a4 <menu+0xef4>
			} else if(dilSecim == 1){
 8002262:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <menu+0x1070>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d11c      	bne.n	80022a4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800226a:	4a71      	ldr	r2, [pc, #452]	; (8002430 <menu+0x1080>)
 800226c:	2101      	movs	r1, #1
 800226e:	2002      	movs	r0, #2
 8002270:	f005 fda4 	bl	8007dbc <lcd_print>
 8002274:	e016      	b.n	80022a4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <menu+0x1078>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d112      	bne.n	80022a4 <menu+0xef4>
			if(dilSecim == 0) {
 800227e:	4b68      	ldr	r3, [pc, #416]	; (8002420 <menu+0x1070>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002286:	4a6b      	ldr	r2, [pc, #428]	; (8002434 <menu+0x1084>)
 8002288:	2101      	movs	r1, #1
 800228a:	2002      	movs	r0, #2
 800228c:	f005 fd96 	bl	8007dbc <lcd_print>
 8002290:	e008      	b.n	80022a4 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <menu+0x1070>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d104      	bne.n	80022a4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800229a:	4a67      	ldr	r2, [pc, #412]	; (8002438 <menu+0x1088>)
 800229c:	2101      	movs	r1, #1
 800229e:	2002      	movs	r0, #2
 80022a0:	f005 fd8c 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a4:	2102      	movs	r1, #2
 80022a6:	4865      	ldr	r0, [pc, #404]	; (800243c <menu+0x108c>)
 80022a8:	f007 f8ae 	bl	8009408 <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d115      	bne.n	80022de <menu+0xf2e>
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <menu+0x1090>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80022c0:	4b59      	ldr	r3, [pc, #356]	; (8002428 <menu+0x1078>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b57      	ldr	r3, [pc, #348]	; (8002428 <menu+0x1078>)
 80022ca:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80022cc:	4b56      	ldr	r3, [pc, #344]	; (8002428 <menu+0x1078>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d902      	bls.n	80022da <menu+0xf2a>
				basincSalteri = 0;
 80022d4:	4b54      	ldr	r3, [pc, #336]	; (8002428 <menu+0x1078>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022da:	f002 fc0f 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022de:	2104      	movs	r1, #4
 80022e0:	4856      	ldr	r0, [pc, #344]	; (800243c <menu+0x108c>)
 80022e2:	f007 f891 	bl	8009408 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d115      	bne.n	8002318 <menu+0xf68>
 80022ec:	4b54      	ldr	r3, [pc, #336]	; (8002440 <menu+0x1090>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00e      	beq.n	8002318 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80022fa:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <menu+0x1078>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	3b01      	subs	r3, #1
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <menu+0x1078>)
 8002304:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002306:	4b48      	ldr	r3, [pc, #288]	; (8002428 <menu+0x1078>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <menu+0xf64>
		   		basincSalteri = 1;
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <menu+0x1078>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002314:	f002 fbf2 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002318:	2108      	movs	r1, #8
 800231a:	4848      	ldr	r0, [pc, #288]	; (800243c <menu+0x108c>)
 800231c:	f007 f874 	bl	8009408 <HAL_GPIO_ReadPin>
 8002320:	4603      	mov	r3, r0
 8002322:	2b01      	cmp	r3, #1
 8002324:	d10d      	bne.n	8002342 <menu+0xf92>
 8002326:	4b46      	ldr	r3, [pc, #280]	; (8002440 <menu+0x1090>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	f083 0301 	eor.w	r3, r3, #1
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002334:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <menu+0x1078>)
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <menu+0x1094>)
 800233a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <menu+0x1098>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002342:	4b42      	ldr	r3, [pc, #264]	; (800244c <menu+0x109c>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b07      	cmp	r3, #7
 8002348:	f040 80f5 	bne.w	8002536 <menu+0x1186>
		if(dilSecim == 0) {
 800234c:	4b34      	ldr	r3, [pc, #208]	; (8002420 <menu+0x1070>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002354:	4a3e      	ldr	r2, [pc, #248]	; (8002450 <menu+0x10a0>)
 8002356:	2101      	movs	r1, #1
 8002358:	2001      	movs	r0, #1
 800235a:	f005 fd2f 	bl	8007dbc <lcd_print>
 800235e:	e008      	b.n	8002372 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002360:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <menu+0x1070>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d104      	bne.n	8002372 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002368:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <menu+0x10a4>)
 800236a:	2101      	movs	r1, #1
 800236c:	2001      	movs	r0, #1
 800236e:	f005 fd25 	bl	8007dbc <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002372:	4b39      	ldr	r3, [pc, #228]	; (8002458 <menu+0x10a8>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d113      	bne.n	80023a2 <menu+0xff2>
			if(dilSecim == 0) {
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <menu+0x1070>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002382:	4a2a      	ldr	r2, [pc, #168]	; (800242c <menu+0x107c>)
 8002384:	2101      	movs	r1, #1
 8002386:	2002      	movs	r0, #2
 8002388:	f005 fd18 	bl	8007dbc <lcd_print>
 800238c:	e079      	b.n	8002482 <menu+0x10d2>
			} else if(dilSecim == 1){
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <menu+0x1070>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d175      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002396:	4a26      	ldr	r2, [pc, #152]	; (8002430 <menu+0x1080>)
 8002398:	2101      	movs	r1, #1
 800239a:	2002      	movs	r0, #2
 800239c:	f005 fd0e 	bl	8007dbc <lcd_print>
 80023a0:	e06f      	b.n	8002482 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80023a2:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <menu+0x10a8>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d113      	bne.n	80023d2 <menu+0x1022>
			if(dilSecim == 0) {
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <menu+0x1070>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80023b2:	4a2a      	ldr	r2, [pc, #168]	; (800245c <menu+0x10ac>)
 80023b4:	2101      	movs	r1, #1
 80023b6:	2002      	movs	r0, #2
 80023b8:	f005 fd00 	bl	8007dbc <lcd_print>
 80023bc:	e061      	b.n	8002482 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <menu+0x1070>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d15d      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80023c6:	4a26      	ldr	r2, [pc, #152]	; (8002460 <menu+0x10b0>)
 80023c8:	2101      	movs	r1, #1
 80023ca:	2002      	movs	r0, #2
 80023cc:	f005 fcf6 	bl	8007dbc <lcd_print>
 80023d0:	e057      	b.n	8002482 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <menu+0x10a8>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d113      	bne.n	8002402 <menu+0x1052>
			if(dilSecim == 0) {
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <menu+0x1070>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d105      	bne.n	80023ee <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80023e2:	4a20      	ldr	r2, [pc, #128]	; (8002464 <menu+0x10b4>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	2002      	movs	r0, #2
 80023e8:	f005 fce8 	bl	8007dbc <lcd_print>
 80023ec:	e049      	b.n	8002482 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <menu+0x1070>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d145      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <menu+0x10b8>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	2002      	movs	r0, #2
 80023fc:	f005 fcde 	bl	8007dbc <lcd_print>
 8002400:	e03f      	b.n	8002482 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <menu+0x10a8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d13b      	bne.n	8002482 <menu+0x10d2>
			if(dilSecim == 0) {
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <menu+0x1070>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d12e      	bne.n	8002470 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <menu+0x10bc>)
 8002414:	2101      	movs	r1, #1
 8002416:	2002      	movs	r0, #2
 8002418:	f005 fcd0 	bl	8007dbc <lcd_print>
 800241c:	e031      	b.n	8002482 <menu+0x10d2>
 800241e:	bf00      	nop
 8002420:	20000245 	.word	0x20000245
 8002424:	0800d46c 	.word	0x0800d46c
 8002428:	2000022b 	.word	0x2000022b
 800242c:	0800d3ac 	.word	0x0800d3ac
 8002430:	0800d3c0 	.word	0x0800d3c0
 8002434:	0800d40c 	.word	0x0800d40c
 8002438:	0800d420 	.word	0x0800d420
 800243c:	40010800 	.word	0x40010800
 8002440:	20000253 	.word	0x20000253
 8002444:	20000128 	.word	0x20000128
 8002448:	20000250 	.word	0x20000250
 800244c:	20000224 	.word	0x20000224
 8002450:	0800d47c 	.word	0x0800d47c
 8002454:	0800d490 	.word	0x0800d490
 8002458:	2000022c 	.word	0x2000022c
 800245c:	0800d4a4 	.word	0x0800d4a4
 8002460:	0800d4b8 	.word	0x0800d4b8
 8002464:	0800d4cc 	.word	0x0800d4cc
 8002468:	0800d4e0 	.word	0x0800d4e0
 800246c:	0800d4f4 	.word	0x0800d4f4
			} else if(dilSecim == 1){
 8002470:	4b99      	ldr	r3, [pc, #612]	; (80026d8 <menu+0x1328>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d104      	bne.n	8002482 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002478:	4a98      	ldr	r2, [pc, #608]	; (80026dc <menu+0x132c>)
 800247a:	2101      	movs	r1, #1
 800247c:	2002      	movs	r0, #2
 800247e:	f005 fc9d 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002482:	2102      	movs	r1, #2
 8002484:	4896      	ldr	r0, [pc, #600]	; (80026e0 <menu+0x1330>)
 8002486:	f006 ffbf 	bl	8009408 <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d115      	bne.n	80024bc <menu+0x110c>
 8002490:	4b94      	ldr	r3, [pc, #592]	; (80026e4 <menu+0x1334>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	f083 0301 	eor.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00e      	beq.n	80024bc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800249e:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <menu+0x1338>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b90      	ldr	r3, [pc, #576]	; (80026e8 <menu+0x1338>)
 80024a8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80024aa:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <menu+0x1338>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d902      	bls.n	80024b8 <menu+0x1108>
				kapiSecimleri = 0;
 80024b2:	4b8d      	ldr	r3, [pc, #564]	; (80026e8 <menu+0x1338>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024b8:	f002 fb20 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024bc:	2104      	movs	r1, #4
 80024be:	4888      	ldr	r0, [pc, #544]	; (80026e0 <menu+0x1330>)
 80024c0:	f006 ffa2 	bl	8009408 <HAL_GPIO_ReadPin>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d115      	bne.n	80024f6 <menu+0x1146>
 80024ca:	4b86      	ldr	r3, [pc, #536]	; (80026e4 <menu+0x1334>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80024d8:	4b83      	ldr	r3, [pc, #524]	; (80026e8 <menu+0x1338>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	3b01      	subs	r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b81      	ldr	r3, [pc, #516]	; (80026e8 <menu+0x1338>)
 80024e2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80024e4:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <menu+0x1338>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d902      	bls.n	80024f2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80024ec:	4b7e      	ldr	r3, [pc, #504]	; (80026e8 <menu+0x1338>)
 80024ee:	2203      	movs	r2, #3
 80024f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024f2:	f002 fb03 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024f6:	2108      	movs	r1, #8
 80024f8:	4879      	ldr	r0, [pc, #484]	; (80026e0 <menu+0x1330>)
 80024fa:	f006 ff85 	bl	8009408 <HAL_GPIO_ReadPin>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b01      	cmp	r3, #1
 8002502:	d118      	bne.n	8002536 <menu+0x1186>
 8002504:	4b77      	ldr	r3, [pc, #476]	; (80026e4 <menu+0x1334>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d011      	beq.n	8002536 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002512:	4b75      	ldr	r3, [pc, #468]	; (80026e8 <menu+0x1338>)
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	4b75      	ldr	r3, [pc, #468]	; (80026ec <menu+0x133c>)
 8002518:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800251a:	4b73      	ldr	r3, [pc, #460]	; (80026e8 <menu+0x1338>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <menu+0x1180>
				altLimit = 1;
 8002522:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <menu+0x1340>)
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002528:	4b71      	ldr	r3, [pc, #452]	; (80026f0 <menu+0x1340>)
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <menu+0x133c>)
 800252e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002530:	4b70      	ldr	r3, [pc, #448]	; (80026f4 <menu+0x1344>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002536:	4b70      	ldr	r3, [pc, #448]	; (80026f8 <menu+0x1348>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b08      	cmp	r3, #8
 800253c:	f040 8092 	bne.w	8002664 <menu+0x12b4>
		if(dilSecim == 0) {
 8002540:	4b65      	ldr	r3, [pc, #404]	; (80026d8 <menu+0x1328>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002548:	4a6c      	ldr	r2, [pc, #432]	; (80026fc <menu+0x134c>)
 800254a:	2101      	movs	r1, #1
 800254c:	2001      	movs	r0, #1
 800254e:	f005 fc35 	bl	8007dbc <lcd_print>
 8002552:	e008      	b.n	8002566 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002554:	4b60      	ldr	r3, [pc, #384]	; (80026d8 <menu+0x1328>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d104      	bne.n	8002566 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800255c:	4a68      	ldr	r2, [pc, #416]	; (8002700 <menu+0x1350>)
 800255e:	2101      	movs	r1, #1
 8002560:	2001      	movs	r0, #1
 8002562:	f005 fc2b 	bl	8007dbc <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <menu+0x1354>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d113      	bne.n	8002596 <menu+0x11e6>
			if(dilSecim == 0) {
 800256e:	4b5a      	ldr	r3, [pc, #360]	; (80026d8 <menu+0x1328>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002576:	4a64      	ldr	r2, [pc, #400]	; (8002708 <menu+0x1358>)
 8002578:	2101      	movs	r1, #1
 800257a:	2002      	movs	r0, #2
 800257c:	f005 fc1e 	bl	8007dbc <lcd_print>
 8002580:	e020      	b.n	80025c4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002582:	4b55      	ldr	r3, [pc, #340]	; (80026d8 <menu+0x1328>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d11c      	bne.n	80025c4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800258a:	4a60      	ldr	r2, [pc, #384]	; (800270c <menu+0x135c>)
 800258c:	2101      	movs	r1, #1
 800258e:	2002      	movs	r0, #2
 8002590:	f005 fc14 	bl	8007dbc <lcd_print>
 8002594:	e016      	b.n	80025c4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002596:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <menu+0x1354>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d112      	bne.n	80025c4 <menu+0x1214>
			if(dilSecim == 0){
 800259e:	4b4e      	ldr	r3, [pc, #312]	; (80026d8 <menu+0x1328>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80025a6:	4a5a      	ldr	r2, [pc, #360]	; (8002710 <menu+0x1360>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	2002      	movs	r0, #2
 80025ac:	f005 fc06 	bl	8007dbc <lcd_print>
 80025b0:	e008      	b.n	80025c4 <menu+0x1214>
			} else if(dilSecim == 1){
 80025b2:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <menu+0x1328>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d104      	bne.n	80025c4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80025ba:	4a56      	ldr	r2, [pc, #344]	; (8002714 <menu+0x1364>)
 80025bc:	2101      	movs	r1, #1
 80025be:	2002      	movs	r0, #2
 80025c0:	f005 fbfc 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c4:	2102      	movs	r1, #2
 80025c6:	4846      	ldr	r0, [pc, #280]	; (80026e0 <menu+0x1330>)
 80025c8:	f006 ff1e 	bl	8009408 <HAL_GPIO_ReadPin>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d115      	bne.n	80025fe <menu+0x124e>
 80025d2:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <menu+0x1334>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80025e0:	4b48      	ldr	r3, [pc, #288]	; (8002704 <menu+0x1354>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b46      	ldr	r3, [pc, #280]	; (8002704 <menu+0x1354>)
 80025ea:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80025ec:	4b45      	ldr	r3, [pc, #276]	; (8002704 <menu+0x1354>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d902      	bls.n	80025fa <menu+0x124a>
				kapiAcTipi = 0;
 80025f4:	4b43      	ldr	r3, [pc, #268]	; (8002704 <menu+0x1354>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025fa:	f002 fa7f 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fe:	2104      	movs	r1, #4
 8002600:	4837      	ldr	r0, [pc, #220]	; (80026e0 <menu+0x1330>)
 8002602:	f006 ff01 	bl	8009408 <HAL_GPIO_ReadPin>
 8002606:	4603      	mov	r3, r0
 8002608:	2b01      	cmp	r3, #1
 800260a:	d115      	bne.n	8002638 <menu+0x1288>
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <menu+0x1334>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00e      	beq.n	8002638 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800261a:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <menu+0x1354>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	3b01      	subs	r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4b38      	ldr	r3, [pc, #224]	; (8002704 <menu+0x1354>)
 8002624:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <menu+0x1354>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <menu+0x1284>
		   		kapiAcTipi = 1;
 800262e:	4b35      	ldr	r3, [pc, #212]	; (8002704 <menu+0x1354>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002634:	f002 fa62 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002638:	2108      	movs	r1, #8
 800263a:	4829      	ldr	r0, [pc, #164]	; (80026e0 <menu+0x1330>)
 800263c:	f006 fee4 	bl	8009408 <HAL_GPIO_ReadPin>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10e      	bne.n	8002664 <menu+0x12b4>
 8002646:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <menu+0x1334>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	f083 0301 	eor.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002654:	4b2b      	ldr	r3, [pc, #172]	; (8002704 <menu+0x1354>)
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <menu+0x133c>)
 800265a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <menu+0x1344>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <menu+0x1348>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b09      	cmp	r3, #9
 800266a:	f040 80b9 	bne.w	80027e0 <menu+0x1430>
		if(dilSecim == 0){
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <menu+0x1328>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d105      	bne.n	8002682 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002676:	4a28      	ldr	r2, [pc, #160]	; (8002718 <menu+0x1368>)
 8002678:	2101      	movs	r1, #1
 800267a:	2001      	movs	r0, #1
 800267c:	f005 fb9e 	bl	8007dbc <lcd_print>
 8002680:	e008      	b.n	8002694 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <menu+0x1328>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d104      	bne.n	8002694 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800268a:	4a24      	ldr	r2, [pc, #144]	; (800271c <menu+0x136c>)
 800268c:	2101      	movs	r1, #1
 800268e:	2001      	movs	r0, #1
 8002690:	f005 fb94 	bl	8007dbc <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <menu+0x1370>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800269c:	4a21      	ldr	r2, [pc, #132]	; (8002724 <menu+0x1374>)
 800269e:	2101      	movs	r1, #1
 80026a0:	2002      	movs	r0, #2
 80026a2:	f005 fb8b 	bl	8007dbc <lcd_print>
 80026a6:	e04c      	b.n	8002742 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <menu+0x1370>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d13f      	bne.n	8002730 <menu+0x1380>
			if(dilSecim == 0){
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <menu+0x1328>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <menu+0x1378>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	2002      	movs	r0, #2
 80026be:	f005 fb7d 	bl	8007dbc <lcd_print>
 80026c2:	e03e      	b.n	8002742 <menu+0x1392>
			} else if(dilSecim == 1) {
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <menu+0x1328>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d13a      	bne.n	8002742 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80026cc:	4a17      	ldr	r2, [pc, #92]	; (800272c <menu+0x137c>)
 80026ce:	2101      	movs	r1, #1
 80026d0:	2002      	movs	r0, #2
 80026d2:	f005 fb73 	bl	8007dbc <lcd_print>
 80026d6:	e034      	b.n	8002742 <menu+0x1392>
 80026d8:	20000245 	.word	0x20000245
 80026dc:	0800d508 	.word	0x0800d508
 80026e0:	40010800 	.word	0x40010800
 80026e4:	20000253 	.word	0x20000253
 80026e8:	2000022c 	.word	0x2000022c
 80026ec:	20000128 	.word	0x20000128
 80026f0:	2000022a 	.word	0x2000022a
 80026f4:	20000250 	.word	0x20000250
 80026f8:	20000224 	.word	0x20000224
 80026fc:	0800d51c 	.word	0x0800d51c
 8002700:	0800d530 	.word	0x0800d530
 8002704:	20000230 	.word	0x20000230
 8002708:	0800d544 	.word	0x0800d544
 800270c:	0800d554 	.word	0x0800d554
 8002710:	0800d564 	.word	0x0800d564
 8002714:	0800d578 	.word	0x0800d578
 8002718:	0800d58c 	.word	0x0800d58c
 800271c:	0800d5a0 	.word	0x0800d5a0
 8002720:	2000022d 	.word	0x2000022d
 8002724:	0800d5b4 	.word	0x0800d5b4
 8002728:	0800d5c8 	.word	0x0800d5c8
 800272c:	0800d5d8 	.word	0x0800d5d8
			}
		} else if(kapi1Tip == 2) {
 8002730:	4b8a      	ldr	r3, [pc, #552]	; (800295c <menu+0x15ac>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d104      	bne.n	8002742 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002738:	4a89      	ldr	r2, [pc, #548]	; (8002960 <menu+0x15b0>)
 800273a:	2101      	movs	r1, #1
 800273c:	2002      	movs	r0, #2
 800273e:	f005 fb3d 	bl	8007dbc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002742:	2102      	movs	r1, #2
 8002744:	4887      	ldr	r0, [pc, #540]	; (8002964 <menu+0x15b4>)
 8002746:	f006 fe5f 	bl	8009408 <HAL_GPIO_ReadPin>
 800274a:	4603      	mov	r3, r0
 800274c:	2b01      	cmp	r3, #1
 800274e:	d115      	bne.n	800277c <menu+0x13cc>
 8002750:	4b85      	ldr	r3, [pc, #532]	; (8002968 <menu+0x15b8>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	f083 0301 	eor.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00e      	beq.n	800277c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800275e:	4b7f      	ldr	r3, [pc, #508]	; (800295c <menu+0x15ac>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b7d      	ldr	r3, [pc, #500]	; (800295c <menu+0x15ac>)
 8002768:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800276a:	4b7c      	ldr	r3, [pc, #496]	; (800295c <menu+0x15ac>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <menu+0x13c8>
				kapi1Tip = 0;
 8002772:	4b7a      	ldr	r3, [pc, #488]	; (800295c <menu+0x15ac>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002778:	f002 f9c0 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800277c:	2104      	movs	r1, #4
 800277e:	4879      	ldr	r0, [pc, #484]	; (8002964 <menu+0x15b4>)
 8002780:	f006 fe42 	bl	8009408 <HAL_GPIO_ReadPin>
 8002784:	4603      	mov	r3, r0
 8002786:	2b01      	cmp	r3, #1
 8002788:	d115      	bne.n	80027b6 <menu+0x1406>
 800278a:	4b77      	ldr	r3, [pc, #476]	; (8002968 <menu+0x15b8>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	f083 0301 	eor.w	r3, r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00e      	beq.n	80027b6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002798:	4b70      	ldr	r3, [pc, #448]	; (800295c <menu+0x15ac>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	3b01      	subs	r3, #1
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b6e      	ldr	r3, [pc, #440]	; (800295c <menu+0x15ac>)
 80027a2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80027a4:	4b6d      	ldr	r3, [pc, #436]	; (800295c <menu+0x15ac>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d902      	bls.n	80027b2 <menu+0x1402>
		   		kapi1Tip = 2;
 80027ac:	4b6b      	ldr	r3, [pc, #428]	; (800295c <menu+0x15ac>)
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027b2:	f002 f9a3 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b6:	2108      	movs	r1, #8
 80027b8:	486a      	ldr	r0, [pc, #424]	; (8002964 <menu+0x15b4>)
 80027ba:	f006 fe25 	bl	8009408 <HAL_GPIO_ReadPin>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d10d      	bne.n	80027e0 <menu+0x1430>
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <menu+0x15b8>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	f083 0301 	eor.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80027d2:	4b62      	ldr	r3, [pc, #392]	; (800295c <menu+0x15ac>)
 80027d4:	781a      	ldrb	r2, [r3, #0]
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <menu+0x15bc>)
 80027d8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <menu+0x15c0>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <menu+0x15c4>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b0a      	cmp	r3, #10
 80027e6:	d17f      	bne.n	80028e8 <menu+0x1538>
		if(dilSecim == 0) {
 80027e8:	4b63      	ldr	r3, [pc, #396]	; (8002978 <menu+0x15c8>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80027f0:	4a62      	ldr	r2, [pc, #392]	; (800297c <menu+0x15cc>)
 80027f2:	2101      	movs	r1, #1
 80027f4:	2001      	movs	r0, #1
 80027f6:	f005 fae1 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80027fa:	4a61      	ldr	r2, [pc, #388]	; (8002980 <menu+0x15d0>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	2002      	movs	r0, #2
 8002800:	f005 fadc 	bl	8007dbc <lcd_print>
 8002804:	e00d      	b.n	8002822 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002806:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <menu+0x15c8>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d109      	bne.n	8002822 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800280e:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <menu+0x15d4>)
 8002810:	2101      	movs	r1, #1
 8002812:	2001      	movs	r0, #1
 8002814:	f005 fad2 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002818:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <menu+0x15d8>)
 800281a:	2101      	movs	r1, #1
 800281c:	2002      	movs	r0, #2
 800281e:	f005 facd 	bl	8007dbc <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002822:	4b5a      	ldr	r3, [pc, #360]	; (800298c <menu+0x15dc>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	220a      	movs	r2, #10
 8002828:	4959      	ldr	r1, [pc, #356]	; (8002990 <menu+0x15e0>)
 800282a:	4618      	mov	r0, r3
 800282c:	f009 fe18 	bl	800c460 <itoa>
		lcd_print(2,16,snum);
 8002830:	4a57      	ldr	r2, [pc, #348]	; (8002990 <menu+0x15e0>)
 8002832:	2110      	movs	r1, #16
 8002834:	2002      	movs	r0, #2
 8002836:	f005 fac1 	bl	8007dbc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800283a:	2102      	movs	r1, #2
 800283c:	4849      	ldr	r0, [pc, #292]	; (8002964 <menu+0x15b4>)
 800283e:	f006 fde3 	bl	8009408 <HAL_GPIO_ReadPin>
 8002842:	4603      	mov	r3, r0
 8002844:	2b01      	cmp	r3, #1
 8002846:	d119      	bne.n	800287c <menu+0x14cc>
 8002848:	4b47      	ldr	r3, [pc, #284]	; (8002968 <menu+0x15b8>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f083 0301 	eor.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <menu+0x14cc>
 8002856:	4b41      	ldr	r3, [pc, #260]	; (800295c <menu+0x15ac>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10e      	bne.n	800287c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800285e:	4b4b      	ldr	r3, [pc, #300]	; (800298c <menu+0x15dc>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4b49      	ldr	r3, [pc, #292]	; (800298c <menu+0x15dc>)
 8002868:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800286a:	4b48      	ldr	r3, [pc, #288]	; (800298c <menu+0x15dc>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d902      	bls.n	8002878 <menu+0x14c8>
				kapi1AcSure = 0;
 8002872:	4b46      	ldr	r3, [pc, #280]	; (800298c <menu+0x15dc>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002878:	f002 f940 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800287c:	2104      	movs	r1, #4
 800287e:	4839      	ldr	r0, [pc, #228]	; (8002964 <menu+0x15b4>)
 8002880:	f006 fdc2 	bl	8009408 <HAL_GPIO_ReadPin>
 8002884:	4603      	mov	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d119      	bne.n	80028be <menu+0x150e>
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <menu+0x15b8>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f083 0301 	eor.w	r3, r3, #1
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d012      	beq.n	80028be <menu+0x150e>
 8002898:	4b30      	ldr	r3, [pc, #192]	; (800295c <menu+0x15ac>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10e      	bne.n	80028be <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80028a0:	4b3a      	ldr	r3, [pc, #232]	; (800298c <menu+0x15dc>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b38      	ldr	r3, [pc, #224]	; (800298c <menu+0x15dc>)
 80028aa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80028ac:	4b37      	ldr	r3, [pc, #220]	; (800298c <menu+0x15dc>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b06      	cmp	r3, #6
 80028b2:	d902      	bls.n	80028ba <menu+0x150a>
		   		kapi1AcSure = 5;
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <menu+0x15dc>)
 80028b6:	2205      	movs	r2, #5
 80028b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028ba:	f002 f91f 	bl	8004afc <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028be:	2108      	movs	r1, #8
 80028c0:	4828      	ldr	r0, [pc, #160]	; (8002964 <menu+0x15b4>)
 80028c2:	f006 fda1 	bl	8009408 <HAL_GPIO_ReadPin>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10d      	bne.n	80028e8 <menu+0x1538>
 80028cc:	4b26      	ldr	r3, [pc, #152]	; (8002968 <menu+0x15b8>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <menu+0x15dc>)
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	4b23      	ldr	r3, [pc, #140]	; (800296c <menu+0x15bc>)
 80028e0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <menu+0x15c0>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80028e8:	4b22      	ldr	r3, [pc, #136]	; (8002974 <menu+0x15c4>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b0b      	cmp	r3, #11
 80028ee:	f040 80b5 	bne.w	8002a5c <menu+0x16ac>
		if(dilSecim == 0) {
 80028f2:	4b21      	ldr	r3, [pc, #132]	; (8002978 <menu+0x15c8>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <menu+0x15e4>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	2001      	movs	r0, #1
 8002900:	f005 fa5c 	bl	8007dbc <lcd_print>
 8002904:	e008      	b.n	8002918 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <menu+0x15c8>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d104      	bne.n	8002918 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <menu+0x15e8>)
 8002910:	2101      	movs	r1, #1
 8002912:	2001      	movs	r0, #1
 8002914:	f005 fa52 	bl	8007dbc <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002918:	4b20      	ldr	r3, [pc, #128]	; (800299c <menu+0x15ec>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002920:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <menu+0x15f0>)
 8002922:	2101      	movs	r1, #1
 8002924:	2002      	movs	r0, #2
 8002926:	f005 fa49 	bl	8007dbc <lcd_print>
 800292a:	e048      	b.n	80029be <menu+0x160e>
		} else if(kapi2Tip == 1) {
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <menu+0x15ec>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d13b      	bne.n	80029ac <menu+0x15fc>
			if(dilSecim == 0) {
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <menu+0x15c8>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 800293c:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <menu+0x15f4>)
 800293e:	2101      	movs	r1, #1
 8002940:	2002      	movs	r0, #2
 8002942:	f005 fa3b 	bl	8007dbc <lcd_print>
 8002946:	e03a      	b.n	80029be <menu+0x160e>
			} else if(dilSecim == 1) {
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <menu+0x15c8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d136      	bne.n	80029be <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <menu+0x15f8>)
 8002952:	2101      	movs	r1, #1
 8002954:	2002      	movs	r0, #2
 8002956:	f005 fa31 	bl	8007dbc <lcd_print>
 800295a:	e030      	b.n	80029be <menu+0x160e>
 800295c:	2000022d 	.word	0x2000022d
 8002960:	0800d5ec 	.word	0x0800d5ec
 8002964:	40010800 	.word	0x40010800
 8002968:	20000253 	.word	0x20000253
 800296c:	20000128 	.word	0x20000128
 8002970:	20000250 	.word	0x20000250
 8002974:	20000224 	.word	0x20000224
 8002978:	20000245 	.word	0x20000245
 800297c:	0800d5fc 	.word	0x0800d5fc
 8002980:	0800d610 	.word	0x0800d610
 8002984:	0800d620 	.word	0x0800d620
 8002988:	0800d634 	.word	0x0800d634
 800298c:	2000023d 	.word	0x2000023d
 8002990:	20000198 	.word	0x20000198
 8002994:	0800d644 	.word	0x0800d644
 8002998:	0800d658 	.word	0x0800d658
 800299c:	2000022e 	.word	0x2000022e
 80029a0:	0800d5b4 	.word	0x0800d5b4
 80029a4:	0800d5c8 	.word	0x0800d5c8
 80029a8:	0800d5d8 	.word	0x0800d5d8
			}
		} else if(kapi2Tip == 2) {
 80029ac:	4b8a      	ldr	r3, [pc, #552]	; (8002bd8 <menu+0x1828>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d104      	bne.n	80029be <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 80029b4:	4a89      	ldr	r2, [pc, #548]	; (8002bdc <menu+0x182c>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	2002      	movs	r0, #2
 80029ba:	f005 f9ff 	bl	8007dbc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029be:	2102      	movs	r1, #2
 80029c0:	4887      	ldr	r0, [pc, #540]	; (8002be0 <menu+0x1830>)
 80029c2:	f006 fd21 	bl	8009408 <HAL_GPIO_ReadPin>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d115      	bne.n	80029f8 <menu+0x1648>
 80029cc:	4b85      	ldr	r3, [pc, #532]	; (8002be4 <menu+0x1834>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	f083 0301 	eor.w	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00e      	beq.n	80029f8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 80029da:	4b7f      	ldr	r3, [pc, #508]	; (8002bd8 <menu+0x1828>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b7d      	ldr	r3, [pc, #500]	; (8002bd8 <menu+0x1828>)
 80029e4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80029e6:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <menu+0x1828>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <menu+0x1644>
				kapi2Tip = 0;
 80029ee:	4b7a      	ldr	r3, [pc, #488]	; (8002bd8 <menu+0x1828>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f4:	f002 f882 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f8:	2104      	movs	r1, #4
 80029fa:	4879      	ldr	r0, [pc, #484]	; (8002be0 <menu+0x1830>)
 80029fc:	f006 fd04 	bl	8009408 <HAL_GPIO_ReadPin>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d115      	bne.n	8002a32 <menu+0x1682>
 8002a06:	4b77      	ldr	r3, [pc, #476]	; (8002be4 <menu+0x1834>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002a14:	4b70      	ldr	r3, [pc, #448]	; (8002bd8 <menu+0x1828>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b6e      	ldr	r3, [pc, #440]	; (8002bd8 <menu+0x1828>)
 8002a1e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002a20:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <menu+0x1828>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d902      	bls.n	8002a2e <menu+0x167e>
		   		kapi2Tip = 2;
 8002a28:	4b6b      	ldr	r3, [pc, #428]	; (8002bd8 <menu+0x1828>)
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a2e:	f002 f865 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a32:	2108      	movs	r1, #8
 8002a34:	486a      	ldr	r0, [pc, #424]	; (8002be0 <menu+0x1830>)
 8002a36:	f006 fce7 	bl	8009408 <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d10d      	bne.n	8002a5c <menu+0x16ac>
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <menu+0x1834>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002a4e:	4b62      	ldr	r3, [pc, #392]	; (8002bd8 <menu+0x1828>)
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	4b65      	ldr	r3, [pc, #404]	; (8002be8 <menu+0x1838>)
 8002a54:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <menu+0x183c>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002a5c:	4b64      	ldr	r3, [pc, #400]	; (8002bf0 <menu+0x1840>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b0c      	cmp	r3, #12
 8002a62:	d17f      	bne.n	8002b64 <menu+0x17b4>
		if(dilSecim == 0) {
 8002a64:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <menu+0x1844>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002a6c:	4a62      	ldr	r2, [pc, #392]	; (8002bf8 <menu+0x1848>)
 8002a6e:	2101      	movs	r1, #1
 8002a70:	2001      	movs	r0, #1
 8002a72:	f005 f9a3 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a76:	4a61      	ldr	r2, [pc, #388]	; (8002bfc <menu+0x184c>)
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f005 f99e 	bl	8007dbc <lcd_print>
 8002a80:	e00d      	b.n	8002a9e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002a82:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <menu+0x1844>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d109      	bne.n	8002a9e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002a8a:	4a5d      	ldr	r2, [pc, #372]	; (8002c00 <menu+0x1850>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f005 f994 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a94:	4a5b      	ldr	r2, [pc, #364]	; (8002c04 <menu+0x1854>)
 8002a96:	2101      	movs	r1, #1
 8002a98:	2002      	movs	r0, #2
 8002a9a:	f005 f98f 	bl	8007dbc <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002a9e:	4b5a      	ldr	r3, [pc, #360]	; (8002c08 <menu+0x1858>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	220a      	movs	r2, #10
 8002aa4:	4959      	ldr	r1, [pc, #356]	; (8002c0c <menu+0x185c>)
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f009 fcda 	bl	800c460 <itoa>
		lcd_print(2,16,snum);
 8002aac:	4a57      	ldr	r2, [pc, #348]	; (8002c0c <menu+0x185c>)
 8002aae:	2110      	movs	r1, #16
 8002ab0:	2002      	movs	r0, #2
 8002ab2:	f005 f983 	bl	8007dbc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4849      	ldr	r0, [pc, #292]	; (8002be0 <menu+0x1830>)
 8002aba:	f006 fca5 	bl	8009408 <HAL_GPIO_ReadPin>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d119      	bne.n	8002af8 <menu+0x1748>
 8002ac4:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <menu+0x1834>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d012      	beq.n	8002af8 <menu+0x1748>
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <menu+0x1828>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002ada:	4b4b      	ldr	r3, [pc, #300]	; (8002c08 <menu+0x1858>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b49      	ldr	r3, [pc, #292]	; (8002c08 <menu+0x1858>)
 8002ae4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002ae6:	4b48      	ldr	r3, [pc, #288]	; (8002c08 <menu+0x1858>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d902      	bls.n	8002af4 <menu+0x1744>
				kapi2AcSure = 0;
 8002aee:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <menu+0x1858>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002af4:	f002 f802 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002af8:	2104      	movs	r1, #4
 8002afa:	4839      	ldr	r0, [pc, #228]	; (8002be0 <menu+0x1830>)
 8002afc:	f006 fc84 	bl	8009408 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d119      	bne.n	8002b3a <menu+0x178a>
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <menu+0x1834>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <menu+0x178a>
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <menu+0x1828>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10e      	bne.n	8002b3a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002b1c:	4b3a      	ldr	r3, [pc, #232]	; (8002c08 <menu+0x1858>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	4b38      	ldr	r3, [pc, #224]	; (8002c08 <menu+0x1858>)
 8002b26:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002b28:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <menu+0x1858>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d902      	bls.n	8002b36 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002b30:	4b35      	ldr	r3, [pc, #212]	; (8002c08 <menu+0x1858>)
 8002b32:	2205      	movs	r2, #5
 8002b34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b36:	f001 ffe1 	bl	8004afc <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3a:	2108      	movs	r1, #8
 8002b3c:	4828      	ldr	r0, [pc, #160]	; (8002be0 <menu+0x1830>)
 8002b3e:	f006 fc63 	bl	8009408 <HAL_GPIO_ReadPin>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10d      	bne.n	8002b64 <menu+0x17b4>
 8002b48:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <menu+0x1834>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f083 0301 	eor.w	r3, r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d006      	beq.n	8002b64 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002b56:	4b2c      	ldr	r3, [pc, #176]	; (8002c08 <menu+0x1858>)
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <menu+0x1838>)
 8002b5c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002b5e:	4b23      	ldr	r3, [pc, #140]	; (8002bec <menu+0x183c>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <menu+0x1840>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b0d      	cmp	r3, #13
 8002b6a:	f040 80b5 	bne.w	8002cd8 <menu+0x1928>
		if(dilSecim == 0) {
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <menu+0x1844>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002b76:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <menu+0x1860>)
 8002b78:	2101      	movs	r1, #1
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f005 f91e 	bl	8007dbc <lcd_print>
 8002b80:	e008      	b.n	8002b94 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <menu+0x1844>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d104      	bne.n	8002b94 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002b8a:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <menu+0x1864>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f005 f914 	bl	8007dbc <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002b94:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <menu+0x1868>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002b9c:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <menu+0x186c>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f005 f90b 	bl	8007dbc <lcd_print>
 8002ba6:	e048      	b.n	8002c3a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <menu+0x1868>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d13b      	bne.n	8002c28 <menu+0x1878>
			if(dilSecim == 0) {
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <menu+0x1844>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <menu+0x1870>)
 8002bba:	2101      	movs	r1, #1
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	f005 f8fd 	bl	8007dbc <lcd_print>
 8002bc2:	e03a      	b.n	8002c3a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <menu+0x1844>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d136      	bne.n	8002c3a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <menu+0x1874>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f005 f8f3 	bl	8007dbc <lcd_print>
 8002bd6:	e030      	b.n	8002c3a <menu+0x188a>
 8002bd8:	2000022e 	.word	0x2000022e
 8002bdc:	0800d5ec 	.word	0x0800d5ec
 8002be0:	40010800 	.word	0x40010800
 8002be4:	20000253 	.word	0x20000253
 8002be8:	20000128 	.word	0x20000128
 8002bec:	20000250 	.word	0x20000250
 8002bf0:	20000224 	.word	0x20000224
 8002bf4:	20000245 	.word	0x20000245
 8002bf8:	0800d66c 	.word	0x0800d66c
 8002bfc:	0800d610 	.word	0x0800d610
 8002c00:	0800d680 	.word	0x0800d680
 8002c04:	0800d634 	.word	0x0800d634
 8002c08:	2000023e 	.word	0x2000023e
 8002c0c:	20000198 	.word	0x20000198
 8002c10:	0800d694 	.word	0x0800d694
 8002c14:	0800d6a8 	.word	0x0800d6a8
 8002c18:	2000022f 	.word	0x2000022f
 8002c1c:	0800d5b4 	.word	0x0800d5b4
 8002c20:	0800d5c8 	.word	0x0800d5c8
 8002c24:	0800d5d8 	.word	0x0800d5d8
			}
		} else if(kapitablaTip == 2) {
 8002c28:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <menu+0x19e8>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d104      	bne.n	8002c3a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002c30:	4a5a      	ldr	r2, [pc, #360]	; (8002d9c <menu+0x19ec>)
 8002c32:	2101      	movs	r1, #1
 8002c34:	2002      	movs	r0, #2
 8002c36:	f005 f8c1 	bl	8007dbc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4858      	ldr	r0, [pc, #352]	; (8002da0 <menu+0x19f0>)
 8002c3e:	f006 fbe3 	bl	8009408 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d115      	bne.n	8002c74 <menu+0x18c4>
 8002c48:	4b56      	ldr	r3, [pc, #344]	; (8002da4 <menu+0x19f4>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f083 0301 	eor.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00e      	beq.n	8002c74 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002c56:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <menu+0x19e8>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <menu+0x19e8>)
 8002c60:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002c62:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <menu+0x19e8>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d902      	bls.n	8002c70 <menu+0x18c0>
				kapitablaTip = 0;
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <menu+0x19e8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c70:	f001 ff44 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c74:	2104      	movs	r1, #4
 8002c76:	484a      	ldr	r0, [pc, #296]	; (8002da0 <menu+0x19f0>)
 8002c78:	f006 fbc6 	bl	8009408 <HAL_GPIO_ReadPin>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d115      	bne.n	8002cae <menu+0x18fe>
 8002c82:	4b48      	ldr	r3, [pc, #288]	; (8002da4 <menu+0x19f4>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	f083 0301 	eor.w	r3, r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00e      	beq.n	8002cae <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002c90:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <menu+0x19e8>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b3f      	ldr	r3, [pc, #252]	; (8002d98 <menu+0x19e8>)
 8002c9a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002c9c:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <menu+0x19e8>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d902      	bls.n	8002caa <menu+0x18fa>
		   		kapitablaTip = 2;
 8002ca4:	4b3c      	ldr	r3, [pc, #240]	; (8002d98 <menu+0x19e8>)
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002caa:	f001 ff27 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cae:	2108      	movs	r1, #8
 8002cb0:	483b      	ldr	r0, [pc, #236]	; (8002da0 <menu+0x19f0>)
 8002cb2:	f006 fba9 	bl	8009408 <HAL_GPIO_ReadPin>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10d      	bne.n	8002cd8 <menu+0x1928>
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <menu+0x19f4>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	f083 0301 	eor.w	r3, r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002cca:	4b33      	ldr	r3, [pc, #204]	; (8002d98 <menu+0x19e8>)
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <menu+0x19f8>)
 8002cd0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <menu+0x19fc>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002cd8:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <menu+0x1a00>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b0e      	cmp	r3, #14
 8002cde:	f040 80f2 	bne.w	8002ec6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <menu+0x1a04>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <menu+0x1a08>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f005 f864 	bl	8007dbc <lcd_print>
 8002cf4:	e008      	b.n	8002d08 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <menu+0x1a04>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d104      	bne.n	8002d08 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002cfe:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <menu+0x1a0c>)
 8002d00:	2101      	movs	r1, #1
 8002d02:	2001      	movs	r0, #1
 8002d04:	f005 f85a 	bl	8007dbc <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <menu+0x1a10>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d113      	bne.n	8002d38 <menu+0x1988>
			if(dilSecim == 0){
 8002d10:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <menu+0x1a04>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002d18:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <menu+0x1a14>)
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f005 f84d 	bl	8007dbc <lcd_print>
 8002d22:	e071      	b.n	8002e08 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d24:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <menu+0x1a04>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d16d      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <menu+0x1a18>)
 8002d2e:	2101      	movs	r1, #1
 8002d30:	2002      	movs	r0, #2
 8002d32:	f005 f843 	bl	8007dbc <lcd_print>
 8002d36:	e067      	b.n	8002e08 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <menu+0x1a10>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d112      	bne.n	8002d66 <menu+0x19b6>
			if(dilSecim == 0){
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <menu+0x1a04>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002d48:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <menu+0x1a1c>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	f005 f835 	bl	8007dbc <lcd_print>
			}
			if(dilSecim == 1){
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <menu+0x1a04>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d156      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002d5a:	4a1d      	ldr	r2, [pc, #116]	; (8002dd0 <menu+0x1a20>)
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	2002      	movs	r0, #2
 8002d60:	f005 f82c 	bl	8007dbc <lcd_print>
 8002d64:	e050      	b.n	8002e08 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <menu+0x1a10>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d136      	bne.n	8002ddc <menu+0x1a2c>
			if(dilSecim == 0){
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <menu+0x1a04>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <menu+0x1a24>)
 8002d78:	2101      	movs	r1, #1
 8002d7a:	2002      	movs	r0, #2
 8002d7c:	f005 f81e 	bl	8007dbc <lcd_print>
 8002d80:	e042      	b.n	8002e08 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <menu+0x1a04>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d13e      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002d8a:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <menu+0x1a28>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2002      	movs	r0, #2
 8002d90:	f005 f814 	bl	8007dbc <lcd_print>
 8002d94:	e038      	b.n	8002e08 <menu+0x1a58>
 8002d96:	bf00      	nop
 8002d98:	2000022f 	.word	0x2000022f
 8002d9c:	0800d5ec 	.word	0x0800d5ec
 8002da0:	40010800 	.word	0x40010800
 8002da4:	20000253 	.word	0x20000253
 8002da8:	20000128 	.word	0x20000128
 8002dac:	20000250 	.word	0x20000250
 8002db0:	20000224 	.word	0x20000224
 8002db4:	20000245 	.word	0x20000245
 8002db8:	0800d6bc 	.word	0x0800d6bc
 8002dbc:	0800d6d0 	.word	0x0800d6d0
 8002dc0:	20000231 	.word	0x20000231
 8002dc4:	0800d6e4 	.word	0x0800d6e4
 8002dc8:	0800d6f4 	.word	0x0800d6f4
 8002dcc:	0800d704 	.word	0x0800d704
 8002dd0:	0800d714 	.word	0x0800d714
 8002dd4:	0800d724 	.word	0x0800d724
 8002dd8:	0800d738 	.word	0x0800d738
			}
		} else if(kapiTablaAcKonum == 3) {
 8002ddc:	4b9b      	ldr	r3, [pc, #620]	; (800304c <menu+0x1c9c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d111      	bne.n	8002e08 <menu+0x1a58>
			if(dilSecim == 0) {
 8002de4:	4b9a      	ldr	r3, [pc, #616]	; (8003050 <menu+0x1ca0>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002dec:	4a99      	ldr	r2, [pc, #612]	; (8003054 <menu+0x1ca4>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	2002      	movs	r0, #2
 8002df2:	f004 ffe3 	bl	8007dbc <lcd_print>
			}
			if(dilSecim == 1) {
 8002df6:	4b96      	ldr	r3, [pc, #600]	; (8003050 <menu+0x1ca0>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d104      	bne.n	8002e08 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002dfe:	4a96      	ldr	r2, [pc, #600]	; (8003058 <menu+0x1ca8>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	2002      	movs	r0, #2
 8002e04:	f004 ffda 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e08:	2102      	movs	r1, #2
 8002e0a:	4894      	ldr	r0, [pc, #592]	; (800305c <menu+0x1cac>)
 8002e0c:	f006 fafc 	bl	8009408 <HAL_GPIO_ReadPin>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d115      	bne.n	8002e42 <menu+0x1a92>
 8002e16:	4b92      	ldr	r3, [pc, #584]	; (8003060 <menu+0x1cb0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f083 0301 	eor.w	r3, r3, #1
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00e      	beq.n	8002e42 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002e24:	4b89      	ldr	r3, [pc, #548]	; (800304c <menu+0x1c9c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b87      	ldr	r3, [pc, #540]	; (800304c <menu+0x1c9c>)
 8002e2e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002e30:	4b86      	ldr	r3, [pc, #536]	; (800304c <menu+0x1c9c>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d902      	bls.n	8002e3e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002e38:	4b84      	ldr	r3, [pc, #528]	; (800304c <menu+0x1c9c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e3e:	f001 fe5d 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e42:	2104      	movs	r1, #4
 8002e44:	4885      	ldr	r0, [pc, #532]	; (800305c <menu+0x1cac>)
 8002e46:	f006 fadf 	bl	8009408 <HAL_GPIO_ReadPin>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d115      	bne.n	8002e7c <menu+0x1acc>
 8002e50:	4b83      	ldr	r3, [pc, #524]	; (8003060 <menu+0x1cb0>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	f083 0301 	eor.w	r3, r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00e      	beq.n	8002e7c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002e5e:	4b7b      	ldr	r3, [pc, #492]	; (800304c <menu+0x1c9c>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b79      	ldr	r3, [pc, #484]	; (800304c <menu+0x1c9c>)
 8002e68:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002e6a:	4b78      	ldr	r3, [pc, #480]	; (800304c <menu+0x1c9c>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d902      	bls.n	8002e78 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002e72:	4b76      	ldr	r3, [pc, #472]	; (800304c <menu+0x1c9c>)
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e78:	f001 fe40 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e7c:	2108      	movs	r1, #8
 8002e7e:	4877      	ldr	r0, [pc, #476]	; (800305c <menu+0x1cac>)
 8002e80:	f006 fac2 	bl	8009408 <HAL_GPIO_ReadPin>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d11d      	bne.n	8002ec6 <menu+0x1b16>
 8002e8a:	4b75      	ldr	r3, [pc, #468]	; (8003060 <menu+0x1cb0>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	f083 0301 	eor.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d016      	beq.n	8002ec6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002e98:	4b6c      	ldr	r3, [pc, #432]	; (800304c <menu+0x1c9c>)
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	4b71      	ldr	r3, [pc, #452]	; (8003064 <menu+0x1cb4>)
 8002e9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002ea2:	4b6a      	ldr	r3, [pc, #424]	; (800304c <menu+0x1c9c>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <menu+0x1b02>
 8002eaa:	4b68      	ldr	r3, [pc, #416]	; (800304c <menu+0x1c9c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d106      	bne.n	8002ec0 <menu+0x1b10>
				altLimit = 1;
 8002eb2:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <menu+0x1cb8>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002eb8:	4b6b      	ldr	r3, [pc, #428]	; (8003068 <menu+0x1cb8>)
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	4b69      	ldr	r3, [pc, #420]	; (8003064 <menu+0x1cb4>)
 8002ebe:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002ec0:	4b6a      	ldr	r3, [pc, #424]	; (800306c <menu+0x1cbc>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <menu+0x1cc0>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	d17f      	bne.n	8002fce <menu+0x1c1e>
		if(dilSecim == 0) {
 8002ece:	4b60      	ldr	r3, [pc, #384]	; (8003050 <menu+0x1ca0>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10a      	bne.n	8002eec <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002ed6:	4a67      	ldr	r2, [pc, #412]	; (8003074 <menu+0x1cc4>)
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2001      	movs	r0, #1
 8002edc:	f004 ff6e 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002ee0:	4a65      	ldr	r2, [pc, #404]	; (8003078 <menu+0x1cc8>)
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	2002      	movs	r0, #2
 8002ee6:	f004 ff69 	bl	8007dbc <lcd_print>
 8002eea:	e00d      	b.n	8002f08 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002eec:	4b58      	ldr	r3, [pc, #352]	; (8003050 <menu+0x1ca0>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d109      	bne.n	8002f08 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002ef4:	4a61      	ldr	r2, [pc, #388]	; (800307c <menu+0x1ccc>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f004 ff5f 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002efe:	4a60      	ldr	r2, [pc, #384]	; (8003080 <menu+0x1cd0>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	2002      	movs	r0, #2
 8002f04:	f004 ff5a 	bl	8007dbc <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002f08:	4b5e      	ldr	r3, [pc, #376]	; (8003084 <menu+0x1cd4>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	220a      	movs	r2, #10
 8002f0e:	495e      	ldr	r1, [pc, #376]	; (8003088 <menu+0x1cd8>)
 8002f10:	4618      	mov	r0, r3
 8002f12:	f009 faa5 	bl	800c460 <itoa>
		lcd_print(2,16,snum);
 8002f16:	4a5c      	ldr	r2, [pc, #368]	; (8003088 <menu+0x1cd8>)
 8002f18:	2110      	movs	r1, #16
 8002f1a:	2002      	movs	r0, #2
 8002f1c:	f004 ff4e 	bl	8007dbc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f20:	2102      	movs	r1, #2
 8002f22:	484e      	ldr	r0, [pc, #312]	; (800305c <menu+0x1cac>)
 8002f24:	f006 fa70 	bl	8009408 <HAL_GPIO_ReadPin>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d119      	bne.n	8002f62 <menu+0x1bb2>
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <menu+0x1cb0>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d012      	beq.n	8002f62 <menu+0x1bb2>
 8002f3c:	4b53      	ldr	r3, [pc, #332]	; (800308c <menu+0x1cdc>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10e      	bne.n	8002f62 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002f44:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <menu+0x1cd4>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <menu+0x1cd4>)
 8002f4e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002f50:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <menu+0x1cd4>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d902      	bls.n	8002f5e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002f58:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <menu+0x1cd4>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f5e:	f001 fdcd 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002f62:	2104      	movs	r1, #4
 8002f64:	483d      	ldr	r0, [pc, #244]	; (800305c <menu+0x1cac>)
 8002f66:	f006 fa4f 	bl	8009408 <HAL_GPIO_ReadPin>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d119      	bne.n	8002fa4 <menu+0x1bf4>
 8002f70:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <menu+0x1cb0>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	f083 0301 	eor.w	r3, r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d012      	beq.n	8002fa4 <menu+0x1bf4>
 8002f7e:	4b43      	ldr	r3, [pc, #268]	; (800308c <menu+0x1cdc>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10e      	bne.n	8002fa4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <menu+0x1cd4>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <menu+0x1cd4>)
 8002f90:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002f92:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <menu+0x1cd4>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d902      	bls.n	8002fa0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <menu+0x1cd4>)
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002fa0:	f001 fdac 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	482d      	ldr	r0, [pc, #180]	; (800305c <menu+0x1cac>)
 8002fa8:	f006 fa2e 	bl	8009408 <HAL_GPIO_ReadPin>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10d      	bne.n	8002fce <menu+0x1c1e>
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <menu+0x1cb0>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	f083 0301 	eor.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002fc0:	4b30      	ldr	r3, [pc, #192]	; (8003084 <menu+0x1cd4>)
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	4b27      	ldr	r3, [pc, #156]	; (8003064 <menu+0x1cb4>)
 8002fc6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <menu+0x1cbc>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <menu+0x1cc0>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	f040 80bc 	bne.w	8003150 <menu+0x1da0>
		if(dilSecim == 0) {
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <menu+0x1ca0>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002fe0:	4a2b      	ldr	r2, [pc, #172]	; (8003090 <menu+0x1ce0>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f004 fee9 	bl	8007dbc <lcd_print>
 8002fea:	e008      	b.n	8002ffe <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002fec:	4b18      	ldr	r3, [pc, #96]	; (8003050 <menu+0x1ca0>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d104      	bne.n	8002ffe <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002ff4:	4a27      	ldr	r2, [pc, #156]	; (8003094 <menu+0x1ce4>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f004 fedf 	bl	8007dbc <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <menu+0x1ce8>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d113      	bne.n	800302e <menu+0x1c7e>
			if(dilSecim == 0) {
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <menu+0x1ca0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800300e:	4a11      	ldr	r2, [pc, #68]	; (8003054 <menu+0x1ca4>)
 8003010:	2101      	movs	r1, #1
 8003012:	2002      	movs	r0, #2
 8003014:	f004 fed2 	bl	8007dbc <lcd_print>
 8003018:	e04b      	b.n	80030b2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <menu+0x1ca0>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d147      	bne.n	80030b2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003022:	4a0d      	ldr	r2, [pc, #52]	; (8003058 <menu+0x1ca8>)
 8003024:	2101      	movs	r1, #1
 8003026:	2002      	movs	r0, #2
 8003028:	f004 fec8 	bl	8007dbc <lcd_print>
 800302c:	e041      	b.n	80030b2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800302e:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <menu+0x1ce8>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d13d      	bne.n	80030b2 <menu+0x1d02>
			if(dilSecim == 0) {
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <menu+0x1ca0>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d130      	bne.n	80030a0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <menu+0x1cec>)
 8003040:	2101      	movs	r1, #1
 8003042:	2002      	movs	r0, #2
 8003044:	f004 feba 	bl	8007dbc <lcd_print>
 8003048:	e033      	b.n	80030b2 <menu+0x1d02>
 800304a:	bf00      	nop
 800304c:	20000231 	.word	0x20000231
 8003050:	20000245 	.word	0x20000245
 8003054:	0800d3ac 	.word	0x0800d3ac
 8003058:	0800d3c0 	.word	0x0800d3c0
 800305c:	40010800 	.word	0x40010800
 8003060:	20000253 	.word	0x20000253
 8003064:	20000128 	.word	0x20000128
 8003068:	2000022a 	.word	0x2000022a
 800306c:	20000250 	.word	0x20000250
 8003070:	20000224 	.word	0x20000224
 8003074:	0800d74c 	.word	0x0800d74c
 8003078:	0800d610 	.word	0x0800d610
 800307c:	0800d760 	.word	0x0800d760
 8003080:	0800d634 	.word	0x0800d634
 8003084:	2000023f 	.word	0x2000023f
 8003088:	20000198 	.word	0x20000198
 800308c:	2000022f 	.word	0x2000022f
 8003090:	0800d774 	.word	0x0800d774
 8003094:	0800d788 	.word	0x0800d788
 8003098:	20000232 	.word	0x20000232
 800309c:	0800d40c 	.word	0x0800d40c
			} else if(dilSecim == 1) {
 80030a0:	4b99      	ldr	r3, [pc, #612]	; (8003308 <menu+0x1f58>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d104      	bne.n	80030b2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80030a8:	4a98      	ldr	r2, [pc, #608]	; (800330c <menu+0x1f5c>)
 80030aa:	2101      	movs	r1, #1
 80030ac:	2002      	movs	r0, #2
 80030ae:	f004 fe85 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b2:	2102      	movs	r1, #2
 80030b4:	4896      	ldr	r0, [pc, #600]	; (8003310 <menu+0x1f60>)
 80030b6:	f006 f9a7 	bl	8009408 <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d115      	bne.n	80030ec <menu+0x1d3c>
 80030c0:	4b94      	ldr	r3, [pc, #592]	; (8003314 <menu+0x1f64>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00e      	beq.n	80030ec <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80030ce:	4b92      	ldr	r3, [pc, #584]	; (8003318 <menu+0x1f68>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4b90      	ldr	r3, [pc, #576]	; (8003318 <menu+0x1f68>)
 80030d8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80030da:	4b8f      	ldr	r3, [pc, #572]	; (8003318 <menu+0x1f68>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d902      	bls.n	80030e8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80030e2:	4b8d      	ldr	r3, [pc, #564]	; (8003318 <menu+0x1f68>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030e8:	f001 fd08 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ec:	2104      	movs	r1, #4
 80030ee:	4888      	ldr	r0, [pc, #544]	; (8003310 <menu+0x1f60>)
 80030f0:	f006 f98a 	bl	8009408 <HAL_GPIO_ReadPin>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d115      	bne.n	8003126 <menu+0x1d76>
 80030fa:	4b86      	ldr	r3, [pc, #536]	; (8003314 <menu+0x1f64>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003108:	4b83      	ldr	r3, [pc, #524]	; (8003318 <menu+0x1f68>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b81      	ldr	r3, [pc, #516]	; (8003318 <menu+0x1f68>)
 8003112:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003114:	4b80      	ldr	r3, [pc, #512]	; (8003318 <menu+0x1f68>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800311c:	4b7e      	ldr	r3, [pc, #504]	; (8003318 <menu+0x1f68>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003122:	f001 fceb 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003126:	2108      	movs	r1, #8
 8003128:	4879      	ldr	r0, [pc, #484]	; (8003310 <menu+0x1f60>)
 800312a:	f006 f96d 	bl	8009408 <HAL_GPIO_ReadPin>
 800312e:	4603      	mov	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10d      	bne.n	8003150 <menu+0x1da0>
 8003134:	4b77      	ldr	r3, [pc, #476]	; (8003314 <menu+0x1f64>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003142:	4b75      	ldr	r3, [pc, #468]	; (8003318 <menu+0x1f68>)
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	4b75      	ldr	r3, [pc, #468]	; (800331c <menu+0x1f6c>)
 8003148:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800314a:	4b75      	ldr	r3, [pc, #468]	; (8003320 <menu+0x1f70>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003150:	4b74      	ldr	r3, [pc, #464]	; (8003324 <menu+0x1f74>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b11      	cmp	r3, #17
 8003156:	f040 80c3 	bne.w	80032e0 <menu+0x1f30>
		if(dilSecim == 0) {
 800315a:	4b6b      	ldr	r3, [pc, #428]	; (8003308 <menu+0x1f58>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003162:	4a71      	ldr	r2, [pc, #452]	; (8003328 <menu+0x1f78>)
 8003164:	2101      	movs	r1, #1
 8003166:	2001      	movs	r0, #1
 8003168:	f004 fe28 	bl	8007dbc <lcd_print>
 800316c:	e008      	b.n	8003180 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800316e:	4b66      	ldr	r3, [pc, #408]	; (8003308 <menu+0x1f58>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d104      	bne.n	8003180 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003176:	4a6d      	ldr	r2, [pc, #436]	; (800332c <menu+0x1f7c>)
 8003178:	2101      	movs	r1, #1
 800317a:	2001      	movs	r0, #1
 800317c:	f004 fe1e 	bl	8007dbc <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003180:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <menu+0x1f80>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d113      	bne.n	80031b0 <menu+0x1e00>
			if(dilSecim == 0){
 8003188:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <menu+0x1f58>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003190:	4a68      	ldr	r2, [pc, #416]	; (8003334 <menu+0x1f84>)
 8003192:	2101      	movs	r1, #1
 8003194:	2002      	movs	r0, #2
 8003196:	f004 fe11 	bl	8007dbc <lcd_print>
 800319a:	e038      	b.n	800320e <menu+0x1e5e>
			} else if(dilSecim == 1){
 800319c:	4b5a      	ldr	r3, [pc, #360]	; (8003308 <menu+0x1f58>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d134      	bne.n	800320e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80031a4:	4a64      	ldr	r2, [pc, #400]	; (8003338 <menu+0x1f88>)
 80031a6:	2101      	movs	r1, #1
 80031a8:	2002      	movs	r0, #2
 80031aa:	f004 fe07 	bl	8007dbc <lcd_print>
 80031ae:	e02e      	b.n	800320e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031b0:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <menu+0x1f80>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d113      	bne.n	80031e0 <menu+0x1e30>
			if(dilSecim == 0){
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <menu+0x1f58>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80031c0:	4a5e      	ldr	r2, [pc, #376]	; (800333c <menu+0x1f8c>)
 80031c2:	2101      	movs	r1, #1
 80031c4:	2002      	movs	r0, #2
 80031c6:	f004 fdf9 	bl	8007dbc <lcd_print>
 80031ca:	e020      	b.n	800320e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031cc:	4b4e      	ldr	r3, [pc, #312]	; (8003308 <menu+0x1f58>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d11c      	bne.n	800320e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80031d4:	4a5a      	ldr	r2, [pc, #360]	; (8003340 <menu+0x1f90>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	2002      	movs	r0, #2
 80031da:	f004 fdef 	bl	8007dbc <lcd_print>
 80031de:	e016      	b.n	800320e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80031e0:	4b53      	ldr	r3, [pc, #332]	; (8003330 <menu+0x1f80>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d112      	bne.n	800320e <menu+0x1e5e>
			if(dilSecim == 0) {
 80031e8:	4b47      	ldr	r3, [pc, #284]	; (8003308 <menu+0x1f58>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80031f0:	4a54      	ldr	r2, [pc, #336]	; (8003344 <menu+0x1f94>)
 80031f2:	2101      	movs	r1, #1
 80031f4:	2002      	movs	r0, #2
 80031f6:	f004 fde1 	bl	8007dbc <lcd_print>
 80031fa:	e008      	b.n	800320e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80031fc:	4b42      	ldr	r3, [pc, #264]	; (8003308 <menu+0x1f58>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d104      	bne.n	800320e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003204:	4a50      	ldr	r2, [pc, #320]	; (8003348 <menu+0x1f98>)
 8003206:	2101      	movs	r1, #1
 8003208:	2002      	movs	r0, #2
 800320a:	f004 fdd7 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800320e:	2102      	movs	r1, #2
 8003210:	483f      	ldr	r0, [pc, #252]	; (8003310 <menu+0x1f60>)
 8003212:	f006 f8f9 	bl	8009408 <HAL_GPIO_ReadPin>
 8003216:	4603      	mov	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	d115      	bne.n	8003248 <menu+0x1e98>
 800321c:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <menu+0x1f64>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	f083 0301 	eor.w	r3, r3, #1
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00e      	beq.n	8003248 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800322a:	4b41      	ldr	r3, [pc, #260]	; (8003330 <menu+0x1f80>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b3f      	ldr	r3, [pc, #252]	; (8003330 <menu+0x1f80>)
 8003234:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003236:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <menu+0x1f80>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d902      	bls.n	8003244 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800323e:	4b3c      	ldr	r3, [pc, #240]	; (8003330 <menu+0x1f80>)
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003244:	f001 fc5a 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003248:	2104      	movs	r1, #4
 800324a:	4831      	ldr	r0, [pc, #196]	; (8003310 <menu+0x1f60>)
 800324c:	f006 f8dc 	bl	8009408 <HAL_GPIO_ReadPin>
 8003250:	4603      	mov	r3, r0
 8003252:	2b01      	cmp	r3, #1
 8003254:	d115      	bne.n	8003282 <menu+0x1ed2>
 8003256:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <menu+0x1f64>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	f083 0301 	eor.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00e      	beq.n	8003282 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <menu+0x1f80>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	3b01      	subs	r3, #1
 800326a:	b2da      	uxtb	r2, r3
 800326c:	4b30      	ldr	r3, [pc, #192]	; (8003330 <menu+0x1f80>)
 800326e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003270:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <menu+0x1f80>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d902      	bls.n	800327e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003278:	4b2d      	ldr	r3, [pc, #180]	; (8003330 <menu+0x1f80>)
 800327a:	2202      	movs	r2, #2
 800327c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800327e:	f001 fc3d 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003282:	2108      	movs	r1, #8
 8003284:	4822      	ldr	r0, [pc, #136]	; (8003310 <menu+0x1f60>)
 8003286:	f006 f8bf 	bl	8009408 <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
 800328c:	2b01      	cmp	r3, #1
 800328e:	d127      	bne.n	80032e0 <menu+0x1f30>
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <menu+0x1f64>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d020      	beq.n	80032e0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <menu+0x1f80>)
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	4b1e      	ldr	r3, [pc, #120]	; (800331c <menu+0x1f6c>)
 80032a4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <menu+0x1f80>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <menu+0x1f06>
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <menu+0x1f80>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d106      	bne.n	80032c4 <menu+0x1f14>
				calismaSekli = 0;
 80032b6:	4b25      	ldr	r3, [pc, #148]	; (800334c <menu+0x1f9c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80032bc:	4b23      	ldr	r3, [pc, #140]	; (800334c <menu+0x1f9c>)
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	4b16      	ldr	r3, [pc, #88]	; (800331c <menu+0x1f6c>)
 80032c2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <menu+0x1f80>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d106      	bne.n	80032da <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <menu+0x1fa0>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80032d2:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <menu+0x1fa0>)
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	4b11      	ldr	r3, [pc, #68]	; (800331c <menu+0x1f6c>)
 80032d8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <menu+0x1f70>)
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <menu+0x1f74>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b12      	cmp	r3, #18
 80032e6:	f040 80d5 	bne.w	8003494 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <menu+0x1f80>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d13c      	bne.n	800336c <menu+0x1fbc>
			if(dilSecim == 0) {
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <menu+0x1f58>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d12e      	bne.n	8003358 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80032fa:	4a16      	ldr	r2, [pc, #88]	; (8003354 <menu+0x1fa4>)
 80032fc:	2101      	movs	r1, #1
 80032fe:	2001      	movs	r0, #1
 8003300:	f004 fd5c 	bl	8007dbc <lcd_print>
 8003304:	e048      	b.n	8003398 <menu+0x1fe8>
 8003306:	bf00      	nop
 8003308:	20000245 	.word	0x20000245
 800330c:	0800d420 	.word	0x0800d420
 8003310:	40010800 	.word	0x40010800
 8003314:	20000253 	.word	0x20000253
 8003318:	20000232 	.word	0x20000232
 800331c:	20000128 	.word	0x20000128
 8003320:	20000250 	.word	0x20000250
 8003324:	20000224 	.word	0x20000224
 8003328:	0800d79c 	.word	0x0800d79c
 800332c:	0800d7b0 	.word	0x0800d7b0
 8003330:	20000233 	.word	0x20000233
 8003334:	0800d7c4 	.word	0x0800d7c4
 8003338:	0800d7d4 	.word	0x0800d7d4
 800333c:	0800d7e4 	.word	0x0800d7e4
 8003340:	0800d7f4 	.word	0x0800d7f4
 8003344:	0800d3ac 	.word	0x0800d3ac
 8003348:	0800d3c0 	.word	0x0800d3c0
 800334c:	20000225 	.word	0x20000225
 8003350:	20000236 	.word	0x20000236
 8003354:	0800d804 	.word	0x0800d804
			} else if(dilSecim == 1) {
 8003358:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <menu+0x2198>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d11b      	bne.n	8003398 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003360:	4a7a      	ldr	r2, [pc, #488]	; (800354c <menu+0x219c>)
 8003362:	2101      	movs	r1, #1
 8003364:	2001      	movs	r0, #1
 8003366:	f004 fd29 	bl	8007dbc <lcd_print>
 800336a:	e015      	b.n	8003398 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800336c:	4b78      	ldr	r3, [pc, #480]	; (8003550 <menu+0x21a0>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d111      	bne.n	8003398 <menu+0x1fe8>
			if(dilSecim == 0){
 8003374:	4b74      	ldr	r3, [pc, #464]	; (8003548 <menu+0x2198>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800337c:	4a75      	ldr	r2, [pc, #468]	; (8003554 <menu+0x21a4>)
 800337e:	2101      	movs	r1, #1
 8003380:	2001      	movs	r0, #1
 8003382:	f004 fd1b 	bl	8007dbc <lcd_print>
			}
			if(dilSecim == 1){
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <menu+0x2198>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d104      	bne.n	8003398 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800338e:	4a72      	ldr	r2, [pc, #456]	; (8003558 <menu+0x21a8>)
 8003390:	2101      	movs	r1, #1
 8003392:	2001      	movs	r0, #1
 8003394:	f004 fd12 	bl	8007dbc <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003398:	4b70      	ldr	r3, [pc, #448]	; (800355c <menu+0x21ac>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d113      	bne.n	80033c8 <menu+0x2018>
			if(dilSecim == 0) {
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <menu+0x2198>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80033a8:	4a6d      	ldr	r2, [pc, #436]	; (8003560 <menu+0x21b0>)
 80033aa:	2101      	movs	r1, #1
 80033ac:	2002      	movs	r0, #2
 80033ae:	f004 fd05 	bl	8007dbc <lcd_print>
 80033b2:	e020      	b.n	80033f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80033b4:	4b64      	ldr	r3, [pc, #400]	; (8003548 <menu+0x2198>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d11c      	bne.n	80033f6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80033bc:	4a69      	ldr	r2, [pc, #420]	; (8003564 <menu+0x21b4>)
 80033be:	2101      	movs	r1, #1
 80033c0:	2002      	movs	r0, #2
 80033c2:	f004 fcfb 	bl	8007dbc <lcd_print>
 80033c6:	e016      	b.n	80033f6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80033c8:	4b64      	ldr	r3, [pc, #400]	; (800355c <menu+0x21ac>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d112      	bne.n	80033f6 <menu+0x2046>
			if(dilSecim == 0){
 80033d0:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <menu+0x2198>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80033d8:	4a63      	ldr	r2, [pc, #396]	; (8003568 <menu+0x21b8>)
 80033da:	2101      	movs	r1, #1
 80033dc:	2002      	movs	r0, #2
 80033de:	f004 fced 	bl	8007dbc <lcd_print>
 80033e2:	e008      	b.n	80033f6 <menu+0x2046>
			} else if(dilSecim == 1){
 80033e4:	4b58      	ldr	r3, [pc, #352]	; (8003548 <menu+0x2198>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d104      	bne.n	80033f6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80033ec:	4a5f      	ldr	r2, [pc, #380]	; (800356c <menu+0x21bc>)
 80033ee:	2101      	movs	r1, #1
 80033f0:	2002      	movs	r0, #2
 80033f2:	f004 fce3 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f6:	2102      	movs	r1, #2
 80033f8:	485d      	ldr	r0, [pc, #372]	; (8003570 <menu+0x21c0>)
 80033fa:	f006 f805 	bl	8009408 <HAL_GPIO_ReadPin>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b01      	cmp	r3, #1
 8003402:	d115      	bne.n	8003430 <menu+0x2080>
 8003404:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <menu+0x21c4>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	f083 0301 	eor.w	r3, r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00e      	beq.n	8003430 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003412:	4b52      	ldr	r3, [pc, #328]	; (800355c <menu+0x21ac>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4b50      	ldr	r3, [pc, #320]	; (800355c <menu+0x21ac>)
 800341c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800341e:	4b4f      	ldr	r3, [pc, #316]	; (800355c <menu+0x21ac>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d902      	bls.n	800342c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003426:	4b4d      	ldr	r3, [pc, #308]	; (800355c <menu+0x21ac>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800342c:	f001 fb66 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003430:	2104      	movs	r1, #4
 8003432:	484f      	ldr	r0, [pc, #316]	; (8003570 <menu+0x21c0>)
 8003434:	f005 ffe8 	bl	8009408 <HAL_GPIO_ReadPin>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d115      	bne.n	800346a <menu+0x20ba>
 800343e:	4b4d      	ldr	r3, [pc, #308]	; (8003574 <menu+0x21c4>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	f083 0301 	eor.w	r3, r3, #1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00e      	beq.n	800346a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <menu+0x21ac>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3b01      	subs	r3, #1
 8003452:	b2da      	uxtb	r2, r3
 8003454:	4b41      	ldr	r3, [pc, #260]	; (800355c <menu+0x21ac>)
 8003456:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <menu+0x21ac>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003460:	4b3e      	ldr	r3, [pc, #248]	; (800355c <menu+0x21ac>)
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003466:	f001 fb49 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800346a:	2108      	movs	r1, #8
 800346c:	4840      	ldr	r0, [pc, #256]	; (8003570 <menu+0x21c0>)
 800346e:	f005 ffcb 	bl	8009408 <HAL_GPIO_ReadPin>
 8003472:	4603      	mov	r3, r0
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10d      	bne.n	8003494 <menu+0x20e4>
 8003478:	4b3e      	ldr	r3, [pc, #248]	; (8003574 <menu+0x21c4>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	f083 0301 	eor.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003486:	4b35      	ldr	r3, [pc, #212]	; (800355c <menu+0x21ac>)
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <menu+0x21c8>)
 800348c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <menu+0x21cc>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <menu+0x21d0>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b13      	cmp	r3, #19
 800349a:	f040 80d5 	bne.w	8003648 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <menu+0x21a0>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d113      	bne.n	80034ce <menu+0x211e>
			if(dilSecim == 0) {
 80034a6:	4b28      	ldr	r3, [pc, #160]	; (8003548 <menu+0x2198>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80034ae:	4a35      	ldr	r2, [pc, #212]	; (8003584 <menu+0x21d4>)
 80034b0:	2101      	movs	r1, #1
 80034b2:	2001      	movs	r0, #1
 80034b4:	f004 fc82 	bl	8007dbc <lcd_print>
 80034b8:	e01f      	b.n	80034fa <menu+0x214a>
			} else if(dilSecim == 1) {
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <menu+0x2198>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d11b      	bne.n	80034fa <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <menu+0x21d8>)
 80034c4:	2101      	movs	r1, #1
 80034c6:	2001      	movs	r0, #1
 80034c8:	f004 fc78 	bl	8007dbc <lcd_print>
 80034cc:	e015      	b.n	80034fa <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <menu+0x21a0>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d111      	bne.n	80034fa <menu+0x214a>
			if(dilSecim == 0) {
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <menu+0x2198>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d104      	bne.n	80034e8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <menu+0x21dc>)
 80034e0:	2101      	movs	r1, #1
 80034e2:	2001      	movs	r0, #1
 80034e4:	f004 fc6a 	bl	8007dbc <lcd_print>
			}
			if(dilSecim == 1) {
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <menu+0x2198>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d104      	bne.n	80034fa <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80034f0:	4a27      	ldr	r2, [pc, #156]	; (8003590 <menu+0x21e0>)
 80034f2:	2101      	movs	r1, #1
 80034f4:	2001      	movs	r0, #1
 80034f6:	f004 fc61 	bl	8007dbc <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <menu+0x21e4>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d113      	bne.n	800352a <menu+0x217a>
			if(dilSecim == 0) {
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <menu+0x2198>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <menu+0x21b0>)
 800350c:	2101      	movs	r1, #1
 800350e:	2002      	movs	r0, #2
 8003510:	f004 fc54 	bl	8007dbc <lcd_print>
 8003514:	e049      	b.n	80035aa <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <menu+0x2198>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d145      	bne.n	80035aa <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800351e:	4a11      	ldr	r2, [pc, #68]	; (8003564 <menu+0x21b4>)
 8003520:	2101      	movs	r1, #1
 8003522:	2002      	movs	r0, #2
 8003524:	f004 fc4a 	bl	8007dbc <lcd_print>
 8003528:	e03f      	b.n	80035aa <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <menu+0x21e4>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d13b      	bne.n	80035aa <menu+0x21fa>
			if(dilSecim == 0) {
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <menu+0x2198>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d12e      	bne.n	8003598 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <menu+0x21b8>)
 800353c:	2101      	movs	r1, #1
 800353e:	2002      	movs	r0, #2
 8003540:	f004 fc3c 	bl	8007dbc <lcd_print>
 8003544:	e031      	b.n	80035aa <menu+0x21fa>
 8003546:	bf00      	nop
 8003548:	20000245 	.word	0x20000245
 800354c:	0800d818 	.word	0x0800d818
 8003550:	20000233 	.word	0x20000233
 8003554:	0800d828 	.word	0x0800d828
 8003558:	0800d83c 	.word	0x0800d83c
 800355c:	20000234 	.word	0x20000234
 8003560:	0800d3ac 	.word	0x0800d3ac
 8003564:	0800d3c0 	.word	0x0800d3c0
 8003568:	0800d40c 	.word	0x0800d40c
 800356c:	0800d420 	.word	0x0800d420
 8003570:	40010800 	.word	0x40010800
 8003574:	20000253 	.word	0x20000253
 8003578:	20000128 	.word	0x20000128
 800357c:	20000250 	.word	0x20000250
 8003580:	20000224 	.word	0x20000224
 8003584:	0800d850 	.word	0x0800d850
 8003588:	0800d864 	.word	0x0800d864
 800358c:	0800d878 	.word	0x0800d878
 8003590:	0800d88c 	.word	0x0800d88c
 8003594:	20000235 	.word	0x20000235
			} else if(dilSecim == 1) {
 8003598:	4b90      	ldr	r3, [pc, #576]	; (80037dc <menu+0x242c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d104      	bne.n	80035aa <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80035a0:	4a8f      	ldr	r2, [pc, #572]	; (80037e0 <menu+0x2430>)
 80035a2:	2101      	movs	r1, #1
 80035a4:	2002      	movs	r0, #2
 80035a6:	f004 fc09 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035aa:	2102      	movs	r1, #2
 80035ac:	488d      	ldr	r0, [pc, #564]	; (80037e4 <menu+0x2434>)
 80035ae:	f005 ff2b 	bl	8009408 <HAL_GPIO_ReadPin>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d115      	bne.n	80035e4 <menu+0x2234>
 80035b8:	4b8b      	ldr	r3, [pc, #556]	; (80037e8 <menu+0x2438>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	f083 0301 	eor.w	r3, r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <menu+0x243c>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b87      	ldr	r3, [pc, #540]	; (80037ec <menu+0x243c>)
 80035d0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80035d2:	4b86      	ldr	r3, [pc, #536]	; (80037ec <menu+0x243c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d902      	bls.n	80035e0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80035da:	4b84      	ldr	r3, [pc, #528]	; (80037ec <menu+0x243c>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035e0:	f001 fa8c 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e4:	2104      	movs	r1, #4
 80035e6:	487f      	ldr	r0, [pc, #508]	; (80037e4 <menu+0x2434>)
 80035e8:	f005 ff0e 	bl	8009408 <HAL_GPIO_ReadPin>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d115      	bne.n	800361e <menu+0x226e>
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <menu+0x2438>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	f083 0301 	eor.w	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003600:	4b7a      	ldr	r3, [pc, #488]	; (80037ec <menu+0x243c>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	3b01      	subs	r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b78      	ldr	r3, [pc, #480]	; (80037ec <menu+0x243c>)
 800360a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800360c:	4b77      	ldr	r3, [pc, #476]	; (80037ec <menu+0x243c>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003614:	4b75      	ldr	r3, [pc, #468]	; (80037ec <menu+0x243c>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800361a:	f001 fa6f 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800361e:	2108      	movs	r1, #8
 8003620:	4870      	ldr	r0, [pc, #448]	; (80037e4 <menu+0x2434>)
 8003622:	f005 fef1 	bl	8009408 <HAL_GPIO_ReadPin>
 8003626:	4603      	mov	r3, r0
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10d      	bne.n	8003648 <menu+0x2298>
 800362c:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <menu+0x2438>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d006      	beq.n	8003648 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800363a:	4b6c      	ldr	r3, [pc, #432]	; (80037ec <menu+0x243c>)
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	4b6c      	ldr	r3, [pc, #432]	; (80037f0 <menu+0x2440>)
 8003640:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003642:	4b6c      	ldr	r3, [pc, #432]	; (80037f4 <menu+0x2444>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003648:	4b6b      	ldr	r3, [pc, #428]	; (80037f8 <menu+0x2448>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b14      	cmp	r3, #20
 800364e:	f040 80b5 	bne.w	80037bc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003652:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <menu+0x244c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d113      	bne.n	8003682 <menu+0x22d2>
			if(dilSecim == 0) {
 800365a:	4b60      	ldr	r3, [pc, #384]	; (80037dc <menu+0x242c>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d105      	bne.n	800366e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003662:	4a67      	ldr	r2, [pc, #412]	; (8003800 <menu+0x2450>)
 8003664:	2101      	movs	r1, #1
 8003666:	2001      	movs	r0, #1
 8003668:	f004 fba8 	bl	8007dbc <lcd_print>
 800366c:	e020      	b.n	80036b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800366e:	4b5b      	ldr	r3, [pc, #364]	; (80037dc <menu+0x242c>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d11c      	bne.n	80036b0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003676:	4a63      	ldr	r2, [pc, #396]	; (8003804 <menu+0x2454>)
 8003678:	2101      	movs	r1, #1
 800367a:	2001      	movs	r0, #1
 800367c:	f004 fb9e 	bl	8007dbc <lcd_print>
 8003680:	e016      	b.n	80036b0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003682:	4b5e      	ldr	r3, [pc, #376]	; (80037fc <menu+0x244c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d112      	bne.n	80036b0 <menu+0x2300>
			if(dilSecim == 0) {
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <menu+0x242c>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003692:	4a5d      	ldr	r2, [pc, #372]	; (8003808 <menu+0x2458>)
 8003694:	2101      	movs	r1, #1
 8003696:	2001      	movs	r0, #1
 8003698:	f004 fb90 	bl	8007dbc <lcd_print>
 800369c:	e008      	b.n	80036b0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800369e:	4b4f      	ldr	r3, [pc, #316]	; (80037dc <menu+0x242c>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d104      	bne.n	80036b0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80036a6:	4a59      	ldr	r2, [pc, #356]	; (800380c <menu+0x245c>)
 80036a8:	2101      	movs	r1, #1
 80036aa:	2001      	movs	r0, #1
 80036ac:	f004 fb86 	bl	8007dbc <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80036b0:	4b57      	ldr	r3, [pc, #348]	; (8003810 <menu+0x2460>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d113      	bne.n	80036e0 <menu+0x2330>
			if(dilSecim == 0) {
 80036b8:	4b48      	ldr	r3, [pc, #288]	; (80037dc <menu+0x242c>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80036c0:	4a54      	ldr	r2, [pc, #336]	; (8003814 <menu+0x2464>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	2002      	movs	r0, #2
 80036c6:	f004 fb79 	bl	8007dbc <lcd_print>
 80036ca:	e020      	b.n	800370e <menu+0x235e>
			} else if(dilSecim == 1) {
 80036cc:	4b43      	ldr	r3, [pc, #268]	; (80037dc <menu+0x242c>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d11c      	bne.n	800370e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80036d4:	4a50      	ldr	r2, [pc, #320]	; (8003818 <menu+0x2468>)
 80036d6:	2101      	movs	r1, #1
 80036d8:	2002      	movs	r0, #2
 80036da:	f004 fb6f 	bl	8007dbc <lcd_print>
 80036de:	e016      	b.n	800370e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80036e0:	4b4b      	ldr	r3, [pc, #300]	; (8003810 <menu+0x2460>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d112      	bne.n	800370e <menu+0x235e>
			if(dilSecim == 0) {
 80036e8:	4b3c      	ldr	r3, [pc, #240]	; (80037dc <menu+0x242c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80036f0:	4a4a      	ldr	r2, [pc, #296]	; (800381c <menu+0x246c>)
 80036f2:	2101      	movs	r1, #1
 80036f4:	2002      	movs	r0, #2
 80036f6:	f004 fb61 	bl	8007dbc <lcd_print>
 80036fa:	e008      	b.n	800370e <menu+0x235e>
			} else if(dilSecim == 1) {
 80036fc:	4b37      	ldr	r3, [pc, #220]	; (80037dc <menu+0x242c>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d104      	bne.n	800370e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003704:	4a46      	ldr	r2, [pc, #280]	; (8003820 <menu+0x2470>)
 8003706:	2101      	movs	r1, #1
 8003708:	2002      	movs	r0, #2
 800370a:	f004 fb57 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800370e:	2102      	movs	r1, #2
 8003710:	4834      	ldr	r0, [pc, #208]	; (80037e4 <menu+0x2434>)
 8003712:	f005 fe79 	bl	8009408 <HAL_GPIO_ReadPin>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d119      	bne.n	8003750 <menu+0x23a0>
 800371c:	4b32      	ldr	r3, [pc, #200]	; (80037e8 <menu+0x2438>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d012      	beq.n	8003750 <menu+0x23a0>
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <menu+0x244c>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d10e      	bne.n	8003750 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <menu+0x2460>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	3301      	adds	r3, #1
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4b35      	ldr	r3, [pc, #212]	; (8003810 <menu+0x2460>)
 800373c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800373e:	4b34      	ldr	r3, [pc, #208]	; (8003810 <menu+0x2460>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d902      	bls.n	800374c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003746:	4b32      	ldr	r3, [pc, #200]	; (8003810 <menu+0x2460>)
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800374c:	f001 f9d6 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003750:	2104      	movs	r1, #4
 8003752:	4824      	ldr	r0, [pc, #144]	; (80037e4 <menu+0x2434>)
 8003754:	f005 fe58 	bl	8009408 <HAL_GPIO_ReadPin>
 8003758:	4603      	mov	r3, r0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d119      	bne.n	8003792 <menu+0x23e2>
 800375e:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <menu+0x2438>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	f083 0301 	eor.w	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <menu+0x23e2>
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <menu+0x244c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d10e      	bne.n	8003792 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003774:	4b26      	ldr	r3, [pc, #152]	; (8003810 <menu+0x2460>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	3b01      	subs	r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <menu+0x2460>)
 800377e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003780:	4b23      	ldr	r3, [pc, #140]	; (8003810 <menu+0x2460>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003788:	4b21      	ldr	r3, [pc, #132]	; (8003810 <menu+0x2460>)
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800378e:	f001 f9b5 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003792:	2108      	movs	r1, #8
 8003794:	4813      	ldr	r0, [pc, #76]	; (80037e4 <menu+0x2434>)
 8003796:	f005 fe37 	bl	8009408 <HAL_GPIO_ReadPin>
 800379a:	4603      	mov	r3, r0
 800379c:	2b01      	cmp	r3, #1
 800379e:	d10d      	bne.n	80037bc <menu+0x240c>
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <menu+0x2438>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	f083 0301 	eor.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <menu+0x2460>)
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <menu+0x2440>)
 80037b4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <menu+0x2444>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <menu+0x2448>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b15      	cmp	r3, #21
 80037c2:	f040 80c2 	bne.w	800394a <menu+0x259a>
		if(dilSecim == 0) {
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <menu+0x242c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d12c      	bne.n	8003828 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80037ce:	4a15      	ldr	r2, [pc, #84]	; (8003824 <menu+0x2474>)
 80037d0:	2101      	movs	r1, #1
 80037d2:	2001      	movs	r0, #1
 80037d4:	f004 faf2 	bl	8007dbc <lcd_print>
 80037d8:	e02f      	b.n	800383a <menu+0x248a>
 80037da:	bf00      	nop
 80037dc:	20000245 	.word	0x20000245
 80037e0:	0800d420 	.word	0x0800d420
 80037e4:	40010800 	.word	0x40010800
 80037e8:	20000253 	.word	0x20000253
 80037ec:	20000235 	.word	0x20000235
 80037f0:	20000128 	.word	0x20000128
 80037f4:	20000250 	.word	0x20000250
 80037f8:	20000224 	.word	0x20000224
 80037fc:	20000233 	.word	0x20000233
 8003800:	0800d8a0 	.word	0x0800d8a0
 8003804:	0800d8b4 	.word	0x0800d8b4
 8003808:	0800d8c8 	.word	0x0800d8c8
 800380c:	0800d8dc 	.word	0x0800d8dc
 8003810:	20000236 	.word	0x20000236
 8003814:	0800d8f0 	.word	0x0800d8f0
 8003818:	0800d904 	.word	0x0800d904
 800381c:	0800d914 	.word	0x0800d914
 8003820:	0800d928 	.word	0x0800d928
 8003824:	0800d938 	.word	0x0800d938
		} else if(dilSecim == 1) {
 8003828:	4b9c      	ldr	r3, [pc, #624]	; (8003a9c <menu+0x26ec>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d104      	bne.n	800383a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003830:	4a9b      	ldr	r2, [pc, #620]	; (8003aa0 <menu+0x26f0>)
 8003832:	2101      	movs	r1, #1
 8003834:	2001      	movs	r0, #1
 8003836:	f004 fac1 	bl	8007dbc <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800383a:	4b9a      	ldr	r3, [pc, #616]	; (8003aa4 <menu+0x26f4>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d112      	bne.n	8003868 <menu+0x24b8>
			if(dilSecim == 0) {
 8003842:	4b96      	ldr	r3, [pc, #600]	; (8003a9c <menu+0x26ec>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800384a:	4a97      	ldr	r2, [pc, #604]	; (8003aa8 <menu+0x26f8>)
 800384c:	2101      	movs	r1, #1
 800384e:	2002      	movs	r0, #2
 8003850:	f004 fab4 	bl	8007dbc <lcd_print>
			}
			if(dilSecim == 1) {
 8003854:	4b91      	ldr	r3, [pc, #580]	; (8003a9c <menu+0x26ec>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d11c      	bne.n	8003896 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 800385c:	4a93      	ldr	r2, [pc, #588]	; (8003aac <menu+0x26fc>)
 800385e:	2101      	movs	r1, #1
 8003860:	2002      	movs	r0, #2
 8003862:	f004 faab 	bl	8007dbc <lcd_print>
 8003866:	e016      	b.n	8003896 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003868:	4b8e      	ldr	r3, [pc, #568]	; (8003aa4 <menu+0x26f4>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d112      	bne.n	8003896 <menu+0x24e6>
			if(dilSecim == 0) {
 8003870:	4b8a      	ldr	r3, [pc, #552]	; (8003a9c <menu+0x26ec>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003878:	4a8d      	ldr	r2, [pc, #564]	; (8003ab0 <menu+0x2700>)
 800387a:	2101      	movs	r1, #1
 800387c:	2002      	movs	r0, #2
 800387e:	f004 fa9d 	bl	8007dbc <lcd_print>
 8003882:	e008      	b.n	8003896 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003884:	4b85      	ldr	r3, [pc, #532]	; (8003a9c <menu+0x26ec>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d104      	bne.n	8003896 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800388c:	4a89      	ldr	r2, [pc, #548]	; (8003ab4 <menu+0x2704>)
 800388e:	2101      	movs	r1, #1
 8003890:	2002      	movs	r0, #2
 8003892:	f004 fa93 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003896:	2102      	movs	r1, #2
 8003898:	4887      	ldr	r0, [pc, #540]	; (8003ab8 <menu+0x2708>)
 800389a:	f005 fdb5 	bl	8009408 <HAL_GPIO_ReadPin>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d115      	bne.n	80038d0 <menu+0x2520>
 80038a4:	4b85      	ldr	r3, [pc, #532]	; (8003abc <menu+0x270c>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	f083 0301 	eor.w	r3, r3, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00e      	beq.n	80038d0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80038b2:	4b7c      	ldr	r3, [pc, #496]	; (8003aa4 <menu+0x26f4>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4b7a      	ldr	r3, [pc, #488]	; (8003aa4 <menu+0x26f4>)
 80038bc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80038be:	4b79      	ldr	r3, [pc, #484]	; (8003aa4 <menu+0x26f4>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d902      	bls.n	80038cc <menu+0x251c>
				platformSilindirTipi = 0;
 80038c6:	4b77      	ldr	r3, [pc, #476]	; (8003aa4 <menu+0x26f4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038cc:	f001 f916 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038d0:	2104      	movs	r1, #4
 80038d2:	4879      	ldr	r0, [pc, #484]	; (8003ab8 <menu+0x2708>)
 80038d4:	f005 fd98 	bl	8009408 <HAL_GPIO_ReadPin>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d115      	bne.n	800390a <menu+0x255a>
 80038de:	4b77      	ldr	r3, [pc, #476]	; (8003abc <menu+0x270c>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f083 0301 	eor.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00e      	beq.n	800390a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80038ec:	4b6d      	ldr	r3, [pc, #436]	; (8003aa4 <menu+0x26f4>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	4b6b      	ldr	r3, [pc, #428]	; (8003aa4 <menu+0x26f4>)
 80038f6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80038f8:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <menu+0x26f4>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <menu+0x26f4>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003906:	f001 f8f9 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800390a:	2108      	movs	r1, #8
 800390c:	486a      	ldr	r0, [pc, #424]	; (8003ab8 <menu+0x2708>)
 800390e:	f005 fd7b 	bl	8009408 <HAL_GPIO_ReadPin>
 8003912:	4603      	mov	r3, r0
 8003914:	2b01      	cmp	r3, #1
 8003916:	d118      	bne.n	800394a <menu+0x259a>
 8003918:	4b68      	ldr	r3, [pc, #416]	; (8003abc <menu+0x270c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	f083 0301 	eor.w	r3, r3, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d011      	beq.n	800394a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003926:	4b5f      	ldr	r3, [pc, #380]	; (8003aa4 <menu+0x26f4>)
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <menu+0x2710>)
 800392c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800392e:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <menu+0x26f4>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d106      	bne.n	8003944 <menu+0x2594>
				altLimit = 1;
 8003936:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <menu+0x2714>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800393c:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <menu+0x2714>)
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	4b5f      	ldr	r3, [pc, #380]	; (8003ac0 <menu+0x2710>)
 8003942:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003944:	4b60      	ldr	r3, [pc, #384]	; (8003ac8 <menu+0x2718>)
 8003946:	2201      	movs	r2, #1
 8003948:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800394a:	4b60      	ldr	r3, [pc, #384]	; (8003acc <menu+0x271c>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b16      	cmp	r3, #22
 8003950:	f040 8081 	bne.w	8003a56 <menu+0x26a6>
		if(dilSecim == 0) {
 8003954:	4b51      	ldr	r3, [pc, #324]	; (8003a9c <menu+0x26ec>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 800395c:	4a5c      	ldr	r2, [pc, #368]	; (8003ad0 <menu+0x2720>)
 800395e:	2101      	movs	r1, #1
 8003960:	2001      	movs	r0, #1
 8003962:	f004 fa2b 	bl	8007dbc <lcd_print>
 8003966:	e008      	b.n	800397a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003968:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <menu+0x26ec>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d104      	bne.n	800397a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003970:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <menu+0x2724>)
 8003972:	2101      	movs	r1, #1
 8003974:	2001      	movs	r0, #1
 8003976:	f004 fa21 	bl	8007dbc <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 800397a:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <menu+0x26ec>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003982:	4a55      	ldr	r2, [pc, #340]	; (8003ad8 <menu+0x2728>)
 8003984:	2101      	movs	r1, #1
 8003986:	2002      	movs	r0, #2
 8003988:	f004 fa18 	bl	8007dbc <lcd_print>
 800398c:	e008      	b.n	80039a0 <menu+0x25f0>
			} else if(dilSecim == 1){
 800398e:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <menu+0x26ec>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d104      	bne.n	80039a0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003996:	4a51      	ldr	r2, [pc, #324]	; (8003adc <menu+0x272c>)
 8003998:	2101      	movs	r1, #1
 800399a:	2002      	movs	r0, #2
 800399c:	f004 fa0e 	bl	8007dbc <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <menu+0x2730>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	220a      	movs	r2, #10
 80039a6:	494f      	ldr	r1, [pc, #316]	; (8003ae4 <menu+0x2734>)
 80039a8:	4618      	mov	r0, r3
 80039aa:	f008 fd59 	bl	800c460 <itoa>
		lcd_print(2,16,snum);
 80039ae:	4a4d      	ldr	r2, [pc, #308]	; (8003ae4 <menu+0x2734>)
 80039b0:	2110      	movs	r1, #16
 80039b2:	2002      	movs	r0, #2
 80039b4:	f004 fa02 	bl	8007dbc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039b8:	2102      	movs	r1, #2
 80039ba:	483f      	ldr	r0, [pc, #252]	; (8003ab8 <menu+0x2708>)
 80039bc:	f005 fd24 	bl	8009408 <HAL_GPIO_ReadPin>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d115      	bne.n	80039f2 <menu+0x2642>
 80039c6:	4b3d      	ldr	r3, [pc, #244]	; (8003abc <menu+0x270c>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	f083 0301 	eor.w	r3, r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00e      	beq.n	80039f2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 80039d4:	4b42      	ldr	r3, [pc, #264]	; (8003ae0 <menu+0x2730>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	4b40      	ldr	r3, [pc, #256]	; (8003ae0 <menu+0x2730>)
 80039de:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 80039e0:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <menu+0x2730>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d902      	bls.n	80039ee <menu+0x263e>
				yukariValfTmr = 0;
 80039e8:	4b3d      	ldr	r3, [pc, #244]	; (8003ae0 <menu+0x2730>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039ee:	f001 f885 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f2:	2104      	movs	r1, #4
 80039f4:	4830      	ldr	r0, [pc, #192]	; (8003ab8 <menu+0x2708>)
 80039f6:	f005 fd07 	bl	8009408 <HAL_GPIO_ReadPin>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d115      	bne.n	8003a2c <menu+0x267c>
 8003a00:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <menu+0x270c>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	f083 0301 	eor.w	r3, r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00e      	beq.n	8003a2c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003a0e:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <menu+0x2730>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b32      	ldr	r3, [pc, #200]	; (8003ae0 <menu+0x2730>)
 8003a18:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003a1a:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <menu+0x2730>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <menu+0x2730>)
 8003a24:	2205      	movs	r2, #5
 8003a26:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a28:	f001 f868 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a2c:	2108      	movs	r1, #8
 8003a2e:	4822      	ldr	r0, [pc, #136]	; (8003ab8 <menu+0x2708>)
 8003a30:	f005 fcea 	bl	8009408 <HAL_GPIO_ReadPin>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d10d      	bne.n	8003a56 <menu+0x26a6>
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <menu+0x270c>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	f083 0301 	eor.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003a48:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <menu+0x2730>)
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <menu+0x2710>)
 8003a4e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003a50:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <menu+0x2718>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <menu+0x271c>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b17      	cmp	r3, #23
 8003a5c:	f040 80ac 	bne.w	8003bb8 <menu+0x2808>
		if(dilSecim == 0) {
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <menu+0x26ec>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <menu+0x2738>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f004 f9a5 	bl	8007dbc <lcd_print>
 8003a72:	e008      	b.n	8003a86 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <menu+0x26ec>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d104      	bne.n	8003a86 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <menu+0x273c>)
 8003a7e:	2101      	movs	r1, #1
 8003a80:	2001      	movs	r0, #1
 8003a82:	f004 f99b 	bl	8007dbc <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <menu+0x26ec>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d130      	bne.n	8003af0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <menu+0x2728>)
 8003a90:	2101      	movs	r1, #1
 8003a92:	2002      	movs	r0, #2
 8003a94:	f004 f992 	bl	8007dbc <lcd_print>
 8003a98:	e033      	b.n	8003b02 <menu+0x2752>
 8003a9a:	bf00      	nop
 8003a9c:	20000245 	.word	0x20000245
 8003aa0:	0800d94c 	.word	0x0800d94c
 8003aa4:	20000237 	.word	0x20000237
 8003aa8:	0800d8f0 	.word	0x0800d8f0
 8003aac:	0800d904 	.word	0x0800d904
 8003ab0:	0800d914 	.word	0x0800d914
 8003ab4:	0800d928 	.word	0x0800d928
 8003ab8:	40010800 	.word	0x40010800
 8003abc:	20000253 	.word	0x20000253
 8003ac0:	20000128 	.word	0x20000128
 8003ac4:	2000022a 	.word	0x2000022a
 8003ac8:	20000250 	.word	0x20000250
 8003acc:	20000224 	.word	0x20000224
 8003ad0:	0800d95c 	.word	0x0800d95c
 8003ad4:	0800d970 	.word	0x0800d970
 8003ad8:	0800d610 	.word	0x0800d610
 8003adc:	0800d984 	.word	0x0800d984
 8003ae0:	20000238 	.word	0x20000238
 8003ae4:	20000198 	.word	0x20000198
 8003ae8:	0800d994 	.word	0x0800d994
 8003aec:	0800d9a8 	.word	0x0800d9a8
			} else if(dilSecim == 1) {
 8003af0:	4b98      	ldr	r3, [pc, #608]	; (8003d54 <menu+0x29a4>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d104      	bne.n	8003b02 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003af8:	4a97      	ldr	r2, [pc, #604]	; (8003d58 <menu+0x29a8>)
 8003afa:	2101      	movs	r1, #1
 8003afc:	2002      	movs	r0, #2
 8003afe:	f004 f95d 	bl	8007dbc <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003b02:	4b96      	ldr	r3, [pc, #600]	; (8003d5c <menu+0x29ac>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	220a      	movs	r2, #10
 8003b08:	4995      	ldr	r1, [pc, #596]	; (8003d60 <menu+0x29b0>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f008 fca8 	bl	800c460 <itoa>
		lcd_print(2,16,snum);
 8003b10:	4a93      	ldr	r2, [pc, #588]	; (8003d60 <menu+0x29b0>)
 8003b12:	2110      	movs	r1, #16
 8003b14:	2002      	movs	r0, #2
 8003b16:	f004 f951 	bl	8007dbc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	4891      	ldr	r0, [pc, #580]	; (8003d64 <menu+0x29b4>)
 8003b1e:	f005 fc73 	bl	8009408 <HAL_GPIO_ReadPin>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d115      	bne.n	8003b54 <menu+0x27a4>
 8003b28:	4b8f      	ldr	r3, [pc, #572]	; (8003d68 <menu+0x29b8>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	f083 0301 	eor.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003b36:	4b89      	ldr	r3, [pc, #548]	; (8003d5c <menu+0x29ac>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b87      	ldr	r3, [pc, #540]	; (8003d5c <menu+0x29ac>)
 8003b40:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003b42:	4b86      	ldr	r3, [pc, #536]	; (8003d5c <menu+0x29ac>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d902      	bls.n	8003b50 <menu+0x27a0>
				asagiValfTmr = 0;
 8003b4a:	4b84      	ldr	r3, [pc, #528]	; (8003d5c <menu+0x29ac>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b50:	f000 ffd4 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b54:	2104      	movs	r1, #4
 8003b56:	4883      	ldr	r0, [pc, #524]	; (8003d64 <menu+0x29b4>)
 8003b58:	f005 fc56 	bl	8009408 <HAL_GPIO_ReadPin>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d115      	bne.n	8003b8e <menu+0x27de>
 8003b62:	4b81      	ldr	r3, [pc, #516]	; (8003d68 <menu+0x29b8>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	f083 0301 	eor.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003b70:	4b7a      	ldr	r3, [pc, #488]	; (8003d5c <menu+0x29ac>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	4b78      	ldr	r3, [pc, #480]	; (8003d5c <menu+0x29ac>)
 8003b7a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003b7c:	4b77      	ldr	r3, [pc, #476]	; (8003d5c <menu+0x29ac>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b06      	cmp	r3, #6
 8003b82:	d902      	bls.n	8003b8a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003b84:	4b75      	ldr	r3, [pc, #468]	; (8003d5c <menu+0x29ac>)
 8003b86:	2205      	movs	r2, #5
 8003b88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b8a:	f000 ffb7 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b8e:	2108      	movs	r1, #8
 8003b90:	4874      	ldr	r0, [pc, #464]	; (8003d64 <menu+0x29b4>)
 8003b92:	f005 fc39 	bl	8009408 <HAL_GPIO_ReadPin>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10d      	bne.n	8003bb8 <menu+0x2808>
 8003b9c:	4b72      	ldr	r3, [pc, #456]	; (8003d68 <menu+0x29b8>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	f083 0301 	eor.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d006      	beq.n	8003bb8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003baa:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <menu+0x29ac>)
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <menu+0x29bc>)
 8003bb0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003bb2:	4b6f      	ldr	r3, [pc, #444]	; (8003d70 <menu+0x29c0>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003bb8:	4b6e      	ldr	r3, [pc, #440]	; (8003d74 <menu+0x29c4>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b18      	cmp	r3, #24
 8003bbe:	f040 809d 	bne.w	8003cfc <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003bc2:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <menu+0x29c8>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d113      	bne.n	8003bf2 <menu+0x2842>
			if(dilSecim == 0) {
 8003bca:	4b62      	ldr	r3, [pc, #392]	; (8003d54 <menu+0x29a4>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d105      	bne.n	8003bde <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003bd2:	4a6a      	ldr	r2, [pc, #424]	; (8003d7c <menu+0x29cc>)
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f004 f8f0 	bl	8007dbc <lcd_print>
 8003bdc:	e020      	b.n	8003c20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003bde:	4b5d      	ldr	r3, [pc, #372]	; (8003d54 <menu+0x29a4>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d11c      	bne.n	8003c20 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003be6:	4a66      	ldr	r2, [pc, #408]	; (8003d80 <menu+0x29d0>)
 8003be8:	2101      	movs	r1, #1
 8003bea:	2001      	movs	r0, #1
 8003bec:	f004 f8e6 	bl	8007dbc <lcd_print>
 8003bf0:	e016      	b.n	8003c20 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003bf2:	4b61      	ldr	r3, [pc, #388]	; (8003d78 <menu+0x29c8>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d112      	bne.n	8003c20 <menu+0x2870>
			if(dilSecim == 0) {
 8003bfa:	4b56      	ldr	r3, [pc, #344]	; (8003d54 <menu+0x29a4>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d105      	bne.n	8003c0e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003c02:	4a60      	ldr	r2, [pc, #384]	; (8003d84 <menu+0x29d4>)
 8003c04:	2101      	movs	r1, #1
 8003c06:	2001      	movs	r0, #1
 8003c08:	f004 f8d8 	bl	8007dbc <lcd_print>
 8003c0c:	e008      	b.n	8003c20 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003c0e:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <menu+0x29a4>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d104      	bne.n	8003c20 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003c16:	4a5c      	ldr	r2, [pc, #368]	; (8003d88 <menu+0x29d8>)
 8003c18:	2101      	movs	r1, #1
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f004 f8ce 	bl	8007dbc <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003c20:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <menu+0x29a4>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c28:	4a58      	ldr	r2, [pc, #352]	; (8003d8c <menu+0x29dc>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	f004 f8c5 	bl	8007dbc <lcd_print>
 8003c32:	e008      	b.n	8003c46 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003c34:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <menu+0x29a4>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d104      	bne.n	8003c46 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003c3c:	4a46      	ldr	r2, [pc, #280]	; (8003d58 <menu+0x29a8>)
 8003c3e:	2101      	movs	r1, #1
 8003c40:	2002      	movs	r0, #2
 8003c42:	f004 f8bb 	bl	8007dbc <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003c46:	4b52      	ldr	r3, [pc, #328]	; (8003d90 <menu+0x29e0>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	4944      	ldr	r1, [pc, #272]	; (8003d60 <menu+0x29b0>)
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f008 fc06 	bl	800c460 <itoa>
		lcd_print(2, 16, snum);
 8003c54:	4a42      	ldr	r2, [pc, #264]	; (8003d60 <menu+0x29b0>)
 8003c56:	2110      	movs	r1, #16
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f004 f8af 	bl	8007dbc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4840      	ldr	r0, [pc, #256]	; (8003d64 <menu+0x29b4>)
 8003c62:	f005 fbd1 	bl	8009408 <HAL_GPIO_ReadPin>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d115      	bne.n	8003c98 <menu+0x28e8>
 8003c6c:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <menu+0x29b8>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	f083 0301 	eor.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003c7a:	4b45      	ldr	r3, [pc, #276]	; (8003d90 <menu+0x29e0>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4b43      	ldr	r3, [pc, #268]	; (8003d90 <menu+0x29e0>)
 8003c84:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003c86:	4b42      	ldr	r3, [pc, #264]	; (8003d90 <menu+0x29e0>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d902      	bls.n	8003c94 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003c8e:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <menu+0x29e0>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c94:	f000 ff32 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c98:	2104      	movs	r1, #4
 8003c9a:	4832      	ldr	r0, [pc, #200]	; (8003d64 <menu+0x29b4>)
 8003c9c:	f005 fbb4 	bl	8009408 <HAL_GPIO_ReadPin>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d115      	bne.n	8003cd2 <menu+0x2922>
 8003ca6:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <menu+0x29b8>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	f083 0301 	eor.w	r3, r3, #1
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003cb4:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <menu+0x29e0>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	4b34      	ldr	r3, [pc, #208]	; (8003d90 <menu+0x29e0>)
 8003cbe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003cc0:	4b33      	ldr	r3, [pc, #204]	; (8003d90 <menu+0x29e0>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d902      	bls.n	8003cce <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003cc8:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <menu+0x29e0>)
 8003cca:	2205      	movs	r2, #5
 8003ccc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cce:	f000 ff15 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cd2:	2108      	movs	r1, #8
 8003cd4:	4823      	ldr	r0, [pc, #140]	; (8003d64 <menu+0x29b4>)
 8003cd6:	f005 fb97 	bl	8009408 <HAL_GPIO_ReadPin>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d10d      	bne.n	8003cfc <menu+0x294c>
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <menu+0x29b8>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f083 0301 	eor.w	r3, r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d006      	beq.n	8003cfc <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003cee:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <menu+0x29e0>)
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <menu+0x29bc>)
 8003cf4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <menu+0x29c0>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <menu+0x29c4>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b19      	cmp	r3, #25
 8003d02:	f040 80c4 	bne.w	8003e8e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <menu+0x29c8>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d113      	bne.n	8003d36 <menu+0x2986>
			if(dilSecim == 0) {
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <menu+0x29a4>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d105      	bne.n	8003d22 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <menu+0x29e4>)
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f004 f84e 	bl	8007dbc <lcd_print>
 8003d20:	e047      	b.n	8003db2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <menu+0x29a4>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d143      	bne.n	8003db2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003d2a:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <menu+0x29e8>)
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f004 f844 	bl	8007dbc <lcd_print>
 8003d34:	e03d      	b.n	8003db2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <menu+0x29c8>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d139      	bne.n	8003db2 <menu+0x2a02>
			if(dilSecim == 0) {
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <menu+0x29a4>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12c      	bne.n	8003da0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <menu+0x29ec>)
 8003d48:	2101      	movs	r1, #1
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f004 f836 	bl	8007dbc <lcd_print>
 8003d50:	e02f      	b.n	8003db2 <menu+0x2a02>
 8003d52:	bf00      	nop
 8003d54:	20000245 	.word	0x20000245
 8003d58:	0800d984 	.word	0x0800d984
 8003d5c:	20000239 	.word	0x20000239
 8003d60:	20000198 	.word	0x20000198
 8003d64:	40010800 	.word	0x40010800
 8003d68:	20000253 	.word	0x20000253
 8003d6c:	20000128 	.word	0x20000128
 8003d70:	20000250 	.word	0x20000250
 8003d74:	20000224 	.word	0x20000224
 8003d78:	20000233 	.word	0x20000233
 8003d7c:	0800d9bc 	.word	0x0800d9bc
 8003d80:	0800d9d0 	.word	0x0800d9d0
 8003d84:	0800d9e4 	.word	0x0800d9e4
 8003d88:	0800d9f8 	.word	0x0800d9f8
 8003d8c:	0800d610 	.word	0x0800d610
 8003d90:	2000023a 	.word	0x2000023a
 8003d94:	0800da0c 	.word	0x0800da0c
 8003d98:	0800da20 	.word	0x0800da20
 8003d9c:	0800da34 	.word	0x0800da34
			} else if(dilSecim == 1) {
 8003da0:	4b73      	ldr	r3, [pc, #460]	; (8003f70 <menu+0x2bc0>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d104      	bne.n	8003db2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003da8:	4a72      	ldr	r2, [pc, #456]	; (8003f74 <menu+0x2bc4>)
 8003daa:	2101      	movs	r1, #1
 8003dac:	2001      	movs	r0, #1
 8003dae:	f004 f805 	bl	8007dbc <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003db2:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <menu+0x2bc0>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003dba:	4a6f      	ldr	r2, [pc, #444]	; (8003f78 <menu+0x2bc8>)
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f003 fffc 	bl	8007dbc <lcd_print>
 8003dc4:	e008      	b.n	8003dd8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003dc6:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <menu+0x2bc0>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d104      	bne.n	8003dd8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003dce:	4a6b      	ldr	r2, [pc, #428]	; (8003f7c <menu+0x2bcc>)
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	2002      	movs	r0, #2
 8003dd4:	f003 fff2 	bl	8007dbc <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003dd8:	4b69      	ldr	r3, [pc, #420]	; (8003f80 <menu+0x2bd0>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	220a      	movs	r2, #10
 8003dde:	4969      	ldr	r1, [pc, #420]	; (8003f84 <menu+0x2bd4>)
 8003de0:	4618      	mov	r0, r3
 8003de2:	f008 fb3d 	bl	800c460 <itoa>
		lcd_print(2,16,snum);
 8003de6:	4a67      	ldr	r2, [pc, #412]	; (8003f84 <menu+0x2bd4>)
 8003de8:	2110      	movs	r1, #16
 8003dea:	2002      	movs	r0, #2
 8003dec:	f003 ffe6 	bl	8007dbc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df0:	2102      	movs	r1, #2
 8003df2:	4865      	ldr	r0, [pc, #404]	; (8003f88 <menu+0x2bd8>)
 8003df4:	f005 fb08 	bl	8009408 <HAL_GPIO_ReadPin>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d115      	bne.n	8003e2a <menu+0x2a7a>
 8003dfe:	4b63      	ldr	r3, [pc, #396]	; (8003f8c <menu+0x2bdc>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f083 0301 	eor.w	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003e0c:	4b5c      	ldr	r3, [pc, #368]	; (8003f80 <menu+0x2bd0>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	3301      	adds	r3, #1
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	4b5a      	ldr	r3, [pc, #360]	; (8003f80 <menu+0x2bd0>)
 8003e16:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003e18:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <menu+0x2bd0>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d902      	bls.n	8003e26 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003e20:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <menu+0x2bd0>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e26:	f000 fe69 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	4856      	ldr	r0, [pc, #344]	; (8003f88 <menu+0x2bd8>)
 8003e2e:	f005 faeb 	bl	8009408 <HAL_GPIO_ReadPin>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d115      	bne.n	8003e64 <menu+0x2ab4>
 8003e38:	4b54      	ldr	r3, [pc, #336]	; (8003f8c <menu+0x2bdc>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f083 0301 	eor.w	r3, r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00e      	beq.n	8003e64 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003e46:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <menu+0x2bd0>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b4c      	ldr	r3, [pc, #304]	; (8003f80 <menu+0x2bd0>)
 8003e50:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003e52:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <menu+0x2bd0>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d902      	bls.n	8003e60 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <menu+0x2bd0>)
 8003e5c:	2205      	movs	r2, #5
 8003e5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e60:	f000 fe4c 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e64:	2108      	movs	r1, #8
 8003e66:	4848      	ldr	r0, [pc, #288]	; (8003f88 <menu+0x2bd8>)
 8003e68:	f005 face 	bl	8009408 <HAL_GPIO_ReadPin>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10d      	bne.n	8003e8e <menu+0x2ade>
 8003e72:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <menu+0x2bdc>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	f083 0301 	eor.w	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003e80:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <menu+0x2bd0>)
 8003e82:	781a      	ldrb	r2, [r3, #0]
 8003e84:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <menu+0x2be0>)
 8003e86:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <menu+0x2be4>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003e8e:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <menu+0x2be8>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b1a      	cmp	r3, #26
 8003e94:	f040 80ec 	bne.w	8004070 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003e98:	4b35      	ldr	r3, [pc, #212]	; (8003f70 <menu+0x2bc0>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003ea0:	4a3e      	ldr	r2, [pc, #248]	; (8003f9c <menu+0x2bec>)
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f003 ff89 	bl	8007dbc <lcd_print>
 8003eaa:	e008      	b.n	8003ebe <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003eac:	4b30      	ldr	r3, [pc, #192]	; (8003f70 <menu+0x2bc0>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d104      	bne.n	8003ebe <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003eb4:	4a3a      	ldr	r2, [pc, #232]	; (8003fa0 <menu+0x2bf0>)
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f003 ff7f 	bl	8007dbc <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003ebe:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <menu+0x2bf4>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b63      	cmp	r3, #99	; 0x63
 8003ec4:	d91e      	bls.n	8003f04 <menu+0x2b54>
			if(dilSecim == 0) {
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <menu+0x2bc0>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d104      	bne.n	8003ed8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ece:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <menu+0x2bc8>)
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	2002      	movs	r0, #2
 8003ed4:	f003 ff72 	bl	8007dbc <lcd_print>
			}
			if(dilSecim == 1) {
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <menu+0x2bc0>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d104      	bne.n	8003eea <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <menu+0x2bcc>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	f003 ff69 	bl	8007dbc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003eea:	4b2e      	ldr	r3, [pc, #184]	; (8003fa4 <menu+0x2bf4>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	220a      	movs	r2, #10
 8003ef0:	4924      	ldr	r1, [pc, #144]	; (8003f84 <menu+0x2bd4>)
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f008 fab4 	bl	800c460 <itoa>
			lcd_print(2,14,snum);
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <menu+0x2bd4>)
 8003efa:	210e      	movs	r1, #14
 8003efc:	2002      	movs	r0, #2
 8003efe:	f003 ff5d 	bl	8007dbc <lcd_print>
 8003f02:	e066      	b.n	8003fd2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <menu+0x2bf4>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b09      	cmp	r3, #9
 8003f0a:	d923      	bls.n	8003f54 <menu+0x2ba4>
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <menu+0x2bf4>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b63      	cmp	r3, #99	; 0x63
 8003f12:	d81f      	bhi.n	8003f54 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003f14:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <menu+0x2bc0>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f1c:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <menu+0x2bc8>)
 8003f1e:	2101      	movs	r1, #1
 8003f20:	2002      	movs	r0, #2
 8003f22:	f003 ff4b 	bl	8007dbc <lcd_print>
 8003f26:	e008      	b.n	8003f3a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <menu+0x2bc0>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d104      	bne.n	8003f3a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003f30:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <menu+0x2bcc>)
 8003f32:	2101      	movs	r1, #1
 8003f34:	2002      	movs	r0, #2
 8003f36:	f003 ff41 	bl	8007dbc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <menu+0x2bf4>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	220a      	movs	r2, #10
 8003f40:	4910      	ldr	r1, [pc, #64]	; (8003f84 <menu+0x2bd4>)
 8003f42:	4618      	mov	r0, r3
 8003f44:	f008 fa8c 	bl	800c460 <itoa>
			lcd_print(2, 15, snum);
 8003f48:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <menu+0x2bd4>)
 8003f4a:	210f      	movs	r1, #15
 8003f4c:	2002      	movs	r0, #2
 8003f4e:	f003 ff35 	bl	8007dbc <lcd_print>
 8003f52:	e03e      	b.n	8003fd2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <menu+0x2bf4>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b09      	cmp	r3, #9
 8003f5a:	d83a      	bhi.n	8003fd2 <menu+0x2c22>
			if(dilSecim == 0) {
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <menu+0x2bc0>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d121      	bne.n	8003fa8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f64:	4a04      	ldr	r2, [pc, #16]	; (8003f78 <menu+0x2bc8>)
 8003f66:	2101      	movs	r1, #1
 8003f68:	2002      	movs	r0, #2
 8003f6a:	f003 ff27 	bl	8007dbc <lcd_print>
 8003f6e:	e024      	b.n	8003fba <menu+0x2c0a>
 8003f70:	20000245 	.word	0x20000245
 8003f74:	0800da48 	.word	0x0800da48
 8003f78:	0800d610 	.word	0x0800d610
 8003f7c:	0800d984 	.word	0x0800d984
 8003f80:	2000023b 	.word	0x2000023b
 8003f84:	20000198 	.word	0x20000198
 8003f88:	40010800 	.word	0x40010800
 8003f8c:	20000253 	.word	0x20000253
 8003f90:	20000128 	.word	0x20000128
 8003f94:	20000250 	.word	0x20000250
 8003f98:	20000224 	.word	0x20000224
 8003f9c:	0800da5c 	.word	0x0800da5c
 8003fa0:	0800da70 	.word	0x0800da70
 8003fa4:	2000023c 	.word	0x2000023c
			} else if(dilSecim == 1) {
 8003fa8:	4b8f      	ldr	r3, [pc, #572]	; (80041e8 <menu+0x2e38>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d104      	bne.n	8003fba <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003fb0:	4a8e      	ldr	r2, [pc, #568]	; (80041ec <menu+0x2e3c>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	2002      	movs	r0, #2
 8003fb6:	f003 ff01 	bl	8007dbc <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fba:	4b8d      	ldr	r3, [pc, #564]	; (80041f0 <menu+0x2e40>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	220a      	movs	r2, #10
 8003fc0:	498c      	ldr	r1, [pc, #560]	; (80041f4 <menu+0x2e44>)
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f008 fa4c 	bl	800c460 <itoa>
			lcd_print(2, 16, snum);
 8003fc8:	4a8a      	ldr	r2, [pc, #552]	; (80041f4 <menu+0x2e44>)
 8003fca:	2110      	movs	r1, #16
 8003fcc:	2002      	movs	r0, #2
 8003fce:	f003 fef5 	bl	8007dbc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4888      	ldr	r0, [pc, #544]	; (80041f8 <menu+0x2e48>)
 8003fd6:	f005 fa17 	bl	8009408 <HAL_GPIO_ReadPin>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d115      	bne.n	800400c <menu+0x2c5c>
 8003fe0:	4b86      	ldr	r3, [pc, #536]	; (80041fc <menu+0x2e4c>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f083 0301 	eor.w	r3, r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00e      	beq.n	800400c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003fee:	4b80      	ldr	r3, [pc, #512]	; (80041f0 <menu+0x2e40>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4b7e      	ldr	r3, [pc, #504]	; (80041f0 <menu+0x2e40>)
 8003ff8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003ffa:	4b7d      	ldr	r3, [pc, #500]	; (80041f0 <menu+0x2e40>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2bb4      	cmp	r3, #180	; 0xb4
 8004000:	d902      	bls.n	8004008 <menu+0x2c58>
				makineCalismaTmr = 0;
 8004002:	4b7b      	ldr	r3, [pc, #492]	; (80041f0 <menu+0x2e40>)
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004008:	f000 fd78 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800400c:	2104      	movs	r1, #4
 800400e:	487a      	ldr	r0, [pc, #488]	; (80041f8 <menu+0x2e48>)
 8004010:	f005 f9fa 	bl	8009408 <HAL_GPIO_ReadPin>
 8004014:	4603      	mov	r3, r0
 8004016:	2b01      	cmp	r3, #1
 8004018:	d115      	bne.n	8004046 <menu+0x2c96>
 800401a:	4b78      	ldr	r3, [pc, #480]	; (80041fc <menu+0x2e4c>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	f083 0301 	eor.w	r3, r3, #1
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004028:	4b71      	ldr	r3, [pc, #452]	; (80041f0 <menu+0x2e40>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	3b01      	subs	r3, #1
 800402e:	b2da      	uxtb	r2, r3
 8004030:	4b6f      	ldr	r3, [pc, #444]	; (80041f0 <menu+0x2e40>)
 8004032:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004034:	4b6e      	ldr	r3, [pc, #440]	; (80041f0 <menu+0x2e40>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2bb5      	cmp	r3, #181	; 0xb5
 800403a:	d902      	bls.n	8004042 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800403c:	4b6c      	ldr	r3, [pc, #432]	; (80041f0 <menu+0x2e40>)
 800403e:	22b4      	movs	r2, #180	; 0xb4
 8004040:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004042:	f000 fd5b 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004046:	2108      	movs	r1, #8
 8004048:	486b      	ldr	r0, [pc, #428]	; (80041f8 <menu+0x2e48>)
 800404a:	f005 f9dd 	bl	8009408 <HAL_GPIO_ReadPin>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10d      	bne.n	8004070 <menu+0x2cc0>
 8004054:	4b69      	ldr	r3, [pc, #420]	; (80041fc <menu+0x2e4c>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	f083 0301 	eor.w	r3, r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004062:	4b63      	ldr	r3, [pc, #396]	; (80041f0 <menu+0x2e40>)
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	4b66      	ldr	r3, [pc, #408]	; (8004200 <menu+0x2e50>)
 8004068:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800406a:	4b66      	ldr	r3, [pc, #408]	; (8004204 <menu+0x2e54>)
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004070:	4b65      	ldr	r3, [pc, #404]	; (8004208 <menu+0x2e58>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b1b      	cmp	r3, #27
 8004076:	f040 8083 	bne.w	8004180 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800407a:	4a64      	ldr	r2, [pc, #400]	; (800420c <menu+0x2e5c>)
 800407c:	2101      	movs	r1, #1
 800407e:	2001      	movs	r0, #1
 8004080:	f003 fe9c 	bl	8007dbc <lcd_print>

		if(buzzer == 0) {
 8004084:	4b62      	ldr	r3, [pc, #392]	; (8004210 <menu+0x2e60>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d113      	bne.n	80040b4 <menu+0x2d04>
			if(dilSecim == 0) {
 800408c:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <menu+0x2e38>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d105      	bne.n	80040a0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004094:	4a5f      	ldr	r2, [pc, #380]	; (8004214 <menu+0x2e64>)
 8004096:	2101      	movs	r1, #1
 8004098:	2002      	movs	r0, #2
 800409a:	f003 fe8f 	bl	8007dbc <lcd_print>
 800409e:	e020      	b.n	80040e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040a0:	4b51      	ldr	r3, [pc, #324]	; (80041e8 <menu+0x2e38>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d11c      	bne.n	80040e2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80040a8:	4a5b      	ldr	r2, [pc, #364]	; (8004218 <menu+0x2e68>)
 80040aa:	2101      	movs	r1, #1
 80040ac:	2002      	movs	r0, #2
 80040ae:	f003 fe85 	bl	8007dbc <lcd_print>
 80040b2:	e016      	b.n	80040e2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80040b4:	4b56      	ldr	r3, [pc, #344]	; (8004210 <menu+0x2e60>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d112      	bne.n	80040e2 <menu+0x2d32>
			if(dilSecim == 0) {
 80040bc:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <menu+0x2e38>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80040c4:	4a55      	ldr	r2, [pc, #340]	; (800421c <menu+0x2e6c>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	2002      	movs	r0, #2
 80040ca:	f003 fe77 	bl	8007dbc <lcd_print>
 80040ce:	e008      	b.n	80040e2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80040d0:	4b45      	ldr	r3, [pc, #276]	; (80041e8 <menu+0x2e38>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d104      	bne.n	80040e2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80040d8:	4a51      	ldr	r2, [pc, #324]	; (8004220 <menu+0x2e70>)
 80040da:	2101      	movs	r1, #1
 80040dc:	2002      	movs	r0, #2
 80040de:	f003 fe6d 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040e2:	2102      	movs	r1, #2
 80040e4:	4844      	ldr	r0, [pc, #272]	; (80041f8 <menu+0x2e48>)
 80040e6:	f005 f98f 	bl	8009408 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d115      	bne.n	800411c <menu+0x2d6c>
 80040f0:	4b42      	ldr	r3, [pc, #264]	; (80041fc <menu+0x2e4c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f083 0301 	eor.w	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00e      	beq.n	800411c <menu+0x2d6c>
			buzzer = buzzer + 1;
 80040fe:	4b44      	ldr	r3, [pc, #272]	; (8004210 <menu+0x2e60>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b42      	ldr	r3, [pc, #264]	; (8004210 <menu+0x2e60>)
 8004108:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800410a:	4b41      	ldr	r3, [pc, #260]	; (8004210 <menu+0x2e60>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d902      	bls.n	8004118 <menu+0x2d68>
				buzzer = 0;
 8004112:	4b3f      	ldr	r3, [pc, #252]	; (8004210 <menu+0x2e60>)
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004118:	f000 fcf0 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800411c:	2104      	movs	r1, #4
 800411e:	4836      	ldr	r0, [pc, #216]	; (80041f8 <menu+0x2e48>)
 8004120:	f005 f972 	bl	8009408 <HAL_GPIO_ReadPin>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	d115      	bne.n	8004156 <menu+0x2da6>
 800412a:	4b34      	ldr	r3, [pc, #208]	; (80041fc <menu+0x2e4c>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	f083 0301 	eor.w	r3, r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <menu+0x2e60>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	3b01      	subs	r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	4b33      	ldr	r3, [pc, #204]	; (8004210 <menu+0x2e60>)
 8004142:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004144:	4b32      	ldr	r3, [pc, #200]	; (8004210 <menu+0x2e60>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <menu+0x2da2>
		   		buzzer = 1;
 800414c:	4b30      	ldr	r3, [pc, #192]	; (8004210 <menu+0x2e60>)
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004152:	f000 fcd3 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004156:	2108      	movs	r1, #8
 8004158:	4827      	ldr	r0, [pc, #156]	; (80041f8 <menu+0x2e48>)
 800415a:	f005 f955 	bl	8009408 <HAL_GPIO_ReadPin>
 800415e:	4603      	mov	r3, r0
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10d      	bne.n	8004180 <menu+0x2dd0>
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <menu+0x2e4c>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	f083 0301 	eor.w	r3, r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <menu+0x2e60>)
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	4b22      	ldr	r3, [pc, #136]	; (8004200 <menu+0x2e50>)
 8004178:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <menu+0x2e54>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004180:	4b21      	ldr	r3, [pc, #132]	; (8004208 <menu+0x2e58>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b1c      	cmp	r3, #28
 8004186:	f040 80ab 	bne.w	80042e0 <menu+0x2f30>
		calismaSayModu = 0;
 800418a:	4b26      	ldr	r3, [pc, #152]	; (8004224 <menu+0x2e74>)
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004190:	4a25      	ldr	r2, [pc, #148]	; (8004228 <menu+0x2e78>)
 8004192:	2101      	movs	r1, #1
 8004194:	2001      	movs	r0, #1
 8004196:	f003 fe11 	bl	8007dbc <lcd_print>

		if(demoMode == 0) {
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <menu+0x2e7c>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d113      	bne.n	80041ca <menu+0x2e1a>
			if(dilSecim == 0) {
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <menu+0x2e38>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d105      	bne.n	80041b6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80041aa:	4a1a      	ldr	r2, [pc, #104]	; (8004214 <menu+0x2e64>)
 80041ac:	2101      	movs	r1, #1
 80041ae:	2002      	movs	r0, #2
 80041b0:	f003 fe04 	bl	8007dbc <lcd_print>
 80041b4:	e045      	b.n	8004242 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <menu+0x2e38>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d141      	bne.n	8004242 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80041be:	4a16      	ldr	r2, [pc, #88]	; (8004218 <menu+0x2e68>)
 80041c0:	2101      	movs	r1, #1
 80041c2:	2002      	movs	r0, #2
 80041c4:	f003 fdfa 	bl	8007dbc <lcd_print>
 80041c8:	e03b      	b.n	8004242 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80041ca:	4b18      	ldr	r3, [pc, #96]	; (800422c <menu+0x2e7c>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d137      	bne.n	8004242 <menu+0x2e92>
			if(dilSecim == 0){
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <menu+0x2e38>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d12a      	bne.n	8004230 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80041da:	4a10      	ldr	r2, [pc, #64]	; (800421c <menu+0x2e6c>)
 80041dc:	2101      	movs	r1, #1
 80041de:	2002      	movs	r0, #2
 80041e0:	f003 fdec 	bl	8007dbc <lcd_print>
 80041e4:	e02d      	b.n	8004242 <menu+0x2e92>
 80041e6:	bf00      	nop
 80041e8:	20000245 	.word	0x20000245
 80041ec:	0800d984 	.word	0x0800d984
 80041f0:	2000023c 	.word	0x2000023c
 80041f4:	20000198 	.word	0x20000198
 80041f8:	40010800 	.word	0x40010800
 80041fc:	20000253 	.word	0x20000253
 8004200:	20000128 	.word	0x20000128
 8004204:	20000250 	.word	0x20000250
 8004208:	20000224 	.word	0x20000224
 800420c:	0800da84 	.word	0x0800da84
 8004210:	20000240 	.word	0x20000240
 8004214:	0800d3ac 	.word	0x0800d3ac
 8004218:	0800d3c0 	.word	0x0800d3c0
 800421c:	0800d40c 	.word	0x0800d40c
 8004220:	0800d420 	.word	0x0800d420
 8004224:	20000244 	.word	0x20000244
 8004228:	0800da98 	.word	0x0800da98
 800422c:	20000242 	.word	0x20000242
			} else if(dilSecim == 1) {
 8004230:	4b71      	ldr	r3, [pc, #452]	; (80043f8 <menu+0x3048>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d104      	bne.n	8004242 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004238:	4a70      	ldr	r2, [pc, #448]	; (80043fc <menu+0x304c>)
 800423a:	2101      	movs	r1, #1
 800423c:	2002      	movs	r0, #2
 800423e:	f003 fdbd 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004242:	2102      	movs	r1, #2
 8004244:	486e      	ldr	r0, [pc, #440]	; (8004400 <menu+0x3050>)
 8004246:	f005 f8df 	bl	8009408 <HAL_GPIO_ReadPin>
 800424a:	4603      	mov	r3, r0
 800424c:	2b01      	cmp	r3, #1
 800424e:	d115      	bne.n	800427c <menu+0x2ecc>
 8004250:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <menu+0x3054>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	f083 0301 	eor.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00e      	beq.n	800427c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800425e:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <menu+0x3058>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	3301      	adds	r3, #1
 8004264:	b2da      	uxtb	r2, r3
 8004266:	4b68      	ldr	r3, [pc, #416]	; (8004408 <menu+0x3058>)
 8004268:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800426a:	4b67      	ldr	r3, [pc, #412]	; (8004408 <menu+0x3058>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d902      	bls.n	8004278 <menu+0x2ec8>
				demoMode = 0;
 8004272:	4b65      	ldr	r3, [pc, #404]	; (8004408 <menu+0x3058>)
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004278:	f000 fc40 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800427c:	2104      	movs	r1, #4
 800427e:	4860      	ldr	r0, [pc, #384]	; (8004400 <menu+0x3050>)
 8004280:	f005 f8c2 	bl	8009408 <HAL_GPIO_ReadPin>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d115      	bne.n	80042b6 <menu+0x2f06>
 800428a:	4b5e      	ldr	r3, [pc, #376]	; (8004404 <menu+0x3054>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	f083 0301 	eor.w	r3, r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004298:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <menu+0x3058>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	3b01      	subs	r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	4b59      	ldr	r3, [pc, #356]	; (8004408 <menu+0x3058>)
 80042a2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80042a4:	4b58      	ldr	r3, [pc, #352]	; (8004408 <menu+0x3058>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <menu+0x2f02>
		   		demoMode = 1;
 80042ac:	4b56      	ldr	r3, [pc, #344]	; (8004408 <menu+0x3058>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042b2:	f000 fc23 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042b6:	2108      	movs	r1, #8
 80042b8:	4851      	ldr	r0, [pc, #324]	; (8004400 <menu+0x3050>)
 80042ba:	f005 f8a5 	bl	8009408 <HAL_GPIO_ReadPin>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10d      	bne.n	80042e0 <menu+0x2f30>
 80042c4:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <menu+0x3054>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f083 0301 	eor.w	r3, r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d006      	beq.n	80042e0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80042d2:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <menu+0x3058>)
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	4b4d      	ldr	r3, [pc, #308]	; (800440c <menu+0x305c>)
 80042d8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80042da:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <menu+0x3060>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <menu+0x3064>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b1d      	cmp	r3, #29
 80042e6:	f040 8132 	bne.w	800454e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80042ea:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <menu+0x3068>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d113      	bne.n	800431a <menu+0x2f6a>
 80042f2:	4b4a      	ldr	r3, [pc, #296]	; (800441c <menu+0x306c>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10f      	bne.n	800431a <menu+0x2f6a>
 80042fa:	4b49      	ldr	r3, [pc, #292]	; (8004420 <menu+0x3070>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <menu+0x2f6a>
 8004302:	4b48      	ldr	r3, [pc, #288]	; (8004424 <menu+0x3074>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d107      	bne.n	800431a <menu+0x2f6a>
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <menu+0x3078>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004312:	4b46      	ldr	r3, [pc, #280]	; (800442c <menu+0x307c>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e002      	b.n	8004320 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800431a:	4b44      	ldr	r3, [pc, #272]	; (800442c <menu+0x307c>)
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004320:	4b43      	ldr	r3, [pc, #268]	; (8004430 <menu+0x3080>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d154      	bne.n	80043d2 <menu+0x3022>
			if(dilSecim == 0) {
 8004328:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <menu+0x3048>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d105      	bne.n	800433c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004330:	4a40      	ldr	r2, [pc, #256]	; (8004434 <menu+0x3084>)
 8004332:	2101      	movs	r1, #1
 8004334:	2001      	movs	r0, #1
 8004336:	f003 fd41 	bl	8007dbc <lcd_print>
 800433a:	e008      	b.n	800434e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800433c:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <menu+0x3048>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d104      	bne.n	800434e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004344:	4a3c      	ldr	r2, [pc, #240]	; (8004438 <menu+0x3088>)
 8004346:	2101      	movs	r1, #1
 8004348:	2001      	movs	r0, #1
 800434a:	f003 fd37 	bl	8007dbc <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800434e:	4b36      	ldr	r3, [pc, #216]	; (8004428 <menu+0x3078>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	220a      	movs	r2, #10
 8004354:	4939      	ldr	r1, [pc, #228]	; (800443c <menu+0x308c>)
 8004356:	4618      	mov	r0, r3
 8004358:	f008 f882 	bl	800c460 <itoa>
			lcd_print(2, 12, snum);
 800435c:	4a37      	ldr	r2, [pc, #220]	; (800443c <menu+0x308c>)
 800435e:	210c      	movs	r1, #12
 8004360:	2002      	movs	r0, #2
 8004362:	f003 fd2b 	bl	8007dbc <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004366:	4b2f      	ldr	r3, [pc, #188]	; (8004424 <menu+0x3074>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	220a      	movs	r2, #10
 800436c:	4933      	ldr	r1, [pc, #204]	; (800443c <menu+0x308c>)
 800436e:	4618      	mov	r0, r3
 8004370:	f008 f876 	bl	800c460 <itoa>
			lcd_print(2, 13, snum);
 8004374:	4a31      	ldr	r2, [pc, #196]	; (800443c <menu+0x308c>)
 8004376:	210d      	movs	r1, #13
 8004378:	2002      	movs	r0, #2
 800437a:	f003 fd1f 	bl	8007dbc <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800437e:	4b28      	ldr	r3, [pc, #160]	; (8004420 <menu+0x3070>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	220a      	movs	r2, #10
 8004384:	492d      	ldr	r1, [pc, #180]	; (800443c <menu+0x308c>)
 8004386:	4618      	mov	r0, r3
 8004388:	f008 f86a 	bl	800c460 <itoa>
			lcd_print(2, 14, snum);
 800438c:	4a2b      	ldr	r2, [pc, #172]	; (800443c <menu+0x308c>)
 800438e:	210e      	movs	r1, #14
 8004390:	2002      	movs	r0, #2
 8004392:	f003 fd13 	bl	8007dbc <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <menu+0x306c>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	220a      	movs	r2, #10
 800439c:	4927      	ldr	r1, [pc, #156]	; (800443c <menu+0x308c>)
 800439e:	4618      	mov	r0, r3
 80043a0:	f008 f85e 	bl	800c460 <itoa>
			lcd_print(2, 15, snum);
 80043a4:	4a25      	ldr	r2, [pc, #148]	; (800443c <menu+0x308c>)
 80043a6:	210f      	movs	r1, #15
 80043a8:	2002      	movs	r0, #2
 80043aa:	f003 fd07 	bl	8007dbc <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <menu+0x3068>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	220a      	movs	r2, #10
 80043b4:	4921      	ldr	r1, [pc, #132]	; (800443c <menu+0x308c>)
 80043b6:	4618      	mov	r0, r3
 80043b8:	f008 f852 	bl	800c460 <itoa>
			lcd_print(2, 16, snum);
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <menu+0x308c>)
 80043be:	2110      	movs	r1, #16
 80043c0:	2002      	movs	r0, #2
 80043c2:	f003 fcfb 	bl	8007dbc <lcd_print>

			lcd_print(2, 1, "           ");
 80043c6:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <menu+0x3090>)
 80043c8:	2101      	movs	r1, #1
 80043ca:	2002      	movs	r0, #2
 80043cc:	f003 fcf6 	bl	8007dbc <lcd_print>
 80043d0:	e048      	b.n	8004464 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80043d2:	4b17      	ldr	r3, [pc, #92]	; (8004430 <menu+0x3080>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d144      	bne.n	8004464 <menu+0x30b4>
			if(dilSecim == 0) {
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <menu+0x3048>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d132      	bne.n	8004448 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043e2:	4a14      	ldr	r2, [pc, #80]	; (8004434 <menu+0x3084>)
 80043e4:	2101      	movs	r1, #1
 80043e6:	2001      	movs	r0, #1
 80043e8:	f003 fce8 	bl	8007dbc <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <menu+0x3094>)
 80043ee:	2101      	movs	r1, #1
 80043f0:	2002      	movs	r0, #2
 80043f2:	f003 fce3 	bl	8007dbc <lcd_print>
 80043f6:	e035      	b.n	8004464 <menu+0x30b4>
 80043f8:	20000245 	.word	0x20000245
 80043fc:	0800d420 	.word	0x0800d420
 8004400:	40010800 	.word	0x40010800
 8004404:	20000253 	.word	0x20000253
 8004408:	20000242 	.word	0x20000242
 800440c:	20000128 	.word	0x20000128
 8004410:	20000250 	.word	0x20000250
 8004414:	20000224 	.word	0x20000224
 8004418:	20000221 	.word	0x20000221
 800441c:	20000222 	.word	0x20000222
 8004420:	20000008 	.word	0x20000008
 8004424:	20000009 	.word	0x20000009
 8004428:	20000223 	.word	0x20000223
 800442c:	20000265 	.word	0x20000265
 8004430:	20000244 	.word	0x20000244
 8004434:	0800daa8 	.word	0x0800daa8
 8004438:	0800dabc 	.word	0x0800dabc
 800443c:	20000198 	.word	0x20000198
 8004440:	0800dad0 	.word	0x0800dad0
 8004444:	0800dadc 	.word	0x0800dadc
			} else if(dilSecim == 1) {
 8004448:	4b94      	ldr	r3, [pc, #592]	; (800469c <menu+0x32ec>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d109      	bne.n	8004464 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004450:	4a93      	ldr	r2, [pc, #588]	; (80046a0 <menu+0x32f0>)
 8004452:	2101      	movs	r1, #1
 8004454:	2001      	movs	r0, #1
 8004456:	f003 fcb1 	bl	8007dbc <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800445a:	4a92      	ldr	r2, [pc, #584]	; (80046a4 <menu+0x32f4>)
 800445c:	2101      	movs	r1, #1
 800445e:	2002      	movs	r0, #2
 8004460:	f003 fcac 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004464:	2102      	movs	r1, #2
 8004466:	4890      	ldr	r0, [pc, #576]	; (80046a8 <menu+0x32f8>)
 8004468:	f004 ffce 	bl	8009408 <HAL_GPIO_ReadPin>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d119      	bne.n	80044a6 <menu+0x30f6>
 8004472:	4b8e      	ldr	r3, [pc, #568]	; (80046ac <menu+0x32fc>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	f083 0301 	eor.w	r3, r3, #1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d012      	beq.n	80044a6 <menu+0x30f6>
 8004480:	4b8b      	ldr	r3, [pc, #556]	; (80046b0 <menu+0x3300>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004488:	4b8a      	ldr	r3, [pc, #552]	; (80046b4 <menu+0x3304>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	4b88      	ldr	r3, [pc, #544]	; (80046b4 <menu+0x3304>)
 8004492:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004494:	4b87      	ldr	r3, [pc, #540]	; (80046b4 <menu+0x3304>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d902      	bls.n	80044a2 <menu+0x30f2>
				calismaSayModu = 0;
 800449c:	4b85      	ldr	r3, [pc, #532]	; (80046b4 <menu+0x3304>)
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80044a2:	f000 fb2b 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80044a6:	2104      	movs	r1, #4
 80044a8:	487f      	ldr	r0, [pc, #508]	; (80046a8 <menu+0x32f8>)
 80044aa:	f004 ffad 	bl	8009408 <HAL_GPIO_ReadPin>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d119      	bne.n	80044e8 <menu+0x3138>
 80044b4:	4b7d      	ldr	r3, [pc, #500]	; (80046ac <menu+0x32fc>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f083 0301 	eor.w	r3, r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d012      	beq.n	80044e8 <menu+0x3138>
 80044c2:	4b7b      	ldr	r3, [pc, #492]	; (80046b0 <menu+0x3300>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00e      	beq.n	80044e8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80044ca:	4b7a      	ldr	r3, [pc, #488]	; (80046b4 <menu+0x3304>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4b78      	ldr	r3, [pc, #480]	; (80046b4 <menu+0x3304>)
 80044d4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80044d6:	4b77      	ldr	r3, [pc, #476]	; (80046b4 <menu+0x3304>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <menu+0x3134>
		   		calismaSayModu = 1;
 80044de:	4b75      	ldr	r3, [pc, #468]	; (80046b4 <menu+0x3304>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044e4:	f000 fb0a 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044e8:	2108      	movs	r1, #8
 80044ea:	486f      	ldr	r0, [pc, #444]	; (80046a8 <menu+0x32f8>)
 80044ec:	f004 ff8c 	bl	8009408 <HAL_GPIO_ReadPin>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d12b      	bne.n	800454e <menu+0x319e>
 80044f6:	4b6d      	ldr	r3, [pc, #436]	; (80046ac <menu+0x32fc>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f083 0301 	eor.w	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d024      	beq.n	800454e <menu+0x319e>
			eepromData[32] = 0;
 8004504:	4b6c      	ldr	r3, [pc, #432]	; (80046b8 <menu+0x3308>)
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800450c:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <menu+0x3308>)
 800450e:	2200      	movs	r2, #0
 8004510:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004512:	4b69      	ldr	r3, [pc, #420]	; (80046b8 <menu+0x3308>)
 8004514:	2200      	movs	r2, #0
 8004516:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004518:	4b67      	ldr	r3, [pc, #412]	; (80046b8 <menu+0x3308>)
 800451a:	2200      	movs	r2, #0
 800451c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800451e:	4b66      	ldr	r3, [pc, #408]	; (80046b8 <menu+0x3308>)
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004524:	4b65      	ldr	r3, [pc, #404]	; (80046bc <menu+0x330c>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800452a:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <menu+0x3310>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004530:	4b64      	ldr	r3, [pc, #400]	; (80046c4 <menu+0x3314>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004536:	4b64      	ldr	r3, [pc, #400]	; (80046c8 <menu+0x3318>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800453c:	4b63      	ldr	r3, [pc, #396]	; (80046cc <menu+0x331c>)
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004542:	4b5c      	ldr	r3, [pc, #368]	; (80046b4 <menu+0x3304>)
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004548:	4b61      	ldr	r3, [pc, #388]	; (80046d0 <menu+0x3320>)
 800454a:	2201      	movs	r2, #1
 800454c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800454e:	4b61      	ldr	r3, [pc, #388]	; (80046d4 <menu+0x3324>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b1e      	cmp	r3, #30
 8004554:	d16f      	bne.n	8004636 <menu+0x3286>
		calismaSayModu = 0;
 8004556:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <menu+0x3304>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800455c:	4b4f      	ldr	r3, [pc, #316]	; (800469c <menu+0x32ec>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004564:	4a5c      	ldr	r2, [pc, #368]	; (80046d8 <menu+0x3328>)
 8004566:	2101      	movs	r1, #1
 8004568:	2001      	movs	r0, #1
 800456a:	f003 fc27 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800456e:	4a5b      	ldr	r2, [pc, #364]	; (80046dc <menu+0x332c>)
 8004570:	2101      	movs	r1, #1
 8004572:	2002      	movs	r0, #2
 8004574:	f003 fc22 	bl	8007dbc <lcd_print>
 8004578:	e00d      	b.n	8004596 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800457a:	4b48      	ldr	r3, [pc, #288]	; (800469c <menu+0x32ec>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d109      	bne.n	8004596 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004582:	4a57      	ldr	r2, [pc, #348]	; (80046e0 <menu+0x3330>)
 8004584:	2101      	movs	r1, #1
 8004586:	2001      	movs	r0, #1
 8004588:	f003 fc18 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800458c:	4a55      	ldr	r2, [pc, #340]	; (80046e4 <menu+0x3334>)
 800458e:	2101      	movs	r1, #1
 8004590:	2002      	movs	r0, #2
 8004592:	f003 fc13 	bl	8007dbc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004596:	2102      	movs	r1, #2
 8004598:	4843      	ldr	r0, [pc, #268]	; (80046a8 <menu+0x32f8>)
 800459a:	f004 ff35 	bl	8009408 <HAL_GPIO_ReadPin>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d115      	bne.n	80045d0 <menu+0x3220>
 80045a4:	4b41      	ldr	r3, [pc, #260]	; (80046ac <menu+0x32fc>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	f083 0301 	eor.w	r3, r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00e      	beq.n	80045d0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80045b2:	4b3a      	ldr	r3, [pc, #232]	; (800469c <menu+0x32ec>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	3301      	adds	r3, #1
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4b38      	ldr	r3, [pc, #224]	; (800469c <menu+0x32ec>)
 80045bc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80045be:	4b37      	ldr	r3, [pc, #220]	; (800469c <menu+0x32ec>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d902      	bls.n	80045cc <menu+0x321c>
				dilSecim = 0;
 80045c6:	4b35      	ldr	r3, [pc, #212]	; (800469c <menu+0x32ec>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80045cc:	f000 fa96 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d0:	2104      	movs	r1, #4
 80045d2:	4835      	ldr	r0, [pc, #212]	; (80046a8 <menu+0x32f8>)
 80045d4:	f004 ff18 	bl	8009408 <HAL_GPIO_ReadPin>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d115      	bne.n	800460a <menu+0x325a>
 80045de:	4b33      	ldr	r3, [pc, #204]	; (80046ac <menu+0x32fc>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f083 0301 	eor.w	r3, r3, #1
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <menu+0x325a>
			dilSecim = dilSecim - 1;
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <menu+0x32ec>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	4b29      	ldr	r3, [pc, #164]	; (800469c <menu+0x32ec>)
 80045f6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80045f8:	4b28      	ldr	r3, [pc, #160]	; (800469c <menu+0x32ec>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <menu+0x3256>
		   		dilSecim = 1;
 8004600:	4b26      	ldr	r3, [pc, #152]	; (800469c <menu+0x32ec>)
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004606:	f000 fa79 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800460a:	2108      	movs	r1, #8
 800460c:	4826      	ldr	r0, [pc, #152]	; (80046a8 <menu+0x32f8>)
 800460e:	f004 fefb 	bl	8009408 <HAL_GPIO_ReadPin>
 8004612:	4603      	mov	r3, r0
 8004614:	2b01      	cmp	r3, #1
 8004616:	d10e      	bne.n	8004636 <menu+0x3286>
 8004618:	4b24      	ldr	r3, [pc, #144]	; (80046ac <menu+0x32fc>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f083 0301 	eor.w	r3, r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <menu+0x32ec>)
 8004628:	781a      	ldrb	r2, [r3, #0]
 800462a:	4b23      	ldr	r3, [pc, #140]	; (80046b8 <menu+0x3308>)
 800462c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <menu+0x3320>)
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004636:	4b27      	ldr	r3, [pc, #156]	; (80046d4 <menu+0x3324>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b1f      	cmp	r3, #31
 800463c:	f040 80b7 	bne.w	80047ae <menu+0x33fe>
		calismaSayModu = 0;
 8004640:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <menu+0x3304>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004646:	4a28      	ldr	r2, [pc, #160]	; (80046e8 <menu+0x3338>)
 8004648:	2101      	movs	r1, #1
 800464a:	2001      	movs	r0, #1
 800464c:	f003 fbb6 	bl	8007dbc <lcd_print>

		if(iotMode == 0) {
 8004650:	4b26      	ldr	r3, [pc, #152]	; (80046ec <menu+0x333c>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d113      	bne.n	8004680 <menu+0x32d0>
			if(dilSecim == 0) {
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <menu+0x32ec>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d105      	bne.n	800466c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004660:	4a23      	ldr	r2, [pc, #140]	; (80046f0 <menu+0x3340>)
 8004662:	2101      	movs	r1, #1
 8004664:	2002      	movs	r0, #2
 8004666:	f003 fba9 	bl	8007dbc <lcd_print>
 800466a:	e050      	b.n	800470e <menu+0x335e>
			} else if(dilSecim == 1) {
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <menu+0x32ec>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d14c      	bne.n	800470e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <menu+0x3344>)
 8004676:	2101      	movs	r1, #1
 8004678:	2002      	movs	r0, #2
 800467a:	f003 fb9f 	bl	8007dbc <lcd_print>
 800467e:	e046      	b.n	800470e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004680:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <menu+0x333c>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d142      	bne.n	800470e <menu+0x335e>
			if(dilSecim == 0) {
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <menu+0x32ec>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d135      	bne.n	80046fc <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <menu+0x3348>)
 8004692:	2101      	movs	r1, #1
 8004694:	2002      	movs	r0, #2
 8004696:	f003 fb91 	bl	8007dbc <lcd_print>
 800469a:	e038      	b.n	800470e <menu+0x335e>
 800469c:	20000245 	.word	0x20000245
 80046a0:	0800dabc 	.word	0x0800dabc
 80046a4:	0800daf0 	.word	0x0800daf0
 80046a8:	40010800 	.word	0x40010800
 80046ac:	20000253 	.word	0x20000253
 80046b0:	20000265 	.word	0x20000265
 80046b4:	20000244 	.word	0x20000244
 80046b8:	20000128 	.word	0x20000128
 80046bc:	20000223 	.word	0x20000223
 80046c0:	20000009 	.word	0x20000009
 80046c4:	20000008 	.word	0x20000008
 80046c8:	20000222 	.word	0x20000222
 80046cc:	20000221 	.word	0x20000221
 80046d0:	20000250 	.word	0x20000250
 80046d4:	20000224 	.word	0x20000224
 80046d8:	0800db04 	.word	0x0800db04
 80046dc:	0800db18 	.word	0x0800db18
 80046e0:	0800db2c 	.word	0x0800db2c
 80046e4:	0800db40 	.word	0x0800db40
 80046e8:	0800db54 	.word	0x0800db54
 80046ec:	20000243 	.word	0x20000243
 80046f0:	0800d3ac 	.word	0x0800d3ac
 80046f4:	0800d3c0 	.word	0x0800d3c0
 80046f8:	0800d40c 	.word	0x0800d40c
			} else if(dilSecim == 1) {
 80046fc:	4b99      	ldr	r3, [pc, #612]	; (8004964 <menu+0x35b4>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d104      	bne.n	800470e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004704:	4a98      	ldr	r2, [pc, #608]	; (8004968 <menu+0x35b8>)
 8004706:	2101      	movs	r1, #1
 8004708:	2002      	movs	r0, #2
 800470a:	f003 fb57 	bl	8007dbc <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800470e:	2102      	movs	r1, #2
 8004710:	4896      	ldr	r0, [pc, #600]	; (800496c <menu+0x35bc>)
 8004712:	f004 fe79 	bl	8009408 <HAL_GPIO_ReadPin>
 8004716:	4603      	mov	r3, r0
 8004718:	2b01      	cmp	r3, #1
 800471a:	d115      	bne.n	8004748 <menu+0x3398>
 800471c:	4b94      	ldr	r3, [pc, #592]	; (8004970 <menu+0x35c0>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	f083 0301 	eor.w	r3, r3, #1
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00e      	beq.n	8004748 <menu+0x3398>
			iotMode = iotMode + 1;
 800472a:	4b92      	ldr	r3, [pc, #584]	; (8004974 <menu+0x35c4>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	3301      	adds	r3, #1
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4b90      	ldr	r3, [pc, #576]	; (8004974 <menu+0x35c4>)
 8004734:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004736:	4b8f      	ldr	r3, [pc, #572]	; (8004974 <menu+0x35c4>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d902      	bls.n	8004744 <menu+0x3394>
				iotMode = 0;
 800473e:	4b8d      	ldr	r3, [pc, #564]	; (8004974 <menu+0x35c4>)
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004744:	f000 f9da 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004748:	2104      	movs	r1, #4
 800474a:	4888      	ldr	r0, [pc, #544]	; (800496c <menu+0x35bc>)
 800474c:	f004 fe5c 	bl	8009408 <HAL_GPIO_ReadPin>
 8004750:	4603      	mov	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d115      	bne.n	8004782 <menu+0x33d2>
 8004756:	4b86      	ldr	r3, [pc, #536]	; (8004970 <menu+0x35c0>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	f083 0301 	eor.w	r3, r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00e      	beq.n	8004782 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004764:	4b83      	ldr	r3, [pc, #524]	; (8004974 <menu+0x35c4>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	3b01      	subs	r3, #1
 800476a:	b2da      	uxtb	r2, r3
 800476c:	4b81      	ldr	r3, [pc, #516]	; (8004974 <menu+0x35c4>)
 800476e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004770:	4b80      	ldr	r3, [pc, #512]	; (8004974 <menu+0x35c4>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <menu+0x33ce>
		   		iotMode = 1;
 8004778:	4b7e      	ldr	r3, [pc, #504]	; (8004974 <menu+0x35c4>)
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800477e:	f000 f9bd 	bl	8004afc <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004782:	2108      	movs	r1, #8
 8004784:	4879      	ldr	r0, [pc, #484]	; (800496c <menu+0x35bc>)
 8004786:	f004 fe3f 	bl	8009408 <HAL_GPIO_ReadPin>
 800478a:	4603      	mov	r3, r0
 800478c:	2b01      	cmp	r3, #1
 800478e:	d10e      	bne.n	80047ae <menu+0x33fe>
 8004790:	4b77      	ldr	r3, [pc, #476]	; (8004970 <menu+0x35c0>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f083 0301 	eor.w	r3, r3, #1
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <menu+0x33fe>
			eepromData[48] = iotMode;
 800479e:	4b75      	ldr	r3, [pc, #468]	; (8004974 <menu+0x35c4>)
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	4b75      	ldr	r3, [pc, #468]	; (8004978 <menu+0x35c8>)
 80047a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80047a8:	4b74      	ldr	r3, [pc, #464]	; (800497c <menu+0x35cc>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80047ae:	4b74      	ldr	r3, [pc, #464]	; (8004980 <menu+0x35d0>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d141      	bne.n	800483a <menu+0x348a>
		calismaSayModu = 0;
 80047b6:	4b73      	ldr	r3, [pc, #460]	; (8004984 <menu+0x35d4>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80047bc:	4b69      	ldr	r3, [pc, #420]	; (8004964 <menu+0x35b4>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 80047c4:	4a70      	ldr	r2, [pc, #448]	; (8004988 <menu+0x35d8>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	2001      	movs	r0, #1
 80047ca:	f003 faf7 	bl	8007dbc <lcd_print>
 80047ce:	e004      	b.n	80047da <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 80047d0:	4a6e      	ldr	r2, [pc, #440]	; (800498c <menu+0x35dc>)
 80047d2:	2101      	movs	r1, #1
 80047d4:	2001      	movs	r0, #1
 80047d6:	f003 faf1 	bl	8007dbc <lcd_print>
		}

		lcd_print(2, 1, machineID);
 80047da:	4a6d      	ldr	r2, [pc, #436]	; (8004990 <menu+0x35e0>)
 80047dc:	2101      	movs	r1, #1
 80047de:	2002      	movs	r0, #2
 80047e0:	f003 faec 	bl	8007dbc <lcd_print>
		lcd_print(2, 13, "    ");
 80047e4:	4a6b      	ldr	r2, [pc, #428]	; (8004994 <menu+0x35e4>)
 80047e6:	210d      	movs	r1, #13
 80047e8:	2002      	movs	r0, #2
 80047ea:	f003 fae7 	bl	8007dbc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ee:	2102      	movs	r1, #2
 80047f0:	485e      	ldr	r0, [pc, #376]	; (800496c <menu+0x35bc>)
 80047f2:	f004 fe09 	bl	8009408 <HAL_GPIO_ReadPin>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d11e      	bne.n	800483a <menu+0x348a>
 80047fc:	2104      	movs	r1, #4
 80047fe:	485b      	ldr	r0, [pc, #364]	; (800496c <menu+0x35bc>)
 8004800:	f004 fe02 	bl	8009408 <HAL_GPIO_ReadPin>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d117      	bne.n	800483a <menu+0x348a>
 800480a:	4b59      	ldr	r3, [pc, #356]	; (8004970 <menu+0x35c0>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	f083 0301 	eor.w	r3, r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d010      	beq.n	800483a <menu+0x348a>
			takeMachineID();
 8004818:	f002 fa7c 	bl	8006d14 <takeMachineID>

			HAL_Delay(50);
 800481c:	2032      	movs	r0, #50	; 0x32
 800481e:	f004 f823 	bl	8008868 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004822:	4a5b      	ldr	r2, [pc, #364]	; (8004990 <menu+0x35e0>)
 8004824:	2101      	movs	r1, #1
 8004826:	2002      	movs	r0, #2
 8004828:	f003 fac8 	bl	8007dbc <lcd_print>
			lcd_print(2, 13, "    ");
 800482c:	4a59      	ldr	r2, [pc, #356]	; (8004994 <menu+0x35e4>)
 800482e:	210d      	movs	r1, #13
 8004830:	2002      	movs	r0, #2
 8004832:	f003 fac3 	bl	8007dbc <lcd_print>

			bekle();
 8004836:	f000 f961 	bl	8004afc <bekle>
		}
	}

	if (menuSayac == 33) {
 800483a:	4b51      	ldr	r3, [pc, #324]	; (8004980 <menu+0x35d0>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b21      	cmp	r3, #33	; 0x21
 8004840:	d13c      	bne.n	80048bc <menu+0x350c>
		calismaSayModu = 0;
 8004842:	4b50      	ldr	r3, [pc, #320]	; (8004984 <menu+0x35d4>)
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004848:	4a53      	ldr	r2, [pc, #332]	; (8004998 <menu+0x35e8>)
 800484a:	2101      	movs	r1, #1
 800484c:	2001      	movs	r0, #1
 800484e:	f003 fab5 	bl	8007dbc <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004852:	4852      	ldr	r0, [pc, #328]	; (800499c <menu+0x35ec>)
 8004854:	f7fb fce6 	bl	8000224 <strlen>
 8004858:	4603      	mov	r3, r0
 800485a:	2b10      	cmp	r3, #16
 800485c:	d811      	bhi.n	8004882 <menu+0x34d2>
			lcd_print(2, 1, wifiSSID);
 800485e:	4a4f      	ldr	r2, [pc, #316]	; (800499c <menu+0x35ec>)
 8004860:	2101      	movs	r1, #1
 8004862:	2002      	movs	r0, #2
 8004864:	f003 faaa 	bl	8007dbc <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004868:	484c      	ldr	r0, [pc, #304]	; (800499c <menu+0x35ec>)
 800486a:	f7fb fcdb 	bl	8000224 <strlen>
 800486e:	4603      	mov	r3, r0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	3301      	adds	r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	4a4a      	ldr	r2, [pc, #296]	; (80049a0 <menu+0x35f0>)
 8004878:	4619      	mov	r1, r3
 800487a:	2002      	movs	r0, #2
 800487c:	f003 fa9e 	bl	8007dbc <lcd_print>
 8004880:	e005      	b.n	800488e <menu+0x34de>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004882:	2300      	movs	r3, #0
 8004884:	2202      	movs	r2, #2
 8004886:	2101      	movs	r1, #1
 8004888:	4844      	ldr	r0, [pc, #272]	; (800499c <menu+0x35ec>)
 800488a:	f7fc fcd5 	bl	8001238 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800488e:	2102      	movs	r1, #2
 8004890:	4836      	ldr	r0, [pc, #216]	; (800496c <menu+0x35bc>)
 8004892:	f004 fdb9 	bl	8009408 <HAL_GPIO_ReadPin>
 8004896:	4603      	mov	r3, r0
 8004898:	2b01      	cmp	r3, #1
 800489a:	d10f      	bne.n	80048bc <menu+0x350c>
 800489c:	2104      	movs	r1, #4
 800489e:	4833      	ldr	r0, [pc, #204]	; (800496c <menu+0x35bc>)
 80048a0:	f004 fdb2 	bl	8009408 <HAL_GPIO_ReadPin>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d108      	bne.n	80048bc <menu+0x350c>
 80048aa:	4b31      	ldr	r3, [pc, #196]	; (8004970 <menu+0x35c0>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	f083 0301 	eor.w	r3, r3, #1
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <menu+0x350c>
			takeWifiSSID();
 80048b8:	f002 fb94 	bl	8006fe4 <takeWifiSSID>

			//bekle();
		}
	}

	if (menuSayac == 34) {
 80048bc:	4b30      	ldr	r3, [pc, #192]	; (8004980 <menu+0x35d0>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b22      	cmp	r3, #34	; 0x22
 80048c2:	d13c      	bne.n	800493e <menu+0x358e>
		calismaSayModu = 0;
 80048c4:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <menu+0x35d4>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80048ca:	4a36      	ldr	r2, [pc, #216]	; (80049a4 <menu+0x35f4>)
 80048cc:	2101      	movs	r1, #1
 80048ce:	2001      	movs	r0, #1
 80048d0:	f003 fa74 	bl	8007dbc <lcd_print>
		if(strlen(wifiPass) <= 16) {
 80048d4:	4834      	ldr	r0, [pc, #208]	; (80049a8 <menu+0x35f8>)
 80048d6:	f7fb fca5 	bl	8000224 <strlen>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d811      	bhi.n	8004904 <menu+0x3554>
			lcd_print(2, 1, wifiPass);
 80048e0:	4a31      	ldr	r2, [pc, #196]	; (80049a8 <menu+0x35f8>)
 80048e2:	2101      	movs	r1, #1
 80048e4:	2002      	movs	r0, #2
 80048e6:	f003 fa69 	bl	8007dbc <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80048ea:	482f      	ldr	r0, [pc, #188]	; (80049a8 <menu+0x35f8>)
 80048ec:	f7fb fc9a 	bl	8000224 <strlen>
 80048f0:	4603      	mov	r3, r0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	3301      	adds	r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <menu+0x35f0>)
 80048fa:	4619      	mov	r1, r3
 80048fc:	2002      	movs	r0, #2
 80048fe:	f003 fa5d 	bl	8007dbc <lcd_print>
 8004902:	e005      	b.n	8004910 <menu+0x3560>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004904:	2301      	movs	r3, #1
 8004906:	2202      	movs	r2, #2
 8004908:	2101      	movs	r1, #1
 800490a:	4827      	ldr	r0, [pc, #156]	; (80049a8 <menu+0x35f8>)
 800490c:	f7fc fc94 	bl	8001238 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004910:	2102      	movs	r1, #2
 8004912:	4816      	ldr	r0, [pc, #88]	; (800496c <menu+0x35bc>)
 8004914:	f004 fd78 	bl	8009408 <HAL_GPIO_ReadPin>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	d10f      	bne.n	800493e <menu+0x358e>
 800491e:	2104      	movs	r1, #4
 8004920:	4812      	ldr	r0, [pc, #72]	; (800496c <menu+0x35bc>)
 8004922:	f004 fd71 	bl	8009408 <HAL_GPIO_ReadPin>
 8004926:	4603      	mov	r3, r0
 8004928:	2b01      	cmp	r3, #1
 800492a:	d108      	bne.n	800493e <menu+0x358e>
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <menu+0x35c0>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	f083 0301 	eor.w	r3, r3, #1
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <menu+0x358e>
			takeWifiPass();
 800493a:	f002 fd29 	bl	8007390 <takeWifiPass>

			//bekle();
		}
	}

	if (menuSayac == 35) {
 800493e:	4b10      	ldr	r3, [pc, #64]	; (8004980 <menu+0x35d0>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b23      	cmp	r3, #35	; 0x23
 8004944:	d175      	bne.n	8004a32 <menu+0x3682>
		if(dilSecim == 0) {
 8004946:	4b07      	ldr	r3, [pc, #28]	; (8004964 <menu+0x35b4>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d132      	bne.n	80049b4 <menu+0x3604>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800494e:	4a17      	ldr	r2, [pc, #92]	; (80049ac <menu+0x35fc>)
 8004950:	2101      	movs	r1, #1
 8004952:	2001      	movs	r0, #1
 8004954:	f003 fa32 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004958:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <menu+0x3600>)
 800495a:	2101      	movs	r1, #1
 800495c:	2002      	movs	r0, #2
 800495e:	f003 fa2d 	bl	8007dbc <lcd_print>
 8004962:	e035      	b.n	80049d0 <menu+0x3620>
 8004964:	20000245 	.word	0x20000245
 8004968:	0800d420 	.word	0x0800d420
 800496c:	40010800 	.word	0x40010800
 8004970:	20000253 	.word	0x20000253
 8004974:	20000243 	.word	0x20000243
 8004978:	20000128 	.word	0x20000128
 800497c:	20000250 	.word	0x20000250
 8004980:	20000224 	.word	0x20000224
 8004984:	20000244 	.word	0x20000244
 8004988:	0800db68 	.word	0x0800db68
 800498c:	0800db7c 	.word	0x0800db7c
 8004990:	200001a0 	.word	0x200001a0
 8004994:	0800db90 	.word	0x0800db90
 8004998:	0800db98 	.word	0x0800db98
 800499c:	200001ac 	.word	0x200001ac
 80049a0:	20000018 	.word	0x20000018
 80049a4:	0800dbac 	.word	0x0800dbac
 80049a8:	200001c0 	.word	0x200001c0
 80049ac:	0800dbc0 	.word	0x0800dbc0
 80049b0:	0800dbd4 	.word	0x0800dbd4
		} else if(dilSecim == 1) {
 80049b4:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <menu+0x3688>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d109      	bne.n	80049d0 <menu+0x3620>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <menu+0x368c>)
 80049be:	2101      	movs	r1, #1
 80049c0:	2001      	movs	r0, #1
 80049c2:	f003 f9fb 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 80049c6:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <menu+0x3690>)
 80049c8:	2101      	movs	r1, #1
 80049ca:	2002      	movs	r0, #2
 80049cc:	f003 f9f6 	bl	8007dbc <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80049d0:	2108      	movs	r1, #8
 80049d2:	481c      	ldr	r0, [pc, #112]	; (8004a44 <menu+0x3694>)
 80049d4:	f004 fd18 	bl	8009408 <HAL_GPIO_ReadPin>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d129      	bne.n	8004a32 <menu+0x3682>
			menuGiris = 0;
 80049de:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <menu+0x3698>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80049e4:	bf00      	nop
 80049e6:	4819      	ldr	r0, [pc, #100]	; (8004a4c <menu+0x369c>)
 80049e8:	f005 fb37 	bl	800a05a <HAL_I2C_GetError>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d0f9      	beq.n	80049e6 <menu+0x3636>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80049f2:	bf00      	nop
 80049f4:	4815      	ldr	r0, [pc, #84]	; (8004a4c <menu+0x369c>)
 80049f6:	f005 fb23 	bl	800a040 <HAL_I2C_GetState>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d1f9      	bne.n	80049f4 <menu+0x3644>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004a00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004a04:	9302      	str	r3, [sp, #8]
 8004a06:	236e      	movs	r3, #110	; 0x6e
 8004a08:	9301      	str	r3, [sp, #4]
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <menu+0x36a0>)
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	236e      	movs	r3, #110	; 0x6e
 8004a10:	2200      	movs	r2, #0
 8004a12:	21a0      	movs	r1, #160	; 0xa0
 8004a14:	480d      	ldr	r0, [pc, #52]	; (8004a4c <menu+0x369c>)
 8004a16:	f004 ffb1 	bl	800997c <HAL_I2C_Mem_Write>
			HAL_Delay(1000);
 8004a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a1e:	f003 ff23 	bl	8008868 <HAL_Delay>

			lcd_clear();
 8004a22:	f003 f9f7 	bl	8007e14 <lcd_clear>
			HAL_Delay(500);
 8004a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a2a:	f003 ff1d 	bl	8008868 <HAL_Delay>
			NVIC_SystemReset();
 8004a2e:	f7fc fca9 	bl	8001384 <__NVIC_SystemReset>
		}
	}
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000245 	.word	0x20000245
 8004a3c:	0800dbe8 	.word	0x0800dbe8
 8004a40:	0800dbfc 	.word	0x0800dbfc
 8004a44:	40010800 	.word	0x40010800
 8004a48:	20000241 	.word	0x20000241
 8004a4c:	200003ac 	.word	0x200003ac
 8004a50:	20000128 	.word	0x20000128

08004a54 <lcdUpdate>:
#include "main.h"
#include "Process.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"

void lcdUpdate(uint8_t y) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d105      	bne.n	8004a70 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004a64:	4a22      	ldr	r2, [pc, #136]	; (8004af0 <lcdUpdate+0x9c>)
 8004a66:	2101      	movs	r1, #1
 8004a68:	2002      	movs	r0, #2
 8004a6a:	f003 f9a7 	bl	8007dbc <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004a6e:	e03b      	b.n	8004ae8 <lcdUpdate+0x94>
	} else if(y==2) {
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d105      	bne.n	8004a82 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004a76:	4a1e      	ldr	r2, [pc, #120]	; (8004af0 <lcdUpdate+0x9c>)
 8004a78:	2102      	movs	r1, #2
 8004a7a:	2002      	movs	r0, #2
 8004a7c:	f003 f99e 	bl	8007dbc <lcd_print>
}
 8004a80:	e032      	b.n	8004ae8 <lcdUpdate+0x94>
	} else if(y==3) {
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	2b03      	cmp	r3, #3
 8004a86:	d105      	bne.n	8004a94 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004a88:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <lcdUpdate+0x9c>)
 8004a8a:	2103      	movs	r1, #3
 8004a8c:	2002      	movs	r0, #2
 8004a8e:	f003 f995 	bl	8007dbc <lcd_print>
}
 8004a92:	e029      	b.n	8004ae8 <lcdUpdate+0x94>
	} else if(y==4) {
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d105      	bne.n	8004aa6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <lcdUpdate+0x9c>)
 8004a9c:	2104      	movs	r1, #4
 8004a9e:	2002      	movs	r0, #2
 8004aa0:	f003 f98c 	bl	8007dbc <lcd_print>
}
 8004aa4:	e020      	b.n	8004ae8 <lcdUpdate+0x94>
	} else if(y==5) {
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	2b05      	cmp	r3, #5
 8004aaa:	d105      	bne.n	8004ab8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004aac:	4a10      	ldr	r2, [pc, #64]	; (8004af0 <lcdUpdate+0x9c>)
 8004aae:	2105      	movs	r1, #5
 8004ab0:	2002      	movs	r0, #2
 8004ab2:	f003 f983 	bl	8007dbc <lcd_print>
}
 8004ab6:	e017      	b.n	8004ae8 <lcdUpdate+0x94>
	} else if(y==6) {
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d105      	bne.n	8004aca <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004abe:	4a0c      	ldr	r2, [pc, #48]	; (8004af0 <lcdUpdate+0x9c>)
 8004ac0:	2106      	movs	r1, #6
 8004ac2:	2002      	movs	r0, #2
 8004ac4:	f003 f97a 	bl	8007dbc <lcd_print>
}
 8004ac8:	e00e      	b.n	8004ae8 <lcdUpdate+0x94>
	} else if (y==7) {
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	2b07      	cmp	r3, #7
 8004ace:	d10b      	bne.n	8004ae8 <lcdUpdate+0x94>
		lcd_clear();
 8004ad0:	f003 f9a0 	bl	8007e14 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004ad4:	4a07      	ldr	r2, [pc, #28]	; (8004af4 <lcdUpdate+0xa0>)
 8004ad6:	2104      	movs	r1, #4
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f003 f96f 	bl	8007dbc <lcd_print>
		lcd_print(2, 6, "RUN");
 8004ade:	4a06      	ldr	r2, [pc, #24]	; (8004af8 <lcdUpdate+0xa4>)
 8004ae0:	2106      	movs	r1, #6
 8004ae2:	2002      	movs	r0, #2
 8004ae4:	f003 f96a 	bl	8007dbc <lcd_print>
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	0800dc10 	.word	0x0800dc10
 8004af4:	0800dc14 	.word	0x0800dc14
 8004af8:	0800dc1c 	.word	0x0800dc1c

08004afc <bekle>:

void bekle() {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
	timer1=millis;
 8004b00:	4b47      	ldr	r3, [pc, #284]	; (8004c20 <bekle+0x124>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a47      	ldr	r2, [pc, #284]	; (8004c24 <bekle+0x128>)
 8004b06:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b08:	e002      	b.n	8004b10 <bekle+0x14>
    	butonKontrol = 1;
 8004b0a:	4b47      	ldr	r3, [pc, #284]	; (8004c28 <bekle+0x12c>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b10:	2101      	movs	r1, #1
 8004b12:	4846      	ldr	r0, [pc, #280]	; (8004c2c <bekle+0x130>)
 8004b14:	f004 fc78 	bl	8009408 <HAL_GPIO_ReadPin>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d109      	bne.n	8004b32 <bekle+0x36>
 8004b1e:	4b40      	ldr	r3, [pc, #256]	; (8004c20 <bekle+0x124>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b40      	ldr	r3, [pc, #256]	; (8004c24 <bekle+0x128>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d0ef      	beq.n	8004b0a <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b2a:	e002      	b.n	8004b32 <bekle+0x36>
    	butonKontrol = 1;
 8004b2c:	4b3e      	ldr	r3, [pc, #248]	; (8004c28 <bekle+0x12c>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b32:	2108      	movs	r1, #8
 8004b34:	483e      	ldr	r0, [pc, #248]	; (8004c30 <bekle+0x134>)
 8004b36:	f004 fc67 	bl	8009408 <HAL_GPIO_ReadPin>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d109      	bne.n	8004b54 <bekle+0x58>
 8004b40:	4b37      	ldr	r3, [pc, #220]	; (8004c20 <bekle+0x124>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <bekle+0x128>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d0ef      	beq.n	8004b2c <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b4c:	e002      	b.n	8004b54 <bekle+0x58>
    	butonKontrol = 1;
 8004b4e:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <bekle+0x12c>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b54:	2102      	movs	r1, #2
 8004b56:	4835      	ldr	r0, [pc, #212]	; (8004c2c <bekle+0x130>)
 8004b58:	f004 fc56 	bl	8009408 <HAL_GPIO_ReadPin>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d109      	bne.n	8004b76 <bekle+0x7a>
 8004b62:	4b2f      	ldr	r3, [pc, #188]	; (8004c20 <bekle+0x124>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b2f      	ldr	r3, [pc, #188]	; (8004c24 <bekle+0x128>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d0ef      	beq.n	8004b4e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b6e:	e002      	b.n	8004b76 <bekle+0x7a>
    	butonKontrol = 1;
 8004b70:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <bekle+0x12c>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b76:	2104      	movs	r1, #4
 8004b78:	482c      	ldr	r0, [pc, #176]	; (8004c2c <bekle+0x130>)
 8004b7a:	f004 fc45 	bl	8009408 <HAL_GPIO_ReadPin>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d109      	bne.n	8004b98 <bekle+0x9c>
 8004b84:	4b26      	ldr	r3, [pc, #152]	; (8004c20 <bekle+0x124>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b26      	ldr	r3, [pc, #152]	; (8004c24 <bekle+0x128>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d0ef      	beq.n	8004b70 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b90:	e002      	b.n	8004b98 <bekle+0x9c>
    	butonKontrol = 1;
 8004b92:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <bekle+0x12c>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004b98:	2108      	movs	r1, #8
 8004b9a:	4824      	ldr	r0, [pc, #144]	; (8004c2c <bekle+0x130>)
 8004b9c:	f004 fc34 	bl	8009408 <HAL_GPIO_ReadPin>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d109      	bne.n	8004bba <bekle+0xbe>
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <bekle+0x124>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b1e      	ldr	r3, [pc, #120]	; (8004c24 <bekle+0x128>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d0ef      	beq.n	8004b92 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bb2:	e002      	b.n	8004bba <bekle+0xbe>
    	butonKontrol = 1;
 8004bb4:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <bekle+0x12c>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	481c      	ldr	r0, [pc, #112]	; (8004c30 <bekle+0x134>)
 8004bbe:	f004 fc23 	bl	8009408 <HAL_GPIO_ReadPin>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <bekle+0xe0>
 8004bc8:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <bekle+0x124>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b15      	ldr	r3, [pc, #84]	; (8004c24 <bekle+0x128>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0ef      	beq.n	8004bb4 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bd4:	e002      	b.n	8004bdc <bekle+0xe0>
    	butonKontrol = 1;
 8004bd6:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <bekle+0x12c>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004be0:	4813      	ldr	r0, [pc, #76]	; (8004c30 <bekle+0x134>)
 8004be2:	f004 fc11 	bl	8009408 <HAL_GPIO_ReadPin>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <bekle+0x104>
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <bekle+0x124>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <bekle+0x128>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d0ee      	beq.n	8004bd6 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004bf8:	e002      	b.n	8004c00 <bekle+0x104>
    	butonKontrol = 1;
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <bekle+0x12c>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c04:	480a      	ldr	r0, [pc, #40]	; (8004c30 <bekle+0x134>)
 8004c06:	f004 fbff 	bl	8009408 <HAL_GPIO_ReadPin>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <bekle+0x120>
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <bekle+0x124>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <bekle+0x128>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d0ee      	beq.n	8004bfa <bekle+0xfe>
    }

}
 8004c1c:	bf00      	nop
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000200 	.word	0x20000200
 8004c24:	20000208 	.word	0x20000208
 8004c28:	20000253 	.word	0x20000253
 8004c2c:	40010800 	.word	0x40010800
 8004c30:	40011000 	.word	0x40011000

08004c34 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <checkLCDBacklight+0x24>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <checkLCDBacklight+0x28>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b3b      	cmp	r3, #59	; 0x3b
 8004c44:	d903      	bls.n	8004c4e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004c46:	2000      	movs	r0, #0
 8004c48:	f003 f904 	bl	8007e54 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004c4c:	e002      	b.n	8004c54 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004c4e:	2001      	movs	r0, #1
 8004c50:	f003 f900 	bl	8007e54 <lcd_backlight>
}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000200 	.word	0x20000200
 8004c5c:	2000021c 	.word	0x2000021c

08004c60 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004c64:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <checkBasincSalteri+0x54>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <checkBasincSalteri+0x12>
		basincVar=1;
 8004c6c:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <checkBasincSalteri+0x58>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004c72:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <checkBasincSalteri+0x54>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d119      	bne.n	8004cae <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004c7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c7e:	480f      	ldr	r0, [pc, #60]	; (8004cbc <checkBasincSalteri+0x5c>)
 8004c80:	f004 fbc2 	bl	8009408 <HAL_GPIO_ReadPin>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <checkBasincSalteri+0x60>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	; (8004cc4 <checkBasincSalteri+0x64>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d90a      	bls.n	8004cae <checkBasincSalteri+0x4e>
				basincVar=1;
 8004c98:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <checkBasincSalteri+0x58>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004c9e:	e006      	b.n	8004cae <checkBasincSalteri+0x4e>
			timer5=millis;
 8004ca0:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <checkBasincSalteri+0x60>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a07      	ldr	r2, [pc, #28]	; (8004cc4 <checkBasincSalteri+0x64>)
 8004ca6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <checkBasincSalteri+0x58>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	2000022b 	.word	0x2000022b
 8004cb8:	20000227 	.word	0x20000227
 8004cbc:	40011000 	.word	0x40011000
 8004cc0:	20000200 	.word	0x20000200
 8004cc4:	20000218 	.word	0x20000218

08004cc8 <checkBasGonder>:

void checkBasGonder() {
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ccc:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <checkBasGonder+0x74>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d10b      	bne.n	8004cec <checkBasGonder+0x24>
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <checkBasGonder+0x78>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <checkBasGonder+0x24>
 8004cdc:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <checkBasGonder+0x7c>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d103      	bne.n	8004cec <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004ce4:	4b18      	ldr	r3, [pc, #96]	; (8004d48 <checkBasGonder+0x80>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	e009      	b.n	8004d00 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004cec:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <checkBasGonder+0x78>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	f083 0301 	eor.w	r3, r3, #1
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004cfa:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <checkBasGonder+0x80>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004d00:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <checkBasGonder+0x74>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10b      	bne.n	8004d20 <checkBasGonder+0x58>
 8004d08:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <checkBasGonder+0x84>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <checkBasGonder+0x58>
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <checkBasGonder+0x7c>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <checkBasGonder+0x88>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004d1e:	e009      	b.n	8004d34 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <checkBasGonder+0x84>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f083 0301 	eor.w	r3, r3, #1
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004d2e:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <checkBasGonder+0x88>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	20000225 	.word	0x20000225
 8004d40:	20000259 	.word	0x20000259
 8004d44:	20000233 	.word	0x20000233
 8004d48:	20000260 	.word	0x20000260
 8004d4c:	2000025c 	.word	0x2000025c
 8004d50:	20000261 	.word	0x20000261

08004d54 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004d58:	4b24      	ldr	r3, [pc, #144]	; (8004dec <checkKapiSecimleri+0x98>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004d60:	4b23      	ldr	r3, [pc, #140]	; (8004df0 <checkKapiSecimleri+0x9c>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004d66:	4b21      	ldr	r3, [pc, #132]	; (8004dec <checkKapiSecimleri+0x98>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d10e      	bne.n	8004d8c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d72:	4820      	ldr	r0, [pc, #128]	; (8004df4 <checkKapiSecimleri+0xa0>)
 8004d74:	f004 fb48 	bl	8009408 <HAL_GPIO_ReadPin>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004d7e:	4b1c      	ldr	r3, [pc, #112]	; (8004df0 <checkKapiSecimleri+0x9c>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	e002      	b.n	8004d8c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004d86:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <checkKapiSecimleri+0x9c>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004d8c:	4b17      	ldr	r3, [pc, #92]	; (8004dec <checkKapiSecimleri+0x98>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d10e      	bne.n	8004db2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004d94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d98:	4816      	ldr	r0, [pc, #88]	; (8004df4 <checkKapiSecimleri+0xa0>)
 8004d9a:	f004 fb35 	bl	8009408 <HAL_GPIO_ReadPin>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d103      	bne.n	8004dac <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004da4:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <checkKapiSecimleri+0x9c>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	e002      	b.n	8004db2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004dac:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <checkKapiSecimleri+0x9c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004db2:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <checkKapiSecimleri+0x98>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d116      	bne.n	8004de8 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dbe:	480d      	ldr	r0, [pc, #52]	; (8004df4 <checkKapiSecimleri+0xa0>)
 8004dc0:	f004 fb22 	bl	8009408 <HAL_GPIO_ReadPin>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <checkKapiSecimleri+0x8e>
 8004dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dce:	4809      	ldr	r0, [pc, #36]	; (8004df4 <checkKapiSecimleri+0xa0>)
 8004dd0:	f004 fb1a 	bl	8009408 <HAL_GPIO_ReadPin>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <checkKapiSecimleri+0x9c>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004de0:	e002      	b.n	8004de8 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004de2:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <checkKapiSecimleri+0x9c>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	701a      	strb	r2, [r3, #0]
}
 8004de8:	bf00      	nop
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	2000022c 	.word	0x2000022c
 8004df0:	20000277 	.word	0x20000277
 8004df4:	40010800 	.word	0x40010800

08004df8 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004dfc:	4b62      	ldr	r3, [pc, #392]	; (8004f88 <checkAktifCalisma+0x190>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f041 833e 	bne.w	8006482 <checkAktifCalisma+0x168a>
 8004e06:	4b61      	ldr	r3, [pc, #388]	; (8004f8c <checkAktifCalisma+0x194>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f041 8339 	bne.w	8006482 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004e10:	4b5f      	ldr	r3, [pc, #380]	; (8004f90 <checkAktifCalisma+0x198>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11a      	bne.n	8004e4e <checkAktifCalisma+0x56>
 8004e18:	4b5e      	ldr	r3, [pc, #376]	; (8004f94 <checkAktifCalisma+0x19c>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d116      	bne.n	8004e4e <checkAktifCalisma+0x56>
 8004e20:	4b5d      	ldr	r3, [pc, #372]	; (8004f98 <checkAktifCalisma+0x1a0>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <checkAktifCalisma+0x46>
 8004e28:	4b5c      	ldr	r3, [pc, #368]	; (8004f9c <checkAktifCalisma+0x1a4>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f083 0301 	eor.w	r3, r3, #1
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <checkAktifCalisma+0x46>
 8004e36:	4b5a      	ldr	r3, [pc, #360]	; (8004fa0 <checkAktifCalisma+0x1a8>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d007      	beq.n	8004e4e <checkAktifCalisma+0x56>
 8004e3e:	4b59      	ldr	r3, [pc, #356]	; (8004fa4 <checkAktifCalisma+0x1ac>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d018      	beq.n	8004e78 <checkAktifCalisma+0x80>
 8004e46:	4b58      	ldr	r3, [pc, #352]	; (8004fa8 <checkAktifCalisma+0x1b0>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d114      	bne.n	8004e78 <checkAktifCalisma+0x80>
 8004e4e:	4b57      	ldr	r3, [pc, #348]	; (8004fac <checkAktifCalisma+0x1b4>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d010      	beq.n	8004e78 <checkAktifCalisma+0x80>
 8004e56:	4b56      	ldr	r3, [pc, #344]	; (8004fb0 <checkAktifCalisma+0x1b8>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e64:	4853      	ldr	r0, [pc, #332]	; (8004fb4 <checkAktifCalisma+0x1bc>)
 8004e66:	f004 fae6 	bl	8009436 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004e6a:	4b53      	ldr	r3, [pc, #332]	; (8004fb8 <checkAktifCalisma+0x1c0>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004e70:	4b52      	ldr	r3, [pc, #328]	; (8004fbc <checkAktifCalisma+0x1c4>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	e008      	b.n	8004e8a <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e7e:	484d      	ldr	r0, [pc, #308]	; (8004fb4 <checkAktifCalisma+0x1bc>)
 8004e80:	f004 fad9 	bl	8009436 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004e84:	4b4c      	ldr	r3, [pc, #304]	; (8004fb8 <checkAktifCalisma+0x1c0>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004e8a:	4b40      	ldr	r3, [pc, #256]	; (8004f8c <checkAktifCalisma+0x194>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d160      	bne.n	8004f54 <checkAktifCalisma+0x15c>
 8004e92:	4b46      	ldr	r3, [pc, #280]	; (8004fac <checkAktifCalisma+0x1b4>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d05c      	beq.n	8004f54 <checkAktifCalisma+0x15c>
 8004e9a:	4b45      	ldr	r3, [pc, #276]	; (8004fb0 <checkAktifCalisma+0x1b8>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d058      	beq.n	8004f54 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ea6:	4843      	ldr	r0, [pc, #268]	; (8004fb4 <checkAktifCalisma+0x1bc>)
 8004ea8:	f004 faae 	bl	8009408 <HAL_GPIO_ReadPin>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <checkAktifCalisma+0xc2>
 8004eb2:	4b43      	ldr	r3, [pc, #268]	; (8004fc0 <checkAktifCalisma+0x1c8>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d04c      	beq.n	8004f54 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004eba:	2102      	movs	r1, #2
 8004ebc:	4841      	ldr	r0, [pc, #260]	; (8004fc4 <checkAktifCalisma+0x1cc>)
 8004ebe:	f004 faa3 	bl	8009408 <HAL_GPIO_ReadPin>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d145      	bne.n	8004f54 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004ec8:	4b3f      	ldr	r3, [pc, #252]	; (8004fc8 <checkAktifCalisma+0x1d0>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d041      	beq.n	8004f54 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ed4:	4837      	ldr	r0, [pc, #220]	; (8004fb4 <checkAktifCalisma+0x1bc>)
 8004ed6:	f004 fa97 	bl	8009408 <HAL_GPIO_ReadPin>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d10e      	bne.n	8004efe <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ee4:	4833      	ldr	r0, [pc, #204]	; (8004fb4 <checkAktifCalisma+0x1bc>)
 8004ee6:	f004 fa8f 	bl	8009408 <HAL_GPIO_ReadPin>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d106      	bne.n	8004efe <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004ef0:	2140      	movs	r1, #64	; 0x40
 8004ef2:	4834      	ldr	r0, [pc, #208]	; (8004fc4 <checkAktifCalisma+0x1cc>)
 8004ef4:	f004 fa88 	bl	8009408 <HAL_GPIO_ReadPin>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d003      	beq.n	8004f06 <checkAktifCalisma+0x10e>
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <checkAktifCalisma+0x198>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d026      	beq.n	8004f54 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004f06:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <checkAktifCalisma+0x1a0>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f083 0301 	eor.w	r3, r3, #1
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01f      	beq.n	8004f54 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004f14:	4b1f      	ldr	r3, [pc, #124]	; (8004f94 <checkAktifCalisma+0x19c>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f083 0301 	eor.w	r3, r3, #1
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d018      	beq.n	8004f54 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004f22:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <checkAktifCalisma+0x1ac>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	f083 0301 	eor.w	r3, r3, #1
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d011      	beq.n	8004f54 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004f30:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <checkAktifCalisma+0x1d4>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f083 0301 	eor.w	r3, r3, #1
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004f3e:	4b24      	ldr	r3, [pc, #144]	; (8004fd0 <checkAktifCalisma+0x1d8>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	f083 0301 	eor.w	r3, r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004f4c:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <checkAktifCalisma+0x198>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e002      	b.n	8004f5a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004f54:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <checkAktifCalisma+0x198>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <checkAktifCalisma+0x198>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d03a      	beq.n	8004fd8 <checkAktifCalisma+0x1e0>
 8004f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f66:	4817      	ldr	r0, [pc, #92]	; (8004fc4 <checkAktifCalisma+0x1cc>)
 8004f68:	f004 fa4e 	bl	8009408 <HAL_GPIO_ReadPin>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d132      	bne.n	8004fd8 <checkAktifCalisma+0x1e0>
 8004f72:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <checkAktifCalisma+0x1dc>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02e      	beq.n	8004fd8 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f80:	480c      	ldr	r0, [pc, #48]	; (8004fb4 <checkAktifCalisma+0x1bc>)
 8004f82:	f004 fa58 	bl	8009436 <HAL_GPIO_WritePin>
 8004f86:	e02d      	b.n	8004fe4 <checkAktifCalisma+0x1ec>
 8004f88:	20000242 	.word	0x20000242
 8004f8c:	20000241 	.word	0x20000241
 8004f90:	20000259 	.word	0x20000259
 8004f94:	2000025a 	.word	0x2000025a
 8004f98:	2000025c 	.word	0x2000025c
 8004f9c:	20000254 	.word	0x20000254
 8004fa0:	20000237 	.word	0x20000237
 8004fa4:	2000025b 	.word	0x2000025b
 8004fa8:	20000236 	.word	0x20000236
 8004fac:	20000276 	.word	0x20000276
 8004fb0:	20000277 	.word	0x20000277
 8004fb4:	40010c00 	.word	0x40010c00
 8004fb8:	20000278 	.word	0x20000278
 8004fbc:	20000263 	.word	0x20000263
 8004fc0:	20000260 	.word	0x20000260
 8004fc4:	40011000 	.word	0x40011000
 8004fc8:	20000227 	.word	0x20000227
 8004fcc:	2000025e 	.word	0x2000025e
 8004fd0:	2000025f 	.word	0x2000025f
 8004fd4:	20000232 	.word	0x20000232
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fde:	4860      	ldr	r0, [pc, #384]	; (8005160 <checkAktifCalisma+0x368>)
 8004fe0:	f004 fa29 	bl	8009436 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004fe4:	4b5f      	ldr	r3, [pc, #380]	; (8005164 <checkAktifCalisma+0x36c>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <checkAktifCalisma+0x21c>
 8004fec:	4b5e      	ldr	r3, [pc, #376]	; (8005168 <checkAktifCalisma+0x370>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d007      	beq.n	8005004 <checkAktifCalisma+0x20c>
 8004ff4:	4b5c      	ldr	r3, [pc, #368]	; (8005168 <checkAktifCalisma+0x370>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d003      	beq.n	8005004 <checkAktifCalisma+0x20c>
 8004ffc:	4b5b      	ldr	r3, [pc, #364]	; (800516c <checkAktifCalisma+0x374>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d107      	bne.n	8005014 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005004:	2201      	movs	r2, #1
 8005006:	2104      	movs	r1, #4
 8005008:	4855      	ldr	r0, [pc, #340]	; (8005160 <checkAktifCalisma+0x368>)
 800500a:	f004 fa14 	bl	8009436 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800500e:	4b58      	ldr	r3, [pc, #352]	; (8005170 <checkAktifCalisma+0x378>)
 8005010:	2201      	movs	r2, #1
 8005012:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005014:	4b56      	ldr	r3, [pc, #344]	; (8005170 <checkAktifCalisma+0x378>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d02f      	beq.n	800507c <checkAktifCalisma+0x284>
 800501c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005020:	484f      	ldr	r0, [pc, #316]	; (8005160 <checkAktifCalisma+0x368>)
 8005022:	f004 f9f1 	bl	8009408 <HAL_GPIO_ReadPin>
 8005026:	4603      	mov	r3, r0
 8005028:	2b01      	cmp	r3, #1
 800502a:	d106      	bne.n	800503a <checkAktifCalisma+0x242>
 800502c:	4b51      	ldr	r3, [pc, #324]	; (8005174 <checkAktifCalisma+0x37c>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	f083 0301 	eor.w	r3, r3, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <checkAktifCalisma+0x250>
 800503a:	2102      	movs	r1, #2
 800503c:	484e      	ldr	r0, [pc, #312]	; (8005178 <checkAktifCalisma+0x380>)
 800503e:	f004 f9e3 	bl	8009408 <HAL_GPIO_ReadPin>
 8005042:	4603      	mov	r3, r0
 8005044:	2b01      	cmp	r3, #1
 8005046:	d119      	bne.n	800507c <checkAktifCalisma+0x284>
 8005048:	4b4c      	ldr	r3, [pc, #304]	; (800517c <checkAktifCalisma+0x384>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d015      	beq.n	800507c <checkAktifCalisma+0x284>
 8005050:	4b4b      	ldr	r3, [pc, #300]	; (8005180 <checkAktifCalisma+0x388>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d011      	beq.n	800507c <checkAktifCalisma+0x284>
 8005058:	4b4a      	ldr	r3, [pc, #296]	; (8005184 <checkAktifCalisma+0x38c>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00d      	beq.n	800507c <checkAktifCalisma+0x284>
 8005060:	4b49      	ldr	r3, [pc, #292]	; (8005188 <checkAktifCalisma+0x390>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f083 0301 	eor.w	r3, r3, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d006      	beq.n	800507c <checkAktifCalisma+0x284>
			timer2=millis;
 800506e:	4b47      	ldr	r3, [pc, #284]	; (800518c <checkAktifCalisma+0x394>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a47      	ldr	r2, [pc, #284]	; (8005190 <checkAktifCalisma+0x398>)
 8005074:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005076:	4b44      	ldr	r3, [pc, #272]	; (8005188 <checkAktifCalisma+0x390>)
 8005078:	2201      	movs	r2, #1
 800507a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 800507c:	4b43      	ldr	r3, [pc, #268]	; (800518c <checkAktifCalisma+0x394>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4b43      	ldr	r3, [pc, #268]	; (8005190 <checkAktifCalisma+0x398>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	4a43      	ldr	r2, [pc, #268]	; (8005194 <checkAktifCalisma+0x39c>)
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	4293      	cmp	r3, r2
 800508c:	d303      	bcc.n	8005096 <checkAktifCalisma+0x29e>
 800508e:	4b3e      	ldr	r3, [pc, #248]	; (8005188 <checkAktifCalisma+0x390>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d111      	bne.n	80050ba <checkAktifCalisma+0x2c2>
 8005096:	4b39      	ldr	r3, [pc, #228]	; (800517c <checkAktifCalisma+0x384>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	f083 0301 	eor.w	r3, r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <checkAktifCalisma+0x2c2>
 80050a4:	4b36      	ldr	r3, [pc, #216]	; (8005180 <checkAktifCalisma+0x388>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	f083 0301 	eor.w	r3, r3, #1
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d103      	bne.n	80050ba <checkAktifCalisma+0x2c2>
 80050b2:	4b34      	ldr	r3, [pc, #208]	; (8005184 <checkAktifCalisma+0x38c>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80050ba:	2200      	movs	r2, #0
 80050bc:	2104      	movs	r1, #4
 80050be:	4828      	ldr	r0, [pc, #160]	; (8005160 <checkAktifCalisma+0x368>)
 80050c0:	f004 f9b9 	bl	8009436 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80050c4:	4b2a      	ldr	r3, [pc, #168]	; (8005170 <checkAktifCalisma+0x378>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80050ca:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <checkAktifCalisma+0x390>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80050d0:	4b31      	ldr	r3, [pc, #196]	; (8005198 <checkAktifCalisma+0x3a0>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80050d8:	4b30      	ldr	r3, [pc, #192]	; (800519c <checkAktifCalisma+0x3a4>)
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80050de:	4b2e      	ldr	r3, [pc, #184]	; (8005198 <checkAktifCalisma+0x3a0>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d116      	bne.n	8005114 <checkAktifCalisma+0x31c>
 80050e6:	4b2e      	ldr	r3, [pc, #184]	; (80051a0 <checkAktifCalisma+0x3a8>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d112      	bne.n	8005114 <checkAktifCalisma+0x31c>
 80050ee:	2101      	movs	r1, #1
 80050f0:	4821      	ldr	r0, [pc, #132]	; (8005178 <checkAktifCalisma+0x380>)
 80050f2:	f004 f989 	bl	8009408 <HAL_GPIO_ReadPin>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <checkAktifCalisma+0x31c>
 80050fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005100:	4817      	ldr	r0, [pc, #92]	; (8005160 <checkAktifCalisma+0x368>)
 8005102:	f004 f981 	bl	8009408 <HAL_GPIO_ReadPin>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d103      	bne.n	8005114 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 800510c:	4b23      	ldr	r3, [pc, #140]	; (800519c <checkAktifCalisma+0x3a4>)
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	e011      	b.n	8005138 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005114:	4b20      	ldr	r3, [pc, #128]	; (8005198 <checkAktifCalisma+0x3a0>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d10d      	bne.n	8005138 <checkAktifCalisma+0x340>
 800511c:	2101      	movs	r1, #1
 800511e:	4816      	ldr	r0, [pc, #88]	; (8005178 <checkAktifCalisma+0x380>)
 8005120:	f004 f972 	bl	8009408 <HAL_GPIO_ReadPin>
 8005124:	4603      	mov	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d106      	bne.n	8005138 <checkAktifCalisma+0x340>
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <checkAktifCalisma+0x3a8>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005132:	4b1a      	ldr	r3, [pc, #104]	; (800519c <checkAktifCalisma+0x3a4>)
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005138:	4b17      	ldr	r3, [pc, #92]	; (8005198 <checkAktifCalisma+0x3a0>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d134      	bne.n	80051aa <checkAktifCalisma+0x3b2>
 8005140:	4b17      	ldr	r3, [pc, #92]	; (80051a0 <checkAktifCalisma+0x3a8>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d130      	bne.n	80051aa <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005148:	2101      	movs	r1, #1
 800514a:	480b      	ldr	r0, [pc, #44]	; (8005178 <checkAktifCalisma+0x380>)
 800514c:	f004 f95c 	bl	8009408 <HAL_GPIO_ReadPin>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d126      	bne.n	80051a4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <checkAktifCalisma+0x3a4>)
 8005158:	2201      	movs	r2, #1
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	e025      	b.n	80051aa <checkAktifCalisma+0x3b2>
 800515e:	bf00      	nop
 8005160:	40010c00 	.word	0x40010c00
 8005164:	20000259 	.word	0x20000259
 8005168:	20000233 	.word	0x20000233
 800516c:	20000237 	.word	0x20000237
 8005170:	2000025d 	.word	0x2000025d
 8005174:	20000260 	.word	0x20000260
 8005178:	40011000 	.word	0x40011000
 800517c:	20000276 	.word	0x20000276
 8005180:	20000277 	.word	0x20000277
 8005184:	20000227 	.word	0x20000227
 8005188:	20000255 	.word	0x20000255
 800518c:	20000200 	.word	0x20000200
 8005190:	2000020c 	.word	0x2000020c
 8005194:	20000238 	.word	0x20000238
 8005198:	20000228 	.word	0x20000228
 800519c:	2000027b 	.word	0x2000027b
 80051a0:	20000225 	.word	0x20000225
			} else {
				cerceveVar=0;
 80051a4:	4b7f      	ldr	r3, [pc, #508]	; (80053a4 <checkAktifCalisma+0x5ac>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80051aa:	4b7f      	ldr	r3, [pc, #508]	; (80053a8 <checkAktifCalisma+0x5b0>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d17c      	bne.n	80052ac <checkAktifCalisma+0x4b4>
 80051b2:	4b7e      	ldr	r3, [pc, #504]	; (80053ac <checkAktifCalisma+0x5b4>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d078      	beq.n	80052ac <checkAktifCalisma+0x4b4>
 80051ba:	4b7d      	ldr	r3, [pc, #500]	; (80053b0 <checkAktifCalisma+0x5b8>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d074      	beq.n	80052ac <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80051c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051c6:	487b      	ldr	r0, [pc, #492]	; (80053b4 <checkAktifCalisma+0x5bc>)
 80051c8:	f004 f91e 	bl	8009408 <HAL_GPIO_ReadPin>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <checkAktifCalisma+0x3e2>
 80051d2:	4b79      	ldr	r3, [pc, #484]	; (80053b8 <checkAktifCalisma+0x5c0>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d068      	beq.n	80052ac <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80051da:	4b72      	ldr	r3, [pc, #456]	; (80053a4 <checkAktifCalisma+0x5ac>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d064      	beq.n	80052ac <checkAktifCalisma+0x4b4>
 80051e2:	4b76      	ldr	r3, [pc, #472]	; (80053bc <checkAktifCalisma+0x5c4>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	f083 0301 	eor.w	r3, r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d05d      	beq.n	80052ac <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80051f0:	2104      	movs	r1, #4
 80051f2:	4873      	ldr	r0, [pc, #460]	; (80053c0 <checkAktifCalisma+0x5c8>)
 80051f4:	f004 f908 	bl	8009408 <HAL_GPIO_ReadPin>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <checkAktifCalisma+0x40e>
 80051fe:	4b71      	ldr	r3, [pc, #452]	; (80053c4 <checkAktifCalisma+0x5cc>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d152      	bne.n	80052ac <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800520a:	486a      	ldr	r0, [pc, #424]	; (80053b4 <checkAktifCalisma+0x5bc>)
 800520c:	f004 f8fc 	bl	8009408 <HAL_GPIO_ReadPin>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d10e      	bne.n	8005234 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005216:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800521a:	4866      	ldr	r0, [pc, #408]	; (80053b4 <checkAktifCalisma+0x5bc>)
 800521c:	f004 f8f4 	bl	8009408 <HAL_GPIO_ReadPin>
 8005220:	4603      	mov	r3, r0
 8005222:	2b01      	cmp	r3, #1
 8005224:	d106      	bne.n	8005234 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005226:	2140      	movs	r1, #64	; 0x40
 8005228:	4865      	ldr	r0, [pc, #404]	; (80053c0 <checkAktifCalisma+0x5c8>)
 800522a:	f004 f8ed 	bl	8009408 <HAL_GPIO_ReadPin>
 800522e:	4603      	mov	r3, r0
 8005230:	2b01      	cmp	r3, #1
 8005232:	d003      	beq.n	800523c <checkAktifCalisma+0x444>
 8005234:	4b64      	ldr	r3, [pc, #400]	; (80053c8 <checkAktifCalisma+0x5d0>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d037      	beq.n	80052ac <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800523c:	4b63      	ldr	r3, [pc, #396]	; (80053cc <checkAktifCalisma+0x5d4>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	f083 0301 	eor.w	r3, r3, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d030      	beq.n	80052ac <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800524a:	4b61      	ldr	r3, [pc, #388]	; (80053d0 <checkAktifCalisma+0x5d8>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	f083 0301 	eor.w	r3, r3, #1
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d029      	beq.n	80052ac <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005258:	4b5e      	ldr	r3, [pc, #376]	; (80053d4 <checkAktifCalisma+0x5dc>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	f083 0301 	eor.w	r3, r3, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d022      	beq.n	80052ac <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005266:	4b5c      	ldr	r3, [pc, #368]	; (80053d8 <checkAktifCalisma+0x5e0>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	f083 0301 	eor.w	r3, r3, #1
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d01b      	beq.n	80052ac <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005274:	4b59      	ldr	r3, [pc, #356]	; (80053dc <checkAktifCalisma+0x5e4>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f083 0301 	eor.w	r3, r3, #1
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d014      	beq.n	80052ac <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005282:	4b57      	ldr	r3, [pc, #348]	; (80053e0 <checkAktifCalisma+0x5e8>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	f083 0301 	eor.w	r3, r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005290:	2201      	movs	r2, #1
 8005292:	2102      	movs	r1, #2
 8005294:	4847      	ldr	r0, [pc, #284]	; (80053b4 <checkAktifCalisma+0x5bc>)
 8005296:	f004 f8ce 	bl	8009436 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800529a:	4b4b      	ldr	r3, [pc, #300]	; (80053c8 <checkAktifCalisma+0x5d0>)
 800529c:	2201      	movs	r2, #1
 800529e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80052a0:	4b50      	ldr	r3, [pc, #320]	; (80053e4 <checkAktifCalisma+0x5ec>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80052a6:	4b50      	ldr	r3, [pc, #320]	; (80053e8 <checkAktifCalisma+0x5f0>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80052ac:	4b46      	ldr	r3, [pc, #280]	; (80053c8 <checkAktifCalisma+0x5d0>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d033      	beq.n	800531c <checkAktifCalisma+0x524>
 80052b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052b8:	483e      	ldr	r0, [pc, #248]	; (80053b4 <checkAktifCalisma+0x5bc>)
 80052ba:	f004 f8a5 	bl	8009408 <HAL_GPIO_ReadPin>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d106      	bne.n	80052d2 <checkAktifCalisma+0x4da>
 80052c4:	4b3c      	ldr	r3, [pc, #240]	; (80053b8 <checkAktifCalisma+0x5c0>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f083 0301 	eor.w	r3, r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <checkAktifCalisma+0x4f0>
 80052d2:	2104      	movs	r1, #4
 80052d4:	483a      	ldr	r0, [pc, #232]	; (80053c0 <checkAktifCalisma+0x5c8>)
 80052d6:	f004 f897 	bl	8009408 <HAL_GPIO_ReadPin>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d11d      	bne.n	800531c <checkAktifCalisma+0x524>
 80052e0:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <checkAktifCalisma+0x5cc>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d019      	beq.n	800531c <checkAktifCalisma+0x524>
 80052e8:	4b30      	ldr	r3, [pc, #192]	; (80053ac <checkAktifCalisma+0x5b4>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d015      	beq.n	800531c <checkAktifCalisma+0x524>
 80052f0:	4b2f      	ldr	r3, [pc, #188]	; (80053b0 <checkAktifCalisma+0x5b8>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d011      	beq.n	800531c <checkAktifCalisma+0x524>
 80052f8:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <checkAktifCalisma+0x5ac>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00d      	beq.n	800531c <checkAktifCalisma+0x524>
 8005300:	4b3a      	ldr	r3, [pc, #232]	; (80053ec <checkAktifCalisma+0x5f4>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	f083 0301 	eor.w	r3, r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d006      	beq.n	800531c <checkAktifCalisma+0x524>
			timer2=millis;
 800530e:	4b38      	ldr	r3, [pc, #224]	; (80053f0 <checkAktifCalisma+0x5f8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a38      	ldr	r2, [pc, #224]	; (80053f4 <checkAktifCalisma+0x5fc>)
 8005314:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005316:	4b35      	ldr	r3, [pc, #212]	; (80053ec <checkAktifCalisma+0x5f4>)
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800531c:	4b34      	ldr	r3, [pc, #208]	; (80053f0 <checkAktifCalisma+0x5f8>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b34      	ldr	r3, [pc, #208]	; (80053f4 <checkAktifCalisma+0x5fc>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	4a34      	ldr	r2, [pc, #208]	; (80053f8 <checkAktifCalisma+0x600>)
 8005328:	7812      	ldrb	r2, [r2, #0]
 800532a:	4293      	cmp	r3, r2
 800532c:	d303      	bcc.n	8005336 <checkAktifCalisma+0x53e>
 800532e:	4b2f      	ldr	r3, [pc, #188]	; (80053ec <checkAktifCalisma+0x5f4>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d114      	bne.n	8005360 <checkAktifCalisma+0x568>
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <checkAktifCalisma+0x5b4>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f083 0301 	eor.w	r3, r3, #1
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10d      	bne.n	8005360 <checkAktifCalisma+0x568>
 8005344:	4b1a      	ldr	r3, [pc, #104]	; (80053b0 <checkAktifCalisma+0x5b8>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f083 0301 	eor.w	r3, r3, #1
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <checkAktifCalisma+0x568>
 8005352:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <checkAktifCalisma+0x5ac>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	f083 0301 	eor.w	r3, r3, #1
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005360:	2200      	movs	r2, #0
 8005362:	2102      	movs	r1, #2
 8005364:	4813      	ldr	r0, [pc, #76]	; (80053b4 <checkAktifCalisma+0x5bc>)
 8005366:	f004 f866 	bl	8009436 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800536a:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <checkAktifCalisma+0x5d0>)
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005370:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <checkAktifCalisma+0x5f4>)
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <checkAktifCalisma+0x5d0>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d040      	beq.n	8005400 <checkAktifCalisma+0x608>
 800537e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005382:	480f      	ldr	r0, [pc, #60]	; (80053c0 <checkAktifCalisma+0x5c8>)
 8005384:	f004 f840 	bl	8009408 <HAL_GPIO_ReadPin>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d138      	bne.n	8005400 <checkAktifCalisma+0x608>
 800538e:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <checkAktifCalisma+0x604>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d034      	beq.n	8005400 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005396:	2201      	movs	r2, #1
 8005398:	2101      	movs	r1, #1
 800539a:	4806      	ldr	r0, [pc, #24]	; (80053b4 <checkAktifCalisma+0x5bc>)
 800539c:	f004 f84b 	bl	8009436 <HAL_GPIO_WritePin>
 80053a0:	e033      	b.n	800540a <checkAktifCalisma+0x612>
 80053a2:	bf00      	nop
 80053a4:	2000027b 	.word	0x2000027b
 80053a8:	20000241 	.word	0x20000241
 80053ac:	20000276 	.word	0x20000276
 80053b0:	20000277 	.word	0x20000277
 80053b4:	40010c00 	.word	0x40010c00
 80053b8:	20000261 	.word	0x20000261
 80053bc:	20000275 	.word	0x20000275
 80053c0:	40011000 	.word	0x40011000
 80053c4:	2000022a 	.word	0x2000022a
 80053c8:	2000025c 	.word	0x2000025c
 80053cc:	20000259 	.word	0x20000259
 80053d0:	2000025d 	.word	0x2000025d
 80053d4:	2000025a 	.word	0x2000025a
 80053d8:	2000025b 	.word	0x2000025b
 80053dc:	2000025e 	.word	0x2000025e
 80053e0:	2000025f 	.word	0x2000025f
 80053e4:	20000264 	.word	0x20000264
 80053e8:	20000285 	.word	0x20000285
 80053ec:	20000254 	.word	0x20000254
 80053f0:	20000200 	.word	0x20000200
 80053f4:	2000020c 	.word	0x2000020c
 80053f8:	20000239 	.word	0x20000239
 80053fc:	20000229 	.word	0x20000229
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005400:	2200      	movs	r2, #0
 8005402:	2101      	movs	r1, #1
 8005404:	4836      	ldr	r0, [pc, #216]	; (80054e0 <checkAktifCalisma+0x6e8>)
 8005406:	f004 f816 	bl	8009436 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800540a:	4b36      	ldr	r3, [pc, #216]	; (80054e4 <checkAktifCalisma+0x6ec>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 8080 	bne.w	8005514 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005414:	4b34      	ldr	r3, [pc, #208]	; (80054e8 <checkAktifCalisma+0x6f0>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d003      	beq.n	8005424 <checkAktifCalisma+0x62c>
 800541c:	4b32      	ldr	r3, [pc, #200]	; (80054e8 <checkAktifCalisma+0x6f0>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d177      	bne.n	8005514 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005424:	4b31      	ldr	r3, [pc, #196]	; (80054ec <checkAktifCalisma+0x6f4>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d073      	beq.n	8005514 <checkAktifCalisma+0x71c>
 800542c:	4b30      	ldr	r3, [pc, #192]	; (80054f0 <checkAktifCalisma+0x6f8>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d06f      	beq.n	8005514 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005434:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005438:	4829      	ldr	r0, [pc, #164]	; (80054e0 <checkAktifCalisma+0x6e8>)
 800543a:	f003 ffe5 	bl	8009408 <HAL_GPIO_ReadPin>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d167      	bne.n	8005514 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005448:	482a      	ldr	r0, [pc, #168]	; (80054f4 <checkAktifCalisma+0x6fc>)
 800544a:	f003 ffdd 	bl	8009408 <HAL_GPIO_ReadPin>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <checkAktifCalisma+0x664>
 8005454:	4b28      	ldr	r3, [pc, #160]	; (80054f8 <checkAktifCalisma+0x700>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d15b      	bne.n	8005514 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800545c:	2140      	movs	r1, #64	; 0x40
 800545e:	4825      	ldr	r0, [pc, #148]	; (80054f4 <checkAktifCalisma+0x6fc>)
 8005460:	f003 ffd2 	bl	8009408 <HAL_GPIO_ReadPin>
 8005464:	4603      	mov	r3, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10f      	bne.n	800548a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800546a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800546e:	481c      	ldr	r0, [pc, #112]	; (80054e0 <checkAktifCalisma+0x6e8>)
 8005470:	f003 ffca 	bl	8009408 <HAL_GPIO_ReadPin>
 8005474:	4603      	mov	r3, r0
 8005476:	2b01      	cmp	r3, #1
 8005478:	d107      	bne.n	800548a <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800547a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800547e:	4818      	ldr	r0, [pc, #96]	; (80054e0 <checkAktifCalisma+0x6e8>)
 8005480:	f003 ffc2 	bl	8009408 <HAL_GPIO_ReadPin>
 8005484:	4603      	mov	r3, r0
 8005486:	2b01      	cmp	r3, #1
 8005488:	d003      	beq.n	8005492 <checkAktifCalisma+0x69a>
 800548a:	4b1c      	ldr	r3, [pc, #112]	; (80054fc <checkAktifCalisma+0x704>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d040      	beq.n	8005514 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005492:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <checkAktifCalisma+0x708>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f083 0301 	eor.w	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d039      	beq.n	8005514 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80054a0:	4b18      	ldr	r3, [pc, #96]	; (8005504 <checkAktifCalisma+0x70c>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	f083 0301 	eor.w	r3, r3, #1
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d032      	beq.n	8005514 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80054ae:	4b16      	ldr	r3, [pc, #88]	; (8005508 <checkAktifCalisma+0x710>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f083 0301 	eor.w	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d02b      	beq.n	8005514 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80054bc:	4b13      	ldr	r3, [pc, #76]	; (800550c <checkAktifCalisma+0x714>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f083 0301 	eor.w	r3, r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d024      	beq.n	8005514 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80054ca:	4b11      	ldr	r3, [pc, #68]	; (8005510 <checkAktifCalisma+0x718>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	f083 0301 	eor.w	r3, r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01d      	beq.n	8005514 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80054d8:	4b08      	ldr	r3, [pc, #32]	; (80054fc <checkAktifCalisma+0x704>)
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e01c      	b.n	800551a <checkAktifCalisma+0x722>
 80054e0:	40010c00 	.word	0x40010c00
 80054e4:	20000241 	.word	0x20000241
 80054e8:	20000233 	.word	0x20000233
 80054ec:	20000276 	.word	0x20000276
 80054f0:	20000277 	.word	0x20000277
 80054f4:	40011000 	.word	0x40011000
 80054f8:	20000234 	.word	0x20000234
 80054fc:	2000025a 	.word	0x2000025a
 8005500:	20000259 	.word	0x20000259
 8005504:	2000025d 	.word	0x2000025d
 8005508:	2000025c 	.word	0x2000025c
 800550c:	2000025b 	.word	0x2000025b
 8005510:	2000025f 	.word	0x2000025f
		} else {
			devmotoryukaricalisiyor=0;
 8005514:	4b64      	ldr	r3, [pc, #400]	; (80056a8 <checkAktifCalisma+0x8b0>)
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800551a:	4b63      	ldr	r3, [pc, #396]	; (80056a8 <checkAktifCalisma+0x8b0>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005522:	2201      	movs	r2, #1
 8005524:	2120      	movs	r1, #32
 8005526:	4861      	ldr	r0, [pc, #388]	; (80056ac <checkAktifCalisma+0x8b4>)
 8005528:	f003 ff85 	bl	8009436 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 800552c:	4b60      	ldr	r3, [pc, #384]	; (80056b0 <checkAktifCalisma+0x8b8>)
 800552e:	2201      	movs	r2, #1
 8005530:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005532:	4b5f      	ldr	r3, [pc, #380]	; (80056b0 <checkAktifCalisma+0x8b8>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d025      	beq.n	8005586 <checkAktifCalisma+0x78e>
 800553a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800553e:	485d      	ldr	r0, [pc, #372]	; (80056b4 <checkAktifCalisma+0x8bc>)
 8005540:	f003 ff62 	bl	8009408 <HAL_GPIO_ReadPin>
 8005544:	4603      	mov	r3, r0
 8005546:	2b01      	cmp	r3, #1
 8005548:	d007      	beq.n	800555a <checkAktifCalisma+0x762>
 800554a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800554e:	4857      	ldr	r0, [pc, #348]	; (80056ac <checkAktifCalisma+0x8b4>)
 8005550:	f003 ff5a 	bl	8009408 <HAL_GPIO_ReadPin>
 8005554:	4603      	mov	r3, r0
 8005556:	2b01      	cmp	r3, #1
 8005558:	d115      	bne.n	8005586 <checkAktifCalisma+0x78e>
 800555a:	4b57      	ldr	r3, [pc, #348]	; (80056b8 <checkAktifCalisma+0x8c0>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d011      	beq.n	8005586 <checkAktifCalisma+0x78e>
 8005562:	4b56      	ldr	r3, [pc, #344]	; (80056bc <checkAktifCalisma+0x8c4>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <checkAktifCalisma+0x78e>
 800556a:	4b55      	ldr	r3, [pc, #340]	; (80056c0 <checkAktifCalisma+0x8c8>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	f083 0301 	eor.w	r3, r3, #1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d006      	beq.n	8005586 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005578:	4b52      	ldr	r3, [pc, #328]	; (80056c4 <checkAktifCalisma+0x8cc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a52      	ldr	r2, [pc, #328]	; (80056c8 <checkAktifCalisma+0x8d0>)
 800557e:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005580:	4b4f      	ldr	r3, [pc, #316]	; (80056c0 <checkAktifCalisma+0x8c8>)
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005586:	4b4f      	ldr	r3, [pc, #316]	; (80056c4 <checkAktifCalisma+0x8cc>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b4f      	ldr	r3, [pc, #316]	; (80056c8 <checkAktifCalisma+0x8d0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	4a4e      	ldr	r2, [pc, #312]	; (80056cc <checkAktifCalisma+0x8d4>)
 8005592:	7812      	ldrb	r2, [r2, #0]
 8005594:	4293      	cmp	r3, r2
 8005596:	d303      	bcc.n	80055a0 <checkAktifCalisma+0x7a8>
 8005598:	4b49      	ldr	r3, [pc, #292]	; (80056c0 <checkAktifCalisma+0x8c8>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10d      	bne.n	80055bc <checkAktifCalisma+0x7c4>
 80055a0:	4b45      	ldr	r3, [pc, #276]	; (80056b8 <checkAktifCalisma+0x8c0>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f083 0301 	eor.w	r3, r3, #1
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <checkAktifCalisma+0x7c4>
 80055ae:	4b43      	ldr	r3, [pc, #268]	; (80056bc <checkAktifCalisma+0x8c4>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	f083 0301 	eor.w	r3, r3, #1
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80055bc:	2200      	movs	r2, #0
 80055be:	2120      	movs	r1, #32
 80055c0:	483a      	ldr	r0, [pc, #232]	; (80056ac <checkAktifCalisma+0x8b4>)
 80055c2:	f003 ff38 	bl	8009436 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80055c6:	4b3a      	ldr	r3, [pc, #232]	; (80056b0 <checkAktifCalisma+0x8b8>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80055cc:	4b3c      	ldr	r3, [pc, #240]	; (80056c0 <checkAktifCalisma+0x8c8>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80055d2:	4b3f      	ldr	r3, [pc, #252]	; (80056d0 <checkAktifCalisma+0x8d8>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f040 8088 	bne.w	80056ec <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80055dc:	4b3d      	ldr	r3, [pc, #244]	; (80056d4 <checkAktifCalisma+0x8dc>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d003      	beq.n	80055ec <checkAktifCalisma+0x7f4>
 80055e4:	4b3b      	ldr	r3, [pc, #236]	; (80056d4 <checkAktifCalisma+0x8dc>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d17f      	bne.n	80056ec <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80055ec:	4b32      	ldr	r3, [pc, #200]	; (80056b8 <checkAktifCalisma+0x8c0>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d07b      	beq.n	80056ec <checkAktifCalisma+0x8f4>
 80055f4:	4b31      	ldr	r3, [pc, #196]	; (80056bc <checkAktifCalisma+0x8c4>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d077      	beq.n	80056ec <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80055fc:	2140      	movs	r1, #64	; 0x40
 80055fe:	482b      	ldr	r0, [pc, #172]	; (80056ac <checkAktifCalisma+0x8b4>)
 8005600:	f003 ff02 	bl	8009408 <HAL_GPIO_ReadPin>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d170      	bne.n	80056ec <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800560a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800560e:	4827      	ldr	r0, [pc, #156]	; (80056ac <checkAktifCalisma+0x8b4>)
 8005610:	f003 fefa 	bl	8009408 <HAL_GPIO_ReadPin>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <checkAktifCalisma+0x82a>
 800561a:	4b2f      	ldr	r3, [pc, #188]	; (80056d8 <checkAktifCalisma+0x8e0>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d164      	bne.n	80056ec <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005626:	4823      	ldr	r0, [pc, #140]	; (80056b4 <checkAktifCalisma+0x8bc>)
 8005628:	f003 feee 	bl	8009408 <HAL_GPIO_ReadPin>
 800562c:	4603      	mov	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d10f      	bne.n	8005652 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005636:	481f      	ldr	r0, [pc, #124]	; (80056b4 <checkAktifCalisma+0x8bc>)
 8005638:	f003 fee6 	bl	8009408 <HAL_GPIO_ReadPin>
 800563c:	4603      	mov	r3, r0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d107      	bne.n	8005652 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005646:	481b      	ldr	r0, [pc, #108]	; (80056b4 <checkAktifCalisma+0x8bc>)
 8005648:	f003 fede 	bl	8009408 <HAL_GPIO_ReadPin>
 800564c:	4603      	mov	r3, r0
 800564e:	2b01      	cmp	r3, #1
 8005650:	d003      	beq.n	800565a <checkAktifCalisma+0x862>
 8005652:	4b22      	ldr	r3, [pc, #136]	; (80056dc <checkAktifCalisma+0x8e4>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d048      	beq.n	80056ec <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800565a:	4b21      	ldr	r3, [pc, #132]	; (80056e0 <checkAktifCalisma+0x8e8>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	f083 0301 	eor.w	r3, r3, #1
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d041      	beq.n	80056ec <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005668:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <checkAktifCalisma+0x8ec>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f083 0301 	eor.w	r3, r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d03a      	beq.n	80056ec <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005676:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <checkAktifCalisma+0x8f0>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	f083 0301 	eor.w	r3, r3, #1
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d033      	beq.n	80056ec <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005684:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <checkAktifCalisma+0x8b8>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f083 0301 	eor.w	r3, r3, #1
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d02c      	beq.n	80056ec <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <checkAktifCalisma+0x8b0>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	f083 0301 	eor.w	r3, r3, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d025      	beq.n	80056ec <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80056a0:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <checkAktifCalisma+0x8e4>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	e024      	b.n	80056f2 <checkAktifCalisma+0x8fa>
 80056a8:	2000025a 	.word	0x2000025a
 80056ac:	40011000 	.word	0x40011000
 80056b0:	2000025e 	.word	0x2000025e
 80056b4:	40010c00 	.word	0x40010c00
 80056b8:	20000276 	.word	0x20000276
 80056bc:	20000277 	.word	0x20000277
 80056c0:	20000256 	.word	0x20000256
 80056c4:	20000200 	.word	0x20000200
 80056c8:	2000020c 	.word	0x2000020c
 80056cc:	2000023a 	.word	0x2000023a
 80056d0:	20000241 	.word	0x20000241
 80056d4:	20000233 	.word	0x20000233
 80056d8:	20000235 	.word	0x20000235
 80056dc:	2000025b 	.word	0x2000025b
 80056e0:	20000259 	.word	0x20000259
 80056e4:	2000025d 	.word	0x2000025d
 80056e8:	2000025c 	.word	0x2000025c
		} else {
			devmotorasagicalisiyor=0;
 80056ec:	4b96      	ldr	r3, [pc, #600]	; (8005948 <checkAktifCalisma+0xb50>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80056f2:	4b95      	ldr	r3, [pc, #596]	; (8005948 <checkAktifCalisma+0xb50>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80056fa:	2201      	movs	r2, #1
 80056fc:	2110      	movs	r1, #16
 80056fe:	4893      	ldr	r0, [pc, #588]	; (800594c <checkAktifCalisma+0xb54>)
 8005700:	f003 fe99 	bl	8009436 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005704:	4b92      	ldr	r3, [pc, #584]	; (8005950 <checkAktifCalisma+0xb58>)
 8005706:	2201      	movs	r2, #1
 8005708:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800570a:	4b91      	ldr	r3, [pc, #580]	; (8005950 <checkAktifCalisma+0xb58>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d024      	beq.n	800575c <checkAktifCalisma+0x964>
 8005712:	2140      	movs	r1, #64	; 0x40
 8005714:	488d      	ldr	r0, [pc, #564]	; (800594c <checkAktifCalisma+0xb54>)
 8005716:	f003 fe77 	bl	8009408 <HAL_GPIO_ReadPin>
 800571a:	4603      	mov	r3, r0
 800571c:	2b01      	cmp	r3, #1
 800571e:	d007      	beq.n	8005730 <checkAktifCalisma+0x938>
 8005720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005724:	4889      	ldr	r0, [pc, #548]	; (800594c <checkAktifCalisma+0xb54>)
 8005726:	f003 fe6f 	bl	8009408 <HAL_GPIO_ReadPin>
 800572a:	4603      	mov	r3, r0
 800572c:	2b01      	cmp	r3, #1
 800572e:	d115      	bne.n	800575c <checkAktifCalisma+0x964>
 8005730:	4b88      	ldr	r3, [pc, #544]	; (8005954 <checkAktifCalisma+0xb5c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d011      	beq.n	800575c <checkAktifCalisma+0x964>
 8005738:	4b87      	ldr	r3, [pc, #540]	; (8005958 <checkAktifCalisma+0xb60>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00d      	beq.n	800575c <checkAktifCalisma+0x964>
 8005740:	4b86      	ldr	r3, [pc, #536]	; (800595c <checkAktifCalisma+0xb64>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	f083 0301 	eor.w	r3, r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d006      	beq.n	800575c <checkAktifCalisma+0x964>
			timer2=millis;
 800574e:	4b84      	ldr	r3, [pc, #528]	; (8005960 <checkAktifCalisma+0xb68>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a84      	ldr	r2, [pc, #528]	; (8005964 <checkAktifCalisma+0xb6c>)
 8005754:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8005756:	4b81      	ldr	r3, [pc, #516]	; (800595c <checkAktifCalisma+0xb64>)
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800575c:	4b80      	ldr	r3, [pc, #512]	; (8005960 <checkAktifCalisma+0xb68>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	4b80      	ldr	r3, [pc, #512]	; (8005964 <checkAktifCalisma+0xb6c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	4a80      	ldr	r2, [pc, #512]	; (8005968 <checkAktifCalisma+0xb70>)
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	4293      	cmp	r3, r2
 800576c:	d303      	bcc.n	8005776 <checkAktifCalisma+0x97e>
 800576e:	4b7b      	ldr	r3, [pc, #492]	; (800595c <checkAktifCalisma+0xb64>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <checkAktifCalisma+0x99a>
 8005776:	4b77      	ldr	r3, [pc, #476]	; (8005954 <checkAktifCalisma+0xb5c>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	f083 0301 	eor.w	r3, r3, #1
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <checkAktifCalisma+0x99a>
 8005784:	4b74      	ldr	r3, [pc, #464]	; (8005958 <checkAktifCalisma+0xb60>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	f083 0301 	eor.w	r3, r3, #1
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005792:	2200      	movs	r2, #0
 8005794:	2110      	movs	r1, #16
 8005796:	486d      	ldr	r0, [pc, #436]	; (800594c <checkAktifCalisma+0xb54>)
 8005798:	f003 fe4d 	bl	8009436 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 800579c:	4b6c      	ldr	r3, [pc, #432]	; (8005950 <checkAktifCalisma+0xb58>)
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80057a2:	4b6e      	ldr	r3, [pc, #440]	; (800595c <checkAktifCalisma+0xb64>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80057a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057ac:	486f      	ldr	r0, [pc, #444]	; (800596c <checkAktifCalisma+0xb74>)
 80057ae:	f003 fe2b 	bl	8009408 <HAL_GPIO_ReadPin>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d120      	bne.n	80057fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80057b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057bc:	486b      	ldr	r0, [pc, #428]	; (800596c <checkAktifCalisma+0xb74>)
 80057be:	f003 fe23 	bl	8009408 <HAL_GPIO_ReadPin>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d118      	bne.n	80057fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80057c8:	2104      	movs	r1, #4
 80057ca:	4868      	ldr	r0, [pc, #416]	; (800596c <checkAktifCalisma+0xb74>)
 80057cc:	f003 fe1c 	bl	8009408 <HAL_GPIO_ReadPin>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d111      	bne.n	80057fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80057d6:	2102      	movs	r1, #2
 80057d8:	4864      	ldr	r0, [pc, #400]	; (800596c <checkAktifCalisma+0xb74>)
 80057da:	f003 fe15 	bl	8009408 <HAL_GPIO_ReadPin>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80057e4:	2101      	movs	r1, #1
 80057e6:	4861      	ldr	r0, [pc, #388]	; (800596c <checkAktifCalisma+0xb74>)
 80057e8:	f003 fe0e 	bl	8009408 <HAL_GPIO_ReadPin>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <checkAktifCalisma+0xa02>
			makineStop=1;
 80057f2:	4b5f      	ldr	r3, [pc, #380]	; (8005970 <checkAktifCalisma+0xb78>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e002      	b.n	8005800 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80057fa:	4b5d      	ldr	r3, [pc, #372]	; (8005970 <checkAktifCalisma+0xb78>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005800:	4b5c      	ldr	r3, [pc, #368]	; (8005974 <checkAktifCalisma+0xb7c>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d144      	bne.n	8005892 <checkAktifCalisma+0xa9a>
 8005808:	4b5b      	ldr	r3, [pc, #364]	; (8005978 <checkAktifCalisma+0xb80>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d003      	beq.n	8005818 <checkAktifCalisma+0xa20>
 8005810:	4b59      	ldr	r3, [pc, #356]	; (8005978 <checkAktifCalisma+0xb80>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b03      	cmp	r3, #3
 8005816:	d13c      	bne.n	8005892 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005818:	2180      	movs	r1, #128	; 0x80
 800581a:	484c      	ldr	r0, [pc, #304]	; (800594c <checkAktifCalisma+0xb54>)
 800581c:	f003 fdf4 	bl	8009408 <HAL_GPIO_ReadPin>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d103      	bne.n	800582e <checkAktifCalisma+0xa36>
 8005826:	4b55      	ldr	r3, [pc, #340]	; (800597c <checkAktifCalisma+0xb84>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <checkAktifCalisma+0xa4e>
 800582e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005832:	484e      	ldr	r0, [pc, #312]	; (800596c <checkAktifCalisma+0xb74>)
 8005834:	f003 fde8 	bl	8009408 <HAL_GPIO_ReadPin>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d129      	bne.n	8005892 <checkAktifCalisma+0xa9a>
 800583e:	4b4f      	ldr	r3, [pc, #316]	; (800597c <checkAktifCalisma+0xb84>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d125      	bne.n	8005892 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005846:	2104      	movs	r1, #4
 8005848:	4840      	ldr	r0, [pc, #256]	; (800594c <checkAktifCalisma+0xb54>)
 800584a:	f003 fddd 	bl	8009408 <HAL_GPIO_ReadPin>
 800584e:	4603      	mov	r3, r0
 8005850:	2b01      	cmp	r3, #1
 8005852:	d003      	beq.n	800585c <checkAktifCalisma+0xa64>
 8005854:	4b4a      	ldr	r3, [pc, #296]	; (8005980 <checkAktifCalisma+0xb88>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d11a      	bne.n	8005892 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800585c:	2102      	movs	r1, #2
 800585e:	483b      	ldr	r0, [pc, #236]	; (800594c <checkAktifCalisma+0xb54>)
 8005860:	f003 fdd2 	bl	8009408 <HAL_GPIO_ReadPin>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d113      	bne.n	8005892 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800586a:	4b46      	ldr	r3, [pc, #280]	; (8005984 <checkAktifCalisma+0xb8c>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	f083 0301 	eor.w	r3, r3, #1
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00c      	beq.n	8005892 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005878:	4b3d      	ldr	r3, [pc, #244]	; (8005970 <checkAktifCalisma+0xb78>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d008      	beq.n	8005892 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005880:	4b41      	ldr	r3, [pc, #260]	; (8005988 <checkAktifCalisma+0xb90>)
 8005882:	2201      	movs	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005886:	4b36      	ldr	r3, [pc, #216]	; (8005960 <checkAktifCalisma+0xb68>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a40      	ldr	r2, [pc, #256]	; (800598c <checkAktifCalisma+0xb94>)
 800588c:	6013      	str	r3, [r2, #0]
			bekle();
 800588e:	f7ff f935 	bl	8004afc <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005892:	4b33      	ldr	r3, [pc, #204]	; (8005960 <checkAktifCalisma+0xb68>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b3d      	ldr	r3, [pc, #244]	; (800598c <checkAktifCalisma+0xb94>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	4a3c      	ldr	r2, [pc, #240]	; (8005990 <checkAktifCalisma+0xb98>)
 800589e:	7812      	ldrb	r2, [r2, #0]
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d211      	bcs.n	80058c8 <checkAktifCalisma+0xad0>
 80058a4:	2104      	movs	r1, #4
 80058a6:	4829      	ldr	r0, [pc, #164]	; (800594c <checkAktifCalisma+0xb54>)
 80058a8:	f003 fdae 	bl	8009408 <HAL_GPIO_ReadPin>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <checkAktifCalisma+0xad0>
 80058b2:	4b33      	ldr	r3, [pc, #204]	; (8005980 <checkAktifCalisma+0xb88>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d006      	beq.n	80058c8 <checkAktifCalisma+0xad0>
 80058ba:	4b2d      	ldr	r3, [pc, #180]	; (8005970 <checkAktifCalisma+0xb78>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	f083 0301 	eor.w	r3, r3, #1
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80058c8:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <checkAktifCalisma+0xb90>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058ce:	4b29      	ldr	r3, [pc, #164]	; (8005974 <checkAktifCalisma+0xb7c>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d160      	bne.n	8005998 <checkAktifCalisma+0xba0>
 80058d6:	4b28      	ldr	r3, [pc, #160]	; (8005978 <checkAktifCalisma+0xb80>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d003      	beq.n	80058e6 <checkAktifCalisma+0xaee>
 80058de:	4b26      	ldr	r3, [pc, #152]	; (8005978 <checkAktifCalisma+0xb80>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d158      	bne.n	8005998 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80058e6:	2104      	movs	r1, #4
 80058e8:	4818      	ldr	r0, [pc, #96]	; (800594c <checkAktifCalisma+0xb54>)
 80058ea:	f003 fd8d 	bl	8009408 <HAL_GPIO_ReadPin>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d003      	beq.n	80058fc <checkAktifCalisma+0xb04>
 80058f4:	4b22      	ldr	r3, [pc, #136]	; (8005980 <checkAktifCalisma+0xb88>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d14d      	bne.n	8005998 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058fc:	2102      	movs	r1, #2
 80058fe:	4813      	ldr	r0, [pc, #76]	; (800594c <checkAktifCalisma+0xb54>)
 8005900:	f003 fd82 	bl	8009408 <HAL_GPIO_ReadPin>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d146      	bne.n	8005998 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800590a:	2180      	movs	r1, #128	; 0x80
 800590c:	480f      	ldr	r0, [pc, #60]	; (800594c <checkAktifCalisma+0xb54>)
 800590e:	f003 fd7b 	bl	8009408 <HAL_GPIO_ReadPin>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <checkAktifCalisma+0xb28>
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <checkAktifCalisma+0xb84>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <checkAktifCalisma+0xb40>
 8005920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005924:	4811      	ldr	r0, [pc, #68]	; (800596c <checkAktifCalisma+0xb74>)
 8005926:	f003 fd6f 	bl	8009408 <HAL_GPIO_ReadPin>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d133      	bne.n	8005998 <checkAktifCalisma+0xba0>
 8005930:	4b12      	ldr	r3, [pc, #72]	; (800597c <checkAktifCalisma+0xb84>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d12f      	bne.n	8005998 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8005938:	4b0d      	ldr	r3, [pc, #52]	; (8005970 <checkAktifCalisma+0xb78>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d02b      	beq.n	8005998 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005940:	4b14      	ldr	r3, [pc, #80]	; (8005994 <checkAktifCalisma+0xb9c>)
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	e02a      	b.n	800599e <checkAktifCalisma+0xba6>
 8005948:	2000025b 	.word	0x2000025b
 800594c:	40011000 	.word	0x40011000
 8005950:	2000025f 	.word	0x2000025f
 8005954:	20000276 	.word	0x20000276
 8005958:	20000277 	.word	0x20000277
 800595c:	20000257 	.word	0x20000257
 8005960:	20000200 	.word	0x20000200
 8005964:	2000020c 	.word	0x2000020c
 8005968:	2000023a 	.word	0x2000023a
 800596c:	40010c00 	.word	0x40010c00
 8005970:	20000266 	.word	0x20000266
 8005974:	2000022d 	.word	0x2000022d
 8005978:	2000022c 	.word	0x2000022c
 800597c:	20000230 	.word	0x20000230
 8005980:	2000022a 	.word	0x2000022a
 8005984:	20000253 	.word	0x20000253
 8005988:	20000267 	.word	0x20000267
 800598c:	20000204 	.word	0x20000204
 8005990:	2000023d 	.word	0x2000023d
 8005994:	20000268 	.word	0x20000268
		} else {
			kapi1butonkontrol=0;
 8005998:	4b8b      	ldr	r3, [pc, #556]	; (8005bc8 <checkAktifCalisma+0xdd0>)
 800599a:	2200      	movs	r2, #0
 800599c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800599e:	4b8b      	ldr	r3, [pc, #556]	; (8005bcc <checkAktifCalisma+0xdd4>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d121      	bne.n	80059ea <checkAktifCalisma+0xbf2>
 80059a6:	4b8a      	ldr	r3, [pc, #552]	; (8005bd0 <checkAktifCalisma+0xdd8>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d003      	beq.n	80059b6 <checkAktifCalisma+0xbbe>
 80059ae:	4b88      	ldr	r3, [pc, #544]	; (8005bd0 <checkAktifCalisma+0xdd8>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d119      	bne.n	80059ea <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80059b6:	2104      	movs	r1, #4
 80059b8:	4886      	ldr	r0, [pc, #536]	; (8005bd4 <checkAktifCalisma+0xddc>)
 80059ba:	f003 fd25 	bl	8009408 <HAL_GPIO_ReadPin>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d003      	beq.n	80059cc <checkAktifCalisma+0xbd4>
 80059c4:	4b84      	ldr	r3, [pc, #528]	; (8005bd8 <checkAktifCalisma+0xde0>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10e      	bne.n	80059ea <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059cc:	2102      	movs	r1, #2
 80059ce:	4881      	ldr	r0, [pc, #516]	; (8005bd4 <checkAktifCalisma+0xddc>)
 80059d0:	f003 fd1a 	bl	8009408 <HAL_GPIO_ReadPin>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d107      	bne.n	80059ea <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80059da:	4b80      	ldr	r3, [pc, #512]	; (8005bdc <checkAktifCalisma+0xde4>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80059e2:	4b7f      	ldr	r3, [pc, #508]	; (8005be0 <checkAktifCalisma+0xde8>)
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e002      	b.n	80059f0 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80059ea:	4b7d      	ldr	r3, [pc, #500]	; (8005be0 <checkAktifCalisma+0xde8>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80059f0:	4b75      	ldr	r3, [pc, #468]	; (8005bc8 <checkAktifCalisma+0xdd0>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <checkAktifCalisma+0xc10>
 80059f8:	4b79      	ldr	r3, [pc, #484]	; (8005be0 <checkAktifCalisma+0xde8>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d103      	bne.n	8005a08 <checkAktifCalisma+0xc10>
 8005a00:	4b78      	ldr	r3, [pc, #480]	; (8005be4 <checkAktifCalisma+0xdec>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005a08:	2201      	movs	r2, #1
 8005a0a:	2180      	movs	r1, #128	; 0x80
 8005a0c:	4876      	ldr	r0, [pc, #472]	; (8005be8 <checkAktifCalisma+0xdf0>)
 8005a0e:	f003 fd12 	bl	8009436 <HAL_GPIO_WritePin>
 8005a12:	e004      	b.n	8005a1e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005a14:	2200      	movs	r2, #0
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	4873      	ldr	r0, [pc, #460]	; (8005be8 <checkAktifCalisma+0xdf0>)
 8005a1a:	f003 fd0c 	bl	8009436 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a1e:	4b73      	ldr	r3, [pc, #460]	; (8005bec <checkAktifCalisma+0xdf4>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d141      	bne.n	8005aaa <checkAktifCalisma+0xcb2>
 8005a26:	4b6a      	ldr	r3, [pc, #424]	; (8005bd0 <checkAktifCalisma+0xdd8>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d003      	beq.n	8005a36 <checkAktifCalisma+0xc3e>
 8005a2e:	4b68      	ldr	r3, [pc, #416]	; (8005bd0 <checkAktifCalisma+0xdd8>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d139      	bne.n	8005aaa <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a3a:	4866      	ldr	r0, [pc, #408]	; (8005bd4 <checkAktifCalisma+0xddc>)
 8005a3c:	f003 fce4 	bl	8009408 <HAL_GPIO_ReadPin>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <checkAktifCalisma+0xc56>
 8005a46:	4b6a      	ldr	r3, [pc, #424]	; (8005bf0 <checkAktifCalisma+0xdf8>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <checkAktifCalisma+0xc6e>
 8005a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a52:	4868      	ldr	r0, [pc, #416]	; (8005bf4 <checkAktifCalisma+0xdfc>)
 8005a54:	f003 fcd8 	bl	8009408 <HAL_GPIO_ReadPin>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d125      	bne.n	8005aaa <checkAktifCalisma+0xcb2>
 8005a5e:	4b64      	ldr	r3, [pc, #400]	; (8005bf0 <checkAktifCalisma+0xdf8>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d121      	bne.n	8005aaa <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a66:	2102      	movs	r1, #2
 8005a68:	485a      	ldr	r0, [pc, #360]	; (8005bd4 <checkAktifCalisma+0xddc>)
 8005a6a:	f003 fccd 	bl	8009408 <HAL_GPIO_ReadPin>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d11a      	bne.n	8005aaa <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a74:	2104      	movs	r1, #4
 8005a76:	4857      	ldr	r0, [pc, #348]	; (8005bd4 <checkAktifCalisma+0xddc>)
 8005a78:	f003 fcc6 	bl	8009408 <HAL_GPIO_ReadPin>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d113      	bne.n	8005aaa <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005a82:	4b56      	ldr	r3, [pc, #344]	; (8005bdc <checkAktifCalisma+0xde4>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00f      	beq.n	8005aaa <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005a8a:	4b5b      	ldr	r3, [pc, #364]	; (8005bf8 <checkAktifCalisma+0xe00>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f083 0301 	eor.w	r3, r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005a98:	4b58      	ldr	r3, [pc, #352]	; (8005bfc <checkAktifCalisma+0xe04>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005a9e:	4b58      	ldr	r3, [pc, #352]	; (8005c00 <checkAktifCalisma+0xe08>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a58      	ldr	r2, [pc, #352]	; (8005c04 <checkAktifCalisma+0xe0c>)
 8005aa4:	6013      	str	r3, [r2, #0]
			bekle();
 8005aa6:	f7ff f829 	bl	8004afc <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005aaa:	4b55      	ldr	r3, [pc, #340]	; (8005c00 <checkAktifCalisma+0xe08>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b55      	ldr	r3, [pc, #340]	; (8005c04 <checkAktifCalisma+0xe0c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	4a54      	ldr	r2, [pc, #336]	; (8005c08 <checkAktifCalisma+0xe10>)
 8005ab6:	7812      	ldrb	r2, [r2, #0]
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d20d      	bcs.n	8005ad8 <checkAktifCalisma+0xce0>
 8005abc:	2102      	movs	r1, #2
 8005abe:	4845      	ldr	r0, [pc, #276]	; (8005bd4 <checkAktifCalisma+0xddc>)
 8005ac0:	f003 fca2 	bl	8009408 <HAL_GPIO_ReadPin>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d006      	beq.n	8005ad8 <checkAktifCalisma+0xce0>
 8005aca:	4b44      	ldr	r3, [pc, #272]	; (8005bdc <checkAktifCalisma+0xde4>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	f083 0301 	eor.w	r3, r3, #1
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005ad8:	4b48      	ldr	r3, [pc, #288]	; (8005bfc <checkAktifCalisma+0xe04>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ade:	4b43      	ldr	r3, [pc, #268]	; (8005bec <checkAktifCalisma+0xdf4>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d135      	bne.n	8005b52 <checkAktifCalisma+0xd5a>
 8005ae6:	4b3a      	ldr	r3, [pc, #232]	; (8005bd0 <checkAktifCalisma+0xdd8>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d003      	beq.n	8005af6 <checkAktifCalisma+0xcfe>
 8005aee:	4b38      	ldr	r3, [pc, #224]	; (8005bd0 <checkAktifCalisma+0xdd8>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d12d      	bne.n	8005b52 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005afa:	4836      	ldr	r0, [pc, #216]	; (8005bd4 <checkAktifCalisma+0xddc>)
 8005afc:	f003 fc84 	bl	8009408 <HAL_GPIO_ReadPin>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <checkAktifCalisma+0xd16>
 8005b06:	4b3a      	ldr	r3, [pc, #232]	; (8005bf0 <checkAktifCalisma+0xdf8>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <checkAktifCalisma+0xd2e>
 8005b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b12:	4838      	ldr	r0, [pc, #224]	; (8005bf4 <checkAktifCalisma+0xdfc>)
 8005b14:	f003 fc78 	bl	8009408 <HAL_GPIO_ReadPin>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d119      	bne.n	8005b52 <checkAktifCalisma+0xd5a>
 8005b1e:	4b34      	ldr	r3, [pc, #208]	; (8005bf0 <checkAktifCalisma+0xdf8>)
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d115      	bne.n	8005b52 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b26:	2102      	movs	r1, #2
 8005b28:	482a      	ldr	r0, [pc, #168]	; (8005bd4 <checkAktifCalisma+0xddc>)
 8005b2a:	f003 fc6d 	bl	8009408 <HAL_GPIO_ReadPin>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d10e      	bne.n	8005b52 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b34:	2104      	movs	r1, #4
 8005b36:	4827      	ldr	r0, [pc, #156]	; (8005bd4 <checkAktifCalisma+0xddc>)
 8005b38:	f003 fc66 	bl	8009408 <HAL_GPIO_ReadPin>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d107      	bne.n	8005b52 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005b42:	4b26      	ldr	r3, [pc, #152]	; (8005bdc <checkAktifCalisma+0xde4>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8005b4a:	4b30      	ldr	r3, [pc, #192]	; (8005c0c <checkAktifCalisma+0xe14>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e002      	b.n	8005b58 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005b52:	4b2e      	ldr	r3, [pc, #184]	; (8005c0c <checkAktifCalisma+0xe14>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b58:	4b24      	ldr	r3, [pc, #144]	; (8005bec <checkAktifCalisma+0xdf4>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d11d      	bne.n	8005b9c <checkAktifCalisma+0xda4>
 8005b60:	4b1b      	ldr	r3, [pc, #108]	; (8005bd0 <checkAktifCalisma+0xdd8>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d003      	beq.n	8005b70 <checkAktifCalisma+0xd78>
 8005b68:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <checkAktifCalisma+0xdd8>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d115      	bne.n	8005b9c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b70:	2102      	movs	r1, #2
 8005b72:	4818      	ldr	r0, [pc, #96]	; (8005bd4 <checkAktifCalisma+0xddc>)
 8005b74:	f003 fc48 	bl	8009408 <HAL_GPIO_ReadPin>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d10e      	bne.n	8005b9c <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005b7e:	2104      	movs	r1, #4
 8005b80:	4814      	ldr	r0, [pc, #80]	; (8005bd4 <checkAktifCalisma+0xddc>)
 8005b82:	f003 fc41 	bl	8009408 <HAL_GPIO_ReadPin>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d107      	bne.n	8005b9c <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005b8c:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <checkAktifCalisma+0xde4>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005b94:	4b1e      	ldr	r3, [pc, #120]	; (8005c10 <checkAktifCalisma+0xe18>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e002      	b.n	8005ba2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005b9c:	4b1c      	ldr	r3, [pc, #112]	; (8005c10 <checkAktifCalisma+0xe18>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005ba2:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <checkAktifCalisma+0xe14>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d107      	bne.n	8005bba <checkAktifCalisma+0xdc2>
 8005baa:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <checkAktifCalisma+0xe18>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d103      	bne.n	8005bba <checkAktifCalisma+0xdc2>
 8005bb2:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <checkAktifCalisma+0xe04>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d02c      	beq.n	8005c14 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2140      	movs	r1, #64	; 0x40
 8005bbe:	480a      	ldr	r0, [pc, #40]	; (8005be8 <checkAktifCalisma+0xdf0>)
 8005bc0:	f003 fc39 	bl	8009436 <HAL_GPIO_WritePin>
 8005bc4:	e02b      	b.n	8005c1e <checkAktifCalisma+0xe26>
 8005bc6:	bf00      	nop
 8005bc8:	20000268 	.word	0x20000268
 8005bcc:	2000022d 	.word	0x2000022d
 8005bd0:	2000022c 	.word	0x2000022c
 8005bd4:	40011000 	.word	0x40011000
 8005bd8:	2000022a 	.word	0x2000022a
 8005bdc:	20000266 	.word	0x20000266
 8005be0:	20000269 	.word	0x20000269
 8005be4:	20000267 	.word	0x20000267
 8005be8:	40010800 	.word	0x40010800
 8005bec:	2000022e 	.word	0x2000022e
 8005bf0:	20000230 	.word	0x20000230
 8005bf4:	40010c00 	.word	0x40010c00
 8005bf8:	20000253 	.word	0x20000253
 8005bfc:	2000026a 	.word	0x2000026a
 8005c00:	20000200 	.word	0x20000200
 8005c04:	20000204 	.word	0x20000204
 8005c08:	2000023e 	.word	0x2000023e
 8005c0c:	2000026b 	.word	0x2000026b
 8005c10:	2000026c 	.word	0x2000026c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005c14:	2200      	movs	r2, #0
 8005c16:	2140      	movs	r1, #64	; 0x40
 8005c18:	488d      	ldr	r0, [pc, #564]	; (8005e50 <checkAktifCalisma+0x1058>)
 8005c1a:	f003 fc0c 	bl	8009436 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005c1e:	4b8d      	ldr	r3, [pc, #564]	; (8005e54 <checkAktifCalisma+0x105c>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <checkAktifCalisma+0xe36>
 8005c26:	4b8b      	ldr	r3, [pc, #556]	; (8005e54 <checkAktifCalisma+0x105c>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d115      	bne.n	8005c5a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c2e:	2104      	movs	r1, #4
 8005c30:	4889      	ldr	r0, [pc, #548]	; (8005e58 <checkAktifCalisma+0x1060>)
 8005c32:	f003 fbe9 	bl	8009408 <HAL_GPIO_ReadPin>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d003      	beq.n	8005c44 <checkAktifCalisma+0xe4c>
 8005c3c:	4b87      	ldr	r3, [pc, #540]	; (8005e5c <checkAktifCalisma+0x1064>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005c44:	2102      	movs	r1, #2
 8005c46:	4884      	ldr	r0, [pc, #528]	; (8005e58 <checkAktifCalisma+0x1060>)
 8005c48:	f003 fbde 	bl	8009408 <HAL_GPIO_ReadPin>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005c52:	4b83      	ldr	r3, [pc, #524]	; (8005e60 <checkAktifCalisma+0x1068>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	e002      	b.n	8005c60 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005c5a:	4b81      	ldr	r3, [pc, #516]	; (8005e60 <checkAktifCalisma+0x1068>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005c60:	4b7c      	ldr	r3, [pc, #496]	; (8005e54 <checkAktifCalisma+0x105c>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d003      	beq.n	8005c70 <checkAktifCalisma+0xe78>
 8005c68:	4b7a      	ldr	r3, [pc, #488]	; (8005e54 <checkAktifCalisma+0x105c>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d111      	bne.n	8005c94 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c70:	2102      	movs	r1, #2
 8005c72:	4879      	ldr	r0, [pc, #484]	; (8005e58 <checkAktifCalisma+0x1060>)
 8005c74:	f003 fbc8 	bl	8009408 <HAL_GPIO_ReadPin>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d10a      	bne.n	8005c94 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005c7e:	2104      	movs	r1, #4
 8005c80:	4875      	ldr	r0, [pc, #468]	; (8005e58 <checkAktifCalisma+0x1060>)
 8005c82:	f003 fbc1 	bl	8009408 <HAL_GPIO_ReadPin>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d103      	bne.n	8005c94 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005c8c:	4b75      	ldr	r3, [pc, #468]	; (8005e64 <checkAktifCalisma+0x106c>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	e002      	b.n	8005c9a <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005c94:	4b73      	ldr	r3, [pc, #460]	; (8005e64 <checkAktifCalisma+0x106c>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005c9a:	4b71      	ldr	r3, [pc, #452]	; (8005e60 <checkAktifCalisma+0x1068>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00f      	beq.n	8005cc2 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005ca2:	4b71      	ldr	r3, [pc, #452]	; (8005e68 <checkAktifCalisma+0x1070>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d10b      	bne.n	8005cc2 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005caa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cae:	486f      	ldr	r0, [pc, #444]	; (8005e6c <checkAktifCalisma+0x1074>)
 8005cb0:	f003 fbaa 	bl	8009408 <HAL_GPIO_ReadPin>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d103      	bne.n	8005cc2 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005cba:	4b6d      	ldr	r3, [pc, #436]	; (8005e70 <checkAktifCalisma+0x1078>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	701a      	strb	r2, [r3, #0]
 8005cc0:	e002      	b.n	8005cc8 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005cc2:	4b6b      	ldr	r3, [pc, #428]	; (8005e70 <checkAktifCalisma+0x1078>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005cc8:	4b66      	ldr	r3, [pc, #408]	; (8005e64 <checkAktifCalisma+0x106c>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00f      	beq.n	8005cf0 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005cd0:	4b65      	ldr	r3, [pc, #404]	; (8005e68 <checkAktifCalisma+0x1070>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d10b      	bne.n	8005cf0 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cdc:	4863      	ldr	r0, [pc, #396]	; (8005e6c <checkAktifCalisma+0x1074>)
 8005cde:	f003 fb93 	bl	8009408 <HAL_GPIO_ReadPin>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d103      	bne.n	8005cf0 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005ce8:	4b62      	ldr	r3, [pc, #392]	; (8005e74 <checkAktifCalisma+0x107c>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	e002      	b.n	8005cf6 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005cf0:	4b60      	ldr	r3, [pc, #384]	; (8005e74 <checkAktifCalisma+0x107c>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cf6:	4b60      	ldr	r3, [pc, #384]	; (8005e78 <checkAktifCalisma+0x1080>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d137      	bne.n	8005d6e <checkAktifCalisma+0xf76>
 8005cfe:	4b5f      	ldr	r3, [pc, #380]	; (8005e7c <checkAktifCalisma+0x1084>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d003      	beq.n	8005d0e <checkAktifCalisma+0xf16>
 8005d06:	4b5d      	ldr	r3, [pc, #372]	; (8005e7c <checkAktifCalisma+0x1084>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d12f      	bne.n	8005d6e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005d0e:	4b54      	ldr	r3, [pc, #336]	; (8005e60 <checkAktifCalisma+0x1068>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d103      	bne.n	8005d1e <checkAktifCalisma+0xf26>
 8005d16:	4b53      	ldr	r3, [pc, #332]	; (8005e64 <checkAktifCalisma+0x106c>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d027      	beq.n	8005d6e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005d1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d22:	484d      	ldr	r0, [pc, #308]	; (8005e58 <checkAktifCalisma+0x1060>)
 8005d24:	f003 fb70 	bl	8009408 <HAL_GPIO_ReadPin>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <checkAktifCalisma+0xf3e>
 8005d2e:	4b4e      	ldr	r3, [pc, #312]	; (8005e68 <checkAktifCalisma+0x1070>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005d36:	4b4e      	ldr	r3, [pc, #312]	; (8005e70 <checkAktifCalisma+0x1078>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d103      	bne.n	8005d46 <checkAktifCalisma+0xf4e>
 8005d3e:	4b4d      	ldr	r3, [pc, #308]	; (8005e74 <checkAktifCalisma+0x107c>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d013      	beq.n	8005d6e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005d46:	4b4e      	ldr	r3, [pc, #312]	; (8005e80 <checkAktifCalisma+0x1088>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00f      	beq.n	8005d6e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005d4e:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <checkAktifCalisma+0x108c>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	f083 0301 	eor.w	r3, r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005d5c:	4b4a      	ldr	r3, [pc, #296]	; (8005e88 <checkAktifCalisma+0x1090>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005d62:	4b4a      	ldr	r3, [pc, #296]	; (8005e8c <checkAktifCalisma+0x1094>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a4a      	ldr	r2, [pc, #296]	; (8005e90 <checkAktifCalisma+0x1098>)
 8005d68:	6013      	str	r3, [r2, #0]
			bekle();
 8005d6a:	f7fe fec7 	bl	8004afc <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005d6e:	4b47      	ldr	r3, [pc, #284]	; (8005e8c <checkAktifCalisma+0x1094>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b47      	ldr	r3, [pc, #284]	; (8005e90 <checkAktifCalisma+0x1098>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	4a46      	ldr	r2, [pc, #280]	; (8005e94 <checkAktifCalisma+0x109c>)
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d214      	bcs.n	8005daa <checkAktifCalisma+0xfb2>
 8005d80:	4b37      	ldr	r3, [pc, #220]	; (8005e60 <checkAktifCalisma+0x1068>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f083 0301 	eor.w	r3, r3, #1
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d006      	beq.n	8005d9c <checkAktifCalisma+0xfa4>
 8005d8e:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <checkAktifCalisma+0x106c>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	f083 0301 	eor.w	r3, r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d106      	bne.n	8005daa <checkAktifCalisma+0xfb2>
 8005d9c:	4b38      	ldr	r3, [pc, #224]	; (8005e80 <checkAktifCalisma+0x1088>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f083 0301 	eor.w	r3, r3, #1
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005daa:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <checkAktifCalisma+0x1090>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005db0:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <checkAktifCalisma+0x1080>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d12b      	bne.n	8005e10 <checkAktifCalisma+0x1018>
 8005db8:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <checkAktifCalisma+0x1084>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d003      	beq.n	8005dc8 <checkAktifCalisma+0xfd0>
 8005dc0:	4b2e      	ldr	r3, [pc, #184]	; (8005e7c <checkAktifCalisma+0x1084>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d123      	bne.n	8005e10 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005dc8:	4b25      	ldr	r3, [pc, #148]	; (8005e60 <checkAktifCalisma+0x1068>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <checkAktifCalisma+0xfe0>
 8005dd0:	4b24      	ldr	r3, [pc, #144]	; (8005e64 <checkAktifCalisma+0x106c>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01b      	beq.n	8005e10 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ddc:	481e      	ldr	r0, [pc, #120]	; (8005e58 <checkAktifCalisma+0x1060>)
 8005dde:	f003 fb13 	bl	8009408 <HAL_GPIO_ReadPin>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <checkAktifCalisma+0xff8>
 8005de8:	4b1f      	ldr	r3, [pc, #124]	; (8005e68 <checkAktifCalisma+0x1070>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d007      	beq.n	8005e00 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005df0:	4b1f      	ldr	r3, [pc, #124]	; (8005e70 <checkAktifCalisma+0x1078>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d103      	bne.n	8005e00 <checkAktifCalisma+0x1008>
 8005df8:	4b1e      	ldr	r3, [pc, #120]	; (8005e74 <checkAktifCalisma+0x107c>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005e00:	4b1f      	ldr	r3, [pc, #124]	; (8005e80 <checkAktifCalisma+0x1088>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005e08:	4b23      	ldr	r3, [pc, #140]	; (8005e98 <checkAktifCalisma+0x10a0>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	e002      	b.n	8005e16 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005e10:	4b21      	ldr	r3, [pc, #132]	; (8005e98 <checkAktifCalisma+0x10a0>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005e16:	4b18      	ldr	r3, [pc, #96]	; (8005e78 <checkAktifCalisma+0x1080>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d140      	bne.n	8005ea0 <checkAktifCalisma+0x10a8>
 8005e1e:	4b17      	ldr	r3, [pc, #92]	; (8005e7c <checkAktifCalisma+0x1084>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d003      	beq.n	8005e2e <checkAktifCalisma+0x1036>
 8005e26:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <checkAktifCalisma+0x1084>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d138      	bne.n	8005ea0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <checkAktifCalisma+0x1068>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d103      	bne.n	8005e3e <checkAktifCalisma+0x1046>
 8005e36:	4b0b      	ldr	r3, [pc, #44]	; (8005e64 <checkAktifCalisma+0x106c>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d030      	beq.n	8005ea0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005e3e:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <checkAktifCalisma+0x1088>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d02c      	beq.n	8005ea0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005e46:	4b15      	ldr	r3, [pc, #84]	; (8005e9c <checkAktifCalisma+0x10a4>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	e02b      	b.n	8005ea6 <checkAktifCalisma+0x10ae>
 8005e4e:	bf00      	nop
 8005e50:	40010800 	.word	0x40010800
 8005e54:	20000231 	.word	0x20000231
 8005e58:	40011000 	.word	0x40011000
 8005e5c:	2000022a 	.word	0x2000022a
 8005e60:	20000270 	.word	0x20000270
 8005e64:	20000271 	.word	0x20000271
 8005e68:	20000230 	.word	0x20000230
 8005e6c:	40010c00 	.word	0x40010c00
 8005e70:	20000280 	.word	0x20000280
 8005e74:	20000281 	.word	0x20000281
 8005e78:	2000022f 	.word	0x2000022f
 8005e7c:	2000022c 	.word	0x2000022c
 8005e80:	20000266 	.word	0x20000266
 8005e84:	20000253 	.word	0x20000253
 8005e88:	2000026d 	.word	0x2000026d
 8005e8c:	20000200 	.word	0x20000200
 8005e90:	20000204 	.word	0x20000204
 8005e94:	2000023f 	.word	0x2000023f
 8005e98:	2000026e 	.word	0x2000026e
 8005e9c:	2000026f 	.word	0x2000026f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005ea0:	4b8b      	ldr	r3, [pc, #556]	; (80060d0 <checkAktifCalisma+0x12d8>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005ea6:	4b8b      	ldr	r3, [pc, #556]	; (80060d4 <checkAktifCalisma+0x12dc>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <checkAktifCalisma+0x10c6>
 8005eae:	4b8a      	ldr	r3, [pc, #552]	; (80060d8 <checkAktifCalisma+0x12e0>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d103      	bne.n	8005ebe <checkAktifCalisma+0x10c6>
 8005eb6:	4b86      	ldr	r3, [pc, #536]	; (80060d0 <checkAktifCalisma+0x12d8>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	2120      	movs	r1, #32
 8005ec2:	4886      	ldr	r0, [pc, #536]	; (80060dc <checkAktifCalisma+0x12e4>)
 8005ec4:	f003 fab7 	bl	8009436 <HAL_GPIO_WritePin>
 8005ec8:	e004      	b.n	8005ed4 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2120      	movs	r1, #32
 8005ece:	4883      	ldr	r0, [pc, #524]	; (80060dc <checkAktifCalisma+0x12e4>)
 8005ed0:	f003 fab1 	bl	8009436 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005ed4:	4b82      	ldr	r3, [pc, #520]	; (80060e0 <checkAktifCalisma+0x12e8>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00e      	beq.n	8005efa <checkAktifCalisma+0x1102>
 8005edc:	2102      	movs	r1, #2
 8005ede:	4881      	ldr	r0, [pc, #516]	; (80060e4 <checkAktifCalisma+0x12ec>)
 8005ee0:	f003 fa92 	bl	8009408 <HAL_GPIO_ReadPin>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d107      	bne.n	8005efa <checkAktifCalisma+0x1102>
 8005eea:	4b7f      	ldr	r3, [pc, #508]	; (80060e8 <checkAktifCalisma+0x12f0>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <checkAktifCalisma+0x1102>
 8005ef2:	4b7e      	ldr	r3, [pc, #504]	; (80060ec <checkAktifCalisma+0x12f4>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d112      	bne.n	8005f20 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005efa:	4b7d      	ldr	r3, [pc, #500]	; (80060f0 <checkAktifCalisma+0x12f8>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d066      	beq.n	8005fd0 <checkAktifCalisma+0x11d8>
 8005f02:	2104      	movs	r1, #4
 8005f04:	4877      	ldr	r0, [pc, #476]	; (80060e4 <checkAktifCalisma+0x12ec>)
 8005f06:	f003 fa7f 	bl	8009408 <HAL_GPIO_ReadPin>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d15f      	bne.n	8005fd0 <checkAktifCalisma+0x11d8>
 8005f10:	4b75      	ldr	r3, [pc, #468]	; (80060e8 <checkAktifCalisma+0x12f0>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d05b      	beq.n	8005fd0 <checkAktifCalisma+0x11d8>
 8005f18:	4b74      	ldr	r3, [pc, #464]	; (80060ec <checkAktifCalisma+0x12f4>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d057      	beq.n	8005fd0 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005f20:	4b74      	ldr	r3, [pc, #464]	; (80060f4 <checkAktifCalisma+0x12fc>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	4b72      	ldr	r3, [pc, #456]	; (80060f4 <checkAktifCalisma+0x12fc>)
 8005f2a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005f2c:	4b71      	ldr	r3, [pc, #452]	; (80060f4 <checkAktifCalisma+0x12fc>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b09      	cmp	r3, #9
 8005f32:	d908      	bls.n	8005f46 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005f34:	4b6f      	ldr	r3, [pc, #444]	; (80060f4 <checkAktifCalisma+0x12fc>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005f3a:	4b6f      	ldr	r3, [pc, #444]	; (80060f8 <checkAktifCalisma+0x1300>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	4b6d      	ldr	r3, [pc, #436]	; (80060f8 <checkAktifCalisma+0x1300>)
 8005f44:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005f46:	4b6c      	ldr	r3, [pc, #432]	; (80060f8 <checkAktifCalisma+0x1300>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b09      	cmp	r3, #9
 8005f4c:	d908      	bls.n	8005f60 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005f4e:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <checkAktifCalisma+0x1300>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005f54:	4b69      	ldr	r3, [pc, #420]	; (80060fc <checkAktifCalisma+0x1304>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	4b67      	ldr	r3, [pc, #412]	; (80060fc <checkAktifCalisma+0x1304>)
 8005f5e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005f60:	4b66      	ldr	r3, [pc, #408]	; (80060fc <checkAktifCalisma+0x1304>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b09      	cmp	r3, #9
 8005f66:	d908      	bls.n	8005f7a <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005f68:	4b64      	ldr	r3, [pc, #400]	; (80060fc <checkAktifCalisma+0x1304>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005f6e:	4b64      	ldr	r3, [pc, #400]	; (8006100 <checkAktifCalisma+0x1308>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	3301      	adds	r3, #1
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	4b62      	ldr	r3, [pc, #392]	; (8006100 <checkAktifCalisma+0x1308>)
 8005f78:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005f7a:	4b61      	ldr	r3, [pc, #388]	; (8006100 <checkAktifCalisma+0x1308>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	d908      	bls.n	8005f94 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005f82:	4b5f      	ldr	r3, [pc, #380]	; (8006100 <checkAktifCalisma+0x1308>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005f88:	4b5e      	ldr	r3, [pc, #376]	; (8006104 <checkAktifCalisma+0x130c>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	4b5c      	ldr	r3, [pc, #368]	; (8006104 <checkAktifCalisma+0x130c>)
 8005f92:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005f94:	4b5b      	ldr	r3, [pc, #364]	; (8006104 <checkAktifCalisma+0x130c>)
 8005f96:	781a      	ldrb	r2, [r3, #0]
 8005f98:	4b5b      	ldr	r3, [pc, #364]	; (8006108 <checkAktifCalisma+0x1310>)
 8005f9a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005f9e:	4b58      	ldr	r3, [pc, #352]	; (8006100 <checkAktifCalisma+0x1308>)
 8005fa0:	781a      	ldrb	r2, [r3, #0]
 8005fa2:	4b59      	ldr	r3, [pc, #356]	; (8006108 <checkAktifCalisma+0x1310>)
 8005fa4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005fa6:	4b55      	ldr	r3, [pc, #340]	; (80060fc <checkAktifCalisma+0x1304>)
 8005fa8:	781a      	ldrb	r2, [r3, #0]
 8005faa:	4b57      	ldr	r3, [pc, #348]	; (8006108 <checkAktifCalisma+0x1310>)
 8005fac:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005fae:	4b52      	ldr	r3, [pc, #328]	; (80060f8 <checkAktifCalisma+0x1300>)
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	4b55      	ldr	r3, [pc, #340]	; (8006108 <checkAktifCalisma+0x1310>)
 8005fb4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005fb6:	4b4f      	ldr	r3, [pc, #316]	; (80060f4 <checkAktifCalisma+0x12fc>)
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	4b53      	ldr	r3, [pc, #332]	; (8006108 <checkAktifCalisma+0x1310>)
 8005fbc:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005fbe:	4b53      	ldr	r3, [pc, #332]	; (800610c <checkAktifCalisma+0x1314>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005fc4:	4b46      	ldr	r3, [pc, #280]	; (80060e0 <checkAktifCalisma+0x12e8>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005fca:	4b49      	ldr	r3, [pc, #292]	; (80060f0 <checkAktifCalisma+0x12f8>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005fd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fd4:	484e      	ldr	r0, [pc, #312]	; (8006110 <checkAktifCalisma+0x1318>)
 8005fd6:	f003 fa17 	bl	8009408 <HAL_GPIO_ReadPin>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d016      	beq.n	800600e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fe4:	484a      	ldr	r0, [pc, #296]	; (8006110 <checkAktifCalisma+0x1318>)
 8005fe6:	f003 fa0f 	bl	8009408 <HAL_GPIO_ReadPin>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00e      	beq.n	800600e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005ff0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ff4:	4846      	ldr	r0, [pc, #280]	; (8006110 <checkAktifCalisma+0x1318>)
 8005ff6:	f003 fa07 	bl	8009408 <HAL_GPIO_ReadPin>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d006      	beq.n	800600e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006000:	2140      	movs	r1, #64	; 0x40
 8006002:	4838      	ldr	r0, [pc, #224]	; (80060e4 <checkAktifCalisma+0x12ec>)
 8006004:	f003 fa00 	bl	8009408 <HAL_GPIO_ReadPin>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <checkAktifCalisma+0x121e>
			startBasili=1;
 800600e:	4b41      	ldr	r3, [pc, #260]	; (8006114 <checkAktifCalisma+0x131c>)
 8006010:	2201      	movs	r2, #1
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	e002      	b.n	800601c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006016:	4b3f      	ldr	r3, [pc, #252]	; (8006114 <checkAktifCalisma+0x131c>)
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800601c:	4b3d      	ldr	r3, [pc, #244]	; (8006114 <checkAktifCalisma+0x131c>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d016      	beq.n	8006052 <checkAktifCalisma+0x125a>
 8006024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006028:	4839      	ldr	r0, [pc, #228]	; (8006110 <checkAktifCalisma+0x1318>)
 800602a:	f003 f9ed 	bl	8009408 <HAL_GPIO_ReadPin>
 800602e:	4603      	mov	r3, r0
 8006030:	2b01      	cmp	r3, #1
 8006032:	d10e      	bne.n	8006052 <checkAktifCalisma+0x125a>
			hataVar=1;
 8006034:	4b38      	ldr	r3, [pc, #224]	; (8006118 <checkAktifCalisma+0x1320>)
 8006036:	2201      	movs	r2, #1
 8006038:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800603a:	2001      	movs	r0, #1
 800603c:	f7fa fda0 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006040:	2001      	movs	r0, #1
 8006042:	f7fa fd43 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 8006046:	f001 fc9b 	bl	8007980 <convertAndSendData>
			acilstophatasi=1;
 800604a:	4b34      	ldr	r3, [pc, #208]	; (800611c <checkAktifCalisma+0x1324>)
 800604c:	2201      	movs	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]
		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006050:	e018      	b.n	8006084 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006052:	4b32      	ldr	r3, [pc, #200]	; (800611c <checkAktifCalisma+0x1324>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d014      	beq.n	8006084 <checkAktifCalisma+0x128c>
 800605a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800605e:	482c      	ldr	r0, [pc, #176]	; (8006110 <checkAktifCalisma+0x1318>)
 8006060:	f003 f9d2 	bl	8009408 <HAL_GPIO_ReadPin>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10c      	bne.n	8006084 <checkAktifCalisma+0x128c>
 800606a:	4b2a      	ldr	r3, [pc, #168]	; (8006114 <checkAktifCalisma+0x131c>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	f083 0301 	eor.w	r3, r3, #1
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8006078:	4b28      	ldr	r3, [pc, #160]	; (800611c <checkAktifCalisma+0x1324>)
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800607e:	2001      	movs	r0, #1
 8006080:	f7fe fce8 	bl	8004a54 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006084:	4b26      	ldr	r3, [pc, #152]	; (8006120 <checkAktifCalisma+0x1328>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f083 0301 	eor.w	r3, r3, #1
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d04e      	beq.n	8006130 <checkAktifCalisma+0x1338>
 8006092:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006096:	481e      	ldr	r0, [pc, #120]	; (8006110 <checkAktifCalisma+0x1318>)
 8006098:	f003 f9b6 	bl	8009408 <HAL_GPIO_ReadPin>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <checkAktifCalisma+0x12b2>
 80060a2:	4b20      	ldr	r3, [pc, #128]	; (8006124 <checkAktifCalisma+0x132c>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d042      	beq.n	8006130 <checkAktifCalisma+0x1338>
 80060aa:	4b1f      	ldr	r3, [pc, #124]	; (8006128 <checkAktifCalisma+0x1330>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d13e      	bne.n	8006130 <checkAktifCalisma+0x1338>
			hataVar=1;
 80060b2:	4b19      	ldr	r3, [pc, #100]	; (8006118 <checkAktifCalisma+0x1320>)
 80060b4:	2201      	movs	r2, #1
 80060b6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80060b8:	2002      	movs	r0, #2
 80060ba:	f7fa fd61 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80060be:	2002      	movs	r0, #2
 80060c0:	f7fa fd04 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 80060c4:	f001 fc5c 	bl	8007980 <convertAndSendData>
			emniyetCercevesihatasi=1;
 80060c8:	4b18      	ldr	r3, [pc, #96]	; (800612c <checkAktifCalisma+0x1334>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80060ce:	e047      	b.n	8006160 <checkAktifCalisma+0x1368>
 80060d0:	2000026f 	.word	0x2000026f
 80060d4:	2000026e 	.word	0x2000026e
 80060d8:	2000026d 	.word	0x2000026d
 80060dc:	40010800 	.word	0x40010800
 80060e0:	20000263 	.word	0x20000263
 80060e4:	40011000 	.word	0x40011000
 80060e8:	2000022a 	.word	0x2000022a
 80060ec:	20000266 	.word	0x20000266
 80060f0:	20000264 	.word	0x20000264
 80060f4:	20000221 	.word	0x20000221
 80060f8:	20000222 	.word	0x20000222
 80060fc:	20000008 	.word	0x20000008
 8006100:	20000009 	.word	0x20000009
 8006104:	20000223 	.word	0x20000223
 8006108:	20000128 	.word	0x20000128
 800610c:	20000250 	.word	0x20000250
 8006110:	40010c00 	.word	0x40010c00
 8006114:	20000272 	.word	0x20000272
 8006118:	20000279 	.word	0x20000279
 800611c:	20000274 	.word	0x20000274
 8006120:	2000027b 	.word	0x2000027b
 8006124:	20000285 	.word	0x20000285
 8006128:	20000228 	.word	0x20000228
 800612c:	20000275 	.word	0x20000275
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006130:	4b9b      	ldr	r3, [pc, #620]	; (80063a0 <checkAktifCalisma+0x15a8>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d013      	beq.n	8006160 <checkAktifCalisma+0x1368>
 8006138:	4b9a      	ldr	r3, [pc, #616]	; (80063a4 <checkAktifCalisma+0x15ac>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00f      	beq.n	8006160 <checkAktifCalisma+0x1368>
 8006140:	4b99      	ldr	r3, [pc, #612]	; (80063a8 <checkAktifCalisma+0x15b0>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	f083 0301 	eor.w	r3, r3, #1
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800614e:	4b94      	ldr	r3, [pc, #592]	; (80063a0 <checkAktifCalisma+0x15a8>)
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006154:	4b95      	ldr	r3, [pc, #596]	; (80063ac <checkAktifCalisma+0x15b4>)
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800615a:	2002      	movs	r0, #2
 800615c:	f7fe fc7a 	bl	8004a54 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006160:	4b93      	ldr	r3, [pc, #588]	; (80063b0 <checkAktifCalisma+0x15b8>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11e      	bne.n	80061a6 <checkAktifCalisma+0x13ae>
 8006168:	4b92      	ldr	r3, [pc, #584]	; (80063b4 <checkAktifCalisma+0x15bc>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d11a      	bne.n	80061a6 <checkAktifCalisma+0x13ae>
 8006170:	4b91      	ldr	r3, [pc, #580]	; (80063b8 <checkAktifCalisma+0x15c0>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d016      	beq.n	80061a6 <checkAktifCalisma+0x13ae>
 8006178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800617c:	488f      	ldr	r0, [pc, #572]	; (80063bc <checkAktifCalisma+0x15c4>)
 800617e:	f003 f943 	bl	8009408 <HAL_GPIO_ReadPin>
 8006182:	4603      	mov	r3, r0
 8006184:	2b01      	cmp	r3, #1
 8006186:	d10e      	bne.n	80061a6 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006188:	4b8d      	ldr	r3, [pc, #564]	; (80063c0 <checkAktifCalisma+0x15c8>)
 800618a:	2201      	movs	r2, #1
 800618c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800618e:	2003      	movs	r0, #3
 8006190:	f7fa fcf6 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006194:	2003      	movs	r0, #3
 8006196:	f7fa fc99 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 800619a:	f001 fbf1 	bl	8007980 <convertAndSendData>
			basinchatasi=1;
 800619e:	4b89      	ldr	r3, [pc, #548]	; (80063c4 <checkAktifCalisma+0x15cc>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	701a      	strb	r2, [r3, #0]
		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80061a4:	e015      	b.n	80061d2 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80061a6:	4b87      	ldr	r3, [pc, #540]	; (80063c4 <checkAktifCalisma+0x15cc>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d011      	beq.n	80061d2 <checkAktifCalisma+0x13da>
 80061ae:	4b80      	ldr	r3, [pc, #512]	; (80063b0 <checkAktifCalisma+0x15b8>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10d      	bne.n	80061d2 <checkAktifCalisma+0x13da>
 80061b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061ba:	4883      	ldr	r0, [pc, #524]	; (80063c8 <checkAktifCalisma+0x15d0>)
 80061bc:	f003 f924 	bl	8009408 <HAL_GPIO_ReadPin>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d105      	bne.n	80061d2 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 80061c6:	4b7f      	ldr	r3, [pc, #508]	; (80063c4 <checkAktifCalisma+0x15cc>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80061cc:	2003      	movs	r0, #3
 80061ce:	f7fe fc41 	bl	8004a54 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80061d2:	4b7e      	ldr	r3, [pc, #504]	; (80063cc <checkAktifCalisma+0x15d4>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d103      	bne.n	80061e2 <checkAktifCalisma+0x13ea>
 80061da:	4b7d      	ldr	r3, [pc, #500]	; (80063d0 <checkAktifCalisma+0x15d8>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d01e      	beq.n	8006220 <checkAktifCalisma+0x1428>
 80061e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061e6:	487b      	ldr	r0, [pc, #492]	; (80063d4 <checkAktifCalisma+0x15dc>)
 80061e8:	f003 f90e 	bl	8009408 <HAL_GPIO_ReadPin>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d116      	bne.n	8006220 <checkAktifCalisma+0x1428>
 80061f2:	4b79      	ldr	r3, [pc, #484]	; (80063d8 <checkAktifCalisma+0x15e0>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d003      	beq.n	8006202 <checkAktifCalisma+0x140a>
 80061fa:	4b77      	ldr	r3, [pc, #476]	; (80063d8 <checkAktifCalisma+0x15e0>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d10e      	bne.n	8006220 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006202:	4b6f      	ldr	r3, [pc, #444]	; (80063c0 <checkAktifCalisma+0x15c8>)
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006208:	2004      	movs	r0, #4
 800620a:	f7fa fcb9 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800620e:	2004      	movs	r0, #4
 8006210:	f7fa fc5c 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 8006214:	f001 fbb4 	bl	8007980 <convertAndSendData>
			katkapisivicihatasi=1;
 8006218:	4b70      	ldr	r3, [pc, #448]	; (80063dc <checkAktifCalisma+0x15e4>)
 800621a:	2201      	movs	r2, #1
 800621c:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800621e:	e01f      	b.n	8006260 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006220:	4b6e      	ldr	r3, [pc, #440]	; (80063dc <checkAktifCalisma+0x15e4>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01b      	beq.n	8006260 <checkAktifCalisma+0x1468>
 8006228:	4b6d      	ldr	r3, [pc, #436]	; (80063e0 <checkAktifCalisma+0x15e8>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d017      	beq.n	8006260 <checkAktifCalisma+0x1468>
 8006230:	4b66      	ldr	r3, [pc, #408]	; (80063cc <checkAktifCalisma+0x15d4>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f083 0301 	eor.w	r3, r3, #1
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d010      	beq.n	8006260 <checkAktifCalisma+0x1468>
 800623e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006242:	4864      	ldr	r0, [pc, #400]	; (80063d4 <checkAktifCalisma+0x15dc>)
 8006244:	f003 f8e0 	bl	8009408 <HAL_GPIO_ReadPin>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d108      	bne.n	8006260 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800624e:	4b63      	ldr	r3, [pc, #396]	; (80063dc <checkAktifCalisma+0x15e4>)
 8006250:	2200      	movs	r2, #0
 8006252:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006254:	4b5e      	ldr	r3, [pc, #376]	; (80063d0 <checkAktifCalisma+0x15d8>)
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800625a:	2004      	movs	r0, #4
 800625c:	f7fe fbfa 	bl	8004a54 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006260:	4b5a      	ldr	r3, [pc, #360]	; (80063cc <checkAktifCalisma+0x15d4>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d103      	bne.n	8006270 <checkAktifCalisma+0x1478>
 8006268:	4b5e      	ldr	r3, [pc, #376]	; (80063e4 <checkAktifCalisma+0x15ec>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01e      	beq.n	80062ae <checkAktifCalisma+0x14b6>
 8006270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006274:	4857      	ldr	r0, [pc, #348]	; (80063d4 <checkAktifCalisma+0x15dc>)
 8006276:	f003 f8c7 	bl	8009408 <HAL_GPIO_ReadPin>
 800627a:	4603      	mov	r3, r0
 800627c:	2b01      	cmp	r3, #1
 800627e:	d116      	bne.n	80062ae <checkAktifCalisma+0x14b6>
 8006280:	4b55      	ldr	r3, [pc, #340]	; (80063d8 <checkAktifCalisma+0x15e0>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d003      	beq.n	8006290 <checkAktifCalisma+0x1498>
 8006288:	4b53      	ldr	r3, [pc, #332]	; (80063d8 <checkAktifCalisma+0x15e0>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b03      	cmp	r3, #3
 800628e:	d10e      	bne.n	80062ae <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006290:	4b4b      	ldr	r3, [pc, #300]	; (80063c0 <checkAktifCalisma+0x15c8>)
 8006292:	2201      	movs	r2, #1
 8006294:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006296:	2005      	movs	r0, #5
 8006298:	f7fa fc72 	bl	8000b80 <hataKoduLcdGoster>
			hata2EEPROM(5);
 800629c:	2005      	movs	r0, #5
 800629e:	f7fa fc15 	bl	8000acc <hata2EEPROM>
			convertAndSendData();
 80062a2:	f001 fb6d 	bl	8007980 <convertAndSendData>
			tablakapisivicihatasi=1;
 80062a6:	4b50      	ldr	r3, [pc, #320]	; (80063e8 <checkAktifCalisma+0x15f0>)
 80062a8:	2201      	movs	r2, #1
 80062aa:	701a      	strb	r2, [r3, #0]
		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80062ac:	e023      	b.n	80062f6 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80062ae:	4b4e      	ldr	r3, [pc, #312]	; (80063e8 <checkAktifCalisma+0x15f0>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d01f      	beq.n	80062f6 <checkAktifCalisma+0x14fe>
 80062b6:	4b4a      	ldr	r3, [pc, #296]	; (80063e0 <checkAktifCalisma+0x15e8>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01b      	beq.n	80062f6 <checkAktifCalisma+0x14fe>
 80062be:	4b43      	ldr	r3, [pc, #268]	; (80063cc <checkAktifCalisma+0x15d4>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	f083 0301 	eor.w	r3, r3, #1
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d014      	beq.n	80062f6 <checkAktifCalisma+0x14fe>
 80062cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062d0:	4840      	ldr	r0, [pc, #256]	; (80063d4 <checkAktifCalisma+0x15dc>)
 80062d2:	f003 f899 	bl	8009408 <HAL_GPIO_ReadPin>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10c      	bne.n	80062f6 <checkAktifCalisma+0x14fe>
 80062dc:	4b40      	ldr	r3, [pc, #256]	; (80063e0 <checkAktifCalisma+0x15e8>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d008      	beq.n	80062f6 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80062e4:	4b40      	ldr	r3, [pc, #256]	; (80063e8 <checkAktifCalisma+0x15f0>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80062ea:	4b3e      	ldr	r3, [pc, #248]	; (80063e4 <checkAktifCalisma+0x15ec>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80062f0:	2005      	movs	r0, #5
 80062f2:	f7fe fbaf 	bl	8004a54 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80062f6:	4b30      	ldr	r3, [pc, #192]	; (80063b8 <checkAktifCalisma+0x15c0>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d107      	bne.n	800630e <checkAktifCalisma+0x1516>
 80062fe:	4b2a      	ldr	r3, [pc, #168]	; (80063a8 <checkAktifCalisma+0x15b0>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d103      	bne.n	800630e <checkAktifCalisma+0x1516>
 8006306:	4b39      	ldr	r3, [pc, #228]	; (80063ec <checkAktifCalisma+0x15f4>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d016      	beq.n	800633c <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800630e:	4b38      	ldr	r3, [pc, #224]	; (80063f0 <checkAktifCalisma+0x15f8>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b38      	ldr	r3, [pc, #224]	; (80063f4 <checkAktifCalisma+0x15fc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	4a37      	ldr	r2, [pc, #220]	; (80063f8 <checkAktifCalisma+0x1600>)
 800631a:	7812      	ldrb	r2, [r2, #0]
 800631c:	4293      	cmp	r3, r2
 800631e:	d30d      	bcc.n	800633c <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006320:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <checkAktifCalisma+0x15c8>)
 8006322:	2201      	movs	r2, #1
 8006324:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006326:	2006      	movs	r0, #6
 8006328:	f7fa fc2a 	bl	8000b80 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 800632c:	2006      	movs	r0, #6
 800632e:	f7fa fbcd 	bl	8000acc <hata2EEPROM>
			  	convertAndSendData();
 8006332:	f001 fb25 	bl	8007980 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8006336:	4b31      	ldr	r3, [pc, #196]	; (80063fc <checkAktifCalisma+0x1604>)
 8006338:	2201      	movs	r2, #1
 800633a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800633c:	4b2f      	ldr	r3, [pc, #188]	; (80063fc <checkAktifCalisma+0x1604>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d013      	beq.n	800636c <checkAktifCalisma+0x1574>
 8006344:	2108      	movs	r1, #8
 8006346:	4823      	ldr	r0, [pc, #140]	; (80063d4 <checkAktifCalisma+0x15dc>)
 8006348:	f003 f85e 	bl	8009408 <HAL_GPIO_ReadPin>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00c      	beq.n	800636c <checkAktifCalisma+0x1574>
 8006352:	4b1e      	ldr	r3, [pc, #120]	; (80063cc <checkAktifCalisma+0x15d4>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	f083 0301 	eor.w	r3, r3, #1
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006360:	4b26      	ldr	r3, [pc, #152]	; (80063fc <checkAktifCalisma+0x1604>)
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006366:	2006      	movs	r0, #6
 8006368:	f7fe fb74 	bl	8004a54 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800636c:	4b24      	ldr	r3, [pc, #144]	; (8006400 <checkAktifCalisma+0x1608>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <checkAktifCalisma+0x1594>
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <checkAktifCalisma+0x15b0>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d107      	bne.n	800638c <checkAktifCalisma+0x1594>
 800637c:	4b21      	ldr	r3, [pc, #132]	; (8006404 <checkAktifCalisma+0x160c>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d103      	bne.n	800638c <checkAktifCalisma+0x1594>
 8006384:	4b19      	ldr	r3, [pc, #100]	; (80063ec <checkAktifCalisma+0x15f4>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d03f      	beq.n	800640c <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 800638c:	4b1e      	ldr	r3, [pc, #120]	; (8006408 <checkAktifCalisma+0x1610>)
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006392:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <checkAktifCalisma+0x15d8>)
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006398:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <checkAktifCalisma+0x15ec>)
 800639a:	2201      	movs	r2, #1
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	e03c      	b.n	800641a <checkAktifCalisma+0x1622>
 80063a0:	20000275 	.word	0x20000275
 80063a4:	2000027b 	.word	0x2000027b
 80063a8:	2000025c 	.word	0x2000025c
 80063ac:	20000285 	.word	0x20000285
 80063b0:	20000227 	.word	0x20000227
 80063b4:	2000022b 	.word	0x2000022b
 80063b8:	20000278 	.word	0x20000278
 80063bc:	40011000 	.word	0x40011000
 80063c0:	20000279 	.word	0x20000279
 80063c4:	20000282 	.word	0x20000282
 80063c8:	40010c00 	.word	0x40010c00
 80063cc:	20000272 	.word	0x20000272
 80063d0:	20000286 	.word	0x20000286
 80063d4:	40010800 	.word	0x40010800
 80063d8:	2000022c 	.word	0x2000022c
 80063dc:	20000283 	.word	0x20000283
 80063e0:	20000266 	.word	0x20000266
 80063e4:	20000287 	.word	0x20000287
 80063e8:	20000284 	.word	0x20000284
 80063ec:	2000025b 	.word	0x2000025b
 80063f0:	20000200 	.word	0x20000200
 80063f4:	20000214 	.word	0x20000214
 80063f8:	2000023c 	.word	0x2000023c
 80063fc:	20000273 	.word	0x20000273
 8006400:	20000259 	.word	0x20000259
 8006404:	2000025a 	.word	0x2000025a
 8006408:	2000027a 	.word	0x2000027a
		} else {
			makineCalisiyor=1;
 800640c:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <checkAktifCalisma+0x1690>)
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006412:	4b1e      	ldr	r3, [pc, #120]	; (800648c <checkAktifCalisma+0x1694>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <checkAktifCalisma+0x1698>)
 8006418:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800641a:	4b1e      	ldr	r3, [pc, #120]	; (8006494 <checkAktifCalisma+0x169c>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d02f      	beq.n	8006482 <checkAktifCalisma+0x168a>
 8006422:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <checkAktifCalisma+0x16a0>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f083 0301 	eor.w	r3, r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d028      	beq.n	8006482 <checkAktifCalisma+0x168a>
 8006430:	4b1a      	ldr	r3, [pc, #104]	; (800649c <checkAktifCalisma+0x16a4>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f083 0301 	eor.w	r3, r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d021      	beq.n	8006482 <checkAktifCalisma+0x168a>
 800643e:	4b18      	ldr	r3, [pc, #96]	; (80064a0 <checkAktifCalisma+0x16a8>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f083 0301 	eor.w	r3, r3, #1
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01a      	beq.n	8006482 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800644c:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <checkAktifCalisma+0x16ac>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f083 0301 	eor.w	r3, r3, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d013      	beq.n	8006482 <checkAktifCalisma+0x168a>
 800645a:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <checkAktifCalisma+0x16b0>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	f083 0301 	eor.w	r3, r3, #1
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00c      	beq.n	8006482 <checkAktifCalisma+0x168a>
 8006468:	4b10      	ldr	r3, [pc, #64]	; (80064ac <checkAktifCalisma+0x16b4>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	f083 0301 	eor.w	r3, r3, #1
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <checkAktifCalisma+0x168a>
			hataVar=0;
 8006476:	4b07      	ldr	r3, [pc, #28]	; (8006494 <checkAktifCalisma+0x169c>)
 8006478:	2200      	movs	r2, #0
 800647a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 800647c:	2007      	movs	r0, #7
 800647e:	f7fe fae9 	bl	8004a54 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	2000027a 	.word	0x2000027a
 800648c:	20000200 	.word	0x20000200
 8006490:	20000214 	.word	0x20000214
 8006494:	20000279 	.word	0x20000279
 8006498:	20000274 	.word	0x20000274
 800649c:	20000275 	.word	0x20000275
 80064a0:	20000282 	.word	0x20000282
 80064a4:	20000283 	.word	0x20000283
 80064a8:	20000284 	.word	0x20000284
 80064ac:	20000273 	.word	0x20000273

080064b0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80064b4:	4b8b      	ldr	r3, [pc, #556]	; (80066e4 <checkDemoModCalisma+0x234>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	f040 8229 	bne.w	8006910 <checkDemoModCalisma+0x460>
 80064be:	4b8a      	ldr	r3, [pc, #552]	; (80066e8 <checkDemoModCalisma+0x238>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8224 	beq.w	8006910 <checkDemoModCalisma+0x460>
 80064c8:	4b88      	ldr	r3, [pc, #544]	; (80066ec <checkDemoModCalisma+0x23c>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f040 821f 	bne.w	8006910 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80064d2:	2102      	movs	r1, #2
 80064d4:	4886      	ldr	r0, [pc, #536]	; (80066f0 <checkDemoModCalisma+0x240>)
 80064d6:	f002 ff97 	bl	8009408 <HAL_GPIO_ReadPin>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d11d      	bne.n	800651c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80064e0:	4b84      	ldr	r3, [pc, #528]	; (80066f4 <checkDemoModCalisma+0x244>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	f083 0301 	eor.w	r3, r3, #1
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d016      	beq.n	800651c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80064ee:	4b82      	ldr	r3, [pc, #520]	; (80066f8 <checkDemoModCalisma+0x248>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	f083 0301 	eor.w	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00f      	beq.n	800651c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80064fc:	4b7f      	ldr	r3, [pc, #508]	; (80066fc <checkDemoModCalisma+0x24c>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	f083 0301 	eor.w	r3, r3, #1
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d008      	beq.n	800651c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800650a:	2201      	movs	r2, #1
 800650c:	2104      	movs	r1, #4
 800650e:	487c      	ldr	r0, [pc, #496]	; (8006700 <checkDemoModCalisma+0x250>)
 8006510:	f002 ff91 	bl	8009436 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006514:	4b7b      	ldr	r3, [pc, #492]	; (8006704 <checkDemoModCalisma+0x254>)
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	e00e      	b.n	800653a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800651c:	2102      	movs	r1, #2
 800651e:	4874      	ldr	r0, [pc, #464]	; (80066f0 <checkDemoModCalisma+0x240>)
 8006520:	f002 ff72 	bl	8009408 <HAL_GPIO_ReadPin>
 8006524:	4603      	mov	r3, r0
 8006526:	2b01      	cmp	r3, #1
 8006528:	d107      	bne.n	800653a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800652a:	2200      	movs	r2, #0
 800652c:	2104      	movs	r1, #4
 800652e:	4874      	ldr	r0, [pc, #464]	; (8006700 <checkDemoModCalisma+0x250>)
 8006530:	f002 ff81 	bl	8009436 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006534:	4b73      	ldr	r3, [pc, #460]	; (8006704 <checkDemoModCalisma+0x254>)
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800653a:	4b72      	ldr	r3, [pc, #456]	; (8006704 <checkDemoModCalisma+0x254>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10b      	bne.n	800655a <checkDemoModCalisma+0xaa>
 8006542:	4b6d      	ldr	r3, [pc, #436]	; (80066f8 <checkDemoModCalisma+0x248>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d107      	bne.n	800655a <checkDemoModCalisma+0xaa>
 800654a:	4b6c      	ldr	r3, [pc, #432]	; (80066fc <checkDemoModCalisma+0x24c>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <checkDemoModCalisma+0xaa>
 8006552:	4b68      	ldr	r3, [pc, #416]	; (80066f4 <checkDemoModCalisma+0x244>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00c      	beq.n	8006574 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800655a:	2201      	movs	r2, #1
 800655c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006560:	4867      	ldr	r0, [pc, #412]	; (8006700 <checkDemoModCalisma+0x250>)
 8006562:	f002 ff68 	bl	8009436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006566:	2201      	movs	r2, #1
 8006568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800656c:	4864      	ldr	r0, [pc, #400]	; (8006700 <checkDemoModCalisma+0x250>)
 800656e:	f002 ff62 	bl	8009436 <HAL_GPIO_WritePin>
 8006572:	e00b      	b.n	800658c <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006574:	2200      	movs	r2, #0
 8006576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800657a:	4861      	ldr	r0, [pc, #388]	; (8006700 <checkDemoModCalisma+0x250>)
 800657c:	f002 ff5b 	bl	8009436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006580:	2200      	movs	r2, #0
 8006582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006586:	485e      	ldr	r0, [pc, #376]	; (8006700 <checkDemoModCalisma+0x250>)
 8006588:	f002 ff55 	bl	8009436 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800658c:	2102      	movs	r1, #2
 800658e:	4858      	ldr	r0, [pc, #352]	; (80066f0 <checkDemoModCalisma+0x240>)
 8006590:	f002 ff3a 	bl	8009408 <HAL_GPIO_ReadPin>
 8006594:	4603      	mov	r3, r0
 8006596:	2b01      	cmp	r3, #1
 8006598:	d10d      	bne.n	80065b6 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800659a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800659e:	4854      	ldr	r0, [pc, #336]	; (80066f0 <checkDemoModCalisma+0x240>)
 80065a0:	f002 ff32 	bl	8009408 <HAL_GPIO_ReadPin>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80065aa:	4b56      	ldr	r3, [pc, #344]	; (8006704 <checkDemoModCalisma+0x254>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	f083 0301 	eor.w	r3, r3, #1
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80065b6:	2102      	movs	r1, #2
 80065b8:	484d      	ldr	r0, [pc, #308]	; (80066f0 <checkDemoModCalisma+0x240>)
 80065ba:	f002 ff25 	bl	8009408 <HAL_GPIO_ReadPin>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d125      	bne.n	8006610 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80065c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065c8:	4849      	ldr	r0, [pc, #292]	; (80066f0 <checkDemoModCalisma+0x240>)
 80065ca:	f002 ff1d 	bl	8009408 <HAL_GPIO_ReadPin>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d11d      	bne.n	8006610 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80065d4:	4b4b      	ldr	r3, [pc, #300]	; (8006704 <checkDemoModCalisma+0x254>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f083 0301 	eor.w	r3, r3, #1
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d016      	beq.n	8006610 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80065e2:	4b44      	ldr	r3, [pc, #272]	; (80066f4 <checkDemoModCalisma+0x244>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	f083 0301 	eor.w	r3, r3, #1
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00f      	beq.n	8006610 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80065f0:	4b42      	ldr	r3, [pc, #264]	; (80066fc <checkDemoModCalisma+0x24c>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	f083 0301 	eor.w	r3, r3, #1
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d008      	beq.n	8006610 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80065fe:	2201      	movs	r2, #1
 8006600:	2120      	movs	r1, #32
 8006602:	483b      	ldr	r0, [pc, #236]	; (80066f0 <checkDemoModCalisma+0x240>)
 8006604:	f002 ff17 	bl	8009436 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8006608:	4b3b      	ldr	r3, [pc, #236]	; (80066f8 <checkDemoModCalisma+0x248>)
 800660a:	2201      	movs	r2, #1
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e007      	b.n	8006620 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006610:	2200      	movs	r2, #0
 8006612:	2120      	movs	r1, #32
 8006614:	4836      	ldr	r0, [pc, #216]	; (80066f0 <checkDemoModCalisma+0x240>)
 8006616:	f002 ff0e 	bl	8009436 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800661a:	4b37      	ldr	r3, [pc, #220]	; (80066f8 <checkDemoModCalisma+0x248>)
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006620:	2102      	movs	r1, #2
 8006622:	4833      	ldr	r0, [pc, #204]	; (80066f0 <checkDemoModCalisma+0x240>)
 8006624:	f002 fef0 	bl	8009408 <HAL_GPIO_ReadPin>
 8006628:	4603      	mov	r3, r0
 800662a:	2b01      	cmp	r3, #1
 800662c:	d125      	bne.n	800667a <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800662e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006632:	482f      	ldr	r0, [pc, #188]	; (80066f0 <checkDemoModCalisma+0x240>)
 8006634:	f002 fee8 	bl	8009408 <HAL_GPIO_ReadPin>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d11d      	bne.n	800667a <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800663e:	4b31      	ldr	r3, [pc, #196]	; (8006704 <checkDemoModCalisma+0x254>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	f083 0301 	eor.w	r3, r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d016      	beq.n	800667a <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800664c:	4b2a      	ldr	r3, [pc, #168]	; (80066f8 <checkDemoModCalisma+0x248>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f083 0301 	eor.w	r3, r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00f      	beq.n	800667a <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800665a:	4b26      	ldr	r3, [pc, #152]	; (80066f4 <checkDemoModCalisma+0x244>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f083 0301 	eor.w	r3, r3, #1
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d008      	beq.n	800667a <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006668:	2201      	movs	r2, #1
 800666a:	2110      	movs	r1, #16
 800666c:	4820      	ldr	r0, [pc, #128]	; (80066f0 <checkDemoModCalisma+0x240>)
 800666e:	f002 fee2 	bl	8009436 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006672:	4b22      	ldr	r3, [pc, #136]	; (80066fc <checkDemoModCalisma+0x24c>)
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	e007      	b.n	800668a <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800667a:	2200      	movs	r2, #0
 800667c:	2110      	movs	r1, #16
 800667e:	481c      	ldr	r0, [pc, #112]	; (80066f0 <checkDemoModCalisma+0x240>)
 8006680:	f002 fed9 	bl	8009436 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006684:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <checkDemoModCalisma+0x24c>)
 8006686:	2200      	movs	r2, #0
 8006688:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800668a:	2104      	movs	r1, #4
 800668c:	4818      	ldr	r0, [pc, #96]	; (80066f0 <checkDemoModCalisma+0x240>)
 800668e:	f002 febb 	bl	8009408 <HAL_GPIO_ReadPin>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d139      	bne.n	800670c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006698:	4b1a      	ldr	r3, [pc, #104]	; (8006704 <checkDemoModCalisma+0x254>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f083 0301 	eor.w	r3, r3, #1
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d032      	beq.n	800670c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80066a6:	4b15      	ldr	r3, [pc, #84]	; (80066fc <checkDemoModCalisma+0x24c>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	f083 0301 	eor.w	r3, r3, #1
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d02b      	beq.n	800670c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80066b4:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <checkDemoModCalisma+0x248>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	f083 0301 	eor.w	r3, r3, #1
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d024      	beq.n	800670c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80066c2:	2201      	movs	r2, #1
 80066c4:	2102      	movs	r1, #2
 80066c6:	480e      	ldr	r0, [pc, #56]	; (8006700 <checkDemoModCalisma+0x250>)
 80066c8:	f002 feb5 	bl	8009436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80066cc:	2201      	movs	r2, #1
 80066ce:	2101      	movs	r1, #1
 80066d0:	480b      	ldr	r0, [pc, #44]	; (8006700 <checkDemoModCalisma+0x250>)
 80066d2:	f002 feb0 	bl	8009436 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <checkDemoModCalisma+0x244>)
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80066dc:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <checkDemoModCalisma+0x258>)
 80066de:	2201      	movs	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	e027      	b.n	8006734 <checkDemoModCalisma+0x284>
 80066e4:	20000242 	.word	0x20000242
 80066e8:	20000276 	.word	0x20000276
 80066ec:	20000241 	.word	0x20000241
 80066f0:	40011000 	.word	0x40011000
 80066f4:	2000027d 	.word	0x2000027d
 80066f8:	2000027e 	.word	0x2000027e
 80066fc:	2000027f 	.word	0x2000027f
 8006700:	40010c00 	.word	0x40010c00
 8006704:	2000027c 	.word	0x2000027c
 8006708:	20000262 	.word	0x20000262
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800670c:	2104      	movs	r1, #4
 800670e:	48a0      	ldr	r0, [pc, #640]	; (8006990 <checkDemoModCalisma+0x4e0>)
 8006710:	f002 fe7a 	bl	8009408 <HAL_GPIO_ReadPin>
 8006714:	4603      	mov	r3, r0
 8006716:	2b01      	cmp	r3, #1
 8006718:	d10c      	bne.n	8006734 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800671a:	2200      	movs	r2, #0
 800671c:	2102      	movs	r1, #2
 800671e:	489d      	ldr	r0, [pc, #628]	; (8006994 <checkDemoModCalisma+0x4e4>)
 8006720:	f002 fe89 	bl	8009436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006724:	2200      	movs	r2, #0
 8006726:	2101      	movs	r1, #1
 8006728:	489a      	ldr	r0, [pc, #616]	; (8006994 <checkDemoModCalisma+0x4e4>)
 800672a:	f002 fe84 	bl	8009436 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800672e:	4b9a      	ldr	r3, [pc, #616]	; (8006998 <checkDemoModCalisma+0x4e8>)
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006734:	2104      	movs	r1, #4
 8006736:	4896      	ldr	r0, [pc, #600]	; (8006990 <checkDemoModCalisma+0x4e0>)
 8006738:	f002 fe66 	bl	8009408 <HAL_GPIO_ReadPin>
 800673c:	4603      	mov	r3, r0
 800673e:	2b01      	cmp	r3, #1
 8006740:	d10d      	bne.n	800675e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006742:	2201      	movs	r2, #1
 8006744:	2180      	movs	r1, #128	; 0x80
 8006746:	4895      	ldr	r0, [pc, #596]	; (800699c <checkDemoModCalisma+0x4ec>)
 8006748:	f002 fe75 	bl	8009436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800674c:	2201      	movs	r2, #1
 800674e:	2120      	movs	r1, #32
 8006750:	4892      	ldr	r0, [pc, #584]	; (800699c <checkDemoModCalisma+0x4ec>)
 8006752:	f002 fe70 	bl	8009436 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006756:	4b92      	ldr	r3, [pc, #584]	; (80069a0 <checkDemoModCalisma+0x4f0>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a92      	ldr	r2, [pc, #584]	; (80069a4 <checkDemoModCalisma+0x4f4>)
 800675c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800675e:	4b90      	ldr	r3, [pc, #576]	; (80069a0 <checkDemoModCalisma+0x4f0>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b90      	ldr	r3, [pc, #576]	; (80069a4 <checkDemoModCalisma+0x4f4>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b04      	cmp	r3, #4
 800676a:	d909      	bls.n	8006780 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800676c:	2200      	movs	r2, #0
 800676e:	2180      	movs	r1, #128	; 0x80
 8006770:	488a      	ldr	r0, [pc, #552]	; (800699c <checkDemoModCalisma+0x4ec>)
 8006772:	f002 fe60 	bl	8009436 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006776:	2200      	movs	r2, #0
 8006778:	2120      	movs	r1, #32
 800677a:	4888      	ldr	r0, [pc, #544]	; (800699c <checkDemoModCalisma+0x4ec>)
 800677c:	f002 fe5b 	bl	8009436 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006780:	2102      	movs	r1, #2
 8006782:	4883      	ldr	r0, [pc, #524]	; (8006990 <checkDemoModCalisma+0x4e0>)
 8006784:	f002 fe40 	bl	8009408 <HAL_GPIO_ReadPin>
 8006788:	4603      	mov	r3, r0
 800678a:	2b01      	cmp	r3, #1
 800678c:	d108      	bne.n	80067a0 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800678e:	2201      	movs	r2, #1
 8006790:	2140      	movs	r1, #64	; 0x40
 8006792:	4882      	ldr	r0, [pc, #520]	; (800699c <checkDemoModCalisma+0x4ec>)
 8006794:	f002 fe4f 	bl	8009436 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006798:	4b81      	ldr	r3, [pc, #516]	; (80069a0 <checkDemoModCalisma+0x4f0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a81      	ldr	r2, [pc, #516]	; (80069a4 <checkDemoModCalisma+0x4f4>)
 800679e:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80067a0:	4b7f      	ldr	r3, [pc, #508]	; (80069a0 <checkDemoModCalisma+0x4f0>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	4b7f      	ldr	r3, [pc, #508]	; (80069a4 <checkDemoModCalisma+0x4f4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d904      	bls.n	80067b8 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80067ae:	2200      	movs	r2, #0
 80067b0:	2140      	movs	r1, #64	; 0x40
 80067b2:	487a      	ldr	r0, [pc, #488]	; (800699c <checkDemoModCalisma+0x4ec>)
 80067b4:	f002 fe3f 	bl	8009436 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80067b8:	4b7b      	ldr	r3, [pc, #492]	; (80069a8 <checkDemoModCalisma+0x4f8>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d058      	beq.n	8006872 <checkDemoModCalisma+0x3c2>
 80067c0:	4b7a      	ldr	r3, [pc, #488]	; (80069ac <checkDemoModCalisma+0x4fc>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d054      	beq.n	8006872 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80067c8:	4b79      	ldr	r3, [pc, #484]	; (80069b0 <checkDemoModCalisma+0x500>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	3301      	adds	r3, #1
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	4b77      	ldr	r3, [pc, #476]	; (80069b0 <checkDemoModCalisma+0x500>)
 80067d2:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80067d4:	4b76      	ldr	r3, [pc, #472]	; (80069b0 <checkDemoModCalisma+0x500>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b09      	cmp	r3, #9
 80067da:	d908      	bls.n	80067ee <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80067dc:	4b74      	ldr	r3, [pc, #464]	; (80069b0 <checkDemoModCalisma+0x500>)
 80067de:	2200      	movs	r2, #0
 80067e0:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80067e2:	4b74      	ldr	r3, [pc, #464]	; (80069b4 <checkDemoModCalisma+0x504>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	4b72      	ldr	r3, [pc, #456]	; (80069b4 <checkDemoModCalisma+0x504>)
 80067ec:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80067ee:	4b71      	ldr	r3, [pc, #452]	; (80069b4 <checkDemoModCalisma+0x504>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b09      	cmp	r3, #9
 80067f4:	d908      	bls.n	8006808 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80067f6:	4b6f      	ldr	r3, [pc, #444]	; (80069b4 <checkDemoModCalisma+0x504>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80067fc:	4b6e      	ldr	r3, [pc, #440]	; (80069b8 <checkDemoModCalisma+0x508>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	b2da      	uxtb	r2, r3
 8006804:	4b6c      	ldr	r3, [pc, #432]	; (80069b8 <checkDemoModCalisma+0x508>)
 8006806:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8006808:	4b6b      	ldr	r3, [pc, #428]	; (80069b8 <checkDemoModCalisma+0x508>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b09      	cmp	r3, #9
 800680e:	d908      	bls.n	8006822 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006810:	4b69      	ldr	r3, [pc, #420]	; (80069b8 <checkDemoModCalisma+0x508>)
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8006816:	4b69      	ldr	r3, [pc, #420]	; (80069bc <checkDemoModCalisma+0x50c>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	3301      	adds	r3, #1
 800681c:	b2da      	uxtb	r2, r3
 800681e:	4b67      	ldr	r3, [pc, #412]	; (80069bc <checkDemoModCalisma+0x50c>)
 8006820:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006822:	4b66      	ldr	r3, [pc, #408]	; (80069bc <checkDemoModCalisma+0x50c>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b09      	cmp	r3, #9
 8006828:	d908      	bls.n	800683c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800682a:	4b64      	ldr	r3, [pc, #400]	; (80069bc <checkDemoModCalisma+0x50c>)
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006830:	4b63      	ldr	r3, [pc, #396]	; (80069c0 <checkDemoModCalisma+0x510>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	b2da      	uxtb	r2, r3
 8006838:	4b61      	ldr	r3, [pc, #388]	; (80069c0 <checkDemoModCalisma+0x510>)
 800683a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 800683c:	4b60      	ldr	r3, [pc, #384]	; (80069c0 <checkDemoModCalisma+0x510>)
 800683e:	781a      	ldrb	r2, [r3, #0]
 8006840:	4b60      	ldr	r3, [pc, #384]	; (80069c4 <checkDemoModCalisma+0x514>)
 8006842:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006846:	4b5d      	ldr	r3, [pc, #372]	; (80069bc <checkDemoModCalisma+0x50c>)
 8006848:	781a      	ldrb	r2, [r3, #0]
 800684a:	4b5e      	ldr	r3, [pc, #376]	; (80069c4 <checkDemoModCalisma+0x514>)
 800684c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800684e:	4b5a      	ldr	r3, [pc, #360]	; (80069b8 <checkDemoModCalisma+0x508>)
 8006850:	781a      	ldrb	r2, [r3, #0]
 8006852:	4b5c      	ldr	r3, [pc, #368]	; (80069c4 <checkDemoModCalisma+0x514>)
 8006854:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006856:	4b57      	ldr	r3, [pc, #348]	; (80069b4 <checkDemoModCalisma+0x504>)
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	4b5a      	ldr	r3, [pc, #360]	; (80069c4 <checkDemoModCalisma+0x514>)
 800685c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800685e:	4b54      	ldr	r3, [pc, #336]	; (80069b0 <checkDemoModCalisma+0x500>)
 8006860:	781a      	ldrb	r2, [r3, #0]
 8006862:	4b58      	ldr	r3, [pc, #352]	; (80069c4 <checkDemoModCalisma+0x514>)
 8006864:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006866:	4b58      	ldr	r3, [pc, #352]	; (80069c8 <checkDemoModCalisma+0x518>)
 8006868:	2201      	movs	r2, #1
 800686a:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 800686c:	4b4f      	ldr	r3, [pc, #316]	; (80069ac <checkDemoModCalisma+0x4fc>)
 800686e:	2200      	movs	r2, #0
 8006870:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006872:	4b56      	ldr	r3, [pc, #344]	; (80069cc <checkDemoModCalisma+0x51c>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 8087 	bne.w	800698a <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 800687c:	4a54      	ldr	r2, [pc, #336]	; (80069d0 <checkDemoModCalisma+0x520>)
 800687e:	2101      	movs	r1, #1
 8006880:	2002      	movs	r0, #2
 8006882:	f001 fa9b 	bl	8007dbc <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006886:	4a53      	ldr	r2, [pc, #332]	; (80069d4 <checkDemoModCalisma+0x524>)
 8006888:	2101      	movs	r1, #1
 800688a:	2001      	movs	r0, #1
 800688c:	f001 fa96 	bl	8007dbc <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006890:	4b4b      	ldr	r3, [pc, #300]	; (80069c0 <checkDemoModCalisma+0x510>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	220a      	movs	r2, #10
 8006896:	4950      	ldr	r1, [pc, #320]	; (80069d8 <checkDemoModCalisma+0x528>)
 8006898:	4618      	mov	r0, r3
 800689a:	f005 fde1 	bl	800c460 <itoa>
			lcd_print(2,12,snum);
 800689e:	4a4e      	ldr	r2, [pc, #312]	; (80069d8 <checkDemoModCalisma+0x528>)
 80068a0:	210c      	movs	r1, #12
 80068a2:	2002      	movs	r0, #2
 80068a4:	f001 fa8a 	bl	8007dbc <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80068a8:	4b44      	ldr	r3, [pc, #272]	; (80069bc <checkDemoModCalisma+0x50c>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	220a      	movs	r2, #10
 80068ae:	494a      	ldr	r1, [pc, #296]	; (80069d8 <checkDemoModCalisma+0x528>)
 80068b0:	4618      	mov	r0, r3
 80068b2:	f005 fdd5 	bl	800c460 <itoa>
			lcd_print(2,13,snum);
 80068b6:	4a48      	ldr	r2, [pc, #288]	; (80069d8 <checkDemoModCalisma+0x528>)
 80068b8:	210d      	movs	r1, #13
 80068ba:	2002      	movs	r0, #2
 80068bc:	f001 fa7e 	bl	8007dbc <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80068c0:	4b3d      	ldr	r3, [pc, #244]	; (80069b8 <checkDemoModCalisma+0x508>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	220a      	movs	r2, #10
 80068c6:	4944      	ldr	r1, [pc, #272]	; (80069d8 <checkDemoModCalisma+0x528>)
 80068c8:	4618      	mov	r0, r3
 80068ca:	f005 fdc9 	bl	800c460 <itoa>
			lcd_print(2,14,snum);
 80068ce:	4a42      	ldr	r2, [pc, #264]	; (80069d8 <checkDemoModCalisma+0x528>)
 80068d0:	210e      	movs	r1, #14
 80068d2:	2002      	movs	r0, #2
 80068d4:	f001 fa72 	bl	8007dbc <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80068d8:	4b36      	ldr	r3, [pc, #216]	; (80069b4 <checkDemoModCalisma+0x504>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	220a      	movs	r2, #10
 80068de:	493e      	ldr	r1, [pc, #248]	; (80069d8 <checkDemoModCalisma+0x528>)
 80068e0:	4618      	mov	r0, r3
 80068e2:	f005 fdbd 	bl	800c460 <itoa>
			lcd_print(2,15,snum);
 80068e6:	4a3c      	ldr	r2, [pc, #240]	; (80069d8 <checkDemoModCalisma+0x528>)
 80068e8:	210f      	movs	r1, #15
 80068ea:	2002      	movs	r0, #2
 80068ec:	f001 fa66 	bl	8007dbc <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80068f0:	4b2f      	ldr	r3, [pc, #188]	; (80069b0 <checkDemoModCalisma+0x500>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	220a      	movs	r2, #10
 80068f6:	4938      	ldr	r1, [pc, #224]	; (80069d8 <checkDemoModCalisma+0x528>)
 80068f8:	4618      	mov	r0, r3
 80068fa:	f005 fdb1 	bl	800c460 <itoa>
			lcd_print(2,16,snum);
 80068fe:	4a36      	ldr	r2, [pc, #216]	; (80069d8 <checkDemoModCalisma+0x528>)
 8006900:	2110      	movs	r1, #16
 8006902:	2002      	movs	r0, #2
 8006904:	f001 fa5a 	bl	8007dbc <lcd_print>
			mesajYazildi=1;
 8006908:	4b34      	ldr	r3, [pc, #208]	; (80069dc <checkDemoModCalisma+0x52c>)
 800690a:	2201      	movs	r2, #1
 800690c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800690e:	e03c      	b.n	800698a <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006910:	4b33      	ldr	r3, [pc, #204]	; (80069e0 <checkDemoModCalisma+0x530>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d003      	beq.n	8006920 <checkDemoModCalisma+0x470>
 8006918:	4b2c      	ldr	r3, [pc, #176]	; (80069cc <checkDemoModCalisma+0x51c>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d134      	bne.n	800698a <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006920:	2200      	movs	r2, #0
 8006922:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006926:	481b      	ldr	r0, [pc, #108]	; (8006994 <checkDemoModCalisma+0x4e4>)
 8006928:	f002 fd85 	bl	8009436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800692c:	2200      	movs	r2, #0
 800692e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006932:	4818      	ldr	r0, [pc, #96]	; (8006994 <checkDemoModCalisma+0x4e4>)
 8006934:	f002 fd7f 	bl	8009436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006938:	2200      	movs	r2, #0
 800693a:	2104      	movs	r1, #4
 800693c:	4815      	ldr	r0, [pc, #84]	; (8006994 <checkDemoModCalisma+0x4e4>)
 800693e:	f002 fd7a 	bl	8009436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006942:	2200      	movs	r2, #0
 8006944:	2102      	movs	r1, #2
 8006946:	4813      	ldr	r0, [pc, #76]	; (8006994 <checkDemoModCalisma+0x4e4>)
 8006948:	f002 fd75 	bl	8009436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800694c:	2200      	movs	r2, #0
 800694e:	2101      	movs	r1, #1
 8006950:	4810      	ldr	r0, [pc, #64]	; (8006994 <checkDemoModCalisma+0x4e4>)
 8006952:	f002 fd70 	bl	8009436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006956:	2200      	movs	r2, #0
 8006958:	2120      	movs	r1, #32
 800695a:	480d      	ldr	r0, [pc, #52]	; (8006990 <checkDemoModCalisma+0x4e0>)
 800695c:	f002 fd6b 	bl	8009436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006960:	2200      	movs	r2, #0
 8006962:	2110      	movs	r1, #16
 8006964:	480a      	ldr	r0, [pc, #40]	; (8006990 <checkDemoModCalisma+0x4e0>)
 8006966:	f002 fd66 	bl	8009436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800696a:	2200      	movs	r2, #0
 800696c:	2180      	movs	r1, #128	; 0x80
 800696e:	480b      	ldr	r0, [pc, #44]	; (800699c <checkDemoModCalisma+0x4ec>)
 8006970:	f002 fd61 	bl	8009436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006974:	2200      	movs	r2, #0
 8006976:	2140      	movs	r1, #64	; 0x40
 8006978:	4808      	ldr	r0, [pc, #32]	; (800699c <checkDemoModCalisma+0x4ec>)
 800697a:	f002 fd5c 	bl	8009436 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800697e:	2200      	movs	r2, #0
 8006980:	2120      	movs	r1, #32
 8006982:	4806      	ldr	r0, [pc, #24]	; (800699c <checkDemoModCalisma+0x4ec>)
 8006984:	f002 fd57 	bl	8009436 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006988:	e7ff      	b.n	800698a <checkDemoModCalisma+0x4da>
 800698a:	bf00      	nop
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40011000 	.word	0x40011000
 8006994:	40010c00 	.word	0x40010c00
 8006998:	2000027d 	.word	0x2000027d
 800699c:	40010800 	.word	0x40010800
 80069a0:	20000200 	.word	0x20000200
 80069a4:	20000210 	.word	0x20000210
 80069a8:	2000027c 	.word	0x2000027c
 80069ac:	20000262 	.word	0x20000262
 80069b0:	20000221 	.word	0x20000221
 80069b4:	20000222 	.word	0x20000222
 80069b8:	20000008 	.word	0x20000008
 80069bc:	20000009 	.word	0x20000009
 80069c0:	20000223 	.word	0x20000223
 80069c4:	20000128 	.word	0x20000128
 80069c8:	20000250 	.word	0x20000250
 80069cc:	20000241 	.word	0x20000241
 80069d0:	0800dc20 	.word	0x0800dc20
 80069d4:	0800dc2c 	.word	0x0800dc2c
 80069d8:	20000198 	.word	0x20000198
 80069dc:	20000258 	.word	0x20000258
 80069e0:	20000242 	.word	0x20000242

080069e4 <mainLoop>:

void mainLoop() {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80069ea:	f7fe f923 	bl	8004c34 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80069ee:	2101      	movs	r1, #1
 80069f0:	48ac      	ldr	r0, [pc, #688]	; (8006ca4 <mainLoop+0x2c0>)
 80069f2:	f002 fd09 	bl	8009408 <HAL_GPIO_ReadPin>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d136      	bne.n	8006a6a <mainLoop+0x86>
 80069fc:	2108      	movs	r1, #8
 80069fe:	48aa      	ldr	r0, [pc, #680]	; (8006ca8 <mainLoop+0x2c4>)
 8006a00:	f002 fd02 	bl	8009408 <HAL_GPIO_ReadPin>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d12f      	bne.n	8006a6a <mainLoop+0x86>
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	48a5      	ldr	r0, [pc, #660]	; (8006ca4 <mainLoop+0x2c0>)
 8006a0e:	f002 fcfb 	bl	8009408 <HAL_GPIO_ReadPin>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d128      	bne.n	8006a6a <mainLoop+0x86>
 8006a18:	2104      	movs	r1, #4
 8006a1a:	48a2      	ldr	r0, [pc, #648]	; (8006ca4 <mainLoop+0x2c0>)
 8006a1c:	f002 fcf4 	bl	8009408 <HAL_GPIO_ReadPin>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d121      	bne.n	8006a6a <mainLoop+0x86>
 8006a26:	2108      	movs	r1, #8
 8006a28:	489e      	ldr	r0, [pc, #632]	; (8006ca4 <mainLoop+0x2c0>)
 8006a2a:	f002 fced 	bl	8009408 <HAL_GPIO_ReadPin>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11a      	bne.n	8006a6a <mainLoop+0x86>
 8006a34:	2180      	movs	r1, #128	; 0x80
 8006a36:	489c      	ldr	r0, [pc, #624]	; (8006ca8 <mainLoop+0x2c4>)
 8006a38:	f002 fce6 	bl	8009408 <HAL_GPIO_ReadPin>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d113      	bne.n	8006a6a <mainLoop+0x86>
 8006a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a46:	4898      	ldr	r0, [pc, #608]	; (8006ca8 <mainLoop+0x2c4>)
 8006a48:	f002 fcde 	bl	8009408 <HAL_GPIO_ReadPin>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d10b      	bne.n	8006a6a <mainLoop+0x86>
 8006a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a56:	4894      	ldr	r0, [pc, #592]	; (8006ca8 <mainLoop+0x2c4>)
 8006a58:	f002 fcd6 	bl	8009408 <HAL_GPIO_ReadPin>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d103      	bne.n	8006a6a <mainLoop+0x86>
			butonKontrol=0;
 8006a62:	4b92      	ldr	r3, [pc, #584]	; (8006cac <mainLoop+0x2c8>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	e003      	b.n	8006a72 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006a6a:	4b91      	ldr	r3, [pc, #580]	; (8006cb0 <mainLoop+0x2cc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a91      	ldr	r2, [pc, #580]	; (8006cb4 <mainLoop+0x2d0>)
 8006a70:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006a72:	4b91      	ldr	r3, [pc, #580]	; (8006cb8 <mainLoop+0x2d4>)
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d03a      	beq.n	8006af0 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006a7a:	bf00      	nop
 8006a7c:	488f      	ldr	r0, [pc, #572]	; (8006cbc <mainLoop+0x2d8>)
 8006a7e:	f003 faec 	bl	800a05a <HAL_I2C_GetError>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d0f9      	beq.n	8006a7c <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006a88:	bf00      	nop
 8006a8a:	488c      	ldr	r0, [pc, #560]	; (8006cbc <mainLoop+0x2d8>)
 8006a8c:	f003 fad8 	bl	800a040 <HAL_I2C_GetState>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d1f9      	bne.n	8006a8a <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006a96:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a9a:	9302      	str	r3, [sp, #8]
 8006a9c:	236e      	movs	r3, #110	; 0x6e
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	4b87      	ldr	r3, [pc, #540]	; (8006cc0 <mainLoop+0x2dc>)
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	236e      	movs	r3, #110	; 0x6e
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	21a0      	movs	r1, #160	; 0xa0
 8006aaa:	4884      	ldr	r0, [pc, #528]	; (8006cbc <mainLoop+0x2d8>)
 8006aac:	f002 ff66 	bl	800997c <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ab4:	f001 fed8 	bl	8008868 <HAL_Delay>

		  hafizaYaz=0;
 8006ab8:	4b7f      	ldr	r3, [pc, #508]	; (8006cb8 <mainLoop+0x2d4>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006abe:	4b81      	ldr	r3, [pc, #516]	; (8006cc4 <mainLoop+0x2e0>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d105      	bne.n	8006ad2 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006ac6:	4a80      	ldr	r2, [pc, #512]	; (8006cc8 <mainLoop+0x2e4>)
 8006ac8:	2101      	movs	r1, #1
 8006aca:	2002      	movs	r0, #2
 8006acc:	f001 f976 	bl	8007dbc <lcd_print>
 8006ad0:	e008      	b.n	8006ae4 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8006ad2:	4b7c      	ldr	r3, [pc, #496]	; (8006cc4 <mainLoop+0x2e0>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d104      	bne.n	8006ae4 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006ada:	4a7c      	ldr	r2, [pc, #496]	; (8006ccc <mainLoop+0x2e8>)
 8006adc:	2101      	movs	r1, #1
 8006ade:	2002      	movs	r0, #2
 8006ae0:	f001 f96c 	bl	8007dbc <lcd_print>
		  }

		  HAL_Delay(1000);
 8006ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ae8:	f001 febe 	bl	8008868 <HAL_Delay>
		  lcd_clear();
 8006aec:	f001 f992 	bl	8007e14 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006af0:	4b77      	ldr	r3, [pc, #476]	; (8006cd0 <mainLoop+0x2ec>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	f083 0301 	eor.w	r3, r3, #1
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d06e      	beq.n	8006bdc <mainLoop+0x1f8>
 8006afe:	486f      	ldr	r0, [pc, #444]	; (8006cbc <mainLoop+0x2d8>)
 8006b00:	f003 fa9e 	bl	800a040 <HAL_I2C_GetState>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d168      	bne.n	8006bdc <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8006b0a:	4b72      	ldr	r3, [pc, #456]	; (8006cd4 <mainLoop+0x2f0>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	f083 0301 	eor.w	r3, r3, #1
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d044      	beq.n	8006ba2 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006b18:	4a6f      	ldr	r2, [pc, #444]	; (8006cd8 <mainLoop+0x2f4>)
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	f001 f94d 	bl	8007dbc <lcd_print>
			  if(dilSecim==0) {
 8006b22:	4b68      	ldr	r3, [pc, #416]	; (8006cc4 <mainLoop+0x2e0>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d105      	bne.n	8006b36 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8006b2a:	4a6c      	ldr	r2, [pc, #432]	; (8006cdc <mainLoop+0x2f8>)
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	2002      	movs	r0, #2
 8006b30:	f001 f944 	bl	8007dbc <lcd_print>
 8006b34:	e008      	b.n	8006b48 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8006b36:	4b63      	ldr	r3, [pc, #396]	; (8006cc4 <mainLoop+0x2e0>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d104      	bne.n	8006b48 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006b3e:	4a68      	ldr	r2, [pc, #416]	; (8006ce0 <mainLoop+0x2fc>)
 8006b40:	2101      	movs	r1, #1
 8006b42:	2002      	movs	r0, #2
 8006b44:	f001 f93a 	bl	8007dbc <lcd_print>
			  }
			  HAL_Delay(1000);
 8006b48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b4c:	f001 fe8c 	bl	8008868 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006b50:	bf00      	nop
 8006b52:	485a      	ldr	r0, [pc, #360]	; (8006cbc <mainLoop+0x2d8>)
 8006b54:	f003 fa81 	bl	800a05a <HAL_I2C_GetError>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d0f9      	beq.n	8006b52 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b5e:	e003      	b.n	8006b68 <mainLoop+0x184>
				  HAL_Delay(1000);
 8006b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b64:	f001 fe80 	bl	8008868 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006b68:	4854      	ldr	r0, [pc, #336]	; (8006cbc <mainLoop+0x2d8>)
 8006b6a:	f003 fa69 	bl	800a040 <HAL_I2C_GetState>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	d1f5      	bne.n	8006b60 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006b74:	4b53      	ldr	r3, [pc, #332]	; (8006cc4 <mainLoop+0x2e0>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d105      	bne.n	8006b88 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006b7c:	4a59      	ldr	r2, [pc, #356]	; (8006ce4 <mainLoop+0x300>)
 8006b7e:	2101      	movs	r1, #1
 8006b80:	2002      	movs	r0, #2
 8006b82:	f001 f91b 	bl	8007dbc <lcd_print>
 8006b86:	e008      	b.n	8006b9a <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006b88:	4b4e      	ldr	r3, [pc, #312]	; (8006cc4 <mainLoop+0x2e0>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d104      	bne.n	8006b9a <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006b90:	4a55      	ldr	r2, [pc, #340]	; (8006ce8 <mainLoop+0x304>)
 8006b92:	2101      	movs	r1, #1
 8006b94:	2002      	movs	r0, #2
 8006b96:	f001 f911 	bl	8007dbc <lcd_print>
			  }

			  ilkOkuma=1;
 8006b9a:	4b4e      	ldr	r3, [pc, #312]	; (8006cd4 <mainLoop+0x2f0>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	e014      	b.n	8006bcc <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006ba2:	4b48      	ldr	r3, [pc, #288]	; (8006cc4 <mainLoop+0x2e0>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006baa:	4a50      	ldr	r2, [pc, #320]	; (8006cec <mainLoop+0x308>)
 8006bac:	2101      	movs	r1, #1
 8006bae:	2002      	movs	r0, #2
 8006bb0:	f001 f904 	bl	8007dbc <lcd_print>
 8006bb4:	e008      	b.n	8006bc8 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006bb6:	4b43      	ldr	r3, [pc, #268]	; (8006cc4 <mainLoop+0x2e0>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d104      	bne.n	8006bc8 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006bbe:	4a4c      	ldr	r2, [pc, #304]	; (8006cf0 <mainLoop+0x30c>)
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	2002      	movs	r0, #2
 8006bc4:	f001 f8fa 	bl	8007dbc <lcd_print>
			  }
			  lcd_clear();
 8006bc8:	f001 f924 	bl	8007e14 <lcd_clear>
		  }

		  lcd_clear();
 8006bcc:	f001 f922 	bl	8007e14 <lcd_clear>

		  eepromKontrol(1);
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	f7f9 fb2f 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006bd6:	4b3e      	ldr	r3, [pc, #248]	; (8006cd0 <mainLoop+0x2ec>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006bdc:	4b45      	ldr	r3, [pc, #276]	; (8006cf4 <mainLoop+0x310>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d11c      	bne.n	8006c1e <mainLoop+0x23a>
 8006be4:	4b44      	ldr	r3, [pc, #272]	; (8006cf8 <mainLoop+0x314>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	f083 0301 	eor.w	r3, r3, #1
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d015      	beq.n	8006c1e <mainLoop+0x23a>
 8006bf2:	4b42      	ldr	r3, [pc, #264]	; (8006cfc <mainLoop+0x318>)
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d111      	bne.n	8006c1e <mainLoop+0x23a>
			lcd_clear();
 8006bfa:	f001 f90b 	bl	8007e14 <lcd_clear>
			HAL_Delay(10);
 8006bfe:	200a      	movs	r0, #10
 8006c00:	f001 fe32 	bl	8008868 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006c04:	4a3e      	ldr	r2, [pc, #248]	; (8006d00 <mainLoop+0x31c>)
 8006c06:	2101      	movs	r1, #1
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f001 f8d7 	bl	8007dbc <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006c0e:	4a3d      	ldr	r2, [pc, #244]	; (8006d04 <mainLoop+0x320>)
 8006c10:	2101      	movs	r1, #1
 8006c12:	2002      	movs	r0, #2
 8006c14:	f001 f8d2 	bl	8007dbc <lcd_print>
			mesajYazildi=1;
 8006c18:	4b37      	ldr	r3, [pc, #220]	; (8006cf8 <mainLoop+0x314>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006c1e:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <mainLoop+0x310>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d112      	bne.n	8006c4c <mainLoop+0x268>
 8006c26:	2102      	movs	r1, #2
 8006c28:	481e      	ldr	r0, [pc, #120]	; (8006ca4 <mainLoop+0x2c0>)
 8006c2a:	f002 fbed 	bl	8009408 <HAL_GPIO_ReadPin>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d10b      	bne.n	8006c4c <mainLoop+0x268>
 8006c34:	2104      	movs	r1, #4
 8006c36:	481b      	ldr	r0, [pc, #108]	; (8006ca4 <mainLoop+0x2c0>)
 8006c38:	f002 fbe6 	bl	8009408 <HAL_GPIO_ReadPin>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d104      	bne.n	8006c4c <mainLoop+0x268>
			menuGiris=1;
 8006c42:	4b2c      	ldr	r3, [pc, #176]	; (8006cf4 <mainLoop+0x310>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006c48:	f001 f8e4 	bl	8007e14 <lcd_clear>
		}

		if(menuGiris==1) {
 8006c4c:	4b29      	ldr	r3, [pc, #164]	; (8006cf4 <mainLoop+0x310>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <mainLoop+0x274>
			menu();
 8006c54:	f7fa fbac 	bl	80013b0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c5c:	4812      	ldr	r0, [pc, #72]	; (8006ca8 <mainLoop+0x2c4>)
 8006c5e:	f002 fc02 	bl	8009466 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c66:	4828      	ldr	r0, [pc, #160]	; (8006d08 <mainLoop+0x324>)
 8006c68:	f002 fbce 	bl	8009408 <HAL_GPIO_ReadPin>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <mainLoop+0x2a4>
 8006c72:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <mainLoop+0x328>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f083 0301 	eor.w	r3, r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <mainLoop+0x2a4>
			stopVar=1;
 8006c80:	4b23      	ldr	r3, [pc, #140]	; (8006d10 <mainLoop+0x32c>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e002      	b.n	8006c8e <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8006c88:	4b21      	ldr	r3, [pc, #132]	; (8006d10 <mainLoop+0x32c>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006c8e:	f7fd ffe7 	bl	8004c60 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006c92:	f7fe f819 	bl	8004cc8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006c96:	f7fe f85d 	bl	8004d54 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006c9a:	f7fe f8ad 	bl	8004df8 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006c9e:	f7ff fc07 	bl	80064b0 <checkDemoModCalisma>
		checkLCDBacklight();
 8006ca2:	e6a2      	b.n	80069ea <mainLoop+0x6>
 8006ca4:	40010800 	.word	0x40010800
 8006ca8:	40011000 	.word	0x40011000
 8006cac:	20000253 	.word	0x20000253
 8006cb0:	20000200 	.word	0x20000200
 8006cb4:	2000021c 	.word	0x2000021c
 8006cb8:	20000250 	.word	0x20000250
 8006cbc:	200003ac 	.word	0x200003ac
 8006cc0:	20000128 	.word	0x20000128
 8006cc4:	20000245 	.word	0x20000245
 8006cc8:	0800dc40 	.word	0x0800dc40
 8006ccc:	0800dc54 	.word	0x0800dc54
 8006cd0:	20000251 	.word	0x20000251
 8006cd4:	20000252 	.word	0x20000252
 8006cd8:	0800dc68 	.word	0x0800dc68
 8006cdc:	0800dc7c 	.word	0x0800dc7c
 8006ce0:	0800dc90 	.word	0x0800dc90
 8006ce4:	0800dca4 	.word	0x0800dca4
 8006ce8:	0800dcb8 	.word	0x0800dcb8
 8006cec:	0800dccc 	.word	0x0800dccc
 8006cf0:	0800dce0 	.word	0x0800dce0
 8006cf4:	20000241 	.word	0x20000241
 8006cf8:	20000258 	.word	0x20000258
 8006cfc:	20000242 	.word	0x20000242
 8006d00:	0800dcf4 	.word	0x0800dcf4
 8006d04:	0800dd08 	.word	0x0800dd08
 8006d08:	40010c00 	.word	0x40010c00
 8006d0c:	20000279 	.word	0x20000279
 8006d10:	20000276 	.word	0x20000276

08006d14 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	f001 f8ac 	bl	8007e78 <lcd_cursor>

    memset(machineID, 0, sizeof(machineID));
 8006d20:	220c      	movs	r2, #12
 8006d22:	2100      	movs	r1, #0
 8006d24:	48a4      	ldr	r0, [pc, #656]	; (8006fb8 <takeMachineID+0x2a4>)
 8006d26:	f005 fcc2 	bl	800c6ae <memset>
    HAL_Delay(500);
 8006d2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d2e:	f001 fd9b 	bl	8008868 <HAL_Delay>

    int cursorPosition = 3;
 8006d32:	2303      	movs	r3, #3
 8006d34:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006d3a:	2305      	movs	r3, #5
 8006d3c:	607b      	str	r3, [r7, #4]

    printTemplate(1, 0);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	2001      	movs	r0, #1
 8006d42:	f7fa f8cf 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d46:	2108      	movs	r1, #8
 8006d48:	489c      	ldr	r0, [pc, #624]	; (8006fbc <takeMachineID+0x2a8>)
 8006d4a:	f002 fb5d 	bl	8009408 <HAL_GPIO_ReadPin>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d146      	bne.n	8006de2 <takeMachineID+0xce>
        	lcd_cursor(0);
 8006d54:	2000      	movs	r0, #0
 8006d56:	f001 f88f 	bl	8007e78 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006d5a:	4b97      	ldr	r3, [pc, #604]	; (8006fb8 <takeMachineID+0x2a4>)
 8006d5c:	7adb      	ldrb	r3, [r3, #11]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d11f      	bne.n	8006da2 <takeMachineID+0x8e>
        		lcd_clear();
 8006d62:	f001 f857 	bl	8007e14 <lcd_clear>
        		if(dilSecim == 0) {
 8006d66:	4b96      	ldr	r3, [pc, #600]	; (8006fc0 <takeMachineID+0x2ac>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10a      	bne.n	8006d84 <takeMachineID+0x70>
        			lcd_print(1, 1, " ID 12 KARAKTER ");
 8006d6e:	4a95      	ldr	r2, [pc, #596]	; (8006fc4 <takeMachineID+0x2b0>)
 8006d70:	2101      	movs	r1, #1
 8006d72:	2001      	movs	r0, #1
 8006d74:	f001 f822 	bl	8007dbc <lcd_print>
        			lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006d78:	4a93      	ldr	r2, [pc, #588]	; (8006fc8 <takeMachineID+0x2b4>)
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	2002      	movs	r0, #2
 8006d7e:	f001 f81d 	bl	8007dbc <lcd_print>
 8006d82:	e009      	b.n	8006d98 <takeMachineID+0x84>
        		} else {
        			lcd_print(1, 1, "MACHINE ID MUST");
 8006d84:	4a91      	ldr	r2, [pc, #580]	; (8006fcc <takeMachineID+0x2b8>)
 8006d86:	2101      	movs	r1, #1
 8006d88:	2001      	movs	r0, #1
 8006d8a:	f001 f817 	bl	8007dbc <lcd_print>
        			lcd_print(2, 1, "BE 12 CHARACTERS");
 8006d8e:	4a90      	ldr	r2, [pc, #576]	; (8006fd0 <takeMachineID+0x2bc>)
 8006d90:	2101      	movs	r1, #1
 8006d92:	2002      	movs	r0, #2
 8006d94:	f001 f812 	bl	8007dbc <lcd_print>
        		}
        		HAL_Delay(1200);
 8006d98:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d9c:	f001 fd64 	bl	8008868 <HAL_Delay>
        		goto mainSection;
 8006da0:	e7bb      	b.n	8006d1a <takeMachineID+0x6>
        		} else {
        			setupCompleted = 1;
        		}
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, machineIDCharacterLimit);
 8006da2:	4b8c      	ldr	r3, [pc, #560]	; (8006fd4 <takeMachineID+0x2c0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a8c      	ldr	r2, [pc, #560]	; (8006fd8 <takeMachineID+0x2c4>)
 8006da8:	4413      	add	r3, r2
 8006daa:	4a83      	ldr	r2, [pc, #524]	; (8006fb8 <takeMachineID+0x2a4>)
 8006dac:	6810      	ldr	r0, [r2, #0]
 8006dae:	6851      	ldr	r1, [r2, #4]
 8006db0:	6892      	ldr	r2, [r2, #8]
 8006db2:	6018      	str	r0, [r3, #0]
 8006db4:	6059      	str	r1, [r3, #4]
 8006db6:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006db8:	20c8      	movs	r0, #200	; 0xc8
 8006dba:	f001 fd55 	bl	8008868 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006dbe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006dc2:	9302      	str	r3, [sp, #8]
 8006dc4:	236e      	movs	r3, #110	; 0x6e
 8006dc6:	9301      	str	r3, [sp, #4]
 8006dc8:	4b83      	ldr	r3, [pc, #524]	; (8006fd8 <takeMachineID+0x2c4>)
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	236e      	movs	r3, #110	; 0x6e
 8006dce:	2200      	movs	r2, #0
 8006dd0:	21a0      	movs	r1, #160	; 0xa0
 8006dd2:	4882      	ldr	r0, [pc, #520]	; (8006fdc <takeMachineID+0x2c8>)
 8006dd4:	f002 fdd2 	bl	800997c <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006dd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ddc:	f001 fd44 	bl	8008868 <HAL_Delay>

            break;
 8006de0:	e0e5      	b.n	8006fae <takeMachineID+0x29a>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006de2:	2101      	movs	r1, #1
 8006de4:	4875      	ldr	r0, [pc, #468]	; (8006fbc <takeMachineID+0x2a8>)
 8006de6:	f002 fb0f 	bl	8009408 <HAL_GPIO_ReadPin>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d112      	bne.n	8006e16 <takeMachineID+0x102>
        	if(cursorPosition == 7) {
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b07      	cmp	r3, #7
 8006df4:	d102      	bne.n	8006dfc <takeMachineID+0xe8>
        		cursorPosition = 10;
 8006df6:	230a      	movs	r3, #10
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	e008      	b.n	8006e0e <takeMachineID+0xfa>
        	} else if (cursorPosition == 14) {
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b0e      	cmp	r3, #14
 8006e00:	d102      	bne.n	8006e08 <takeMachineID+0xf4>
                cursorPosition = 3;
 8006e02:	2303      	movs	r3, #3
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	e002      	b.n	8006e0e <takeMachineID+0xfa>
            } else {
            	cursorPosition++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(350);
 8006e0e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006e12:	f001 fd29 	bl	8008868 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006e16:	2108      	movs	r1, #8
 8006e18:	4871      	ldr	r0, [pc, #452]	; (8006fe0 <takeMachineID+0x2cc>)
 8006e1a:	f002 faf5 	bl	8009408 <HAL_GPIO_ReadPin>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d112      	bne.n	8006e4a <takeMachineID+0x136>
            if (cursorPosition == 3) {
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d102      	bne.n	8006e30 <takeMachineID+0x11c>
                cursorPosition = 14;
 8006e2a:	230e      	movs	r3, #14
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	e008      	b.n	8006e42 <takeMachineID+0x12e>
            } else if(cursorPosition == 10) {
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b0a      	cmp	r3, #10
 8006e34:	d102      	bne.n	8006e3c <takeMachineID+0x128>
            	cursorPosition = 7;
 8006e36:	2307      	movs	r3, #7
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	e002      	b.n	8006e42 <takeMachineID+0x12e>
            } else {
            	cursorPosition--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(350);
 8006e42:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006e46:	f001 fd0f 	bl	8008868 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006e4a:	2102      	movs	r1, #2
 8006e4c:	485b      	ldr	r0, [pc, #364]	; (8006fbc <takeMachineID+0x2a8>)
 8006e4e:	f002 fadb 	bl	8009408 <HAL_GPIO_ReadPin>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d16c      	bne.n	8006f32 <takeMachineID+0x21e>
        	if(cursorPosition == 3) {
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d105      	bne.n	8006e6a <takeMachineID+0x156>
        		machineID[machineIDLoc] = '0';
 8006e5e:	4a56      	ldr	r2, [pc, #344]	; (8006fb8 <takeMachineID+0x2a4>)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4413      	add	r3, r2
 8006e64:	2230      	movs	r2, #48	; 0x30
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	e04f      	b.n	8006f0a <takeMachineID+0x1f6>
        	} else if(cursorPosition == 4) {
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d105      	bne.n	8006e7c <takeMachineID+0x168>
        		machineID[machineIDLoc] = '1';
 8006e70:	4a51      	ldr	r2, [pc, #324]	; (8006fb8 <takeMachineID+0x2a4>)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4413      	add	r3, r2
 8006e76:	2231      	movs	r2, #49	; 0x31
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e046      	b.n	8006f0a <takeMachineID+0x1f6>
        	} else if(cursorPosition == 5) {
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	d105      	bne.n	8006e8e <takeMachineID+0x17a>
        		machineID[machineIDLoc] = '2';
 8006e82:	4a4d      	ldr	r2, [pc, #308]	; (8006fb8 <takeMachineID+0x2a4>)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4413      	add	r3, r2
 8006e88:	2232      	movs	r2, #50	; 0x32
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	e03d      	b.n	8006f0a <takeMachineID+0x1f6>
        	} else if(cursorPosition == 6) {
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b06      	cmp	r3, #6
 8006e92:	d105      	bne.n	8006ea0 <takeMachineID+0x18c>
        		machineID[machineIDLoc] = '3';
 8006e94:	4a48      	ldr	r2, [pc, #288]	; (8006fb8 <takeMachineID+0x2a4>)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	4413      	add	r3, r2
 8006e9a:	2233      	movs	r2, #51	; 0x33
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	e034      	b.n	8006f0a <takeMachineID+0x1f6>
        	} else if(cursorPosition == 7) {
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b07      	cmp	r3, #7
 8006ea4:	d105      	bne.n	8006eb2 <takeMachineID+0x19e>
        		machineID[machineIDLoc] = '4';
 8006ea6:	4a44      	ldr	r2, [pc, #272]	; (8006fb8 <takeMachineID+0x2a4>)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4413      	add	r3, r2
 8006eac:	2234      	movs	r2, #52	; 0x34
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e02b      	b.n	8006f0a <takeMachineID+0x1f6>
        	} else if(cursorPosition == 10) {
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b0a      	cmp	r3, #10
 8006eb6:	d105      	bne.n	8006ec4 <takeMachineID+0x1b0>
        		machineID[machineIDLoc] = '5';
 8006eb8:	4a3f      	ldr	r2, [pc, #252]	; (8006fb8 <takeMachineID+0x2a4>)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	2235      	movs	r2, #53	; 0x35
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	e022      	b.n	8006f0a <takeMachineID+0x1f6>
        	} else if(cursorPosition == 11) {
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b0b      	cmp	r3, #11
 8006ec8:	d105      	bne.n	8006ed6 <takeMachineID+0x1c2>
        		machineID[machineIDLoc] = '6';
 8006eca:	4a3b      	ldr	r2, [pc, #236]	; (8006fb8 <takeMachineID+0x2a4>)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4413      	add	r3, r2
 8006ed0:	2236      	movs	r2, #54	; 0x36
 8006ed2:	701a      	strb	r2, [r3, #0]
 8006ed4:	e019      	b.n	8006f0a <takeMachineID+0x1f6>
        	} else if(cursorPosition == 12) {
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b0c      	cmp	r3, #12
 8006eda:	d105      	bne.n	8006ee8 <takeMachineID+0x1d4>
        		machineID[machineIDLoc] = '7';
 8006edc:	4a36      	ldr	r2, [pc, #216]	; (8006fb8 <takeMachineID+0x2a4>)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	2237      	movs	r2, #55	; 0x37
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e010      	b.n	8006f0a <takeMachineID+0x1f6>
        	} else if(cursorPosition == 13) {
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b0d      	cmp	r3, #13
 8006eec:	d105      	bne.n	8006efa <takeMachineID+0x1e6>
        		machineID[machineIDLoc] = '8';
 8006eee:	4a32      	ldr	r2, [pc, #200]	; (8006fb8 <takeMachineID+0x2a4>)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	2238      	movs	r2, #56	; 0x38
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	e007      	b.n	8006f0a <takeMachineID+0x1f6>
        	} else if(cursorPosition == 14) {
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b0e      	cmp	r3, #14
 8006efe:	d104      	bne.n	8006f0a <takeMachineID+0x1f6>
        		machineID[machineIDLoc] = '9';
 8006f00:	4a2d      	ldr	r2, [pc, #180]	; (8006fb8 <takeMachineID+0x2a4>)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	4413      	add	r3, r2
 8006f06:	2239      	movs	r2, #57	; 0x39
 8006f08:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	b2d9      	uxtb	r1, r3
 8006f0e:	4a2a      	ldr	r2, [pc, #168]	; (8006fb8 <takeMachineID+0x2a4>)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4413      	add	r3, r2
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	2001      	movs	r0, #1
 8006f1a:	f000 ff64 	bl	8007de6 <lcd_print_char>

        	writeLoc++;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3301      	adds	r3, #1
 8006f22:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	3301      	adds	r3, #1
 8006f28:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(450);
 8006f2a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8006f2e:	f001 fc9b 	bl	8008868 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006f32:	2104      	movs	r1, #4
 8006f34:	4821      	ldr	r0, [pc, #132]	; (8006fbc <takeMachineID+0x2a8>)
 8006f36:	f002 fa67 	bl	8009408 <HAL_GPIO_ReadPin>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d12f      	bne.n	8006fa0 <takeMachineID+0x28c>
            if(strlen(machineID) >= 1) {
 8006f40:	4b1d      	ldr	r3, [pc, #116]	; (8006fb8 <takeMachineID+0x2a4>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d027      	beq.n	8006f98 <takeMachineID+0x284>

                machineID[machineIDLoc] = '\0';
 8006f48:	4a1b      	ldr	r2, [pc, #108]	; (8006fb8 <takeMachineID+0x2a4>)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	3304      	adds	r3, #4
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	2001      	movs	r0, #1
 8006f5e:	f000 ff63 	bl	8007e28 <lcd_delete_char>
                HAL_Delay(50);
 8006f62:	2032      	movs	r0, #50	; 0x32
 8006f64:	f001 fc80 	bl	8008868 <HAL_Delay>

                if(writeLoc > 5) {
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b05      	cmp	r3, #5
 8006f6c:	dd03      	ble.n	8006f76 <takeMachineID+0x262>
                	writeLoc--;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	607b      	str	r3, [r7, #4]
 8006f74:	e004      	b.n	8006f80 <takeMachineID+0x26c>
                } else if(writeLoc < 5) {
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	dc01      	bgt.n	8006f80 <takeMachineID+0x26c>
                	writeLoc = 5;
 8006f7c:	2305      	movs	r3, #5
 8006f7e:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dd03      	ble.n	8006f8e <takeMachineID+0x27a>
                	machineIDLoc--;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	60bb      	str	r3, [r7, #8]
 8006f8c:	e004      	b.n	8006f98 <takeMachineID+0x284>
                } else if(machineIDLoc < 0) {
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da01      	bge.n	8006f98 <takeMachineID+0x284>
                	machineIDLoc = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(350);
 8006f98:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006f9c:	f001 fc64 	bl	8008868 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	2002      	movs	r0, #2
 8006fa8:	f000 fee9 	bl	8007d7e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006fac:	e6cb      	b.n	8006d46 <takeMachineID+0x32>
    }
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200001a0 	.word	0x200001a0
 8006fbc:	40010800 	.word	0x40010800
 8006fc0:	20000245 	.word	0x20000245
 8006fc4:	0800dd1c 	.word	0x0800dd1c
 8006fc8:	0800dd30 	.word	0x0800dd30
 8006fcc:	0800dd44 	.word	0x0800dd44
 8006fd0:	0800dd54 	.word	0x0800dd54
 8006fd4:	2000000c 	.word	0x2000000c
 8006fd8:	20000128 	.word	0x20000128
 8006fdc:	200003ac 	.word	0x200003ac
 8006fe0:	40011000 	.word	0x40011000

08006fe4 <takeWifiSSID>:

void takeWifiSSID() {
 8006fe4:	b5b0      	push	{r4, r5, r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
	mainSSIDSection:
    lcd_cursor(1);
 8006fea:	2001      	movs	r0, #1
 8006fec:	f000 ff44 	bl	8007e78 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006ff0:	2214      	movs	r2, #20
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4894      	ldr	r0, [pc, #592]	; (8007248 <takeWifiSSID+0x264>)
 8006ff6:	f005 fb5a 	bl	800c6ae <memset>
    HAL_Delay(500);
 8006ffa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ffe:	f001 fc33 	bl	8008868 <HAL_Delay>

    int realCharPos = 1;
 8007002:	2301      	movs	r3, #1
 8007004:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 8007006:	4b91      	ldr	r3, [pc, #580]	; (800724c <takeWifiSSID+0x268>)
 8007008:	2201      	movs	r2, #1
 800700a:	601a      	str	r2, [r3, #0]
    page = 1;
 800700c:	4b90      	ldr	r3, [pc, #576]	; (8007250 <takeWifiSSID+0x26c>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8007016:	2307      	movs	r3, #7
 8007018:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 800701a:	2101      	movs	r1, #1
 800701c:	2002      	movs	r0, #2
 800701e:	f7f9 ff61 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007022:	2108      	movs	r1, #8
 8007024:	488b      	ldr	r0, [pc, #556]	; (8007254 <takeWifiSSID+0x270>)
 8007026:	f002 f9ef 	bl	8009408 <HAL_GPIO_ReadPin>
 800702a:	4603      	mov	r3, r0
 800702c:	2b01      	cmp	r3, #1
 800702e:	d13f      	bne.n	80070b0 <takeWifiSSID+0xcc>
            lcd_cursor(0);
 8007030:	2000      	movs	r0, #0
 8007032:	f000 ff21 	bl	8007e78 <lcd_cursor>

            if(strlen(wifiSSID) > wifiCharacterLimit) {
 8007036:	4884      	ldr	r0, [pc, #528]	; (8007248 <takeWifiSSID+0x264>)
 8007038:	f7f9 f8f4 	bl	8000224 <strlen>
 800703c:	4603      	mov	r3, r0
 800703e:	2b14      	cmp	r3, #20
 8007040:	d91f      	bls.n	8007082 <takeWifiSSID+0x9e>
                lcd_clear();
 8007042:	f000 fee7 	bl	8007e14 <lcd_clear>
                if(dilSecim == 0) {
 8007046:	4b84      	ldr	r3, [pc, #528]	; (8007258 <takeWifiSSID+0x274>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <takeWifiSSID+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 800704e:	4a83      	ldr	r2, [pc, #524]	; (800725c <takeWifiSSID+0x278>)
 8007050:	2101      	movs	r1, #1
 8007052:	2001      	movs	r0, #1
 8007054:	f000 feb2 	bl	8007dbc <lcd_print>
                	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8007058:	4a81      	ldr	r2, [pc, #516]	; (8007260 <takeWifiSSID+0x27c>)
 800705a:	2101      	movs	r1, #1
 800705c:	2002      	movs	r0, #2
 800705e:	f000 fead 	bl	8007dbc <lcd_print>
 8007062:	e009      	b.n	8007078 <takeWifiSSID+0x94>
                } else {
                	lcd_print(1, 1, "SSID CANT EXCEED");
 8007064:	4a7f      	ldr	r2, [pc, #508]	; (8007264 <takeWifiSSID+0x280>)
 8007066:	2101      	movs	r1, #1
 8007068:	2001      	movs	r0, #1
 800706a:	f000 fea7 	bl	8007dbc <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 800706e:	4a7e      	ldr	r2, [pc, #504]	; (8007268 <takeWifiSSID+0x284>)
 8007070:	2101      	movs	r1, #1
 8007072:	2002      	movs	r0, #2
 8007074:	f000 fea2 	bl	8007dbc <lcd_print>
                }
                HAL_Delay(1200);
 8007078:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800707c:	f001 fbf4 	bl	8008868 <HAL_Delay>
                goto mainSSIDSection;
 8007080:	e7b3      	b.n	8006fea <takeWifiSSID+0x6>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDLoc, wifiCharacterLimit);
 8007082:	4b7a      	ldr	r3, [pc, #488]	; (800726c <takeWifiSSID+0x288>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a7a      	ldr	r2, [pc, #488]	; (8007270 <takeWifiSSID+0x28c>)
 8007088:	4413      	add	r3, r2
 800708a:	4a7a      	ldr	r2, [pc, #488]	; (8007274 <takeWifiSSID+0x290>)
 800708c:	6811      	ldr	r1, [r2, #0]
 800708e:	6855      	ldr	r5, [r2, #4]
 8007090:	6894      	ldr	r4, [r2, #8]
 8007092:	68d0      	ldr	r0, [r2, #12]
 8007094:	6019      	str	r1, [r3, #0]
 8007096:	605d      	str	r5, [r3, #4]
 8007098:	609c      	str	r4, [r3, #8]
 800709a:	60d8      	str	r0, [r3, #12]
 800709c:	6911      	ldr	r1, [r2, #16]
 800709e:	6119      	str	r1, [r3, #16]
            HAL_Delay(750);
 80070a0:	f240 20ee 	movw	r0, #750	; 0x2ee
 80070a4:	f001 fbe0 	bl	8008868 <HAL_Delay>

            hafizaYaz = 1;
 80070a8:	4b73      	ldr	r3, [pc, #460]	; (8007278 <takeWifiSSID+0x294>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	701a      	strb	r2, [r3, #0]

            //HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
            //HAL_Delay(1000);

            break;
 80070ae:	e163      	b.n	8007378 <takeWifiSSID+0x394>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80070b0:	2101      	movs	r1, #1
 80070b2:	4868      	ldr	r0, [pc, #416]	; (8007254 <takeWifiSSID+0x270>)
 80070b4:	f002 f9a8 	bl	8009408 <HAL_GPIO_ReadPin>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d166      	bne.n	800718c <takeWifiSSID+0x1a8>
        	realCharPos++;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3301      	adds	r3, #1
 80070c2:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b50      	cmp	r3, #80	; 0x50
 80070c8:	dd01      	ble.n	80070ce <takeWifiSSID+0xea>
        		realCharPos = 1;
 80070ca:	2301      	movs	r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 80070ce:	4b5f      	ldr	r3, [pc, #380]	; (800724c <takeWifiSSID+0x268>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b10      	cmp	r3, #16
 80070d4:	d152      	bne.n	800717c <takeWifiSSID+0x198>
            	if(page == 1) {
 80070d6:	4b5e      	ldr	r3, [pc, #376]	; (8007250 <takeWifiSSID+0x26c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d10c      	bne.n	80070f8 <takeWifiSSID+0x114>
            		cursorPosition = 1;
 80070de:	4b5b      	ldr	r3, [pc, #364]	; (800724c <takeWifiSSID+0x268>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
            		page++;
 80070e4:	4b5a      	ldr	r3, [pc, #360]	; (8007250 <takeWifiSSID+0x26c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	4a59      	ldr	r2, [pc, #356]	; (8007250 <takeWifiSSID+0x26c>)
 80070ec:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 80070ee:	2102      	movs	r1, #2
 80070f0:	2002      	movs	r0, #2
 80070f2:	f7f9 fef7 	bl	8000ee4 <printTemplate>
 80070f6:	e046      	b.n	8007186 <takeWifiSSID+0x1a2>
            	} else if(page == 2) {
 80070f8:	4b55      	ldr	r3, [pc, #340]	; (8007250 <takeWifiSSID+0x26c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d10c      	bne.n	800711a <takeWifiSSID+0x136>
            		cursorPosition = 1;
 8007100:	4b52      	ldr	r3, [pc, #328]	; (800724c <takeWifiSSID+0x268>)
 8007102:	2201      	movs	r2, #1
 8007104:	601a      	str	r2, [r3, #0]
            		page++;
 8007106:	4b52      	ldr	r3, [pc, #328]	; (8007250 <takeWifiSSID+0x26c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	4a50      	ldr	r2, [pc, #320]	; (8007250 <takeWifiSSID+0x26c>)
 800710e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8007110:	2103      	movs	r1, #3
 8007112:	2002      	movs	r0, #2
 8007114:	f7f9 fee6 	bl	8000ee4 <printTemplate>
 8007118:	e035      	b.n	8007186 <takeWifiSSID+0x1a2>
            	} else if(page == 3) {
 800711a:	4b4d      	ldr	r3, [pc, #308]	; (8007250 <takeWifiSSID+0x26c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b03      	cmp	r3, #3
 8007120:	d10c      	bne.n	800713c <takeWifiSSID+0x158>
            		cursorPosition = 1;
 8007122:	4b4a      	ldr	r3, [pc, #296]	; (800724c <takeWifiSSID+0x268>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
            		page++;
 8007128:	4b49      	ldr	r3, [pc, #292]	; (8007250 <takeWifiSSID+0x26c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3301      	adds	r3, #1
 800712e:	4a48      	ldr	r2, [pc, #288]	; (8007250 <takeWifiSSID+0x26c>)
 8007130:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8007132:	2104      	movs	r1, #4
 8007134:	2002      	movs	r0, #2
 8007136:	f7f9 fed5 	bl	8000ee4 <printTemplate>
 800713a:	e024      	b.n	8007186 <takeWifiSSID+0x1a2>
            	} else if(page == 4) {
 800713c:	4b44      	ldr	r3, [pc, #272]	; (8007250 <takeWifiSSID+0x26c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b04      	cmp	r3, #4
 8007142:	d10c      	bne.n	800715e <takeWifiSSID+0x17a>
            		cursorPosition = 1;
 8007144:	4b41      	ldr	r3, [pc, #260]	; (800724c <takeWifiSSID+0x268>)
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]
            		page++;
 800714a:	4b41      	ldr	r3, [pc, #260]	; (8007250 <takeWifiSSID+0x26c>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3301      	adds	r3, #1
 8007150:	4a3f      	ldr	r2, [pc, #252]	; (8007250 <takeWifiSSID+0x26c>)
 8007152:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8007154:	2105      	movs	r1, #5
 8007156:	2002      	movs	r0, #2
 8007158:	f7f9 fec4 	bl	8000ee4 <printTemplate>
 800715c:	e013      	b.n	8007186 <takeWifiSSID+0x1a2>
            	} else if(page == 5) {
 800715e:	4b3c      	ldr	r3, [pc, #240]	; (8007250 <takeWifiSSID+0x26c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b05      	cmp	r3, #5
 8007164:	d10f      	bne.n	8007186 <takeWifiSSID+0x1a2>
            		cursorPosition = 1;
 8007166:	4b39      	ldr	r3, [pc, #228]	; (800724c <takeWifiSSID+0x268>)
 8007168:	2201      	movs	r2, #1
 800716a:	601a      	str	r2, [r3, #0]
            		page = 1;
 800716c:	4b38      	ldr	r3, [pc, #224]	; (8007250 <takeWifiSSID+0x26c>)
 800716e:	2201      	movs	r2, #1
 8007170:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8007172:	2101      	movs	r1, #1
 8007174:	2002      	movs	r0, #2
 8007176:	f7f9 feb5 	bl	8000ee4 <printTemplate>
 800717a:	e004      	b.n	8007186 <takeWifiSSID+0x1a2>
            	}
            } else {
            	cursorPosition++;
 800717c:	4b33      	ldr	r3, [pc, #204]	; (800724c <takeWifiSSID+0x268>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3301      	adds	r3, #1
 8007182:	4a32      	ldr	r2, [pc, #200]	; (800724c <takeWifiSSID+0x268>)
 8007184:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007186:	20fa      	movs	r0, #250	; 0xfa
 8007188:	f001 fb6e 	bl	8008868 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800718c:	2108      	movs	r1, #8
 800718e:	483b      	ldr	r0, [pc, #236]	; (800727c <takeWifiSSID+0x298>)
 8007190:	f002 f93a 	bl	8009408 <HAL_GPIO_ReadPin>
 8007194:	4603      	mov	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d17a      	bne.n	8007290 <takeWifiSSID+0x2ac>
        	realCharPos--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3b01      	subs	r3, #1
 800719e:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dc01      	bgt.n	80071aa <takeWifiSSID+0x1c6>
        		realCharPos = 80;
 80071a6:	2350      	movs	r3, #80	; 0x50
 80071a8:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 80071aa:	4b28      	ldr	r3, [pc, #160]	; (800724c <takeWifiSSID+0x268>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d166      	bne.n	8007280 <takeWifiSSID+0x29c>
            	if(page == 1) {
 80071b2:	4b27      	ldr	r3, [pc, #156]	; (8007250 <takeWifiSSID+0x26c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d10a      	bne.n	80071d0 <takeWifiSSID+0x1ec>
            		cursorPosition = 16;
 80071ba:	4b24      	ldr	r3, [pc, #144]	; (800724c <takeWifiSSID+0x268>)
 80071bc:	2210      	movs	r2, #16
 80071be:	601a      	str	r2, [r3, #0]
            		page = 5;
 80071c0:	4b23      	ldr	r3, [pc, #140]	; (8007250 <takeWifiSSID+0x26c>)
 80071c2:	2205      	movs	r2, #5
 80071c4:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 80071c6:	2105      	movs	r1, #5
 80071c8:	2002      	movs	r0, #2
 80071ca:	f7f9 fe8b 	bl	8000ee4 <printTemplate>
 80071ce:	e05c      	b.n	800728a <takeWifiSSID+0x2a6>
            	} else if(page == 2) {
 80071d0:	4b1f      	ldr	r3, [pc, #124]	; (8007250 <takeWifiSSID+0x26c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d10a      	bne.n	80071ee <takeWifiSSID+0x20a>
            		cursorPosition = 16;
 80071d8:	4b1c      	ldr	r3, [pc, #112]	; (800724c <takeWifiSSID+0x268>)
 80071da:	2210      	movs	r2, #16
 80071dc:	601a      	str	r2, [r3, #0]
            		page = 1;
 80071de:	4b1c      	ldr	r3, [pc, #112]	; (8007250 <takeWifiSSID+0x26c>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80071e4:	2101      	movs	r1, #1
 80071e6:	2002      	movs	r0, #2
 80071e8:	f7f9 fe7c 	bl	8000ee4 <printTemplate>
 80071ec:	e04d      	b.n	800728a <takeWifiSSID+0x2a6>
            	} else if(page == 3) {
 80071ee:	4b18      	ldr	r3, [pc, #96]	; (8007250 <takeWifiSSID+0x26c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d10a      	bne.n	800720c <takeWifiSSID+0x228>
            		cursorPosition = 16;
 80071f6:	4b15      	ldr	r3, [pc, #84]	; (800724c <takeWifiSSID+0x268>)
 80071f8:	2210      	movs	r2, #16
 80071fa:	601a      	str	r2, [r3, #0]
            		page = 2;
 80071fc:	4b14      	ldr	r3, [pc, #80]	; (8007250 <takeWifiSSID+0x26c>)
 80071fe:	2202      	movs	r2, #2
 8007200:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8007202:	2102      	movs	r1, #2
 8007204:	2002      	movs	r0, #2
 8007206:	f7f9 fe6d 	bl	8000ee4 <printTemplate>
 800720a:	e03e      	b.n	800728a <takeWifiSSID+0x2a6>
            	} else if(page == 4) {
 800720c:	4b10      	ldr	r3, [pc, #64]	; (8007250 <takeWifiSSID+0x26c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b04      	cmp	r3, #4
 8007212:	d10a      	bne.n	800722a <takeWifiSSID+0x246>
            		cursorPosition = 16;
 8007214:	4b0d      	ldr	r3, [pc, #52]	; (800724c <takeWifiSSID+0x268>)
 8007216:	2210      	movs	r2, #16
 8007218:	601a      	str	r2, [r3, #0]
            		page = 3;
 800721a:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <takeWifiSSID+0x26c>)
 800721c:	2203      	movs	r2, #3
 800721e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8007220:	2103      	movs	r1, #3
 8007222:	2002      	movs	r0, #2
 8007224:	f7f9 fe5e 	bl	8000ee4 <printTemplate>
 8007228:	e02f      	b.n	800728a <takeWifiSSID+0x2a6>
            	} else if(page == 5) {
 800722a:	4b09      	ldr	r3, [pc, #36]	; (8007250 <takeWifiSSID+0x26c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b05      	cmp	r3, #5
 8007230:	d12b      	bne.n	800728a <takeWifiSSID+0x2a6>
            		cursorPosition = 16;
 8007232:	4b06      	ldr	r3, [pc, #24]	; (800724c <takeWifiSSID+0x268>)
 8007234:	2210      	movs	r2, #16
 8007236:	601a      	str	r2, [r3, #0]
            		page = 4;
 8007238:	4b05      	ldr	r3, [pc, #20]	; (8007250 <takeWifiSSID+0x26c>)
 800723a:	2204      	movs	r2, #4
 800723c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 800723e:	2104      	movs	r1, #4
 8007240:	2002      	movs	r0, #2
 8007242:	f7f9 fe4f 	bl	8000ee4 <printTemplate>
 8007246:	e020      	b.n	800728a <takeWifiSSID+0x2a6>
 8007248:	200001ac 	.word	0x200001ac
 800724c:	20000000 	.word	0x20000000
 8007250:	20000004 	.word	0x20000004
 8007254:	40010800 	.word	0x40010800
 8007258:	20000245 	.word	0x20000245
 800725c:	0800dd68 	.word	0x0800dd68
 8007260:	0800dd7c 	.word	0x0800dd7c
 8007264:	0800dd90 	.word	0x0800dd90
 8007268:	0800dda4 	.word	0x0800dda4
 800726c:	20000010 	.word	0x20000010
 8007270:	20000128 	.word	0x20000128
 8007274:	200001d4 	.word	0x200001d4
 8007278:	20000250 	.word	0x20000250
 800727c:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8007280:	4b3f      	ldr	r3, [pc, #252]	; (8007380 <takeWifiSSID+0x39c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3b01      	subs	r3, #1
 8007286:	4a3e      	ldr	r2, [pc, #248]	; (8007380 <takeWifiSSID+0x39c>)
 8007288:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800728a:	20fa      	movs	r0, #250	; 0xfa
 800728c:	f001 faec 	bl	8008868 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007290:	2102      	movs	r1, #2
 8007292:	483c      	ldr	r0, [pc, #240]	; (8007384 <takeWifiSSID+0x3a0>)
 8007294:	f002 f8b8 	bl	8009408 <HAL_GPIO_ReadPin>
 8007298:	4603      	mov	r3, r0
 800729a:	2b01      	cmp	r3, #1
 800729c:	d127      	bne.n	80072ee <takeWifiSSID+0x30a>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7f9 fa86 	bl	80007b4 <getCharFromCursorPosition>
 80072a8:	4603      	mov	r3, r0
 80072aa:	4619      	mov	r1, r3
 80072ac:	4a36      	ldr	r2, [pc, #216]	; (8007388 <takeWifiSSID+0x3a4>)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	4413      	add	r3, r2
 80072b2:	460a      	mov	r2, r1
 80072b4:	701a      	strb	r2, [r3, #0]
            wifiSSIDLoc[wifiNameLoc] = realCharPos - 1;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b2d9      	uxtb	r1, r3
 80072be:	4a33      	ldr	r2, [pc, #204]	; (800738c <takeWifiSSID+0x3a8>)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4413      	add	r3, r2
 80072c4:	460a      	mov	r2, r1
 80072c6:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	b2d9      	uxtb	r1, r3
 80072cc:	4a2e      	ldr	r2, [pc, #184]	; (8007388 <takeWifiSSID+0x3a4>)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	4413      	add	r3, r2
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	2001      	movs	r0, #1
 80072d8:	f000 fd85 	bl	8007de6 <lcd_print_char>

            writeLoc++;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3301      	adds	r3, #1
 80072e0:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 80072e8:	20fa      	movs	r0, #250	; 0xfa
 80072ea:	f001 fabd 	bl	8008868 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80072ee:	2104      	movs	r1, #4
 80072f0:	4824      	ldr	r0, [pc, #144]	; (8007384 <takeWifiSSID+0x3a0>)
 80072f2:	f002 f889 	bl	8009408 <HAL_GPIO_ReadPin>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d133      	bne.n	8007364 <takeWifiSSID+0x380>
        	if(strlen(wifiSSID) >= 1) {
 80072fc:	4b22      	ldr	r3, [pc, #136]	; (8007388 <takeWifiSSID+0x3a4>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d02c      	beq.n	800735e <takeWifiSSID+0x37a>
        		wifiSSID[wifiNameLoc] = '\0';
 8007304:	4a20      	ldr	r2, [pc, #128]	; (8007388 <takeWifiSSID+0x3a4>)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	4413      	add	r3, r2
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
        		wifiSSIDLoc[wifiNameLoc] = '\0';
 800730e:	4a1f      	ldr	r2, [pc, #124]	; (800738c <takeWifiSSID+0x3a8>)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4413      	add	r3, r2
 8007314:	2200      	movs	r2, #0
 8007316:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	3306      	adds	r3, #6
 800731e:	b2db      	uxtb	r3, r3
 8007320:	4619      	mov	r1, r3
 8007322:	2001      	movs	r0, #1
 8007324:	f000 fd80 	bl	8007e28 <lcd_delete_char>
        		HAL_Delay(50);
 8007328:	2032      	movs	r0, #50	; 0x32
 800732a:	f001 fa9d 	bl	8008868 <HAL_Delay>
        		if(writeLoc > 7) {
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b07      	cmp	r3, #7
 8007332:	dd03      	ble.n	800733c <takeWifiSSID+0x358>
        			writeLoc--;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3b01      	subs	r3, #1
 8007338:	607b      	str	r3, [r7, #4]
 800733a:	e004      	b.n	8007346 <takeWifiSSID+0x362>
        		} else if(writeLoc < 7) {
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b06      	cmp	r3, #6
 8007340:	dc01      	bgt.n	8007346 <takeWifiSSID+0x362>
        			writeLoc = 7;
 8007342:	2307      	movs	r3, #7
 8007344:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	dd03      	ble.n	8007354 <takeWifiSSID+0x370>
        			wifiNameLoc--;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	3b01      	subs	r3, #1
 8007350:	60bb      	str	r3, [r7, #8]
 8007352:	e004      	b.n	800735e <takeWifiSSID+0x37a>
        		} else if(wifiNameLoc < 0) {
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	da01      	bge.n	800735e <takeWifiSSID+0x37a>
        			wifiNameLoc = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
        		}
        	}

        	HAL_Delay(250);
 800735e:	20fa      	movs	r0, #250	; 0xfa
 8007360:	f001 fa82 	bl	8008868 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007364:	4b06      	ldr	r3, [pc, #24]	; (8007380 <takeWifiSSID+0x39c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	4619      	mov	r1, r3
 800736c:	2002      	movs	r0, #2
 800736e:	f000 fd06 	bl	8007d7e <lcd_gotoxy>
        bekle();
 8007372:	f7fd fbc3 	bl	8004afc <bekle>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007376:	e654      	b.n	8007022 <takeWifiSSID+0x3e>
    }
}
 8007378:	bf00      	nop
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bdb0      	pop	{r4, r5, r7, pc}
 8007380:	20000000 	.word	0x20000000
 8007384:	40010800 	.word	0x40010800
 8007388:	200001ac 	.word	0x200001ac
 800738c:	200001d4 	.word	0x200001d4

08007390 <takeWifiPass>:

void takeWifiPass() {
 8007390:	b5b0      	push	{r4, r5, r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
	mainPASSSection:
    lcd_cursor(1);
 8007396:	2001      	movs	r0, #1
 8007398:	f000 fd6e 	bl	8007e78 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 800739c:	2214      	movs	r2, #20
 800739e:	2100      	movs	r1, #0
 80073a0:	4894      	ldr	r0, [pc, #592]	; (80075f4 <takeWifiPass+0x264>)
 80073a2:	f005 f984 	bl	800c6ae <memset>
    HAL_Delay(500);
 80073a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073aa:	f001 fa5d 	bl	8008868 <HAL_Delay>

    int realCharPos = 1;
 80073ae:	2301      	movs	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
    cursorPosition = 1;
 80073b2:	4b91      	ldr	r3, [pc, #580]	; (80075f8 <takeWifiPass+0x268>)
 80073b4:	2201      	movs	r2, #1
 80073b6:	601a      	str	r2, [r3, #0]
    page = 1;
 80073b8:	4b90      	ldr	r3, [pc, #576]	; (80075fc <takeWifiPass+0x26c>)
 80073ba:	2201      	movs	r2, #1
 80073bc:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 80073c2:	2307      	movs	r3, #7
 80073c4:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80073c6:	2101      	movs	r1, #1
 80073c8:	2003      	movs	r0, #3
 80073ca:	f7f9 fd8b 	bl	8000ee4 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80073ce:	2108      	movs	r1, #8
 80073d0:	488b      	ldr	r0, [pc, #556]	; (8007600 <takeWifiPass+0x270>)
 80073d2:	f002 f819 	bl	8009408 <HAL_GPIO_ReadPin>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d13f      	bne.n	800745c <takeWifiPass+0xcc>
            lcd_cursor(0);
 80073dc:	2000      	movs	r0, #0
 80073de:	f000 fd4b 	bl	8007e78 <lcd_cursor>

            if(strlen(wifiPass) > wifiCharacterLimit) {
 80073e2:	4884      	ldr	r0, [pc, #528]	; (80075f4 <takeWifiPass+0x264>)
 80073e4:	f7f8 ff1e 	bl	8000224 <strlen>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b14      	cmp	r3, #20
 80073ec:	d91f      	bls.n	800742e <takeWifiPass+0x9e>
                lcd_clear();
 80073ee:	f000 fd11 	bl	8007e14 <lcd_clear>
                if(dilSecim == 0) {
 80073f2:	4b84      	ldr	r3, [pc, #528]	; (8007604 <takeWifiPass+0x274>)
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <takeWifiPass+0x80>
                	lcd_print(1, 1, " 20 KARAKTERDEN ");
 80073fa:	4a83      	ldr	r2, [pc, #524]	; (8007608 <takeWifiPass+0x278>)
 80073fc:	2101      	movs	r1, #1
 80073fe:	2001      	movs	r0, #1
 8007400:	f000 fcdc 	bl	8007dbc <lcd_print>
                	lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8007404:	4a81      	ldr	r2, [pc, #516]	; (800760c <takeWifiPass+0x27c>)
 8007406:	2101      	movs	r1, #1
 8007408:	2002      	movs	r0, #2
 800740a:	f000 fcd7 	bl	8007dbc <lcd_print>
 800740e:	e009      	b.n	8007424 <takeWifiPass+0x94>
                } else {
                	lcd_print(1, 1, "PASS CANT EXCEED");
 8007410:	4a7f      	ldr	r2, [pc, #508]	; (8007610 <takeWifiPass+0x280>)
 8007412:	2101      	movs	r1, #1
 8007414:	2001      	movs	r0, #1
 8007416:	f000 fcd1 	bl	8007dbc <lcd_print>
                	lcd_print(2, 1, " 20  CHARACTERS ");
 800741a:	4a7e      	ldr	r2, [pc, #504]	; (8007614 <takeWifiPass+0x284>)
 800741c:	2101      	movs	r1, #1
 800741e:	2002      	movs	r0, #2
 8007420:	f000 fccc 	bl	8007dbc <lcd_print>
                }
                HAL_Delay(1200);
 8007424:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007428:	f001 fa1e 	bl	8008868 <HAL_Delay>
                goto mainPASSSection;
 800742c:	e7b3      	b.n	8007396 <takeWifiPass+0x6>
            }

            memcpy(&eepromData[passStartPos], wifiPassLocArr, wifiCharacterLimit);
 800742e:	4b7a      	ldr	r3, [pc, #488]	; (8007618 <takeWifiPass+0x288>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a7a      	ldr	r2, [pc, #488]	; (800761c <takeWifiPass+0x28c>)
 8007434:	4413      	add	r3, r2
 8007436:	4a7a      	ldr	r2, [pc, #488]	; (8007620 <takeWifiPass+0x290>)
 8007438:	6811      	ldr	r1, [r2, #0]
 800743a:	6855      	ldr	r5, [r2, #4]
 800743c:	6894      	ldr	r4, [r2, #8]
 800743e:	68d0      	ldr	r0, [r2, #12]
 8007440:	6019      	str	r1, [r3, #0]
 8007442:	605d      	str	r5, [r3, #4]
 8007444:	609c      	str	r4, [r3, #8]
 8007446:	60d8      	str	r0, [r3, #12]
 8007448:	6911      	ldr	r1, [r2, #16]
 800744a:	6119      	str	r1, [r3, #16]
            HAL_Delay(750);
 800744c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8007450:	f001 fa0a 	bl	8008868 <HAL_Delay>

            hafizaYaz = 1;
 8007454:	4b73      	ldr	r3, [pc, #460]	; (8007624 <takeWifiPass+0x294>)
 8007456:	2201      	movs	r2, #1
 8007458:	701a      	strb	r2, [r3, #0]

            //HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
            //HAL_Delay(1000);

            break;
 800745a:	e163      	b.n	8007724 <takeWifiPass+0x394>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800745c:	2101      	movs	r1, #1
 800745e:	4868      	ldr	r0, [pc, #416]	; (8007600 <takeWifiPass+0x270>)
 8007460:	f001 ffd2 	bl	8009408 <HAL_GPIO_ReadPin>
 8007464:	4603      	mov	r3, r0
 8007466:	2b01      	cmp	r3, #1
 8007468:	d166      	bne.n	8007538 <takeWifiPass+0x1a8>
        	realCharPos++;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3301      	adds	r3, #1
 800746e:	60fb      	str	r3, [r7, #12]
        	if(realCharPos > 80) {
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b50      	cmp	r3, #80	; 0x50
 8007474:	dd01      	ble.n	800747a <takeWifiPass+0xea>
        	    realCharPos = 1;
 8007476:	2301      	movs	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]
        	}
            if (cursorPosition == 16) {
 800747a:	4b5f      	ldr	r3, [pc, #380]	; (80075f8 <takeWifiPass+0x268>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b10      	cmp	r3, #16
 8007480:	d152      	bne.n	8007528 <takeWifiPass+0x198>
            	if(page == 1) {
 8007482:	4b5e      	ldr	r3, [pc, #376]	; (80075fc <takeWifiPass+0x26c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d10c      	bne.n	80074a4 <takeWifiPass+0x114>
            		cursorPosition = 1;
 800748a:	4b5b      	ldr	r3, [pc, #364]	; (80075f8 <takeWifiPass+0x268>)
 800748c:	2201      	movs	r2, #1
 800748e:	601a      	str	r2, [r3, #0]
            		page++;
 8007490:	4b5a      	ldr	r3, [pc, #360]	; (80075fc <takeWifiPass+0x26c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3301      	adds	r3, #1
 8007496:	4a59      	ldr	r2, [pc, #356]	; (80075fc <takeWifiPass+0x26c>)
 8007498:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 800749a:	2102      	movs	r1, #2
 800749c:	2003      	movs	r0, #3
 800749e:	f7f9 fd21 	bl	8000ee4 <printTemplate>
 80074a2:	e046      	b.n	8007532 <takeWifiPass+0x1a2>
            	} else if(page == 2) {
 80074a4:	4b55      	ldr	r3, [pc, #340]	; (80075fc <takeWifiPass+0x26c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d10c      	bne.n	80074c6 <takeWifiPass+0x136>
            		cursorPosition = 1;
 80074ac:	4b52      	ldr	r3, [pc, #328]	; (80075f8 <takeWifiPass+0x268>)
 80074ae:	2201      	movs	r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
            		page++;
 80074b2:	4b52      	ldr	r3, [pc, #328]	; (80075fc <takeWifiPass+0x26c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3301      	adds	r3, #1
 80074b8:	4a50      	ldr	r2, [pc, #320]	; (80075fc <takeWifiPass+0x26c>)
 80074ba:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80074bc:	2103      	movs	r1, #3
 80074be:	2003      	movs	r0, #3
 80074c0:	f7f9 fd10 	bl	8000ee4 <printTemplate>
 80074c4:	e035      	b.n	8007532 <takeWifiPass+0x1a2>
            	} else if(page == 3) {
 80074c6:	4b4d      	ldr	r3, [pc, #308]	; (80075fc <takeWifiPass+0x26c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d10c      	bne.n	80074e8 <takeWifiPass+0x158>
            		cursorPosition = 1;
 80074ce:	4b4a      	ldr	r3, [pc, #296]	; (80075f8 <takeWifiPass+0x268>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
            		page++;
 80074d4:	4b49      	ldr	r3, [pc, #292]	; (80075fc <takeWifiPass+0x26c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3301      	adds	r3, #1
 80074da:	4a48      	ldr	r2, [pc, #288]	; (80075fc <takeWifiPass+0x26c>)
 80074dc:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80074de:	2104      	movs	r1, #4
 80074e0:	2003      	movs	r0, #3
 80074e2:	f7f9 fcff 	bl	8000ee4 <printTemplate>
 80074e6:	e024      	b.n	8007532 <takeWifiPass+0x1a2>
            	} else if(page == 4) {
 80074e8:	4b44      	ldr	r3, [pc, #272]	; (80075fc <takeWifiPass+0x26c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d10c      	bne.n	800750a <takeWifiPass+0x17a>
            		cursorPosition = 1;
 80074f0:	4b41      	ldr	r3, [pc, #260]	; (80075f8 <takeWifiPass+0x268>)
 80074f2:	2201      	movs	r2, #1
 80074f4:	601a      	str	r2, [r3, #0]
            		page++;
 80074f6:	4b41      	ldr	r3, [pc, #260]	; (80075fc <takeWifiPass+0x26c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3301      	adds	r3, #1
 80074fc:	4a3f      	ldr	r2, [pc, #252]	; (80075fc <takeWifiPass+0x26c>)
 80074fe:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8007500:	2105      	movs	r1, #5
 8007502:	2003      	movs	r0, #3
 8007504:	f7f9 fcee 	bl	8000ee4 <printTemplate>
 8007508:	e013      	b.n	8007532 <takeWifiPass+0x1a2>
            	} else if(page == 5) {
 800750a:	4b3c      	ldr	r3, [pc, #240]	; (80075fc <takeWifiPass+0x26c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b05      	cmp	r3, #5
 8007510:	d10f      	bne.n	8007532 <takeWifiPass+0x1a2>
            		cursorPosition = 1;
 8007512:	4b39      	ldr	r3, [pc, #228]	; (80075f8 <takeWifiPass+0x268>)
 8007514:	2201      	movs	r2, #1
 8007516:	601a      	str	r2, [r3, #0]
            		page = 1;
 8007518:	4b38      	ldr	r3, [pc, #224]	; (80075fc <takeWifiPass+0x26c>)
 800751a:	2201      	movs	r2, #1
 800751c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800751e:	2101      	movs	r1, #1
 8007520:	2003      	movs	r0, #3
 8007522:	f7f9 fcdf 	bl	8000ee4 <printTemplate>
 8007526:	e004      	b.n	8007532 <takeWifiPass+0x1a2>
            	}
            } else {
            	cursorPosition++;
 8007528:	4b33      	ldr	r3, [pc, #204]	; (80075f8 <takeWifiPass+0x268>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3301      	adds	r3, #1
 800752e:	4a32      	ldr	r2, [pc, #200]	; (80075f8 <takeWifiPass+0x268>)
 8007530:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007532:	20fa      	movs	r0, #250	; 0xfa
 8007534:	f001 f998 	bl	8008868 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007538:	2108      	movs	r1, #8
 800753a:	483b      	ldr	r0, [pc, #236]	; (8007628 <takeWifiPass+0x298>)
 800753c:	f001 ff64 	bl	8009408 <HAL_GPIO_ReadPin>
 8007540:	4603      	mov	r3, r0
 8007542:	2b01      	cmp	r3, #1
 8007544:	d17a      	bne.n	800763c <takeWifiPass+0x2ac>
        	realCharPos--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3b01      	subs	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]
        	if(realCharPos < 1) {
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	dc01      	bgt.n	8007556 <takeWifiPass+0x1c6>
        	    realCharPos = 80;
 8007552:	2350      	movs	r3, #80	; 0x50
 8007554:	60fb      	str	r3, [r7, #12]
        	}
            if(cursorPosition == 1) {
 8007556:	4b28      	ldr	r3, [pc, #160]	; (80075f8 <takeWifiPass+0x268>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d166      	bne.n	800762c <takeWifiPass+0x29c>
            	if(page == 1) {
 800755e:	4b27      	ldr	r3, [pc, #156]	; (80075fc <takeWifiPass+0x26c>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d10a      	bne.n	800757c <takeWifiPass+0x1ec>
            		cursorPosition = 16;
 8007566:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <takeWifiPass+0x268>)
 8007568:	2210      	movs	r2, #16
 800756a:	601a      	str	r2, [r3, #0]
            		page = 5;
 800756c:	4b23      	ldr	r3, [pc, #140]	; (80075fc <takeWifiPass+0x26c>)
 800756e:	2205      	movs	r2, #5
 8007570:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8007572:	2105      	movs	r1, #5
 8007574:	2003      	movs	r0, #3
 8007576:	f7f9 fcb5 	bl	8000ee4 <printTemplate>
 800757a:	e05c      	b.n	8007636 <takeWifiPass+0x2a6>
            	} else if(page == 2) {
 800757c:	4b1f      	ldr	r3, [pc, #124]	; (80075fc <takeWifiPass+0x26c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b02      	cmp	r3, #2
 8007582:	d10a      	bne.n	800759a <takeWifiPass+0x20a>
            		cursorPosition = 16;
 8007584:	4b1c      	ldr	r3, [pc, #112]	; (80075f8 <takeWifiPass+0x268>)
 8007586:	2210      	movs	r2, #16
 8007588:	601a      	str	r2, [r3, #0]
            		page = 1;
 800758a:	4b1c      	ldr	r3, [pc, #112]	; (80075fc <takeWifiPass+0x26c>)
 800758c:	2201      	movs	r2, #1
 800758e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8007590:	2101      	movs	r1, #1
 8007592:	2003      	movs	r0, #3
 8007594:	f7f9 fca6 	bl	8000ee4 <printTemplate>
 8007598:	e04d      	b.n	8007636 <takeWifiPass+0x2a6>
            	} else if(page == 3) {
 800759a:	4b18      	ldr	r3, [pc, #96]	; (80075fc <takeWifiPass+0x26c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d10a      	bne.n	80075b8 <takeWifiPass+0x228>
            		cursorPosition = 16;
 80075a2:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <takeWifiPass+0x268>)
 80075a4:	2210      	movs	r2, #16
 80075a6:	601a      	str	r2, [r3, #0]
            		page = 2;
 80075a8:	4b14      	ldr	r3, [pc, #80]	; (80075fc <takeWifiPass+0x26c>)
 80075aa:	2202      	movs	r2, #2
 80075ac:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80075ae:	2102      	movs	r1, #2
 80075b0:	2003      	movs	r0, #3
 80075b2:	f7f9 fc97 	bl	8000ee4 <printTemplate>
 80075b6:	e03e      	b.n	8007636 <takeWifiPass+0x2a6>
            	} else if(page == 4) {
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <takeWifiPass+0x26c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d10a      	bne.n	80075d6 <takeWifiPass+0x246>
            		cursorPosition = 16;
 80075c0:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <takeWifiPass+0x268>)
 80075c2:	2210      	movs	r2, #16
 80075c4:	601a      	str	r2, [r3, #0]
            		page = 3;
 80075c6:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <takeWifiPass+0x26c>)
 80075c8:	2203      	movs	r2, #3
 80075ca:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80075cc:	2103      	movs	r1, #3
 80075ce:	2003      	movs	r0, #3
 80075d0:	f7f9 fc88 	bl	8000ee4 <printTemplate>
 80075d4:	e02f      	b.n	8007636 <takeWifiPass+0x2a6>
            	} else if(page == 5) {
 80075d6:	4b09      	ldr	r3, [pc, #36]	; (80075fc <takeWifiPass+0x26c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b05      	cmp	r3, #5
 80075dc:	d12b      	bne.n	8007636 <takeWifiPass+0x2a6>
            		cursorPosition = 16;
 80075de:	4b06      	ldr	r3, [pc, #24]	; (80075f8 <takeWifiPass+0x268>)
 80075e0:	2210      	movs	r2, #16
 80075e2:	601a      	str	r2, [r3, #0]
            		page = 4;
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <takeWifiPass+0x26c>)
 80075e6:	2204      	movs	r2, #4
 80075e8:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80075ea:	2104      	movs	r1, #4
 80075ec:	2003      	movs	r0, #3
 80075ee:	f7f9 fc79 	bl	8000ee4 <printTemplate>
 80075f2:	e020      	b.n	8007636 <takeWifiPass+0x2a6>
 80075f4:	200001c0 	.word	0x200001c0
 80075f8:	20000000 	.word	0x20000000
 80075fc:	20000004 	.word	0x20000004
 8007600:	40010800 	.word	0x40010800
 8007604:	20000245 	.word	0x20000245
 8007608:	0800dd68 	.word	0x0800dd68
 800760c:	0800ddb8 	.word	0x0800ddb8
 8007610:	0800ddcc 	.word	0x0800ddcc
 8007614:	0800dda4 	.word	0x0800dda4
 8007618:	20000014 	.word	0x20000014
 800761c:	20000128 	.word	0x20000128
 8007620:	200001e8 	.word	0x200001e8
 8007624:	20000250 	.word	0x20000250
 8007628:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800762c:	4b3f      	ldr	r3, [pc, #252]	; (800772c <takeWifiPass+0x39c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3b01      	subs	r3, #1
 8007632:	4a3e      	ldr	r2, [pc, #248]	; (800772c <takeWifiPass+0x39c>)
 8007634:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8007636:	20fa      	movs	r0, #250	; 0xfa
 8007638:	f001 f916 	bl	8008868 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800763c:	2102      	movs	r1, #2
 800763e:	483c      	ldr	r0, [pc, #240]	; (8007730 <takeWifiPass+0x3a0>)
 8007640:	f001 fee2 	bl	8009408 <HAL_GPIO_ReadPin>
 8007644:	4603      	mov	r3, r0
 8007646:	2b01      	cmp	r3, #1
 8007648:	d127      	bne.n	800769a <takeWifiPass+0x30a>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3b01      	subs	r3, #1
 800764e:	4618      	mov	r0, r3
 8007650:	f7f9 f8b0 	bl	80007b4 <getCharFromCursorPosition>
 8007654:	4603      	mov	r3, r0
 8007656:	4619      	mov	r1, r3
 8007658:	4a36      	ldr	r2, [pc, #216]	; (8007734 <takeWifiPass+0x3a4>)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	4413      	add	r3, r2
 800765e:	460a      	mov	r2, r1
 8007660:	701a      	strb	r2, [r3, #0]
        	wifiPassLocArr[wifiPassLoc] = realCharPos - 1;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	3b01      	subs	r3, #1
 8007668:	b2d9      	uxtb	r1, r3
 800766a:	4a33      	ldr	r2, [pc, #204]	; (8007738 <takeWifiPass+0x3a8>)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4413      	add	r3, r2
 8007670:	460a      	mov	r2, r1
 8007672:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	b2d9      	uxtb	r1, r3
 8007678:	4a2e      	ldr	r2, [pc, #184]	; (8007734 <takeWifiPass+0x3a4>)
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4413      	add	r3, r2
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	2001      	movs	r0, #1
 8007684:	f000 fbaf 	bl	8007de6 <lcd_print_char>

            writeLoc++;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3301      	adds	r3, #1
 800768c:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3301      	adds	r3, #1
 8007692:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 8007694:	20fa      	movs	r0, #250	; 0xfa
 8007696:	f001 f8e7 	bl	8008868 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800769a:	2104      	movs	r1, #4
 800769c:	4824      	ldr	r0, [pc, #144]	; (8007730 <takeWifiPass+0x3a0>)
 800769e:	f001 feb3 	bl	8009408 <HAL_GPIO_ReadPin>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d133      	bne.n	8007710 <takeWifiPass+0x380>
            if(strlen(wifiPass) >= 1) {
 80076a8:	4b22      	ldr	r3, [pc, #136]	; (8007734 <takeWifiPass+0x3a4>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d02c      	beq.n	800770a <takeWifiPass+0x37a>
            	wifiPass[wifiPassLoc] = '\0';
 80076b0:	4a20      	ldr	r2, [pc, #128]	; (8007734 <takeWifiPass+0x3a4>)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	4413      	add	r3, r2
 80076b6:	2200      	movs	r2, #0
 80076b8:	701a      	strb	r2, [r3, #0]
            	wifiPassLocArr[wifiPassLoc] = '\0';
 80076ba:	4a1f      	ldr	r2, [pc, #124]	; (8007738 <takeWifiPass+0x3a8>)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4413      	add	r3, r2
 80076c0:	2200      	movs	r2, #0
 80076c2:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	3306      	adds	r3, #6
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	4619      	mov	r1, r3
 80076ce:	2001      	movs	r0, #1
 80076d0:	f000 fbaa 	bl	8007e28 <lcd_delete_char>
            	HAL_Delay(50);
 80076d4:	2032      	movs	r0, #50	; 0x32
 80076d6:	f001 f8c7 	bl	8008868 <HAL_Delay>

            	if(writeLoc > 7) {
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b07      	cmp	r3, #7
 80076de:	dd03      	ble.n	80076e8 <takeWifiPass+0x358>
            		writeLoc--;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	607b      	str	r3, [r7, #4]
 80076e6:	e004      	b.n	80076f2 <takeWifiPass+0x362>
            	} else if(writeLoc < 7) {
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b06      	cmp	r3, #6
 80076ec:	dc01      	bgt.n	80076f2 <takeWifiPass+0x362>
            		writeLoc = 7;
 80076ee:	2307      	movs	r3, #7
 80076f0:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dd03      	ble.n	8007700 <takeWifiPass+0x370>
            		wifiPassLoc--;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	60bb      	str	r3, [r7, #8]
 80076fe:	e004      	b.n	800770a <takeWifiPass+0x37a>
            	} else if(wifiPassLoc < 0) {
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	da01      	bge.n	800770a <takeWifiPass+0x37a>
            		wifiPassLoc = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	60bb      	str	r3, [r7, #8]
            	}
            }

            HAL_Delay(250);
 800770a:	20fa      	movs	r0, #250	; 0xfa
 800770c:	f001 f8ac 	bl	8008868 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007710:	4b06      	ldr	r3, [pc, #24]	; (800772c <takeWifiPass+0x39c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	4619      	mov	r1, r3
 8007718:	2002      	movs	r0, #2
 800771a:	f000 fb30 	bl	8007d7e <lcd_gotoxy>
        bekle();
 800771e:	f7fd f9ed 	bl	8004afc <bekle>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007722:	e654      	b.n	80073ce <takeWifiPass+0x3e>
    }
}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bdb0      	pop	{r4, r5, r7, pc}
 800772c:	20000000 	.word	0x20000000
 8007730:	40010800 	.word	0x40010800
 8007734:	200001c0 	.word	0x200001c0
 8007738:	200001e8 	.word	0x200001e8

0800773c <mergeData>:

char* mergeData() {
 800773c:	b580      	push	{r7, lr}
 800773e:	b09c      	sub	sp, #112	; 0x70
 8007740:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007742:	2300      	movs	r3, #0
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007746:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800774a:	2228      	movs	r2, #40	; 0x28
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f004 ffad 	bl	800c6ae <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007754:	4b67      	ldr	r3, [pc, #412]	; (80078f4 <mergeData+0x1b8>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	713b      	strb	r3, [r7, #4]
 800775a:	4b67      	ldr	r3, [pc, #412]	; (80078f8 <mergeData+0x1bc>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	717b      	strb	r3, [r7, #5]
 8007760:	4b66      	ldr	r3, [pc, #408]	; (80078fc <mergeData+0x1c0>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	71bb      	strb	r3, [r7, #6]
 8007766:	4b66      	ldr	r3, [pc, #408]	; (8007900 <mergeData+0x1c4>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	71fb      	strb	r3, [r7, #7]
 800776c:	4b65      	ldr	r3, [pc, #404]	; (8007904 <mergeData+0x1c8>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	723b      	strb	r3, [r7, #8]
 8007772:	4b65      	ldr	r3, [pc, #404]	; (8007908 <mergeData+0x1cc>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	727b      	strb	r3, [r7, #9]
 8007778:	4b64      	ldr	r3, [pc, #400]	; (800790c <mergeData+0x1d0>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	72bb      	strb	r3, [r7, #10]
 800777e:	4b64      	ldr	r3, [pc, #400]	; (8007910 <mergeData+0x1d4>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	72fb      	strb	r3, [r7, #11]
 8007784:	4b63      	ldr	r3, [pc, #396]	; (8007914 <mergeData+0x1d8>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	733b      	strb	r3, [r7, #12]
 800778a:	4b63      	ldr	r3, [pc, #396]	; (8007918 <mergeData+0x1dc>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	737b      	strb	r3, [r7, #13]
 8007790:	4b62      	ldr	r3, [pc, #392]	; (800791c <mergeData+0x1e0>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	73bb      	strb	r3, [r7, #14]
 8007796:	4b62      	ldr	r3, [pc, #392]	; (8007920 <mergeData+0x1e4>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	73fb      	strb	r3, [r7, #15]
 800779c:	4b61      	ldr	r3, [pc, #388]	; (8007924 <mergeData+0x1e8>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	743b      	strb	r3, [r7, #16]
 80077a2:	4b61      	ldr	r3, [pc, #388]	; (8007928 <mergeData+0x1ec>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	747b      	strb	r3, [r7, #17]
 80077a8:	4b60      	ldr	r3, [pc, #384]	; (800792c <mergeData+0x1f0>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	74bb      	strb	r3, [r7, #18]
 80077ae:	4b60      	ldr	r3, [pc, #384]	; (8007930 <mergeData+0x1f4>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	74fb      	strb	r3, [r7, #19]
 80077b4:	4b5f      	ldr	r3, [pc, #380]	; (8007934 <mergeData+0x1f8>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	753b      	strb	r3, [r7, #20]
 80077ba:	4b5f      	ldr	r3, [pc, #380]	; (8007938 <mergeData+0x1fc>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	757b      	strb	r3, [r7, #21]
 80077c0:	4b5e      	ldr	r3, [pc, #376]	; (800793c <mergeData+0x200>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	75bb      	strb	r3, [r7, #22]
 80077c6:	4b5e      	ldr	r3, [pc, #376]	; (8007940 <mergeData+0x204>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	75fb      	strb	r3, [r7, #23]
 80077cc:	4b5d      	ldr	r3, [pc, #372]	; (8007944 <mergeData+0x208>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	763b      	strb	r3, [r7, #24]
 80077d2:	4b5d      	ldr	r3, [pc, #372]	; (8007948 <mergeData+0x20c>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	767b      	strb	r3, [r7, #25]
 80077d8:	4b5c      	ldr	r3, [pc, #368]	; (800794c <mergeData+0x210>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	76bb      	strb	r3, [r7, #26]
 80077de:	4b5c      	ldr	r3, [pc, #368]	; (8007950 <mergeData+0x214>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	76fb      	strb	r3, [r7, #27]
 80077e4:	4b5b      	ldr	r3, [pc, #364]	; (8007954 <mergeData+0x218>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	773b      	strb	r3, [r7, #28]
 80077ea:	4b5b      	ldr	r3, [pc, #364]	; (8007958 <mergeData+0x21c>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	777b      	strb	r3, [r7, #29]
 80077f0:	4b5a      	ldr	r3, [pc, #360]	; (800795c <mergeData+0x220>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	77bb      	strb	r3, [r7, #30]
 80077f6:	4b5a      	ldr	r3, [pc, #360]	; (8007960 <mergeData+0x224>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	77fb      	strb	r3, [r7, #31]
 80077fc:	4b59      	ldr	r3, [pc, #356]	; (8007964 <mergeData+0x228>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f887 3020 	strb.w	r3, [r7, #32]
 8007804:	4b58      	ldr	r3, [pc, #352]	; (8007968 <mergeData+0x22c>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800780c:	4b57      	ldr	r3, [pc, #348]	; (800796c <mergeData+0x230>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007814:	4b56      	ldr	r3, [pc, #344]	; (8007970 <mergeData+0x234>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781c:	4b55      	ldr	r3, [pc, #340]	; (8007974 <mergeData+0x238>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007824:	4b54      	ldr	r3, [pc, #336]	; (8007978 <mergeData+0x23c>)
 8007826:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800782a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 800782e:	4b52      	ldr	r3, [pc, #328]	; (8007978 <mergeData+0x23c>)
 8007830:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007834:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007838:	4b4f      	ldr	r3, [pc, #316]	; (8007978 <mergeData+0x23c>)
 800783a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800783e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007842:	4b4d      	ldr	r3, [pc, #308]	; (8007978 <mergeData+0x23c>)
 8007844:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007848:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 800784c:	4b4a      	ldr	r3, [pc, #296]	; (8007978 <mergeData+0x23c>)
 800784e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007852:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007856:	4b48      	ldr	r3, [pc, #288]	; (8007978 <mergeData+0x23c>)
 8007858:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800785c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8007860:	4b45      	ldr	r3, [pc, #276]	; (8007978 <mergeData+0x23c>)
 8007862:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8007866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 800786a:	4b43      	ldr	r3, [pc, #268]	; (8007978 <mergeData+0x23c>)
 800786c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8007870:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8007874:	4b40      	ldr	r3, [pc, #256]	; (8007978 <mergeData+0x23c>)
 8007876:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 800787a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 800787e:	4b3e      	ldr	r3, [pc, #248]	; (8007978 <mergeData+0x23c>)
 8007880:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8007884:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007888:	2306      	movs	r3, #6
 800788a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800788e:	2300      	movs	r3, #0
 8007890:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007892:	e015      	b.n	80078c0 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8007894:	1d3a      	adds	r2, r7, #4
 8007896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007898:	4413      	add	r3, r2
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078a2:	4936      	ldr	r1, [pc, #216]	; (800797c <mergeData+0x240>)
 80078a4:	4618      	mov	r0, r3
 80078a6:	f004 fe91 	bl	800c5cc <siprintf>
	    strcat(combinedString, temp);
 80078aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80078ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078b2:	4611      	mov	r1, r2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f004 feeb 	bl	800c690 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80078ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078bc:	3301      	adds	r3, #1
 80078be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c2:	2b2b      	cmp	r3, #43	; 0x2b
 80078c4:	d9e6      	bls.n	8007894 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80078c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7f8 fcaa 	bl	8000224 <strlen>
 80078d0:	4603      	mov	r3, r0
 80078d2:	3301      	adds	r3, #1
 80078d4:	4618      	mov	r0, r3
 80078d6:	f004 fdc5 	bl	800c464 <malloc>
 80078da:	4603      	mov	r3, r0
 80078dc:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 80078de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80078e2:	4619      	mov	r1, r3
 80078e4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80078e6:	f004 ff27 	bl	800c738 <strcpy>
	return result;
 80078ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3770      	adds	r7, #112	; 0x70
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000233 	.word	0x20000233
 80078f8:	20000225 	.word	0x20000225
 80078fc:	20000228 	.word	0x20000228
 8007900:	20000229 	.word	0x20000229
 8007904:	2000022a 	.word	0x2000022a
 8007908:	20000231 	.word	0x20000231
 800790c:	2000022b 	.word	0x2000022b
 8007910:	2000022c 	.word	0x2000022c
 8007914:	20000230 	.word	0x20000230
 8007918:	2000022d 	.word	0x2000022d
 800791c:	2000023d 	.word	0x2000023d
 8007920:	2000022e 	.word	0x2000022e
 8007924:	2000023e 	.word	0x2000023e
 8007928:	2000022f 	.word	0x2000022f
 800792c:	2000023f 	.word	0x2000023f
 8007930:	20000232 	.word	0x20000232
 8007934:	20000234 	.word	0x20000234
 8007938:	20000235 	.word	0x20000235
 800793c:	20000236 	.word	0x20000236
 8007940:	20000237 	.word	0x20000237
 8007944:	20000238 	.word	0x20000238
 8007948:	20000239 	.word	0x20000239
 800794c:	2000023a 	.word	0x2000023a
 8007950:	2000023b 	.word	0x2000023b
 8007954:	2000023c 	.word	0x2000023c
 8007958:	20000240 	.word	0x20000240
 800795c:	20000242 	.word	0x20000242
 8007960:	20000221 	.word	0x20000221
 8007964:	20000222 	.word	0x20000222
 8007968:	20000008 	.word	0x20000008
 800796c:	20000009 	.word	0x20000009
 8007970:	20000223 	.word	0x20000223
 8007974:	20000245 	.word	0x20000245
 8007978:	20000128 	.word	0x20000128
 800797c:	0800dde0 	.word	0x0800dde0

08007980 <convertAndSendData>:

void convertAndSendData() {
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 8007986:	4b1c      	ldr	r3, [pc, #112]	; (80079f8 <convertAndSendData+0x78>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 800798e:	4a1b      	ldr	r2, [pc, #108]	; (80079fc <convertAndSendData+0x7c>)
 8007990:	2101      	movs	r1, #1
 8007992:	2001      	movs	r0, #1
 8007994:	f000 fa12 	bl	8007dbc <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 8007998:	4a19      	ldr	r2, [pc, #100]	; (8007a00 <convertAndSendData+0x80>)
 800799a:	2101      	movs	r1, #1
 800799c:	2002      	movs	r0, #2
 800799e:	f000 fa0d 	bl	8007dbc <lcd_print>
 80079a2:	e009      	b.n	80079b8 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80079a4:	4a17      	ldr	r2, [pc, #92]	; (8007a04 <convertAndSendData+0x84>)
 80079a6:	2101      	movs	r1, #1
 80079a8:	2001      	movs	r0, #1
 80079aa:	f000 fa07 	bl	8007dbc <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80079ae:	4a16      	ldr	r2, [pc, #88]	; (8007a08 <convertAndSendData+0x88>)
 80079b0:	2101      	movs	r1, #1
 80079b2:	2002      	movs	r0, #2
 80079b4:	f000 fa02 	bl	8007dbc <lcd_print>
	}
	for(int i=0; i<2; i++) {
 80079b8:	2300      	movs	r3, #0
 80079ba:	607b      	str	r3, [r7, #4]
 80079bc:	e00a      	b.n	80079d4 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 80079be:	f7ff febd 	bl	800773c <mergeData>
 80079c2:	4603      	mov	r3, r0
 80079c4:	461a      	mov	r2, r3
 80079c6:	4911      	ldr	r1, [pc, #68]	; (8007a0c <convertAndSendData+0x8c>)
 80079c8:	4811      	ldr	r0, [pc, #68]	; (8007a10 <convertAndSendData+0x90>)
 80079ca:	f7f8 fffd 	bl	80009c8 <sendMachineData>
	for(int i=0; i<2; i++) {
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3301      	adds	r3, #1
 80079d2:	607b      	str	r3, [r7, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	ddf1      	ble.n	80079be <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 80079da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079de:	f000 ff43 	bl	8008868 <HAL_Delay>
	lcd_clear();
 80079e2:	f000 fa17 	bl	8007e14 <lcd_clear>
	HAL_Delay(500);
 80079e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80079ea:	f000 ff3d 	bl	8008868 <HAL_Delay>
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20000245 	.word	0x20000245
 80079fc:	0800dde4 	.word	0x0800dde4
 8007a00:	0800ddf8 	.word	0x0800ddf8
 8007a04:	0800de0c 	.word	0x0800de0c
 8007a08:	0800de20 	.word	0x0800de20
 8007a0c:	200001a0 	.word	0x200001a0
 8007a10:	20000448 	.word	0x20000448

08007a14 <iotSetup>:

void iotSetup() {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007a18:	4b17      	ldr	r3, [pc, #92]	; (8007a78 <iotSetup+0x64>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01d      	beq.n	8007a5c <iotSetup+0x48>
		if(machineID[machineIDCharacterLimit-1] == '\0') {
 8007a20:	4b16      	ldr	r3, [pc, #88]	; (8007a7c <iotSetup+0x68>)
 8007a22:	7adb      	ldrb	r3, [r3, #11]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <iotSetup+0x18>
			takeMachineID();
 8007a28:	f7ff f974 	bl	8006d14 <takeMachineID>
		}
		HAL_Delay(500);
 8007a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a30:	f000 ff1a 	bl	8008868 <HAL_Delay>

		if(wifiSSID[0] != '\0') {
 8007a34:	4b12      	ldr	r3, [pc, #72]	; (8007a80 <iotSetup+0x6c>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <iotSetup+0x2c>
			takeWifiSSID();
 8007a3c:	f7ff fad2 	bl	8006fe4 <takeWifiSSID>
		}
		HAL_Delay(500);
 8007a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a44:	f000 ff10 	bl	8008868 <HAL_Delay>

		if(wifiPass[0] != '\0') {
 8007a48:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <iotSetup+0x70>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <iotSetup+0x40>
			takeWifiPass();
 8007a50:	f7ff fc9e 	bl	8007390 <takeWifiPass>
		}
		HAL_Delay(500);
 8007a54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a58:	f000 ff06 	bl	8008868 <HAL_Delay>
	}

	//ESP8266_Init(&huart1, "iPhone", "ipek123456");
	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007a5c:	4a09      	ldr	r2, [pc, #36]	; (8007a84 <iotSetup+0x70>)
 8007a5e:	4908      	ldr	r1, [pc, #32]	; (8007a80 <iotSetup+0x6c>)
 8007a60:	4809      	ldr	r0, [pc, #36]	; (8007a88 <iotSetup+0x74>)
 8007a62:	f7f8 ff07 	bl	8000874 <ESP8266_Init>
	HAL_Delay(500);
 8007a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a6a:	f000 fefd 	bl	8008868 <HAL_Delay>
	convertAndSendData();
 8007a6e:	f7ff ff87 	bl	8007980 <convertAndSendData>
}
 8007a72:	bf00      	nop
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000243 	.word	0x20000243
 8007a7c:	200001a0 	.word	0x200001a0
 8007a80:	200001ac 	.word	0x200001ac
 8007a84:	200001c0 	.word	0x200001c0
 8007a88:	20000448 	.word	0x20000448

08007a8c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	4603      	mov	r3, r0
 8007a94:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	f023 030f 	bic.w	r3, r3, #15
 8007a9c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8007aa4:	7b7b      	ldrb	r3, [r7, #13]
 8007aa6:	f043 030c 	orr.w	r3, r3, #12
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8007aae:	7b7b      	ldrb	r3, [r7, #13]
 8007ab0:	f043 0308 	orr.w	r3, r3, #8
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8007ab8:	7b3b      	ldrb	r3, [r7, #12]
 8007aba:	f043 030c 	orr.w	r3, r3, #12
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8007ac2:	7b3b      	ldrb	r3, [r7, #12]
 8007ac4:	f043 0308 	orr.w	r3, r3, #8
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007acc:	bf00      	nop
 8007ace:	4825      	ldr	r0, [pc, #148]	; (8007b64 <lcd_send_cmd+0xd8>)
 8007ad0:	f002 fac3 	bl	800a05a <HAL_I2C_GetError>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d0f9      	beq.n	8007ace <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007ada:	bf00      	nop
 8007adc:	4821      	ldr	r0, [pc, #132]	; (8007b64 <lcd_send_cmd+0xd8>)
 8007ade:	f002 faaf 	bl	800a040 <HAL_I2C_GetState>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d1f9      	bne.n	8007adc <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007ae8:	4b1f      	ldr	r3, [pc, #124]	; (8007b68 <lcd_send_cmd+0xdc>)
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d116      	bne.n	8007b1e <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007af0:	2300      	movs	r3, #0
 8007af2:	73fb      	strb	r3, [r7, #15]
 8007af4:	e00f      	b.n	8007b16 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	3310      	adds	r3, #16
 8007afa:	443b      	add	r3, r7
 8007afc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	f022 0208 	bic.w	r2, r2, #8
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	3310      	adds	r3, #16
 8007b0a:	443b      	add	r3, r7
 8007b0c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	3301      	adds	r3, #1
 8007b14:	73fb      	strb	r3, [r7, #15]
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	d9ec      	bls.n	8007af6 <lcd_send_cmd+0x6a>
 8007b1c:	e015      	b.n	8007b4a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007b1e:	2300      	movs	r3, #0
 8007b20:	73bb      	strb	r3, [r7, #14]
 8007b22:	e00f      	b.n	8007b44 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	3310      	adds	r3, #16
 8007b28:	443b      	add	r3, r7
 8007b2a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	f042 0208 	orr.w	r2, r2, #8
 8007b34:	b2d2      	uxtb	r2, r2
 8007b36:	3310      	adds	r3, #16
 8007b38:	443b      	add	r3, r7
 8007b3a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	3301      	adds	r3, #1
 8007b42:	73bb      	strb	r3, [r7, #14]
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d9ec      	bls.n	8007b24 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007b4a:	f107 0208 	add.w	r2, r7, #8
 8007b4e:	2364      	movs	r3, #100	; 0x64
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	2304      	movs	r3, #4
 8007b54:	214e      	movs	r1, #78	; 0x4e
 8007b56:	4803      	ldr	r0, [pc, #12]	; (8007b64 <lcd_send_cmd+0xd8>)
 8007b58:	f001 fe12 	bl	8009780 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	200003ac 	.word	0x200003ac
 8007b68:	20000382 	.word	0x20000382

08007b6c <lcd_send_data>:

void lcd_send_data (char data) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af02      	add	r7, sp, #8
 8007b72:	4603      	mov	r3, r0
 8007b74:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	f023 030f 	bic.w	r3, r3, #15
 8007b7c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8007b84:	7b7b      	ldrb	r3, [r7, #13]
 8007b86:	f043 030d 	orr.w	r3, r3, #13
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8007b8e:	7b7b      	ldrb	r3, [r7, #13]
 8007b90:	f043 0309 	orr.w	r3, r3, #9
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8007b98:	7b3b      	ldrb	r3, [r7, #12]
 8007b9a:	f043 030d 	orr.w	r3, r3, #13
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8007ba2:	7b3b      	ldrb	r3, [r7, #12]
 8007ba4:	f043 0309 	orr.w	r3, r3, #9
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007bac:	bf00      	nop
 8007bae:	4825      	ldr	r0, [pc, #148]	; (8007c44 <lcd_send_data+0xd8>)
 8007bb0:	f002 fa53 	bl	800a05a <HAL_I2C_GetError>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	d0f9      	beq.n	8007bae <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007bba:	bf00      	nop
 8007bbc:	4821      	ldr	r0, [pc, #132]	; (8007c44 <lcd_send_data+0xd8>)
 8007bbe:	f002 fa3f 	bl	800a040 <HAL_I2C_GetState>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	d1f9      	bne.n	8007bbc <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007bc8:	4b1f      	ldr	r3, [pc, #124]	; (8007c48 <lcd_send_data+0xdc>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d116      	bne.n	8007bfe <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73fb      	strb	r3, [r7, #15]
 8007bd4:	e00f      	b.n	8007bf6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	3310      	adds	r3, #16
 8007bda:	443b      	add	r3, r7
 8007bdc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	f022 0208 	bic.w	r2, r2, #8
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	3310      	adds	r3, #16
 8007bea:	443b      	add	r3, r7
 8007bec:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	73fb      	strb	r3, [r7, #15]
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d9ec      	bls.n	8007bd6 <lcd_send_data+0x6a>
 8007bfc:	e015      	b.n	8007c2a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73bb      	strb	r3, [r7, #14]
 8007c02:	e00f      	b.n	8007c24 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	3310      	adds	r3, #16
 8007c08:	443b      	add	r3, r7
 8007c0a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	f042 0208 	orr.w	r2, r2, #8
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	3310      	adds	r3, #16
 8007c18:	443b      	add	r3, r7
 8007c1a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	3301      	adds	r3, #1
 8007c22:	73bb      	strb	r3, [r7, #14]
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d9ec      	bls.n	8007c04 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007c2a:	f107 0208 	add.w	r2, r7, #8
 8007c2e:	2364      	movs	r3, #100	; 0x64
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	2304      	movs	r3, #4
 8007c34:	214e      	movs	r1, #78	; 0x4e
 8007c36:	4803      	ldr	r0, [pc, #12]	; (8007c44 <lcd_send_data+0xd8>)
 8007c38:	f001 fda2 	bl	8009780 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007c3c:	bf00      	nop
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	200003ac 	.word	0x200003ac
 8007c48:	20000382 	.word	0x20000382

08007c4c <lcd_send_string>:

void lcd_send_string (char *str) {
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007c54:	e006      	b.n	8007c64 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff ff84 	bl	8007b6c <lcd_send_data>
	while (*str) {
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1f4      	bne.n	8007c56 <lcd_send_string+0xa>
	}
}
 8007c6c:	bf00      	nop
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <lcd_send_char>:

void lcd_send_char(char ch) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	4603      	mov	r3, r0
 8007c80:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8007c82:	79fb      	ldrb	r3, [r7, #7]
 8007c84:	f023 030f 	bic.w	r3, r3, #15
 8007c88:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8007c90:	7b7b      	ldrb	r3, [r7, #13]
 8007c92:	f043 030d 	orr.w	r3, r3, #13
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8007c9a:	7b7b      	ldrb	r3, [r7, #13]
 8007c9c:	f043 0309 	orr.w	r3, r3, #9
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8007ca4:	7b3b      	ldrb	r3, [r7, #12]
 8007ca6:	f043 030d 	orr.w	r3, r3, #13
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8007cae:	7b3b      	ldrb	r3, [r7, #12]
 8007cb0:	f043 0309 	orr.w	r3, r3, #9
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007cb8:	bf00      	nop
 8007cba:	4825      	ldr	r0, [pc, #148]	; (8007d50 <lcd_send_char+0xd8>)
 8007cbc:	f002 f9cd 	bl	800a05a <HAL_I2C_GetError>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d0f9      	beq.n	8007cba <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007cc6:	bf00      	nop
 8007cc8:	4821      	ldr	r0, [pc, #132]	; (8007d50 <lcd_send_char+0xd8>)
 8007cca:	f002 f9b9 	bl	800a040 <HAL_I2C_GetState>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b20      	cmp	r3, #32
 8007cd2:	d1f9      	bne.n	8007cc8 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007cd4:	4b1f      	ldr	r3, [pc, #124]	; (8007d54 <lcd_send_char+0xdc>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d116      	bne.n	8007d0a <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]
 8007ce0:	e00f      	b.n	8007d02 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	3310      	adds	r3, #16
 8007ce6:	443b      	add	r3, r7
 8007ce8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	f022 0208 	bic.w	r2, r2, #8
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	3310      	adds	r3, #16
 8007cf6:	443b      	add	r3, r7
 8007cf8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	73fb      	strb	r3, [r7, #15]
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d9ec      	bls.n	8007ce2 <lcd_send_char+0x6a>
 8007d08:	e015      	b.n	8007d36 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73bb      	strb	r3, [r7, #14]
 8007d0e:	e00f      	b.n	8007d30 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	3310      	adds	r3, #16
 8007d14:	443b      	add	r3, r7
 8007d16:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	f042 0208 	orr.w	r2, r2, #8
 8007d20:	b2d2      	uxtb	r2, r2
 8007d22:	3310      	adds	r3, #16
 8007d24:	443b      	add	r3, r7
 8007d26:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007d2a:	7bbb      	ldrb	r3, [r7, #14]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	73bb      	strb	r3, [r7, #14]
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d9ec      	bls.n	8007d10 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007d36:	f107 0208 	add.w	r2, r7, #8
 8007d3a:	2364      	movs	r3, #100	; 0x64
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	2304      	movs	r3, #4
 8007d40:	214e      	movs	r1, #78	; 0x4e
 8007d42:	4803      	ldr	r0, [pc, #12]	; (8007d50 <lcd_send_char+0xd8>)
 8007d44:	f001 fd1c 	bl	8009780 <HAL_I2C_Master_Transmit>
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	200003ac 	.word	0x200003ac
 8007d54:	20000382 	.word	0x20000382

08007d58 <lcd_init>:

void lcd_init (void) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007d5c:	2002      	movs	r0, #2
 8007d5e:	f7ff fe95 	bl	8007a8c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007d62:	2028      	movs	r0, #40	; 0x28
 8007d64:	f7ff fe92 	bl	8007a8c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007d68:	200c      	movs	r0, #12
 8007d6a:	f7ff fe8f 	bl	8007a8c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007d6e:	2080      	movs	r0, #128	; 0x80
 8007d70:	f7ff fe8c 	bl	8007a8c <lcd_send_cmd>
	lcd_backlight(1);
 8007d74:	2001      	movs	r0, #1
 8007d76:	f000 f86d 	bl	8007e54 <lcd_backlight>
}
 8007d7a:	bf00      	nop
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	4603      	mov	r3, r0
 8007d86:	460a      	mov	r2, r1
 8007d88:	71fb      	strb	r3, [r7, #7]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d106      	bne.n	8007da2 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007d94:	79bb      	ldrb	r3, [r7, #6]
 8007d96:	337f      	adds	r3, #127	; 0x7f
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff fe76 	bl	8007a8c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007da0:	e008      	b.n	8007db4 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d105      	bne.n	8007db4 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007da8:	79bb      	ldrb	r3, [r7, #6]
 8007daa:	3b41      	subs	r3, #65	; 0x41
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fe6c 	bl	8007a8c <lcd_send_cmd>
}
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	603a      	str	r2, [r7, #0]
 8007dc6:	71fb      	strb	r3, [r7, #7]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007dcc:	79ba      	ldrb	r2, [r7, #6]
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff ffd3 	bl	8007d7e <lcd_gotoxy>
	lcd_send_string(str);
 8007dd8:	6838      	ldr	r0, [r7, #0]
 8007dda:	f7ff ff37 	bl	8007c4c <lcd_send_string>
}
 8007dde:	bf00      	nop
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	4603      	mov	r3, r0
 8007dee:	71fb      	strb	r3, [r7, #7]
 8007df0:	460b      	mov	r3, r1
 8007df2:	71bb      	strb	r3, [r7, #6]
 8007df4:	4613      	mov	r3, r2
 8007df6:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007df8:	79ba      	ldrb	r2, [r7, #6]
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff ffbd 	bl	8007d7e <lcd_gotoxy>
    lcd_send_char(ch);
 8007e04:	797b      	ldrb	r3, [r7, #5]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff ff36 	bl	8007c78 <lcd_send_char>
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <lcd_clear>:

void lcd_clear(void) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007e18:	2001      	movs	r0, #1
 8007e1a:	f7ff fe37 	bl	8007a8c <lcd_send_cmd>
    HAL_Delay(2);
 8007e1e:	2002      	movs	r0, #2
 8007e20:	f000 fd22 	bl	8008868 <HAL_Delay>
}
 8007e24:	bf00      	nop
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	460a      	mov	r2, r1
 8007e32:	71fb      	strb	r3, [r7, #7]
 8007e34:	4613      	mov	r3, r2
 8007e36:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007e38:	79ba      	ldrb	r2, [r7, #6]
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff ff9d 	bl	8007d7e <lcd_gotoxy>

    lcd_send_char(' ');
 8007e44:	2020      	movs	r0, #32
 8007e46:	f7ff ff17 	bl	8007c78 <lcd_send_char>
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007e5e:	4a05      	ldr	r2, [pc, #20]	; (8007e74 <lcd_backlight+0x20>)
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007e64:	2000      	movs	r0, #0
 8007e66:	f7ff fe11 	bl	8007a8c <lcd_send_cmd>
}
 8007e6a:	bf00      	nop
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000382 	.word	0x20000382

08007e78 <lcd_cursor>:

void lcd_cursor(int state) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d106      	bne.n	8007e94 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007e86:	200e      	movs	r0, #14
 8007e88:	f7ff fe00 	bl	8007a8c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007e8c:	200f      	movs	r0, #15
 8007e8e:	f7ff fdfd 	bl	8007a8c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007e92:	e002      	b.n	8007e9a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007e94:	200c      	movs	r0, #12
 8007e96:	f7ff fdf9 	bl	8007a8c <lcd_send_cmd>
}
 8007e9a:	bf00      	nop
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007eac:	4b04      	ldr	r3, [pc, #16]	; (8007ec0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	4a03      	ldr	r2, [pc, #12]	; (8007ec0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007eb4:	6013      	str	r3, [r2, #0]
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bc80      	pop	{r7}
 8007ebe:	4770      	bx	lr
 8007ec0:	20000200 	.word	0x20000200

08007ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ec8:	f000 fc6c 	bl	80087a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007ecc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ed0:	f000 fcca 	bl	8008868 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ed4:	f000 f89c 	bl	8008010 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ed8:	f000 f9be 	bl	8008258 <MX_GPIO_Init>
  MX_CAN_Init();
 8007edc:	f000 f8de 	bl	800809c <MX_CAN_Init>
  MX_I2C1_Init();
 8007ee0:	f000 f910 	bl	8008104 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007ee4:	f000 f93c 	bl	8008160 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007ee8:	f000 f98c 	bl	8008204 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007eec:	2201      	movs	r2, #1
 8007eee:	2140      	movs	r1, #64	; 0x40
 8007ef0:	483e      	ldr	r0, [pc, #248]	; (8007fec <main+0x128>)
 8007ef2:	f001 faa0 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	2180      	movs	r1, #128	; 0x80
 8007efa:	483c      	ldr	r0, [pc, #240]	; (8007fec <main+0x128>)
 8007efc:	f001 fa9b 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007f00:	200a      	movs	r0, #10
 8007f02:	f000 fcb1 	bl	8008868 <HAL_Delay>
  lcd_init();
 8007f06:	f7ff ff27 	bl	8007d58 <lcd_init>
  HAL_Delay(10);
 8007f0a:	200a      	movs	r0, #10
 8007f0c:	f000 fcac 	bl	8008868 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007f10:	4837      	ldr	r0, [pc, #220]	; (8007ff0 <main+0x12c>)
 8007f12:	f003 f943 	bl	800b19c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007f16:	bf00      	nop
 8007f18:	4836      	ldr	r0, [pc, #216]	; (8007ff4 <main+0x130>)
 8007f1a:	f002 f89e 	bl	800a05a <HAL_I2C_GetError>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d0f9      	beq.n	8007f18 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007f24:	bf00      	nop
 8007f26:	4833      	ldr	r0, [pc, #204]	; (8007ff4 <main+0x130>)
 8007f28:	f002 f88a 	bl	800a040 <HAL_I2C_GetState>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	d1f9      	bne.n	8007f26 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f32:	2200      	movs	r2, #0
 8007f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f38:	482c      	ldr	r0, [pc, #176]	; (8007fec <main+0x128>)
 8007f3a:	f001 fa7c 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f44:	4829      	ldr	r0, [pc, #164]	; (8007fec <main+0x128>)
 8007f46:	f001 fa76 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2104      	movs	r1, #4
 8007f4e:	4827      	ldr	r0, [pc, #156]	; (8007fec <main+0x128>)
 8007f50:	f001 fa71 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f54:	2200      	movs	r2, #0
 8007f56:	2102      	movs	r1, #2
 8007f58:	4824      	ldr	r0, [pc, #144]	; (8007fec <main+0x128>)
 8007f5a:	f001 fa6c 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2101      	movs	r1, #1
 8007f62:	4822      	ldr	r0, [pc, #136]	; (8007fec <main+0x128>)
 8007f64:	f001 fa67 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2120      	movs	r1, #32
 8007f6c:	4822      	ldr	r0, [pc, #136]	; (8007ff8 <main+0x134>)
 8007f6e:	f001 fa62 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f72:	2200      	movs	r2, #0
 8007f74:	2110      	movs	r1, #16
 8007f76:	4820      	ldr	r0, [pc, #128]	; (8007ff8 <main+0x134>)
 8007f78:	f001 fa5d 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2180      	movs	r1, #128	; 0x80
 8007f80:	481e      	ldr	r0, [pc, #120]	; (8007ffc <main+0x138>)
 8007f82:	f001 fa58 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f86:	2200      	movs	r2, #0
 8007f88:	2140      	movs	r1, #64	; 0x40
 8007f8a:	481c      	ldr	r0, [pc, #112]	; (8007ffc <main+0x138>)
 8007f8c:	f001 fa53 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f90:	2200      	movs	r2, #0
 8007f92:	2120      	movs	r1, #32
 8007f94:	4819      	ldr	r0, [pc, #100]	; (8007ffc <main+0x138>)
 8007f96:	f001 fa4e 	bl	8009436 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2110      	movs	r1, #16
 8007f9e:	4817      	ldr	r0, [pc, #92]	; (8007ffc <main+0x138>)
 8007fa0:	f001 fa49 	bl	8009436 <HAL_GPIO_WritePin>

  i2cTest();
 8007fa4:	f7f8 fef0 	bl	8000d88 <i2cTest>
  HAL_Delay(100);
 8007fa8:	2064      	movs	r0, #100	; 0x64
 8007faa:	f000 fc5d 	bl	8008868 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007fae:	4a14      	ldr	r2, [pc, #80]	; (8008000 <main+0x13c>)
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	f7ff ff02 	bl	8007dbc <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007fb8:	4a12      	ldr	r2, [pc, #72]	; (8008004 <main+0x140>)
 8007fba:	2101      	movs	r1, #1
 8007fbc:	2002      	movs	r0, #2
 8007fbe:	f7ff fefd 	bl	8007dbc <lcd_print>
  HAL_Delay(1000);
 8007fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007fc6:	f000 fc4f 	bl	8008868 <HAL_Delay>
  lcd_clear();
 8007fca:	f7ff ff23 	bl	8007e14 <lcd_clear>

  eepromKontrol();
 8007fce:	f7f8 f931 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007fd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fd6:	f000 fc47 	bl	8008868 <HAL_Delay>

  backLightTimer = millis;
 8007fda:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <main+0x144>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a0b      	ldr	r2, [pc, #44]	; (800800c <main+0x148>)
 8007fe0:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007fe2:	f7ff fd17 	bl	8007a14 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007fe6:	f7fe fcfd 	bl	80069e4 <mainLoop>
 8007fea:	e7fc      	b.n	8007fe6 <main+0x122>
 8007fec:	40010c00 	.word	0x40010c00
 8007ff0:	20000400 	.word	0x20000400
 8007ff4:	200003ac 	.word	0x200003ac
 8007ff8:	40011000 	.word	0x40011000
 8007ffc:	40010800 	.word	0x40010800
 8008000:	0800de34 	.word	0x0800de34
 8008004:	0800de48 	.word	0x0800de48
 8008008:	20000200 	.word	0x20000200
 800800c:	2000021c 	.word	0x2000021c

08008010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b090      	sub	sp, #64	; 0x40
 8008014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008016:	f107 0318 	add.w	r3, r7, #24
 800801a:	2228      	movs	r2, #40	; 0x28
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f004 fb45 	bl	800c6ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008024:	1d3b      	adds	r3, r7, #4
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	605a      	str	r2, [r3, #4]
 800802c:	609a      	str	r2, [r3, #8]
 800802e:	60da      	str	r2, [r3, #12]
 8008030:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008032:	2301      	movs	r3, #1
 8008034:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800803a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800803c:	2300      	movs	r3, #0
 800803e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008040:	2301      	movs	r3, #1
 8008042:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008044:	2302      	movs	r3, #2
 8008046:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800804c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800804e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008052:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008054:	f107 0318 	add.w	r3, r7, #24
 8008058:	4618      	mov	r0, r3
 800805a:	f002 fc3f 	bl	800a8dc <HAL_RCC_OscConfig>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008064:	f000 f9a2 	bl	80083ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008068:	230f      	movs	r3, #15
 800806a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800806c:	2302      	movs	r3, #2
 800806e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800807a:	2300      	movs	r3, #0
 800807c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800807e:	1d3b      	adds	r3, r7, #4
 8008080:	2102      	movs	r1, #2
 8008082:	4618      	mov	r0, r3
 8008084:	f002 feac 	bl	800ade0 <HAL_RCC_ClockConfig>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800808e:	f000 f98d 	bl	80083ac <Error_Handler>
  }
}
 8008092:	bf00      	nop
 8008094:	3740      	adds	r7, #64	; 0x40
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
	...

0800809c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80080a0:	4b16      	ldr	r3, [pc, #88]	; (80080fc <MX_CAN_Init+0x60>)
 80080a2:	4a17      	ldr	r2, [pc, #92]	; (8008100 <MX_CAN_Init+0x64>)
 80080a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80080a6:	4b15      	ldr	r3, [pc, #84]	; (80080fc <MX_CAN_Init+0x60>)
 80080a8:	2210      	movs	r2, #16
 80080aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80080ac:	4b13      	ldr	r3, [pc, #76]	; (80080fc <MX_CAN_Init+0x60>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <MX_CAN_Init+0x60>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80080b8:	4b10      	ldr	r3, [pc, #64]	; (80080fc <MX_CAN_Init+0x60>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <MX_CAN_Init+0x60>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80080c4:	4b0d      	ldr	r3, [pc, #52]	; (80080fc <MX_CAN_Init+0x60>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80080ca:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <MX_CAN_Init+0x60>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <MX_CAN_Init+0x60>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80080d6:	4b09      	ldr	r3, [pc, #36]	; (80080fc <MX_CAN_Init+0x60>)
 80080d8:	2200      	movs	r2, #0
 80080da:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80080dc:	4b07      	ldr	r3, [pc, #28]	; (80080fc <MX_CAN_Init+0x60>)
 80080de:	2200      	movs	r2, #0
 80080e0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80080e2:	4b06      	ldr	r3, [pc, #24]	; (80080fc <MX_CAN_Init+0x60>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80080e8:	4804      	ldr	r0, [pc, #16]	; (80080fc <MX_CAN_Init+0x60>)
 80080ea:	f000 fbe1 	bl	80088b0 <HAL_CAN_Init>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80080f4:	f000 f95a 	bl	80083ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80080f8:	bf00      	nop
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20000384 	.word	0x20000384
 8008100:	40006400 	.word	0x40006400

08008104 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008108:	4b12      	ldr	r3, [pc, #72]	; (8008154 <MX_I2C1_Init+0x50>)
 800810a:	4a13      	ldr	r2, [pc, #76]	; (8008158 <MX_I2C1_Init+0x54>)
 800810c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800810e:	4b11      	ldr	r3, [pc, #68]	; (8008154 <MX_I2C1_Init+0x50>)
 8008110:	4a12      	ldr	r2, [pc, #72]	; (800815c <MX_I2C1_Init+0x58>)
 8008112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008114:	4b0f      	ldr	r3, [pc, #60]	; (8008154 <MX_I2C1_Init+0x50>)
 8008116:	2200      	movs	r2, #0
 8008118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800811a:	4b0e      	ldr	r3, [pc, #56]	; (8008154 <MX_I2C1_Init+0x50>)
 800811c:	2200      	movs	r2, #0
 800811e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008120:	4b0c      	ldr	r3, [pc, #48]	; (8008154 <MX_I2C1_Init+0x50>)
 8008122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008126:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <MX_I2C1_Init+0x50>)
 800812a:	2200      	movs	r2, #0
 800812c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800812e:	4b09      	ldr	r3, [pc, #36]	; (8008154 <MX_I2C1_Init+0x50>)
 8008130:	2200      	movs	r2, #0
 8008132:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008134:	4b07      	ldr	r3, [pc, #28]	; (8008154 <MX_I2C1_Init+0x50>)
 8008136:	2200      	movs	r2, #0
 8008138:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <MX_I2C1_Init+0x50>)
 800813c:	2200      	movs	r2, #0
 800813e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008140:	4804      	ldr	r0, [pc, #16]	; (8008154 <MX_I2C1_Init+0x50>)
 8008142:	f001 f9a9 	bl	8009498 <HAL_I2C_Init>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800814c:	f000 f92e 	bl	80083ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008150:	bf00      	nop
 8008152:	bd80      	pop	{r7, pc}
 8008154:	200003ac 	.word	0x200003ac
 8008158:	40005400 	.word	0x40005400
 800815c:	00061a80 	.word	0x00061a80

08008160 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008166:	f107 0308 	add.w	r3, r7, #8
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	605a      	str	r2, [r3, #4]
 8008170:	609a      	str	r2, [r3, #8]
 8008172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008174:	463b      	mov	r3, r7
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800817c:	4b1f      	ldr	r3, [pc, #124]	; (80081fc <MX_TIM1_Init+0x9c>)
 800817e:	4a20      	ldr	r2, [pc, #128]	; (8008200 <MX_TIM1_Init+0xa0>)
 8008180:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008182:	4b1e      	ldr	r3, [pc, #120]	; (80081fc <MX_TIM1_Init+0x9c>)
 8008184:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008188:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800818a:	4b1c      	ldr	r3, [pc, #112]	; (80081fc <MX_TIM1_Init+0x9c>)
 800818c:	2200      	movs	r2, #0
 800818e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008190:	4b1a      	ldr	r3, [pc, #104]	; (80081fc <MX_TIM1_Init+0x9c>)
 8008192:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008196:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008198:	4b18      	ldr	r3, [pc, #96]	; (80081fc <MX_TIM1_Init+0x9c>)
 800819a:	2200      	movs	r2, #0
 800819c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800819e:	4b17      	ldr	r3, [pc, #92]	; (80081fc <MX_TIM1_Init+0x9c>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081a4:	4b15      	ldr	r3, [pc, #84]	; (80081fc <MX_TIM1_Init+0x9c>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80081aa:	4814      	ldr	r0, [pc, #80]	; (80081fc <MX_TIM1_Init+0x9c>)
 80081ac:	f002 ffa6 	bl	800b0fc <HAL_TIM_Base_Init>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80081b6:	f000 f8f9 	bl	80083ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80081ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80081c0:	f107 0308 	add.w	r3, r7, #8
 80081c4:	4619      	mov	r1, r3
 80081c6:	480d      	ldr	r0, [pc, #52]	; (80081fc <MX_TIM1_Init+0x9c>)
 80081c8:	f003 f950 	bl	800b46c <HAL_TIM_ConfigClockSource>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80081d2:	f000 f8eb 	bl	80083ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081d6:	2300      	movs	r3, #0
 80081d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081da:	2300      	movs	r3, #0
 80081dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80081de:	463b      	mov	r3, r7
 80081e0:	4619      	mov	r1, r3
 80081e2:	4806      	ldr	r0, [pc, #24]	; (80081fc <MX_TIM1_Init+0x9c>)
 80081e4:	f003 fb3e 	bl	800b864 <HAL_TIMEx_MasterConfigSynchronization>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80081ee:	f000 f8dd 	bl	80083ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80081f2:	bf00      	nop
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000400 	.word	0x20000400
 8008200:	40012c00 	.word	0x40012c00

08008204 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008208:	4b11      	ldr	r3, [pc, #68]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 800820a:	4a12      	ldr	r2, [pc, #72]	; (8008254 <MX_USART1_UART_Init+0x50>)
 800820c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800820e:	4b10      	ldr	r3, [pc, #64]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 8008210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008214:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008216:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 8008218:	2200      	movs	r2, #0
 800821a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800821c:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 800821e:	2200      	movs	r2, #0
 8008220:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008222:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 8008224:	2200      	movs	r2, #0
 8008226:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008228:	4b09      	ldr	r3, [pc, #36]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 800822a:	220c      	movs	r2, #12
 800822c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800822e:	4b08      	ldr	r3, [pc, #32]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 8008230:	2200      	movs	r2, #0
 8008232:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008234:	4b06      	ldr	r3, [pc, #24]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 8008236:	2200      	movs	r2, #0
 8008238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800823a:	4805      	ldr	r0, [pc, #20]	; (8008250 <MX_USART1_UART_Init+0x4c>)
 800823c:	f003 fb90 	bl	800b960 <HAL_UART_Init>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008246:	f000 f8b1 	bl	80083ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800824a:	bf00      	nop
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000448 	.word	0x20000448
 8008254:	40013800 	.word	0x40013800

08008258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800825e:	f107 0310 	add.w	r3, r7, #16
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	605a      	str	r2, [r3, #4]
 8008268:	609a      	str	r2, [r3, #8]
 800826a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800826c:	4b4b      	ldr	r3, [pc, #300]	; (800839c <MX_GPIO_Init+0x144>)
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	4a4a      	ldr	r2, [pc, #296]	; (800839c <MX_GPIO_Init+0x144>)
 8008272:	f043 0310 	orr.w	r3, r3, #16
 8008276:	6193      	str	r3, [r2, #24]
 8008278:	4b48      	ldr	r3, [pc, #288]	; (800839c <MX_GPIO_Init+0x144>)
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008284:	4b45      	ldr	r3, [pc, #276]	; (800839c <MX_GPIO_Init+0x144>)
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	4a44      	ldr	r2, [pc, #272]	; (800839c <MX_GPIO_Init+0x144>)
 800828a:	f043 0320 	orr.w	r3, r3, #32
 800828e:	6193      	str	r3, [r2, #24]
 8008290:	4b42      	ldr	r3, [pc, #264]	; (800839c <MX_GPIO_Init+0x144>)
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f003 0320 	and.w	r3, r3, #32
 8008298:	60bb      	str	r3, [r7, #8]
 800829a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800829c:	4b3f      	ldr	r3, [pc, #252]	; (800839c <MX_GPIO_Init+0x144>)
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	4a3e      	ldr	r2, [pc, #248]	; (800839c <MX_GPIO_Init+0x144>)
 80082a2:	f043 0304 	orr.w	r3, r3, #4
 80082a6:	6193      	str	r3, [r2, #24]
 80082a8:	4b3c      	ldr	r3, [pc, #240]	; (800839c <MX_GPIO_Init+0x144>)
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	607b      	str	r3, [r7, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80082b4:	4b39      	ldr	r3, [pc, #228]	; (800839c <MX_GPIO_Init+0x144>)
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	4a38      	ldr	r2, [pc, #224]	; (800839c <MX_GPIO_Init+0x144>)
 80082ba:	f043 0308 	orr.w	r3, r3, #8
 80082be:	6193      	str	r3, [r2, #24]
 80082c0:	4b36      	ldr	r3, [pc, #216]	; (800839c <MX_GPIO_Init+0x144>)
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	f003 0308 	and.w	r3, r3, #8
 80082c8:	603b      	str	r3, [r7, #0]
 80082ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80082cc:	2200      	movs	r2, #0
 80082ce:	21f0      	movs	r1, #240	; 0xf0
 80082d0:	4833      	ldr	r0, [pc, #204]	; (80083a0 <MX_GPIO_Init+0x148>)
 80082d2:	f001 f8b0 	bl	8009436 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80082d6:	2200      	movs	r2, #0
 80082d8:	f241 0130 	movw	r1, #4144	; 0x1030
 80082dc:	4831      	ldr	r0, [pc, #196]	; (80083a4 <MX_GPIO_Init+0x14c>)
 80082de:	f001 f8aa 	bl	8009436 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80082e2:	2200      	movs	r2, #0
 80082e4:	f640 4107 	movw	r1, #3079	; 0xc07
 80082e8:	482f      	ldr	r0, [pc, #188]	; (80083a8 <MX_GPIO_Init+0x150>)
 80082ea:	f001 f8a4 	bl	8009436 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80082ee:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80082f2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082f4:	2300      	movs	r3, #0
 80082f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082fc:	f107 0310 	add.w	r3, r7, #16
 8008300:	4619      	mov	r1, r3
 8008302:	4828      	ldr	r0, [pc, #160]	; (80083a4 <MX_GPIO_Init+0x14c>)
 8008304:	f000 fe20 	bl	8008f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008308:	f248 130f 	movw	r3, #33039	; 0x810f
 800830c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008312:	2300      	movs	r3, #0
 8008314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008316:	f107 0310 	add.w	r3, r7, #16
 800831a:	4619      	mov	r1, r3
 800831c:	4820      	ldr	r0, [pc, #128]	; (80083a0 <MX_GPIO_Init+0x148>)
 800831e:	f000 fe13 	bl	8008f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008322:	23f0      	movs	r3, #240	; 0xf0
 8008324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008326:	2301      	movs	r3, #1
 8008328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800832a:	2300      	movs	r3, #0
 800832c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800832e:	2302      	movs	r3, #2
 8008330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008332:	f107 0310 	add.w	r3, r7, #16
 8008336:	4619      	mov	r1, r3
 8008338:	4819      	ldr	r0, [pc, #100]	; (80083a0 <MX_GPIO_Init+0x148>)
 800833a:	f000 fe05 	bl	8008f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800833e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008344:	2301      	movs	r3, #1
 8008346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008348:	2300      	movs	r3, #0
 800834a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800834c:	2302      	movs	r3, #2
 800834e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008350:	f107 0310 	add.w	r3, r7, #16
 8008354:	4619      	mov	r1, r3
 8008356:	4813      	ldr	r0, [pc, #76]	; (80083a4 <MX_GPIO_Init+0x14c>)
 8008358:	f000 fdf6 	bl	8008f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800835c:	f640 4307 	movw	r3, #3079	; 0xc07
 8008360:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008362:	2301      	movs	r3, #1
 8008364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008366:	2300      	movs	r3, #0
 8008368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800836a:	2302      	movs	r3, #2
 800836c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800836e:	f107 0310 	add.w	r3, r7, #16
 8008372:	4619      	mov	r1, r3
 8008374:	480c      	ldr	r0, [pc, #48]	; (80083a8 <MX_GPIO_Init+0x150>)
 8008376:	f000 fde7 	bl	8008f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800837a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800837e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008380:	2300      	movs	r3, #0
 8008382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008384:	2300      	movs	r3, #0
 8008386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008388:	f107 0310 	add.w	r3, r7, #16
 800838c:	4619      	mov	r1, r3
 800838e:	4806      	ldr	r0, [pc, #24]	; (80083a8 <MX_GPIO_Init+0x150>)
 8008390:	f000 fdda 	bl	8008f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008394:	bf00      	nop
 8008396:	3720      	adds	r7, #32
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	40021000 	.word	0x40021000
 80083a0:	40010800 	.word	0x40010800
 80083a4:	40011000 	.word	0x40011000
 80083a8:	40010c00 	.word	0x40010c00

080083ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80083b0:	bf00      	nop
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bc80      	pop	{r7}
 80083b6:	4770      	bx	lr

080083b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80083be:	4b15      	ldr	r3, [pc, #84]	; (8008414 <HAL_MspInit+0x5c>)
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	4a14      	ldr	r2, [pc, #80]	; (8008414 <HAL_MspInit+0x5c>)
 80083c4:	f043 0301 	orr.w	r3, r3, #1
 80083c8:	6193      	str	r3, [r2, #24]
 80083ca:	4b12      	ldr	r3, [pc, #72]	; (8008414 <HAL_MspInit+0x5c>)
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	60bb      	str	r3, [r7, #8]
 80083d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083d6:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <HAL_MspInit+0x5c>)
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	4a0e      	ldr	r2, [pc, #56]	; (8008414 <HAL_MspInit+0x5c>)
 80083dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e0:	61d3      	str	r3, [r2, #28]
 80083e2:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <HAL_MspInit+0x5c>)
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80083ee:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <HAL_MspInit+0x60>)
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	4a04      	ldr	r2, [pc, #16]	; (8008418 <HAL_MspInit+0x60>)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr
 8008414:	40021000 	.word	0x40021000
 8008418:	40010000 	.word	0x40010000

0800841c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008424:	f107 0310 	add.w	r3, r7, #16
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	605a      	str	r2, [r3, #4]
 800842e:	609a      	str	r2, [r3, #8]
 8008430:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1c      	ldr	r2, [pc, #112]	; (80084a8 <HAL_CAN_MspInit+0x8c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d131      	bne.n	80084a0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800843c:	4b1b      	ldr	r3, [pc, #108]	; (80084ac <HAL_CAN_MspInit+0x90>)
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	4a1a      	ldr	r2, [pc, #104]	; (80084ac <HAL_CAN_MspInit+0x90>)
 8008442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008446:	61d3      	str	r3, [r2, #28]
 8008448:	4b18      	ldr	r3, [pc, #96]	; (80084ac <HAL_CAN_MspInit+0x90>)
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008454:	4b15      	ldr	r3, [pc, #84]	; (80084ac <HAL_CAN_MspInit+0x90>)
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	4a14      	ldr	r2, [pc, #80]	; (80084ac <HAL_CAN_MspInit+0x90>)
 800845a:	f043 0304 	orr.w	r3, r3, #4
 800845e:	6193      	str	r3, [r2, #24]
 8008460:	4b12      	ldr	r3, [pc, #72]	; (80084ac <HAL_CAN_MspInit+0x90>)
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	60bb      	str	r3, [r7, #8]
 800846a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800846c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008476:	2300      	movs	r3, #0
 8008478:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800847a:	f107 0310 	add.w	r3, r7, #16
 800847e:	4619      	mov	r1, r3
 8008480:	480b      	ldr	r0, [pc, #44]	; (80084b0 <HAL_CAN_MspInit+0x94>)
 8008482:	f000 fd61 	bl	8008f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800848a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800848c:	2302      	movs	r3, #2
 800848e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008490:	2303      	movs	r3, #3
 8008492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008494:	f107 0310 	add.w	r3, r7, #16
 8008498:	4619      	mov	r1, r3
 800849a:	4805      	ldr	r0, [pc, #20]	; (80084b0 <HAL_CAN_MspInit+0x94>)
 800849c:	f000 fd54 	bl	8008f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80084a0:	bf00      	nop
 80084a2:	3720      	adds	r7, #32
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	40006400 	.word	0x40006400
 80084ac:	40021000 	.word	0x40021000
 80084b0:	40010800 	.word	0x40010800

080084b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084bc:	f107 0310 	add.w	r3, r7, #16
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	605a      	str	r2, [r3, #4]
 80084c6:	609a      	str	r2, [r3, #8]
 80084c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a15      	ldr	r2, [pc, #84]	; (8008524 <HAL_I2C_MspInit+0x70>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d123      	bne.n	800851c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084d4:	4b14      	ldr	r3, [pc, #80]	; (8008528 <HAL_I2C_MspInit+0x74>)
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	4a13      	ldr	r2, [pc, #76]	; (8008528 <HAL_I2C_MspInit+0x74>)
 80084da:	f043 0308 	orr.w	r3, r3, #8
 80084de:	6193      	str	r3, [r2, #24]
 80084e0:	4b11      	ldr	r3, [pc, #68]	; (8008528 <HAL_I2C_MspInit+0x74>)
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	f003 0308 	and.w	r3, r3, #8
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80084ec:	23c0      	movs	r3, #192	; 0xc0
 80084ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084f0:	2312      	movs	r3, #18
 80084f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084f4:	2303      	movs	r3, #3
 80084f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084f8:	f107 0310 	add.w	r3, r7, #16
 80084fc:	4619      	mov	r1, r3
 80084fe:	480b      	ldr	r0, [pc, #44]	; (800852c <HAL_I2C_MspInit+0x78>)
 8008500:	f000 fd22 	bl	8008f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008504:	4b08      	ldr	r3, [pc, #32]	; (8008528 <HAL_I2C_MspInit+0x74>)
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	4a07      	ldr	r2, [pc, #28]	; (8008528 <HAL_I2C_MspInit+0x74>)
 800850a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800850e:	61d3      	str	r3, [r2, #28]
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <HAL_I2C_MspInit+0x74>)
 8008512:	69db      	ldr	r3, [r3, #28]
 8008514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800851c:	bf00      	nop
 800851e:	3720      	adds	r7, #32
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	40005400 	.word	0x40005400
 8008528:	40021000 	.word	0x40021000
 800852c:	40010c00 	.word	0x40010c00

08008530 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <HAL_I2C_MspDeInit+0x38>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d10d      	bne.n	800855e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008542:	4b0a      	ldr	r3, [pc, #40]	; (800856c <HAL_I2C_MspDeInit+0x3c>)
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	4a09      	ldr	r2, [pc, #36]	; (800856c <HAL_I2C_MspDeInit+0x3c>)
 8008548:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800854c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800854e:	2140      	movs	r1, #64	; 0x40
 8008550:	4807      	ldr	r0, [pc, #28]	; (8008570 <HAL_I2C_MspDeInit+0x40>)
 8008552:	f000 fe8d 	bl	8009270 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008556:	2180      	movs	r1, #128	; 0x80
 8008558:	4805      	ldr	r0, [pc, #20]	; (8008570 <HAL_I2C_MspDeInit+0x40>)
 800855a:	f000 fe89 	bl	8009270 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800855e:	bf00      	nop
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	40005400 	.word	0x40005400
 800856c:	40021000 	.word	0x40021000
 8008570:	40010c00 	.word	0x40010c00

08008574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a0d      	ldr	r2, [pc, #52]	; (80085b8 <HAL_TIM_Base_MspInit+0x44>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d113      	bne.n	80085ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008586:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <HAL_TIM_Base_MspInit+0x48>)
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	4a0c      	ldr	r2, [pc, #48]	; (80085bc <HAL_TIM_Base_MspInit+0x48>)
 800858c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008590:	6193      	str	r3, [r2, #24]
 8008592:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <HAL_TIM_Base_MspInit+0x48>)
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800859e:	2200      	movs	r2, #0
 80085a0:	2100      	movs	r1, #0
 80085a2:	2019      	movs	r0, #25
 80085a4:	f000 fb57 	bl	8008c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80085a8:	2019      	movs	r0, #25
 80085aa:	f000 fb70 	bl	8008c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	40012c00 	.word	0x40012c00
 80085bc:	40021000 	.word	0x40021000

080085c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085c8:	f107 0310 	add.w	r3, r7, #16
 80085cc:	2200      	movs	r2, #0
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	605a      	str	r2, [r3, #4]
 80085d2:	609a      	str	r2, [r3, #8]
 80085d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a20      	ldr	r2, [pc, #128]	; (800865c <HAL_UART_MspInit+0x9c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d139      	bne.n	8008654 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085e0:	4b1f      	ldr	r3, [pc, #124]	; (8008660 <HAL_UART_MspInit+0xa0>)
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	4a1e      	ldr	r2, [pc, #120]	; (8008660 <HAL_UART_MspInit+0xa0>)
 80085e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085ea:	6193      	str	r3, [r2, #24]
 80085ec:	4b1c      	ldr	r3, [pc, #112]	; (8008660 <HAL_UART_MspInit+0xa0>)
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085f8:	4b19      	ldr	r3, [pc, #100]	; (8008660 <HAL_UART_MspInit+0xa0>)
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	4a18      	ldr	r2, [pc, #96]	; (8008660 <HAL_UART_MspInit+0xa0>)
 80085fe:	f043 0304 	orr.w	r3, r3, #4
 8008602:	6193      	str	r3, [r2, #24]
 8008604:	4b16      	ldr	r3, [pc, #88]	; (8008660 <HAL_UART_MspInit+0xa0>)
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	60bb      	str	r3, [r7, #8]
 800860e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008614:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008616:	2302      	movs	r3, #2
 8008618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800861a:	2303      	movs	r3, #3
 800861c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800861e:	f107 0310 	add.w	r3, r7, #16
 8008622:	4619      	mov	r1, r3
 8008624:	480f      	ldr	r0, [pc, #60]	; (8008664 <HAL_UART_MspInit+0xa4>)
 8008626:	f000 fc8f 	bl	8008f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800862a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800862e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008634:	2300      	movs	r3, #0
 8008636:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008638:	f107 0310 	add.w	r3, r7, #16
 800863c:	4619      	mov	r1, r3
 800863e:	4809      	ldr	r0, [pc, #36]	; (8008664 <HAL_UART_MspInit+0xa4>)
 8008640:	f000 fc82 	bl	8008f48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008644:	2200      	movs	r2, #0
 8008646:	2100      	movs	r1, #0
 8008648:	2025      	movs	r0, #37	; 0x25
 800864a:	f000 fb04 	bl	8008c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800864e:	2025      	movs	r0, #37	; 0x25
 8008650:	f000 fb1d 	bl	8008c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008654:	bf00      	nop
 8008656:	3720      	adds	r7, #32
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	40013800 	.word	0x40013800
 8008660:	40021000 	.word	0x40021000
 8008664:	40010800 	.word	0x40010800

08008668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800866c:	e7fe      	b.n	800866c <NMI_Handler+0x4>

0800866e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800866e:	b480      	push	{r7}
 8008670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008672:	e7fe      	b.n	8008672 <HardFault_Handler+0x4>

08008674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008674:	b480      	push	{r7}
 8008676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008678:	e7fe      	b.n	8008678 <MemManage_Handler+0x4>

0800867a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800867a:	b480      	push	{r7}
 800867c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800867e:	e7fe      	b.n	800867e <BusFault_Handler+0x4>

08008680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008684:	e7fe      	b.n	8008684 <UsageFault_Handler+0x4>

08008686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008686:	b480      	push	{r7}
 8008688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800868a:	bf00      	nop
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr

08008692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008692:	b480      	push	{r7}
 8008694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008696:	bf00      	nop
 8008698:	46bd      	mov	sp, r7
 800869a:	bc80      	pop	{r7}
 800869c:	4770      	bx	lr

0800869e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800869e:	b480      	push	{r7}
 80086a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086a2:	bf00      	nop
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr

080086aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086ae:	f000 f8bf 	bl	8008830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80086b2:	bf00      	nop
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80086bc:	4802      	ldr	r0, [pc, #8]	; (80086c8 <TIM1_UP_IRQHandler+0x10>)
 80086be:	f002 fdcd 	bl	800b25c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80086c2:	bf00      	nop
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000400 	.word	0x20000400

080086cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80086d0:	4802      	ldr	r0, [pc, #8]	; (80086dc <USART1_IRQHandler+0x10>)
 80086d2:	f003 f9cb 	bl	800ba6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80086d6:	bf00      	nop
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20000448 	.word	0x20000448

080086e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80086e8:	4a14      	ldr	r2, [pc, #80]	; (800873c <_sbrk+0x5c>)
 80086ea:	4b15      	ldr	r3, [pc, #84]	; (8008740 <_sbrk+0x60>)
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80086f4:	4b13      	ldr	r3, [pc, #76]	; (8008744 <_sbrk+0x64>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80086fc:	4b11      	ldr	r3, [pc, #68]	; (8008744 <_sbrk+0x64>)
 80086fe:	4a12      	ldr	r2, [pc, #72]	; (8008748 <_sbrk+0x68>)
 8008700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008702:	4b10      	ldr	r3, [pc, #64]	; (8008744 <_sbrk+0x64>)
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4413      	add	r3, r2
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	429a      	cmp	r2, r3
 800870e:	d207      	bcs.n	8008720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008710:	f003 ffe6 	bl	800c6e0 <__errno>
 8008714:	4603      	mov	r3, r0
 8008716:	220c      	movs	r2, #12
 8008718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800871a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800871e:	e009      	b.n	8008734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008720:	4b08      	ldr	r3, [pc, #32]	; (8008744 <_sbrk+0x64>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008726:	4b07      	ldr	r3, [pc, #28]	; (8008744 <_sbrk+0x64>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	4a05      	ldr	r2, [pc, #20]	; (8008744 <_sbrk+0x64>)
 8008730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008732:	68fb      	ldr	r3, [r7, #12]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	2000c000 	.word	0x2000c000
 8008740:	00000400 	.word	0x00000400
 8008744:	20000490 	.word	0x20000490
 8008748:	200005e0 	.word	0x200005e0

0800874c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008750:	bf00      	nop
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr

08008758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008758:	480c      	ldr	r0, [pc, #48]	; (800878c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800875a:	490d      	ldr	r1, [pc, #52]	; (8008790 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800875c:	4a0d      	ldr	r2, [pc, #52]	; (8008794 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800875e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008760:	e002      	b.n	8008768 <LoopCopyDataInit>

08008762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008766:	3304      	adds	r3, #4

08008768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800876a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800876c:	d3f9      	bcc.n	8008762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800876e:	4a0a      	ldr	r2, [pc, #40]	; (8008798 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008770:	4c0a      	ldr	r4, [pc, #40]	; (800879c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008774:	e001      	b.n	800877a <LoopFillZerobss>

08008776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008778:	3204      	adds	r2, #4

0800877a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800877a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800877c:	d3fb      	bcc.n	8008776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800877e:	f7ff ffe5 	bl	800874c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008782:	f003 ffb3 	bl	800c6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008786:	f7ff fb9d 	bl	8007ec4 <main>
  bx lr
 800878a:	4770      	bx	lr
  ldr r0, =_sdata
 800878c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008790:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8008794:	0800dee8 	.word	0x0800dee8
  ldr r2, =_sbss
 8008798:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 800879c:	200005e0 	.word	0x200005e0

080087a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80087a0:	e7fe      	b.n	80087a0 <ADC1_2_IRQHandler>
	...

080087a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80087a8:	4b08      	ldr	r3, [pc, #32]	; (80087cc <HAL_Init+0x28>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a07      	ldr	r2, [pc, #28]	; (80087cc <HAL_Init+0x28>)
 80087ae:	f043 0310 	orr.w	r3, r3, #16
 80087b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087b4:	2003      	movs	r0, #3
 80087b6:	f000 fa43 	bl	8008c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087ba:	200f      	movs	r0, #15
 80087bc:	f000 f808 	bl	80087d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087c0:	f7ff fdfa 	bl	80083b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	40022000 	.word	0x40022000

080087d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80087d8:	4b12      	ldr	r3, [pc, #72]	; (8008824 <HAL_InitTick+0x54>)
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	4b12      	ldr	r3, [pc, #72]	; (8008828 <HAL_InitTick+0x58>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	4619      	mov	r1, r3
 80087e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80087e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80087ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fa5b 	bl	8008caa <HAL_SYSTICK_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e00e      	b.n	800881c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b0f      	cmp	r3, #15
 8008802:	d80a      	bhi.n	800881a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008804:	2200      	movs	r2, #0
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800880c:	f000 fa23 	bl	8008c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008810:	4a06      	ldr	r2, [pc, #24]	; (800882c <HAL_InitTick+0x5c>)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	e000      	b.n	800881c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	200000b0 	.word	0x200000b0
 8008828:	200000b8 	.word	0x200000b8
 800882c:	200000b4 	.word	0x200000b4

08008830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008830:	b480      	push	{r7}
 8008832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008834:	4b05      	ldr	r3, [pc, #20]	; (800884c <HAL_IncTick+0x1c>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
 800883a:	4b05      	ldr	r3, [pc, #20]	; (8008850 <HAL_IncTick+0x20>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4413      	add	r3, r2
 8008840:	4a03      	ldr	r2, [pc, #12]	; (8008850 <HAL_IncTick+0x20>)
 8008842:	6013      	str	r3, [r2, #0]
}
 8008844:	bf00      	nop
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr
 800884c:	200000b8 	.word	0x200000b8
 8008850:	20000494 	.word	0x20000494

08008854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  return uwTick;
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <HAL_GetTick+0x10>)
 800885a:	681b      	ldr	r3, [r3, #0]
}
 800885c:	4618      	mov	r0, r3
 800885e:	46bd      	mov	sp, r7
 8008860:	bc80      	pop	{r7}
 8008862:	4770      	bx	lr
 8008864:	20000494 	.word	0x20000494

08008868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008870:	f7ff fff0 	bl	8008854 <HAL_GetTick>
 8008874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008880:	d005      	beq.n	800888e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008882:	4b0a      	ldr	r3, [pc, #40]	; (80088ac <HAL_Delay+0x44>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4413      	add	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800888e:	bf00      	nop
 8008890:	f7ff ffe0 	bl	8008854 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	429a      	cmp	r2, r3
 800889e:	d8f7      	bhi.n	8008890 <HAL_Delay+0x28>
  {
  }
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	200000b8 	.word	0x200000b8

080088b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e0ed      	b.n	8008a9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d102      	bne.n	80088d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fda4 	bl	800841c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0201 	orr.w	r2, r2, #1
 80088e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088e4:	f7ff ffb6 	bl	8008854 <HAL_GetTick>
 80088e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80088ea:	e012      	b.n	8008912 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80088ec:	f7ff ffb2 	bl	8008854 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	2b0a      	cmp	r3, #10
 80088f8:	d90b      	bls.n	8008912 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2205      	movs	r2, #5
 800890a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e0c5      	b.n	8008a9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0e5      	beq.n	80088ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0202 	bic.w	r2, r2, #2
 800892e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008930:	f7ff ff90 	bl	8008854 <HAL_GetTick>
 8008934:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008936:	e012      	b.n	800895e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008938:	f7ff ff8c 	bl	8008854 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b0a      	cmp	r3, #10
 8008944:	d90b      	bls.n	800895e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2205      	movs	r2, #5
 8008956:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e09f      	b.n	8008a9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f003 0302 	and.w	r3, r3, #2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e5      	bne.n	8008938 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	7e1b      	ldrb	r3, [r3, #24]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d108      	bne.n	8008986 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e007      	b.n	8008996 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008994:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7e5b      	ldrb	r3, [r3, #25]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d108      	bne.n	80089b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	e007      	b.n	80089c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	7e9b      	ldrb	r3, [r3, #26]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d108      	bne.n	80089da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0220 	orr.w	r2, r2, #32
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	e007      	b.n	80089ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0220 	bic.w	r2, r2, #32
 80089e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	7edb      	ldrb	r3, [r3, #27]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d108      	bne.n	8008a04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0210 	bic.w	r2, r2, #16
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	e007      	b.n	8008a14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f042 0210 	orr.w	r2, r2, #16
 8008a12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7f1b      	ldrb	r3, [r3, #28]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d108      	bne.n	8008a2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f042 0208 	orr.w	r2, r2, #8
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	e007      	b.n	8008a3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 0208 	bic.w	r2, r2, #8
 8008a3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	7f5b      	ldrb	r3, [r3, #29]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d108      	bne.n	8008a58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f042 0204 	orr.w	r2, r2, #4
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	e007      	b.n	8008a68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0204 	bic.w	r2, r2, #4
 8008a66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	431a      	orrs	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	ea42 0103 	orr.w	r1, r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	1e5a      	subs	r2, r3, #1
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <__NVIC_SetPriorityGrouping>:
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ab8:	4b0c      	ldr	r3, [pc, #48]	; (8008aec <__NVIC_SetPriorityGrouping+0x44>)
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ada:	4a04      	ldr	r2, [pc, #16]	; (8008aec <__NVIC_SetPriorityGrouping+0x44>)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	60d3      	str	r3, [r2, #12]
}
 8008ae0:	bf00      	nop
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	e000ed00 	.word	0xe000ed00

08008af0 <__NVIC_GetPriorityGrouping>:
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008af4:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <__NVIC_GetPriorityGrouping+0x18>)
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	0a1b      	lsrs	r3, r3, #8
 8008afa:	f003 0307 	and.w	r3, r3, #7
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bc80      	pop	{r7}
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	e000ed00 	.word	0xe000ed00

08008b0c <__NVIC_EnableIRQ>:
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	db0b      	blt.n	8008b36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	f003 021f 	and.w	r2, r3, #31
 8008b24:	4906      	ldr	r1, [pc, #24]	; (8008b40 <__NVIC_EnableIRQ+0x34>)
 8008b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b2a:	095b      	lsrs	r3, r3, #5
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8008b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bc80      	pop	{r7}
 8008b3e:	4770      	bx	lr
 8008b40:	e000e100 	.word	0xe000e100

08008b44 <__NVIC_SetPriority>:
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	6039      	str	r1, [r7, #0]
 8008b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	db0a      	blt.n	8008b6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	490c      	ldr	r1, [pc, #48]	; (8008b90 <__NVIC_SetPriority+0x4c>)
 8008b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b62:	0112      	lsls	r2, r2, #4
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	440b      	add	r3, r1
 8008b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b6c:	e00a      	b.n	8008b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	4908      	ldr	r1, [pc, #32]	; (8008b94 <__NVIC_SetPriority+0x50>)
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	f003 030f 	and.w	r3, r3, #15
 8008b7a:	3b04      	subs	r3, #4
 8008b7c:	0112      	lsls	r2, r2, #4
 8008b7e:	b2d2      	uxtb	r2, r2
 8008b80:	440b      	add	r3, r1
 8008b82:	761a      	strb	r2, [r3, #24]
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bc80      	pop	{r7}
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	e000e100 	.word	0xe000e100
 8008b94:	e000ed00 	.word	0xe000ed00

08008b98 <NVIC_EncodePriority>:
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b089      	sub	sp, #36	; 0x24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	f1c3 0307 	rsb	r3, r3, #7
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	bf28      	it	cs
 8008bb6:	2304      	movcs	r3, #4
 8008bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	2b06      	cmp	r3, #6
 8008bc0:	d902      	bls.n	8008bc8 <NVIC_EncodePriority+0x30>
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	3b03      	subs	r3, #3
 8008bc6:	e000      	b.n	8008bca <NVIC_EncodePriority+0x32>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	43da      	mvns	r2, r3
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	401a      	ands	r2, r3
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bea:	43d9      	mvns	r1, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bf0:	4313      	orrs	r3, r2
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3724      	adds	r7, #36	; 0x24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bc80      	pop	{r7}
 8008bfa:	4770      	bx	lr

08008bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c0c:	d301      	bcc.n	8008c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e00f      	b.n	8008c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c12:	4a0a      	ldr	r2, [pc, #40]	; (8008c3c <SysTick_Config+0x40>)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3b01      	subs	r3, #1
 8008c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c1a:	210f      	movs	r1, #15
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c20:	f7ff ff90 	bl	8008b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <SysTick_Config+0x40>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c2a:	4b04      	ldr	r3, [pc, #16]	; (8008c3c <SysTick_Config+0x40>)
 8008c2c:	2207      	movs	r2, #7
 8008c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	e000e010 	.word	0xe000e010

08008c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff ff2d 	bl	8008aa8 <__NVIC_SetPriorityGrouping>
}
 8008c4e:	bf00      	nop
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b086      	sub	sp, #24
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	607a      	str	r2, [r7, #4]
 8008c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008c68:	f7ff ff42 	bl	8008af0 <__NVIC_GetPriorityGrouping>
 8008c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	6978      	ldr	r0, [r7, #20]
 8008c74:	f7ff ff90 	bl	8008b98 <NVIC_EncodePriority>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c7e:	4611      	mov	r1, r2
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff ff5f 	bl	8008b44 <__NVIC_SetPriority>
}
 8008c86:	bf00      	nop
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b082      	sub	sp, #8
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	4603      	mov	r3, r0
 8008c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff ff35 	bl	8008b0c <__NVIC_EnableIRQ>
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff ffa2 	bl	8008bfc <SysTick_Config>
 8008cb8:	4603      	mov	r3, r0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d008      	beq.n	8008cec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2204      	movs	r2, #4
 8008cde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e020      	b.n	8008d2e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 020e 	bic.w	r2, r2, #14
 8008cfa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0201 	bic.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d14:	2101      	movs	r1, #1
 8008d16:	fa01 f202 	lsl.w	r2, r1, r2
 8008d1a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bc80      	pop	{r7}
 8008d36:	4770      	bx	lr

08008d38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d005      	beq.n	8008d5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2204      	movs	r2, #4
 8008d54:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	73fb      	strb	r3, [r7, #15]
 8008d5a:	e0d6      	b.n	8008f0a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 020e 	bic.w	r2, r2, #14
 8008d6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0201 	bic.w	r2, r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	461a      	mov	r2, r3
 8008d82:	4b64      	ldr	r3, [pc, #400]	; (8008f14 <HAL_DMA_Abort_IT+0x1dc>)
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d958      	bls.n	8008e3a <HAL_DMA_Abort_IT+0x102>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a62      	ldr	r2, [pc, #392]	; (8008f18 <HAL_DMA_Abort_IT+0x1e0>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d04f      	beq.n	8008e32 <HAL_DMA_Abort_IT+0xfa>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a61      	ldr	r2, [pc, #388]	; (8008f1c <HAL_DMA_Abort_IT+0x1e4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d048      	beq.n	8008e2e <HAL_DMA_Abort_IT+0xf6>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a5f      	ldr	r2, [pc, #380]	; (8008f20 <HAL_DMA_Abort_IT+0x1e8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d040      	beq.n	8008e28 <HAL_DMA_Abort_IT+0xf0>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a5e      	ldr	r2, [pc, #376]	; (8008f24 <HAL_DMA_Abort_IT+0x1ec>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d038      	beq.n	8008e22 <HAL_DMA_Abort_IT+0xea>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a5c      	ldr	r2, [pc, #368]	; (8008f28 <HAL_DMA_Abort_IT+0x1f0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d030      	beq.n	8008e1c <HAL_DMA_Abort_IT+0xe4>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a5b      	ldr	r2, [pc, #364]	; (8008f2c <HAL_DMA_Abort_IT+0x1f4>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d028      	beq.n	8008e16 <HAL_DMA_Abort_IT+0xde>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a52      	ldr	r2, [pc, #328]	; (8008f14 <HAL_DMA_Abort_IT+0x1dc>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d020      	beq.n	8008e10 <HAL_DMA_Abort_IT+0xd8>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a57      	ldr	r2, [pc, #348]	; (8008f30 <HAL_DMA_Abort_IT+0x1f8>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d019      	beq.n	8008e0c <HAL_DMA_Abort_IT+0xd4>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a55      	ldr	r2, [pc, #340]	; (8008f34 <HAL_DMA_Abort_IT+0x1fc>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d012      	beq.n	8008e08 <HAL_DMA_Abort_IT+0xd0>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a54      	ldr	r2, [pc, #336]	; (8008f38 <HAL_DMA_Abort_IT+0x200>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00a      	beq.n	8008e02 <HAL_DMA_Abort_IT+0xca>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a52      	ldr	r2, [pc, #328]	; (8008f3c <HAL_DMA_Abort_IT+0x204>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d102      	bne.n	8008dfc <HAL_DMA_Abort_IT+0xc4>
 8008df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dfa:	e01b      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e00:	e018      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e06:	e015      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008e08:	2310      	movs	r3, #16
 8008e0a:	e013      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e011      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e14:	e00e      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008e16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e1a:	e00b      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e20:	e008      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e26:	e005      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e2c:	e002      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008e2e:	2310      	movs	r3, #16
 8008e30:	e000      	b.n	8008e34 <HAL_DMA_Abort_IT+0xfc>
 8008e32:	2301      	movs	r3, #1
 8008e34:	4a42      	ldr	r2, [pc, #264]	; (8008f40 <HAL_DMA_Abort_IT+0x208>)
 8008e36:	6053      	str	r3, [r2, #4]
 8008e38:	e057      	b.n	8008eea <HAL_DMA_Abort_IT+0x1b2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a36      	ldr	r2, [pc, #216]	; (8008f18 <HAL_DMA_Abort_IT+0x1e0>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d04f      	beq.n	8008ee4 <HAL_DMA_Abort_IT+0x1ac>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a34      	ldr	r2, [pc, #208]	; (8008f1c <HAL_DMA_Abort_IT+0x1e4>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d048      	beq.n	8008ee0 <HAL_DMA_Abort_IT+0x1a8>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a33      	ldr	r2, [pc, #204]	; (8008f20 <HAL_DMA_Abort_IT+0x1e8>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d040      	beq.n	8008eda <HAL_DMA_Abort_IT+0x1a2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a31      	ldr	r2, [pc, #196]	; (8008f24 <HAL_DMA_Abort_IT+0x1ec>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d038      	beq.n	8008ed4 <HAL_DMA_Abort_IT+0x19c>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a30      	ldr	r2, [pc, #192]	; (8008f28 <HAL_DMA_Abort_IT+0x1f0>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d030      	beq.n	8008ece <HAL_DMA_Abort_IT+0x196>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a2e      	ldr	r2, [pc, #184]	; (8008f2c <HAL_DMA_Abort_IT+0x1f4>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d028      	beq.n	8008ec8 <HAL_DMA_Abort_IT+0x190>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a26      	ldr	r2, [pc, #152]	; (8008f14 <HAL_DMA_Abort_IT+0x1dc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d020      	beq.n	8008ec2 <HAL_DMA_Abort_IT+0x18a>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a2a      	ldr	r2, [pc, #168]	; (8008f30 <HAL_DMA_Abort_IT+0x1f8>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d019      	beq.n	8008ebe <HAL_DMA_Abort_IT+0x186>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a29      	ldr	r2, [pc, #164]	; (8008f34 <HAL_DMA_Abort_IT+0x1fc>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d012      	beq.n	8008eba <HAL_DMA_Abort_IT+0x182>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a27      	ldr	r2, [pc, #156]	; (8008f38 <HAL_DMA_Abort_IT+0x200>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00a      	beq.n	8008eb4 <HAL_DMA_Abort_IT+0x17c>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a26      	ldr	r2, [pc, #152]	; (8008f3c <HAL_DMA_Abort_IT+0x204>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d102      	bne.n	8008eae <HAL_DMA_Abort_IT+0x176>
 8008ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008eac:	e01b      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008eb2:	e018      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eb8:	e015      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008eba:	2310      	movs	r3, #16
 8008ebc:	e013      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e011      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ec6:	e00e      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008ec8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ecc:	e00b      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ed2:	e008      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ed8:	e005      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ede:	e002      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008ee0:	2310      	movs	r3, #16
 8008ee2:	e000      	b.n	8008ee6 <HAL_DMA_Abort_IT+0x1ae>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	4a17      	ldr	r2, [pc, #92]	; (8008f44 <HAL_DMA_Abort_IT+0x20c>)
 8008ee8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	4798      	blx	r3
    } 
  }
  return status;
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40020080 	.word	0x40020080
 8008f18:	40020008 	.word	0x40020008
 8008f1c:	4002001c 	.word	0x4002001c
 8008f20:	40020030 	.word	0x40020030
 8008f24:	40020044 	.word	0x40020044
 8008f28:	40020058 	.word	0x40020058
 8008f2c:	4002006c 	.word	0x4002006c
 8008f30:	40020408 	.word	0x40020408
 8008f34:	4002041c 	.word	0x4002041c
 8008f38:	40020430 	.word	0x40020430
 8008f3c:	40020444 	.word	0x40020444
 8008f40:	40020400 	.word	0x40020400
 8008f44:	40020000 	.word	0x40020000

08008f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b08b      	sub	sp, #44	; 0x2c
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f52:	2300      	movs	r3, #0
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008f56:	2300      	movs	r3, #0
 8008f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f5a:	e179      	b.n	8009250 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	fa02 f303 	lsl.w	r3, r2, r3
 8008f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	f040 8168 	bne.w	800924a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	4a96      	ldr	r2, [pc, #600]	; (80091d8 <HAL_GPIO_Init+0x290>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d05e      	beq.n	8009042 <HAL_GPIO_Init+0xfa>
 8008f84:	4a94      	ldr	r2, [pc, #592]	; (80091d8 <HAL_GPIO_Init+0x290>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d875      	bhi.n	8009076 <HAL_GPIO_Init+0x12e>
 8008f8a:	4a94      	ldr	r2, [pc, #592]	; (80091dc <HAL_GPIO_Init+0x294>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d058      	beq.n	8009042 <HAL_GPIO_Init+0xfa>
 8008f90:	4a92      	ldr	r2, [pc, #584]	; (80091dc <HAL_GPIO_Init+0x294>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d86f      	bhi.n	8009076 <HAL_GPIO_Init+0x12e>
 8008f96:	4a92      	ldr	r2, [pc, #584]	; (80091e0 <HAL_GPIO_Init+0x298>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d052      	beq.n	8009042 <HAL_GPIO_Init+0xfa>
 8008f9c:	4a90      	ldr	r2, [pc, #576]	; (80091e0 <HAL_GPIO_Init+0x298>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d869      	bhi.n	8009076 <HAL_GPIO_Init+0x12e>
 8008fa2:	4a90      	ldr	r2, [pc, #576]	; (80091e4 <HAL_GPIO_Init+0x29c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d04c      	beq.n	8009042 <HAL_GPIO_Init+0xfa>
 8008fa8:	4a8e      	ldr	r2, [pc, #568]	; (80091e4 <HAL_GPIO_Init+0x29c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d863      	bhi.n	8009076 <HAL_GPIO_Init+0x12e>
 8008fae:	4a8e      	ldr	r2, [pc, #568]	; (80091e8 <HAL_GPIO_Init+0x2a0>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d046      	beq.n	8009042 <HAL_GPIO_Init+0xfa>
 8008fb4:	4a8c      	ldr	r2, [pc, #560]	; (80091e8 <HAL_GPIO_Init+0x2a0>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d85d      	bhi.n	8009076 <HAL_GPIO_Init+0x12e>
 8008fba:	2b12      	cmp	r3, #18
 8008fbc:	d82a      	bhi.n	8009014 <HAL_GPIO_Init+0xcc>
 8008fbe:	2b12      	cmp	r3, #18
 8008fc0:	d859      	bhi.n	8009076 <HAL_GPIO_Init+0x12e>
 8008fc2:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <HAL_GPIO_Init+0x80>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08009043 	.word	0x08009043
 8008fcc:	0800901d 	.word	0x0800901d
 8008fd0:	0800902f 	.word	0x0800902f
 8008fd4:	08009071 	.word	0x08009071
 8008fd8:	08009077 	.word	0x08009077
 8008fdc:	08009077 	.word	0x08009077
 8008fe0:	08009077 	.word	0x08009077
 8008fe4:	08009077 	.word	0x08009077
 8008fe8:	08009077 	.word	0x08009077
 8008fec:	08009077 	.word	0x08009077
 8008ff0:	08009077 	.word	0x08009077
 8008ff4:	08009077 	.word	0x08009077
 8008ff8:	08009077 	.word	0x08009077
 8008ffc:	08009077 	.word	0x08009077
 8009000:	08009077 	.word	0x08009077
 8009004:	08009077 	.word	0x08009077
 8009008:	08009077 	.word	0x08009077
 800900c:	08009025 	.word	0x08009025
 8009010:	08009039 	.word	0x08009039
 8009014:	4a75      	ldr	r2, [pc, #468]	; (80091ec <HAL_GPIO_Init+0x2a4>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d013      	beq.n	8009042 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800901a:	e02c      	b.n	8009076 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	623b      	str	r3, [r7, #32]
          break;
 8009022:	e029      	b.n	8009078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	3304      	adds	r3, #4
 800902a:	623b      	str	r3, [r7, #32]
          break;
 800902c:	e024      	b.n	8009078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	3308      	adds	r3, #8
 8009034:	623b      	str	r3, [r7, #32]
          break;
 8009036:	e01f      	b.n	8009078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	330c      	adds	r3, #12
 800903e:	623b      	str	r3, [r7, #32]
          break;
 8009040:	e01a      	b.n	8009078 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800904a:	2304      	movs	r3, #4
 800904c:	623b      	str	r3, [r7, #32]
          break;
 800904e:	e013      	b.n	8009078 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d105      	bne.n	8009064 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009058:	2308      	movs	r3, #8
 800905a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	611a      	str	r2, [r3, #16]
          break;
 8009062:	e009      	b.n	8009078 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009064:	2308      	movs	r3, #8
 8009066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	69fa      	ldr	r2, [r7, #28]
 800906c:	615a      	str	r2, [r3, #20]
          break;
 800906e:	e003      	b.n	8009078 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009070:	2300      	movs	r3, #0
 8009072:	623b      	str	r3, [r7, #32]
          break;
 8009074:	e000      	b.n	8009078 <HAL_GPIO_Init+0x130>
          break;
 8009076:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	2bff      	cmp	r3, #255	; 0xff
 800907c:	d801      	bhi.n	8009082 <HAL_GPIO_Init+0x13a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	e001      	b.n	8009086 <HAL_GPIO_Init+0x13e>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	3304      	adds	r3, #4
 8009086:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	2bff      	cmp	r3, #255	; 0xff
 800908c:	d802      	bhi.n	8009094 <HAL_GPIO_Init+0x14c>
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	e002      	b.n	800909a <HAL_GPIO_Init+0x152>
 8009094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009096:	3b08      	subs	r3, #8
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	210f      	movs	r1, #15
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	fa01 f303 	lsl.w	r3, r1, r3
 80090a8:	43db      	mvns	r3, r3
 80090aa:	401a      	ands	r2, r3
 80090ac:	6a39      	ldr	r1, [r7, #32]
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	fa01 f303 	lsl.w	r3, r1, r3
 80090b4:	431a      	orrs	r2, r3
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 80c1 	beq.w	800924a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80090c8:	4b49      	ldr	r3, [pc, #292]	; (80091f0 <HAL_GPIO_Init+0x2a8>)
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	4a48      	ldr	r2, [pc, #288]	; (80091f0 <HAL_GPIO_Init+0x2a8>)
 80090ce:	f043 0301 	orr.w	r3, r3, #1
 80090d2:	6193      	str	r3, [r2, #24]
 80090d4:	4b46      	ldr	r3, [pc, #280]	; (80091f0 <HAL_GPIO_Init+0x2a8>)
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	60bb      	str	r3, [r7, #8]
 80090de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80090e0:	4a44      	ldr	r2, [pc, #272]	; (80091f4 <HAL_GPIO_Init+0x2ac>)
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	089b      	lsrs	r3, r3, #2
 80090e6:	3302      	adds	r3, #2
 80090e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	f003 0303 	and.w	r3, r3, #3
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	220f      	movs	r2, #15
 80090f8:	fa02 f303 	lsl.w	r3, r2, r3
 80090fc:	43db      	mvns	r3, r3
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4013      	ands	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a3c      	ldr	r2, [pc, #240]	; (80091f8 <HAL_GPIO_Init+0x2b0>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d01f      	beq.n	800914c <HAL_GPIO_Init+0x204>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a3b      	ldr	r2, [pc, #236]	; (80091fc <HAL_GPIO_Init+0x2b4>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d019      	beq.n	8009148 <HAL_GPIO_Init+0x200>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a3a      	ldr	r2, [pc, #232]	; (8009200 <HAL_GPIO_Init+0x2b8>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d013      	beq.n	8009144 <HAL_GPIO_Init+0x1fc>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a39      	ldr	r2, [pc, #228]	; (8009204 <HAL_GPIO_Init+0x2bc>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d00d      	beq.n	8009140 <HAL_GPIO_Init+0x1f8>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a38      	ldr	r2, [pc, #224]	; (8009208 <HAL_GPIO_Init+0x2c0>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d007      	beq.n	800913c <HAL_GPIO_Init+0x1f4>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a37      	ldr	r2, [pc, #220]	; (800920c <HAL_GPIO_Init+0x2c4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d101      	bne.n	8009138 <HAL_GPIO_Init+0x1f0>
 8009134:	2305      	movs	r3, #5
 8009136:	e00a      	b.n	800914e <HAL_GPIO_Init+0x206>
 8009138:	2306      	movs	r3, #6
 800913a:	e008      	b.n	800914e <HAL_GPIO_Init+0x206>
 800913c:	2304      	movs	r3, #4
 800913e:	e006      	b.n	800914e <HAL_GPIO_Init+0x206>
 8009140:	2303      	movs	r3, #3
 8009142:	e004      	b.n	800914e <HAL_GPIO_Init+0x206>
 8009144:	2302      	movs	r3, #2
 8009146:	e002      	b.n	800914e <HAL_GPIO_Init+0x206>
 8009148:	2301      	movs	r3, #1
 800914a:	e000      	b.n	800914e <HAL_GPIO_Init+0x206>
 800914c:	2300      	movs	r3, #0
 800914e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009150:	f002 0203 	and.w	r2, r2, #3
 8009154:	0092      	lsls	r2, r2, #2
 8009156:	4093      	lsls	r3, r2
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800915e:	4925      	ldr	r1, [pc, #148]	; (80091f4 <HAL_GPIO_Init+0x2ac>)
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	089b      	lsrs	r3, r3, #2
 8009164:	3302      	adds	r3, #2
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d006      	beq.n	8009186 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009178:	4b25      	ldr	r3, [pc, #148]	; (8009210 <HAL_GPIO_Init+0x2c8>)
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	4924      	ldr	r1, [pc, #144]	; (8009210 <HAL_GPIO_Init+0x2c8>)
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	4313      	orrs	r3, r2
 8009182:	608b      	str	r3, [r1, #8]
 8009184:	e006      	b.n	8009194 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009186:	4b22      	ldr	r3, [pc, #136]	; (8009210 <HAL_GPIO_Init+0x2c8>)
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	43db      	mvns	r3, r3
 800918e:	4920      	ldr	r1, [pc, #128]	; (8009210 <HAL_GPIO_Init+0x2c8>)
 8009190:	4013      	ands	r3, r2
 8009192:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d006      	beq.n	80091ae <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80091a0:	4b1b      	ldr	r3, [pc, #108]	; (8009210 <HAL_GPIO_Init+0x2c8>)
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	491a      	ldr	r1, [pc, #104]	; (8009210 <HAL_GPIO_Init+0x2c8>)
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60cb      	str	r3, [r1, #12]
 80091ac:	e006      	b.n	80091bc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80091ae:	4b18      	ldr	r3, [pc, #96]	; (8009210 <HAL_GPIO_Init+0x2c8>)
 80091b0:	68da      	ldr	r2, [r3, #12]
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	43db      	mvns	r3, r3
 80091b6:	4916      	ldr	r1, [pc, #88]	; (8009210 <HAL_GPIO_Init+0x2c8>)
 80091b8:	4013      	ands	r3, r2
 80091ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d025      	beq.n	8009214 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80091c8:	4b11      	ldr	r3, [pc, #68]	; (8009210 <HAL_GPIO_Init+0x2c8>)
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	4910      	ldr	r1, [pc, #64]	; (8009210 <HAL_GPIO_Init+0x2c8>)
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	604b      	str	r3, [r1, #4]
 80091d4:	e025      	b.n	8009222 <HAL_GPIO_Init+0x2da>
 80091d6:	bf00      	nop
 80091d8:	10320000 	.word	0x10320000
 80091dc:	10310000 	.word	0x10310000
 80091e0:	10220000 	.word	0x10220000
 80091e4:	10210000 	.word	0x10210000
 80091e8:	10120000 	.word	0x10120000
 80091ec:	10110000 	.word	0x10110000
 80091f0:	40021000 	.word	0x40021000
 80091f4:	40010000 	.word	0x40010000
 80091f8:	40010800 	.word	0x40010800
 80091fc:	40010c00 	.word	0x40010c00
 8009200:	40011000 	.word	0x40011000
 8009204:	40011400 	.word	0x40011400
 8009208:	40011800 	.word	0x40011800
 800920c:	40011c00 	.word	0x40011c00
 8009210:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009214:	4b15      	ldr	r3, [pc, #84]	; (800926c <HAL_GPIO_Init+0x324>)
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	43db      	mvns	r3, r3
 800921c:	4913      	ldr	r1, [pc, #76]	; (800926c <HAL_GPIO_Init+0x324>)
 800921e:	4013      	ands	r3, r2
 8009220:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d006      	beq.n	800923c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800922e:	4b0f      	ldr	r3, [pc, #60]	; (800926c <HAL_GPIO_Init+0x324>)
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	490e      	ldr	r1, [pc, #56]	; (800926c <HAL_GPIO_Init+0x324>)
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	4313      	orrs	r3, r2
 8009238:	600b      	str	r3, [r1, #0]
 800923a:	e006      	b.n	800924a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800923c:	4b0b      	ldr	r3, [pc, #44]	; (800926c <HAL_GPIO_Init+0x324>)
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	43db      	mvns	r3, r3
 8009244:	4909      	ldr	r1, [pc, #36]	; (800926c <HAL_GPIO_Init+0x324>)
 8009246:	4013      	ands	r3, r2
 8009248:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	3301      	adds	r3, #1
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	fa22 f303 	lsr.w	r3, r2, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	f47f ae7e 	bne.w	8008f5c <HAL_GPIO_Init+0x14>
  }
}
 8009260:	bf00      	nop
 8009262:	bf00      	nop
 8009264:	372c      	adds	r7, #44	; 0x2c
 8009266:	46bd      	mov	sp, r7
 8009268:	bc80      	pop	{r7}
 800926a:	4770      	bx	lr
 800926c:	40010400 	.word	0x40010400

08009270 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009270:	b480      	push	{r7}
 8009272:	b089      	sub	sp, #36	; 0x24
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800927a:	2300      	movs	r3, #0
 800927c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800927e:	e0a6      	b.n	80093ce <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009280:	2201      	movs	r2, #1
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	fa02 f303 	lsl.w	r3, r2, r3
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	4013      	ands	r3, r2
 800928c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8099 	beq.w	80093c8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009296:	4a54      	ldr	r2, [pc, #336]	; (80093e8 <HAL_GPIO_DeInit+0x178>)
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	089b      	lsrs	r3, r3, #2
 800929c:	3302      	adds	r3, #2
 800929e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092a2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	220f      	movs	r2, #15
 80092ae:	fa02 f303 	lsl.w	r3, r2, r3
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	4013      	ands	r3, r2
 80092b6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a4c      	ldr	r2, [pc, #304]	; (80093ec <HAL_GPIO_DeInit+0x17c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d01f      	beq.n	8009300 <HAL_GPIO_DeInit+0x90>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a4b      	ldr	r2, [pc, #300]	; (80093f0 <HAL_GPIO_DeInit+0x180>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d019      	beq.n	80092fc <HAL_GPIO_DeInit+0x8c>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a4a      	ldr	r2, [pc, #296]	; (80093f4 <HAL_GPIO_DeInit+0x184>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d013      	beq.n	80092f8 <HAL_GPIO_DeInit+0x88>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a49      	ldr	r2, [pc, #292]	; (80093f8 <HAL_GPIO_DeInit+0x188>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d00d      	beq.n	80092f4 <HAL_GPIO_DeInit+0x84>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a48      	ldr	r2, [pc, #288]	; (80093fc <HAL_GPIO_DeInit+0x18c>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d007      	beq.n	80092f0 <HAL_GPIO_DeInit+0x80>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a47      	ldr	r2, [pc, #284]	; (8009400 <HAL_GPIO_DeInit+0x190>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d101      	bne.n	80092ec <HAL_GPIO_DeInit+0x7c>
 80092e8:	2305      	movs	r3, #5
 80092ea:	e00a      	b.n	8009302 <HAL_GPIO_DeInit+0x92>
 80092ec:	2306      	movs	r3, #6
 80092ee:	e008      	b.n	8009302 <HAL_GPIO_DeInit+0x92>
 80092f0:	2304      	movs	r3, #4
 80092f2:	e006      	b.n	8009302 <HAL_GPIO_DeInit+0x92>
 80092f4:	2303      	movs	r3, #3
 80092f6:	e004      	b.n	8009302 <HAL_GPIO_DeInit+0x92>
 80092f8:	2302      	movs	r3, #2
 80092fa:	e002      	b.n	8009302 <HAL_GPIO_DeInit+0x92>
 80092fc:	2301      	movs	r3, #1
 80092fe:	e000      	b.n	8009302 <HAL_GPIO_DeInit+0x92>
 8009300:	2300      	movs	r3, #0
 8009302:	69fa      	ldr	r2, [r7, #28]
 8009304:	f002 0203 	and.w	r2, r2, #3
 8009308:	0092      	lsls	r2, r2, #2
 800930a:	4093      	lsls	r3, r2
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	429a      	cmp	r2, r3
 8009310:	d132      	bne.n	8009378 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009312:	4b3c      	ldr	r3, [pc, #240]	; (8009404 <HAL_GPIO_DeInit+0x194>)
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	43db      	mvns	r3, r3
 800931a:	493a      	ldr	r1, [pc, #232]	; (8009404 <HAL_GPIO_DeInit+0x194>)
 800931c:	4013      	ands	r3, r2
 800931e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009320:	4b38      	ldr	r3, [pc, #224]	; (8009404 <HAL_GPIO_DeInit+0x194>)
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	43db      	mvns	r3, r3
 8009328:	4936      	ldr	r1, [pc, #216]	; (8009404 <HAL_GPIO_DeInit+0x194>)
 800932a:	4013      	ands	r3, r2
 800932c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800932e:	4b35      	ldr	r3, [pc, #212]	; (8009404 <HAL_GPIO_DeInit+0x194>)
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	43db      	mvns	r3, r3
 8009336:	4933      	ldr	r1, [pc, #204]	; (8009404 <HAL_GPIO_DeInit+0x194>)
 8009338:	4013      	ands	r3, r2
 800933a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800933c:	4b31      	ldr	r3, [pc, #196]	; (8009404 <HAL_GPIO_DeInit+0x194>)
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	43db      	mvns	r3, r3
 8009344:	492f      	ldr	r1, [pc, #188]	; (8009404 <HAL_GPIO_DeInit+0x194>)
 8009346:	4013      	ands	r3, r2
 8009348:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	f003 0303 	and.w	r3, r3, #3
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	220f      	movs	r2, #15
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800935a:	4a23      	ldr	r2, [pc, #140]	; (80093e8 <HAL_GPIO_DeInit+0x178>)
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	089b      	lsrs	r3, r3, #2
 8009360:	3302      	adds	r3, #2
 8009362:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	43da      	mvns	r2, r3
 800936a:	481f      	ldr	r0, [pc, #124]	; (80093e8 <HAL_GPIO_DeInit+0x178>)
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	089b      	lsrs	r3, r3, #2
 8009370:	400a      	ands	r2, r1
 8009372:	3302      	adds	r3, #2
 8009374:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	2bff      	cmp	r3, #255	; 0xff
 800937c:	d801      	bhi.n	8009382 <HAL_GPIO_DeInit+0x112>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	e001      	b.n	8009386 <HAL_GPIO_DeInit+0x116>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3304      	adds	r3, #4
 8009386:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	2bff      	cmp	r3, #255	; 0xff
 800938c:	d802      	bhi.n	8009394 <HAL_GPIO_DeInit+0x124>
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	e002      	b.n	800939a <HAL_GPIO_DeInit+0x12a>
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	3b08      	subs	r3, #8
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	210f      	movs	r1, #15
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	fa01 f303 	lsl.w	r3, r1, r3
 80093a8:	43db      	mvns	r3, r3
 80093aa:	401a      	ands	r2, r3
 80093ac:	2104      	movs	r1, #4
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	fa01 f303 	lsl.w	r3, r1, r3
 80093b4:	431a      	orrs	r2, r3
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	43db      	mvns	r3, r3
 80093c2:	401a      	ands	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	3301      	adds	r3, #1
 80093cc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	fa22 f303 	lsr.w	r3, r2, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f47f af52 	bne.w	8009280 <HAL_GPIO_DeInit+0x10>
  }
}
 80093dc:	bf00      	nop
 80093de:	bf00      	nop
 80093e0:	3724      	adds	r7, #36	; 0x24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bc80      	pop	{r7}
 80093e6:	4770      	bx	lr
 80093e8:	40010000 	.word	0x40010000
 80093ec:	40010800 	.word	0x40010800
 80093f0:	40010c00 	.word	0x40010c00
 80093f4:	40011000 	.word	0x40011000
 80093f8:	40011400 	.word	0x40011400
 80093fc:	40011800 	.word	0x40011800
 8009400:	40011c00 	.word	0x40011c00
 8009404:	40010400 	.word	0x40010400

08009408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689a      	ldr	r2, [r3, #8]
 8009418:	887b      	ldrh	r3, [r7, #2]
 800941a:	4013      	ands	r3, r2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009420:	2301      	movs	r3, #1
 8009422:	73fb      	strb	r3, [r7, #15]
 8009424:	e001      	b.n	800942a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009426:	2300      	movs	r3, #0
 8009428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800942a:	7bfb      	ldrb	r3, [r7, #15]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	bc80      	pop	{r7}
 8009434:	4770      	bx	lr

08009436 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	460b      	mov	r3, r1
 8009440:	807b      	strh	r3, [r7, #2]
 8009442:	4613      	mov	r3, r2
 8009444:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009446:	787b      	ldrb	r3, [r7, #1]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800944c:	887a      	ldrh	r2, [r7, #2]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009452:	e003      	b.n	800945c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009454:	887b      	ldrh	r3, [r7, #2]
 8009456:	041a      	lsls	r2, r3, #16
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	611a      	str	r2, [r3, #16]
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	bc80      	pop	{r7}
 8009464:	4770      	bx	lr

08009466 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009466:	b480      	push	{r7}
 8009468:	b085      	sub	sp, #20
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009478:	887a      	ldrh	r2, [r7, #2]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4013      	ands	r3, r2
 800947e:	041a      	lsls	r2, r3, #16
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	43d9      	mvns	r1, r3
 8009484:	887b      	ldrh	r3, [r7, #2]
 8009486:	400b      	ands	r3, r1
 8009488:	431a      	orrs	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	611a      	str	r2, [r3, #16]
}
 800948e:	bf00      	nop
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	bc80      	pop	{r7}
 8009496:	4770      	bx	lr

08009498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e12b      	b.n	8009702 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d106      	bne.n	80094c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7fe fff8 	bl	80084b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2224      	movs	r2, #36	; 0x24
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0201 	bic.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80094fc:	f001 fdb8 	bl	800b070 <HAL_RCC_GetPCLK1Freq>
 8009500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	4a81      	ldr	r2, [pc, #516]	; (800970c <HAL_I2C_Init+0x274>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d807      	bhi.n	800951c <HAL_I2C_Init+0x84>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4a80      	ldr	r2, [pc, #512]	; (8009710 <HAL_I2C_Init+0x278>)
 8009510:	4293      	cmp	r3, r2
 8009512:	bf94      	ite	ls
 8009514:	2301      	movls	r3, #1
 8009516:	2300      	movhi	r3, #0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	e006      	b.n	800952a <HAL_I2C_Init+0x92>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4a7d      	ldr	r2, [pc, #500]	; (8009714 <HAL_I2C_Init+0x27c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	bf94      	ite	ls
 8009524:	2301      	movls	r3, #1
 8009526:	2300      	movhi	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e0e7      	b.n	8009702 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4a78      	ldr	r2, [pc, #480]	; (8009718 <HAL_I2C_Init+0x280>)
 8009536:	fba2 2303 	umull	r2, r3, r2, r3
 800953a:	0c9b      	lsrs	r3, r3, #18
 800953c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	430a      	orrs	r2, r1
 8009550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	4a6a      	ldr	r2, [pc, #424]	; (800970c <HAL_I2C_Init+0x274>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d802      	bhi.n	800956c <HAL_I2C_Init+0xd4>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	3301      	adds	r3, #1
 800956a:	e009      	b.n	8009580 <HAL_I2C_Init+0xe8>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009572:	fb02 f303 	mul.w	r3, r2, r3
 8009576:	4a69      	ldr	r2, [pc, #420]	; (800971c <HAL_I2C_Init+0x284>)
 8009578:	fba2 2303 	umull	r2, r3, r2, r3
 800957c:	099b      	lsrs	r3, r3, #6
 800957e:	3301      	adds	r3, #1
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6812      	ldr	r2, [r2, #0]
 8009584:	430b      	orrs	r3, r1
 8009586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009592:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	495c      	ldr	r1, [pc, #368]	; (800970c <HAL_I2C_Init+0x274>)
 800959c:	428b      	cmp	r3, r1
 800959e:	d819      	bhi.n	80095d4 <HAL_I2C_Init+0x13c>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	1e59      	subs	r1, r3, #1
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80095ae:	1c59      	adds	r1, r3, #1
 80095b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80095b4:	400b      	ands	r3, r1
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00a      	beq.n	80095d0 <HAL_I2C_Init+0x138>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	1e59      	subs	r1, r3, #1
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80095c8:	3301      	adds	r3, #1
 80095ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095ce:	e051      	b.n	8009674 <HAL_I2C_Init+0x1dc>
 80095d0:	2304      	movs	r3, #4
 80095d2:	e04f      	b.n	8009674 <HAL_I2C_Init+0x1dc>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d111      	bne.n	8009600 <HAL_I2C_Init+0x168>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	1e58      	subs	r0, r3, #1
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6859      	ldr	r1, [r3, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	440b      	add	r3, r1
 80095ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80095ee:	3301      	adds	r3, #1
 80095f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bf0c      	ite	eq
 80095f8:	2301      	moveq	r3, #1
 80095fa:	2300      	movne	r3, #0
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	e012      	b.n	8009626 <HAL_I2C_Init+0x18e>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	1e58      	subs	r0, r3, #1
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6859      	ldr	r1, [r3, #4]
 8009608:	460b      	mov	r3, r1
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	0099      	lsls	r1, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	fbb0 f3f3 	udiv	r3, r0, r3
 8009616:	3301      	adds	r3, #1
 8009618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800961c:	2b00      	cmp	r3, #0
 800961e:	bf0c      	ite	eq
 8009620:	2301      	moveq	r3, #1
 8009622:	2300      	movne	r3, #0
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <HAL_I2C_Init+0x196>
 800962a:	2301      	movs	r3, #1
 800962c:	e022      	b.n	8009674 <HAL_I2C_Init+0x1dc>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10e      	bne.n	8009654 <HAL_I2C_Init+0x1bc>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	1e58      	subs	r0, r3, #1
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6859      	ldr	r1, [r3, #4]
 800963e:	460b      	mov	r3, r1
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	440b      	add	r3, r1
 8009644:	fbb0 f3f3 	udiv	r3, r0, r3
 8009648:	3301      	adds	r3, #1
 800964a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800964e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009652:	e00f      	b.n	8009674 <HAL_I2C_Init+0x1dc>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	1e58      	subs	r0, r3, #1
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6859      	ldr	r1, [r3, #4]
 800965c:	460b      	mov	r3, r1
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	440b      	add	r3, r1
 8009662:	0099      	lsls	r1, r3, #2
 8009664:	440b      	add	r3, r1
 8009666:	fbb0 f3f3 	udiv	r3, r0, r3
 800966a:	3301      	adds	r3, #1
 800966c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009670:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009674:	6879      	ldr	r1, [r7, #4]
 8009676:	6809      	ldr	r1, [r1, #0]
 8009678:	4313      	orrs	r3, r2
 800967a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	69da      	ldr	r2, [r3, #28]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80096a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6911      	ldr	r1, [r2, #16]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	68d2      	ldr	r2, [r2, #12]
 80096ae:	4311      	orrs	r1, r2
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6812      	ldr	r2, [r2, #0]
 80096b4:	430b      	orrs	r3, r1
 80096b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695a      	ldr	r2, [r3, #20]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0201 	orr.w	r2, r2, #1
 80096e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	000186a0 	.word	0x000186a0
 8009710:	001e847f 	.word	0x001e847f
 8009714:	003d08ff 	.word	0x003d08ff
 8009718:	431bde83 	.word	0x431bde83
 800971c:	10624dd3 	.word	0x10624dd3

08009720 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e021      	b.n	8009776 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2224      	movs	r2, #36	; 0x24
 8009736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 0201 	bic.w	r2, r2, #1
 8009748:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7fe fef0 	bl	8008530 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af02      	add	r7, sp, #8
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	607a      	str	r2, [r7, #4]
 800978a:	461a      	mov	r2, r3
 800978c:	460b      	mov	r3, r1
 800978e:	817b      	strh	r3, [r7, #10]
 8009790:	4613      	mov	r3, r2
 8009792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009794:	f7ff f85e 	bl	8008854 <HAL_GetTick>
 8009798:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b20      	cmp	r3, #32
 80097a4:	f040 80e0 	bne.w	8009968 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	2319      	movs	r3, #25
 80097ae:	2201      	movs	r2, #1
 80097b0:	4970      	ldr	r1, [pc, #448]	; (8009974 <HAL_I2C_Master_Transmit+0x1f4>)
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fe5c 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80097be:	2302      	movs	r3, #2
 80097c0:	e0d3      	b.n	800996a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_I2C_Master_Transmit+0x50>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e0cc      	b.n	800996a <HAL_I2C_Master_Transmit+0x1ea>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d007      	beq.n	80097f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f042 0201 	orr.w	r2, r2, #1
 80097f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2221      	movs	r2, #33	; 0x21
 800980a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2210      	movs	r2, #16
 8009812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	893a      	ldrh	r2, [r7, #8]
 8009826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982c:	b29a      	uxth	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	4a50      	ldr	r2, [pc, #320]	; (8009978 <HAL_I2C_Master_Transmit+0x1f8>)
 8009836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009838:	8979      	ldrh	r1, [r7, #10]
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	6a3a      	ldr	r2, [r7, #32]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 fc16 	bl	800a070 <I2C_MasterRequestWrite>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e08d      	b.n	800996a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800984e:	2300      	movs	r3, #0
 8009850:	613b      	str	r3, [r7, #16]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	613b      	str	r3, [r7, #16]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	613b      	str	r3, [r7, #16]
 8009862:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009864:	e066      	b.n	8009934 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	6a39      	ldr	r1, [r7, #32]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 ff1a 	bl	800a6a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00d      	beq.n	8009892 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987a:	2b04      	cmp	r3, #4
 800987c:	d107      	bne.n	800988e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800988c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e06b      	b.n	800996a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009896:	781a      	ldrb	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	3b01      	subs	r3, #1
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ba:	3b01      	subs	r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	d11b      	bne.n	8009908 <HAL_I2C_Master_Transmit+0x188>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d017      	beq.n	8009908 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	781a      	ldrb	r2, [r3, #0]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	3b01      	subs	r3, #1
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009900:	3b01      	subs	r3, #1
 8009902:	b29a      	uxth	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	6a39      	ldr	r1, [r7, #32]
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 ff11 	bl	800a734 <I2C_WaitOnBTFFlagUntilTimeout>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00d      	beq.n	8009934 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991c:	2b04      	cmp	r3, #4
 800991e:	d107      	bne.n	8009930 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800992e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e01a      	b.n	800996a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009938:	2b00      	cmp	r3, #0
 800993a:	d194      	bne.n	8009866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800994a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2220      	movs	r2, #32
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	e000      	b.n	800996a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009968:	2302      	movs	r3, #2
  }
}
 800996a:	4618      	mov	r0, r3
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	00100002 	.word	0x00100002
 8009978:	ffff0000 	.word	0xffff0000

0800997c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af02      	add	r7, sp, #8
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	4608      	mov	r0, r1
 8009986:	4611      	mov	r1, r2
 8009988:	461a      	mov	r2, r3
 800998a:	4603      	mov	r3, r0
 800998c:	817b      	strh	r3, [r7, #10]
 800998e:	460b      	mov	r3, r1
 8009990:	813b      	strh	r3, [r7, #8]
 8009992:	4613      	mov	r3, r2
 8009994:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009996:	f7fe ff5d 	bl	8008854 <HAL_GetTick>
 800999a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	f040 80d9 	bne.w	8009b5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	2319      	movs	r3, #25
 80099b0:	2201      	movs	r2, #1
 80099b2:	496d      	ldr	r1, [pc, #436]	; (8009b68 <HAL_I2C_Mem_Write+0x1ec>)
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 fd5b 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80099c0:	2302      	movs	r3, #2
 80099c2:	e0cc      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d101      	bne.n	80099d2 <HAL_I2C_Mem_Write+0x56>
 80099ce:	2302      	movs	r3, #2
 80099d0:	e0c5      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d007      	beq.n	80099f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f042 0201 	orr.w	r2, r2, #1
 80099f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2221      	movs	r2, #33	; 0x21
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2240      	movs	r2, #64	; 0x40
 8009a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a3a      	ldr	r2, [r7, #32]
 8009a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4a4d      	ldr	r2, [pc, #308]	; (8009b6c <HAL_I2C_Mem_Write+0x1f0>)
 8009a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a3a:	88f8      	ldrh	r0, [r7, #6]
 8009a3c:	893a      	ldrh	r2, [r7, #8]
 8009a3e:	8979      	ldrh	r1, [r7, #10]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	4603      	mov	r3, r0
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 fb92 	bl	800a174 <I2C_RequestMemoryWrite>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d052      	beq.n	8009afc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e081      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 fe20 	bl	800a6a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00d      	beq.n	8009a86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6e:	2b04      	cmp	r3, #4
 8009a70:	d107      	bne.n	8009a82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e06b      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	d11b      	bne.n	8009afc <HAL_I2C_Mem_Write+0x180>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d017      	beq.n	8009afc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1aa      	bne.n	8009a5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 fe13 	bl	800a734 <I2C_WaitOnBTFFlagUntilTimeout>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00d      	beq.n	8009b30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b18:	2b04      	cmp	r3, #4
 8009b1a:	d107      	bne.n	8009b2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e016      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2220      	movs	r2, #32
 8009b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e000      	b.n	8009b5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009b5c:	2302      	movs	r3, #2
  }
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	00100002 	.word	0x00100002
 8009b6c:	ffff0000 	.word	0xffff0000

08009b70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08c      	sub	sp, #48	; 0x30
 8009b74:	af02      	add	r7, sp, #8
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	4608      	mov	r0, r1
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	4603      	mov	r3, r0
 8009b80:	817b      	strh	r3, [r7, #10]
 8009b82:	460b      	mov	r3, r1
 8009b84:	813b      	strh	r3, [r7, #8]
 8009b86:	4613      	mov	r3, r2
 8009b88:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b8e:	f7fe fe61 	bl	8008854 <HAL_GetTick>
 8009b92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b20      	cmp	r3, #32
 8009b9e:	f040 8244 	bne.w	800a02a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	2319      	movs	r3, #25
 8009ba8:	2201      	movs	r2, #1
 8009baa:	4982      	ldr	r1, [pc, #520]	; (8009db4 <HAL_I2C_Mem_Read+0x244>)
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 fc5f 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009bb8:	2302      	movs	r3, #2
 8009bba:	e237      	b.n	800a02c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <HAL_I2C_Mem_Read+0x5a>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e230      	b.n	800a02c <HAL_I2C_Mem_Read+0x4bc>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d007      	beq.n	8009bf0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f042 0201 	orr.w	r2, r2, #1
 8009bee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2222      	movs	r2, #34	; 0x22
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2240      	movs	r2, #64	; 0x40
 8009c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4a62      	ldr	r2, [pc, #392]	; (8009db8 <HAL_I2C_Mem_Read+0x248>)
 8009c30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c32:	88f8      	ldrh	r0, [r7, #6]
 8009c34:	893a      	ldrh	r2, [r7, #8]
 8009c36:	8979      	ldrh	r1, [r7, #10]
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	9301      	str	r3, [sp, #4]
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	4603      	mov	r3, r0
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f000 fb2c 	bl	800a2a0 <I2C_RequestMemoryRead>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e1ec      	b.n	800a02c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d113      	bne.n	8009c82 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	61fb      	str	r3, [r7, #28]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	61fb      	str	r3, [r7, #28]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	61fb      	str	r3, [r7, #28]
 8009c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	e1c0      	b.n	800a004 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d11e      	bne.n	8009cc8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c9a:	b672      	cpsid	i
}
 8009c9c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	61bb      	str	r3, [r7, #24]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	61bb      	str	r3, [r7, #24]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	61bb      	str	r3, [r7, #24]
 8009cb2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009cc4:	b662      	cpsie	i
}
 8009cc6:	e035      	b.n	8009d34 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d11e      	bne.n	8009d0e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ce0:	b672      	cpsid	i
}
 8009ce2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	617b      	str	r3, [r7, #20]
 8009cf8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009d0a:	b662      	cpsie	i
}
 8009d0c:	e012      	b.n	8009d34 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d1c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d1e:	2300      	movs	r3, #0
 8009d20:	613b      	str	r3, [r7, #16]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	613b      	str	r3, [r7, #16]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	613b      	str	r3, [r7, #16]
 8009d32:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009d34:	e166      	b.n	800a004 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	f200 811f 	bhi.w	8009f7e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d123      	bne.n	8009d90 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f000 fd39 	bl	800a7c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e167      	b.n	800a02c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	691a      	ldr	r2, [r3, #16]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	b2d2      	uxtb	r2, r2
 8009d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	3b01      	subs	r3, #1
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d8e:	e139      	b.n	800a004 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d152      	bne.n	8009e3e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	2200      	movs	r2, #0
 8009da0:	4906      	ldr	r1, [pc, #24]	; (8009dbc <HAL_I2C_Mem_Read+0x24c>)
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 fb64 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d008      	beq.n	8009dc0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e13c      	b.n	800a02c <HAL_I2C_Mem_Read+0x4bc>
 8009db2:	bf00      	nop
 8009db4:	00100002 	.word	0x00100002
 8009db8:	ffff0000 	.word	0xffff0000
 8009dbc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009dc0:	b672      	cpsid	i
}
 8009dc2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	691a      	ldr	r2, [r3, #16]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df0:	3b01      	subs	r3, #1
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009e06:	b662      	cpsie	i
}
 8009e08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	691a      	ldr	r2, [r3, #16]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e14:	b2d2      	uxtb	r2, r2
 8009e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e26:	3b01      	subs	r3, #1
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	3b01      	subs	r3, #1
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e3c:	e0e2      	b.n	800a004 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	2200      	movs	r2, #0
 8009e46:	497b      	ldr	r1, [pc, #492]	; (800a034 <HAL_I2C_Mem_Read+0x4c4>)
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 fb11 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e0e9      	b.n	800a02c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e68:	b672      	cpsid	i
}
 8009e6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	691a      	ldr	r2, [r3, #16]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e76:	b2d2      	uxtb	r2, r2
 8009e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	3b01      	subs	r3, #1
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009e9e:	4b66      	ldr	r3, [pc, #408]	; (800a038 <HAL_I2C_Mem_Read+0x4c8>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	08db      	lsrs	r3, r3, #3
 8009ea4:	4a65      	ldr	r2, [pc, #404]	; (800a03c <HAL_I2C_Mem_Read+0x4cc>)
 8009ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eaa:	0a1a      	lsrs	r2, r3, #8
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	00da      	lsls	r2, r3, #3
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d118      	bne.n	8009ef6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ede:	f043 0220 	orr.w	r2, r3, #32
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009ee6:	b662      	cpsie	i
}
 8009ee8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e09a      	b.n	800a02c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d1d9      	bne.n	8009eb8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	691a      	ldr	r2, [r3, #16]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	b2d2      	uxtb	r2, r2
 8009f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f30:	3b01      	subs	r3, #1
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009f46:	b662      	cpsie	i
}
 8009f48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	691a      	ldr	r2, [r3, #16]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	b2d2      	uxtb	r2, r2
 8009f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f66:	3b01      	subs	r3, #1
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	3b01      	subs	r3, #1
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f7c:	e042      	b.n	800a004 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 fc1e 	bl	800a7c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e04c      	b.n	800a02c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	691a      	ldr	r2, [r3, #16]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	b2d2      	uxtb	r2, r2
 8009f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	f003 0304 	and.w	r3, r3, #4
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d118      	bne.n	800a004 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	691a      	ldr	r2, [r3, #16]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	b2d2      	uxtb	r2, r2
 8009fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	1c5a      	adds	r2, r3, #1
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f47f ae94 	bne.w	8009d36 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2220      	movs	r2, #32
 800a012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	e000      	b.n	800a02c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a02a:	2302      	movs	r3, #2
  }
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3728      	adds	r7, #40	; 0x28
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	00010004 	.word	0x00010004
 800a038:	200000b0 	.word	0x200000b0
 800a03c:	14f8b589 	.word	0x14f8b589

0800a040 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a04e:	b2db      	uxtb	r3, r3
}
 800a050:	4618      	mov	r0, r3
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	bc80      	pop	{r7}
 800a058:	4770      	bx	lr

0800a05a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a066:	4618      	mov	r0, r3
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bc80      	pop	{r7}
 800a06e:	4770      	bx	lr

0800a070 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af02      	add	r7, sp, #8
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	603b      	str	r3, [r7, #0]
 800a07c:	460b      	mov	r3, r1
 800a07e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2b08      	cmp	r3, #8
 800a08a:	d006      	beq.n	800a09a <I2C_MasterRequestWrite+0x2a>
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d003      	beq.n	800a09a <I2C_MasterRequestWrite+0x2a>
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a098:	d108      	bne.n	800a0ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	e00b      	b.n	800a0c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b0:	2b12      	cmp	r3, #18
 800a0b2:	d107      	bne.n	800a0c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 f9cd 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00d      	beq.n	800a0f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ea:	d103      	bne.n	800a0f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e035      	b.n	800a164 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a100:	d108      	bne.n	800a114 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a102:	897b      	ldrh	r3, [r7, #10]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	461a      	mov	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a110:	611a      	str	r2, [r3, #16]
 800a112:	e01b      	b.n	800a14c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a114:	897b      	ldrh	r3, [r7, #10]
 800a116:	11db      	asrs	r3, r3, #7
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	f003 0306 	and.w	r3, r3, #6
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	f063 030f 	orn	r3, r3, #15
 800a124:	b2da      	uxtb	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	490e      	ldr	r1, [pc, #56]	; (800a16c <I2C_MasterRequestWrite+0xfc>)
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f000 fa16 	bl	800a564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e010      	b.n	800a164 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a142:	897b      	ldrh	r3, [r7, #10]
 800a144:	b2da      	uxtb	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	4907      	ldr	r1, [pc, #28]	; (800a170 <I2C_MasterRequestWrite+0x100>)
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 fa06 	bl	800a564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e000      	b.n	800a164 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3718      	adds	r7, #24
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	00010008 	.word	0x00010008
 800a170:	00010002 	.word	0x00010002

0800a174 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b088      	sub	sp, #32
 800a178:	af02      	add	r7, sp, #8
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	4608      	mov	r0, r1
 800a17e:	4611      	mov	r1, r2
 800a180:	461a      	mov	r2, r3
 800a182:	4603      	mov	r3, r0
 800a184:	817b      	strh	r3, [r7, #10]
 800a186:	460b      	mov	r3, r1
 800a188:	813b      	strh	r3, [r7, #8]
 800a18a:	4613      	mov	r3, r2
 800a18c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a19c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 f960 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00d      	beq.n	800a1d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1c4:	d103      	bne.n	800a1ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e05f      	b.n	800a292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1d2:	897b      	ldrh	r3, [r7, #10]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	6a3a      	ldr	r2, [r7, #32]
 800a1e6:	492d      	ldr	r1, [pc, #180]	; (800a29c <I2C_RequestMemoryWrite+0x128>)
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f000 f9bb 	bl	800a564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e04c      	b.n	800a292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	617b      	str	r3, [r7, #20]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	695b      	ldr	r3, [r3, #20]
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a210:	6a39      	ldr	r1, [r7, #32]
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 fa46 	bl	800a6a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00d      	beq.n	800a23a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	2b04      	cmp	r3, #4
 800a224:	d107      	bne.n	800a236 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a234:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e02b      	b.n	800a292 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d105      	bne.n	800a24c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a240:	893b      	ldrh	r3, [r7, #8]
 800a242:	b2da      	uxtb	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	611a      	str	r2, [r3, #16]
 800a24a:	e021      	b.n	800a290 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a24c:	893b      	ldrh	r3, [r7, #8]
 800a24e:	0a1b      	lsrs	r3, r3, #8
 800a250:	b29b      	uxth	r3, r3
 800a252:	b2da      	uxtb	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25c:	6a39      	ldr	r1, [r7, #32]
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f000 fa20 	bl	800a6a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00d      	beq.n	800a286 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d107      	bne.n	800a282 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a280:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e005      	b.n	800a292 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a286:	893b      	ldrh	r3, [r7, #8]
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	00010002 	.word	0x00010002

0800a2a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af02      	add	r7, sp, #8
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	817b      	strh	r3, [r7, #10]
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	813b      	strh	r3, [r7, #8]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 f8c2 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00d      	beq.n	800a30e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a300:	d103      	bne.n	800a30a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a308:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e0aa      	b.n	800a464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a30e:	897b      	ldrh	r3, [r7, #10]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	461a      	mov	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a31c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	6a3a      	ldr	r2, [r7, #32]
 800a322:	4952      	ldr	r1, [pc, #328]	; (800a46c <I2C_RequestMemoryRead+0x1cc>)
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f91d 	bl	800a564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e097      	b.n	800a464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a334:	2300      	movs	r3, #0
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	617b      	str	r3, [r7, #20]
 800a348:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a34a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a34c:	6a39      	ldr	r1, [r7, #32]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 f9a8 	bl	800a6a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00d      	beq.n	800a376 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d107      	bne.n	800a372 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a370:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e076      	b.n	800a464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a376:	88fb      	ldrh	r3, [r7, #6]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d105      	bne.n	800a388 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a37c:	893b      	ldrh	r3, [r7, #8]
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	611a      	str	r2, [r3, #16]
 800a386:	e021      	b.n	800a3cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a388:	893b      	ldrh	r3, [r7, #8]
 800a38a:	0a1b      	lsrs	r3, r3, #8
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a398:	6a39      	ldr	r1, [r7, #32]
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 f982 	bl	800a6a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00d      	beq.n	800a3c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	d107      	bne.n	800a3be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e050      	b.n	800a464 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a3c2:	893b      	ldrh	r3, [r7, #8]
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ce:	6a39      	ldr	r1, [r7, #32]
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 f967 	bl	800a6a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00d      	beq.n	800a3f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d107      	bne.n	800a3f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e035      	b.n	800a464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a406:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	2200      	movs	r2, #0
 800a410:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 f82b 	bl	800a470 <I2C_WaitOnFlagUntilTimeout>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00d      	beq.n	800a43c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a42e:	d103      	bne.n	800a438 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e013      	b.n	800a464 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a43c:	897b      	ldrh	r3, [r7, #10]
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	f043 0301 	orr.w	r3, r3, #1
 800a444:	b2da      	uxtb	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	6a3a      	ldr	r2, [r7, #32]
 800a450:	4906      	ldr	r1, [pc, #24]	; (800a46c <I2C_RequestMemoryRead+0x1cc>)
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f000 f886 	bl	800a564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e000      	b.n	800a464 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	00010002 	.word	0x00010002

0800a470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	603b      	str	r3, [r7, #0]
 800a47c:	4613      	mov	r3, r2
 800a47e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a480:	e048      	b.n	800a514 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a488:	d044      	beq.n	800a514 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a48a:	f7fe f9e3 	bl	8008854 <HAL_GetTick>
 800a48e:	4602      	mov	r2, r0
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	683a      	ldr	r2, [r7, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d302      	bcc.n	800a4a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d139      	bne.n	800a514 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	0c1b      	lsrs	r3, r3, #16
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d10d      	bne.n	800a4c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	43da      	mvns	r2, r3
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bf0c      	ite	eq
 800a4bc:	2301      	moveq	r3, #1
 800a4be:	2300      	movne	r3, #0
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	e00c      	b.n	800a4e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	43da      	mvns	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	bf0c      	ite	eq
 800a4d8:	2301      	moveq	r3, #1
 800a4da:	2300      	movne	r3, #0
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	461a      	mov	r2, r3
 800a4e0:	79fb      	ldrb	r3, [r7, #7]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d116      	bne.n	800a514 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2220      	movs	r2, #32
 800a4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a500:	f043 0220 	orr.w	r2, r3, #32
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e023      	b.n	800a55c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	0c1b      	lsrs	r3, r3, #16
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d10d      	bne.n	800a53a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	695b      	ldr	r3, [r3, #20]
 800a524:	43da      	mvns	r2, r3
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	4013      	ands	r3, r2
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bf0c      	ite	eq
 800a530:	2301      	moveq	r3, #1
 800a532:	2300      	movne	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	461a      	mov	r2, r3
 800a538:	e00c      	b.n	800a554 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	43da      	mvns	r2, r3
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	4013      	ands	r3, r2
 800a546:	b29b      	uxth	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bf0c      	ite	eq
 800a54c:	2301      	moveq	r3, #1
 800a54e:	2300      	movne	r3, #0
 800a550:	b2db      	uxtb	r3, r3
 800a552:	461a      	mov	r2, r3
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	429a      	cmp	r2, r3
 800a558:	d093      	beq.n	800a482 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
 800a570:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a572:	e071      	b.n	800a658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a57e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a582:	d123      	bne.n	800a5cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a592:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a59c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	f043 0204 	orr.w	r2, r3, #4
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e067      	b.n	800a69c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5d2:	d041      	beq.n	800a658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5d4:	f7fe f93e 	bl	8008854 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d302      	bcc.n	800a5ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d136      	bne.n	800a658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	0c1b      	lsrs	r3, r3, #16
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d10c      	bne.n	800a60e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	43da      	mvns	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4013      	ands	r3, r2
 800a600:	b29b      	uxth	r3, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	bf14      	ite	ne
 800a606:	2301      	movne	r3, #1
 800a608:	2300      	moveq	r3, #0
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	e00b      	b.n	800a626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	43da      	mvns	r2, r3
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	4013      	ands	r3, r2
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	bf14      	ite	ne
 800a620:	2301      	movne	r3, #1
 800a622:	2300      	moveq	r3, #0
 800a624:	b2db      	uxtb	r3, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d016      	beq.n	800a658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2220      	movs	r2, #32
 800a634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a644:	f043 0220 	orr.w	r2, r3, #32
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e021      	b.n	800a69c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	0c1b      	lsrs	r3, r3, #16
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d10c      	bne.n	800a67c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	43da      	mvns	r2, r3
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	4013      	ands	r3, r2
 800a66e:	b29b      	uxth	r3, r3
 800a670:	2b00      	cmp	r3, #0
 800a672:	bf14      	ite	ne
 800a674:	2301      	movne	r3, #1
 800a676:	2300      	moveq	r3, #0
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	e00b      	b.n	800a694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	699b      	ldr	r3, [r3, #24]
 800a682:	43da      	mvns	r2, r3
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	4013      	ands	r3, r2
 800a688:	b29b      	uxth	r3, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	bf14      	ite	ne
 800a68e:	2301      	movne	r3, #1
 800a690:	2300      	moveq	r3, #0
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b00      	cmp	r3, #0
 800a696:	f47f af6d 	bne.w	800a574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6b0:	e034      	b.n	800a71c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f000 f8e3 	bl	800a87e <I2C_IsAcknowledgeFailed>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e034      	b.n	800a72c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6c8:	d028      	beq.n	800a71c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ca:	f7fe f8c3 	bl	8008854 <HAL_GetTick>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	1ad3      	subs	r3, r2, r3
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d302      	bcc.n	800a6e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d11d      	bne.n	800a71c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ea:	2b80      	cmp	r3, #128	; 0x80
 800a6ec:	d016      	beq.n	800a71c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a708:	f043 0220 	orr.w	r2, r3, #32
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e007      	b.n	800a72c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a726:	2b80      	cmp	r3, #128	; 0x80
 800a728:	d1c3      	bne.n	800a6b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a740:	e034      	b.n	800a7ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 f89b 	bl	800a87e <I2C_IsAcknowledgeFailed>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	e034      	b.n	800a7bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a758:	d028      	beq.n	800a7ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a75a:	f7fe f87b 	bl	8008854 <HAL_GetTick>
 800a75e:	4602      	mov	r2, r0
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	429a      	cmp	r2, r3
 800a768:	d302      	bcc.n	800a770 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d11d      	bne.n	800a7ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	f003 0304 	and.w	r3, r3, #4
 800a77a:	2b04      	cmp	r3, #4
 800a77c:	d016      	beq.n	800a7ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2220      	movs	r2, #32
 800a788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a798:	f043 0220 	orr.w	r2, r3, #32
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e007      	b.n	800a7bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	f003 0304 	and.w	r3, r3, #4
 800a7b6:	2b04      	cmp	r3, #4
 800a7b8:	d1c3      	bne.n	800a742 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7d0:	e049      	b.n	800a866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	f003 0310 	and.w	r3, r3, #16
 800a7dc:	2b10      	cmp	r3, #16
 800a7de:	d119      	bne.n	800a814 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f06f 0210 	mvn.w	r2, #16
 800a7e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e030      	b.n	800a876 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a814:	f7fe f81e 	bl	8008854 <HAL_GetTick>
 800a818:	4602      	mov	r2, r0
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	429a      	cmp	r2, r3
 800a822:	d302      	bcc.n	800a82a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d11d      	bne.n	800a866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a834:	2b40      	cmp	r3, #64	; 0x40
 800a836:	d016      	beq.n	800a866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2220      	movs	r2, #32
 800a842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a852:	f043 0220 	orr.w	r2, r3, #32
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e007      	b.n	800a876 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a870:	2b40      	cmp	r3, #64	; 0x40
 800a872:	d1ae      	bne.n	800a7d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a87e:	b480      	push	{r7}
 800a880:	b083      	sub	sp, #12
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a894:	d11b      	bne.n	800a8ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a89e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ba:	f043 0204 	orr.w	r2, r3, #4
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e000      	b.n	800a8d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bc80      	pop	{r7}
 800a8d8:	4770      	bx	lr
	...

0800a8dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e272      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 8087 	beq.w	800aa0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a8fc:	4b92      	ldr	r3, [pc, #584]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f003 030c 	and.w	r3, r3, #12
 800a904:	2b04      	cmp	r3, #4
 800a906:	d00c      	beq.n	800a922 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a908:	4b8f      	ldr	r3, [pc, #572]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	f003 030c 	and.w	r3, r3, #12
 800a910:	2b08      	cmp	r3, #8
 800a912:	d112      	bne.n	800a93a <HAL_RCC_OscConfig+0x5e>
 800a914:	4b8c      	ldr	r3, [pc, #560]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a91c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a920:	d10b      	bne.n	800a93a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a922:	4b89      	ldr	r3, [pc, #548]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d06c      	beq.n	800aa08 <HAL_RCC_OscConfig+0x12c>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d168      	bne.n	800aa08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e24c      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a942:	d106      	bne.n	800a952 <HAL_RCC_OscConfig+0x76>
 800a944:	4b80      	ldr	r3, [pc, #512]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a7f      	ldr	r2, [pc, #508]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a94a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a94e:	6013      	str	r3, [r2, #0]
 800a950:	e02e      	b.n	800a9b0 <HAL_RCC_OscConfig+0xd4>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10c      	bne.n	800a974 <HAL_RCC_OscConfig+0x98>
 800a95a:	4b7b      	ldr	r3, [pc, #492]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a7a      	ldr	r2, [pc, #488]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	4b78      	ldr	r3, [pc, #480]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a77      	ldr	r2, [pc, #476]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a96c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a970:	6013      	str	r3, [r2, #0]
 800a972:	e01d      	b.n	800a9b0 <HAL_RCC_OscConfig+0xd4>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a97c:	d10c      	bne.n	800a998 <HAL_RCC_OscConfig+0xbc>
 800a97e:	4b72      	ldr	r3, [pc, #456]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a71      	ldr	r2, [pc, #452]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	4b6f      	ldr	r3, [pc, #444]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a6e      	ldr	r2, [pc, #440]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a994:	6013      	str	r3, [r2, #0]
 800a996:	e00b      	b.n	800a9b0 <HAL_RCC_OscConfig+0xd4>
 800a998:	4b6b      	ldr	r3, [pc, #428]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a6a      	ldr	r2, [pc, #424]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a99e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	4b68      	ldr	r3, [pc, #416]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a67      	ldr	r2, [pc, #412]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a9aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d013      	beq.n	800a9e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9b8:	f7fd ff4c 	bl	8008854 <HAL_GetTick>
 800a9bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9be:	e008      	b.n	800a9d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9c0:	f7fd ff48 	bl	8008854 <HAL_GetTick>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	2b64      	cmp	r3, #100	; 0x64
 800a9cc:	d901      	bls.n	800a9d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e200      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9d2:	4b5d      	ldr	r3, [pc, #372]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0f0      	beq.n	800a9c0 <HAL_RCC_OscConfig+0xe4>
 800a9de:	e014      	b.n	800aa0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9e0:	f7fd ff38 	bl	8008854 <HAL_GetTick>
 800a9e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9e6:	e008      	b.n	800a9fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9e8:	f7fd ff34 	bl	8008854 <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b64      	cmp	r3, #100	; 0x64
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e1ec      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9fa:	4b53      	ldr	r3, [pc, #332]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1f0      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x10c>
 800aa06:	e000      	b.n	800aa0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0302 	and.w	r3, r3, #2
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d063      	beq.n	800aade <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa16:	4b4c      	ldr	r3, [pc, #304]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f003 030c 	and.w	r3, r3, #12
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00b      	beq.n	800aa3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aa22:	4b49      	ldr	r3, [pc, #292]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f003 030c 	and.w	r3, r3, #12
 800aa2a:	2b08      	cmp	r3, #8
 800aa2c:	d11c      	bne.n	800aa68 <HAL_RCC_OscConfig+0x18c>
 800aa2e:	4b46      	ldr	r3, [pc, #280]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d116      	bne.n	800aa68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa3a:	4b43      	ldr	r3, [pc, #268]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0302 	and.w	r3, r3, #2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d005      	beq.n	800aa52 <HAL_RCC_OscConfig+0x176>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d001      	beq.n	800aa52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e1c0      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa52:	4b3d      	ldr	r3, [pc, #244]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	4939      	ldr	r1, [pc, #228]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800aa62:	4313      	orrs	r3, r2
 800aa64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa66:	e03a      	b.n	800aade <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d020      	beq.n	800aab2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa70:	4b36      	ldr	r3, [pc, #216]	; (800ab4c <HAL_RCC_OscConfig+0x270>)
 800aa72:	2201      	movs	r2, #1
 800aa74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa76:	f7fd feed 	bl	8008854 <HAL_GetTick>
 800aa7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa7c:	e008      	b.n	800aa90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa7e:	f7fd fee9 	bl	8008854 <HAL_GetTick>
 800aa82:	4602      	mov	r2, r0
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d901      	bls.n	800aa90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e1a1      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa90:	4b2d      	ldr	r3, [pc, #180]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 0302 	and.w	r3, r3, #2
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d0f0      	beq.n	800aa7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa9c:	4b2a      	ldr	r3, [pc, #168]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	4927      	ldr	r1, [pc, #156]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800aaac:	4313      	orrs	r3, r2
 800aaae:	600b      	str	r3, [r1, #0]
 800aab0:	e015      	b.n	800aade <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aab2:	4b26      	ldr	r3, [pc, #152]	; (800ab4c <HAL_RCC_OscConfig+0x270>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aab8:	f7fd fecc 	bl	8008854 <HAL_GetTick>
 800aabc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aabe:	e008      	b.n	800aad2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aac0:	f7fd fec8 	bl	8008854 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d901      	bls.n	800aad2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e180      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aad2:	4b1d      	ldr	r3, [pc, #116]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 0302 	and.w	r3, r3, #2
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1f0      	bne.n	800aac0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0308 	and.w	r3, r3, #8
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d03a      	beq.n	800ab60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d019      	beq.n	800ab26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aaf2:	4b17      	ldr	r3, [pc, #92]	; (800ab50 <HAL_RCC_OscConfig+0x274>)
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aaf8:	f7fd feac 	bl	8008854 <HAL_GetTick>
 800aafc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aafe:	e008      	b.n	800ab12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab00:	f7fd fea8 	bl	8008854 <HAL_GetTick>
 800ab04:	4602      	mov	r2, r0
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	1ad3      	subs	r3, r2, r3
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d901      	bls.n	800ab12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e160      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ab12:	4b0d      	ldr	r3, [pc, #52]	; (800ab48 <HAL_RCC_OscConfig+0x26c>)
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	f003 0302 	and.w	r3, r3, #2
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0f0      	beq.n	800ab00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800ab1e:	2001      	movs	r0, #1
 800ab20:	f000 face 	bl	800b0c0 <RCC_Delay>
 800ab24:	e01c      	b.n	800ab60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab26:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <HAL_RCC_OscConfig+0x274>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab2c:	f7fd fe92 	bl	8008854 <HAL_GetTick>
 800ab30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab32:	e00f      	b.n	800ab54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab34:	f7fd fe8e 	bl	8008854 <HAL_GetTick>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d908      	bls.n	800ab54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e146      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
 800ab46:	bf00      	nop
 800ab48:	40021000 	.word	0x40021000
 800ab4c:	42420000 	.word	0x42420000
 800ab50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab54:	4b92      	ldr	r3, [pc, #584]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ab56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1e9      	bne.n	800ab34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0304 	and.w	r3, r3, #4
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f000 80a6 	beq.w	800acba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab72:	4b8b      	ldr	r3, [pc, #556]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ab74:	69db      	ldr	r3, [r3, #28]
 800ab76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10d      	bne.n	800ab9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab7e:	4b88      	ldr	r3, [pc, #544]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	4a87      	ldr	r2, [pc, #540]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ab84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab88:	61d3      	str	r3, [r2, #28]
 800ab8a:	4b85      	ldr	r3, [pc, #532]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ab8c:	69db      	ldr	r3, [r3, #28]
 800ab8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab92:	60bb      	str	r3, [r7, #8]
 800ab94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab96:	2301      	movs	r3, #1
 800ab98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab9a:	4b82      	ldr	r3, [pc, #520]	; (800ada4 <HAL_RCC_OscConfig+0x4c8>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d118      	bne.n	800abd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aba6:	4b7f      	ldr	r3, [pc, #508]	; (800ada4 <HAL_RCC_OscConfig+0x4c8>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a7e      	ldr	r2, [pc, #504]	; (800ada4 <HAL_RCC_OscConfig+0x4c8>)
 800abac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800abb2:	f7fd fe4f 	bl	8008854 <HAL_GetTick>
 800abb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abb8:	e008      	b.n	800abcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abba:	f7fd fe4b 	bl	8008854 <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	2b64      	cmp	r3, #100	; 0x64
 800abc6:	d901      	bls.n	800abcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800abc8:	2303      	movs	r3, #3
 800abca:	e103      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abcc:	4b75      	ldr	r3, [pc, #468]	; (800ada4 <HAL_RCC_OscConfig+0x4c8>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d0f0      	beq.n	800abba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d106      	bne.n	800abee <HAL_RCC_OscConfig+0x312>
 800abe0:	4b6f      	ldr	r3, [pc, #444]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	4a6e      	ldr	r2, [pc, #440]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800abe6:	f043 0301 	orr.w	r3, r3, #1
 800abea:	6213      	str	r3, [r2, #32]
 800abec:	e02d      	b.n	800ac4a <HAL_RCC_OscConfig+0x36e>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10c      	bne.n	800ac10 <HAL_RCC_OscConfig+0x334>
 800abf6:	4b6a      	ldr	r3, [pc, #424]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	4a69      	ldr	r2, [pc, #420]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800abfc:	f023 0301 	bic.w	r3, r3, #1
 800ac00:	6213      	str	r3, [r2, #32]
 800ac02:	4b67      	ldr	r3, [pc, #412]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	4a66      	ldr	r2, [pc, #408]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac08:	f023 0304 	bic.w	r3, r3, #4
 800ac0c:	6213      	str	r3, [r2, #32]
 800ac0e:	e01c      	b.n	800ac4a <HAL_RCC_OscConfig+0x36e>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	2b05      	cmp	r3, #5
 800ac16:	d10c      	bne.n	800ac32 <HAL_RCC_OscConfig+0x356>
 800ac18:	4b61      	ldr	r3, [pc, #388]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	4a60      	ldr	r2, [pc, #384]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac1e:	f043 0304 	orr.w	r3, r3, #4
 800ac22:	6213      	str	r3, [r2, #32]
 800ac24:	4b5e      	ldr	r3, [pc, #376]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	4a5d      	ldr	r2, [pc, #372]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac2a:	f043 0301 	orr.w	r3, r3, #1
 800ac2e:	6213      	str	r3, [r2, #32]
 800ac30:	e00b      	b.n	800ac4a <HAL_RCC_OscConfig+0x36e>
 800ac32:	4b5b      	ldr	r3, [pc, #364]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	4a5a      	ldr	r2, [pc, #360]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac38:	f023 0301 	bic.w	r3, r3, #1
 800ac3c:	6213      	str	r3, [r2, #32]
 800ac3e:	4b58      	ldr	r3, [pc, #352]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	4a57      	ldr	r2, [pc, #348]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac44:	f023 0304 	bic.w	r3, r3, #4
 800ac48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d015      	beq.n	800ac7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac52:	f7fd fdff 	bl	8008854 <HAL_GetTick>
 800ac56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac58:	e00a      	b.n	800ac70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac5a:	f7fd fdfb 	bl	8008854 <HAL_GetTick>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d901      	bls.n	800ac70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e0b1      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac70:	4b4b      	ldr	r3, [pc, #300]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac72:	6a1b      	ldr	r3, [r3, #32]
 800ac74:	f003 0302 	and.w	r3, r3, #2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d0ee      	beq.n	800ac5a <HAL_RCC_OscConfig+0x37e>
 800ac7c:	e014      	b.n	800aca8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac7e:	f7fd fde9 	bl	8008854 <HAL_GetTick>
 800ac82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac84:	e00a      	b.n	800ac9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac86:	f7fd fde5 	bl	8008854 <HAL_GetTick>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d901      	bls.n	800ac9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e09b      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac9c:	4b40      	ldr	r3, [pc, #256]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ac9e:	6a1b      	ldr	r3, [r3, #32]
 800aca0:	f003 0302 	and.w	r3, r3, #2
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1ee      	bne.n	800ac86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d105      	bne.n	800acba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800acae:	4b3c      	ldr	r3, [pc, #240]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	4a3b      	ldr	r2, [pc, #236]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800acb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	69db      	ldr	r3, [r3, #28]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f000 8087 	beq.w	800add2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800acc4:	4b36      	ldr	r3, [pc, #216]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	f003 030c 	and.w	r3, r3, #12
 800accc:	2b08      	cmp	r3, #8
 800acce:	d061      	beq.n	800ad94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	69db      	ldr	r3, [r3, #28]
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	d146      	bne.n	800ad66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acd8:	4b33      	ldr	r3, [pc, #204]	; (800ada8 <HAL_RCC_OscConfig+0x4cc>)
 800acda:	2200      	movs	r2, #0
 800acdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acde:	f7fd fdb9 	bl	8008854 <HAL_GetTick>
 800ace2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ace4:	e008      	b.n	800acf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ace6:	f7fd fdb5 	bl	8008854 <HAL_GetTick>
 800acea:	4602      	mov	r2, r0
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d901      	bls.n	800acf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800acf4:	2303      	movs	r3, #3
 800acf6:	e06d      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800acf8:	4b29      	ldr	r3, [pc, #164]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1f0      	bne.n	800ace6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad0c:	d108      	bne.n	800ad20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ad0e:	4b24      	ldr	r3, [pc, #144]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	4921      	ldr	r1, [pc, #132]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad20:	4b1f      	ldr	r3, [pc, #124]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a19      	ldr	r1, [r3, #32]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	430b      	orrs	r3, r1
 800ad32:	491b      	ldr	r1, [pc, #108]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ad34:	4313      	orrs	r3, r2
 800ad36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad38:	4b1b      	ldr	r3, [pc, #108]	; (800ada8 <HAL_RCC_OscConfig+0x4cc>)
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad3e:	f7fd fd89 	bl	8008854 <HAL_GetTick>
 800ad42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad44:	e008      	b.n	800ad58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad46:	f7fd fd85 	bl	8008854 <HAL_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d901      	bls.n	800ad58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e03d      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad58:	4b11      	ldr	r3, [pc, #68]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d0f0      	beq.n	800ad46 <HAL_RCC_OscConfig+0x46a>
 800ad64:	e035      	b.n	800add2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad66:	4b10      	ldr	r3, [pc, #64]	; (800ada8 <HAL_RCC_OscConfig+0x4cc>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad6c:	f7fd fd72 	bl	8008854 <HAL_GetTick>
 800ad70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad72:	e008      	b.n	800ad86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad74:	f7fd fd6e 	bl	8008854 <HAL_GetTick>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d901      	bls.n	800ad86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e026      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad86:	4b06      	ldr	r3, [pc, #24]	; (800ada0 <HAL_RCC_OscConfig+0x4c4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1f0      	bne.n	800ad74 <HAL_RCC_OscConfig+0x498>
 800ad92:	e01e      	b.n	800add2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d107      	bne.n	800adac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e019      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
 800ada0:	40021000 	.word	0x40021000
 800ada4:	40007000 	.word	0x40007000
 800ada8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800adac:	4b0b      	ldr	r3, [pc, #44]	; (800addc <HAL_RCC_OscConfig+0x500>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d106      	bne.n	800adce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adca:	429a      	cmp	r2, r3
 800adcc:	d001      	beq.n	800add2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e000      	b.n	800add4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	40021000 	.word	0x40021000

0800ade0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e0d0      	b.n	800af96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adf4:	4b6a      	ldr	r3, [pc, #424]	; (800afa0 <HAL_RCC_ClockConfig+0x1c0>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 0307 	and.w	r3, r3, #7
 800adfc:	683a      	ldr	r2, [r7, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d910      	bls.n	800ae24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae02:	4b67      	ldr	r3, [pc, #412]	; (800afa0 <HAL_RCC_ClockConfig+0x1c0>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f023 0207 	bic.w	r2, r3, #7
 800ae0a:	4965      	ldr	r1, [pc, #404]	; (800afa0 <HAL_RCC_ClockConfig+0x1c0>)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae12:	4b63      	ldr	r3, [pc, #396]	; (800afa0 <HAL_RCC_ClockConfig+0x1c0>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d001      	beq.n	800ae24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	e0b8      	b.n	800af96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0302 	and.w	r3, r3, #2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d020      	beq.n	800ae72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d005      	beq.n	800ae48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae3c:	4b59      	ldr	r3, [pc, #356]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	4a58      	ldr	r2, [pc, #352]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ae46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0308 	and.w	r3, r3, #8
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae54:	4b53      	ldr	r3, [pc, #332]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	4a52      	ldr	r2, [pc, #328]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ae5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae60:	4b50      	ldr	r3, [pc, #320]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	494d      	ldr	r1, [pc, #308]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d040      	beq.n	800af00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d107      	bne.n	800ae96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae86:	4b47      	ldr	r3, [pc, #284]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d115      	bne.n	800aebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e07f      	b.n	800af96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d107      	bne.n	800aeae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae9e:	4b41      	ldr	r3, [pc, #260]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d109      	bne.n	800aebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e073      	b.n	800af96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeae:	4b3d      	ldr	r3, [pc, #244]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e06b      	b.n	800af96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aebe:	4b39      	ldr	r3, [pc, #228]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f023 0203 	bic.w	r2, r3, #3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	4936      	ldr	r1, [pc, #216]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800aecc:	4313      	orrs	r3, r2
 800aece:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aed0:	f7fd fcc0 	bl	8008854 <HAL_GetTick>
 800aed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aed6:	e00a      	b.n	800aeee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aed8:	f7fd fcbc 	bl	8008854 <HAL_GetTick>
 800aedc:	4602      	mov	r2, r0
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d901      	bls.n	800aeee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e053      	b.n	800af96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeee:	4b2d      	ldr	r3, [pc, #180]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	f003 020c 	and.w	r2, r3, #12
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d1eb      	bne.n	800aed8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af00:	4b27      	ldr	r3, [pc, #156]	; (800afa0 <HAL_RCC_ClockConfig+0x1c0>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0307 	and.w	r3, r3, #7
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d210      	bcs.n	800af30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af0e:	4b24      	ldr	r3, [pc, #144]	; (800afa0 <HAL_RCC_ClockConfig+0x1c0>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f023 0207 	bic.w	r2, r3, #7
 800af16:	4922      	ldr	r1, [pc, #136]	; (800afa0 <HAL_RCC_ClockConfig+0x1c0>)
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af1e:	4b20      	ldr	r3, [pc, #128]	; (800afa0 <HAL_RCC_ClockConfig+0x1c0>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0307 	and.w	r3, r3, #7
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d001      	beq.n	800af30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e032      	b.n	800af96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0304 	and.w	r3, r3, #4
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d008      	beq.n	800af4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af3c:	4b19      	ldr	r3, [pc, #100]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	4916      	ldr	r1, [pc, #88]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800af4a:	4313      	orrs	r3, r2
 800af4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0308 	and.w	r3, r3, #8
 800af56:	2b00      	cmp	r3, #0
 800af58:	d009      	beq.n	800af6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800af5a:	4b12      	ldr	r3, [pc, #72]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	00db      	lsls	r3, r3, #3
 800af68:	490e      	ldr	r1, [pc, #56]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800af6a:	4313      	orrs	r3, r2
 800af6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800af6e:	f000 f821 	bl	800afb4 <HAL_RCC_GetSysClockFreq>
 800af72:	4602      	mov	r2, r0
 800af74:	4b0b      	ldr	r3, [pc, #44]	; (800afa4 <HAL_RCC_ClockConfig+0x1c4>)
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	091b      	lsrs	r3, r3, #4
 800af7a:	f003 030f 	and.w	r3, r3, #15
 800af7e:	490a      	ldr	r1, [pc, #40]	; (800afa8 <HAL_RCC_ClockConfig+0x1c8>)
 800af80:	5ccb      	ldrb	r3, [r1, r3]
 800af82:	fa22 f303 	lsr.w	r3, r2, r3
 800af86:	4a09      	ldr	r2, [pc, #36]	; (800afac <HAL_RCC_ClockConfig+0x1cc>)
 800af88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800af8a:	4b09      	ldr	r3, [pc, #36]	; (800afb0 <HAL_RCC_ClockConfig+0x1d0>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fd fc1e 	bl	80087d0 <HAL_InitTick>

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	40022000 	.word	0x40022000
 800afa4:	40021000 	.word	0x40021000
 800afa8:	0800de5c 	.word	0x0800de5c
 800afac:	200000b0 	.word	0x200000b0
 800afb0:	200000b4 	.word	0x200000b4

0800afb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b087      	sub	sp, #28
 800afb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	60fb      	str	r3, [r7, #12]
 800afbe:	2300      	movs	r3, #0
 800afc0:	60bb      	str	r3, [r7, #8]
 800afc2:	2300      	movs	r3, #0
 800afc4:	617b      	str	r3, [r7, #20]
 800afc6:	2300      	movs	r3, #0
 800afc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800afca:	2300      	movs	r3, #0
 800afcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800afce:	4b1e      	ldr	r3, [pc, #120]	; (800b048 <HAL_RCC_GetSysClockFreq+0x94>)
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f003 030c 	and.w	r3, r3, #12
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d002      	beq.n	800afe4 <HAL_RCC_GetSysClockFreq+0x30>
 800afde:	2b08      	cmp	r3, #8
 800afe0:	d003      	beq.n	800afea <HAL_RCC_GetSysClockFreq+0x36>
 800afe2:	e027      	b.n	800b034 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800afe4:	4b19      	ldr	r3, [pc, #100]	; (800b04c <HAL_RCC_GetSysClockFreq+0x98>)
 800afe6:	613b      	str	r3, [r7, #16]
      break;
 800afe8:	e027      	b.n	800b03a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	0c9b      	lsrs	r3, r3, #18
 800afee:	f003 030f 	and.w	r3, r3, #15
 800aff2:	4a17      	ldr	r2, [pc, #92]	; (800b050 <HAL_RCC_GetSysClockFreq+0x9c>)
 800aff4:	5cd3      	ldrb	r3, [r2, r3]
 800aff6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d010      	beq.n	800b024 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b002:	4b11      	ldr	r3, [pc, #68]	; (800b048 <HAL_RCC_GetSysClockFreq+0x94>)
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	0c5b      	lsrs	r3, r3, #17
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	4a11      	ldr	r2, [pc, #68]	; (800b054 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b00e:	5cd3      	ldrb	r3, [r2, r3]
 800b010:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a0d      	ldr	r2, [pc, #52]	; (800b04c <HAL_RCC_GetSysClockFreq+0x98>)
 800b016:	fb03 f202 	mul.w	r2, r3, r2
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b020:	617b      	str	r3, [r7, #20]
 800b022:	e004      	b.n	800b02e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a0c      	ldr	r2, [pc, #48]	; (800b058 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b028:	fb02 f303 	mul.w	r3, r2, r3
 800b02c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	613b      	str	r3, [r7, #16]
      break;
 800b032:	e002      	b.n	800b03a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <HAL_RCC_GetSysClockFreq+0x98>)
 800b036:	613b      	str	r3, [r7, #16]
      break;
 800b038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b03a:	693b      	ldr	r3, [r7, #16]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	371c      	adds	r7, #28
 800b040:	46bd      	mov	sp, r7
 800b042:	bc80      	pop	{r7}
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	40021000 	.word	0x40021000
 800b04c:	007a1200 	.word	0x007a1200
 800b050:	0800de74 	.word	0x0800de74
 800b054:	0800de84 	.word	0x0800de84
 800b058:	003d0900 	.word	0x003d0900

0800b05c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b060:	4b02      	ldr	r3, [pc, #8]	; (800b06c <HAL_RCC_GetHCLKFreq+0x10>)
 800b062:	681b      	ldr	r3, [r3, #0]
}
 800b064:	4618      	mov	r0, r3
 800b066:	46bd      	mov	sp, r7
 800b068:	bc80      	pop	{r7}
 800b06a:	4770      	bx	lr
 800b06c:	200000b0 	.word	0x200000b0

0800b070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b074:	f7ff fff2 	bl	800b05c <HAL_RCC_GetHCLKFreq>
 800b078:	4602      	mov	r2, r0
 800b07a:	4b05      	ldr	r3, [pc, #20]	; (800b090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	0a1b      	lsrs	r3, r3, #8
 800b080:	f003 0307 	and.w	r3, r3, #7
 800b084:	4903      	ldr	r1, [pc, #12]	; (800b094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b086:	5ccb      	ldrb	r3, [r1, r3]
 800b088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	40021000 	.word	0x40021000
 800b094:	0800de6c 	.word	0x0800de6c

0800b098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b09c:	f7ff ffde 	bl	800b05c <HAL_RCC_GetHCLKFreq>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	4b05      	ldr	r3, [pc, #20]	; (800b0b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	0adb      	lsrs	r3, r3, #11
 800b0a8:	f003 0307 	and.w	r3, r3, #7
 800b0ac:	4903      	ldr	r1, [pc, #12]	; (800b0bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0ae:	5ccb      	ldrb	r3, [r1, r3]
 800b0b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	40021000 	.word	0x40021000
 800b0bc:	0800de6c 	.word	0x0800de6c

0800b0c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b0c8:	4b0a      	ldr	r3, [pc, #40]	; (800b0f4 <RCC_Delay+0x34>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a0a      	ldr	r2, [pc, #40]	; (800b0f8 <RCC_Delay+0x38>)
 800b0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d2:	0a5b      	lsrs	r3, r3, #9
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	fb02 f303 	mul.w	r3, r2, r3
 800b0da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b0dc:	bf00      	nop
  }
  while (Delay --);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	1e5a      	subs	r2, r3, #1
 800b0e2:	60fa      	str	r2, [r7, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1f9      	bne.n	800b0dc <RCC_Delay+0x1c>
}
 800b0e8:	bf00      	nop
 800b0ea:	bf00      	nop
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bc80      	pop	{r7}
 800b0f2:	4770      	bx	lr
 800b0f4:	200000b0 	.word	0x200000b0
 800b0f8:	10624dd3 	.word	0x10624dd3

0800b0fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e041      	b.n	800b192 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b00      	cmp	r3, #0
 800b118:	d106      	bne.n	800b128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f7fd fa26 	bl	8008574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3304      	adds	r3, #4
 800b138:	4619      	mov	r1, r3
 800b13a:	4610      	mov	r0, r2
 800b13c:	f000 fa82 	bl	800b644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d001      	beq.n	800b1b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e044      	b.n	800b23e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68da      	ldr	r2, [r3, #12]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f042 0201 	orr.w	r2, r2, #1
 800b1ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a1d      	ldr	r2, [pc, #116]	; (800b248 <HAL_TIM_Base_Start_IT+0xac>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d018      	beq.n	800b208 <HAL_TIM_Base_Start_IT+0x6c>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a1c      	ldr	r2, [pc, #112]	; (800b24c <HAL_TIM_Base_Start_IT+0xb0>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d013      	beq.n	800b208 <HAL_TIM_Base_Start_IT+0x6c>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1e8:	d00e      	beq.n	800b208 <HAL_TIM_Base_Start_IT+0x6c>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a18      	ldr	r2, [pc, #96]	; (800b250 <HAL_TIM_Base_Start_IT+0xb4>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d009      	beq.n	800b208 <HAL_TIM_Base_Start_IT+0x6c>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a16      	ldr	r2, [pc, #88]	; (800b254 <HAL_TIM_Base_Start_IT+0xb8>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d004      	beq.n	800b208 <HAL_TIM_Base_Start_IT+0x6c>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a15      	ldr	r2, [pc, #84]	; (800b258 <HAL_TIM_Base_Start_IT+0xbc>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d111      	bne.n	800b22c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	f003 0307 	and.w	r3, r3, #7
 800b212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2b06      	cmp	r3, #6
 800b218:	d010      	beq.n	800b23c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f042 0201 	orr.w	r2, r2, #1
 800b228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b22a:	e007      	b.n	800b23c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0201 	orr.w	r2, r2, #1
 800b23a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3714      	adds	r7, #20
 800b242:	46bd      	mov	sp, r7
 800b244:	bc80      	pop	{r7}
 800b246:	4770      	bx	lr
 800b248:	40012c00 	.word	0x40012c00
 800b24c:	40013400 	.word	0x40013400
 800b250:	40000400 	.word	0x40000400
 800b254:	40000800 	.word	0x40000800
 800b258:	40000c00 	.word	0x40000c00

0800b25c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0302 	and.w	r3, r3, #2
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d122      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0302 	and.w	r3, r3, #2
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d11b      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f06f 0202 	mvn.w	r2, #2
 800b288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	f003 0303 	and.w	r3, r3, #3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f9b4 	bl	800b60c <HAL_TIM_IC_CaptureCallback>
 800b2a4:	e005      	b.n	800b2b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f9a7 	bl	800b5fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f9b6 	bl	800b61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	f003 0304 	and.w	r3, r3, #4
 800b2c2:	2b04      	cmp	r3, #4
 800b2c4:	d122      	bne.n	800b30c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	f003 0304 	and.w	r3, r3, #4
 800b2d0:	2b04      	cmp	r3, #4
 800b2d2:	d11b      	bne.n	800b30c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f06f 0204 	mvn.w	r2, #4
 800b2dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2202      	movs	r2, #2
 800b2e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f98a 	bl	800b60c <HAL_TIM_IC_CaptureCallback>
 800b2f8:	e005      	b.n	800b306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f97d 	bl	800b5fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f98c 	bl	800b61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	f003 0308 	and.w	r3, r3, #8
 800b316:	2b08      	cmp	r3, #8
 800b318:	d122      	bne.n	800b360 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f003 0308 	and.w	r3, r3, #8
 800b324:	2b08      	cmp	r3, #8
 800b326:	d11b      	bne.n	800b360 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f06f 0208 	mvn.w	r2, #8
 800b330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2204      	movs	r2, #4
 800b336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	f003 0303 	and.w	r3, r3, #3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f960 	bl	800b60c <HAL_TIM_IC_CaptureCallback>
 800b34c:	e005      	b.n	800b35a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f953 	bl	800b5fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f962 	bl	800b61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	f003 0310 	and.w	r3, r3, #16
 800b36a:	2b10      	cmp	r3, #16
 800b36c:	d122      	bne.n	800b3b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	f003 0310 	and.w	r3, r3, #16
 800b378:	2b10      	cmp	r3, #16
 800b37a:	d11b      	bne.n	800b3b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f06f 0210 	mvn.w	r2, #16
 800b384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2208      	movs	r2, #8
 800b38a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	69db      	ldr	r3, [r3, #28]
 800b392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b396:	2b00      	cmp	r3, #0
 800b398:	d003      	beq.n	800b3a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f936 	bl	800b60c <HAL_TIM_IC_CaptureCallback>
 800b3a0:	e005      	b.n	800b3ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f929 	bl	800b5fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f938 	bl	800b61e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d10e      	bne.n	800b3e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d107      	bne.n	800b3e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f06f 0201 	mvn.w	r2, #1
 800b3d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7fc fd62 	bl	8007ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ea:	2b80      	cmp	r3, #128	; 0x80
 800b3ec:	d10e      	bne.n	800b40c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3f8:	2b80      	cmp	r3, #128	; 0x80
 800b3fa:	d107      	bne.n	800b40c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 faa1 	bl	800b94e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b416:	2b40      	cmp	r3, #64	; 0x40
 800b418:	d10e      	bne.n	800b438 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b424:	2b40      	cmp	r3, #64	; 0x40
 800b426:	d107      	bne.n	800b438 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f8fc 	bl	800b630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	f003 0320 	and.w	r3, r3, #32
 800b442:	2b20      	cmp	r3, #32
 800b444:	d10e      	bne.n	800b464 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	f003 0320 	and.w	r3, r3, #32
 800b450:	2b20      	cmp	r3, #32
 800b452:	d107      	bne.n	800b464 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f06f 0220 	mvn.w	r2, #32
 800b45c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 fa6c 	bl	800b93c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b464:	bf00      	nop
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b476:	2300      	movs	r3, #0
 800b478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b480:	2b01      	cmp	r3, #1
 800b482:	d101      	bne.n	800b488 <HAL_TIM_ConfigClockSource+0x1c>
 800b484:	2302      	movs	r3, #2
 800b486:	e0b4      	b.n	800b5f2 <HAL_TIM_ConfigClockSource+0x186>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2202      	movs	r2, #2
 800b494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b4a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4c0:	d03e      	beq.n	800b540 <HAL_TIM_ConfigClockSource+0xd4>
 800b4c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4c6:	f200 8087 	bhi.w	800b5d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ce:	f000 8086 	beq.w	800b5de <HAL_TIM_ConfigClockSource+0x172>
 800b4d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4d6:	d87f      	bhi.n	800b5d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4d8:	2b70      	cmp	r3, #112	; 0x70
 800b4da:	d01a      	beq.n	800b512 <HAL_TIM_ConfigClockSource+0xa6>
 800b4dc:	2b70      	cmp	r3, #112	; 0x70
 800b4de:	d87b      	bhi.n	800b5d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4e0:	2b60      	cmp	r3, #96	; 0x60
 800b4e2:	d050      	beq.n	800b586 <HAL_TIM_ConfigClockSource+0x11a>
 800b4e4:	2b60      	cmp	r3, #96	; 0x60
 800b4e6:	d877      	bhi.n	800b5d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4e8:	2b50      	cmp	r3, #80	; 0x50
 800b4ea:	d03c      	beq.n	800b566 <HAL_TIM_ConfigClockSource+0xfa>
 800b4ec:	2b50      	cmp	r3, #80	; 0x50
 800b4ee:	d873      	bhi.n	800b5d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4f0:	2b40      	cmp	r3, #64	; 0x40
 800b4f2:	d058      	beq.n	800b5a6 <HAL_TIM_ConfigClockSource+0x13a>
 800b4f4:	2b40      	cmp	r3, #64	; 0x40
 800b4f6:	d86f      	bhi.n	800b5d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b4f8:	2b30      	cmp	r3, #48	; 0x30
 800b4fa:	d064      	beq.n	800b5c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b4fc:	2b30      	cmp	r3, #48	; 0x30
 800b4fe:	d86b      	bhi.n	800b5d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b500:	2b20      	cmp	r3, #32
 800b502:	d060      	beq.n	800b5c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b504:	2b20      	cmp	r3, #32
 800b506:	d867      	bhi.n	800b5d8 <HAL_TIM_ConfigClockSource+0x16c>
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d05c      	beq.n	800b5c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b50c:	2b10      	cmp	r3, #16
 800b50e:	d05a      	beq.n	800b5c6 <HAL_TIM_ConfigClockSource+0x15a>
 800b510:	e062      	b.n	800b5d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b522:	f000 f980 	bl	800b826 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b534:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	609a      	str	r2, [r3, #8]
      break;
 800b53e:	e04f      	b.n	800b5e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b550:	f000 f969 	bl	800b826 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	689a      	ldr	r2, [r3, #8]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b562:	609a      	str	r2, [r3, #8]
      break;
 800b564:	e03c      	b.n	800b5e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b572:	461a      	mov	r2, r3
 800b574:	f000 f8e0 	bl	800b738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2150      	movs	r1, #80	; 0x50
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 f937 	bl	800b7f2 <TIM_ITRx_SetConfig>
      break;
 800b584:	e02c      	b.n	800b5e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b592:	461a      	mov	r2, r3
 800b594:	f000 f8fe 	bl	800b794 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2160      	movs	r1, #96	; 0x60
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 f927 	bl	800b7f2 <TIM_ITRx_SetConfig>
      break;
 800b5a4:	e01c      	b.n	800b5e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	f000 f8c0 	bl	800b738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2140      	movs	r1, #64	; 0x40
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 f917 	bl	800b7f2 <TIM_ITRx_SetConfig>
      break;
 800b5c4:	e00c      	b.n	800b5e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	f000 f90e 	bl	800b7f2 <TIM_ITRx_SetConfig>
      break;
 800b5d6:	e003      	b.n	800b5e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	73fb      	strb	r3, [r7, #15]
      break;
 800b5dc:	e000      	b.n	800b5e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b5de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5fa:	b480      	push	{r7}
 800b5fc:	b083      	sub	sp, #12
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b602:	bf00      	nop
 800b604:	370c      	adds	r7, #12
 800b606:	46bd      	mov	sp, r7
 800b608:	bc80      	pop	{r7}
 800b60a:	4770      	bx	lr

0800b60c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	bc80      	pop	{r7}
 800b61c:	4770      	bx	lr

0800b61e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b61e:	b480      	push	{r7}
 800b620:	b083      	sub	sp, #12
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b626:	bf00      	nop
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bc80      	pop	{r7}
 800b62e:	4770      	bx	lr

0800b630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b638:	bf00      	nop
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bc80      	pop	{r7}
 800b640:	4770      	bx	lr
	...

0800b644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a33      	ldr	r2, [pc, #204]	; (800b724 <TIM_Base_SetConfig+0xe0>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d013      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a32      	ldr	r2, [pc, #200]	; (800b728 <TIM_Base_SetConfig+0xe4>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d00f      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b66a:	d00b      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a2f      	ldr	r2, [pc, #188]	; (800b72c <TIM_Base_SetConfig+0xe8>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d007      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a2e      	ldr	r2, [pc, #184]	; (800b730 <TIM_Base_SetConfig+0xec>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d003      	beq.n	800b684 <TIM_Base_SetConfig+0x40>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a2d      	ldr	r2, [pc, #180]	; (800b734 <TIM_Base_SetConfig+0xf0>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d108      	bne.n	800b696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b68a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	4313      	orrs	r3, r2
 800b694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a22      	ldr	r2, [pc, #136]	; (800b724 <TIM_Base_SetConfig+0xe0>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d013      	beq.n	800b6c6 <TIM_Base_SetConfig+0x82>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a21      	ldr	r2, [pc, #132]	; (800b728 <TIM_Base_SetConfig+0xe4>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d00f      	beq.n	800b6c6 <TIM_Base_SetConfig+0x82>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ac:	d00b      	beq.n	800b6c6 <TIM_Base_SetConfig+0x82>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a1e      	ldr	r2, [pc, #120]	; (800b72c <TIM_Base_SetConfig+0xe8>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d007      	beq.n	800b6c6 <TIM_Base_SetConfig+0x82>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a1d      	ldr	r2, [pc, #116]	; (800b730 <TIM_Base_SetConfig+0xec>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d003      	beq.n	800b6c6 <TIM_Base_SetConfig+0x82>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a1c      	ldr	r2, [pc, #112]	; (800b734 <TIM_Base_SetConfig+0xf0>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d108      	bne.n	800b6d8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	689a      	ldr	r2, [r3, #8]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a09      	ldr	r2, [pc, #36]	; (800b724 <TIM_Base_SetConfig+0xe0>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d003      	beq.n	800b70c <TIM_Base_SetConfig+0xc8>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a08      	ldr	r2, [pc, #32]	; (800b728 <TIM_Base_SetConfig+0xe4>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d103      	bne.n	800b714 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	691a      	ldr	r2, [r3, #16]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	615a      	str	r2, [r3, #20]
}
 800b71a:	bf00      	nop
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	bc80      	pop	{r7}
 800b722:	4770      	bx	lr
 800b724:	40012c00 	.word	0x40012c00
 800b728:	40013400 	.word	0x40013400
 800b72c:	40000400 	.word	0x40000400
 800b730:	40000800 	.word	0x40000800
 800b734:	40000c00 	.word	0x40000c00

0800b738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b738:	b480      	push	{r7}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	f023 0201 	bic.w	r2, r3, #1
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	011b      	lsls	r3, r3, #4
 800b768:	693a      	ldr	r2, [r7, #16]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f023 030a 	bic.w	r3, r3, #10
 800b774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	621a      	str	r2, [r3, #32]
}
 800b78a:	bf00      	nop
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	bc80      	pop	{r7}
 800b792:	4770      	bx	lr

0800b794 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b794:	b480      	push	{r7}
 800b796:	b087      	sub	sp, #28
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6a1b      	ldr	r3, [r3, #32]
 800b7a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	f023 0210 	bic.w	r2, r3, #16
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	031b      	lsls	r3, r3, #12
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b7d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	011b      	lsls	r3, r3, #4
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	693a      	ldr	r2, [r7, #16]
 800b7e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	621a      	str	r2, [r3, #32]
}
 800b7e8:	bf00      	nop
 800b7ea:	371c      	adds	r7, #28
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bc80      	pop	{r7}
 800b7f0:	4770      	bx	lr

0800b7f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b085      	sub	sp, #20
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4313      	orrs	r3, r2
 800b810:	f043 0307 	orr.w	r3, r3, #7
 800b814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	609a      	str	r2, [r3, #8]
}
 800b81c:	bf00      	nop
 800b81e:	3714      	adds	r7, #20
 800b820:	46bd      	mov	sp, r7
 800b822:	bc80      	pop	{r7}
 800b824:	4770      	bx	lr

0800b826 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b826:	b480      	push	{r7}
 800b828:	b087      	sub	sp, #28
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	60f8      	str	r0, [r7, #12]
 800b82e:	60b9      	str	r1, [r7, #8]
 800b830:	607a      	str	r2, [r7, #4]
 800b832:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b840:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	021a      	lsls	r2, r3, #8
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	431a      	orrs	r2, r3
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	4313      	orrs	r3, r2
 800b852:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	609a      	str	r2, [r3, #8]
}
 800b85a:	bf00      	nop
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	bc80      	pop	{r7}
 800b862:	4770      	bx	lr

0800b864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b874:	2b01      	cmp	r3, #1
 800b876:	d101      	bne.n	800b87c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b878:	2302      	movs	r3, #2
 800b87a:	e050      	b.n	800b91e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2202      	movs	r2, #2
 800b888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a1b      	ldr	r2, [pc, #108]	; (800b928 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d018      	beq.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a19      	ldr	r2, [pc, #100]	; (800b92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d013      	beq.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8d2:	d00e      	beq.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a15      	ldr	r2, [pc, #84]	; (800b930 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d009      	beq.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a14      	ldr	r2, [pc, #80]	; (800b934 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d004      	beq.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a12      	ldr	r2, [pc, #72]	; (800b938 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d10c      	bne.n	800b90c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	4313      	orrs	r3, r2
 800b902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	bc80      	pop	{r7}
 800b926:	4770      	bx	lr
 800b928:	40012c00 	.word	0x40012c00
 800b92c:	40013400 	.word	0x40013400
 800b930:	40000400 	.word	0x40000400
 800b934:	40000800 	.word	0x40000800
 800b938:	40000c00 	.word	0x40000c00

0800b93c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	bc80      	pop	{r7}
 800b94c:	4770      	bx	lr

0800b94e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b94e:	b480      	push	{r7}
 800b950:	b083      	sub	sp, #12
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b956:	bf00      	nop
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bc80      	pop	{r7}
 800b95e:	4770      	bx	lr

0800b960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d101      	bne.n	800b972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b96e:	2301      	movs	r3, #1
 800b970:	e042      	b.n	800b9f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d106      	bne.n	800b98c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7fc fe1a 	bl	80085c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2224      	movs	r2, #36	; 0x24
 800b990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68da      	ldr	r2, [r3, #12]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b9a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 fcb5 	bl	800c314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	691a      	ldr	r2, [r3, #16]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	695a      	ldr	r2, [r3, #20]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68da      	ldr	r2, [r3, #12]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2220      	movs	r2, #32
 800b9e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b085      	sub	sp, #20
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b20      	cmp	r3, #32
 800ba18:	d121      	bne.n	800ba5e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <HAL_UART_Transmit_IT+0x26>
 800ba20:	88fb      	ldrh	r3, [r7, #6]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d101      	bne.n	800ba2a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e01a      	b.n	800ba60 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	88fa      	ldrh	r2, [r7, #6]
 800ba34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	88fa      	ldrh	r2, [r7, #6]
 800ba3a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2221      	movs	r2, #33	; 0x21
 800ba46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68da      	ldr	r2, [r3, #12]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ba58:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e000      	b.n	800ba60 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ba5e:	2302      	movs	r3, #2
  }
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bc80      	pop	{r7}
 800ba68:	4770      	bx	lr
	...

0800ba6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b0ba      	sub	sp, #232	; 0xe8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ba92:	2300      	movs	r3, #0
 800ba94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa2:	f003 030f 	and.w	r3, r3, #15
 800baa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800baaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10f      	bne.n	800bad2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b00      	cmp	r3, #0
 800babc:	d009      	beq.n	800bad2 <HAL_UART_IRQHandler+0x66>
 800babe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bac2:	f003 0320 	and.w	r3, r3, #32
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fb63 	bl	800c196 <UART_Receive_IT>
      return;
 800bad0:	e25b      	b.n	800bf8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f000 80de 	beq.w	800bc98 <HAL_UART_IRQHandler+0x22c>
 800badc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bae0:	f003 0301 	and.w	r3, r3, #1
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d106      	bne.n	800baf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 80d1 	beq.w	800bc98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800baf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00b      	beq.n	800bb1a <HAL_UART_IRQHandler+0xae>
 800bb02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d005      	beq.n	800bb1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb12:	f043 0201 	orr.w	r2, r3, #1
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb1e:	f003 0304 	and.w	r3, r3, #4
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00b      	beq.n	800bb3e <HAL_UART_IRQHandler+0xd2>
 800bb26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d005      	beq.n	800bb3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb36:	f043 0202 	orr.w	r2, r3, #2
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb42:	f003 0302 	and.w	r3, r3, #2
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00b      	beq.n	800bb62 <HAL_UART_IRQHandler+0xf6>
 800bb4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d005      	beq.n	800bb62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb5a:	f043 0204 	orr.w	r2, r3, #4
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb66:	f003 0308 	and.w	r3, r3, #8
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d011      	beq.n	800bb92 <HAL_UART_IRQHandler+0x126>
 800bb6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb72:	f003 0320 	and.w	r3, r3, #32
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d105      	bne.n	800bb86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb7e:	f003 0301 	and.w	r3, r3, #1
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d005      	beq.n	800bb92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb8a:	f043 0208 	orr.w	r2, r3, #8
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f000 81f2 	beq.w	800bf80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bba0:	f003 0320 	and.w	r3, r3, #32
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d008      	beq.n	800bbba <HAL_UART_IRQHandler+0x14e>
 800bba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbac:	f003 0320 	and.w	r3, r3, #32
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 faee 	bl	800c196 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	695b      	ldr	r3, [r3, #20]
 800bbc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	bf14      	ite	ne
 800bbc8:	2301      	movne	r3, #1
 800bbca:	2300      	moveq	r3, #0
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbd6:	f003 0308 	and.w	r3, r3, #8
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d103      	bne.n	800bbe6 <HAL_UART_IRQHandler+0x17a>
 800bbde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d04f      	beq.n	800bc86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f9f8 	bl	800bfdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d041      	beq.n	800bc7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	3314      	adds	r3, #20
 800bc00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc08:	e853 3f00 	ldrex	r3, [r3]
 800bc0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bc10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	3314      	adds	r3, #20
 800bc22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bc26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bc2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bc32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bc36:	e841 2300 	strex	r3, r2, [r1]
 800bc3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bc3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1d9      	bne.n	800bbfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d013      	beq.n	800bc76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc52:	4a7e      	ldr	r2, [pc, #504]	; (800be4c <HAL_UART_IRQHandler+0x3e0>)
 800bc54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fd f86c 	bl	8008d38 <HAL_DMA_Abort_IT>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d016      	beq.n	800bc94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc70:	4610      	mov	r0, r2
 800bc72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc74:	e00e      	b.n	800bc94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f99c 	bl	800bfb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc7c:	e00a      	b.n	800bc94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f998 	bl	800bfb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc84:	e006      	b.n	800bc94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f994 	bl	800bfb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800bc92:	e175      	b.n	800bf80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc94:	bf00      	nop
    return;
 800bc96:	e173      	b.n	800bf80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	f040 814f 	bne.w	800bf40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bca6:	f003 0310 	and.w	r3, r3, #16
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f000 8148 	beq.w	800bf40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bcb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcb4:	f003 0310 	and.w	r3, r3, #16
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f000 8141 	beq.w	800bf40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	60bb      	str	r3, [r7, #8]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	60bb      	str	r3, [r7, #8]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	60bb      	str	r3, [r7, #8]
 800bcd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 80b6 	beq.w	800be50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bcf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 8145 	beq.w	800bf84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd02:	429a      	cmp	r2, r3
 800bd04:	f080 813e 	bcs.w	800bf84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd14:	699b      	ldr	r3, [r3, #24]
 800bd16:	2b20      	cmp	r3, #32
 800bd18:	f000 8088 	beq.w	800be2c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	330c      	adds	r3, #12
 800bd22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd2a:	e853 3f00 	ldrex	r3, [r3]
 800bd2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	330c      	adds	r3, #12
 800bd44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bd48:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd58:	e841 2300 	strex	r3, r2, [r1]
 800bd5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1d9      	bne.n	800bd1c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3314      	adds	r3, #20
 800bd6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd72:	e853 3f00 	ldrex	r3, [r3]
 800bd76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd7a:	f023 0301 	bic.w	r3, r3, #1
 800bd7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3314      	adds	r3, #20
 800bd88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd98:	e841 2300 	strex	r3, r2, [r1]
 800bd9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1e1      	bne.n	800bd68 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3314      	adds	r3, #20
 800bdaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdae:	e853 3f00 	ldrex	r3, [r3]
 800bdb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bdb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3314      	adds	r3, #20
 800bdc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bdc8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bdca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bdce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bdd0:	e841 2300 	strex	r3, r2, [r1]
 800bdd4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bdd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e3      	bne.n	800bda4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2220      	movs	r2, #32
 800bde0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	330c      	adds	r3, #12
 800bdf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdf4:	e853 3f00 	ldrex	r3, [r3]
 800bdf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bdfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdfc:	f023 0310 	bic.w	r3, r3, #16
 800be00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	330c      	adds	r3, #12
 800be0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800be0e:	65ba      	str	r2, [r7, #88]	; 0x58
 800be10:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be16:	e841 2300 	strex	r3, r2, [r1]
 800be1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1e3      	bne.n	800bdea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be26:	4618      	mov	r0, r3
 800be28:	f7fc ff4b 	bl	8008cc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2202      	movs	r2, #2
 800be30:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	b29b      	uxth	r3, r3
 800be40:	4619      	mov	r1, r3
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f8bf 	bl	800bfc6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be48:	e09c      	b.n	800bf84 <HAL_UART_IRQHandler+0x518>
 800be4a:	bf00      	nop
 800be4c:	0800c0a1 	.word	0x0800c0a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be58:	b29b      	uxth	r3, r3
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be64:	b29b      	uxth	r3, r3
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 808e 	beq.w	800bf88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 8089 	beq.w	800bf88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	330c      	adds	r3, #12
 800be7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be80:	e853 3f00 	ldrex	r3, [r3]
 800be84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	330c      	adds	r3, #12
 800be96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800be9a:	647a      	str	r2, [r7, #68]	; 0x44
 800be9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bea2:	e841 2300 	strex	r3, r2, [r1]
 800bea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1e3      	bne.n	800be76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3314      	adds	r3, #20
 800beb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb8:	e853 3f00 	ldrex	r3, [r3]
 800bebc:	623b      	str	r3, [r7, #32]
   return(result);
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	f023 0301 	bic.w	r3, r3, #1
 800bec4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	3314      	adds	r3, #20
 800bece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bed2:	633a      	str	r2, [r7, #48]	; 0x30
 800bed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beda:	e841 2300 	strex	r3, r2, [r1]
 800bede:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1e3      	bne.n	800beae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2220      	movs	r2, #32
 800beea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	330c      	adds	r3, #12
 800befa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	e853 3f00 	ldrex	r3, [r3]
 800bf02:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f023 0310 	bic.w	r3, r3, #16
 800bf0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	330c      	adds	r3, #12
 800bf14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bf18:	61fa      	str	r2, [r7, #28]
 800bf1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1c:	69b9      	ldr	r1, [r7, #24]
 800bf1e:	69fa      	ldr	r2, [r7, #28]
 800bf20:	e841 2300 	strex	r3, r2, [r1]
 800bf24:	617b      	str	r3, [r7, #20]
   return(result);
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1e3      	bne.n	800bef4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2202      	movs	r2, #2
 800bf30:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 f844 	bl	800bfc6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf3e:	e023      	b.n	800bf88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bf40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d009      	beq.n	800bf60 <HAL_UART_IRQHandler+0x4f4>
 800bf4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d003      	beq.n	800bf60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f8b5 	bl	800c0c8 <UART_Transmit_IT>
    return;
 800bf5e:	e014      	b.n	800bf8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00e      	beq.n	800bf8a <HAL_UART_IRQHandler+0x51e>
 800bf6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d008      	beq.n	800bf8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f8f4 	bl	800c166 <UART_EndTransmit_IT>
    return;
 800bf7e:	e004      	b.n	800bf8a <HAL_UART_IRQHandler+0x51e>
    return;
 800bf80:	bf00      	nop
 800bf82:	e002      	b.n	800bf8a <HAL_UART_IRQHandler+0x51e>
      return;
 800bf84:	bf00      	nop
 800bf86:	e000      	b.n	800bf8a <HAL_UART_IRQHandler+0x51e>
      return;
 800bf88:	bf00      	nop
  }
}
 800bf8a:	37e8      	adds	r7, #232	; 0xe8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf98:	bf00      	nop
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bc80      	pop	{r7}
 800bfa0:	4770      	bx	lr

0800bfa2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b083      	sub	sp, #12
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bfaa:	bf00      	nop
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bc80      	pop	{r7}
 800bfb2:	4770      	bx	lr

0800bfb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bc80      	pop	{r7}
 800bfc4:	4770      	bx	lr

0800bfc6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bfc6:	b480      	push	{r7}
 800bfc8:	b083      	sub	sp, #12
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	460b      	mov	r3, r1
 800bfd0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bfd2:	bf00      	nop
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bc80      	pop	{r7}
 800bfda:	4770      	bx	lr

0800bfdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b095      	sub	sp, #84	; 0x54
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	330c      	adds	r3, #12
 800bfea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	330c      	adds	r3, #12
 800c002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c004:	643a      	str	r2, [r7, #64]	; 0x40
 800c006:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c00a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e5      	bne.n	800bfe4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3314      	adds	r3, #20
 800c01e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c020:	6a3b      	ldr	r3, [r7, #32]
 800c022:	e853 3f00 	ldrex	r3, [r3]
 800c026:	61fb      	str	r3, [r7, #28]
   return(result);
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	f023 0301 	bic.w	r3, r3, #1
 800c02e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3314      	adds	r3, #20
 800c036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c038:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c03a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c03e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c040:	e841 2300 	strex	r3, r2, [r1]
 800c044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1e5      	bne.n	800c018 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c050:	2b01      	cmp	r3, #1
 800c052:	d119      	bne.n	800c088 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	330c      	adds	r3, #12
 800c05a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	e853 3f00 	ldrex	r3, [r3]
 800c062:	60bb      	str	r3, [r7, #8]
   return(result);
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	f023 0310 	bic.w	r3, r3, #16
 800c06a:	647b      	str	r3, [r7, #68]	; 0x44
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	330c      	adds	r3, #12
 800c072:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c074:	61ba      	str	r2, [r7, #24]
 800c076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c078:	6979      	ldr	r1, [r7, #20]
 800c07a:	69ba      	ldr	r2, [r7, #24]
 800c07c:	e841 2300 	strex	r3, r2, [r1]
 800c080:	613b      	str	r3, [r7, #16]
   return(result);
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1e5      	bne.n	800c054 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2220      	movs	r2, #32
 800c08c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c096:	bf00      	nop
 800c098:	3754      	adds	r7, #84	; 0x54
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bc80      	pop	{r7}
 800c09e:	4770      	bx	lr

0800c0a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f7ff ff7a 	bl	800bfb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0c0:	bf00      	nop
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b21      	cmp	r3, #33	; 0x21
 800c0da:	d13e      	bne.n	800c15a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0e4:	d114      	bne.n	800c110 <UART_Transmit_IT+0x48>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d110      	bne.n	800c110 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c102:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a1b      	ldr	r3, [r3, #32]
 800c108:	1c9a      	adds	r2, r3, #2
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	621a      	str	r2, [r3, #32]
 800c10e:	e008      	b.n	800c122 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	1c59      	adds	r1, r3, #1
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	6211      	str	r1, [r2, #32]
 800c11a:	781a      	ldrb	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c126:	b29b      	uxth	r3, r3
 800c128:	3b01      	subs	r3, #1
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	4619      	mov	r1, r3
 800c130:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10f      	bne.n	800c156 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68da      	ldr	r2, [r3, #12]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c144:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68da      	ldr	r2, [r3, #12]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c154:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c156:	2300      	movs	r3, #0
 800c158:	e000      	b.n	800c15c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c15a:	2302      	movs	r3, #2
  }
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3714      	adds	r7, #20
 800c160:	46bd      	mov	sp, r7
 800c162:	bc80      	pop	{r7}
 800c164:	4770      	bx	lr

0800c166 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b082      	sub	sp, #8
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68da      	ldr	r2, [r3, #12]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c17c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2220      	movs	r2, #32
 800c182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7ff ff02 	bl	800bf90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c18c:	2300      	movs	r3, #0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b08c      	sub	sp, #48	; 0x30
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b22      	cmp	r3, #34	; 0x22
 800c1a8:	f040 80ae 	bne.w	800c308 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1b4:	d117      	bne.n	800c1e6 <UART_Receive_IT+0x50>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	691b      	ldr	r3, [r3, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d113      	bne.n	800c1e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1de:	1c9a      	adds	r2, r3, #2
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	629a      	str	r2, [r3, #40]	; 0x28
 800c1e4:	e026      	b.n	800c234 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1f8:	d007      	beq.n	800c20a <UART_Receive_IT+0x74>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d10a      	bne.n	800c218 <UART_Receive_IT+0x82>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d106      	bne.n	800c218 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	b2da      	uxtb	r2, r3
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	701a      	strb	r2, [r3, #0]
 800c216:	e008      	b.n	800c22a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c224:	b2da      	uxtb	r2, r3
 800c226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c228:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c238:	b29b      	uxth	r3, r3
 800c23a:	3b01      	subs	r3, #1
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	4619      	mov	r1, r3
 800c242:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c244:	2b00      	cmp	r3, #0
 800c246:	d15d      	bne.n	800c304 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68da      	ldr	r2, [r3, #12]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f022 0220 	bic.w	r2, r2, #32
 800c256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68da      	ldr	r2, [r3, #12]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	695a      	ldr	r2, [r3, #20]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f022 0201 	bic.w	r2, r2, #1
 800c276:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2220      	movs	r2, #32
 800c27c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d135      	bne.n	800c2fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	330c      	adds	r3, #12
 800c29a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	e853 3f00 	ldrex	r3, [r3]
 800c2a2:	613b      	str	r3, [r7, #16]
   return(result);
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	f023 0310 	bic.w	r3, r3, #16
 800c2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	330c      	adds	r3, #12
 800c2b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2b4:	623a      	str	r2, [r7, #32]
 800c2b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b8:	69f9      	ldr	r1, [r7, #28]
 800c2ba:	6a3a      	ldr	r2, [r7, #32]
 800c2bc:	e841 2300 	strex	r3, r2, [r1]
 800c2c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1e5      	bne.n	800c294 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 0310 	and.w	r3, r3, #16
 800c2d2:	2b10      	cmp	r3, #16
 800c2d4:	d10a      	bne.n	800c2ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	60fb      	str	r3, [r7, #12]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	60fb      	str	r3, [r7, #12]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff fe67 	bl	800bfc6 <HAL_UARTEx_RxEventCallback>
 800c2f8:	e002      	b.n	800c300 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff fe51 	bl	800bfa2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	e002      	b.n	800c30a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c304:	2300      	movs	r3, #0
 800c306:	e000      	b.n	800c30a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c308:	2302      	movs	r3, #2
  }
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3730      	adds	r7, #48	; 0x30
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	68da      	ldr	r2, [r3, #12]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	430a      	orrs	r2, r1
 800c330:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	689a      	ldr	r2, [r3, #8]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	431a      	orrs	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	4313      	orrs	r3, r2
 800c342:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c34e:	f023 030c 	bic.w	r3, r3, #12
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	6812      	ldr	r2, [r2, #0]
 800c356:	68b9      	ldr	r1, [r7, #8]
 800c358:	430b      	orrs	r3, r1
 800c35a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	699a      	ldr	r2, [r3, #24]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	430a      	orrs	r2, r1
 800c370:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a2c      	ldr	r2, [pc, #176]	; (800c428 <UART_SetConfig+0x114>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d103      	bne.n	800c384 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c37c:	f7fe fe8c 	bl	800b098 <HAL_RCC_GetPCLK2Freq>
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	e002      	b.n	800c38a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c384:	f7fe fe74 	bl	800b070 <HAL_RCC_GetPCLK1Freq>
 800c388:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	4613      	mov	r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4413      	add	r3, r2
 800c392:	009a      	lsls	r2, r3, #2
 800c394:	441a      	add	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3a0:	4a22      	ldr	r2, [pc, #136]	; (800c42c <UART_SetConfig+0x118>)
 800c3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3a6:	095b      	lsrs	r3, r3, #5
 800c3a8:	0119      	lsls	r1, r3, #4
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4413      	add	r3, r2
 800c3b2:	009a      	lsls	r2, r3, #2
 800c3b4:	441a      	add	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3c0:	4b1a      	ldr	r3, [pc, #104]	; (800c42c <UART_SetConfig+0x118>)
 800c3c2:	fba3 0302 	umull	r0, r3, r3, r2
 800c3c6:	095b      	lsrs	r3, r3, #5
 800c3c8:	2064      	movs	r0, #100	; 0x64
 800c3ca:	fb00 f303 	mul.w	r3, r0, r3
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	011b      	lsls	r3, r3, #4
 800c3d2:	3332      	adds	r3, #50	; 0x32
 800c3d4:	4a15      	ldr	r2, [pc, #84]	; (800c42c <UART_SetConfig+0x118>)
 800c3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3da:	095b      	lsrs	r3, r3, #5
 800c3dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3e0:	4419      	add	r1, r3
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	009a      	lsls	r2, r3, #2
 800c3ec:	441a      	add	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c3f8:	4b0c      	ldr	r3, [pc, #48]	; (800c42c <UART_SetConfig+0x118>)
 800c3fa:	fba3 0302 	umull	r0, r3, r3, r2
 800c3fe:	095b      	lsrs	r3, r3, #5
 800c400:	2064      	movs	r0, #100	; 0x64
 800c402:	fb00 f303 	mul.w	r3, r0, r3
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	011b      	lsls	r3, r3, #4
 800c40a:	3332      	adds	r3, #50	; 0x32
 800c40c:	4a07      	ldr	r2, [pc, #28]	; (800c42c <UART_SetConfig+0x118>)
 800c40e:	fba2 2303 	umull	r2, r3, r2, r3
 800c412:	095b      	lsrs	r3, r3, #5
 800c414:	f003 020f 	and.w	r2, r3, #15
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	440a      	add	r2, r1
 800c41e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c420:	bf00      	nop
 800c422:	3710      	adds	r7, #16
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	40013800 	.word	0x40013800
 800c42c:	51eb851f 	.word	0x51eb851f

0800c430 <__itoa>:
 800c430:	1e93      	subs	r3, r2, #2
 800c432:	2b22      	cmp	r3, #34	; 0x22
 800c434:	b510      	push	{r4, lr}
 800c436:	460c      	mov	r4, r1
 800c438:	d904      	bls.n	800c444 <__itoa+0x14>
 800c43a:	2300      	movs	r3, #0
 800c43c:	461c      	mov	r4, r3
 800c43e:	700b      	strb	r3, [r1, #0]
 800c440:	4620      	mov	r0, r4
 800c442:	bd10      	pop	{r4, pc}
 800c444:	2a0a      	cmp	r2, #10
 800c446:	d109      	bne.n	800c45c <__itoa+0x2c>
 800c448:	2800      	cmp	r0, #0
 800c44a:	da07      	bge.n	800c45c <__itoa+0x2c>
 800c44c:	232d      	movs	r3, #45	; 0x2d
 800c44e:	700b      	strb	r3, [r1, #0]
 800c450:	2101      	movs	r1, #1
 800c452:	4240      	negs	r0, r0
 800c454:	4421      	add	r1, r4
 800c456:	f000 f8d9 	bl	800c60c <__utoa>
 800c45a:	e7f1      	b.n	800c440 <__itoa+0x10>
 800c45c:	2100      	movs	r1, #0
 800c45e:	e7f9      	b.n	800c454 <__itoa+0x24>

0800c460 <itoa>:
 800c460:	f7ff bfe6 	b.w	800c430 <__itoa>

0800c464 <malloc>:
 800c464:	4b02      	ldr	r3, [pc, #8]	; (800c470 <malloc+0xc>)
 800c466:	4601      	mov	r1, r0
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	f000 b823 	b.w	800c4b4 <_malloc_r>
 800c46e:	bf00      	nop
 800c470:	20000108 	.word	0x20000108

0800c474 <sbrk_aligned>:
 800c474:	b570      	push	{r4, r5, r6, lr}
 800c476:	4e0e      	ldr	r6, [pc, #56]	; (800c4b0 <sbrk_aligned+0x3c>)
 800c478:	460c      	mov	r4, r1
 800c47a:	6831      	ldr	r1, [r6, #0]
 800c47c:	4605      	mov	r5, r0
 800c47e:	b911      	cbnz	r1, 800c486 <sbrk_aligned+0x12>
 800c480:	f000 f91e 	bl	800c6c0 <_sbrk_r>
 800c484:	6030      	str	r0, [r6, #0]
 800c486:	4621      	mov	r1, r4
 800c488:	4628      	mov	r0, r5
 800c48a:	f000 f919 	bl	800c6c0 <_sbrk_r>
 800c48e:	1c43      	adds	r3, r0, #1
 800c490:	d00a      	beq.n	800c4a8 <sbrk_aligned+0x34>
 800c492:	1cc4      	adds	r4, r0, #3
 800c494:	f024 0403 	bic.w	r4, r4, #3
 800c498:	42a0      	cmp	r0, r4
 800c49a:	d007      	beq.n	800c4ac <sbrk_aligned+0x38>
 800c49c:	1a21      	subs	r1, r4, r0
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f000 f90e 	bl	800c6c0 <_sbrk_r>
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	d101      	bne.n	800c4ac <sbrk_aligned+0x38>
 800c4a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}
 800c4b0:	2000049c 	.word	0x2000049c

0800c4b4 <_malloc_r>:
 800c4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b8:	1ccd      	adds	r5, r1, #3
 800c4ba:	f025 0503 	bic.w	r5, r5, #3
 800c4be:	3508      	adds	r5, #8
 800c4c0:	2d0c      	cmp	r5, #12
 800c4c2:	bf38      	it	cc
 800c4c4:	250c      	movcc	r5, #12
 800c4c6:	2d00      	cmp	r5, #0
 800c4c8:	4607      	mov	r7, r0
 800c4ca:	db01      	blt.n	800c4d0 <_malloc_r+0x1c>
 800c4cc:	42a9      	cmp	r1, r5
 800c4ce:	d905      	bls.n	800c4dc <_malloc_r+0x28>
 800c4d0:	230c      	movs	r3, #12
 800c4d2:	2600      	movs	r6, #0
 800c4d4:	603b      	str	r3, [r7, #0]
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c5b0 <_malloc_r+0xfc>
 800c4e0:	f000 f868 	bl	800c5b4 <__malloc_lock>
 800c4e4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4e8:	461c      	mov	r4, r3
 800c4ea:	bb5c      	cbnz	r4, 800c544 <_malloc_r+0x90>
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	f7ff ffc0 	bl	800c474 <sbrk_aligned>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	d155      	bne.n	800c5a6 <_malloc_r+0xf2>
 800c4fa:	f8d8 4000 	ldr.w	r4, [r8]
 800c4fe:	4626      	mov	r6, r4
 800c500:	2e00      	cmp	r6, #0
 800c502:	d145      	bne.n	800c590 <_malloc_r+0xdc>
 800c504:	2c00      	cmp	r4, #0
 800c506:	d048      	beq.n	800c59a <_malloc_r+0xe6>
 800c508:	6823      	ldr	r3, [r4, #0]
 800c50a:	4631      	mov	r1, r6
 800c50c:	4638      	mov	r0, r7
 800c50e:	eb04 0903 	add.w	r9, r4, r3
 800c512:	f000 f8d5 	bl	800c6c0 <_sbrk_r>
 800c516:	4581      	cmp	r9, r0
 800c518:	d13f      	bne.n	800c59a <_malloc_r+0xe6>
 800c51a:	6821      	ldr	r1, [r4, #0]
 800c51c:	4638      	mov	r0, r7
 800c51e:	1a6d      	subs	r5, r5, r1
 800c520:	4629      	mov	r1, r5
 800c522:	f7ff ffa7 	bl	800c474 <sbrk_aligned>
 800c526:	3001      	adds	r0, #1
 800c528:	d037      	beq.n	800c59a <_malloc_r+0xe6>
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	442b      	add	r3, r5
 800c52e:	6023      	str	r3, [r4, #0]
 800c530:	f8d8 3000 	ldr.w	r3, [r8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d038      	beq.n	800c5aa <_malloc_r+0xf6>
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	42a2      	cmp	r2, r4
 800c53c:	d12b      	bne.n	800c596 <_malloc_r+0xe2>
 800c53e:	2200      	movs	r2, #0
 800c540:	605a      	str	r2, [r3, #4]
 800c542:	e00f      	b.n	800c564 <_malloc_r+0xb0>
 800c544:	6822      	ldr	r2, [r4, #0]
 800c546:	1b52      	subs	r2, r2, r5
 800c548:	d41f      	bmi.n	800c58a <_malloc_r+0xd6>
 800c54a:	2a0b      	cmp	r2, #11
 800c54c:	d917      	bls.n	800c57e <_malloc_r+0xca>
 800c54e:	1961      	adds	r1, r4, r5
 800c550:	42a3      	cmp	r3, r4
 800c552:	6025      	str	r5, [r4, #0]
 800c554:	bf18      	it	ne
 800c556:	6059      	strne	r1, [r3, #4]
 800c558:	6863      	ldr	r3, [r4, #4]
 800c55a:	bf08      	it	eq
 800c55c:	f8c8 1000 	streq.w	r1, [r8]
 800c560:	5162      	str	r2, [r4, r5]
 800c562:	604b      	str	r3, [r1, #4]
 800c564:	4638      	mov	r0, r7
 800c566:	f104 060b 	add.w	r6, r4, #11
 800c56a:	f000 f829 	bl	800c5c0 <__malloc_unlock>
 800c56e:	f026 0607 	bic.w	r6, r6, #7
 800c572:	1d23      	adds	r3, r4, #4
 800c574:	1af2      	subs	r2, r6, r3
 800c576:	d0ae      	beq.n	800c4d6 <_malloc_r+0x22>
 800c578:	1b9b      	subs	r3, r3, r6
 800c57a:	50a3      	str	r3, [r4, r2]
 800c57c:	e7ab      	b.n	800c4d6 <_malloc_r+0x22>
 800c57e:	42a3      	cmp	r3, r4
 800c580:	6862      	ldr	r2, [r4, #4]
 800c582:	d1dd      	bne.n	800c540 <_malloc_r+0x8c>
 800c584:	f8c8 2000 	str.w	r2, [r8]
 800c588:	e7ec      	b.n	800c564 <_malloc_r+0xb0>
 800c58a:	4623      	mov	r3, r4
 800c58c:	6864      	ldr	r4, [r4, #4]
 800c58e:	e7ac      	b.n	800c4ea <_malloc_r+0x36>
 800c590:	4634      	mov	r4, r6
 800c592:	6876      	ldr	r6, [r6, #4]
 800c594:	e7b4      	b.n	800c500 <_malloc_r+0x4c>
 800c596:	4613      	mov	r3, r2
 800c598:	e7cc      	b.n	800c534 <_malloc_r+0x80>
 800c59a:	230c      	movs	r3, #12
 800c59c:	4638      	mov	r0, r7
 800c59e:	603b      	str	r3, [r7, #0]
 800c5a0:	f000 f80e 	bl	800c5c0 <__malloc_unlock>
 800c5a4:	e797      	b.n	800c4d6 <_malloc_r+0x22>
 800c5a6:	6025      	str	r5, [r4, #0]
 800c5a8:	e7dc      	b.n	800c564 <_malloc_r+0xb0>
 800c5aa:	605b      	str	r3, [r3, #4]
 800c5ac:	deff      	udf	#255	; 0xff
 800c5ae:	bf00      	nop
 800c5b0:	20000498 	.word	0x20000498

0800c5b4 <__malloc_lock>:
 800c5b4:	4801      	ldr	r0, [pc, #4]	; (800c5bc <__malloc_lock+0x8>)
 800c5b6:	f000 b8bd 	b.w	800c734 <__retarget_lock_acquire_recursive>
 800c5ba:	bf00      	nop
 800c5bc:	200005d8 	.word	0x200005d8

0800c5c0 <__malloc_unlock>:
 800c5c0:	4801      	ldr	r0, [pc, #4]	; (800c5c8 <__malloc_unlock+0x8>)
 800c5c2:	f000 b8b8 	b.w	800c736 <__retarget_lock_release_recursive>
 800c5c6:	bf00      	nop
 800c5c8:	200005d8 	.word	0x200005d8

0800c5cc <siprintf>:
 800c5cc:	b40e      	push	{r1, r2, r3}
 800c5ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5d2:	b500      	push	{lr}
 800c5d4:	b09c      	sub	sp, #112	; 0x70
 800c5d6:	ab1d      	add	r3, sp, #116	; 0x74
 800c5d8:	9002      	str	r0, [sp, #8]
 800c5da:	9006      	str	r0, [sp, #24]
 800c5dc:	9107      	str	r1, [sp, #28]
 800c5de:	9104      	str	r1, [sp, #16]
 800c5e0:	4808      	ldr	r0, [pc, #32]	; (800c604 <siprintf+0x38>)
 800c5e2:	4909      	ldr	r1, [pc, #36]	; (800c608 <siprintf+0x3c>)
 800c5e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e8:	9105      	str	r1, [sp, #20]
 800c5ea:	6800      	ldr	r0, [r0, #0]
 800c5ec:	a902      	add	r1, sp, #8
 800c5ee:	9301      	str	r3, [sp, #4]
 800c5f0:	f000 f94c 	bl	800c88c <_svfiprintf_r>
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	9b02      	ldr	r3, [sp, #8]
 800c5f8:	701a      	strb	r2, [r3, #0]
 800c5fa:	b01c      	add	sp, #112	; 0x70
 800c5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c600:	b003      	add	sp, #12
 800c602:	4770      	bx	lr
 800c604:	20000108 	.word	0x20000108
 800c608:	ffff0208 	.word	0xffff0208

0800c60c <__utoa>:
 800c60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c60e:	b08b      	sub	sp, #44	; 0x2c
 800c610:	4605      	mov	r5, r0
 800c612:	460b      	mov	r3, r1
 800c614:	466e      	mov	r6, sp
 800c616:	4c1d      	ldr	r4, [pc, #116]	; (800c68c <__utoa+0x80>)
 800c618:	f104 0c20 	add.w	ip, r4, #32
 800c61c:	4637      	mov	r7, r6
 800c61e:	6820      	ldr	r0, [r4, #0]
 800c620:	6861      	ldr	r1, [r4, #4]
 800c622:	3408      	adds	r4, #8
 800c624:	c703      	stmia	r7!, {r0, r1}
 800c626:	4564      	cmp	r4, ip
 800c628:	463e      	mov	r6, r7
 800c62a:	d1f7      	bne.n	800c61c <__utoa+0x10>
 800c62c:	7921      	ldrb	r1, [r4, #4]
 800c62e:	6820      	ldr	r0, [r4, #0]
 800c630:	7139      	strb	r1, [r7, #4]
 800c632:	1e91      	subs	r1, r2, #2
 800c634:	2922      	cmp	r1, #34	; 0x22
 800c636:	6038      	str	r0, [r7, #0]
 800c638:	f04f 0100 	mov.w	r1, #0
 800c63c:	d904      	bls.n	800c648 <__utoa+0x3c>
 800c63e:	7019      	strb	r1, [r3, #0]
 800c640:	460b      	mov	r3, r1
 800c642:	4618      	mov	r0, r3
 800c644:	b00b      	add	sp, #44	; 0x2c
 800c646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c648:	1e58      	subs	r0, r3, #1
 800c64a:	4684      	mov	ip, r0
 800c64c:	fbb5 f7f2 	udiv	r7, r5, r2
 800c650:	fb02 5617 	mls	r6, r2, r7, r5
 800c654:	3628      	adds	r6, #40	; 0x28
 800c656:	446e      	add	r6, sp
 800c658:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c65c:	460c      	mov	r4, r1
 800c65e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c662:	462e      	mov	r6, r5
 800c664:	42b2      	cmp	r2, r6
 800c666:	463d      	mov	r5, r7
 800c668:	f101 0101 	add.w	r1, r1, #1
 800c66c:	d9ee      	bls.n	800c64c <__utoa+0x40>
 800c66e:	2200      	movs	r2, #0
 800c670:	545a      	strb	r2, [r3, r1]
 800c672:	1919      	adds	r1, r3, r4
 800c674:	1aa5      	subs	r5, r4, r2
 800c676:	42aa      	cmp	r2, r5
 800c678:	dae3      	bge.n	800c642 <__utoa+0x36>
 800c67a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c67e:	780e      	ldrb	r6, [r1, #0]
 800c680:	3201      	adds	r2, #1
 800c682:	7006      	strb	r6, [r0, #0]
 800c684:	f801 5901 	strb.w	r5, [r1], #-1
 800c688:	e7f4      	b.n	800c674 <__utoa+0x68>
 800c68a:	bf00      	nop
 800c68c:	0800de86 	.word	0x0800de86

0800c690 <strcat>:
 800c690:	4602      	mov	r2, r0
 800c692:	b510      	push	{r4, lr}
 800c694:	7814      	ldrb	r4, [r2, #0]
 800c696:	4613      	mov	r3, r2
 800c698:	3201      	adds	r2, #1
 800c69a:	2c00      	cmp	r4, #0
 800c69c:	d1fa      	bne.n	800c694 <strcat+0x4>
 800c69e:	3b01      	subs	r3, #1
 800c6a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	d1f9      	bne.n	800c6a0 <strcat+0x10>
 800c6ac:	bd10      	pop	{r4, pc}

0800c6ae <memset>:
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	4402      	add	r2, r0
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d100      	bne.n	800c6b8 <memset+0xa>
 800c6b6:	4770      	bx	lr
 800c6b8:	f803 1b01 	strb.w	r1, [r3], #1
 800c6bc:	e7f9      	b.n	800c6b2 <memset+0x4>
	...

0800c6c0 <_sbrk_r>:
 800c6c0:	b538      	push	{r3, r4, r5, lr}
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	4d05      	ldr	r5, [pc, #20]	; (800c6dc <_sbrk_r+0x1c>)
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	4608      	mov	r0, r1
 800c6ca:	602b      	str	r3, [r5, #0]
 800c6cc:	f7fc f808 	bl	80086e0 <_sbrk>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	d102      	bne.n	800c6da <_sbrk_r+0x1a>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	b103      	cbz	r3, 800c6da <_sbrk_r+0x1a>
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	bd38      	pop	{r3, r4, r5, pc}
 800c6dc:	200005dc 	.word	0x200005dc

0800c6e0 <__errno>:
 800c6e0:	4b01      	ldr	r3, [pc, #4]	; (800c6e8 <__errno+0x8>)
 800c6e2:	6818      	ldr	r0, [r3, #0]
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	20000108 	.word	0x20000108

0800c6ec <__libc_init_array>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	2600      	movs	r6, #0
 800c6f0:	4d0c      	ldr	r5, [pc, #48]	; (800c724 <__libc_init_array+0x38>)
 800c6f2:	4c0d      	ldr	r4, [pc, #52]	; (800c728 <__libc_init_array+0x3c>)
 800c6f4:	1b64      	subs	r4, r4, r5
 800c6f6:	10a4      	asrs	r4, r4, #2
 800c6f8:	42a6      	cmp	r6, r4
 800c6fa:	d109      	bne.n	800c710 <__libc_init_array+0x24>
 800c6fc:	f000 fbc6 	bl	800ce8c <_init>
 800c700:	2600      	movs	r6, #0
 800c702:	4d0a      	ldr	r5, [pc, #40]	; (800c72c <__libc_init_array+0x40>)
 800c704:	4c0a      	ldr	r4, [pc, #40]	; (800c730 <__libc_init_array+0x44>)
 800c706:	1b64      	subs	r4, r4, r5
 800c708:	10a4      	asrs	r4, r4, #2
 800c70a:	42a6      	cmp	r6, r4
 800c70c:	d105      	bne.n	800c71a <__libc_init_array+0x2e>
 800c70e:	bd70      	pop	{r4, r5, r6, pc}
 800c710:	f855 3b04 	ldr.w	r3, [r5], #4
 800c714:	4798      	blx	r3
 800c716:	3601      	adds	r6, #1
 800c718:	e7ee      	b.n	800c6f8 <__libc_init_array+0xc>
 800c71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c71e:	4798      	blx	r3
 800c720:	3601      	adds	r6, #1
 800c722:	e7f2      	b.n	800c70a <__libc_init_array+0x1e>
 800c724:	0800dee0 	.word	0x0800dee0
 800c728:	0800dee0 	.word	0x0800dee0
 800c72c:	0800dee0 	.word	0x0800dee0
 800c730:	0800dee4 	.word	0x0800dee4

0800c734 <__retarget_lock_acquire_recursive>:
 800c734:	4770      	bx	lr

0800c736 <__retarget_lock_release_recursive>:
 800c736:	4770      	bx	lr

0800c738 <strcpy>:
 800c738:	4603      	mov	r3, r0
 800c73a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c73e:	f803 2b01 	strb.w	r2, [r3], #1
 800c742:	2a00      	cmp	r2, #0
 800c744:	d1f9      	bne.n	800c73a <strcpy+0x2>
 800c746:	4770      	bx	lr

0800c748 <_free_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4605      	mov	r5, r0
 800c74c:	2900      	cmp	r1, #0
 800c74e:	d040      	beq.n	800c7d2 <_free_r+0x8a>
 800c750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c754:	1f0c      	subs	r4, r1, #4
 800c756:	2b00      	cmp	r3, #0
 800c758:	bfb8      	it	lt
 800c75a:	18e4      	addlt	r4, r4, r3
 800c75c:	f7ff ff2a 	bl	800c5b4 <__malloc_lock>
 800c760:	4a1c      	ldr	r2, [pc, #112]	; (800c7d4 <_free_r+0x8c>)
 800c762:	6813      	ldr	r3, [r2, #0]
 800c764:	b933      	cbnz	r3, 800c774 <_free_r+0x2c>
 800c766:	6063      	str	r3, [r4, #4]
 800c768:	6014      	str	r4, [r2, #0]
 800c76a:	4628      	mov	r0, r5
 800c76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c770:	f7ff bf26 	b.w	800c5c0 <__malloc_unlock>
 800c774:	42a3      	cmp	r3, r4
 800c776:	d908      	bls.n	800c78a <_free_r+0x42>
 800c778:	6820      	ldr	r0, [r4, #0]
 800c77a:	1821      	adds	r1, r4, r0
 800c77c:	428b      	cmp	r3, r1
 800c77e:	bf01      	itttt	eq
 800c780:	6819      	ldreq	r1, [r3, #0]
 800c782:	685b      	ldreq	r3, [r3, #4]
 800c784:	1809      	addeq	r1, r1, r0
 800c786:	6021      	streq	r1, [r4, #0]
 800c788:	e7ed      	b.n	800c766 <_free_r+0x1e>
 800c78a:	461a      	mov	r2, r3
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	b10b      	cbz	r3, 800c794 <_free_r+0x4c>
 800c790:	42a3      	cmp	r3, r4
 800c792:	d9fa      	bls.n	800c78a <_free_r+0x42>
 800c794:	6811      	ldr	r1, [r2, #0]
 800c796:	1850      	adds	r0, r2, r1
 800c798:	42a0      	cmp	r0, r4
 800c79a:	d10b      	bne.n	800c7b4 <_free_r+0x6c>
 800c79c:	6820      	ldr	r0, [r4, #0]
 800c79e:	4401      	add	r1, r0
 800c7a0:	1850      	adds	r0, r2, r1
 800c7a2:	4283      	cmp	r3, r0
 800c7a4:	6011      	str	r1, [r2, #0]
 800c7a6:	d1e0      	bne.n	800c76a <_free_r+0x22>
 800c7a8:	6818      	ldr	r0, [r3, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	4408      	add	r0, r1
 800c7ae:	6010      	str	r0, [r2, #0]
 800c7b0:	6053      	str	r3, [r2, #4]
 800c7b2:	e7da      	b.n	800c76a <_free_r+0x22>
 800c7b4:	d902      	bls.n	800c7bc <_free_r+0x74>
 800c7b6:	230c      	movs	r3, #12
 800c7b8:	602b      	str	r3, [r5, #0]
 800c7ba:	e7d6      	b.n	800c76a <_free_r+0x22>
 800c7bc:	6820      	ldr	r0, [r4, #0]
 800c7be:	1821      	adds	r1, r4, r0
 800c7c0:	428b      	cmp	r3, r1
 800c7c2:	bf01      	itttt	eq
 800c7c4:	6819      	ldreq	r1, [r3, #0]
 800c7c6:	685b      	ldreq	r3, [r3, #4]
 800c7c8:	1809      	addeq	r1, r1, r0
 800c7ca:	6021      	streq	r1, [r4, #0]
 800c7cc:	6063      	str	r3, [r4, #4]
 800c7ce:	6054      	str	r4, [r2, #4]
 800c7d0:	e7cb      	b.n	800c76a <_free_r+0x22>
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	20000498 	.word	0x20000498

0800c7d8 <__ssputs_r>:
 800c7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7dc:	461f      	mov	r7, r3
 800c7de:	688e      	ldr	r6, [r1, #8]
 800c7e0:	4682      	mov	sl, r0
 800c7e2:	42be      	cmp	r6, r7
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	4690      	mov	r8, r2
 800c7e8:	680b      	ldr	r3, [r1, #0]
 800c7ea:	d82c      	bhi.n	800c846 <__ssputs_r+0x6e>
 800c7ec:	898a      	ldrh	r2, [r1, #12]
 800c7ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7f2:	d026      	beq.n	800c842 <__ssputs_r+0x6a>
 800c7f4:	6965      	ldr	r5, [r4, #20]
 800c7f6:	6909      	ldr	r1, [r1, #16]
 800c7f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7fc:	eba3 0901 	sub.w	r9, r3, r1
 800c800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c804:	1c7b      	adds	r3, r7, #1
 800c806:	444b      	add	r3, r9
 800c808:	106d      	asrs	r5, r5, #1
 800c80a:	429d      	cmp	r5, r3
 800c80c:	bf38      	it	cc
 800c80e:	461d      	movcc	r5, r3
 800c810:	0553      	lsls	r3, r2, #21
 800c812:	d527      	bpl.n	800c864 <__ssputs_r+0x8c>
 800c814:	4629      	mov	r1, r5
 800c816:	f7ff fe4d 	bl	800c4b4 <_malloc_r>
 800c81a:	4606      	mov	r6, r0
 800c81c:	b360      	cbz	r0, 800c878 <__ssputs_r+0xa0>
 800c81e:	464a      	mov	r2, r9
 800c820:	6921      	ldr	r1, [r4, #16]
 800c822:	f000 fb1c 	bl	800ce5e <memcpy>
 800c826:	89a3      	ldrh	r3, [r4, #12]
 800c828:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	6126      	str	r6, [r4, #16]
 800c834:	444e      	add	r6, r9
 800c836:	6026      	str	r6, [r4, #0]
 800c838:	463e      	mov	r6, r7
 800c83a:	6165      	str	r5, [r4, #20]
 800c83c:	eba5 0509 	sub.w	r5, r5, r9
 800c840:	60a5      	str	r5, [r4, #8]
 800c842:	42be      	cmp	r6, r7
 800c844:	d900      	bls.n	800c848 <__ssputs_r+0x70>
 800c846:	463e      	mov	r6, r7
 800c848:	4632      	mov	r2, r6
 800c84a:	4641      	mov	r1, r8
 800c84c:	6820      	ldr	r0, [r4, #0]
 800c84e:	f000 fade 	bl	800ce0e <memmove>
 800c852:	2000      	movs	r0, #0
 800c854:	68a3      	ldr	r3, [r4, #8]
 800c856:	1b9b      	subs	r3, r3, r6
 800c858:	60a3      	str	r3, [r4, #8]
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	4433      	add	r3, r6
 800c85e:	6023      	str	r3, [r4, #0]
 800c860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c864:	462a      	mov	r2, r5
 800c866:	f000 faa3 	bl	800cdb0 <_realloc_r>
 800c86a:	4606      	mov	r6, r0
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d1e0      	bne.n	800c832 <__ssputs_r+0x5a>
 800c870:	4650      	mov	r0, sl
 800c872:	6921      	ldr	r1, [r4, #16]
 800c874:	f7ff ff68 	bl	800c748 <_free_r>
 800c878:	230c      	movs	r3, #12
 800c87a:	f8ca 3000 	str.w	r3, [sl]
 800c87e:	89a3      	ldrh	r3, [r4, #12]
 800c880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c888:	81a3      	strh	r3, [r4, #12]
 800c88a:	e7e9      	b.n	800c860 <__ssputs_r+0x88>

0800c88c <_svfiprintf_r>:
 800c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c890:	4698      	mov	r8, r3
 800c892:	898b      	ldrh	r3, [r1, #12]
 800c894:	4607      	mov	r7, r0
 800c896:	061b      	lsls	r3, r3, #24
 800c898:	460d      	mov	r5, r1
 800c89a:	4614      	mov	r4, r2
 800c89c:	b09d      	sub	sp, #116	; 0x74
 800c89e:	d50e      	bpl.n	800c8be <_svfiprintf_r+0x32>
 800c8a0:	690b      	ldr	r3, [r1, #16]
 800c8a2:	b963      	cbnz	r3, 800c8be <_svfiprintf_r+0x32>
 800c8a4:	2140      	movs	r1, #64	; 0x40
 800c8a6:	f7ff fe05 	bl	800c4b4 <_malloc_r>
 800c8aa:	6028      	str	r0, [r5, #0]
 800c8ac:	6128      	str	r0, [r5, #16]
 800c8ae:	b920      	cbnz	r0, 800c8ba <_svfiprintf_r+0x2e>
 800c8b0:	230c      	movs	r3, #12
 800c8b2:	603b      	str	r3, [r7, #0]
 800c8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8b8:	e0d0      	b.n	800ca5c <_svfiprintf_r+0x1d0>
 800c8ba:	2340      	movs	r3, #64	; 0x40
 800c8bc:	616b      	str	r3, [r5, #20]
 800c8be:	2300      	movs	r3, #0
 800c8c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8c2:	2320      	movs	r3, #32
 800c8c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8c8:	2330      	movs	r3, #48	; 0x30
 800c8ca:	f04f 0901 	mov.w	r9, #1
 800c8ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ca74 <_svfiprintf_r+0x1e8>
 800c8d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8da:	4623      	mov	r3, r4
 800c8dc:	469a      	mov	sl, r3
 800c8de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8e2:	b10a      	cbz	r2, 800c8e8 <_svfiprintf_r+0x5c>
 800c8e4:	2a25      	cmp	r2, #37	; 0x25
 800c8e6:	d1f9      	bne.n	800c8dc <_svfiprintf_r+0x50>
 800c8e8:	ebba 0b04 	subs.w	fp, sl, r4
 800c8ec:	d00b      	beq.n	800c906 <_svfiprintf_r+0x7a>
 800c8ee:	465b      	mov	r3, fp
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	f7ff ff6f 	bl	800c7d8 <__ssputs_r>
 800c8fa:	3001      	adds	r0, #1
 800c8fc:	f000 80a9 	beq.w	800ca52 <_svfiprintf_r+0x1c6>
 800c900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c902:	445a      	add	r2, fp
 800c904:	9209      	str	r2, [sp, #36]	; 0x24
 800c906:	f89a 3000 	ldrb.w	r3, [sl]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f000 80a1 	beq.w	800ca52 <_svfiprintf_r+0x1c6>
 800c910:	2300      	movs	r3, #0
 800c912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c91a:	f10a 0a01 	add.w	sl, sl, #1
 800c91e:	9304      	str	r3, [sp, #16]
 800c920:	9307      	str	r3, [sp, #28]
 800c922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c926:	931a      	str	r3, [sp, #104]	; 0x68
 800c928:	4654      	mov	r4, sl
 800c92a:	2205      	movs	r2, #5
 800c92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c930:	4850      	ldr	r0, [pc, #320]	; (800ca74 <_svfiprintf_r+0x1e8>)
 800c932:	f000 fa86 	bl	800ce42 <memchr>
 800c936:	9a04      	ldr	r2, [sp, #16]
 800c938:	b9d8      	cbnz	r0, 800c972 <_svfiprintf_r+0xe6>
 800c93a:	06d0      	lsls	r0, r2, #27
 800c93c:	bf44      	itt	mi
 800c93e:	2320      	movmi	r3, #32
 800c940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c944:	0711      	lsls	r1, r2, #28
 800c946:	bf44      	itt	mi
 800c948:	232b      	movmi	r3, #43	; 0x2b
 800c94a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c94e:	f89a 3000 	ldrb.w	r3, [sl]
 800c952:	2b2a      	cmp	r3, #42	; 0x2a
 800c954:	d015      	beq.n	800c982 <_svfiprintf_r+0xf6>
 800c956:	4654      	mov	r4, sl
 800c958:	2000      	movs	r0, #0
 800c95a:	f04f 0c0a 	mov.w	ip, #10
 800c95e:	9a07      	ldr	r2, [sp, #28]
 800c960:	4621      	mov	r1, r4
 800c962:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c966:	3b30      	subs	r3, #48	; 0x30
 800c968:	2b09      	cmp	r3, #9
 800c96a:	d94d      	bls.n	800ca08 <_svfiprintf_r+0x17c>
 800c96c:	b1b0      	cbz	r0, 800c99c <_svfiprintf_r+0x110>
 800c96e:	9207      	str	r2, [sp, #28]
 800c970:	e014      	b.n	800c99c <_svfiprintf_r+0x110>
 800c972:	eba0 0308 	sub.w	r3, r0, r8
 800c976:	fa09 f303 	lsl.w	r3, r9, r3
 800c97a:	4313      	orrs	r3, r2
 800c97c:	46a2      	mov	sl, r4
 800c97e:	9304      	str	r3, [sp, #16]
 800c980:	e7d2      	b.n	800c928 <_svfiprintf_r+0x9c>
 800c982:	9b03      	ldr	r3, [sp, #12]
 800c984:	1d19      	adds	r1, r3, #4
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	9103      	str	r1, [sp, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	bfbb      	ittet	lt
 800c98e:	425b      	neglt	r3, r3
 800c990:	f042 0202 	orrlt.w	r2, r2, #2
 800c994:	9307      	strge	r3, [sp, #28]
 800c996:	9307      	strlt	r3, [sp, #28]
 800c998:	bfb8      	it	lt
 800c99a:	9204      	strlt	r2, [sp, #16]
 800c99c:	7823      	ldrb	r3, [r4, #0]
 800c99e:	2b2e      	cmp	r3, #46	; 0x2e
 800c9a0:	d10c      	bne.n	800c9bc <_svfiprintf_r+0x130>
 800c9a2:	7863      	ldrb	r3, [r4, #1]
 800c9a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9a6:	d134      	bne.n	800ca12 <_svfiprintf_r+0x186>
 800c9a8:	9b03      	ldr	r3, [sp, #12]
 800c9aa:	3402      	adds	r4, #2
 800c9ac:	1d1a      	adds	r2, r3, #4
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	9203      	str	r2, [sp, #12]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	bfb8      	it	lt
 800c9b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c9ba:	9305      	str	r3, [sp, #20]
 800c9bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ca78 <_svfiprintf_r+0x1ec>
 800c9c0:	2203      	movs	r2, #3
 800c9c2:	4650      	mov	r0, sl
 800c9c4:	7821      	ldrb	r1, [r4, #0]
 800c9c6:	f000 fa3c 	bl	800ce42 <memchr>
 800c9ca:	b138      	cbz	r0, 800c9dc <_svfiprintf_r+0x150>
 800c9cc:	2240      	movs	r2, #64	; 0x40
 800c9ce:	9b04      	ldr	r3, [sp, #16]
 800c9d0:	eba0 000a 	sub.w	r0, r0, sl
 800c9d4:	4082      	lsls	r2, r0
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	3401      	adds	r4, #1
 800c9da:	9304      	str	r3, [sp, #16]
 800c9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e0:	2206      	movs	r2, #6
 800c9e2:	4826      	ldr	r0, [pc, #152]	; (800ca7c <_svfiprintf_r+0x1f0>)
 800c9e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9e8:	f000 fa2b 	bl	800ce42 <memchr>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d038      	beq.n	800ca62 <_svfiprintf_r+0x1d6>
 800c9f0:	4b23      	ldr	r3, [pc, #140]	; (800ca80 <_svfiprintf_r+0x1f4>)
 800c9f2:	bb1b      	cbnz	r3, 800ca3c <_svfiprintf_r+0x1b0>
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	3307      	adds	r3, #7
 800c9f8:	f023 0307 	bic.w	r3, r3, #7
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	9303      	str	r3, [sp, #12]
 800ca00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca02:	4433      	add	r3, r6
 800ca04:	9309      	str	r3, [sp, #36]	; 0x24
 800ca06:	e768      	b.n	800c8da <_svfiprintf_r+0x4e>
 800ca08:	460c      	mov	r4, r1
 800ca0a:	2001      	movs	r0, #1
 800ca0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca10:	e7a6      	b.n	800c960 <_svfiprintf_r+0xd4>
 800ca12:	2300      	movs	r3, #0
 800ca14:	f04f 0c0a 	mov.w	ip, #10
 800ca18:	4619      	mov	r1, r3
 800ca1a:	3401      	adds	r4, #1
 800ca1c:	9305      	str	r3, [sp, #20]
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca24:	3a30      	subs	r2, #48	; 0x30
 800ca26:	2a09      	cmp	r2, #9
 800ca28:	d903      	bls.n	800ca32 <_svfiprintf_r+0x1a6>
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d0c6      	beq.n	800c9bc <_svfiprintf_r+0x130>
 800ca2e:	9105      	str	r1, [sp, #20]
 800ca30:	e7c4      	b.n	800c9bc <_svfiprintf_r+0x130>
 800ca32:	4604      	mov	r4, r0
 800ca34:	2301      	movs	r3, #1
 800ca36:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca3a:	e7f0      	b.n	800ca1e <_svfiprintf_r+0x192>
 800ca3c:	ab03      	add	r3, sp, #12
 800ca3e:	9300      	str	r3, [sp, #0]
 800ca40:	462a      	mov	r2, r5
 800ca42:	4638      	mov	r0, r7
 800ca44:	4b0f      	ldr	r3, [pc, #60]	; (800ca84 <_svfiprintf_r+0x1f8>)
 800ca46:	a904      	add	r1, sp, #16
 800ca48:	f3af 8000 	nop.w
 800ca4c:	1c42      	adds	r2, r0, #1
 800ca4e:	4606      	mov	r6, r0
 800ca50:	d1d6      	bne.n	800ca00 <_svfiprintf_r+0x174>
 800ca52:	89ab      	ldrh	r3, [r5, #12]
 800ca54:	065b      	lsls	r3, r3, #25
 800ca56:	f53f af2d 	bmi.w	800c8b4 <_svfiprintf_r+0x28>
 800ca5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca5c:	b01d      	add	sp, #116	; 0x74
 800ca5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca62:	ab03      	add	r3, sp, #12
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	462a      	mov	r2, r5
 800ca68:	4638      	mov	r0, r7
 800ca6a:	4b06      	ldr	r3, [pc, #24]	; (800ca84 <_svfiprintf_r+0x1f8>)
 800ca6c:	a904      	add	r1, sp, #16
 800ca6e:	f000 f87d 	bl	800cb6c <_printf_i>
 800ca72:	e7eb      	b.n	800ca4c <_svfiprintf_r+0x1c0>
 800ca74:	0800deab 	.word	0x0800deab
 800ca78:	0800deb1 	.word	0x0800deb1
 800ca7c:	0800deb5 	.word	0x0800deb5
 800ca80:	00000000 	.word	0x00000000
 800ca84:	0800c7d9 	.word	0x0800c7d9

0800ca88 <_printf_common>:
 800ca88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca8c:	4616      	mov	r6, r2
 800ca8e:	4699      	mov	r9, r3
 800ca90:	688a      	ldr	r2, [r1, #8]
 800ca92:	690b      	ldr	r3, [r1, #16]
 800ca94:	4607      	mov	r7, r0
 800ca96:	4293      	cmp	r3, r2
 800ca98:	bfb8      	it	lt
 800ca9a:	4613      	movlt	r3, r2
 800ca9c:	6033      	str	r3, [r6, #0]
 800ca9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800caa2:	460c      	mov	r4, r1
 800caa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800caa8:	b10a      	cbz	r2, 800caae <_printf_common+0x26>
 800caaa:	3301      	adds	r3, #1
 800caac:	6033      	str	r3, [r6, #0]
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	0699      	lsls	r1, r3, #26
 800cab2:	bf42      	ittt	mi
 800cab4:	6833      	ldrmi	r3, [r6, #0]
 800cab6:	3302      	addmi	r3, #2
 800cab8:	6033      	strmi	r3, [r6, #0]
 800caba:	6825      	ldr	r5, [r4, #0]
 800cabc:	f015 0506 	ands.w	r5, r5, #6
 800cac0:	d106      	bne.n	800cad0 <_printf_common+0x48>
 800cac2:	f104 0a19 	add.w	sl, r4, #25
 800cac6:	68e3      	ldr	r3, [r4, #12]
 800cac8:	6832      	ldr	r2, [r6, #0]
 800caca:	1a9b      	subs	r3, r3, r2
 800cacc:	42ab      	cmp	r3, r5
 800cace:	dc2b      	bgt.n	800cb28 <_printf_common+0xa0>
 800cad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cad4:	1e13      	subs	r3, r2, #0
 800cad6:	6822      	ldr	r2, [r4, #0]
 800cad8:	bf18      	it	ne
 800cada:	2301      	movne	r3, #1
 800cadc:	0692      	lsls	r2, r2, #26
 800cade:	d430      	bmi.n	800cb42 <_printf_common+0xba>
 800cae0:	4649      	mov	r1, r9
 800cae2:	4638      	mov	r0, r7
 800cae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cae8:	47c0      	blx	r8
 800caea:	3001      	adds	r0, #1
 800caec:	d023      	beq.n	800cb36 <_printf_common+0xae>
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	6922      	ldr	r2, [r4, #16]
 800caf2:	f003 0306 	and.w	r3, r3, #6
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	bf14      	ite	ne
 800cafa:	2500      	movne	r5, #0
 800cafc:	6833      	ldreq	r3, [r6, #0]
 800cafe:	f04f 0600 	mov.w	r6, #0
 800cb02:	bf08      	it	eq
 800cb04:	68e5      	ldreq	r5, [r4, #12]
 800cb06:	f104 041a 	add.w	r4, r4, #26
 800cb0a:	bf08      	it	eq
 800cb0c:	1aed      	subeq	r5, r5, r3
 800cb0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800cb12:	bf08      	it	eq
 800cb14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	bfc4      	itt	gt
 800cb1c:	1a9b      	subgt	r3, r3, r2
 800cb1e:	18ed      	addgt	r5, r5, r3
 800cb20:	42b5      	cmp	r5, r6
 800cb22:	d11a      	bne.n	800cb5a <_printf_common+0xd2>
 800cb24:	2000      	movs	r0, #0
 800cb26:	e008      	b.n	800cb3a <_printf_common+0xb2>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	4652      	mov	r2, sl
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4638      	mov	r0, r7
 800cb30:	47c0      	blx	r8
 800cb32:	3001      	adds	r0, #1
 800cb34:	d103      	bne.n	800cb3e <_printf_common+0xb6>
 800cb36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb3e:	3501      	adds	r5, #1
 800cb40:	e7c1      	b.n	800cac6 <_printf_common+0x3e>
 800cb42:	2030      	movs	r0, #48	; 0x30
 800cb44:	18e1      	adds	r1, r4, r3
 800cb46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb4a:	1c5a      	adds	r2, r3, #1
 800cb4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb50:	4422      	add	r2, r4
 800cb52:	3302      	adds	r3, #2
 800cb54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb58:	e7c2      	b.n	800cae0 <_printf_common+0x58>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	4622      	mov	r2, r4
 800cb5e:	4649      	mov	r1, r9
 800cb60:	4638      	mov	r0, r7
 800cb62:	47c0      	blx	r8
 800cb64:	3001      	adds	r0, #1
 800cb66:	d0e6      	beq.n	800cb36 <_printf_common+0xae>
 800cb68:	3601      	adds	r6, #1
 800cb6a:	e7d9      	b.n	800cb20 <_printf_common+0x98>

0800cb6c <_printf_i>:
 800cb6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb70:	7e0f      	ldrb	r7, [r1, #24]
 800cb72:	4691      	mov	r9, r2
 800cb74:	2f78      	cmp	r7, #120	; 0x78
 800cb76:	4680      	mov	r8, r0
 800cb78:	460c      	mov	r4, r1
 800cb7a:	469a      	mov	sl, r3
 800cb7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb82:	d807      	bhi.n	800cb94 <_printf_i+0x28>
 800cb84:	2f62      	cmp	r7, #98	; 0x62
 800cb86:	d80a      	bhi.n	800cb9e <_printf_i+0x32>
 800cb88:	2f00      	cmp	r7, #0
 800cb8a:	f000 80d5 	beq.w	800cd38 <_printf_i+0x1cc>
 800cb8e:	2f58      	cmp	r7, #88	; 0x58
 800cb90:	f000 80c1 	beq.w	800cd16 <_printf_i+0x1aa>
 800cb94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb9c:	e03a      	b.n	800cc14 <_printf_i+0xa8>
 800cb9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cba2:	2b15      	cmp	r3, #21
 800cba4:	d8f6      	bhi.n	800cb94 <_printf_i+0x28>
 800cba6:	a101      	add	r1, pc, #4	; (adr r1, 800cbac <_printf_i+0x40>)
 800cba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cbac:	0800cc05 	.word	0x0800cc05
 800cbb0:	0800cc19 	.word	0x0800cc19
 800cbb4:	0800cb95 	.word	0x0800cb95
 800cbb8:	0800cb95 	.word	0x0800cb95
 800cbbc:	0800cb95 	.word	0x0800cb95
 800cbc0:	0800cb95 	.word	0x0800cb95
 800cbc4:	0800cc19 	.word	0x0800cc19
 800cbc8:	0800cb95 	.word	0x0800cb95
 800cbcc:	0800cb95 	.word	0x0800cb95
 800cbd0:	0800cb95 	.word	0x0800cb95
 800cbd4:	0800cb95 	.word	0x0800cb95
 800cbd8:	0800cd1f 	.word	0x0800cd1f
 800cbdc:	0800cc45 	.word	0x0800cc45
 800cbe0:	0800ccd9 	.word	0x0800ccd9
 800cbe4:	0800cb95 	.word	0x0800cb95
 800cbe8:	0800cb95 	.word	0x0800cb95
 800cbec:	0800cd41 	.word	0x0800cd41
 800cbf0:	0800cb95 	.word	0x0800cb95
 800cbf4:	0800cc45 	.word	0x0800cc45
 800cbf8:	0800cb95 	.word	0x0800cb95
 800cbfc:	0800cb95 	.word	0x0800cb95
 800cc00:	0800cce1 	.word	0x0800cce1
 800cc04:	682b      	ldr	r3, [r5, #0]
 800cc06:	1d1a      	adds	r2, r3, #4
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	602a      	str	r2, [r5, #0]
 800cc0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc14:	2301      	movs	r3, #1
 800cc16:	e0a0      	b.n	800cd5a <_printf_i+0x1ee>
 800cc18:	6820      	ldr	r0, [r4, #0]
 800cc1a:	682b      	ldr	r3, [r5, #0]
 800cc1c:	0607      	lsls	r7, r0, #24
 800cc1e:	f103 0104 	add.w	r1, r3, #4
 800cc22:	6029      	str	r1, [r5, #0]
 800cc24:	d501      	bpl.n	800cc2a <_printf_i+0xbe>
 800cc26:	681e      	ldr	r6, [r3, #0]
 800cc28:	e003      	b.n	800cc32 <_printf_i+0xc6>
 800cc2a:	0646      	lsls	r6, r0, #25
 800cc2c:	d5fb      	bpl.n	800cc26 <_printf_i+0xba>
 800cc2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cc32:	2e00      	cmp	r6, #0
 800cc34:	da03      	bge.n	800cc3e <_printf_i+0xd2>
 800cc36:	232d      	movs	r3, #45	; 0x2d
 800cc38:	4276      	negs	r6, r6
 800cc3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc3e:	230a      	movs	r3, #10
 800cc40:	4859      	ldr	r0, [pc, #356]	; (800cda8 <_printf_i+0x23c>)
 800cc42:	e012      	b.n	800cc6a <_printf_i+0xfe>
 800cc44:	682b      	ldr	r3, [r5, #0]
 800cc46:	6820      	ldr	r0, [r4, #0]
 800cc48:	1d19      	adds	r1, r3, #4
 800cc4a:	6029      	str	r1, [r5, #0]
 800cc4c:	0605      	lsls	r5, r0, #24
 800cc4e:	d501      	bpl.n	800cc54 <_printf_i+0xe8>
 800cc50:	681e      	ldr	r6, [r3, #0]
 800cc52:	e002      	b.n	800cc5a <_printf_i+0xee>
 800cc54:	0641      	lsls	r1, r0, #25
 800cc56:	d5fb      	bpl.n	800cc50 <_printf_i+0xe4>
 800cc58:	881e      	ldrh	r6, [r3, #0]
 800cc5a:	2f6f      	cmp	r7, #111	; 0x6f
 800cc5c:	bf0c      	ite	eq
 800cc5e:	2308      	moveq	r3, #8
 800cc60:	230a      	movne	r3, #10
 800cc62:	4851      	ldr	r0, [pc, #324]	; (800cda8 <_printf_i+0x23c>)
 800cc64:	2100      	movs	r1, #0
 800cc66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc6a:	6865      	ldr	r5, [r4, #4]
 800cc6c:	2d00      	cmp	r5, #0
 800cc6e:	bfa8      	it	ge
 800cc70:	6821      	ldrge	r1, [r4, #0]
 800cc72:	60a5      	str	r5, [r4, #8]
 800cc74:	bfa4      	itt	ge
 800cc76:	f021 0104 	bicge.w	r1, r1, #4
 800cc7a:	6021      	strge	r1, [r4, #0]
 800cc7c:	b90e      	cbnz	r6, 800cc82 <_printf_i+0x116>
 800cc7e:	2d00      	cmp	r5, #0
 800cc80:	d04b      	beq.n	800cd1a <_printf_i+0x1ae>
 800cc82:	4615      	mov	r5, r2
 800cc84:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc88:	fb03 6711 	mls	r7, r3, r1, r6
 800cc8c:	5dc7      	ldrb	r7, [r0, r7]
 800cc8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc92:	4637      	mov	r7, r6
 800cc94:	42bb      	cmp	r3, r7
 800cc96:	460e      	mov	r6, r1
 800cc98:	d9f4      	bls.n	800cc84 <_printf_i+0x118>
 800cc9a:	2b08      	cmp	r3, #8
 800cc9c:	d10b      	bne.n	800ccb6 <_printf_i+0x14a>
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	07de      	lsls	r6, r3, #31
 800cca2:	d508      	bpl.n	800ccb6 <_printf_i+0x14a>
 800cca4:	6923      	ldr	r3, [r4, #16]
 800cca6:	6861      	ldr	r1, [r4, #4]
 800cca8:	4299      	cmp	r1, r3
 800ccaa:	bfde      	ittt	le
 800ccac:	2330      	movle	r3, #48	; 0x30
 800ccae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ccb2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ccb6:	1b52      	subs	r2, r2, r5
 800ccb8:	6122      	str	r2, [r4, #16]
 800ccba:	464b      	mov	r3, r9
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	4640      	mov	r0, r8
 800ccc0:	f8cd a000 	str.w	sl, [sp]
 800ccc4:	aa03      	add	r2, sp, #12
 800ccc6:	f7ff fedf 	bl	800ca88 <_printf_common>
 800ccca:	3001      	adds	r0, #1
 800cccc:	d14a      	bne.n	800cd64 <_printf_i+0x1f8>
 800ccce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccd2:	b004      	add	sp, #16
 800ccd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd8:	6823      	ldr	r3, [r4, #0]
 800ccda:	f043 0320 	orr.w	r3, r3, #32
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	2778      	movs	r7, #120	; 0x78
 800cce2:	4832      	ldr	r0, [pc, #200]	; (800cdac <_printf_i+0x240>)
 800cce4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	6829      	ldr	r1, [r5, #0]
 800ccec:	061f      	lsls	r7, r3, #24
 800ccee:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccf2:	d402      	bmi.n	800ccfa <_printf_i+0x18e>
 800ccf4:	065f      	lsls	r7, r3, #25
 800ccf6:	bf48      	it	mi
 800ccf8:	b2b6      	uxthmi	r6, r6
 800ccfa:	07df      	lsls	r7, r3, #31
 800ccfc:	bf48      	it	mi
 800ccfe:	f043 0320 	orrmi.w	r3, r3, #32
 800cd02:	6029      	str	r1, [r5, #0]
 800cd04:	bf48      	it	mi
 800cd06:	6023      	strmi	r3, [r4, #0]
 800cd08:	b91e      	cbnz	r6, 800cd12 <_printf_i+0x1a6>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	f023 0320 	bic.w	r3, r3, #32
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	2310      	movs	r3, #16
 800cd14:	e7a6      	b.n	800cc64 <_printf_i+0xf8>
 800cd16:	4824      	ldr	r0, [pc, #144]	; (800cda8 <_printf_i+0x23c>)
 800cd18:	e7e4      	b.n	800cce4 <_printf_i+0x178>
 800cd1a:	4615      	mov	r5, r2
 800cd1c:	e7bd      	b.n	800cc9a <_printf_i+0x12e>
 800cd1e:	682b      	ldr	r3, [r5, #0]
 800cd20:	6826      	ldr	r6, [r4, #0]
 800cd22:	1d18      	adds	r0, r3, #4
 800cd24:	6961      	ldr	r1, [r4, #20]
 800cd26:	6028      	str	r0, [r5, #0]
 800cd28:	0635      	lsls	r5, r6, #24
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	d501      	bpl.n	800cd32 <_printf_i+0x1c6>
 800cd2e:	6019      	str	r1, [r3, #0]
 800cd30:	e002      	b.n	800cd38 <_printf_i+0x1cc>
 800cd32:	0670      	lsls	r0, r6, #25
 800cd34:	d5fb      	bpl.n	800cd2e <_printf_i+0x1c2>
 800cd36:	8019      	strh	r1, [r3, #0]
 800cd38:	2300      	movs	r3, #0
 800cd3a:	4615      	mov	r5, r2
 800cd3c:	6123      	str	r3, [r4, #16]
 800cd3e:	e7bc      	b.n	800ccba <_printf_i+0x14e>
 800cd40:	682b      	ldr	r3, [r5, #0]
 800cd42:	2100      	movs	r1, #0
 800cd44:	1d1a      	adds	r2, r3, #4
 800cd46:	602a      	str	r2, [r5, #0]
 800cd48:	681d      	ldr	r5, [r3, #0]
 800cd4a:	6862      	ldr	r2, [r4, #4]
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	f000 f878 	bl	800ce42 <memchr>
 800cd52:	b108      	cbz	r0, 800cd58 <_printf_i+0x1ec>
 800cd54:	1b40      	subs	r0, r0, r5
 800cd56:	6060      	str	r0, [r4, #4]
 800cd58:	6863      	ldr	r3, [r4, #4]
 800cd5a:	6123      	str	r3, [r4, #16]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd62:	e7aa      	b.n	800ccba <_printf_i+0x14e>
 800cd64:	462a      	mov	r2, r5
 800cd66:	4649      	mov	r1, r9
 800cd68:	4640      	mov	r0, r8
 800cd6a:	6923      	ldr	r3, [r4, #16]
 800cd6c:	47d0      	blx	sl
 800cd6e:	3001      	adds	r0, #1
 800cd70:	d0ad      	beq.n	800ccce <_printf_i+0x162>
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	079b      	lsls	r3, r3, #30
 800cd76:	d413      	bmi.n	800cda0 <_printf_i+0x234>
 800cd78:	68e0      	ldr	r0, [r4, #12]
 800cd7a:	9b03      	ldr	r3, [sp, #12]
 800cd7c:	4298      	cmp	r0, r3
 800cd7e:	bfb8      	it	lt
 800cd80:	4618      	movlt	r0, r3
 800cd82:	e7a6      	b.n	800ccd2 <_printf_i+0x166>
 800cd84:	2301      	movs	r3, #1
 800cd86:	4632      	mov	r2, r6
 800cd88:	4649      	mov	r1, r9
 800cd8a:	4640      	mov	r0, r8
 800cd8c:	47d0      	blx	sl
 800cd8e:	3001      	adds	r0, #1
 800cd90:	d09d      	beq.n	800ccce <_printf_i+0x162>
 800cd92:	3501      	adds	r5, #1
 800cd94:	68e3      	ldr	r3, [r4, #12]
 800cd96:	9903      	ldr	r1, [sp, #12]
 800cd98:	1a5b      	subs	r3, r3, r1
 800cd9a:	42ab      	cmp	r3, r5
 800cd9c:	dcf2      	bgt.n	800cd84 <_printf_i+0x218>
 800cd9e:	e7eb      	b.n	800cd78 <_printf_i+0x20c>
 800cda0:	2500      	movs	r5, #0
 800cda2:	f104 0619 	add.w	r6, r4, #25
 800cda6:	e7f5      	b.n	800cd94 <_printf_i+0x228>
 800cda8:	0800debc 	.word	0x0800debc
 800cdac:	0800decd 	.word	0x0800decd

0800cdb0 <_realloc_r>:
 800cdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb4:	4680      	mov	r8, r0
 800cdb6:	4614      	mov	r4, r2
 800cdb8:	460e      	mov	r6, r1
 800cdba:	b921      	cbnz	r1, 800cdc6 <_realloc_r+0x16>
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc2:	f7ff bb77 	b.w	800c4b4 <_malloc_r>
 800cdc6:	b92a      	cbnz	r2, 800cdd4 <_realloc_r+0x24>
 800cdc8:	f7ff fcbe 	bl	800c748 <_free_r>
 800cdcc:	4625      	mov	r5, r4
 800cdce:	4628      	mov	r0, r5
 800cdd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd4:	f000 f851 	bl	800ce7a <_malloc_usable_size_r>
 800cdd8:	4284      	cmp	r4, r0
 800cdda:	4607      	mov	r7, r0
 800cddc:	d802      	bhi.n	800cde4 <_realloc_r+0x34>
 800cdde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cde2:	d812      	bhi.n	800ce0a <_realloc_r+0x5a>
 800cde4:	4621      	mov	r1, r4
 800cde6:	4640      	mov	r0, r8
 800cde8:	f7ff fb64 	bl	800c4b4 <_malloc_r>
 800cdec:	4605      	mov	r5, r0
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d0ed      	beq.n	800cdce <_realloc_r+0x1e>
 800cdf2:	42bc      	cmp	r4, r7
 800cdf4:	4622      	mov	r2, r4
 800cdf6:	4631      	mov	r1, r6
 800cdf8:	bf28      	it	cs
 800cdfa:	463a      	movcs	r2, r7
 800cdfc:	f000 f82f 	bl	800ce5e <memcpy>
 800ce00:	4631      	mov	r1, r6
 800ce02:	4640      	mov	r0, r8
 800ce04:	f7ff fca0 	bl	800c748 <_free_r>
 800ce08:	e7e1      	b.n	800cdce <_realloc_r+0x1e>
 800ce0a:	4635      	mov	r5, r6
 800ce0c:	e7df      	b.n	800cdce <_realloc_r+0x1e>

0800ce0e <memmove>:
 800ce0e:	4288      	cmp	r0, r1
 800ce10:	b510      	push	{r4, lr}
 800ce12:	eb01 0402 	add.w	r4, r1, r2
 800ce16:	d902      	bls.n	800ce1e <memmove+0x10>
 800ce18:	4284      	cmp	r4, r0
 800ce1a:	4623      	mov	r3, r4
 800ce1c:	d807      	bhi.n	800ce2e <memmove+0x20>
 800ce1e:	1e43      	subs	r3, r0, #1
 800ce20:	42a1      	cmp	r1, r4
 800ce22:	d008      	beq.n	800ce36 <memmove+0x28>
 800ce24:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce28:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce2c:	e7f8      	b.n	800ce20 <memmove+0x12>
 800ce2e:	4601      	mov	r1, r0
 800ce30:	4402      	add	r2, r0
 800ce32:	428a      	cmp	r2, r1
 800ce34:	d100      	bne.n	800ce38 <memmove+0x2a>
 800ce36:	bd10      	pop	{r4, pc}
 800ce38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce3c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce40:	e7f7      	b.n	800ce32 <memmove+0x24>

0800ce42 <memchr>:
 800ce42:	4603      	mov	r3, r0
 800ce44:	b510      	push	{r4, lr}
 800ce46:	b2c9      	uxtb	r1, r1
 800ce48:	4402      	add	r2, r0
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	d101      	bne.n	800ce54 <memchr+0x12>
 800ce50:	2000      	movs	r0, #0
 800ce52:	e003      	b.n	800ce5c <memchr+0x1a>
 800ce54:	7804      	ldrb	r4, [r0, #0]
 800ce56:	3301      	adds	r3, #1
 800ce58:	428c      	cmp	r4, r1
 800ce5a:	d1f6      	bne.n	800ce4a <memchr+0x8>
 800ce5c:	bd10      	pop	{r4, pc}

0800ce5e <memcpy>:
 800ce5e:	440a      	add	r2, r1
 800ce60:	4291      	cmp	r1, r2
 800ce62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce66:	d100      	bne.n	800ce6a <memcpy+0xc>
 800ce68:	4770      	bx	lr
 800ce6a:	b510      	push	{r4, lr}
 800ce6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce70:	4291      	cmp	r1, r2
 800ce72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce76:	d1f9      	bne.n	800ce6c <memcpy+0xe>
 800ce78:	bd10      	pop	{r4, pc}

0800ce7a <_malloc_usable_size_r>:
 800ce7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce7e:	1f18      	subs	r0, r3, #4
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	bfbc      	itt	lt
 800ce84:	580b      	ldrlt	r3, [r1, r0]
 800ce86:	18c0      	addlt	r0, r0, r3
 800ce88:	4770      	bx	lr
	...

0800ce8c <_init>:
 800ce8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8e:	bf00      	nop
 800ce90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce92:	bc08      	pop	{r3}
 800ce94:	469e      	mov	lr, r3
 800ce96:	4770      	bx	lr

0800ce98 <_fini>:
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9a:	bf00      	nop
 800ce9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce9e:	bc08      	pop	{r3}
 800cea0:	469e      	mov	lr, r3
 800cea2:	4770      	bx	lr
