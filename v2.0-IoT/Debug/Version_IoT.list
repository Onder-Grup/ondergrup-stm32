
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b804  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e50  0800b9e8  0800b9e8  0001b9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c838  0800c838  000209a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c838  0800c838  000209a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c838  0800c838  000209a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c838  0800c838  0001c838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c83c  0800c83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a0  20000000  0800c840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  200009a0  0800d1e0  000209a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e1c  0800d1e0  00020e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209c9  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129ce  00000000  00000000  00020a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024eb  00000000  00000000  000333da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  000358c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db3  00000000  00000000  00036a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025fb  00000000  00000000  000377c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001786e  00000000  00000000  00039dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fadb  00000000  00000000  0005162c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d6c  00000000  00000000  000f1108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f5e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200009a0 	.word	0x200009a0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800b9d0 	.word	0x0800b9d0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200009a4 	.word	0x200009a4
 8000220:	0800b9d0 	.word	0x0800b9d0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f023 030f 	bic.w	r3, r3, #15
 8000244:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	011b      	lsls	r3, r3, #4
 800024a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	f043 030c 	orr.w	r3, r3, #12
 8000252:	b2db      	uxtb	r3, r3
 8000254:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	7b7b      	ldrb	r3, [r7, #13]
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	f043 030c 	orr.w	r3, r3, #12
 8000266:	b2db      	uxtb	r3, r3
 8000268:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800026a:	7b3b      	ldrb	r3, [r7, #12]
 800026c:	f043 0308 	orr.w	r3, r3, #8
 8000270:	b2db      	uxtb	r3, r3
 8000272:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000274:	bf00      	nop
 8000276:	4825      	ldr	r0, [pc, #148]	; (800030c <lcd_send_cmd+0xd8>)
 8000278:	f008 ffa7 	bl	80091ca <HAL_I2C_GetError>
 800027c:	4603      	mov	r3, r0
 800027e:	2b04      	cmp	r3, #4
 8000280:	d0f9      	beq.n	8000276 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000282:	bf00      	nop
 8000284:	4821      	ldr	r0, [pc, #132]	; (800030c <lcd_send_cmd+0xd8>)
 8000286:	f008 ff93 	bl	80091b0 <HAL_I2C_GetState>
 800028a:	4603      	mov	r3, r0
 800028c:	2b20      	cmp	r3, #32
 800028e:	d1f9      	bne.n	8000284 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <lcd_send_cmd+0xdc>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d116      	bne.n	80002c6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
 800029c:	e00f      	b.n	80002be <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	3310      	adds	r3, #16
 80002a2:	443b      	add	r3, r7
 80002a4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	f022 0208 	bic.w	r2, r2, #8
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	3310      	adds	r3, #16
 80002b2:	443b      	add	r3, r7
 80002b4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	3301      	adds	r3, #1
 80002bc:	73fb      	strb	r3, [r7, #15]
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d9ec      	bls.n	800029e <lcd_send_cmd+0x6a>
 80002c4:	e015      	b.n	80002f2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	73bb      	strb	r3, [r7, #14]
 80002ca:	e00f      	b.n	80002ec <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80002cc:	7bbb      	ldrb	r3, [r7, #14]
 80002ce:	3310      	adds	r3, #16
 80002d0:	443b      	add	r3, r7
 80002d2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002d6:	7bbb      	ldrb	r3, [r7, #14]
 80002d8:	f042 0208 	orr.w	r2, r2, #8
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	3310      	adds	r3, #16
 80002e0:	443b      	add	r3, r7
 80002e2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002e6:	7bbb      	ldrb	r3, [r7, #14]
 80002e8:	3301      	adds	r3, #1
 80002ea:	73bb      	strb	r3, [r7, #14]
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d9ec      	bls.n	80002cc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002f2:	f107 0208 	add.w	r2, r7, #8
 80002f6:	2364      	movs	r3, #100	; 0x64
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2304      	movs	r3, #4
 80002fc:	214e      	movs	r1, #78	; 0x4e
 80002fe:	4803      	ldr	r0, [pc, #12]	; (800030c <lcd_send_cmd+0xd8>)
 8000300:	f008 faf6 	bl	80088f0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000be8 	.word	0x20000be8
 8000310:	200009bc 	.word	0x200009bc

08000314 <lcd_send_data>:

void lcd_send_data (char data) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af02      	add	r7, sp, #8
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f023 030f 	bic.w	r3, r3, #15
 8000324:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800032c:	7b7b      	ldrb	r3, [r7, #13]
 800032e:	f043 030d 	orr.w	r3, r3, #13
 8000332:	b2db      	uxtb	r3, r3
 8000334:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000336:	7b7b      	ldrb	r3, [r7, #13]
 8000338:	f043 0309 	orr.w	r3, r3, #9
 800033c:	b2db      	uxtb	r3, r3
 800033e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000340:	7b3b      	ldrb	r3, [r7, #12]
 8000342:	f043 030d 	orr.w	r3, r3, #13
 8000346:	b2db      	uxtb	r3, r3
 8000348:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800034a:	7b3b      	ldrb	r3, [r7, #12]
 800034c:	f043 0309 	orr.w	r3, r3, #9
 8000350:	b2db      	uxtb	r3, r3
 8000352:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000354:	bf00      	nop
 8000356:	4825      	ldr	r0, [pc, #148]	; (80003ec <lcd_send_data+0xd8>)
 8000358:	f008 ff37 	bl	80091ca <HAL_I2C_GetError>
 800035c:	4603      	mov	r3, r0
 800035e:	2b04      	cmp	r3, #4
 8000360:	d0f9      	beq.n	8000356 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000362:	bf00      	nop
 8000364:	4821      	ldr	r0, [pc, #132]	; (80003ec <lcd_send_data+0xd8>)
 8000366:	f008 ff23 	bl	80091b0 <HAL_I2C_GetState>
 800036a:	4603      	mov	r3, r0
 800036c:	2b20      	cmp	r3, #32
 800036e:	d1f9      	bne.n	8000364 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <lcd_send_data+0xdc>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d116      	bne.n	80003a6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
 800037c:	e00f      	b.n	800039e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	3310      	adds	r3, #16
 8000382:	443b      	add	r3, r7
 8000384:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	f022 0208 	bic.w	r2, r2, #8
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	3310      	adds	r3, #16
 8000392:	443b      	add	r3, r7
 8000394:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	3301      	adds	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d9ec      	bls.n	800037e <lcd_send_data+0x6a>
 80003a4:	e015      	b.n	80003d2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	73bb      	strb	r3, [r7, #14]
 80003aa:	e00f      	b.n	80003cc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80003ac:	7bbb      	ldrb	r3, [r7, #14]
 80003ae:	3310      	adds	r3, #16
 80003b0:	443b      	add	r3, r7
 80003b2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	f042 0208 	orr.w	r2, r2, #8
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	3310      	adds	r3, #16
 80003c0:	443b      	add	r3, r7
 80003c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003c6:	7bbb      	ldrb	r3, [r7, #14]
 80003c8:	3301      	adds	r3, #1
 80003ca:	73bb      	strb	r3, [r7, #14]
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	2b03      	cmp	r3, #3
 80003d0:	d9ec      	bls.n	80003ac <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003d2:	f107 0208 	add.w	r2, r7, #8
 80003d6:	2364      	movs	r3, #100	; 0x64
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2304      	movs	r3, #4
 80003dc:	214e      	movs	r1, #78	; 0x4e
 80003de:	4803      	ldr	r0, [pc, #12]	; (80003ec <lcd_send_data+0xd8>)
 80003e0:	f008 fa86 	bl	80088f0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000be8 	.word	0x20000be8
 80003f0:	200009bc 	.word	0x200009bc

080003f4 <lcd_send_string>:

void lcd_send_string (char *str) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	while (*str) {
 80003fc:	e006      	b.n	800040c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff84 	bl	8000314 <lcd_send_data>
	while (*str) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f4      	bne.n	80003fe <lcd_send_string+0xa>
	}
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <lcd_init>:

void lcd_init (void) {
 800041e:	b580      	push	{r7, lr}
 8000420:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000422:	2002      	movs	r0, #2
 8000424:	f7ff ff06 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8000428:	2028      	movs	r0, #40	; 0x28
 800042a:	f7ff ff03 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 800042e:	200c      	movs	r0, #12
 8000430:	f7ff ff00 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000434:	2080      	movs	r0, #128	; 0x80
 8000436:	f7ff fefd 	bl	8000234 <lcd_send_cmd>
	lcd_backlight(1);
 800043a:	2001      	movs	r0, #1
 800043c:	f000 f840 	bl	80004c0 <lcd_backlight>
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	460a      	mov	r2, r1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	4613      	mov	r3, r2
 8000452:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d106      	bne.n	8000468 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800045a:	79bb      	ldrb	r3, [r7, #6]
 800045c:	337f      	adds	r3, #127	; 0x7f
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff fee7 	bl	8000234 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000466:	e008      	b.n	800047a <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d105      	bne.n	800047a <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 800046e:	79bb      	ldrb	r3, [r7, #6]
 8000470:	3b41      	subs	r3, #65	; 0x41
 8000472:	b2db      	uxtb	r3, r3
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff fedd 	bl	8000234 <lcd_send_cmd>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	4603      	mov	r3, r0
 800048a:	603a      	str	r2, [r7, #0]
 800048c:	71fb      	strb	r3, [r7, #7]
 800048e:	460b      	mov	r3, r1
 8000490:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000492:	79ba      	ldrb	r2, [r7, #6]
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4611      	mov	r1, r2
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ffd3 	bl	8000444 <lcd_gotoxy>
	lcd_send_string(str);
 800049e:	6838      	ldr	r0, [r7, #0]
 80004a0:	f7ff ffa8 	bl	80003f4 <lcd_send_string>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <lcd_clear>:

void lcd_clear(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f7ff febf 	bl	8000234 <lcd_send_cmd>
    HAL_Delay(2);
 80004b6:	2002      	movs	r0, #2
 80004b8:	f007 fa8e 	bl	80079d8 <HAL_Delay>

}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80004ca:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <lcd_backlight+0x20>)
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f7ff feaf 	bl	8000234 <lcd_send_cmd>
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	200009bc 	.word	0x200009bc

080004e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004e8:	f3bf 8f4f 	dsb	sy
}
 80004ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <__NVIC_SystemReset+0x24>)
 80004f0:	68db      	ldr	r3, [r3, #12]
 80004f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004f6:	4904      	ldr	r1, [pc, #16]	; (8000508 <__NVIC_SystemReset+0x24>)
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <__NVIC_SystemReset+0x28>)
 80004fa:	4313      	orrs	r3, r2
 80004fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004fe:	f3bf 8f4f 	dsb	sy
}
 8000502:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <__NVIC_SystemReset+0x20>
 8000508:	e000ed00 	.word	0xe000ed00
 800050c:	05fa0004 	.word	0x05fa0004

08000510 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f7ff fe83 	bl	8000224 <strlen>
 800051e:	4603      	mov	r3, r0
 8000520:	3301      	adds	r3, #1
 8000522:	4618      	mov	r0, r3
 8000524:	f00b f912 	bl	800b74c <malloc>
 8000528:	4603      	mov	r3, r0
 800052a:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d003      	beq.n	800053a <copyText+0x2a>
        strcpy(result, text);
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	68f8      	ldr	r0, [r7, #12]
 8000536:	f00b fa43 	bl	800b9c0 <strcpy>
    }
    return result;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <menu>:
        }
    }
    return result;
}

void menu(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000548:	2101      	movs	r1, #1
 800054a:	488f      	ldr	r0, [pc, #572]	; (8000788 <menu+0x244>)
 800054c:	f008 f814 	bl	8008578 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b01      	cmp	r3, #1
 8000554:	f040 808e 	bne.w	8000674 <menu+0x130>
 8000558:	4b8c      	ldr	r3, [pc, #560]	; (800078c <menu+0x248>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f083 0301 	eor.w	r3, r3, #1
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	f000 8086 	beq.w	8000674 <menu+0x130>
		menuSayac = menuSayac+1;
 8000568:	4b89      	ldr	r3, [pc, #548]	; (8000790 <menu+0x24c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	b2da      	uxtb	r2, r3
 8000570:	4b87      	ldr	r3, [pc, #540]	; (8000790 <menu+0x24c>)
 8000572:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000574:	4b86      	ldr	r3, [pc, #536]	; (8000790 <menu+0x24c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b20      	cmp	r3, #32
 800057a:	d102      	bne.n	8000582 <menu+0x3e>
			menuSayac = 1;
 800057c:	4b84      	ldr	r3, [pc, #528]	; (8000790 <menu+0x24c>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8000582:	4b83      	ldr	r3, [pc, #524]	; (8000790 <menu+0x24c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b12      	cmp	r3, #18
 8000588:	d106      	bne.n	8000598 <menu+0x54>
 800058a:	4b82      	ldr	r3, [pc, #520]	; (8000794 <menu+0x250>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d102      	bne.n	8000598 <menu+0x54>
			menuSayac = 21;
 8000592:	4b7f      	ldr	r3, [pc, #508]	; (8000790 <menu+0x24c>)
 8000594:	2215      	movs	r2, #21
 8000596:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000598:	4b7d      	ldr	r3, [pc, #500]	; (8000790 <menu+0x24c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b08      	cmp	r3, #8
 800059e:	d106      	bne.n	80005ae <menu+0x6a>
 80005a0:	4b7d      	ldr	r3, [pc, #500]	; (8000798 <menu+0x254>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <menu+0x6a>
			menuSayac = 16;
 80005a8:	4b79      	ldr	r3, [pc, #484]	; (8000790 <menu+0x24c>)
 80005aa:	2210      	movs	r2, #16
 80005ac:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80005ae:	4b78      	ldr	r3, [pc, #480]	; (8000790 <menu+0x24c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b0d      	cmp	r3, #13
 80005b4:	d106      	bne.n	80005c4 <menu+0x80>
 80005b6:	4b78      	ldr	r3, [pc, #480]	; (8000798 <menu+0x254>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d102      	bne.n	80005c4 <menu+0x80>
			menuSayac = 16;
 80005be:	4b74      	ldr	r3, [pc, #464]	; (8000790 <menu+0x24c>)
 80005c0:	2210      	movs	r2, #16
 80005c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80005c4:	4b72      	ldr	r3, [pc, #456]	; (8000790 <menu+0x24c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b09      	cmp	r3, #9
 80005ca:	d106      	bne.n	80005da <menu+0x96>
 80005cc:	4b72      	ldr	r3, [pc, #456]	; (8000798 <menu+0x254>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d102      	bne.n	80005da <menu+0x96>
			menuSayac = 13;
 80005d4:	4b6e      	ldr	r3, [pc, #440]	; (8000790 <menu+0x24c>)
 80005d6:	220d      	movs	r2, #13
 80005d8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80005da:	4b6d      	ldr	r3, [pc, #436]	; (8000790 <menu+0x24c>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b0a      	cmp	r3, #10
 80005e0:	d10a      	bne.n	80005f8 <menu+0xb4>
 80005e2:	4b6e      	ldr	r3, [pc, #440]	; (800079c <menu+0x258>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d003      	beq.n	80005f2 <menu+0xae>
 80005ea:	4b6c      	ldr	r3, [pc, #432]	; (800079c <menu+0x258>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d102      	bne.n	80005f8 <menu+0xb4>
			menuSayac = 11;
 80005f2:	4b67      	ldr	r3, [pc, #412]	; (8000790 <menu+0x24c>)
 80005f4:	220b      	movs	r2, #11
 80005f6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80005f8:	4b65      	ldr	r3, [pc, #404]	; (8000790 <menu+0x24c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b0c      	cmp	r3, #12
 80005fe:	d10e      	bne.n	800061e <menu+0xda>
 8000600:	4b67      	ldr	r3, [pc, #412]	; (80007a0 <menu+0x25c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d003      	beq.n	8000610 <menu+0xcc>
 8000608:	4b65      	ldr	r3, [pc, #404]	; (80007a0 <menu+0x25c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b02      	cmp	r3, #2
 800060e:	d106      	bne.n	800061e <menu+0xda>
 8000610:	4b61      	ldr	r3, [pc, #388]	; (8000798 <menu+0x254>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d102      	bne.n	800061e <menu+0xda>
			menuSayac = 16;
 8000618:	4b5d      	ldr	r3, [pc, #372]	; (8000790 <menu+0x24c>)
 800061a:	2210      	movs	r2, #16
 800061c:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800061e:	4b5c      	ldr	r3, [pc, #368]	; (8000790 <menu+0x24c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b0c      	cmp	r3, #12
 8000624:	d10e      	bne.n	8000644 <menu+0x100>
 8000626:	4b5e      	ldr	r3, [pc, #376]	; (80007a0 <menu+0x25c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d003      	beq.n	8000636 <menu+0xf2>
 800062e:	4b5c      	ldr	r3, [pc, #368]	; (80007a0 <menu+0x25c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b02      	cmp	r3, #2
 8000634:	d106      	bne.n	8000644 <menu+0x100>
 8000636:	4b58      	ldr	r3, [pc, #352]	; (8000798 <menu+0x254>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b03      	cmp	r3, #3
 800063c:	d102      	bne.n	8000644 <menu+0x100>
			menuSayac = 13;
 800063e:	4b54      	ldr	r3, [pc, #336]	; (8000790 <menu+0x24c>)
 8000640:	220d      	movs	r2, #13
 8000642:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000644:	4b52      	ldr	r3, [pc, #328]	; (8000790 <menu+0x24c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d106      	bne.n	800065a <menu+0x116>
 800064c:	4b55      	ldr	r3, [pc, #340]	; (80007a4 <menu+0x260>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d102      	bne.n	800065a <menu+0x116>
			menuSayac = 16;
 8000654:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <menu+0x24c>)
 8000656:	2210      	movs	r2, #16
 8000658:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <menu+0x24c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b18      	cmp	r3, #24
 8000660:	d106      	bne.n	8000670 <menu+0x12c>
 8000662:	4b4c      	ldr	r3, [pc, #304]	; (8000794 <menu+0x250>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d102      	bne.n	8000670 <menu+0x12c>
			menuSayac = 26;
 800066a:	4b49      	ldr	r3, [pc, #292]	; (8000790 <menu+0x24c>)
 800066c:	221a      	movs	r2, #26
 800066e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000670:	f004 fadc 	bl	8004c2c <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000674:	2108      	movs	r1, #8
 8000676:	484c      	ldr	r0, [pc, #304]	; (80007a8 <menu+0x264>)
 8000678:	f007 ff7e 	bl	8008578 <HAL_GPIO_ReadPin>
 800067c:	4603      	mov	r3, r0
 800067e:	2b01      	cmp	r3, #1
 8000680:	d175      	bne.n	800076e <menu+0x22a>
 8000682:	4b42      	ldr	r3, [pc, #264]	; (800078c <menu+0x248>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f083 0301 	eor.w	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d06e      	beq.n	800076e <menu+0x22a>
		if (menuSayac <= 1) {
 8000690:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <menu+0x24c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d802      	bhi.n	800069e <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <menu+0x24c>)
 800069a:	2220      	movs	r2, #32
 800069c:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800069e:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <menu+0x24c>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <menu+0x24c>)
 80006a8:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <menu+0x24c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b14      	cmp	r3, #20
 80006b0:	d106      	bne.n	80006c0 <menu+0x17c>
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <menu+0x250>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d102      	bne.n	80006c0 <menu+0x17c>
			menuSayac = 17;
 80006ba:	4b35      	ldr	r3, [pc, #212]	; (8000790 <menu+0x24c>)
 80006bc:	2211      	movs	r2, #17
 80006be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80006c0:	4b33      	ldr	r3, [pc, #204]	; (8000790 <menu+0x24c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	d106      	bne.n	80006d6 <menu+0x192>
 80006c8:	4b33      	ldr	r3, [pc, #204]	; (8000798 <menu+0x254>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <menu+0x192>
			menuSayac = 7;
 80006d0:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <menu+0x24c>)
 80006d2:	2207      	movs	r2, #7
 80006d4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <menu+0x24c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b0f      	cmp	r3, #15
 80006dc:	d106      	bne.n	80006ec <menu+0x1a8>
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <menu+0x254>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d102      	bne.n	80006ec <menu+0x1a8>
			menuSayac = 12;
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <menu+0x24c>)
 80006e8:	220c      	movs	r2, #12
 80006ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <menu+0x24c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b0c      	cmp	r3, #12
 80006f2:	d106      	bne.n	8000702 <menu+0x1be>
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <menu+0x254>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d102      	bne.n	8000702 <menu+0x1be>
			menuSayac = 8;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <menu+0x24c>)
 80006fe:	2208      	movs	r2, #8
 8000700:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <menu+0x24c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b0a      	cmp	r3, #10
 8000708:	d10a      	bne.n	8000720 <menu+0x1dc>
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <menu+0x258>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d003      	beq.n	800071a <menu+0x1d6>
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <menu+0x258>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d102      	bne.n	8000720 <menu+0x1dc>
			menuSayac = 9;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <menu+0x24c>)
 800071c:	2209      	movs	r2, #9
 800071e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <menu+0x24c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b0c      	cmp	r3, #12
 8000726:	d10a      	bne.n	800073e <menu+0x1fa>
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <menu+0x25c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d003      	beq.n	8000738 <menu+0x1f4>
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <menu+0x25c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d102      	bne.n	800073e <menu+0x1fa>
			menuSayac = 11;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <menu+0x24c>)
 800073a:	220b      	movs	r2, #11
 800073c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <menu+0x24c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b0f      	cmp	r3, #15
 8000744:	d106      	bne.n	8000754 <menu+0x210>
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <menu+0x260>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d102      	bne.n	8000754 <menu+0x210>
			menuSayac = 14;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <menu+0x24c>)
 8000750:	220e      	movs	r2, #14
 8000752:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <menu+0x24c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b19      	cmp	r3, #25
 800075a:	d106      	bne.n	800076a <menu+0x226>
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <menu+0x250>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d102      	bne.n	800076a <menu+0x226>
			menuSayac = 23;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <menu+0x24c>)
 8000766:	2217      	movs	r2, #23
 8000768:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800076a:	f004 fa5f 	bl	8004c2c <bekle>
	}

	if (menuSayac == 0) {
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <menu+0x24c>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d134      	bne.n	80007e0 <menu+0x29c>
		if(dilSecim == 0) {
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <menu+0x268>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d122      	bne.n	80007c4 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800077e:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <menu+0x26c>)
 8000780:	2101      	movs	r1, #1
 8000782:	2001      	movs	r0, #1
 8000784:	e016      	b.n	80007b4 <menu+0x270>
 8000786:	bf00      	nop
 8000788:	40010800 	.word	0x40010800
 800078c:	20000a5a 	.word	0x20000a5a
 8000790:	20000a2c 	.word	0x20000a2c
 8000794:	20000a3b 	.word	0x20000a3b
 8000798:	20000a34 	.word	0x20000a34
 800079c:	20000a35 	.word	0x20000a35
 80007a0:	20000a36 	.word	0x20000a36
 80007a4:	20000a37 	.word	0x20000a37
 80007a8:	40011000 	.word	0x40011000
 80007ac:	20000a4c 	.word	0x20000a4c
 80007b0:	0800b9e8 	.word	0x0800b9e8
 80007b4:	f7ff fe65 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80007b8:	4a94      	ldr	r2, [pc, #592]	; (8000a0c <menu+0x4c8>)
 80007ba:	2101      	movs	r1, #1
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff fe60 	bl	8000482 <lcd_print>
 80007c2:	e00d      	b.n	80007e0 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80007c4:	4b92      	ldr	r3, [pc, #584]	; (8000a10 <menu+0x4cc>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d109      	bne.n	80007e0 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80007cc:	4a91      	ldr	r2, [pc, #580]	; (8000a14 <menu+0x4d0>)
 80007ce:	2101      	movs	r1, #1
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fe56 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80007d6:	4a90      	ldr	r2, [pc, #576]	; (8000a18 <menu+0x4d4>)
 80007d8:	2101      	movs	r1, #1
 80007da:	2002      	movs	r0, #2
 80007dc:	f7ff fe51 	bl	8000482 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80007e0:	4b8e      	ldr	r3, [pc, #568]	; (8000a1c <menu+0x4d8>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	f040 82b5 	bne.w	8000d54 <menu+0x810>
		if(dilSecim == 0) {
 80007ea:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <menu+0x4cc>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d105      	bne.n	80007fe <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80007f2:	4a8b      	ldr	r2, [pc, #556]	; (8000a20 <menu+0x4dc>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff fe43 	bl	8000482 <lcd_print>
 80007fc:	e008      	b.n	8000810 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80007fe:	4b84      	ldr	r3, [pc, #528]	; (8000a10 <menu+0x4cc>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d104      	bne.n	8000810 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000806:	4a87      	ldr	r2, [pc, #540]	; (8000a24 <menu+0x4e0>)
 8000808:	2101      	movs	r1, #1
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fe39 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8000810:	4b85      	ldr	r3, [pc, #532]	; (8000a28 <menu+0x4e4>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d123      	bne.n	8000860 <menu+0x31c>
			if(dilSecim == 0) {
 8000818:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <menu+0x4cc>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d105      	bne.n	800082c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8000820:	4a82      	ldr	r2, [pc, #520]	; (8000a2c <menu+0x4e8>)
 8000822:	2101      	movs	r1, #1
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff fe2c 	bl	8000482 <lcd_print>
 800082a:	e008      	b.n	800083e <menu+0x2fa>

			} else if(dilSecim == 1) {
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <menu+0x4cc>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d104      	bne.n	800083e <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000834:	4a7e      	ldr	r2, [pc, #504]	; (8000a30 <menu+0x4ec>)
 8000836:	2101      	movs	r1, #1
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff fe22 	bl	8000482 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800083e:	4a7d      	ldr	r2, [pc, #500]	; (8000a34 <menu+0x4f0>)
 8000840:	210f      	movs	r1, #15
 8000842:	2002      	movs	r0, #2
 8000844:	f7ff fe1d 	bl	8000482 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000848:	4b7b      	ldr	r3, [pc, #492]	; (8000a38 <menu+0x4f4>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	220a      	movs	r2, #10
 800084e:	497b      	ldr	r1, [pc, #492]	; (8000a3c <menu+0x4f8>)
 8000850:	4618      	mov	r0, r3
 8000852:	f00a ff79 	bl	800b748 <itoa>
			lcd_print(2, 14, snum);
 8000856:	4a79      	ldr	r2, [pc, #484]	; (8000a3c <menu+0x4f8>)
 8000858:	210e      	movs	r1, #14
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff fe11 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000860:	4b71      	ldr	r3, [pc, #452]	; (8000a28 <menu+0x4e4>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d123      	bne.n	80008b0 <menu+0x36c>
			if(dilSecim == 0) {
 8000868:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <menu+0x4cc>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d105      	bne.n	800087c <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8000870:	4a73      	ldr	r2, [pc, #460]	; (8000a40 <menu+0x4fc>)
 8000872:	2101      	movs	r1, #1
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fe04 	bl	8000482 <lcd_print>
 800087a:	e008      	b.n	800088e <menu+0x34a>
			} else if(dilSecim == 1) {
 800087c:	4b64      	ldr	r3, [pc, #400]	; (8000a10 <menu+0x4cc>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d104      	bne.n	800088e <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8000884:	4a6f      	ldr	r2, [pc, #444]	; (8000a44 <menu+0x500>)
 8000886:	2101      	movs	r1, #1
 8000888:	2002      	movs	r0, #2
 800088a:	f7ff fdfa 	bl	8000482 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800088e:	4a6e      	ldr	r2, [pc, #440]	; (8000a48 <menu+0x504>)
 8000890:	210f      	movs	r1, #15
 8000892:	2002      	movs	r0, #2
 8000894:	f7ff fdf5 	bl	8000482 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000898:	4b6c      	ldr	r3, [pc, #432]	; (8000a4c <menu+0x508>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	220a      	movs	r2, #10
 800089e:	4967      	ldr	r1, [pc, #412]	; (8000a3c <menu+0x4f8>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	f00a ff51 	bl	800b748 <itoa>
			lcd_print(2, 14, snum);
 80008a6:	4a65      	ldr	r2, [pc, #404]	; (8000a3c <menu+0x4f8>)
 80008a8:	210e      	movs	r1, #14
 80008aa:	2002      	movs	r0, #2
 80008ac:	f7ff fde9 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 2){
 80008b0:	4b5d      	ldr	r3, [pc, #372]	; (8000a28 <menu+0x4e4>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d123      	bne.n	8000900 <menu+0x3bc>
			if(dilSecim == 0) {
 80008b8:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <menu+0x4cc>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d105      	bne.n	80008cc <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80008c0:	4a63      	ldr	r2, [pc, #396]	; (8000a50 <menu+0x50c>)
 80008c2:	2101      	movs	r1, #1
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff fddc 	bl	8000482 <lcd_print>
 80008ca:	e008      	b.n	80008de <menu+0x39a>
			} else if(dilSecim == 1) {
 80008cc:	4b50      	ldr	r3, [pc, #320]	; (8000a10 <menu+0x4cc>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d104      	bne.n	80008de <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80008d4:	4a5f      	ldr	r2, [pc, #380]	; (8000a54 <menu+0x510>)
 80008d6:	2101      	movs	r1, #1
 80008d8:	2002      	movs	r0, #2
 80008da:	f7ff fdd2 	bl	8000482 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80008de:	4a5a      	ldr	r2, [pc, #360]	; (8000a48 <menu+0x504>)
 80008e0:	210f      	movs	r1, #15
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff fdcd 	bl	8000482 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80008e8:	4b5b      	ldr	r3, [pc, #364]	; (8000a58 <menu+0x514>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	220a      	movs	r2, #10
 80008ee:	4953      	ldr	r1, [pc, #332]	; (8000a3c <menu+0x4f8>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f00a ff29 	bl	800b748 <itoa>
			lcd_print(2, 14, snum);
 80008f6:	4a51      	ldr	r2, [pc, #324]	; (8000a3c <menu+0x4f8>)
 80008f8:	210e      	movs	r1, #14
 80008fa:	2002      	movs	r0, #2
 80008fc:	f7ff fdc1 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8000900:	4b49      	ldr	r3, [pc, #292]	; (8000a28 <menu+0x4e4>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b03      	cmp	r3, #3
 8000906:	d123      	bne.n	8000950 <menu+0x40c>
			if(dilSecim == 0) {
 8000908:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <menu+0x4cc>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d105      	bne.n	800091c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8000910:	4a52      	ldr	r2, [pc, #328]	; (8000a5c <menu+0x518>)
 8000912:	2101      	movs	r1, #1
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fdb4 	bl	8000482 <lcd_print>
 800091a:	e008      	b.n	800092e <menu+0x3ea>
			} else if(dilSecim == 1) {
 800091c:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <menu+0x4cc>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d104      	bne.n	800092e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000924:	4a4e      	ldr	r2, [pc, #312]	; (8000a60 <menu+0x51c>)
 8000926:	2101      	movs	r1, #1
 8000928:	2002      	movs	r0, #2
 800092a:	f7ff fdaa 	bl	8000482 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800092e:	4a46      	ldr	r2, [pc, #280]	; (8000a48 <menu+0x504>)
 8000930:	210f      	movs	r1, #15
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fda5 	bl	8000482 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000938:	4b4a      	ldr	r3, [pc, #296]	; (8000a64 <menu+0x520>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	220a      	movs	r2, #10
 800093e:	493f      	ldr	r1, [pc, #252]	; (8000a3c <menu+0x4f8>)
 8000940:	4618      	mov	r0, r3
 8000942:	f00a ff01 	bl	800b748 <itoa>
			lcd_print(2, 14, snum);
 8000946:	4a3d      	ldr	r2, [pc, #244]	; (8000a3c <menu+0x4f8>)
 8000948:	210e      	movs	r1, #14
 800094a:	2002      	movs	r0, #2
 800094c:	f7ff fd99 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000950:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <menu+0x4e4>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b04      	cmp	r3, #4
 8000956:	d123      	bne.n	80009a0 <menu+0x45c>
			if(dilSecim == 0) {
 8000958:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <menu+0x4cc>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d105      	bne.n	800096c <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8000960:	4a41      	ldr	r2, [pc, #260]	; (8000a68 <menu+0x524>)
 8000962:	2101      	movs	r1, #1
 8000964:	2002      	movs	r0, #2
 8000966:	f7ff fd8c 	bl	8000482 <lcd_print>
 800096a:	e008      	b.n	800097e <menu+0x43a>
			} else if(dilSecim == 1) {
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <menu+0x4cc>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d104      	bne.n	800097e <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8000974:	4a3d      	ldr	r2, [pc, #244]	; (8000a6c <menu+0x528>)
 8000976:	2101      	movs	r1, #1
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fd82 	bl	8000482 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 800097e:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <menu+0x504>)
 8000980:	210f      	movs	r1, #15
 8000982:	2002      	movs	r0, #2
 8000984:	f7ff fd7d 	bl	8000482 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000988:	4b39      	ldr	r3, [pc, #228]	; (8000a70 <menu+0x52c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	220a      	movs	r2, #10
 800098e:	492b      	ldr	r1, [pc, #172]	; (8000a3c <menu+0x4f8>)
 8000990:	4618      	mov	r0, r3
 8000992:	f00a fed9 	bl	800b748 <itoa>
			lcd_print(2, 14, snum);
 8000996:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <menu+0x4f8>)
 8000998:	210e      	movs	r1, #14
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff fd71 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <menu+0x4e4>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	d123      	bne.n	80009f0 <menu+0x4ac>
			if(dilSecim == 0) {
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <menu+0x4cc>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d105      	bne.n	80009bc <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80009b0:	4a30      	ldr	r2, [pc, #192]	; (8000a74 <menu+0x530>)
 80009b2:	2101      	movs	r1, #1
 80009b4:	2002      	movs	r0, #2
 80009b6:	f7ff fd64 	bl	8000482 <lcd_print>
 80009ba:	e008      	b.n	80009ce <menu+0x48a>
			} else if(dilSecim == 1) {
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <menu+0x4cc>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d104      	bne.n	80009ce <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80009c4:	4a2c      	ldr	r2, [pc, #176]	; (8000a78 <menu+0x534>)
 80009c6:	2101      	movs	r1, #1
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff fd5a 	bl	8000482 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 80009ce:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <menu+0x504>)
 80009d0:	210f      	movs	r1, #15
 80009d2:	2002      	movs	r0, #2
 80009d4:	f7ff fd55 	bl	8000482 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <menu+0x538>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	220a      	movs	r2, #10
 80009de:	4917      	ldr	r1, [pc, #92]	; (8000a3c <menu+0x4f8>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f00a feb1 	bl	800b748 <itoa>
			lcd_print(2, 14, snum);
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <menu+0x4f8>)
 80009e8:	210e      	movs	r1, #14
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fd49 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <menu+0x4e4>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b06      	cmp	r3, #6
 80009f6:	d15f      	bne.n	8000ab8 <menu+0x574>
			if(dilSecim == 0) {
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <menu+0x4cc>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d141      	bne.n	8000a84 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <menu+0x53c>)
 8000a02:	2101      	movs	r1, #1
 8000a04:	2002      	movs	r0, #2
 8000a06:	f7ff fd3c 	bl	8000482 <lcd_print>
 8000a0a:	e044      	b.n	8000a96 <menu+0x552>
 8000a0c:	0800b9fc 	.word	0x0800b9fc
 8000a10:	20000a4c 	.word	0x20000a4c
 8000a14:	0800ba10 	.word	0x0800ba10
 8000a18:	0800ba24 	.word	0x0800ba24
 8000a1c:	20000a2c 	.word	0x20000a2c
 8000a20:	0800ba38 	.word	0x0800ba38
 8000a24:	0800ba4c 	.word	0x0800ba4c
 8000a28:	20000a2e 	.word	0x20000a2e
 8000a2c:	0800ba60 	.word	0x0800ba60
 8000a30:	0800ba70 	.word	0x0800ba70
 8000a34:	0800ba80 	.word	0x0800ba80
 8000a38:	20000a4d 	.word	0x20000a4d
 8000a3c:	20000a00 	.word	0x20000a00
 8000a40:	0800ba84 	.word	0x0800ba84
 8000a44:	0800ba94 	.word	0x0800ba94
 8000a48:	0800baa4 	.word	0x0800baa4
 8000a4c:	20000a4e 	.word	0x20000a4e
 8000a50:	0800baa8 	.word	0x0800baa8
 8000a54:	0800bab8 	.word	0x0800bab8
 8000a58:	20000a4f 	.word	0x20000a4f
 8000a5c:	0800bac8 	.word	0x0800bac8
 8000a60:	0800bad8 	.word	0x0800bad8
 8000a64:	20000a50 	.word	0x20000a50
 8000a68:	0800bae8 	.word	0x0800bae8
 8000a6c:	0800baf8 	.word	0x0800baf8
 8000a70:	20000a51 	.word	0x20000a51
 8000a74:	0800bb08 	.word	0x0800bb08
 8000a78:	0800bb18 	.word	0x0800bb18
 8000a7c:	20000a52 	.word	0x20000a52
 8000a80:	0800bb28 	.word	0x0800bb28
			} else if(dilSecim == 1) {
 8000a84:	4b4f      	ldr	r3, [pc, #316]	; (8000bc4 <menu+0x680>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d104      	bne.n	8000a96 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000a8c:	4a4e      	ldr	r2, [pc, #312]	; (8000bc8 <menu+0x684>)
 8000a8e:	2101      	movs	r1, #1
 8000a90:	2002      	movs	r0, #2
 8000a92:	f7ff fcf6 	bl	8000482 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000a96:	4a4d      	ldr	r2, [pc, #308]	; (8000bcc <menu+0x688>)
 8000a98:	210f      	movs	r1, #15
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f7ff fcf1 	bl	8000482 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000aa0:	4b4b      	ldr	r3, [pc, #300]	; (8000bd0 <menu+0x68c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	220a      	movs	r2, #10
 8000aa6:	494b      	ldr	r1, [pc, #300]	; (8000bd4 <menu+0x690>)
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f00a fe4d 	bl	800b748 <itoa>
			lcd_print(2, 14, snum);
 8000aae:	4a49      	ldr	r2, [pc, #292]	; (8000bd4 <menu+0x690>)
 8000ab0:	210e      	movs	r1, #14
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f7ff fce5 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000ab8:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <menu+0x694>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b07      	cmp	r3, #7
 8000abe:	d123      	bne.n	8000b08 <menu+0x5c4>
			if(dilSecim == 0) {
 8000ac0:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <menu+0x680>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d105      	bne.n	8000ad4 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000ac8:	4a44      	ldr	r2, [pc, #272]	; (8000bdc <menu+0x698>)
 8000aca:	2101      	movs	r1, #1
 8000acc:	2002      	movs	r0, #2
 8000ace:	f7ff fcd8 	bl	8000482 <lcd_print>
 8000ad2:	e008      	b.n	8000ae6 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000ad4:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <menu+0x680>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d104      	bne.n	8000ae6 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000adc:	4a40      	ldr	r2, [pc, #256]	; (8000be0 <menu+0x69c>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f7ff fcce 	bl	8000482 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000ae6:	4a39      	ldr	r2, [pc, #228]	; (8000bcc <menu+0x688>)
 8000ae8:	210f      	movs	r1, #15
 8000aea:	2002      	movs	r0, #2
 8000aec:	f7ff fcc9 	bl	8000482 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000af0:	4b3c      	ldr	r3, [pc, #240]	; (8000be4 <menu+0x6a0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	220a      	movs	r2, #10
 8000af6:	4937      	ldr	r1, [pc, #220]	; (8000bd4 <menu+0x690>)
 8000af8:	4618      	mov	r0, r3
 8000afa:	f00a fe25 	bl	800b748 <itoa>
			lcd_print(2, 14, snum);
 8000afe:	4a35      	ldr	r2, [pc, #212]	; (8000bd4 <menu+0x690>)
 8000b00:	210e      	movs	r1, #14
 8000b02:	2002      	movs	r0, #2
 8000b04:	f7ff fcbd 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000b08:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <menu+0x694>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b08      	cmp	r3, #8
 8000b0e:	d123      	bne.n	8000b58 <menu+0x614>
			if(dilSecim == 0) {
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <menu+0x680>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d105      	bne.n	8000b24 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000b18:	4a33      	ldr	r2, [pc, #204]	; (8000be8 <menu+0x6a4>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fcb0 	bl	8000482 <lcd_print>
 8000b22:	e008      	b.n	8000b36 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <menu+0x680>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d104      	bne.n	8000b36 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000b2c:	4a2f      	ldr	r2, [pc, #188]	; (8000bec <menu+0x6a8>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2002      	movs	r0, #2
 8000b32:	f7ff fca6 	bl	8000482 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b36:	4a25      	ldr	r2, [pc, #148]	; (8000bcc <menu+0x688>)
 8000b38:	210f      	movs	r1, #15
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f7ff fca1 	bl	8000482 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <menu+0x6ac>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	220a      	movs	r2, #10
 8000b46:	4923      	ldr	r1, [pc, #140]	; (8000bd4 <menu+0x690>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00a fdfd 	bl	800b748 <itoa>
			lcd_print(2, 14, snum);
 8000b4e:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <menu+0x690>)
 8000b50:	210e      	movs	r1, #14
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff fc95 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <menu+0x694>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b09      	cmp	r3, #9
 8000b5e:	d123      	bne.n	8000ba8 <menu+0x664>
			if(dilSecim == 0) {
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <menu+0x680>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d105      	bne.n	8000b74 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000b68:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <menu+0x6b0>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f7ff fc88 	bl	8000482 <lcd_print>
 8000b72:	e008      	b.n	8000b86 <menu+0x642>
			} else if(dilSecim == 1) {
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <menu+0x680>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d104      	bne.n	8000b86 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000b7c:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <menu+0x6b4>)
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff fc7e 	bl	8000482 <lcd_print>

			}
			lcd_print(2, 16, " ");
 8000b86:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <menu+0x6b8>)
 8000b88:	2110      	movs	r1, #16
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f7ff fc79 	bl	8000482 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <menu+0x6bc>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	220a      	movs	r2, #10
 8000b96:	490f      	ldr	r1, [pc, #60]	; (8000bd4 <menu+0x690>)
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f00a fdd5 	bl	800b748 <itoa>
			lcd_print(2, 15, snum);
 8000b9e:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <menu+0x690>)
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f7ff fc6d 	bl	8000482 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <menu+0x694>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b0a      	cmp	r3, #10
 8000bae:	d134      	bne.n	8000c1a <menu+0x6d6>
			if(dilSecim == 0) {
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <menu+0x680>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d127      	bne.n	8000c08 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000bb8:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <menu+0x6c0>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f7ff fc60 	bl	8000482 <lcd_print>
 8000bc2:	e02a      	b.n	8000c1a <menu+0x6d6>
 8000bc4:	20000a4c 	.word	0x20000a4c
 8000bc8:	0800bb38 	.word	0x0800bb38
 8000bcc:	0800baa4 	.word	0x0800baa4
 8000bd0:	20000a53 	.word	0x20000a53
 8000bd4:	20000a00 	.word	0x20000a00
 8000bd8:	20000a2e 	.word	0x20000a2e
 8000bdc:	0800bb48 	.word	0x0800bb48
 8000be0:	0800bb58 	.word	0x0800bb58
 8000be4:	20000a54 	.word	0x20000a54
 8000be8:	0800bb68 	.word	0x0800bb68
 8000bec:	0800bb78 	.word	0x0800bb78
 8000bf0:	20000a55 	.word	0x20000a55
 8000bf4:	0800bb88 	.word	0x0800bb88
 8000bf8:	0800bb98 	.word	0x0800bb98
 8000bfc:	0800bba8 	.word	0x0800bba8
 8000c00:	20000a56 	.word	0x20000a56
 8000c04:	0800bbac 	.word	0x0800bbac
			} else if(dilSecim == 1) {
 8000c08:	4b82      	ldr	r3, [pc, #520]	; (8000e14 <menu+0x8d0>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d104      	bne.n	8000c1a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000c10:	4a81      	ldr	r2, [pc, #516]	; (8000e18 <menu+0x8d4>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	2002      	movs	r0, #2
 8000c16:	f7ff fc34 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	487f      	ldr	r0, [pc, #508]	; (8000e1c <menu+0x8d8>)
 8000c1e:	f007 fcab 	bl	8008578 <HAL_GPIO_ReadPin>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d119      	bne.n	8000c5c <menu+0x718>
 8000c28:	4b7d      	ldr	r3, [pc, #500]	; (8000e20 <menu+0x8dc>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	f083 0301 	eor.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d012      	beq.n	8000c5c <menu+0x718>
 8000c36:	4b7b      	ldr	r3, [pc, #492]	; (8000e24 <menu+0x8e0>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10e      	bne.n	8000c5c <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000c3e:	4b7a      	ldr	r3, [pc, #488]	; (8000e28 <menu+0x8e4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b78      	ldr	r3, [pc, #480]	; (8000e28 <menu+0x8e4>)
 8000c48:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000c4a:	4b77      	ldr	r3, [pc, #476]	; (8000e28 <menu+0x8e4>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b0a      	cmp	r3, #10
 8000c50:	d902      	bls.n	8000c58 <menu+0x714>
				hataGostermeSirasi = 0;
 8000c52:	4b75      	ldr	r3, [pc, #468]	; (8000e28 <menu+0x8e4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000c58:	f003 ffe8 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	486f      	ldr	r0, [pc, #444]	; (8000e1c <menu+0x8d8>)
 8000c60:	f007 fc8a 	bl	8008578 <HAL_GPIO_ReadPin>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d119      	bne.n	8000c9e <menu+0x75a>
 8000c6a:	4b6d      	ldr	r3, [pc, #436]	; (8000e20 <menu+0x8dc>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	f083 0301 	eor.w	r3, r3, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d012      	beq.n	8000c9e <menu+0x75a>
 8000c78:	4b6a      	ldr	r3, [pc, #424]	; (8000e24 <menu+0x8e0>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10e      	bne.n	8000c9e <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000c80:	4b69      	ldr	r3, [pc, #420]	; (8000e28 <menu+0x8e4>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b67      	ldr	r3, [pc, #412]	; (8000e28 <menu+0x8e4>)
 8000c8a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000c8c:	4b66      	ldr	r3, [pc, #408]	; (8000e28 <menu+0x8e4>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b0b      	cmp	r3, #11
 8000c92:	d902      	bls.n	8000c9a <menu+0x756>
	    		hataGostermeSirasi = 10;
 8000c94:	4b64      	ldr	r3, [pc, #400]	; (8000e28 <menu+0x8e4>)
 8000c96:	220a      	movs	r2, #10
 8000c98:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000c9a:	f003 ffc7 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	485e      	ldr	r0, [pc, #376]	; (8000e1c <menu+0x8d8>)
 8000ca2:	f007 fc69 	bl	8008578 <HAL_GPIO_ReadPin>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d153      	bne.n	8000d54 <menu+0x810>
 8000cac:	4b5c      	ldr	r3, [pc, #368]	; (8000e20 <menu+0x8dc>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	f083 0301 	eor.w	r3, r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d04c      	beq.n	8000d54 <menu+0x810>
 8000cba:	4b5b      	ldr	r3, [pc, #364]	; (8000e28 <menu+0x8e4>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b0a      	cmp	r3, #10
 8000cc0:	d148      	bne.n	8000d54 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8000cc2:	4b5a      	ldr	r3, [pc, #360]	; (8000e2c <menu+0x8e8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <menu+0x8ec>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000cd0:	4b58      	ldr	r3, [pc, #352]	; (8000e34 <menu+0x8f0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	4b56      	ldr	r3, [pc, #344]	; (8000e30 <menu+0x8ec>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000cde:	4b56      	ldr	r3, [pc, #344]	; (8000e38 <menu+0x8f4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	4b52      	ldr	r3, [pc, #328]	; (8000e30 <menu+0x8ec>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000cec:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <menu+0x8f8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	; (8000e30 <menu+0x8ec>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000cfa:	4b51      	ldr	r3, [pc, #324]	; (8000e40 <menu+0x8fc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	4b4b      	ldr	r3, [pc, #300]	; (8000e30 <menu+0x8ec>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000d08:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <menu+0x900>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	4b48      	ldr	r3, [pc, #288]	; (8000e30 <menu+0x8ec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000d16:	4b4c      	ldr	r3, [pc, #304]	; (8000e48 <menu+0x904>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	4b44      	ldr	r3, [pc, #272]	; (8000e30 <menu+0x8ec>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000d24:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <menu+0x908>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <menu+0x8ec>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000d32:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <menu+0x90c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <menu+0x8ec>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000d40:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <menu+0x910>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <menu+0x8ec>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8000d4e:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <menu+0x914>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000d54:	4b41      	ldr	r3, [pc, #260]	; (8000e5c <menu+0x918>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	f040 80fc 	bne.w	8000f56 <menu+0xa12>
		if(dilSecim == 0) {
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <menu+0x8d0>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000d66:	4a3e      	ldr	r2, [pc, #248]	; (8000e60 <menu+0x91c>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff fb89 	bl	8000482 <lcd_print>
 8000d70:	e008      	b.n	8000d84 <menu+0x840>
		} else if(dilSecim == 1) {
 8000d72:	4b28      	ldr	r3, [pc, #160]	; (8000e14 <menu+0x8d0>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d104      	bne.n	8000d84 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000d7a:	4a3a      	ldr	r2, [pc, #232]	; (8000e64 <menu+0x920>)
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff fb7f 	bl	8000482 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <menu+0x8e0>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d003      	beq.n	8000d94 <menu+0x850>
 8000d8c:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <menu+0x8e0>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d112      	bne.n	8000dba <menu+0x876>
			if(dilSecim == 0) {
 8000d94:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <menu+0x8d0>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d105      	bne.n	8000da8 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8000d9c:	4a32      	ldr	r2, [pc, #200]	; (8000e68 <menu+0x924>)
 8000d9e:	2101      	movs	r1, #1
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff fb6e 	bl	8000482 <lcd_print>
 8000da6:	e008      	b.n	8000dba <menu+0x876>
			} else if(dilSecim == 1) {
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <menu+0x8d0>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d104      	bne.n	8000dba <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8000db0:	4a2e      	ldr	r2, [pc, #184]	; (8000e6c <menu+0x928>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff fb64 	bl	8000482 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <menu+0x92c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d116      	bne.n	8000df0 <menu+0x8ac>
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <menu+0x8e0>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d112      	bne.n	8000df0 <menu+0x8ac>
			if(dilSecim == 0) {
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <menu+0x8d0>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d105      	bne.n	8000dde <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8000dd2:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <menu+0x930>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f7ff fb53 	bl	8000482 <lcd_print>
 8000ddc:	e008      	b.n	8000df0 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <menu+0x8d0>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d104      	bne.n	8000df0 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8000de6:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <menu+0x934>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	2002      	movs	r0, #2
 8000dec:	f7ff fb49 	bl	8000482 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <menu+0x92c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d14c      	bne.n	8000e92 <menu+0x94e>
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <menu+0x8e0>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d148      	bne.n	8000e92 <menu+0x94e>
			if(dilSecim == 0) {
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <menu+0x8d0>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d13b      	bne.n	8000e80 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8000e08:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <menu+0x938>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fb38 	bl	8000482 <lcd_print>
 8000e12:	e03e      	b.n	8000e92 <menu+0x94e>
 8000e14:	20000a4c 	.word	0x20000a4c
 8000e18:	0800bbc0 	.word	0x0800bbc0
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	20000a5a 	.word	0x20000a5a
 8000e24:	20000a3b 	.word	0x20000a3b
 8000e28:	20000a2e 	.word	0x20000a2e
 8000e2c:	20000a4d 	.word	0x20000a4d
 8000e30:	200009c0 	.word	0x200009c0
 8000e34:	20000a4e 	.word	0x20000a4e
 8000e38:	20000a4f 	.word	0x20000a4f
 8000e3c:	20000a50 	.word	0x20000a50
 8000e40:	20000a51 	.word	0x20000a51
 8000e44:	20000a52 	.word	0x20000a52
 8000e48:	20000a53 	.word	0x20000a53
 8000e4c:	20000a54 	.word	0x20000a54
 8000e50:	20000a55 	.word	0x20000a55
 8000e54:	20000a56 	.word	0x20000a56
 8000e58:	20000a57 	.word	0x20000a57
 8000e5c:	20000a2c 	.word	0x20000a2c
 8000e60:	0800bbd4 	.word	0x0800bbd4
 8000e64:	0800bbe8 	.word	0x0800bbe8
 8000e68:	0800bbfc 	.word	0x0800bbfc
 8000e6c:	0800bc10 	.word	0x0800bc10
 8000e70:	20000a2d 	.word	0x20000a2d
 8000e74:	0800bc24 	.word	0x0800bc24
 8000e78:	0800bc34 	.word	0x0800bc34
 8000e7c:	0800bc44 	.word	0x0800bc44
			} else if(dilSecim == 1) {
 8000e80:	4b98      	ldr	r3, [pc, #608]	; (80010e4 <menu+0xba0>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d104      	bne.n	8000e92 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8000e88:	4a97      	ldr	r2, [pc, #604]	; (80010e8 <menu+0xba4>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f7ff faf8 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e92:	2102      	movs	r1, #2
 8000e94:	4895      	ldr	r0, [pc, #596]	; (80010ec <menu+0xba8>)
 8000e96:	f007 fb6f 	bl	8008578 <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d119      	bne.n	8000ed4 <menu+0x990>
 8000ea0:	4b93      	ldr	r3, [pc, #588]	; (80010f0 <menu+0xbac>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	f083 0301 	eor.w	r3, r3, #1
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d012      	beq.n	8000ed4 <menu+0x990>
 8000eae:	4b91      	ldr	r3, [pc, #580]	; (80010f4 <menu+0xbb0>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10e      	bne.n	8000ed4 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8000eb6:	4b90      	ldr	r3, [pc, #576]	; (80010f8 <menu+0xbb4>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b8e      	ldr	r3, [pc, #568]	; (80010f8 <menu+0xbb4>)
 8000ec0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8000ec2:	4b8d      	ldr	r3, [pc, #564]	; (80010f8 <menu+0xbb4>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d902      	bls.n	8000ed0 <menu+0x98c>
				calismaSekli = 0;
 8000eca:	4b8b      	ldr	r3, [pc, #556]	; (80010f8 <menu+0xbb4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000ed0:	f003 feac 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	4885      	ldr	r0, [pc, #532]	; (80010ec <menu+0xba8>)
 8000ed8:	f007 fb4e 	bl	8008578 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d119      	bne.n	8000f16 <menu+0x9d2>
 8000ee2:	4b83      	ldr	r3, [pc, #524]	; (80010f0 <menu+0xbac>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	f083 0301 	eor.w	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d012      	beq.n	8000f16 <menu+0x9d2>
 8000ef0:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <menu+0xbb0>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10e      	bne.n	8000f16 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8000ef8:	4b7f      	ldr	r3, [pc, #508]	; (80010f8 <menu+0xbb4>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b7d      	ldr	r3, [pc, #500]	; (80010f8 <menu+0xbb4>)
 8000f02:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8000f04:	4b7c      	ldr	r3, [pc, #496]	; (80010f8 <menu+0xbb4>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <menu+0x9ce>
	    		calismaSekli = 1;
 8000f0c:	4b7a      	ldr	r3, [pc, #488]	; (80010f8 <menu+0xbb4>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000f12:	f003 fe8b 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f16:	2108      	movs	r1, #8
 8000f18:	4874      	ldr	r0, [pc, #464]	; (80010ec <menu+0xba8>)
 8000f1a:	f007 fb2d 	bl	8008578 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d118      	bne.n	8000f56 <menu+0xa12>
 8000f24:	4b72      	ldr	r3, [pc, #456]	; (80010f0 <menu+0xbac>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	f083 0301 	eor.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d011      	beq.n	8000f56 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8000f32:	4b71      	ldr	r3, [pc, #452]	; (80010f8 <menu+0xbb4>)
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	4b71      	ldr	r3, [pc, #452]	; (80010fc <menu+0xbb8>)
 8000f38:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8000f3a:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <menu+0xbb4>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d106      	bne.n	8000f50 <menu+0xa0c>
				altLimit = 1;
 8000f42:	4b6f      	ldr	r3, [pc, #444]	; (8001100 <menu+0xbbc>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8000f48:	4b6d      	ldr	r3, [pc, #436]	; (8001100 <menu+0xbbc>)
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <menu+0xbb8>)
 8000f4e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8000f50:	4b6c      	ldr	r3, [pc, #432]	; (8001104 <menu+0xbc0>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8000f56:	4b6c      	ldr	r3, [pc, #432]	; (8001108 <menu+0xbc4>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	f040 8083 	bne.w	8001066 <menu+0xb22>
		if(dilSecim == 0) {
 8000f60:	4b60      	ldr	r3, [pc, #384]	; (80010e4 <menu+0xba0>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d105      	bne.n	8000f74 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8000f68:	4a68      	ldr	r2, [pc, #416]	; (800110c <menu+0xbc8>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fa88 	bl	8000482 <lcd_print>
 8000f72:	e008      	b.n	8000f86 <menu+0xa42>
		} else if(dilSecim == 1) {
 8000f74:	4b5b      	ldr	r3, [pc, #364]	; (80010e4 <menu+0xba0>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d104      	bne.n	8000f86 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8000f7c:	4a64      	ldr	r2, [pc, #400]	; (8001110 <menu+0xbcc>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff fa7e 	bl	8000482 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8000f86:	4b63      	ldr	r3, [pc, #396]	; (8001114 <menu+0xbd0>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d113      	bne.n	8000fb6 <menu+0xa72>
			if(dilSecim == 0) {
 8000f8e:	4b55      	ldr	r3, [pc, #340]	; (80010e4 <menu+0xba0>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d105      	bne.n	8000fa2 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8000f96:	4a60      	ldr	r2, [pc, #384]	; (8001118 <menu+0xbd4>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f7ff fa71 	bl	8000482 <lcd_print>
 8000fa0:	e012      	b.n	8000fc8 <menu+0xa84>
			} else if(dilSecim == 1) {
 8000fa2:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <menu+0xba0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10e      	bne.n	8000fc8 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8000faa:	4a5c      	ldr	r2, [pc, #368]	; (800111c <menu+0xbd8>)
 8000fac:	2101      	movs	r1, #1
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f7ff fa67 	bl	8000482 <lcd_print>
 8000fb4:	e008      	b.n	8000fc8 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8000fb6:	4b57      	ldr	r3, [pc, #348]	; (8001114 <menu+0xbd0>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d104      	bne.n	8000fc8 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8000fbe:	4a58      	ldr	r2, [pc, #352]	; (8001120 <menu+0xbdc>)
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f7ff fa5d 	bl	8000482 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4848      	ldr	r0, [pc, #288]	; (80010ec <menu+0xba8>)
 8000fcc:	f007 fad4 	bl	8008578 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d115      	bne.n	8001002 <menu+0xabe>
 8000fd6:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <menu+0xbac>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	f083 0301 	eor.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00e      	beq.n	8001002 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8000fe4:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <menu+0xbd0>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b49      	ldr	r3, [pc, #292]	; (8001114 <menu+0xbd0>)
 8000fee:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8000ff0:	4b48      	ldr	r3, [pc, #288]	; (8001114 <menu+0xbd0>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d902      	bls.n	8000ffe <menu+0xaba>
				emniyetCercevesi = 0;
 8000ff8:	4b46      	ldr	r3, [pc, #280]	; (8001114 <menu+0xbd0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000ffe:	f003 fe15 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001002:	2104      	movs	r1, #4
 8001004:	4839      	ldr	r0, [pc, #228]	; (80010ec <menu+0xba8>)
 8001006:	f007 fab7 	bl	8008578 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	d115      	bne.n	800103c <menu+0xaf8>
 8001010:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <menu+0xbac>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f083 0301 	eor.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00e      	beq.n	800103c <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800101e:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <menu+0xbd0>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	3b01      	subs	r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <menu+0xbd0>)
 8001028:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <menu+0xbd0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <menu+0xbd0>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001038:	f003 fdf8 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 800103c:	2108      	movs	r1, #8
 800103e:	482b      	ldr	r0, [pc, #172]	; (80010ec <menu+0xba8>)
 8001040:	f007 fa9a 	bl	8008578 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d10d      	bne.n	8001066 <menu+0xb22>
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <menu+0xbac>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	f083 0301 	eor.w	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001058:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <menu+0xbd0>)
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <menu+0xbb8>)
 800105e:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <menu+0xbc0>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <menu+0xbc4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b04      	cmp	r3, #4
 800106c:	f040 80ba 	bne.w	80011e4 <menu+0xca0>
		if(dilSecim == 0) {
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <menu+0xba0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d105      	bne.n	8001084 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001078:	4a2a      	ldr	r2, [pc, #168]	; (8001124 <menu+0xbe0>)
 800107a:	2101      	movs	r1, #1
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff fa00 	bl	8000482 <lcd_print>
 8001082:	e008      	b.n	8001096 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <menu+0xba0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d104      	bne.n	8001096 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 800108c:	4a26      	ldr	r2, [pc, #152]	; (8001128 <menu+0xbe4>)
 800108e:	2101      	movs	r1, #1
 8001090:	2001      	movs	r0, #1
 8001092:	f7ff f9f6 	bl	8000482 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <menu+0xbe8>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d113      	bne.n	80010c6 <menu+0xb82>
			if(dilSecim == 0) {
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <menu+0xba0>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d105      	bne.n	80010b2 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <menu+0xbd4>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	2002      	movs	r0, #2
 80010ac:	f7ff f9e9 	bl	8000482 <lcd_print>
 80010b0:	e049      	b.n	8001146 <menu+0xc02>
			} else if(dilSecim == 1) {
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <menu+0xba0>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d145      	bne.n	8001146 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <menu+0xbd8>)
 80010bc:	2101      	movs	r1, #1
 80010be:	2002      	movs	r0, #2
 80010c0:	f7ff f9df 	bl	8000482 <lcd_print>
 80010c4:	e03f      	b.n	8001146 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <menu+0xbe8>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d13b      	bne.n	8001146 <menu+0xc02>
			if(dilSecim == 0) {
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <menu+0xba0>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d12e      	bne.n	8001134 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 80010d6:	4a16      	ldr	r2, [pc, #88]	; (8001130 <menu+0xbec>)
 80010d8:	2101      	movs	r1, #1
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff f9d1 	bl	8000482 <lcd_print>
 80010e0:	e031      	b.n	8001146 <menu+0xc02>
 80010e2:	bf00      	nop
 80010e4:	20000a4c 	.word	0x20000a4c
 80010e8:	0800bc54 	.word	0x0800bc54
 80010ec:	40010800 	.word	0x40010800
 80010f0:	20000a5a 	.word	0x20000a5a
 80010f4:	20000a3b 	.word	0x20000a3b
 80010f8:	20000a2d 	.word	0x20000a2d
 80010fc:	200009c0 	.word	0x200009c0
 8001100:	20000a32 	.word	0x20000a32
 8001104:	20000a57 	.word	0x20000a57
 8001108:	20000a2c 	.word	0x20000a2c
 800110c:	0800bc64 	.word	0x0800bc64
 8001110:	0800bc78 	.word	0x0800bc78
 8001114:	20000a30 	.word	0x20000a30
 8001118:	0800bc8c 	.word	0x0800bc8c
 800111c:	0800bca0 	.word	0x0800bca0
 8001120:	0800bcb4 	.word	0x0800bcb4
 8001124:	0800bcc4 	.word	0x0800bcc4
 8001128:	0800bcd8 	.word	0x0800bcd8
 800112c:	20000a31 	.word	0x20000a31
 8001130:	0800bcec 	.word	0x0800bcec
			} else if(dilSecim == 1) {
 8001134:	4b92      	ldr	r3, [pc, #584]	; (8001380 <menu+0xe3c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d104      	bne.n	8001146 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 800113c:	4a91      	ldr	r2, [pc, #580]	; (8001384 <menu+0xe40>)
 800113e:	2101      	movs	r1, #1
 8001140:	2002      	movs	r0, #2
 8001142:	f7ff f99e 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001146:	2102      	movs	r1, #2
 8001148:	488f      	ldr	r0, [pc, #572]	; (8001388 <menu+0xe44>)
 800114a:	f007 fa15 	bl	8008578 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d115      	bne.n	8001180 <menu+0xc3c>
 8001154:	4b8d      	ldr	r3, [pc, #564]	; (800138c <menu+0xe48>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	f083 0301 	eor.w	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00e      	beq.n	8001180 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001162:	4b8b      	ldr	r3, [pc, #556]	; (8001390 <menu+0xe4c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b89      	ldr	r3, [pc, #548]	; (8001390 <menu+0xe4c>)
 800116c:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800116e:	4b88      	ldr	r3, [pc, #544]	; (8001390 <menu+0xe4c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d902      	bls.n	800117c <menu+0xc38>
				yavaslamaLimit = 0;
 8001176:	4b86      	ldr	r3, [pc, #536]	; (8001390 <menu+0xe4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800117c:	f003 fd56 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001180:	2104      	movs	r1, #4
 8001182:	4881      	ldr	r0, [pc, #516]	; (8001388 <menu+0xe44>)
 8001184:	f007 f9f8 	bl	8008578 <HAL_GPIO_ReadPin>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d115      	bne.n	80011ba <menu+0xc76>
 800118e:	4b7f      	ldr	r3, [pc, #508]	; (800138c <menu+0xe48>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	f083 0301 	eor.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00e      	beq.n	80011ba <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 800119c:	4b7c      	ldr	r3, [pc, #496]	; (8001390 <menu+0xe4c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b7a      	ldr	r3, [pc, #488]	; (8001390 <menu+0xe4c>)
 80011a6:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80011a8:	4b79      	ldr	r3, [pc, #484]	; (8001390 <menu+0xe4c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80011b0:	4b77      	ldr	r3, [pc, #476]	; (8001390 <menu+0xe4c>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80011b6:	f003 fd39 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80011ba:	2108      	movs	r1, #8
 80011bc:	4872      	ldr	r0, [pc, #456]	; (8001388 <menu+0xe44>)
 80011be:	f007 f9db 	bl	8008578 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d10d      	bne.n	80011e4 <menu+0xca0>
 80011c8:	4b70      	ldr	r3, [pc, #448]	; (800138c <menu+0xe48>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	f083 0301 	eor.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 80011d6:	4b6e      	ldr	r3, [pc, #440]	; (8001390 <menu+0xe4c>)
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	4b6e      	ldr	r3, [pc, #440]	; (8001394 <menu+0xe50>)
 80011dc:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80011de:	4b6e      	ldr	r3, [pc, #440]	; (8001398 <menu+0xe54>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80011e4:	4b6d      	ldr	r3, [pc, #436]	; (800139c <menu+0xe58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b05      	cmp	r3, #5
 80011ea:	f040 80b9 	bne.w	8001360 <menu+0xe1c>
		if(dilSecim == 0) {
 80011ee:	4b64      	ldr	r3, [pc, #400]	; (8001380 <menu+0xe3c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d105      	bne.n	8001202 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 80011f6:	4a6a      	ldr	r2, [pc, #424]	; (80013a0 <menu+0xe5c>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	2001      	movs	r0, #1
 80011fc:	f7ff f941 	bl	8000482 <lcd_print>
 8001200:	e008      	b.n	8001214 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001202:	4b5f      	ldr	r3, [pc, #380]	; (8001380 <menu+0xe3c>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d104      	bne.n	8001214 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800120a:	4a66      	ldr	r2, [pc, #408]	; (80013a4 <menu+0xe60>)
 800120c:	2101      	movs	r1, #1
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff f937 	bl	8000482 <lcd_print>
		}

		if(altLimit == 0) {
 8001214:	4b64      	ldr	r3, [pc, #400]	; (80013a8 <menu+0xe64>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d113      	bne.n	8001244 <menu+0xd00>
			if(dilSecim == 0) {
 800121c:	4b58      	ldr	r3, [pc, #352]	; (8001380 <menu+0xe3c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001224:	4a61      	ldr	r2, [pc, #388]	; (80013ac <menu+0xe68>)
 8001226:	2101      	movs	r1, #1
 8001228:	2002      	movs	r0, #2
 800122a:	f7ff f92a 	bl	8000482 <lcd_print>
 800122e:	e020      	b.n	8001272 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001230:	4b53      	ldr	r3, [pc, #332]	; (8001380 <menu+0xe3c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d11c      	bne.n	8001272 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001238:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <menu+0xe6c>)
 800123a:	2101      	movs	r1, #1
 800123c:	2002      	movs	r0, #2
 800123e:	f7ff f920 	bl	8000482 <lcd_print>
 8001242:	e016      	b.n	8001272 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001244:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <menu+0xe64>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d112      	bne.n	8001272 <menu+0xd2e>
			if(dilSecim == 0){
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <menu+0xe3c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d105      	bne.n	8001260 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001254:	4a57      	ldr	r2, [pc, #348]	; (80013b4 <menu+0xe70>)
 8001256:	2101      	movs	r1, #1
 8001258:	2002      	movs	r0, #2
 800125a:	f7ff f912 	bl	8000482 <lcd_print>
 800125e:	e008      	b.n	8001272 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001260:	4b47      	ldr	r3, [pc, #284]	; (8001380 <menu+0xe3c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d104      	bne.n	8001272 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001268:	4a46      	ldr	r2, [pc, #280]	; (8001384 <menu+0xe40>)
 800126a:	2101      	movs	r1, #1
 800126c:	2002      	movs	r0, #2
 800126e:	f7ff f908 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001272:	2102      	movs	r1, #2
 8001274:	4844      	ldr	r0, [pc, #272]	; (8001388 <menu+0xe44>)
 8001276:	f007 f97f 	bl	8008578 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	2b01      	cmp	r3, #1
 800127e:	d119      	bne.n	80012b4 <menu+0xd70>
 8001280:	4b42      	ldr	r3, [pc, #264]	; (800138c <menu+0xe48>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f083 0301 	eor.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d012      	beq.n	80012b4 <menu+0xd70>
 800128e:	4b4a      	ldr	r3, [pc, #296]	; (80013b8 <menu+0xe74>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10e      	bne.n	80012b4 <menu+0xd70>
			altLimit = altLimit + 1;
 8001296:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <menu+0xe64>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <menu+0xe64>)
 80012a0:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80012a2:	4b41      	ldr	r3, [pc, #260]	; (80013a8 <menu+0xe64>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d902      	bls.n	80012b0 <menu+0xd6c>
				altLimit = 0;
 80012aa:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <menu+0xe64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80012b0:	f003 fcbc 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80012b4:	2104      	movs	r1, #4
 80012b6:	4834      	ldr	r0, [pc, #208]	; (8001388 <menu+0xe44>)
 80012b8:	f007 f95e 	bl	8008578 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d119      	bne.n	80012f6 <menu+0xdb2>
 80012c2:	4b32      	ldr	r3, [pc, #200]	; (800138c <menu+0xe48>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	f083 0301 	eor.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d012      	beq.n	80012f6 <menu+0xdb2>
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <menu+0xe74>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10e      	bne.n	80012f6 <menu+0xdb2>
			altLimit = altLimit - 1;
 80012d8:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <menu+0xe64>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	3b01      	subs	r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <menu+0xe64>)
 80012e2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <menu+0xe64>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <menu+0xdae>
		   		altLimit = 1;
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <menu+0xe64>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80012f2:	f003 fc9b 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80012f6:	2108      	movs	r1, #8
 80012f8:	4823      	ldr	r0, [pc, #140]	; (8001388 <menu+0xe44>)
 80012fa:	f007 f93d 	bl	8008578 <HAL_GPIO_ReadPin>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b01      	cmp	r3, #1
 8001302:	d12d      	bne.n	8001360 <menu+0xe1c>
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <menu+0xe48>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	f083 0301 	eor.w	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d026      	beq.n	8001360 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <menu+0xe64>)
 8001314:	781a      	ldrb	r2, [r3, #0]
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <menu+0xe50>)
 8001318:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <menu+0xe64>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d110      	bne.n	8001344 <menu+0xe00>
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <menu+0xe78>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <menu+0xdee>
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <menu+0xe78>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d108      	bne.n	8001344 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <menu+0xe78>)
 8001334:	2203      	movs	r2, #3
 8001336:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <menu+0xe78>)
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <menu+0xe50>)
 800133e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001342:	e00a      	b.n	800135a <menu+0xe16>
			} else if(altLimit == 0) {
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <menu+0xe64>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d106      	bne.n	800135a <menu+0xe16>
				platformSilindirTipi = 0;
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <menu+0xe7c>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <menu+0xe7c>)
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <menu+0xe50>)
 8001358:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <menu+0xe54>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <menu+0xe58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b06      	cmp	r3, #6
 8001366:	f040 80b6 	bne.w	80014d6 <menu+0xf92>
		if(dilSecim == 0) {
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <menu+0xe3c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d12a      	bne.n	80013c8 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <menu+0xe80>)
 8001374:	2101      	movs	r1, #1
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff f883 	bl	8000482 <lcd_print>
 800137c:	e02d      	b.n	80013da <menu+0xe96>
 800137e:	bf00      	nop
 8001380:	20000a4c 	.word	0x20000a4c
 8001384:	0800bd00 	.word	0x0800bd00
 8001388:	40010800 	.word	0x40010800
 800138c:	20000a5a 	.word	0x20000a5a
 8001390:	20000a31 	.word	0x20000a31
 8001394:	200009c0 	.word	0x200009c0
 8001398:	20000a57 	.word	0x20000a57
 800139c:	20000a2c 	.word	0x20000a2c
 80013a0:	0800bd14 	.word	0x0800bd14
 80013a4:	0800bd28 	.word	0x0800bd28
 80013a8:	20000a32 	.word	0x20000a32
 80013ac:	0800bc8c 	.word	0x0800bc8c
 80013b0:	0800bca0 	.word	0x0800bca0
 80013b4:	0800bcec 	.word	0x0800bcec
 80013b8:	20000a2d 	.word	0x20000a2d
 80013bc:	20000a39 	.word	0x20000a39
 80013c0:	20000a3f 	.word	0x20000a3f
 80013c4:	0800bd3c 	.word	0x0800bd3c
		} else if(dilSecim == 1){
 80013c8:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <menu+0x1070>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d104      	bne.n	80013da <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80013d0:	4a79      	ldr	r2, [pc, #484]	; (80015b8 <menu+0x1074>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	2001      	movs	r0, #1
 80013d6:	f7ff f854 	bl	8000482 <lcd_print>
		}
		if(basincSalteri == 0){
 80013da:	4b78      	ldr	r3, [pc, #480]	; (80015bc <menu+0x1078>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d113      	bne.n	800140a <menu+0xec6>
			if(dilSecim == 0) {
 80013e2:	4b74      	ldr	r3, [pc, #464]	; (80015b4 <menu+0x1070>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d105      	bne.n	80013f6 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80013ea:	4a75      	ldr	r2, [pc, #468]	; (80015c0 <menu+0x107c>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	2002      	movs	r0, #2
 80013f0:	f7ff f847 	bl	8000482 <lcd_print>
 80013f4:	e020      	b.n	8001438 <menu+0xef4>
			} else if(dilSecim == 1){
 80013f6:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <menu+0x1070>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d11c      	bne.n	8001438 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80013fe:	4a71      	ldr	r2, [pc, #452]	; (80015c4 <menu+0x1080>)
 8001400:	2101      	movs	r1, #1
 8001402:	2002      	movs	r0, #2
 8001404:	f7ff f83d 	bl	8000482 <lcd_print>
 8001408:	e016      	b.n	8001438 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800140a:	4b6c      	ldr	r3, [pc, #432]	; (80015bc <menu+0x1078>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d112      	bne.n	8001438 <menu+0xef4>
			if(dilSecim == 0) {
 8001412:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <menu+0x1070>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d105      	bne.n	8001426 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800141a:	4a6b      	ldr	r2, [pc, #428]	; (80015c8 <menu+0x1084>)
 800141c:	2101      	movs	r1, #1
 800141e:	2002      	movs	r0, #2
 8001420:	f7ff f82f 	bl	8000482 <lcd_print>
 8001424:	e008      	b.n	8001438 <menu+0xef4>
			} else if(dilSecim == 1) {
 8001426:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <menu+0x1070>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d104      	bne.n	8001438 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800142e:	4a67      	ldr	r2, [pc, #412]	; (80015cc <menu+0x1088>)
 8001430:	2101      	movs	r1, #1
 8001432:	2002      	movs	r0, #2
 8001434:	f7ff f825 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001438:	2102      	movs	r1, #2
 800143a:	4865      	ldr	r0, [pc, #404]	; (80015d0 <menu+0x108c>)
 800143c:	f007 f89c 	bl	8008578 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b01      	cmp	r3, #1
 8001444:	d115      	bne.n	8001472 <menu+0xf2e>
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <menu+0x1090>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	f083 0301 	eor.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00e      	beq.n	8001472 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <menu+0x1078>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b57      	ldr	r3, [pc, #348]	; (80015bc <menu+0x1078>)
 800145e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001460:	4b56      	ldr	r3, [pc, #344]	; (80015bc <menu+0x1078>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d902      	bls.n	800146e <menu+0xf2a>
				basincSalteri = 0;
 8001468:	4b54      	ldr	r3, [pc, #336]	; (80015bc <menu+0x1078>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800146e:	f003 fbdd 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001472:	2104      	movs	r1, #4
 8001474:	4856      	ldr	r0, [pc, #344]	; (80015d0 <menu+0x108c>)
 8001476:	f007 f87f 	bl	8008578 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	2b01      	cmp	r3, #1
 800147e:	d115      	bne.n	80014ac <menu+0xf68>
 8001480:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <menu+0x1090>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f083 0301 	eor.w	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00e      	beq.n	80014ac <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800148e:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <menu+0x1078>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	3b01      	subs	r3, #1
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <menu+0x1078>)
 8001498:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <menu+0x1078>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <menu+0xf64>
		   		basincSalteri = 1;
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <menu+0x1078>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80014a8:	f003 fbc0 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80014ac:	2108      	movs	r1, #8
 80014ae:	4848      	ldr	r0, [pc, #288]	; (80015d0 <menu+0x108c>)
 80014b0:	f007 f862 	bl	8008578 <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d10d      	bne.n	80014d6 <menu+0xf92>
 80014ba:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <menu+0x1090>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	f083 0301 	eor.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80014c8:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <menu+0x1078>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <menu+0x1094>)
 80014ce:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80014d0:	4b42      	ldr	r3, [pc, #264]	; (80015dc <menu+0x1098>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80014d6:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <menu+0x109c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b07      	cmp	r3, #7
 80014dc:	f040 80f5 	bne.w	80016ca <menu+0x1186>
		if(dilSecim == 0) {
 80014e0:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <menu+0x1070>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80014e8:	4a3e      	ldr	r2, [pc, #248]	; (80015e4 <menu+0x10a0>)
 80014ea:	2101      	movs	r1, #1
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7fe ffc8 	bl	8000482 <lcd_print>
 80014f2:	e008      	b.n	8001506 <menu+0xfc2>
		} else if(dilSecim == 1){
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <menu+0x1070>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d104      	bne.n	8001506 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80014fc:	4a3a      	ldr	r2, [pc, #232]	; (80015e8 <menu+0x10a4>)
 80014fe:	2101      	movs	r1, #1
 8001500:	2001      	movs	r0, #1
 8001502:	f7fe ffbe 	bl	8000482 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <menu+0x10a8>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d113      	bne.n	8001536 <menu+0xff2>
			if(dilSecim == 0) {
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <menu+0x1070>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d105      	bne.n	8001522 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8001516:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <menu+0x107c>)
 8001518:	2101      	movs	r1, #1
 800151a:	2002      	movs	r0, #2
 800151c:	f7fe ffb1 	bl	8000482 <lcd_print>
 8001520:	e079      	b.n	8001616 <menu+0x10d2>
			} else if(dilSecim == 1){
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <menu+0x1070>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d175      	bne.n	8001616 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800152a:	4a26      	ldr	r2, [pc, #152]	; (80015c4 <menu+0x1080>)
 800152c:	2101      	movs	r1, #1
 800152e:	2002      	movs	r0, #2
 8001530:	f7fe ffa7 	bl	8000482 <lcd_print>
 8001534:	e06f      	b.n	8001616 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <menu+0x10a8>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d113      	bne.n	8001566 <menu+0x1022>
			if(dilSecim == 0) {
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <menu+0x1070>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d105      	bne.n	8001552 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8001546:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <menu+0x10ac>)
 8001548:	2101      	movs	r1, #1
 800154a:	2002      	movs	r0, #2
 800154c:	f7fe ff99 	bl	8000482 <lcd_print>
 8001550:	e061      	b.n	8001616 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <menu+0x1070>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d15d      	bne.n	8001616 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800155a:	4a26      	ldr	r2, [pc, #152]	; (80015f4 <menu+0x10b0>)
 800155c:	2101      	movs	r1, #1
 800155e:	2002      	movs	r0, #2
 8001560:	f7fe ff8f 	bl	8000482 <lcd_print>
 8001564:	e057      	b.n	8001616 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <menu+0x10a8>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d113      	bne.n	8001596 <menu+0x1052>
			if(dilSecim == 0) {
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <menu+0x1070>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d105      	bne.n	8001582 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8001576:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <menu+0x10b4>)
 8001578:	2101      	movs	r1, #1
 800157a:	2002      	movs	r0, #2
 800157c:	f7fe ff81 	bl	8000482 <lcd_print>
 8001580:	e049      	b.n	8001616 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <menu+0x1070>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d145      	bne.n	8001616 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <menu+0x10b8>)
 800158c:	2101      	movs	r1, #1
 800158e:	2002      	movs	r0, #2
 8001590:	f7fe ff77 	bl	8000482 <lcd_print>
 8001594:	e03f      	b.n	8001616 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <menu+0x10a8>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b03      	cmp	r3, #3
 800159c:	d13b      	bne.n	8001616 <menu+0x10d2>
			if(dilSecim == 0) {
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <menu+0x1070>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d12e      	bne.n	8001604 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80015a6:	4a16      	ldr	r2, [pc, #88]	; (8001600 <menu+0x10bc>)
 80015a8:	2101      	movs	r1, #1
 80015aa:	2002      	movs	r0, #2
 80015ac:	f7fe ff69 	bl	8000482 <lcd_print>
 80015b0:	e031      	b.n	8001616 <menu+0x10d2>
 80015b2:	bf00      	nop
 80015b4:	20000a4c 	.word	0x20000a4c
 80015b8:	0800bd4c 	.word	0x0800bd4c
 80015bc:	20000a33 	.word	0x20000a33
 80015c0:	0800bc8c 	.word	0x0800bc8c
 80015c4:	0800bca0 	.word	0x0800bca0
 80015c8:	0800bcec 	.word	0x0800bcec
 80015cc:	0800bd00 	.word	0x0800bd00
 80015d0:	40010800 	.word	0x40010800
 80015d4:	20000a5a 	.word	0x20000a5a
 80015d8:	200009c0 	.word	0x200009c0
 80015dc:	20000a57 	.word	0x20000a57
 80015e0:	20000a2c 	.word	0x20000a2c
 80015e4:	0800bd5c 	.word	0x0800bd5c
 80015e8:	0800bd70 	.word	0x0800bd70
 80015ec:	20000a34 	.word	0x20000a34
 80015f0:	0800bd84 	.word	0x0800bd84
 80015f4:	0800bd98 	.word	0x0800bd98
 80015f8:	0800bdac 	.word	0x0800bdac
 80015fc:	0800bdc0 	.word	0x0800bdc0
 8001600:	0800bdd4 	.word	0x0800bdd4
			} else if(dilSecim == 1){
 8001604:	4b99      	ldr	r3, [pc, #612]	; (800186c <menu+0x1328>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d104      	bne.n	8001616 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800160c:	4a98      	ldr	r2, [pc, #608]	; (8001870 <menu+0x132c>)
 800160e:	2101      	movs	r1, #1
 8001610:	2002      	movs	r0, #2
 8001612:	f7fe ff36 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001616:	2102      	movs	r1, #2
 8001618:	4896      	ldr	r0, [pc, #600]	; (8001874 <menu+0x1330>)
 800161a:	f006 ffad 	bl	8008578 <HAL_GPIO_ReadPin>
 800161e:	4603      	mov	r3, r0
 8001620:	2b01      	cmp	r3, #1
 8001622:	d115      	bne.n	8001650 <menu+0x110c>
 8001624:	4b94      	ldr	r3, [pc, #592]	; (8001878 <menu+0x1334>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f083 0301 	eor.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00e      	beq.n	8001650 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8001632:	4b92      	ldr	r3, [pc, #584]	; (800187c <menu+0x1338>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b90      	ldr	r3, [pc, #576]	; (800187c <menu+0x1338>)
 800163c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800163e:	4b8f      	ldr	r3, [pc, #572]	; (800187c <menu+0x1338>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d902      	bls.n	800164c <menu+0x1108>
				kapiSecimleri = 0;
 8001646:	4b8d      	ldr	r3, [pc, #564]	; (800187c <menu+0x1338>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800164c:	f003 faee 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001650:	2104      	movs	r1, #4
 8001652:	4888      	ldr	r0, [pc, #544]	; (8001874 <menu+0x1330>)
 8001654:	f006 ff90 	bl	8008578 <HAL_GPIO_ReadPin>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d115      	bne.n	800168a <menu+0x1146>
 800165e:	4b86      	ldr	r3, [pc, #536]	; (8001878 <menu+0x1334>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	f083 0301 	eor.w	r3, r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00e      	beq.n	800168a <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 800166c:	4b83      	ldr	r3, [pc, #524]	; (800187c <menu+0x1338>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b81      	ldr	r3, [pc, #516]	; (800187c <menu+0x1338>)
 8001676:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001678:	4b80      	ldr	r3, [pc, #512]	; (800187c <menu+0x1338>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b04      	cmp	r3, #4
 800167e:	d902      	bls.n	8001686 <menu+0x1142>
		   		kapiSecimleri = 3;
 8001680:	4b7e      	ldr	r3, [pc, #504]	; (800187c <menu+0x1338>)
 8001682:	2203      	movs	r2, #3
 8001684:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001686:	f003 fad1 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800168a:	2108      	movs	r1, #8
 800168c:	4879      	ldr	r0, [pc, #484]	; (8001874 <menu+0x1330>)
 800168e:	f006 ff73 	bl	8008578 <HAL_GPIO_ReadPin>
 8001692:	4603      	mov	r3, r0
 8001694:	2b01      	cmp	r3, #1
 8001696:	d118      	bne.n	80016ca <menu+0x1186>
 8001698:	4b77      	ldr	r3, [pc, #476]	; (8001878 <menu+0x1334>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	f083 0301 	eor.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d011      	beq.n	80016ca <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80016a6:	4b75      	ldr	r3, [pc, #468]	; (800187c <menu+0x1338>)
 80016a8:	781a      	ldrb	r2, [r3, #0]
 80016aa:	4b75      	ldr	r3, [pc, #468]	; (8001880 <menu+0x133c>)
 80016ac:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80016ae:	4b73      	ldr	r3, [pc, #460]	; (800187c <menu+0x1338>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <menu+0x1180>
				altLimit = 1;
 80016b6:	4b73      	ldr	r3, [pc, #460]	; (8001884 <menu+0x1340>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80016bc:	4b71      	ldr	r3, [pc, #452]	; (8001884 <menu+0x1340>)
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <menu+0x133c>)
 80016c2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80016c4:	4b70      	ldr	r3, [pc, #448]	; (8001888 <menu+0x1344>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80016ca:	4b70      	ldr	r3, [pc, #448]	; (800188c <menu+0x1348>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	f040 8092 	bne.w	80017f8 <menu+0x12b4>
		if(dilSecim == 0) {
 80016d4:	4b65      	ldr	r3, [pc, #404]	; (800186c <menu+0x1328>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80016dc:	4a6c      	ldr	r2, [pc, #432]	; (8001890 <menu+0x134c>)
 80016de:	2101      	movs	r1, #1
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7fe fece 	bl	8000482 <lcd_print>
 80016e6:	e008      	b.n	80016fa <menu+0x11b6>
		} else if(dilSecim == 1) {
 80016e8:	4b60      	ldr	r3, [pc, #384]	; (800186c <menu+0x1328>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d104      	bne.n	80016fa <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80016f0:	4a68      	ldr	r2, [pc, #416]	; (8001894 <menu+0x1350>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7fe fec4 	bl	8000482 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80016fa:	4b67      	ldr	r3, [pc, #412]	; (8001898 <menu+0x1354>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d113      	bne.n	800172a <menu+0x11e6>
			if(dilSecim == 0) {
 8001702:	4b5a      	ldr	r3, [pc, #360]	; (800186c <menu+0x1328>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d105      	bne.n	8001716 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800170a:	4a64      	ldr	r2, [pc, #400]	; (800189c <menu+0x1358>)
 800170c:	2101      	movs	r1, #1
 800170e:	2002      	movs	r0, #2
 8001710:	f7fe feb7 	bl	8000482 <lcd_print>
 8001714:	e020      	b.n	8001758 <menu+0x1214>
			} else if(dilSecim == 1) {
 8001716:	4b55      	ldr	r3, [pc, #340]	; (800186c <menu+0x1328>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d11c      	bne.n	8001758 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800171e:	4a60      	ldr	r2, [pc, #384]	; (80018a0 <menu+0x135c>)
 8001720:	2101      	movs	r1, #1
 8001722:	2002      	movs	r0, #2
 8001724:	f7fe fead 	bl	8000482 <lcd_print>
 8001728:	e016      	b.n	8001758 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <menu+0x1354>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d112      	bne.n	8001758 <menu+0x1214>
			if(dilSecim == 0){
 8001732:	4b4e      	ldr	r3, [pc, #312]	; (800186c <menu+0x1328>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d105      	bne.n	8001746 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800173a:	4a5a      	ldr	r2, [pc, #360]	; (80018a4 <menu+0x1360>)
 800173c:	2101      	movs	r1, #1
 800173e:	2002      	movs	r0, #2
 8001740:	f7fe fe9f 	bl	8000482 <lcd_print>
 8001744:	e008      	b.n	8001758 <menu+0x1214>
			} else if(dilSecim == 1){
 8001746:	4b49      	ldr	r3, [pc, #292]	; (800186c <menu+0x1328>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d104      	bne.n	8001758 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800174e:	4a56      	ldr	r2, [pc, #344]	; (80018a8 <menu+0x1364>)
 8001750:	2101      	movs	r1, #1
 8001752:	2002      	movs	r0, #2
 8001754:	f7fe fe95 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001758:	2102      	movs	r1, #2
 800175a:	4846      	ldr	r0, [pc, #280]	; (8001874 <menu+0x1330>)
 800175c:	f006 ff0c 	bl	8008578 <HAL_GPIO_ReadPin>
 8001760:	4603      	mov	r3, r0
 8001762:	2b01      	cmp	r3, #1
 8001764:	d115      	bne.n	8001792 <menu+0x124e>
 8001766:	4b44      	ldr	r3, [pc, #272]	; (8001878 <menu+0x1334>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	f083 0301 	eor.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00e      	beq.n	8001792 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8001774:	4b48      	ldr	r3, [pc, #288]	; (8001898 <menu+0x1354>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b46      	ldr	r3, [pc, #280]	; (8001898 <menu+0x1354>)
 800177e:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001780:	4b45      	ldr	r3, [pc, #276]	; (8001898 <menu+0x1354>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d902      	bls.n	800178e <menu+0x124a>
				kapiAcTipi = 0;
 8001788:	4b43      	ldr	r3, [pc, #268]	; (8001898 <menu+0x1354>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800178e:	f003 fa4d 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001792:	2104      	movs	r1, #4
 8001794:	4837      	ldr	r0, [pc, #220]	; (8001874 <menu+0x1330>)
 8001796:	f006 feef 	bl	8008578 <HAL_GPIO_ReadPin>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d115      	bne.n	80017cc <menu+0x1288>
 80017a0:	4b35      	ldr	r3, [pc, #212]	; (8001878 <menu+0x1334>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f083 0301 	eor.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00e      	beq.n	80017cc <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80017ae:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <menu+0x1354>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b38      	ldr	r3, [pc, #224]	; (8001898 <menu+0x1354>)
 80017b8:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <menu+0x1354>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <menu+0x1284>
		   		kapiAcTipi = 1;
 80017c2:	4b35      	ldr	r3, [pc, #212]	; (8001898 <menu+0x1354>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80017c8:	f003 fa30 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80017cc:	2108      	movs	r1, #8
 80017ce:	4829      	ldr	r0, [pc, #164]	; (8001874 <menu+0x1330>)
 80017d0:	f006 fed2 	bl	8008578 <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10e      	bne.n	80017f8 <menu+0x12b4>
 80017da:	4b27      	ldr	r3, [pc, #156]	; (8001878 <menu+0x1334>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f083 0301 	eor.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <menu+0x1354>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <menu+0x133c>)
 80017ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <menu+0x1344>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <menu+0x1348>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	f040 80b9 	bne.w	8001974 <menu+0x1430>
		if(dilSecim == 0){
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <menu+0x1328>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800180a:	4a28      	ldr	r2, [pc, #160]	; (80018ac <menu+0x1368>)
 800180c:	2101      	movs	r1, #1
 800180e:	2001      	movs	r0, #1
 8001810:	f7fe fe37 	bl	8000482 <lcd_print>
 8001814:	e008      	b.n	8001828 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <menu+0x1328>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d104      	bne.n	8001828 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800181e:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <menu+0x136c>)
 8001820:	2101      	movs	r1, #1
 8001822:	2001      	movs	r0, #1
 8001824:	f7fe fe2d 	bl	8000482 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <menu+0x1370>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d105      	bne.n	800183c <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8001830:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <menu+0x1374>)
 8001832:	2101      	movs	r1, #1
 8001834:	2002      	movs	r0, #2
 8001836:	f7fe fe24 	bl	8000482 <lcd_print>
 800183a:	e04c      	b.n	80018d6 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <menu+0x1370>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d13f      	bne.n	80018c4 <menu+0x1380>
			if(dilSecim == 0){
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <menu+0x1328>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d105      	bne.n	8001858 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <menu+0x1378>)
 800184e:	2101      	movs	r1, #1
 8001850:	2002      	movs	r0, #2
 8001852:	f7fe fe16 	bl	8000482 <lcd_print>
 8001856:	e03e      	b.n	80018d6 <menu+0x1392>
			} else if(dilSecim == 1) {
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <menu+0x1328>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d13a      	bne.n	80018d6 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8001860:	4a17      	ldr	r2, [pc, #92]	; (80018c0 <menu+0x137c>)
 8001862:	2101      	movs	r1, #1
 8001864:	2002      	movs	r0, #2
 8001866:	f7fe fe0c 	bl	8000482 <lcd_print>
 800186a:	e034      	b.n	80018d6 <menu+0x1392>
 800186c:	20000a4c 	.word	0x20000a4c
 8001870:	0800bde8 	.word	0x0800bde8
 8001874:	40010800 	.word	0x40010800
 8001878:	20000a5a 	.word	0x20000a5a
 800187c:	20000a34 	.word	0x20000a34
 8001880:	200009c0 	.word	0x200009c0
 8001884:	20000a32 	.word	0x20000a32
 8001888:	20000a57 	.word	0x20000a57
 800188c:	20000a2c 	.word	0x20000a2c
 8001890:	0800bdfc 	.word	0x0800bdfc
 8001894:	0800be10 	.word	0x0800be10
 8001898:	20000a38 	.word	0x20000a38
 800189c:	0800be24 	.word	0x0800be24
 80018a0:	0800be34 	.word	0x0800be34
 80018a4:	0800be44 	.word	0x0800be44
 80018a8:	0800be58 	.word	0x0800be58
 80018ac:	0800be6c 	.word	0x0800be6c
 80018b0:	0800be80 	.word	0x0800be80
 80018b4:	20000a35 	.word	0x20000a35
 80018b8:	0800be94 	.word	0x0800be94
 80018bc:	0800bea8 	.word	0x0800bea8
 80018c0:	0800beb8 	.word	0x0800beb8
			}
		} else if(kapi1Tip == 2) {
 80018c4:	4b8a      	ldr	r3, [pc, #552]	; (8001af0 <menu+0x15ac>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d104      	bne.n	80018d6 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80018cc:	4a89      	ldr	r2, [pc, #548]	; (8001af4 <menu+0x15b0>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	2002      	movs	r0, #2
 80018d2:	f7fe fdd6 	bl	8000482 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80018d6:	2102      	movs	r1, #2
 80018d8:	4887      	ldr	r0, [pc, #540]	; (8001af8 <menu+0x15b4>)
 80018da:	f006 fe4d 	bl	8008578 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d115      	bne.n	8001910 <menu+0x13cc>
 80018e4:	4b85      	ldr	r3, [pc, #532]	; (8001afc <menu+0x15b8>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	f083 0301 	eor.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00e      	beq.n	8001910 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80018f2:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <menu+0x15ac>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b7d      	ldr	r3, [pc, #500]	; (8001af0 <menu+0x15ac>)
 80018fc:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80018fe:	4b7c      	ldr	r3, [pc, #496]	; (8001af0 <menu+0x15ac>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d902      	bls.n	800190c <menu+0x13c8>
				kapi1Tip = 0;
 8001906:	4b7a      	ldr	r3, [pc, #488]	; (8001af0 <menu+0x15ac>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800190c:	f003 f98e 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001910:	2104      	movs	r1, #4
 8001912:	4879      	ldr	r0, [pc, #484]	; (8001af8 <menu+0x15b4>)
 8001914:	f006 fe30 	bl	8008578 <HAL_GPIO_ReadPin>
 8001918:	4603      	mov	r3, r0
 800191a:	2b01      	cmp	r3, #1
 800191c:	d115      	bne.n	800194a <menu+0x1406>
 800191e:	4b77      	ldr	r3, [pc, #476]	; (8001afc <menu+0x15b8>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	f083 0301 	eor.w	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00e      	beq.n	800194a <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 800192c:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <menu+0x15ac>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b6e      	ldr	r3, [pc, #440]	; (8001af0 <menu+0x15ac>)
 8001936:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001938:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <menu+0x15ac>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d902      	bls.n	8001946 <menu+0x1402>
		   		kapi1Tip = 2;
 8001940:	4b6b      	ldr	r3, [pc, #428]	; (8001af0 <menu+0x15ac>)
 8001942:	2202      	movs	r2, #2
 8001944:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001946:	f003 f971 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800194a:	2108      	movs	r1, #8
 800194c:	486a      	ldr	r0, [pc, #424]	; (8001af8 <menu+0x15b4>)
 800194e:	f006 fe13 	bl	8008578 <HAL_GPIO_ReadPin>
 8001952:	4603      	mov	r3, r0
 8001954:	2b01      	cmp	r3, #1
 8001956:	d10d      	bne.n	8001974 <menu+0x1430>
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <menu+0x15b8>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	f083 0301 	eor.w	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8001966:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <menu+0x15ac>)
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	4b65      	ldr	r3, [pc, #404]	; (8001b00 <menu+0x15bc>)
 800196c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800196e:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <menu+0x15c0>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <menu+0x15c4>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b0a      	cmp	r3, #10
 800197a:	d17f      	bne.n	8001a7c <menu+0x1538>
		if(dilSecim == 0) {
 800197c:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <menu+0x15c8>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10a      	bne.n	800199a <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8001984:	4a62      	ldr	r2, [pc, #392]	; (8001b10 <menu+0x15cc>)
 8001986:	2101      	movs	r1, #1
 8001988:	2001      	movs	r0, #1
 800198a:	f7fe fd7a 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800198e:	4a61      	ldr	r2, [pc, #388]	; (8001b14 <menu+0x15d0>)
 8001990:	2101      	movs	r1, #1
 8001992:	2002      	movs	r0, #2
 8001994:	f7fe fd75 	bl	8000482 <lcd_print>
 8001998:	e00d      	b.n	80019b6 <menu+0x1472>
		} else if(dilSecim == 1) {
 800199a:	4b5c      	ldr	r3, [pc, #368]	; (8001b0c <menu+0x15c8>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d109      	bne.n	80019b6 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80019a2:	4a5d      	ldr	r2, [pc, #372]	; (8001b18 <menu+0x15d4>)
 80019a4:	2101      	movs	r1, #1
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7fe fd6b 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80019ac:	4a5b      	ldr	r2, [pc, #364]	; (8001b1c <menu+0x15d8>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	2002      	movs	r0, #2
 80019b2:	f7fe fd66 	bl	8000482 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <menu+0x15dc>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	220a      	movs	r2, #10
 80019bc:	4959      	ldr	r1, [pc, #356]	; (8001b24 <menu+0x15e0>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f009 fec2 	bl	800b748 <itoa>
		lcd_print(2,16,snum);
 80019c4:	4a57      	ldr	r2, [pc, #348]	; (8001b24 <menu+0x15e0>)
 80019c6:	2110      	movs	r1, #16
 80019c8:	2002      	movs	r0, #2
 80019ca:	f7fe fd5a 	bl	8000482 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80019ce:	2102      	movs	r1, #2
 80019d0:	4849      	ldr	r0, [pc, #292]	; (8001af8 <menu+0x15b4>)
 80019d2:	f006 fdd1 	bl	8008578 <HAL_GPIO_ReadPin>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d119      	bne.n	8001a10 <menu+0x14cc>
 80019dc:	4b47      	ldr	r3, [pc, #284]	; (8001afc <menu+0x15b8>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	f083 0301 	eor.w	r3, r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d012      	beq.n	8001a10 <menu+0x14cc>
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <menu+0x15ac>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10e      	bne.n	8001a10 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <menu+0x15dc>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <menu+0x15dc>)
 80019fc:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80019fe:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <menu+0x15dc>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d902      	bls.n	8001a0c <menu+0x14c8>
				kapi1AcSure = 0;
 8001a06:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <menu+0x15dc>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a0c:	f003 f90e 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001a10:	2104      	movs	r1, #4
 8001a12:	4839      	ldr	r0, [pc, #228]	; (8001af8 <menu+0x15b4>)
 8001a14:	f006 fdb0 	bl	8008578 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d119      	bne.n	8001a52 <menu+0x150e>
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <menu+0x15b8>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	f083 0301 	eor.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d012      	beq.n	8001a52 <menu+0x150e>
 8001a2c:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <menu+0x15ac>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10e      	bne.n	8001a52 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <menu+0x15dc>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <menu+0x15dc>)
 8001a3e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001a40:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <menu+0x15dc>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b06      	cmp	r3, #6
 8001a46:	d902      	bls.n	8001a4e <menu+0x150a>
		   		kapi1AcSure = 5;
 8001a48:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <menu+0x15dc>)
 8001a4a:	2205      	movs	r2, #5
 8001a4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a4e:	f003 f8ed 	bl	8004c2c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a52:	2108      	movs	r1, #8
 8001a54:	4828      	ldr	r0, [pc, #160]	; (8001af8 <menu+0x15b4>)
 8001a56:	f006 fd8f 	bl	8008578 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10d      	bne.n	8001a7c <menu+0x1538>
 8001a60:	4b26      	ldr	r3, [pc, #152]	; (8001afc <menu+0x15b8>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	f083 0301 	eor.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	; (8001b20 <menu+0x15dc>)
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <menu+0x15bc>)
 8001a74:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <menu+0x15c0>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <menu+0x15c4>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b0b      	cmp	r3, #11
 8001a82:	f040 80b5 	bne.w	8001bf0 <menu+0x16ac>
		if(dilSecim == 0) {
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <menu+0x15c8>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001a8e:	4a26      	ldr	r2, [pc, #152]	; (8001b28 <menu+0x15e4>)
 8001a90:	2101      	movs	r1, #1
 8001a92:	2001      	movs	r0, #1
 8001a94:	f7fe fcf5 	bl	8000482 <lcd_print>
 8001a98:	e008      	b.n	8001aac <menu+0x1568>
		} else if(dilSecim == 1) {
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <menu+0x15c8>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d104      	bne.n	8001aac <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001aa2:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <menu+0x15e8>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f7fe fceb 	bl	8000482 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001aac:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <menu+0x15ec>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001ab4:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <menu+0x15f0>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f7fe fce2 	bl	8000482 <lcd_print>
 8001abe:	e048      	b.n	8001b52 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <menu+0x15ec>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d13b      	bne.n	8001b40 <menu+0x15fc>
			if(dilSecim == 0) {
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <menu+0x15c8>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001ad0:	4a19      	ldr	r2, [pc, #100]	; (8001b38 <menu+0x15f4>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f7fe fcd4 	bl	8000482 <lcd_print>
 8001ada:	e03a      	b.n	8001b52 <menu+0x160e>
			} else if(dilSecim == 1) {
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <menu+0x15c8>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d136      	bne.n	8001b52 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001ae4:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <menu+0x15f8>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f7fe fcca 	bl	8000482 <lcd_print>
 8001aee:	e030      	b.n	8001b52 <menu+0x160e>
 8001af0:	20000a35 	.word	0x20000a35
 8001af4:	0800becc 	.word	0x0800becc
 8001af8:	40010800 	.word	0x40010800
 8001afc:	20000a5a 	.word	0x20000a5a
 8001b00:	200009c0 	.word	0x200009c0
 8001b04:	20000a57 	.word	0x20000a57
 8001b08:	20000a2c 	.word	0x20000a2c
 8001b0c:	20000a4c 	.word	0x20000a4c
 8001b10:	0800bedc 	.word	0x0800bedc
 8001b14:	0800bef0 	.word	0x0800bef0
 8001b18:	0800bf00 	.word	0x0800bf00
 8001b1c:	0800bf14 	.word	0x0800bf14
 8001b20:	20000a45 	.word	0x20000a45
 8001b24:	20000a00 	.word	0x20000a00
 8001b28:	0800bf24 	.word	0x0800bf24
 8001b2c:	0800bf38 	.word	0x0800bf38
 8001b30:	20000a36 	.word	0x20000a36
 8001b34:	0800be94 	.word	0x0800be94
 8001b38:	0800bea8 	.word	0x0800bea8
 8001b3c:	0800beb8 	.word	0x0800beb8
			}
		} else if(kapi2Tip == 2) {
 8001b40:	4b8a      	ldr	r3, [pc, #552]	; (8001d6c <menu+0x1828>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d104      	bne.n	8001b52 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001b48:	4a89      	ldr	r2, [pc, #548]	; (8001d70 <menu+0x182c>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f7fe fc98 	bl	8000482 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b52:	2102      	movs	r1, #2
 8001b54:	4887      	ldr	r0, [pc, #540]	; (8001d74 <menu+0x1830>)
 8001b56:	f006 fd0f 	bl	8008578 <HAL_GPIO_ReadPin>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d115      	bne.n	8001b8c <menu+0x1648>
 8001b60:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <menu+0x1834>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	f083 0301 	eor.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00e      	beq.n	8001b8c <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001b6e:	4b7f      	ldr	r3, [pc, #508]	; (8001d6c <menu+0x1828>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b7d      	ldr	r3, [pc, #500]	; (8001d6c <menu+0x1828>)
 8001b78:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001b7a:	4b7c      	ldr	r3, [pc, #496]	; (8001d6c <menu+0x1828>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d902      	bls.n	8001b88 <menu+0x1644>
				kapi2Tip = 0;
 8001b82:	4b7a      	ldr	r3, [pc, #488]	; (8001d6c <menu+0x1828>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b88:	f003 f850 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	4879      	ldr	r0, [pc, #484]	; (8001d74 <menu+0x1830>)
 8001b90:	f006 fcf2 	bl	8008578 <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d115      	bne.n	8001bc6 <menu+0x1682>
 8001b9a:	4b77      	ldr	r3, [pc, #476]	; (8001d78 <menu+0x1834>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f083 0301 	eor.w	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00e      	beq.n	8001bc6 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001ba8:	4b70      	ldr	r3, [pc, #448]	; (8001d6c <menu+0x1828>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b6e      	ldr	r3, [pc, #440]	; (8001d6c <menu+0x1828>)
 8001bb2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001bb4:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <menu+0x1828>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d902      	bls.n	8001bc2 <menu+0x167e>
		   		kapi2Tip = 2;
 8001bbc:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <menu+0x1828>)
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bc2:	f003 f833 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bc6:	2108      	movs	r1, #8
 8001bc8:	486a      	ldr	r0, [pc, #424]	; (8001d74 <menu+0x1830>)
 8001bca:	f006 fcd5 	bl	8008578 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d10d      	bne.n	8001bf0 <menu+0x16ac>
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <menu+0x1834>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	f083 0301 	eor.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d006      	beq.n	8001bf0 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001be2:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <menu+0x1828>)
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	4b65      	ldr	r3, [pc, #404]	; (8001d7c <menu+0x1838>)
 8001be8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001bea:	4b65      	ldr	r3, [pc, #404]	; (8001d80 <menu+0x183c>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001bf0:	4b64      	ldr	r3, [pc, #400]	; (8001d84 <menu+0x1840>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	d17f      	bne.n	8001cf8 <menu+0x17b4>
		if(dilSecim == 0) {
 8001bf8:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <menu+0x1844>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001c00:	4a62      	ldr	r2, [pc, #392]	; (8001d8c <menu+0x1848>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7fe fc3c 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001c0a:	4a61      	ldr	r2, [pc, #388]	; (8001d90 <menu+0x184c>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7fe fc37 	bl	8000482 <lcd_print>
 8001c14:	e00d      	b.n	8001c32 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001c16:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <menu+0x1844>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d109      	bne.n	8001c32 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001c1e:	4a5d      	ldr	r2, [pc, #372]	; (8001d94 <menu+0x1850>)
 8001c20:	2101      	movs	r1, #1
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7fe fc2d 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001c28:	4a5b      	ldr	r2, [pc, #364]	; (8001d98 <menu+0x1854>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f7fe fc28 	bl	8000482 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <menu+0x1858>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	220a      	movs	r2, #10
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <menu+0x185c>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f009 fd84 	bl	800b748 <itoa>
		lcd_print(2,16,snum);
 8001c40:	4a57      	ldr	r2, [pc, #348]	; (8001da0 <menu+0x185c>)
 8001c42:	2110      	movs	r1, #16
 8001c44:	2002      	movs	r0, #2
 8001c46:	f7fe fc1c 	bl	8000482 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	4849      	ldr	r0, [pc, #292]	; (8001d74 <menu+0x1830>)
 8001c4e:	f006 fc93 	bl	8008578 <HAL_GPIO_ReadPin>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d119      	bne.n	8001c8c <menu+0x1748>
 8001c58:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <menu+0x1834>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f083 0301 	eor.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <menu+0x1748>
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <menu+0x1828>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10e      	bne.n	8001c8c <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8001c6e:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <menu+0x1858>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <menu+0x1858>)
 8001c78:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001c7a:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <menu+0x1858>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d902      	bls.n	8001c88 <menu+0x1744>
				kapi2AcSure = 0;
 8001c82:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <menu+0x1858>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c88:	f002 ffd0 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	4839      	ldr	r0, [pc, #228]	; (8001d74 <menu+0x1830>)
 8001c90:	f006 fc72 	bl	8008578 <HAL_GPIO_ReadPin>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d119      	bne.n	8001cce <menu+0x178a>
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <menu+0x1834>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	f083 0301 	eor.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d012      	beq.n	8001cce <menu+0x178a>
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <menu+0x1828>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10e      	bne.n	8001cce <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <menu+0x1858>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <menu+0x1858>)
 8001cba:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001cbc:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <menu+0x1858>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b06      	cmp	r3, #6
 8001cc2:	d902      	bls.n	8001cca <menu+0x1786>
		   		kapi2AcSure = 5;
 8001cc4:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <menu+0x1858>)
 8001cc6:	2205      	movs	r2, #5
 8001cc8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cca:	f002 ffaf 	bl	8004c2c <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cce:	2108      	movs	r1, #8
 8001cd0:	4828      	ldr	r0, [pc, #160]	; (8001d74 <menu+0x1830>)
 8001cd2:	f006 fc51 	bl	8008578 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d10d      	bne.n	8001cf8 <menu+0x17b4>
 8001cdc:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <menu+0x1834>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	f083 0301 	eor.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8001cea:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <menu+0x1858>)
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <menu+0x1838>)
 8001cf0:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <menu+0x183c>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <menu+0x1840>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b0d      	cmp	r3, #13
 8001cfe:	f040 80b5 	bne.w	8001e6c <menu+0x1928>
		if(dilSecim == 0) {
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <menu+0x1844>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d105      	bne.n	8001d16 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001d0a:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <menu+0x1860>)
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f7fe fbb7 	bl	8000482 <lcd_print>
 8001d14:	e008      	b.n	8001d28 <menu+0x17e4>
		} else if(dilSecim == 1){
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <menu+0x1844>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d104      	bne.n	8001d28 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001d1e:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <menu+0x1864>)
 8001d20:	2101      	movs	r1, #1
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7fe fbad 	bl	8000482 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <menu+0x1868>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8001d30:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <menu+0x186c>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7fe fba4 	bl	8000482 <lcd_print>
 8001d3a:	e048      	b.n	8001dce <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <menu+0x1868>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d13b      	bne.n	8001dbc <menu+0x1878>
			if(dilSecim == 0) {
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <menu+0x1844>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <menu+0x1870>)
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2002      	movs	r0, #2
 8001d52:	f7fe fb96 	bl	8000482 <lcd_print>
 8001d56:	e03a      	b.n	8001dce <menu+0x188a>
			} else if(dilSecim == 1) {
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <menu+0x1844>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d136      	bne.n	8001dce <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8001d60:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <menu+0x1874>)
 8001d62:	2101      	movs	r1, #1
 8001d64:	2002      	movs	r0, #2
 8001d66:	f7fe fb8c 	bl	8000482 <lcd_print>
 8001d6a:	e030      	b.n	8001dce <menu+0x188a>
 8001d6c:	20000a36 	.word	0x20000a36
 8001d70:	0800becc 	.word	0x0800becc
 8001d74:	40010800 	.word	0x40010800
 8001d78:	20000a5a 	.word	0x20000a5a
 8001d7c:	200009c0 	.word	0x200009c0
 8001d80:	20000a57 	.word	0x20000a57
 8001d84:	20000a2c 	.word	0x20000a2c
 8001d88:	20000a4c 	.word	0x20000a4c
 8001d8c:	0800bf4c 	.word	0x0800bf4c
 8001d90:	0800bef0 	.word	0x0800bef0
 8001d94:	0800bf60 	.word	0x0800bf60
 8001d98:	0800bf14 	.word	0x0800bf14
 8001d9c:	20000a46 	.word	0x20000a46
 8001da0:	20000a00 	.word	0x20000a00
 8001da4:	0800bf74 	.word	0x0800bf74
 8001da8:	0800bf88 	.word	0x0800bf88
 8001dac:	20000a37 	.word	0x20000a37
 8001db0:	0800be94 	.word	0x0800be94
 8001db4:	0800bea8 	.word	0x0800bea8
 8001db8:	0800beb8 	.word	0x0800beb8
			}
		} else if(kapitablaTip == 2) {
 8001dbc:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <menu+0x19e8>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d104      	bne.n	8001dce <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8001dc4:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <menu+0x19ec>)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	2002      	movs	r0, #2
 8001dca:	f7fe fb5a 	bl	8000482 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dce:	2102      	movs	r1, #2
 8001dd0:	4858      	ldr	r0, [pc, #352]	; (8001f34 <menu+0x19f0>)
 8001dd2:	f006 fbd1 	bl	8008578 <HAL_GPIO_ReadPin>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d115      	bne.n	8001e08 <menu+0x18c4>
 8001ddc:	4b56      	ldr	r3, [pc, #344]	; (8001f38 <menu+0x19f4>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	f083 0301 	eor.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00e      	beq.n	8001e08 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8001dea:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <menu+0x19e8>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b4e      	ldr	r3, [pc, #312]	; (8001f2c <menu+0x19e8>)
 8001df4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8001df6:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <menu+0x19e8>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d902      	bls.n	8001e04 <menu+0x18c0>
				kapitablaTip = 0;
 8001dfe:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <menu+0x19e8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e04:	f002 ff12 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e08:	2104      	movs	r1, #4
 8001e0a:	484a      	ldr	r0, [pc, #296]	; (8001f34 <menu+0x19f0>)
 8001e0c:	f006 fbb4 	bl	8008578 <HAL_GPIO_ReadPin>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d115      	bne.n	8001e42 <menu+0x18fe>
 8001e16:	4b48      	ldr	r3, [pc, #288]	; (8001f38 <menu+0x19f4>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	f083 0301 	eor.w	r3, r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00e      	beq.n	8001e42 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8001e24:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <menu+0x19e8>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <menu+0x19e8>)
 8001e2e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8001e30:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <menu+0x19e8>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d902      	bls.n	8001e3e <menu+0x18fa>
		   		kapitablaTip = 2;
 8001e38:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <menu+0x19e8>)
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e3e:	f002 fef5 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e42:	2108      	movs	r1, #8
 8001e44:	483b      	ldr	r0, [pc, #236]	; (8001f34 <menu+0x19f0>)
 8001e46:	f006 fb97 	bl	8008578 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d10d      	bne.n	8001e6c <menu+0x1928>
 8001e50:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <menu+0x19f4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <menu+0x19e8>)
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <menu+0x19f8>)
 8001e64:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8001e66:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <menu+0x19fc>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8001e6c:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <menu+0x1a00>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b0e      	cmp	r3, #14
 8001e72:	f040 80f2 	bne.w	800205a <menu+0x1b16>
		if(dilSecim == 0) {
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <menu+0x1a04>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8001e7e:	4a33      	ldr	r2, [pc, #204]	; (8001f4c <menu+0x1a08>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7fe fafd 	bl	8000482 <lcd_print>
 8001e88:	e008      	b.n	8001e9c <menu+0x1958>
		} else if(dilSecim == 1) {
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <menu+0x1a04>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d104      	bne.n	8001e9c <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8001e92:	4a2f      	ldr	r2, [pc, #188]	; (8001f50 <menu+0x1a0c>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7fe faf3 	bl	8000482 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <menu+0x1a10>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d113      	bne.n	8001ecc <menu+0x1988>
			if(dilSecim == 0){
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <menu+0x1a04>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8001eac:	4a2a      	ldr	r2, [pc, #168]	; (8001f58 <menu+0x1a14>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f7fe fae6 	bl	8000482 <lcd_print>
 8001eb6:	e071      	b.n	8001f9c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8001eb8:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <menu+0x1a04>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d16d      	bne.n	8001f9c <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8001ec0:	4a26      	ldr	r2, [pc, #152]	; (8001f5c <menu+0x1a18>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7fe fadc 	bl	8000482 <lcd_print>
 8001eca:	e067      	b.n	8001f9c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <menu+0x1a10>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d112      	bne.n	8001efa <menu+0x19b6>
			if(dilSecim == 0){
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <menu+0x1a04>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d104      	bne.n	8001ee6 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8001edc:	4a20      	ldr	r2, [pc, #128]	; (8001f60 <menu+0x1a1c>)
 8001ede:	2101      	movs	r1, #1
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f7fe face 	bl	8000482 <lcd_print>
			}
			if(dilSecim == 1){
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <menu+0x1a04>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d156      	bne.n	8001f9c <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8001eee:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <menu+0x1a20>)
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f7fe fac5 	bl	8000482 <lcd_print>
 8001ef8:	e050      	b.n	8001f9c <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <menu+0x1a10>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d136      	bne.n	8001f70 <menu+0x1a2c>
			if(dilSecim == 0){
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <menu+0x1a04>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <menu+0x1a24>)
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	2002      	movs	r0, #2
 8001f10:	f7fe fab7 	bl	8000482 <lcd_print>
 8001f14:	e042      	b.n	8001f9c <menu+0x1a58>
			} else if(dilSecim == 1) {
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <menu+0x1a04>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d13e      	bne.n	8001f9c <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8001f1e:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <menu+0x1a28>)
 8001f20:	2101      	movs	r1, #1
 8001f22:	2002      	movs	r0, #2
 8001f24:	f7fe faad 	bl	8000482 <lcd_print>
 8001f28:	e038      	b.n	8001f9c <menu+0x1a58>
 8001f2a:	bf00      	nop
 8001f2c:	20000a37 	.word	0x20000a37
 8001f30:	0800becc 	.word	0x0800becc
 8001f34:	40010800 	.word	0x40010800
 8001f38:	20000a5a 	.word	0x20000a5a
 8001f3c:	200009c0 	.word	0x200009c0
 8001f40:	20000a57 	.word	0x20000a57
 8001f44:	20000a2c 	.word	0x20000a2c
 8001f48:	20000a4c 	.word	0x20000a4c
 8001f4c:	0800bf9c 	.word	0x0800bf9c
 8001f50:	0800bfb0 	.word	0x0800bfb0
 8001f54:	20000a39 	.word	0x20000a39
 8001f58:	0800bfc4 	.word	0x0800bfc4
 8001f5c:	0800bfd4 	.word	0x0800bfd4
 8001f60:	0800bfe4 	.word	0x0800bfe4
 8001f64:	0800bff4 	.word	0x0800bff4
 8001f68:	0800c004 	.word	0x0800c004
 8001f6c:	0800c018 	.word	0x0800c018
			}
		} else if(kapiTablaAcKonum == 3) {
 8001f70:	4b9b      	ldr	r3, [pc, #620]	; (80021e0 <menu+0x1c9c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d111      	bne.n	8001f9c <menu+0x1a58>
			if(dilSecim == 0) {
 8001f78:	4b9a      	ldr	r3, [pc, #616]	; (80021e4 <menu+0x1ca0>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8001f80:	4a99      	ldr	r2, [pc, #612]	; (80021e8 <menu+0x1ca4>)
 8001f82:	2101      	movs	r1, #1
 8001f84:	2002      	movs	r0, #2
 8001f86:	f7fe fa7c 	bl	8000482 <lcd_print>
			}
			if(dilSecim == 1) {
 8001f8a:	4b96      	ldr	r3, [pc, #600]	; (80021e4 <menu+0x1ca0>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d104      	bne.n	8001f9c <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8001f92:	4a96      	ldr	r2, [pc, #600]	; (80021ec <menu+0x1ca8>)
 8001f94:	2101      	movs	r1, #1
 8001f96:	2002      	movs	r0, #2
 8001f98:	f7fe fa73 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4894      	ldr	r0, [pc, #592]	; (80021f0 <menu+0x1cac>)
 8001fa0:	f006 faea 	bl	8008578 <HAL_GPIO_ReadPin>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d115      	bne.n	8001fd6 <menu+0x1a92>
 8001faa:	4b92      	ldr	r3, [pc, #584]	; (80021f4 <menu+0x1cb0>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	f083 0301 	eor.w	r3, r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00e      	beq.n	8001fd6 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8001fb8:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <menu+0x1c9c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b87      	ldr	r3, [pc, #540]	; (80021e0 <menu+0x1c9c>)
 8001fc2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8001fc4:	4b86      	ldr	r3, [pc, #536]	; (80021e0 <menu+0x1c9c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d902      	bls.n	8001fd2 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8001fcc:	4b84      	ldr	r3, [pc, #528]	; (80021e0 <menu+0x1c9c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fd2:	f002 fe2b 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	4885      	ldr	r0, [pc, #532]	; (80021f0 <menu+0x1cac>)
 8001fda:	f006 facd 	bl	8008578 <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d115      	bne.n	8002010 <menu+0x1acc>
 8001fe4:	4b83      	ldr	r3, [pc, #524]	; (80021f4 <menu+0x1cb0>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f083 0301 	eor.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00e      	beq.n	8002010 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8001ff2:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <menu+0x1c9c>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b79      	ldr	r3, [pc, #484]	; (80021e0 <menu+0x1c9c>)
 8001ffc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8001ffe:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <menu+0x1c9c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d902      	bls.n	800200c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002006:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <menu+0x1c9c>)
 8002008:	2202      	movs	r2, #2
 800200a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800200c:	f002 fe0e 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002010:	2108      	movs	r1, #8
 8002012:	4877      	ldr	r0, [pc, #476]	; (80021f0 <menu+0x1cac>)
 8002014:	f006 fab0 	bl	8008578 <HAL_GPIO_ReadPin>
 8002018:	4603      	mov	r3, r0
 800201a:	2b01      	cmp	r3, #1
 800201c:	d11d      	bne.n	800205a <menu+0x1b16>
 800201e:	4b75      	ldr	r3, [pc, #468]	; (80021f4 <menu+0x1cb0>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f083 0301 	eor.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d016      	beq.n	800205a <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 800202c:	4b6c      	ldr	r3, [pc, #432]	; (80021e0 <menu+0x1c9c>)
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	4b71      	ldr	r3, [pc, #452]	; (80021f8 <menu+0x1cb4>)
 8002032:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002036:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <menu+0x1c9c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <menu+0x1b02>
 800203e:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <menu+0x1c9c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d106      	bne.n	8002054 <menu+0x1b10>
				altLimit = 1;
 8002046:	4b6d      	ldr	r3, [pc, #436]	; (80021fc <menu+0x1cb8>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800204c:	4b6b      	ldr	r3, [pc, #428]	; (80021fc <menu+0x1cb8>)
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	4b69      	ldr	r3, [pc, #420]	; (80021f8 <menu+0x1cb4>)
 8002052:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <menu+0x1cbc>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800205a:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <menu+0x1cc0>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b0f      	cmp	r3, #15
 8002060:	d17f      	bne.n	8002162 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002062:	4b60      	ldr	r3, [pc, #384]	; (80021e4 <menu+0x1ca0>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10a      	bne.n	8002080 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800206a:	4a67      	ldr	r2, [pc, #412]	; (8002208 <menu+0x1cc4>)
 800206c:	2101      	movs	r1, #1
 800206e:	2001      	movs	r0, #1
 8002070:	f7fe fa07 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002074:	4a65      	ldr	r2, [pc, #404]	; (800220c <menu+0x1cc8>)
 8002076:	2101      	movs	r1, #1
 8002078:	2002      	movs	r0, #2
 800207a:	f7fe fa02 	bl	8000482 <lcd_print>
 800207e:	e00d      	b.n	800209c <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002080:	4b58      	ldr	r3, [pc, #352]	; (80021e4 <menu+0x1ca0>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d109      	bne.n	800209c <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002088:	4a61      	ldr	r2, [pc, #388]	; (8002210 <menu+0x1ccc>)
 800208a:	2101      	movs	r1, #1
 800208c:	2001      	movs	r0, #1
 800208e:	f7fe f9f8 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002092:	4a60      	ldr	r2, [pc, #384]	; (8002214 <menu+0x1cd0>)
 8002094:	2101      	movs	r1, #1
 8002096:	2002      	movs	r0, #2
 8002098:	f7fe f9f3 	bl	8000482 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 800209c:	4b5e      	ldr	r3, [pc, #376]	; (8002218 <menu+0x1cd4>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	220a      	movs	r2, #10
 80020a2:	495e      	ldr	r1, [pc, #376]	; (800221c <menu+0x1cd8>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f009 fb4f 	bl	800b748 <itoa>
		lcd_print(2,16,snum);
 80020aa:	4a5c      	ldr	r2, [pc, #368]	; (800221c <menu+0x1cd8>)
 80020ac:	2110      	movs	r1, #16
 80020ae:	2002      	movs	r0, #2
 80020b0:	f7fe f9e7 	bl	8000482 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80020b4:	2102      	movs	r1, #2
 80020b6:	484e      	ldr	r0, [pc, #312]	; (80021f0 <menu+0x1cac>)
 80020b8:	f006 fa5e 	bl	8008578 <HAL_GPIO_ReadPin>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d119      	bne.n	80020f6 <menu+0x1bb2>
 80020c2:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <menu+0x1cb0>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d012      	beq.n	80020f6 <menu+0x1bb2>
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <menu+0x1cdc>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10e      	bne.n	80020f6 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80020d8:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <menu+0x1cd4>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <menu+0x1cd4>)
 80020e2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80020e4:	4b4c      	ldr	r3, [pc, #304]	; (8002218 <menu+0x1cd4>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d902      	bls.n	80020f2 <menu+0x1bae>
				kapiTablaAcSure = 0;
 80020ec:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <menu+0x1cd4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020f2:	f002 fd9b 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80020f6:	2104      	movs	r1, #4
 80020f8:	483d      	ldr	r0, [pc, #244]	; (80021f0 <menu+0x1cac>)
 80020fa:	f006 fa3d 	bl	8008578 <HAL_GPIO_ReadPin>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b01      	cmp	r3, #1
 8002102:	d119      	bne.n	8002138 <menu+0x1bf4>
 8002104:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <menu+0x1cb0>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d012      	beq.n	8002138 <menu+0x1bf4>
 8002112:	4b43      	ldr	r3, [pc, #268]	; (8002220 <menu+0x1cdc>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10e      	bne.n	8002138 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800211a:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <menu+0x1cd4>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	3b01      	subs	r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <menu+0x1cd4>)
 8002124:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002126:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <menu+0x1cd4>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800212e:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <menu+0x1cd4>)
 8002130:	2205      	movs	r2, #5
 8002132:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002134:	f002 fd7a 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002138:	2108      	movs	r1, #8
 800213a:	482d      	ldr	r0, [pc, #180]	; (80021f0 <menu+0x1cac>)
 800213c:	f006 fa1c 	bl	8008578 <HAL_GPIO_ReadPin>
 8002140:	4603      	mov	r3, r0
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10d      	bne.n	8002162 <menu+0x1c1e>
 8002146:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <menu+0x1cb0>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f083 0301 	eor.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d006      	beq.n	8002162 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <menu+0x1cd4>)
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <menu+0x1cb4>)
 800215a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <menu+0x1cbc>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <menu+0x1cc0>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b10      	cmp	r3, #16
 8002168:	f040 80bc 	bne.w	80022e4 <menu+0x1da0>
		if(dilSecim == 0) {
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <menu+0x1ca0>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002174:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <menu+0x1ce0>)
 8002176:	2101      	movs	r1, #1
 8002178:	2001      	movs	r0, #1
 800217a:	f7fe f982 	bl	8000482 <lcd_print>
 800217e:	e008      	b.n	8002192 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <menu+0x1ca0>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d104      	bne.n	8002192 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <menu+0x1ce4>)
 800218a:	2101      	movs	r1, #1
 800218c:	2001      	movs	r0, #1
 800218e:	f7fe f978 	bl	8000482 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <menu+0x1ce8>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d113      	bne.n	80021c2 <menu+0x1c7e>
			if(dilSecim == 0) {
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <menu+0x1ca0>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80021a2:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <menu+0x1ca4>)
 80021a4:	2101      	movs	r1, #1
 80021a6:	2002      	movs	r0, #2
 80021a8:	f7fe f96b 	bl	8000482 <lcd_print>
 80021ac:	e04b      	b.n	8002246 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <menu+0x1ca0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d147      	bne.n	8002246 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80021b6:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <menu+0x1ca8>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	2002      	movs	r0, #2
 80021bc:	f7fe f961 	bl	8000482 <lcd_print>
 80021c0:	e041      	b.n	8002246 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <menu+0x1ce8>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d13d      	bne.n	8002246 <menu+0x1d02>
			if(dilSecim == 0) {
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <menu+0x1ca0>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d130      	bne.n	8002234 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 80021d2:	4a17      	ldr	r2, [pc, #92]	; (8002230 <menu+0x1cec>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	2002      	movs	r0, #2
 80021d8:	f7fe f953 	bl	8000482 <lcd_print>
 80021dc:	e033      	b.n	8002246 <menu+0x1d02>
 80021de:	bf00      	nop
 80021e0:	20000a39 	.word	0x20000a39
 80021e4:	20000a4c 	.word	0x20000a4c
 80021e8:	0800bc8c 	.word	0x0800bc8c
 80021ec:	0800bca0 	.word	0x0800bca0
 80021f0:	40010800 	.word	0x40010800
 80021f4:	20000a5a 	.word	0x20000a5a
 80021f8:	200009c0 	.word	0x200009c0
 80021fc:	20000a32 	.word	0x20000a32
 8002200:	20000a57 	.word	0x20000a57
 8002204:	20000a2c 	.word	0x20000a2c
 8002208:	0800c02c 	.word	0x0800c02c
 800220c:	0800bef0 	.word	0x0800bef0
 8002210:	0800c040 	.word	0x0800c040
 8002214:	0800bf14 	.word	0x0800bf14
 8002218:	20000a47 	.word	0x20000a47
 800221c:	20000a00 	.word	0x20000a00
 8002220:	20000a37 	.word	0x20000a37
 8002224:	0800c054 	.word	0x0800c054
 8002228:	0800c068 	.word	0x0800c068
 800222c:	20000a3a 	.word	0x20000a3a
 8002230:	0800bcec 	.word	0x0800bcec
			} else if(dilSecim == 1) {
 8002234:	4b99      	ldr	r3, [pc, #612]	; (800249c <menu+0x1f58>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d104      	bne.n	8002246 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 800223c:	4a98      	ldr	r2, [pc, #608]	; (80024a0 <menu+0x1f5c>)
 800223e:	2101      	movs	r1, #1
 8002240:	2002      	movs	r0, #2
 8002242:	f7fe f91e 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002246:	2102      	movs	r1, #2
 8002248:	4896      	ldr	r0, [pc, #600]	; (80024a4 <menu+0x1f60>)
 800224a:	f006 f995 	bl	8008578 <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	2b01      	cmp	r3, #1
 8002252:	d115      	bne.n	8002280 <menu+0x1d3c>
 8002254:	4b94      	ldr	r3, [pc, #592]	; (80024a8 <menu+0x1f64>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	f083 0301 	eor.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00e      	beq.n	8002280 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002262:	4b92      	ldr	r3, [pc, #584]	; (80024ac <menu+0x1f68>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b90      	ldr	r3, [pc, #576]	; (80024ac <menu+0x1f68>)
 800226c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800226e:	4b8f      	ldr	r3, [pc, #572]	; (80024ac <menu+0x1f68>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d902      	bls.n	800227c <menu+0x1d38>
				yukariYavasLimit = 0;
 8002276:	4b8d      	ldr	r3, [pc, #564]	; (80024ac <menu+0x1f68>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800227c:	f002 fcd6 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002280:	2104      	movs	r1, #4
 8002282:	4888      	ldr	r0, [pc, #544]	; (80024a4 <menu+0x1f60>)
 8002284:	f006 f978 	bl	8008578 <HAL_GPIO_ReadPin>
 8002288:	4603      	mov	r3, r0
 800228a:	2b01      	cmp	r3, #1
 800228c:	d115      	bne.n	80022ba <menu+0x1d76>
 800228e:	4b86      	ldr	r3, [pc, #536]	; (80024a8 <menu+0x1f64>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	f083 0301 	eor.w	r3, r3, #1
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00e      	beq.n	80022ba <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 800229c:	4b83      	ldr	r3, [pc, #524]	; (80024ac <menu+0x1f68>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b81      	ldr	r3, [pc, #516]	; (80024ac <menu+0x1f68>)
 80022a6:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80022a8:	4b80      	ldr	r3, [pc, #512]	; (80024ac <menu+0x1f68>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d002      	beq.n	80022b6 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80022b0:	4b7e      	ldr	r3, [pc, #504]	; (80024ac <menu+0x1f68>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022b6:	f002 fcb9 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022ba:	2108      	movs	r1, #8
 80022bc:	4879      	ldr	r0, [pc, #484]	; (80024a4 <menu+0x1f60>)
 80022be:	f006 f95b 	bl	8008578 <HAL_GPIO_ReadPin>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10d      	bne.n	80022e4 <menu+0x1da0>
 80022c8:	4b77      	ldr	r3, [pc, #476]	; (80024a8 <menu+0x1f64>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f083 0301 	eor.w	r3, r3, #1
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80022d6:	4b75      	ldr	r3, [pc, #468]	; (80024ac <menu+0x1f68>)
 80022d8:	781a      	ldrb	r2, [r3, #0]
 80022da:	4b75      	ldr	r3, [pc, #468]	; (80024b0 <menu+0x1f6c>)
 80022dc:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80022de:	4b75      	ldr	r3, [pc, #468]	; (80024b4 <menu+0x1f70>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80022e4:	4b74      	ldr	r3, [pc, #464]	; (80024b8 <menu+0x1f74>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b11      	cmp	r3, #17
 80022ea:	f040 80c3 	bne.w	8002474 <menu+0x1f30>
		if(dilSecim == 0) {
 80022ee:	4b6b      	ldr	r3, [pc, #428]	; (800249c <menu+0x1f58>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d105      	bne.n	8002302 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80022f6:	4a71      	ldr	r2, [pc, #452]	; (80024bc <menu+0x1f78>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7fe f8c1 	bl	8000482 <lcd_print>
 8002300:	e008      	b.n	8002314 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002302:	4b66      	ldr	r3, [pc, #408]	; (800249c <menu+0x1f58>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d104      	bne.n	8002314 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800230a:	4a6d      	ldr	r2, [pc, #436]	; (80024c0 <menu+0x1f7c>)
 800230c:	2101      	movs	r1, #1
 800230e:	2001      	movs	r0, #1
 8002310:	f7fe f8b7 	bl	8000482 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002314:	4b6b      	ldr	r3, [pc, #428]	; (80024c4 <menu+0x1f80>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d113      	bne.n	8002344 <menu+0x1e00>
			if(dilSecim == 0){
 800231c:	4b5f      	ldr	r3, [pc, #380]	; (800249c <menu+0x1f58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002324:	4a68      	ldr	r2, [pc, #416]	; (80024c8 <menu+0x1f84>)
 8002326:	2101      	movs	r1, #1
 8002328:	2002      	movs	r0, #2
 800232a:	f7fe f8aa 	bl	8000482 <lcd_print>
 800232e:	e038      	b.n	80023a2 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002330:	4b5a      	ldr	r3, [pc, #360]	; (800249c <menu+0x1f58>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d134      	bne.n	80023a2 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002338:	4a64      	ldr	r2, [pc, #400]	; (80024cc <menu+0x1f88>)
 800233a:	2101      	movs	r1, #1
 800233c:	2002      	movs	r0, #2
 800233e:	f7fe f8a0 	bl	8000482 <lcd_print>
 8002342:	e02e      	b.n	80023a2 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002344:	4b5f      	ldr	r3, [pc, #380]	; (80024c4 <menu+0x1f80>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d113      	bne.n	8002374 <menu+0x1e30>
			if(dilSecim == 0){
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <menu+0x1f58>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002354:	4a5e      	ldr	r2, [pc, #376]	; (80024d0 <menu+0x1f8c>)
 8002356:	2101      	movs	r1, #1
 8002358:	2002      	movs	r0, #2
 800235a:	f7fe f892 	bl	8000482 <lcd_print>
 800235e:	e020      	b.n	80023a2 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002360:	4b4e      	ldr	r3, [pc, #312]	; (800249c <menu+0x1f58>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d11c      	bne.n	80023a2 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002368:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <menu+0x1f90>)
 800236a:	2101      	movs	r1, #1
 800236c:	2002      	movs	r0, #2
 800236e:	f7fe f888 	bl	8000482 <lcd_print>
 8002372:	e016      	b.n	80023a2 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <menu+0x1f80>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d112      	bne.n	80023a2 <menu+0x1e5e>
			if(dilSecim == 0) {
 800237c:	4b47      	ldr	r3, [pc, #284]	; (800249c <menu+0x1f58>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002384:	4a54      	ldr	r2, [pc, #336]	; (80024d8 <menu+0x1f94>)
 8002386:	2101      	movs	r1, #1
 8002388:	2002      	movs	r0, #2
 800238a:	f7fe f87a 	bl	8000482 <lcd_print>
 800238e:	e008      	b.n	80023a2 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <menu+0x1f58>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d104      	bne.n	80023a2 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002398:	4a50      	ldr	r2, [pc, #320]	; (80024dc <menu+0x1f98>)
 800239a:	2101      	movs	r1, #1
 800239c:	2002      	movs	r0, #2
 800239e:	f7fe f870 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023a2:	2102      	movs	r1, #2
 80023a4:	483f      	ldr	r0, [pc, #252]	; (80024a4 <menu+0x1f60>)
 80023a6:	f006 f8e7 	bl	8008578 <HAL_GPIO_ReadPin>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d115      	bne.n	80023dc <menu+0x1e98>
 80023b0:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <menu+0x1f64>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f083 0301 	eor.w	r3, r3, #1
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00e      	beq.n	80023dc <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <menu+0x1f80>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	3301      	adds	r3, #1
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <menu+0x1f80>)
 80023c8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <menu+0x1f80>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d902      	bls.n	80023d8 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80023d2:	4b3c      	ldr	r3, [pc, #240]	; (80024c4 <menu+0x1f80>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023d8:	f002 fc28 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023dc:	2104      	movs	r1, #4
 80023de:	4831      	ldr	r0, [pc, #196]	; (80024a4 <menu+0x1f60>)
 80023e0:	f006 f8ca 	bl	8008578 <HAL_GPIO_ReadPin>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d115      	bne.n	8002416 <menu+0x1ed2>
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <menu+0x1f64>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f083 0301 	eor.w	r3, r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00e      	beq.n	8002416 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80023f8:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <menu+0x1f80>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <menu+0x1f80>)
 8002402:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002404:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <menu+0x1f80>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d902      	bls.n	8002412 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 800240c:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <menu+0x1f80>)
 800240e:	2202      	movs	r2, #2
 8002410:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002412:	f002 fc0b 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002416:	2108      	movs	r1, #8
 8002418:	4822      	ldr	r0, [pc, #136]	; (80024a4 <menu+0x1f60>)
 800241a:	f006 f8ad 	bl	8008578 <HAL_GPIO_ReadPin>
 800241e:	4603      	mov	r3, r0
 8002420:	2b01      	cmp	r3, #1
 8002422:	d127      	bne.n	8002474 <menu+0x1f30>
 8002424:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <menu+0x1f64>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f083 0301 	eor.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d020      	beq.n	8002474 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <menu+0x1f80>)
 8002434:	781a      	ldrb	r2, [r3, #0]
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <menu+0x1f6c>)
 8002438:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <menu+0x1f80>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d003      	beq.n	800244a <menu+0x1f06>
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <menu+0x1f80>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d106      	bne.n	8002458 <menu+0x1f14>
				calismaSekli = 0;
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <menu+0x1f9c>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <menu+0x1f9c>)
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <menu+0x1f6c>)
 8002456:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <menu+0x1f80>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <menu+0x1fa0>)
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <menu+0x1fa0>)
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <menu+0x1f6c>)
 800246c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <menu+0x1f70>)
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <menu+0x1f74>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b12      	cmp	r3, #18
 800247a:	f040 80d5 	bne.w	8002628 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <menu+0x1f80>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d13c      	bne.n	8002500 <menu+0x1fbc>
			if(dilSecim == 0) {
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <menu+0x1f58>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d12e      	bne.n	80024ec <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800248e:	4a16      	ldr	r2, [pc, #88]	; (80024e8 <menu+0x1fa4>)
 8002490:	2101      	movs	r1, #1
 8002492:	2001      	movs	r0, #1
 8002494:	f7fd fff5 	bl	8000482 <lcd_print>
 8002498:	e048      	b.n	800252c <menu+0x1fe8>
 800249a:	bf00      	nop
 800249c:	20000a4c 	.word	0x20000a4c
 80024a0:	0800bd00 	.word	0x0800bd00
 80024a4:	40010800 	.word	0x40010800
 80024a8:	20000a5a 	.word	0x20000a5a
 80024ac:	20000a3a 	.word	0x20000a3a
 80024b0:	200009c0 	.word	0x200009c0
 80024b4:	20000a57 	.word	0x20000a57
 80024b8:	20000a2c 	.word	0x20000a2c
 80024bc:	0800c07c 	.word	0x0800c07c
 80024c0:	0800c090 	.word	0x0800c090
 80024c4:	20000a3b 	.word	0x20000a3b
 80024c8:	0800c0a4 	.word	0x0800c0a4
 80024cc:	0800c0b4 	.word	0x0800c0b4
 80024d0:	0800c0c4 	.word	0x0800c0c4
 80024d4:	0800c0d4 	.word	0x0800c0d4
 80024d8:	0800bc8c 	.word	0x0800bc8c
 80024dc:	0800bca0 	.word	0x0800bca0
 80024e0:	20000a2d 	.word	0x20000a2d
 80024e4:	20000a3e 	.word	0x20000a3e
 80024e8:	0800c0e4 	.word	0x0800c0e4
			} else if(dilSecim == 1) {
 80024ec:	4b7b      	ldr	r3, [pc, #492]	; (80026dc <menu+0x2198>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d11b      	bne.n	800252c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80024f4:	4a7a      	ldr	r2, [pc, #488]	; (80026e0 <menu+0x219c>)
 80024f6:	2101      	movs	r1, #1
 80024f8:	2001      	movs	r0, #1
 80024fa:	f7fd ffc2 	bl	8000482 <lcd_print>
 80024fe:	e015      	b.n	800252c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002500:	4b78      	ldr	r3, [pc, #480]	; (80026e4 <menu+0x21a0>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d111      	bne.n	800252c <menu+0x1fe8>
			if(dilSecim == 0){
 8002508:	4b74      	ldr	r3, [pc, #464]	; (80026dc <menu+0x2198>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d104      	bne.n	800251a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8002510:	4a75      	ldr	r2, [pc, #468]	; (80026e8 <menu+0x21a4>)
 8002512:	2101      	movs	r1, #1
 8002514:	2001      	movs	r0, #1
 8002516:	f7fd ffb4 	bl	8000482 <lcd_print>
			}
			if(dilSecim == 1){
 800251a:	4b70      	ldr	r3, [pc, #448]	; (80026dc <menu+0x2198>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d104      	bne.n	800252c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8002522:	4a72      	ldr	r2, [pc, #456]	; (80026ec <menu+0x21a8>)
 8002524:	2101      	movs	r1, #1
 8002526:	2001      	movs	r0, #1
 8002528:	f7fd ffab 	bl	8000482 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800252c:	4b70      	ldr	r3, [pc, #448]	; (80026f0 <menu+0x21ac>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d113      	bne.n	800255c <menu+0x2018>
			if(dilSecim == 0) {
 8002534:	4b69      	ldr	r3, [pc, #420]	; (80026dc <menu+0x2198>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d105      	bne.n	8002548 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 800253c:	4a6d      	ldr	r2, [pc, #436]	; (80026f4 <menu+0x21b0>)
 800253e:	2101      	movs	r1, #1
 8002540:	2002      	movs	r0, #2
 8002542:	f7fd ff9e 	bl	8000482 <lcd_print>
 8002546:	e020      	b.n	800258a <menu+0x2046>
			} else if(dilSecim == 1){
 8002548:	4b64      	ldr	r3, [pc, #400]	; (80026dc <menu+0x2198>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d11c      	bne.n	800258a <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8002550:	4a69      	ldr	r2, [pc, #420]	; (80026f8 <menu+0x21b4>)
 8002552:	2101      	movs	r1, #1
 8002554:	2002      	movs	r0, #2
 8002556:	f7fd ff94 	bl	8000482 <lcd_print>
 800255a:	e016      	b.n	800258a <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 800255c:	4b64      	ldr	r3, [pc, #400]	; (80026f0 <menu+0x21ac>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d112      	bne.n	800258a <menu+0x2046>
			if(dilSecim == 0){
 8002564:	4b5d      	ldr	r3, [pc, #372]	; (80026dc <menu+0x2198>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 800256c:	4a63      	ldr	r2, [pc, #396]	; (80026fc <menu+0x21b8>)
 800256e:	2101      	movs	r1, #1
 8002570:	2002      	movs	r0, #2
 8002572:	f7fd ff86 	bl	8000482 <lcd_print>
 8002576:	e008      	b.n	800258a <menu+0x2046>
			} else if(dilSecim == 1){
 8002578:	4b58      	ldr	r3, [pc, #352]	; (80026dc <menu+0x2198>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d104      	bne.n	800258a <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8002580:	4a5f      	ldr	r2, [pc, #380]	; (8002700 <menu+0x21bc>)
 8002582:	2101      	movs	r1, #1
 8002584:	2002      	movs	r0, #2
 8002586:	f7fd ff7c 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800258a:	2102      	movs	r1, #2
 800258c:	485d      	ldr	r0, [pc, #372]	; (8002704 <menu+0x21c0>)
 800258e:	f005 fff3 	bl	8008578 <HAL_GPIO_ReadPin>
 8002592:	4603      	mov	r3, r0
 8002594:	2b01      	cmp	r3, #1
 8002596:	d115      	bne.n	80025c4 <menu+0x2080>
 8002598:	4b5b      	ldr	r3, [pc, #364]	; (8002708 <menu+0x21c4>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f083 0301 	eor.w	r3, r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00e      	beq.n	80025c4 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80025a6:	4b52      	ldr	r3, [pc, #328]	; (80026f0 <menu+0x21ac>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b50      	ldr	r3, [pc, #320]	; (80026f0 <menu+0x21ac>)
 80025b0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80025b2:	4b4f      	ldr	r3, [pc, #316]	; (80026f0 <menu+0x21ac>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d902      	bls.n	80025c0 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80025ba:	4b4d      	ldr	r3, [pc, #308]	; (80026f0 <menu+0x21ac>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c0:	f002 fb34 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c4:	2104      	movs	r1, #4
 80025c6:	484f      	ldr	r0, [pc, #316]	; (8002704 <menu+0x21c0>)
 80025c8:	f005 ffd6 	bl	8008578 <HAL_GPIO_ReadPin>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d115      	bne.n	80025fe <menu+0x20ba>
 80025d2:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <menu+0x21c4>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80025e0:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <menu+0x21ac>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <menu+0x21ac>)
 80025ea:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80025ec:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <menu+0x21ac>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80025f4:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <menu+0x21ac>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025fa:	f002 fb17 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fe:	2108      	movs	r1, #8
 8002600:	4840      	ldr	r0, [pc, #256]	; (8002704 <menu+0x21c0>)
 8002602:	f005 ffb9 	bl	8008578 <HAL_GPIO_ReadPin>
 8002606:	4603      	mov	r3, r0
 8002608:	2b01      	cmp	r3, #1
 800260a:	d10d      	bne.n	8002628 <menu+0x20e4>
 800260c:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <menu+0x21c4>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d006      	beq.n	8002628 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800261a:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <menu+0x21ac>)
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	4b3b      	ldr	r3, [pc, #236]	; (800270c <menu+0x21c8>)
 8002620:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002622:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <menu+0x21cc>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002628:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <menu+0x21d0>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b13      	cmp	r3, #19
 800262e:	f040 80d5 	bne.w	80027dc <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8002632:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <menu+0x21a0>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d113      	bne.n	8002662 <menu+0x211e>
			if(dilSecim == 0) {
 800263a:	4b28      	ldr	r3, [pc, #160]	; (80026dc <menu+0x2198>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d105      	bne.n	800264e <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8002642:	4a35      	ldr	r2, [pc, #212]	; (8002718 <menu+0x21d4>)
 8002644:	2101      	movs	r1, #1
 8002646:	2001      	movs	r0, #1
 8002648:	f7fd ff1b 	bl	8000482 <lcd_print>
 800264c:	e01f      	b.n	800268e <menu+0x214a>
			} else if(dilSecim == 1) {
 800264e:	4b23      	ldr	r3, [pc, #140]	; (80026dc <menu+0x2198>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d11b      	bne.n	800268e <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8002656:	4a31      	ldr	r2, [pc, #196]	; (800271c <menu+0x21d8>)
 8002658:	2101      	movs	r1, #1
 800265a:	2001      	movs	r0, #1
 800265c:	f7fd ff11 	bl	8000482 <lcd_print>
 8002660:	e015      	b.n	800268e <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <menu+0x21a0>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d111      	bne.n	800268e <menu+0x214a>
			if(dilSecim == 0) {
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <menu+0x2198>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8002672:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <menu+0x21dc>)
 8002674:	2101      	movs	r1, #1
 8002676:	2001      	movs	r0, #1
 8002678:	f7fd ff03 	bl	8000482 <lcd_print>
			}
			if(dilSecim == 1) {
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <menu+0x2198>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d104      	bne.n	800268e <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8002684:	4a27      	ldr	r2, [pc, #156]	; (8002724 <menu+0x21e0>)
 8002686:	2101      	movs	r1, #1
 8002688:	2001      	movs	r0, #1
 800268a:	f7fd fefa 	bl	8000482 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <menu+0x21e4>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d113      	bne.n	80026be <menu+0x217a>
			if(dilSecim == 0) {
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <menu+0x2198>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800269e:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <menu+0x21b0>)
 80026a0:	2101      	movs	r1, #1
 80026a2:	2002      	movs	r0, #2
 80026a4:	f7fd feed 	bl	8000482 <lcd_print>
 80026a8:	e049      	b.n	800273e <menu+0x21fa>
			} else if(dilSecim == 1) {
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <menu+0x2198>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d145      	bne.n	800273e <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80026b2:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <menu+0x21b4>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	2002      	movs	r0, #2
 80026b8:	f7fd fee3 	bl	8000482 <lcd_print>
 80026bc:	e03f      	b.n	800273e <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <menu+0x21e4>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d13b      	bne.n	800273e <menu+0x21fa>
			if(dilSecim == 0) {
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <menu+0x2198>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12e      	bne.n	800272c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <menu+0x21b8>)
 80026d0:	2101      	movs	r1, #1
 80026d2:	2002      	movs	r0, #2
 80026d4:	f7fd fed5 	bl	8000482 <lcd_print>
 80026d8:	e031      	b.n	800273e <menu+0x21fa>
 80026da:	bf00      	nop
 80026dc:	20000a4c 	.word	0x20000a4c
 80026e0:	0800c0f8 	.word	0x0800c0f8
 80026e4:	20000a3b 	.word	0x20000a3b
 80026e8:	0800c108 	.word	0x0800c108
 80026ec:	0800c11c 	.word	0x0800c11c
 80026f0:	20000a3c 	.word	0x20000a3c
 80026f4:	0800bc8c 	.word	0x0800bc8c
 80026f8:	0800bca0 	.word	0x0800bca0
 80026fc:	0800bcec 	.word	0x0800bcec
 8002700:	0800bd00 	.word	0x0800bd00
 8002704:	40010800 	.word	0x40010800
 8002708:	20000a5a 	.word	0x20000a5a
 800270c:	200009c0 	.word	0x200009c0
 8002710:	20000a57 	.word	0x20000a57
 8002714:	20000a2c 	.word	0x20000a2c
 8002718:	0800c130 	.word	0x0800c130
 800271c:	0800c144 	.word	0x0800c144
 8002720:	0800c158 	.word	0x0800c158
 8002724:	0800c16c 	.word	0x0800c16c
 8002728:	20000a3d 	.word	0x20000a3d
			} else if(dilSecim == 1) {
 800272c:	4b90      	ldr	r3, [pc, #576]	; (8002970 <menu+0x242c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d104      	bne.n	800273e <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8002734:	4a8f      	ldr	r2, [pc, #572]	; (8002974 <menu+0x2430>)
 8002736:	2101      	movs	r1, #1
 8002738:	2002      	movs	r0, #2
 800273a:	f7fd fea2 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800273e:	2102      	movs	r1, #2
 8002740:	488d      	ldr	r0, [pc, #564]	; (8002978 <menu+0x2434>)
 8002742:	f005 ff19 	bl	8008578 <HAL_GPIO_ReadPin>
 8002746:	4603      	mov	r3, r0
 8002748:	2b01      	cmp	r3, #1
 800274a:	d115      	bne.n	8002778 <menu+0x2234>
 800274c:	4b8b      	ldr	r3, [pc, #556]	; (800297c <menu+0x2438>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	f083 0301 	eor.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00e      	beq.n	8002778 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800275a:	4b89      	ldr	r3, [pc, #548]	; (8002980 <menu+0x243c>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	b2da      	uxtb	r2, r3
 8002762:	4b87      	ldr	r3, [pc, #540]	; (8002980 <menu+0x243c>)
 8002764:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002766:	4b86      	ldr	r3, [pc, #536]	; (8002980 <menu+0x243c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d902      	bls.n	8002774 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800276e:	4b84      	ldr	r3, [pc, #528]	; (8002980 <menu+0x243c>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002774:	f002 fa5a 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002778:	2104      	movs	r1, #4
 800277a:	487f      	ldr	r0, [pc, #508]	; (8002978 <menu+0x2434>)
 800277c:	f005 fefc 	bl	8008578 <HAL_GPIO_ReadPin>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d115      	bne.n	80027b2 <menu+0x226e>
 8002786:	4b7d      	ldr	r3, [pc, #500]	; (800297c <menu+0x2438>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	f083 0301 	eor.w	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00e      	beq.n	80027b2 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002794:	4b7a      	ldr	r3, [pc, #488]	; (8002980 <menu+0x243c>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	3b01      	subs	r3, #1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b78      	ldr	r3, [pc, #480]	; (8002980 <menu+0x243c>)
 800279e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80027a0:	4b77      	ldr	r3, [pc, #476]	; (8002980 <menu+0x243c>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80027a8:	4b75      	ldr	r3, [pc, #468]	; (8002980 <menu+0x243c>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027ae:	f002 fa3d 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b2:	2108      	movs	r1, #8
 80027b4:	4870      	ldr	r0, [pc, #448]	; (8002978 <menu+0x2434>)
 80027b6:	f005 fedf 	bl	8008578 <HAL_GPIO_ReadPin>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10d      	bne.n	80027dc <menu+0x2298>
 80027c0:	4b6e      	ldr	r3, [pc, #440]	; (800297c <menu+0x2438>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f083 0301 	eor.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d006      	beq.n	80027dc <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80027ce:	4b6c      	ldr	r3, [pc, #432]	; (8002980 <menu+0x243c>)
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	4b6c      	ldr	r3, [pc, #432]	; (8002984 <menu+0x2440>)
 80027d4:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80027d6:	4b6c      	ldr	r3, [pc, #432]	; (8002988 <menu+0x2444>)
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80027dc:	4b6b      	ldr	r3, [pc, #428]	; (800298c <menu+0x2448>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b14      	cmp	r3, #20
 80027e2:	f040 80b5 	bne.w	8002950 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80027e6:	4b6a      	ldr	r3, [pc, #424]	; (8002990 <menu+0x244c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d113      	bne.n	8002816 <menu+0x22d2>
			if(dilSecim == 0) {
 80027ee:	4b60      	ldr	r3, [pc, #384]	; (8002970 <menu+0x242c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80027f6:	4a67      	ldr	r2, [pc, #412]	; (8002994 <menu+0x2450>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fd fe41 	bl	8000482 <lcd_print>
 8002800:	e020      	b.n	8002844 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002802:	4b5b      	ldr	r3, [pc, #364]	; (8002970 <menu+0x242c>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d11c      	bne.n	8002844 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800280a:	4a63      	ldr	r2, [pc, #396]	; (8002998 <menu+0x2454>)
 800280c:	2101      	movs	r1, #1
 800280e:	2001      	movs	r0, #1
 8002810:	f7fd fe37 	bl	8000482 <lcd_print>
 8002814:	e016      	b.n	8002844 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002816:	4b5e      	ldr	r3, [pc, #376]	; (8002990 <menu+0x244c>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d112      	bne.n	8002844 <menu+0x2300>
			if(dilSecim == 0) {
 800281e:	4b54      	ldr	r3, [pc, #336]	; (8002970 <menu+0x242c>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d105      	bne.n	8002832 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002826:	4a5d      	ldr	r2, [pc, #372]	; (800299c <menu+0x2458>)
 8002828:	2101      	movs	r1, #1
 800282a:	2001      	movs	r0, #1
 800282c:	f7fd fe29 	bl	8000482 <lcd_print>
 8002830:	e008      	b.n	8002844 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002832:	4b4f      	ldr	r3, [pc, #316]	; (8002970 <menu+0x242c>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d104      	bne.n	8002844 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800283a:	4a59      	ldr	r2, [pc, #356]	; (80029a0 <menu+0x245c>)
 800283c:	2101      	movs	r1, #1
 800283e:	2001      	movs	r0, #1
 8002840:	f7fd fe1f 	bl	8000482 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002844:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <menu+0x2460>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d113      	bne.n	8002874 <menu+0x2330>
			if(dilSecim == 0) {
 800284c:	4b48      	ldr	r3, [pc, #288]	; (8002970 <menu+0x242c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8002854:	4a54      	ldr	r2, [pc, #336]	; (80029a8 <menu+0x2464>)
 8002856:	2101      	movs	r1, #1
 8002858:	2002      	movs	r0, #2
 800285a:	f7fd fe12 	bl	8000482 <lcd_print>
 800285e:	e020      	b.n	80028a2 <menu+0x235e>
			} else if(dilSecim == 1) {
 8002860:	4b43      	ldr	r3, [pc, #268]	; (8002970 <menu+0x242c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d11c      	bne.n	80028a2 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8002868:	4a50      	ldr	r2, [pc, #320]	; (80029ac <menu+0x2468>)
 800286a:	2101      	movs	r1, #1
 800286c:	2002      	movs	r0, #2
 800286e:	f7fd fe08 	bl	8000482 <lcd_print>
 8002872:	e016      	b.n	80028a2 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8002874:	4b4b      	ldr	r3, [pc, #300]	; (80029a4 <menu+0x2460>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d112      	bne.n	80028a2 <menu+0x235e>
			if(dilSecim == 0) {
 800287c:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <menu+0x242c>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8002884:	4a4a      	ldr	r2, [pc, #296]	; (80029b0 <menu+0x246c>)
 8002886:	2101      	movs	r1, #1
 8002888:	2002      	movs	r0, #2
 800288a:	f7fd fdfa 	bl	8000482 <lcd_print>
 800288e:	e008      	b.n	80028a2 <menu+0x235e>
			} else if(dilSecim == 1) {
 8002890:	4b37      	ldr	r3, [pc, #220]	; (8002970 <menu+0x242c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d104      	bne.n	80028a2 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8002898:	4a46      	ldr	r2, [pc, #280]	; (80029b4 <menu+0x2470>)
 800289a:	2101      	movs	r1, #1
 800289c:	2002      	movs	r0, #2
 800289e:	f7fd fdf0 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80028a2:	2102      	movs	r1, #2
 80028a4:	4834      	ldr	r0, [pc, #208]	; (8002978 <menu+0x2434>)
 80028a6:	f005 fe67 	bl	8008578 <HAL_GPIO_ReadPin>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d119      	bne.n	80028e4 <menu+0x23a0>
 80028b0:	4b32      	ldr	r3, [pc, #200]	; (800297c <menu+0x2438>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d012      	beq.n	80028e4 <menu+0x23a0>
 80028be:	4b34      	ldr	r3, [pc, #208]	; (8002990 <menu+0x244c>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d10e      	bne.n	80028e4 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <menu+0x2460>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	3301      	adds	r3, #1
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	4b35      	ldr	r3, [pc, #212]	; (80029a4 <menu+0x2460>)
 80028d0:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80028d2:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <menu+0x2460>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d902      	bls.n	80028e0 <menu+0x239c>
				devirmeSilindirTipi = 0;
 80028da:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <menu+0x2460>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028e0:	f002 f9a4 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80028e4:	2104      	movs	r1, #4
 80028e6:	4824      	ldr	r0, [pc, #144]	; (8002978 <menu+0x2434>)
 80028e8:	f005 fe46 	bl	8008578 <HAL_GPIO_ReadPin>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d119      	bne.n	8002926 <menu+0x23e2>
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <menu+0x2438>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	f083 0301 	eor.w	r3, r3, #1
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d012      	beq.n	8002926 <menu+0x23e2>
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <menu+0x244c>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d10e      	bne.n	8002926 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <menu+0x2460>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <menu+0x2460>)
 8002912:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <menu+0x2460>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 800291c:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <menu+0x2460>)
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002922:	f002 f983 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002926:	2108      	movs	r1, #8
 8002928:	4813      	ldr	r0, [pc, #76]	; (8002978 <menu+0x2434>)
 800292a:	f005 fe25 	bl	8008578 <HAL_GPIO_ReadPin>
 800292e:	4603      	mov	r3, r0
 8002930:	2b01      	cmp	r3, #1
 8002932:	d10d      	bne.n	8002950 <menu+0x240c>
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <menu+0x2438>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	f083 0301 	eor.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <menu+0x2460>)
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <menu+0x2440>)
 8002948:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800294a:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <menu+0x2444>)
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <menu+0x2448>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b15      	cmp	r3, #21
 8002956:	f040 80c2 	bne.w	8002ade <menu+0x259a>
		if(dilSecim == 0) {
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <menu+0x242c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d12c      	bne.n	80029bc <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8002962:	4a15      	ldr	r2, [pc, #84]	; (80029b8 <menu+0x2474>)
 8002964:	2101      	movs	r1, #1
 8002966:	2001      	movs	r0, #1
 8002968:	f7fd fd8b 	bl	8000482 <lcd_print>
 800296c:	e02f      	b.n	80029ce <menu+0x248a>
 800296e:	bf00      	nop
 8002970:	20000a4c 	.word	0x20000a4c
 8002974:	0800bd00 	.word	0x0800bd00
 8002978:	40010800 	.word	0x40010800
 800297c:	20000a5a 	.word	0x20000a5a
 8002980:	20000a3d 	.word	0x20000a3d
 8002984:	200009c0 	.word	0x200009c0
 8002988:	20000a57 	.word	0x20000a57
 800298c:	20000a2c 	.word	0x20000a2c
 8002990:	20000a3b 	.word	0x20000a3b
 8002994:	0800c180 	.word	0x0800c180
 8002998:	0800c194 	.word	0x0800c194
 800299c:	0800c1a8 	.word	0x0800c1a8
 80029a0:	0800c1bc 	.word	0x0800c1bc
 80029a4:	20000a3e 	.word	0x20000a3e
 80029a8:	0800c1d0 	.word	0x0800c1d0
 80029ac:	0800c1e4 	.word	0x0800c1e4
 80029b0:	0800c1f4 	.word	0x0800c1f4
 80029b4:	0800c208 	.word	0x0800c208
 80029b8:	0800c218 	.word	0x0800c218
		} else if(dilSecim == 1) {
 80029bc:	4b9c      	ldr	r3, [pc, #624]	; (8002c30 <menu+0x26ec>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d104      	bne.n	80029ce <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80029c4:	4a9b      	ldr	r2, [pc, #620]	; (8002c34 <menu+0x26f0>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	2001      	movs	r0, #1
 80029ca:	f7fd fd5a 	bl	8000482 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80029ce:	4b9a      	ldr	r3, [pc, #616]	; (8002c38 <menu+0x26f4>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d112      	bne.n	80029fc <menu+0x24b8>
			if(dilSecim == 0) {
 80029d6:	4b96      	ldr	r3, [pc, #600]	; (8002c30 <menu+0x26ec>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80029de:	4a97      	ldr	r2, [pc, #604]	; (8002c3c <menu+0x26f8>)
 80029e0:	2101      	movs	r1, #1
 80029e2:	2002      	movs	r0, #2
 80029e4:	f7fd fd4d 	bl	8000482 <lcd_print>
			}
			if(dilSecim == 1) {
 80029e8:	4b91      	ldr	r3, [pc, #580]	; (8002c30 <menu+0x26ec>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d11c      	bne.n	8002a2a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80029f0:	4a93      	ldr	r2, [pc, #588]	; (8002c40 <menu+0x26fc>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2002      	movs	r0, #2
 80029f6:	f7fd fd44 	bl	8000482 <lcd_print>
 80029fa:	e016      	b.n	8002a2a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80029fc:	4b8e      	ldr	r3, [pc, #568]	; (8002c38 <menu+0x26f4>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d112      	bne.n	8002a2a <menu+0x24e6>
			if(dilSecim == 0) {
 8002a04:	4b8a      	ldr	r3, [pc, #552]	; (8002c30 <menu+0x26ec>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002a0c:	4a8d      	ldr	r2, [pc, #564]	; (8002c44 <menu+0x2700>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	2002      	movs	r0, #2
 8002a12:	f7fd fd36 	bl	8000482 <lcd_print>
 8002a16:	e008      	b.n	8002a2a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002a18:	4b85      	ldr	r3, [pc, #532]	; (8002c30 <menu+0x26ec>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d104      	bne.n	8002a2a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8002a20:	4a89      	ldr	r2, [pc, #548]	; (8002c48 <menu+0x2704>)
 8002a22:	2101      	movs	r1, #1
 8002a24:	2002      	movs	r0, #2
 8002a26:	f7fd fd2c 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4887      	ldr	r0, [pc, #540]	; (8002c4c <menu+0x2708>)
 8002a2e:	f005 fda3 	bl	8008578 <HAL_GPIO_ReadPin>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d115      	bne.n	8002a64 <menu+0x2520>
 8002a38:	4b85      	ldr	r3, [pc, #532]	; (8002c50 <menu+0x270c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	f083 0301 	eor.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002a46:	4b7c      	ldr	r3, [pc, #496]	; (8002c38 <menu+0x26f4>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b7a      	ldr	r3, [pc, #488]	; (8002c38 <menu+0x26f4>)
 8002a50:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002a52:	4b79      	ldr	r3, [pc, #484]	; (8002c38 <menu+0x26f4>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d902      	bls.n	8002a60 <menu+0x251c>
				platformSilindirTipi = 0;
 8002a5a:	4b77      	ldr	r3, [pc, #476]	; (8002c38 <menu+0x26f4>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a60:	f002 f8e4 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a64:	2104      	movs	r1, #4
 8002a66:	4879      	ldr	r0, [pc, #484]	; (8002c4c <menu+0x2708>)
 8002a68:	f005 fd86 	bl	8008578 <HAL_GPIO_ReadPin>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d115      	bne.n	8002a9e <menu+0x255a>
 8002a72:	4b77      	ldr	r3, [pc, #476]	; (8002c50 <menu+0x270c>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	f083 0301 	eor.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00e      	beq.n	8002a9e <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002a80:	4b6d      	ldr	r3, [pc, #436]	; (8002c38 <menu+0x26f4>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b6b      	ldr	r3, [pc, #428]	; (8002c38 <menu+0x26f4>)
 8002a8a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002a8c:	4b6a      	ldr	r3, [pc, #424]	; (8002c38 <menu+0x26f4>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <menu+0x2556>
		   		platformSilindirTipi = 1;
 8002a94:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <menu+0x26f4>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a9a:	f002 f8c7 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a9e:	2108      	movs	r1, #8
 8002aa0:	486a      	ldr	r0, [pc, #424]	; (8002c4c <menu+0x2708>)
 8002aa2:	f005 fd69 	bl	8008578 <HAL_GPIO_ReadPin>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d118      	bne.n	8002ade <menu+0x259a>
 8002aac:	4b68      	ldr	r3, [pc, #416]	; (8002c50 <menu+0x270c>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	f083 0301 	eor.w	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d011      	beq.n	8002ade <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002aba:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <menu+0x26f4>)
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <menu+0x2710>)
 8002ac0:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <menu+0x26f4>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d106      	bne.n	8002ad8 <menu+0x2594>
				altLimit = 1;
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <menu+0x2714>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002ad0:	4b61      	ldr	r3, [pc, #388]	; (8002c58 <menu+0x2714>)
 8002ad2:	781a      	ldrb	r2, [r3, #0]
 8002ad4:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <menu+0x2710>)
 8002ad6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002ad8:	4b60      	ldr	r3, [pc, #384]	; (8002c5c <menu+0x2718>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002ade:	4b60      	ldr	r3, [pc, #384]	; (8002c60 <menu+0x271c>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b16      	cmp	r3, #22
 8002ae4:	f040 8081 	bne.w	8002bea <menu+0x26a6>
		if(dilSecim == 0) {
 8002ae8:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <menu+0x26ec>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002af0:	4a5c      	ldr	r2, [pc, #368]	; (8002c64 <menu+0x2720>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	2001      	movs	r0, #1
 8002af6:	f7fd fcc4 	bl	8000482 <lcd_print>
 8002afa:	e008      	b.n	8002b0e <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002afc:	4b4c      	ldr	r3, [pc, #304]	; (8002c30 <menu+0x26ec>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d104      	bne.n	8002b0e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002b04:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <menu+0x2724>)
 8002b06:	2101      	movs	r1, #1
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7fd fcba 	bl	8000482 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002b0e:	4b48      	ldr	r3, [pc, #288]	; (8002c30 <menu+0x26ec>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002b16:	4a55      	ldr	r2, [pc, #340]	; (8002c6c <menu+0x2728>)
 8002b18:	2101      	movs	r1, #1
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f7fd fcb1 	bl	8000482 <lcd_print>
 8002b20:	e008      	b.n	8002b34 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <menu+0x26ec>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d104      	bne.n	8002b34 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002b2a:	4a51      	ldr	r2, [pc, #324]	; (8002c70 <menu+0x272c>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2002      	movs	r0, #2
 8002b30:	f7fd fca7 	bl	8000482 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002b34:	4b4f      	ldr	r3, [pc, #316]	; (8002c74 <menu+0x2730>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	220a      	movs	r2, #10
 8002b3a:	494f      	ldr	r1, [pc, #316]	; (8002c78 <menu+0x2734>)
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f008 fe03 	bl	800b748 <itoa>
		lcd_print(2,16,snum);
 8002b42:	4a4d      	ldr	r2, [pc, #308]	; (8002c78 <menu+0x2734>)
 8002b44:	2110      	movs	r1, #16
 8002b46:	2002      	movs	r0, #2
 8002b48:	f7fd fc9b 	bl	8000482 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	483f      	ldr	r0, [pc, #252]	; (8002c4c <menu+0x2708>)
 8002b50:	f005 fd12 	bl	8008578 <HAL_GPIO_ReadPin>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d115      	bne.n	8002b86 <menu+0x2642>
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <menu+0x270c>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	f083 0301 	eor.w	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002b68:	4b42      	ldr	r3, [pc, #264]	; (8002c74 <menu+0x2730>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <menu+0x2730>)
 8002b72:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002b74:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <menu+0x2730>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b05      	cmp	r3, #5
 8002b7a:	d902      	bls.n	8002b82 <menu+0x263e>
				yukariValfTmr = 0;
 8002b7c:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <menu+0x2730>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b82:	f002 f853 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b86:	2104      	movs	r1, #4
 8002b88:	4830      	ldr	r0, [pc, #192]	; (8002c4c <menu+0x2708>)
 8002b8a:	f005 fcf5 	bl	8008578 <HAL_GPIO_ReadPin>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d115      	bne.n	8002bc0 <menu+0x267c>
 8002b94:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <menu+0x270c>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	f083 0301 	eor.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00e      	beq.n	8002bc0 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002ba2:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <menu+0x2730>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <menu+0x2730>)
 8002bac:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <menu+0x2730>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <menu+0x2678>
		   		yukariValfTmr = 5;
 8002bb6:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <menu+0x2730>)
 8002bb8:	2205      	movs	r2, #5
 8002bba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bbc:	f002 f836 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bc0:	2108      	movs	r1, #8
 8002bc2:	4822      	ldr	r0, [pc, #136]	; (8002c4c <menu+0x2708>)
 8002bc4:	f005 fcd8 	bl	8008578 <HAL_GPIO_ReadPin>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d10d      	bne.n	8002bea <menu+0x26a6>
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <menu+0x270c>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	f083 0301 	eor.w	r3, r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d006      	beq.n	8002bea <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <menu+0x2730>)
 8002bde:	781a      	ldrb	r2, [r3, #0]
 8002be0:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <menu+0x2710>)
 8002be2:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <menu+0x2718>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <menu+0x271c>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b17      	cmp	r3, #23
 8002bf0:	f040 80ac 	bne.w	8002d4c <menu+0x2808>
		if(dilSecim == 0) {
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <menu+0x26ec>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <menu+0x2738>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7fd fc3e 	bl	8000482 <lcd_print>
 8002c06:	e008      	b.n	8002c1a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <menu+0x26ec>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d104      	bne.n	8002c1a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <menu+0x273c>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	2001      	movs	r0, #1
 8002c16:	f7fd fc34 	bl	8000482 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <menu+0x26ec>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d130      	bne.n	8002c84 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <menu+0x2728>)
 8002c24:	2101      	movs	r1, #1
 8002c26:	2002      	movs	r0, #2
 8002c28:	f7fd fc2b 	bl	8000482 <lcd_print>
 8002c2c:	e033      	b.n	8002c96 <menu+0x2752>
 8002c2e:	bf00      	nop
 8002c30:	20000a4c 	.word	0x20000a4c
 8002c34:	0800c22c 	.word	0x0800c22c
 8002c38:	20000a3f 	.word	0x20000a3f
 8002c3c:	0800c1d0 	.word	0x0800c1d0
 8002c40:	0800c1e4 	.word	0x0800c1e4
 8002c44:	0800c1f4 	.word	0x0800c1f4
 8002c48:	0800c208 	.word	0x0800c208
 8002c4c:	40010800 	.word	0x40010800
 8002c50:	20000a5a 	.word	0x20000a5a
 8002c54:	200009c0 	.word	0x200009c0
 8002c58:	20000a32 	.word	0x20000a32
 8002c5c:	20000a57 	.word	0x20000a57
 8002c60:	20000a2c 	.word	0x20000a2c
 8002c64:	0800c23c 	.word	0x0800c23c
 8002c68:	0800c250 	.word	0x0800c250
 8002c6c:	0800bef0 	.word	0x0800bef0
 8002c70:	0800c264 	.word	0x0800c264
 8002c74:	20000a40 	.word	0x20000a40
 8002c78:	20000a00 	.word	0x20000a00
 8002c7c:	0800c274 	.word	0x0800c274
 8002c80:	0800c288 	.word	0x0800c288
			} else if(dilSecim == 1) {
 8002c84:	4b98      	ldr	r3, [pc, #608]	; (8002ee8 <menu+0x29a4>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d104      	bne.n	8002c96 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8002c8c:	4a97      	ldr	r2, [pc, #604]	; (8002eec <menu+0x29a8>)
 8002c8e:	2101      	movs	r1, #1
 8002c90:	2002      	movs	r0, #2
 8002c92:	f7fd fbf6 	bl	8000482 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002c96:	4b96      	ldr	r3, [pc, #600]	; (8002ef0 <menu+0x29ac>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	220a      	movs	r2, #10
 8002c9c:	4995      	ldr	r1, [pc, #596]	; (8002ef4 <menu+0x29b0>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f008 fd52 	bl	800b748 <itoa>
		lcd_print(2,16,snum);
 8002ca4:	4a93      	ldr	r2, [pc, #588]	; (8002ef4 <menu+0x29b0>)
 8002ca6:	2110      	movs	r1, #16
 8002ca8:	2002      	movs	r0, #2
 8002caa:	f7fd fbea 	bl	8000482 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4891      	ldr	r0, [pc, #580]	; (8002ef8 <menu+0x29b4>)
 8002cb2:	f005 fc61 	bl	8008578 <HAL_GPIO_ReadPin>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d115      	bne.n	8002ce8 <menu+0x27a4>
 8002cbc:	4b8f      	ldr	r3, [pc, #572]	; (8002efc <menu+0x29b8>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	f083 0301 	eor.w	r3, r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00e      	beq.n	8002ce8 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8002cca:	4b89      	ldr	r3, [pc, #548]	; (8002ef0 <menu+0x29ac>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4b87      	ldr	r3, [pc, #540]	; (8002ef0 <menu+0x29ac>)
 8002cd4:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002cd6:	4b86      	ldr	r3, [pc, #536]	; (8002ef0 <menu+0x29ac>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d902      	bls.n	8002ce4 <menu+0x27a0>
				asagiValfTmr = 0;
 8002cde:	4b84      	ldr	r3, [pc, #528]	; (8002ef0 <menu+0x29ac>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ce4:	f001 ffa2 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ce8:	2104      	movs	r1, #4
 8002cea:	4883      	ldr	r0, [pc, #524]	; (8002ef8 <menu+0x29b4>)
 8002cec:	f005 fc44 	bl	8008578 <HAL_GPIO_ReadPin>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d115      	bne.n	8002d22 <menu+0x27de>
 8002cf6:	4b81      	ldr	r3, [pc, #516]	; (8002efc <menu+0x29b8>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	f083 0301 	eor.w	r3, r3, #1
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00e      	beq.n	8002d22 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8002d04:	4b7a      	ldr	r3, [pc, #488]	; (8002ef0 <menu+0x29ac>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	4b78      	ldr	r3, [pc, #480]	; (8002ef0 <menu+0x29ac>)
 8002d0e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002d10:	4b77      	ldr	r3, [pc, #476]	; (8002ef0 <menu+0x29ac>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b06      	cmp	r3, #6
 8002d16:	d902      	bls.n	8002d1e <menu+0x27da>
		   		asagiValfTmr = 5;
 8002d18:	4b75      	ldr	r3, [pc, #468]	; (8002ef0 <menu+0x29ac>)
 8002d1a:	2205      	movs	r2, #5
 8002d1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d1e:	f001 ff85 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d22:	2108      	movs	r1, #8
 8002d24:	4874      	ldr	r0, [pc, #464]	; (8002ef8 <menu+0x29b4>)
 8002d26:	f005 fc27 	bl	8008578 <HAL_GPIO_ReadPin>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10d      	bne.n	8002d4c <menu+0x2808>
 8002d30:	4b72      	ldr	r3, [pc, #456]	; (8002efc <menu+0x29b8>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	f083 0301 	eor.w	r3, r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d006      	beq.n	8002d4c <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8002d3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <menu+0x29ac>)
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	4b6f      	ldr	r3, [pc, #444]	; (8002f00 <menu+0x29bc>)
 8002d44:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002d46:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <menu+0x29c0>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002d4c:	4b6e      	ldr	r3, [pc, #440]	; (8002f08 <menu+0x29c4>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b18      	cmp	r3, #24
 8002d52:	f040 809d 	bne.w	8002e90 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8002d56:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <menu+0x29c8>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d113      	bne.n	8002d86 <menu+0x2842>
			if(dilSecim == 0) {
 8002d5e:	4b62      	ldr	r3, [pc, #392]	; (8002ee8 <menu+0x29a4>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002d66:	4a6a      	ldr	r2, [pc, #424]	; (8002f10 <menu+0x29cc>)
 8002d68:	2101      	movs	r1, #1
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f7fd fb89 	bl	8000482 <lcd_print>
 8002d70:	e020      	b.n	8002db4 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002d72:	4b5d      	ldr	r3, [pc, #372]	; (8002ee8 <menu+0x29a4>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d11c      	bne.n	8002db4 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002d7a:	4a66      	ldr	r2, [pc, #408]	; (8002f14 <menu+0x29d0>)
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f7fd fb7f 	bl	8000482 <lcd_print>
 8002d84:	e016      	b.n	8002db4 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002d86:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <menu+0x29c8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d112      	bne.n	8002db4 <menu+0x2870>
			if(dilSecim == 0) {
 8002d8e:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <menu+0x29a4>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8002d96:	4a60      	ldr	r2, [pc, #384]	; (8002f18 <menu+0x29d4>)
 8002d98:	2101      	movs	r1, #1
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7fd fb71 	bl	8000482 <lcd_print>
 8002da0:	e008      	b.n	8002db4 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <menu+0x29a4>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d104      	bne.n	8002db4 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8002daa:	4a5c      	ldr	r2, [pc, #368]	; (8002f1c <menu+0x29d8>)
 8002dac:	2101      	movs	r1, #1
 8002dae:	2001      	movs	r0, #1
 8002db0:	f7fd fb67 	bl	8000482 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8002db4:	4b4c      	ldr	r3, [pc, #304]	; (8002ee8 <menu+0x29a4>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <menu+0x29dc>)
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f7fd fb5e 	bl	8000482 <lcd_print>
 8002dc6:	e008      	b.n	8002dda <menu+0x2896>
			} else if(dilSecim == 1) {
 8002dc8:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <menu+0x29a4>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d104      	bne.n	8002dda <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8002dd0:	4a46      	ldr	r2, [pc, #280]	; (8002eec <menu+0x29a8>)
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	f7fd fb54 	bl	8000482 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002dda:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <menu+0x29e0>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	220a      	movs	r2, #10
 8002de0:	4944      	ldr	r1, [pc, #272]	; (8002ef4 <menu+0x29b0>)
 8002de2:	4618      	mov	r0, r3
 8002de4:	f008 fcb0 	bl	800b748 <itoa>
		lcd_print(2, 16, snum);
 8002de8:	4a42      	ldr	r2, [pc, #264]	; (8002ef4 <menu+0x29b0>)
 8002dea:	2110      	movs	r1, #16
 8002dec:	2002      	movs	r0, #2
 8002dee:	f7fd fb48 	bl	8000482 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df2:	2102      	movs	r1, #2
 8002df4:	4840      	ldr	r0, [pc, #256]	; (8002ef8 <menu+0x29b4>)
 8002df6:	f005 fbbf 	bl	8008578 <HAL_GPIO_ReadPin>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d115      	bne.n	8002e2c <menu+0x28e8>
 8002e00:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <menu+0x29b8>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	f083 0301 	eor.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00e      	beq.n	8002e2c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002e0e:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <menu+0x29e0>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	3301      	adds	r3, #1
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4b43      	ldr	r3, [pc, #268]	; (8002f24 <menu+0x29e0>)
 8002e18:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002e1a:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <menu+0x29e0>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d902      	bls.n	8002e28 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8002e22:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <menu+0x29e0>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e28:	f001 ff00 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e2c:	2104      	movs	r1, #4
 8002e2e:	4832      	ldr	r0, [pc, #200]	; (8002ef8 <menu+0x29b4>)
 8002e30:	f005 fba2 	bl	8008578 <HAL_GPIO_ReadPin>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d115      	bne.n	8002e66 <menu+0x2922>
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <menu+0x29b8>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	f083 0301 	eor.w	r3, r3, #1
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002e48:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <menu+0x29e0>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <menu+0x29e0>)
 8002e52:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002e54:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <menu+0x29e0>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d902      	bls.n	8002e62 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8002e5c:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <menu+0x29e0>)
 8002e5e:	2205      	movs	r2, #5
 8002e60:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e62:	f001 fee3 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e66:	2108      	movs	r1, #8
 8002e68:	4823      	ldr	r0, [pc, #140]	; (8002ef8 <menu+0x29b4>)
 8002e6a:	f005 fb85 	bl	8008578 <HAL_GPIO_ReadPin>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d10d      	bne.n	8002e90 <menu+0x294c>
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <menu+0x29b8>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f083 0301 	eor.w	r3, r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8002e82:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <menu+0x29e0>)
 8002e84:	781a      	ldrb	r2, [r3, #0]
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <menu+0x29bc>)
 8002e88:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <menu+0x29c0>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <menu+0x29c4>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b19      	cmp	r3, #25
 8002e96:	f040 80c4 	bne.w	8003022 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <menu+0x29c8>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d113      	bne.n	8002eca <menu+0x2986>
			if(dilSecim == 0) {
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <menu+0x29a4>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8002eaa:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <menu+0x29e4>)
 8002eac:	2101      	movs	r1, #1
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f7fd fae7 	bl	8000482 <lcd_print>
 8002eb4:	e047      	b.n	8002f46 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <menu+0x29a4>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d143      	bne.n	8002f46 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <menu+0x29e8>)
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f7fd fadd 	bl	8000482 <lcd_print>
 8002ec8:	e03d      	b.n	8002f46 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <menu+0x29c8>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d139      	bne.n	8002f46 <menu+0x2a02>
			if(dilSecim == 0) {
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <menu+0x29a4>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d12c      	bne.n	8002f34 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <menu+0x29ec>)
 8002edc:	2101      	movs	r1, #1
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7fd facf 	bl	8000482 <lcd_print>
 8002ee4:	e02f      	b.n	8002f46 <menu+0x2a02>
 8002ee6:	bf00      	nop
 8002ee8:	20000a4c 	.word	0x20000a4c
 8002eec:	0800c264 	.word	0x0800c264
 8002ef0:	20000a41 	.word	0x20000a41
 8002ef4:	20000a00 	.word	0x20000a00
 8002ef8:	40010800 	.word	0x40010800
 8002efc:	20000a5a 	.word	0x20000a5a
 8002f00:	200009c0 	.word	0x200009c0
 8002f04:	20000a57 	.word	0x20000a57
 8002f08:	20000a2c 	.word	0x20000a2c
 8002f0c:	20000a3b 	.word	0x20000a3b
 8002f10:	0800c29c 	.word	0x0800c29c
 8002f14:	0800c2b0 	.word	0x0800c2b0
 8002f18:	0800c2c4 	.word	0x0800c2c4
 8002f1c:	0800c2d8 	.word	0x0800c2d8
 8002f20:	0800bef0 	.word	0x0800bef0
 8002f24:	20000a42 	.word	0x20000a42
 8002f28:	0800c2ec 	.word	0x0800c2ec
 8002f2c:	0800c300 	.word	0x0800c300
 8002f30:	0800c314 	.word	0x0800c314
			} else if(dilSecim == 1) {
 8002f34:	4b73      	ldr	r3, [pc, #460]	; (8003104 <menu+0x2bc0>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d104      	bne.n	8002f46 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8002f3c:	4a72      	ldr	r2, [pc, #456]	; (8003108 <menu+0x2bc4>)
 8002f3e:	2101      	movs	r1, #1
 8002f40:	2001      	movs	r0, #1
 8002f42:	f7fd fa9e 	bl	8000482 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8002f46:	4b6f      	ldr	r3, [pc, #444]	; (8003104 <menu+0x2bc0>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d105      	bne.n	8002f5a <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8002f4e:	4a6f      	ldr	r2, [pc, #444]	; (800310c <menu+0x2bc8>)
 8002f50:	2101      	movs	r1, #1
 8002f52:	2002      	movs	r0, #2
 8002f54:	f7fd fa95 	bl	8000482 <lcd_print>
 8002f58:	e008      	b.n	8002f6c <menu+0x2a28>
			} else if(dilSecim == 1) {
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	; (8003104 <menu+0x2bc0>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d104      	bne.n	8002f6c <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8002f62:	4a6b      	ldr	r2, [pc, #428]	; (8003110 <menu+0x2bcc>)
 8002f64:	2101      	movs	r1, #1
 8002f66:	2002      	movs	r0, #2
 8002f68:	f7fd fa8b 	bl	8000482 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002f6c:	4b69      	ldr	r3, [pc, #420]	; (8003114 <menu+0x2bd0>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	220a      	movs	r2, #10
 8002f72:	4969      	ldr	r1, [pc, #420]	; (8003118 <menu+0x2bd4>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f008 fbe7 	bl	800b748 <itoa>
		lcd_print(2,16,snum);
 8002f7a:	4a67      	ldr	r2, [pc, #412]	; (8003118 <menu+0x2bd4>)
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f7fd fa7f 	bl	8000482 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f84:	2102      	movs	r1, #2
 8002f86:	4865      	ldr	r0, [pc, #404]	; (800311c <menu+0x2bd8>)
 8002f88:	f005 faf6 	bl	8008578 <HAL_GPIO_ReadPin>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d115      	bne.n	8002fbe <menu+0x2a7a>
 8002f92:	4b63      	ldr	r3, [pc, #396]	; (8003120 <menu+0x2bdc>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	f083 0301 	eor.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002fa0:	4b5c      	ldr	r3, [pc, #368]	; (8003114 <menu+0x2bd0>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	4b5a      	ldr	r3, [pc, #360]	; (8003114 <menu+0x2bd0>)
 8002faa:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002fac:	4b59      	ldr	r3, [pc, #356]	; (8003114 <menu+0x2bd0>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d902      	bls.n	8002fba <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8002fb4:	4b57      	ldr	r3, [pc, #348]	; (8003114 <menu+0x2bd0>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fba:	f001 fe37 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fbe:	2104      	movs	r1, #4
 8002fc0:	4856      	ldr	r0, [pc, #344]	; (800311c <menu+0x2bd8>)
 8002fc2:	f005 fad9 	bl	8008578 <HAL_GPIO_ReadPin>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d115      	bne.n	8002ff8 <menu+0x2ab4>
 8002fcc:	4b54      	ldr	r3, [pc, #336]	; (8003120 <menu+0x2bdc>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	f083 0301 	eor.w	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00e      	beq.n	8002ff8 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002fda:	4b4e      	ldr	r3, [pc, #312]	; (8003114 <menu+0x2bd0>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <menu+0x2bd0>)
 8002fe4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002fe6:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <menu+0x2bd0>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d902      	bls.n	8002ff4 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8002fee:	4b49      	ldr	r3, [pc, #292]	; (8003114 <menu+0x2bd0>)
 8002ff0:	2205      	movs	r2, #5
 8002ff2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ff4:	f001 fe1a 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ff8:	2108      	movs	r1, #8
 8002ffa:	4848      	ldr	r0, [pc, #288]	; (800311c <menu+0x2bd8>)
 8002ffc:	f005 fabc 	bl	8008578 <HAL_GPIO_ReadPin>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d10d      	bne.n	8003022 <menu+0x2ade>
 8003006:	4b46      	ldr	r3, [pc, #280]	; (8003120 <menu+0x2bdc>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f083 0301 	eor.w	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d006      	beq.n	8003022 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003014:	4b3f      	ldr	r3, [pc, #252]	; (8003114 <menu+0x2bd0>)
 8003016:	781a      	ldrb	r2, [r3, #0]
 8003018:	4b42      	ldr	r3, [pc, #264]	; (8003124 <menu+0x2be0>)
 800301a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800301c:	4b42      	ldr	r3, [pc, #264]	; (8003128 <menu+0x2be4>)
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003022:	4b42      	ldr	r3, [pc, #264]	; (800312c <menu+0x2be8>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b1a      	cmp	r3, #26
 8003028:	f040 80ec 	bne.w	8003204 <menu+0x2cc0>
		if(dilSecim == 0) {
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <menu+0x2bc0>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003034:	4a3e      	ldr	r2, [pc, #248]	; (8003130 <menu+0x2bec>)
 8003036:	2101      	movs	r1, #1
 8003038:	2001      	movs	r0, #1
 800303a:	f7fd fa22 	bl	8000482 <lcd_print>
 800303e:	e008      	b.n	8003052 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003040:	4b30      	ldr	r3, [pc, #192]	; (8003104 <menu+0x2bc0>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d104      	bne.n	8003052 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003048:	4a3a      	ldr	r2, [pc, #232]	; (8003134 <menu+0x2bf0>)
 800304a:	2101      	movs	r1, #1
 800304c:	2001      	movs	r0, #1
 800304e:	f7fd fa18 	bl	8000482 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <menu+0x2bf4>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b63      	cmp	r3, #99	; 0x63
 8003058:	d91e      	bls.n	8003098 <menu+0x2b54>
			if(dilSecim == 0) {
 800305a:	4b2a      	ldr	r3, [pc, #168]	; (8003104 <menu+0x2bc0>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003062:	4a2a      	ldr	r2, [pc, #168]	; (800310c <menu+0x2bc8>)
 8003064:	2101      	movs	r1, #1
 8003066:	2002      	movs	r0, #2
 8003068:	f7fd fa0b 	bl	8000482 <lcd_print>
			}
			if(dilSecim == 1) {
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <menu+0x2bc0>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d104      	bne.n	800307e <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003074:	4a26      	ldr	r2, [pc, #152]	; (8003110 <menu+0x2bcc>)
 8003076:	2101      	movs	r1, #1
 8003078:	2002      	movs	r0, #2
 800307a:	f7fd fa02 	bl	8000482 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800307e:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <menu+0x2bf4>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	220a      	movs	r2, #10
 8003084:	4924      	ldr	r1, [pc, #144]	; (8003118 <menu+0x2bd4>)
 8003086:	4618      	mov	r0, r3
 8003088:	f008 fb5e 	bl	800b748 <itoa>
			lcd_print(2,14,snum);
 800308c:	4a22      	ldr	r2, [pc, #136]	; (8003118 <menu+0x2bd4>)
 800308e:	210e      	movs	r1, #14
 8003090:	2002      	movs	r0, #2
 8003092:	f7fd f9f6 	bl	8000482 <lcd_print>
 8003096:	e066      	b.n	8003166 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <menu+0x2bf4>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b09      	cmp	r3, #9
 800309e:	d923      	bls.n	80030e8 <menu+0x2ba4>
 80030a0:	4b25      	ldr	r3, [pc, #148]	; (8003138 <menu+0x2bf4>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b63      	cmp	r3, #99	; 0x63
 80030a6:	d81f      	bhi.n	80030e8 <menu+0x2ba4>
			if(dilSecim == 0) {
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <menu+0x2bc0>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d105      	bne.n	80030bc <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 80030b0:	4a16      	ldr	r2, [pc, #88]	; (800310c <menu+0x2bc8>)
 80030b2:	2101      	movs	r1, #1
 80030b4:	2002      	movs	r0, #2
 80030b6:	f7fd f9e4 	bl	8000482 <lcd_print>
 80030ba:	e008      	b.n	80030ce <menu+0x2b8a>
			} else if(dilSecim == 1) {
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <menu+0x2bc0>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d104      	bne.n	80030ce <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 80030c4:	4a12      	ldr	r2, [pc, #72]	; (8003110 <menu+0x2bcc>)
 80030c6:	2101      	movs	r1, #1
 80030c8:	2002      	movs	r0, #2
 80030ca:	f7fd f9da 	bl	8000482 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <menu+0x2bf4>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	220a      	movs	r2, #10
 80030d4:	4910      	ldr	r1, [pc, #64]	; (8003118 <menu+0x2bd4>)
 80030d6:	4618      	mov	r0, r3
 80030d8:	f008 fb36 	bl	800b748 <itoa>
			lcd_print(2, 15, snum);
 80030dc:	4a0e      	ldr	r2, [pc, #56]	; (8003118 <menu+0x2bd4>)
 80030de:	210f      	movs	r1, #15
 80030e0:	2002      	movs	r0, #2
 80030e2:	f7fd f9ce 	bl	8000482 <lcd_print>
 80030e6:	e03e      	b.n	8003166 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <menu+0x2bf4>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b09      	cmp	r3, #9
 80030ee:	d83a      	bhi.n	8003166 <menu+0x2c22>
			if(dilSecim == 0) {
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <menu+0x2bc0>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d121      	bne.n	800313c <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <menu+0x2bc8>)
 80030fa:	2101      	movs	r1, #1
 80030fc:	2002      	movs	r0, #2
 80030fe:	f7fd f9c0 	bl	8000482 <lcd_print>
 8003102:	e024      	b.n	800314e <menu+0x2c0a>
 8003104:	20000a4c 	.word	0x20000a4c
 8003108:	0800c328 	.word	0x0800c328
 800310c:	0800bef0 	.word	0x0800bef0
 8003110:	0800c264 	.word	0x0800c264
 8003114:	20000a43 	.word	0x20000a43
 8003118:	20000a00 	.word	0x20000a00
 800311c:	40010800 	.word	0x40010800
 8003120:	20000a5a 	.word	0x20000a5a
 8003124:	200009c0 	.word	0x200009c0
 8003128:	20000a57 	.word	0x20000a57
 800312c:	20000a2c 	.word	0x20000a2c
 8003130:	0800c33c 	.word	0x0800c33c
 8003134:	0800c350 	.word	0x0800c350
 8003138:	20000a44 	.word	0x20000a44
			} else if(dilSecim == 1) {
 800313c:	4b8f      	ldr	r3, [pc, #572]	; (800337c <menu+0x2e38>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d104      	bne.n	800314e <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003144:	4a8e      	ldr	r2, [pc, #568]	; (8003380 <menu+0x2e3c>)
 8003146:	2101      	movs	r1, #1
 8003148:	2002      	movs	r0, #2
 800314a:	f7fd f99a 	bl	8000482 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800314e:	4b8d      	ldr	r3, [pc, #564]	; (8003384 <menu+0x2e40>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	220a      	movs	r2, #10
 8003154:	498c      	ldr	r1, [pc, #560]	; (8003388 <menu+0x2e44>)
 8003156:	4618      	mov	r0, r3
 8003158:	f008 faf6 	bl	800b748 <itoa>
			lcd_print(2, 16, snum);
 800315c:	4a8a      	ldr	r2, [pc, #552]	; (8003388 <menu+0x2e44>)
 800315e:	2110      	movs	r1, #16
 8003160:	2002      	movs	r0, #2
 8003162:	f7fd f98e 	bl	8000482 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003166:	2102      	movs	r1, #2
 8003168:	4888      	ldr	r0, [pc, #544]	; (800338c <menu+0x2e48>)
 800316a:	f005 fa05 	bl	8008578 <HAL_GPIO_ReadPin>
 800316e:	4603      	mov	r3, r0
 8003170:	2b01      	cmp	r3, #1
 8003172:	d115      	bne.n	80031a0 <menu+0x2c5c>
 8003174:	4b86      	ldr	r3, [pc, #536]	; (8003390 <menu+0x2e4c>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00e      	beq.n	80031a0 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003182:	4b80      	ldr	r3, [pc, #512]	; (8003384 <menu+0x2e40>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4b7e      	ldr	r3, [pc, #504]	; (8003384 <menu+0x2e40>)
 800318c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800318e:	4b7d      	ldr	r3, [pc, #500]	; (8003384 <menu+0x2e40>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2bb4      	cmp	r3, #180	; 0xb4
 8003194:	d902      	bls.n	800319c <menu+0x2c58>
				makineCalismaTmr = 0;
 8003196:	4b7b      	ldr	r3, [pc, #492]	; (8003384 <menu+0x2e40>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800319c:	f001 fd46 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a0:	2104      	movs	r1, #4
 80031a2:	487a      	ldr	r0, [pc, #488]	; (800338c <menu+0x2e48>)
 80031a4:	f005 f9e8 	bl	8008578 <HAL_GPIO_ReadPin>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d115      	bne.n	80031da <menu+0x2c96>
 80031ae:	4b78      	ldr	r3, [pc, #480]	; (8003390 <menu+0x2e4c>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	f083 0301 	eor.w	r3, r3, #1
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80031bc:	4b71      	ldr	r3, [pc, #452]	; (8003384 <menu+0x2e40>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <menu+0x2e40>)
 80031c6:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80031c8:	4b6e      	ldr	r3, [pc, #440]	; (8003384 <menu+0x2e40>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2bb5      	cmp	r3, #181	; 0xb5
 80031ce:	d902      	bls.n	80031d6 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 80031d0:	4b6c      	ldr	r3, [pc, #432]	; (8003384 <menu+0x2e40>)
 80031d2:	22b4      	movs	r2, #180	; 0xb4
 80031d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031d6:	f001 fd29 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031da:	2108      	movs	r1, #8
 80031dc:	486b      	ldr	r0, [pc, #428]	; (800338c <menu+0x2e48>)
 80031de:	f005 f9cb 	bl	8008578 <HAL_GPIO_ReadPin>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d10d      	bne.n	8003204 <menu+0x2cc0>
 80031e8:	4b69      	ldr	r3, [pc, #420]	; (8003390 <menu+0x2e4c>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f083 0301 	eor.w	r3, r3, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d006      	beq.n	8003204 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <menu+0x2e40>)
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	4b66      	ldr	r3, [pc, #408]	; (8003394 <menu+0x2e50>)
 80031fc:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80031fe:	4b66      	ldr	r3, [pc, #408]	; (8003398 <menu+0x2e54>)
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003204:	4b65      	ldr	r3, [pc, #404]	; (800339c <menu+0x2e58>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b1b      	cmp	r3, #27
 800320a:	f040 8083 	bne.w	8003314 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800320e:	4a64      	ldr	r2, [pc, #400]	; (80033a0 <menu+0x2e5c>)
 8003210:	2101      	movs	r1, #1
 8003212:	2001      	movs	r0, #1
 8003214:	f7fd f935 	bl	8000482 <lcd_print>

		if(buzzer == 0) {
 8003218:	4b62      	ldr	r3, [pc, #392]	; (80033a4 <menu+0x2e60>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d113      	bne.n	8003248 <menu+0x2d04>
			if(dilSecim == 0) {
 8003220:	4b56      	ldr	r3, [pc, #344]	; (800337c <menu+0x2e38>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003228:	4a5f      	ldr	r2, [pc, #380]	; (80033a8 <menu+0x2e64>)
 800322a:	2101      	movs	r1, #1
 800322c:	2002      	movs	r0, #2
 800322e:	f7fd f928 	bl	8000482 <lcd_print>
 8003232:	e020      	b.n	8003276 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003234:	4b51      	ldr	r3, [pc, #324]	; (800337c <menu+0x2e38>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d11c      	bne.n	8003276 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 800323c:	4a5b      	ldr	r2, [pc, #364]	; (80033ac <menu+0x2e68>)
 800323e:	2101      	movs	r1, #1
 8003240:	2002      	movs	r0, #2
 8003242:	f7fd f91e 	bl	8000482 <lcd_print>
 8003246:	e016      	b.n	8003276 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003248:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <menu+0x2e60>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d112      	bne.n	8003276 <menu+0x2d32>
			if(dilSecim == 0) {
 8003250:	4b4a      	ldr	r3, [pc, #296]	; (800337c <menu+0x2e38>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003258:	4a55      	ldr	r2, [pc, #340]	; (80033b0 <menu+0x2e6c>)
 800325a:	2101      	movs	r1, #1
 800325c:	2002      	movs	r0, #2
 800325e:	f7fd f910 	bl	8000482 <lcd_print>
 8003262:	e008      	b.n	8003276 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003264:	4b45      	ldr	r3, [pc, #276]	; (800337c <menu+0x2e38>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d104      	bne.n	8003276 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 800326c:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <menu+0x2e70>)
 800326e:	2101      	movs	r1, #1
 8003270:	2002      	movs	r0, #2
 8003272:	f7fd f906 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003276:	2102      	movs	r1, #2
 8003278:	4844      	ldr	r0, [pc, #272]	; (800338c <menu+0x2e48>)
 800327a:	f005 f97d 	bl	8008578 <HAL_GPIO_ReadPin>
 800327e:	4603      	mov	r3, r0
 8003280:	2b01      	cmp	r3, #1
 8003282:	d115      	bne.n	80032b0 <menu+0x2d6c>
 8003284:	4b42      	ldr	r3, [pc, #264]	; (8003390 <menu+0x2e4c>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	f083 0301 	eor.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00e      	beq.n	80032b0 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003292:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <menu+0x2e60>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	3301      	adds	r3, #1
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4b42      	ldr	r3, [pc, #264]	; (80033a4 <menu+0x2e60>)
 800329c:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <menu+0x2e60>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d902      	bls.n	80032ac <menu+0x2d68>
				buzzer = 0;
 80032a6:	4b3f      	ldr	r3, [pc, #252]	; (80033a4 <menu+0x2e60>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032ac:	f001 fcbe 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b0:	2104      	movs	r1, #4
 80032b2:	4836      	ldr	r0, [pc, #216]	; (800338c <menu+0x2e48>)
 80032b4:	f005 f960 	bl	8008578 <HAL_GPIO_ReadPin>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d115      	bne.n	80032ea <menu+0x2da6>
 80032be:	4b34      	ldr	r3, [pc, #208]	; (8003390 <menu+0x2e4c>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00e      	beq.n	80032ea <menu+0x2da6>
			buzzer = buzzer - 1;
 80032cc:	4b35      	ldr	r3, [pc, #212]	; (80033a4 <menu+0x2e60>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <menu+0x2e60>)
 80032d6:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80032d8:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <menu+0x2e60>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <menu+0x2da2>
		   		buzzer = 1;
 80032e0:	4b30      	ldr	r3, [pc, #192]	; (80033a4 <menu+0x2e60>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032e6:	f001 fca1 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ea:	2108      	movs	r1, #8
 80032ec:	4827      	ldr	r0, [pc, #156]	; (800338c <menu+0x2e48>)
 80032ee:	f005 f943 	bl	8008578 <HAL_GPIO_ReadPin>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10d      	bne.n	8003314 <menu+0x2dd0>
 80032f8:	4b25      	ldr	r3, [pc, #148]	; (8003390 <menu+0x2e4c>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	f083 0301 	eor.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003306:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <menu+0x2e60>)
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <menu+0x2e50>)
 800330c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <menu+0x2e54>)
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003314:	4b21      	ldr	r3, [pc, #132]	; (800339c <menu+0x2e58>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b1c      	cmp	r3, #28
 800331a:	f040 80ab 	bne.w	8003474 <menu+0x2f30>
		calismaSayModu = 0;
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <menu+0x2e74>)
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003324:	4a25      	ldr	r2, [pc, #148]	; (80033bc <menu+0x2e78>)
 8003326:	2101      	movs	r1, #1
 8003328:	2001      	movs	r0, #1
 800332a:	f7fd f8aa 	bl	8000482 <lcd_print>

		if(demoMode == 0) {
 800332e:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <menu+0x2e7c>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d113      	bne.n	800335e <menu+0x2e1a>
			if(dilSecim == 0) {
 8003336:	4b11      	ldr	r3, [pc, #68]	; (800337c <menu+0x2e38>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800333e:	4a1a      	ldr	r2, [pc, #104]	; (80033a8 <menu+0x2e64>)
 8003340:	2101      	movs	r1, #1
 8003342:	2002      	movs	r0, #2
 8003344:	f7fd f89d 	bl	8000482 <lcd_print>
 8003348:	e045      	b.n	80033d6 <menu+0x2e92>
			} else if(dilSecim == 1) {
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <menu+0x2e38>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d141      	bne.n	80033d6 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003352:	4a16      	ldr	r2, [pc, #88]	; (80033ac <menu+0x2e68>)
 8003354:	2101      	movs	r1, #1
 8003356:	2002      	movs	r0, #2
 8003358:	f7fd f893 	bl	8000482 <lcd_print>
 800335c:	e03b      	b.n	80033d6 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <menu+0x2e7c>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d137      	bne.n	80033d6 <menu+0x2e92>
			if(dilSecim == 0){
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <menu+0x2e38>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d12a      	bne.n	80033c4 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <menu+0x2e6c>)
 8003370:	2101      	movs	r1, #1
 8003372:	2002      	movs	r0, #2
 8003374:	f7fd f885 	bl	8000482 <lcd_print>
 8003378:	e02d      	b.n	80033d6 <menu+0x2e92>
 800337a:	bf00      	nop
 800337c:	20000a4c 	.word	0x20000a4c
 8003380:	0800c264 	.word	0x0800c264
 8003384:	20000a44 	.word	0x20000a44
 8003388:	20000a00 	.word	0x20000a00
 800338c:	40010800 	.word	0x40010800
 8003390:	20000a5a 	.word	0x20000a5a
 8003394:	200009c0 	.word	0x200009c0
 8003398:	20000a57 	.word	0x20000a57
 800339c:	20000a2c 	.word	0x20000a2c
 80033a0:	0800c364 	.word	0x0800c364
 80033a4:	20000a48 	.word	0x20000a48
 80033a8:	0800bc8c 	.word	0x0800bc8c
 80033ac:	0800bca0 	.word	0x0800bca0
 80033b0:	0800bcec 	.word	0x0800bcec
 80033b4:	0800bd00 	.word	0x0800bd00
 80033b8:	20000a4b 	.word	0x20000a4b
 80033bc:	0800c378 	.word	0x0800c378
 80033c0:	20000a4a 	.word	0x20000a4a
			} else if(dilSecim == 1) {
 80033c4:	4b71      	ldr	r3, [pc, #452]	; (800358c <menu+0x3048>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d104      	bne.n	80033d6 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80033cc:	4a70      	ldr	r2, [pc, #448]	; (8003590 <menu+0x304c>)
 80033ce:	2101      	movs	r1, #1
 80033d0:	2002      	movs	r0, #2
 80033d2:	f7fd f856 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033d6:	2102      	movs	r1, #2
 80033d8:	486e      	ldr	r0, [pc, #440]	; (8003594 <menu+0x3050>)
 80033da:	f005 f8cd 	bl	8008578 <HAL_GPIO_ReadPin>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d115      	bne.n	8003410 <menu+0x2ecc>
 80033e4:	4b6c      	ldr	r3, [pc, #432]	; (8003598 <menu+0x3054>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	f083 0301 	eor.w	r3, r3, #1
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00e      	beq.n	8003410 <menu+0x2ecc>
			demoMode = demoMode + 1;
 80033f2:	4b6a      	ldr	r3, [pc, #424]	; (800359c <menu+0x3058>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b68      	ldr	r3, [pc, #416]	; (800359c <menu+0x3058>)
 80033fc:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80033fe:	4b67      	ldr	r3, [pc, #412]	; (800359c <menu+0x3058>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d902      	bls.n	800340c <menu+0x2ec8>
				demoMode = 0;
 8003406:	4b65      	ldr	r3, [pc, #404]	; (800359c <menu+0x3058>)
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800340c:	f001 fc0e 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003410:	2104      	movs	r1, #4
 8003412:	4860      	ldr	r0, [pc, #384]	; (8003594 <menu+0x3050>)
 8003414:	f005 f8b0 	bl	8008578 <HAL_GPIO_ReadPin>
 8003418:	4603      	mov	r3, r0
 800341a:	2b01      	cmp	r3, #1
 800341c:	d115      	bne.n	800344a <menu+0x2f06>
 800341e:	4b5e      	ldr	r3, [pc, #376]	; (8003598 <menu+0x3054>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	f083 0301 	eor.w	r3, r3, #1
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00e      	beq.n	800344a <menu+0x2f06>
			demoMode = demoMode - 1;
 800342c:	4b5b      	ldr	r3, [pc, #364]	; (800359c <menu+0x3058>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	3b01      	subs	r3, #1
 8003432:	b2da      	uxtb	r2, r3
 8003434:	4b59      	ldr	r3, [pc, #356]	; (800359c <menu+0x3058>)
 8003436:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003438:	4b58      	ldr	r3, [pc, #352]	; (800359c <menu+0x3058>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <menu+0x2f02>
		   		demoMode = 1;
 8003440:	4b56      	ldr	r3, [pc, #344]	; (800359c <menu+0x3058>)
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003446:	f001 fbf1 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800344a:	2108      	movs	r1, #8
 800344c:	4851      	ldr	r0, [pc, #324]	; (8003594 <menu+0x3050>)
 800344e:	f005 f893 	bl	8008578 <HAL_GPIO_ReadPin>
 8003452:	4603      	mov	r3, r0
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10d      	bne.n	8003474 <menu+0x2f30>
 8003458:	4b4f      	ldr	r3, [pc, #316]	; (8003598 <menu+0x3054>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	f083 0301 	eor.w	r3, r3, #1
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <menu+0x2f30>
			eepromData[26] = demoMode;
 8003466:	4b4d      	ldr	r3, [pc, #308]	; (800359c <menu+0x3058>)
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <menu+0x305c>)
 800346c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800346e:	4b4d      	ldr	r3, [pc, #308]	; (80035a4 <menu+0x3060>)
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003474:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <menu+0x3064>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b1d      	cmp	r3, #29
 800347a:	f040 8132 	bne.w	80036e2 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800347e:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <menu+0x3068>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d113      	bne.n	80034ae <menu+0x2f6a>
 8003486:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <menu+0x306c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10f      	bne.n	80034ae <menu+0x2f6a>
 800348e:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <menu+0x3070>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <menu+0x2f6a>
 8003496:	4b48      	ldr	r3, [pc, #288]	; (80035b8 <menu+0x3074>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <menu+0x2f6a>
 800349e:	4b47      	ldr	r3, [pc, #284]	; (80035bc <menu+0x3078>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <menu+0x2f6a>
			calismaSayisiYar = 0;
 80034a6:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <menu+0x307c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
 80034ac:	e002      	b.n	80034b4 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80034ae:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <menu+0x307c>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <menu+0x3080>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d154      	bne.n	8003566 <menu+0x3022>
			if(dilSecim == 0) {
 80034bc:	4b33      	ldr	r3, [pc, #204]	; (800358c <menu+0x3048>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80034c4:	4a40      	ldr	r2, [pc, #256]	; (80035c8 <menu+0x3084>)
 80034c6:	2101      	movs	r1, #1
 80034c8:	2001      	movs	r0, #1
 80034ca:	f7fc ffda 	bl	8000482 <lcd_print>
 80034ce:	e008      	b.n	80034e2 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80034d0:	4b2e      	ldr	r3, [pc, #184]	; (800358c <menu+0x3048>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d104      	bne.n	80034e2 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80034d8:	4a3c      	ldr	r2, [pc, #240]	; (80035cc <menu+0x3088>)
 80034da:	2101      	movs	r1, #1
 80034dc:	2001      	movs	r0, #1
 80034de:	f7fc ffd0 	bl	8000482 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <menu+0x3078>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	220a      	movs	r2, #10
 80034e8:	4939      	ldr	r1, [pc, #228]	; (80035d0 <menu+0x308c>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f008 f92c 	bl	800b748 <itoa>
			lcd_print(2, 12, snum);
 80034f0:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <menu+0x308c>)
 80034f2:	210c      	movs	r1, #12
 80034f4:	2002      	movs	r0, #2
 80034f6:	f7fc ffc4 	bl	8000482 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <menu+0x3074>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	220a      	movs	r2, #10
 8003500:	4933      	ldr	r1, [pc, #204]	; (80035d0 <menu+0x308c>)
 8003502:	4618      	mov	r0, r3
 8003504:	f008 f920 	bl	800b748 <itoa>
			lcd_print(2, 13, snum);
 8003508:	4a31      	ldr	r2, [pc, #196]	; (80035d0 <menu+0x308c>)
 800350a:	210d      	movs	r1, #13
 800350c:	2002      	movs	r0, #2
 800350e:	f7fc ffb8 	bl	8000482 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8003512:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <menu+0x3070>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	220a      	movs	r2, #10
 8003518:	492d      	ldr	r1, [pc, #180]	; (80035d0 <menu+0x308c>)
 800351a:	4618      	mov	r0, r3
 800351c:	f008 f914 	bl	800b748 <itoa>
			lcd_print(2, 14, snum);
 8003520:	4a2b      	ldr	r2, [pc, #172]	; (80035d0 <menu+0x308c>)
 8003522:	210e      	movs	r1, #14
 8003524:	2002      	movs	r0, #2
 8003526:	f7fc ffac 	bl	8000482 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800352a:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <menu+0x306c>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	220a      	movs	r2, #10
 8003530:	4927      	ldr	r1, [pc, #156]	; (80035d0 <menu+0x308c>)
 8003532:	4618      	mov	r0, r3
 8003534:	f008 f908 	bl	800b748 <itoa>
			lcd_print(2, 15, snum);
 8003538:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <menu+0x308c>)
 800353a:	210f      	movs	r1, #15
 800353c:	2002      	movs	r0, #2
 800353e:	f7fc ffa0 	bl	8000482 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <menu+0x3068>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	220a      	movs	r2, #10
 8003548:	4921      	ldr	r1, [pc, #132]	; (80035d0 <menu+0x308c>)
 800354a:	4618      	mov	r0, r3
 800354c:	f008 f8fc 	bl	800b748 <itoa>
			lcd_print(2, 16, snum);
 8003550:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <menu+0x308c>)
 8003552:	2110      	movs	r1, #16
 8003554:	2002      	movs	r0, #2
 8003556:	f7fc ff94 	bl	8000482 <lcd_print>

			lcd_print(2, 1, "           ");
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <menu+0x3090>)
 800355c:	2101      	movs	r1, #1
 800355e:	2002      	movs	r0, #2
 8003560:	f7fc ff8f 	bl	8000482 <lcd_print>
 8003564:	e048      	b.n	80035f8 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <menu+0x3080>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d144      	bne.n	80035f8 <menu+0x30b4>
			if(dilSecim == 0) {
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <menu+0x3048>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d132      	bne.n	80035dc <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003576:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <menu+0x3084>)
 8003578:	2101      	movs	r1, #1
 800357a:	2001      	movs	r0, #1
 800357c:	f7fc ff81 	bl	8000482 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <menu+0x3094>)
 8003582:	2101      	movs	r1, #1
 8003584:	2002      	movs	r0, #2
 8003586:	f7fc ff7c 	bl	8000482 <lcd_print>
 800358a:	e035      	b.n	80035f8 <menu+0x30b4>
 800358c:	20000a4c 	.word	0x20000a4c
 8003590:	0800bd00 	.word	0x0800bd00
 8003594:	40010800 	.word	0x40010800
 8003598:	20000a5a 	.word	0x20000a5a
 800359c:	20000a4a 	.word	0x20000a4a
 80035a0:	200009c0 	.word	0x200009c0
 80035a4:	20000a57 	.word	0x20000a57
 80035a8:	20000a2c 	.word	0x20000a2c
 80035ac:	20000a29 	.word	0x20000a29
 80035b0:	20000a2a 	.word	0x20000a2a
 80035b4:	20000941 	.word	0x20000941
 80035b8:	20000942 	.word	0x20000942
 80035bc:	20000a2b 	.word	0x20000a2b
 80035c0:	20000a6c 	.word	0x20000a6c
 80035c4:	20000a4b 	.word	0x20000a4b
 80035c8:	0800c388 	.word	0x0800c388
 80035cc:	0800c39c 	.word	0x0800c39c
 80035d0:	20000a00 	.word	0x20000a00
 80035d4:	0800c3b0 	.word	0x0800c3b0
 80035d8:	0800c3bc 	.word	0x0800c3bc
			} else if(dilSecim == 1) {
 80035dc:	4b95      	ldr	r3, [pc, #596]	; (8003834 <menu+0x32f0>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d109      	bne.n	80035f8 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80035e4:	4a94      	ldr	r2, [pc, #592]	; (8003838 <menu+0x32f4>)
 80035e6:	2101      	movs	r1, #1
 80035e8:	2001      	movs	r0, #1
 80035ea:	f7fc ff4a 	bl	8000482 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80035ee:	4a93      	ldr	r2, [pc, #588]	; (800383c <menu+0x32f8>)
 80035f0:	2101      	movs	r1, #1
 80035f2:	2002      	movs	r0, #2
 80035f4:	f7fc ff45 	bl	8000482 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80035f8:	2102      	movs	r1, #2
 80035fa:	4891      	ldr	r0, [pc, #580]	; (8003840 <menu+0x32fc>)
 80035fc:	f004 ffbc 	bl	8008578 <HAL_GPIO_ReadPin>
 8003600:	4603      	mov	r3, r0
 8003602:	2b01      	cmp	r3, #1
 8003604:	d119      	bne.n	800363a <menu+0x30f6>
 8003606:	4b8f      	ldr	r3, [pc, #572]	; (8003844 <menu+0x3300>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	f083 0301 	eor.w	r3, r3, #1
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d012      	beq.n	800363a <menu+0x30f6>
 8003614:	4b8c      	ldr	r3, [pc, #560]	; (8003848 <menu+0x3304>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800361c:	4b8b      	ldr	r3, [pc, #556]	; (800384c <menu+0x3308>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	b2da      	uxtb	r2, r3
 8003624:	4b89      	ldr	r3, [pc, #548]	; (800384c <menu+0x3308>)
 8003626:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003628:	4b88      	ldr	r3, [pc, #544]	; (800384c <menu+0x3308>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d902      	bls.n	8003636 <menu+0x30f2>
				calismaSayModu = 0;
 8003630:	4b86      	ldr	r3, [pc, #536]	; (800384c <menu+0x3308>)
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003636:	f001 faf9 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800363a:	2104      	movs	r1, #4
 800363c:	4880      	ldr	r0, [pc, #512]	; (8003840 <menu+0x32fc>)
 800363e:	f004 ff9b 	bl	8008578 <HAL_GPIO_ReadPin>
 8003642:	4603      	mov	r3, r0
 8003644:	2b01      	cmp	r3, #1
 8003646:	d119      	bne.n	800367c <menu+0x3138>
 8003648:	4b7e      	ldr	r3, [pc, #504]	; (8003844 <menu+0x3300>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	f083 0301 	eor.w	r3, r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d012      	beq.n	800367c <menu+0x3138>
 8003656:	4b7c      	ldr	r3, [pc, #496]	; (8003848 <menu+0x3304>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00e      	beq.n	800367c <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800365e:	4b7b      	ldr	r3, [pc, #492]	; (800384c <menu+0x3308>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	3b01      	subs	r3, #1
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4b79      	ldr	r3, [pc, #484]	; (800384c <menu+0x3308>)
 8003668:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800366a:	4b78      	ldr	r3, [pc, #480]	; (800384c <menu+0x3308>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <menu+0x3134>
		   		calismaSayModu = 1;
 8003672:	4b76      	ldr	r3, [pc, #472]	; (800384c <menu+0x3308>)
 8003674:	2201      	movs	r2, #1
 8003676:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003678:	f001 fad8 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800367c:	2108      	movs	r1, #8
 800367e:	4870      	ldr	r0, [pc, #448]	; (8003840 <menu+0x32fc>)
 8003680:	f004 ff7a 	bl	8008578 <HAL_GPIO_ReadPin>
 8003684:	4603      	mov	r3, r0
 8003686:	2b01      	cmp	r3, #1
 8003688:	d12b      	bne.n	80036e2 <menu+0x319e>
 800368a:	4b6e      	ldr	r3, [pc, #440]	; (8003844 <menu+0x3300>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	f083 0301 	eor.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d024      	beq.n	80036e2 <menu+0x319e>
			eepromData[32] = 0;
 8003698:	4b6d      	ldr	r3, [pc, #436]	; (8003850 <menu+0x330c>)
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80036a0:	4b6b      	ldr	r3, [pc, #428]	; (8003850 <menu+0x330c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80036a6:	4b6a      	ldr	r3, [pc, #424]	; (8003850 <menu+0x330c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80036ac:	4b68      	ldr	r3, [pc, #416]	; (8003850 <menu+0x330c>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80036b2:	4b67      	ldr	r3, [pc, #412]	; (8003850 <menu+0x330c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80036b8:	4b66      	ldr	r3, [pc, #408]	; (8003854 <menu+0x3310>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80036be:	4b66      	ldr	r3, [pc, #408]	; (8003858 <menu+0x3314>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80036c4:	4b65      	ldr	r3, [pc, #404]	; (800385c <menu+0x3318>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80036ca:	4b65      	ldr	r3, [pc, #404]	; (8003860 <menu+0x331c>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80036d0:	4b64      	ldr	r3, [pc, #400]	; (8003864 <menu+0x3320>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80036d6:	4b5d      	ldr	r3, [pc, #372]	; (800384c <menu+0x3308>)
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80036dc:	4b62      	ldr	r3, [pc, #392]	; (8003868 <menu+0x3324>)
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80036e2:	4b62      	ldr	r3, [pc, #392]	; (800386c <menu+0x3328>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b1e      	cmp	r3, #30
 80036e8:	d16f      	bne.n	80037ca <menu+0x3286>
		calismaSayModu = 0;
 80036ea:	4b58      	ldr	r3, [pc, #352]	; (800384c <menu+0x3308>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <menu+0x32f0>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80036f8:	4a5d      	ldr	r2, [pc, #372]	; (8003870 <menu+0x332c>)
 80036fa:	2101      	movs	r1, #1
 80036fc:	2001      	movs	r0, #1
 80036fe:	f7fc fec0 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8003702:	4a5c      	ldr	r2, [pc, #368]	; (8003874 <menu+0x3330>)
 8003704:	2101      	movs	r1, #1
 8003706:	2002      	movs	r0, #2
 8003708:	f7fc febb 	bl	8000482 <lcd_print>
 800370c:	e00d      	b.n	800372a <menu+0x31e6>
		} else if(dilSecim == 1) {
 800370e:	4b49      	ldr	r3, [pc, #292]	; (8003834 <menu+0x32f0>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d109      	bne.n	800372a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8003716:	4a58      	ldr	r2, [pc, #352]	; (8003878 <menu+0x3334>)
 8003718:	2101      	movs	r1, #1
 800371a:	2001      	movs	r0, #1
 800371c:	f7fc feb1 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8003720:	4a56      	ldr	r2, [pc, #344]	; (800387c <menu+0x3338>)
 8003722:	2101      	movs	r1, #1
 8003724:	2002      	movs	r0, #2
 8003726:	f7fc feac 	bl	8000482 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800372a:	2102      	movs	r1, #2
 800372c:	4844      	ldr	r0, [pc, #272]	; (8003840 <menu+0x32fc>)
 800372e:	f004 ff23 	bl	8008578 <HAL_GPIO_ReadPin>
 8003732:	4603      	mov	r3, r0
 8003734:	2b01      	cmp	r3, #1
 8003736:	d115      	bne.n	8003764 <menu+0x3220>
 8003738:	4b42      	ldr	r3, [pc, #264]	; (8003844 <menu+0x3300>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f083 0301 	eor.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00e      	beq.n	8003764 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8003746:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <menu+0x32f0>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4b39      	ldr	r3, [pc, #228]	; (8003834 <menu+0x32f0>)
 8003750:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003752:	4b38      	ldr	r3, [pc, #224]	; (8003834 <menu+0x32f0>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d902      	bls.n	8003760 <menu+0x321c>
				dilSecim = 0;
 800375a:	4b36      	ldr	r3, [pc, #216]	; (8003834 <menu+0x32f0>)
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003760:	f001 fa64 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003764:	2104      	movs	r1, #4
 8003766:	4836      	ldr	r0, [pc, #216]	; (8003840 <menu+0x32fc>)
 8003768:	f004 ff06 	bl	8008578 <HAL_GPIO_ReadPin>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d115      	bne.n	800379e <menu+0x325a>
 8003772:	4b34      	ldr	r3, [pc, #208]	; (8003844 <menu+0x3300>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	f083 0301 	eor.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00e      	beq.n	800379e <menu+0x325a>
			dilSecim = dilSecim - 1;
 8003780:	4b2c      	ldr	r3, [pc, #176]	; (8003834 <menu+0x32f0>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	3b01      	subs	r3, #1
 8003786:	b2da      	uxtb	r2, r3
 8003788:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <menu+0x32f0>)
 800378a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800378c:	4b29      	ldr	r3, [pc, #164]	; (8003834 <menu+0x32f0>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <menu+0x3256>
		   		dilSecim = 1;
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <menu+0x32f0>)
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800379a:	f001 fa47 	bl	8004c2c <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800379e:	2108      	movs	r1, #8
 80037a0:	4827      	ldr	r0, [pc, #156]	; (8003840 <menu+0x32fc>)
 80037a2:	f004 fee9 	bl	8008578 <HAL_GPIO_ReadPin>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10e      	bne.n	80037ca <menu+0x3286>
 80037ac:	4b25      	ldr	r3, [pc, #148]	; (8003844 <menu+0x3300>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	f083 0301 	eor.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <menu+0x3286>
			eepromData[33] = dilSecim;
 80037ba:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <menu+0x32f0>)
 80037bc:	781a      	ldrb	r2, [r3, #0]
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <menu+0x330c>)
 80037c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80037c4:	4b28      	ldr	r3, [pc, #160]	; (8003868 <menu+0x3324>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80037ca:	4b28      	ldr	r3, [pc, #160]	; (800386c <menu+0x3328>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b1f      	cmp	r3, #31
 80037d0:	d12e      	bne.n	8003830 <menu+0x32ec>
		if(dilSecim == 0) {
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <menu+0x32f0>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <menu+0x32ac>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 80037da:	4a29      	ldr	r2, [pc, #164]	; (8003880 <menu+0x333c>)
 80037dc:	2101      	movs	r1, #1
 80037de:	2001      	movs	r0, #1
 80037e0:	f7fc fe4f 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80037e4:	4a27      	ldr	r2, [pc, #156]	; (8003884 <menu+0x3340>)
 80037e6:	2101      	movs	r1, #1
 80037e8:	2002      	movs	r0, #2
 80037ea:	f7fc fe4a 	bl	8000482 <lcd_print>
 80037ee:	e00d      	b.n	800380c <menu+0x32c8>
		} else if(dilSecim == 1) {
 80037f0:	4b10      	ldr	r3, [pc, #64]	; (8003834 <menu+0x32f0>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d109      	bne.n	800380c <menu+0x32c8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 80037f8:	4a23      	ldr	r2, [pc, #140]	; (8003888 <menu+0x3344>)
 80037fa:	2101      	movs	r1, #1
 80037fc:	2001      	movs	r0, #1
 80037fe:	f7fc fe40 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8003802:	4a22      	ldr	r2, [pc, #136]	; (800388c <menu+0x3348>)
 8003804:	2101      	movs	r1, #1
 8003806:	2002      	movs	r0, #2
 8003808:	f7fc fe3b 	bl	8000482 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 800380c:	2108      	movs	r1, #8
 800380e:	480c      	ldr	r0, [pc, #48]	; (8003840 <menu+0x32fc>)
 8003810:	f004 feb2 	bl	8008578 <HAL_GPIO_ReadPin>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10a      	bne.n	8003830 <menu+0x32ec>
			menuGiris = 0;
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <menu+0x334c>)
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003820:	f7fc fe44 	bl	80004ac <lcd_clear>
			HAL_Delay(500);
 8003824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003828:	f004 f8d6 	bl	80079d8 <HAL_Delay>
			NVIC_SystemReset();
 800382c:	f7fc fe5a 	bl	80004e4 <__NVIC_SystemReset>
		}
	}
}
 8003830:	bf00      	nop
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000a4c 	.word	0x20000a4c
 8003838:	0800c39c 	.word	0x0800c39c
 800383c:	0800c3d0 	.word	0x0800c3d0
 8003840:	40010800 	.word	0x40010800
 8003844:	20000a5a 	.word	0x20000a5a
 8003848:	20000a6c 	.word	0x20000a6c
 800384c:	20000a4b 	.word	0x20000a4b
 8003850:	200009c0 	.word	0x200009c0
 8003854:	20000a2b 	.word	0x20000a2b
 8003858:	20000942 	.word	0x20000942
 800385c:	20000941 	.word	0x20000941
 8003860:	20000a2a 	.word	0x20000a2a
 8003864:	20000a29 	.word	0x20000a29
 8003868:	20000a57 	.word	0x20000a57
 800386c:	20000a2c 	.word	0x20000a2c
 8003870:	0800c3e4 	.word	0x0800c3e4
 8003874:	0800c3f8 	.word	0x0800c3f8
 8003878:	0800c40c 	.word	0x0800c40c
 800387c:	0800c420 	.word	0x0800c420
 8003880:	0800c434 	.word	0x0800c434
 8003884:	0800c448 	.word	0x0800c448
 8003888:	0800c45c 	.word	0x0800c45c
 800388c:	0800c470 	.word	0x0800c470
 8003890:	20000a49 	.word	0x20000a49

08003894 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 800389e:	48a9      	ldr	r0, [pc, #676]	; (8003b44 <loadMenuTexts+0x2b0>)
 80038a0:	f7fc fe36 	bl	8000510 <copyText>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4aa8      	ldr	r2, [pc, #672]	; (8003b48 <loadMenuTexts+0x2b4>)
 80038a8:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 80038aa:	48a8      	ldr	r0, [pc, #672]	; (8003b4c <loadMenuTexts+0x2b8>)
 80038ac:	f7fc fe30 	bl	8000510 <copyText>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4aa7      	ldr	r2, [pc, #668]	; (8003b50 <loadMenuTexts+0x2bc>)
 80038b4:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 80038b6:	48a7      	ldr	r0, [pc, #668]	; (8003b54 <loadMenuTexts+0x2c0>)
 80038b8:	f7fc fe2a 	bl	8000510 <copyText>
 80038bc:	4603      	mov	r3, r0
 80038be:	4aa6      	ldr	r2, [pc, #664]	; (8003b58 <loadMenuTexts+0x2c4>)
 80038c0:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 80038c2:	48a6      	ldr	r0, [pc, #664]	; (8003b5c <loadMenuTexts+0x2c8>)
 80038c4:	f7fc fe24 	bl	8000510 <copyText>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4aa5      	ldr	r2, [pc, #660]	; (8003b60 <loadMenuTexts+0x2cc>)
 80038cc:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 80038ce:	48a5      	ldr	r0, [pc, #660]	; (8003b64 <loadMenuTexts+0x2d0>)
 80038d0:	f7fc fe1e 	bl	8000510 <copyText>
 80038d4:	4603      	mov	r3, r0
 80038d6:	4aa4      	ldr	r2, [pc, #656]	; (8003b68 <loadMenuTexts+0x2d4>)
 80038d8:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 80038da:	48a4      	ldr	r0, [pc, #656]	; (8003b6c <loadMenuTexts+0x2d8>)
 80038dc:	f7fc fe18 	bl	8000510 <copyText>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4aa3      	ldr	r2, [pc, #652]	; (8003b70 <loadMenuTexts+0x2dc>)
 80038e4:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 80038e6:	48a3      	ldr	r0, [pc, #652]	; (8003b74 <loadMenuTexts+0x2e0>)
 80038e8:	f7fc fe12 	bl	8000510 <copyText>
 80038ec:	4603      	mov	r3, r0
 80038ee:	4aa2      	ldr	r2, [pc, #648]	; (8003b78 <loadMenuTexts+0x2e4>)
 80038f0:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 82d1 	bne.w	8003e9c <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 80038fa:	48a0      	ldr	r0, [pc, #640]	; (8003b7c <loadMenuTexts+0x2e8>)
 80038fc:	f7fc fe08 	bl	8000510 <copyText>
 8003900:	4603      	mov	r3, r0
 8003902:	4a9f      	ldr	r2, [pc, #636]	; (8003b80 <loadMenuTexts+0x2ec>)
 8003904:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003906:	489f      	ldr	r0, [pc, #636]	; (8003b84 <loadMenuTexts+0x2f0>)
 8003908:	f7fc fe02 	bl	8000510 <copyText>
 800390c:	4603      	mov	r3, r0
 800390e:	4a9e      	ldr	r2, [pc, #632]	; (8003b88 <loadMenuTexts+0x2f4>)
 8003910:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8003912:	489e      	ldr	r0, [pc, #632]	; (8003b8c <loadMenuTexts+0x2f8>)
 8003914:	f7fc fdfc 	bl	8000510 <copyText>
 8003918:	4603      	mov	r3, r0
 800391a:	4a9d      	ldr	r2, [pc, #628]	; (8003b90 <loadMenuTexts+0x2fc>)
 800391c:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 800391e:	489d      	ldr	r0, [pc, #628]	; (8003b94 <loadMenuTexts+0x300>)
 8003920:	f7fc fdf6 	bl	8000510 <copyText>
 8003924:	4603      	mov	r3, r0
 8003926:	4a9c      	ldr	r2, [pc, #624]	; (8003b98 <loadMenuTexts+0x304>)
 8003928:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 800392a:	489c      	ldr	r0, [pc, #624]	; (8003b9c <loadMenuTexts+0x308>)
 800392c:	f7fc fdf0 	bl	8000510 <copyText>
 8003930:	4603      	mov	r3, r0
 8003932:	4a9b      	ldr	r2, [pc, #620]	; (8003ba0 <loadMenuTexts+0x30c>)
 8003934:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003936:	489b      	ldr	r0, [pc, #620]	; (8003ba4 <loadMenuTexts+0x310>)
 8003938:	f7fc fdea 	bl	8000510 <copyText>
 800393c:	4603      	mov	r3, r0
 800393e:	4a9a      	ldr	r2, [pc, #616]	; (8003ba8 <loadMenuTexts+0x314>)
 8003940:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8003942:	489a      	ldr	r0, [pc, #616]	; (8003bac <loadMenuTexts+0x318>)
 8003944:	f7fc fde4 	bl	8000510 <copyText>
 8003948:	4603      	mov	r3, r0
 800394a:	4a99      	ldr	r2, [pc, #612]	; (8003bb0 <loadMenuTexts+0x31c>)
 800394c:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 800394e:	4899      	ldr	r0, [pc, #612]	; (8003bb4 <loadMenuTexts+0x320>)
 8003950:	f7fc fdde 	bl	8000510 <copyText>
 8003954:	4603      	mov	r3, r0
 8003956:	4a98      	ldr	r2, [pc, #608]	; (8003bb8 <loadMenuTexts+0x324>)
 8003958:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 800395a:	4898      	ldr	r0, [pc, #608]	; (8003bbc <loadMenuTexts+0x328>)
 800395c:	f7fc fdd8 	bl	8000510 <copyText>
 8003960:	4603      	mov	r3, r0
 8003962:	4a97      	ldr	r2, [pc, #604]	; (8003bc0 <loadMenuTexts+0x32c>)
 8003964:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8003966:	4897      	ldr	r0, [pc, #604]	; (8003bc4 <loadMenuTexts+0x330>)
 8003968:	f7fc fdd2 	bl	8000510 <copyText>
 800396c:	4603      	mov	r3, r0
 800396e:	4a96      	ldr	r2, [pc, #600]	; (8003bc8 <loadMenuTexts+0x334>)
 8003970:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8003972:	4896      	ldr	r0, [pc, #600]	; (8003bcc <loadMenuTexts+0x338>)
 8003974:	f7fc fdcc 	bl	8000510 <copyText>
 8003978:	4603      	mov	r3, r0
 800397a:	4a95      	ldr	r2, [pc, #596]	; (8003bd0 <loadMenuTexts+0x33c>)
 800397c:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 800397e:	4895      	ldr	r0, [pc, #596]	; (8003bd4 <loadMenuTexts+0x340>)
 8003980:	f7fc fdc6 	bl	8000510 <copyText>
 8003984:	4603      	mov	r3, r0
 8003986:	4a94      	ldr	r2, [pc, #592]	; (8003bd8 <loadMenuTexts+0x344>)
 8003988:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 800398a:	4894      	ldr	r0, [pc, #592]	; (8003bdc <loadMenuTexts+0x348>)
 800398c:	f7fc fdc0 	bl	8000510 <copyText>
 8003990:	4603      	mov	r3, r0
 8003992:	4a93      	ldr	r2, [pc, #588]	; (8003be0 <loadMenuTexts+0x34c>)
 8003994:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8003996:	4893      	ldr	r0, [pc, #588]	; (8003be4 <loadMenuTexts+0x350>)
 8003998:	f7fc fdba 	bl	8000510 <copyText>
 800399c:	4603      	mov	r3, r0
 800399e:	4a92      	ldr	r2, [pc, #584]	; (8003be8 <loadMenuTexts+0x354>)
 80039a0:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 80039a2:	4892      	ldr	r0, [pc, #584]	; (8003bec <loadMenuTexts+0x358>)
 80039a4:	f7fc fdb4 	bl	8000510 <copyText>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4a91      	ldr	r2, [pc, #580]	; (8003bf0 <loadMenuTexts+0x35c>)
 80039ac:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 80039ae:	4891      	ldr	r0, [pc, #580]	; (8003bf4 <loadMenuTexts+0x360>)
 80039b0:	f7fc fdae 	bl	8000510 <copyText>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a90      	ldr	r2, [pc, #576]	; (8003bf8 <loadMenuTexts+0x364>)
 80039b8:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 80039ba:	4890      	ldr	r0, [pc, #576]	; (8003bfc <loadMenuTexts+0x368>)
 80039bc:	f7fc fda8 	bl	8000510 <copyText>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4a8f      	ldr	r2, [pc, #572]	; (8003c00 <loadMenuTexts+0x36c>)
 80039c4:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 80039c6:	488f      	ldr	r0, [pc, #572]	; (8003c04 <loadMenuTexts+0x370>)
 80039c8:	f7fc fda2 	bl	8000510 <copyText>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4a8e      	ldr	r2, [pc, #568]	; (8003c08 <loadMenuTexts+0x374>)
 80039d0:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 80039d2:	488e      	ldr	r0, [pc, #568]	; (8003c0c <loadMenuTexts+0x378>)
 80039d4:	f7fc fd9c 	bl	8000510 <copyText>
 80039d8:	4603      	mov	r3, r0
 80039da:	4a8d      	ldr	r2, [pc, #564]	; (8003c10 <loadMenuTexts+0x37c>)
 80039dc:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 80039de:	488d      	ldr	r0, [pc, #564]	; (8003c14 <loadMenuTexts+0x380>)
 80039e0:	f7fc fd96 	bl	8000510 <copyText>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4a8c      	ldr	r2, [pc, #560]	; (8003c18 <loadMenuTexts+0x384>)
 80039e8:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 80039ea:	488c      	ldr	r0, [pc, #560]	; (8003c1c <loadMenuTexts+0x388>)
 80039ec:	f7fc fd90 	bl	8000510 <copyText>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4a8b      	ldr	r2, [pc, #556]	; (8003c20 <loadMenuTexts+0x38c>)
 80039f4:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 80039f6:	488b      	ldr	r0, [pc, #556]	; (8003c24 <loadMenuTexts+0x390>)
 80039f8:	f7fc fd8a 	bl	8000510 <copyText>
 80039fc:	4603      	mov	r3, r0
 80039fe:	4a8a      	ldr	r2, [pc, #552]	; (8003c28 <loadMenuTexts+0x394>)
 8003a00:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003a02:	488a      	ldr	r0, [pc, #552]	; (8003c2c <loadMenuTexts+0x398>)
 8003a04:	f7fc fd84 	bl	8000510 <copyText>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4a89      	ldr	r2, [pc, #548]	; (8003c30 <loadMenuTexts+0x39c>)
 8003a0c:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003a0e:	4889      	ldr	r0, [pc, #548]	; (8003c34 <loadMenuTexts+0x3a0>)
 8003a10:	f7fc fd7e 	bl	8000510 <copyText>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4a88      	ldr	r2, [pc, #544]	; (8003c38 <loadMenuTexts+0x3a4>)
 8003a18:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003a1a:	4888      	ldr	r0, [pc, #544]	; (8003c3c <loadMenuTexts+0x3a8>)
 8003a1c:	f7fc fd78 	bl	8000510 <copyText>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4a87      	ldr	r2, [pc, #540]	; (8003c40 <loadMenuTexts+0x3ac>)
 8003a24:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003a26:	4887      	ldr	r0, [pc, #540]	; (8003c44 <loadMenuTexts+0x3b0>)
 8003a28:	f7fc fd72 	bl	8000510 <copyText>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4a86      	ldr	r2, [pc, #536]	; (8003c48 <loadMenuTexts+0x3b4>)
 8003a30:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003a32:	4886      	ldr	r0, [pc, #536]	; (8003c4c <loadMenuTexts+0x3b8>)
 8003a34:	f7fc fd6c 	bl	8000510 <copyText>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a85      	ldr	r2, [pc, #532]	; (8003c50 <loadMenuTexts+0x3bc>)
 8003a3c:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003a3e:	4885      	ldr	r0, [pc, #532]	; (8003c54 <loadMenuTexts+0x3c0>)
 8003a40:	f7fc fd66 	bl	8000510 <copyText>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4a84      	ldr	r2, [pc, #528]	; (8003c58 <loadMenuTexts+0x3c4>)
 8003a48:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003a4a:	4884      	ldr	r0, [pc, #528]	; (8003c5c <loadMenuTexts+0x3c8>)
 8003a4c:	f7fc fd60 	bl	8000510 <copyText>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4a83      	ldr	r2, [pc, #524]	; (8003c60 <loadMenuTexts+0x3cc>)
 8003a54:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003a56:	4883      	ldr	r0, [pc, #524]	; (8003c64 <loadMenuTexts+0x3d0>)
 8003a58:	f7fc fd5a 	bl	8000510 <copyText>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4a82      	ldr	r2, [pc, #520]	; (8003c68 <loadMenuTexts+0x3d4>)
 8003a60:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003a62:	4882      	ldr	r0, [pc, #520]	; (8003c6c <loadMenuTexts+0x3d8>)
 8003a64:	f7fc fd54 	bl	8000510 <copyText>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a81      	ldr	r2, [pc, #516]	; (8003c70 <loadMenuTexts+0x3dc>)
 8003a6c:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003a6e:	4881      	ldr	r0, [pc, #516]	; (8003c74 <loadMenuTexts+0x3e0>)
 8003a70:	f7fc fd4e 	bl	8000510 <copyText>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a80      	ldr	r2, [pc, #512]	; (8003c78 <loadMenuTexts+0x3e4>)
 8003a78:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003a7a:	4880      	ldr	r0, [pc, #512]	; (8003c7c <loadMenuTexts+0x3e8>)
 8003a7c:	f7fc fd48 	bl	8000510 <copyText>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4a7f      	ldr	r2, [pc, #508]	; (8003c80 <loadMenuTexts+0x3ec>)
 8003a84:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003a86:	487f      	ldr	r0, [pc, #508]	; (8003c84 <loadMenuTexts+0x3f0>)
 8003a88:	f7fc fd42 	bl	8000510 <copyText>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4a7e      	ldr	r2, [pc, #504]	; (8003c88 <loadMenuTexts+0x3f4>)
 8003a90:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003a92:	487e      	ldr	r0, [pc, #504]	; (8003c8c <loadMenuTexts+0x3f8>)
 8003a94:	f7fc fd3c 	bl	8000510 <copyText>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4a7d      	ldr	r2, [pc, #500]	; (8003c90 <loadMenuTexts+0x3fc>)
 8003a9c:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003a9e:	487d      	ldr	r0, [pc, #500]	; (8003c94 <loadMenuTexts+0x400>)
 8003aa0:	f7fc fd36 	bl	8000510 <copyText>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4a7c      	ldr	r2, [pc, #496]	; (8003c98 <loadMenuTexts+0x404>)
 8003aa8:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003aaa:	487c      	ldr	r0, [pc, #496]	; (8003c9c <loadMenuTexts+0x408>)
 8003aac:	f7fc fd30 	bl	8000510 <copyText>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4a7b      	ldr	r2, [pc, #492]	; (8003ca0 <loadMenuTexts+0x40c>)
 8003ab4:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003ab6:	487b      	ldr	r0, [pc, #492]	; (8003ca4 <loadMenuTexts+0x410>)
 8003ab8:	f7fc fd2a 	bl	8000510 <copyText>
 8003abc:	4603      	mov	r3, r0
 8003abe:	4a7a      	ldr	r2, [pc, #488]	; (8003ca8 <loadMenuTexts+0x414>)
 8003ac0:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003ac2:	487a      	ldr	r0, [pc, #488]	; (8003cac <loadMenuTexts+0x418>)
 8003ac4:	f7fc fd24 	bl	8000510 <copyText>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4a79      	ldr	r2, [pc, #484]	; (8003cb0 <loadMenuTexts+0x41c>)
 8003acc:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003ace:	4879      	ldr	r0, [pc, #484]	; (8003cb4 <loadMenuTexts+0x420>)
 8003ad0:	f7fc fd1e 	bl	8000510 <copyText>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4a78      	ldr	r2, [pc, #480]	; (8003cb8 <loadMenuTexts+0x424>)
 8003ad8:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003ada:	4878      	ldr	r0, [pc, #480]	; (8003cbc <loadMenuTexts+0x428>)
 8003adc:	f7fc fd18 	bl	8000510 <copyText>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4a77      	ldr	r2, [pc, #476]	; (8003cc0 <loadMenuTexts+0x42c>)
 8003ae4:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003ae6:	4877      	ldr	r0, [pc, #476]	; (8003cc4 <loadMenuTexts+0x430>)
 8003ae8:	f7fc fd12 	bl	8000510 <copyText>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4a76      	ldr	r2, [pc, #472]	; (8003cc8 <loadMenuTexts+0x434>)
 8003af0:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003af2:	4876      	ldr	r0, [pc, #472]	; (8003ccc <loadMenuTexts+0x438>)
 8003af4:	f7fc fd0c 	bl	8000510 <copyText>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4a75      	ldr	r2, [pc, #468]	; (8003cd0 <loadMenuTexts+0x43c>)
 8003afc:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003afe:	4875      	ldr	r0, [pc, #468]	; (8003cd4 <loadMenuTexts+0x440>)
 8003b00:	f7fc fd06 	bl	8000510 <copyText>
 8003b04:	4603      	mov	r3, r0
 8003b06:	4a74      	ldr	r2, [pc, #464]	; (8003cd8 <loadMenuTexts+0x444>)
 8003b08:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003b0a:	4874      	ldr	r0, [pc, #464]	; (8003cdc <loadMenuTexts+0x448>)
 8003b0c:	f7fc fd00 	bl	8000510 <copyText>
 8003b10:	4603      	mov	r3, r0
 8003b12:	4a73      	ldr	r2, [pc, #460]	; (8003ce0 <loadMenuTexts+0x44c>)
 8003b14:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003b16:	4873      	ldr	r0, [pc, #460]	; (8003ce4 <loadMenuTexts+0x450>)
 8003b18:	f7fc fcfa 	bl	8000510 <copyText>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4a72      	ldr	r2, [pc, #456]	; (8003ce8 <loadMenuTexts+0x454>)
 8003b20:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003b22:	4872      	ldr	r0, [pc, #456]	; (8003cec <loadMenuTexts+0x458>)
 8003b24:	f7fc fcf4 	bl	8000510 <copyText>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4a71      	ldr	r2, [pc, #452]	; (8003cf0 <loadMenuTexts+0x45c>)
 8003b2c:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003b2e:	4871      	ldr	r0, [pc, #452]	; (8003cf4 <loadMenuTexts+0x460>)
 8003b30:	f7fc fcee 	bl	8000510 <copyText>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4a70      	ldr	r2, [pc, #448]	; (8003cf8 <loadMenuTexts+0x464>)
 8003b38:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003b3a:	4870      	ldr	r0, [pc, #448]	; (8003cfc <loadMenuTexts+0x468>)
 8003b3c:	f7fc fce8 	bl	8000510 <copyText>
 8003b40:	4603      	mov	r3, r0
 8003b42:	e0dd      	b.n	8003d00 <loadMenuTexts+0x46c>
 8003b44:	20000000 	.word	0x20000000
 8003b48:	20000a90 	.word	0x20000a90
 8003b4c:	20000010 	.word	0x20000010
 8003b50:	20000a94 	.word	0x20000a94
 8003b54:	20000020 	.word	0x20000020
 8003b58:	20000aec 	.word	0x20000aec
 8003b5c:	20000030 	.word	0x20000030
 8003b60:	20000b1c 	.word	0x20000b1c
 8003b64:	20000040 	.word	0x20000040
 8003b68:	20000b24 	.word	0x20000b24
 8003b6c:	20000050 	.word	0x20000050
 8003b70:	20000b9c 	.word	0x20000b9c
 8003b74:	20000060 	.word	0x20000060
 8003b78:	20000ba0 	.word	0x20000ba0
 8003b7c:	20000070 	.word	0x20000070
 8003b80:	20000a98 	.word	0x20000a98
 8003b84:	20000080 	.word	0x20000080
 8003b88:	20000a9c 	.word	0x20000a9c
 8003b8c:	20000090 	.word	0x20000090
 8003b90:	20000aa0 	.word	0x20000aa0
 8003b94:	200000a0 	.word	0x200000a0
 8003b98:	20000aa4 	.word	0x20000aa4
 8003b9c:	200000b0 	.word	0x200000b0
 8003ba0:	20000aa8 	.word	0x20000aa8
 8003ba4:	200000c0 	.word	0x200000c0
 8003ba8:	20000aac 	.word	0x20000aac
 8003bac:	200000d0 	.word	0x200000d0
 8003bb0:	20000ab0 	.word	0x20000ab0
 8003bb4:	200000e0 	.word	0x200000e0
 8003bb8:	20000ab4 	.word	0x20000ab4
 8003bbc:	200000f0 	.word	0x200000f0
 8003bc0:	20000ab8 	.word	0x20000ab8
 8003bc4:	20000100 	.word	0x20000100
 8003bc8:	20000abc 	.word	0x20000abc
 8003bcc:	20000110 	.word	0x20000110
 8003bd0:	20000ac0 	.word	0x20000ac0
 8003bd4:	20000120 	.word	0x20000120
 8003bd8:	20000ac4 	.word	0x20000ac4
 8003bdc:	20000130 	.word	0x20000130
 8003be0:	20000ac8 	.word	0x20000ac8
 8003be4:	20000140 	.word	0x20000140
 8003be8:	20000acc 	.word	0x20000acc
 8003bec:	20000150 	.word	0x20000150
 8003bf0:	20000ad0 	.word	0x20000ad0
 8003bf4:	20000160 	.word	0x20000160
 8003bf8:	20000ad4 	.word	0x20000ad4
 8003bfc:	20000170 	.word	0x20000170
 8003c00:	20000ad8 	.word	0x20000ad8
 8003c04:	20000180 	.word	0x20000180
 8003c08:	20000adc 	.word	0x20000adc
 8003c0c:	20000190 	.word	0x20000190
 8003c10:	20000ae0 	.word	0x20000ae0
 8003c14:	200001a0 	.word	0x200001a0
 8003c18:	20000ae4 	.word	0x20000ae4
 8003c1c:	200001b0 	.word	0x200001b0
 8003c20:	20000ae8 	.word	0x20000ae8
 8003c24:	200001c0 	.word	0x200001c0
 8003c28:	20000af0 	.word	0x20000af0
 8003c2c:	200001d0 	.word	0x200001d0
 8003c30:	20000af4 	.word	0x20000af4
 8003c34:	200001e0 	.word	0x200001e0
 8003c38:	20000af8 	.word	0x20000af8
 8003c3c:	200001f0 	.word	0x200001f0
 8003c40:	20000afc 	.word	0x20000afc
 8003c44:	20000200 	.word	0x20000200
 8003c48:	20000b00 	.word	0x20000b00
 8003c4c:	20000210 	.word	0x20000210
 8003c50:	20000b04 	.word	0x20000b04
 8003c54:	20000220 	.word	0x20000220
 8003c58:	20000b08 	.word	0x20000b08
 8003c5c:	20000230 	.word	0x20000230
 8003c60:	20000b0c 	.word	0x20000b0c
 8003c64:	20000240 	.word	0x20000240
 8003c68:	20000b10 	.word	0x20000b10
 8003c6c:	20000250 	.word	0x20000250
 8003c70:	20000b14 	.word	0x20000b14
 8003c74:	20000260 	.word	0x20000260
 8003c78:	20000b18 	.word	0x20000b18
 8003c7c:	20000270 	.word	0x20000270
 8003c80:	20000b20 	.word	0x20000b20
 8003c84:	20000280 	.word	0x20000280
 8003c88:	20000b28 	.word	0x20000b28
 8003c8c:	20000290 	.word	0x20000290
 8003c90:	20000b2c 	.word	0x20000b2c
 8003c94:	200002a0 	.word	0x200002a0
 8003c98:	20000b30 	.word	0x20000b30
 8003c9c:	200002b0 	.word	0x200002b0
 8003ca0:	20000b34 	.word	0x20000b34
 8003ca4:	200002c0 	.word	0x200002c0
 8003ca8:	20000b38 	.word	0x20000b38
 8003cac:	200002d0 	.word	0x200002d0
 8003cb0:	20000b3c 	.word	0x20000b3c
 8003cb4:	200002e0 	.word	0x200002e0
 8003cb8:	20000b40 	.word	0x20000b40
 8003cbc:	200002f0 	.word	0x200002f0
 8003cc0:	20000b44 	.word	0x20000b44
 8003cc4:	20000300 	.word	0x20000300
 8003cc8:	20000b48 	.word	0x20000b48
 8003ccc:	20000310 	.word	0x20000310
 8003cd0:	20000b4c 	.word	0x20000b4c
 8003cd4:	20000320 	.word	0x20000320
 8003cd8:	20000b50 	.word	0x20000b50
 8003cdc:	20000330 	.word	0x20000330
 8003ce0:	20000b54 	.word	0x20000b54
 8003ce4:	20000340 	.word	0x20000340
 8003ce8:	20000b58 	.word	0x20000b58
 8003cec:	20000350 	.word	0x20000350
 8003cf0:	20000b5c 	.word	0x20000b5c
 8003cf4:	20000360 	.word	0x20000360
 8003cf8:	20000b60 	.word	0x20000b60
 8003cfc:	20000370 	.word	0x20000370
 8003d00:	4a3d      	ldr	r2, [pc, #244]	; (8003df8 <loadMenuTexts+0x564>)
 8003d02:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8003d04:	483d      	ldr	r0, [pc, #244]	; (8003dfc <loadMenuTexts+0x568>)
 8003d06:	f7fc fc03 	bl	8000510 <copyText>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <loadMenuTexts+0x56c>)
 8003d0e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8003d10:	483c      	ldr	r0, [pc, #240]	; (8003e04 <loadMenuTexts+0x570>)
 8003d12:	f7fc fbfd 	bl	8000510 <copyText>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4a3b      	ldr	r2, [pc, #236]	; (8003e08 <loadMenuTexts+0x574>)
 8003d1a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8003d1c:	483b      	ldr	r0, [pc, #236]	; (8003e0c <loadMenuTexts+0x578>)
 8003d1e:	f7fc fbf7 	bl	8000510 <copyText>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4a3a      	ldr	r2, [pc, #232]	; (8003e10 <loadMenuTexts+0x57c>)
 8003d26:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8003d28:	483a      	ldr	r0, [pc, #232]	; (8003e14 <loadMenuTexts+0x580>)
 8003d2a:	f7fc fbf1 	bl	8000510 <copyText>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a39      	ldr	r2, [pc, #228]	; (8003e18 <loadMenuTexts+0x584>)
 8003d32:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8003d34:	4839      	ldr	r0, [pc, #228]	; (8003e1c <loadMenuTexts+0x588>)
 8003d36:	f7fc fbeb 	bl	8000510 <copyText>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4a38      	ldr	r2, [pc, #224]	; (8003e20 <loadMenuTexts+0x58c>)
 8003d3e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8003d40:	4838      	ldr	r0, [pc, #224]	; (8003e24 <loadMenuTexts+0x590>)
 8003d42:	f7fc fbe5 	bl	8000510 <copyText>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4a37      	ldr	r2, [pc, #220]	; (8003e28 <loadMenuTexts+0x594>)
 8003d4a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8003d4c:	4837      	ldr	r0, [pc, #220]	; (8003e2c <loadMenuTexts+0x598>)
 8003d4e:	f7fc fbdf 	bl	8000510 <copyText>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4a36      	ldr	r2, [pc, #216]	; (8003e30 <loadMenuTexts+0x59c>)
 8003d56:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8003d58:	4836      	ldr	r0, [pc, #216]	; (8003e34 <loadMenuTexts+0x5a0>)
 8003d5a:	f7fc fbd9 	bl	8000510 <copyText>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4a35      	ldr	r2, [pc, #212]	; (8003e38 <loadMenuTexts+0x5a4>)
 8003d62:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8003d64:	4835      	ldr	r0, [pc, #212]	; (8003e3c <loadMenuTexts+0x5a8>)
 8003d66:	f7fc fbd3 	bl	8000510 <copyText>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4a34      	ldr	r2, [pc, #208]	; (8003e40 <loadMenuTexts+0x5ac>)
 8003d6e:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8003d70:	4834      	ldr	r0, [pc, #208]	; (8003e44 <loadMenuTexts+0x5b0>)
 8003d72:	f7fc fbcd 	bl	8000510 <copyText>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4a33      	ldr	r2, [pc, #204]	; (8003e48 <loadMenuTexts+0x5b4>)
 8003d7a:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8003d7c:	4833      	ldr	r0, [pc, #204]	; (8003e4c <loadMenuTexts+0x5b8>)
 8003d7e:	f7fc fbc7 	bl	8000510 <copyText>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4a32      	ldr	r2, [pc, #200]	; (8003e50 <loadMenuTexts+0x5bc>)
 8003d86:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8003d88:	4832      	ldr	r0, [pc, #200]	; (8003e54 <loadMenuTexts+0x5c0>)
 8003d8a:	f7fc fbc1 	bl	8000510 <copyText>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4a31      	ldr	r2, [pc, #196]	; (8003e58 <loadMenuTexts+0x5c4>)
 8003d92:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8003d94:	4831      	ldr	r0, [pc, #196]	; (8003e5c <loadMenuTexts+0x5c8>)
 8003d96:	f7fc fbbb 	bl	8000510 <copyText>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4a30      	ldr	r2, [pc, #192]	; (8003e60 <loadMenuTexts+0x5cc>)
 8003d9e:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8003da0:	4830      	ldr	r0, [pc, #192]	; (8003e64 <loadMenuTexts+0x5d0>)
 8003da2:	f7fc fbb5 	bl	8000510 <copyText>
 8003da6:	4603      	mov	r3, r0
 8003da8:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <loadMenuTexts+0x5d4>)
 8003daa:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8003dac:	482f      	ldr	r0, [pc, #188]	; (8003e6c <loadMenuTexts+0x5d8>)
 8003dae:	f7fc fbaf 	bl	8000510 <copyText>
 8003db2:	4603      	mov	r3, r0
 8003db4:	4a2e      	ldr	r2, [pc, #184]	; (8003e70 <loadMenuTexts+0x5dc>)
 8003db6:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8003db8:	482e      	ldr	r0, [pc, #184]	; (8003e74 <loadMenuTexts+0x5e0>)
 8003dba:	f7fc fba9 	bl	8000510 <copyText>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4a2d      	ldr	r2, [pc, #180]	; (8003e78 <loadMenuTexts+0x5e4>)
 8003dc2:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8003dc4:	482d      	ldr	r0, [pc, #180]	; (8003e7c <loadMenuTexts+0x5e8>)
 8003dc6:	f7fc fba3 	bl	8000510 <copyText>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4a2c      	ldr	r2, [pc, #176]	; (8003e80 <loadMenuTexts+0x5ec>)
 8003dce:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8003dd0:	482c      	ldr	r0, [pc, #176]	; (8003e84 <loadMenuTexts+0x5f0>)
 8003dd2:	f7fc fb9d 	bl	8000510 <copyText>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <loadMenuTexts+0x5f4>)
 8003dda:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8003ddc:	482b      	ldr	r0, [pc, #172]	; (8003e8c <loadMenuTexts+0x5f8>)
 8003dde:	f7fc fb97 	bl	8000510 <copyText>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <loadMenuTexts+0x5fc>)
 8003de6:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8003de8:	482a      	ldr	r0, [pc, #168]	; (8003e94 <loadMenuTexts+0x600>)
 8003dea:	f7fc fb91 	bl	8000510 <copyText>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <loadMenuTexts+0x604>)
 8003df2:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8003df4:	e2d3      	b.n	800439e <loadMenuTexts+0xb0a>
 8003df6:	bf00      	nop
 8003df8:	20000b64 	.word	0x20000b64
 8003dfc:	20000380 	.word	0x20000380
 8003e00:	20000b68 	.word	0x20000b68
 8003e04:	20000390 	.word	0x20000390
 8003e08:	20000b6c 	.word	0x20000b6c
 8003e0c:	200003a0 	.word	0x200003a0
 8003e10:	20000b70 	.word	0x20000b70
 8003e14:	200003b0 	.word	0x200003b0
 8003e18:	20000b74 	.word	0x20000b74
 8003e1c:	200003c0 	.word	0x200003c0
 8003e20:	20000b78 	.word	0x20000b78
 8003e24:	200003d0 	.word	0x200003d0
 8003e28:	20000b7c 	.word	0x20000b7c
 8003e2c:	200003e0 	.word	0x200003e0
 8003e30:	20000b80 	.word	0x20000b80
 8003e34:	200003f0 	.word	0x200003f0
 8003e38:	20000b84 	.word	0x20000b84
 8003e3c:	20000400 	.word	0x20000400
 8003e40:	20000b88 	.word	0x20000b88
 8003e44:	20000410 	.word	0x20000410
 8003e48:	20000b8c 	.word	0x20000b8c
 8003e4c:	20000420 	.word	0x20000420
 8003e50:	20000b90 	.word	0x20000b90
 8003e54:	20000430 	.word	0x20000430
 8003e58:	20000b94 	.word	0x20000b94
 8003e5c:	20000440 	.word	0x20000440
 8003e60:	20000b98 	.word	0x20000b98
 8003e64:	20000450 	.word	0x20000450
 8003e68:	20000ba4 	.word	0x20000ba4
 8003e6c:	20000460 	.word	0x20000460
 8003e70:	20000ba8 	.word	0x20000ba8
 8003e74:	20000470 	.word	0x20000470
 8003e78:	20000bac 	.word	0x20000bac
 8003e7c:	20000480 	.word	0x20000480
 8003e80:	20000bb0 	.word	0x20000bb0
 8003e84:	20000490 	.word	0x20000490
 8003e88:	20000bb4 	.word	0x20000bb4
 8003e8c:	200004a0 	.word	0x200004a0
 8003e90:	20000bb8 	.word	0x20000bb8
 8003e94:	200004b0 	.word	0x200004b0
 8003e98:	20000bbc 	.word	0x20000bbc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8003e9c:	48a9      	ldr	r0, [pc, #676]	; (8004144 <loadMenuTexts+0x8b0>)
 8003e9e:	f7fc fb37 	bl	8000510 <copyText>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4aa8      	ldr	r2, [pc, #672]	; (8004148 <loadMenuTexts+0x8b4>)
 8003ea6:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8003ea8:	48a8      	ldr	r0, [pc, #672]	; (800414c <loadMenuTexts+0x8b8>)
 8003eaa:	f7fc fb31 	bl	8000510 <copyText>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4aa7      	ldr	r2, [pc, #668]	; (8004150 <loadMenuTexts+0x8bc>)
 8003eb2:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8003eb4:	48a7      	ldr	r0, [pc, #668]	; (8004154 <loadMenuTexts+0x8c0>)
 8003eb6:	f7fc fb2b 	bl	8000510 <copyText>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4aa6      	ldr	r2, [pc, #664]	; (8004158 <loadMenuTexts+0x8c4>)
 8003ebe:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8003ec0:	48a6      	ldr	r0, [pc, #664]	; (800415c <loadMenuTexts+0x8c8>)
 8003ec2:	f7fc fb25 	bl	8000510 <copyText>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4aa5      	ldr	r2, [pc, #660]	; (8004160 <loadMenuTexts+0x8cc>)
 8003eca:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8003ecc:	48a5      	ldr	r0, [pc, #660]	; (8004164 <loadMenuTexts+0x8d0>)
 8003ece:	f7fc fb1f 	bl	8000510 <copyText>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4aa4      	ldr	r2, [pc, #656]	; (8004168 <loadMenuTexts+0x8d4>)
 8003ed6:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8003ed8:	48a4      	ldr	r0, [pc, #656]	; (800416c <loadMenuTexts+0x8d8>)
 8003eda:	f7fc fb19 	bl	8000510 <copyText>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4aa3      	ldr	r2, [pc, #652]	; (8004170 <loadMenuTexts+0x8dc>)
 8003ee2:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8003ee4:	48a3      	ldr	r0, [pc, #652]	; (8004174 <loadMenuTexts+0x8e0>)
 8003ee6:	f7fc fb13 	bl	8000510 <copyText>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4aa2      	ldr	r2, [pc, #648]	; (8004178 <loadMenuTexts+0x8e4>)
 8003eee:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8003ef0:	48a2      	ldr	r0, [pc, #648]	; (800417c <loadMenuTexts+0x8e8>)
 8003ef2:	f7fc fb0d 	bl	8000510 <copyText>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4aa1      	ldr	r2, [pc, #644]	; (8004180 <loadMenuTexts+0x8ec>)
 8003efa:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8003efc:	48a1      	ldr	r0, [pc, #644]	; (8004184 <loadMenuTexts+0x8f0>)
 8003efe:	f7fc fb07 	bl	8000510 <copyText>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4aa0      	ldr	r2, [pc, #640]	; (8004188 <loadMenuTexts+0x8f4>)
 8003f06:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8003f08:	48a0      	ldr	r0, [pc, #640]	; (800418c <loadMenuTexts+0x8f8>)
 8003f0a:	f7fc fb01 	bl	8000510 <copyText>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a9f      	ldr	r2, [pc, #636]	; (8004190 <loadMenuTexts+0x8fc>)
 8003f12:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8003f14:	489f      	ldr	r0, [pc, #636]	; (8004194 <loadMenuTexts+0x900>)
 8003f16:	f7fc fafb 	bl	8000510 <copyText>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	4a9e      	ldr	r2, [pc, #632]	; (8004198 <loadMenuTexts+0x904>)
 8003f1e:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8003f20:	489e      	ldr	r0, [pc, #632]	; (800419c <loadMenuTexts+0x908>)
 8003f22:	f7fc faf5 	bl	8000510 <copyText>
 8003f26:	4603      	mov	r3, r0
 8003f28:	4a9d      	ldr	r2, [pc, #628]	; (80041a0 <loadMenuTexts+0x90c>)
 8003f2a:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8003f2c:	489d      	ldr	r0, [pc, #628]	; (80041a4 <loadMenuTexts+0x910>)
 8003f2e:	f7fc faef 	bl	8000510 <copyText>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4a9c      	ldr	r2, [pc, #624]	; (80041a8 <loadMenuTexts+0x914>)
 8003f36:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8003f38:	489c      	ldr	r0, [pc, #624]	; (80041ac <loadMenuTexts+0x918>)
 8003f3a:	f7fc fae9 	bl	8000510 <copyText>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4a9b      	ldr	r2, [pc, #620]	; (80041b0 <loadMenuTexts+0x91c>)
 8003f42:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8003f44:	489b      	ldr	r0, [pc, #620]	; (80041b4 <loadMenuTexts+0x920>)
 8003f46:	f7fc fae3 	bl	8000510 <copyText>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a9a      	ldr	r2, [pc, #616]	; (80041b8 <loadMenuTexts+0x924>)
 8003f4e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8003f50:	489a      	ldr	r0, [pc, #616]	; (80041bc <loadMenuTexts+0x928>)
 8003f52:	f7fc fadd 	bl	8000510 <copyText>
 8003f56:	4603      	mov	r3, r0
 8003f58:	4a99      	ldr	r2, [pc, #612]	; (80041c0 <loadMenuTexts+0x92c>)
 8003f5a:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8003f5c:	4899      	ldr	r0, [pc, #612]	; (80041c4 <loadMenuTexts+0x930>)
 8003f5e:	f7fc fad7 	bl	8000510 <copyText>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a98      	ldr	r2, [pc, #608]	; (80041c8 <loadMenuTexts+0x934>)
 8003f66:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8003f68:	4898      	ldr	r0, [pc, #608]	; (80041cc <loadMenuTexts+0x938>)
 8003f6a:	f7fc fad1 	bl	8000510 <copyText>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4a97      	ldr	r2, [pc, #604]	; (80041d0 <loadMenuTexts+0x93c>)
 8003f72:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8003f74:	4897      	ldr	r0, [pc, #604]	; (80041d4 <loadMenuTexts+0x940>)
 8003f76:	f7fc facb 	bl	8000510 <copyText>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4a96      	ldr	r2, [pc, #600]	; (80041d8 <loadMenuTexts+0x944>)
 8003f7e:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8003f80:	4896      	ldr	r0, [pc, #600]	; (80041dc <loadMenuTexts+0x948>)
 8003f82:	f7fc fac5 	bl	8000510 <copyText>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4a95      	ldr	r2, [pc, #596]	; (80041e0 <loadMenuTexts+0x94c>)
 8003f8a:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8003f8c:	4895      	ldr	r0, [pc, #596]	; (80041e4 <loadMenuTexts+0x950>)
 8003f8e:	f7fc fabf 	bl	8000510 <copyText>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a94      	ldr	r2, [pc, #592]	; (80041e8 <loadMenuTexts+0x954>)
 8003f96:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8003f98:	4894      	ldr	r0, [pc, #592]	; (80041ec <loadMenuTexts+0x958>)
 8003f9a:	f7fc fab9 	bl	8000510 <copyText>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4a93      	ldr	r2, [pc, #588]	; (80041f0 <loadMenuTexts+0x95c>)
 8003fa2:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8003fa4:	4893      	ldr	r0, [pc, #588]	; (80041f4 <loadMenuTexts+0x960>)
 8003fa6:	f7fc fab3 	bl	8000510 <copyText>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4a92      	ldr	r2, [pc, #584]	; (80041f8 <loadMenuTexts+0x964>)
 8003fae:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8003fb0:	4892      	ldr	r0, [pc, #584]	; (80041fc <loadMenuTexts+0x968>)
 8003fb2:	f7fc faad 	bl	8000510 <copyText>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a91      	ldr	r2, [pc, #580]	; (8004200 <loadMenuTexts+0x96c>)
 8003fba:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8003fbc:	4891      	ldr	r0, [pc, #580]	; (8004204 <loadMenuTexts+0x970>)
 8003fbe:	f7fc faa7 	bl	8000510 <copyText>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a90      	ldr	r2, [pc, #576]	; (8004208 <loadMenuTexts+0x974>)
 8003fc6:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8003fc8:	4890      	ldr	r0, [pc, #576]	; (800420c <loadMenuTexts+0x978>)
 8003fca:	f7fc faa1 	bl	8000510 <copyText>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4a8f      	ldr	r2, [pc, #572]	; (8004210 <loadMenuTexts+0x97c>)
 8003fd2:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8003fd4:	488f      	ldr	r0, [pc, #572]	; (8004214 <loadMenuTexts+0x980>)
 8003fd6:	f7fc fa9b 	bl	8000510 <copyText>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a8e      	ldr	r2, [pc, #568]	; (8004218 <loadMenuTexts+0x984>)
 8003fde:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8003fe0:	488e      	ldr	r0, [pc, #568]	; (800421c <loadMenuTexts+0x988>)
 8003fe2:	f7fc fa95 	bl	8000510 <copyText>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4a8d      	ldr	r2, [pc, #564]	; (8004220 <loadMenuTexts+0x98c>)
 8003fea:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8003fec:	488d      	ldr	r0, [pc, #564]	; (8004224 <loadMenuTexts+0x990>)
 8003fee:	f7fc fa8f 	bl	8000510 <copyText>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4a8c      	ldr	r2, [pc, #560]	; (8004228 <loadMenuTexts+0x994>)
 8003ff6:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8003ff8:	488c      	ldr	r0, [pc, #560]	; (800422c <loadMenuTexts+0x998>)
 8003ffa:	f7fc fa89 	bl	8000510 <copyText>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4a8b      	ldr	r2, [pc, #556]	; (8004230 <loadMenuTexts+0x99c>)
 8004002:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8004004:	488b      	ldr	r0, [pc, #556]	; (8004234 <loadMenuTexts+0x9a0>)
 8004006:	f7fc fa83 	bl	8000510 <copyText>
 800400a:	4603      	mov	r3, r0
 800400c:	4a8a      	ldr	r2, [pc, #552]	; (8004238 <loadMenuTexts+0x9a4>)
 800400e:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8004010:	488a      	ldr	r0, [pc, #552]	; (800423c <loadMenuTexts+0x9a8>)
 8004012:	f7fc fa7d 	bl	8000510 <copyText>
 8004016:	4603      	mov	r3, r0
 8004018:	4a89      	ldr	r2, [pc, #548]	; (8004240 <loadMenuTexts+0x9ac>)
 800401a:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 800401c:	4889      	ldr	r0, [pc, #548]	; (8004244 <loadMenuTexts+0x9b0>)
 800401e:	f7fc fa77 	bl	8000510 <copyText>
 8004022:	4603      	mov	r3, r0
 8004024:	4a88      	ldr	r2, [pc, #544]	; (8004248 <loadMenuTexts+0x9b4>)
 8004026:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8004028:	4888      	ldr	r0, [pc, #544]	; (800424c <loadMenuTexts+0x9b8>)
 800402a:	f7fc fa71 	bl	8000510 <copyText>
 800402e:	4603      	mov	r3, r0
 8004030:	4a87      	ldr	r2, [pc, #540]	; (8004250 <loadMenuTexts+0x9bc>)
 8004032:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8004034:	4887      	ldr	r0, [pc, #540]	; (8004254 <loadMenuTexts+0x9c0>)
 8004036:	f7fc fa6b 	bl	8000510 <copyText>
 800403a:	4603      	mov	r3, r0
 800403c:	4a86      	ldr	r2, [pc, #536]	; (8004258 <loadMenuTexts+0x9c4>)
 800403e:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8004040:	4886      	ldr	r0, [pc, #536]	; (800425c <loadMenuTexts+0x9c8>)
 8004042:	f7fc fa65 	bl	8000510 <copyText>
 8004046:	4603      	mov	r3, r0
 8004048:	4a85      	ldr	r2, [pc, #532]	; (8004260 <loadMenuTexts+0x9cc>)
 800404a:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 800404c:	4885      	ldr	r0, [pc, #532]	; (8004264 <loadMenuTexts+0x9d0>)
 800404e:	f7fc fa5f 	bl	8000510 <copyText>
 8004052:	4603      	mov	r3, r0
 8004054:	4a84      	ldr	r2, [pc, #528]	; (8004268 <loadMenuTexts+0x9d4>)
 8004056:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8004058:	4884      	ldr	r0, [pc, #528]	; (800426c <loadMenuTexts+0x9d8>)
 800405a:	f7fc fa59 	bl	8000510 <copyText>
 800405e:	4603      	mov	r3, r0
 8004060:	4a83      	ldr	r2, [pc, #524]	; (8004270 <loadMenuTexts+0x9dc>)
 8004062:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8004064:	4883      	ldr	r0, [pc, #524]	; (8004274 <loadMenuTexts+0x9e0>)
 8004066:	f7fc fa53 	bl	8000510 <copyText>
 800406a:	4603      	mov	r3, r0
 800406c:	4a82      	ldr	r2, [pc, #520]	; (8004278 <loadMenuTexts+0x9e4>)
 800406e:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8004070:	4882      	ldr	r0, [pc, #520]	; (800427c <loadMenuTexts+0x9e8>)
 8004072:	f7fc fa4d 	bl	8000510 <copyText>
 8004076:	4603      	mov	r3, r0
 8004078:	4a81      	ldr	r2, [pc, #516]	; (8004280 <loadMenuTexts+0x9ec>)
 800407a:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 800407c:	4881      	ldr	r0, [pc, #516]	; (8004284 <loadMenuTexts+0x9f0>)
 800407e:	f7fc fa47 	bl	8000510 <copyText>
 8004082:	4603      	mov	r3, r0
 8004084:	4a80      	ldr	r2, [pc, #512]	; (8004288 <loadMenuTexts+0x9f4>)
 8004086:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8004088:	4880      	ldr	r0, [pc, #512]	; (800428c <loadMenuTexts+0x9f8>)
 800408a:	f7fc fa41 	bl	8000510 <copyText>
 800408e:	4603      	mov	r3, r0
 8004090:	4a7f      	ldr	r2, [pc, #508]	; (8004290 <loadMenuTexts+0x9fc>)
 8004092:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8004094:	487f      	ldr	r0, [pc, #508]	; (8004294 <loadMenuTexts+0xa00>)
 8004096:	f7fc fa3b 	bl	8000510 <copyText>
 800409a:	4603      	mov	r3, r0
 800409c:	4a7e      	ldr	r2, [pc, #504]	; (8004298 <loadMenuTexts+0xa04>)
 800409e:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80040a0:	487e      	ldr	r0, [pc, #504]	; (800429c <loadMenuTexts+0xa08>)
 80040a2:	f7fc fa35 	bl	8000510 <copyText>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4a7d      	ldr	r2, [pc, #500]	; (80042a0 <loadMenuTexts+0xa0c>)
 80040aa:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80040ac:	487d      	ldr	r0, [pc, #500]	; (80042a4 <loadMenuTexts+0xa10>)
 80040ae:	f7fc fa2f 	bl	8000510 <copyText>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4a7c      	ldr	r2, [pc, #496]	; (80042a8 <loadMenuTexts+0xa14>)
 80040b6:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80040b8:	487c      	ldr	r0, [pc, #496]	; (80042ac <loadMenuTexts+0xa18>)
 80040ba:	f7fc fa29 	bl	8000510 <copyText>
 80040be:	4603      	mov	r3, r0
 80040c0:	4a7b      	ldr	r2, [pc, #492]	; (80042b0 <loadMenuTexts+0xa1c>)
 80040c2:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80040c4:	487b      	ldr	r0, [pc, #492]	; (80042b4 <loadMenuTexts+0xa20>)
 80040c6:	f7fc fa23 	bl	8000510 <copyText>
 80040ca:	4603      	mov	r3, r0
 80040cc:	4a7a      	ldr	r2, [pc, #488]	; (80042b8 <loadMenuTexts+0xa24>)
 80040ce:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80040d0:	487a      	ldr	r0, [pc, #488]	; (80042bc <loadMenuTexts+0xa28>)
 80040d2:	f7fc fa1d 	bl	8000510 <copyText>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4a79      	ldr	r2, [pc, #484]	; (80042c0 <loadMenuTexts+0xa2c>)
 80040da:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80040dc:	4879      	ldr	r0, [pc, #484]	; (80042c4 <loadMenuTexts+0xa30>)
 80040de:	f7fc fa17 	bl	8000510 <copyText>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4a78      	ldr	r2, [pc, #480]	; (80042c8 <loadMenuTexts+0xa34>)
 80040e6:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80040e8:	4878      	ldr	r0, [pc, #480]	; (80042cc <loadMenuTexts+0xa38>)
 80040ea:	f7fc fa11 	bl	8000510 <copyText>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4a77      	ldr	r2, [pc, #476]	; (80042d0 <loadMenuTexts+0xa3c>)
 80040f2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80040f4:	4877      	ldr	r0, [pc, #476]	; (80042d4 <loadMenuTexts+0xa40>)
 80040f6:	f7fc fa0b 	bl	8000510 <copyText>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a76      	ldr	r2, [pc, #472]	; (80042d8 <loadMenuTexts+0xa44>)
 80040fe:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8004100:	4876      	ldr	r0, [pc, #472]	; (80042dc <loadMenuTexts+0xa48>)
 8004102:	f7fc fa05 	bl	8000510 <copyText>
 8004106:	4603      	mov	r3, r0
 8004108:	4a75      	ldr	r2, [pc, #468]	; (80042e0 <loadMenuTexts+0xa4c>)
 800410a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 800410c:	4875      	ldr	r0, [pc, #468]	; (80042e4 <loadMenuTexts+0xa50>)
 800410e:	f7fc f9ff 	bl	8000510 <copyText>
 8004112:	4603      	mov	r3, r0
 8004114:	4a74      	ldr	r2, [pc, #464]	; (80042e8 <loadMenuTexts+0xa54>)
 8004116:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8004118:	4874      	ldr	r0, [pc, #464]	; (80042ec <loadMenuTexts+0xa58>)
 800411a:	f7fc f9f9 	bl	8000510 <copyText>
 800411e:	4603      	mov	r3, r0
 8004120:	4a73      	ldr	r2, [pc, #460]	; (80042f0 <loadMenuTexts+0xa5c>)
 8004122:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8004124:	4873      	ldr	r0, [pc, #460]	; (80042f4 <loadMenuTexts+0xa60>)
 8004126:	f7fc f9f3 	bl	8000510 <copyText>
 800412a:	4603      	mov	r3, r0
 800412c:	4a72      	ldr	r2, [pc, #456]	; (80042f8 <loadMenuTexts+0xa64>)
 800412e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8004130:	4872      	ldr	r0, [pc, #456]	; (80042fc <loadMenuTexts+0xa68>)
 8004132:	f7fc f9ed 	bl	8000510 <copyText>
 8004136:	4603      	mov	r3, r0
 8004138:	4a71      	ldr	r2, [pc, #452]	; (8004300 <loadMenuTexts+0xa6c>)
 800413a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 800413c:	4871      	ldr	r0, [pc, #452]	; (8004304 <loadMenuTexts+0xa70>)
 800413e:	f7fc f9e7 	bl	8000510 <copyText>
 8004142:	e0e1      	b.n	8004308 <loadMenuTexts+0xa74>
 8004144:	200004c0 	.word	0x200004c0
 8004148:	20000a98 	.word	0x20000a98
 800414c:	200004d0 	.word	0x200004d0
 8004150:	20000a9c 	.word	0x20000a9c
 8004154:	200004e0 	.word	0x200004e0
 8004158:	20000aa0 	.word	0x20000aa0
 800415c:	200004f0 	.word	0x200004f0
 8004160:	20000aa4 	.word	0x20000aa4
 8004164:	20000500 	.word	0x20000500
 8004168:	20000aa8 	.word	0x20000aa8
 800416c:	20000510 	.word	0x20000510
 8004170:	20000aac 	.word	0x20000aac
 8004174:	20000520 	.word	0x20000520
 8004178:	20000ab0 	.word	0x20000ab0
 800417c:	20000530 	.word	0x20000530
 8004180:	20000ab4 	.word	0x20000ab4
 8004184:	20000540 	.word	0x20000540
 8004188:	20000ab8 	.word	0x20000ab8
 800418c:	20000550 	.word	0x20000550
 8004190:	20000abc 	.word	0x20000abc
 8004194:	20000560 	.word	0x20000560
 8004198:	20000ac0 	.word	0x20000ac0
 800419c:	20000570 	.word	0x20000570
 80041a0:	20000ac4 	.word	0x20000ac4
 80041a4:	20000580 	.word	0x20000580
 80041a8:	20000ac8 	.word	0x20000ac8
 80041ac:	20000590 	.word	0x20000590
 80041b0:	20000acc 	.word	0x20000acc
 80041b4:	200005a0 	.word	0x200005a0
 80041b8:	20000ad0 	.word	0x20000ad0
 80041bc:	200005b0 	.word	0x200005b0
 80041c0:	20000ad4 	.word	0x20000ad4
 80041c4:	200005c0 	.word	0x200005c0
 80041c8:	20000ad8 	.word	0x20000ad8
 80041cc:	200005d0 	.word	0x200005d0
 80041d0:	20000adc 	.word	0x20000adc
 80041d4:	200005e0 	.word	0x200005e0
 80041d8:	20000ae0 	.word	0x20000ae0
 80041dc:	200005f0 	.word	0x200005f0
 80041e0:	20000ae4 	.word	0x20000ae4
 80041e4:	20000600 	.word	0x20000600
 80041e8:	20000ae8 	.word	0x20000ae8
 80041ec:	20000610 	.word	0x20000610
 80041f0:	20000af0 	.word	0x20000af0
 80041f4:	20000620 	.word	0x20000620
 80041f8:	20000af4 	.word	0x20000af4
 80041fc:	20000630 	.word	0x20000630
 8004200:	20000af8 	.word	0x20000af8
 8004204:	20000640 	.word	0x20000640
 8004208:	20000afc 	.word	0x20000afc
 800420c:	20000650 	.word	0x20000650
 8004210:	20000b00 	.word	0x20000b00
 8004214:	20000660 	.word	0x20000660
 8004218:	20000b04 	.word	0x20000b04
 800421c:	20000670 	.word	0x20000670
 8004220:	20000b08 	.word	0x20000b08
 8004224:	20000680 	.word	0x20000680
 8004228:	20000b0c 	.word	0x20000b0c
 800422c:	20000690 	.word	0x20000690
 8004230:	20000b10 	.word	0x20000b10
 8004234:	200006a0 	.word	0x200006a0
 8004238:	20000b14 	.word	0x20000b14
 800423c:	200006b0 	.word	0x200006b0
 8004240:	20000b18 	.word	0x20000b18
 8004244:	200006c0 	.word	0x200006c0
 8004248:	20000b20 	.word	0x20000b20
 800424c:	200006d0 	.word	0x200006d0
 8004250:	20000b28 	.word	0x20000b28
 8004254:	200006e0 	.word	0x200006e0
 8004258:	20000b2c 	.word	0x20000b2c
 800425c:	200006f0 	.word	0x200006f0
 8004260:	20000b30 	.word	0x20000b30
 8004264:	20000700 	.word	0x20000700
 8004268:	20000b34 	.word	0x20000b34
 800426c:	20000710 	.word	0x20000710
 8004270:	20000b38 	.word	0x20000b38
 8004274:	20000720 	.word	0x20000720
 8004278:	20000b3c 	.word	0x20000b3c
 800427c:	20000730 	.word	0x20000730
 8004280:	20000b40 	.word	0x20000b40
 8004284:	20000740 	.word	0x20000740
 8004288:	20000b44 	.word	0x20000b44
 800428c:	20000750 	.word	0x20000750
 8004290:	20000b48 	.word	0x20000b48
 8004294:	20000760 	.word	0x20000760
 8004298:	20000b4c 	.word	0x20000b4c
 800429c:	20000770 	.word	0x20000770
 80042a0:	20000b50 	.word	0x20000b50
 80042a4:	20000780 	.word	0x20000780
 80042a8:	20000b54 	.word	0x20000b54
 80042ac:	20000790 	.word	0x20000790
 80042b0:	20000b58 	.word	0x20000b58
 80042b4:	200007a0 	.word	0x200007a0
 80042b8:	20000b5c 	.word	0x20000b5c
 80042bc:	200007b0 	.word	0x200007b0
 80042c0:	20000b60 	.word	0x20000b60
 80042c4:	200007c0 	.word	0x200007c0
 80042c8:	20000b64 	.word	0x20000b64
 80042cc:	200007d0 	.word	0x200007d0
 80042d0:	20000b68 	.word	0x20000b68
 80042d4:	200007e0 	.word	0x200007e0
 80042d8:	20000b6c 	.word	0x20000b6c
 80042dc:	200007f0 	.word	0x200007f0
 80042e0:	20000b70 	.word	0x20000b70
 80042e4:	20000800 	.word	0x20000800
 80042e8:	20000b74 	.word	0x20000b74
 80042ec:	20000810 	.word	0x20000810
 80042f0:	20000b78 	.word	0x20000b78
 80042f4:	20000820 	.word	0x20000820
 80042f8:	20000b7c 	.word	0x20000b7c
 80042fc:	20000830 	.word	0x20000830
 8004300:	20000b80 	.word	0x20000b80
 8004304:	20000840 	.word	0x20000840
 8004308:	4603      	mov	r3, r0
 800430a:	4a27      	ldr	r2, [pc, #156]	; (80043a8 <loadMenuTexts+0xb14>)
 800430c:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800430e:	4827      	ldr	r0, [pc, #156]	; (80043ac <loadMenuTexts+0xb18>)
 8004310:	f7fc f8fe 	bl	8000510 <copyText>
 8004314:	4603      	mov	r3, r0
 8004316:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <loadMenuTexts+0xb1c>)
 8004318:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 800431a:	4826      	ldr	r0, [pc, #152]	; (80043b4 <loadMenuTexts+0xb20>)
 800431c:	f7fc f8f8 	bl	8000510 <copyText>
 8004320:	4603      	mov	r3, r0
 8004322:	4a25      	ldr	r2, [pc, #148]	; (80043b8 <loadMenuTexts+0xb24>)
 8004324:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8004326:	4825      	ldr	r0, [pc, #148]	; (80043bc <loadMenuTexts+0xb28>)
 8004328:	f7fc f8f2 	bl	8000510 <copyText>
 800432c:	4603      	mov	r3, r0
 800432e:	4a24      	ldr	r2, [pc, #144]	; (80043c0 <loadMenuTexts+0xb2c>)
 8004330:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8004332:	4824      	ldr	r0, [pc, #144]	; (80043c4 <loadMenuTexts+0xb30>)
 8004334:	f7fc f8ec 	bl	8000510 <copyText>
 8004338:	4603      	mov	r3, r0
 800433a:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <loadMenuTexts+0xb34>)
 800433c:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 800433e:	4823      	ldr	r0, [pc, #140]	; (80043cc <loadMenuTexts+0xb38>)
 8004340:	f7fc f8e6 	bl	8000510 <copyText>
 8004344:	4603      	mov	r3, r0
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <loadMenuTexts+0xb3c>)
 8004348:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800434a:	4822      	ldr	r0, [pc, #136]	; (80043d4 <loadMenuTexts+0xb40>)
 800434c:	f7fc f8e0 	bl	8000510 <copyText>
 8004350:	4603      	mov	r3, r0
 8004352:	4a21      	ldr	r2, [pc, #132]	; (80043d8 <loadMenuTexts+0xb44>)
 8004354:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8004356:	4821      	ldr	r0, [pc, #132]	; (80043dc <loadMenuTexts+0xb48>)
 8004358:	f7fc f8da 	bl	8000510 <copyText>
 800435c:	4603      	mov	r3, r0
 800435e:	4a20      	ldr	r2, [pc, #128]	; (80043e0 <loadMenuTexts+0xb4c>)
 8004360:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8004362:	4820      	ldr	r0, [pc, #128]	; (80043e4 <loadMenuTexts+0xb50>)
 8004364:	f7fc f8d4 	bl	8000510 <copyText>
 8004368:	4603      	mov	r3, r0
 800436a:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <loadMenuTexts+0xb54>)
 800436c:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 800436e:	481f      	ldr	r0, [pc, #124]	; (80043ec <loadMenuTexts+0xb58>)
 8004370:	f7fc f8ce 	bl	8000510 <copyText>
 8004374:	4603      	mov	r3, r0
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <loadMenuTexts+0xb5c>)
 8004378:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800437a:	481e      	ldr	r0, [pc, #120]	; (80043f4 <loadMenuTexts+0xb60>)
 800437c:	f7fc f8c8 	bl	8000510 <copyText>
 8004380:	4603      	mov	r3, r0
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <loadMenuTexts+0xb64>)
 8004384:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8004386:	481d      	ldr	r0, [pc, #116]	; (80043fc <loadMenuTexts+0xb68>)
 8004388:	f7fc f8c2 	bl	8000510 <copyText>
 800438c:	4603      	mov	r3, r0
 800438e:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <loadMenuTexts+0xb6c>)
 8004390:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8004392:	481c      	ldr	r0, [pc, #112]	; (8004404 <loadMenuTexts+0xb70>)
 8004394:	f7fc f8bc 	bl	8000510 <copyText>
 8004398:	4603      	mov	r3, r0
 800439a:	4a1b      	ldr	r2, [pc, #108]	; (8004408 <loadMenuTexts+0xb74>)
 800439c:	6013      	str	r3, [r2, #0]
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000b84 	.word	0x20000b84
 80043ac:	20000850 	.word	0x20000850
 80043b0:	20000b88 	.word	0x20000b88
 80043b4:	20000860 	.word	0x20000860
 80043b8:	20000b8c 	.word	0x20000b8c
 80043bc:	20000870 	.word	0x20000870
 80043c0:	20000b90 	.word	0x20000b90
 80043c4:	20000880 	.word	0x20000880
 80043c8:	20000b94 	.word	0x20000b94
 80043cc:	20000890 	.word	0x20000890
 80043d0:	20000b98 	.word	0x20000b98
 80043d4:	200008a0 	.word	0x200008a0
 80043d8:	20000ba4 	.word	0x20000ba4
 80043dc:	200008b0 	.word	0x200008b0
 80043e0:	20000ba8 	.word	0x20000ba8
 80043e4:	200008c0 	.word	0x200008c0
 80043e8:	20000bac 	.word	0x20000bac
 80043ec:	200008d0 	.word	0x200008d0
 80043f0:	20000bb0 	.word	0x20000bb0
 80043f4:	200008e0 	.word	0x200008e0
 80043f8:	20000bb4 	.word	0x20000bb4
 80043fc:	200008f0 	.word	0x200008f0
 8004400:	20000bb8 	.word	0x20000bb8
 8004404:	20000900 	.word	0x20000900
 8004408:	20000bbc 	.word	0x20000bbc

0800440c <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d105      	bne.n	8004428 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 800441c:	4a22      	ldr	r2, [pc, #136]	; (80044a8 <lcdUpdate+0x9c>)
 800441e:	2101      	movs	r1, #1
 8004420:	2002      	movs	r0, #2
 8004422:	f7fc f82e 	bl	8000482 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8004426:	e03b      	b.n	80044a0 <lcdUpdate+0x94>
	} else if(y==2) {
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d105      	bne.n	800443a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800442e:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <lcdUpdate+0x9c>)
 8004430:	2102      	movs	r1, #2
 8004432:	2002      	movs	r0, #2
 8004434:	f7fc f825 	bl	8000482 <lcd_print>
}
 8004438:	e032      	b.n	80044a0 <lcdUpdate+0x94>
	} else if(y==3) {
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	2b03      	cmp	r3, #3
 800443e:	d105      	bne.n	800444c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004440:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <lcdUpdate+0x9c>)
 8004442:	2103      	movs	r1, #3
 8004444:	2002      	movs	r0, #2
 8004446:	f7fc f81c 	bl	8000482 <lcd_print>
}
 800444a:	e029      	b.n	80044a0 <lcdUpdate+0x94>
	} else if(y==4) {
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	2b04      	cmp	r3, #4
 8004450:	d105      	bne.n	800445e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004452:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <lcdUpdate+0x9c>)
 8004454:	2104      	movs	r1, #4
 8004456:	2002      	movs	r0, #2
 8004458:	f7fc f813 	bl	8000482 <lcd_print>
}
 800445c:	e020      	b.n	80044a0 <lcdUpdate+0x94>
	} else if(y==5) {
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	2b05      	cmp	r3, #5
 8004462:	d105      	bne.n	8004470 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004464:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <lcdUpdate+0x9c>)
 8004466:	2105      	movs	r1, #5
 8004468:	2002      	movs	r0, #2
 800446a:	f7fc f80a 	bl	8000482 <lcd_print>
}
 800446e:	e017      	b.n	80044a0 <lcdUpdate+0x94>
	} else if(y==6) {
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	2b06      	cmp	r3, #6
 8004474:	d105      	bne.n	8004482 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004476:	4a0c      	ldr	r2, [pc, #48]	; (80044a8 <lcdUpdate+0x9c>)
 8004478:	2106      	movs	r1, #6
 800447a:	2002      	movs	r0, #2
 800447c:	f7fc f801 	bl	8000482 <lcd_print>
}
 8004480:	e00e      	b.n	80044a0 <lcdUpdate+0x94>
	} else if (y==7) {
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	2b07      	cmp	r3, #7
 8004486:	d10b      	bne.n	80044a0 <lcdUpdate+0x94>
		lcd_clear();
 8004488:	f7fc f810 	bl	80004ac <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 800448c:	4a07      	ldr	r2, [pc, #28]	; (80044ac <lcdUpdate+0xa0>)
 800448e:	2101      	movs	r1, #1
 8004490:	2001      	movs	r0, #1
 8004492:	f7fb fff6 	bl	8000482 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8004496:	4a06      	ldr	r2, [pc, #24]	; (80044b0 <lcdUpdate+0xa4>)
 8004498:	2101      	movs	r1, #1
 800449a:	2002      	movs	r0, #2
 800449c:	f7fb fff1 	bl	8000482 <lcd_print>
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	0800bba8 	.word	0x0800bba8
 80044ac:	0800c4b4 	.word	0x0800c4b4
 80044b0:	0800c4c8 	.word	0x0800c4c8

080044b4 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d11d      	bne.n	8004500 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 80044c4:	4b62      	ldr	r3, [pc, #392]	; (8004650 <hataKoduLcdGoster+0x19c>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 80044cc:	4a61      	ldr	r2, [pc, #388]	; (8004654 <hataKoduLcdGoster+0x1a0>)
 80044ce:	2101      	movs	r1, #1
 80044d0:	2001      	movs	r0, #1
 80044d2:	f7fb ffd6 	bl	8000482 <lcd_print>
 80044d6:	e008      	b.n	80044ea <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80044d8:	4b5d      	ldr	r3, [pc, #372]	; (8004650 <hataKoduLcdGoster+0x19c>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d104      	bne.n	80044ea <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80044e0:	4a5d      	ldr	r2, [pc, #372]	; (8004658 <hataKoduLcdGoster+0x1a4>)
 80044e2:	2101      	movs	r1, #1
 80044e4:	2001      	movs	r0, #1
 80044e6:	f7fb ffcc 	bl	8000482 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80044ea:	4a5c      	ldr	r2, [pc, #368]	; (800465c <hataKoduLcdGoster+0x1a8>)
 80044ec:	2101      	movs	r1, #1
 80044ee:	2002      	movs	r0, #2
 80044f0:	f7fb ffc7 	bl	8000482 <lcd_print>
		lcd_print(2, 7, "          ");
 80044f4:	4a5a      	ldr	r2, [pc, #360]	; (8004660 <hataKoduLcdGoster+0x1ac>)
 80044f6:	2107      	movs	r1, #7
 80044f8:	2002      	movs	r0, #2
 80044fa:	f7fb ffc2 	bl	8000482 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80044fe:	e0a3      	b.n	8004648 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d11d      	bne.n	8004542 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004506:	4b52      	ldr	r3, [pc, #328]	; (8004650 <hataKoduLcdGoster+0x19c>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d105      	bne.n	800451a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 800450e:	4a51      	ldr	r2, [pc, #324]	; (8004654 <hataKoduLcdGoster+0x1a0>)
 8004510:	2101      	movs	r1, #1
 8004512:	2001      	movs	r0, #1
 8004514:	f7fb ffb5 	bl	8000482 <lcd_print>
 8004518:	e008      	b.n	800452c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800451a:	4b4d      	ldr	r3, [pc, #308]	; (8004650 <hataKoduLcdGoster+0x19c>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d104      	bne.n	800452c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004522:	4a4d      	ldr	r2, [pc, #308]	; (8004658 <hataKoduLcdGoster+0x1a4>)
 8004524:	2101      	movs	r1, #1
 8004526:	2001      	movs	r0, #1
 8004528:	f7fb ffab 	bl	8000482 <lcd_print>
		lcd_print(2, 2, "2");
 800452c:	4a4d      	ldr	r2, [pc, #308]	; (8004664 <hataKoduLcdGoster+0x1b0>)
 800452e:	2102      	movs	r1, #2
 8004530:	2002      	movs	r0, #2
 8004532:	f7fb ffa6 	bl	8000482 <lcd_print>
		lcd_print(2, 7, "          ");
 8004536:	4a4a      	ldr	r2, [pc, #296]	; (8004660 <hataKoduLcdGoster+0x1ac>)
 8004538:	2107      	movs	r1, #7
 800453a:	2002      	movs	r0, #2
 800453c:	f7fb ffa1 	bl	8000482 <lcd_print>
}
 8004540:	e082      	b.n	8004648 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d11d      	bne.n	8004584 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8004548:	4b41      	ldr	r3, [pc, #260]	; (8004650 <hataKoduLcdGoster+0x19c>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8004550:	4a40      	ldr	r2, [pc, #256]	; (8004654 <hataKoduLcdGoster+0x1a0>)
 8004552:	2101      	movs	r1, #1
 8004554:	2001      	movs	r0, #1
 8004556:	f7fb ff94 	bl	8000482 <lcd_print>
 800455a:	e008      	b.n	800456e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 800455c:	4b3c      	ldr	r3, [pc, #240]	; (8004650 <hataKoduLcdGoster+0x19c>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d104      	bne.n	800456e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004564:	4a3c      	ldr	r2, [pc, #240]	; (8004658 <hataKoduLcdGoster+0x1a4>)
 8004566:	2101      	movs	r1, #1
 8004568:	2001      	movs	r0, #1
 800456a:	f7fb ff8a 	bl	8000482 <lcd_print>
		lcd_print(2, 3, "3");
 800456e:	4a3e      	ldr	r2, [pc, #248]	; (8004668 <hataKoduLcdGoster+0x1b4>)
 8004570:	2103      	movs	r1, #3
 8004572:	2002      	movs	r0, #2
 8004574:	f7fb ff85 	bl	8000482 <lcd_print>
		lcd_print(2, 7, "          ");
 8004578:	4a39      	ldr	r2, [pc, #228]	; (8004660 <hataKoduLcdGoster+0x1ac>)
 800457a:	2107      	movs	r1, #7
 800457c:	2002      	movs	r0, #2
 800457e:	f7fb ff80 	bl	8000482 <lcd_print>
}
 8004582:	e061      	b.n	8004648 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	2b04      	cmp	r3, #4
 8004588:	d11d      	bne.n	80045c6 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <hataKoduLcdGoster+0x19c>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d105      	bne.n	800459e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8004592:	4a30      	ldr	r2, [pc, #192]	; (8004654 <hataKoduLcdGoster+0x1a0>)
 8004594:	2101      	movs	r1, #1
 8004596:	2001      	movs	r0, #1
 8004598:	f7fb ff73 	bl	8000482 <lcd_print>
 800459c:	e008      	b.n	80045b0 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800459e:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <hataKoduLcdGoster+0x19c>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d104      	bne.n	80045b0 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 80045a6:	4a2c      	ldr	r2, [pc, #176]	; (8004658 <hataKoduLcdGoster+0x1a4>)
 80045a8:	2101      	movs	r1, #1
 80045aa:	2001      	movs	r0, #1
 80045ac:	f7fb ff69 	bl	8000482 <lcd_print>
		lcd_print(2, 4, "4");
 80045b0:	4a2e      	ldr	r2, [pc, #184]	; (800466c <hataKoduLcdGoster+0x1b8>)
 80045b2:	2104      	movs	r1, #4
 80045b4:	2002      	movs	r0, #2
 80045b6:	f7fb ff64 	bl	8000482 <lcd_print>
		lcd_print(2, 7, "          ");
 80045ba:	4a29      	ldr	r2, [pc, #164]	; (8004660 <hataKoduLcdGoster+0x1ac>)
 80045bc:	2107      	movs	r1, #7
 80045be:	2002      	movs	r0, #2
 80045c0:	f7fb ff5f 	bl	8000482 <lcd_print>
}
 80045c4:	e040      	b.n	8004648 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d11d      	bne.n	8004608 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80045cc:	4b20      	ldr	r3, [pc, #128]	; (8004650 <hataKoduLcdGoster+0x19c>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80045d4:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <hataKoduLcdGoster+0x1a0>)
 80045d6:	2101      	movs	r1, #1
 80045d8:	2001      	movs	r0, #1
 80045da:	f7fb ff52 	bl	8000482 <lcd_print>
 80045de:	e008      	b.n	80045f2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80045e0:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <hataKoduLcdGoster+0x19c>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d104      	bne.n	80045f2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80045e8:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <hataKoduLcdGoster+0x1a4>)
 80045ea:	2101      	movs	r1, #1
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7fb ff48 	bl	8000482 <lcd_print>
		lcd_print(2, 5, "5");
 80045f2:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <hataKoduLcdGoster+0x1bc>)
 80045f4:	2105      	movs	r1, #5
 80045f6:	2002      	movs	r0, #2
 80045f8:	f7fb ff43 	bl	8000482 <lcd_print>
		lcd_print(2, 7, "          ");
 80045fc:	4a18      	ldr	r2, [pc, #96]	; (8004660 <hataKoduLcdGoster+0x1ac>)
 80045fe:	2107      	movs	r1, #7
 8004600:	2002      	movs	r0, #2
 8004602:	f7fb ff3e 	bl	8000482 <lcd_print>
}
 8004606:	e01f      	b.n	8004648 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	2b06      	cmp	r3, #6
 800460c:	d11c      	bne.n	8004648 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <hataKoduLcdGoster+0x19c>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8004616:	4a0f      	ldr	r2, [pc, #60]	; (8004654 <hataKoduLcdGoster+0x1a0>)
 8004618:	2101      	movs	r1, #1
 800461a:	2001      	movs	r0, #1
 800461c:	f7fb ff31 	bl	8000482 <lcd_print>
 8004620:	e008      	b.n	8004634 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <hataKoduLcdGoster+0x19c>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d104      	bne.n	8004634 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 800462a:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <hataKoduLcdGoster+0x1a4>)
 800462c:	2101      	movs	r1, #1
 800462e:	2001      	movs	r0, #1
 8004630:	f7fb ff27 	bl	8000482 <lcd_print>
		lcd_print(2, 6, "6");
 8004634:	4a0f      	ldr	r2, [pc, #60]	; (8004674 <hataKoduLcdGoster+0x1c0>)
 8004636:	2106      	movs	r1, #6
 8004638:	2002      	movs	r0, #2
 800463a:	f7fb ff22 	bl	8000482 <lcd_print>
		lcd_print(2, 7, "          ");
 800463e:	4a08      	ldr	r2, [pc, #32]	; (8004660 <hataKoduLcdGoster+0x1ac>)
 8004640:	2107      	movs	r1, #7
 8004642:	2002      	movs	r0, #2
 8004644:	f7fb ff1d 	bl	8000482 <lcd_print>
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000a4c 	.word	0x20000a4c
 8004654:	0800c4dc 	.word	0x0800c4dc
 8004658:	0800c4f0 	.word	0x0800c4f0
 800465c:	0800c504 	.word	0x0800c504
 8004660:	0800c508 	.word	0x0800c508
 8004664:	0800c514 	.word	0x0800c514
 8004668:	0800c518 	.word	0x0800c518
 800466c:	0800c51c 	.word	0x0800c51c
 8004670:	0800c520 	.word	0x0800c520
 8004674:	0800c524 	.word	0x0800c524

08004678 <eepromKontrol>:

void eepromKontrol(void) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 800467e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	233f      	movs	r3, #63	; 0x3f
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	4b9b      	ldr	r3, [pc, #620]	; (80048f8 <eepromKontrol+0x280>)
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	233f      	movs	r3, #63	; 0x3f
 800468e:	2200      	movs	r2, #0
 8004690:	21a0      	movs	r1, #160	; 0xa0
 8004692:	489a      	ldr	r0, [pc, #616]	; (80048fc <eepromKontrol+0x284>)
 8004694:	f004 fb24 	bl	8008ce0 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8004698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800469c:	f003 f99c 	bl	80079d8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 80046a0:	4b95      	ldr	r3, [pc, #596]	; (80048f8 <eepromKontrol+0x280>)
 80046a2:	78da      	ldrb	r2, [r3, #3]
 80046a4:	4b96      	ldr	r3, [pc, #600]	; (8004900 <eepromKontrol+0x288>)
 80046a6:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 80046a8:	4b93      	ldr	r3, [pc, #588]	; (80048f8 <eepromKontrol+0x280>)
 80046aa:	785a      	ldrb	r2, [r3, #1]
 80046ac:	4b95      	ldr	r3, [pc, #596]	; (8004904 <eepromKontrol+0x28c>)
 80046ae:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 80046b0:	4b91      	ldr	r3, [pc, #580]	; (80048f8 <eepromKontrol+0x280>)
 80046b2:	789a      	ldrb	r2, [r3, #2]
 80046b4:	4b94      	ldr	r3, [pc, #592]	; (8004908 <eepromKontrol+0x290>)
 80046b6:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 80046b8:	4b8f      	ldr	r3, [pc, #572]	; (80048f8 <eepromKontrol+0x280>)
 80046ba:	791a      	ldrb	r2, [r3, #4]
 80046bc:	4b93      	ldr	r3, [pc, #588]	; (800490c <eepromKontrol+0x294>)
 80046be:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 80046c0:	4b8d      	ldr	r3, [pc, #564]	; (80048f8 <eepromKontrol+0x280>)
 80046c2:	795a      	ldrb	r2, [r3, #5]
 80046c4:	4b92      	ldr	r3, [pc, #584]	; (8004910 <eepromKontrol+0x298>)
 80046c6:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 80046c8:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <eepromKontrol+0x280>)
 80046ca:	799a      	ldrb	r2, [r3, #6]
 80046cc:	4b91      	ldr	r3, [pc, #580]	; (8004914 <eepromKontrol+0x29c>)
 80046ce:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 80046d0:	4b89      	ldr	r3, [pc, #548]	; (80048f8 <eepromKontrol+0x280>)
 80046d2:	79da      	ldrb	r2, [r3, #7]
 80046d4:	4b90      	ldr	r3, [pc, #576]	; (8004918 <eepromKontrol+0x2a0>)
 80046d6:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 80046d8:	4b87      	ldr	r3, [pc, #540]	; (80048f8 <eepromKontrol+0x280>)
 80046da:	7a1a      	ldrb	r2, [r3, #8]
 80046dc:	4b8f      	ldr	r3, [pc, #572]	; (800491c <eepromKontrol+0x2a4>)
 80046de:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80046e0:	4b85      	ldr	r3, [pc, #532]	; (80048f8 <eepromKontrol+0x280>)
 80046e2:	7a5a      	ldrb	r2, [r3, #9]
 80046e4:	4b8e      	ldr	r3, [pc, #568]	; (8004920 <eepromKontrol+0x2a8>)
 80046e6:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80046e8:	4b83      	ldr	r3, [pc, #524]	; (80048f8 <eepromKontrol+0x280>)
 80046ea:	7a9a      	ldrb	r2, [r3, #10]
 80046ec:	4b8d      	ldr	r3, [pc, #564]	; (8004924 <eepromKontrol+0x2ac>)
 80046ee:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80046f0:	4b81      	ldr	r3, [pc, #516]	; (80048f8 <eepromKontrol+0x280>)
 80046f2:	7ada      	ldrb	r2, [r3, #11]
 80046f4:	4b8c      	ldr	r3, [pc, #560]	; (8004928 <eepromKontrol+0x2b0>)
 80046f6:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80046f8:	4b7f      	ldr	r3, [pc, #508]	; (80048f8 <eepromKontrol+0x280>)
 80046fa:	7b1a      	ldrb	r2, [r3, #12]
 80046fc:	4b8b      	ldr	r3, [pc, #556]	; (800492c <eepromKontrol+0x2b4>)
 80046fe:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004700:	4b7d      	ldr	r3, [pc, #500]	; (80048f8 <eepromKontrol+0x280>)
 8004702:	7b5a      	ldrb	r2, [r3, #13]
 8004704:	4b8a      	ldr	r3, [pc, #552]	; (8004930 <eepromKontrol+0x2b8>)
 8004706:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8004708:	4b7b      	ldr	r3, [pc, #492]	; (80048f8 <eepromKontrol+0x280>)
 800470a:	7b9a      	ldrb	r2, [r3, #14]
 800470c:	4b89      	ldr	r3, [pc, #548]	; (8004934 <eepromKontrol+0x2bc>)
 800470e:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004710:	4b79      	ldr	r3, [pc, #484]	; (80048f8 <eepromKontrol+0x280>)
 8004712:	7bda      	ldrb	r2, [r3, #15]
 8004714:	4b88      	ldr	r3, [pc, #544]	; (8004938 <eepromKontrol+0x2c0>)
 8004716:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004718:	4b77      	ldr	r3, [pc, #476]	; (80048f8 <eepromKontrol+0x280>)
 800471a:	7c1a      	ldrb	r2, [r3, #16]
 800471c:	4b87      	ldr	r3, [pc, #540]	; (800493c <eepromKontrol+0x2c4>)
 800471e:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004720:	4b75      	ldr	r3, [pc, #468]	; (80048f8 <eepromKontrol+0x280>)
 8004722:	7c5a      	ldrb	r2, [r3, #17]
 8004724:	4b86      	ldr	r3, [pc, #536]	; (8004940 <eepromKontrol+0x2c8>)
 8004726:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004728:	4b73      	ldr	r3, [pc, #460]	; (80048f8 <eepromKontrol+0x280>)
 800472a:	7c9a      	ldrb	r2, [r3, #18]
 800472c:	4b85      	ldr	r3, [pc, #532]	; (8004944 <eepromKontrol+0x2cc>)
 800472e:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8004730:	4b71      	ldr	r3, [pc, #452]	; (80048f8 <eepromKontrol+0x280>)
 8004732:	7cda      	ldrb	r2, [r3, #19]
 8004734:	4b84      	ldr	r3, [pc, #528]	; (8004948 <eepromKontrol+0x2d0>)
 8004736:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004738:	4b6f      	ldr	r3, [pc, #444]	; (80048f8 <eepromKontrol+0x280>)
 800473a:	7d1a      	ldrb	r2, [r3, #20]
 800473c:	4b83      	ldr	r3, [pc, #524]	; (800494c <eepromKontrol+0x2d4>)
 800473e:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8004740:	4b6d      	ldr	r3, [pc, #436]	; (80048f8 <eepromKontrol+0x280>)
 8004742:	7d5a      	ldrb	r2, [r3, #21]
 8004744:	4b82      	ldr	r3, [pc, #520]	; (8004950 <eepromKontrol+0x2d8>)
 8004746:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004748:	4b6b      	ldr	r3, [pc, #428]	; (80048f8 <eepromKontrol+0x280>)
 800474a:	7d9a      	ldrb	r2, [r3, #22]
 800474c:	4b81      	ldr	r3, [pc, #516]	; (8004954 <eepromKontrol+0x2dc>)
 800474e:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8004750:	4b69      	ldr	r3, [pc, #420]	; (80048f8 <eepromKontrol+0x280>)
 8004752:	7dda      	ldrb	r2, [r3, #23]
 8004754:	4b80      	ldr	r3, [pc, #512]	; (8004958 <eepromKontrol+0x2e0>)
 8004756:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8004758:	4b67      	ldr	r3, [pc, #412]	; (80048f8 <eepromKontrol+0x280>)
 800475a:	7e1a      	ldrb	r2, [r3, #24]
 800475c:	4b7f      	ldr	r3, [pc, #508]	; (800495c <eepromKontrol+0x2e4>)
 800475e:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8004760:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <eepromKontrol+0x280>)
 8004762:	7e5a      	ldrb	r2, [r3, #25]
 8004764:	4b7e      	ldr	r3, [pc, #504]	; (8004960 <eepromKontrol+0x2e8>)
 8004766:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8004768:	4b63      	ldr	r3, [pc, #396]	; (80048f8 <eepromKontrol+0x280>)
 800476a:	7e9a      	ldrb	r2, [r3, #26]
 800476c:	4b7d      	ldr	r3, [pc, #500]	; (8004964 <eepromKontrol+0x2ec>)
 800476e:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8004770:	4b61      	ldr	r3, [pc, #388]	; (80048f8 <eepromKontrol+0x280>)
 8004772:	7eda      	ldrb	r2, [r3, #27]
 8004774:	4b7c      	ldr	r3, [pc, #496]	; (8004968 <eepromKontrol+0x2f0>)
 8004776:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8004778:	4b5f      	ldr	r3, [pc, #380]	; (80048f8 <eepromKontrol+0x280>)
 800477a:	7f1a      	ldrb	r2, [r3, #28]
 800477c:	4b7b      	ldr	r3, [pc, #492]	; (800496c <eepromKontrol+0x2f4>)
 800477e:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004780:	4b5d      	ldr	r3, [pc, #372]	; (80048f8 <eepromKontrol+0x280>)
 8004782:	7f5a      	ldrb	r2, [r3, #29]
 8004784:	4b7a      	ldr	r3, [pc, #488]	; (8004970 <eepromKontrol+0x2f8>)
 8004786:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8004788:	4b5b      	ldr	r3, [pc, #364]	; (80048f8 <eepromKontrol+0x280>)
 800478a:	7f9a      	ldrb	r2, [r3, #30]
 800478c:	4b79      	ldr	r3, [pc, #484]	; (8004974 <eepromKontrol+0x2fc>)
 800478e:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004790:	4b59      	ldr	r3, [pc, #356]	; (80048f8 <eepromKontrol+0x280>)
 8004792:	7fda      	ldrb	r2, [r3, #31]
 8004794:	4b78      	ldr	r3, [pc, #480]	; (8004978 <eepromKontrol+0x300>)
 8004796:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004798:	4b57      	ldr	r3, [pc, #348]	; (80048f8 <eepromKontrol+0x280>)
 800479a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800479e:	4b77      	ldr	r3, [pc, #476]	; (800497c <eepromKontrol+0x304>)
 80047a0:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 80047a2:	4b55      	ldr	r3, [pc, #340]	; (80048f8 <eepromKontrol+0x280>)
 80047a4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80047a8:	4b75      	ldr	r3, [pc, #468]	; (8004980 <eepromKontrol+0x308>)
 80047aa:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 80047ac:	4b52      	ldr	r3, [pc, #328]	; (80048f8 <eepromKontrol+0x280>)
 80047ae:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80047b2:	4b74      	ldr	r3, [pc, #464]	; (8004984 <eepromKontrol+0x30c>)
 80047b4:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 80047b6:	4b50      	ldr	r3, [pc, #320]	; (80048f8 <eepromKontrol+0x280>)
 80047b8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80047bc:	4b72      	ldr	r3, [pc, #456]	; (8004988 <eepromKontrol+0x310>)
 80047be:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 80047c0:	4b4d      	ldr	r3, [pc, #308]	; (80048f8 <eepromKontrol+0x280>)
 80047c2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80047c6:	4b71      	ldr	r3, [pc, #452]	; (800498c <eepromKontrol+0x314>)
 80047c8:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 80047ca:	4b4b      	ldr	r3, [pc, #300]	; (80048f8 <eepromKontrol+0x280>)
 80047cc:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80047d0:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <eepromKontrol+0x318>)
 80047d2:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 80047d4:	4b48      	ldr	r3, [pc, #288]	; (80048f8 <eepromKontrol+0x280>)
 80047d6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80047da:	4b6e      	ldr	r3, [pc, #440]	; (8004994 <eepromKontrol+0x31c>)
 80047dc:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 80047de:	4b46      	ldr	r3, [pc, #280]	; (80048f8 <eepromKontrol+0x280>)
 80047e0:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80047e4:	4b6c      	ldr	r3, [pc, #432]	; (8004998 <eepromKontrol+0x320>)
 80047e6:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 80047e8:	4b43      	ldr	r3, [pc, #268]	; (80048f8 <eepromKontrol+0x280>)
 80047ea:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80047ee:	4b6b      	ldr	r3, [pc, #428]	; (800499c <eepromKontrol+0x324>)
 80047f0:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 80047f2:	4b41      	ldr	r3, [pc, #260]	; (80048f8 <eepromKontrol+0x280>)
 80047f4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80047f8:	4b69      	ldr	r3, [pc, #420]	; (80049a0 <eepromKontrol+0x328>)
 80047fa:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 80047fc:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <eepromKontrol+0x280>)
 80047fe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004802:	4b68      	ldr	r3, [pc, #416]	; (80049a4 <eepromKontrol+0x32c>)
 8004804:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8004806:	4b3c      	ldr	r3, [pc, #240]	; (80048f8 <eepromKontrol+0x280>)
 8004808:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800480c:	4b66      	ldr	r3, [pc, #408]	; (80049a8 <eepromKontrol+0x330>)
 800480e:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8004810:	4b39      	ldr	r3, [pc, #228]	; (80048f8 <eepromKontrol+0x280>)
 8004812:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004816:	4b65      	ldr	r3, [pc, #404]	; (80049ac <eepromKontrol+0x334>)
 8004818:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 800481a:	4b37      	ldr	r3, [pc, #220]	; (80048f8 <eepromKontrol+0x280>)
 800481c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004820:	4b63      	ldr	r3, [pc, #396]	; (80049b0 <eepromKontrol+0x338>)
 8004822:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8004824:	4b34      	ldr	r3, [pc, #208]	; (80048f8 <eepromKontrol+0x280>)
 8004826:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800482a:	4b62      	ldr	r3, [pc, #392]	; (80049b4 <eepromKontrol+0x33c>)
 800482c:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 800482e:	4b54      	ldr	r3, [pc, #336]	; (8004980 <eepromKontrol+0x308>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff f82e 	bl	8003894 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8004838:	4b50      	ldr	r3, [pc, #320]	; (800497c <eepromKontrol+0x304>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b09      	cmp	r3, #9
 800483e:	d902      	bls.n	8004846 <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 8004840:	4b4e      	ldr	r3, [pc, #312]	; (800497c <eepromKontrol+0x304>)
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004846:	4b4c      	ldr	r3, [pc, #304]	; (8004978 <eepromKontrol+0x300>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b09      	cmp	r3, #9
 800484c:	d902      	bls.n	8004854 <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 800484e:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <eepromKontrol+0x300>)
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004854:	4b47      	ldr	r3, [pc, #284]	; (8004974 <eepromKontrol+0x2fc>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b09      	cmp	r3, #9
 800485a:	d902      	bls.n	8004862 <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 800485c:	4b45      	ldr	r3, [pc, #276]	; (8004974 <eepromKontrol+0x2fc>)
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8004862:	4b43      	ldr	r3, [pc, #268]	; (8004970 <eepromKontrol+0x2f8>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b09      	cmp	r3, #9
 8004868:	d902      	bls.n	8004870 <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 800486a:	4b41      	ldr	r3, [pc, #260]	; (8004970 <eepromKontrol+0x2f8>)
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8004870:	4b3e      	ldr	r3, [pc, #248]	; (800496c <eepromKontrol+0x2f4>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b09      	cmp	r3, #9
 8004876:	d902      	bls.n	800487e <eepromKontrol+0x206>
	    calismaSayisi1=0;
 8004878:	4b3c      	ldr	r3, [pc, #240]	; (800496c <eepromKontrol+0x2f4>)
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 800487e:	4b21      	ldr	r3, [pc, #132]	; (8004904 <eepromKontrol+0x28c>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d902      	bls.n	800488c <eepromKontrol+0x214>
	    calismaSekli=0;
 8004886:	4b1f      	ldr	r3, [pc, #124]	; (8004904 <eepromKontrol+0x28c>)
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 800488c:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <eepromKontrol+0x290>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d902      	bls.n	800489a <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 8004894:	4b1c      	ldr	r3, [pc, #112]	; (8004908 <eepromKontrol+0x290>)
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 800489a:	4b1c      	ldr	r3, [pc, #112]	; (800490c <eepromKontrol+0x294>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d902      	bls.n	80048a8 <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 80048a2:	4b1a      	ldr	r3, [pc, #104]	; (800490c <eepromKontrol+0x294>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <eepromKontrol+0x298>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d902      	bls.n	80048b6 <eepromKontrol+0x23e>
	    altLimit=1;
 80048b0:	4b17      	ldr	r3, [pc, #92]	; (8004910 <eepromKontrol+0x298>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 80048b6:	4b17      	ldr	r3, [pc, #92]	; (8004914 <eepromKontrol+0x29c>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d902      	bls.n	80048c4 <eepromKontrol+0x24c>
	    basincSalteri=1;
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <eepromKontrol+0x29c>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 80048c4:	4b14      	ldr	r3, [pc, #80]	; (8004918 <eepromKontrol+0x2a0>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d902      	bls.n	80048d2 <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 80048cc:	4b12      	ldr	r3, [pc, #72]	; (8004918 <eepromKontrol+0x2a0>)
 80048ce:	2203      	movs	r2, #3
 80048d0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <eepromKontrol+0x314>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d902      	bls.n	80048e0 <eepromKontrol+0x268>
	    kapiAcTipi=0;
 80048da:	4b2c      	ldr	r3, [pc, #176]	; (800498c <eepromKontrol+0x314>)
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80048e0:	4b0e      	ldr	r3, [pc, #56]	; (800491c <eepromKontrol+0x2a4>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d902      	bls.n	80048ee <eepromKontrol+0x276>
	    kapi1Tip=1;
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <eepromKontrol+0x2a4>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <eepromKontrol+0x2a8>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d963      	bls.n	80049be <eepromKontrol+0x346>
 80048f6:	e05f      	b.n	80049b8 <eepromKontrol+0x340>
 80048f8:	200009c0 	.word	0x200009c0
 80048fc:	20000be8 	.word	0x20000be8
 8004900:	200009ff 	.word	0x200009ff
 8004904:	20000a2d 	.word	0x20000a2d
 8004908:	20000a30 	.word	0x20000a30
 800490c:	20000a31 	.word	0x20000a31
 8004910:	20000a32 	.word	0x20000a32
 8004914:	20000a33 	.word	0x20000a33
 8004918:	20000a34 	.word	0x20000a34
 800491c:	20000a35 	.word	0x20000a35
 8004920:	20000a45 	.word	0x20000a45
 8004924:	20000a36 	.word	0x20000a36
 8004928:	20000a46 	.word	0x20000a46
 800492c:	20000a37 	.word	0x20000a37
 8004930:	20000a47 	.word	0x20000a47
 8004934:	20000a3a 	.word	0x20000a3a
 8004938:	20000a3b 	.word	0x20000a3b
 800493c:	20000a3c 	.word	0x20000a3c
 8004940:	20000a3d 	.word	0x20000a3d
 8004944:	20000a3e 	.word	0x20000a3e
 8004948:	20000a3f 	.word	0x20000a3f
 800494c:	20000a40 	.word	0x20000a40
 8004950:	20000a41 	.word	0x20000a41
 8004954:	20000a42 	.word	0x20000a42
 8004958:	20000a43 	.word	0x20000a43
 800495c:	20000a44 	.word	0x20000a44
 8004960:	20000a48 	.word	0x20000a48
 8004964:	20000a4a 	.word	0x20000a4a
 8004968:	20000a28 	.word	0x20000a28
 800496c:	20000a29 	.word	0x20000a29
 8004970:	20000a2a 	.word	0x20000a2a
 8004974:	20000941 	.word	0x20000941
 8004978:	20000942 	.word	0x20000942
 800497c:	20000a2b 	.word	0x20000a2b
 8004980:	20000a4c 	.word	0x20000a4c
 8004984:	20000a39 	.word	0x20000a39
 8004988:	20000a4b 	.word	0x20000a4b
 800498c:	20000a38 	.word	0x20000a38
 8004990:	20000a4d 	.word	0x20000a4d
 8004994:	20000a4e 	.word	0x20000a4e
 8004998:	20000a4f 	.word	0x20000a4f
 800499c:	20000a50 	.word	0x20000a50
 80049a0:	20000a51 	.word	0x20000a51
 80049a4:	20000a52 	.word	0x20000a52
 80049a8:	20000a53 	.word	0x20000a53
 80049ac:	20000a54 	.word	0x20000a54
 80049b0:	20000a55 	.word	0x20000a55
 80049b4:	20000a56 	.word	0x20000a56
	    kapi1AcSure=5;
 80049b8:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <eepromKontrol+0x46c>)
 80049ba:	2205      	movs	r2, #5
 80049bc:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 80049be:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <eepromKontrol+0x470>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d902      	bls.n	80049cc <eepromKontrol+0x354>
	    kapi2Tip=1;
 80049c6:	4b48      	ldr	r3, [pc, #288]	; (8004ae8 <eepromKontrol+0x470>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 80049cc:	4b47      	ldr	r3, [pc, #284]	; (8004aec <eepromKontrol+0x474>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b05      	cmp	r3, #5
 80049d2:	d902      	bls.n	80049da <eepromKontrol+0x362>
	    kapi2AcSure=5;
 80049d4:	4b45      	ldr	r3, [pc, #276]	; (8004aec <eepromKontrol+0x474>)
 80049d6:	2205      	movs	r2, #5
 80049d8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80049da:	4b45      	ldr	r3, [pc, #276]	; (8004af0 <eepromKontrol+0x478>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <eepromKontrol+0x370>
	    kapitablaTip=1;
 80049e2:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <eepromKontrol+0x478>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80049e8:	4b42      	ldr	r3, [pc, #264]	; (8004af4 <eepromKontrol+0x47c>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d902      	bls.n	80049f6 <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 80049f0:	4b40      	ldr	r3, [pc, #256]	; (8004af4 <eepromKontrol+0x47c>)
 80049f2:	2202      	movs	r2, #2
 80049f4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80049f6:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <eepromKontrol+0x480>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d902      	bls.n	8004a04 <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 80049fe:	4b3e      	ldr	r3, [pc, #248]	; (8004af8 <eepromKontrol+0x480>)
 8004a00:	2205      	movs	r2, #5
 8004a02:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004a04:	4b3d      	ldr	r3, [pc, #244]	; (8004afc <eepromKontrol+0x484>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d902      	bls.n	8004a12 <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 8004a0c:	4b3b      	ldr	r3, [pc, #236]	; (8004afc <eepromKontrol+0x484>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004a12:	4b3b      	ldr	r3, [pc, #236]	; (8004b00 <eepromKontrol+0x488>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d902      	bls.n	8004a20 <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 8004a1a:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <eepromKontrol+0x488>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004a20:	4b38      	ldr	r3, [pc, #224]	; (8004b04 <eepromKontrol+0x48c>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d902      	bls.n	8004a2e <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8004a28:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <eepromKontrol+0x48c>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004a2e:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <eepromKontrol+0x490>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d902      	bls.n	8004a3c <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8004a36:	4b34      	ldr	r3, [pc, #208]	; (8004b08 <eepromKontrol+0x490>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004a3c:	4b33      	ldr	r3, [pc, #204]	; (8004b0c <eepromKontrol+0x494>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d902      	bls.n	8004a4a <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 8004a44:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <eepromKontrol+0x494>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004a4a:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <eepromKontrol+0x498>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d902      	bls.n	8004a58 <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 8004a52:	4b2f      	ldr	r3, [pc, #188]	; (8004b10 <eepromKontrol+0x498>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004a58:	4b2e      	ldr	r3, [pc, #184]	; (8004b14 <eepromKontrol+0x49c>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d902      	bls.n	8004a66 <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 8004a60:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <eepromKontrol+0x49c>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004a66:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <eepromKontrol+0x4a0>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d902      	bls.n	8004a74 <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8004a6e:	4b2a      	ldr	r3, [pc, #168]	; (8004b18 <eepromKontrol+0x4a0>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004a74:	4b29      	ldr	r3, [pc, #164]	; (8004b1c <eepromKontrol+0x4a4>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b05      	cmp	r3, #5
 8004a7a:	d902      	bls.n	8004a82 <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8004a7c:	4b27      	ldr	r3, [pc, #156]	; (8004b1c <eepromKontrol+0x4a4>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004a82:	4b27      	ldr	r3, [pc, #156]	; (8004b20 <eepromKontrol+0x4a8>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b05      	cmp	r3, #5
 8004a88:	d902      	bls.n	8004a90 <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8004a8a:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <eepromKontrol+0x4a8>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004a90:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <eepromKontrol+0x4ac>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2bb4      	cmp	r3, #180	; 0xb4
 8004a96:	d902      	bls.n	8004a9e <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8004a98:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <eepromKontrol+0x4ac>)
 8004a9a:	223c      	movs	r2, #60	; 0x3c
 8004a9c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004a9e:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <eepromKontrol+0x4b0>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d902      	bls.n	8004aac <eepromKontrol+0x434>
	    buzzer=0;
 8004aa6:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <eepromKontrol+0x4b0>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004aac:	4b1f      	ldr	r3, [pc, #124]	; (8004b2c <eepromKontrol+0x4b4>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d902      	bls.n	8004aba <eepromKontrol+0x442>
	    demoMode=0;
 8004ab4:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <eepromKontrol+0x4b4>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004aba:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <eepromKontrol+0x4b8>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d902      	bls.n	8004ac8 <eepromKontrol+0x450>
	    calismaSayModu=0;
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <eepromKontrol+0x4b8>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004ac8:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <eepromKontrol+0x4bc>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d902      	bls.n	8004ad6 <eepromKontrol+0x45e>
	    dilSecim=0;
 8004ad0:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <eepromKontrol+0x4bc>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ada:	f002 ff7d 	bl	80079d8 <HAL_Delay>
}
 8004ade:	bf00      	nop
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20000a45 	.word	0x20000a45
 8004ae8:	20000a36 	.word	0x20000a36
 8004aec:	20000a46 	.word	0x20000a46
 8004af0:	20000a37 	.word	0x20000a37
 8004af4:	20000a39 	.word	0x20000a39
 8004af8:	20000a47 	.word	0x20000a47
 8004afc:	20000a3a 	.word	0x20000a3a
 8004b00:	20000a3b 	.word	0x20000a3b
 8004b04:	20000a3c 	.word	0x20000a3c
 8004b08:	20000a3d 	.word	0x20000a3d
 8004b0c:	20000a3e 	.word	0x20000a3e
 8004b10:	20000a3f 	.word	0x20000a3f
 8004b14:	20000a40 	.word	0x20000a40
 8004b18:	20000a41 	.word	0x20000a41
 8004b1c:	20000a42 	.word	0x20000a42
 8004b20:	20000a43 	.word	0x20000a43
 8004b24:	20000a44 	.word	0x20000a44
 8004b28:	20000a48 	.word	0x20000a48
 8004b2c:	20000a4a 	.word	0x20000a4a
 8004b30:	20000a4b 	.word	0x20000a4b
 8004b34:	20000a4c 	.word	0x20000a4c

08004b38 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b089      	sub	sp, #36	; 0x24
 8004b3c:	af04      	add	r7, sp, #16
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8004b42:	4b25      	ldr	r3, [pc, #148]	; (8004bd8 <hata2EEPROM+0xa0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	1e5a      	subs	r2, r3, #1
 8004b48:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <hata2EEPROM+0xa4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <hata2EEPROM+0xa8>)
 8004b50:	5cd3      	ldrb	r3, [r2, r3]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8004b56:	f000 f847 	bl	8004be8 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004b5a:	e000      	b.n	8004b5e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004b5c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	e012      	b.n	8004b8a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8004b64:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <hata2EEPROM+0xa4>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <hata2EEPROM+0xa8>)
 8004b6e:	5cd3      	ldrb	r3, [r2, r3]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d107      	bne.n	8004b84 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8004b74:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <hata2EEPROM+0xa4>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4918      	ldr	r1, [pc, #96]	; (8004be0 <hata2EEPROM+0xa8>)
 8004b7e:	79fa      	ldrb	r2, [r7, #7]
 8004b80:	54ca      	strb	r2, [r1, r3]
					break;
 8004b82:	e007      	b.n	8004b94 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3301      	adds	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <hata2EEPROM+0xa0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	dbe7      	blt.n	8004b64 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8004b94:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <hata2EEPROM+0xa4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	b299      	uxth	r1, r3
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <hata2EEPROM+0xa0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	b298      	uxth	r0, r3
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <hata2EEPROM+0xa4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a0e      	ldr	r2, [pc, #56]	; (8004be0 <hata2EEPROM+0xa8>)
 8004ba6:	4413      	add	r3, r2
 8004ba8:	4a0b      	ldr	r2, [pc, #44]	; (8004bd8 <hata2EEPROM+0xa0>)
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	b292      	uxth	r2, r2
 8004bae:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8004bb2:	9402      	str	r4, [sp, #8]
 8004bb4:	9201      	str	r2, [sp, #4]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	4603      	mov	r3, r0
 8004bba:	460a      	mov	r2, r1
 8004bbc:	21a0      	movs	r1, #160	; 0xa0
 8004bbe:	4809      	ldr	r0, [pc, #36]	; (8004be4 <hata2EEPROM+0xac>)
 8004bc0:	f003 ff94 	bl	8008aec <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8004bc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bc8:	f002 ff06 	bl	80079d8 <HAL_Delay>
	eepromKontrol();
 8004bcc:	f7ff fd54 	bl	8004678 <eepromKontrol>
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd90      	pop	{r4, r7, pc}
 8004bd8:	20000938 	.word	0x20000938
 8004bdc:	2000093c 	.word	0x2000093c
 8004be0:	200009c0 	.word	0x200009c0
 8004be4:	20000be8 	.word	0x20000be8

08004be8 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004bee:	2300      	movs	r3, #0
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	e009      	b.n	8004c08 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8004bf4:	4a0a      	ldr	r2, [pc, #40]	; (8004c20 <eepromDataFillWithEmpty+0x38>)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfc:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <eepromDataFillWithEmpty+0x3c>)
 8004bfe:	2100      	movs	r1, #0
 8004c00:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3301      	adds	r3, #1
 8004c06:	607b      	str	r3, [r7, #4]
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <eepromDataFillWithEmpty+0x40>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	dbf0      	blt.n	8004bf4 <eepromDataFillWithEmpty+0xc>
	}
}
 8004c12:	bf00      	nop
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000910 	.word	0x20000910
 8004c24:	200009c0 	.word	0x200009c0
 8004c28:	20000938 	.word	0x20000938

08004c2c <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
	timer1=millis;
 8004c30:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <bekle+0x124>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a47      	ldr	r2, [pc, #284]	; (8004d54 <bekle+0x128>)
 8004c36:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c38:	e002      	b.n	8004c40 <bekle+0x14>
    	butonKontrol = 1;
 8004c3a:	4b47      	ldr	r3, [pc, #284]	; (8004d58 <bekle+0x12c>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c40:	2101      	movs	r1, #1
 8004c42:	4846      	ldr	r0, [pc, #280]	; (8004d5c <bekle+0x130>)
 8004c44:	f003 fc98 	bl	8008578 <HAL_GPIO_ReadPin>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d109      	bne.n	8004c62 <bekle+0x36>
 8004c4e:	4b40      	ldr	r3, [pc, #256]	; (8004d50 <bekle+0x124>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <bekle+0x128>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d0ef      	beq.n	8004c3a <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c5a:	e002      	b.n	8004c62 <bekle+0x36>
    	butonKontrol = 1;
 8004c5c:	4b3e      	ldr	r3, [pc, #248]	; (8004d58 <bekle+0x12c>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c62:	2108      	movs	r1, #8
 8004c64:	483e      	ldr	r0, [pc, #248]	; (8004d60 <bekle+0x134>)
 8004c66:	f003 fc87 	bl	8008578 <HAL_GPIO_ReadPin>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d109      	bne.n	8004c84 <bekle+0x58>
 8004c70:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <bekle+0x124>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <bekle+0x128>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d0ef      	beq.n	8004c5c <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c7c:	e002      	b.n	8004c84 <bekle+0x58>
    	butonKontrol = 1;
 8004c7e:	4b36      	ldr	r3, [pc, #216]	; (8004d58 <bekle+0x12c>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c84:	2102      	movs	r1, #2
 8004c86:	4835      	ldr	r0, [pc, #212]	; (8004d5c <bekle+0x130>)
 8004c88:	f003 fc76 	bl	8008578 <HAL_GPIO_ReadPin>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d109      	bne.n	8004ca6 <bekle+0x7a>
 8004c92:	4b2f      	ldr	r3, [pc, #188]	; (8004d50 <bekle+0x124>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <bekle+0x128>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d0ef      	beq.n	8004c7e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004c9e:	e002      	b.n	8004ca6 <bekle+0x7a>
    	butonKontrol = 1;
 8004ca0:	4b2d      	ldr	r3, [pc, #180]	; (8004d58 <bekle+0x12c>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ca6:	2104      	movs	r1, #4
 8004ca8:	482c      	ldr	r0, [pc, #176]	; (8004d5c <bekle+0x130>)
 8004caa:	f003 fc65 	bl	8008578 <HAL_GPIO_ReadPin>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d109      	bne.n	8004cc8 <bekle+0x9c>
 8004cb4:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <bekle+0x124>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	4b26      	ldr	r3, [pc, #152]	; (8004d54 <bekle+0x128>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d0ef      	beq.n	8004ca0 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cc0:	e002      	b.n	8004cc8 <bekle+0x9c>
    	butonKontrol = 1;
 8004cc2:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <bekle+0x12c>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004cc8:	2108      	movs	r1, #8
 8004cca:	4824      	ldr	r0, [pc, #144]	; (8004d5c <bekle+0x130>)
 8004ccc:	f003 fc54 	bl	8008578 <HAL_GPIO_ReadPin>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d109      	bne.n	8004cea <bekle+0xbe>
 8004cd6:	4b1e      	ldr	r3, [pc, #120]	; (8004d50 <bekle+0x124>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <bekle+0x128>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d0ef      	beq.n	8004cc2 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004ce2:	e002      	b.n	8004cea <bekle+0xbe>
    	butonKontrol = 1;
 8004ce4:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <bekle+0x12c>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	481c      	ldr	r0, [pc, #112]	; (8004d60 <bekle+0x134>)
 8004cee:	f003 fc43 	bl	8008578 <HAL_GPIO_ReadPin>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <bekle+0xe0>
 8004cf8:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <bekle+0x124>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <bekle+0x128>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d0ef      	beq.n	8004ce4 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d04:	e002      	b.n	8004d0c <bekle+0xe0>
    	butonKontrol = 1;
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <bekle+0x12c>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d10:	4813      	ldr	r0, [pc, #76]	; (8004d60 <bekle+0x134>)
 8004d12:	f003 fc31 	bl	8008578 <HAL_GPIO_ReadPin>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <bekle+0x104>
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <bekle+0x124>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <bekle+0x128>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d0ee      	beq.n	8004d06 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d28:	e002      	b.n	8004d30 <bekle+0x104>
    	butonKontrol = 1;
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <bekle+0x12c>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d34:	480a      	ldr	r0, [pc, #40]	; (8004d60 <bekle+0x134>)
 8004d36:	f003 fc1f 	bl	8008578 <HAL_GPIO_ReadPin>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <bekle+0x120>
 8004d40:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <bekle+0x124>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <bekle+0x128>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d0ee      	beq.n	8004d2a <bekle+0xfe>
    }

}
 8004d4c:	bf00      	nop
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000a08 	.word	0x20000a08
 8004d54:	20000a10 	.word	0x20000a10
 8004d58:	20000a5a 	.word	0x20000a5a
 8004d5c:	40010800 	.word	0x40010800
 8004d60:	40011000 	.word	0x40011000

08004d64 <i2cTest>:

void i2cTest() {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	609a      	str	r2, [r3, #8]
 8004d74:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004d76:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <i2cTest+0x154>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4b4e      	ldr	r3, [pc, #312]	; (8004eb8 <i2cTest+0x154>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004d86:	484c      	ldr	r0, [pc, #304]	; (8004eb8 <i2cTest+0x154>)
 8004d88:	f003 fd82 	bl	8008890 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d8c:	23c0      	movs	r3, #192	; 0xc0
 8004d8e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8004d90:	2311      	movs	r3, #17
 8004d92:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004d94:	2301      	movs	r3, #1
 8004d96:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4846      	ldr	r0, [pc, #280]	; (8004ebc <i2cTest+0x158>)
 8004da2:	f003 f989 	bl	80080b8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004da6:	2201      	movs	r2, #1
 8004da8:	2140      	movs	r1, #64	; 0x40
 8004daa:	4844      	ldr	r0, [pc, #272]	; (8004ebc <i2cTest+0x158>)
 8004dac:	f003 fbfb 	bl	80085a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004db0:	2201      	movs	r2, #1
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	4841      	ldr	r0, [pc, #260]	; (8004ebc <i2cTest+0x158>)
 8004db6:	f003 fbf6 	bl	80085a6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8004dba:	200a      	movs	r0, #10
 8004dbc:	f002 fe0c 	bl	80079d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004dc0:	bf00      	nop
 8004dc2:	2140      	movs	r1, #64	; 0x40
 8004dc4:	483d      	ldr	r0, [pc, #244]	; (8004ebc <i2cTest+0x158>)
 8004dc6:	f003 fbd7 	bl	8008578 <HAL_GPIO_ReadPin>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d006      	beq.n	8004dde <i2cTest+0x7a>
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	483a      	ldr	r0, [pc, #232]	; (8004ebc <i2cTest+0x158>)
 8004dd4:	f003 fbd0 	bl	8008578 <HAL_GPIO_ReadPin>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d1f1      	bne.n	8004dc2 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004dde:	2200      	movs	r2, #0
 8004de0:	2180      	movs	r1, #128	; 0x80
 8004de2:	4836      	ldr	r0, [pc, #216]	; (8004ebc <i2cTest+0x158>)
 8004de4:	f003 fbdf 	bl	80085a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8004de8:	200a      	movs	r0, #10
 8004dea:	f002 fdf5 	bl	80079d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8004dee:	bf00      	nop
 8004df0:	2180      	movs	r1, #128	; 0x80
 8004df2:	4832      	ldr	r0, [pc, #200]	; (8004ebc <i2cTest+0x158>)
 8004df4:	f003 fbc0 	bl	8008578 <HAL_GPIO_ReadPin>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d0f8      	beq.n	8004df0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2140      	movs	r1, #64	; 0x40
 8004e02:	482e      	ldr	r0, [pc, #184]	; (8004ebc <i2cTest+0x158>)
 8004e04:	f003 fbcf 	bl	80085a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004e08:	200a      	movs	r0, #10
 8004e0a:	f002 fde5 	bl	80079d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8004e0e:	bf00      	nop
 8004e10:	2140      	movs	r1, #64	; 0x40
 8004e12:	482a      	ldr	r0, [pc, #168]	; (8004ebc <i2cTest+0x158>)
 8004e14:	f003 fbb0 	bl	8008578 <HAL_GPIO_ReadPin>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d0f8      	beq.n	8004e10 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004e1e:	2201      	movs	r2, #1
 8004e20:	2140      	movs	r1, #64	; 0x40
 8004e22:	4826      	ldr	r0, [pc, #152]	; (8004ebc <i2cTest+0x158>)
 8004e24:	f003 fbbf 	bl	80085a6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004e28:	200a      	movs	r0, #10
 8004e2a:	f002 fdd5 	bl	80079d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8004e2e:	bf00      	nop
 8004e30:	2140      	movs	r1, #64	; 0x40
 8004e32:	4822      	ldr	r0, [pc, #136]	; (8004ebc <i2cTest+0x158>)
 8004e34:	f003 fba0 	bl	8008578 <HAL_GPIO_ReadPin>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d1f8      	bne.n	8004e30 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004e3e:	2201      	movs	r2, #1
 8004e40:	2180      	movs	r1, #128	; 0x80
 8004e42:	481e      	ldr	r0, [pc, #120]	; (8004ebc <i2cTest+0x158>)
 8004e44:	f003 fbaf 	bl	80085a6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8004e48:	200a      	movs	r0, #10
 8004e4a:	f002 fdc5 	bl	80079d8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8004e4e:	bf00      	nop
 8004e50:	2180      	movs	r1, #128	; 0x80
 8004e52:	481a      	ldr	r0, [pc, #104]	; (8004ebc <i2cTest+0x158>)
 8004e54:	f003 fb90 	bl	8008578 <HAL_GPIO_ReadPin>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d1f8      	bne.n	8004e50 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e5e:	23c0      	movs	r3, #192	; 0xc0
 8004e60:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8004e62:	2312      	movs	r3, #18
 8004e64:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8004e66:	2301      	movs	r3, #1
 8004e68:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8004e6e:	463b      	mov	r3, r7
 8004e70:	4619      	mov	r1, r3
 8004e72:	4812      	ldr	r0, [pc, #72]	; (8004ebc <i2cTest+0x158>)
 8004e74:	f003 f920 	bl	80080b8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <i2cTest+0x154>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <i2cTest+0x154>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e86:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <i2cTest+0x154>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <i2cTest+0x154>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e96:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8004e98:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <i2cTest+0x154>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <i2cTest+0x154>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8004ea8:	4803      	ldr	r0, [pc, #12]	; (8004eb8 <i2cTest+0x154>)
 8004eaa:	f003 fbad 	bl	8008608 <HAL_I2C_Init>
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000be8 	.word	0x20000be8
 8004ebc:	40010c00 	.word	0x40010c00

08004ec0 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8004ec4:	4b08      	ldr	r3, [pc, #32]	; (8004ee8 <checkLCDBacklight+0x28>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b08      	ldr	r3, [pc, #32]	; (8004eec <checkLCDBacklight+0x2c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	4a08      	ldr	r2, [pc, #32]	; (8004ef0 <checkLCDBacklight+0x30>)
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d303      	bcc.n	8004ede <checkLCDBacklight+0x1e>
				lcd_backlight(0);
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f7fb faf2 	bl	80004c0 <lcd_backlight>
			} else {
				lcd_backlight(1);
			}
}
 8004edc:	e002      	b.n	8004ee4 <checkLCDBacklight+0x24>
				lcd_backlight(1);
 8004ede:	2001      	movs	r0, #1
 8004ee0:	f7fb faee 	bl	80004c0 <lcd_backlight>
}
 8004ee4:	bf00      	nop
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000a08 	.word	0x20000a08
 8004eec:	20000a24 	.word	0x20000a24
 8004ef0:	20000940 	.word	0x20000940

08004ef4 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <checkBasincSalteri+0x54>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <checkBasincSalteri+0x12>
				basincVar=1;
 8004f00:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <checkBasincSalteri+0x58>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
			}

			if(basincSalteri==1) {
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <checkBasincSalteri+0x54>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d119      	bne.n	8004f42 <checkBasincSalteri+0x4e>
				if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f12:	480f      	ldr	r0, [pc, #60]	; (8004f50 <checkBasincSalteri+0x5c>)
 8004f14:	f003 fb30 	bl	8008578 <HAL_GPIO_ReadPin>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <checkBasincSalteri+0x40>
					if(millis-timer5>=3) {
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <checkBasincSalteri+0x60>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <checkBasincSalteri+0x64>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d90a      	bls.n	8004f42 <checkBasincSalteri+0x4e>
						basincVar=1;
 8004f2c:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <checkBasincSalteri+0x58>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
				} else {
					timer5=millis;
					basincVar=0;
				}
			}
}
 8004f32:	e006      	b.n	8004f42 <checkBasincSalteri+0x4e>
					timer5=millis;
 8004f34:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <checkBasincSalteri+0x60>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a07      	ldr	r2, [pc, #28]	; (8004f58 <checkBasincSalteri+0x64>)
 8004f3a:	6013      	str	r3, [r2, #0]
					basincVar=0;
 8004f3c:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <checkBasincSalteri+0x58>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
}
 8004f42:	bf00      	nop
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000a33 	.word	0x20000a33
 8004f4c:	20000a2f 	.word	0x20000a2f
 8004f50:	40011000 	.word	0x40011000
 8004f54:	20000a08 	.word	0x20000a08
 8004f58:	20000a20 	.word	0x20000a20

08004f5c <checkBasGonder>:

void checkBasGonder() {
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004f60:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <checkBasGonder+0x74>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d10b      	bne.n	8004f80 <checkBasGonder+0x24>
 8004f68:	4b1a      	ldr	r3, [pc, #104]	; (8004fd4 <checkBasGonder+0x78>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <checkBasGonder+0x24>
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <checkBasGonder+0x7c>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <checkBasGonder+0x24>
				basgondercalisyukari=1;
 8004f78:	4b18      	ldr	r3, [pc, #96]	; (8004fdc <checkBasGonder+0x80>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e009      	b.n	8004f94 <checkBasGonder+0x38>
			} else if(yukarimotorcalisiyor==0) {
 8004f80:	4b14      	ldr	r3, [pc, #80]	; (8004fd4 <checkBasGonder+0x78>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	f083 0301 	eor.w	r3, r3, #1
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <checkBasGonder+0x38>
				basgondercalisyukari=0;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <checkBasGonder+0x80>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	701a      	strb	r2, [r3, #0]
			}

			if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <checkBasGonder+0x74>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d10b      	bne.n	8004fb4 <checkBasGonder+0x58>
 8004f9c:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <checkBasGonder+0x84>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <checkBasGonder+0x58>
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <checkBasGonder+0x7c>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d103      	bne.n	8004fb4 <checkBasGonder+0x58>
				basgondercalisasagi=1;
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <checkBasGonder+0x88>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
			} else if(asagivalfcalisiyor==0) {
				basgondercalisasagi=0;
			}
}
 8004fb2:	e009      	b.n	8004fc8 <checkBasGonder+0x6c>
			} else if(asagivalfcalisiyor==0) {
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <checkBasGonder+0x84>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f083 0301 	eor.w	r3, r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <checkBasGonder+0x6c>
				basgondercalisasagi=0;
 8004fc2:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <checkBasGonder+0x88>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr
 8004fd0:	20000a2d 	.word	0x20000a2d
 8004fd4:	20000a60 	.word	0x20000a60
 8004fd8:	20000a3b 	.word	0x20000a3b
 8004fdc:	20000a67 	.word	0x20000a67
 8004fe0:	20000a63 	.word	0x20000a63
 8004fe4:	20000a68 	.word	0x20000a68

08004fe8 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004fec:	4b24      	ldr	r3, [pc, #144]	; (8005080 <checkKapiSecimleri+0x98>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <checkKapiSecimleri+0x12>
				kapiSivicVar=1;
 8004ff4:	4b23      	ldr	r3, [pc, #140]	; (8005084 <checkKapiSecimleri+0x9c>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	701a      	strb	r2, [r3, #0]
			}

			if(kapiSecimleri==1) {
 8004ffa:	4b21      	ldr	r3, [pc, #132]	; (8005080 <checkKapiSecimleri+0x98>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d10e      	bne.n	8005020 <checkKapiSecimleri+0x38>
				if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005006:	4820      	ldr	r0, [pc, #128]	; (8005088 <checkKapiSecimleri+0xa0>)
 8005008:	f003 fab6 	bl	8008578 <HAL_GPIO_ReadPin>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d103      	bne.n	800501a <checkKapiSecimleri+0x32>
					kapiSivicVar=1;
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <checkKapiSecimleri+0x9c>)
 8005014:	2201      	movs	r2, #1
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	e002      	b.n	8005020 <checkKapiSecimleri+0x38>
				} else {
					kapiSivicVar=0;
 800501a:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <checkKapiSecimleri+0x9c>)
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
				}
			}

			if(kapiSecimleri==2){
 8005020:	4b17      	ldr	r3, [pc, #92]	; (8005080 <checkKapiSecimleri+0x98>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d10e      	bne.n	8005046 <checkKapiSecimleri+0x5e>
				if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8005028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800502c:	4816      	ldr	r0, [pc, #88]	; (8005088 <checkKapiSecimleri+0xa0>)
 800502e:	f003 faa3 	bl	8008578 <HAL_GPIO_ReadPin>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d103      	bne.n	8005040 <checkKapiSecimleri+0x58>
					kapiSivicVar=1;
 8005038:	4b12      	ldr	r3, [pc, #72]	; (8005084 <checkKapiSecimleri+0x9c>)
 800503a:	2201      	movs	r2, #1
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	e002      	b.n	8005046 <checkKapiSecimleri+0x5e>
				} else {
					kapiSivicVar=0;
 8005040:	4b10      	ldr	r3, [pc, #64]	; (8005084 <checkKapiSecimleri+0x9c>)
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
				}
			}

			if(kapiSecimleri==3) {
 8005046:	4b0e      	ldr	r3, [pc, #56]	; (8005080 <checkKapiSecimleri+0x98>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d116      	bne.n	800507c <checkKapiSecimleri+0x94>
				if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 800504e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005052:	480d      	ldr	r0, [pc, #52]	; (8005088 <checkKapiSecimleri+0xa0>)
 8005054:	f003 fa90 	bl	8008578 <HAL_GPIO_ReadPin>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <checkKapiSecimleri+0x8e>
 800505e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005062:	4809      	ldr	r0, [pc, #36]	; (8005088 <checkKapiSecimleri+0xa0>)
 8005064:	f003 fa88 	bl	8008578 <HAL_GPIO_ReadPin>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <checkKapiSecimleri+0x8e>
					kapiSivicVar=1;
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <checkKapiSecimleri+0x9c>)
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
				} else {
					kapiSivicVar=0;
				}
			}
}
 8005074:	e002      	b.n	800507c <checkKapiSecimleri+0x94>
					kapiSivicVar=0;
 8005076:	4b03      	ldr	r3, [pc, #12]	; (8005084 <checkKapiSecimleri+0x9c>)
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]
}
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20000a34 	.word	0x20000a34
 8005084:	20000a7e 	.word	0x20000a7e
 8005088:	40010800 	.word	0x40010800

0800508c <checkAktifCalisma>:

void checkAktifCalisma() {
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005090:	4b62      	ldr	r3, [pc, #392]	; (800521c <checkAktifCalisma+0x190>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f041 8332 	bne.w	80066fe <checkAktifCalisma+0x1672>
 800509a:	4b61      	ldr	r3, [pc, #388]	; (8005220 <checkAktifCalisma+0x194>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f041 832d 	bne.w	80066fe <checkAktifCalisma+0x1672>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80050a4:	4b5f      	ldr	r3, [pc, #380]	; (8005224 <checkAktifCalisma+0x198>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d11a      	bne.n	80050e2 <checkAktifCalisma+0x56>
 80050ac:	4b5e      	ldr	r3, [pc, #376]	; (8005228 <checkAktifCalisma+0x19c>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d116      	bne.n	80050e2 <checkAktifCalisma+0x56>
 80050b4:	4b5d      	ldr	r3, [pc, #372]	; (800522c <checkAktifCalisma+0x1a0>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <checkAktifCalisma+0x46>
 80050bc:	4b5c      	ldr	r3, [pc, #368]	; (8005230 <checkAktifCalisma+0x1a4>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	f083 0301 	eor.w	r3, r3, #1
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <checkAktifCalisma+0x46>
 80050ca:	4b5a      	ldr	r3, [pc, #360]	; (8005234 <checkAktifCalisma+0x1a8>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d007      	beq.n	80050e2 <checkAktifCalisma+0x56>
 80050d2:	4b59      	ldr	r3, [pc, #356]	; (8005238 <checkAktifCalisma+0x1ac>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d018      	beq.n	800510c <checkAktifCalisma+0x80>
 80050da:	4b58      	ldr	r3, [pc, #352]	; (800523c <checkAktifCalisma+0x1b0>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d114      	bne.n	800510c <checkAktifCalisma+0x80>
 80050e2:	4b57      	ldr	r3, [pc, #348]	; (8005240 <checkAktifCalisma+0x1b4>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <checkAktifCalisma+0x80>
 80050ea:	4b56      	ldr	r3, [pc, #344]	; (8005244 <checkAktifCalisma+0x1b8>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00c      	beq.n	800510c <checkAktifCalisma+0x80>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80050f2:	2201      	movs	r2, #1
 80050f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050f8:	4853      	ldr	r0, [pc, #332]	; (8005248 <checkAktifCalisma+0x1bc>)
 80050fa:	f003 fa54 	bl	80085a6 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 80050fe:	4b53      	ldr	r3, [pc, #332]	; (800524c <checkAktifCalisma+0x1c0>)
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8005104:	4b52      	ldr	r3, [pc, #328]	; (8005250 <checkAktifCalisma+0x1c4>)
 8005106:	2201      	movs	r2, #1
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e008      	b.n	800511e <checkAktifCalisma+0x92>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800510c:	2200      	movs	r2, #0
 800510e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005112:	484d      	ldr	r0, [pc, #308]	; (8005248 <checkAktifCalisma+0x1bc>)
 8005114:	f003 fa47 	bl	80085a6 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8005118:	4b4c      	ldr	r3, [pc, #304]	; (800524c <checkAktifCalisma+0x1c0>)
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && (stopVar) && (kapiSivicVar)																			/********* motor calısması ***********/
 800511e:	4b40      	ldr	r3, [pc, #256]	; (8005220 <checkAktifCalisma+0x194>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d160      	bne.n	80051e8 <checkAktifCalisma+0x15c>
 8005126:	4b46      	ldr	r3, [pc, #280]	; (8005240 <checkAktifCalisma+0x1b4>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d05c      	beq.n	80051e8 <checkAktifCalisma+0x15c>
 800512e:	4b45      	ldr	r3, [pc, #276]	; (8005244 <checkAktifCalisma+0x1b8>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d058      	beq.n	80051e8 <checkAktifCalisma+0x15c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8005136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800513a:	4843      	ldr	r0, [pc, #268]	; (8005248 <checkAktifCalisma+0x1bc>)
 800513c:	f003 fa1c 	bl	8008578 <HAL_GPIO_ReadPin>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <checkAktifCalisma+0xc2>
 8005146:	4b43      	ldr	r3, [pc, #268]	; (8005254 <checkAktifCalisma+0x1c8>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d04c      	beq.n	80051e8 <checkAktifCalisma+0x15c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800514e:	2102      	movs	r1, #2
 8005150:	4841      	ldr	r0, [pc, #260]	; (8005258 <checkAktifCalisma+0x1cc>)
 8005152:	f003 fa11 	bl	8008578 <HAL_GPIO_ReadPin>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d145      	bne.n	80051e8 <checkAktifCalisma+0x15c>
							&& (basincVar)
 800515c:	4b3f      	ldr	r3, [pc, #252]	; (800525c <checkAktifCalisma+0x1d0>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d041      	beq.n	80051e8 <checkAktifCalisma+0x15c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8005164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005168:	4837      	ldr	r0, [pc, #220]	; (8005248 <checkAktifCalisma+0x1bc>)
 800516a:	f003 fa05 	bl	8008578 <HAL_GPIO_ReadPin>
 800516e:	4603      	mov	r3, r0
 8005170:	2b01      	cmp	r3, #1
 8005172:	d10e      	bne.n	8005192 <checkAktifCalisma+0x106>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005178:	4833      	ldr	r0, [pc, #204]	; (8005248 <checkAktifCalisma+0x1bc>)
 800517a:	f003 f9fd 	bl	8008578 <HAL_GPIO_ReadPin>
 800517e:	4603      	mov	r3, r0
 8005180:	2b01      	cmp	r3, #1
 8005182:	d106      	bne.n	8005192 <checkAktifCalisma+0x106>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005184:	2140      	movs	r1, #64	; 0x40
 8005186:	4834      	ldr	r0, [pc, #208]	; (8005258 <checkAktifCalisma+0x1cc>)
 8005188:	f003 f9f6 	bl	8008578 <HAL_GPIO_ReadPin>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d003      	beq.n	800519a <checkAktifCalisma+0x10e>
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <checkAktifCalisma+0x198>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d026      	beq.n	80051e8 <checkAktifCalisma+0x15c>
							&& (asagivalfcalisiyor==0)
 800519a:	4b24      	ldr	r3, [pc, #144]	; (800522c <checkAktifCalisma+0x1a0>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	f083 0301 	eor.w	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01f      	beq.n	80051e8 <checkAktifCalisma+0x15c>
							&& (devmotoryukaricalisiyor==0)
 80051a8:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <checkAktifCalisma+0x19c>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f083 0301 	eor.w	r3, r3, #1
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d018      	beq.n	80051e8 <checkAktifCalisma+0x15c>
							&& (devmotorasagicalisiyor==0)
 80051b6:	4b20      	ldr	r3, [pc, #128]	; (8005238 <checkAktifCalisma+0x1ac>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	f083 0301 	eor.w	r3, r3, #1
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d011      	beq.n	80051e8 <checkAktifCalisma+0x15c>
							&&(devyukarivalfcalisiyor==0)
 80051c4:	4b26      	ldr	r3, [pc, #152]	; (8005260 <checkAktifCalisma+0x1d4>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	f083 0301 	eor.w	r3, r3, #1
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <checkAktifCalisma+0x15c>
							&&(devasagivalfcalisiyor==0)) {
 80051d2:	4b24      	ldr	r3, [pc, #144]	; (8005264 <checkAktifCalisma+0x1d8>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	f083 0301 	eor.w	r3, r3, #1
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <checkAktifCalisma+0x15c>
					yukarimotorcalisiyor=1;
 80051e0:	4b10      	ldr	r3, [pc, #64]	; (8005224 <checkAktifCalisma+0x198>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e002      	b.n	80051ee <checkAktifCalisma+0x162>
				} else {
					yukarimotorcalisiyor=0;
 80051e8:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <checkAktifCalisma+0x198>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <checkAktifCalisma+0x198>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d03a      	beq.n	800526c <checkAktifCalisma+0x1e0>
 80051f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051fa:	4817      	ldr	r0, [pc, #92]	; (8005258 <checkAktifCalisma+0x1cc>)
 80051fc:	f003 f9bc 	bl	8008578 <HAL_GPIO_ReadPin>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d132      	bne.n	800526c <checkAktifCalisma+0x1e0>
 8005206:	4b18      	ldr	r3, [pc, #96]	; (8005268 <checkAktifCalisma+0x1dc>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d02e      	beq.n	800526c <checkAktifCalisma+0x1e0>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800520e:	2201      	movs	r2, #1
 8005210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005214:	480c      	ldr	r0, [pc, #48]	; (8005248 <checkAktifCalisma+0x1bc>)
 8005216:	f003 f9c6 	bl	80085a6 <HAL_GPIO_WritePin>
 800521a:	e02d      	b.n	8005278 <checkAktifCalisma+0x1ec>
 800521c:	20000a4a 	.word	0x20000a4a
 8005220:	20000a49 	.word	0x20000a49
 8005224:	20000a60 	.word	0x20000a60
 8005228:	20000a61 	.word	0x20000a61
 800522c:	20000a63 	.word	0x20000a63
 8005230:	20000a5b 	.word	0x20000a5b
 8005234:	20000a3f 	.word	0x20000a3f
 8005238:	20000a62 	.word	0x20000a62
 800523c:	20000a3e 	.word	0x20000a3e
 8005240:	20000a7d 	.word	0x20000a7d
 8005244:	20000a7e 	.word	0x20000a7e
 8005248:	40010c00 	.word	0x40010c00
 800524c:	20000a7f 	.word	0x20000a7f
 8005250:	20000a6a 	.word	0x20000a6a
 8005254:	20000a67 	.word	0x20000a67
 8005258:	40011000 	.word	0x40011000
 800525c:	20000a2f 	.word	0x20000a2f
 8005260:	20000a65 	.word	0x20000a65
 8005264:	20000a66 	.word	0x20000a66
 8005268:	20000a3a 	.word	0x20000a3a
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800526c:	2200      	movs	r2, #0
 800526e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005272:	4860      	ldr	r0, [pc, #384]	; (80053f4 <checkAktifCalisma+0x368>)
 8005274:	f003 f997 	bl	80085a6 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005278:	4b5f      	ldr	r3, [pc, #380]	; (80053f8 <checkAktifCalisma+0x36c>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d013      	beq.n	80052a8 <checkAktifCalisma+0x21c>
 8005280:	4b5e      	ldr	r3, [pc, #376]	; (80053fc <checkAktifCalisma+0x370>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d007      	beq.n	8005298 <checkAktifCalisma+0x20c>
 8005288:	4b5c      	ldr	r3, [pc, #368]	; (80053fc <checkAktifCalisma+0x370>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d003      	beq.n	8005298 <checkAktifCalisma+0x20c>
 8005290:	4b5b      	ldr	r3, [pc, #364]	; (8005400 <checkAktifCalisma+0x374>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d107      	bne.n	80052a8 <checkAktifCalisma+0x21c>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005298:	2201      	movs	r2, #1
 800529a:	2104      	movs	r1, #4
 800529c:	4855      	ldr	r0, [pc, #340]	; (80053f4 <checkAktifCalisma+0x368>)
 800529e:	f003 f982 	bl	80085a6 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80052a2:	4b58      	ldr	r3, [pc, #352]	; (8005404 <checkAktifCalisma+0x378>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80052a8:	4b56      	ldr	r3, [pc, #344]	; (8005404 <checkAktifCalisma+0x378>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02f      	beq.n	8005310 <checkAktifCalisma+0x284>
 80052b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052b4:	484f      	ldr	r0, [pc, #316]	; (80053f4 <checkAktifCalisma+0x368>)
 80052b6:	f003 f95f 	bl	8008578 <HAL_GPIO_ReadPin>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d106      	bne.n	80052ce <checkAktifCalisma+0x242>
 80052c0:	4b51      	ldr	r3, [pc, #324]	; (8005408 <checkAktifCalisma+0x37c>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	f083 0301 	eor.w	r3, r3, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <checkAktifCalisma+0x250>
 80052ce:	2102      	movs	r1, #2
 80052d0:	484e      	ldr	r0, [pc, #312]	; (800540c <checkAktifCalisma+0x380>)
 80052d2:	f003 f951 	bl	8008578 <HAL_GPIO_ReadPin>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d119      	bne.n	8005310 <checkAktifCalisma+0x284>
 80052dc:	4b4c      	ldr	r3, [pc, #304]	; (8005410 <checkAktifCalisma+0x384>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d015      	beq.n	8005310 <checkAktifCalisma+0x284>
 80052e4:	4b4b      	ldr	r3, [pc, #300]	; (8005414 <checkAktifCalisma+0x388>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d011      	beq.n	8005310 <checkAktifCalisma+0x284>
 80052ec:	4b4a      	ldr	r3, [pc, #296]	; (8005418 <checkAktifCalisma+0x38c>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00d      	beq.n	8005310 <checkAktifCalisma+0x284>
 80052f4:	4b49      	ldr	r3, [pc, #292]	; (800541c <checkAktifCalisma+0x390>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f083 0301 	eor.w	r3, r3, #1
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d006      	beq.n	8005310 <checkAktifCalisma+0x284>
					timer2=millis;
 8005302:	4b47      	ldr	r3, [pc, #284]	; (8005420 <checkAktifCalisma+0x394>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a47      	ldr	r2, [pc, #284]	; (8005424 <checkAktifCalisma+0x398>)
 8005308:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800530a:	4b44      	ldr	r3, [pc, #272]	; (800541c <checkAktifCalisma+0x390>)
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005310:	4b43      	ldr	r3, [pc, #268]	; (8005420 <checkAktifCalisma+0x394>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4b43      	ldr	r3, [pc, #268]	; (8005424 <checkAktifCalisma+0x398>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	4a43      	ldr	r2, [pc, #268]	; (8005428 <checkAktifCalisma+0x39c>)
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	4293      	cmp	r3, r2
 8005320:	d303      	bcc.n	800532a <checkAktifCalisma+0x29e>
 8005322:	4b3e      	ldr	r3, [pc, #248]	; (800541c <checkAktifCalisma+0x390>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d111      	bne.n	800534e <checkAktifCalisma+0x2c2>
 800532a:	4b39      	ldr	r3, [pc, #228]	; (8005410 <checkAktifCalisma+0x384>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	f083 0301 	eor.w	r3, r3, #1
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <checkAktifCalisma+0x2c2>
 8005338:	4b36      	ldr	r3, [pc, #216]	; (8005414 <checkAktifCalisma+0x388>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <checkAktifCalisma+0x2c2>
 8005346:	4b34      	ldr	r3, [pc, #208]	; (8005418 <checkAktifCalisma+0x38c>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <checkAktifCalisma+0x2d8>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800534e:	2200      	movs	r2, #0
 8005350:	2104      	movs	r1, #4
 8005352:	4828      	ldr	r0, [pc, #160]	; (80053f4 <checkAktifCalisma+0x368>)
 8005354:	f003 f927 	bl	80085a6 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8005358:	4b2a      	ldr	r3, [pc, #168]	; (8005404 <checkAktifCalisma+0x378>)
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 800535e:	4b2f      	ldr	r3, [pc, #188]	; (800541c <checkAktifCalisma+0x390>)
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 8005364:	4b31      	ldr	r3, [pc, #196]	; (800542c <checkAktifCalisma+0x3a0>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <checkAktifCalisma+0x2e6>
					cerceveVar=1;
 800536c:	4b30      	ldr	r3, [pc, #192]	; (8005430 <checkAktifCalisma+0x3a4>)
 800536e:	2201      	movs	r2, #1
 8005370:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005372:	4b2e      	ldr	r3, [pc, #184]	; (800542c <checkAktifCalisma+0x3a0>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d116      	bne.n	80053a8 <checkAktifCalisma+0x31c>
 800537a:	4b2e      	ldr	r3, [pc, #184]	; (8005434 <checkAktifCalisma+0x3a8>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d112      	bne.n	80053a8 <checkAktifCalisma+0x31c>
 8005382:	2101      	movs	r1, #1
 8005384:	4821      	ldr	r0, [pc, #132]	; (800540c <checkAktifCalisma+0x380>)
 8005386:	f003 f8f7 	bl	8008578 <HAL_GPIO_ReadPin>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <checkAktifCalisma+0x31c>
 8005390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005394:	4817      	ldr	r0, [pc, #92]	; (80053f4 <checkAktifCalisma+0x368>)
 8005396:	f003 f8ef 	bl	8008578 <HAL_GPIO_ReadPin>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d103      	bne.n	80053a8 <checkAktifCalisma+0x31c>
					cerceveVar=1;
 80053a0:	4b23      	ldr	r3, [pc, #140]	; (8005430 <checkAktifCalisma+0x3a4>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	e011      	b.n	80053cc <checkAktifCalisma+0x340>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80053a8:	4b20      	ldr	r3, [pc, #128]	; (800542c <checkAktifCalisma+0x3a0>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d10d      	bne.n	80053cc <checkAktifCalisma+0x340>
 80053b0:	2101      	movs	r1, #1
 80053b2:	4816      	ldr	r0, [pc, #88]	; (800540c <checkAktifCalisma+0x380>)
 80053b4:	f003 f8e0 	bl	8008578 <HAL_GPIO_ReadPin>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d106      	bne.n	80053cc <checkAktifCalisma+0x340>
 80053be:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <checkAktifCalisma+0x3a8>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d102      	bne.n	80053cc <checkAktifCalisma+0x340>
					cerceveVar=0;
 80053c6:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <checkAktifCalisma+0x3a4>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80053cc:	4b17      	ldr	r3, [pc, #92]	; (800542c <checkAktifCalisma+0x3a0>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d134      	bne.n	800543e <checkAktifCalisma+0x3b2>
 80053d4:	4b17      	ldr	r3, [pc, #92]	; (8005434 <checkAktifCalisma+0x3a8>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d130      	bne.n	800543e <checkAktifCalisma+0x3b2>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80053dc:	2101      	movs	r1, #1
 80053de:	480b      	ldr	r0, [pc, #44]	; (800540c <checkAktifCalisma+0x380>)
 80053e0:	f003 f8ca 	bl	8008578 <HAL_GPIO_ReadPin>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d126      	bne.n	8005438 <checkAktifCalisma+0x3ac>
						cerceveVar=1;
 80053ea:	4b11      	ldr	r3, [pc, #68]	; (8005430 <checkAktifCalisma+0x3a4>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	e025      	b.n	800543e <checkAktifCalisma+0x3b2>
 80053f2:	bf00      	nop
 80053f4:	40010c00 	.word	0x40010c00
 80053f8:	20000a60 	.word	0x20000a60
 80053fc:	20000a3b 	.word	0x20000a3b
 8005400:	20000a3f 	.word	0x20000a3f
 8005404:	20000a64 	.word	0x20000a64
 8005408:	20000a67 	.word	0x20000a67
 800540c:	40011000 	.word	0x40011000
 8005410:	20000a7d 	.word	0x20000a7d
 8005414:	20000a7e 	.word	0x20000a7e
 8005418:	20000a2f 	.word	0x20000a2f
 800541c:	20000a5c 	.word	0x20000a5c
 8005420:	20000a08 	.word	0x20000a08
 8005424:	20000a14 	.word	0x20000a14
 8005428:	20000a40 	.word	0x20000a40
 800542c:	20000a30 	.word	0x20000a30
 8005430:	20000a82 	.word	0x20000a82
 8005434:	20000a2d 	.word	0x20000a2d
					} else {
						cerceveVar=0;
 8005438:	4b7f      	ldr	r3, [pc, #508]	; (8005638 <checkAktifCalisma+0x5ac>)
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800543e:	4b7f      	ldr	r3, [pc, #508]	; (800563c <checkAktifCalisma+0x5b0>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d17c      	bne.n	8005540 <checkAktifCalisma+0x4b4>
 8005446:	4b7e      	ldr	r3, [pc, #504]	; (8005640 <checkAktifCalisma+0x5b4>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d078      	beq.n	8005540 <checkAktifCalisma+0x4b4>
 800544e:	4b7d      	ldr	r3, [pc, #500]	; (8005644 <checkAktifCalisma+0x5b8>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d074      	beq.n	8005540 <checkAktifCalisma+0x4b4>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800545a:	487b      	ldr	r0, [pc, #492]	; (8005648 <checkAktifCalisma+0x5bc>)
 800545c:	f003 f88c 	bl	8008578 <HAL_GPIO_ReadPin>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <checkAktifCalisma+0x3e2>
 8005466:	4b79      	ldr	r3, [pc, #484]	; (800564c <checkAktifCalisma+0x5c0>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d068      	beq.n	8005540 <checkAktifCalisma+0x4b4>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800546e:	4b72      	ldr	r3, [pc, #456]	; (8005638 <checkAktifCalisma+0x5ac>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d064      	beq.n	8005540 <checkAktifCalisma+0x4b4>
 8005476:	4b76      	ldr	r3, [pc, #472]	; (8005650 <checkAktifCalisma+0x5c4>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f083 0301 	eor.w	r3, r3, #1
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d05d      	beq.n	8005540 <checkAktifCalisma+0x4b4>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005484:	2104      	movs	r1, #4
 8005486:	4873      	ldr	r0, [pc, #460]	; (8005654 <checkAktifCalisma+0x5c8>)
 8005488:	f003 f876 	bl	8008578 <HAL_GPIO_ReadPin>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <checkAktifCalisma+0x40e>
 8005492:	4b71      	ldr	r3, [pc, #452]	; (8005658 <checkAktifCalisma+0x5cc>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d152      	bne.n	8005540 <checkAktifCalisma+0x4b4>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800549a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800549e:	486a      	ldr	r0, [pc, #424]	; (8005648 <checkAktifCalisma+0x5bc>)
 80054a0:	f003 f86a 	bl	8008578 <HAL_GPIO_ReadPin>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d10e      	bne.n	80054c8 <checkAktifCalisma+0x43c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80054aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054ae:	4866      	ldr	r0, [pc, #408]	; (8005648 <checkAktifCalisma+0x5bc>)
 80054b0:	f003 f862 	bl	8008578 <HAL_GPIO_ReadPin>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d106      	bne.n	80054c8 <checkAktifCalisma+0x43c>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80054ba:	2140      	movs	r1, #64	; 0x40
 80054bc:	4865      	ldr	r0, [pc, #404]	; (8005654 <checkAktifCalisma+0x5c8>)
 80054be:	f003 f85b 	bl	8008578 <HAL_GPIO_ReadPin>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d003      	beq.n	80054d0 <checkAktifCalisma+0x444>
 80054c8:	4b64      	ldr	r3, [pc, #400]	; (800565c <checkAktifCalisma+0x5d0>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d037      	beq.n	8005540 <checkAktifCalisma+0x4b4>
						&& (yukarimotorcalisiyor==0)
 80054d0:	4b63      	ldr	r3, [pc, #396]	; (8005660 <checkAktifCalisma+0x5d4>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f083 0301 	eor.w	r3, r3, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d030      	beq.n	8005540 <checkAktifCalisma+0x4b4>
						&& (yukarivalfcalisiyor==0)
 80054de:	4b61      	ldr	r3, [pc, #388]	; (8005664 <checkAktifCalisma+0x5d8>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	f083 0301 	eor.w	r3, r3, #1
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d029      	beq.n	8005540 <checkAktifCalisma+0x4b4>
				  	  	&& (devmotoryukaricalisiyor==0)
 80054ec:	4b5e      	ldr	r3, [pc, #376]	; (8005668 <checkAktifCalisma+0x5dc>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	f083 0301 	eor.w	r3, r3, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d022      	beq.n	8005540 <checkAktifCalisma+0x4b4>
						&& (devmotorasagicalisiyor==0)
 80054fa:	4b5c      	ldr	r3, [pc, #368]	; (800566c <checkAktifCalisma+0x5e0>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f083 0301 	eor.w	r3, r3, #1
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01b      	beq.n	8005540 <checkAktifCalisma+0x4b4>
						&& (devyukarivalfcalisiyor==0)
 8005508:	4b59      	ldr	r3, [pc, #356]	; (8005670 <checkAktifCalisma+0x5e4>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f083 0301 	eor.w	r3, r3, #1
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d014      	beq.n	8005540 <checkAktifCalisma+0x4b4>
						&& (devasagivalfcalisiyor==0)) {
 8005516:	4b57      	ldr	r3, [pc, #348]	; (8005674 <checkAktifCalisma+0x5e8>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	f083 0301 	eor.w	r3, r3, #1
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <checkAktifCalisma+0x4b4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005524:	2201      	movs	r2, #1
 8005526:	2102      	movs	r1, #2
 8005528:	4847      	ldr	r0, [pc, #284]	; (8005648 <checkAktifCalisma+0x5bc>)
 800552a:	f003 f83c 	bl	80085a6 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800552e:	4b4b      	ldr	r3, [pc, #300]	; (800565c <checkAktifCalisma+0x5d0>)
 8005530:	2201      	movs	r2, #1
 8005532:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8005534:	4b50      	ldr	r3, [pc, #320]	; (8005678 <checkAktifCalisma+0x5ec>)
 8005536:	2201      	movs	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 800553a:	4b50      	ldr	r3, [pc, #320]	; (800567c <checkAktifCalisma+0x5f0>)
 800553c:	2201      	movs	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005540:	4b46      	ldr	r3, [pc, #280]	; (800565c <checkAktifCalisma+0x5d0>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d033      	beq.n	80055b0 <checkAktifCalisma+0x524>
 8005548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800554c:	483e      	ldr	r0, [pc, #248]	; (8005648 <checkAktifCalisma+0x5bc>)
 800554e:	f003 f813 	bl	8008578 <HAL_GPIO_ReadPin>
 8005552:	4603      	mov	r3, r0
 8005554:	2b01      	cmp	r3, #1
 8005556:	d106      	bne.n	8005566 <checkAktifCalisma+0x4da>
 8005558:	4b3c      	ldr	r3, [pc, #240]	; (800564c <checkAktifCalisma+0x5c0>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f083 0301 	eor.w	r3, r3, #1
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <checkAktifCalisma+0x4f0>
 8005566:	2104      	movs	r1, #4
 8005568:	483a      	ldr	r0, [pc, #232]	; (8005654 <checkAktifCalisma+0x5c8>)
 800556a:	f003 f805 	bl	8008578 <HAL_GPIO_ReadPin>
 800556e:	4603      	mov	r3, r0
 8005570:	2b01      	cmp	r3, #1
 8005572:	d11d      	bne.n	80055b0 <checkAktifCalisma+0x524>
 8005574:	4b38      	ldr	r3, [pc, #224]	; (8005658 <checkAktifCalisma+0x5cc>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d019      	beq.n	80055b0 <checkAktifCalisma+0x524>
 800557c:	4b30      	ldr	r3, [pc, #192]	; (8005640 <checkAktifCalisma+0x5b4>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d015      	beq.n	80055b0 <checkAktifCalisma+0x524>
 8005584:	4b2f      	ldr	r3, [pc, #188]	; (8005644 <checkAktifCalisma+0x5b8>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <checkAktifCalisma+0x524>
 800558c:	4b2a      	ldr	r3, [pc, #168]	; (8005638 <checkAktifCalisma+0x5ac>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00d      	beq.n	80055b0 <checkAktifCalisma+0x524>
 8005594:	4b3a      	ldr	r3, [pc, #232]	; (8005680 <checkAktifCalisma+0x5f4>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f083 0301 	eor.w	r3, r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <checkAktifCalisma+0x524>
					timer2=millis;
 80055a2:	4b38      	ldr	r3, [pc, #224]	; (8005684 <checkAktifCalisma+0x5f8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a38      	ldr	r2, [pc, #224]	; (8005688 <checkAktifCalisma+0x5fc>)
 80055a8:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80055aa:	4b35      	ldr	r3, [pc, #212]	; (8005680 <checkAktifCalisma+0x5f4>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80055b0:	4b34      	ldr	r3, [pc, #208]	; (8005684 <checkAktifCalisma+0x5f8>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4b34      	ldr	r3, [pc, #208]	; (8005688 <checkAktifCalisma+0x5fc>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	4a34      	ldr	r2, [pc, #208]	; (800568c <checkAktifCalisma+0x600>)
 80055bc:	7812      	ldrb	r2, [r2, #0]
 80055be:	4293      	cmp	r3, r2
 80055c0:	d303      	bcc.n	80055ca <checkAktifCalisma+0x53e>
 80055c2:	4b2f      	ldr	r3, [pc, #188]	; (8005680 <checkAktifCalisma+0x5f4>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d114      	bne.n	80055f4 <checkAktifCalisma+0x568>
 80055ca:	4b1d      	ldr	r3, [pc, #116]	; (8005640 <checkAktifCalisma+0x5b4>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f083 0301 	eor.w	r3, r3, #1
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10d      	bne.n	80055f4 <checkAktifCalisma+0x568>
 80055d8:	4b1a      	ldr	r3, [pc, #104]	; (8005644 <checkAktifCalisma+0x5b8>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f083 0301 	eor.w	r3, r3, #1
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <checkAktifCalisma+0x568>
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <checkAktifCalisma+0x5ac>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	f083 0301 	eor.w	r3, r3, #1
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <checkAktifCalisma+0x57e>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80055f4:	2200      	movs	r2, #0
 80055f6:	2102      	movs	r1, #2
 80055f8:	4813      	ldr	r0, [pc, #76]	; (8005648 <checkAktifCalisma+0x5bc>)
 80055fa:	f002 ffd4 	bl	80085a6 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80055fe:	4b17      	ldr	r3, [pc, #92]	; (800565c <checkAktifCalisma+0x5d0>)
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005604:	4b1e      	ldr	r3, [pc, #120]	; (8005680 <checkAktifCalisma+0x5f4>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800560a:	4b14      	ldr	r3, [pc, #80]	; (800565c <checkAktifCalisma+0x5d0>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d040      	beq.n	8005694 <checkAktifCalisma+0x608>
 8005612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005616:	480f      	ldr	r0, [pc, #60]	; (8005654 <checkAktifCalisma+0x5c8>)
 8005618:	f002 ffae 	bl	8008578 <HAL_GPIO_ReadPin>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d138      	bne.n	8005694 <checkAktifCalisma+0x608>
 8005622:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <checkAktifCalisma+0x604>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d034      	beq.n	8005694 <checkAktifCalisma+0x608>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800562a:	2201      	movs	r2, #1
 800562c:	2101      	movs	r1, #1
 800562e:	4806      	ldr	r0, [pc, #24]	; (8005648 <checkAktifCalisma+0x5bc>)
 8005630:	f002 ffb9 	bl	80085a6 <HAL_GPIO_WritePin>
 8005634:	e033      	b.n	800569e <checkAktifCalisma+0x612>
 8005636:	bf00      	nop
 8005638:	20000a82 	.word	0x20000a82
 800563c:	20000a49 	.word	0x20000a49
 8005640:	20000a7d 	.word	0x20000a7d
 8005644:	20000a7e 	.word	0x20000a7e
 8005648:	40010c00 	.word	0x40010c00
 800564c:	20000a68 	.word	0x20000a68
 8005650:	20000a7c 	.word	0x20000a7c
 8005654:	40011000 	.word	0x40011000
 8005658:	20000a32 	.word	0x20000a32
 800565c:	20000a63 	.word	0x20000a63
 8005660:	20000a60 	.word	0x20000a60
 8005664:	20000a64 	.word	0x20000a64
 8005668:	20000a61 	.word	0x20000a61
 800566c:	20000a62 	.word	0x20000a62
 8005670:	20000a65 	.word	0x20000a65
 8005674:	20000a66 	.word	0x20000a66
 8005678:	20000a6b 	.word	0x20000a6b
 800567c:	20000a8c 	.word	0x20000a8c
 8005680:	20000a5b 	.word	0x20000a5b
 8005684:	20000a08 	.word	0x20000a08
 8005688:	20000a14 	.word	0x20000a14
 800568c:	20000a41 	.word	0x20000a41
 8005690:	20000a31 	.word	0x20000a31
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005694:	2200      	movs	r2, #0
 8005696:	2101      	movs	r1, #1
 8005698:	4836      	ldr	r0, [pc, #216]	; (8005774 <checkAktifCalisma+0x6e8>)
 800569a:	f002 ff84 	bl	80085a6 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 800569e:	4b36      	ldr	r3, [pc, #216]	; (8005778 <checkAktifCalisma+0x6ec>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 8080 	bne.w	80057a8 <checkAktifCalisma+0x71c>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80056a8:	4b34      	ldr	r3, [pc, #208]	; (800577c <checkAktifCalisma+0x6f0>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d003      	beq.n	80056b8 <checkAktifCalisma+0x62c>
 80056b0:	4b32      	ldr	r3, [pc, #200]	; (800577c <checkAktifCalisma+0x6f0>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d177      	bne.n	80057a8 <checkAktifCalisma+0x71c>
						&& (stopVar) && (kapiSivicVar)
 80056b8:	4b31      	ldr	r3, [pc, #196]	; (8005780 <checkAktifCalisma+0x6f4>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d073      	beq.n	80057a8 <checkAktifCalisma+0x71c>
 80056c0:	4b30      	ldr	r3, [pc, #192]	; (8005784 <checkAktifCalisma+0x6f8>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d06f      	beq.n	80057a8 <checkAktifCalisma+0x71c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80056c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056cc:	4829      	ldr	r0, [pc, #164]	; (8005774 <checkAktifCalisma+0x6e8>)
 80056ce:	f002 ff53 	bl	8008578 <HAL_GPIO_ReadPin>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d167      	bne.n	80057a8 <checkAktifCalisma+0x71c>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80056d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056dc:	482a      	ldr	r0, [pc, #168]	; (8005788 <checkAktifCalisma+0x6fc>)
 80056de:	f002 ff4b 	bl	8008578 <HAL_GPIO_ReadPin>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <checkAktifCalisma+0x664>
 80056e8:	4b28      	ldr	r3, [pc, #160]	; (800578c <checkAktifCalisma+0x700>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d15b      	bne.n	80057a8 <checkAktifCalisma+0x71c>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80056f0:	2140      	movs	r1, #64	; 0x40
 80056f2:	4825      	ldr	r0, [pc, #148]	; (8005788 <checkAktifCalisma+0x6fc>)
 80056f4:	f002 ff40 	bl	8008578 <HAL_GPIO_ReadPin>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d10f      	bne.n	800571e <checkAktifCalisma+0x692>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80056fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005702:	481c      	ldr	r0, [pc, #112]	; (8005774 <checkAktifCalisma+0x6e8>)
 8005704:	f002 ff38 	bl	8008578 <HAL_GPIO_ReadPin>
 8005708:	4603      	mov	r3, r0
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <checkAktifCalisma+0x692>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800570e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005712:	4818      	ldr	r0, [pc, #96]	; (8005774 <checkAktifCalisma+0x6e8>)
 8005714:	f002 ff30 	bl	8008578 <HAL_GPIO_ReadPin>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d003      	beq.n	8005726 <checkAktifCalisma+0x69a>
 800571e:	4b1c      	ldr	r3, [pc, #112]	; (8005790 <checkAktifCalisma+0x704>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d040      	beq.n	80057a8 <checkAktifCalisma+0x71c>
						&& (yukarimotorcalisiyor==0)
 8005726:	4b1b      	ldr	r3, [pc, #108]	; (8005794 <checkAktifCalisma+0x708>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f083 0301 	eor.w	r3, r3, #1
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d039      	beq.n	80057a8 <checkAktifCalisma+0x71c>
						&& (yukarivalfcalisiyor==0)
 8005734:	4b18      	ldr	r3, [pc, #96]	; (8005798 <checkAktifCalisma+0x70c>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	f083 0301 	eor.w	r3, r3, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d032      	beq.n	80057a8 <checkAktifCalisma+0x71c>
						&& (asagivalfcalisiyor==0)
 8005742:	4b16      	ldr	r3, [pc, #88]	; (800579c <checkAktifCalisma+0x710>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	f083 0301 	eor.w	r3, r3, #1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d02b      	beq.n	80057a8 <checkAktifCalisma+0x71c>
						&& (devmotorasagicalisiyor==0)
 8005750:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <checkAktifCalisma+0x714>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f083 0301 	eor.w	r3, r3, #1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d024      	beq.n	80057a8 <checkAktifCalisma+0x71c>
						&&(devasagivalfcalisiyor==0)) {
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <checkAktifCalisma+0x718>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	f083 0301 	eor.w	r3, r3, #1
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01d      	beq.n	80057a8 <checkAktifCalisma+0x71c>

					devmotoryukaricalisiyor=1;
 800576c:	4b08      	ldr	r3, [pc, #32]	; (8005790 <checkAktifCalisma+0x704>)
 800576e:	2201      	movs	r2, #1
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e01c      	b.n	80057ae <checkAktifCalisma+0x722>
 8005774:	40010c00 	.word	0x40010c00
 8005778:	20000a49 	.word	0x20000a49
 800577c:	20000a3b 	.word	0x20000a3b
 8005780:	20000a7d 	.word	0x20000a7d
 8005784:	20000a7e 	.word	0x20000a7e
 8005788:	40011000 	.word	0x40011000
 800578c:	20000a3c 	.word	0x20000a3c
 8005790:	20000a61 	.word	0x20000a61
 8005794:	20000a60 	.word	0x20000a60
 8005798:	20000a64 	.word	0x20000a64
 800579c:	20000a63 	.word	0x20000a63
 80057a0:	20000a62 	.word	0x20000a62
 80057a4:	20000a66 	.word	0x20000a66
				} else {
					devmotoryukaricalisiyor=0;
 80057a8:	4b64      	ldr	r3, [pc, #400]	; (800593c <checkAktifCalisma+0x8b0>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 80057ae:	4b63      	ldr	r3, [pc, #396]	; (800593c <checkAktifCalisma+0x8b0>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d007      	beq.n	80057c6 <checkAktifCalisma+0x73a>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80057b6:	2201      	movs	r2, #1
 80057b8:	2120      	movs	r1, #32
 80057ba:	4861      	ldr	r0, [pc, #388]	; (8005940 <checkAktifCalisma+0x8b4>)
 80057bc:	f002 fef3 	bl	80085a6 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 80057c0:	4b60      	ldr	r3, [pc, #384]	; (8005944 <checkAktifCalisma+0x8b8>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80057c6:	4b5f      	ldr	r3, [pc, #380]	; (8005944 <checkAktifCalisma+0x8b8>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d025      	beq.n	800581a <checkAktifCalisma+0x78e>
 80057ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057d2:	485d      	ldr	r0, [pc, #372]	; (8005948 <checkAktifCalisma+0x8bc>)
 80057d4:	f002 fed0 	bl	8008578 <HAL_GPIO_ReadPin>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d007      	beq.n	80057ee <checkAktifCalisma+0x762>
 80057de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80057e2:	4857      	ldr	r0, [pc, #348]	; (8005940 <checkAktifCalisma+0x8b4>)
 80057e4:	f002 fec8 	bl	8008578 <HAL_GPIO_ReadPin>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d115      	bne.n	800581a <checkAktifCalisma+0x78e>
 80057ee:	4b57      	ldr	r3, [pc, #348]	; (800594c <checkAktifCalisma+0x8c0>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d011      	beq.n	800581a <checkAktifCalisma+0x78e>
 80057f6:	4b56      	ldr	r3, [pc, #344]	; (8005950 <checkAktifCalisma+0x8c4>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00d      	beq.n	800581a <checkAktifCalisma+0x78e>
 80057fe:	4b55      	ldr	r3, [pc, #340]	; (8005954 <checkAktifCalisma+0x8c8>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	f083 0301 	eor.w	r3, r3, #1
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d006      	beq.n	800581a <checkAktifCalisma+0x78e>
					timer2=millis;
 800580c:	4b52      	ldr	r3, [pc, #328]	; (8005958 <checkAktifCalisma+0x8cc>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a52      	ldr	r2, [pc, #328]	; (800595c <checkAktifCalisma+0x8d0>)
 8005812:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005814:	4b4f      	ldr	r3, [pc, #316]	; (8005954 <checkAktifCalisma+0x8c8>)
 8005816:	2201      	movs	r2, #1
 8005818:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800581a:	4b4f      	ldr	r3, [pc, #316]	; (8005958 <checkAktifCalisma+0x8cc>)
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4b4f      	ldr	r3, [pc, #316]	; (800595c <checkAktifCalisma+0x8d0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	4a4e      	ldr	r2, [pc, #312]	; (8005960 <checkAktifCalisma+0x8d4>)
 8005826:	7812      	ldrb	r2, [r2, #0]
 8005828:	4293      	cmp	r3, r2
 800582a:	d303      	bcc.n	8005834 <checkAktifCalisma+0x7a8>
 800582c:	4b49      	ldr	r3, [pc, #292]	; (8005954 <checkAktifCalisma+0x8c8>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10d      	bne.n	8005850 <checkAktifCalisma+0x7c4>
 8005834:	4b45      	ldr	r3, [pc, #276]	; (800594c <checkAktifCalisma+0x8c0>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f083 0301 	eor.w	r3, r3, #1
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <checkAktifCalisma+0x7c4>
 8005842:	4b43      	ldr	r3, [pc, #268]	; (8005950 <checkAktifCalisma+0x8c4>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	f083 0301 	eor.w	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <checkAktifCalisma+0x7da>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005850:	2200      	movs	r2, #0
 8005852:	2120      	movs	r1, #32
 8005854:	483a      	ldr	r0, [pc, #232]	; (8005940 <checkAktifCalisma+0x8b4>)
 8005856:	f002 fea6 	bl	80085a6 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 800585a:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <checkAktifCalisma+0x8b8>)
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8005860:	4b3c      	ldr	r3, [pc, #240]	; (8005954 <checkAktifCalisma+0x8c8>)
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005866:	4b3f      	ldr	r3, [pc, #252]	; (8005964 <checkAktifCalisma+0x8d8>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	f040 8088 	bne.w	8005980 <checkAktifCalisma+0x8f4>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005870:	4b3d      	ldr	r3, [pc, #244]	; (8005968 <checkAktifCalisma+0x8dc>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d003      	beq.n	8005880 <checkAktifCalisma+0x7f4>
 8005878:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <checkAktifCalisma+0x8dc>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d17f      	bne.n	8005980 <checkAktifCalisma+0x8f4>
						&& (stopVar) && (kapiSivicVar)
 8005880:	4b32      	ldr	r3, [pc, #200]	; (800594c <checkAktifCalisma+0x8c0>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d07b      	beq.n	8005980 <checkAktifCalisma+0x8f4>
 8005888:	4b31      	ldr	r3, [pc, #196]	; (8005950 <checkAktifCalisma+0x8c4>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d077      	beq.n	8005980 <checkAktifCalisma+0x8f4>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005890:	2140      	movs	r1, #64	; 0x40
 8005892:	482b      	ldr	r0, [pc, #172]	; (8005940 <checkAktifCalisma+0x8b4>)
 8005894:	f002 fe70 	bl	8008578 <HAL_GPIO_ReadPin>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d170      	bne.n	8005980 <checkAktifCalisma+0x8f4>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800589e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80058a2:	4827      	ldr	r0, [pc, #156]	; (8005940 <checkAktifCalisma+0x8b4>)
 80058a4:	f002 fe68 	bl	8008578 <HAL_GPIO_ReadPin>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <checkAktifCalisma+0x82a>
 80058ae:	4b2f      	ldr	r3, [pc, #188]	; (800596c <checkAktifCalisma+0x8e0>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d164      	bne.n	8005980 <checkAktifCalisma+0x8f4>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80058b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058ba:	4823      	ldr	r0, [pc, #140]	; (8005948 <checkAktifCalisma+0x8bc>)
 80058bc:	f002 fe5c 	bl	8008578 <HAL_GPIO_ReadPin>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d10f      	bne.n	80058e6 <checkAktifCalisma+0x85a>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80058c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058ca:	481f      	ldr	r0, [pc, #124]	; (8005948 <checkAktifCalisma+0x8bc>)
 80058cc:	f002 fe54 	bl	8008578 <HAL_GPIO_ReadPin>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d107      	bne.n	80058e6 <checkAktifCalisma+0x85a>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80058d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058da:	481b      	ldr	r0, [pc, #108]	; (8005948 <checkAktifCalisma+0x8bc>)
 80058dc:	f002 fe4c 	bl	8008578 <HAL_GPIO_ReadPin>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d003      	beq.n	80058ee <checkAktifCalisma+0x862>
 80058e6:	4b22      	ldr	r3, [pc, #136]	; (8005970 <checkAktifCalisma+0x8e4>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d048      	beq.n	8005980 <checkAktifCalisma+0x8f4>
						&& (yukarimotorcalisiyor==0)
 80058ee:	4b21      	ldr	r3, [pc, #132]	; (8005974 <checkAktifCalisma+0x8e8>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f083 0301 	eor.w	r3, r3, #1
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d041      	beq.n	8005980 <checkAktifCalisma+0x8f4>
						&& (yukarivalfcalisiyor==0)
 80058fc:	4b1e      	ldr	r3, [pc, #120]	; (8005978 <checkAktifCalisma+0x8ec>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	f083 0301 	eor.w	r3, r3, #1
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d03a      	beq.n	8005980 <checkAktifCalisma+0x8f4>
						&& (asagivalfcalisiyor==0)
 800590a:	4b1c      	ldr	r3, [pc, #112]	; (800597c <checkAktifCalisma+0x8f0>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f083 0301 	eor.w	r3, r3, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d033      	beq.n	8005980 <checkAktifCalisma+0x8f4>
						&& (devyukarivalfcalisiyor==0)
 8005918:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <checkAktifCalisma+0x8b8>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f083 0301 	eor.w	r3, r3, #1
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d02c      	beq.n	8005980 <checkAktifCalisma+0x8f4>
						&& (devmotoryukaricalisiyor==0)) {
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <checkAktifCalisma+0x8b0>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f083 0301 	eor.w	r3, r3, #1
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d025      	beq.n	8005980 <checkAktifCalisma+0x8f4>

					devmotorasagicalisiyor=1;
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <checkAktifCalisma+0x8e4>)
 8005936:	2201      	movs	r2, #1
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	e024      	b.n	8005986 <checkAktifCalisma+0x8fa>
 800593c:	20000a61 	.word	0x20000a61
 8005940:	40011000 	.word	0x40011000
 8005944:	20000a65 	.word	0x20000a65
 8005948:	40010c00 	.word	0x40010c00
 800594c:	20000a7d 	.word	0x20000a7d
 8005950:	20000a7e 	.word	0x20000a7e
 8005954:	20000a5d 	.word	0x20000a5d
 8005958:	20000a08 	.word	0x20000a08
 800595c:	20000a14 	.word	0x20000a14
 8005960:	20000a42 	.word	0x20000a42
 8005964:	20000a49 	.word	0x20000a49
 8005968:	20000a3b 	.word	0x20000a3b
 800596c:	20000a3d 	.word	0x20000a3d
 8005970:	20000a62 	.word	0x20000a62
 8005974:	20000a60 	.word	0x20000a60
 8005978:	20000a64 	.word	0x20000a64
 800597c:	20000a63 	.word	0x20000a63
				} else {
					devmotorasagicalisiyor=0;
 8005980:	4b96      	ldr	r3, [pc, #600]	; (8005bdc <checkAktifCalisma+0xb50>)
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005986:	4b95      	ldr	r3, [pc, #596]	; (8005bdc <checkAktifCalisma+0xb50>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <checkAktifCalisma+0x912>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800598e:	2201      	movs	r2, #1
 8005990:	2110      	movs	r1, #16
 8005992:	4893      	ldr	r0, [pc, #588]	; (8005be0 <checkAktifCalisma+0xb54>)
 8005994:	f002 fe07 	bl	80085a6 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005998:	4b92      	ldr	r3, [pc, #584]	; (8005be4 <checkAktifCalisma+0xb58>)
 800599a:	2201      	movs	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800599e:	4b91      	ldr	r3, [pc, #580]	; (8005be4 <checkAktifCalisma+0xb58>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d024      	beq.n	80059f0 <checkAktifCalisma+0x964>
 80059a6:	2140      	movs	r1, #64	; 0x40
 80059a8:	488d      	ldr	r0, [pc, #564]	; (8005be0 <checkAktifCalisma+0xb54>)
 80059aa:	f002 fde5 	bl	8008578 <HAL_GPIO_ReadPin>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d007      	beq.n	80059c4 <checkAktifCalisma+0x938>
 80059b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059b8:	4889      	ldr	r0, [pc, #548]	; (8005be0 <checkAktifCalisma+0xb54>)
 80059ba:	f002 fddd 	bl	8008578 <HAL_GPIO_ReadPin>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d115      	bne.n	80059f0 <checkAktifCalisma+0x964>
 80059c4:	4b88      	ldr	r3, [pc, #544]	; (8005be8 <checkAktifCalisma+0xb5c>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d011      	beq.n	80059f0 <checkAktifCalisma+0x964>
 80059cc:	4b87      	ldr	r3, [pc, #540]	; (8005bec <checkAktifCalisma+0xb60>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00d      	beq.n	80059f0 <checkAktifCalisma+0x964>
 80059d4:	4b86      	ldr	r3, [pc, #536]	; (8005bf0 <checkAktifCalisma+0xb64>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f083 0301 	eor.w	r3, r3, #1
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d006      	beq.n	80059f0 <checkAktifCalisma+0x964>
					timer2=millis;
 80059e2:	4b84      	ldr	r3, [pc, #528]	; (8005bf4 <checkAktifCalisma+0xb68>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a84      	ldr	r2, [pc, #528]	; (8005bf8 <checkAktifCalisma+0xb6c>)
 80059e8:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 80059ea:	4b81      	ldr	r3, [pc, #516]	; (8005bf0 <checkAktifCalisma+0xb64>)
 80059ec:	2201      	movs	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80059f0:	4b80      	ldr	r3, [pc, #512]	; (8005bf4 <checkAktifCalisma+0xb68>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	4b80      	ldr	r3, [pc, #512]	; (8005bf8 <checkAktifCalisma+0xb6c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	4a80      	ldr	r2, [pc, #512]	; (8005bfc <checkAktifCalisma+0xb70>)
 80059fc:	7812      	ldrb	r2, [r2, #0]
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d303      	bcc.n	8005a0a <checkAktifCalisma+0x97e>
 8005a02:	4b7b      	ldr	r3, [pc, #492]	; (8005bf0 <checkAktifCalisma+0xb64>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10d      	bne.n	8005a26 <checkAktifCalisma+0x99a>
 8005a0a:	4b77      	ldr	r3, [pc, #476]	; (8005be8 <checkAktifCalisma+0xb5c>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f083 0301 	eor.w	r3, r3, #1
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <checkAktifCalisma+0x99a>
 8005a18:	4b74      	ldr	r3, [pc, #464]	; (8005bec <checkAktifCalisma+0xb60>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f083 0301 	eor.w	r3, r3, #1
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <checkAktifCalisma+0x9b0>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005a26:	2200      	movs	r2, #0
 8005a28:	2110      	movs	r1, #16
 8005a2a:	486d      	ldr	r0, [pc, #436]	; (8005be0 <checkAktifCalisma+0xb54>)
 8005a2c:	f002 fdbb 	bl	80085a6 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8005a30:	4b6c      	ldr	r3, [pc, #432]	; (8005be4 <checkAktifCalisma+0xb58>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8005a36:	4b6e      	ldr	r3, [pc, #440]	; (8005bf0 <checkAktifCalisma+0xb64>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a40:	486f      	ldr	r0, [pc, #444]	; (8005c00 <checkAktifCalisma+0xb74>)
 8005a42:	f002 fd99 	bl	8008578 <HAL_GPIO_ReadPin>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d120      	bne.n	8005a8e <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a50:	486b      	ldr	r0, [pc, #428]	; (8005c00 <checkAktifCalisma+0xb74>)
 8005a52:	f002 fd91 	bl	8008578 <HAL_GPIO_ReadPin>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d118      	bne.n	8005a8e <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005a5c:	2104      	movs	r1, #4
 8005a5e:	4868      	ldr	r0, [pc, #416]	; (8005c00 <checkAktifCalisma+0xb74>)
 8005a60:	f002 fd8a 	bl	8008578 <HAL_GPIO_ReadPin>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d111      	bne.n	8005a8e <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	4864      	ldr	r0, [pc, #400]	; (8005c00 <checkAktifCalisma+0xb74>)
 8005a6e:	f002 fd83 	bl	8008578 <HAL_GPIO_ReadPin>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005a78:	2101      	movs	r1, #1
 8005a7a:	4861      	ldr	r0, [pc, #388]	; (8005c00 <checkAktifCalisma+0xb74>)
 8005a7c:	f002 fd7c 	bl	8008578 <HAL_GPIO_ReadPin>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d103      	bne.n	8005a8e <checkAktifCalisma+0xa02>
					makineStop=1;
 8005a86:	4b5f      	ldr	r3, [pc, #380]	; (8005c04 <checkAktifCalisma+0xb78>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	e002      	b.n	8005a94 <checkAktifCalisma+0xa08>
				} else {
					makineStop=0;
 8005a8e:	4b5d      	ldr	r3, [pc, #372]	; (8005c04 <checkAktifCalisma+0xb78>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005a94:	4b5c      	ldr	r3, [pc, #368]	; (8005c08 <checkAktifCalisma+0xb7c>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d144      	bne.n	8005b26 <checkAktifCalisma+0xa9a>
 8005a9c:	4b5b      	ldr	r3, [pc, #364]	; (8005c0c <checkAktifCalisma+0xb80>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d003      	beq.n	8005aac <checkAktifCalisma+0xa20>
 8005aa4:	4b59      	ldr	r3, [pc, #356]	; (8005c0c <checkAktifCalisma+0xb80>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d13c      	bne.n	8005b26 <checkAktifCalisma+0xa9a>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005aac:	2180      	movs	r1, #128	; 0x80
 8005aae:	484c      	ldr	r0, [pc, #304]	; (8005be0 <checkAktifCalisma+0xb54>)
 8005ab0:	f002 fd62 	bl	8008578 <HAL_GPIO_ReadPin>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d103      	bne.n	8005ac2 <checkAktifCalisma+0xa36>
 8005aba:	4b55      	ldr	r3, [pc, #340]	; (8005c10 <checkAktifCalisma+0xb84>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <checkAktifCalisma+0xa4e>
 8005ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ac6:	484e      	ldr	r0, [pc, #312]	; (8005c00 <checkAktifCalisma+0xb74>)
 8005ac8:	f002 fd56 	bl	8008578 <HAL_GPIO_ReadPin>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d129      	bne.n	8005b26 <checkAktifCalisma+0xa9a>
 8005ad2:	4b4f      	ldr	r3, [pc, #316]	; (8005c10 <checkAktifCalisma+0xb84>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d125      	bne.n	8005b26 <checkAktifCalisma+0xa9a>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005ada:	2104      	movs	r1, #4
 8005adc:	4840      	ldr	r0, [pc, #256]	; (8005be0 <checkAktifCalisma+0xb54>)
 8005ade:	f002 fd4b 	bl	8008578 <HAL_GPIO_ReadPin>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d003      	beq.n	8005af0 <checkAktifCalisma+0xa64>
 8005ae8:	4b4a      	ldr	r3, [pc, #296]	; (8005c14 <checkAktifCalisma+0xb88>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d11a      	bne.n	8005b26 <checkAktifCalisma+0xa9a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005af0:	2102      	movs	r1, #2
 8005af2:	483b      	ldr	r0, [pc, #236]	; (8005be0 <checkAktifCalisma+0xb54>)
 8005af4:	f002 fd40 	bl	8008578 <HAL_GPIO_ReadPin>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d113      	bne.n	8005b26 <checkAktifCalisma+0xa9a>
						&&(butonKontrol==0)
 8005afe:	4b46      	ldr	r3, [pc, #280]	; (8005c18 <checkAktifCalisma+0xb8c>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	f083 0301 	eor.w	r3, r3, #1
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00c      	beq.n	8005b26 <checkAktifCalisma+0xa9a>
						&&(makineStop==1)) {
 8005b0c:	4b3d      	ldr	r3, [pc, #244]	; (8005c04 <checkAktifCalisma+0xb78>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <checkAktifCalisma+0xa9a>

					kapi1prudhome=1;
 8005b14:	4b41      	ldr	r3, [pc, #260]	; (8005c1c <checkAktifCalisma+0xb90>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005b1a:	4b36      	ldr	r3, [pc, #216]	; (8005bf4 <checkAktifCalisma+0xb68>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a40      	ldr	r2, [pc, #256]	; (8005c20 <checkAktifCalisma+0xb94>)
 8005b20:	6013      	str	r3, [r2, #0]
					bekle();
 8005b22:	f7ff f883 	bl	8004c2c <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005b26:	4b33      	ldr	r3, [pc, #204]	; (8005bf4 <checkAktifCalisma+0xb68>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b3d      	ldr	r3, [pc, #244]	; (8005c20 <checkAktifCalisma+0xb94>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <checkAktifCalisma+0xb98>)
 8005b32:	7812      	ldrb	r2, [r2, #0]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d211      	bcs.n	8005b5c <checkAktifCalisma+0xad0>
 8005b38:	2104      	movs	r1, #4
 8005b3a:	4829      	ldr	r0, [pc, #164]	; (8005be0 <checkAktifCalisma+0xb54>)
 8005b3c:	f002 fd1c 	bl	8008578 <HAL_GPIO_ReadPin>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <checkAktifCalisma+0xad0>
 8005b46:	4b33      	ldr	r3, [pc, #204]	; (8005c14 <checkAktifCalisma+0xb88>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d006      	beq.n	8005b5c <checkAktifCalisma+0xad0>
 8005b4e:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <checkAktifCalisma+0xb78>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f083 0301 	eor.w	r3, r3, #1
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <checkAktifCalisma+0xad6>
					kapi1prudhome=0;
 8005b5c:	4b2f      	ldr	r3, [pc, #188]	; (8005c1c <checkAktifCalisma+0xb90>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005b62:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <checkAktifCalisma+0xb7c>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d160      	bne.n	8005c2c <checkAktifCalisma+0xba0>
 8005b6a:	4b28      	ldr	r3, [pc, #160]	; (8005c0c <checkAktifCalisma+0xb80>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d003      	beq.n	8005b7a <checkAktifCalisma+0xaee>
 8005b72:	4b26      	ldr	r3, [pc, #152]	; (8005c0c <checkAktifCalisma+0xb80>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d158      	bne.n	8005c2c <checkAktifCalisma+0xba0>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005b7a:	2104      	movs	r1, #4
 8005b7c:	4818      	ldr	r0, [pc, #96]	; (8005be0 <checkAktifCalisma+0xb54>)
 8005b7e:	f002 fcfb 	bl	8008578 <HAL_GPIO_ReadPin>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d003      	beq.n	8005b90 <checkAktifCalisma+0xb04>
 8005b88:	4b22      	ldr	r3, [pc, #136]	; (8005c14 <checkAktifCalisma+0xb88>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d14d      	bne.n	8005c2c <checkAktifCalisma+0xba0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005b90:	2102      	movs	r1, #2
 8005b92:	4813      	ldr	r0, [pc, #76]	; (8005be0 <checkAktifCalisma+0xb54>)
 8005b94:	f002 fcf0 	bl	8008578 <HAL_GPIO_ReadPin>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d146      	bne.n	8005c2c <checkAktifCalisma+0xba0>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005b9e:	2180      	movs	r1, #128	; 0x80
 8005ba0:	480f      	ldr	r0, [pc, #60]	; (8005be0 <checkAktifCalisma+0xb54>)
 8005ba2:	f002 fce9 	bl	8008578 <HAL_GPIO_ReadPin>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d103      	bne.n	8005bb4 <checkAktifCalisma+0xb28>
 8005bac:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <checkAktifCalisma+0xb84>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <checkAktifCalisma+0xb40>
 8005bb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bb8:	4811      	ldr	r0, [pc, #68]	; (8005c00 <checkAktifCalisma+0xb74>)
 8005bba:	f002 fcdd 	bl	8008578 <HAL_GPIO_ReadPin>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d133      	bne.n	8005c2c <checkAktifCalisma+0xba0>
 8005bc4:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <checkAktifCalisma+0xb84>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d12f      	bne.n	8005c2c <checkAktifCalisma+0xba0>
						&&(makineStop==1)) {
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <checkAktifCalisma+0xb78>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d02b      	beq.n	8005c2c <checkAktifCalisma+0xba0>

					kapi1butonkontrol=1;
 8005bd4:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <checkAktifCalisma+0xb9c>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	e02a      	b.n	8005c32 <checkAktifCalisma+0xba6>
 8005bdc:	20000a62 	.word	0x20000a62
 8005be0:	40011000 	.word	0x40011000
 8005be4:	20000a66 	.word	0x20000a66
 8005be8:	20000a7d 	.word	0x20000a7d
 8005bec:	20000a7e 	.word	0x20000a7e
 8005bf0:	20000a5e 	.word	0x20000a5e
 8005bf4:	20000a08 	.word	0x20000a08
 8005bf8:	20000a14 	.word	0x20000a14
 8005bfc:	20000a42 	.word	0x20000a42
 8005c00:	40010c00 	.word	0x40010c00
 8005c04:	20000a6d 	.word	0x20000a6d
 8005c08:	20000a35 	.word	0x20000a35
 8005c0c:	20000a34 	.word	0x20000a34
 8005c10:	20000a38 	.word	0x20000a38
 8005c14:	20000a32 	.word	0x20000a32
 8005c18:	20000a5a 	.word	0x20000a5a
 8005c1c:	20000a6e 	.word	0x20000a6e
 8005c20:	20000a0c 	.word	0x20000a0c
 8005c24:	20000a45 	.word	0x20000a45
 8005c28:	20000a6f 	.word	0x20000a6f
				} else {
					kapi1butonkontrol=0;
 8005c2c:	4b8b      	ldr	r3, [pc, #556]	; (8005e5c <checkAktifCalisma+0xdd0>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005c32:	4b8b      	ldr	r3, [pc, #556]	; (8005e60 <checkAktifCalisma+0xdd4>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d121      	bne.n	8005c7e <checkAktifCalisma+0xbf2>
 8005c3a:	4b8a      	ldr	r3, [pc, #552]	; (8005e64 <checkAktifCalisma+0xdd8>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d003      	beq.n	8005c4a <checkAktifCalisma+0xbbe>
 8005c42:	4b88      	ldr	r3, [pc, #544]	; (8005e64 <checkAktifCalisma+0xdd8>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d119      	bne.n	8005c7e <checkAktifCalisma+0xbf2>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005c4a:	2104      	movs	r1, #4
 8005c4c:	4886      	ldr	r0, [pc, #536]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005c4e:	f002 fc93 	bl	8008578 <HAL_GPIO_ReadPin>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d003      	beq.n	8005c60 <checkAktifCalisma+0xbd4>
 8005c58:	4b84      	ldr	r3, [pc, #528]	; (8005e6c <checkAktifCalisma+0xde0>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10e      	bne.n	8005c7e <checkAktifCalisma+0xbf2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005c60:	2102      	movs	r1, #2
 8005c62:	4881      	ldr	r0, [pc, #516]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005c64:	f002 fc88 	bl	8008578 <HAL_GPIO_ReadPin>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d107      	bne.n	8005c7e <checkAktifCalisma+0xbf2>
						&&(makineStop==1)) {
 8005c6e:	4b80      	ldr	r3, [pc, #512]	; (8005e70 <checkAktifCalisma+0xde4>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <checkAktifCalisma+0xbf2>

					kapi1pizzato=1;
 8005c76:	4b7f      	ldr	r3, [pc, #508]	; (8005e74 <checkAktifCalisma+0xde8>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	e002      	b.n	8005c84 <checkAktifCalisma+0xbf8>
				} else {
					kapi1pizzato=0;
 8005c7e:	4b7d      	ldr	r3, [pc, #500]	; (8005e74 <checkAktifCalisma+0xde8>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005c84:	4b75      	ldr	r3, [pc, #468]	; (8005e5c <checkAktifCalisma+0xdd0>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d107      	bne.n	8005c9c <checkAktifCalisma+0xc10>
 8005c8c:	4b79      	ldr	r3, [pc, #484]	; (8005e74 <checkAktifCalisma+0xde8>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d103      	bne.n	8005c9c <checkAktifCalisma+0xc10>
 8005c94:	4b78      	ldr	r3, [pc, #480]	; (8005e78 <checkAktifCalisma+0xdec>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <checkAktifCalisma+0xc1c>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	2180      	movs	r1, #128	; 0x80
 8005ca0:	4876      	ldr	r0, [pc, #472]	; (8005e7c <checkAktifCalisma+0xdf0>)
 8005ca2:	f002 fc80 	bl	80085a6 <HAL_GPIO_WritePin>
 8005ca6:	e004      	b.n	8005cb2 <checkAktifCalisma+0xc26>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2180      	movs	r1, #128	; 0x80
 8005cac:	4873      	ldr	r0, [pc, #460]	; (8005e7c <checkAktifCalisma+0xdf0>)
 8005cae:	f002 fc7a 	bl	80085a6 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005cb2:	4b73      	ldr	r3, [pc, #460]	; (8005e80 <checkAktifCalisma+0xdf4>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d141      	bne.n	8005d3e <checkAktifCalisma+0xcb2>
 8005cba:	4b6a      	ldr	r3, [pc, #424]	; (8005e64 <checkAktifCalisma+0xdd8>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d003      	beq.n	8005cca <checkAktifCalisma+0xc3e>
 8005cc2:	4b68      	ldr	r3, [pc, #416]	; (8005e64 <checkAktifCalisma+0xdd8>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d139      	bne.n	8005d3e <checkAktifCalisma+0xcb2>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cce:	4866      	ldr	r0, [pc, #408]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005cd0:	f002 fc52 	bl	8008578 <HAL_GPIO_ReadPin>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <checkAktifCalisma+0xc56>
 8005cda:	4b6a      	ldr	r3, [pc, #424]	; (8005e84 <checkAktifCalisma+0xdf8>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <checkAktifCalisma+0xc6e>
 8005ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ce6:	4868      	ldr	r0, [pc, #416]	; (8005e88 <checkAktifCalisma+0xdfc>)
 8005ce8:	f002 fc46 	bl	8008578 <HAL_GPIO_ReadPin>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d125      	bne.n	8005d3e <checkAktifCalisma+0xcb2>
 8005cf2:	4b64      	ldr	r3, [pc, #400]	; (8005e84 <checkAktifCalisma+0xdf8>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d121      	bne.n	8005d3e <checkAktifCalisma+0xcb2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cfa:	2102      	movs	r1, #2
 8005cfc:	485a      	ldr	r0, [pc, #360]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005cfe:	f002 fc3b 	bl	8008578 <HAL_GPIO_ReadPin>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d11a      	bne.n	8005d3e <checkAktifCalisma+0xcb2>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005d08:	2104      	movs	r1, #4
 8005d0a:	4857      	ldr	r0, [pc, #348]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005d0c:	f002 fc34 	bl	8008578 <HAL_GPIO_ReadPin>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d113      	bne.n	8005d3e <checkAktifCalisma+0xcb2>
						&&(makineStop==1)
 8005d16:	4b56      	ldr	r3, [pc, #344]	; (8005e70 <checkAktifCalisma+0xde4>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00f      	beq.n	8005d3e <checkAktifCalisma+0xcb2>
						&&(butonKontrol==0)) {
 8005d1e:	4b5b      	ldr	r3, [pc, #364]	; (8005e8c <checkAktifCalisma+0xe00>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f083 0301 	eor.w	r3, r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <checkAktifCalisma+0xcb2>

					kapi2prudhome=1;
 8005d2c:	4b58      	ldr	r3, [pc, #352]	; (8005e90 <checkAktifCalisma+0xe04>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005d32:	4b58      	ldr	r3, [pc, #352]	; (8005e94 <checkAktifCalisma+0xe08>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a58      	ldr	r2, [pc, #352]	; (8005e98 <checkAktifCalisma+0xe0c>)
 8005d38:	6013      	str	r3, [r2, #0]
					bekle();
 8005d3a:	f7fe ff77 	bl	8004c2c <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005d3e:	4b55      	ldr	r3, [pc, #340]	; (8005e94 <checkAktifCalisma+0xe08>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b55      	ldr	r3, [pc, #340]	; (8005e98 <checkAktifCalisma+0xe0c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	4a54      	ldr	r2, [pc, #336]	; (8005e9c <checkAktifCalisma+0xe10>)
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d20d      	bcs.n	8005d6c <checkAktifCalisma+0xce0>
 8005d50:	2102      	movs	r1, #2
 8005d52:	4845      	ldr	r0, [pc, #276]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005d54:	f002 fc10 	bl	8008578 <HAL_GPIO_ReadPin>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <checkAktifCalisma+0xce0>
 8005d5e:	4b44      	ldr	r3, [pc, #272]	; (8005e70 <checkAktifCalisma+0xde4>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	f083 0301 	eor.w	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <checkAktifCalisma+0xce6>
					kapi2prudhome=0;
 8005d6c:	4b48      	ldr	r3, [pc, #288]	; (8005e90 <checkAktifCalisma+0xe04>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005d72:	4b43      	ldr	r3, [pc, #268]	; (8005e80 <checkAktifCalisma+0xdf4>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d135      	bne.n	8005de6 <checkAktifCalisma+0xd5a>
 8005d7a:	4b3a      	ldr	r3, [pc, #232]	; (8005e64 <checkAktifCalisma+0xdd8>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d003      	beq.n	8005d8a <checkAktifCalisma+0xcfe>
 8005d82:	4b38      	ldr	r3, [pc, #224]	; (8005e64 <checkAktifCalisma+0xdd8>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d12d      	bne.n	8005de6 <checkAktifCalisma+0xd5a>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d8e:	4836      	ldr	r0, [pc, #216]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005d90:	f002 fbf2 	bl	8008578 <HAL_GPIO_ReadPin>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <checkAktifCalisma+0xd16>
 8005d9a:	4b3a      	ldr	r3, [pc, #232]	; (8005e84 <checkAktifCalisma+0xdf8>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00b      	beq.n	8005dba <checkAktifCalisma+0xd2e>
 8005da2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005da6:	4838      	ldr	r0, [pc, #224]	; (8005e88 <checkAktifCalisma+0xdfc>)
 8005da8:	f002 fbe6 	bl	8008578 <HAL_GPIO_ReadPin>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d119      	bne.n	8005de6 <checkAktifCalisma+0xd5a>
 8005db2:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <checkAktifCalisma+0xdf8>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d115      	bne.n	8005de6 <checkAktifCalisma+0xd5a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005dba:	2102      	movs	r1, #2
 8005dbc:	482a      	ldr	r0, [pc, #168]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005dbe:	f002 fbdb 	bl	8008578 <HAL_GPIO_ReadPin>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d10e      	bne.n	8005de6 <checkAktifCalisma+0xd5a>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005dc8:	2104      	movs	r1, #4
 8005dca:	4827      	ldr	r0, [pc, #156]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005dcc:	f002 fbd4 	bl	8008578 <HAL_GPIO_ReadPin>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d107      	bne.n	8005de6 <checkAktifCalisma+0xd5a>
						&&(makineStop==1)) {
 8005dd6:	4b26      	ldr	r3, [pc, #152]	; (8005e70 <checkAktifCalisma+0xde4>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <checkAktifCalisma+0xd5a>

					kapi2butonkontrol=1;
 8005dde:	4b30      	ldr	r3, [pc, #192]	; (8005ea0 <checkAktifCalisma+0xe14>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e002      	b.n	8005dec <checkAktifCalisma+0xd60>
				} else {
					kapi2butonkontrol=0;
 8005de6:	4b2e      	ldr	r3, [pc, #184]	; (8005ea0 <checkAktifCalisma+0xe14>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005dec:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <checkAktifCalisma+0xdf4>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d11d      	bne.n	8005e30 <checkAktifCalisma+0xda4>
 8005df4:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <checkAktifCalisma+0xdd8>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d003      	beq.n	8005e04 <checkAktifCalisma+0xd78>
 8005dfc:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <checkAktifCalisma+0xdd8>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d115      	bne.n	8005e30 <checkAktifCalisma+0xda4>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005e04:	2102      	movs	r1, #2
 8005e06:	4818      	ldr	r0, [pc, #96]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005e08:	f002 fbb6 	bl	8008578 <HAL_GPIO_ReadPin>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d10e      	bne.n	8005e30 <checkAktifCalisma+0xda4>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005e12:	2104      	movs	r1, #4
 8005e14:	4814      	ldr	r0, [pc, #80]	; (8005e68 <checkAktifCalisma+0xddc>)
 8005e16:	f002 fbaf 	bl	8008578 <HAL_GPIO_ReadPin>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d107      	bne.n	8005e30 <checkAktifCalisma+0xda4>
						&&(makineStop==1)) {
 8005e20:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <checkAktifCalisma+0xde4>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <checkAktifCalisma+0xda4>

					kapi2pizzato=1;
 8005e28:	4b1e      	ldr	r3, [pc, #120]	; (8005ea4 <checkAktifCalisma+0xe18>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <checkAktifCalisma+0xdaa>
				} else {
					kapi2pizzato=0;
 8005e30:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <checkAktifCalisma+0xe18>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005e36:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <checkAktifCalisma+0xe14>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d107      	bne.n	8005e4e <checkAktifCalisma+0xdc2>
 8005e3e:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <checkAktifCalisma+0xe18>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <checkAktifCalisma+0xdc2>
 8005e46:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <checkAktifCalisma+0xe04>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d02c      	beq.n	8005ea8 <checkAktifCalisma+0xe1c>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005e4e:	2201      	movs	r2, #1
 8005e50:	2140      	movs	r1, #64	; 0x40
 8005e52:	480a      	ldr	r0, [pc, #40]	; (8005e7c <checkAktifCalisma+0xdf0>)
 8005e54:	f002 fba7 	bl	80085a6 <HAL_GPIO_WritePin>
 8005e58:	e02b      	b.n	8005eb2 <checkAktifCalisma+0xe26>
 8005e5a:	bf00      	nop
 8005e5c:	20000a6f 	.word	0x20000a6f
 8005e60:	20000a35 	.word	0x20000a35
 8005e64:	20000a34 	.word	0x20000a34
 8005e68:	40011000 	.word	0x40011000
 8005e6c:	20000a32 	.word	0x20000a32
 8005e70:	20000a6d 	.word	0x20000a6d
 8005e74:	20000a70 	.word	0x20000a70
 8005e78:	20000a6e 	.word	0x20000a6e
 8005e7c:	40010800 	.word	0x40010800
 8005e80:	20000a36 	.word	0x20000a36
 8005e84:	20000a38 	.word	0x20000a38
 8005e88:	40010c00 	.word	0x40010c00
 8005e8c:	20000a5a 	.word	0x20000a5a
 8005e90:	20000a71 	.word	0x20000a71
 8005e94:	20000a08 	.word	0x20000a08
 8005e98:	20000a0c 	.word	0x20000a0c
 8005e9c:	20000a46 	.word	0x20000a46
 8005ea0:	20000a72 	.word	0x20000a72
 8005ea4:	20000a73 	.word	0x20000a73
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2140      	movs	r1, #64	; 0x40
 8005eac:	488d      	ldr	r0, [pc, #564]	; (80060e4 <checkAktifCalisma+0x1058>)
 8005eae:	f002 fb7a 	bl	80085a6 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005eb2:	4b8d      	ldr	r3, [pc, #564]	; (80060e8 <checkAktifCalisma+0x105c>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <checkAktifCalisma+0xe36>
 8005eba:	4b8b      	ldr	r3, [pc, #556]	; (80060e8 <checkAktifCalisma+0x105c>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d115      	bne.n	8005eee <checkAktifCalisma+0xe62>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005ec2:	2104      	movs	r1, #4
 8005ec4:	4889      	ldr	r0, [pc, #548]	; (80060ec <checkAktifCalisma+0x1060>)
 8005ec6:	f002 fb57 	bl	8008578 <HAL_GPIO_ReadPin>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d003      	beq.n	8005ed8 <checkAktifCalisma+0xe4c>
 8005ed0:	4b87      	ldr	r3, [pc, #540]	; (80060f0 <checkAktifCalisma+0x1064>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <checkAktifCalisma+0xe62>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005ed8:	2102      	movs	r1, #2
 8005eda:	4884      	ldr	r0, [pc, #528]	; (80060ec <checkAktifCalisma+0x1060>)
 8005edc:	f002 fb4c 	bl	8008578 <HAL_GPIO_ReadPin>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d103      	bne.n	8005eee <checkAktifCalisma+0xe62>

					kapiTablaAcKonumKat1=1;
 8005ee6:	4b83      	ldr	r3, [pc, #524]	; (80060f4 <checkAktifCalisma+0x1068>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	e002      	b.n	8005ef4 <checkAktifCalisma+0xe68>
				} else {
					kapiTablaAcKonumKat1=0;
 8005eee:	4b81      	ldr	r3, [pc, #516]	; (80060f4 <checkAktifCalisma+0x1068>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005ef4:	4b7c      	ldr	r3, [pc, #496]	; (80060e8 <checkAktifCalisma+0x105c>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d003      	beq.n	8005f04 <checkAktifCalisma+0xe78>
 8005efc:	4b7a      	ldr	r3, [pc, #488]	; (80060e8 <checkAktifCalisma+0x105c>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d111      	bne.n	8005f28 <checkAktifCalisma+0xe9c>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005f04:	2102      	movs	r1, #2
 8005f06:	4879      	ldr	r0, [pc, #484]	; (80060ec <checkAktifCalisma+0x1060>)
 8005f08:	f002 fb36 	bl	8008578 <HAL_GPIO_ReadPin>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d10a      	bne.n	8005f28 <checkAktifCalisma+0xe9c>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005f12:	2104      	movs	r1, #4
 8005f14:	4875      	ldr	r0, [pc, #468]	; (80060ec <checkAktifCalisma+0x1060>)
 8005f16:	f002 fb2f 	bl	8008578 <HAL_GPIO_ReadPin>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d103      	bne.n	8005f28 <checkAktifCalisma+0xe9c>

					kapiTablaAcKonumKat2=1;
 8005f20:	4b75      	ldr	r3, [pc, #468]	; (80060f8 <checkAktifCalisma+0x106c>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	e002      	b.n	8005f2e <checkAktifCalisma+0xea2>
				} else {
					kapiTablaAcKonumKat2=0;
 8005f28:	4b73      	ldr	r3, [pc, #460]	; (80060f8 <checkAktifCalisma+0x106c>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8005f2e:	4b71      	ldr	r3, [pc, #452]	; (80060f4 <checkAktifCalisma+0x1068>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00f      	beq.n	8005f56 <checkAktifCalisma+0xeca>
						&& kapiAcTipi==1
 8005f36:	4b71      	ldr	r3, [pc, #452]	; (80060fc <checkAktifCalisma+0x1070>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d10b      	bne.n	8005f56 <checkAktifCalisma+0xeca>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f42:	486f      	ldr	r0, [pc, #444]	; (8006100 <checkAktifCalisma+0x1074>)
 8005f44:	f002 fb18 	bl	8008578 <HAL_GPIO_ReadPin>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d103      	bne.n	8005f56 <checkAktifCalisma+0xeca>

					kapiactablaesp1=1;
 8005f4e:	4b6d      	ldr	r3, [pc, #436]	; (8006104 <checkAktifCalisma+0x1078>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e002      	b.n	8005f5c <checkAktifCalisma+0xed0>
				} else {
					kapiactablaesp1=0;
 8005f56:	4b6b      	ldr	r3, [pc, #428]	; (8006104 <checkAktifCalisma+0x1078>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005f5c:	4b66      	ldr	r3, [pc, #408]	; (80060f8 <checkAktifCalisma+0x106c>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00f      	beq.n	8005f84 <checkAktifCalisma+0xef8>
						&& kapiAcTipi==1
 8005f64:	4b65      	ldr	r3, [pc, #404]	; (80060fc <checkAktifCalisma+0x1070>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d10b      	bne.n	8005f84 <checkAktifCalisma+0xef8>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f70:	4863      	ldr	r0, [pc, #396]	; (8006100 <checkAktifCalisma+0x1074>)
 8005f72:	f002 fb01 	bl	8008578 <HAL_GPIO_ReadPin>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <checkAktifCalisma+0xef8>

					kapiactablaesp2=1;
 8005f7c:	4b62      	ldr	r3, [pc, #392]	; (8006108 <checkAktifCalisma+0x107c>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	e002      	b.n	8005f8a <checkAktifCalisma+0xefe>
				} else {
					kapiactablaesp2=0;
 8005f84:	4b60      	ldr	r3, [pc, #384]	; (8006108 <checkAktifCalisma+0x107c>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005f8a:	4b60      	ldr	r3, [pc, #384]	; (800610c <checkAktifCalisma+0x1080>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d137      	bne.n	8006002 <checkAktifCalisma+0xf76>
 8005f92:	4b5f      	ldr	r3, [pc, #380]	; (8006110 <checkAktifCalisma+0x1084>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d003      	beq.n	8005fa2 <checkAktifCalisma+0xf16>
 8005f9a:	4b5d      	ldr	r3, [pc, #372]	; (8006110 <checkAktifCalisma+0x1084>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d12f      	bne.n	8006002 <checkAktifCalisma+0xf76>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005fa2:	4b54      	ldr	r3, [pc, #336]	; (80060f4 <checkAktifCalisma+0x1068>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d103      	bne.n	8005fb2 <checkAktifCalisma+0xf26>
 8005faa:	4b53      	ldr	r3, [pc, #332]	; (80060f8 <checkAktifCalisma+0x106c>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d027      	beq.n	8006002 <checkAktifCalisma+0xf76>
						&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fb6:	484d      	ldr	r0, [pc, #308]	; (80060ec <checkAktifCalisma+0x1060>)
 8005fb8:	f002 fade 	bl	8008578 <HAL_GPIO_ReadPin>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d103      	bne.n	8005fca <checkAktifCalisma+0xf3e>
 8005fc2:	4b4e      	ldr	r3, [pc, #312]	; (80060fc <checkAktifCalisma+0x1070>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <checkAktifCalisma+0xf4e>
						||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005fca:	4b4e      	ldr	r3, [pc, #312]	; (8006104 <checkAktifCalisma+0x1078>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d103      	bne.n	8005fda <checkAktifCalisma+0xf4e>
 8005fd2:	4b4d      	ldr	r3, [pc, #308]	; (8006108 <checkAktifCalisma+0x107c>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d013      	beq.n	8006002 <checkAktifCalisma+0xf76>
						&&(makineStop==1)
 8005fda:	4b4e      	ldr	r3, [pc, #312]	; (8006114 <checkAktifCalisma+0x1088>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00f      	beq.n	8006002 <checkAktifCalisma+0xf76>
						&&(butonKontrol==0)) {
 8005fe2:	4b4d      	ldr	r3, [pc, #308]	; (8006118 <checkAktifCalisma+0x108c>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	f083 0301 	eor.w	r3, r3, #1
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d008      	beq.n	8006002 <checkAktifCalisma+0xf76>

					kapiTablaprudhome=1;
 8005ff0:	4b4a      	ldr	r3, [pc, #296]	; (800611c <checkAktifCalisma+0x1090>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005ff6:	4b4a      	ldr	r3, [pc, #296]	; (8006120 <checkAktifCalisma+0x1094>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a4a      	ldr	r2, [pc, #296]	; (8006124 <checkAktifCalisma+0x1098>)
 8005ffc:	6013      	str	r3, [r2, #0]
					bekle();
 8005ffe:	f7fe fe15 	bl	8004c2c <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006002:	4b47      	ldr	r3, [pc, #284]	; (8006120 <checkAktifCalisma+0x1094>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b47      	ldr	r3, [pc, #284]	; (8006124 <checkAktifCalisma+0x1098>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	4a46      	ldr	r2, [pc, #280]	; (8006128 <checkAktifCalisma+0x109c>)
 800600e:	7812      	ldrb	r2, [r2, #0]
 8006010:	4293      	cmp	r3, r2
 8006012:	d214      	bcs.n	800603e <checkAktifCalisma+0xfb2>
 8006014:	4b37      	ldr	r3, [pc, #220]	; (80060f4 <checkAktifCalisma+0x1068>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f083 0301 	eor.w	r3, r3, #1
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d006      	beq.n	8006030 <checkAktifCalisma+0xfa4>
 8006022:	4b35      	ldr	r3, [pc, #212]	; (80060f8 <checkAktifCalisma+0x106c>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f083 0301 	eor.w	r3, r3, #1
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <checkAktifCalisma+0xfb2>
 8006030:	4b38      	ldr	r3, [pc, #224]	; (8006114 <checkAktifCalisma+0x1088>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f083 0301 	eor.w	r3, r3, #1
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <checkAktifCalisma+0xfb8>
					kapiTablaprudhome=0;
 800603e:	4b37      	ldr	r3, [pc, #220]	; (800611c <checkAktifCalisma+0x1090>)
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006044:	4b31      	ldr	r3, [pc, #196]	; (800610c <checkAktifCalisma+0x1080>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d12b      	bne.n	80060a4 <checkAktifCalisma+0x1018>
 800604c:	4b30      	ldr	r3, [pc, #192]	; (8006110 <checkAktifCalisma+0x1084>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d003      	beq.n	800605c <checkAktifCalisma+0xfd0>
 8006054:	4b2e      	ldr	r3, [pc, #184]	; (8006110 <checkAktifCalisma+0x1084>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b03      	cmp	r3, #3
 800605a:	d123      	bne.n	80060a4 <checkAktifCalisma+0x1018>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800605c:	4b25      	ldr	r3, [pc, #148]	; (80060f4 <checkAktifCalisma+0x1068>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <checkAktifCalisma+0xfe0>
 8006064:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <checkAktifCalisma+0x106c>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01b      	beq.n	80060a4 <checkAktifCalisma+0x1018>
						&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800606c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006070:	481e      	ldr	r0, [pc, #120]	; (80060ec <checkAktifCalisma+0x1060>)
 8006072:	f002 fa81 	bl	8008578 <HAL_GPIO_ReadPin>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <checkAktifCalisma+0xff8>
 800607c:	4b1f      	ldr	r3, [pc, #124]	; (80060fc <checkAktifCalisma+0x1070>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <checkAktifCalisma+0x1008>
						||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006084:	4b1f      	ldr	r3, [pc, #124]	; (8006104 <checkAktifCalisma+0x1078>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <checkAktifCalisma+0x1008>
 800608c:	4b1e      	ldr	r3, [pc, #120]	; (8006108 <checkAktifCalisma+0x107c>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <checkAktifCalisma+0x1018>
						&&(makineStop==1)) {
 8006094:	4b1f      	ldr	r3, [pc, #124]	; (8006114 <checkAktifCalisma+0x1088>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <checkAktifCalisma+0x1018>

					kapiTablabutonkontrol=1;
 800609c:	4b23      	ldr	r3, [pc, #140]	; (800612c <checkAktifCalisma+0x10a0>)
 800609e:	2201      	movs	r2, #1
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e002      	b.n	80060aa <checkAktifCalisma+0x101e>
				} else {
					kapiTablabutonkontrol=0;
 80060a4:	4b21      	ldr	r3, [pc, #132]	; (800612c <checkAktifCalisma+0x10a0>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80060aa:	4b18      	ldr	r3, [pc, #96]	; (800610c <checkAktifCalisma+0x1080>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d140      	bne.n	8006134 <checkAktifCalisma+0x10a8>
 80060b2:	4b17      	ldr	r3, [pc, #92]	; (8006110 <checkAktifCalisma+0x1084>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d003      	beq.n	80060c2 <checkAktifCalisma+0x1036>
 80060ba:	4b15      	ldr	r3, [pc, #84]	; (8006110 <checkAktifCalisma+0x1084>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d138      	bne.n	8006134 <checkAktifCalisma+0x10a8>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <checkAktifCalisma+0x1068>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d103      	bne.n	80060d2 <checkAktifCalisma+0x1046>
 80060ca:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <checkAktifCalisma+0x106c>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d030      	beq.n	8006134 <checkAktifCalisma+0x10a8>
						&&(makineStop==1)) {
 80060d2:	4b10      	ldr	r3, [pc, #64]	; (8006114 <checkAktifCalisma+0x1088>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d02c      	beq.n	8006134 <checkAktifCalisma+0x10a8>

					kapiTablapizzato=1;
 80060da:	4b15      	ldr	r3, [pc, #84]	; (8006130 <checkAktifCalisma+0x10a4>)
 80060dc:	2201      	movs	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	e02b      	b.n	800613a <checkAktifCalisma+0x10ae>
 80060e2:	bf00      	nop
 80060e4:	40010800 	.word	0x40010800
 80060e8:	20000a39 	.word	0x20000a39
 80060ec:	40011000 	.word	0x40011000
 80060f0:	20000a32 	.word	0x20000a32
 80060f4:	20000a77 	.word	0x20000a77
 80060f8:	20000a78 	.word	0x20000a78
 80060fc:	20000a38 	.word	0x20000a38
 8006100:	40010c00 	.word	0x40010c00
 8006104:	20000a87 	.word	0x20000a87
 8006108:	20000a88 	.word	0x20000a88
 800610c:	20000a37 	.word	0x20000a37
 8006110:	20000a34 	.word	0x20000a34
 8006114:	20000a6d 	.word	0x20000a6d
 8006118:	20000a5a 	.word	0x20000a5a
 800611c:	20000a74 	.word	0x20000a74
 8006120:	20000a08 	.word	0x20000a08
 8006124:	20000a0c 	.word	0x20000a0c
 8006128:	20000a47 	.word	0x20000a47
 800612c:	20000a75 	.word	0x20000a75
 8006130:	20000a76 	.word	0x20000a76
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8006134:	4b89      	ldr	r3, [pc, #548]	; (800635c <checkAktifCalisma+0x12d0>)
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800613a:	4b89      	ldr	r3, [pc, #548]	; (8006360 <checkAktifCalisma+0x12d4>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d107      	bne.n	8006152 <checkAktifCalisma+0x10c6>
 8006142:	4b88      	ldr	r3, [pc, #544]	; (8006364 <checkAktifCalisma+0x12d8>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <checkAktifCalisma+0x10c6>
 800614a:	4b84      	ldr	r3, [pc, #528]	; (800635c <checkAktifCalisma+0x12d0>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <checkAktifCalisma+0x10d2>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006152:	2201      	movs	r2, #1
 8006154:	2120      	movs	r1, #32
 8006156:	4884      	ldr	r0, [pc, #528]	; (8006368 <checkAktifCalisma+0x12dc>)
 8006158:	f002 fa25 	bl	80085a6 <HAL_GPIO_WritePin>
 800615c:	e004      	b.n	8006168 <checkAktifCalisma+0x10dc>
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800615e:	2200      	movs	r2, #0
 8006160:	2120      	movs	r1, #32
 8006162:	4881      	ldr	r0, [pc, #516]	; (8006368 <checkAktifCalisma+0x12dc>)
 8006164:	f002 fa1f 	bl	80085a6 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006168:	4b80      	ldr	r3, [pc, #512]	; (800636c <checkAktifCalisma+0x12e0>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00e      	beq.n	800618e <checkAktifCalisma+0x1102>
 8006170:	2102      	movs	r1, #2
 8006172:	487f      	ldr	r0, [pc, #508]	; (8006370 <checkAktifCalisma+0x12e4>)
 8006174:	f002 fa00 	bl	8008578 <HAL_GPIO_ReadPin>
 8006178:	4603      	mov	r3, r0
 800617a:	2b01      	cmp	r3, #1
 800617c:	d107      	bne.n	800618e <checkAktifCalisma+0x1102>
 800617e:	4b7d      	ldr	r3, [pc, #500]	; (8006374 <checkAktifCalisma+0x12e8>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <checkAktifCalisma+0x1102>
 8006186:	4b7c      	ldr	r3, [pc, #496]	; (8006378 <checkAktifCalisma+0x12ec>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d112      	bne.n	80061b4 <checkAktifCalisma+0x1128>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800618e:	4b7b      	ldr	r3, [pc, #492]	; (800637c <checkAktifCalisma+0x12f0>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d066      	beq.n	8006264 <checkAktifCalisma+0x11d8>
 8006196:	2104      	movs	r1, #4
 8006198:	4875      	ldr	r0, [pc, #468]	; (8006370 <checkAktifCalisma+0x12e4>)
 800619a:	f002 f9ed 	bl	8008578 <HAL_GPIO_ReadPin>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d15f      	bne.n	8006264 <checkAktifCalisma+0x11d8>
 80061a4:	4b73      	ldr	r3, [pc, #460]	; (8006374 <checkAktifCalisma+0x12e8>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d05b      	beq.n	8006264 <checkAktifCalisma+0x11d8>
 80061ac:	4b72      	ldr	r3, [pc, #456]	; (8006378 <checkAktifCalisma+0x12ec>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d057      	beq.n	8006264 <checkAktifCalisma+0x11d8>


					calismaSayisi1=calismaSayisi1+1;
 80061b4:	4b72      	ldr	r3, [pc, #456]	; (8006380 <checkAktifCalisma+0x12f4>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	3301      	adds	r3, #1
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	4b70      	ldr	r3, [pc, #448]	; (8006380 <checkAktifCalisma+0x12f4>)
 80061be:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi1>9) {
 80061c0:	4b6f      	ldr	r3, [pc, #444]	; (8006380 <checkAktifCalisma+0x12f4>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b09      	cmp	r3, #9
 80061c6:	d908      	bls.n	80061da <checkAktifCalisma+0x114e>
					  	calismaSayisi1=0;
 80061c8:	4b6d      	ldr	r3, [pc, #436]	; (8006380 <checkAktifCalisma+0x12f4>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi10=calismaSayisi10+1;
 80061ce:	4b6d      	ldr	r3, [pc, #436]	; (8006384 <checkAktifCalisma+0x12f8>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	3301      	adds	r3, #1
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	4b6b      	ldr	r3, [pc, #428]	; (8006384 <checkAktifCalisma+0x12f8>)
 80061d8:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi10>9) {
 80061da:	4b6a      	ldr	r3, [pc, #424]	; (8006384 <checkAktifCalisma+0x12f8>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b09      	cmp	r3, #9
 80061e0:	d908      	bls.n	80061f4 <checkAktifCalisma+0x1168>
					  	calismaSayisi10=0;
 80061e2:	4b68      	ldr	r3, [pc, #416]	; (8006384 <checkAktifCalisma+0x12f8>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi100=calismaSayisi100+1;
 80061e8:	4b67      	ldr	r3, [pc, #412]	; (8006388 <checkAktifCalisma+0x12fc>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	3301      	adds	r3, #1
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	4b65      	ldr	r3, [pc, #404]	; (8006388 <checkAktifCalisma+0x12fc>)
 80061f2:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi100>9) {
 80061f4:	4b64      	ldr	r3, [pc, #400]	; (8006388 <checkAktifCalisma+0x12fc>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b09      	cmp	r3, #9
 80061fa:	d908      	bls.n	800620e <checkAktifCalisma+0x1182>
					  	calismaSayisi100=0;
 80061fc:	4b62      	ldr	r3, [pc, #392]	; (8006388 <checkAktifCalisma+0x12fc>)
 80061fe:	2200      	movs	r2, #0
 8006200:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi1000=calismaSayisi1000+1;
 8006202:	4b62      	ldr	r3, [pc, #392]	; (800638c <checkAktifCalisma+0x1300>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	b2da      	uxtb	r2, r3
 800620a:	4b60      	ldr	r3, [pc, #384]	; (800638c <checkAktifCalisma+0x1300>)
 800620c:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi1000>9) {
 800620e:	4b5f      	ldr	r3, [pc, #380]	; (800638c <checkAktifCalisma+0x1300>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b09      	cmp	r3, #9
 8006214:	d908      	bls.n	8006228 <checkAktifCalisma+0x119c>
					  	calismaSayisi1000=0;
 8006216:	4b5d      	ldr	r3, [pc, #372]	; (800638c <checkAktifCalisma+0x1300>)
 8006218:	2200      	movs	r2, #0
 800621a:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi10000=calismaSayisi10000+1;
 800621c:	4b5c      	ldr	r3, [pc, #368]	; (8006390 <checkAktifCalisma+0x1304>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	3301      	adds	r3, #1
 8006222:	b2da      	uxtb	r2, r3
 8006224:	4b5a      	ldr	r3, [pc, #360]	; (8006390 <checkAktifCalisma+0x1304>)
 8006226:	701a      	strb	r2, [r3, #0]
					}
					eepromData[32]=calismaSayisi10000;
 8006228:	4b59      	ldr	r3, [pc, #356]	; (8006390 <checkAktifCalisma+0x1304>)
 800622a:	781a      	ldrb	r2, [r3, #0]
 800622c:	4b59      	ldr	r3, [pc, #356]	; (8006394 <checkAktifCalisma+0x1308>)
 800622e:	f883 2020 	strb.w	r2, [r3, #32]
					eepromData[31]=calismaSayisi1000;
 8006232:	4b56      	ldr	r3, [pc, #344]	; (800638c <checkAktifCalisma+0x1300>)
 8006234:	781a      	ldrb	r2, [r3, #0]
 8006236:	4b57      	ldr	r3, [pc, #348]	; (8006394 <checkAktifCalisma+0x1308>)
 8006238:	77da      	strb	r2, [r3, #31]
					eepromData[30]=calismaSayisi100;
 800623a:	4b53      	ldr	r3, [pc, #332]	; (8006388 <checkAktifCalisma+0x12fc>)
 800623c:	781a      	ldrb	r2, [r3, #0]
 800623e:	4b55      	ldr	r3, [pc, #340]	; (8006394 <checkAktifCalisma+0x1308>)
 8006240:	779a      	strb	r2, [r3, #30]
					eepromData[29]=calismaSayisi10;
 8006242:	4b50      	ldr	r3, [pc, #320]	; (8006384 <checkAktifCalisma+0x12f8>)
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	4b53      	ldr	r3, [pc, #332]	; (8006394 <checkAktifCalisma+0x1308>)
 8006248:	775a      	strb	r2, [r3, #29]
					eepromData[28]=calismaSayisi1;
 800624a:	4b4d      	ldr	r3, [pc, #308]	; (8006380 <checkAktifCalisma+0x12f4>)
 800624c:	781a      	ldrb	r2, [r3, #0]
 800624e:	4b51      	ldr	r3, [pc, #324]	; (8006394 <checkAktifCalisma+0x1308>)
 8006250:	771a      	strb	r2, [r3, #28]

					hafizaYaz=1;
 8006252:	4b51      	ldr	r3, [pc, #324]	; (8006398 <checkAktifCalisma+0x130c>)
 8006254:	2201      	movs	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8006258:	4b44      	ldr	r3, [pc, #272]	; (800636c <checkAktifCalisma+0x12e0>)
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 800625e:	4b47      	ldr	r3, [pc, #284]	; (800637c <checkAktifCalisma+0x12f0>)
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006268:	484c      	ldr	r0, [pc, #304]	; (800639c <checkAktifCalisma+0x1310>)
 800626a:	f002 f985 	bl	8008578 <HAL_GPIO_ReadPin>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d016      	beq.n	80062a2 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006278:	4848      	ldr	r0, [pc, #288]	; (800639c <checkAktifCalisma+0x1310>)
 800627a:	f002 f97d 	bl	8008578 <HAL_GPIO_ReadPin>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00e      	beq.n	80062a2 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006288:	4844      	ldr	r0, [pc, #272]	; (800639c <checkAktifCalisma+0x1310>)
 800628a:	f002 f975 	bl	8008578 <HAL_GPIO_ReadPin>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006294:	2140      	movs	r1, #64	; 0x40
 8006296:	4836      	ldr	r0, [pc, #216]	; (8006370 <checkAktifCalisma+0x12e4>)
 8006298:	f002 f96e 	bl	8008578 <HAL_GPIO_ReadPin>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <checkAktifCalisma+0x121e>

					startBasili=1;
 80062a2:	4b3f      	ldr	r3, [pc, #252]	; (80063a0 <checkAktifCalisma+0x1314>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	e002      	b.n	80062b0 <checkAktifCalisma+0x1224>
				} else {
					startBasili=0;
 80062aa:	4b3d      	ldr	r3, [pc, #244]	; (80063a0 <checkAktifCalisma+0x1314>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80062b0:	4b3b      	ldr	r3, [pc, #236]	; (80063a0 <checkAktifCalisma+0x1314>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d014      	beq.n	80062e2 <checkAktifCalisma+0x1256>
 80062b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062bc:	4837      	ldr	r0, [pc, #220]	; (800639c <checkAktifCalisma+0x1310>)
 80062be:	f002 f95b 	bl	8008578 <HAL_GPIO_ReadPin>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d10c      	bne.n	80062e2 <checkAktifCalisma+0x1256>

					hataVar=1;
 80062c8:	4b36      	ldr	r3, [pc, #216]	; (80063a4 <checkAktifCalisma+0x1318>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80062ce:	2001      	movs	r0, #1
 80062d0:	f7fe f8f0 	bl	80044b4 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80062d4:	2001      	movs	r0, #1
 80062d6:	f7fe fc2f 	bl	8004b38 <hata2EEPROM>
					acilstophatasi=1;
 80062da:	4b33      	ldr	r3, [pc, #204]	; (80063a8 <checkAktifCalisma+0x131c>)
 80062dc:	2201      	movs	r2, #1
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	e018      	b.n	8006314 <checkAktifCalisma+0x1288>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80062e2:	4b31      	ldr	r3, [pc, #196]	; (80063a8 <checkAktifCalisma+0x131c>)
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d014      	beq.n	8006314 <checkAktifCalisma+0x1288>
 80062ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062ee:	482b      	ldr	r0, [pc, #172]	; (800639c <checkAktifCalisma+0x1310>)
 80062f0:	f002 f942 	bl	8008578 <HAL_GPIO_ReadPin>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10c      	bne.n	8006314 <checkAktifCalisma+0x1288>
 80062fa:	4b29      	ldr	r3, [pc, #164]	; (80063a0 <checkAktifCalisma+0x1314>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	f083 0301 	eor.w	r3, r3, #1
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <checkAktifCalisma+0x1288>
					acilstophatasi=0;
 8006308:	4b27      	ldr	r3, [pc, #156]	; (80063a8 <checkAktifCalisma+0x131c>)
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 800630e:	2001      	movs	r0, #1
 8006310:	f7fe f87c 	bl	800440c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <checkAktifCalisma+0x1320>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	f083 0301 	eor.w	r3, r3, #1
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d04c      	beq.n	80063bc <checkAktifCalisma+0x1330>
 8006322:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006326:	481d      	ldr	r0, [pc, #116]	; (800639c <checkAktifCalisma+0x1310>)
 8006328:	f002 f926 	bl	8008578 <HAL_GPIO_ReadPin>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <checkAktifCalisma+0x12ae>
 8006332:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <checkAktifCalisma+0x1324>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d040      	beq.n	80063bc <checkAktifCalisma+0x1330>
 800633a:	4b1e      	ldr	r3, [pc, #120]	; (80063b4 <checkAktifCalisma+0x1328>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d13c      	bne.n	80063bc <checkAktifCalisma+0x1330>
					hataVar=1;
 8006342:	4b18      	ldr	r3, [pc, #96]	; (80063a4 <checkAktifCalisma+0x1318>)
 8006344:	2201      	movs	r2, #1
 8006346:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8006348:	2002      	movs	r0, #2
 800634a:	f7fe f8b3 	bl	80044b4 <hataKoduLcdGoster>
					hata2EEPROM(2);
 800634e:	2002      	movs	r0, #2
 8006350:	f7fe fbf2 	bl	8004b38 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8006354:	4b18      	ldr	r3, [pc, #96]	; (80063b8 <checkAktifCalisma+0x132c>)
 8006356:	2201      	movs	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e047      	b.n	80063ec <checkAktifCalisma+0x1360>
 800635c:	20000a76 	.word	0x20000a76
 8006360:	20000a75 	.word	0x20000a75
 8006364:	20000a74 	.word	0x20000a74
 8006368:	40010800 	.word	0x40010800
 800636c:	20000a6a 	.word	0x20000a6a
 8006370:	40011000 	.word	0x40011000
 8006374:	20000a32 	.word	0x20000a32
 8006378:	20000a6d 	.word	0x20000a6d
 800637c:	20000a6b 	.word	0x20000a6b
 8006380:	20000a29 	.word	0x20000a29
 8006384:	20000a2a 	.word	0x20000a2a
 8006388:	20000941 	.word	0x20000941
 800638c:	20000942 	.word	0x20000942
 8006390:	20000a2b 	.word	0x20000a2b
 8006394:	200009c0 	.word	0x200009c0
 8006398:	20000a57 	.word	0x20000a57
 800639c:	40010c00 	.word	0x40010c00
 80063a0:	20000a79 	.word	0x20000a79
 80063a4:	20000a80 	.word	0x20000a80
 80063a8:	20000a7b 	.word	0x20000a7b
 80063ac:	20000a82 	.word	0x20000a82
 80063b0:	20000a8c 	.word	0x20000a8c
 80063b4:	20000a30 	.word	0x20000a30
 80063b8:	20000a7c 	.word	0x20000a7c
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80063bc:	4b97      	ldr	r3, [pc, #604]	; (800661c <checkAktifCalisma+0x1590>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d013      	beq.n	80063ec <checkAktifCalisma+0x1360>
 80063c4:	4b96      	ldr	r3, [pc, #600]	; (8006620 <checkAktifCalisma+0x1594>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00f      	beq.n	80063ec <checkAktifCalisma+0x1360>
 80063cc:	4b95      	ldr	r3, [pc, #596]	; (8006624 <checkAktifCalisma+0x1598>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	f083 0301 	eor.w	r3, r3, #1
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d008      	beq.n	80063ec <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 80063da:	4b90      	ldr	r3, [pc, #576]	; (800661c <checkAktifCalisma+0x1590>)
 80063dc:	2200      	movs	r2, #0
 80063de:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80063e0:	4b91      	ldr	r3, [pc, #580]	; (8006628 <checkAktifCalisma+0x159c>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80063e6:	2002      	movs	r0, #2
 80063e8:	f7fe f810 	bl	800440c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80063ec:	4b8f      	ldr	r3, [pc, #572]	; (800662c <checkAktifCalisma+0x15a0>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d11c      	bne.n	800642e <checkAktifCalisma+0x13a2>
 80063f4:	4b8e      	ldr	r3, [pc, #568]	; (8006630 <checkAktifCalisma+0x15a4>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d118      	bne.n	800642e <checkAktifCalisma+0x13a2>
 80063fc:	4b8d      	ldr	r3, [pc, #564]	; (8006634 <checkAktifCalisma+0x15a8>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d014      	beq.n	800642e <checkAktifCalisma+0x13a2>
 8006404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006408:	488b      	ldr	r0, [pc, #556]	; (8006638 <checkAktifCalisma+0x15ac>)
 800640a:	f002 f8b5 	bl	8008578 <HAL_GPIO_ReadPin>
 800640e:	4603      	mov	r3, r0
 8006410:	2b01      	cmp	r3, #1
 8006412:	d10c      	bne.n	800642e <checkAktifCalisma+0x13a2>
					hataVar=1;
 8006414:	4b89      	ldr	r3, [pc, #548]	; (800663c <checkAktifCalisma+0x15b0>)
 8006416:	2201      	movs	r2, #1
 8006418:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 800641a:	2003      	movs	r0, #3
 800641c:	f7fe f84a 	bl	80044b4 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8006420:	2003      	movs	r0, #3
 8006422:	f7fe fb89 	bl	8004b38 <hata2EEPROM>
					basinchatasi=1;
 8006426:	4b86      	ldr	r3, [pc, #536]	; (8006640 <checkAktifCalisma+0x15b4>)
 8006428:	2201      	movs	r2, #1
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	e015      	b.n	800645a <checkAktifCalisma+0x13ce>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800642e:	4b84      	ldr	r3, [pc, #528]	; (8006640 <checkAktifCalisma+0x15b4>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d011      	beq.n	800645a <checkAktifCalisma+0x13ce>
 8006436:	4b7d      	ldr	r3, [pc, #500]	; (800662c <checkAktifCalisma+0x15a0>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d10d      	bne.n	800645a <checkAktifCalisma+0x13ce>
 800643e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006442:	4880      	ldr	r0, [pc, #512]	; (8006644 <checkAktifCalisma+0x15b8>)
 8006444:	f002 f898 	bl	8008578 <HAL_GPIO_ReadPin>
 8006448:	4603      	mov	r3, r0
 800644a:	2b01      	cmp	r3, #1
 800644c:	d105      	bne.n	800645a <checkAktifCalisma+0x13ce>
					basinchatasi=0;
 800644e:	4b7c      	ldr	r3, [pc, #496]	; (8006640 <checkAktifCalisma+0x15b4>)
 8006450:	2200      	movs	r2, #0
 8006452:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 8006454:	2003      	movs	r0, #3
 8006456:	f7fd ffd9 	bl	800440c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800645a:	4b7b      	ldr	r3, [pc, #492]	; (8006648 <checkAktifCalisma+0x15bc>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d103      	bne.n	800646a <checkAktifCalisma+0x13de>
 8006462:	4b7a      	ldr	r3, [pc, #488]	; (800664c <checkAktifCalisma+0x15c0>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01c      	beq.n	80064a4 <checkAktifCalisma+0x1418>
 800646a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800646e:	4878      	ldr	r0, [pc, #480]	; (8006650 <checkAktifCalisma+0x15c4>)
 8006470:	f002 f882 	bl	8008578 <HAL_GPIO_ReadPin>
 8006474:	4603      	mov	r3, r0
 8006476:	2b01      	cmp	r3, #1
 8006478:	d114      	bne.n	80064a4 <checkAktifCalisma+0x1418>
 800647a:	4b76      	ldr	r3, [pc, #472]	; (8006654 <checkAktifCalisma+0x15c8>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d003      	beq.n	800648a <checkAktifCalisma+0x13fe>
 8006482:	4b74      	ldr	r3, [pc, #464]	; (8006654 <checkAktifCalisma+0x15c8>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b03      	cmp	r3, #3
 8006488:	d10c      	bne.n	80064a4 <checkAktifCalisma+0x1418>
					hataVar=1;
 800648a:	4b6c      	ldr	r3, [pc, #432]	; (800663c <checkAktifCalisma+0x15b0>)
 800648c:	2201      	movs	r2, #1
 800648e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006490:	2004      	movs	r0, #4
 8006492:	f7fe f80f 	bl	80044b4 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8006496:	2004      	movs	r0, #4
 8006498:	f7fe fb4e 	bl	8004b38 <hata2EEPROM>
					katkapisivicihatasi=1;
 800649c:	4b6e      	ldr	r3, [pc, #440]	; (8006658 <checkAktifCalisma+0x15cc>)
 800649e:	2201      	movs	r2, #1
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	e01f      	b.n	80064e4 <checkAktifCalisma+0x1458>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80064a4:	4b6c      	ldr	r3, [pc, #432]	; (8006658 <checkAktifCalisma+0x15cc>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01b      	beq.n	80064e4 <checkAktifCalisma+0x1458>
 80064ac:	4b6b      	ldr	r3, [pc, #428]	; (800665c <checkAktifCalisma+0x15d0>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d017      	beq.n	80064e4 <checkAktifCalisma+0x1458>
 80064b4:	4b64      	ldr	r3, [pc, #400]	; (8006648 <checkAktifCalisma+0x15bc>)
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	f083 0301 	eor.w	r3, r3, #1
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d010      	beq.n	80064e4 <checkAktifCalisma+0x1458>
 80064c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064c6:	4862      	ldr	r0, [pc, #392]	; (8006650 <checkAktifCalisma+0x15c4>)
 80064c8:	f002 f856 	bl	8008578 <HAL_GPIO_ReadPin>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d108      	bne.n	80064e4 <checkAktifCalisma+0x1458>

					katkapisivicihatasi=0;
 80064d2:	4b61      	ldr	r3, [pc, #388]	; (8006658 <checkAktifCalisma+0x15cc>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 80064d8:	4b5c      	ldr	r3, [pc, #368]	; (800664c <checkAktifCalisma+0x15c0>)
 80064da:	2200      	movs	r2, #0
 80064dc:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 80064de:	2004      	movs	r0, #4
 80064e0:	f7fd ff94 	bl	800440c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80064e4:	4b58      	ldr	r3, [pc, #352]	; (8006648 <checkAktifCalisma+0x15bc>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <checkAktifCalisma+0x1468>
 80064ec:	4b5c      	ldr	r3, [pc, #368]	; (8006660 <checkAktifCalisma+0x15d4>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01c      	beq.n	800652e <checkAktifCalisma+0x14a2>
 80064f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064f8:	4855      	ldr	r0, [pc, #340]	; (8006650 <checkAktifCalisma+0x15c4>)
 80064fa:	f002 f83d 	bl	8008578 <HAL_GPIO_ReadPin>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b01      	cmp	r3, #1
 8006502:	d114      	bne.n	800652e <checkAktifCalisma+0x14a2>
 8006504:	4b53      	ldr	r3, [pc, #332]	; (8006654 <checkAktifCalisma+0x15c8>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d003      	beq.n	8006514 <checkAktifCalisma+0x1488>
 800650c:	4b51      	ldr	r3, [pc, #324]	; (8006654 <checkAktifCalisma+0x15c8>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b03      	cmp	r3, #3
 8006512:	d10c      	bne.n	800652e <checkAktifCalisma+0x14a2>

					hataVar=1;
 8006514:	4b49      	ldr	r3, [pc, #292]	; (800663c <checkAktifCalisma+0x15b0>)
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 800651a:	2005      	movs	r0, #5
 800651c:	f7fd ffca 	bl	80044b4 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8006520:	2005      	movs	r0, #5
 8006522:	f7fe fb09 	bl	8004b38 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8006526:	4b4f      	ldr	r3, [pc, #316]	; (8006664 <checkAktifCalisma+0x15d8>)
 8006528:	2201      	movs	r2, #1
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	e023      	b.n	8006576 <checkAktifCalisma+0x14ea>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800652e:	4b4d      	ldr	r3, [pc, #308]	; (8006664 <checkAktifCalisma+0x15d8>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01f      	beq.n	8006576 <checkAktifCalisma+0x14ea>
 8006536:	4b49      	ldr	r3, [pc, #292]	; (800665c <checkAktifCalisma+0x15d0>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d01b      	beq.n	8006576 <checkAktifCalisma+0x14ea>
 800653e:	4b42      	ldr	r3, [pc, #264]	; (8006648 <checkAktifCalisma+0x15bc>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	f083 0301 	eor.w	r3, r3, #1
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d014      	beq.n	8006576 <checkAktifCalisma+0x14ea>
 800654c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006550:	483f      	ldr	r0, [pc, #252]	; (8006650 <checkAktifCalisma+0x15c4>)
 8006552:	f002 f811 	bl	8008578 <HAL_GPIO_ReadPin>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10c      	bne.n	8006576 <checkAktifCalisma+0x14ea>
 800655c:	4b3f      	ldr	r3, [pc, #252]	; (800665c <checkAktifCalisma+0x15d0>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d008      	beq.n	8006576 <checkAktifCalisma+0x14ea>
					tablakapisivicihatasi=0;
 8006564:	4b3f      	ldr	r3, [pc, #252]	; (8006664 <checkAktifCalisma+0x15d8>)
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 800656a:	4b3d      	ldr	r3, [pc, #244]	; (8006660 <checkAktifCalisma+0x15d4>)
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8006570:	2005      	movs	r0, #5
 8006572:	f7fd ff4b 	bl	800440c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006576:	4b2f      	ldr	r3, [pc, #188]	; (8006634 <checkAktifCalisma+0x15a8>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d107      	bne.n	800658e <checkAktifCalisma+0x1502>
 800657e:	4b29      	ldr	r3, [pc, #164]	; (8006624 <checkAktifCalisma+0x1598>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d103      	bne.n	800658e <checkAktifCalisma+0x1502>
 8006586:	4b38      	ldr	r3, [pc, #224]	; (8006668 <checkAktifCalisma+0x15dc>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d014      	beq.n	80065b8 <checkAktifCalisma+0x152c>
				    if(millis-timer4>=makineCalismaTmr) {
 800658e:	4b37      	ldr	r3, [pc, #220]	; (800666c <checkAktifCalisma+0x15e0>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b37      	ldr	r3, [pc, #220]	; (8006670 <checkAktifCalisma+0x15e4>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	4a36      	ldr	r2, [pc, #216]	; (8006674 <checkAktifCalisma+0x15e8>)
 800659a:	7812      	ldrb	r2, [r2, #0]
 800659c:	4293      	cmp	r3, r2
 800659e:	d30b      	bcc.n	80065b8 <checkAktifCalisma+0x152c>
					  	hataVar=1;
 80065a0:	4b26      	ldr	r3, [pc, #152]	; (800663c <checkAktifCalisma+0x15b0>)
 80065a2:	2201      	movs	r2, #1
 80065a4:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 80065a6:	2006      	movs	r0, #6
 80065a8:	f7fd ff84 	bl	80044b4 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 80065ac:	2006      	movs	r0, #6
 80065ae:	f7fe fac3 	bl	8004b38 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 80065b2:	4b31      	ldr	r3, [pc, #196]	; (8006678 <checkAktifCalisma+0x15ec>)
 80065b4:	2201      	movs	r2, #1
 80065b6:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80065b8:	4b2f      	ldr	r3, [pc, #188]	; (8006678 <checkAktifCalisma+0x15ec>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d013      	beq.n	80065e8 <checkAktifCalisma+0x155c>
 80065c0:	2108      	movs	r1, #8
 80065c2:	4823      	ldr	r0, [pc, #140]	; (8006650 <checkAktifCalisma+0x15c4>)
 80065c4:	f001 ffd8 	bl	8008578 <HAL_GPIO_ReadPin>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <checkAktifCalisma+0x155c>
 80065ce:	4b1e      	ldr	r3, [pc, #120]	; (8006648 <checkAktifCalisma+0x15bc>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f083 0301 	eor.w	r3, r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d005      	beq.n	80065e8 <checkAktifCalisma+0x155c>
					maksimumcalismahatasi=0;
 80065dc:	4b26      	ldr	r3, [pc, #152]	; (8006678 <checkAktifCalisma+0x15ec>)
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 80065e2:	2006      	movs	r0, #6
 80065e4:	f7fd ff12 	bl	800440c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80065e8:	4b24      	ldr	r3, [pc, #144]	; (800667c <checkAktifCalisma+0x15f0>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10b      	bne.n	8006608 <checkAktifCalisma+0x157c>
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <checkAktifCalisma+0x1598>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <checkAktifCalisma+0x157c>
 80065f8:	4b21      	ldr	r3, [pc, #132]	; (8006680 <checkAktifCalisma+0x15f4>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d103      	bne.n	8006608 <checkAktifCalisma+0x157c>
 8006600:	4b19      	ldr	r3, [pc, #100]	; (8006668 <checkAktifCalisma+0x15dc>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d03f      	beq.n	8006688 <checkAktifCalisma+0x15fc>
					makineCalisiyor=0;
 8006608:	4b1e      	ldr	r3, [pc, #120]	; (8006684 <checkAktifCalisma+0x15f8>)
 800660a:	2200      	movs	r2, #0
 800660c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 800660e:	4b0f      	ldr	r3, [pc, #60]	; (800664c <checkAktifCalisma+0x15c0>)
 8006610:	2201      	movs	r2, #1
 8006612:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006614:	4b12      	ldr	r3, [pc, #72]	; (8006660 <checkAktifCalisma+0x15d4>)
 8006616:	2201      	movs	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	e03c      	b.n	8006696 <checkAktifCalisma+0x160a>
 800661c:	20000a7c 	.word	0x20000a7c
 8006620:	20000a82 	.word	0x20000a82
 8006624:	20000a63 	.word	0x20000a63
 8006628:	20000a8c 	.word	0x20000a8c
 800662c:	20000a2f 	.word	0x20000a2f
 8006630:	20000a33 	.word	0x20000a33
 8006634:	20000a7f 	.word	0x20000a7f
 8006638:	40011000 	.word	0x40011000
 800663c:	20000a80 	.word	0x20000a80
 8006640:	20000a89 	.word	0x20000a89
 8006644:	40010c00 	.word	0x40010c00
 8006648:	20000a79 	.word	0x20000a79
 800664c:	20000a8d 	.word	0x20000a8d
 8006650:	40010800 	.word	0x40010800
 8006654:	20000a34 	.word	0x20000a34
 8006658:	20000a8a 	.word	0x20000a8a
 800665c:	20000a6d 	.word	0x20000a6d
 8006660:	20000a8e 	.word	0x20000a8e
 8006664:	20000a8b 	.word	0x20000a8b
 8006668:	20000a62 	.word	0x20000a62
 800666c:	20000a08 	.word	0x20000a08
 8006670:	20000a1c 	.word	0x20000a1c
 8006674:	20000a44 	.word	0x20000a44
 8006678:	20000a7a 	.word	0x20000a7a
 800667c:	20000a60 	.word	0x20000a60
 8006680:	20000a61 	.word	0x20000a61
 8006684:	20000a81 	.word	0x20000a81
				} else {
					makineCalisiyor=1;
 8006688:	4b1e      	ldr	r3, [pc, #120]	; (8006704 <checkAktifCalisma+0x1678>)
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 800668e:	4b1e      	ldr	r3, [pc, #120]	; (8006708 <checkAktifCalisma+0x167c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1e      	ldr	r2, [pc, #120]	; (800670c <checkAktifCalisma+0x1680>)
 8006694:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006696:	4b1e      	ldr	r3, [pc, #120]	; (8006710 <checkAktifCalisma+0x1684>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02f      	beq.n	80066fe <checkAktifCalisma+0x1672>
 800669e:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <checkAktifCalisma+0x1688>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	f083 0301 	eor.w	r3, r3, #1
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d028      	beq.n	80066fe <checkAktifCalisma+0x1672>
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <checkAktifCalisma+0x168c>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	f083 0301 	eor.w	r3, r3, #1
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d021      	beq.n	80066fe <checkAktifCalisma+0x1672>
 80066ba:	4b18      	ldr	r3, [pc, #96]	; (800671c <checkAktifCalisma+0x1690>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f083 0301 	eor.w	r3, r3, #1
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01a      	beq.n	80066fe <checkAktifCalisma+0x1672>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80066c8:	4b15      	ldr	r3, [pc, #84]	; (8006720 <checkAktifCalisma+0x1694>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	f083 0301 	eor.w	r3, r3, #1
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d013      	beq.n	80066fe <checkAktifCalisma+0x1672>
 80066d6:	4b13      	ldr	r3, [pc, #76]	; (8006724 <checkAktifCalisma+0x1698>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f083 0301 	eor.w	r3, r3, #1
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00c      	beq.n	80066fe <checkAktifCalisma+0x1672>
 80066e4:	4b10      	ldr	r3, [pc, #64]	; (8006728 <checkAktifCalisma+0x169c>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	f083 0301 	eor.w	r3, r3, #1
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <checkAktifCalisma+0x1672>

					hataVar=0;
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <checkAktifCalisma+0x1684>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 80066f8:	2007      	movs	r0, #7
 80066fa:	f7fd fe87 	bl	800440c <lcdUpdate>
				}


				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 80066fe:	bf00      	nop
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000a81 	.word	0x20000a81
 8006708:	20000a08 	.word	0x20000a08
 800670c:	20000a1c 	.word	0x20000a1c
 8006710:	20000a80 	.word	0x20000a80
 8006714:	20000a7b 	.word	0x20000a7b
 8006718:	20000a7c 	.word	0x20000a7c
 800671c:	20000a89 	.word	0x20000a89
 8006720:	20000a8a 	.word	0x20000a8a
 8006724:	20000a8b 	.word	0x20000a8b
 8006728:	20000a7a 	.word	0x20000a7a

0800672c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006730:	4b8b      	ldr	r3, [pc, #556]	; (8006960 <checkDemoModCalisma+0x234>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	f040 8229 	bne.w	8006b8c <checkDemoModCalisma+0x460>
 800673a:	4b8a      	ldr	r3, [pc, #552]	; (8006964 <checkDemoModCalisma+0x238>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8224 	beq.w	8006b8c <checkDemoModCalisma+0x460>
 8006744:	4b88      	ldr	r3, [pc, #544]	; (8006968 <checkDemoModCalisma+0x23c>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f040 821f 	bne.w	8006b8c <checkDemoModCalisma+0x460>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800674e:	2102      	movs	r1, #2
 8006750:	4886      	ldr	r0, [pc, #536]	; (800696c <checkDemoModCalisma+0x240>)
 8006752:	f001 ff11 	bl	8008578 <HAL_GPIO_ReadPin>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d11d      	bne.n	8006798 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 800675c:	4b84      	ldr	r3, [pc, #528]	; (8006970 <checkDemoModCalisma+0x244>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	f083 0301 	eor.w	r3, r3, #1
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d016      	beq.n	8006798 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 800676a:	4b82      	ldr	r3, [pc, #520]	; (8006974 <checkDemoModCalisma+0x248>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	f083 0301 	eor.w	r3, r3, #1
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00f      	beq.n	8006798 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8006778:	4b7f      	ldr	r3, [pc, #508]	; (8006978 <checkDemoModCalisma+0x24c>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f083 0301 	eor.w	r3, r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d008      	beq.n	8006798 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006786:	2201      	movs	r2, #1
 8006788:	2104      	movs	r1, #4
 800678a:	487c      	ldr	r0, [pc, #496]	; (800697c <checkDemoModCalisma+0x250>)
 800678c:	f001 ff0b 	bl	80085a6 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8006790:	4b7b      	ldr	r3, [pc, #492]	; (8006980 <checkDemoModCalisma+0x254>)
 8006792:	2201      	movs	r2, #1
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	e00e      	b.n	80067b6 <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006798:	2102      	movs	r1, #2
 800679a:	4874      	ldr	r0, [pc, #464]	; (800696c <checkDemoModCalisma+0x240>)
 800679c:	f001 feec 	bl	8008578 <HAL_GPIO_ReadPin>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d107      	bne.n	80067b6 <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80067a6:	2200      	movs	r2, #0
 80067a8:	2104      	movs	r1, #4
 80067aa:	4874      	ldr	r0, [pc, #464]	; (800697c <checkDemoModCalisma+0x250>)
 80067ac:	f001 fefb 	bl	80085a6 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 80067b0:	4b73      	ldr	r3, [pc, #460]	; (8006980 <checkDemoModCalisma+0x254>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80067b6:	4b72      	ldr	r3, [pc, #456]	; (8006980 <checkDemoModCalisma+0x254>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10b      	bne.n	80067d6 <checkDemoModCalisma+0xaa>
 80067be:	4b6d      	ldr	r3, [pc, #436]	; (8006974 <checkDemoModCalisma+0x248>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d107      	bne.n	80067d6 <checkDemoModCalisma+0xaa>
 80067c6:	4b6c      	ldr	r3, [pc, #432]	; (8006978 <checkDemoModCalisma+0x24c>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d103      	bne.n	80067d6 <checkDemoModCalisma+0xaa>
 80067ce:	4b68      	ldr	r3, [pc, #416]	; (8006970 <checkDemoModCalisma+0x244>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00c      	beq.n	80067f0 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80067d6:	2201      	movs	r2, #1
 80067d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067dc:	4867      	ldr	r0, [pc, #412]	; (800697c <checkDemoModCalisma+0x250>)
 80067de:	f001 fee2 	bl	80085a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80067e2:	2201      	movs	r2, #1
 80067e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067e8:	4864      	ldr	r0, [pc, #400]	; (800697c <checkDemoModCalisma+0x250>)
 80067ea:	f001 fedc 	bl	80085a6 <HAL_GPIO_WritePin>
 80067ee:	e00b      	b.n	8006808 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80067f0:	2200      	movs	r2, #0
 80067f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067f6:	4861      	ldr	r0, [pc, #388]	; (800697c <checkDemoModCalisma+0x250>)
 80067f8:	f001 fed5 	bl	80085a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80067fc:	2200      	movs	r2, #0
 80067fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006802:	485e      	ldr	r0, [pc, #376]	; (800697c <checkDemoModCalisma+0x250>)
 8006804:	f001 fecf 	bl	80085a6 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006808:	2102      	movs	r1, #2
 800680a:	4858      	ldr	r0, [pc, #352]	; (800696c <checkDemoModCalisma+0x240>)
 800680c:	f001 feb4 	bl	8008578 <HAL_GPIO_ReadPin>
 8006810:	4603      	mov	r3, r0
 8006812:	2b01      	cmp	r3, #1
 8006814:	d10d      	bne.n	8006832 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800681a:	4854      	ldr	r0, [pc, #336]	; (800696c <checkDemoModCalisma+0x240>)
 800681c:	f001 feac 	bl	8008578 <HAL_GPIO_ReadPin>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8006826:	4b56      	ldr	r3, [pc, #344]	; (8006980 <checkDemoModCalisma+0x254>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	f083 0301 	eor.w	r3, r3, #1
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006832:	2102      	movs	r1, #2
 8006834:	484d      	ldr	r0, [pc, #308]	; (800696c <checkDemoModCalisma+0x240>)
 8006836:	f001 fe9f 	bl	8008578 <HAL_GPIO_ReadPin>
 800683a:	4603      	mov	r3, r0
 800683c:	2b01      	cmp	r3, #1
 800683e:	d125      	bne.n	800688c <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006840:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006844:	4849      	ldr	r0, [pc, #292]	; (800696c <checkDemoModCalisma+0x240>)
 8006846:	f001 fe97 	bl	8008578 <HAL_GPIO_ReadPin>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d11d      	bne.n	800688c <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8006850:	4b4b      	ldr	r3, [pc, #300]	; (8006980 <checkDemoModCalisma+0x254>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f083 0301 	eor.w	r3, r3, #1
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 800685e:	4b44      	ldr	r3, [pc, #272]	; (8006970 <checkDemoModCalisma+0x244>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f083 0301 	eor.w	r3, r3, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00f      	beq.n	800688c <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 800686c:	4b42      	ldr	r3, [pc, #264]	; (8006978 <checkDemoModCalisma+0x24c>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f083 0301 	eor.w	r3, r3, #1
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d008      	beq.n	800688c <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800687a:	2201      	movs	r2, #1
 800687c:	2120      	movs	r1, #32
 800687e:	483b      	ldr	r0, [pc, #236]	; (800696c <checkDemoModCalisma+0x240>)
 8006880:	f001 fe91 	bl	80085a6 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006884:	4b3b      	ldr	r3, [pc, #236]	; (8006974 <checkDemoModCalisma+0x248>)
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	e007      	b.n	800689c <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800688c:	2200      	movs	r2, #0
 800688e:	2120      	movs	r1, #32
 8006890:	4836      	ldr	r0, [pc, #216]	; (800696c <checkDemoModCalisma+0x240>)
 8006892:	f001 fe88 	bl	80085a6 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006896:	4b37      	ldr	r3, [pc, #220]	; (8006974 <checkDemoModCalisma+0x248>)
 8006898:	2200      	movs	r2, #0
 800689a:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800689c:	2102      	movs	r1, #2
 800689e:	4833      	ldr	r0, [pc, #204]	; (800696c <checkDemoModCalisma+0x240>)
 80068a0:	f001 fe6a 	bl	8008578 <HAL_GPIO_ReadPin>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d125      	bne.n	80068f6 <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80068aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80068ae:	482f      	ldr	r0, [pc, #188]	; (800696c <checkDemoModCalisma+0x240>)
 80068b0:	f001 fe62 	bl	8008578 <HAL_GPIO_ReadPin>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d11d      	bne.n	80068f6 <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 80068ba:	4b31      	ldr	r3, [pc, #196]	; (8006980 <checkDemoModCalisma+0x254>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	f083 0301 	eor.w	r3, r3, #1
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d016      	beq.n	80068f6 <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 80068c8:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <checkDemoModCalisma+0x248>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	f083 0301 	eor.w	r3, r3, #1
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00f      	beq.n	80068f6 <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 80068d6:	4b26      	ldr	r3, [pc, #152]	; (8006970 <checkDemoModCalisma+0x244>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f083 0301 	eor.w	r3, r3, #1
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d008      	beq.n	80068f6 <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80068e4:	2201      	movs	r2, #1
 80068e6:	2110      	movs	r1, #16
 80068e8:	4820      	ldr	r0, [pc, #128]	; (800696c <checkDemoModCalisma+0x240>)
 80068ea:	f001 fe5c 	bl	80085a6 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 80068ee:	4b22      	ldr	r3, [pc, #136]	; (8006978 <checkDemoModCalisma+0x24c>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	e007      	b.n	8006906 <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80068f6:	2200      	movs	r2, #0
 80068f8:	2110      	movs	r1, #16
 80068fa:	481c      	ldr	r0, [pc, #112]	; (800696c <checkDemoModCalisma+0x240>)
 80068fc:	f001 fe53 	bl	80085a6 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006900:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <checkDemoModCalisma+0x24c>)
 8006902:	2200      	movs	r2, #0
 8006904:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006906:	2104      	movs	r1, #4
 8006908:	4818      	ldr	r0, [pc, #96]	; (800696c <checkDemoModCalisma+0x240>)
 800690a:	f001 fe35 	bl	8008578 <HAL_GPIO_ReadPin>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d139      	bne.n	8006988 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8006914:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <checkDemoModCalisma+0x254>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	f083 0301 	eor.w	r3, r3, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d032      	beq.n	8006988 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8006922:	4b15      	ldr	r3, [pc, #84]	; (8006978 <checkDemoModCalisma+0x24c>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	f083 0301 	eor.w	r3, r3, #1
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d02b      	beq.n	8006988 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8006930:	4b10      	ldr	r3, [pc, #64]	; (8006974 <checkDemoModCalisma+0x248>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f083 0301 	eor.w	r3, r3, #1
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d024      	beq.n	8006988 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800693e:	2201      	movs	r2, #1
 8006940:	2102      	movs	r1, #2
 8006942:	480e      	ldr	r0, [pc, #56]	; (800697c <checkDemoModCalisma+0x250>)
 8006944:	f001 fe2f 	bl	80085a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006948:	2201      	movs	r2, #1
 800694a:	2101      	movs	r1, #1
 800694c:	480b      	ldr	r0, [pc, #44]	; (800697c <checkDemoModCalisma+0x250>)
 800694e:	f001 fe2a 	bl	80085a6 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <checkDemoModCalisma+0x244>)
 8006954:	2201      	movs	r2, #1
 8006956:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <checkDemoModCalisma+0x258>)
 800695a:	2201      	movs	r2, #1
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	e027      	b.n	80069b0 <checkDemoModCalisma+0x284>
 8006960:	20000a4a 	.word	0x20000a4a
 8006964:	20000a7d 	.word	0x20000a7d
 8006968:	20000a49 	.word	0x20000a49
 800696c:	40011000 	.word	0x40011000
 8006970:	20000a84 	.word	0x20000a84
 8006974:	20000a85 	.word	0x20000a85
 8006978:	20000a86 	.word	0x20000a86
 800697c:	40010c00 	.word	0x40010c00
 8006980:	20000a83 	.word	0x20000a83
 8006984:	20000a69 	.word	0x20000a69
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006988:	2104      	movs	r1, #4
 800698a:	48a0      	ldr	r0, [pc, #640]	; (8006c0c <checkDemoModCalisma+0x4e0>)
 800698c:	f001 fdf4 	bl	8008578 <HAL_GPIO_ReadPin>
 8006990:	4603      	mov	r3, r0
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10c      	bne.n	80069b0 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006996:	2200      	movs	r2, #0
 8006998:	2102      	movs	r1, #2
 800699a:	489d      	ldr	r0, [pc, #628]	; (8006c10 <checkDemoModCalisma+0x4e4>)
 800699c:	f001 fe03 	bl	80085a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80069a0:	2200      	movs	r2, #0
 80069a2:	2101      	movs	r1, #1
 80069a4:	489a      	ldr	r0, [pc, #616]	; (8006c10 <checkDemoModCalisma+0x4e4>)
 80069a6:	f001 fdfe 	bl	80085a6 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 80069aa:	4b9a      	ldr	r3, [pc, #616]	; (8006c14 <checkDemoModCalisma+0x4e8>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80069b0:	2104      	movs	r1, #4
 80069b2:	4896      	ldr	r0, [pc, #600]	; (8006c0c <checkDemoModCalisma+0x4e0>)
 80069b4:	f001 fde0 	bl	8008578 <HAL_GPIO_ReadPin>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d10d      	bne.n	80069da <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80069be:	2201      	movs	r2, #1
 80069c0:	2180      	movs	r1, #128	; 0x80
 80069c2:	4895      	ldr	r0, [pc, #596]	; (8006c18 <checkDemoModCalisma+0x4ec>)
 80069c4:	f001 fdef 	bl	80085a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80069c8:	2201      	movs	r2, #1
 80069ca:	2120      	movs	r1, #32
 80069cc:	4892      	ldr	r0, [pc, #584]	; (8006c18 <checkDemoModCalisma+0x4ec>)
 80069ce:	f001 fdea 	bl	80085a6 <HAL_GPIO_WritePin>
					timer3 = millis;
 80069d2:	4b92      	ldr	r3, [pc, #584]	; (8006c1c <checkDemoModCalisma+0x4f0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a92      	ldr	r2, [pc, #584]	; (8006c20 <checkDemoModCalisma+0x4f4>)
 80069d8:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 80069da:	4b90      	ldr	r3, [pc, #576]	; (8006c1c <checkDemoModCalisma+0x4f0>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	4b90      	ldr	r3, [pc, #576]	; (8006c20 <checkDemoModCalisma+0x4f4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d909      	bls.n	80069fc <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80069e8:	2200      	movs	r2, #0
 80069ea:	2180      	movs	r1, #128	; 0x80
 80069ec:	488a      	ldr	r0, [pc, #552]	; (8006c18 <checkDemoModCalisma+0x4ec>)
 80069ee:	f001 fdda 	bl	80085a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80069f2:	2200      	movs	r2, #0
 80069f4:	2120      	movs	r1, #32
 80069f6:	4888      	ldr	r0, [pc, #544]	; (8006c18 <checkDemoModCalisma+0x4ec>)
 80069f8:	f001 fdd5 	bl	80085a6 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80069fc:	2102      	movs	r1, #2
 80069fe:	4883      	ldr	r0, [pc, #524]	; (8006c0c <checkDemoModCalisma+0x4e0>)
 8006a00:	f001 fdba 	bl	8008578 <HAL_GPIO_ReadPin>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d108      	bne.n	8006a1c <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	2140      	movs	r1, #64	; 0x40
 8006a0e:	4882      	ldr	r0, [pc, #520]	; (8006c18 <checkDemoModCalisma+0x4ec>)
 8006a10:	f001 fdc9 	bl	80085a6 <HAL_GPIO_WritePin>
					timer3 = millis;
 8006a14:	4b81      	ldr	r3, [pc, #516]	; (8006c1c <checkDemoModCalisma+0x4f0>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a81      	ldr	r2, [pc, #516]	; (8006c20 <checkDemoModCalisma+0x4f4>)
 8006a1a:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006a1c:	4b7f      	ldr	r3, [pc, #508]	; (8006c1c <checkDemoModCalisma+0x4f0>)
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	4b7f      	ldr	r3, [pc, #508]	; (8006c20 <checkDemoModCalisma+0x4f4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d904      	bls.n	8006a34 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2140      	movs	r1, #64	; 0x40
 8006a2e:	487a      	ldr	r0, [pc, #488]	; (8006c18 <checkDemoModCalisma+0x4ec>)
 8006a30:	f001 fdb9 	bl	80085a6 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006a34:	4b7b      	ldr	r3, [pc, #492]	; (8006c24 <checkDemoModCalisma+0x4f8>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d058      	beq.n	8006aee <checkDemoModCalisma+0x3c2>
 8006a3c:	4b7a      	ldr	r3, [pc, #488]	; (8006c28 <checkDemoModCalisma+0x4fc>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d054      	beq.n	8006aee <checkDemoModCalisma+0x3c2>
					//mesajYazildi=0;
					calismaSayisi1=calismaSayisi1+1;
 8006a44:	4b79      	ldr	r3, [pc, #484]	; (8006c2c <checkDemoModCalisma+0x500>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	4b77      	ldr	r3, [pc, #476]	; (8006c2c <checkDemoModCalisma+0x500>)
 8006a4e:	701a      	strb	r2, [r3, #0]

					if(calismaSayisi1>9) {
 8006a50:	4b76      	ldr	r3, [pc, #472]	; (8006c2c <checkDemoModCalisma+0x500>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b09      	cmp	r3, #9
 8006a56:	d908      	bls.n	8006a6a <checkDemoModCalisma+0x33e>
						calismaSayisi1=0;
 8006a58:	4b74      	ldr	r3, [pc, #464]	; (8006c2c <checkDemoModCalisma+0x500>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
						calismaSayisi10=calismaSayisi10+1;
 8006a5e:	4b74      	ldr	r3, [pc, #464]	; (8006c30 <checkDemoModCalisma+0x504>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	3301      	adds	r3, #1
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	4b72      	ldr	r3, [pc, #456]	; (8006c30 <checkDemoModCalisma+0x504>)
 8006a68:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi10>9) {
 8006a6a:	4b71      	ldr	r3, [pc, #452]	; (8006c30 <checkDemoModCalisma+0x504>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b09      	cmp	r3, #9
 8006a70:	d908      	bls.n	8006a84 <checkDemoModCalisma+0x358>
						calismaSayisi10=0;
 8006a72:	4b6f      	ldr	r3, [pc, #444]	; (8006c30 <checkDemoModCalisma+0x504>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	701a      	strb	r2, [r3, #0]
						calismaSayisi100=calismaSayisi100+1;
 8006a78:	4b6e      	ldr	r3, [pc, #440]	; (8006c34 <checkDemoModCalisma+0x508>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	4b6c      	ldr	r3, [pc, #432]	; (8006c34 <checkDemoModCalisma+0x508>)
 8006a82:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi100>9) {
 8006a84:	4b6b      	ldr	r3, [pc, #428]	; (8006c34 <checkDemoModCalisma+0x508>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b09      	cmp	r3, #9
 8006a8a:	d908      	bls.n	8006a9e <checkDemoModCalisma+0x372>
						calismaSayisi100=0;
 8006a8c:	4b69      	ldr	r3, [pc, #420]	; (8006c34 <checkDemoModCalisma+0x508>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
						calismaSayisi1000=calismaSayisi1000+1;
 8006a92:	4b69      	ldr	r3, [pc, #420]	; (8006c38 <checkDemoModCalisma+0x50c>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	4b67      	ldr	r3, [pc, #412]	; (8006c38 <checkDemoModCalisma+0x50c>)
 8006a9c:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi1000>9) {
 8006a9e:	4b66      	ldr	r3, [pc, #408]	; (8006c38 <checkDemoModCalisma+0x50c>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b09      	cmp	r3, #9
 8006aa4:	d908      	bls.n	8006ab8 <checkDemoModCalisma+0x38c>
						calismaSayisi1000=0;
 8006aa6:	4b64      	ldr	r3, [pc, #400]	; (8006c38 <checkDemoModCalisma+0x50c>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
						calismaSayisi10000=calismaSayisi10000+1;
 8006aac:	4b63      	ldr	r3, [pc, #396]	; (8006c3c <checkDemoModCalisma+0x510>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <checkDemoModCalisma+0x510>)
 8006ab6:	701a      	strb	r2, [r3, #0]
					}
					eepromData[32]=calismaSayisi10000;
 8006ab8:	4b60      	ldr	r3, [pc, #384]	; (8006c3c <checkDemoModCalisma+0x510>)
 8006aba:	781a      	ldrb	r2, [r3, #0]
 8006abc:	4b60      	ldr	r3, [pc, #384]	; (8006c40 <checkDemoModCalisma+0x514>)
 8006abe:	f883 2020 	strb.w	r2, [r3, #32]
					eepromData[31]=calismaSayisi1000;
 8006ac2:	4b5d      	ldr	r3, [pc, #372]	; (8006c38 <checkDemoModCalisma+0x50c>)
 8006ac4:	781a      	ldrb	r2, [r3, #0]
 8006ac6:	4b5e      	ldr	r3, [pc, #376]	; (8006c40 <checkDemoModCalisma+0x514>)
 8006ac8:	77da      	strb	r2, [r3, #31]
					eepromData[30]=calismaSayisi100;
 8006aca:	4b5a      	ldr	r3, [pc, #360]	; (8006c34 <checkDemoModCalisma+0x508>)
 8006acc:	781a      	ldrb	r2, [r3, #0]
 8006ace:	4b5c      	ldr	r3, [pc, #368]	; (8006c40 <checkDemoModCalisma+0x514>)
 8006ad0:	779a      	strb	r2, [r3, #30]
					eepromData[29]=calismaSayisi10;
 8006ad2:	4b57      	ldr	r3, [pc, #348]	; (8006c30 <checkDemoModCalisma+0x504>)
 8006ad4:	781a      	ldrb	r2, [r3, #0]
 8006ad6:	4b5a      	ldr	r3, [pc, #360]	; (8006c40 <checkDemoModCalisma+0x514>)
 8006ad8:	775a      	strb	r2, [r3, #29]
					eepromData[28]=calismaSayisi1;
 8006ada:	4b54      	ldr	r3, [pc, #336]	; (8006c2c <checkDemoModCalisma+0x500>)
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	4b58      	ldr	r3, [pc, #352]	; (8006c40 <checkDemoModCalisma+0x514>)
 8006ae0:	771a      	strb	r2, [r3, #28]
					hafizaYaz=1;
 8006ae2:	4b58      	ldr	r3, [pc, #352]	; (8006c44 <checkDemoModCalisma+0x518>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	701a      	strb	r2, [r3, #0]
			   		//mesajYazildi=0;
					demoCalismaSayisiYar=0;
 8006ae8:	4b4f      	ldr	r3, [pc, #316]	; (8006c28 <checkDemoModCalisma+0x4fc>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8006aee:	4b56      	ldr	r3, [pc, #344]	; (8006c48 <checkDemoModCalisma+0x51c>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f040 8087 	bne.w	8006c06 <checkDemoModCalisma+0x4da>
					lcd_print(2,1,"Cycle      ");
 8006af8:	4a54      	ldr	r2, [pc, #336]	; (8006c4c <checkDemoModCalisma+0x520>)
 8006afa:	2101      	movs	r1, #1
 8006afc:	2002      	movs	r0, #2
 8006afe:	f7f9 fcc0 	bl	8000482 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8006b02:	4a53      	ldr	r2, [pc, #332]	; (8006c50 <checkDemoModCalisma+0x524>)
 8006b04:	2101      	movs	r1, #1
 8006b06:	2001      	movs	r0, #1
 8006b08:	f7f9 fcbb 	bl	8000482 <lcd_print>
					itoa(calismaSayisi10000, snum, 10);
 8006b0c:	4b4b      	ldr	r3, [pc, #300]	; (8006c3c <checkDemoModCalisma+0x510>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	220a      	movs	r2, #10
 8006b12:	4950      	ldr	r1, [pc, #320]	; (8006c54 <checkDemoModCalisma+0x528>)
 8006b14:	4618      	mov	r0, r3
 8006b16:	f004 fe17 	bl	800b748 <itoa>
					lcd_print(2,12,snum);
 8006b1a:	4a4e      	ldr	r2, [pc, #312]	; (8006c54 <checkDemoModCalisma+0x528>)
 8006b1c:	210c      	movs	r1, #12
 8006b1e:	2002      	movs	r0, #2
 8006b20:	f7f9 fcaf 	bl	8000482 <lcd_print>
					itoa(calismaSayisi1000, snum, 10);
 8006b24:	4b44      	ldr	r3, [pc, #272]	; (8006c38 <checkDemoModCalisma+0x50c>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	220a      	movs	r2, #10
 8006b2a:	494a      	ldr	r1, [pc, #296]	; (8006c54 <checkDemoModCalisma+0x528>)
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f004 fe0b 	bl	800b748 <itoa>
					lcd_print(2,13,snum);
 8006b32:	4a48      	ldr	r2, [pc, #288]	; (8006c54 <checkDemoModCalisma+0x528>)
 8006b34:	210d      	movs	r1, #13
 8006b36:	2002      	movs	r0, #2
 8006b38:	f7f9 fca3 	bl	8000482 <lcd_print>
					itoa(calismaSayisi100, snum, 10);
 8006b3c:	4b3d      	ldr	r3, [pc, #244]	; (8006c34 <checkDemoModCalisma+0x508>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	220a      	movs	r2, #10
 8006b42:	4944      	ldr	r1, [pc, #272]	; (8006c54 <checkDemoModCalisma+0x528>)
 8006b44:	4618      	mov	r0, r3
 8006b46:	f004 fdff 	bl	800b748 <itoa>
					lcd_print(2,14,snum);
 8006b4a:	4a42      	ldr	r2, [pc, #264]	; (8006c54 <checkDemoModCalisma+0x528>)
 8006b4c:	210e      	movs	r1, #14
 8006b4e:	2002      	movs	r0, #2
 8006b50:	f7f9 fc97 	bl	8000482 <lcd_print>
					itoa(calismaSayisi10, snum, 10);
 8006b54:	4b36      	ldr	r3, [pc, #216]	; (8006c30 <checkDemoModCalisma+0x504>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	220a      	movs	r2, #10
 8006b5a:	493e      	ldr	r1, [pc, #248]	; (8006c54 <checkDemoModCalisma+0x528>)
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f004 fdf3 	bl	800b748 <itoa>
					lcd_print(2,15,snum);
 8006b62:	4a3c      	ldr	r2, [pc, #240]	; (8006c54 <checkDemoModCalisma+0x528>)
 8006b64:	210f      	movs	r1, #15
 8006b66:	2002      	movs	r0, #2
 8006b68:	f7f9 fc8b 	bl	8000482 <lcd_print>
					itoa(calismaSayisi1, snum, 10);
 8006b6c:	4b2f      	ldr	r3, [pc, #188]	; (8006c2c <checkDemoModCalisma+0x500>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	220a      	movs	r2, #10
 8006b72:	4938      	ldr	r1, [pc, #224]	; (8006c54 <checkDemoModCalisma+0x528>)
 8006b74:	4618      	mov	r0, r3
 8006b76:	f004 fde7 	bl	800b748 <itoa>
					lcd_print(2,16,snum);
 8006b7a:	4a36      	ldr	r2, [pc, #216]	; (8006c54 <checkDemoModCalisma+0x528>)
 8006b7c:	2110      	movs	r1, #16
 8006b7e:	2002      	movs	r0, #2
 8006b80:	f7f9 fc7f 	bl	8000482 <lcd_print>
					mesajYazildi=1;
 8006b84:	4b34      	ldr	r3, [pc, #208]	; (8006c58 <checkDemoModCalisma+0x52c>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8006b8a:	e03c      	b.n	8006c06 <checkDemoModCalisma+0x4da>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8006b8c:	4b33      	ldr	r3, [pc, #204]	; (8006c5c <checkDemoModCalisma+0x530>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d003      	beq.n	8006b9c <checkDemoModCalisma+0x470>
 8006b94:	4b2c      	ldr	r3, [pc, #176]	; (8006c48 <checkDemoModCalisma+0x51c>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d134      	bne.n	8006c06 <checkDemoModCalisma+0x4da>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ba2:	481b      	ldr	r0, [pc, #108]	; (8006c10 <checkDemoModCalisma+0x4e4>)
 8006ba4:	f001 fcff 	bl	80085a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bae:	4818      	ldr	r0, [pc, #96]	; (8006c10 <checkDemoModCalisma+0x4e4>)
 8006bb0:	f001 fcf9 	bl	80085a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2104      	movs	r1, #4
 8006bb8:	4815      	ldr	r0, [pc, #84]	; (8006c10 <checkDemoModCalisma+0x4e4>)
 8006bba:	f001 fcf4 	bl	80085a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2102      	movs	r1, #2
 8006bc2:	4813      	ldr	r0, [pc, #76]	; (8006c10 <checkDemoModCalisma+0x4e4>)
 8006bc4:	f001 fcef 	bl	80085a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4810      	ldr	r0, [pc, #64]	; (8006c10 <checkDemoModCalisma+0x4e4>)
 8006bce:	f001 fcea 	bl	80085a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2120      	movs	r1, #32
 8006bd6:	480d      	ldr	r0, [pc, #52]	; (8006c0c <checkDemoModCalisma+0x4e0>)
 8006bd8:	f001 fce5 	bl	80085a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2110      	movs	r1, #16
 8006be0:	480a      	ldr	r0, [pc, #40]	; (8006c0c <checkDemoModCalisma+0x4e0>)
 8006be2:	f001 fce0 	bl	80085a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006be6:	2200      	movs	r2, #0
 8006be8:	2180      	movs	r1, #128	; 0x80
 8006bea:	480b      	ldr	r0, [pc, #44]	; (8006c18 <checkDemoModCalisma+0x4ec>)
 8006bec:	f001 fcdb 	bl	80085a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2140      	movs	r1, #64	; 0x40
 8006bf4:	4808      	ldr	r0, [pc, #32]	; (8006c18 <checkDemoModCalisma+0x4ec>)
 8006bf6:	f001 fcd6 	bl	80085a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2120      	movs	r1, #32
 8006bfe:	4806      	ldr	r0, [pc, #24]	; (8006c18 <checkDemoModCalisma+0x4ec>)
 8006c00:	f001 fcd1 	bl	80085a6 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8006c04:	e7ff      	b.n	8006c06 <checkDemoModCalisma+0x4da>
 8006c06:	bf00      	nop
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40011000 	.word	0x40011000
 8006c10:	40010c00 	.word	0x40010c00
 8006c14:	20000a84 	.word	0x20000a84
 8006c18:	40010800 	.word	0x40010800
 8006c1c:	20000a08 	.word	0x20000a08
 8006c20:	20000a18 	.word	0x20000a18
 8006c24:	20000a83 	.word	0x20000a83
 8006c28:	20000a69 	.word	0x20000a69
 8006c2c:	20000a29 	.word	0x20000a29
 8006c30:	20000a2a 	.word	0x20000a2a
 8006c34:	20000941 	.word	0x20000941
 8006c38:	20000942 	.word	0x20000942
 8006c3c:	20000a2b 	.word	0x20000a2b
 8006c40:	200009c0 	.word	0x200009c0
 8006c44:	20000a57 	.word	0x20000a57
 8006c48:	20000a49 	.word	0x20000a49
 8006c4c:	0800c528 	.word	0x0800c528
 8006c50:	0800c534 	.word	0x0800c534
 8006c54:	20000a00 	.word	0x20000a00
 8006c58:	20000a5f 	.word	0x20000a5f
 8006c5c:	20000a4a 	.word	0x20000a4a

08006c60 <mainLoop>:
	char* result = malloc(strlen(combinedString) + 1);
	strcpy(result, combinedString);
	return result;
}

void mainLoop() {
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006c66:	f7fe f92b 	bl	8004ec0 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	48aa      	ldr	r0, [pc, #680]	; (8006f18 <mainLoop+0x2b8>)
 8006c6e:	f001 fc83 	bl	8008578 <HAL_GPIO_ReadPin>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d136      	bne.n	8006ce6 <mainLoop+0x86>
 8006c78:	2108      	movs	r1, #8
 8006c7a:	48a8      	ldr	r0, [pc, #672]	; (8006f1c <mainLoop+0x2bc>)
 8006c7c:	f001 fc7c 	bl	8008578 <HAL_GPIO_ReadPin>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d12f      	bne.n	8006ce6 <mainLoop+0x86>
 8006c86:	2102      	movs	r1, #2
 8006c88:	48a3      	ldr	r0, [pc, #652]	; (8006f18 <mainLoop+0x2b8>)
 8006c8a:	f001 fc75 	bl	8008578 <HAL_GPIO_ReadPin>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d128      	bne.n	8006ce6 <mainLoop+0x86>
 8006c94:	2104      	movs	r1, #4
 8006c96:	48a0      	ldr	r0, [pc, #640]	; (8006f18 <mainLoop+0x2b8>)
 8006c98:	f001 fc6e 	bl	8008578 <HAL_GPIO_ReadPin>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d121      	bne.n	8006ce6 <mainLoop+0x86>
 8006ca2:	2108      	movs	r1, #8
 8006ca4:	489c      	ldr	r0, [pc, #624]	; (8006f18 <mainLoop+0x2b8>)
 8006ca6:	f001 fc67 	bl	8008578 <HAL_GPIO_ReadPin>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d11a      	bne.n	8006ce6 <mainLoop+0x86>
 8006cb0:	2180      	movs	r1, #128	; 0x80
 8006cb2:	489a      	ldr	r0, [pc, #616]	; (8006f1c <mainLoop+0x2bc>)
 8006cb4:	f001 fc60 	bl	8008578 <HAL_GPIO_ReadPin>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d113      	bne.n	8006ce6 <mainLoop+0x86>
 8006cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cc2:	4896      	ldr	r0, [pc, #600]	; (8006f1c <mainLoop+0x2bc>)
 8006cc4:	f001 fc58 	bl	8008578 <HAL_GPIO_ReadPin>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d10b      	bne.n	8006ce6 <mainLoop+0x86>
 8006cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cd2:	4892      	ldr	r0, [pc, #584]	; (8006f1c <mainLoop+0x2bc>)
 8006cd4:	f001 fc50 	bl	8008578 <HAL_GPIO_ReadPin>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d103      	bne.n	8006ce6 <mainLoop+0x86>
			butonKontrol=0;
 8006cde:	4b90      	ldr	r3, [pc, #576]	; (8006f20 <mainLoop+0x2c0>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	e003      	b.n	8006cee <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006ce6:	4b8f      	ldr	r3, [pc, #572]	; (8006f24 <mainLoop+0x2c4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a8f      	ldr	r2, [pc, #572]	; (8006f28 <mainLoop+0x2c8>)
 8006cec:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006cee:	4b8f      	ldr	r3, [pc, #572]	; (8006f2c <mainLoop+0x2cc>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d039      	beq.n	8006d6a <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006cf6:	bf00      	nop
 8006cf8:	488d      	ldr	r0, [pc, #564]	; (8006f30 <mainLoop+0x2d0>)
 8006cfa:	f002 fa66 	bl	80091ca <HAL_I2C_GetError>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d0f9      	beq.n	8006cf8 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006d04:	bf00      	nop
 8006d06:	488a      	ldr	r0, [pc, #552]	; (8006f30 <mainLoop+0x2d0>)
 8006d08:	f002 fa52 	bl	80091b0 <HAL_I2C_GetState>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d1f9      	bne.n	8006d06 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8006d12:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d16:	9302      	str	r3, [sp, #8]
 8006d18:	233f      	movs	r3, #63	; 0x3f
 8006d1a:	9301      	str	r3, [sp, #4]
 8006d1c:	4b85      	ldr	r3, [pc, #532]	; (8006f34 <mainLoop+0x2d4>)
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	233f      	movs	r3, #63	; 0x3f
 8006d22:	2200      	movs	r2, #0
 8006d24:	21a0      	movs	r1, #160	; 0xa0
 8006d26:	4882      	ldr	r0, [pc, #520]	; (8006f30 <mainLoop+0x2d0>)
 8006d28:	f001 fee0 	bl	8008aec <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8006d2c:	2005      	movs	r0, #5
 8006d2e:	f000 fe53 	bl	80079d8 <HAL_Delay>

		  hafizaYaz=0;
 8006d32:	4b7e      	ldr	r3, [pc, #504]	; (8006f2c <mainLoop+0x2cc>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006d38:	4b7f      	ldr	r3, [pc, #508]	; (8006f38 <mainLoop+0x2d8>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d105      	bne.n	8006d4c <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 8006d40:	4a7e      	ldr	r2, [pc, #504]	; (8006f3c <mainLoop+0x2dc>)
 8006d42:	2101      	movs	r1, #1
 8006d44:	2002      	movs	r0, #2
 8006d46:	f7f9 fb9c 	bl	8000482 <lcd_print>
 8006d4a:	e008      	b.n	8006d5e <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8006d4c:	4b7a      	ldr	r3, [pc, #488]	; (8006f38 <mainLoop+0x2d8>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d104      	bne.n	8006d5e <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8006d54:	4a7a      	ldr	r2, [pc, #488]	; (8006f40 <mainLoop+0x2e0>)
 8006d56:	2101      	movs	r1, #1
 8006d58:	2002      	movs	r0, #2
 8006d5a:	f7f9 fb92 	bl	8000482 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d62:	f000 fe39 	bl	80079d8 <HAL_Delay>
		  lcd_clear();
 8006d66:	f7f9 fba1 	bl	80004ac <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006d6a:	4b76      	ldr	r3, [pc, #472]	; (8006f44 <mainLoop+0x2e4>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f083 0301 	eor.w	r3, r3, #1
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d06b      	beq.n	8006e50 <mainLoop+0x1f0>
 8006d78:	486d      	ldr	r0, [pc, #436]	; (8006f30 <mainLoop+0x2d0>)
 8006d7a:	f002 fa19 	bl	80091b0 <HAL_I2C_GetState>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d165      	bne.n	8006e50 <mainLoop+0x1f0>
		  if(ilkOkuma==0) {
 8006d84:	4b70      	ldr	r3, [pc, #448]	; (8006f48 <mainLoop+0x2e8>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	f083 0301 	eor.w	r3, r3, #1
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d044      	beq.n	8006e1c <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8006d92:	4a6e      	ldr	r2, [pc, #440]	; (8006f4c <mainLoop+0x2ec>)
 8006d94:	2101      	movs	r1, #1
 8006d96:	2001      	movs	r0, #1
 8006d98:	f7f9 fb73 	bl	8000482 <lcd_print>
			  if(dilSecim==0) {
 8006d9c:	4b66      	ldr	r3, [pc, #408]	; (8006f38 <mainLoop+0x2d8>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d105      	bne.n	8006db0 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8006da4:	4a6a      	ldr	r2, [pc, #424]	; (8006f50 <mainLoop+0x2f0>)
 8006da6:	2101      	movs	r1, #1
 8006da8:	2002      	movs	r0, #2
 8006daa:	f7f9 fb6a 	bl	8000482 <lcd_print>
 8006dae:	e008      	b.n	8006dc2 <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8006db0:	4b61      	ldr	r3, [pc, #388]	; (8006f38 <mainLoop+0x2d8>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d104      	bne.n	8006dc2 <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 8006db8:	4a66      	ldr	r2, [pc, #408]	; (8006f54 <mainLoop+0x2f4>)
 8006dba:	2101      	movs	r1, #1
 8006dbc:	2002      	movs	r0, #2
 8006dbe:	f7f9 fb60 	bl	8000482 <lcd_print>
			  }
			  HAL_Delay(1000);
 8006dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006dc6:	f000 fe07 	bl	80079d8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006dca:	bf00      	nop
 8006dcc:	4858      	ldr	r0, [pc, #352]	; (8006f30 <mainLoop+0x2d0>)
 8006dce:	f002 f9fc 	bl	80091ca <HAL_I2C_GetError>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d0f9      	beq.n	8006dcc <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006dd8:	e003      	b.n	8006de2 <mainLoop+0x182>
				  HAL_Delay(1000);
 8006dda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006dde:	f000 fdfb 	bl	80079d8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006de2:	4853      	ldr	r0, [pc, #332]	; (8006f30 <mainLoop+0x2d0>)
 8006de4:	f002 f9e4 	bl	80091b0 <HAL_I2C_GetState>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d1f5      	bne.n	8006dda <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 8006dee:	4b52      	ldr	r3, [pc, #328]	; (8006f38 <mainLoop+0x2d8>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d105      	bne.n	8006e02 <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 8006df6:	4a58      	ldr	r2, [pc, #352]	; (8006f58 <mainLoop+0x2f8>)
 8006df8:	2101      	movs	r1, #1
 8006dfa:	2002      	movs	r0, #2
 8006dfc:	f7f9 fb41 	bl	8000482 <lcd_print>
 8006e00:	e008      	b.n	8006e14 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 8006e02:	4b4d      	ldr	r3, [pc, #308]	; (8006f38 <mainLoop+0x2d8>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d104      	bne.n	8006e14 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 8006e0a:	4a54      	ldr	r2, [pc, #336]	; (8006f5c <mainLoop+0x2fc>)
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	2002      	movs	r0, #2
 8006e10:	f7f9 fb37 	bl	8000482 <lcd_print>
			  }

			  ilkOkuma=1;
 8006e14:	4b4c      	ldr	r3, [pc, #304]	; (8006f48 <mainLoop+0x2e8>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	e014      	b.n	8006e46 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8006e1c:	4b46      	ldr	r3, [pc, #280]	; (8006f38 <mainLoop+0x2d8>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006e24:	4a4e      	ldr	r2, [pc, #312]	; (8006f60 <mainLoop+0x300>)
 8006e26:	2101      	movs	r1, #1
 8006e28:	2002      	movs	r0, #2
 8006e2a:	f7f9 fb2a 	bl	8000482 <lcd_print>
 8006e2e:	e008      	b.n	8006e42 <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 8006e30:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <mainLoop+0x2d8>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d104      	bne.n	8006e42 <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8006e38:	4a4a      	ldr	r2, [pc, #296]	; (8006f64 <mainLoop+0x304>)
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	2002      	movs	r0, #2
 8006e3e:	f7f9 fb20 	bl	8000482 <lcd_print>
			  }
			  lcd_clear();
 8006e42:	f7f9 fb33 	bl	80004ac <lcd_clear>
		  }

		  eepromKontrol();
 8006e46:	f7fd fc17 	bl	8004678 <eepromKontrol>
		  hafizaOku=1;
 8006e4a:	4b3e      	ldr	r3, [pc, #248]	; (8006f44 <mainLoop+0x2e4>)
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006e50:	4b45      	ldr	r3, [pc, #276]	; (8006f68 <mainLoop+0x308>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d11c      	bne.n	8006e92 <mainLoop+0x232>
 8006e58:	4b44      	ldr	r3, [pc, #272]	; (8006f6c <mainLoop+0x30c>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	f083 0301 	eor.w	r3, r3, #1
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d015      	beq.n	8006e92 <mainLoop+0x232>
 8006e66:	4b42      	ldr	r3, [pc, #264]	; (8006f70 <mainLoop+0x310>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d111      	bne.n	8006e92 <mainLoop+0x232>
			lcd_clear();
 8006e6e:	f7f9 fb1d 	bl	80004ac <lcd_clear>
			HAL_Delay(10);
 8006e72:	200a      	movs	r0, #10
 8006e74:	f000 fdb0 	bl	80079d8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006e78:	4a3e      	ldr	r2, [pc, #248]	; (8006f74 <mainLoop+0x314>)
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	f7f9 fb00 	bl	8000482 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006e82:	4a3d      	ldr	r2, [pc, #244]	; (8006f78 <mainLoop+0x318>)
 8006e84:	2101      	movs	r1, #1
 8006e86:	2002      	movs	r0, #2
 8006e88:	f7f9 fafb 	bl	8000482 <lcd_print>
			mesajYazildi=1;
 8006e8c:	4b37      	ldr	r3, [pc, #220]	; (8006f6c <mainLoop+0x30c>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006e92:	4b35      	ldr	r3, [pc, #212]	; (8006f68 <mainLoop+0x308>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d112      	bne.n	8006ec0 <mainLoop+0x260>
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	481e      	ldr	r0, [pc, #120]	; (8006f18 <mainLoop+0x2b8>)
 8006e9e:	f001 fb6b 	bl	8008578 <HAL_GPIO_ReadPin>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d10b      	bne.n	8006ec0 <mainLoop+0x260>
 8006ea8:	2104      	movs	r1, #4
 8006eaa:	481b      	ldr	r0, [pc, #108]	; (8006f18 <mainLoop+0x2b8>)
 8006eac:	f001 fb64 	bl	8008578 <HAL_GPIO_ReadPin>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d104      	bne.n	8006ec0 <mainLoop+0x260>
			menuGiris=1;
 8006eb6:	4b2c      	ldr	r3, [pc, #176]	; (8006f68 <mainLoop+0x308>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006ebc:	f7f9 faf6 	bl	80004ac <lcd_clear>
		}

		if(menuGiris==1) {
 8006ec0:	4b29      	ldr	r3, [pc, #164]	; (8006f68 <mainLoop+0x308>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <mainLoop+0x26c>
			menu();
 8006ec8:	f7f9 fb3c 	bl	8000544 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ed0:	4812      	ldr	r0, [pc, #72]	; (8006f1c <mainLoop+0x2bc>)
 8006ed2:	f001 fb80 	bl	80085d6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006eda:	4828      	ldr	r0, [pc, #160]	; (8006f7c <mainLoop+0x31c>)
 8006edc:	f001 fb4c 	bl	8008578 <HAL_GPIO_ReadPin>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <mainLoop+0x29c>
 8006ee6:	4b26      	ldr	r3, [pc, #152]	; (8006f80 <mainLoop+0x320>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	f083 0301 	eor.w	r3, r3, #1
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <mainLoop+0x29c>
			stopVar=1;
 8006ef4:	4b23      	ldr	r3, [pc, #140]	; (8006f84 <mainLoop+0x324>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	e002      	b.n	8006f02 <mainLoop+0x2a2>
		} else {
			stopVar=0;
 8006efc:	4b21      	ldr	r3, [pc, #132]	; (8006f84 <mainLoop+0x324>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006f02:	f7fd fff7 	bl	8004ef4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006f06:	f7fe f829 	bl	8004f5c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006f0a:	f7fe f86d 	bl	8004fe8 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006f0e:	f7fe f8bd 	bl	800508c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006f12:	f7ff fc0b 	bl	800672c <checkDemoModCalisma>
		checkLCDBacklight();
 8006f16:	e6a6      	b.n	8006c66 <mainLoop+0x6>
 8006f18:	40010800 	.word	0x40010800
 8006f1c:	40011000 	.word	0x40011000
 8006f20:	20000a5a 	.word	0x20000a5a
 8006f24:	20000a08 	.word	0x20000a08
 8006f28:	20000a24 	.word	0x20000a24
 8006f2c:	20000a57 	.word	0x20000a57
 8006f30:	20000be8 	.word	0x20000be8
 8006f34:	200009c0 	.word	0x200009c0
 8006f38:	20000a4c 	.word	0x20000a4c
 8006f3c:	0800c54c 	.word	0x0800c54c
 8006f40:	0800c560 	.word	0x0800c560
 8006f44:	20000a58 	.word	0x20000a58
 8006f48:	20000a59 	.word	0x20000a59
 8006f4c:	0800c574 	.word	0x0800c574
 8006f50:	0800c588 	.word	0x0800c588
 8006f54:	0800c59c 	.word	0x0800c59c
 8006f58:	0800c5b0 	.word	0x0800c5b0
 8006f5c:	0800c5c4 	.word	0x0800c5c4
 8006f60:	0800c5d8 	.word	0x0800c5d8
 8006f64:	0800c5ec 	.word	0x0800c5ec
 8006f68:	20000a49 	.word	0x20000a49
 8006f6c:	20000a5f 	.word	0x20000a5f
 8006f70:	20000a4a 	.word	0x20000a4a
 8006f74:	0800c4b4 	.word	0x0800c4b4
 8006f78:	0800c4c8 	.word	0x0800c4c8
 8006f7c:	40010c00 	.word	0x40010c00
 8006f80:	20000a80 	.word	0x20000a80
 8006f84:	20000a7d 	.word	0x20000a7d

08006f88 <espTest>:
	} while (read == NULL);
	HAL_UART_Transmit_IT(&huart1, (uint8_t*) local_txA, strlen(local_txA));
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
}

void espTest() {
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT\r\n", 4, HAL_MAX_DELAY);
 8006f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f90:	2204      	movs	r2, #4
 8006f92:	491b      	ldr	r1, [pc, #108]	; (8007000 <espTest+0x78>)
 8006f94:	481b      	ldr	r0, [pc, #108]	; (8007004 <espTest+0x7c>)
 8006f96:	f003 fdeb 	bl	800ab70 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8006f9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006f9e:	f000 fd1b 	bl	80079d8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CWJAP=\"Turna\",\"!?azxx!?1962edib1962\"\r\n", 36, HAL_MAX_DELAY);
 8006fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa6:	2224      	movs	r2, #36	; 0x24
 8006fa8:	4917      	ldr	r1, [pc, #92]	; (8007008 <espTest+0x80>)
 8006faa:	4816      	ldr	r0, [pc, #88]	; (8007004 <espTest+0x7c>)
 8006fac:	f003 fde0 	bl	800ab70 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8006fb0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006fb4:	f000 fd10 	bl	80079d8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CIPSTART=\"TCP\",\"85.95.231.92\",3000\r\n", 38, HAL_MAX_DELAY);
 8006fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fbc:	2226      	movs	r2, #38	; 0x26
 8006fbe:	4913      	ldr	r1, [pc, #76]	; (800700c <espTest+0x84>)
 8006fc0:	4810      	ldr	r0, [pc, #64]	; (8007004 <espTest+0x7c>)
 8006fc2:	f003 fdd5 	bl	800ab70 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8006fc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006fca:	f000 fd05 	bl	80079d8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"AT+CIPSEND=250\r\n", 16, HAL_MAX_DELAY);
 8006fce:	f04f 33ff 	mov.w	r3, #4294967295
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	490e      	ldr	r1, [pc, #56]	; (8007010 <espTest+0x88>)
 8006fd6:	480b      	ldr	r0, [pc, #44]	; (8007004 <espTest+0x7c>)
 8006fd8:	f003 fdca 	bl	800ab70 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8006fdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006fe0:	f000 fcfa 	bl	80079d8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t *)"GET /api/machine/updateMachineDataRaw?machineID=12345&machineData=111001011021210101001210000102012345678923456 HTTP/1.1\r\nHost: 85.95.231.92\r\nConnection: close\r\n\r\n", strlen("GET /api/machine/updateMachineDataRaw?machineID=12345&machineData=111001011021210101001210000102012345678923456 HTTP/1.1\r\nHost: 85.95.231.92\r\nConnection: close\r\n\r\n"), HAL_MAX_DELAY);
 8006fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe8:	22a3      	movs	r2, #163	; 0xa3
 8006fea:	490a      	ldr	r1, [pc, #40]	; (8007014 <espTest+0x8c>)
 8006fec:	4805      	ldr	r0, [pc, #20]	; (8007004 <espTest+0x7c>)
 8006fee:	f003 fdbf 	bl	800ab70 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8006ff2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006ff6:	f000 fcef 	bl	80079d8 <HAL_Delay>
}
 8006ffa:	bf00      	nop
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	0800c60c 	.word	0x0800c60c
 8007004:	20000c84 	.word	0x20000c84
 8007008:	0800c64c 	.word	0x0800c64c
 800700c:	0800c6e0 	.word	0x0800c6e0
 8007010:	0800c708 	.word	0x0800c708
 8007014:	0800c71c 	.word	0x0800c71c

08007018 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007020:	4b04      	ldr	r3, [pc, #16]	; (8007034 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3301      	adds	r3, #1
 8007026:	4a03      	ldr	r2, [pc, #12]	; (8007034 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007028:	6013      	str	r3, [r2, #0]
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	bc80      	pop	{r7}
 8007032:	4770      	bx	lr
 8007034:	20000a08 	.word	0x20000a08

08007038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800703c:	f000 fc6a 	bl	8007914 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007040:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007044:	f000 fcc8 	bl	80079d8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007048:	f000 f89a 	bl	8007180 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800704c:	f000 f9bc 	bl	80073c8 <MX_GPIO_Init>
  MX_CAN_Init();
 8007050:	f000 f8dc 	bl	800720c <MX_CAN_Init>
  MX_I2C1_Init();
 8007054:	f000 f90e 	bl	8007274 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007058:	f000 f93a 	bl	80072d0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800705c:	f000 f98a 	bl	8007374 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007060:	2201      	movs	r2, #1
 8007062:	2140      	movs	r1, #64	; 0x40
 8007064:	483d      	ldr	r0, [pc, #244]	; (800715c <main+0x124>)
 8007066:	f001 fa9e 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800706a:	2201      	movs	r2, #1
 800706c:	2180      	movs	r1, #128	; 0x80
 800706e:	483b      	ldr	r0, [pc, #236]	; (800715c <main+0x124>)
 8007070:	f001 fa99 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007074:	200a      	movs	r0, #10
 8007076:	f000 fcaf 	bl	80079d8 <HAL_Delay>
  lcd_init();
 800707a:	f7f9 f9d0 	bl	800041e <lcd_init>
  HAL_Delay(10);
 800707e:	200a      	movs	r0, #10
 8007080:	f000 fcaa 	bl	80079d8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007084:	4836      	ldr	r0, [pc, #216]	; (8007160 <main+0x128>)
 8007086:	f003 f941 	bl	800a30c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800708a:	bf00      	nop
 800708c:	4835      	ldr	r0, [pc, #212]	; (8007164 <main+0x12c>)
 800708e:	f002 f89c 	bl	80091ca <HAL_I2C_GetError>
 8007092:	4603      	mov	r3, r0
 8007094:	2b04      	cmp	r3, #4
 8007096:	d0f9      	beq.n	800708c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007098:	bf00      	nop
 800709a:	4832      	ldr	r0, [pc, #200]	; (8007164 <main+0x12c>)
 800709c:	f002 f888 	bl	80091b0 <HAL_I2C_GetState>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d1f9      	bne.n	800709a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80070a6:	2200      	movs	r2, #0
 80070a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070ac:	482b      	ldr	r0, [pc, #172]	; (800715c <main+0x124>)
 80070ae:	f001 fa7a 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80070b2:	2200      	movs	r2, #0
 80070b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80070b8:	4828      	ldr	r0, [pc, #160]	; (800715c <main+0x124>)
 80070ba:	f001 fa74 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80070be:	2200      	movs	r2, #0
 80070c0:	2104      	movs	r1, #4
 80070c2:	4826      	ldr	r0, [pc, #152]	; (800715c <main+0x124>)
 80070c4:	f001 fa6f 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80070c8:	2200      	movs	r2, #0
 80070ca:	2102      	movs	r1, #2
 80070cc:	4823      	ldr	r0, [pc, #140]	; (800715c <main+0x124>)
 80070ce:	f001 fa6a 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80070d2:	2200      	movs	r2, #0
 80070d4:	2101      	movs	r1, #1
 80070d6:	4821      	ldr	r0, [pc, #132]	; (800715c <main+0x124>)
 80070d8:	f001 fa65 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80070dc:	2200      	movs	r2, #0
 80070de:	2120      	movs	r1, #32
 80070e0:	4821      	ldr	r0, [pc, #132]	; (8007168 <main+0x130>)
 80070e2:	f001 fa60 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80070e6:	2200      	movs	r2, #0
 80070e8:	2110      	movs	r1, #16
 80070ea:	481f      	ldr	r0, [pc, #124]	; (8007168 <main+0x130>)
 80070ec:	f001 fa5b 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80070f0:	2200      	movs	r2, #0
 80070f2:	2180      	movs	r1, #128	; 0x80
 80070f4:	481d      	ldr	r0, [pc, #116]	; (800716c <main+0x134>)
 80070f6:	f001 fa56 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80070fa:	2200      	movs	r2, #0
 80070fc:	2140      	movs	r1, #64	; 0x40
 80070fe:	481b      	ldr	r0, [pc, #108]	; (800716c <main+0x134>)
 8007100:	f001 fa51 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007104:	2200      	movs	r2, #0
 8007106:	2120      	movs	r1, #32
 8007108:	4818      	ldr	r0, [pc, #96]	; (800716c <main+0x134>)
 800710a:	f001 fa4c 	bl	80085a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800710e:	2200      	movs	r2, #0
 8007110:	2110      	movs	r1, #16
 8007112:	4816      	ldr	r0, [pc, #88]	; (800716c <main+0x134>)
 8007114:	f001 fa47 	bl	80085a6 <HAL_GPIO_WritePin>

  i2cTest();
 8007118:	f7fd fe24 	bl	8004d64 <i2cTest>
  HAL_Delay(100);
 800711c:	2064      	movs	r0, #100	; 0x64
 800711e:	f000 fc5b 	bl	80079d8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007122:	4a13      	ldr	r2, [pc, #76]	; (8007170 <main+0x138>)
 8007124:	2101      	movs	r1, #1
 8007126:	2001      	movs	r0, #1
 8007128:	f7f9 f9ab 	bl	8000482 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 800712c:	4a11      	ldr	r2, [pc, #68]	; (8007174 <main+0x13c>)
 800712e:	2101      	movs	r1, #1
 8007130:	2002      	movs	r0, #2
 8007132:	f7f9 f9a6 	bl	8000482 <lcd_print>
  HAL_Delay(1000);
 8007136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800713a:	f000 fc4d 	bl	80079d8 <HAL_Delay>
  lcd_clear();
 800713e:	f7f9 f9b5 	bl	80004ac <lcd_clear>

  eepromKontrol();
 8007142:	f7fd fa99 	bl	8004678 <eepromKontrol>

  lcd_clear();
 8007146:	f7f9 f9b1 	bl	80004ac <lcd_clear>

  backLightTimer = millis;
 800714a:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <main+0x140>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a0b      	ldr	r2, [pc, #44]	; (800717c <main+0x144>)
 8007150:	6013      	str	r3, [r2, #0]

  //ESP8266_INIT();
  espTest();
 8007152:	f7ff ff19 	bl	8006f88 <espTest>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007156:	f7ff fd83 	bl	8006c60 <mainLoop>
 800715a:	e7fc      	b.n	8007156 <main+0x11e>
 800715c:	40010c00 	.word	0x40010c00
 8007160:	20000c3c 	.word	0x20000c3c
 8007164:	20000be8 	.word	0x20000be8
 8007168:	40011000 	.word	0x40011000
 800716c:	40010800 	.word	0x40010800
 8007170:	0800c7c0 	.word	0x0800c7c0
 8007174:	0800c7d4 	.word	0x0800c7d4
 8007178:	20000a08 	.word	0x20000a08
 800717c:	20000a24 	.word	0x20000a24

08007180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b090      	sub	sp, #64	; 0x40
 8007184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007186:	f107 0318 	add.w	r3, r7, #24
 800718a:	2228      	movs	r2, #40	; 0x28
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f004 fbd2 	bl	800b938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007194:	1d3b      	adds	r3, r7, #4
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	605a      	str	r2, [r3, #4]
 800719c:	609a      	str	r2, [r3, #8]
 800719e:	60da      	str	r2, [r3, #12]
 80071a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80071a2:	2301      	movs	r3, #1
 80071a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80071a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80071ac:	2300      	movs	r3, #0
 80071ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80071b0:	2301      	movs	r3, #1
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071b4:	2302      	movs	r3, #2
 80071b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80071b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80071be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80071c4:	f107 0318 	add.w	r3, r7, #24
 80071c8:	4618      	mov	r0, r3
 80071ca:	f002 fc3f 	bl	8009a4c <HAL_RCC_OscConfig>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80071d4:	f000 f9a2 	bl	800751c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80071d8:	230f      	movs	r3, #15
 80071da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80071dc:	2302      	movs	r3, #2
 80071de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80071e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80071ee:	1d3b      	adds	r3, r7, #4
 80071f0:	2102      	movs	r1, #2
 80071f2:	4618      	mov	r0, r3
 80071f4:	f002 feac 	bl	8009f50 <HAL_RCC_ClockConfig>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80071fe:	f000 f98d 	bl	800751c <Error_Handler>
  }
}
 8007202:	bf00      	nop
 8007204:	3740      	adds	r7, #64	; 0x40
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007210:	4b16      	ldr	r3, [pc, #88]	; (800726c <MX_CAN_Init+0x60>)
 8007212:	4a17      	ldr	r2, [pc, #92]	; (8007270 <MX_CAN_Init+0x64>)
 8007214:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007216:	4b15      	ldr	r3, [pc, #84]	; (800726c <MX_CAN_Init+0x60>)
 8007218:	2210      	movs	r2, #16
 800721a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800721c:	4b13      	ldr	r3, [pc, #76]	; (800726c <MX_CAN_Init+0x60>)
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007222:	4b12      	ldr	r3, [pc, #72]	; (800726c <MX_CAN_Init+0x60>)
 8007224:	2200      	movs	r2, #0
 8007226:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007228:	4b10      	ldr	r3, [pc, #64]	; (800726c <MX_CAN_Init+0x60>)
 800722a:	2200      	movs	r2, #0
 800722c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800722e:	4b0f      	ldr	r3, [pc, #60]	; (800726c <MX_CAN_Init+0x60>)
 8007230:	2200      	movs	r2, #0
 8007232:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007234:	4b0d      	ldr	r3, [pc, #52]	; (800726c <MX_CAN_Init+0x60>)
 8007236:	2200      	movs	r2, #0
 8007238:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <MX_CAN_Init+0x60>)
 800723c:	2200      	movs	r2, #0
 800723e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007240:	4b0a      	ldr	r3, [pc, #40]	; (800726c <MX_CAN_Init+0x60>)
 8007242:	2200      	movs	r2, #0
 8007244:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <MX_CAN_Init+0x60>)
 8007248:	2200      	movs	r2, #0
 800724a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800724c:	4b07      	ldr	r3, [pc, #28]	; (800726c <MX_CAN_Init+0x60>)
 800724e:	2200      	movs	r2, #0
 8007250:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007252:	4b06      	ldr	r3, [pc, #24]	; (800726c <MX_CAN_Init+0x60>)
 8007254:	2200      	movs	r2, #0
 8007256:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007258:	4804      	ldr	r0, [pc, #16]	; (800726c <MX_CAN_Init+0x60>)
 800725a:	f000 fbe1 	bl	8007a20 <HAL_CAN_Init>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007264:	f000 f95a 	bl	800751c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007268:	bf00      	nop
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000bc0 	.word	0x20000bc0
 8007270:	40006400 	.word	0x40006400

08007274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007278:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <MX_I2C1_Init+0x50>)
 800727a:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <MX_I2C1_Init+0x54>)
 800727c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800727e:	4b11      	ldr	r3, [pc, #68]	; (80072c4 <MX_I2C1_Init+0x50>)
 8007280:	4a12      	ldr	r2, [pc, #72]	; (80072cc <MX_I2C1_Init+0x58>)
 8007282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007284:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <MX_I2C1_Init+0x50>)
 8007286:	2200      	movs	r2, #0
 8007288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800728a:	4b0e      	ldr	r3, [pc, #56]	; (80072c4 <MX_I2C1_Init+0x50>)
 800728c:	2200      	movs	r2, #0
 800728e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007290:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <MX_I2C1_Init+0x50>)
 8007292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007298:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <MX_I2C1_Init+0x50>)
 800729a:	2200      	movs	r2, #0
 800729c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <MX_I2C1_Init+0x50>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80072a4:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <MX_I2C1_Init+0x50>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80072aa:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <MX_I2C1_Init+0x50>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80072b0:	4804      	ldr	r0, [pc, #16]	; (80072c4 <MX_I2C1_Init+0x50>)
 80072b2:	f001 f9a9 	bl	8008608 <HAL_I2C_Init>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80072bc:	f000 f92e 	bl	800751c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80072c0:	bf00      	nop
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	20000be8 	.word	0x20000be8
 80072c8:	40005400 	.word	0x40005400
 80072cc:	00061a80 	.word	0x00061a80

080072d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80072d6:	f107 0308 	add.w	r3, r7, #8
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	605a      	str	r2, [r3, #4]
 80072e0:	609a      	str	r2, [r3, #8]
 80072e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072e4:	463b      	mov	r3, r7
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80072ec:	4b1f      	ldr	r3, [pc, #124]	; (800736c <MX_TIM1_Init+0x9c>)
 80072ee:	4a20      	ldr	r2, [pc, #128]	; (8007370 <MX_TIM1_Init+0xa0>)
 80072f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80072f2:	4b1e      	ldr	r3, [pc, #120]	; (800736c <MX_TIM1_Init+0x9c>)
 80072f4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80072f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072fa:	4b1c      	ldr	r3, [pc, #112]	; (800736c <MX_TIM1_Init+0x9c>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007300:	4b1a      	ldr	r3, [pc, #104]	; (800736c <MX_TIM1_Init+0x9c>)
 8007302:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007306:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007308:	4b18      	ldr	r3, [pc, #96]	; (800736c <MX_TIM1_Init+0x9c>)
 800730a:	2200      	movs	r2, #0
 800730c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800730e:	4b17      	ldr	r3, [pc, #92]	; (800736c <MX_TIM1_Init+0x9c>)
 8007310:	2200      	movs	r2, #0
 8007312:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007314:	4b15      	ldr	r3, [pc, #84]	; (800736c <MX_TIM1_Init+0x9c>)
 8007316:	2200      	movs	r2, #0
 8007318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800731a:	4814      	ldr	r0, [pc, #80]	; (800736c <MX_TIM1_Init+0x9c>)
 800731c:	f002 ffa6 	bl	800a26c <HAL_TIM_Base_Init>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007326:	f000 f8f9 	bl	800751c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800732a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800732e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007330:	f107 0308 	add.w	r3, r7, #8
 8007334:	4619      	mov	r1, r3
 8007336:	480d      	ldr	r0, [pc, #52]	; (800736c <MX_TIM1_Init+0x9c>)
 8007338:	f003 f950 	bl	800a5dc <HAL_TIM_ConfigClockSource>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007342:	f000 f8eb 	bl	800751c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007346:	2300      	movs	r3, #0
 8007348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800734a:	2300      	movs	r3, #0
 800734c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800734e:	463b      	mov	r3, r7
 8007350:	4619      	mov	r1, r3
 8007352:	4806      	ldr	r0, [pc, #24]	; (800736c <MX_TIM1_Init+0x9c>)
 8007354:	f003 fb3e 	bl	800a9d4 <HAL_TIMEx_MasterConfigSynchronization>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800735e:	f000 f8dd 	bl	800751c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007362:	bf00      	nop
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000c3c 	.word	0x20000c3c
 8007370:	40012c00 	.word	0x40012c00

08007374 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007378:	4b11      	ldr	r3, [pc, #68]	; (80073c0 <MX_USART1_UART_Init+0x4c>)
 800737a:	4a12      	ldr	r2, [pc, #72]	; (80073c4 <MX_USART1_UART_Init+0x50>)
 800737c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800737e:	4b10      	ldr	r3, [pc, #64]	; (80073c0 <MX_USART1_UART_Init+0x4c>)
 8007380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007384:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007386:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <MX_USART1_UART_Init+0x4c>)
 8007388:	2200      	movs	r2, #0
 800738a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800738c:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <MX_USART1_UART_Init+0x4c>)
 800738e:	2200      	movs	r2, #0
 8007390:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007392:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <MX_USART1_UART_Init+0x4c>)
 8007394:	2200      	movs	r2, #0
 8007396:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007398:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <MX_USART1_UART_Init+0x4c>)
 800739a:	220c      	movs	r2, #12
 800739c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800739e:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <MX_USART1_UART_Init+0x4c>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <MX_USART1_UART_Init+0x4c>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80073aa:	4805      	ldr	r0, [pc, #20]	; (80073c0 <MX_USART1_UART_Init+0x4c>)
 80073ac:	f003 fb90 	bl	800aad0 <HAL_UART_Init>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80073b6:	f000 f8b1 	bl	800751c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000c84 	.word	0x20000c84
 80073c4:	40013800 	.word	0x40013800

080073c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073ce:	f107 0310 	add.w	r3, r7, #16
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	605a      	str	r2, [r3, #4]
 80073d8:	609a      	str	r2, [r3, #8]
 80073da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80073dc:	4b4b      	ldr	r3, [pc, #300]	; (800750c <MX_GPIO_Init+0x144>)
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	4a4a      	ldr	r2, [pc, #296]	; (800750c <MX_GPIO_Init+0x144>)
 80073e2:	f043 0310 	orr.w	r3, r3, #16
 80073e6:	6193      	str	r3, [r2, #24]
 80073e8:	4b48      	ldr	r3, [pc, #288]	; (800750c <MX_GPIO_Init+0x144>)
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80073f4:	4b45      	ldr	r3, [pc, #276]	; (800750c <MX_GPIO_Init+0x144>)
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	4a44      	ldr	r2, [pc, #272]	; (800750c <MX_GPIO_Init+0x144>)
 80073fa:	f043 0320 	orr.w	r3, r3, #32
 80073fe:	6193      	str	r3, [r2, #24]
 8007400:	4b42      	ldr	r3, [pc, #264]	; (800750c <MX_GPIO_Init+0x144>)
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800740c:	4b3f      	ldr	r3, [pc, #252]	; (800750c <MX_GPIO_Init+0x144>)
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	4a3e      	ldr	r2, [pc, #248]	; (800750c <MX_GPIO_Init+0x144>)
 8007412:	f043 0304 	orr.w	r3, r3, #4
 8007416:	6193      	str	r3, [r2, #24]
 8007418:	4b3c      	ldr	r3, [pc, #240]	; (800750c <MX_GPIO_Init+0x144>)
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f003 0304 	and.w	r3, r3, #4
 8007420:	607b      	str	r3, [r7, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007424:	4b39      	ldr	r3, [pc, #228]	; (800750c <MX_GPIO_Init+0x144>)
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	4a38      	ldr	r2, [pc, #224]	; (800750c <MX_GPIO_Init+0x144>)
 800742a:	f043 0308 	orr.w	r3, r3, #8
 800742e:	6193      	str	r3, [r2, #24]
 8007430:	4b36      	ldr	r3, [pc, #216]	; (800750c <MX_GPIO_Init+0x144>)
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f003 0308 	and.w	r3, r3, #8
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800743c:	2200      	movs	r2, #0
 800743e:	21f0      	movs	r1, #240	; 0xf0
 8007440:	4833      	ldr	r0, [pc, #204]	; (8007510 <MX_GPIO_Init+0x148>)
 8007442:	f001 f8b0 	bl	80085a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007446:	2200      	movs	r2, #0
 8007448:	f241 0130 	movw	r1, #4144	; 0x1030
 800744c:	4831      	ldr	r0, [pc, #196]	; (8007514 <MX_GPIO_Init+0x14c>)
 800744e:	f001 f8aa 	bl	80085a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007452:	2200      	movs	r2, #0
 8007454:	f640 4107 	movw	r1, #3079	; 0xc07
 8007458:	482f      	ldr	r0, [pc, #188]	; (8007518 <MX_GPIO_Init+0x150>)
 800745a:	f001 f8a4 	bl	80085a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800745e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007462:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007464:	2300      	movs	r3, #0
 8007466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007468:	2300      	movs	r3, #0
 800746a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800746c:	f107 0310 	add.w	r3, r7, #16
 8007470:	4619      	mov	r1, r3
 8007472:	4828      	ldr	r0, [pc, #160]	; (8007514 <MX_GPIO_Init+0x14c>)
 8007474:	f000 fe20 	bl	80080b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007478:	f248 130f 	movw	r3, #33039	; 0x810f
 800747c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007482:	2300      	movs	r3, #0
 8007484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007486:	f107 0310 	add.w	r3, r7, #16
 800748a:	4619      	mov	r1, r3
 800748c:	4820      	ldr	r0, [pc, #128]	; (8007510 <MX_GPIO_Init+0x148>)
 800748e:	f000 fe13 	bl	80080b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007492:	23f0      	movs	r3, #240	; 0xf0
 8007494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007496:	2301      	movs	r3, #1
 8007498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749a:	2300      	movs	r3, #0
 800749c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800749e:	2302      	movs	r3, #2
 80074a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a2:	f107 0310 	add.w	r3, r7, #16
 80074a6:	4619      	mov	r1, r3
 80074a8:	4819      	ldr	r0, [pc, #100]	; (8007510 <MX_GPIO_Init+0x148>)
 80074aa:	f000 fe05 	bl	80080b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80074ae:	f241 0330 	movw	r3, #4144	; 0x1030
 80074b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074b4:	2301      	movs	r3, #1
 80074b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074bc:	2302      	movs	r3, #2
 80074be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074c0:	f107 0310 	add.w	r3, r7, #16
 80074c4:	4619      	mov	r1, r3
 80074c6:	4813      	ldr	r0, [pc, #76]	; (8007514 <MX_GPIO_Init+0x14c>)
 80074c8:	f000 fdf6 	bl	80080b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80074cc:	f640 4307 	movw	r3, #3079	; 0xc07
 80074d0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074d2:	2301      	movs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074da:	2302      	movs	r3, #2
 80074dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074de:	f107 0310 	add.w	r3, r7, #16
 80074e2:	4619      	mov	r1, r3
 80074e4:	480c      	ldr	r0, [pc, #48]	; (8007518 <MX_GPIO_Init+0x150>)
 80074e6:	f000 fde7 	bl	80080b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80074ea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80074ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074f8:	f107 0310 	add.w	r3, r7, #16
 80074fc:	4619      	mov	r1, r3
 80074fe:	4806      	ldr	r0, [pc, #24]	; (8007518 <MX_GPIO_Init+0x150>)
 8007500:	f000 fdda 	bl	80080b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007504:	bf00      	nop
 8007506:	3720      	adds	r7, #32
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40021000 	.word	0x40021000
 8007510:	40010800 	.word	0x40010800
 8007514:	40011000 	.word	0x40011000
 8007518:	40010c00 	.word	0x40010c00

0800751c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007520:	bf00      	nop
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr

08007528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800752e:	4b15      	ldr	r3, [pc, #84]	; (8007584 <HAL_MspInit+0x5c>)
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	4a14      	ldr	r2, [pc, #80]	; (8007584 <HAL_MspInit+0x5c>)
 8007534:	f043 0301 	orr.w	r3, r3, #1
 8007538:	6193      	str	r3, [r2, #24]
 800753a:	4b12      	ldr	r3, [pc, #72]	; (8007584 <HAL_MspInit+0x5c>)
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	60bb      	str	r3, [r7, #8]
 8007544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007546:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <HAL_MspInit+0x5c>)
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	4a0e      	ldr	r2, [pc, #56]	; (8007584 <HAL_MspInit+0x5c>)
 800754c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007550:	61d3      	str	r3, [r2, #28]
 8007552:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <HAL_MspInit+0x5c>)
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755a:	607b      	str	r3, [r7, #4]
 800755c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800755e:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <HAL_MspInit+0x60>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	4a04      	ldr	r2, [pc, #16]	; (8007588 <HAL_MspInit+0x60>)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800757a:	bf00      	nop
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	bc80      	pop	{r7}
 8007582:	4770      	bx	lr
 8007584:	40021000 	.word	0x40021000
 8007588:	40010000 	.word	0x40010000

0800758c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007594:	f107 0310 	add.w	r3, r7, #16
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	605a      	str	r2, [r3, #4]
 800759e:	609a      	str	r2, [r3, #8]
 80075a0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1c      	ldr	r2, [pc, #112]	; (8007618 <HAL_CAN_MspInit+0x8c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d131      	bne.n	8007610 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80075ac:	4b1b      	ldr	r3, [pc, #108]	; (800761c <HAL_CAN_MspInit+0x90>)
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	4a1a      	ldr	r2, [pc, #104]	; (800761c <HAL_CAN_MspInit+0x90>)
 80075b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80075b6:	61d3      	str	r3, [r2, #28]
 80075b8:	4b18      	ldr	r3, [pc, #96]	; (800761c <HAL_CAN_MspInit+0x90>)
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075c4:	4b15      	ldr	r3, [pc, #84]	; (800761c <HAL_CAN_MspInit+0x90>)
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	4a14      	ldr	r2, [pc, #80]	; (800761c <HAL_CAN_MspInit+0x90>)
 80075ca:	f043 0304 	orr.w	r3, r3, #4
 80075ce:	6193      	str	r3, [r2, #24]
 80075d0:	4b12      	ldr	r3, [pc, #72]	; (800761c <HAL_CAN_MspInit+0x90>)
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	60bb      	str	r3, [r7, #8]
 80075da:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80075dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075ea:	f107 0310 	add.w	r3, r7, #16
 80075ee:	4619      	mov	r1, r3
 80075f0:	480b      	ldr	r0, [pc, #44]	; (8007620 <HAL_CAN_MspInit+0x94>)
 80075f2:	f000 fd61 	bl	80080b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80075f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075fc:	2302      	movs	r3, #2
 80075fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007600:	2303      	movs	r3, #3
 8007602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007604:	f107 0310 	add.w	r3, r7, #16
 8007608:	4619      	mov	r1, r3
 800760a:	4805      	ldr	r0, [pc, #20]	; (8007620 <HAL_CAN_MspInit+0x94>)
 800760c:	f000 fd54 	bl	80080b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007610:	bf00      	nop
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40006400 	.word	0x40006400
 800761c:	40021000 	.word	0x40021000
 8007620:	40010800 	.word	0x40010800

08007624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800762c:	f107 0310 	add.w	r3, r7, #16
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	605a      	str	r2, [r3, #4]
 8007636:	609a      	str	r2, [r3, #8]
 8007638:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a15      	ldr	r2, [pc, #84]	; (8007694 <HAL_I2C_MspInit+0x70>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d123      	bne.n	800768c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007644:	4b14      	ldr	r3, [pc, #80]	; (8007698 <HAL_I2C_MspInit+0x74>)
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	4a13      	ldr	r2, [pc, #76]	; (8007698 <HAL_I2C_MspInit+0x74>)
 800764a:	f043 0308 	orr.w	r3, r3, #8
 800764e:	6193      	str	r3, [r2, #24]
 8007650:	4b11      	ldr	r3, [pc, #68]	; (8007698 <HAL_I2C_MspInit+0x74>)
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f003 0308 	and.w	r3, r3, #8
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800765c:	23c0      	movs	r3, #192	; 0xc0
 800765e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007660:	2312      	movs	r3, #18
 8007662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007664:	2303      	movs	r3, #3
 8007666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007668:	f107 0310 	add.w	r3, r7, #16
 800766c:	4619      	mov	r1, r3
 800766e:	480b      	ldr	r0, [pc, #44]	; (800769c <HAL_I2C_MspInit+0x78>)
 8007670:	f000 fd22 	bl	80080b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007674:	4b08      	ldr	r3, [pc, #32]	; (8007698 <HAL_I2C_MspInit+0x74>)
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	4a07      	ldr	r2, [pc, #28]	; (8007698 <HAL_I2C_MspInit+0x74>)
 800767a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800767e:	61d3      	str	r3, [r2, #28]
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <HAL_I2C_MspInit+0x74>)
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007688:	60bb      	str	r3, [r7, #8]
 800768a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800768c:	bf00      	nop
 800768e:	3720      	adds	r7, #32
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40005400 	.word	0x40005400
 8007698:	40021000 	.word	0x40021000
 800769c:	40010c00 	.word	0x40010c00

080076a0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a0a      	ldr	r2, [pc, #40]	; (80076d8 <HAL_I2C_MspDeInit+0x38>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d10d      	bne.n	80076ce <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80076b2:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <HAL_I2C_MspDeInit+0x3c>)
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	4a09      	ldr	r2, [pc, #36]	; (80076dc <HAL_I2C_MspDeInit+0x3c>)
 80076b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076bc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80076be:	2140      	movs	r1, #64	; 0x40
 80076c0:	4807      	ldr	r0, [pc, #28]	; (80076e0 <HAL_I2C_MspDeInit+0x40>)
 80076c2:	f000 fe8d 	bl	80083e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80076c6:	2180      	movs	r1, #128	; 0x80
 80076c8:	4805      	ldr	r0, [pc, #20]	; (80076e0 <HAL_I2C_MspDeInit+0x40>)
 80076ca:	f000 fe89 	bl	80083e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	40005400 	.word	0x40005400
 80076dc:	40021000 	.word	0x40021000
 80076e0:	40010c00 	.word	0x40010c00

080076e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a0d      	ldr	r2, [pc, #52]	; (8007728 <HAL_TIM_Base_MspInit+0x44>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d113      	bne.n	800771e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <HAL_TIM_Base_MspInit+0x48>)
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	4a0c      	ldr	r2, [pc, #48]	; (800772c <HAL_TIM_Base_MspInit+0x48>)
 80076fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007700:	6193      	str	r3, [r2, #24]
 8007702:	4b0a      	ldr	r3, [pc, #40]	; (800772c <HAL_TIM_Base_MspInit+0x48>)
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	2019      	movs	r0, #25
 8007714:	f000 fb57 	bl	8007dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007718:	2019      	movs	r0, #25
 800771a:	f000 fb70 	bl	8007dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40012c00 	.word	0x40012c00
 800772c:	40021000 	.word	0x40021000

08007730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007738:	f107 0310 	add.w	r3, r7, #16
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	605a      	str	r2, [r3, #4]
 8007742:	609a      	str	r2, [r3, #8]
 8007744:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a20      	ldr	r2, [pc, #128]	; (80077cc <HAL_UART_MspInit+0x9c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d139      	bne.n	80077c4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007750:	4b1f      	ldr	r3, [pc, #124]	; (80077d0 <HAL_UART_MspInit+0xa0>)
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	4a1e      	ldr	r2, [pc, #120]	; (80077d0 <HAL_UART_MspInit+0xa0>)
 8007756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800775a:	6193      	str	r3, [r2, #24]
 800775c:	4b1c      	ldr	r3, [pc, #112]	; (80077d0 <HAL_UART_MspInit+0xa0>)
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007768:	4b19      	ldr	r3, [pc, #100]	; (80077d0 <HAL_UART_MspInit+0xa0>)
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	4a18      	ldr	r2, [pc, #96]	; (80077d0 <HAL_UART_MspInit+0xa0>)
 800776e:	f043 0304 	orr.w	r3, r3, #4
 8007772:	6193      	str	r3, [r2, #24]
 8007774:	4b16      	ldr	r3, [pc, #88]	; (80077d0 <HAL_UART_MspInit+0xa0>)
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	60bb      	str	r3, [r7, #8]
 800777e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007784:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007786:	2302      	movs	r3, #2
 8007788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800778a:	2303      	movs	r3, #3
 800778c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800778e:	f107 0310 	add.w	r3, r7, #16
 8007792:	4619      	mov	r1, r3
 8007794:	480f      	ldr	r0, [pc, #60]	; (80077d4 <HAL_UART_MspInit+0xa4>)
 8007796:	f000 fc8f 	bl	80080b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800779a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800779e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077a8:	f107 0310 	add.w	r3, r7, #16
 80077ac:	4619      	mov	r1, r3
 80077ae:	4809      	ldr	r0, [pc, #36]	; (80077d4 <HAL_UART_MspInit+0xa4>)
 80077b0:	f000 fc82 	bl	80080b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80077b4:	2200      	movs	r2, #0
 80077b6:	2100      	movs	r1, #0
 80077b8:	2025      	movs	r0, #37	; 0x25
 80077ba:	f000 fb04 	bl	8007dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80077be:	2025      	movs	r0, #37	; 0x25
 80077c0:	f000 fb1d 	bl	8007dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80077c4:	bf00      	nop
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40013800 	.word	0x40013800
 80077d0:	40021000 	.word	0x40021000
 80077d4:	40010800 	.word	0x40010800

080077d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80077dc:	e7fe      	b.n	80077dc <NMI_Handler+0x4>

080077de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077de:	b480      	push	{r7}
 80077e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077e2:	e7fe      	b.n	80077e2 <HardFault_Handler+0x4>

080077e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077e8:	e7fe      	b.n	80077e8 <MemManage_Handler+0x4>

080077ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077ea:	b480      	push	{r7}
 80077ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077ee:	e7fe      	b.n	80077ee <BusFault_Handler+0x4>

080077f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077f4:	e7fe      	b.n	80077f4 <UsageFault_Handler+0x4>

080077f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077f6:	b480      	push	{r7}
 80077f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077fa:	bf00      	nop
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bc80      	pop	{r7}
 8007800:	4770      	bx	lr

08007802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007802:	b480      	push	{r7}
 8007804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007806:	bf00      	nop
 8007808:	46bd      	mov	sp, r7
 800780a:	bc80      	pop	{r7}
 800780c:	4770      	bx	lr

0800780e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800780e:	b480      	push	{r7}
 8007810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007812:	bf00      	nop
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr

0800781a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800781e:	f000 f8bf 	bl	80079a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007822:	bf00      	nop
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800782c:	4802      	ldr	r0, [pc, #8]	; (8007838 <TIM1_UP_IRQHandler+0x10>)
 800782e:	f002 fdcd 	bl	800a3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007832:	bf00      	nop
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20000c3c 	.word	0x20000c3c

0800783c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007840:	4802      	ldr	r0, [pc, #8]	; (800784c <USART1_IRQHandler+0x10>)
 8007842:	f003 fa19 	bl	800ac78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007846:	bf00      	nop
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20000c84 	.word	0x20000c84

08007850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007858:	4a14      	ldr	r2, [pc, #80]	; (80078ac <_sbrk+0x5c>)
 800785a:	4b15      	ldr	r3, [pc, #84]	; (80078b0 <_sbrk+0x60>)
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007864:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <_sbrk+0x64>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d102      	bne.n	8007872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800786c:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <_sbrk+0x64>)
 800786e:	4a12      	ldr	r2, [pc, #72]	; (80078b8 <_sbrk+0x68>)
 8007870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007872:	4b10      	ldr	r3, [pc, #64]	; (80078b4 <_sbrk+0x64>)
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4413      	add	r3, r2
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	429a      	cmp	r2, r3
 800787e:	d207      	bcs.n	8007890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007880:	f004 f872 	bl	800b968 <__errno>
 8007884:	4603      	mov	r3, r0
 8007886:	220c      	movs	r2, #12
 8007888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800788a:	f04f 33ff 	mov.w	r3, #4294967295
 800788e:	e009      	b.n	80078a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007890:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <_sbrk+0x64>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007896:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <_sbrk+0x64>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	4a05      	ldr	r2, [pc, #20]	; (80078b4 <_sbrk+0x64>)
 80078a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80078a2:	68fb      	ldr	r3, [r7, #12]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	2000c000 	.word	0x2000c000
 80078b0:	00000400 	.word	0x00000400
 80078b4:	20000ccc 	.word	0x20000ccc
 80078b8:	20000e20 	.word	0x20000e20

080078bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80078c0:	bf00      	nop
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80078c8:	480c      	ldr	r0, [pc, #48]	; (80078fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80078ca:	490d      	ldr	r1, [pc, #52]	; (8007900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80078cc:	4a0d      	ldr	r2, [pc, #52]	; (8007904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80078ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80078d0:	e002      	b.n	80078d8 <LoopCopyDataInit>

080078d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078d6:	3304      	adds	r3, #4

080078d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80078da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80078dc:	d3f9      	bcc.n	80078d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80078de:	4a0a      	ldr	r2, [pc, #40]	; (8007908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80078e0:	4c0a      	ldr	r4, [pc, #40]	; (800790c <LoopFillZerobss+0x22>)
  movs r3, #0
 80078e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80078e4:	e001      	b.n	80078ea <LoopFillZerobss>

080078e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80078e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80078e8:	3204      	adds	r2, #4

080078ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80078ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80078ec:	d3fb      	bcc.n	80078e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80078ee:	f7ff ffe5 	bl	80078bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078f2:	f004 f83f 	bl	800b974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80078f6:	f7ff fb9f 	bl	8007038 <main>
  bx lr
 80078fa:	4770      	bx	lr
  ldr r0, =_sdata
 80078fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007900:	200009a0 	.word	0x200009a0
  ldr r2, =_sidata
 8007904:	0800c840 	.word	0x0800c840
  ldr r2, =_sbss
 8007908:	200009a0 	.word	0x200009a0
  ldr r4, =_ebss
 800790c:	20000e1c 	.word	0x20000e1c

08007910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007910:	e7fe      	b.n	8007910 <ADC1_2_IRQHandler>
	...

08007914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007918:	4b08      	ldr	r3, [pc, #32]	; (800793c <HAL_Init+0x28>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a07      	ldr	r2, [pc, #28]	; (800793c <HAL_Init+0x28>)
 800791e:	f043 0310 	orr.w	r3, r3, #16
 8007922:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007924:	2003      	movs	r0, #3
 8007926:	f000 fa43 	bl	8007db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800792a:	200f      	movs	r0, #15
 800792c:	f000 f808 	bl	8007940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007930:	f7ff fdfa 	bl	8007528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	40022000 	.word	0x40022000

08007940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007948:	4b12      	ldr	r3, [pc, #72]	; (8007994 <HAL_InitTick+0x54>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	4b12      	ldr	r3, [pc, #72]	; (8007998 <HAL_InitTick+0x58>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	4619      	mov	r1, r3
 8007952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007956:	fbb3 f3f1 	udiv	r3, r3, r1
 800795a:	fbb2 f3f3 	udiv	r3, r2, r3
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fa5b 	bl	8007e1a <HAL_SYSTICK_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e00e      	b.n	800798c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b0f      	cmp	r3, #15
 8007972:	d80a      	bhi.n	800798a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007974:	2200      	movs	r2, #0
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	f04f 30ff 	mov.w	r0, #4294967295
 800797c:	f000 fa23 	bl	8007dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007980:	4a06      	ldr	r2, [pc, #24]	; (800799c <HAL_InitTick+0x5c>)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e000      	b.n	800798c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	20000944 	.word	0x20000944
 8007998:	2000094c 	.word	0x2000094c
 800799c:	20000948 	.word	0x20000948

080079a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <HAL_IncTick+0x1c>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <HAL_IncTick+0x20>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4413      	add	r3, r2
 80079b0:	4a03      	ldr	r2, [pc, #12]	; (80079c0 <HAL_IncTick+0x20>)
 80079b2:	6013      	str	r3, [r2, #0]
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr
 80079bc:	2000094c 	.word	0x2000094c
 80079c0:	20000cd0 	.word	0x20000cd0

080079c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  return uwTick;
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <HAL_GetTick+0x10>)
 80079ca:	681b      	ldr	r3, [r3, #0]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr
 80079d4:	20000cd0 	.word	0x20000cd0

080079d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80079e0:	f7ff fff0 	bl	80079c4 <HAL_GetTick>
 80079e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f0:	d005      	beq.n	80079fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80079f2:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <HAL_Delay+0x44>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80079fe:	bf00      	nop
 8007a00:	f7ff ffe0 	bl	80079c4 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d8f7      	bhi.n	8007a00 <HAL_Delay+0x28>
  {
  }
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	2000094c 	.word	0x2000094c

08007a20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e0ed      	b.n	8007c0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d102      	bne.n	8007a44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff fda4 	bl	800758c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0201 	orr.w	r2, r2, #1
 8007a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a54:	f7ff ffb6 	bl	80079c4 <HAL_GetTick>
 8007a58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007a5a:	e012      	b.n	8007a82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a5c:	f7ff ffb2 	bl	80079c4 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b0a      	cmp	r3, #10
 8007a68:	d90b      	bls.n	8007a82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2205      	movs	r2, #5
 8007a7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e0c5      	b.n	8007c0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0e5      	beq.n	8007a5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0202 	bic.w	r2, r2, #2
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007aa0:	f7ff ff90 	bl	80079c4 <HAL_GetTick>
 8007aa4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007aa6:	e012      	b.n	8007ace <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007aa8:	f7ff ff8c 	bl	80079c4 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b0a      	cmp	r3, #10
 8007ab4:	d90b      	bls.n	8007ace <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2205      	movs	r2, #5
 8007ac6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e09f      	b.n	8007c0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e5      	bne.n	8007aa8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7e1b      	ldrb	r3, [r3, #24]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d108      	bne.n	8007af6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	e007      	b.n	8007b06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	7e5b      	ldrb	r3, [r3, #25]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d108      	bne.n	8007b20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	e007      	b.n	8007b30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7e9b      	ldrb	r3, [r3, #26]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d108      	bne.n	8007b4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0220 	orr.w	r2, r2, #32
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	e007      	b.n	8007b5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0220 	bic.w	r2, r2, #32
 8007b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	7edb      	ldrb	r3, [r3, #27]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d108      	bne.n	8007b74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0210 	bic.w	r2, r2, #16
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	e007      	b.n	8007b84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0210 	orr.w	r2, r2, #16
 8007b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7f1b      	ldrb	r3, [r3, #28]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d108      	bne.n	8007b9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0208 	orr.w	r2, r2, #8
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	e007      	b.n	8007bae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0208 	bic.w	r2, r2, #8
 8007bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	7f5b      	ldrb	r3, [r3, #29]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d108      	bne.n	8007bc8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f042 0204 	orr.w	r2, r2, #4
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	e007      	b.n	8007bd8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0204 	bic.w	r2, r2, #4
 8007bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	431a      	orrs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	431a      	orrs	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	ea42 0103 	orr.w	r1, r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	1e5a      	subs	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <__NVIC_SetPriorityGrouping>:
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <__NVIC_SetPriorityGrouping+0x44>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c34:	4013      	ands	r3, r2
 8007c36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c4a:	4a04      	ldr	r2, [pc, #16]	; (8007c5c <__NVIC_SetPriorityGrouping+0x44>)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	60d3      	str	r3, [r2, #12]
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	e000ed00 	.word	0xe000ed00

08007c60 <__NVIC_GetPriorityGrouping>:
{
 8007c60:	b480      	push	{r7}
 8007c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <__NVIC_GetPriorityGrouping+0x18>)
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	0a1b      	lsrs	r3, r3, #8
 8007c6a:	f003 0307 	and.w	r3, r3, #7
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	e000ed00 	.word	0xe000ed00

08007c7c <__NVIC_EnableIRQ>:
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	db0b      	blt.n	8007ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	f003 021f 	and.w	r2, r3, #31
 8007c94:	4906      	ldr	r1, [pc, #24]	; (8007cb0 <__NVIC_EnableIRQ+0x34>)
 8007c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c9a:	095b      	lsrs	r3, r3, #5
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8007ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr
 8007cb0:	e000e100 	.word	0xe000e100

08007cb4 <__NVIC_SetPriority>:
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	db0a      	blt.n	8007cde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	490c      	ldr	r1, [pc, #48]	; (8007d00 <__NVIC_SetPriority+0x4c>)
 8007cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cd2:	0112      	lsls	r2, r2, #4
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	440b      	add	r3, r1
 8007cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007cdc:	e00a      	b.n	8007cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	4908      	ldr	r1, [pc, #32]	; (8007d04 <__NVIC_SetPriority+0x50>)
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	f003 030f 	and.w	r3, r3, #15
 8007cea:	3b04      	subs	r3, #4
 8007cec:	0112      	lsls	r2, r2, #4
 8007cee:	b2d2      	uxtb	r2, r2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	761a      	strb	r2, [r3, #24]
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	e000e100 	.word	0xe000e100
 8007d04:	e000ed00 	.word	0xe000ed00

08007d08 <NVIC_EncodePriority>:
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b089      	sub	sp, #36	; 0x24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f003 0307 	and.w	r3, r3, #7
 8007d1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f1c3 0307 	rsb	r3, r3, #7
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	bf28      	it	cs
 8007d26:	2304      	movcs	r3, #4
 8007d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	2b06      	cmp	r3, #6
 8007d30:	d902      	bls.n	8007d38 <NVIC_EncodePriority+0x30>
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	3b03      	subs	r3, #3
 8007d36:	e000      	b.n	8007d3a <NVIC_EncodePriority+0x32>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	43da      	mvns	r2, r3
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	401a      	ands	r2, r3
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d50:	f04f 31ff 	mov.w	r1, #4294967295
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5a:	43d9      	mvns	r1, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d60:	4313      	orrs	r3, r2
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3724      	adds	r7, #36	; 0x24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc80      	pop	{r7}
 8007d6a:	4770      	bx	lr

08007d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d7c:	d301      	bcc.n	8007d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e00f      	b.n	8007da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d82:	4a0a      	ldr	r2, [pc, #40]	; (8007dac <SysTick_Config+0x40>)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d8a:	210f      	movs	r1, #15
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	f7ff ff90 	bl	8007cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d94:	4b05      	ldr	r3, [pc, #20]	; (8007dac <SysTick_Config+0x40>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d9a:	4b04      	ldr	r3, [pc, #16]	; (8007dac <SysTick_Config+0x40>)
 8007d9c:	2207      	movs	r2, #7
 8007d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	e000e010 	.word	0xe000e010

08007db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7ff ff2d 	bl	8007c18 <__NVIC_SetPriorityGrouping>
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	4603      	mov	r3, r0
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007dd8:	f7ff ff42 	bl	8007c60 <__NVIC_GetPriorityGrouping>
 8007ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	6978      	ldr	r0, [r7, #20]
 8007de4:	f7ff ff90 	bl	8007d08 <NVIC_EncodePriority>
 8007de8:	4602      	mov	r2, r0
 8007dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dee:	4611      	mov	r1, r2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff ff5f 	bl	8007cb4 <__NVIC_SetPriority>
}
 8007df6:	bf00      	nop
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b082      	sub	sp, #8
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	4603      	mov	r3, r0
 8007e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff ff35 	bl	8007c7c <__NVIC_EnableIRQ>
}
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ffa2 	bl	8007d6c <SysTick_Config>
 8007e28:	4603      	mov	r3, r0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d008      	beq.n	8007e5c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e020      	b.n	8007e9e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 020e 	bic.w	r2, r2, #14
 8007e6a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0201 	bic.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e84:	2101      	movs	r1, #1
 8007e86:	fa01 f202 	lsl.w	r2, r1, r2
 8007e8a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bc80      	pop	{r7}
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d005      	beq.n	8007ecc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2204      	movs	r2, #4
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	73fb      	strb	r3, [r7, #15]
 8007eca:	e0d6      	b.n	800807a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 020e 	bic.w	r2, r2, #14
 8007eda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0201 	bic.w	r2, r2, #1
 8007eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	4b64      	ldr	r3, [pc, #400]	; (8008084 <HAL_DMA_Abort_IT+0x1dc>)
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d958      	bls.n	8007faa <HAL_DMA_Abort_IT+0x102>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a62      	ldr	r2, [pc, #392]	; (8008088 <HAL_DMA_Abort_IT+0x1e0>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d04f      	beq.n	8007fa2 <HAL_DMA_Abort_IT+0xfa>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a61      	ldr	r2, [pc, #388]	; (800808c <HAL_DMA_Abort_IT+0x1e4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d048      	beq.n	8007f9e <HAL_DMA_Abort_IT+0xf6>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a5f      	ldr	r2, [pc, #380]	; (8008090 <HAL_DMA_Abort_IT+0x1e8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d040      	beq.n	8007f98 <HAL_DMA_Abort_IT+0xf0>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a5e      	ldr	r2, [pc, #376]	; (8008094 <HAL_DMA_Abort_IT+0x1ec>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d038      	beq.n	8007f92 <HAL_DMA_Abort_IT+0xea>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a5c      	ldr	r2, [pc, #368]	; (8008098 <HAL_DMA_Abort_IT+0x1f0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d030      	beq.n	8007f8c <HAL_DMA_Abort_IT+0xe4>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a5b      	ldr	r2, [pc, #364]	; (800809c <HAL_DMA_Abort_IT+0x1f4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d028      	beq.n	8007f86 <HAL_DMA_Abort_IT+0xde>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a52      	ldr	r2, [pc, #328]	; (8008084 <HAL_DMA_Abort_IT+0x1dc>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d020      	beq.n	8007f80 <HAL_DMA_Abort_IT+0xd8>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a57      	ldr	r2, [pc, #348]	; (80080a0 <HAL_DMA_Abort_IT+0x1f8>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d019      	beq.n	8007f7c <HAL_DMA_Abort_IT+0xd4>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a55      	ldr	r2, [pc, #340]	; (80080a4 <HAL_DMA_Abort_IT+0x1fc>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d012      	beq.n	8007f78 <HAL_DMA_Abort_IT+0xd0>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a54      	ldr	r2, [pc, #336]	; (80080a8 <HAL_DMA_Abort_IT+0x200>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d00a      	beq.n	8007f72 <HAL_DMA_Abort_IT+0xca>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a52      	ldr	r2, [pc, #328]	; (80080ac <HAL_DMA_Abort_IT+0x204>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d102      	bne.n	8007f6c <HAL_DMA_Abort_IT+0xc4>
 8007f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f6a:	e01b      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f70:	e018      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f76:	e015      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007f78:	2310      	movs	r3, #16
 8007f7a:	e013      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e011      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007f80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f84:	e00e      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007f86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f8a:	e00b      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f90:	e008      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f96:	e005      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f9c:	e002      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007f9e:	2310      	movs	r3, #16
 8007fa0:	e000      	b.n	8007fa4 <HAL_DMA_Abort_IT+0xfc>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4a42      	ldr	r2, [pc, #264]	; (80080b0 <HAL_DMA_Abort_IT+0x208>)
 8007fa6:	6053      	str	r3, [r2, #4]
 8007fa8:	e057      	b.n	800805a <HAL_DMA_Abort_IT+0x1b2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a36      	ldr	r2, [pc, #216]	; (8008088 <HAL_DMA_Abort_IT+0x1e0>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d04f      	beq.n	8008054 <HAL_DMA_Abort_IT+0x1ac>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a34      	ldr	r2, [pc, #208]	; (800808c <HAL_DMA_Abort_IT+0x1e4>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d048      	beq.n	8008050 <HAL_DMA_Abort_IT+0x1a8>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a33      	ldr	r2, [pc, #204]	; (8008090 <HAL_DMA_Abort_IT+0x1e8>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d040      	beq.n	800804a <HAL_DMA_Abort_IT+0x1a2>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a31      	ldr	r2, [pc, #196]	; (8008094 <HAL_DMA_Abort_IT+0x1ec>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d038      	beq.n	8008044 <HAL_DMA_Abort_IT+0x19c>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a30      	ldr	r2, [pc, #192]	; (8008098 <HAL_DMA_Abort_IT+0x1f0>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d030      	beq.n	800803e <HAL_DMA_Abort_IT+0x196>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a2e      	ldr	r2, [pc, #184]	; (800809c <HAL_DMA_Abort_IT+0x1f4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d028      	beq.n	8008038 <HAL_DMA_Abort_IT+0x190>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a26      	ldr	r2, [pc, #152]	; (8008084 <HAL_DMA_Abort_IT+0x1dc>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d020      	beq.n	8008032 <HAL_DMA_Abort_IT+0x18a>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a2a      	ldr	r2, [pc, #168]	; (80080a0 <HAL_DMA_Abort_IT+0x1f8>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d019      	beq.n	800802e <HAL_DMA_Abort_IT+0x186>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a29      	ldr	r2, [pc, #164]	; (80080a4 <HAL_DMA_Abort_IT+0x1fc>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d012      	beq.n	800802a <HAL_DMA_Abort_IT+0x182>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a27      	ldr	r2, [pc, #156]	; (80080a8 <HAL_DMA_Abort_IT+0x200>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00a      	beq.n	8008024 <HAL_DMA_Abort_IT+0x17c>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a26      	ldr	r2, [pc, #152]	; (80080ac <HAL_DMA_Abort_IT+0x204>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d102      	bne.n	800801e <HAL_DMA_Abort_IT+0x176>
 8008018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800801c:	e01b      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 800801e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008022:	e018      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 8008024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008028:	e015      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 800802a:	2310      	movs	r3, #16
 800802c:	e013      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 800802e:	2301      	movs	r3, #1
 8008030:	e011      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 8008032:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008036:	e00e      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 8008038:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800803c:	e00b      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 800803e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008042:	e008      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 8008044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008048:	e005      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 800804a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800804e:	e002      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 8008050:	2310      	movs	r3, #16
 8008052:	e000      	b.n	8008056 <HAL_DMA_Abort_IT+0x1ae>
 8008054:	2301      	movs	r3, #1
 8008056:	4a17      	ldr	r2, [pc, #92]	; (80080b4 <HAL_DMA_Abort_IT+0x20c>)
 8008058:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
    } 
  }
  return status;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	40020080 	.word	0x40020080
 8008088:	40020008 	.word	0x40020008
 800808c:	4002001c 	.word	0x4002001c
 8008090:	40020030 	.word	0x40020030
 8008094:	40020044 	.word	0x40020044
 8008098:	40020058 	.word	0x40020058
 800809c:	4002006c 	.word	0x4002006c
 80080a0:	40020408 	.word	0x40020408
 80080a4:	4002041c 	.word	0x4002041c
 80080a8:	40020430 	.word	0x40020430
 80080ac:	40020444 	.word	0x40020444
 80080b0:	40020400 	.word	0x40020400
 80080b4:	40020000 	.word	0x40020000

080080b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b08b      	sub	sp, #44	; 0x2c
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80080c2:	2300      	movs	r3, #0
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80080c6:	2300      	movs	r3, #0
 80080c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080ca:	e179      	b.n	80083c0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80080cc:	2201      	movs	r2, #1
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	fa02 f303 	lsl.w	r3, r2, r3
 80080d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	4013      	ands	r3, r2
 80080de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	f040 8168 	bne.w	80083ba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	4a96      	ldr	r2, [pc, #600]	; (8008348 <HAL_GPIO_Init+0x290>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d05e      	beq.n	80081b2 <HAL_GPIO_Init+0xfa>
 80080f4:	4a94      	ldr	r2, [pc, #592]	; (8008348 <HAL_GPIO_Init+0x290>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d875      	bhi.n	80081e6 <HAL_GPIO_Init+0x12e>
 80080fa:	4a94      	ldr	r2, [pc, #592]	; (800834c <HAL_GPIO_Init+0x294>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d058      	beq.n	80081b2 <HAL_GPIO_Init+0xfa>
 8008100:	4a92      	ldr	r2, [pc, #584]	; (800834c <HAL_GPIO_Init+0x294>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d86f      	bhi.n	80081e6 <HAL_GPIO_Init+0x12e>
 8008106:	4a92      	ldr	r2, [pc, #584]	; (8008350 <HAL_GPIO_Init+0x298>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d052      	beq.n	80081b2 <HAL_GPIO_Init+0xfa>
 800810c:	4a90      	ldr	r2, [pc, #576]	; (8008350 <HAL_GPIO_Init+0x298>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d869      	bhi.n	80081e6 <HAL_GPIO_Init+0x12e>
 8008112:	4a90      	ldr	r2, [pc, #576]	; (8008354 <HAL_GPIO_Init+0x29c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d04c      	beq.n	80081b2 <HAL_GPIO_Init+0xfa>
 8008118:	4a8e      	ldr	r2, [pc, #568]	; (8008354 <HAL_GPIO_Init+0x29c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d863      	bhi.n	80081e6 <HAL_GPIO_Init+0x12e>
 800811e:	4a8e      	ldr	r2, [pc, #568]	; (8008358 <HAL_GPIO_Init+0x2a0>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d046      	beq.n	80081b2 <HAL_GPIO_Init+0xfa>
 8008124:	4a8c      	ldr	r2, [pc, #560]	; (8008358 <HAL_GPIO_Init+0x2a0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d85d      	bhi.n	80081e6 <HAL_GPIO_Init+0x12e>
 800812a:	2b12      	cmp	r3, #18
 800812c:	d82a      	bhi.n	8008184 <HAL_GPIO_Init+0xcc>
 800812e:	2b12      	cmp	r3, #18
 8008130:	d859      	bhi.n	80081e6 <HAL_GPIO_Init+0x12e>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <HAL_GPIO_Init+0x80>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	080081b3 	.word	0x080081b3
 800813c:	0800818d 	.word	0x0800818d
 8008140:	0800819f 	.word	0x0800819f
 8008144:	080081e1 	.word	0x080081e1
 8008148:	080081e7 	.word	0x080081e7
 800814c:	080081e7 	.word	0x080081e7
 8008150:	080081e7 	.word	0x080081e7
 8008154:	080081e7 	.word	0x080081e7
 8008158:	080081e7 	.word	0x080081e7
 800815c:	080081e7 	.word	0x080081e7
 8008160:	080081e7 	.word	0x080081e7
 8008164:	080081e7 	.word	0x080081e7
 8008168:	080081e7 	.word	0x080081e7
 800816c:	080081e7 	.word	0x080081e7
 8008170:	080081e7 	.word	0x080081e7
 8008174:	080081e7 	.word	0x080081e7
 8008178:	080081e7 	.word	0x080081e7
 800817c:	08008195 	.word	0x08008195
 8008180:	080081a9 	.word	0x080081a9
 8008184:	4a75      	ldr	r2, [pc, #468]	; (800835c <HAL_GPIO_Init+0x2a4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d013      	beq.n	80081b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800818a:	e02c      	b.n	80081e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	623b      	str	r3, [r7, #32]
          break;
 8008192:	e029      	b.n	80081e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	3304      	adds	r3, #4
 800819a:	623b      	str	r3, [r7, #32]
          break;
 800819c:	e024      	b.n	80081e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	3308      	adds	r3, #8
 80081a4:	623b      	str	r3, [r7, #32]
          break;
 80081a6:	e01f      	b.n	80081e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	330c      	adds	r3, #12
 80081ae:	623b      	str	r3, [r7, #32]
          break;
 80081b0:	e01a      	b.n	80081e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d102      	bne.n	80081c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80081ba:	2304      	movs	r3, #4
 80081bc:	623b      	str	r3, [r7, #32]
          break;
 80081be:	e013      	b.n	80081e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d105      	bne.n	80081d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80081c8:	2308      	movs	r3, #8
 80081ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	611a      	str	r2, [r3, #16]
          break;
 80081d2:	e009      	b.n	80081e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80081d4:	2308      	movs	r3, #8
 80081d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	615a      	str	r2, [r3, #20]
          break;
 80081de:	e003      	b.n	80081e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80081e0:	2300      	movs	r3, #0
 80081e2:	623b      	str	r3, [r7, #32]
          break;
 80081e4:	e000      	b.n	80081e8 <HAL_GPIO_Init+0x130>
          break;
 80081e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	2bff      	cmp	r3, #255	; 0xff
 80081ec:	d801      	bhi.n	80081f2 <HAL_GPIO_Init+0x13a>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	e001      	b.n	80081f6 <HAL_GPIO_Init+0x13e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3304      	adds	r3, #4
 80081f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	2bff      	cmp	r3, #255	; 0xff
 80081fc:	d802      	bhi.n	8008204 <HAL_GPIO_Init+0x14c>
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	e002      	b.n	800820a <HAL_GPIO_Init+0x152>
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	3b08      	subs	r3, #8
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	210f      	movs	r1, #15
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	fa01 f303 	lsl.w	r3, r1, r3
 8008218:	43db      	mvns	r3, r3
 800821a:	401a      	ands	r2, r3
 800821c:	6a39      	ldr	r1, [r7, #32]
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	fa01 f303 	lsl.w	r3, r1, r3
 8008224:	431a      	orrs	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 80c1 	beq.w	80083ba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008238:	4b49      	ldr	r3, [pc, #292]	; (8008360 <HAL_GPIO_Init+0x2a8>)
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	4a48      	ldr	r2, [pc, #288]	; (8008360 <HAL_GPIO_Init+0x2a8>)
 800823e:	f043 0301 	orr.w	r3, r3, #1
 8008242:	6193      	str	r3, [r2, #24]
 8008244:	4b46      	ldr	r3, [pc, #280]	; (8008360 <HAL_GPIO_Init+0x2a8>)
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	60bb      	str	r3, [r7, #8]
 800824e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008250:	4a44      	ldr	r2, [pc, #272]	; (8008364 <HAL_GPIO_Init+0x2ac>)
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	089b      	lsrs	r3, r3, #2
 8008256:	3302      	adds	r3, #2
 8008258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800825c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	f003 0303 	and.w	r3, r3, #3
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	220f      	movs	r2, #15
 8008268:	fa02 f303 	lsl.w	r3, r2, r3
 800826c:	43db      	mvns	r3, r3
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4013      	ands	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a3c      	ldr	r2, [pc, #240]	; (8008368 <HAL_GPIO_Init+0x2b0>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d01f      	beq.n	80082bc <HAL_GPIO_Init+0x204>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a3b      	ldr	r2, [pc, #236]	; (800836c <HAL_GPIO_Init+0x2b4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d019      	beq.n	80082b8 <HAL_GPIO_Init+0x200>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a3a      	ldr	r2, [pc, #232]	; (8008370 <HAL_GPIO_Init+0x2b8>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d013      	beq.n	80082b4 <HAL_GPIO_Init+0x1fc>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a39      	ldr	r2, [pc, #228]	; (8008374 <HAL_GPIO_Init+0x2bc>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00d      	beq.n	80082b0 <HAL_GPIO_Init+0x1f8>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a38      	ldr	r2, [pc, #224]	; (8008378 <HAL_GPIO_Init+0x2c0>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d007      	beq.n	80082ac <HAL_GPIO_Init+0x1f4>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a37      	ldr	r2, [pc, #220]	; (800837c <HAL_GPIO_Init+0x2c4>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d101      	bne.n	80082a8 <HAL_GPIO_Init+0x1f0>
 80082a4:	2305      	movs	r3, #5
 80082a6:	e00a      	b.n	80082be <HAL_GPIO_Init+0x206>
 80082a8:	2306      	movs	r3, #6
 80082aa:	e008      	b.n	80082be <HAL_GPIO_Init+0x206>
 80082ac:	2304      	movs	r3, #4
 80082ae:	e006      	b.n	80082be <HAL_GPIO_Init+0x206>
 80082b0:	2303      	movs	r3, #3
 80082b2:	e004      	b.n	80082be <HAL_GPIO_Init+0x206>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e002      	b.n	80082be <HAL_GPIO_Init+0x206>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e000      	b.n	80082be <HAL_GPIO_Init+0x206>
 80082bc:	2300      	movs	r3, #0
 80082be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c0:	f002 0203 	and.w	r2, r2, #3
 80082c4:	0092      	lsls	r2, r2, #2
 80082c6:	4093      	lsls	r3, r2
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80082ce:	4925      	ldr	r1, [pc, #148]	; (8008364 <HAL_GPIO_Init+0x2ac>)
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	089b      	lsrs	r3, r3, #2
 80082d4:	3302      	adds	r3, #2
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d006      	beq.n	80082f6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80082e8:	4b25      	ldr	r3, [pc, #148]	; (8008380 <HAL_GPIO_Init+0x2c8>)
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	4924      	ldr	r1, [pc, #144]	; (8008380 <HAL_GPIO_Init+0x2c8>)
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	608b      	str	r3, [r1, #8]
 80082f4:	e006      	b.n	8008304 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80082f6:	4b22      	ldr	r3, [pc, #136]	; (8008380 <HAL_GPIO_Init+0x2c8>)
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	43db      	mvns	r3, r3
 80082fe:	4920      	ldr	r1, [pc, #128]	; (8008380 <HAL_GPIO_Init+0x2c8>)
 8008300:	4013      	ands	r3, r2
 8008302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d006      	beq.n	800831e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008310:	4b1b      	ldr	r3, [pc, #108]	; (8008380 <HAL_GPIO_Init+0x2c8>)
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	491a      	ldr	r1, [pc, #104]	; (8008380 <HAL_GPIO_Init+0x2c8>)
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	4313      	orrs	r3, r2
 800831a:	60cb      	str	r3, [r1, #12]
 800831c:	e006      	b.n	800832c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800831e:	4b18      	ldr	r3, [pc, #96]	; (8008380 <HAL_GPIO_Init+0x2c8>)
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	43db      	mvns	r3, r3
 8008326:	4916      	ldr	r1, [pc, #88]	; (8008380 <HAL_GPIO_Init+0x2c8>)
 8008328:	4013      	ands	r3, r2
 800832a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d025      	beq.n	8008384 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008338:	4b11      	ldr	r3, [pc, #68]	; (8008380 <HAL_GPIO_Init+0x2c8>)
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	4910      	ldr	r1, [pc, #64]	; (8008380 <HAL_GPIO_Init+0x2c8>)
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	4313      	orrs	r3, r2
 8008342:	604b      	str	r3, [r1, #4]
 8008344:	e025      	b.n	8008392 <HAL_GPIO_Init+0x2da>
 8008346:	bf00      	nop
 8008348:	10320000 	.word	0x10320000
 800834c:	10310000 	.word	0x10310000
 8008350:	10220000 	.word	0x10220000
 8008354:	10210000 	.word	0x10210000
 8008358:	10120000 	.word	0x10120000
 800835c:	10110000 	.word	0x10110000
 8008360:	40021000 	.word	0x40021000
 8008364:	40010000 	.word	0x40010000
 8008368:	40010800 	.word	0x40010800
 800836c:	40010c00 	.word	0x40010c00
 8008370:	40011000 	.word	0x40011000
 8008374:	40011400 	.word	0x40011400
 8008378:	40011800 	.word	0x40011800
 800837c:	40011c00 	.word	0x40011c00
 8008380:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008384:	4b15      	ldr	r3, [pc, #84]	; (80083dc <HAL_GPIO_Init+0x324>)
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	43db      	mvns	r3, r3
 800838c:	4913      	ldr	r1, [pc, #76]	; (80083dc <HAL_GPIO_Init+0x324>)
 800838e:	4013      	ands	r3, r2
 8008390:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d006      	beq.n	80083ac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <HAL_GPIO_Init+0x324>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	490e      	ldr	r1, [pc, #56]	; (80083dc <HAL_GPIO_Init+0x324>)
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	600b      	str	r3, [r1, #0]
 80083aa:	e006      	b.n	80083ba <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <HAL_GPIO_Init+0x324>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	43db      	mvns	r3, r3
 80083b4:	4909      	ldr	r1, [pc, #36]	; (80083dc <HAL_GPIO_Init+0x324>)
 80083b6:	4013      	ands	r3, r2
 80083b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	3301      	adds	r3, #1
 80083be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f47f ae7e 	bne.w	80080cc <HAL_GPIO_Init+0x14>
  }
}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	372c      	adds	r7, #44	; 0x2c
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr
 80083dc:	40010400 	.word	0x40010400

080083e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b089      	sub	sp, #36	; 0x24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80083ea:	2300      	movs	r3, #0
 80083ec:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80083ee:	e0a6      	b.n	800853e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80083f0:	2201      	movs	r2, #1
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	fa02 f303 	lsl.w	r3, r2, r3
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	4013      	ands	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8099 	beq.w	8008538 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008406:	4a54      	ldr	r2, [pc, #336]	; (8008558 <HAL_GPIO_DeInit+0x178>)
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	089b      	lsrs	r3, r3, #2
 800840c:	3302      	adds	r3, #2
 800840e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008412:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	220f      	movs	r2, #15
 800841e:	fa02 f303 	lsl.w	r3, r2, r3
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4013      	ands	r3, r2
 8008426:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a4c      	ldr	r2, [pc, #304]	; (800855c <HAL_GPIO_DeInit+0x17c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d01f      	beq.n	8008470 <HAL_GPIO_DeInit+0x90>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a4b      	ldr	r2, [pc, #300]	; (8008560 <HAL_GPIO_DeInit+0x180>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d019      	beq.n	800846c <HAL_GPIO_DeInit+0x8c>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a4a      	ldr	r2, [pc, #296]	; (8008564 <HAL_GPIO_DeInit+0x184>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d013      	beq.n	8008468 <HAL_GPIO_DeInit+0x88>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a49      	ldr	r2, [pc, #292]	; (8008568 <HAL_GPIO_DeInit+0x188>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00d      	beq.n	8008464 <HAL_GPIO_DeInit+0x84>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a48      	ldr	r2, [pc, #288]	; (800856c <HAL_GPIO_DeInit+0x18c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d007      	beq.n	8008460 <HAL_GPIO_DeInit+0x80>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a47      	ldr	r2, [pc, #284]	; (8008570 <HAL_GPIO_DeInit+0x190>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d101      	bne.n	800845c <HAL_GPIO_DeInit+0x7c>
 8008458:	2305      	movs	r3, #5
 800845a:	e00a      	b.n	8008472 <HAL_GPIO_DeInit+0x92>
 800845c:	2306      	movs	r3, #6
 800845e:	e008      	b.n	8008472 <HAL_GPIO_DeInit+0x92>
 8008460:	2304      	movs	r3, #4
 8008462:	e006      	b.n	8008472 <HAL_GPIO_DeInit+0x92>
 8008464:	2303      	movs	r3, #3
 8008466:	e004      	b.n	8008472 <HAL_GPIO_DeInit+0x92>
 8008468:	2302      	movs	r3, #2
 800846a:	e002      	b.n	8008472 <HAL_GPIO_DeInit+0x92>
 800846c:	2301      	movs	r3, #1
 800846e:	e000      	b.n	8008472 <HAL_GPIO_DeInit+0x92>
 8008470:	2300      	movs	r3, #0
 8008472:	69fa      	ldr	r2, [r7, #28]
 8008474:	f002 0203 	and.w	r2, r2, #3
 8008478:	0092      	lsls	r2, r2, #2
 800847a:	4093      	lsls	r3, r2
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	429a      	cmp	r2, r3
 8008480:	d132      	bne.n	80084e8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008482:	4b3c      	ldr	r3, [pc, #240]	; (8008574 <HAL_GPIO_DeInit+0x194>)
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	43db      	mvns	r3, r3
 800848a:	493a      	ldr	r1, [pc, #232]	; (8008574 <HAL_GPIO_DeInit+0x194>)
 800848c:	4013      	ands	r3, r2
 800848e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008490:	4b38      	ldr	r3, [pc, #224]	; (8008574 <HAL_GPIO_DeInit+0x194>)
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	43db      	mvns	r3, r3
 8008498:	4936      	ldr	r1, [pc, #216]	; (8008574 <HAL_GPIO_DeInit+0x194>)
 800849a:	4013      	ands	r3, r2
 800849c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800849e:	4b35      	ldr	r3, [pc, #212]	; (8008574 <HAL_GPIO_DeInit+0x194>)
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	43db      	mvns	r3, r3
 80084a6:	4933      	ldr	r1, [pc, #204]	; (8008574 <HAL_GPIO_DeInit+0x194>)
 80084a8:	4013      	ands	r3, r2
 80084aa:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80084ac:	4b31      	ldr	r3, [pc, #196]	; (8008574 <HAL_GPIO_DeInit+0x194>)
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	43db      	mvns	r3, r3
 80084b4:	492f      	ldr	r1, [pc, #188]	; (8008574 <HAL_GPIO_DeInit+0x194>)
 80084b6:	4013      	ands	r3, r2
 80084b8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	f003 0303 	and.w	r3, r3, #3
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	220f      	movs	r2, #15
 80084c4:	fa02 f303 	lsl.w	r3, r2, r3
 80084c8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80084ca:	4a23      	ldr	r2, [pc, #140]	; (8008558 <HAL_GPIO_DeInit+0x178>)
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	089b      	lsrs	r3, r3, #2
 80084d0:	3302      	adds	r3, #2
 80084d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	43da      	mvns	r2, r3
 80084da:	481f      	ldr	r0, [pc, #124]	; (8008558 <HAL_GPIO_DeInit+0x178>)
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	089b      	lsrs	r3, r3, #2
 80084e0:	400a      	ands	r2, r1
 80084e2:	3302      	adds	r3, #2
 80084e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2bff      	cmp	r3, #255	; 0xff
 80084ec:	d801      	bhi.n	80084f2 <HAL_GPIO_DeInit+0x112>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	e001      	b.n	80084f6 <HAL_GPIO_DeInit+0x116>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3304      	adds	r3, #4
 80084f6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2bff      	cmp	r3, #255	; 0xff
 80084fc:	d802      	bhi.n	8008504 <HAL_GPIO_DeInit+0x124>
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	e002      	b.n	800850a <HAL_GPIO_DeInit+0x12a>
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	3b08      	subs	r3, #8
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	210f      	movs	r1, #15
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	fa01 f303 	lsl.w	r3, r1, r3
 8008518:	43db      	mvns	r3, r3
 800851a:	401a      	ands	r2, r3
 800851c:	2104      	movs	r1, #4
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	fa01 f303 	lsl.w	r3, r1, r3
 8008524:	431a      	orrs	r2, r3
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68da      	ldr	r2, [r3, #12]
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	43db      	mvns	r3, r3
 8008532:	401a      	ands	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	3301      	adds	r3, #1
 800853c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	fa22 f303 	lsr.w	r3, r2, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	f47f af52 	bne.w	80083f0 <HAL_GPIO_DeInit+0x10>
  }
}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	3724      	adds	r7, #36	; 0x24
 8008552:	46bd      	mov	sp, r7
 8008554:	bc80      	pop	{r7}
 8008556:	4770      	bx	lr
 8008558:	40010000 	.word	0x40010000
 800855c:	40010800 	.word	0x40010800
 8008560:	40010c00 	.word	0x40010c00
 8008564:	40011000 	.word	0x40011000
 8008568:	40011400 	.word	0x40011400
 800856c:	40011800 	.word	0x40011800
 8008570:	40011c00 	.word	0x40011c00
 8008574:	40010400 	.word	0x40010400

08008578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	887b      	ldrh	r3, [r7, #2]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
 8008594:	e001      	b.n	800859a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800859a:	7bfb      	ldrb	r3, [r7, #15]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bc80      	pop	{r7}
 80085a4:	4770      	bx	lr

080085a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	460b      	mov	r3, r1
 80085b0:	807b      	strh	r3, [r7, #2]
 80085b2:	4613      	mov	r3, r2
 80085b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80085b6:	787b      	ldrb	r3, [r7, #1]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085bc:	887a      	ldrh	r2, [r7, #2]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80085c2:	e003      	b.n	80085cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80085c4:	887b      	ldrh	r3, [r7, #2]
 80085c6:	041a      	lsls	r2, r3, #16
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	611a      	str	r2, [r3, #16]
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bc80      	pop	{r7}
 80085d4:	4770      	bx	lr

080085d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b085      	sub	sp, #20
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80085e8:	887a      	ldrh	r2, [r7, #2]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4013      	ands	r3, r2
 80085ee:	041a      	lsls	r2, r3, #16
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	43d9      	mvns	r1, r3
 80085f4:	887b      	ldrh	r3, [r7, #2]
 80085f6:	400b      	ands	r3, r1
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	611a      	str	r2, [r3, #16]
}
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	bc80      	pop	{r7}
 8008606:	4770      	bx	lr

08008608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e12b      	b.n	8008872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d106      	bne.n	8008634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7fe fff8 	bl	8007624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2224      	movs	r2, #36	; 0x24
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0201 	bic.w	r2, r2, #1
 800864a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800865a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800866a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800866c:	f001 fdb8 	bl	800a1e0 <HAL_RCC_GetPCLK1Freq>
 8008670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	4a81      	ldr	r2, [pc, #516]	; (800887c <HAL_I2C_Init+0x274>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d807      	bhi.n	800868c <HAL_I2C_Init+0x84>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4a80      	ldr	r2, [pc, #512]	; (8008880 <HAL_I2C_Init+0x278>)
 8008680:	4293      	cmp	r3, r2
 8008682:	bf94      	ite	ls
 8008684:	2301      	movls	r3, #1
 8008686:	2300      	movhi	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	e006      	b.n	800869a <HAL_I2C_Init+0x92>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4a7d      	ldr	r2, [pc, #500]	; (8008884 <HAL_I2C_Init+0x27c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	bf94      	ite	ls
 8008694:	2301      	movls	r3, #1
 8008696:	2300      	movhi	r3, #0
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e0e7      	b.n	8008872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	4a78      	ldr	r2, [pc, #480]	; (8008888 <HAL_I2C_Init+0x280>)
 80086a6:	fba2 2303 	umull	r2, r3, r2, r3
 80086aa:	0c9b      	lsrs	r3, r3, #18
 80086ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	430a      	orrs	r2, r1
 80086c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	4a6a      	ldr	r2, [pc, #424]	; (800887c <HAL_I2C_Init+0x274>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d802      	bhi.n	80086dc <HAL_I2C_Init+0xd4>
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	3301      	adds	r3, #1
 80086da:	e009      	b.n	80086f0 <HAL_I2C_Init+0xe8>
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
 80086e6:	4a69      	ldr	r2, [pc, #420]	; (800888c <HAL_I2C_Init+0x284>)
 80086e8:	fba2 2303 	umull	r2, r3, r2, r3
 80086ec:	099b      	lsrs	r3, r3, #6
 80086ee:	3301      	adds	r3, #1
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6812      	ldr	r2, [r2, #0]
 80086f4:	430b      	orrs	r3, r1
 80086f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	495c      	ldr	r1, [pc, #368]	; (800887c <HAL_I2C_Init+0x274>)
 800870c:	428b      	cmp	r3, r1
 800870e:	d819      	bhi.n	8008744 <HAL_I2C_Init+0x13c>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	1e59      	subs	r1, r3, #1
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	fbb1 f3f3 	udiv	r3, r1, r3
 800871e:	1c59      	adds	r1, r3, #1
 8008720:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008724:	400b      	ands	r3, r1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <HAL_I2C_Init+0x138>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	1e59      	subs	r1, r3, #1
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	fbb1 f3f3 	udiv	r3, r1, r3
 8008738:	3301      	adds	r3, #1
 800873a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800873e:	e051      	b.n	80087e4 <HAL_I2C_Init+0x1dc>
 8008740:	2304      	movs	r3, #4
 8008742:	e04f      	b.n	80087e4 <HAL_I2C_Init+0x1dc>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d111      	bne.n	8008770 <HAL_I2C_Init+0x168>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	1e58      	subs	r0, r3, #1
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6859      	ldr	r1, [r3, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	440b      	add	r3, r1
 800875a:	fbb0 f3f3 	udiv	r3, r0, r3
 800875e:	3301      	adds	r3, #1
 8008760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008764:	2b00      	cmp	r3, #0
 8008766:	bf0c      	ite	eq
 8008768:	2301      	moveq	r3, #1
 800876a:	2300      	movne	r3, #0
 800876c:	b2db      	uxtb	r3, r3
 800876e:	e012      	b.n	8008796 <HAL_I2C_Init+0x18e>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	1e58      	subs	r0, r3, #1
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6859      	ldr	r1, [r3, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	0099      	lsls	r1, r3, #2
 8008780:	440b      	add	r3, r1
 8008782:	fbb0 f3f3 	udiv	r3, r0, r3
 8008786:	3301      	adds	r3, #1
 8008788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800878c:	2b00      	cmp	r3, #0
 800878e:	bf0c      	ite	eq
 8008790:	2301      	moveq	r3, #1
 8008792:	2300      	movne	r3, #0
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <HAL_I2C_Init+0x196>
 800879a:	2301      	movs	r3, #1
 800879c:	e022      	b.n	80087e4 <HAL_I2C_Init+0x1dc>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10e      	bne.n	80087c4 <HAL_I2C_Init+0x1bc>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	1e58      	subs	r0, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6859      	ldr	r1, [r3, #4]
 80087ae:	460b      	mov	r3, r1
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	440b      	add	r3, r1
 80087b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80087b8:	3301      	adds	r3, #1
 80087ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087c2:	e00f      	b.n	80087e4 <HAL_I2C_Init+0x1dc>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	1e58      	subs	r0, r3, #1
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6859      	ldr	r1, [r3, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	440b      	add	r3, r1
 80087d2:	0099      	lsls	r1, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80087da:	3301      	adds	r3, #1
 80087dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	6809      	ldr	r1, [r1, #0]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	69da      	ldr	r2, [r3, #28]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	431a      	orrs	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6911      	ldr	r1, [r2, #16]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	68d2      	ldr	r2, [r2, #12]
 800881e:	4311      	orrs	r1, r2
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	6812      	ldr	r2, [r2, #0]
 8008824:	430b      	orrs	r3, r1
 8008826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	695a      	ldr	r2, [r3, #20]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	431a      	orrs	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	430a      	orrs	r2, r1
 8008842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	000186a0 	.word	0x000186a0
 8008880:	001e847f 	.word	0x001e847f
 8008884:	003d08ff 	.word	0x003d08ff
 8008888:	431bde83 	.word	0x431bde83
 800888c:	10624dd3 	.word	0x10624dd3

08008890 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e021      	b.n	80088e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2224      	movs	r2, #36	; 0x24
 80088a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0201 	bic.w	r2, r2, #1
 80088b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7fe fef0 	bl	80076a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	607a      	str	r2, [r7, #4]
 80088fa:	461a      	mov	r2, r3
 80088fc:	460b      	mov	r3, r1
 80088fe:	817b      	strh	r3, [r7, #10]
 8008900:	4613      	mov	r3, r2
 8008902:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008904:	f7ff f85e 	bl	80079c4 <HAL_GetTick>
 8008908:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b20      	cmp	r3, #32
 8008914:	f040 80e0 	bne.w	8008ad8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	2319      	movs	r3, #25
 800891e:	2201      	movs	r2, #1
 8008920:	4970      	ldr	r1, [pc, #448]	; (8008ae4 <HAL_I2C_Master_Transmit+0x1f4>)
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f000 fe5c 	bl	80095e0 <I2C_WaitOnFlagUntilTimeout>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800892e:	2302      	movs	r3, #2
 8008930:	e0d3      	b.n	8008ada <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008938:	2b01      	cmp	r3, #1
 800893a:	d101      	bne.n	8008940 <HAL_I2C_Master_Transmit+0x50>
 800893c:	2302      	movs	r3, #2
 800893e:	e0cc      	b.n	8008ada <HAL_I2C_Master_Transmit+0x1ea>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b01      	cmp	r3, #1
 8008954:	d007      	beq.n	8008966 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f042 0201 	orr.w	r2, r2, #1
 8008964:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008974:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2221      	movs	r2, #33	; 0x21
 800897a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2210      	movs	r2, #16
 8008982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	893a      	ldrh	r2, [r7, #8]
 8008996:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800899c:	b29a      	uxth	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	4a50      	ldr	r2, [pc, #320]	; (8008ae8 <HAL_I2C_Master_Transmit+0x1f8>)
 80089a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80089a8:	8979      	ldrh	r1, [r7, #10]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	6a3a      	ldr	r2, [r7, #32]
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f000 fc16 	bl	80091e0 <I2C_MasterRequestWrite>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e08d      	b.n	8008ada <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089be:	2300      	movs	r3, #0
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	613b      	str	r3, [r7, #16]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	613b      	str	r3, [r7, #16]
 80089d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80089d4:	e066      	b.n	8008aa4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	6a39      	ldr	r1, [r7, #32]
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 ff1a 	bl	8009814 <I2C_WaitOnTXEFlagUntilTimeout>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00d      	beq.n	8008a02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	d107      	bne.n	80089fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e06b      	b.n	8008ada <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	781a      	ldrb	r2, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d11b      	bne.n	8008a78 <HAL_I2C_Master_Transmit+0x188>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d017      	beq.n	8008a78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	781a      	ldrb	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a58:	1c5a      	adds	r2, r3, #1
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	3b01      	subs	r3, #1
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a70:	3b01      	subs	r3, #1
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	6a39      	ldr	r1, [r7, #32]
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 ff11 	bl	80098a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00d      	beq.n	8008aa4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d107      	bne.n	8008aa0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e01a      	b.n	8008ada <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d194      	bne.n	80089d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e000      	b.n	8008ada <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008ad8:	2302      	movs	r3, #2
  }
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	00100002 	.word	0x00100002
 8008ae8:	ffff0000 	.word	0xffff0000

08008aec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b088      	sub	sp, #32
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	4608      	mov	r0, r1
 8008af6:	4611      	mov	r1, r2
 8008af8:	461a      	mov	r2, r3
 8008afa:	4603      	mov	r3, r0
 8008afc:	817b      	strh	r3, [r7, #10]
 8008afe:	460b      	mov	r3, r1
 8008b00:	813b      	strh	r3, [r7, #8]
 8008b02:	4613      	mov	r3, r2
 8008b04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b06:	f7fe ff5d 	bl	80079c4 <HAL_GetTick>
 8008b0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b20      	cmp	r3, #32
 8008b16:	f040 80d9 	bne.w	8008ccc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2319      	movs	r3, #25
 8008b20:	2201      	movs	r2, #1
 8008b22:	496d      	ldr	r1, [pc, #436]	; (8008cd8 <HAL_I2C_Mem_Write+0x1ec>)
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 fd5b 	bl	80095e0 <I2C_WaitOnFlagUntilTimeout>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008b30:	2302      	movs	r3, #2
 8008b32:	e0cc      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d101      	bne.n	8008b42 <HAL_I2C_Mem_Write+0x56>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e0c5      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d007      	beq.n	8008b68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2221      	movs	r2, #33	; 0x21
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2240      	movs	r2, #64	; 0x40
 8008b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6a3a      	ldr	r2, [r7, #32]
 8008b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4a4d      	ldr	r2, [pc, #308]	; (8008cdc <HAL_I2C_Mem_Write+0x1f0>)
 8008ba8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008baa:	88f8      	ldrh	r0, [r7, #6]
 8008bac:	893a      	ldrh	r2, [r7, #8]
 8008bae:	8979      	ldrh	r1, [r7, #10]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	4603      	mov	r3, r0
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fb92 	bl	80092e4 <I2C_RequestMemoryWrite>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d052      	beq.n	8008c6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e081      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fe20 	bl	8009814 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00d      	beq.n	8008bf6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d107      	bne.n	8008bf2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e06b      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	781a      	ldrb	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c10:	3b01      	subs	r3, #1
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d11b      	bne.n	8008c6c <HAL_I2C_Mem_Write+0x180>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d017      	beq.n	8008c6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	781a      	ldrb	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1aa      	bne.n	8008bca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fe13 	bl	80098a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00d      	beq.n	8008ca0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	d107      	bne.n	8008c9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e016      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e000      	b.n	8008cce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008ccc:	2302      	movs	r3, #2
  }
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3718      	adds	r7, #24
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	00100002 	.word	0x00100002
 8008cdc:	ffff0000 	.word	0xffff0000

08008ce0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08c      	sub	sp, #48	; 0x30
 8008ce4:	af02      	add	r7, sp, #8
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	4608      	mov	r0, r1
 8008cea:	4611      	mov	r1, r2
 8008cec:	461a      	mov	r2, r3
 8008cee:	4603      	mov	r3, r0
 8008cf0:	817b      	strh	r3, [r7, #10]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	813b      	strh	r3, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008cfe:	f7fe fe61 	bl	80079c4 <HAL_GetTick>
 8008d02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	f040 8244 	bne.w	800919a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	2319      	movs	r3, #25
 8008d18:	2201      	movs	r2, #1
 8008d1a:	4982      	ldr	r1, [pc, #520]	; (8008f24 <HAL_I2C_Mem_Read+0x244>)
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 fc5f 	bl	80095e0 <I2C_WaitOnFlagUntilTimeout>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e237      	b.n	800919c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d101      	bne.n	8008d3a <HAL_I2C_Mem_Read+0x5a>
 8008d36:	2302      	movs	r3, #2
 8008d38:	e230      	b.n	800919c <HAL_I2C_Mem_Read+0x4bc>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d007      	beq.n	8008d60 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2222      	movs	r2, #34	; 0x22
 8008d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2240      	movs	r2, #64	; 0x40
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008d90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4a62      	ldr	r2, [pc, #392]	; (8008f28 <HAL_I2C_Mem_Read+0x248>)
 8008da0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008da2:	88f8      	ldrh	r0, [r7, #6]
 8008da4:	893a      	ldrh	r2, [r7, #8]
 8008da6:	8979      	ldrh	r1, [r7, #10]
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	4603      	mov	r3, r0
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 fb2c 	bl	8009410 <I2C_RequestMemoryRead>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e1ec      	b.n	800919c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d113      	bne.n	8008df2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61fb      	str	r3, [r7, #28]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	695b      	ldr	r3, [r3, #20]
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	61fb      	str	r3, [r7, #28]
 8008dde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	e1c0      	b.n	8009174 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d11e      	bne.n	8008e38 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e0a:	b672      	cpsid	i
}
 8008e0c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61bb      	str	r3, [r7, #24]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	61bb      	str	r3, [r7, #24]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008e34:	b662      	cpsie	i
}
 8008e36:	e035      	b.n	8008ea4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d11e      	bne.n	8008e7e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e50:	b672      	cpsid	i
}
 8008e52:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008e7a:	b662      	cpsie	i
}
 8008e7c:	e012      	b.n	8008ea4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e8c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e8e:	2300      	movs	r3, #0
 8008e90:	613b      	str	r3, [r7, #16]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	613b      	str	r3, [r7, #16]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008ea4:	e166      	b.n	8009174 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	f200 811f 	bhi.w	80090ee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d123      	bne.n	8008f00 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 fd39 	bl	8009934 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e167      	b.n	800919c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	691a      	ldr	r2, [r3, #16]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008efe:	e139      	b.n	8009174 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d152      	bne.n	8008fae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	2200      	movs	r2, #0
 8008f10:	4906      	ldr	r1, [pc, #24]	; (8008f2c <HAL_I2C_Mem_Read+0x24c>)
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 fb64 	bl	80095e0 <I2C_WaitOnFlagUntilTimeout>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d008      	beq.n	8008f30 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e13c      	b.n	800919c <HAL_I2C_Mem_Read+0x4bc>
 8008f22:	bf00      	nop
 8008f24:	00100002 	.word	0x00100002
 8008f28:	ffff0000 	.word	0xffff0000
 8008f2c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008f30:	b672      	cpsid	i
}
 8008f32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	691a      	ldr	r2, [r3, #16]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4e:	b2d2      	uxtb	r2, r2
 8008f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f60:	3b01      	subs	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008f76:	b662      	cpsie	i
}
 8008f78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	b2d2      	uxtb	r2, r2
 8008f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f96:	3b01      	subs	r3, #1
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fac:	e0e2      	b.n	8009174 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	497b      	ldr	r1, [pc, #492]	; (80091a4 <HAL_I2C_Mem_Read+0x4c4>)
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 fb11 	bl	80095e0 <I2C_WaitOnFlagUntilTimeout>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e0e9      	b.n	800919c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fd8:	b672      	cpsid	i
}
 8008fda:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691a      	ldr	r2, [r3, #16]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe6:	b2d2      	uxtb	r2, r2
 8008fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009004:	b29b      	uxth	r3, r3
 8009006:	3b01      	subs	r3, #1
 8009008:	b29a      	uxth	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800900e:	4b66      	ldr	r3, [pc, #408]	; (80091a8 <HAL_I2C_Mem_Read+0x4c8>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	08db      	lsrs	r3, r3, #3
 8009014:	4a65      	ldr	r2, [pc, #404]	; (80091ac <HAL_I2C_Mem_Read+0x4cc>)
 8009016:	fba2 2303 	umull	r2, r3, r2, r3
 800901a:	0a1a      	lsrs	r2, r3, #8
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	00da      	lsls	r2, r3, #3
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	3b01      	subs	r3, #1
 800902c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d118      	bne.n	8009066 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2220      	movs	r2, #32
 800903e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	f043 0220 	orr.w	r2, r3, #32
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009056:	b662      	cpsie	i
}
 8009058:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e09a      	b.n	800919c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b04      	cmp	r3, #4
 8009072:	d1d9      	bne.n	8009028 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691a      	ldr	r2, [r3, #16]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	b2d2      	uxtb	r2, r2
 8009090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80090b6:	b662      	cpsie	i
}
 80090b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	691a      	ldr	r2, [r3, #16]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	b2d2      	uxtb	r2, r2
 80090c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d6:	3b01      	subs	r3, #1
 80090d8:	b29a      	uxth	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090ec:	e042      	b.n	8009174 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 fc1e 	bl	8009934 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e04c      	b.n	800919c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	691a      	ldr	r2, [r3, #16]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	b2d2      	uxtb	r2, r2
 800910e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911e:	3b01      	subs	r3, #1
 8009120:	b29a      	uxth	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	f003 0304 	and.w	r3, r3, #4
 800913e:	2b04      	cmp	r3, #4
 8009140:	d118      	bne.n	8009174 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	691a      	ldr	r2, [r3, #16]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	b2d2      	uxtb	r2, r2
 800914e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	1c5a      	adds	r2, r3, #1
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800915e:	3b01      	subs	r3, #1
 8009160:	b29a      	uxth	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800916a:	b29b      	uxth	r3, r3
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009178:	2b00      	cmp	r3, #0
 800917a:	f47f ae94 	bne.w	8008ea6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2220      	movs	r2, #32
 8009182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	e000      	b.n	800919c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800919a:	2302      	movs	r3, #2
  }
}
 800919c:	4618      	mov	r0, r3
 800919e:	3728      	adds	r7, #40	; 0x28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	00010004 	.word	0x00010004
 80091a8:	20000944 	.word	0x20000944
 80091ac:	14f8b589 	.word	0x14f8b589

080091b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091be:	b2db      	uxtb	r3, r3
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bc80      	pop	{r7}
 80091c8:	4770      	bx	lr

080091ca <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	bc80      	pop	{r7}
 80091de:	4770      	bx	lr

080091e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af02      	add	r7, sp, #8
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	607a      	str	r2, [r7, #4]
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	460b      	mov	r3, r1
 80091ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d006      	beq.n	800920a <I2C_MasterRequestWrite+0x2a>
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d003      	beq.n	800920a <I2C_MasterRequestWrite+0x2a>
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009208:	d108      	bne.n	800921c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	e00b      	b.n	8009234 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009220:	2b12      	cmp	r3, #18
 8009222:	d107      	bne.n	8009234 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009232:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 f9cd 	bl	80095e0 <I2C_WaitOnFlagUntilTimeout>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00d      	beq.n	8009268 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800925a:	d103      	bne.n	8009264 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009262:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e035      	b.n	80092d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009270:	d108      	bne.n	8009284 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009272:	897b      	ldrh	r3, [r7, #10]
 8009274:	b2db      	uxtb	r3, r3
 8009276:	461a      	mov	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009280:	611a      	str	r2, [r3, #16]
 8009282:	e01b      	b.n	80092bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009284:	897b      	ldrh	r3, [r7, #10]
 8009286:	11db      	asrs	r3, r3, #7
 8009288:	b2db      	uxtb	r3, r3
 800928a:	f003 0306 	and.w	r3, r3, #6
 800928e:	b2db      	uxtb	r3, r3
 8009290:	f063 030f 	orn	r3, r3, #15
 8009294:	b2da      	uxtb	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	490e      	ldr	r1, [pc, #56]	; (80092dc <I2C_MasterRequestWrite+0xfc>)
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fa16 	bl	80096d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e010      	b.n	80092d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80092b2:	897b      	ldrh	r3, [r7, #10]
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	4907      	ldr	r1, [pc, #28]	; (80092e0 <I2C_MasterRequestWrite+0x100>)
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 fa06 	bl	80096d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e000      	b.n	80092d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	00010008 	.word	0x00010008
 80092e0:	00010002 	.word	0x00010002

080092e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	4608      	mov	r0, r1
 80092ee:	4611      	mov	r1, r2
 80092f0:	461a      	mov	r2, r3
 80092f2:	4603      	mov	r3, r0
 80092f4:	817b      	strh	r3, [r7, #10]
 80092f6:	460b      	mov	r3, r1
 80092f8:	813b      	strh	r3, [r7, #8]
 80092fa:	4613      	mov	r3, r2
 80092fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800930c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	2200      	movs	r2, #0
 8009316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 f960 	bl	80095e0 <I2C_WaitOnFlagUntilTimeout>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009334:	d103      	bne.n	800933e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800933c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e05f      	b.n	8009402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009342:	897b      	ldrh	r3, [r7, #10]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	461a      	mov	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	6a3a      	ldr	r2, [r7, #32]
 8009356:	492d      	ldr	r1, [pc, #180]	; (800940c <I2C_RequestMemoryWrite+0x128>)
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 f9bb 	bl	80096d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e04c      	b.n	8009402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009368:	2300      	movs	r3, #0
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	617b      	str	r3, [r7, #20]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	617b      	str	r3, [r7, #20]
 800937c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800937e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009380:	6a39      	ldr	r1, [r7, #32]
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f000 fa46 	bl	8009814 <I2C_WaitOnTXEFlagUntilTimeout>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00d      	beq.n	80093aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009392:	2b04      	cmp	r3, #4
 8009394:	d107      	bne.n	80093a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e02b      	b.n	8009402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80093aa:	88fb      	ldrh	r3, [r7, #6]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d105      	bne.n	80093bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093b0:	893b      	ldrh	r3, [r7, #8]
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	611a      	str	r2, [r3, #16]
 80093ba:	e021      	b.n	8009400 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80093bc:	893b      	ldrh	r3, [r7, #8]
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093cc:	6a39      	ldr	r1, [r7, #32]
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 fa20 	bl	8009814 <I2C_WaitOnTXEFlagUntilTimeout>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00d      	beq.n	80093f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	2b04      	cmp	r3, #4
 80093e0:	d107      	bne.n	80093f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e005      	b.n	8009402 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093f6:	893b      	ldrh	r3, [r7, #8]
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	00010002 	.word	0x00010002

08009410 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	4608      	mov	r0, r1
 800941a:	4611      	mov	r1, r2
 800941c:	461a      	mov	r2, r3
 800941e:	4603      	mov	r3, r0
 8009420:	817b      	strh	r3, [r7, #10]
 8009422:	460b      	mov	r3, r1
 8009424:	813b      	strh	r3, [r7, #8]
 8009426:	4613      	mov	r3, r2
 8009428:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009438:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	2200      	movs	r2, #0
 8009452:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 f8c2 	bl	80095e0 <I2C_WaitOnFlagUntilTimeout>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00d      	beq.n	800947e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800946c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009470:	d103      	bne.n	800947a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009478:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e0aa      	b.n	80095d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800947e:	897b      	ldrh	r3, [r7, #10]
 8009480:	b2db      	uxtb	r3, r3
 8009482:	461a      	mov	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800948c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009490:	6a3a      	ldr	r2, [r7, #32]
 8009492:	4952      	ldr	r1, [pc, #328]	; (80095dc <I2C_RequestMemoryRead+0x1cc>)
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 f91d 	bl	80096d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e097      	b.n	80095d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094a4:	2300      	movs	r3, #0
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	617b      	str	r3, [r7, #20]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094bc:	6a39      	ldr	r1, [r7, #32]
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 f9a8 	bl	8009814 <I2C_WaitOnTXEFlagUntilTimeout>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00d      	beq.n	80094e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d107      	bne.n	80094e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e076      	b.n	80095d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094e6:	88fb      	ldrh	r3, [r7, #6]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d105      	bne.n	80094f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094ec:	893b      	ldrh	r3, [r7, #8]
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	611a      	str	r2, [r3, #16]
 80094f6:	e021      	b.n	800953c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80094f8:	893b      	ldrh	r3, [r7, #8]
 80094fa:	0a1b      	lsrs	r3, r3, #8
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009508:	6a39      	ldr	r1, [r7, #32]
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 f982 	bl	8009814 <I2C_WaitOnTXEFlagUntilTimeout>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00d      	beq.n	8009532 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951a:	2b04      	cmp	r3, #4
 800951c:	d107      	bne.n	800952e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800952c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e050      	b.n	80095d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009532:	893b      	ldrh	r3, [r7, #8]
 8009534:	b2da      	uxtb	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800953c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800953e:	6a39      	ldr	r1, [r7, #32]
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f000 f967 	bl	8009814 <I2C_WaitOnTXEFlagUntilTimeout>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00d      	beq.n	8009568 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009550:	2b04      	cmp	r3, #4
 8009552:	d107      	bne.n	8009564 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009562:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e035      	b.n	80095d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009576:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	2200      	movs	r2, #0
 8009580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 f82b 	bl	80095e0 <I2C_WaitOnFlagUntilTimeout>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00d      	beq.n	80095ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800959e:	d103      	bne.n	80095a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e013      	b.n	80095d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80095ac:	897b      	ldrh	r3, [r7, #10]
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	f043 0301 	orr.w	r3, r3, #1
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	6a3a      	ldr	r2, [r7, #32]
 80095c0:	4906      	ldr	r1, [pc, #24]	; (80095dc <I2C_RequestMemoryRead+0x1cc>)
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f000 f886 	bl	80096d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e000      	b.n	80095d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	00010002 	.word	0x00010002

080095e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	4613      	mov	r3, r2
 80095ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095f0:	e048      	b.n	8009684 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f8:	d044      	beq.n	8009684 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fa:	f7fe f9e3 	bl	80079c4 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d302      	bcc.n	8009610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d139      	bne.n	8009684 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	0c1b      	lsrs	r3, r3, #16
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b01      	cmp	r3, #1
 8009618:	d10d      	bne.n	8009636 <I2C_WaitOnFlagUntilTimeout+0x56>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	43da      	mvns	r2, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	4013      	ands	r3, r2
 8009626:	b29b      	uxth	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	bf0c      	ite	eq
 800962c:	2301      	moveq	r3, #1
 800962e:	2300      	movne	r3, #0
 8009630:	b2db      	uxtb	r3, r3
 8009632:	461a      	mov	r2, r3
 8009634:	e00c      	b.n	8009650 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	43da      	mvns	r2, r3
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	4013      	ands	r3, r2
 8009642:	b29b      	uxth	r3, r3
 8009644:	2b00      	cmp	r3, #0
 8009646:	bf0c      	ite	eq
 8009648:	2301      	moveq	r3, #1
 800964a:	2300      	movne	r3, #0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	461a      	mov	r2, r3
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	429a      	cmp	r2, r3
 8009654:	d116      	bne.n	8009684 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2220      	movs	r2, #32
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009670:	f043 0220 	orr.w	r2, r3, #32
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e023      	b.n	80096cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	0c1b      	lsrs	r3, r3, #16
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b01      	cmp	r3, #1
 800968c:	d10d      	bne.n	80096aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	43da      	mvns	r2, r3
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	4013      	ands	r3, r2
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	bf0c      	ite	eq
 80096a0:	2301      	moveq	r3, #1
 80096a2:	2300      	movne	r3, #0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	e00c      	b.n	80096c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	43da      	mvns	r2, r3
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	4013      	ands	r3, r2
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bf0c      	ite	eq
 80096bc:	2301      	moveq	r3, #1
 80096be:	2300      	movne	r3, #0
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	461a      	mov	r2, r3
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d093      	beq.n	80095f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80096e2:	e071      	b.n	80097c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096f2:	d123      	bne.n	800973c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009702:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800970c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2220      	movs	r2, #32
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009728:	f043 0204 	orr.w	r2, r3, #4
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e067      	b.n	800980c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009742:	d041      	beq.n	80097c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009744:	f7fe f93e 	bl	80079c4 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d302      	bcc.n	800975a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d136      	bne.n	80097c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	0c1b      	lsrs	r3, r3, #16
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b01      	cmp	r3, #1
 8009762:	d10c      	bne.n	800977e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	43da      	mvns	r2, r3
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	4013      	ands	r3, r2
 8009770:	b29b      	uxth	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	bf14      	ite	ne
 8009776:	2301      	movne	r3, #1
 8009778:	2300      	moveq	r3, #0
 800977a:	b2db      	uxtb	r3, r3
 800977c:	e00b      	b.n	8009796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	43da      	mvns	r2, r3
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	4013      	ands	r3, r2
 800978a:	b29b      	uxth	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	bf14      	ite	ne
 8009790:	2301      	movne	r3, #1
 8009792:	2300      	moveq	r3, #0
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d016      	beq.n	80097c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2220      	movs	r2, #32
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b4:	f043 0220 	orr.w	r2, r3, #32
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e021      	b.n	800980c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	0c1b      	lsrs	r3, r3, #16
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d10c      	bne.n	80097ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	43da      	mvns	r2, r3
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	4013      	ands	r3, r2
 80097de:	b29b      	uxth	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	bf14      	ite	ne
 80097e4:	2301      	movne	r3, #1
 80097e6:	2300      	moveq	r3, #0
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	e00b      	b.n	8009804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	43da      	mvns	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	4013      	ands	r3, r2
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	bf14      	ite	ne
 80097fe:	2301      	movne	r3, #1
 8009800:	2300      	moveq	r3, #0
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	f47f af6d 	bne.w	80096e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009820:	e034      	b.n	800988c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f000 f8e3 	bl	80099ee <I2C_IsAcknowledgeFailed>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e034      	b.n	800989c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009838:	d028      	beq.n	800988c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800983a:	f7fe f8c3 	bl	80079c4 <HAL_GetTick>
 800983e:	4602      	mov	r2, r0
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	429a      	cmp	r2, r3
 8009848:	d302      	bcc.n	8009850 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d11d      	bne.n	800988c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985a:	2b80      	cmp	r3, #128	; 0x80
 800985c:	d016      	beq.n	800988c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2220      	movs	r2, #32
 8009868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009878:	f043 0220 	orr.w	r2, r3, #32
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e007      	b.n	800989c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009896:	2b80      	cmp	r3, #128	; 0x80
 8009898:	d1c3      	bne.n	8009822 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80098b0:	e034      	b.n	800991c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 f89b 	bl	80099ee <I2C_IsAcknowledgeFailed>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e034      	b.n	800992c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c8:	d028      	beq.n	800991c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ca:	f7fe f87b 	bl	80079c4 <HAL_GetTick>
 80098ce:	4602      	mov	r2, r0
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d302      	bcc.n	80098e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d11d      	bne.n	800991c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	f003 0304 	and.w	r3, r3, #4
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	d016      	beq.n	800991c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009908:	f043 0220 	orr.w	r2, r3, #32
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e007      	b.n	800992c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	f003 0304 	and.w	r3, r3, #4
 8009926:	2b04      	cmp	r3, #4
 8009928:	d1c3      	bne.n	80098b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009940:	e049      	b.n	80099d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	f003 0310 	and.w	r3, r3, #16
 800994c:	2b10      	cmp	r3, #16
 800994e:	d119      	bne.n	8009984 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f06f 0210 	mvn.w	r2, #16
 8009958:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e030      	b.n	80099e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009984:	f7fe f81e 	bl	80079c4 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	429a      	cmp	r2, r3
 8009992:	d302      	bcc.n	800999a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d11d      	bne.n	80099d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a4:	2b40      	cmp	r3, #64	; 0x40
 80099a6:	d016      	beq.n	80099d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2220      	movs	r2, #32
 80099b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	f043 0220 	orr.w	r2, r3, #32
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e007      	b.n	80099e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e0:	2b40      	cmp	r3, #64	; 0x40
 80099e2:	d1ae      	bne.n	8009942 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a04:	d11b      	bne.n	8009a3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	f043 0204 	orr.w	r2, r3, #4
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e000      	b.n	8009a40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr
	...

08009a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e272      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 8087 	beq.w	8009b7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a6c:	4b92      	ldr	r3, [pc, #584]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f003 030c 	and.w	r3, r3, #12
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d00c      	beq.n	8009a92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009a78:	4b8f      	ldr	r3, [pc, #572]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f003 030c 	and.w	r3, r3, #12
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	d112      	bne.n	8009aaa <HAL_RCC_OscConfig+0x5e>
 8009a84:	4b8c      	ldr	r3, [pc, #560]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a90:	d10b      	bne.n	8009aaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a92:	4b89      	ldr	r3, [pc, #548]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d06c      	beq.n	8009b78 <HAL_RCC_OscConfig+0x12c>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d168      	bne.n	8009b78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e24c      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab2:	d106      	bne.n	8009ac2 <HAL_RCC_OscConfig+0x76>
 8009ab4:	4b80      	ldr	r3, [pc, #512]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a7f      	ldr	r2, [pc, #508]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	e02e      	b.n	8009b20 <HAL_RCC_OscConfig+0xd4>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10c      	bne.n	8009ae4 <HAL_RCC_OscConfig+0x98>
 8009aca:	4b7b      	ldr	r3, [pc, #492]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a7a      	ldr	r2, [pc, #488]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	4b78      	ldr	r3, [pc, #480]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a77      	ldr	r2, [pc, #476]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	e01d      	b.n	8009b20 <HAL_RCC_OscConfig+0xd4>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aec:	d10c      	bne.n	8009b08 <HAL_RCC_OscConfig+0xbc>
 8009aee:	4b72      	ldr	r3, [pc, #456]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a71      	ldr	r2, [pc, #452]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	4b6f      	ldr	r3, [pc, #444]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a6e      	ldr	r2, [pc, #440]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	e00b      	b.n	8009b20 <HAL_RCC_OscConfig+0xd4>
 8009b08:	4b6b      	ldr	r3, [pc, #428]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a6a      	ldr	r2, [pc, #424]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b12:	6013      	str	r3, [r2, #0]
 8009b14:	4b68      	ldr	r3, [pc, #416]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a67      	ldr	r2, [pc, #412]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d013      	beq.n	8009b50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b28:	f7fd ff4c 	bl	80079c4 <HAL_GetTick>
 8009b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b2e:	e008      	b.n	8009b42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b30:	f7fd ff48 	bl	80079c4 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	2b64      	cmp	r3, #100	; 0x64
 8009b3c:	d901      	bls.n	8009b42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e200      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b42:	4b5d      	ldr	r3, [pc, #372]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0f0      	beq.n	8009b30 <HAL_RCC_OscConfig+0xe4>
 8009b4e:	e014      	b.n	8009b7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b50:	f7fd ff38 	bl	80079c4 <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b58:	f7fd ff34 	bl	80079c4 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b64      	cmp	r3, #100	; 0x64
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e1ec      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b6a:	4b53      	ldr	r3, [pc, #332]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f0      	bne.n	8009b58 <HAL_RCC_OscConfig+0x10c>
 8009b76:	e000      	b.n	8009b7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d063      	beq.n	8009c4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b86:	4b4c      	ldr	r3, [pc, #304]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	f003 030c 	and.w	r3, r3, #12
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00b      	beq.n	8009baa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009b92:	4b49      	ldr	r3, [pc, #292]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f003 030c 	and.w	r3, r3, #12
 8009b9a:	2b08      	cmp	r3, #8
 8009b9c:	d11c      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x18c>
 8009b9e:	4b46      	ldr	r3, [pc, #280]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d116      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009baa:	4b43      	ldr	r3, [pc, #268]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d005      	beq.n	8009bc2 <HAL_RCC_OscConfig+0x176>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d001      	beq.n	8009bc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e1c0      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bc2:	4b3d      	ldr	r3, [pc, #244]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	4939      	ldr	r1, [pc, #228]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bd6:	e03a      	b.n	8009c4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d020      	beq.n	8009c22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009be0:	4b36      	ldr	r3, [pc, #216]	; (8009cbc <HAL_RCC_OscConfig+0x270>)
 8009be2:	2201      	movs	r2, #1
 8009be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009be6:	f7fd feed 	bl	80079c4 <HAL_GetTick>
 8009bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bec:	e008      	b.n	8009c00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bee:	f7fd fee9 	bl	80079c4 <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d901      	bls.n	8009c00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e1a1      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c00:	4b2d      	ldr	r3, [pc, #180]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0f0      	beq.n	8009bee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c0c:	4b2a      	ldr	r3, [pc, #168]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	00db      	lsls	r3, r3, #3
 8009c1a:	4927      	ldr	r1, [pc, #156]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	600b      	str	r3, [r1, #0]
 8009c20:	e015      	b.n	8009c4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c22:	4b26      	ldr	r3, [pc, #152]	; (8009cbc <HAL_RCC_OscConfig+0x270>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c28:	f7fd fecc 	bl	80079c4 <HAL_GetTick>
 8009c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c30:	f7fd fec8 	bl	80079c4 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e180      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c42:	4b1d      	ldr	r3, [pc, #116]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1f0      	bne.n	8009c30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 0308 	and.w	r3, r3, #8
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d03a      	beq.n	8009cd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d019      	beq.n	8009c96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c62:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <HAL_RCC_OscConfig+0x274>)
 8009c64:	2201      	movs	r2, #1
 8009c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c68:	f7fd feac 	bl	80079c4 <HAL_GetTick>
 8009c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c6e:	e008      	b.n	8009c82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c70:	f7fd fea8 	bl	80079c4 <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d901      	bls.n	8009c82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e160      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c82:	4b0d      	ldr	r3, [pc, #52]	; (8009cb8 <HAL_RCC_OscConfig+0x26c>)
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0f0      	beq.n	8009c70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009c8e:	2001      	movs	r0, #1
 8009c90:	f000 face 	bl	800a230 <RCC_Delay>
 8009c94:	e01c      	b.n	8009cd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c96:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <HAL_RCC_OscConfig+0x274>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c9c:	f7fd fe92 	bl	80079c4 <HAL_GetTick>
 8009ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ca2:	e00f      	b.n	8009cc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ca4:	f7fd fe8e 	bl	80079c4 <HAL_GetTick>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d908      	bls.n	8009cc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e146      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
 8009cb6:	bf00      	nop
 8009cb8:	40021000 	.word	0x40021000
 8009cbc:	42420000 	.word	0x42420000
 8009cc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cc4:	4b92      	ldr	r3, [pc, #584]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc8:	f003 0302 	and.w	r3, r3, #2
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1e9      	bne.n	8009ca4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 80a6 	beq.w	8009e2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ce2:	4b8b      	ldr	r3, [pc, #556]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10d      	bne.n	8009d0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cee:	4b88      	ldr	r3, [pc, #544]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	4a87      	ldr	r2, [pc, #540]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cf8:	61d3      	str	r3, [r2, #28]
 8009cfa:	4b85      	ldr	r3, [pc, #532]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d02:	60bb      	str	r3, [r7, #8]
 8009d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d06:	2301      	movs	r3, #1
 8009d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d0a:	4b82      	ldr	r3, [pc, #520]	; (8009f14 <HAL_RCC_OscConfig+0x4c8>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d118      	bne.n	8009d48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d16:	4b7f      	ldr	r3, [pc, #508]	; (8009f14 <HAL_RCC_OscConfig+0x4c8>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a7e      	ldr	r2, [pc, #504]	; (8009f14 <HAL_RCC_OscConfig+0x4c8>)
 8009d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d22:	f7fd fe4f 	bl	80079c4 <HAL_GetTick>
 8009d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d28:	e008      	b.n	8009d3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d2a:	f7fd fe4b 	bl	80079c4 <HAL_GetTick>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	2b64      	cmp	r3, #100	; 0x64
 8009d36:	d901      	bls.n	8009d3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e103      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d3c:	4b75      	ldr	r3, [pc, #468]	; (8009f14 <HAL_RCC_OscConfig+0x4c8>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0f0      	beq.n	8009d2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d106      	bne.n	8009d5e <HAL_RCC_OscConfig+0x312>
 8009d50:	4b6f      	ldr	r3, [pc, #444]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	4a6e      	ldr	r2, [pc, #440]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009d56:	f043 0301 	orr.w	r3, r3, #1
 8009d5a:	6213      	str	r3, [r2, #32]
 8009d5c:	e02d      	b.n	8009dba <HAL_RCC_OscConfig+0x36e>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10c      	bne.n	8009d80 <HAL_RCC_OscConfig+0x334>
 8009d66:	4b6a      	ldr	r3, [pc, #424]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	4a69      	ldr	r2, [pc, #420]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009d6c:	f023 0301 	bic.w	r3, r3, #1
 8009d70:	6213      	str	r3, [r2, #32]
 8009d72:	4b67      	ldr	r3, [pc, #412]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	4a66      	ldr	r2, [pc, #408]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009d78:	f023 0304 	bic.w	r3, r3, #4
 8009d7c:	6213      	str	r3, [r2, #32]
 8009d7e:	e01c      	b.n	8009dba <HAL_RCC_OscConfig+0x36e>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	2b05      	cmp	r3, #5
 8009d86:	d10c      	bne.n	8009da2 <HAL_RCC_OscConfig+0x356>
 8009d88:	4b61      	ldr	r3, [pc, #388]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009d8a:	6a1b      	ldr	r3, [r3, #32]
 8009d8c:	4a60      	ldr	r2, [pc, #384]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009d8e:	f043 0304 	orr.w	r3, r3, #4
 8009d92:	6213      	str	r3, [r2, #32]
 8009d94:	4b5e      	ldr	r3, [pc, #376]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009d96:	6a1b      	ldr	r3, [r3, #32]
 8009d98:	4a5d      	ldr	r2, [pc, #372]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	6213      	str	r3, [r2, #32]
 8009da0:	e00b      	b.n	8009dba <HAL_RCC_OscConfig+0x36e>
 8009da2:	4b5b      	ldr	r3, [pc, #364]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	4a5a      	ldr	r2, [pc, #360]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009da8:	f023 0301 	bic.w	r3, r3, #1
 8009dac:	6213      	str	r3, [r2, #32]
 8009dae:	4b58      	ldr	r3, [pc, #352]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	4a57      	ldr	r2, [pc, #348]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009db4:	f023 0304 	bic.w	r3, r3, #4
 8009db8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d015      	beq.n	8009dee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dc2:	f7fd fdff 	bl	80079c4 <HAL_GetTick>
 8009dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dc8:	e00a      	b.n	8009de0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dca:	f7fd fdfb 	bl	80079c4 <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d901      	bls.n	8009de0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e0b1      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009de0:	4b4b      	ldr	r3, [pc, #300]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d0ee      	beq.n	8009dca <HAL_RCC_OscConfig+0x37e>
 8009dec:	e014      	b.n	8009e18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dee:	f7fd fde9 	bl	80079c4 <HAL_GetTick>
 8009df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009df4:	e00a      	b.n	8009e0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009df6:	f7fd fde5 	bl	80079c4 <HAL_GetTick>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d901      	bls.n	8009e0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e09b      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e0c:	4b40      	ldr	r3, [pc, #256]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009e0e:	6a1b      	ldr	r3, [r3, #32]
 8009e10:	f003 0302 	and.w	r3, r3, #2
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1ee      	bne.n	8009df6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d105      	bne.n	8009e2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e1e:	4b3c      	ldr	r3, [pc, #240]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	4a3b      	ldr	r2, [pc, #236]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 8087 	beq.w	8009f42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e34:	4b36      	ldr	r3, [pc, #216]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f003 030c 	and.w	r3, r3, #12
 8009e3c:	2b08      	cmp	r3, #8
 8009e3e:	d061      	beq.n	8009f04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	69db      	ldr	r3, [r3, #28]
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d146      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e48:	4b33      	ldr	r3, [pc, #204]	; (8009f18 <HAL_RCC_OscConfig+0x4cc>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e4e:	f7fd fdb9 	bl	80079c4 <HAL_GetTick>
 8009e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e54:	e008      	b.n	8009e68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e56:	f7fd fdb5 	bl	80079c4 <HAL_GetTick>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d901      	bls.n	8009e68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e06d      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e68:	4b29      	ldr	r3, [pc, #164]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1f0      	bne.n	8009e56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a1b      	ldr	r3, [r3, #32]
 8009e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e7c:	d108      	bne.n	8009e90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009e7e:	4b24      	ldr	r3, [pc, #144]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	4921      	ldr	r1, [pc, #132]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e90:	4b1f      	ldr	r3, [pc, #124]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a19      	ldr	r1, [r3, #32]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	491b      	ldr	r1, [pc, #108]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ea8:	4b1b      	ldr	r3, [pc, #108]	; (8009f18 <HAL_RCC_OscConfig+0x4cc>)
 8009eaa:	2201      	movs	r2, #1
 8009eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eae:	f7fd fd89 	bl	80079c4 <HAL_GetTick>
 8009eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009eb4:	e008      	b.n	8009ec8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009eb6:	f7fd fd85 	bl	80079c4 <HAL_GetTick>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d901      	bls.n	8009ec8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e03d      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009ec8:	4b11      	ldr	r3, [pc, #68]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0f0      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x46a>
 8009ed4:	e035      	b.n	8009f42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ed6:	4b10      	ldr	r3, [pc, #64]	; (8009f18 <HAL_RCC_OscConfig+0x4cc>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009edc:	f7fd fd72 	bl	80079c4 <HAL_GetTick>
 8009ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009ee2:	e008      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ee4:	f7fd fd6e 	bl	80079c4 <HAL_GetTick>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d901      	bls.n	8009ef6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e026      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009ef6:	4b06      	ldr	r3, [pc, #24]	; (8009f10 <HAL_RCC_OscConfig+0x4c4>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1f0      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x498>
 8009f02:	e01e      	b.n	8009f42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d107      	bne.n	8009f1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e019      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
 8009f10:	40021000 	.word	0x40021000
 8009f14:	40007000 	.word	0x40007000
 8009f18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009f1c:	4b0b      	ldr	r3, [pc, #44]	; (8009f4c <HAL_RCC_OscConfig+0x500>)
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a1b      	ldr	r3, [r3, #32]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d106      	bne.n	8009f3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d001      	beq.n	8009f42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e000      	b.n	8009f44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	40021000 	.word	0x40021000

08009f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d101      	bne.n	8009f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e0d0      	b.n	800a106 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f64:	4b6a      	ldr	r3, [pc, #424]	; (800a110 <HAL_RCC_ClockConfig+0x1c0>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d910      	bls.n	8009f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f72:	4b67      	ldr	r3, [pc, #412]	; (800a110 <HAL_RCC_ClockConfig+0x1c0>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f023 0207 	bic.w	r2, r3, #7
 8009f7a:	4965      	ldr	r1, [pc, #404]	; (800a110 <HAL_RCC_ClockConfig+0x1c0>)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f82:	4b63      	ldr	r3, [pc, #396]	; (800a110 <HAL_RCC_ClockConfig+0x1c0>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d001      	beq.n	8009f94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e0b8      	b.n	800a106 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0302 	and.w	r3, r3, #2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d020      	beq.n	8009fe2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0304 	and.w	r3, r3, #4
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fac:	4b59      	ldr	r3, [pc, #356]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	4a58      	ldr	r2, [pc, #352]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 8009fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009fb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0308 	and.w	r3, r3, #8
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d005      	beq.n	8009fd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009fc4:	4b53      	ldr	r3, [pc, #332]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	4a52      	ldr	r2, [pc, #328]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 8009fca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009fce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fd0:	4b50      	ldr	r3, [pc, #320]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	494d      	ldr	r1, [pc, #308]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d040      	beq.n	800a070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d107      	bne.n	800a006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ff6:	4b47      	ldr	r3, [pc, #284]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d115      	bne.n	800a02e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e07f      	b.n	800a106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d107      	bne.n	800a01e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a00e:	4b41      	ldr	r3, [pc, #260]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a016:	2b00      	cmp	r3, #0
 800a018:	d109      	bne.n	800a02e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e073      	b.n	800a106 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a01e:	4b3d      	ldr	r3, [pc, #244]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 0302 	and.w	r3, r3, #2
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e06b      	b.n	800a106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a02e:	4b39      	ldr	r3, [pc, #228]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f023 0203 	bic.w	r2, r3, #3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	4936      	ldr	r1, [pc, #216]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a040:	f7fd fcc0 	bl	80079c4 <HAL_GetTick>
 800a044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a046:	e00a      	b.n	800a05e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a048:	f7fd fcbc 	bl	80079c4 <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	f241 3288 	movw	r2, #5000	; 0x1388
 800a056:	4293      	cmp	r3, r2
 800a058:	d901      	bls.n	800a05e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e053      	b.n	800a106 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a05e:	4b2d      	ldr	r3, [pc, #180]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f003 020c 	and.w	r2, r3, #12
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d1eb      	bne.n	800a048 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a070:	4b27      	ldr	r3, [pc, #156]	; (800a110 <HAL_RCC_ClockConfig+0x1c0>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0307 	and.w	r3, r3, #7
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d210      	bcs.n	800a0a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a07e:	4b24      	ldr	r3, [pc, #144]	; (800a110 <HAL_RCC_ClockConfig+0x1c0>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f023 0207 	bic.w	r2, r3, #7
 800a086:	4922      	ldr	r1, [pc, #136]	; (800a110 <HAL_RCC_ClockConfig+0x1c0>)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a08e:	4b20      	ldr	r3, [pc, #128]	; (800a110 <HAL_RCC_ClockConfig+0x1c0>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0307 	and.w	r3, r3, #7
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d001      	beq.n	800a0a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e032      	b.n	800a106 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0304 	and.w	r3, r3, #4
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d008      	beq.n	800a0be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0ac:	4b19      	ldr	r3, [pc, #100]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	4916      	ldr	r1, [pc, #88]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0308 	and.w	r3, r3, #8
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d009      	beq.n	800a0de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a0ca:	4b12      	ldr	r3, [pc, #72]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	490e      	ldr	r1, [pc, #56]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a0de:	f000 f821 	bl	800a124 <HAL_RCC_GetSysClockFreq>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	4b0b      	ldr	r3, [pc, #44]	; (800a114 <HAL_RCC_ClockConfig+0x1c4>)
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	091b      	lsrs	r3, r3, #4
 800a0ea:	f003 030f 	and.w	r3, r3, #15
 800a0ee:	490a      	ldr	r1, [pc, #40]	; (800a118 <HAL_RCC_ClockConfig+0x1c8>)
 800a0f0:	5ccb      	ldrb	r3, [r1, r3]
 800a0f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f6:	4a09      	ldr	r2, [pc, #36]	; (800a11c <HAL_RCC_ClockConfig+0x1cc>)
 800a0f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <HAL_RCC_ClockConfig+0x1d0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fd fc1e 	bl	8007940 <HAL_InitTick>

  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	40022000 	.word	0x40022000
 800a114:	40021000 	.word	0x40021000
 800a118:	0800c7e8 	.word	0x0800c7e8
 800a11c:	20000944 	.word	0x20000944
 800a120:	20000948 	.word	0x20000948

0800a124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	2300      	movs	r3, #0
 800a130:	60bb      	str	r3, [r7, #8]
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	2300      	movs	r3, #0
 800a138:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a13e:	4b1e      	ldr	r3, [pc, #120]	; (800a1b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f003 030c 	and.w	r3, r3, #12
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d002      	beq.n	800a154 <HAL_RCC_GetSysClockFreq+0x30>
 800a14e:	2b08      	cmp	r3, #8
 800a150:	d003      	beq.n	800a15a <HAL_RCC_GetSysClockFreq+0x36>
 800a152:	e027      	b.n	800a1a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a154:	4b19      	ldr	r3, [pc, #100]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a156:	613b      	str	r3, [r7, #16]
      break;
 800a158:	e027      	b.n	800a1aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	0c9b      	lsrs	r3, r3, #18
 800a15e:	f003 030f 	and.w	r3, r3, #15
 800a162:	4a17      	ldr	r2, [pc, #92]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a164:	5cd3      	ldrb	r3, [r2, r3]
 800a166:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d010      	beq.n	800a194 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a172:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	0c5b      	lsrs	r3, r3, #17
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	4a11      	ldr	r2, [pc, #68]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a17e:	5cd3      	ldrb	r3, [r2, r3]
 800a180:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a0d      	ldr	r2, [pc, #52]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a186:	fb03 f202 	mul.w	r2, r3, r2
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a190:	617b      	str	r3, [r7, #20]
 800a192:	e004      	b.n	800a19e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a0c      	ldr	r2, [pc, #48]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a198:	fb02 f303 	mul.w	r3, r2, r3
 800a19c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	613b      	str	r3, [r7, #16]
      break;
 800a1a2:	e002      	b.n	800a1aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a1a4:	4b05      	ldr	r3, [pc, #20]	; (800a1bc <HAL_RCC_GetSysClockFreq+0x98>)
 800a1a6:	613b      	str	r3, [r7, #16]
      break;
 800a1a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1aa:	693b      	ldr	r3, [r7, #16]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	371c      	adds	r7, #28
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bc80      	pop	{r7}
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	40021000 	.word	0x40021000
 800a1bc:	007a1200 	.word	0x007a1200
 800a1c0:	0800c800 	.word	0x0800c800
 800a1c4:	0800c810 	.word	0x0800c810
 800a1c8:	003d0900 	.word	0x003d0900

0800a1cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1d0:	4b02      	ldr	r3, [pc, #8]	; (800a1dc <HAL_RCC_GetHCLKFreq+0x10>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bc80      	pop	{r7}
 800a1da:	4770      	bx	lr
 800a1dc:	20000944 	.word	0x20000944

0800a1e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a1e4:	f7ff fff2 	bl	800a1cc <HAL_RCC_GetHCLKFreq>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	4b05      	ldr	r3, [pc, #20]	; (800a200 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	0a1b      	lsrs	r3, r3, #8
 800a1f0:	f003 0307 	and.w	r3, r3, #7
 800a1f4:	4903      	ldr	r1, [pc, #12]	; (800a204 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1f6:	5ccb      	ldrb	r3, [r1, r3]
 800a1f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	40021000 	.word	0x40021000
 800a204:	0800c7f8 	.word	0x0800c7f8

0800a208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a20c:	f7ff ffde 	bl	800a1cc <HAL_RCC_GetHCLKFreq>
 800a210:	4602      	mov	r2, r0
 800a212:	4b05      	ldr	r3, [pc, #20]	; (800a228 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	0adb      	lsrs	r3, r3, #11
 800a218:	f003 0307 	and.w	r3, r3, #7
 800a21c:	4903      	ldr	r1, [pc, #12]	; (800a22c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a21e:	5ccb      	ldrb	r3, [r1, r3]
 800a220:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a224:	4618      	mov	r0, r3
 800a226:	bd80      	pop	{r7, pc}
 800a228:	40021000 	.word	0x40021000
 800a22c:	0800c7f8 	.word	0x0800c7f8

0800a230 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <RCC_Delay+0x34>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a0a      	ldr	r2, [pc, #40]	; (800a268 <RCC_Delay+0x38>)
 800a23e:	fba2 2303 	umull	r2, r3, r2, r3
 800a242:	0a5b      	lsrs	r3, r3, #9
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	fb02 f303 	mul.w	r3, r2, r3
 800a24a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a24c:	bf00      	nop
  }
  while (Delay --);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	1e5a      	subs	r2, r3, #1
 800a252:	60fa      	str	r2, [r7, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1f9      	bne.n	800a24c <RCC_Delay+0x1c>
}
 800a258:	bf00      	nop
 800a25a:	bf00      	nop
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	bc80      	pop	{r7}
 800a262:	4770      	bx	lr
 800a264:	20000944 	.word	0x20000944
 800a268:	10624dd3 	.word	0x10624dd3

0800a26c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e041      	b.n	800a302 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d106      	bne.n	800a298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7fd fa26 	bl	80076e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	f000 fa82 	bl	800a7b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
	...

0800a30c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d001      	beq.n	800a324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e044      	b.n	800a3ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68da      	ldr	r2, [r3, #12]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0201 	orr.w	r2, r2, #1
 800a33a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a1d      	ldr	r2, [pc, #116]	; (800a3b8 <HAL_TIM_Base_Start_IT+0xac>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d018      	beq.n	800a378 <HAL_TIM_Base_Start_IT+0x6c>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a1c      	ldr	r2, [pc, #112]	; (800a3bc <HAL_TIM_Base_Start_IT+0xb0>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d013      	beq.n	800a378 <HAL_TIM_Base_Start_IT+0x6c>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a358:	d00e      	beq.n	800a378 <HAL_TIM_Base_Start_IT+0x6c>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a18      	ldr	r2, [pc, #96]	; (800a3c0 <HAL_TIM_Base_Start_IT+0xb4>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d009      	beq.n	800a378 <HAL_TIM_Base_Start_IT+0x6c>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a16      	ldr	r2, [pc, #88]	; (800a3c4 <HAL_TIM_Base_Start_IT+0xb8>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d004      	beq.n	800a378 <HAL_TIM_Base_Start_IT+0x6c>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a15      	ldr	r2, [pc, #84]	; (800a3c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d111      	bne.n	800a39c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b06      	cmp	r3, #6
 800a388:	d010      	beq.n	800a3ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f042 0201 	orr.w	r2, r2, #1
 800a398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a39a:	e007      	b.n	800a3ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f042 0201 	orr.w	r2, r2, #1
 800a3aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr
 800a3b8:	40012c00 	.word	0x40012c00
 800a3bc:	40013400 	.word	0x40013400
 800a3c0:	40000400 	.word	0x40000400
 800a3c4:	40000800 	.word	0x40000800
 800a3c8:	40000c00 	.word	0x40000c00

0800a3cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	f003 0302 	and.w	r3, r3, #2
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d122      	bne.n	800a428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	f003 0302 	and.w	r3, r3, #2
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d11b      	bne.n	800a428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f06f 0202 	mvn.w	r2, #2
 800a3f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f9b4 	bl	800a77c <HAL_TIM_IC_CaptureCallback>
 800a414:	e005      	b.n	800a422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f9a7 	bl	800a76a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f9b6 	bl	800a78e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b04      	cmp	r3, #4
 800a434:	d122      	bne.n	800a47c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b04      	cmp	r3, #4
 800a442:	d11b      	bne.n	800a47c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f06f 0204 	mvn.w	r2, #4
 800a44c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2202      	movs	r2, #2
 800a452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f98a 	bl	800a77c <HAL_TIM_IC_CaptureCallback>
 800a468:	e005      	b.n	800a476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f97d 	bl	800a76a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f98c 	bl	800a78e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b08      	cmp	r3, #8
 800a488:	d122      	bne.n	800a4d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	2b08      	cmp	r3, #8
 800a496:	d11b      	bne.n	800a4d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f06f 0208 	mvn.w	r2, #8
 800a4a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2204      	movs	r2, #4
 800a4a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d003      	beq.n	800a4be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f960 	bl	800a77c <HAL_TIM_IC_CaptureCallback>
 800a4bc:	e005      	b.n	800a4ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f953 	bl	800a76a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f962 	bl	800a78e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	f003 0310 	and.w	r3, r3, #16
 800a4da:	2b10      	cmp	r3, #16
 800a4dc:	d122      	bne.n	800a524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	f003 0310 	and.w	r3, r3, #16
 800a4e8:	2b10      	cmp	r3, #16
 800a4ea:	d11b      	bne.n	800a524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f06f 0210 	mvn.w	r2, #16
 800a4f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2208      	movs	r2, #8
 800a4fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a506:	2b00      	cmp	r3, #0
 800a508:	d003      	beq.n	800a512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f936 	bl	800a77c <HAL_TIM_IC_CaptureCallback>
 800a510:	e005      	b.n	800a51e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f929 	bl	800a76a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f938 	bl	800a78e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d10e      	bne.n	800a550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	f003 0301 	and.w	r3, r3, #1
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d107      	bne.n	800a550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f06f 0201 	mvn.w	r2, #1
 800a548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f7fc fd64 	bl	8007018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55a:	2b80      	cmp	r3, #128	; 0x80
 800a55c:	d10e      	bne.n	800a57c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a568:	2b80      	cmp	r3, #128	; 0x80
 800a56a:	d107      	bne.n	800a57c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 faa1 	bl	800aabe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a586:	2b40      	cmp	r3, #64	; 0x40
 800a588:	d10e      	bne.n	800a5a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a594:	2b40      	cmp	r3, #64	; 0x40
 800a596:	d107      	bne.n	800a5a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f8fc 	bl	800a7a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b20      	cmp	r3, #32
 800a5b4:	d10e      	bne.n	800a5d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	f003 0320 	and.w	r3, r3, #32
 800a5c0:	2b20      	cmp	r3, #32
 800a5c2:	d107      	bne.n	800a5d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f06f 0220 	mvn.w	r2, #32
 800a5cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa6c 	bl	800aaac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5d4:	bf00      	nop
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d101      	bne.n	800a5f8 <HAL_TIM_ConfigClockSource+0x1c>
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	e0b4      	b.n	800a762 <HAL_TIM_ConfigClockSource+0x186>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2202      	movs	r2, #2
 800a604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a61e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a630:	d03e      	beq.n	800a6b0 <HAL_TIM_ConfigClockSource+0xd4>
 800a632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a636:	f200 8087 	bhi.w	800a748 <HAL_TIM_ConfigClockSource+0x16c>
 800a63a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a63e:	f000 8086 	beq.w	800a74e <HAL_TIM_ConfigClockSource+0x172>
 800a642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a646:	d87f      	bhi.n	800a748 <HAL_TIM_ConfigClockSource+0x16c>
 800a648:	2b70      	cmp	r3, #112	; 0x70
 800a64a:	d01a      	beq.n	800a682 <HAL_TIM_ConfigClockSource+0xa6>
 800a64c:	2b70      	cmp	r3, #112	; 0x70
 800a64e:	d87b      	bhi.n	800a748 <HAL_TIM_ConfigClockSource+0x16c>
 800a650:	2b60      	cmp	r3, #96	; 0x60
 800a652:	d050      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x11a>
 800a654:	2b60      	cmp	r3, #96	; 0x60
 800a656:	d877      	bhi.n	800a748 <HAL_TIM_ConfigClockSource+0x16c>
 800a658:	2b50      	cmp	r3, #80	; 0x50
 800a65a:	d03c      	beq.n	800a6d6 <HAL_TIM_ConfigClockSource+0xfa>
 800a65c:	2b50      	cmp	r3, #80	; 0x50
 800a65e:	d873      	bhi.n	800a748 <HAL_TIM_ConfigClockSource+0x16c>
 800a660:	2b40      	cmp	r3, #64	; 0x40
 800a662:	d058      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0x13a>
 800a664:	2b40      	cmp	r3, #64	; 0x40
 800a666:	d86f      	bhi.n	800a748 <HAL_TIM_ConfigClockSource+0x16c>
 800a668:	2b30      	cmp	r3, #48	; 0x30
 800a66a:	d064      	beq.n	800a736 <HAL_TIM_ConfigClockSource+0x15a>
 800a66c:	2b30      	cmp	r3, #48	; 0x30
 800a66e:	d86b      	bhi.n	800a748 <HAL_TIM_ConfigClockSource+0x16c>
 800a670:	2b20      	cmp	r3, #32
 800a672:	d060      	beq.n	800a736 <HAL_TIM_ConfigClockSource+0x15a>
 800a674:	2b20      	cmp	r3, #32
 800a676:	d867      	bhi.n	800a748 <HAL_TIM_ConfigClockSource+0x16c>
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d05c      	beq.n	800a736 <HAL_TIM_ConfigClockSource+0x15a>
 800a67c:	2b10      	cmp	r3, #16
 800a67e:	d05a      	beq.n	800a736 <HAL_TIM_ConfigClockSource+0x15a>
 800a680:	e062      	b.n	800a748 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a692:	f000 f980 	bl	800a996 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	609a      	str	r2, [r3, #8]
      break;
 800a6ae:	e04f      	b.n	800a750 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a6c0:	f000 f969 	bl	800a996 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689a      	ldr	r2, [r3, #8]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6d2:	609a      	str	r2, [r3, #8]
      break;
 800a6d4:	e03c      	b.n	800a750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f000 f8e0 	bl	800a8a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2150      	movs	r1, #80	; 0x50
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 f937 	bl	800a962 <TIM_ITRx_SetConfig>
      break;
 800a6f4:	e02c      	b.n	800a750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a702:	461a      	mov	r2, r3
 800a704:	f000 f8fe 	bl	800a904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2160      	movs	r1, #96	; 0x60
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 f927 	bl	800a962 <TIM_ITRx_SetConfig>
      break;
 800a714:	e01c      	b.n	800a750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a722:	461a      	mov	r2, r3
 800a724:	f000 f8c0 	bl	800a8a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2140      	movs	r1, #64	; 0x40
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 f917 	bl	800a962 <TIM_ITRx_SetConfig>
      break;
 800a734:	e00c      	b.n	800a750 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4619      	mov	r1, r3
 800a740:	4610      	mov	r0, r2
 800a742:	f000 f90e 	bl	800a962 <TIM_ITRx_SetConfig>
      break;
 800a746:	e003      	b.n	800a750 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	73fb      	strb	r3, [r7, #15]
      break;
 800a74c:	e000      	b.n	800a750 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a74e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a772:	bf00      	nop
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	bc80      	pop	{r7}
 800a77a:	4770      	bx	lr

0800a77c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	bc80      	pop	{r7}
 800a78c:	4770      	bx	lr

0800a78e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bc80      	pop	{r7}
 800a79e:	4770      	bx	lr

0800a7a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bc80      	pop	{r7}
 800a7b0:	4770      	bx	lr
	...

0800a7b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a33      	ldr	r2, [pc, #204]	; (800a894 <TIM_Base_SetConfig+0xe0>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d013      	beq.n	800a7f4 <TIM_Base_SetConfig+0x40>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a32      	ldr	r2, [pc, #200]	; (800a898 <TIM_Base_SetConfig+0xe4>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d00f      	beq.n	800a7f4 <TIM_Base_SetConfig+0x40>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7da:	d00b      	beq.n	800a7f4 <TIM_Base_SetConfig+0x40>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a2f      	ldr	r2, [pc, #188]	; (800a89c <TIM_Base_SetConfig+0xe8>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d007      	beq.n	800a7f4 <TIM_Base_SetConfig+0x40>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a2e      	ldr	r2, [pc, #184]	; (800a8a0 <TIM_Base_SetConfig+0xec>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d003      	beq.n	800a7f4 <TIM_Base_SetConfig+0x40>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4a2d      	ldr	r2, [pc, #180]	; (800a8a4 <TIM_Base_SetConfig+0xf0>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d108      	bne.n	800a806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4313      	orrs	r3, r2
 800a804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a22      	ldr	r2, [pc, #136]	; (800a894 <TIM_Base_SetConfig+0xe0>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d013      	beq.n	800a836 <TIM_Base_SetConfig+0x82>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a21      	ldr	r2, [pc, #132]	; (800a898 <TIM_Base_SetConfig+0xe4>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d00f      	beq.n	800a836 <TIM_Base_SetConfig+0x82>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a81c:	d00b      	beq.n	800a836 <TIM_Base_SetConfig+0x82>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a1e      	ldr	r2, [pc, #120]	; (800a89c <TIM_Base_SetConfig+0xe8>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d007      	beq.n	800a836 <TIM_Base_SetConfig+0x82>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a1d      	ldr	r2, [pc, #116]	; (800a8a0 <TIM_Base_SetConfig+0xec>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d003      	beq.n	800a836 <TIM_Base_SetConfig+0x82>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a1c      	ldr	r2, [pc, #112]	; (800a8a4 <TIM_Base_SetConfig+0xf0>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d108      	bne.n	800a848 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a83c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	4313      	orrs	r3, r2
 800a846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	689a      	ldr	r2, [r3, #8]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a09      	ldr	r2, [pc, #36]	; (800a894 <TIM_Base_SetConfig+0xe0>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d003      	beq.n	800a87c <TIM_Base_SetConfig+0xc8>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a08      	ldr	r2, [pc, #32]	; (800a898 <TIM_Base_SetConfig+0xe4>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d103      	bne.n	800a884 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	691a      	ldr	r2, [r3, #16]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	615a      	str	r2, [r3, #20]
}
 800a88a:	bf00      	nop
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	bc80      	pop	{r7}
 800a892:	4770      	bx	lr
 800a894:	40012c00 	.word	0x40012c00
 800a898:	40013400 	.word	0x40013400
 800a89c:	40000400 	.word	0x40000400
 800a8a0:	40000800 	.word	0x40000800
 800a8a4:	40000c00 	.word	0x40000c00

0800a8a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	f023 0201 	bic.w	r2, r3, #1
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	011b      	lsls	r3, r3, #4
 800a8d8:	693a      	ldr	r2, [r7, #16]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f023 030a 	bic.w	r3, r3, #10
 800a8e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	621a      	str	r2, [r3, #32]
}
 800a8fa:	bf00      	nop
 800a8fc:	371c      	adds	r7, #28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bc80      	pop	{r7}
 800a902:	4770      	bx	lr

0800a904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a904:	b480      	push	{r7}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a1b      	ldr	r3, [r3, #32]
 800a914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	f023 0210 	bic.w	r2, r3, #16
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a92e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	031b      	lsls	r3, r3, #12
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	4313      	orrs	r3, r2
 800a938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a940:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	011b      	lsls	r3, r3, #4
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	621a      	str	r2, [r3, #32]
}
 800a958:	bf00      	nop
 800a95a:	371c      	adds	r7, #28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bc80      	pop	{r7}
 800a960:	4770      	bx	lr

0800a962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a962:	b480      	push	{r7}
 800a964:	b085      	sub	sp, #20
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4313      	orrs	r3, r2
 800a980:	f043 0307 	orr.w	r3, r3, #7
 800a984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	609a      	str	r2, [r3, #8]
}
 800a98c:	bf00      	nop
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	bc80      	pop	{r7}
 800a994:	4770      	bx	lr

0800a996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a996:	b480      	push	{r7}
 800a998:	b087      	sub	sp, #28
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	60f8      	str	r0, [r7, #12]
 800a99e:	60b9      	str	r1, [r7, #8]
 800a9a0:	607a      	str	r2, [r7, #4]
 800a9a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	021a      	lsls	r2, r3, #8
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	431a      	orrs	r2, r3
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	609a      	str	r2, [r3, #8]
}
 800a9ca:	bf00      	nop
 800a9cc:	371c      	adds	r7, #28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bc80      	pop	{r7}
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d101      	bne.n	800a9ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e050      	b.n	800aa8e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a1b      	ldr	r2, [pc, #108]	; (800aa98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d018      	beq.n	800aa62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a19      	ldr	r2, [pc, #100]	; (800aa9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d013      	beq.n	800aa62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa42:	d00e      	beq.n	800aa62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a15      	ldr	r2, [pc, #84]	; (800aaa0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d009      	beq.n	800aa62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a14      	ldr	r2, [pc, #80]	; (800aaa4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d004      	beq.n	800aa62 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a12      	ldr	r2, [pc, #72]	; (800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d10c      	bne.n	800aa7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3714      	adds	r7, #20
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bc80      	pop	{r7}
 800aa96:	4770      	bx	lr
 800aa98:	40012c00 	.word	0x40012c00
 800aa9c:	40013400 	.word	0x40013400
 800aaa0:	40000400 	.word	0x40000400
 800aaa4:	40000800 	.word	0x40000800
 800aaa8:	40000c00 	.word	0x40000c00

0800aaac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bc80      	pop	{r7}
 800aabc:	4770      	bx	lr

0800aabe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aabe:	b480      	push	{r7}
 800aac0:	b083      	sub	sp, #12
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aac6:	bf00      	nop
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bc80      	pop	{r7}
 800aace:	4770      	bx	lr

0800aad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e042      	b.n	800ab68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d106      	bne.n	800aafc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7fc fe1a 	bl	8007730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2224      	movs	r2, #36	; 0x24
 800ab00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fd71 	bl	800b5fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	691a      	ldr	r2, [r3, #16]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	695a      	ldr	r2, [r3, #20]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68da      	ldr	r2, [r3, #12]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2220      	movs	r2, #32
 800ab54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b08a      	sub	sp, #40	; 0x28
 800ab74:	af02      	add	r7, sp, #8
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	603b      	str	r3, [r7, #0]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ab80:	2300      	movs	r3, #0
 800ab82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b20      	cmp	r3, #32
 800ab8e:	d16d      	bne.n	800ac6c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <HAL_UART_Transmit+0x2c>
 800ab96:	88fb      	ldrh	r3, [r7, #6]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e066      	b.n	800ac6e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2221      	movs	r2, #33	; 0x21
 800abaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abae:	f7fc ff09 	bl	80079c4 <HAL_GetTick>
 800abb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	88fa      	ldrh	r2, [r7, #6]
 800abb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	88fa      	ldrh	r2, [r7, #6]
 800abbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abc8:	d108      	bne.n	800abdc <HAL_UART_Transmit+0x6c>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d104      	bne.n	800abdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	61bb      	str	r3, [r7, #24]
 800abda:	e003      	b.n	800abe4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abe0:	2300      	movs	r3, #0
 800abe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800abe4:	e02a      	b.n	800ac3c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2200      	movs	r2, #0
 800abee:	2180      	movs	r1, #128	; 0x80
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 faf9 	bl	800b1e8 <UART_WaitOnFlagUntilTimeout>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	e036      	b.n	800ac6e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10b      	bne.n	800ac1e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	3302      	adds	r3, #2
 800ac1a:	61bb      	str	r3, [r7, #24]
 800ac1c:	e007      	b.n	800ac2e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	781a      	ldrb	r2, [r3, #0]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	3b01      	subs	r3, #1
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1cf      	bne.n	800abe6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2140      	movs	r1, #64	; 0x40
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 fac9 	bl	800b1e8 <UART_WaitOnFlagUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e006      	b.n	800ac6e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2220      	movs	r2, #32
 800ac64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	e000      	b.n	800ac6e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ac6c:	2302      	movs	r3, #2
  }
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3720      	adds	r7, #32
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
	...

0800ac78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b0ba      	sub	sp, #232	; 0xe8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aca4:	2300      	movs	r3, #0
 800aca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800acaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acae:	f003 030f 	and.w	r3, r3, #15
 800acb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800acb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10f      	bne.n	800acde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800acbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acc2:	f003 0320 	and.w	r3, r3, #32
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d009      	beq.n	800acde <HAL_UART_IRQHandler+0x66>
 800acca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acce:	f003 0320 	and.w	r3, r3, #32
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fbd1 	bl	800b47e <UART_Receive_IT>
      return;
 800acdc:	e25b      	b.n	800b196 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800acde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f000 80de 	beq.w	800aea4 <HAL_UART_IRQHandler+0x22c>
 800ace8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d106      	bne.n	800ad02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800acf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acf8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 80d1 	beq.w	800aea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00b      	beq.n	800ad26 <HAL_UART_IRQHandler+0xae>
 800ad0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d005      	beq.n	800ad26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad1e:	f043 0201 	orr.w	r2, r3, #1
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad2a:	f003 0304 	and.w	r3, r3, #4
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00b      	beq.n	800ad4a <HAL_UART_IRQHandler+0xd2>
 800ad32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d005      	beq.n	800ad4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad42:	f043 0202 	orr.w	r2, r3, #2
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4e:	f003 0302 	and.w	r3, r3, #2
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00b      	beq.n	800ad6e <HAL_UART_IRQHandler+0xf6>
 800ad56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad5a:	f003 0301 	and.w	r3, r3, #1
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d005      	beq.n	800ad6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad66:	f043 0204 	orr.w	r2, r3, #4
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad72:	f003 0308 	and.w	r3, r3, #8
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d011      	beq.n	800ad9e <HAL_UART_IRQHandler+0x126>
 800ad7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad7e:	f003 0320 	and.w	r3, r3, #32
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d105      	bne.n	800ad92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d005      	beq.n	800ad9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad96:	f043 0208 	orr.w	r2, r3, #8
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 81f2 	beq.w	800b18c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ada8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adac:	f003 0320 	and.w	r3, r3, #32
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d008      	beq.n	800adc6 <HAL_UART_IRQHandler+0x14e>
 800adb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb8:	f003 0320 	and.w	r3, r3, #32
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fb5c 	bl	800b47e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	695b      	ldr	r3, [r3, #20]
 800adcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add0:	2b00      	cmp	r3, #0
 800add2:	bf14      	ite	ne
 800add4:	2301      	movne	r3, #1
 800add6:	2300      	moveq	r3, #0
 800add8:	b2db      	uxtb	r3, r3
 800adda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d103      	bne.n	800adf2 <HAL_UART_IRQHandler+0x17a>
 800adea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d04f      	beq.n	800ae92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa66 	bl	800b2c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d041      	beq.n	800ae8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3314      	adds	r3, #20
 800ae0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae14:	e853 3f00 	ldrex	r3, [r3]
 800ae18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3314      	adds	r3, #20
 800ae2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae42:	e841 2300 	strex	r3, r2, [r1]
 800ae46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1d9      	bne.n	800ae06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d013      	beq.n	800ae82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5e:	4a7e      	ldr	r2, [pc, #504]	; (800b058 <HAL_UART_IRQHandler+0x3e0>)
 800ae60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fd f81e 	bl	8007ea8 <HAL_DMA_Abort_IT>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d016      	beq.n	800aea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae80:	e00e      	b.n	800aea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f99c 	bl	800b1c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae88:	e00a      	b.n	800aea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f998 	bl	800b1c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae90:	e006      	b.n	800aea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f994 	bl	800b1c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800ae9e:	e175      	b.n	800b18c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea0:	bf00      	nop
    return;
 800aea2:	e173      	b.n	800b18c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	f040 814f 	bne.w	800b14c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aeae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb2:	f003 0310 	and.w	r3, r3, #16
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 8148 	beq.w	800b14c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aec0:	f003 0310 	and.w	r3, r3, #16
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 8141 	beq.w	800b14c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aeca:	2300      	movs	r3, #0
 800aecc:	60bb      	str	r3, [r7, #8]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60bb      	str	r3, [r7, #8]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	60bb      	str	r3, [r7, #8]
 800aede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f000 80b6 	beq.w	800b05c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aefc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 8145 	beq.w	800b190 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af0e:	429a      	cmp	r2, r3
 800af10:	f080 813e 	bcs.w	800b190 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	2b20      	cmp	r3, #32
 800af24:	f000 8088 	beq.w	800b038 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	330c      	adds	r3, #12
 800af2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af36:	e853 3f00 	ldrex	r3, [r3]
 800af3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	330c      	adds	r3, #12
 800af50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800af54:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800af58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af64:	e841 2300 	strex	r3, r2, [r1]
 800af68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1d9      	bne.n	800af28 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3314      	adds	r3, #20
 800af7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af7e:	e853 3f00 	ldrex	r3, [r3]
 800af82:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800af84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af86:	f023 0301 	bic.w	r3, r3, #1
 800af8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3314      	adds	r3, #20
 800af94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800af98:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af9c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800afa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800afa4:	e841 2300 	strex	r3, r2, [r1]
 800afa8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800afaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1e1      	bne.n	800af74 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3314      	adds	r3, #20
 800afb6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afba:	e853 3f00 	ldrex	r3, [r3]
 800afbe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3314      	adds	r3, #20
 800afd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800afd4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800afd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800afda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800afdc:	e841 2300 	strex	r3, r2, [r1]
 800afe0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800afe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e3      	bne.n	800afb0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2220      	movs	r2, #32
 800afec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	330c      	adds	r3, #12
 800affc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b000:	e853 3f00 	ldrex	r3, [r3]
 800b004:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b008:	f023 0310 	bic.w	r3, r3, #16
 800b00c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	330c      	adds	r3, #12
 800b016:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b01a:	65ba      	str	r2, [r7, #88]	; 0x58
 800b01c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b01e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b020:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b022:	e841 2300 	strex	r3, r2, [r1]
 800b026:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d1e3      	bne.n	800aff6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b032:	4618      	mov	r0, r3
 800b034:	f7fc fefd 	bl	8007e32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2202      	movs	r2, #2
 800b03c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b046:	b29b      	uxth	r3, r3
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4619      	mov	r1, r3
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f8bf 	bl	800b1d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b054:	e09c      	b.n	800b190 <HAL_UART_IRQHandler+0x518>
 800b056:	bf00      	nop
 800b058:	0800b389 	.word	0x0800b389
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b064:	b29b      	uxth	r3, r3
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b070:	b29b      	uxth	r3, r3
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 808e 	beq.w	800b194 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 8089 	beq.w	800b194 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	330c      	adds	r3, #12
 800b088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	e853 3f00 	ldrex	r3, [r3]
 800b090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	330c      	adds	r3, #12
 800b0a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b0a6:	647a      	str	r2, [r7, #68]	; 0x44
 800b0a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e3      	bne.n	800b082 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3314      	adds	r3, #20
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ca:	6a3b      	ldr	r3, [r7, #32]
 800b0cc:	f023 0301 	bic.w	r3, r3, #1
 800b0d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3314      	adds	r3, #20
 800b0da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0de:	633a      	str	r2, [r7, #48]	; 0x30
 800b0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1e3      	bne.n	800b0ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2220      	movs	r2, #32
 800b0f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	330c      	adds	r3, #12
 800b106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	e853 3f00 	ldrex	r3, [r3]
 800b10e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f023 0310 	bic.w	r3, r3, #16
 800b116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	330c      	adds	r3, #12
 800b120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b124:	61fa      	str	r2, [r7, #28]
 800b126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b128:	69b9      	ldr	r1, [r7, #24]
 800b12a:	69fa      	ldr	r2, [r7, #28]
 800b12c:	e841 2300 	strex	r3, r2, [r1]
 800b130:	617b      	str	r3, [r7, #20]
   return(result);
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e3      	bne.n	800b100 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b13e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f844 	bl	800b1d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b14a:	e023      	b.n	800b194 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b154:	2b00      	cmp	r3, #0
 800b156:	d009      	beq.n	800b16c <HAL_UART_IRQHandler+0x4f4>
 800b158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b160:	2b00      	cmp	r3, #0
 800b162:	d003      	beq.n	800b16c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f923 	bl	800b3b0 <UART_Transmit_IT>
    return;
 800b16a:	e014      	b.n	800b196 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00e      	beq.n	800b196 <HAL_UART_IRQHandler+0x51e>
 800b178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b17c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b180:	2b00      	cmp	r3, #0
 800b182:	d008      	beq.n	800b196 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f962 	bl	800b44e <UART_EndTransmit_IT>
    return;
 800b18a:	e004      	b.n	800b196 <HAL_UART_IRQHandler+0x51e>
    return;
 800b18c:	bf00      	nop
 800b18e:	e002      	b.n	800b196 <HAL_UART_IRQHandler+0x51e>
      return;
 800b190:	bf00      	nop
 800b192:	e000      	b.n	800b196 <HAL_UART_IRQHandler+0x51e>
      return;
 800b194:	bf00      	nop
  }
}
 800b196:	37e8      	adds	r7, #232	; 0xe8
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bc80      	pop	{r7}
 800b1ac:	4770      	bx	lr

0800b1ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1ae:	b480      	push	{r7}
 800b1b0:	b083      	sub	sp, #12
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b1b6:	bf00      	nop
 800b1b8:	370c      	adds	r7, #12
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bc80      	pop	{r7}
 800b1be:	4770      	bx	lr

0800b1c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bc80      	pop	{r7}
 800b1d0:	4770      	bx	lr

0800b1d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	460b      	mov	r3, r1
 800b1dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1de:	bf00      	nop
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bc80      	pop	{r7}
 800b1e6:	4770      	bx	lr

0800b1e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b090      	sub	sp, #64	; 0x40
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	603b      	str	r3, [r7, #0]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1f8:	e050      	b.n	800b29c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b200:	d04c      	beq.n	800b29c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b204:	2b00      	cmp	r3, #0
 800b206:	d007      	beq.n	800b218 <UART_WaitOnFlagUntilTimeout+0x30>
 800b208:	f7fc fbdc 	bl	80079c4 <HAL_GetTick>
 800b20c:	4602      	mov	r2, r0
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b214:	429a      	cmp	r2, r3
 800b216:	d241      	bcs.n	800b29c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	330c      	adds	r3, #12
 800b21e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	e853 3f00 	ldrex	r3, [r3]
 800b226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	330c      	adds	r3, #12
 800b236:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b238:	637a      	str	r2, [r7, #52]	; 0x34
 800b23a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b23e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b240:	e841 2300 	strex	r3, r2, [r1]
 800b244:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1e5      	bne.n	800b218 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3314      	adds	r3, #20
 800b252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	e853 3f00 	ldrex	r3, [r3]
 800b25a:	613b      	str	r3, [r7, #16]
   return(result);
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f023 0301 	bic.w	r3, r3, #1
 800b262:	63bb      	str	r3, [r7, #56]	; 0x38
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3314      	adds	r3, #20
 800b26a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b26c:	623a      	str	r2, [r7, #32]
 800b26e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b270:	69f9      	ldr	r1, [r7, #28]
 800b272:	6a3a      	ldr	r2, [r7, #32]
 800b274:	e841 2300 	strex	r3, r2, [r1]
 800b278:	61bb      	str	r3, [r7, #24]
   return(result);
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1e5      	bne.n	800b24c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2220      	movs	r2, #32
 800b284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2220      	movs	r2, #32
 800b28c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e00f      	b.n	800b2bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	bf0c      	ite	eq
 800b2ac:	2301      	moveq	r3, #1
 800b2ae:	2300      	movne	r3, #0
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d09f      	beq.n	800b1fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3740      	adds	r7, #64	; 0x40
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b095      	sub	sp, #84	; 0x54
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	330c      	adds	r3, #12
 800b2d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d6:	e853 3f00 	ldrex	r3, [r3]
 800b2da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	330c      	adds	r3, #12
 800b2ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2ec:	643a      	str	r2, [r7, #64]	; 0x40
 800b2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2f4:	e841 2300 	strex	r3, r2, [r1]
 800b2f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e5      	bne.n	800b2cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3314      	adds	r3, #20
 800b306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	e853 3f00 	ldrex	r3, [r3]
 800b30e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	f023 0301 	bic.w	r3, r3, #1
 800b316:	64bb      	str	r3, [r7, #72]	; 0x48
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3314      	adds	r3, #20
 800b31e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b320:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b328:	e841 2300 	strex	r3, r2, [r1]
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1e5      	bne.n	800b300 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d119      	bne.n	800b370 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	330c      	adds	r3, #12
 800b342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	e853 3f00 	ldrex	r3, [r3]
 800b34a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	f023 0310 	bic.w	r3, r3, #16
 800b352:	647b      	str	r3, [r7, #68]	; 0x44
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	330c      	adds	r3, #12
 800b35a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b35c:	61ba      	str	r2, [r7, #24]
 800b35e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b360:	6979      	ldr	r1, [r7, #20]
 800b362:	69ba      	ldr	r2, [r7, #24]
 800b364:	e841 2300 	strex	r3, r2, [r1]
 800b368:	613b      	str	r3, [r7, #16]
   return(result);
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e5      	bne.n	800b33c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2220      	movs	r2, #32
 800b374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b37e:	bf00      	nop
 800b380:	3754      	adds	r7, #84	; 0x54
 800b382:	46bd      	mov	sp, r7
 800b384:	bc80      	pop	{r7}
 800b386:	4770      	bx	lr

0800b388 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f7ff ff0c 	bl	800b1c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3a8:	bf00      	nop
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b21      	cmp	r3, #33	; 0x21
 800b3c2:	d13e      	bne.n	800b442 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3cc:	d114      	bne.n	800b3f8 <UART_Transmit_IT+0x48>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d110      	bne.n	800b3f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a1b      	ldr	r3, [r3, #32]
 800b3f0:	1c9a      	adds	r2, r3, #2
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	621a      	str	r2, [r3, #32]
 800b3f6:	e008      	b.n	800b40a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a1b      	ldr	r3, [r3, #32]
 800b3fc:	1c59      	adds	r1, r3, #1
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	6211      	str	r1, [r2, #32]
 800b402:	781a      	ldrb	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b40e:	b29b      	uxth	r3, r3
 800b410:	3b01      	subs	r3, #1
 800b412:	b29b      	uxth	r3, r3
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	4619      	mov	r1, r3
 800b418:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10f      	bne.n	800b43e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68da      	ldr	r2, [r3, #12]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b42c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68da      	ldr	r2, [r3, #12]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b43c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	e000      	b.n	800b444 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b442:	2302      	movs	r3, #2
  }
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	bc80      	pop	{r7}
 800b44c:	4770      	bx	lr

0800b44e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b082      	sub	sp, #8
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68da      	ldr	r2, [r3, #12]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b464:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2220      	movs	r2, #32
 800b46a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7ff fe94 	bl	800b19c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b08c      	sub	sp, #48	; 0x30
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b22      	cmp	r3, #34	; 0x22
 800b490:	f040 80ae 	bne.w	800b5f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b49c:	d117      	bne.n	800b4ce <UART_Receive_IT+0x50>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d113      	bne.n	800b4ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4bc:	b29a      	uxth	r2, r3
 800b4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c6:	1c9a      	adds	r2, r3, #2
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	629a      	str	r2, [r3, #40]	; 0x28
 800b4cc:	e026      	b.n	800b51c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e0:	d007      	beq.n	800b4f2 <UART_Receive_IT+0x74>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10a      	bne.n	800b500 <UART_Receive_IT+0x82>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d106      	bne.n	800b500 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	e008      	b.n	800b512 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	b2db      	uxtb	r3, r3
 800b508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b510:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b516:	1c5a      	adds	r2, r3, #1
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b520:	b29b      	uxth	r3, r3
 800b522:	3b01      	subs	r3, #1
 800b524:	b29b      	uxth	r3, r3
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	4619      	mov	r1, r3
 800b52a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d15d      	bne.n	800b5ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0220 	bic.w	r2, r2, #32
 800b53e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68da      	ldr	r2, [r3, #12]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b54e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	695a      	ldr	r2, [r3, #20]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f022 0201 	bic.w	r2, r2, #1
 800b55e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2220      	movs	r2, #32
 800b564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b572:	2b01      	cmp	r3, #1
 800b574:	d135      	bne.n	800b5e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	330c      	adds	r3, #12
 800b582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	e853 3f00 	ldrex	r3, [r3]
 800b58a:	613b      	str	r3, [r7, #16]
   return(result);
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f023 0310 	bic.w	r3, r3, #16
 800b592:	627b      	str	r3, [r7, #36]	; 0x24
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	330c      	adds	r3, #12
 800b59a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b59c:	623a      	str	r2, [r7, #32]
 800b59e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a0:	69f9      	ldr	r1, [r7, #28]
 800b5a2:	6a3a      	ldr	r2, [r7, #32]
 800b5a4:	e841 2300 	strex	r3, r2, [r1]
 800b5a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e5      	bne.n	800b57c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f003 0310 	and.w	r3, r3, #16
 800b5ba:	2b10      	cmp	r3, #16
 800b5bc:	d10a      	bne.n	800b5d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b5be:	2300      	movs	r3, #0
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	60fb      	str	r3, [r7, #12]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	60fb      	str	r3, [r7, #12]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff fdf9 	bl	800b1d2 <HAL_UARTEx_RxEventCallback>
 800b5e0:	e002      	b.n	800b5e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7ff fde3 	bl	800b1ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	e002      	b.n	800b5f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e000      	b.n	800b5f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b5f0:	2302      	movs	r3, #2
  }
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3730      	adds	r7, #48	; 0x30
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
	...

0800b5fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	430a      	orrs	r2, r1
 800b618:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	689a      	ldr	r2, [r3, #8]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	431a      	orrs	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	695b      	ldr	r3, [r3, #20]
 800b628:	4313      	orrs	r3, r2
 800b62a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b636:	f023 030c 	bic.w	r3, r3, #12
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	6812      	ldr	r2, [r2, #0]
 800b63e:	68b9      	ldr	r1, [r7, #8]
 800b640:	430b      	orrs	r3, r1
 800b642:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	695b      	ldr	r3, [r3, #20]
 800b64a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	699a      	ldr	r2, [r3, #24]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	430a      	orrs	r2, r1
 800b658:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a2c      	ldr	r2, [pc, #176]	; (800b710 <UART_SetConfig+0x114>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d103      	bne.n	800b66c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b664:	f7fe fdd0 	bl	800a208 <HAL_RCC_GetPCLK2Freq>
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	e002      	b.n	800b672 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b66c:	f7fe fdb8 	bl	800a1e0 <HAL_RCC_GetPCLK1Freq>
 800b670:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	4613      	mov	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4413      	add	r3, r2
 800b67a:	009a      	lsls	r2, r3, #2
 800b67c:	441a      	add	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	fbb2 f3f3 	udiv	r3, r2, r3
 800b688:	4a22      	ldr	r2, [pc, #136]	; (800b714 <UART_SetConfig+0x118>)
 800b68a:	fba2 2303 	umull	r2, r3, r2, r3
 800b68e:	095b      	lsrs	r3, r3, #5
 800b690:	0119      	lsls	r1, r3, #4
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	4613      	mov	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	009a      	lsls	r2, r3, #2
 800b69c:	441a      	add	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b6a8:	4b1a      	ldr	r3, [pc, #104]	; (800b714 <UART_SetConfig+0x118>)
 800b6aa:	fba3 0302 	umull	r0, r3, r3, r2
 800b6ae:	095b      	lsrs	r3, r3, #5
 800b6b0:	2064      	movs	r0, #100	; 0x64
 800b6b2:	fb00 f303 	mul.w	r3, r0, r3
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	011b      	lsls	r3, r3, #4
 800b6ba:	3332      	adds	r3, #50	; 0x32
 800b6bc:	4a15      	ldr	r2, [pc, #84]	; (800b714 <UART_SetConfig+0x118>)
 800b6be:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c2:	095b      	lsrs	r3, r3, #5
 800b6c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6c8:	4419      	add	r1, r3
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	009a      	lsls	r2, r3, #2
 800b6d4:	441a      	add	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	fbb2 f2f3 	udiv	r2, r2, r3
 800b6e0:	4b0c      	ldr	r3, [pc, #48]	; (800b714 <UART_SetConfig+0x118>)
 800b6e2:	fba3 0302 	umull	r0, r3, r3, r2
 800b6e6:	095b      	lsrs	r3, r3, #5
 800b6e8:	2064      	movs	r0, #100	; 0x64
 800b6ea:	fb00 f303 	mul.w	r3, r0, r3
 800b6ee:	1ad3      	subs	r3, r2, r3
 800b6f0:	011b      	lsls	r3, r3, #4
 800b6f2:	3332      	adds	r3, #50	; 0x32
 800b6f4:	4a07      	ldr	r2, [pc, #28]	; (800b714 <UART_SetConfig+0x118>)
 800b6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6fa:	095b      	lsrs	r3, r3, #5
 800b6fc:	f003 020f 	and.w	r2, r3, #15
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	440a      	add	r2, r1
 800b706:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b708:	bf00      	nop
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	40013800 	.word	0x40013800
 800b714:	51eb851f 	.word	0x51eb851f

0800b718 <__itoa>:
 800b718:	1e93      	subs	r3, r2, #2
 800b71a:	2b22      	cmp	r3, #34	; 0x22
 800b71c:	b510      	push	{r4, lr}
 800b71e:	460c      	mov	r4, r1
 800b720:	d904      	bls.n	800b72c <__itoa+0x14>
 800b722:	2300      	movs	r3, #0
 800b724:	461c      	mov	r4, r3
 800b726:	700b      	strb	r3, [r1, #0]
 800b728:	4620      	mov	r0, r4
 800b72a:	bd10      	pop	{r4, pc}
 800b72c:	2a0a      	cmp	r2, #10
 800b72e:	d109      	bne.n	800b744 <__itoa+0x2c>
 800b730:	2800      	cmp	r0, #0
 800b732:	da07      	bge.n	800b744 <__itoa+0x2c>
 800b734:	232d      	movs	r3, #45	; 0x2d
 800b736:	700b      	strb	r3, [r1, #0]
 800b738:	2101      	movs	r1, #1
 800b73a:	4240      	negs	r0, r0
 800b73c:	4421      	add	r1, r4
 800b73e:	f000 f8b9 	bl	800b8b4 <__utoa>
 800b742:	e7f1      	b.n	800b728 <__itoa+0x10>
 800b744:	2100      	movs	r1, #0
 800b746:	e7f9      	b.n	800b73c <__itoa+0x24>

0800b748 <itoa>:
 800b748:	f7ff bfe6 	b.w	800b718 <__itoa>

0800b74c <malloc>:
 800b74c:	4b02      	ldr	r3, [pc, #8]	; (800b758 <malloc+0xc>)
 800b74e:	4601      	mov	r1, r0
 800b750:	6818      	ldr	r0, [r3, #0]
 800b752:	f000 b823 	b.w	800b79c <_malloc_r>
 800b756:	bf00      	nop
 800b758:	2000099c 	.word	0x2000099c

0800b75c <sbrk_aligned>:
 800b75c:	b570      	push	{r4, r5, r6, lr}
 800b75e:	4e0e      	ldr	r6, [pc, #56]	; (800b798 <sbrk_aligned+0x3c>)
 800b760:	460c      	mov	r4, r1
 800b762:	6831      	ldr	r1, [r6, #0]
 800b764:	4605      	mov	r5, r0
 800b766:	b911      	cbnz	r1, 800b76e <sbrk_aligned+0x12>
 800b768:	f000 f8ee 	bl	800b948 <_sbrk_r>
 800b76c:	6030      	str	r0, [r6, #0]
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	f000 f8e9 	bl	800b948 <_sbrk_r>
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	d00a      	beq.n	800b790 <sbrk_aligned+0x34>
 800b77a:	1cc4      	adds	r4, r0, #3
 800b77c:	f024 0403 	bic.w	r4, r4, #3
 800b780:	42a0      	cmp	r0, r4
 800b782:	d007      	beq.n	800b794 <sbrk_aligned+0x38>
 800b784:	1a21      	subs	r1, r4, r0
 800b786:	4628      	mov	r0, r5
 800b788:	f000 f8de 	bl	800b948 <_sbrk_r>
 800b78c:	3001      	adds	r0, #1
 800b78e:	d101      	bne.n	800b794 <sbrk_aligned+0x38>
 800b790:	f04f 34ff 	mov.w	r4, #4294967295
 800b794:	4620      	mov	r0, r4
 800b796:	bd70      	pop	{r4, r5, r6, pc}
 800b798:	20000cd8 	.word	0x20000cd8

0800b79c <_malloc_r>:
 800b79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7a0:	1ccd      	adds	r5, r1, #3
 800b7a2:	f025 0503 	bic.w	r5, r5, #3
 800b7a6:	3508      	adds	r5, #8
 800b7a8:	2d0c      	cmp	r5, #12
 800b7aa:	bf38      	it	cc
 800b7ac:	250c      	movcc	r5, #12
 800b7ae:	2d00      	cmp	r5, #0
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	db01      	blt.n	800b7b8 <_malloc_r+0x1c>
 800b7b4:	42a9      	cmp	r1, r5
 800b7b6:	d905      	bls.n	800b7c4 <_malloc_r+0x28>
 800b7b8:	230c      	movs	r3, #12
 800b7ba:	2600      	movs	r6, #0
 800b7bc:	603b      	str	r3, [r7, #0]
 800b7be:	4630      	mov	r0, r6
 800b7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b898 <_malloc_r+0xfc>
 800b7c8:	f000 f868 	bl	800b89c <__malloc_lock>
 800b7cc:	f8d8 3000 	ldr.w	r3, [r8]
 800b7d0:	461c      	mov	r4, r3
 800b7d2:	bb5c      	cbnz	r4, 800b82c <_malloc_r+0x90>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	f7ff ffc0 	bl	800b75c <sbrk_aligned>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	4604      	mov	r4, r0
 800b7e0:	d155      	bne.n	800b88e <_malloc_r+0xf2>
 800b7e2:	f8d8 4000 	ldr.w	r4, [r8]
 800b7e6:	4626      	mov	r6, r4
 800b7e8:	2e00      	cmp	r6, #0
 800b7ea:	d145      	bne.n	800b878 <_malloc_r+0xdc>
 800b7ec:	2c00      	cmp	r4, #0
 800b7ee:	d048      	beq.n	800b882 <_malloc_r+0xe6>
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	4631      	mov	r1, r6
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	eb04 0903 	add.w	r9, r4, r3
 800b7fa:	f000 f8a5 	bl	800b948 <_sbrk_r>
 800b7fe:	4581      	cmp	r9, r0
 800b800:	d13f      	bne.n	800b882 <_malloc_r+0xe6>
 800b802:	6821      	ldr	r1, [r4, #0]
 800b804:	4638      	mov	r0, r7
 800b806:	1a6d      	subs	r5, r5, r1
 800b808:	4629      	mov	r1, r5
 800b80a:	f7ff ffa7 	bl	800b75c <sbrk_aligned>
 800b80e:	3001      	adds	r0, #1
 800b810:	d037      	beq.n	800b882 <_malloc_r+0xe6>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	442b      	add	r3, r5
 800b816:	6023      	str	r3, [r4, #0]
 800b818:	f8d8 3000 	ldr.w	r3, [r8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d038      	beq.n	800b892 <_malloc_r+0xf6>
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	42a2      	cmp	r2, r4
 800b824:	d12b      	bne.n	800b87e <_malloc_r+0xe2>
 800b826:	2200      	movs	r2, #0
 800b828:	605a      	str	r2, [r3, #4]
 800b82a:	e00f      	b.n	800b84c <_malloc_r+0xb0>
 800b82c:	6822      	ldr	r2, [r4, #0]
 800b82e:	1b52      	subs	r2, r2, r5
 800b830:	d41f      	bmi.n	800b872 <_malloc_r+0xd6>
 800b832:	2a0b      	cmp	r2, #11
 800b834:	d917      	bls.n	800b866 <_malloc_r+0xca>
 800b836:	1961      	adds	r1, r4, r5
 800b838:	42a3      	cmp	r3, r4
 800b83a:	6025      	str	r5, [r4, #0]
 800b83c:	bf18      	it	ne
 800b83e:	6059      	strne	r1, [r3, #4]
 800b840:	6863      	ldr	r3, [r4, #4]
 800b842:	bf08      	it	eq
 800b844:	f8c8 1000 	streq.w	r1, [r8]
 800b848:	5162      	str	r2, [r4, r5]
 800b84a:	604b      	str	r3, [r1, #4]
 800b84c:	4638      	mov	r0, r7
 800b84e:	f104 060b 	add.w	r6, r4, #11
 800b852:	f000 f829 	bl	800b8a8 <__malloc_unlock>
 800b856:	f026 0607 	bic.w	r6, r6, #7
 800b85a:	1d23      	adds	r3, r4, #4
 800b85c:	1af2      	subs	r2, r6, r3
 800b85e:	d0ae      	beq.n	800b7be <_malloc_r+0x22>
 800b860:	1b9b      	subs	r3, r3, r6
 800b862:	50a3      	str	r3, [r4, r2]
 800b864:	e7ab      	b.n	800b7be <_malloc_r+0x22>
 800b866:	42a3      	cmp	r3, r4
 800b868:	6862      	ldr	r2, [r4, #4]
 800b86a:	d1dd      	bne.n	800b828 <_malloc_r+0x8c>
 800b86c:	f8c8 2000 	str.w	r2, [r8]
 800b870:	e7ec      	b.n	800b84c <_malloc_r+0xb0>
 800b872:	4623      	mov	r3, r4
 800b874:	6864      	ldr	r4, [r4, #4]
 800b876:	e7ac      	b.n	800b7d2 <_malloc_r+0x36>
 800b878:	4634      	mov	r4, r6
 800b87a:	6876      	ldr	r6, [r6, #4]
 800b87c:	e7b4      	b.n	800b7e8 <_malloc_r+0x4c>
 800b87e:	4613      	mov	r3, r2
 800b880:	e7cc      	b.n	800b81c <_malloc_r+0x80>
 800b882:	230c      	movs	r3, #12
 800b884:	4638      	mov	r0, r7
 800b886:	603b      	str	r3, [r7, #0]
 800b888:	f000 f80e 	bl	800b8a8 <__malloc_unlock>
 800b88c:	e797      	b.n	800b7be <_malloc_r+0x22>
 800b88e:	6025      	str	r5, [r4, #0]
 800b890:	e7dc      	b.n	800b84c <_malloc_r+0xb0>
 800b892:	605b      	str	r3, [r3, #4]
 800b894:	deff      	udf	#255	; 0xff
 800b896:	bf00      	nop
 800b898:	20000cd4 	.word	0x20000cd4

0800b89c <__malloc_lock>:
 800b89c:	4801      	ldr	r0, [pc, #4]	; (800b8a4 <__malloc_lock+0x8>)
 800b89e:	f000 b88d 	b.w	800b9bc <__retarget_lock_acquire_recursive>
 800b8a2:	bf00      	nop
 800b8a4:	20000e18 	.word	0x20000e18

0800b8a8 <__malloc_unlock>:
 800b8a8:	4801      	ldr	r0, [pc, #4]	; (800b8b0 <__malloc_unlock+0x8>)
 800b8aa:	f000 b888 	b.w	800b9be <__retarget_lock_release_recursive>
 800b8ae:	bf00      	nop
 800b8b0:	20000e18 	.word	0x20000e18

0800b8b4 <__utoa>:
 800b8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8b6:	b08b      	sub	sp, #44	; 0x2c
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	466e      	mov	r6, sp
 800b8be:	4c1d      	ldr	r4, [pc, #116]	; (800b934 <__utoa+0x80>)
 800b8c0:	f104 0c20 	add.w	ip, r4, #32
 800b8c4:	4637      	mov	r7, r6
 800b8c6:	6820      	ldr	r0, [r4, #0]
 800b8c8:	6861      	ldr	r1, [r4, #4]
 800b8ca:	3408      	adds	r4, #8
 800b8cc:	c703      	stmia	r7!, {r0, r1}
 800b8ce:	4564      	cmp	r4, ip
 800b8d0:	463e      	mov	r6, r7
 800b8d2:	d1f7      	bne.n	800b8c4 <__utoa+0x10>
 800b8d4:	7921      	ldrb	r1, [r4, #4]
 800b8d6:	6820      	ldr	r0, [r4, #0]
 800b8d8:	7139      	strb	r1, [r7, #4]
 800b8da:	1e91      	subs	r1, r2, #2
 800b8dc:	2922      	cmp	r1, #34	; 0x22
 800b8de:	6038      	str	r0, [r7, #0]
 800b8e0:	f04f 0100 	mov.w	r1, #0
 800b8e4:	d904      	bls.n	800b8f0 <__utoa+0x3c>
 800b8e6:	7019      	strb	r1, [r3, #0]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	b00b      	add	sp, #44	; 0x2c
 800b8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8f0:	1e58      	subs	r0, r3, #1
 800b8f2:	4684      	mov	ip, r0
 800b8f4:	fbb5 f7f2 	udiv	r7, r5, r2
 800b8f8:	fb02 5617 	mls	r6, r2, r7, r5
 800b8fc:	3628      	adds	r6, #40	; 0x28
 800b8fe:	446e      	add	r6, sp
 800b900:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b904:	460c      	mov	r4, r1
 800b906:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b90a:	462e      	mov	r6, r5
 800b90c:	42b2      	cmp	r2, r6
 800b90e:	463d      	mov	r5, r7
 800b910:	f101 0101 	add.w	r1, r1, #1
 800b914:	d9ee      	bls.n	800b8f4 <__utoa+0x40>
 800b916:	2200      	movs	r2, #0
 800b918:	545a      	strb	r2, [r3, r1]
 800b91a:	1919      	adds	r1, r3, r4
 800b91c:	1aa5      	subs	r5, r4, r2
 800b91e:	42aa      	cmp	r2, r5
 800b920:	dae3      	bge.n	800b8ea <__utoa+0x36>
 800b922:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b926:	780e      	ldrb	r6, [r1, #0]
 800b928:	3201      	adds	r2, #1
 800b92a:	7006      	strb	r6, [r0, #0]
 800b92c:	f801 5901 	strb.w	r5, [r1], #-1
 800b930:	e7f4      	b.n	800b91c <__utoa+0x68>
 800b932:	bf00      	nop
 800b934:	0800c812 	.word	0x0800c812

0800b938 <memset>:
 800b938:	4603      	mov	r3, r0
 800b93a:	4402      	add	r2, r0
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d100      	bne.n	800b942 <memset+0xa>
 800b940:	4770      	bx	lr
 800b942:	f803 1b01 	strb.w	r1, [r3], #1
 800b946:	e7f9      	b.n	800b93c <memset+0x4>

0800b948 <_sbrk_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	2300      	movs	r3, #0
 800b94c:	4d05      	ldr	r5, [pc, #20]	; (800b964 <_sbrk_r+0x1c>)
 800b94e:	4604      	mov	r4, r0
 800b950:	4608      	mov	r0, r1
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	f7fb ff7c 	bl	8007850 <_sbrk>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d102      	bne.n	800b962 <_sbrk_r+0x1a>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	b103      	cbz	r3, 800b962 <_sbrk_r+0x1a>
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	20000e14 	.word	0x20000e14

0800b968 <__errno>:
 800b968:	4b01      	ldr	r3, [pc, #4]	; (800b970 <__errno+0x8>)
 800b96a:	6818      	ldr	r0, [r3, #0]
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	2000099c 	.word	0x2000099c

0800b974 <__libc_init_array>:
 800b974:	b570      	push	{r4, r5, r6, lr}
 800b976:	2600      	movs	r6, #0
 800b978:	4d0c      	ldr	r5, [pc, #48]	; (800b9ac <__libc_init_array+0x38>)
 800b97a:	4c0d      	ldr	r4, [pc, #52]	; (800b9b0 <__libc_init_array+0x3c>)
 800b97c:	1b64      	subs	r4, r4, r5
 800b97e:	10a4      	asrs	r4, r4, #2
 800b980:	42a6      	cmp	r6, r4
 800b982:	d109      	bne.n	800b998 <__libc_init_array+0x24>
 800b984:	f000 f824 	bl	800b9d0 <_init>
 800b988:	2600      	movs	r6, #0
 800b98a:	4d0a      	ldr	r5, [pc, #40]	; (800b9b4 <__libc_init_array+0x40>)
 800b98c:	4c0a      	ldr	r4, [pc, #40]	; (800b9b8 <__libc_init_array+0x44>)
 800b98e:	1b64      	subs	r4, r4, r5
 800b990:	10a4      	asrs	r4, r4, #2
 800b992:	42a6      	cmp	r6, r4
 800b994:	d105      	bne.n	800b9a2 <__libc_init_array+0x2e>
 800b996:	bd70      	pop	{r4, r5, r6, pc}
 800b998:	f855 3b04 	ldr.w	r3, [r5], #4
 800b99c:	4798      	blx	r3
 800b99e:	3601      	adds	r6, #1
 800b9a0:	e7ee      	b.n	800b980 <__libc_init_array+0xc>
 800b9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a6:	4798      	blx	r3
 800b9a8:	3601      	adds	r6, #1
 800b9aa:	e7f2      	b.n	800b992 <__libc_init_array+0x1e>
 800b9ac:	0800c838 	.word	0x0800c838
 800b9b0:	0800c838 	.word	0x0800c838
 800b9b4:	0800c838 	.word	0x0800c838
 800b9b8:	0800c83c 	.word	0x0800c83c

0800b9bc <__retarget_lock_acquire_recursive>:
 800b9bc:	4770      	bx	lr

0800b9be <__retarget_lock_release_recursive>:
 800b9be:	4770      	bx	lr

0800b9c0 <strcpy>:
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9c6:	f803 2b01 	strb.w	r2, [r3], #1
 800b9ca:	2a00      	cmp	r2, #0
 800b9cc:	d1f9      	bne.n	800b9c2 <strcpy+0x2>
 800b9ce:	4770      	bx	lr

0800b9d0 <_init>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	bf00      	nop
 800b9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9d6:	bc08      	pop	{r3}
 800b9d8:	469e      	mov	lr, r3
 800b9da:	4770      	bx	lr

0800b9dc <_fini>:
 800b9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9de:	bf00      	nop
 800b9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e2:	bc08      	pop	{r3}
 800b9e4:	469e      	mov	lr, r3
 800b9e6:	4770      	bx	lr
