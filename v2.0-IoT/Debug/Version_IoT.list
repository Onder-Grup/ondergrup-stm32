
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  0800d6b8  0800d6b8  0001d6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5bc  0800e5bc  00020a20  2**0
                  CONTENTS
  4 .ARM          00000000  0800e5bc  0800e5bc  00020a20  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e5bc  0800e5bc  00020a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5bc  0800e5bc  0001e5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5c0  0800e5c0  0001e5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a20  20000000  0800e5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000a20  0800efe4  00020a20  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000103c  0800efe4  0002103c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a20  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a49  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136d1  00000000  00000000  00020a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c4  00000000  00000000  0003415d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00036828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e14  00000000  00000000  000379f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef6  00000000  00000000  00038804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001897b  00000000  00000000  000536fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd5a  00000000  00000000  0006c075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005230  00000000  00000000  0010bdd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00111000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a20 	.word	0x20000a20
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d6a0 	.word	0x0800d6a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a24 	.word	0x20000a24
 8000220:	0800d6a0 	.word	0x0800d6a0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b0c6      	sub	sp, #280	; 0x118
 8000238:	af02      	add	r7, sp, #8
 800023a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800023e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000242:	6018      	str	r0, [r3, #0]
 8000244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800024c:	6019      	str	r1, [r3, #0]
 800024e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000256:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 8000258:	4a31      	ldr	r2, [pc, #196]	; (8000320 <sendMachineData+0xec>)
 800025a:	4932      	ldr	r1, [pc, #200]	; (8000324 <sendMachineData+0xf0>)
 800025c:	4832      	ldr	r0, [pc, #200]	; (8000328 <sendMachineData+0xf4>)
 800025e:	f00c fe01 	bl	800ce64 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000262:	4831      	ldr	r0, [pc, #196]	; (8000328 <sendMachineData+0xf4>)
 8000264:	f7ff ffde 	bl	8000224 <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000274:	492c      	ldr	r1, [pc, #176]	; (8000328 <sendMachineData+0xf4>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f00b ffcc 	bl	800c214 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800027c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000280:	f008 fefc 	bl	800907c <HAL_Delay>

	sprintf(local_txA,
 8000284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800028c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000290:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000294:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <sendMachineData+0xf8>)
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	4923      	ldr	r1, [pc, #140]	; (8000330 <sendMachineData+0xfc>)
 80002a2:	f00c fddf 	bl	800ce64 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80002a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffba 	bl	8000224 <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80002be:	491d      	ldr	r1, [pc, #116]	; (8000334 <sendMachineData+0x100>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f00c fdcf 	bl	800ce64 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffaa 	bl	8000224 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f107 0110 	add.w	r1, r7, #16
 80002d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	f00b ff97 	bl	800c214 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ea:	f008 fec7 	bl	800907c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 80002ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	f00b ff83 	bl	800c214 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800030e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000312:	f008 feb3 	bl	800907c <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	0800d704 	.word	0x0800d704
 8000324:	0800d714 	.word	0x0800d714
 8000328:	20000a3c 	.word	0x20000a3c
 800032c:	0800d790 	.word	0x0800d790
 8000330:	0800d734 	.word	0x0800d734
 8000334:	0800d7a4 	.word	0x0800d7a4

08000338 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af02      	add	r7, sp, #8
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	b2db      	uxtb	r3, r3
 8000358:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	b2db      	uxtb	r3, r3
 8000362:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000364:	7b3b      	ldrb	r3, [r7, #12]
 8000366:	f043 030c 	orr.w	r3, r3, #12
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800036e:	7b3b      	ldrb	r3, [r7, #12]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b2db      	uxtb	r3, r3
 8000376:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000378:	bf00      	nop
 800037a:	4825      	ldr	r0, [pc, #148]	; (8000410 <lcd_send_cmd+0xd8>)
 800037c:	f00a fa77 	bl	800a86e <HAL_I2C_GetError>
 8000380:	4603      	mov	r3, r0
 8000382:	2b04      	cmp	r3, #4
 8000384:	d0f9      	beq.n	800037a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000386:	bf00      	nop
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <lcd_send_cmd+0xd8>)
 800038a:	f00a fa63 	bl	800a854 <HAL_I2C_GetState>
 800038e:	4603      	mov	r3, r0
 8000390:	2b20      	cmp	r3, #32
 8000392:	d1f9      	bne.n	8000388 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <lcd_send_cmd+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d116      	bne.n	80003ca <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e00f      	b.n	80003c2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	3310      	adds	r3, #16
 80003a6:	443b      	add	r3, r7
 80003a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	f022 0208 	bic.w	r2, r2, #8
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	3310      	adds	r3, #16
 80003b6:	443b      	add	r3, r7
 80003b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d9ec      	bls.n	80003a2 <lcd_send_cmd+0x6a>
 80003c8:	e015      	b.n	80003f6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]
 80003ce:	e00f      	b.n	80003f0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	3310      	adds	r3, #16
 80003d4:	443b      	add	r3, r7
 80003d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	f042 0208 	orr.w	r2, r2, #8
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	3310      	adds	r3, #16
 80003e4:	443b      	add	r3, r7
 80003e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73bb      	strb	r3, [r7, #14]
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9ec      	bls.n	80003d0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2304      	movs	r3, #4
 8000400:	214e      	movs	r1, #78	; 0x4e
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <lcd_send_cmd+0xd8>)
 8000404:	f009 fdc6 	bl	8009f94 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000e08 	.word	0x20000e08
 8000414:	20000b36 	.word	0x20000b36

08000418 <lcd_send_data>:

void lcd_send_data (char data) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b2db      	uxtb	r3, r3
 8000438:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800043a:	7b7b      	ldrb	r3, [r7, #13]
 800043c:	f043 0309 	orr.w	r3, r3, #9
 8000440:	b2db      	uxtb	r3, r3
 8000442:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000444:	7b3b      	ldrb	r3, [r7, #12]
 8000446:	f043 030d 	orr.w	r3, r3, #13
 800044a:	b2db      	uxtb	r3, r3
 800044c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	f043 0309 	orr.w	r3, r3, #9
 8000454:	b2db      	uxtb	r3, r3
 8000456:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000458:	bf00      	nop
 800045a:	4825      	ldr	r0, [pc, #148]	; (80004f0 <lcd_send_data+0xd8>)
 800045c:	f00a fa07 	bl	800a86e <HAL_I2C_GetError>
 8000460:	4603      	mov	r3, r0
 8000462:	2b04      	cmp	r3, #4
 8000464:	d0f9      	beq.n	800045a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000466:	bf00      	nop
 8000468:	4821      	ldr	r0, [pc, #132]	; (80004f0 <lcd_send_data+0xd8>)
 800046a:	f00a f9f3 	bl	800a854 <HAL_I2C_GetState>
 800046e:	4603      	mov	r3, r0
 8000470:	2b20      	cmp	r3, #32
 8000472:	d1f9      	bne.n	8000468 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <lcd_send_data+0xdc>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d116      	bne.n	80004aa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e00f      	b.n	80004a2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3310      	adds	r3, #16
 8000486:	443b      	add	r3, r7
 8000488:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f022 0208 	bic.w	r2, r2, #8
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	3310      	adds	r3, #16
 8000496:	443b      	add	r3, r7
 8000498:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	3301      	adds	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d9ec      	bls.n	8000482 <lcd_send_data+0x6a>
 80004a8:	e015      	b.n	80004d6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	e00f      	b.n	80004d0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004b0:	7bbb      	ldrb	r3, [r7, #14]
 80004b2:	3310      	adds	r3, #16
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	f042 0208 	orr.w	r2, r2, #8
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	3310      	adds	r3, #16
 80004c4:	443b      	add	r3, r7
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73bb      	strb	r3, [r7, #14]
 80004d0:	7bbb      	ldrb	r3, [r7, #14]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d9ec      	bls.n	80004b0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	214e      	movs	r1, #78	; 0x4e
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_data+0xd8>)
 80004e4:	f009 fd56 	bl	8009f94 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000e08 	.word	0x20000e08
 80004f4:	20000b36 	.word	0x20000b36

080004f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000500:	e006      	b.n	8000510 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff84 	bl	8000418 <lcd_send_data>
	while (*str) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <lcd_send_string+0xa>
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800053c:	7b7b      	ldrb	r3, [r7, #13]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000546:	7b7b      	ldrb	r3, [r7, #13]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	f043 030d 	orr.w	r3, r3, #13
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	f043 0309 	orr.w	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000564:	bf00      	nop
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <lcd_send_char+0xd8>)
 8000568:	f00a f981 	bl	800a86e <HAL_I2C_GetError>
 800056c:	4603      	mov	r3, r0
 800056e:	2b04      	cmp	r3, #4
 8000570:	d0f9      	beq.n	8000566 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000572:	bf00      	nop
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_send_char+0xd8>)
 8000576:	f00a f96d 	bl	800a854 <HAL_I2C_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b20      	cmp	r3, #32
 800057e:	d1f9      	bne.n	8000574 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <lcd_send_char+0xdc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d116      	bne.n	80005b6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e00f      	b.n	80005ae <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3310      	adds	r3, #16
 8000592:	443b      	add	r3, r7
 8000594:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f022 0208 	bic.w	r2, r2, #8
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	3310      	adds	r3, #16
 80005a2:	443b      	add	r3, r7
 80005a4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9ec      	bls.n	800058e <lcd_send_char+0x6a>
 80005b4:	e015      	b.n	80005e2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	e00f      	b.n	80005dc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	3310      	adds	r3, #16
 80005c0:	443b      	add	r3, r7
 80005c2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f042 0208 	orr.w	r2, r2, #8
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	3310      	adds	r3, #16
 80005d0:	443b      	add	r3, r7
 80005d2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d9ec      	bls.n	80005bc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80005e2:	f107 0208 	add.w	r2, r7, #8
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2304      	movs	r3, #4
 80005ec:	214e      	movs	r1, #78	; 0x4e
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <lcd_send_char+0xd8>)
 80005f0:	f009 fcd0 	bl	8009f94 <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000e08 	.word	0x20000e08
 8000600:	20000b36 	.word	0x20000b36

08000604 <lcd_init>:

void lcd_init (void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fe95 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f7ff fe92 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000614:	200c      	movs	r0, #12
 8000616:	f7ff fe8f 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800061a:	2080      	movs	r0, #128	; 0x80
 800061c:	f7ff fe8c 	bl	8000338 <lcd_send_cmd>
	lcd_backlight(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f86d 	bl	8000700 <lcd_backlight>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	460a      	mov	r2, r1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4613      	mov	r3, r2
 8000638:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d106      	bne.n	800064e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	337f      	adds	r3, #127	; 0x7f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe76 	bl	8000338 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800064c:	e008      	b.n	8000660 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d105      	bne.n	8000660 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	3b41      	subs	r3, #65	; 0x41
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe6c 	bl	8000338 <lcd_send_cmd>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	460b      	mov	r3, r1
 8000676:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffd3 	bl	800062a <lcd_gotoxy>
	lcd_send_string(str);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff ff37 	bl	80004f8 <lcd_send_string>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbd 	bl	800062a <lcd_gotoxy>
    lcd_send_char(ch);
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff36 	bl	8000524 <lcd_send_char>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:

void lcd_clear(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fe37 	bl	8000338 <lcd_send_cmd>
    HAL_Delay(2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f008 fcd6 	bl	800907c <HAL_Delay>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9d 	bl	800062a <lcd_gotoxy>

    lcd_send_char(' ');
 80006f0:	2020      	movs	r0, #32
 80006f2:	f7ff ff17 	bl	8000524 <lcd_send_char>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <lcd_backlight+0x20>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fe11 	bl	8000338 <lcd_send_cmd>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000b36 	.word	0x20000b36

08000724 <lcd_cursor>:

void lcd_cursor(int state) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f7ff fe00 	bl	8000338 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff fdfd 	bl	8000338 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800073e:	e002      	b.n	8000746 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff fdf9 	bl	8000338 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000754:	f3bf 8f4f 	dsb	sy
}
 8000758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <__NVIC_SystemReset+0x24>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000762:	4904      	ldr	r1, [pc, #16]	; (8000774 <__NVIC_SystemReset+0x24>)
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_SystemReset+0x28>)
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <__NVIC_SystemReset+0x20>
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	05fa0004 	.word	0x05fa0004

0800077c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fd4d 	bl	8000224 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	3301      	adds	r3, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f00c fa72 	bl	800cc78 <malloc>
 8000794:	4603      	mov	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <copyText+0x2a>
        strcpy(result, text);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f00c fbd3 	bl	800cf4c <strcpy>
    }
    return result;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80007ba:	20c8      	movs	r0, #200	; 0xc8
 80007bc:	f008 fc5e 	bl	800907c <HAL_Delay>
	lcd_clear();
 80007c0:	f7ff ff7e 	bl	80006c0 <lcd_clear>
	if(type == 1 && page == 0) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d143      	bne.n	8000852 <printTemplate+0xa2>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d140      	bne.n	8000852 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80007d0:	4a9d      	ldr	r2, [pc, #628]	; (8000a48 <printTemplate+0x298>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff47 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "0");
 80007da:	4a9c      	ldr	r2, [pc, #624]	; (8000a4c <printTemplate+0x29c>)
 80007dc:	2103      	movs	r1, #3
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff ff42 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "1");
 80007e4:	4a9a      	ldr	r2, [pc, #616]	; (8000a50 <printTemplate+0x2a0>)
 80007e6:	2104      	movs	r1, #4
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ff3d 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "2");
 80007ee:	4a99      	ldr	r2, [pc, #612]	; (8000a54 <printTemplate+0x2a4>)
 80007f0:	2105      	movs	r1, #5
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff38 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "3");
 80007f8:	4a97      	ldr	r2, [pc, #604]	; (8000a58 <printTemplate+0x2a8>)
 80007fa:	2106      	movs	r1, #6
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff ff33 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "4");
 8000802:	4a96      	ldr	r2, [pc, #600]	; (8000a5c <printTemplate+0x2ac>)
 8000804:	2107      	movs	r1, #7
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff ff2e 	bl	8000668 <lcd_print>
		lcd_print(2, 10, "5");
 800080c:	4a94      	ldr	r2, [pc, #592]	; (8000a60 <printTemplate+0x2b0>)
 800080e:	210a      	movs	r1, #10
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff29 	bl	8000668 <lcd_print>
		lcd_print(2, 11, "6");
 8000816:	4a93      	ldr	r2, [pc, #588]	; (8000a64 <printTemplate+0x2b4>)
 8000818:	210b      	movs	r1, #11
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff24 	bl	8000668 <lcd_print>
		lcd_print(2, 12, "7");
 8000820:	4a91      	ldr	r2, [pc, #580]	; (8000a68 <printTemplate+0x2b8>)
 8000822:	210c      	movs	r1, #12
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff1f 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "8");
 800082a:	4a90      	ldr	r2, [pc, #576]	; (8000a6c <printTemplate+0x2bc>)
 800082c:	210d      	movs	r1, #13
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff1a 	bl	8000668 <lcd_print>
		lcd_print(2, 14, "9");
 8000834:	4a8e      	ldr	r2, [pc, #568]	; (8000a70 <printTemplate+0x2c0>)
 8000836:	210e      	movs	r1, #14
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff ff15 	bl	8000668 <lcd_print>
		lcd_print(1, 5, machineID);
 800083e:	4a8d      	ldr	r2, [pc, #564]	; (8000a74 <printTemplate+0x2c4>)
 8000840:	2105      	movs	r1, #5
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff10 	bl	8000668 <lcd_print>
		lcd_gotoxy(2, 3);
 8000848:	2103      	movs	r1, #3
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff feed 	bl	800062a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000850:	e0f5      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 2) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d178      	bne.n	800094a <printTemplate+0x19a>
		if(page == 1) {
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d114      	bne.n	8000888 <printTemplate+0xd8>
			lcd_clear();
 800085e:	f7ff ff2f 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f008 fc0a 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000868:	4a83      	ldr	r2, [pc, #524]	; (8000a78 <printTemplate+0x2c8>)
 800086a:	2101      	movs	r1, #1
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fefb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000872:	4a82      	ldr	r2, [pc, #520]	; (8000a7c <printTemplate+0x2cc>)
 8000874:	2107      	movs	r1, #7
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fef6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800087c:	4a80      	ldr	r2, [pc, #512]	; (8000a80 <printTemplate+0x2d0>)
 800087e:	2101      	movs	r1, #1
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fef1 	bl	8000668 <lcd_print>
}
 8000886:	e0da      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d114      	bne.n	80008b8 <printTemplate+0x108>
			lcd_clear();
 800088e:	f7ff ff17 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000892:	2064      	movs	r0, #100	; 0x64
 8000894:	f008 fbf2 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000898:	4a77      	ldr	r2, [pc, #476]	; (8000a78 <printTemplate+0x2c8>)
 800089a:	2101      	movs	r1, #1
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fee3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008a2:	4a76      	ldr	r2, [pc, #472]	; (8000a7c <printTemplate+0x2cc>)
 80008a4:	2107      	movs	r1, #7
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fede 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008ac:	4a75      	ldr	r2, [pc, #468]	; (8000a84 <printTemplate+0x2d4>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fed9 	bl	8000668 <lcd_print>
}
 80008b6:	e0c2      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d114      	bne.n	80008e8 <printTemplate+0x138>
			lcd_clear();
 80008be:	f7ff feff 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f008 fbda 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008c8:	4a6b      	ldr	r2, [pc, #428]	; (8000a78 <printTemplate+0x2c8>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fecb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008d2:	4a6a      	ldr	r2, [pc, #424]	; (8000a7c <printTemplate+0x2cc>)
 80008d4:	2107      	movs	r1, #7
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fec6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80008dc:	4a6a      	ldr	r2, [pc, #424]	; (8000a88 <printTemplate+0x2d8>)
 80008de:	2101      	movs	r1, #1
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fec1 	bl	8000668 <lcd_print>
}
 80008e6:	e0aa      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d114      	bne.n	8000918 <printTemplate+0x168>
			lcd_clear();
 80008ee:	f7ff fee7 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f008 fbc2 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008f8:	4a5f      	ldr	r2, [pc, #380]	; (8000a78 <printTemplate+0x2c8>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff feb3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000902:	4a5e      	ldr	r2, [pc, #376]	; (8000a7c <printTemplate+0x2cc>)
 8000904:	2107      	movs	r1, #7
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff feae 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800090c:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <printTemplate+0x2dc>)
 800090e:	2101      	movs	r1, #1
 8000910:	2002      	movs	r0, #2
 8000912:	f7ff fea9 	bl	8000668 <lcd_print>
}
 8000916:	e092      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b05      	cmp	r3, #5
 800091c:	f040 808f 	bne.w	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000920:	f7ff fece 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f008 fba9 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800092a:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <printTemplate+0x2c8>)
 800092c:	2101      	movs	r1, #1
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fe9a 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <printTemplate+0x2cc>)
 8000936:	2107      	movs	r1, #7
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fe95 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800093e:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <printTemplate+0x2e0>)
 8000940:	2101      	movs	r1, #1
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff fe90 	bl	8000668 <lcd_print>
}
 8000948:	e079      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 3) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d176      	bne.n	8000a3e <printTemplate+0x28e>
		if(page == 1) {
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d114      	bne.n	8000980 <printTemplate+0x1d0>
			lcd_clear();
 8000956:	f7ff feb3 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f008 fb8e 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000960:	4a4c      	ldr	r2, [pc, #304]	; (8000a94 <printTemplate+0x2e4>)
 8000962:	2101      	movs	r1, #1
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fe7f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800096a:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <printTemplate+0x2e8>)
 800096c:	2107      	movs	r1, #7
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fe7a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000974:	4a42      	ldr	r2, [pc, #264]	; (8000a80 <printTemplate+0x2d0>)
 8000976:	2101      	movs	r1, #1
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fe75 	bl	8000668 <lcd_print>
}
 800097e:	e05e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d114      	bne.n	80009b0 <printTemplate+0x200>
			lcd_clear();
 8000986:	f7ff fe9b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f008 fb76 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000990:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <printTemplate+0x2e4>)
 8000992:	2101      	movs	r1, #1
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fe67 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800099a:	4a3f      	ldr	r2, [pc, #252]	; (8000a98 <printTemplate+0x2e8>)
 800099c:	2107      	movs	r1, #7
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe62 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80009a4:	4a37      	ldr	r2, [pc, #220]	; (8000a84 <printTemplate+0x2d4>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fe5d 	bl	8000668 <lcd_print>
}
 80009ae:	e046      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d114      	bne.n	80009e0 <printTemplate+0x230>
			lcd_clear();
 80009b6:	f7ff fe83 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f008 fb5e 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <printTemplate+0x2e4>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fe4f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <printTemplate+0x2e8>)
 80009cc:	2107      	movs	r1, #7
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fe4a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80009d4:	4a2c      	ldr	r2, [pc, #176]	; (8000a88 <printTemplate+0x2d8>)
 80009d6:	2101      	movs	r1, #1
 80009d8:	2002      	movs	r0, #2
 80009da:	f7ff fe45 	bl	8000668 <lcd_print>
}
 80009de:	e02e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d114      	bne.n	8000a10 <printTemplate+0x260>
			lcd_clear();
 80009e6:	f7ff fe6b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f008 fb46 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <printTemplate+0x2e4>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe37 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009fa:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <printTemplate+0x2e8>)
 80009fc:	2107      	movs	r1, #7
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fe32 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <printTemplate+0x2dc>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fe2d 	bl	8000668 <lcd_print>
}
 8000a0e:	e016      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d113      	bne.n	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000a16:	f7ff fe53 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f008 fb2e 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <printTemplate+0x2e4>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fe1f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <printTemplate+0x2e8>)
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fe1a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000a34:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <printTemplate+0x2e0>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f7ff fe15 	bl	8000668 <lcd_print>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	0800d830 	.word	0x0800d830
 8000a4c:	0800d838 	.word	0x0800d838
 8000a50:	0800d83c 	.word	0x0800d83c
 8000a54:	0800d840 	.word	0x0800d840
 8000a58:	0800d844 	.word	0x0800d844
 8000a5c:	0800d848 	.word	0x0800d848
 8000a60:	0800d84c 	.word	0x0800d84c
 8000a64:	0800d850 	.word	0x0800d850
 8000a68:	0800d854 	.word	0x0800d854
 8000a6c:	0800d858 	.word	0x0800d858
 8000a70:	0800d85c 	.word	0x0800d85c
 8000a74:	20000bf4 	.word	0x20000bf4
 8000a78:	0800d860 	.word	0x0800d860
 8000a7c:	20000c00 	.word	0x20000c00
 8000a80:	0800d868 	.word	0x0800d868
 8000a84:	0800d87c 	.word	0x0800d87c
 8000a88:	0800d890 	.word	0x0800d890
 8000a8c:	0800d8a4 	.word	0x0800d8a4
 8000a90:	0800d8b8 	.word	0x0800d8b8
 8000a94:	0800d8cc 	.word	0x0800d8cc
 8000a98:	20000c24 	.word	0x20000c24

08000a9c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <getCharFromCursorPosition+0x1c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000960 	.word	0x20000960

08000abc <getNumbersFromCursorPosition>:

char getNumbersFromCursorPosition(int cursorPosition) {
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	return numbersArray[cursorPosition];
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <getNumbersFromCursorPosition+0x1c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	781b      	ldrb	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200009b4 	.word	0x200009b4

08000adc <takeMachineID>:

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	lcd_cursor(1);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fe1c 	bl	8000724 <lcd_cursor>

	if(state == 0) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d104      	bne.n	8000afc <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 8000af2:	220c      	movs	r2, #12
 8000af4:	2100      	movs	r1, #0
 8000af6:	4880      	ldr	r0, [pc, #512]	; (8000cf8 <takeMachineID+0x21c>)
 8000af8:	f00c f9d4 	bl	800cea4 <memset>
	}

    int cursorPosition = 3;
 8000afc:	2303      	movs	r3, #3
 8000afe:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000b04:	2305      	movs	r3, #5
 8000b06:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff fe50 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000b10:	2108      	movs	r1, #8
 8000b12:	487a      	ldr	r0, [pc, #488]	; (8000cfc <takeMachineID+0x220>)
 8000b14:	f009 f882 	bl	8009c1c <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d103      	bne.n	8000b26 <takeMachineID+0x4a>
        	lcd_cursor(0);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f7ff fe00 	bl	8000724 <lcd_cursor>

            break;
 8000b24:	e0e4      	b.n	8000cf0 <takeMachineID+0x214>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000b26:	2101      	movs	r1, #1
 8000b28:	4874      	ldr	r0, [pc, #464]	; (8000cfc <takeMachineID+0x220>)
 8000b2a:	f009 f877 	bl	8009c1c <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d112      	bne.n	8000b5a <takeMachineID+0x7e>
        	if(cursorPosition == 7) {
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d102      	bne.n	8000b40 <takeMachineID+0x64>
        		cursorPosition = 10;
 8000b3a:	230a      	movs	r3, #10
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e008      	b.n	8000b52 <takeMachineID+0x76>
        	} else if (cursorPosition == 14) {
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2b0e      	cmp	r3, #14
 8000b44:	d102      	bne.n	8000b4c <takeMachineID+0x70>
                cursorPosition = 3;
 8000b46:	2303      	movs	r3, #3
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e002      	b.n	8000b52 <takeMachineID+0x76>
            } else {
            	cursorPosition++;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000b52:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000b56:	f008 fa91 	bl	800907c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000b5a:	2108      	movs	r1, #8
 8000b5c:	4868      	ldr	r0, [pc, #416]	; (8000d00 <takeMachineID+0x224>)
 8000b5e:	f009 f85d 	bl	8009c1c <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d112      	bne.n	8000b8e <takeMachineID+0xb2>
            if (cursorPosition == 3) {
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d102      	bne.n	8000b74 <takeMachineID+0x98>
                cursorPosition = 14;
 8000b6e:	230e      	movs	r3, #14
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e008      	b.n	8000b86 <takeMachineID+0xaa>
            } else if(cursorPosition == 10) {
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	2b0a      	cmp	r3, #10
 8000b78:	d102      	bne.n	8000b80 <takeMachineID+0xa4>
            	cursorPosition = 7;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e002      	b.n	8000b86 <takeMachineID+0xaa>
            } else {
            	cursorPosition--;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000b86:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000b8a:	f008 fa77 	bl	800907c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000b8e:	2102      	movs	r1, #2
 8000b90:	485a      	ldr	r0, [pc, #360]	; (8000cfc <takeMachineID+0x220>)
 8000b92:	f009 f843 	bl	8009c1c <HAL_GPIO_ReadPin>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d16c      	bne.n	8000c76 <takeMachineID+0x19a>
        	if(cursorPosition == 3) {
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	d105      	bne.n	8000bae <takeMachineID+0xd2>
        		machineID[machineIDLoc] = '0';
 8000ba2:	4a55      	ldr	r2, [pc, #340]	; (8000cf8 <takeMachineID+0x21c>)
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	2230      	movs	r2, #48	; 0x30
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e04f      	b.n	8000c4e <takeMachineID+0x172>
        	} else if(cursorPosition == 4) {
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d105      	bne.n	8000bc0 <takeMachineID+0xe4>
        		machineID[machineIDLoc] = '1';
 8000bb4:	4a50      	ldr	r2, [pc, #320]	; (8000cf8 <takeMachineID+0x21c>)
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	4413      	add	r3, r2
 8000bba:	2231      	movs	r2, #49	; 0x31
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e046      	b.n	8000c4e <takeMachineID+0x172>
        	} else if(cursorPosition == 5) {
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	d105      	bne.n	8000bd2 <takeMachineID+0xf6>
        		machineID[machineIDLoc] = '2';
 8000bc6:	4a4c      	ldr	r2, [pc, #304]	; (8000cf8 <takeMachineID+0x21c>)
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4413      	add	r3, r2
 8000bcc:	2232      	movs	r2, #50	; 0x32
 8000bce:	701a      	strb	r2, [r3, #0]
 8000bd0:	e03d      	b.n	8000c4e <takeMachineID+0x172>
        	} else if(cursorPosition == 6) {
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	2b06      	cmp	r3, #6
 8000bd6:	d105      	bne.n	8000be4 <takeMachineID+0x108>
        		machineID[machineIDLoc] = '3';
 8000bd8:	4a47      	ldr	r2, [pc, #284]	; (8000cf8 <takeMachineID+0x21c>)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4413      	add	r3, r2
 8000bde:	2233      	movs	r2, #51	; 0x33
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e034      	b.n	8000c4e <takeMachineID+0x172>
        	} else if(cursorPosition == 7) {
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2b07      	cmp	r3, #7
 8000be8:	d105      	bne.n	8000bf6 <takeMachineID+0x11a>
        		machineID[machineIDLoc] = '4';
 8000bea:	4a43      	ldr	r2, [pc, #268]	; (8000cf8 <takeMachineID+0x21c>)
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4413      	add	r3, r2
 8000bf0:	2234      	movs	r2, #52	; 0x34
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e02b      	b.n	8000c4e <takeMachineID+0x172>
        	} else if(cursorPosition == 10) {
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2b0a      	cmp	r3, #10
 8000bfa:	d105      	bne.n	8000c08 <takeMachineID+0x12c>
        		machineID[machineIDLoc] = '5';
 8000bfc:	4a3e      	ldr	r2, [pc, #248]	; (8000cf8 <takeMachineID+0x21c>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4413      	add	r3, r2
 8000c02:	2235      	movs	r2, #53	; 0x35
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e022      	b.n	8000c4e <takeMachineID+0x172>
        	} else if(cursorPosition == 11) {
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	2b0b      	cmp	r3, #11
 8000c0c:	d105      	bne.n	8000c1a <takeMachineID+0x13e>
        		machineID[machineIDLoc] = '6';
 8000c0e:	4a3a      	ldr	r2, [pc, #232]	; (8000cf8 <takeMachineID+0x21c>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4413      	add	r3, r2
 8000c14:	2236      	movs	r2, #54	; 0x36
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e019      	b.n	8000c4e <takeMachineID+0x172>
        	} else if(cursorPosition == 12) {
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	2b0c      	cmp	r3, #12
 8000c1e:	d105      	bne.n	8000c2c <takeMachineID+0x150>
        		machineID[machineIDLoc] = '7';
 8000c20:	4a35      	ldr	r2, [pc, #212]	; (8000cf8 <takeMachineID+0x21c>)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4413      	add	r3, r2
 8000c26:	2237      	movs	r2, #55	; 0x37
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e010      	b.n	8000c4e <takeMachineID+0x172>
        	} else if(cursorPosition == 13) {
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	2b0d      	cmp	r3, #13
 8000c30:	d105      	bne.n	8000c3e <takeMachineID+0x162>
        		machineID[machineIDLoc] = '8';
 8000c32:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <takeMachineID+0x21c>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4413      	add	r3, r2
 8000c38:	2238      	movs	r2, #56	; 0x38
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e007      	b.n	8000c4e <takeMachineID+0x172>
        	} else if(cursorPosition == 14) {
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2b0e      	cmp	r3, #14
 8000c42:	d104      	bne.n	8000c4e <takeMachineID+0x172>
        		machineID[machineIDLoc] = '9';
 8000c44:	4a2c      	ldr	r2, [pc, #176]	; (8000cf8 <takeMachineID+0x21c>)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4413      	add	r3, r2
 8000c4a:	2239      	movs	r2, #57	; 0x39
 8000c4c:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	b2d9      	uxtb	r1, r3
 8000c52:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <takeMachineID+0x21c>)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4413      	add	r3, r2
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f7ff fd18 	bl	8000692 <lcd_print_char>

        	writeLoc++;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3301      	adds	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 8000c6e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c72:	f008 fa03 	bl	800907c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000c76:	2104      	movs	r1, #4
 8000c78:	4820      	ldr	r0, [pc, #128]	; (8000cfc <takeMachineID+0x220>)
 8000c7a:	f008 ffcf 	bl	8009c1c <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d12e      	bne.n	8000ce2 <takeMachineID+0x206>
            if(strlen(machineID) >= 1) {
 8000c84:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <takeMachineID+0x21c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d027      	beq.n	8000cdc <takeMachineID+0x200>

                machineID[machineIDLoc] = '\0';
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <takeMachineID+0x21c>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4413      	add	r3, r2
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fd17 	bl	80006d4 <lcd_delete_char>
                HAL_Delay(50);
 8000ca6:	2032      	movs	r0, #50	; 0x32
 8000ca8:	f008 f9e8 	bl	800907c <HAL_Delay>

                if(writeLoc > 5) {
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	dd03      	ble.n	8000cba <takeMachineID+0x1de>
                	writeLoc--;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e004      	b.n	8000cc4 <takeMachineID+0x1e8>
                } else if(writeLoc < 5) {
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	dc01      	bgt.n	8000cc4 <takeMachineID+0x1e8>
                	writeLoc = 5;
 8000cc0:	2305      	movs	r3, #5
 8000cc2:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd03      	ble.n	8000cd2 <takeMachineID+0x1f6>
                	machineIDLoc--;
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	e004      	b.n	8000cdc <takeMachineID+0x200>
                } else if(machineIDLoc < 0) {
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	da01      	bge.n	8000cdc <takeMachineID+0x200>
                	machineIDLoc = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 8000cdc:	20fa      	movs	r0, #250	; 0xfa
 8000cde:	f008 f9cd 	bl	800907c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff fc9e 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000cee:	e70f      	b.n	8000b10 <takeMachineID+0x34>
    }
}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000bf4 	.word	0x20000bf4
 8000cfc:	40010800 	.word	0x40010800
 8000d00:	40011000 	.word	0x40011000

08000d04 <takeWifiSSID>:

void takeWifiSSID(int state, I2C_HandleTypeDef *hi2c1) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff fd08 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d104      	bne.n	8000d24 <takeWifiSSID+0x20>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000d1a:	2221      	movs	r2, #33	; 0x21
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	489d      	ldr	r0, [pc, #628]	; (8000f94 <takeWifiSSID+0x290>)
 8000d20:	f00c f8c0 	bl	800cea4 <memset>
    }

    int realCharPos = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000d28:	4b9b      	ldr	r3, [pc, #620]	; (8000f98 <takeWifiSSID+0x294>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]
    page = 1;
 8000d2e:	4b9b      	ldr	r3, [pc, #620]	; (8000f9c <takeWifiSSID+0x298>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f7ff fd36 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d44:	2108      	movs	r1, #8
 8000d46:	4896      	ldr	r0, [pc, #600]	; (8000fa0 <takeWifiSSID+0x29c>)
 8000d48:	f008 ff68 	bl	8009c1c <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d103      	bne.n	8000d5a <takeWifiSSID+0x56>
            lcd_cursor(0);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fce6 	bl	8000724 <lcd_cursor>

            break;
 8000d58:	e142      	b.n	8000fe0 <takeWifiSSID+0x2dc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4890      	ldr	r0, [pc, #576]	; (8000fa0 <takeWifiSSID+0x29c>)
 8000d5e:	f008 ff5d 	bl	8009c1c <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d166      	bne.n	8000e36 <takeWifiSSID+0x132>
        	realCharPos++;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b50      	cmp	r3, #80	; 0x50
 8000d72:	dd01      	ble.n	8000d78 <takeWifiSSID+0x74>
        		realCharPos = 1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000d78:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <takeWifiSSID+0x294>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b10      	cmp	r3, #16
 8000d7e:	d152      	bne.n	8000e26 <takeWifiSSID+0x122>
            	if(page == 1) {
 8000d80:	4b86      	ldr	r3, [pc, #536]	; (8000f9c <takeWifiSSID+0x298>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d10c      	bne.n	8000da2 <takeWifiSSID+0x9e>
            		cursorPosition = 1;
 8000d88:	4b83      	ldr	r3, [pc, #524]	; (8000f98 <takeWifiSSID+0x294>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
            		page++;
 8000d8e:	4b83      	ldr	r3, [pc, #524]	; (8000f9c <takeWifiSSID+0x298>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3301      	adds	r3, #1
 8000d94:	4a81      	ldr	r2, [pc, #516]	; (8000f9c <takeWifiSSID+0x298>)
 8000d96:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000d98:	2102      	movs	r1, #2
 8000d9a:	2002      	movs	r0, #2
 8000d9c:	f7ff fd08 	bl	80007b0 <printTemplate>
 8000da0:	e046      	b.n	8000e30 <takeWifiSSID+0x12c>
            	} else if(page == 2) {
 8000da2:	4b7e      	ldr	r3, [pc, #504]	; (8000f9c <takeWifiSSID+0x298>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d10c      	bne.n	8000dc4 <takeWifiSSID+0xc0>
            		cursorPosition = 1;
 8000daa:	4b7b      	ldr	r3, [pc, #492]	; (8000f98 <takeWifiSSID+0x294>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
            		page++;
 8000db0:	4b7a      	ldr	r3, [pc, #488]	; (8000f9c <takeWifiSSID+0x298>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a79      	ldr	r2, [pc, #484]	; (8000f9c <takeWifiSSID+0x298>)
 8000db8:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000dba:	2103      	movs	r1, #3
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f7ff fcf7 	bl	80007b0 <printTemplate>
 8000dc2:	e035      	b.n	8000e30 <takeWifiSSID+0x12c>
            	} else if(page == 3) {
 8000dc4:	4b75      	ldr	r3, [pc, #468]	; (8000f9c <takeWifiSSID+0x298>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d10c      	bne.n	8000de6 <takeWifiSSID+0xe2>
            		cursorPosition = 1;
 8000dcc:	4b72      	ldr	r3, [pc, #456]	; (8000f98 <takeWifiSSID+0x294>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
            		page++;
 8000dd2:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <takeWifiSSID+0x298>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	4a70      	ldr	r2, [pc, #448]	; (8000f9c <takeWifiSSID+0x298>)
 8000dda:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000ddc:	2104      	movs	r1, #4
 8000dde:	2002      	movs	r0, #2
 8000de0:	f7ff fce6 	bl	80007b0 <printTemplate>
 8000de4:	e024      	b.n	8000e30 <takeWifiSSID+0x12c>
            	} else if(page == 4) {
 8000de6:	4b6d      	ldr	r3, [pc, #436]	; (8000f9c <takeWifiSSID+0x298>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d10c      	bne.n	8000e08 <takeWifiSSID+0x104>
            		cursorPosition = 1;
 8000dee:	4b6a      	ldr	r3, [pc, #424]	; (8000f98 <takeWifiSSID+0x294>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
            		page++;
 8000df4:	4b69      	ldr	r3, [pc, #420]	; (8000f9c <takeWifiSSID+0x298>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a68      	ldr	r2, [pc, #416]	; (8000f9c <takeWifiSSID+0x298>)
 8000dfc:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000dfe:	2105      	movs	r1, #5
 8000e00:	2002      	movs	r0, #2
 8000e02:	f7ff fcd5 	bl	80007b0 <printTemplate>
 8000e06:	e013      	b.n	8000e30 <takeWifiSSID+0x12c>
            	} else if(page == 5) {
 8000e08:	4b64      	ldr	r3, [pc, #400]	; (8000f9c <takeWifiSSID+0x298>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b05      	cmp	r3, #5
 8000e0e:	d10f      	bne.n	8000e30 <takeWifiSSID+0x12c>
            		cursorPosition = 1;
 8000e10:	4b61      	ldr	r3, [pc, #388]	; (8000f98 <takeWifiSSID+0x294>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000e16:	4b61      	ldr	r3, [pc, #388]	; (8000f9c <takeWifiSSID+0x298>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f7ff fcc6 	bl	80007b0 <printTemplate>
 8000e24:	e004      	b.n	8000e30 <takeWifiSSID+0x12c>
            	}
            } else {
            	cursorPosition++;
 8000e26:	4b5c      	ldr	r3, [pc, #368]	; (8000f98 <takeWifiSSID+0x294>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a5a      	ldr	r2, [pc, #360]	; (8000f98 <takeWifiSSID+0x294>)
 8000e2e:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000e30:	20fa      	movs	r0, #250	; 0xfa
 8000e32:	f008 f923 	bl	800907c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000e36:	2108      	movs	r1, #8
 8000e38:	485a      	ldr	r0, [pc, #360]	; (8000fa4 <takeWifiSSID+0x2a0>)
 8000e3a:	f008 feef 	bl	8009c1c <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d15e      	bne.n	8000f02 <takeWifiSSID+0x1fe>
        	realCharPos--;
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dc01      	bgt.n	8000e54 <takeWifiSSID+0x150>
        		realCharPos = 80;
 8000e50:	2350      	movs	r3, #80	; 0x50
 8000e52:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000e54:	4b50      	ldr	r3, [pc, #320]	; (8000f98 <takeWifiSSID+0x294>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d14a      	bne.n	8000ef2 <takeWifiSSID+0x1ee>
            	if(page == 1) {
 8000e5c:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <takeWifiSSID+0x298>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10a      	bne.n	8000e7a <takeWifiSSID+0x176>
            		cursorPosition = 16;
 8000e64:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <takeWifiSSID+0x294>)
 8000e66:	2210      	movs	r2, #16
 8000e68:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000e6a:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <takeWifiSSID+0x298>)
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000e70:	2105      	movs	r1, #5
 8000e72:	2002      	movs	r0, #2
 8000e74:	f7ff fc9c 	bl	80007b0 <printTemplate>
 8000e78:	e040      	b.n	8000efc <takeWifiSSID+0x1f8>
            	} else if(page == 2) {
 8000e7a:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <takeWifiSSID+0x298>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d10a      	bne.n	8000e98 <takeWifiSSID+0x194>
            		cursorPosition = 16;
 8000e82:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <takeWifiSSID+0x294>)
 8000e84:	2210      	movs	r2, #16
 8000e86:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000e88:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <takeWifiSSID+0x298>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000e8e:	2101      	movs	r1, #1
 8000e90:	2002      	movs	r0, #2
 8000e92:	f7ff fc8d 	bl	80007b0 <printTemplate>
 8000e96:	e031      	b.n	8000efc <takeWifiSSID+0x1f8>
            	} else if(page == 3) {
 8000e98:	4b40      	ldr	r3, [pc, #256]	; (8000f9c <takeWifiSSID+0x298>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d10a      	bne.n	8000eb6 <takeWifiSSID+0x1b2>
            		cursorPosition = 16;
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <takeWifiSSID+0x294>)
 8000ea2:	2210      	movs	r2, #16
 8000ea4:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <takeWifiSSID+0x298>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000eac:	2102      	movs	r1, #2
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f7ff fc7e 	bl	80007b0 <printTemplate>
 8000eb4:	e022      	b.n	8000efc <takeWifiSSID+0x1f8>
            	} else if(page == 4) {
 8000eb6:	4b39      	ldr	r3, [pc, #228]	; (8000f9c <takeWifiSSID+0x298>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d10a      	bne.n	8000ed4 <takeWifiSSID+0x1d0>
            		cursorPosition = 16;
 8000ebe:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <takeWifiSSID+0x294>)
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000ec4:	4b35      	ldr	r3, [pc, #212]	; (8000f9c <takeWifiSSID+0x298>)
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000eca:	2103      	movs	r1, #3
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f7ff fc6f 	bl	80007b0 <printTemplate>
 8000ed2:	e013      	b.n	8000efc <takeWifiSSID+0x1f8>
            	} else if(page == 5) {
 8000ed4:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <takeWifiSSID+0x298>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d10f      	bne.n	8000efc <takeWifiSSID+0x1f8>
            		cursorPosition = 16;
 8000edc:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <takeWifiSSID+0x294>)
 8000ede:	2210      	movs	r2, #16
 8000ee0:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <takeWifiSSID+0x298>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000ee8:	2104      	movs	r1, #4
 8000eea:	2002      	movs	r0, #2
 8000eec:	f7ff fc60 	bl	80007b0 <printTemplate>
 8000ef0:	e004      	b.n	8000efc <takeWifiSSID+0x1f8>
            	}
            } else {
            	cursorPosition--;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <takeWifiSSID+0x294>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <takeWifiSSID+0x294>)
 8000efa:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000efc:	20fa      	movs	r0, #250	; 0xfa
 8000efe:	f008 f8bd 	bl	800907c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000f02:	2102      	movs	r1, #2
 8000f04:	4826      	ldr	r0, [pc, #152]	; (8000fa0 <takeWifiSSID+0x29c>)
 8000f06:	f008 fe89 	bl	8009c1c <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d11e      	bne.n	8000f4e <takeWifiSSID+0x24a>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fdc1 	bl	8000a9c <getCharFromCursorPosition>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <takeWifiSSID+0x290>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4413      	add	r3, r2
 8000f24:	460a      	mov	r2, r1
 8000f26:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	b2d9      	uxtb	r1, r3
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <takeWifiSSID+0x290>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff fbab 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	3301      	adds	r3, #1
 8000f46:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8000f48:	20fa      	movs	r0, #250	; 0xfa
 8000f4a:	f008 f897 	bl	800907c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4813      	ldr	r0, [pc, #76]	; (8000fa0 <takeWifiSSID+0x29c>)
 8000f52:	f008 fe63 	bl	8009c1c <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d139      	bne.n	8000fd0 <takeWifiSSID+0x2cc>
        	if(strlen(wifiSSID) >= 1) {
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <takeWifiSSID+0x290>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d032      	beq.n	8000fca <takeWifiSSID+0x2c6>
        		wifiSSID[wifiNameLoc] = '\0';
 8000f64:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <takeWifiSSID+0x290>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4413      	add	r3, r2
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3306      	adds	r3, #6
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f7ff fbab 	bl	80006d4 <lcd_delete_char>
        		HAL_Delay(50);
 8000f7e:	2032      	movs	r0, #50	; 0x32
 8000f80:	f008 f87c 	bl	800907c <HAL_Delay>
        		if(writeLoc > 7) {
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	dd0e      	ble.n	8000fa8 <takeWifiSSID+0x2a4>
        			writeLoc--;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	e00f      	b.n	8000fb2 <takeWifiSSID+0x2ae>
 8000f92:	bf00      	nop
 8000f94:	20000c00 	.word	0x20000c00
 8000f98:	20000944 	.word	0x20000944
 8000f9c:	20000948 	.word	0x20000948
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40011000 	.word	0x40011000
        		} else if(writeLoc < 7) {
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	dc01      	bgt.n	8000fb2 <takeWifiSSID+0x2ae>
        			writeLoc = 7;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd03      	ble.n	8000fc0 <takeWifiSSID+0x2bc>
        			wifiNameLoc--;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	e004      	b.n	8000fca <takeWifiSSID+0x2c6>
        		} else if(wifiNameLoc < 0) {
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	da01      	bge.n	8000fca <takeWifiSSID+0x2c6>
        			wifiNameLoc = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 8000fca:	20fa      	movs	r0, #250	; 0xfa
 8000fcc:	f008 f856 	bl	800907c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <takeWifiSSID+0x2e4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f7ff fb26 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000fde:	e6b1      	b.n	8000d44 <takeWifiSSID+0x40>
    }
}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000944 	.word	0x20000944

08000fec <takeWifiPass>:

void takeWifiPass(int state, I2C_HandleTypeDef *hi2c1) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff fb94 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d104      	bne.n	800100c <takeWifiPass+0x20>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001002:	2221      	movs	r2, #33	; 0x21
 8001004:	2100      	movs	r1, #0
 8001006:	489d      	ldr	r0, [pc, #628]	; (800127c <takeWifiPass+0x290>)
 8001008:	f00b ff4c 	bl	800cea4 <memset>
    }

    int realCharPos = 1;
 800100c:	2301      	movs	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8001010:	4b9b      	ldr	r3, [pc, #620]	; (8001280 <takeWifiPass+0x294>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]
    page = 1;
 8001016:	4b9b      	ldr	r3, [pc, #620]	; (8001284 <takeWifiPass+0x298>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8001020:	2307      	movs	r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 8001024:	2101      	movs	r1, #1
 8001026:	2003      	movs	r0, #3
 8001028:	f7ff fbc2 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800102c:	2108      	movs	r1, #8
 800102e:	4896      	ldr	r0, [pc, #600]	; (8001288 <takeWifiPass+0x29c>)
 8001030:	f008 fdf4 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d103      	bne.n	8001042 <takeWifiPass+0x56>
            lcd_cursor(0);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fb72 	bl	8000724 <lcd_cursor>

            break;
 8001040:	e142      	b.n	80012c8 <takeWifiPass+0x2dc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001042:	2101      	movs	r1, #1
 8001044:	4890      	ldr	r0, [pc, #576]	; (8001288 <takeWifiPass+0x29c>)
 8001046:	f008 fde9 	bl	8009c1c <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d166      	bne.n	800111e <takeWifiPass+0x132>
        	realCharPos++;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3301      	adds	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b50      	cmp	r3, #80	; 0x50
 800105a:	dd01      	ble.n	8001060 <takeWifiPass+0x74>
        	    realCharPos = 1;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8001060:	4b87      	ldr	r3, [pc, #540]	; (8001280 <takeWifiPass+0x294>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b10      	cmp	r3, #16
 8001066:	d152      	bne.n	800110e <takeWifiPass+0x122>
            	if(page == 1) {
 8001068:	4b86      	ldr	r3, [pc, #536]	; (8001284 <takeWifiPass+0x298>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d10c      	bne.n	800108a <takeWifiPass+0x9e>
            		cursorPosition = 1;
 8001070:	4b83      	ldr	r3, [pc, #524]	; (8001280 <takeWifiPass+0x294>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
            		page++;
 8001076:	4b83      	ldr	r3, [pc, #524]	; (8001284 <takeWifiPass+0x298>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	4a81      	ldr	r2, [pc, #516]	; (8001284 <takeWifiPass+0x298>)
 800107e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001080:	2102      	movs	r1, #2
 8001082:	2003      	movs	r0, #3
 8001084:	f7ff fb94 	bl	80007b0 <printTemplate>
 8001088:	e046      	b.n	8001118 <takeWifiPass+0x12c>
            	} else if(page == 2) {
 800108a:	4b7e      	ldr	r3, [pc, #504]	; (8001284 <takeWifiPass+0x298>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d10c      	bne.n	80010ac <takeWifiPass+0xc0>
            		cursorPosition = 1;
 8001092:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <takeWifiPass+0x294>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
            		page++;
 8001098:	4b7a      	ldr	r3, [pc, #488]	; (8001284 <takeWifiPass+0x298>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a79      	ldr	r2, [pc, #484]	; (8001284 <takeWifiPass+0x298>)
 80010a0:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80010a2:	2103      	movs	r1, #3
 80010a4:	2003      	movs	r0, #3
 80010a6:	f7ff fb83 	bl	80007b0 <printTemplate>
 80010aa:	e035      	b.n	8001118 <takeWifiPass+0x12c>
            	} else if(page == 3) {
 80010ac:	4b75      	ldr	r3, [pc, #468]	; (8001284 <takeWifiPass+0x298>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d10c      	bne.n	80010ce <takeWifiPass+0xe2>
            		cursorPosition = 1;
 80010b4:	4b72      	ldr	r3, [pc, #456]	; (8001280 <takeWifiPass+0x294>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]
            		page++;
 80010ba:	4b72      	ldr	r3, [pc, #456]	; (8001284 <takeWifiPass+0x298>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a70      	ldr	r2, [pc, #448]	; (8001284 <takeWifiPass+0x298>)
 80010c2:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80010c4:	2104      	movs	r1, #4
 80010c6:	2003      	movs	r0, #3
 80010c8:	f7ff fb72 	bl	80007b0 <printTemplate>
 80010cc:	e024      	b.n	8001118 <takeWifiPass+0x12c>
            	} else if(page == 4) {
 80010ce:	4b6d      	ldr	r3, [pc, #436]	; (8001284 <takeWifiPass+0x298>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d10c      	bne.n	80010f0 <takeWifiPass+0x104>
            		cursorPosition = 1;
 80010d6:	4b6a      	ldr	r3, [pc, #424]	; (8001280 <takeWifiPass+0x294>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
            		page++;
 80010dc:	4b69      	ldr	r3, [pc, #420]	; (8001284 <takeWifiPass+0x298>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4a68      	ldr	r2, [pc, #416]	; (8001284 <takeWifiPass+0x298>)
 80010e4:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80010e6:	2105      	movs	r1, #5
 80010e8:	2003      	movs	r0, #3
 80010ea:	f7ff fb61 	bl	80007b0 <printTemplate>
 80010ee:	e013      	b.n	8001118 <takeWifiPass+0x12c>
            	} else if(page == 5) {
 80010f0:	4b64      	ldr	r3, [pc, #400]	; (8001284 <takeWifiPass+0x298>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d10f      	bne.n	8001118 <takeWifiPass+0x12c>
            		cursorPosition = 1;
 80010f8:	4b61      	ldr	r3, [pc, #388]	; (8001280 <takeWifiPass+0x294>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
            		page = 1;
 80010fe:	4b61      	ldr	r3, [pc, #388]	; (8001284 <takeWifiPass+0x298>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001104:	2101      	movs	r1, #1
 8001106:	2003      	movs	r0, #3
 8001108:	f7ff fb52 	bl	80007b0 <printTemplate>
 800110c:	e004      	b.n	8001118 <takeWifiPass+0x12c>
            	}
            } else {
            	cursorPosition++;
 800110e:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <takeWifiPass+0x294>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	4a5a      	ldr	r2, [pc, #360]	; (8001280 <takeWifiPass+0x294>)
 8001116:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001118:	20fa      	movs	r0, #250	; 0xfa
 800111a:	f007 ffaf 	bl	800907c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800111e:	2108      	movs	r1, #8
 8001120:	485a      	ldr	r0, [pc, #360]	; (800128c <takeWifiPass+0x2a0>)
 8001122:	f008 fd7b 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d15e      	bne.n	80011ea <takeWifiPass+0x1fe>
        	realCharPos--;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	3b01      	subs	r3, #1
 8001130:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b00      	cmp	r3, #0
 8001136:	dc01      	bgt.n	800113c <takeWifiPass+0x150>
        	    realCharPos = 80;
 8001138:	2350      	movs	r3, #80	; 0x50
 800113a:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800113c:	4b50      	ldr	r3, [pc, #320]	; (8001280 <takeWifiPass+0x294>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d14a      	bne.n	80011da <takeWifiPass+0x1ee>
            	if(page == 1) {
 8001144:	4b4f      	ldr	r3, [pc, #316]	; (8001284 <takeWifiPass+0x298>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10a      	bne.n	8001162 <takeWifiPass+0x176>
            		cursorPosition = 16;
 800114c:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <takeWifiPass+0x294>)
 800114e:	2210      	movs	r2, #16
 8001150:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <takeWifiPass+0x298>)
 8001154:	2205      	movs	r2, #5
 8001156:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8001158:	2105      	movs	r1, #5
 800115a:	2003      	movs	r0, #3
 800115c:	f7ff fb28 	bl	80007b0 <printTemplate>
 8001160:	e040      	b.n	80011e4 <takeWifiPass+0x1f8>
            	} else if(page == 2) {
 8001162:	4b48      	ldr	r3, [pc, #288]	; (8001284 <takeWifiPass+0x298>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d10a      	bne.n	8001180 <takeWifiPass+0x194>
            		cursorPosition = 16;
 800116a:	4b45      	ldr	r3, [pc, #276]	; (8001280 <takeWifiPass+0x294>)
 800116c:	2210      	movs	r2, #16
 800116e:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001170:	4b44      	ldr	r3, [pc, #272]	; (8001284 <takeWifiPass+0x298>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001176:	2101      	movs	r1, #1
 8001178:	2003      	movs	r0, #3
 800117a:	f7ff fb19 	bl	80007b0 <printTemplate>
 800117e:	e031      	b.n	80011e4 <takeWifiPass+0x1f8>
            	} else if(page == 3) {
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <takeWifiPass+0x298>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d10a      	bne.n	800119e <takeWifiPass+0x1b2>
            		cursorPosition = 16;
 8001188:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <takeWifiPass+0x294>)
 800118a:	2210      	movs	r2, #16
 800118c:	601a      	str	r2, [r3, #0]
            		page = 2;
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <takeWifiPass+0x298>)
 8001190:	2202      	movs	r2, #2
 8001192:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001194:	2102      	movs	r1, #2
 8001196:	2003      	movs	r0, #3
 8001198:	f7ff fb0a 	bl	80007b0 <printTemplate>
 800119c:	e022      	b.n	80011e4 <takeWifiPass+0x1f8>
            	} else if(page == 4) {
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <takeWifiPass+0x298>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d10a      	bne.n	80011bc <takeWifiPass+0x1d0>
            		cursorPosition = 16;
 80011a6:	4b36      	ldr	r3, [pc, #216]	; (8001280 <takeWifiPass+0x294>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	601a      	str	r2, [r3, #0]
            		page = 3;
 80011ac:	4b35      	ldr	r3, [pc, #212]	; (8001284 <takeWifiPass+0x298>)
 80011ae:	2203      	movs	r2, #3
 80011b0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80011b2:	2103      	movs	r1, #3
 80011b4:	2003      	movs	r0, #3
 80011b6:	f7ff fafb 	bl	80007b0 <printTemplate>
 80011ba:	e013      	b.n	80011e4 <takeWifiPass+0x1f8>
            	} else if(page == 5) {
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <takeWifiPass+0x298>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d10f      	bne.n	80011e4 <takeWifiPass+0x1f8>
            		cursorPosition = 16;
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <takeWifiPass+0x294>)
 80011c6:	2210      	movs	r2, #16
 80011c8:	601a      	str	r2, [r3, #0]
            		page = 4;
 80011ca:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <takeWifiPass+0x298>)
 80011cc:	2204      	movs	r2, #4
 80011ce:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80011d0:	2104      	movs	r1, #4
 80011d2:	2003      	movs	r0, #3
 80011d4:	f7ff faec 	bl	80007b0 <printTemplate>
 80011d8:	e004      	b.n	80011e4 <takeWifiPass+0x1f8>
            	}
            } else {
            	cursorPosition--;
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <takeWifiPass+0x294>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3b01      	subs	r3, #1
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <takeWifiPass+0x294>)
 80011e2:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80011e4:	20fa      	movs	r0, #250	; 0xfa
 80011e6:	f007 ff49 	bl	800907c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80011ea:	2102      	movs	r1, #2
 80011ec:	4826      	ldr	r0, [pc, #152]	; (8001288 <takeWifiPass+0x29c>)
 80011ee:	f008 fd15 	bl	8009c1c <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d11e      	bne.n	8001236 <takeWifiPass+0x24a>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fc4d 	bl	8000a9c <getCharFromCursorPosition>
 8001202:	4603      	mov	r3, r0
 8001204:	4619      	mov	r1, r3
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <takeWifiPass+0x290>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4413      	add	r3, r2
 800120c:	460a      	mov	r2, r1
 800120e:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	b2d9      	uxtb	r1, r3
 8001214:	4a19      	ldr	r2, [pc, #100]	; (800127c <takeWifiPass+0x290>)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	2001      	movs	r0, #1
 8001220:	f7ff fa37 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3301      	adds	r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	3301      	adds	r3, #1
 800122e:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001230:	20fa      	movs	r0, #250	; 0xfa
 8001232:	f007 ff23 	bl	800907c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001236:	2104      	movs	r1, #4
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <takeWifiPass+0x29c>)
 800123a:	f008 fcef 	bl	8009c1c <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b01      	cmp	r3, #1
 8001242:	d139      	bne.n	80012b8 <takeWifiPass+0x2cc>
            if(strlen(wifiPass) >= 1) {
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <takeWifiPass+0x290>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d032      	beq.n	80012b2 <takeWifiPass+0x2c6>
            	wifiPass[wifiPassLoc] = '\0';
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <takeWifiPass+0x290>)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4413      	add	r3, r2
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3306      	adds	r3, #6
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff fa37 	bl	80006d4 <lcd_delete_char>
            	HAL_Delay(50);
 8001266:	2032      	movs	r0, #50	; 0x32
 8001268:	f007 ff08 	bl	800907c <HAL_Delay>

            	if(writeLoc > 7) {
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b07      	cmp	r3, #7
 8001270:	dd0e      	ble.n	8001290 <takeWifiPass+0x2a4>
            		writeLoc--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3b01      	subs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	e00f      	b.n	800129a <takeWifiPass+0x2ae>
 800127a:	bf00      	nop
 800127c:	20000c24 	.word	0x20000c24
 8001280:	20000944 	.word	0x20000944
 8001284:	20000948 	.word	0x20000948
 8001288:	40010800 	.word	0x40010800
 800128c:	40011000 	.word	0x40011000
            	} else if(writeLoc < 7) {
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b06      	cmp	r3, #6
 8001294:	dc01      	bgt.n	800129a <takeWifiPass+0x2ae>
            		writeLoc = 7;
 8001296:	2307      	movs	r3, #7
 8001298:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	2b00      	cmp	r3, #0
 800129e:	dd03      	ble.n	80012a8 <takeWifiPass+0x2bc>
            		wifiPassLoc--;
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	e004      	b.n	80012b2 <takeWifiPass+0x2c6>
            	} else if(wifiPassLoc < 0) {
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	da01      	bge.n	80012b2 <takeWifiPass+0x2c6>
            		wifiPassLoc = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80012b2:	20fa      	movs	r0, #250	; 0xfa
 80012b4:	f007 fee2 	bl	800907c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <takeWifiPass+0x2e4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4619      	mov	r1, r3
 80012c0:	2002      	movs	r0, #2
 80012c2:	f7ff f9b2 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012c6:	e6b1      	b.n	800102c <takeWifiPass+0x40>
    }
}
 80012c8:	bf00      	nop
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000944 	.word	0x20000944

080012d4 <checkSlideVal>:

int checkSlideVal(int state) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d111      	bne.n	8001306 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012e2:	2101      	movs	r1, #1
 80012e4:	4813      	ldr	r0, [pc, #76]	; (8001334 <checkSlideVal+0x60>)
 80012e6:	f008 fc99 	bl	8009c1c <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <checkSlideVal+0x20>
			return 34;
 80012f0:	2322      	movs	r3, #34	; 0x22
 80012f2:	e01b      	b.n	800132c <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012f4:	2108      	movs	r1, #8
 80012f6:	4810      	ldr	r0, [pc, #64]	; (8001338 <checkSlideVal+0x64>)
 80012f8:	f008 fc90 	bl	8009c1c <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d113      	bne.n	800132a <checkSlideVal+0x56>
			return 32;
 8001302:	2320      	movs	r3, #32
 8001304:	e012      	b.n	800132c <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001306:	2101      	movs	r1, #1
 8001308:	480a      	ldr	r0, [pc, #40]	; (8001334 <checkSlideVal+0x60>)
 800130a:	f008 fc87 	bl	8009c1c <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <checkSlideVal+0x44>
			return 35;
 8001314:	2323      	movs	r3, #35	; 0x23
 8001316:	e009      	b.n	800132c <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001318:	2108      	movs	r1, #8
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <checkSlideVal+0x64>)
 800131c:	f008 fc7e 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001320:	4603      	mov	r3, r0
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <checkSlideVal+0x56>
			return 33;
 8001326:	2321      	movs	r3, #33	; 0x21
 8001328:	e000      	b.n	800132c <checkSlideVal+0x58>
		}
	}
	return 0;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40010800 	.word	0x40010800
 8001338:	40011000 	.word	0x40011000

0800133c <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7fe ff6a 	bl	8000224 <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001358:	e08a      	b.n	8001470 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800135a:	6838      	ldr	r0, [r7, #0]
 800135c:	f7ff ffba 	bl	80012d4 <checkSlideVal>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	dd07      	ble.n	8001376 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f7ff ffb4 	bl	80012d4 <checkSlideVal>
 800136c:	4603      	mov	r3, r0
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b44      	ldr	r3, [pc, #272]	; (8001484 <slideText+0x148>)
 8001372:	701a      	strb	r2, [r3, #0]
			break;
 8001374:	e081      	b.n	800147a <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
 800137a:	e075      	b.n	8001468 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f7ff ffa9 	bl	80012d4 <checkSlideVal>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	dd09      	ble.n	800139c <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001388:	6838      	ldr	r0, [r7, #0]
 800138a:	f7ff ffa3 	bl	80012d4 <checkSlideVal>
 800138e:	4603      	mov	r3, r0
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <slideText+0x148>)
 8001394:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800139a:	e069      	b.n	8001470 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	4413      	add	r3, r2
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	e029      	b.n	80013fa <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	f7ff ff94 	bl	80012d4 <checkSlideVal>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dd0b      	ble.n	80013ca <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	f7ff ff8e 	bl	80012d4 <checkSlideVal>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b31      	ldr	r3, [pc, #196]	; (8001484 <slideText+0x148>)
 80013be:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80013c8:	e01d      	b.n	8001406 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	b2d8      	uxtb	r0, r3
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	b2d9      	uxtb	r1, r3
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4413      	add	r3, r2
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	f7ff f952 	bl	8000692 <lcd_print_char>
				HAL_Delay(20);
 80013ee:	2014      	movs	r0, #20
 80013f0:	f007 fe44 	bl	800907c <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	3301      	adds	r3, #1
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	7dfa      	ldrb	r2, [r7, #23]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4413      	add	r3, r2
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	429a      	cmp	r2, r3
 8001404:	dbcf      	blt.n	80013a6 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	3b01      	subs	r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	e023      	b.n	8001456 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f7ff ff60 	bl	80012d4 <checkSlideVal>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	dd0b      	ble.n	8001432 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f7ff ff5a 	bl	80012d4 <checkSlideVal>
 8001420:	4603      	mov	r3, r0
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <slideText+0x148>)
 8001426:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001430:	e017      	b.n	8001462 <slideText+0x126>
				}
			     if(j >= startPos) {
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	429a      	cmp	r2, r3
 8001438:	db0a      	blt.n	8001450 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	b2d1      	uxtb	r1, r2
 8001442:	2220      	movs	r2, #32
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f924 	bl	8000692 <lcd_print_char>
			    	 HAL_Delay(20);
 800144a:	2014      	movs	r0, #20
 800144c:	f007 fe16 	bl	800907c <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	3b01      	subs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	7dfa      	ldrb	r2, [r7, #23]
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	429a      	cmp	r2, r3
 8001460:	dad5      	bge.n	800140e <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	3301      	adds	r3, #1
 8001466:	623b      	str	r3, [r7, #32]
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	6a3a      	ldr	r2, [r7, #32]
 800146c:	429a      	cmp	r2, r3
 800146e:	db85      	blt.n	800137c <slideText+0x40>
	while(mainLoopVal == 1) {
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	2b01      	cmp	r3, #1
 8001474:	f43f af71 	beq.w	800135a <slideText+0x1e>
			     }
			}
		}
	}
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000c49 	.word	0x20000c49

08001488 <menu>:

void menu(I2C_HandleTypeDef *hi2c1) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001490:	2101      	movs	r1, #1
 8001492:	488f      	ldr	r0, [pc, #572]	; (80016d0 <menu+0x248>)
 8001494:	f008 fbc2 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	f040 808e 	bne.w	80015bc <menu+0x134>
 80014a0:	4b8c      	ldr	r3, [pc, #560]	; (80016d4 <menu+0x24c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f083 0301 	eor.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8086 	beq.w	80015bc <menu+0x134>
		menuSayac = menuSayac+1;
 80014b0:	4b89      	ldr	r3, [pc, #548]	; (80016d8 <menu+0x250>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b87      	ldr	r3, [pc, #540]	; (80016d8 <menu+0x250>)
 80014ba:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80014bc:	4b86      	ldr	r3, [pc, #536]	; (80016d8 <menu+0x250>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b24      	cmp	r3, #36	; 0x24
 80014c2:	d102      	bne.n	80014ca <menu+0x42>
			menuSayac = 1;
 80014c4:	4b84      	ldr	r3, [pc, #528]	; (80016d8 <menu+0x250>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80014ca:	4b83      	ldr	r3, [pc, #524]	; (80016d8 <menu+0x250>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b12      	cmp	r3, #18
 80014d0:	d106      	bne.n	80014e0 <menu+0x58>
 80014d2:	4b82      	ldr	r3, [pc, #520]	; (80016dc <menu+0x254>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <menu+0x58>
			menuSayac = 21;
 80014da:	4b7f      	ldr	r3, [pc, #508]	; (80016d8 <menu+0x250>)
 80014dc:	2215      	movs	r2, #21
 80014de:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80014e0:	4b7d      	ldr	r3, [pc, #500]	; (80016d8 <menu+0x250>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d106      	bne.n	80014f6 <menu+0x6e>
 80014e8:	4b7d      	ldr	r3, [pc, #500]	; (80016e0 <menu+0x258>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <menu+0x6e>
			menuSayac = 16;
 80014f0:	4b79      	ldr	r3, [pc, #484]	; (80016d8 <menu+0x250>)
 80014f2:	2210      	movs	r2, #16
 80014f4:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80014f6:	4b78      	ldr	r3, [pc, #480]	; (80016d8 <menu+0x250>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b0d      	cmp	r3, #13
 80014fc:	d106      	bne.n	800150c <menu+0x84>
 80014fe:	4b78      	ldr	r3, [pc, #480]	; (80016e0 <menu+0x258>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d102      	bne.n	800150c <menu+0x84>
			menuSayac = 16;
 8001506:	4b74      	ldr	r3, [pc, #464]	; (80016d8 <menu+0x250>)
 8001508:	2210      	movs	r2, #16
 800150a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800150c:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <menu+0x250>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b09      	cmp	r3, #9
 8001512:	d106      	bne.n	8001522 <menu+0x9a>
 8001514:	4b72      	ldr	r3, [pc, #456]	; (80016e0 <menu+0x258>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d102      	bne.n	8001522 <menu+0x9a>
			menuSayac = 13;
 800151c:	4b6e      	ldr	r3, [pc, #440]	; (80016d8 <menu+0x250>)
 800151e:	220d      	movs	r2, #13
 8001520:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001522:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <menu+0x250>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d10a      	bne.n	8001540 <menu+0xb8>
 800152a:	4b6e      	ldr	r3, [pc, #440]	; (80016e4 <menu+0x25c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d003      	beq.n	800153a <menu+0xb2>
 8001532:	4b6c      	ldr	r3, [pc, #432]	; (80016e4 <menu+0x25c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d102      	bne.n	8001540 <menu+0xb8>
			menuSayac = 11;
 800153a:	4b67      	ldr	r3, [pc, #412]	; (80016d8 <menu+0x250>)
 800153c:	220b      	movs	r2, #11
 800153e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001540:	4b65      	ldr	r3, [pc, #404]	; (80016d8 <menu+0x250>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d10e      	bne.n	8001566 <menu+0xde>
 8001548:	4b67      	ldr	r3, [pc, #412]	; (80016e8 <menu+0x260>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d003      	beq.n	8001558 <menu+0xd0>
 8001550:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <menu+0x260>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d106      	bne.n	8001566 <menu+0xde>
 8001558:	4b61      	ldr	r3, [pc, #388]	; (80016e0 <menu+0x258>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d102      	bne.n	8001566 <menu+0xde>
			menuSayac = 16;
 8001560:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <menu+0x250>)
 8001562:	2210      	movs	r2, #16
 8001564:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <menu+0x250>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b0c      	cmp	r3, #12
 800156c:	d10e      	bne.n	800158c <menu+0x104>
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <menu+0x260>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d003      	beq.n	800157e <menu+0xf6>
 8001576:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <menu+0x260>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d106      	bne.n	800158c <menu+0x104>
 800157e:	4b58      	ldr	r3, [pc, #352]	; (80016e0 <menu+0x258>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b03      	cmp	r3, #3
 8001584:	d102      	bne.n	800158c <menu+0x104>
			menuSayac = 13;
 8001586:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <menu+0x250>)
 8001588:	220d      	movs	r2, #13
 800158a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800158c:	4b52      	ldr	r3, [pc, #328]	; (80016d8 <menu+0x250>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d106      	bne.n	80015a2 <menu+0x11a>
 8001594:	4b55      	ldr	r3, [pc, #340]	; (80016ec <menu+0x264>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d102      	bne.n	80015a2 <menu+0x11a>
			menuSayac = 16;
 800159c:	4b4e      	ldr	r3, [pc, #312]	; (80016d8 <menu+0x250>)
 800159e:	2210      	movs	r2, #16
 80015a0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80015a2:	4b4d      	ldr	r3, [pc, #308]	; (80016d8 <menu+0x250>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b18      	cmp	r3, #24
 80015a8:	d106      	bne.n	80015b8 <menu+0x130>
 80015aa:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <menu+0x254>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <menu+0x130>
			menuSayac = 26;
 80015b2:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <menu+0x250>)
 80015b4:	221a      	movs	r2, #26
 80015b6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015b8:	f004 fcf2 	bl	8005fa0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015bc:	2108      	movs	r1, #8
 80015be:	484c      	ldr	r0, [pc, #304]	; (80016f0 <menu+0x268>)
 80015c0:	f008 fb2c 	bl	8009c1c <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d175      	bne.n	80016b6 <menu+0x22e>
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <menu+0x24c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	f083 0301 	eor.w	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d06e      	beq.n	80016b6 <menu+0x22e>
		if (menuSayac <= 1) {
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <menu+0x250>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d802      	bhi.n	80015e6 <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80015e0:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <menu+0x250>)
 80015e2:	2224      	movs	r2, #36	; 0x24
 80015e4:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80015e6:	4b3c      	ldr	r3, [pc, #240]	; (80016d8 <menu+0x250>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <menu+0x250>)
 80015f0:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <menu+0x250>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b14      	cmp	r3, #20
 80015f8:	d106      	bne.n	8001608 <menu+0x180>
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <menu+0x254>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d102      	bne.n	8001608 <menu+0x180>
			menuSayac = 17;
 8001602:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <menu+0x250>)
 8001604:	2211      	movs	r2, #17
 8001606:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <menu+0x250>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d106      	bne.n	800161e <menu+0x196>
 8001610:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <menu+0x258>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <menu+0x196>
			menuSayac = 7;
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <menu+0x250>)
 800161a:	2207      	movs	r2, #7
 800161c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <menu+0x250>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	d106      	bne.n	8001634 <menu+0x1ac>
 8001626:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <menu+0x258>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d102      	bne.n	8001634 <menu+0x1ac>
			menuSayac = 12;
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <menu+0x250>)
 8001630:	220c      	movs	r2, #12
 8001632:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <menu+0x250>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d106      	bne.n	800164a <menu+0x1c2>
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <menu+0x258>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d102      	bne.n	800164a <menu+0x1c2>
			menuSayac = 8;
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <menu+0x250>)
 8001646:	2208      	movs	r2, #8
 8001648:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <menu+0x250>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b0a      	cmp	r3, #10
 8001650:	d10a      	bne.n	8001668 <menu+0x1e0>
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <menu+0x25c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d003      	beq.n	8001662 <menu+0x1da>
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <menu+0x25c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d102      	bne.n	8001668 <menu+0x1e0>
			menuSayac = 9;
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <menu+0x250>)
 8001664:	2209      	movs	r2, #9
 8001666:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <menu+0x250>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d10a      	bne.n	8001686 <menu+0x1fe>
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <menu+0x260>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d003      	beq.n	8001680 <menu+0x1f8>
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <menu+0x260>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d102      	bne.n	8001686 <menu+0x1fe>
			menuSayac = 11;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <menu+0x250>)
 8001682:	220b      	movs	r2, #11
 8001684:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <menu+0x250>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	d106      	bne.n	800169c <menu+0x214>
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <menu+0x264>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d102      	bne.n	800169c <menu+0x214>
			menuSayac = 14;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <menu+0x250>)
 8001698:	220e      	movs	r2, #14
 800169a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <menu+0x250>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b19      	cmp	r3, #25
 80016a2:	d106      	bne.n	80016b2 <menu+0x22a>
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <menu+0x254>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <menu+0x22a>
			menuSayac = 23;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <menu+0x250>)
 80016ae:	2217      	movs	r2, #23
 80016b0:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016b2:	f004 fc75 	bl	8005fa0 <bekle>
	}

	if (menuSayac == 0) {
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <menu+0x250>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d134      	bne.n	8001728 <menu+0x2a0>
		if(dilSecim == 0) {
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <menu+0x26c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d122      	bne.n	800170c <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80016c6:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <menu+0x270>)
 80016c8:	2101      	movs	r1, #1
 80016ca:	2001      	movs	r0, #1
 80016cc:	e016      	b.n	80016fc <menu+0x274>
 80016ce:	bf00      	nop
 80016d0:	40010800 	.word	0x40010800
 80016d4:	20000c78 	.word	0x20000c78
 80016d8:	20000c49 	.word	0x20000c49
 80016dc:	20000c58 	.word	0x20000c58
 80016e0:	20000c51 	.word	0x20000c51
 80016e4:	20000c52 	.word	0x20000c52
 80016e8:	20000c53 	.word	0x20000c53
 80016ec:	20000c54 	.word	0x20000c54
 80016f0:	40011000 	.word	0x40011000
 80016f4:	20000c6a 	.word	0x20000c6a
 80016f8:	0800d8d4 	.word	0x0800d8d4
 80016fc:	f7fe ffb4 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001700:	4a94      	ldr	r2, [pc, #592]	; (8001954 <menu+0x4cc>)
 8001702:	2101      	movs	r1, #1
 8001704:	2002      	movs	r0, #2
 8001706:	f7fe ffaf 	bl	8000668 <lcd_print>
 800170a:	e00d      	b.n	8001728 <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 800170c:	4b92      	ldr	r3, [pc, #584]	; (8001958 <menu+0x4d0>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d109      	bne.n	8001728 <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001714:	4a91      	ldr	r2, [pc, #580]	; (800195c <menu+0x4d4>)
 8001716:	2101      	movs	r1, #1
 8001718:	2001      	movs	r0, #1
 800171a:	f7fe ffa5 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800171e:	4a90      	ldr	r2, [pc, #576]	; (8001960 <menu+0x4d8>)
 8001720:	2101      	movs	r1, #1
 8001722:	2002      	movs	r0, #2
 8001724:	f7fe ffa0 	bl	8000668 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001728:	4b8e      	ldr	r3, [pc, #568]	; (8001964 <menu+0x4dc>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	f040 82b5 	bne.w	8001c9c <menu+0x814>
		if(dilSecim == 0) {
 8001732:	4b89      	ldr	r3, [pc, #548]	; (8001958 <menu+0x4d0>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d105      	bne.n	8001746 <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800173a:	4a8b      	ldr	r2, [pc, #556]	; (8001968 <menu+0x4e0>)
 800173c:	2101      	movs	r1, #1
 800173e:	2001      	movs	r0, #1
 8001740:	f7fe ff92 	bl	8000668 <lcd_print>
 8001744:	e008      	b.n	8001758 <menu+0x2d0>
		} else if(dilSecim == 1) {
 8001746:	4b84      	ldr	r3, [pc, #528]	; (8001958 <menu+0x4d0>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d104      	bne.n	8001758 <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800174e:	4a87      	ldr	r2, [pc, #540]	; (800196c <menu+0x4e4>)
 8001750:	2101      	movs	r1, #1
 8001752:	2001      	movs	r0, #1
 8001754:	f7fe ff88 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001758:	4b85      	ldr	r3, [pc, #532]	; (8001970 <menu+0x4e8>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d123      	bne.n	80017a8 <menu+0x320>
			if(dilSecim == 0) {
 8001760:	4b7d      	ldr	r3, [pc, #500]	; (8001958 <menu+0x4d0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001768:	4a82      	ldr	r2, [pc, #520]	; (8001974 <menu+0x4ec>)
 800176a:	2101      	movs	r1, #1
 800176c:	2002      	movs	r0, #2
 800176e:	f7fe ff7b 	bl	8000668 <lcd_print>
 8001772:	e008      	b.n	8001786 <menu+0x2fe>

			} else if(dilSecim == 1) {
 8001774:	4b78      	ldr	r3, [pc, #480]	; (8001958 <menu+0x4d0>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d104      	bne.n	8001786 <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 800177c:	4a7e      	ldr	r2, [pc, #504]	; (8001978 <menu+0x4f0>)
 800177e:	2101      	movs	r1, #1
 8001780:	2002      	movs	r0, #2
 8001782:	f7fe ff71 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001786:	4a7d      	ldr	r2, [pc, #500]	; (800197c <menu+0x4f4>)
 8001788:	210f      	movs	r1, #15
 800178a:	2002      	movs	r0, #2
 800178c:	f7fe ff6c 	bl	8000668 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001790:	4b7b      	ldr	r3, [pc, #492]	; (8001980 <menu+0x4f8>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	220a      	movs	r2, #10
 8001796:	497b      	ldr	r1, [pc, #492]	; (8001984 <menu+0x4fc>)
 8001798:	4618      	mov	r0, r3
 800179a:	f00b fa6b 	bl	800cc74 <itoa>
			lcd_print(2, 14, snum);
 800179e:	4a79      	ldr	r2, [pc, #484]	; (8001984 <menu+0x4fc>)
 80017a0:	210e      	movs	r1, #14
 80017a2:	2002      	movs	r0, #2
 80017a4:	f7fe ff60 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80017a8:	4b71      	ldr	r3, [pc, #452]	; (8001970 <menu+0x4e8>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d123      	bne.n	80017f8 <menu+0x370>
			if(dilSecim == 0) {
 80017b0:	4b69      	ldr	r3, [pc, #420]	; (8001958 <menu+0x4d0>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80017b8:	4a73      	ldr	r2, [pc, #460]	; (8001988 <menu+0x500>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	2002      	movs	r0, #2
 80017be:	f7fe ff53 	bl	8000668 <lcd_print>
 80017c2:	e008      	b.n	80017d6 <menu+0x34e>
			} else if(dilSecim == 1) {
 80017c4:	4b64      	ldr	r3, [pc, #400]	; (8001958 <menu+0x4d0>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d104      	bne.n	80017d6 <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 80017cc:	4a6f      	ldr	r2, [pc, #444]	; (800198c <menu+0x504>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	2002      	movs	r0, #2
 80017d2:	f7fe ff49 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017d6:	4a6e      	ldr	r2, [pc, #440]	; (8001990 <menu+0x508>)
 80017d8:	210f      	movs	r1, #15
 80017da:	2002      	movs	r0, #2
 80017dc:	f7fe ff44 	bl	8000668 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80017e0:	4b6c      	ldr	r3, [pc, #432]	; (8001994 <menu+0x50c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	220a      	movs	r2, #10
 80017e6:	4967      	ldr	r1, [pc, #412]	; (8001984 <menu+0x4fc>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f00b fa43 	bl	800cc74 <itoa>
			lcd_print(2, 14, snum);
 80017ee:	4a65      	ldr	r2, [pc, #404]	; (8001984 <menu+0x4fc>)
 80017f0:	210e      	movs	r1, #14
 80017f2:	2002      	movs	r0, #2
 80017f4:	f7fe ff38 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80017f8:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <menu+0x4e8>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d123      	bne.n	8001848 <menu+0x3c0>
			if(dilSecim == 0) {
 8001800:	4b55      	ldr	r3, [pc, #340]	; (8001958 <menu+0x4d0>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001808:	4a63      	ldr	r2, [pc, #396]	; (8001998 <menu+0x510>)
 800180a:	2101      	movs	r1, #1
 800180c:	2002      	movs	r0, #2
 800180e:	f7fe ff2b 	bl	8000668 <lcd_print>
 8001812:	e008      	b.n	8001826 <menu+0x39e>
			} else if(dilSecim == 1) {
 8001814:	4b50      	ldr	r3, [pc, #320]	; (8001958 <menu+0x4d0>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d104      	bne.n	8001826 <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 800181c:	4a5f      	ldr	r2, [pc, #380]	; (800199c <menu+0x514>)
 800181e:	2101      	movs	r1, #1
 8001820:	2002      	movs	r0, #2
 8001822:	f7fe ff21 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001826:	4a5a      	ldr	r2, [pc, #360]	; (8001990 <menu+0x508>)
 8001828:	210f      	movs	r1, #15
 800182a:	2002      	movs	r0, #2
 800182c:	f7fe ff1c 	bl	8000668 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001830:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <menu+0x518>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	220a      	movs	r2, #10
 8001836:	4953      	ldr	r1, [pc, #332]	; (8001984 <menu+0x4fc>)
 8001838:	4618      	mov	r0, r3
 800183a:	f00b fa1b 	bl	800cc74 <itoa>
			lcd_print(2, 14, snum);
 800183e:	4a51      	ldr	r2, [pc, #324]	; (8001984 <menu+0x4fc>)
 8001840:	210e      	movs	r1, #14
 8001842:	2002      	movs	r0, #2
 8001844:	f7fe ff10 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001848:	4b49      	ldr	r3, [pc, #292]	; (8001970 <menu+0x4e8>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d123      	bne.n	8001898 <menu+0x410>
			if(dilSecim == 0) {
 8001850:	4b41      	ldr	r3, [pc, #260]	; (8001958 <menu+0x4d0>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d105      	bne.n	8001864 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <menu+0x51c>)
 800185a:	2101      	movs	r1, #1
 800185c:	2002      	movs	r0, #2
 800185e:	f7fe ff03 	bl	8000668 <lcd_print>
 8001862:	e008      	b.n	8001876 <menu+0x3ee>
			} else if(dilSecim == 1) {
 8001864:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <menu+0x4d0>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d104      	bne.n	8001876 <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 800186c:	4a4e      	ldr	r2, [pc, #312]	; (80019a8 <menu+0x520>)
 800186e:	2101      	movs	r1, #1
 8001870:	2002      	movs	r0, #2
 8001872:	f7fe fef9 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001876:	4a46      	ldr	r2, [pc, #280]	; (8001990 <menu+0x508>)
 8001878:	210f      	movs	r1, #15
 800187a:	2002      	movs	r0, #2
 800187c:	f7fe fef4 	bl	8000668 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001880:	4b4a      	ldr	r3, [pc, #296]	; (80019ac <menu+0x524>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	220a      	movs	r2, #10
 8001886:	493f      	ldr	r1, [pc, #252]	; (8001984 <menu+0x4fc>)
 8001888:	4618      	mov	r0, r3
 800188a:	f00b f9f3 	bl	800cc74 <itoa>
			lcd_print(2, 14, snum);
 800188e:	4a3d      	ldr	r2, [pc, #244]	; (8001984 <menu+0x4fc>)
 8001890:	210e      	movs	r1, #14
 8001892:	2002      	movs	r0, #2
 8001894:	f7fe fee8 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001898:	4b35      	ldr	r3, [pc, #212]	; (8001970 <menu+0x4e8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b04      	cmp	r3, #4
 800189e:	d123      	bne.n	80018e8 <menu+0x460>
			if(dilSecim == 0) {
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <menu+0x4d0>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80018a8:	4a41      	ldr	r2, [pc, #260]	; (80019b0 <menu+0x528>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	2002      	movs	r0, #2
 80018ae:	f7fe fedb 	bl	8000668 <lcd_print>
 80018b2:	e008      	b.n	80018c6 <menu+0x43e>
			} else if(dilSecim == 1) {
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <menu+0x4d0>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d104      	bne.n	80018c6 <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 80018bc:	4a3d      	ldr	r2, [pc, #244]	; (80019b4 <menu+0x52c>)
 80018be:	2101      	movs	r1, #1
 80018c0:	2002      	movs	r0, #2
 80018c2:	f7fe fed1 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018c6:	4a32      	ldr	r2, [pc, #200]	; (8001990 <menu+0x508>)
 80018c8:	210f      	movs	r1, #15
 80018ca:	2002      	movs	r0, #2
 80018cc:	f7fe fecc 	bl	8000668 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <menu+0x530>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	220a      	movs	r2, #10
 80018d6:	492b      	ldr	r1, [pc, #172]	; (8001984 <menu+0x4fc>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f00b f9cb 	bl	800cc74 <itoa>
			lcd_print(2, 14, snum);
 80018de:	4a29      	ldr	r2, [pc, #164]	; (8001984 <menu+0x4fc>)
 80018e0:	210e      	movs	r1, #14
 80018e2:	2002      	movs	r0, #2
 80018e4:	f7fe fec0 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <menu+0x4e8>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d123      	bne.n	8001938 <menu+0x4b0>
			if(dilSecim == 0) {
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <menu+0x4d0>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80018f8:	4a30      	ldr	r2, [pc, #192]	; (80019bc <menu+0x534>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	2002      	movs	r0, #2
 80018fe:	f7fe feb3 	bl	8000668 <lcd_print>
 8001902:	e008      	b.n	8001916 <menu+0x48e>
			} else if(dilSecim == 1) {
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <menu+0x4d0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d104      	bne.n	8001916 <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 800190c:	4a2c      	ldr	r2, [pc, #176]	; (80019c0 <menu+0x538>)
 800190e:	2101      	movs	r1, #1
 8001910:	2002      	movs	r0, #2
 8001912:	f7fe fea9 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001916:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <menu+0x508>)
 8001918:	210f      	movs	r1, #15
 800191a:	2002      	movs	r0, #2
 800191c:	f7fe fea4 	bl	8000668 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001920:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <menu+0x53c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	220a      	movs	r2, #10
 8001926:	4917      	ldr	r1, [pc, #92]	; (8001984 <menu+0x4fc>)
 8001928:	4618      	mov	r0, r3
 800192a:	f00b f9a3 	bl	800cc74 <itoa>
			lcd_print(2, 14, snum);
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <menu+0x4fc>)
 8001930:	210e      	movs	r1, #14
 8001932:	2002      	movs	r0, #2
 8001934:	f7fe fe98 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <menu+0x4e8>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b06      	cmp	r3, #6
 800193e:	d15f      	bne.n	8001a00 <menu+0x578>
			if(dilSecim == 0) {
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <menu+0x4d0>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d141      	bne.n	80019cc <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001948:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <menu+0x540>)
 800194a:	2101      	movs	r1, #1
 800194c:	2002      	movs	r0, #2
 800194e:	f7fe fe8b 	bl	8000668 <lcd_print>
 8001952:	e044      	b.n	80019de <menu+0x556>
 8001954:	0800d8e8 	.word	0x0800d8e8
 8001958:	20000c6a 	.word	0x20000c6a
 800195c:	0800d8fc 	.word	0x0800d8fc
 8001960:	0800d910 	.word	0x0800d910
 8001964:	20000c49 	.word	0x20000c49
 8001968:	0800d924 	.word	0x0800d924
 800196c:	0800d938 	.word	0x0800d938
 8001970:	20000c4b 	.word	0x20000c4b
 8001974:	0800d94c 	.word	0x0800d94c
 8001978:	0800d95c 	.word	0x0800d95c
 800197c:	0800d96c 	.word	0x0800d96c
 8001980:	20000c6b 	.word	0x20000c6b
 8001984:	20000bcc 	.word	0x20000bcc
 8001988:	0800d970 	.word	0x0800d970
 800198c:	0800d980 	.word	0x0800d980
 8001990:	0800d990 	.word	0x0800d990
 8001994:	20000c6c 	.word	0x20000c6c
 8001998:	0800d994 	.word	0x0800d994
 800199c:	0800d9a4 	.word	0x0800d9a4
 80019a0:	20000c6d 	.word	0x20000c6d
 80019a4:	0800d9b4 	.word	0x0800d9b4
 80019a8:	0800d9c4 	.word	0x0800d9c4
 80019ac:	20000c6e 	.word	0x20000c6e
 80019b0:	0800d9d4 	.word	0x0800d9d4
 80019b4:	0800d9e4 	.word	0x0800d9e4
 80019b8:	20000c6f 	.word	0x20000c6f
 80019bc:	0800d9f4 	.word	0x0800d9f4
 80019c0:	0800da04 	.word	0x0800da04
 80019c4:	20000c70 	.word	0x20000c70
 80019c8:	0800da14 	.word	0x0800da14
			} else if(dilSecim == 1) {
 80019cc:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <menu+0x684>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d104      	bne.n	80019de <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 80019d4:	4a4e      	ldr	r2, [pc, #312]	; (8001b10 <menu+0x688>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	2002      	movs	r0, #2
 80019da:	f7fe fe45 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019de:	4a4d      	ldr	r2, [pc, #308]	; (8001b14 <menu+0x68c>)
 80019e0:	210f      	movs	r1, #15
 80019e2:	2002      	movs	r0, #2
 80019e4:	f7fe fe40 	bl	8000668 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80019e8:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <menu+0x690>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	220a      	movs	r2, #10
 80019ee:	494b      	ldr	r1, [pc, #300]	; (8001b1c <menu+0x694>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00b f93f 	bl	800cc74 <itoa>
			lcd_print(2, 14, snum);
 80019f6:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <menu+0x694>)
 80019f8:	210e      	movs	r1, #14
 80019fa:	2002      	movs	r0, #2
 80019fc:	f7fe fe34 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <menu+0x698>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b07      	cmp	r3, #7
 8001a06:	d123      	bne.n	8001a50 <menu+0x5c8>
			if(dilSecim == 0) {
 8001a08:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <menu+0x684>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001a10:	4a44      	ldr	r2, [pc, #272]	; (8001b24 <menu+0x69c>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	2002      	movs	r0, #2
 8001a16:	f7fe fe27 	bl	8000668 <lcd_print>
 8001a1a:	e008      	b.n	8001a2e <menu+0x5a6>
			} else if(dilSecim == 1) {
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <menu+0x684>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d104      	bne.n	8001a2e <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 8001a24:	4a40      	ldr	r2, [pc, #256]	; (8001b28 <menu+0x6a0>)
 8001a26:	2101      	movs	r1, #1
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f7fe fe1d 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a2e:	4a39      	ldr	r2, [pc, #228]	; (8001b14 <menu+0x68c>)
 8001a30:	210f      	movs	r1, #15
 8001a32:	2002      	movs	r0, #2
 8001a34:	f7fe fe18 	bl	8000668 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001a38:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <menu+0x6a4>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	220a      	movs	r2, #10
 8001a3e:	4937      	ldr	r1, [pc, #220]	; (8001b1c <menu+0x694>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00b f917 	bl	800cc74 <itoa>
			lcd_print(2, 14, snum);
 8001a46:	4a35      	ldr	r2, [pc, #212]	; (8001b1c <menu+0x694>)
 8001a48:	210e      	movs	r1, #14
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f7fe fe0c 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001a50:	4b33      	ldr	r3, [pc, #204]	; (8001b20 <menu+0x698>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d123      	bne.n	8001aa0 <menu+0x618>
			if(dilSecim == 0) {
 8001a58:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <menu+0x684>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001a60:	4a33      	ldr	r2, [pc, #204]	; (8001b30 <menu+0x6a8>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	2002      	movs	r0, #2
 8001a66:	f7fe fdff 	bl	8000668 <lcd_print>
 8001a6a:	e008      	b.n	8001a7e <menu+0x5f6>
			} else if(dilSecim == 1) {
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <menu+0x684>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d104      	bne.n	8001a7e <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8001a74:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <menu+0x6ac>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f7fe fdf5 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a7e:	4a25      	ldr	r2, [pc, #148]	; (8001b14 <menu+0x68c>)
 8001a80:	210f      	movs	r1, #15
 8001a82:	2002      	movs	r0, #2
 8001a84:	f7fe fdf0 	bl	8000668 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <menu+0x6b0>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	220a      	movs	r2, #10
 8001a8e:	4923      	ldr	r1, [pc, #140]	; (8001b1c <menu+0x694>)
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00b f8ef 	bl	800cc74 <itoa>
			lcd_print(2, 14, snum);
 8001a96:	4a21      	ldr	r2, [pc, #132]	; (8001b1c <menu+0x694>)
 8001a98:	210e      	movs	r1, #14
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f7fe fde4 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <menu+0x698>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	d123      	bne.n	8001af0 <menu+0x668>
			if(dilSecim == 0) {
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <menu+0x684>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001ab0:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <menu+0x6b4>)
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f7fe fdd7 	bl	8000668 <lcd_print>
 8001aba:	e008      	b.n	8001ace <menu+0x646>
			} else if(dilSecim == 1) {
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <menu+0x684>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d104      	bne.n	8001ace <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 8001ac4:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <menu+0x6b8>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f7fe fdcd 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001ace:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <menu+0x6bc>)
 8001ad0:	2110      	movs	r1, #16
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	f7fe fdc8 	bl	8000668 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <menu+0x6c0>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	220a      	movs	r2, #10
 8001ade:	490f      	ldr	r1, [pc, #60]	; (8001b1c <menu+0x694>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f00b f8c7 	bl	800cc74 <itoa>
			lcd_print(2, 15, snum);
 8001ae6:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <menu+0x694>)
 8001ae8:	210f      	movs	r1, #15
 8001aea:	2002      	movs	r0, #2
 8001aec:	f7fe fdbc 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <menu+0x698>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b0a      	cmp	r3, #10
 8001af6:	d134      	bne.n	8001b62 <menu+0x6da>
			if(dilSecim == 0) {
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <menu+0x684>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d127      	bne.n	8001b50 <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <menu+0x6c4>)
 8001b02:	2101      	movs	r1, #1
 8001b04:	2002      	movs	r0, #2
 8001b06:	f7fe fdaf 	bl	8000668 <lcd_print>
 8001b0a:	e02a      	b.n	8001b62 <menu+0x6da>
 8001b0c:	20000c6a 	.word	0x20000c6a
 8001b10:	0800da24 	.word	0x0800da24
 8001b14:	0800d990 	.word	0x0800d990
 8001b18:	20000c71 	.word	0x20000c71
 8001b1c:	20000bcc 	.word	0x20000bcc
 8001b20:	20000c4b 	.word	0x20000c4b
 8001b24:	0800da34 	.word	0x0800da34
 8001b28:	0800da44 	.word	0x0800da44
 8001b2c:	20000c72 	.word	0x20000c72
 8001b30:	0800da54 	.word	0x0800da54
 8001b34:	0800da64 	.word	0x0800da64
 8001b38:	20000c73 	.word	0x20000c73
 8001b3c:	0800da74 	.word	0x0800da74
 8001b40:	0800da84 	.word	0x0800da84
 8001b44:	0800da94 	.word	0x0800da94
 8001b48:	20000c74 	.word	0x20000c74
 8001b4c:	0800da98 	.word	0x0800da98
			} else if(dilSecim == 1) {
 8001b50:	4b82      	ldr	r3, [pc, #520]	; (8001d5c <menu+0x8d4>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d104      	bne.n	8001b62 <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 8001b58:	4a81      	ldr	r2, [pc, #516]	; (8001d60 <menu+0x8d8>)
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f7fe fd83 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b62:	2102      	movs	r1, #2
 8001b64:	487f      	ldr	r0, [pc, #508]	; (8001d64 <menu+0x8dc>)
 8001b66:	f008 f859 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d119      	bne.n	8001ba4 <menu+0x71c>
 8001b70:	4b7d      	ldr	r3, [pc, #500]	; (8001d68 <menu+0x8e0>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d012      	beq.n	8001ba4 <menu+0x71c>
 8001b7e:	4b7b      	ldr	r3, [pc, #492]	; (8001d6c <menu+0x8e4>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10e      	bne.n	8001ba4 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001b86:	4b7a      	ldr	r3, [pc, #488]	; (8001d70 <menu+0x8e8>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <menu+0x8e8>)
 8001b90:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001b92:	4b77      	ldr	r3, [pc, #476]	; (8001d70 <menu+0x8e8>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b0a      	cmp	r3, #10
 8001b98:	d902      	bls.n	8001ba0 <menu+0x718>
				hataGostermeSirasi = 0;
 8001b9a:	4b75      	ldr	r3, [pc, #468]	; (8001d70 <menu+0x8e8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ba0:	f004 f9fe 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	486f      	ldr	r0, [pc, #444]	; (8001d64 <menu+0x8dc>)
 8001ba8:	f008 f838 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d119      	bne.n	8001be6 <menu+0x75e>
 8001bb2:	4b6d      	ldr	r3, [pc, #436]	; (8001d68 <menu+0x8e0>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	f083 0301 	eor.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d012      	beq.n	8001be6 <menu+0x75e>
 8001bc0:	4b6a      	ldr	r3, [pc, #424]	; (8001d6c <menu+0x8e4>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10e      	bne.n	8001be6 <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001bc8:	4b69      	ldr	r3, [pc, #420]	; (8001d70 <menu+0x8e8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b67      	ldr	r3, [pc, #412]	; (8001d70 <menu+0x8e8>)
 8001bd2:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001bd4:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <menu+0x8e8>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b0b      	cmp	r3, #11
 8001bda:	d902      	bls.n	8001be2 <menu+0x75a>
	    		hataGostermeSirasi = 10;
 8001bdc:	4b64      	ldr	r3, [pc, #400]	; (8001d70 <menu+0x8e8>)
 8001bde:	220a      	movs	r2, #10
 8001be0:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001be2:	f004 f9dd 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001be6:	2108      	movs	r1, #8
 8001be8:	485e      	ldr	r0, [pc, #376]	; (8001d64 <menu+0x8dc>)
 8001bea:	f008 f817 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d153      	bne.n	8001c9c <menu+0x814>
 8001bf4:	4b5c      	ldr	r3, [pc, #368]	; (8001d68 <menu+0x8e0>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	f083 0301 	eor.w	r3, r3, #1
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d04c      	beq.n	8001c9c <menu+0x814>
 8001c02:	4b5b      	ldr	r3, [pc, #364]	; (8001d70 <menu+0x8e8>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b0a      	cmp	r3, #10
 8001c08:	d148      	bne.n	8001c9c <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 8001c0a:	4b5a      	ldr	r3, [pc, #360]	; (8001d74 <menu+0x8ec>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <menu+0x8f0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001c18:	4b58      	ldr	r3, [pc, #352]	; (8001d7c <menu+0x8f4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <menu+0x8f0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001c26:	4b56      	ldr	r3, [pc, #344]	; (8001d80 <menu+0x8f8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	4b52      	ldr	r3, [pc, #328]	; (8001d78 <menu+0x8f0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <menu+0x8fc>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <menu+0x8f0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001c42:	4b51      	ldr	r3, [pc, #324]	; (8001d88 <menu+0x900>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <menu+0x8f0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001c50:	4b4e      	ldr	r3, [pc, #312]	; (8001d8c <menu+0x904>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <menu+0x8f0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <menu+0x908>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <menu+0x8f0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c6c:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <menu+0x90c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <menu+0x8f0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <menu+0x910>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <menu+0x8f0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001c88:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <menu+0x914>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	4b3a      	ldr	r3, [pc, #232]	; (8001d78 <menu+0x8f0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001c96:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <menu+0x918>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c9c:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <menu+0x91c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	f040 80fc 	bne.w	8001e9e <menu+0xa16>
		if(dilSecim == 0) {
 8001ca6:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <menu+0x8d4>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001cae:	4a3e      	ldr	r2, [pc, #248]	; (8001da8 <menu+0x920>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	f7fe fcd8 	bl	8000668 <lcd_print>
 8001cb8:	e008      	b.n	8001ccc <menu+0x844>
		} else if(dilSecim == 1) {
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <menu+0x8d4>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d104      	bne.n	8001ccc <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001cc2:	4a3a      	ldr	r2, [pc, #232]	; (8001dac <menu+0x924>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7fe fcce 	bl	8000668 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <menu+0x8e4>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d003      	beq.n	8001cdc <menu+0x854>
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <menu+0x8e4>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d112      	bne.n	8001d02 <menu+0x87a>
			if(dilSecim == 0) {
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <menu+0x8d4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001ce4:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <menu+0x928>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f7fe fcbd 	bl	8000668 <lcd_print>
 8001cee:	e008      	b.n	8001d02 <menu+0x87a>
			} else if(dilSecim == 1) {
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <menu+0x8d4>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d104      	bne.n	8001d02 <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001cf8:	4a2e      	ldr	r2, [pc, #184]	; (8001db4 <menu+0x92c>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f7fe fcb3 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <menu+0x930>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <menu+0x8b0>
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <menu+0x8e4>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d112      	bne.n	8001d38 <menu+0x8b0>
			if(dilSecim == 0) {
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <menu+0x8d4>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001d1a:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <menu+0x934>)
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	2002      	movs	r0, #2
 8001d20:	f7fe fca2 	bl	8000668 <lcd_print>
 8001d24:	e008      	b.n	8001d38 <menu+0x8b0>
			} else if(dilSecim == 1) {
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <menu+0x8d4>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d104      	bne.n	8001d38 <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 8001d2e:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <menu+0x938>)
 8001d30:	2101      	movs	r1, #1
 8001d32:	2002      	movs	r0, #2
 8001d34:	f7fe fc98 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <menu+0x930>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d14c      	bne.n	8001dda <menu+0x952>
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <menu+0x8e4>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d148      	bne.n	8001dda <menu+0x952>
			if(dilSecim == 0) {
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <menu+0x8d4>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d13b      	bne.n	8001dc8 <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 8001d50:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <menu+0x93c>)
 8001d52:	2101      	movs	r1, #1
 8001d54:	2002      	movs	r0, #2
 8001d56:	f7fe fc87 	bl	8000668 <lcd_print>
 8001d5a:	e03e      	b.n	8001dda <menu+0x952>
 8001d5c:	20000c6a 	.word	0x20000c6a
 8001d60:	0800daac 	.word	0x0800daac
 8001d64:	40010800 	.word	0x40010800
 8001d68:	20000c78 	.word	0x20000c78
 8001d6c:	20000c58 	.word	0x20000c58
 8001d70:	20000c4b 	.word	0x20000c4b
 8001d74:	20000c6b 	.word	0x20000c6b
 8001d78:	20000b38 	.word	0x20000b38
 8001d7c:	20000c6c 	.word	0x20000c6c
 8001d80:	20000c6d 	.word	0x20000c6d
 8001d84:	20000c6e 	.word	0x20000c6e
 8001d88:	20000c6f 	.word	0x20000c6f
 8001d8c:	20000c70 	.word	0x20000c70
 8001d90:	20000c71 	.word	0x20000c71
 8001d94:	20000c72 	.word	0x20000c72
 8001d98:	20000c73 	.word	0x20000c73
 8001d9c:	20000c74 	.word	0x20000c74
 8001da0:	20000c75 	.word	0x20000c75
 8001da4:	20000c49 	.word	0x20000c49
 8001da8:	0800dac0 	.word	0x0800dac0
 8001dac:	0800dad4 	.word	0x0800dad4
 8001db0:	0800dae8 	.word	0x0800dae8
 8001db4:	0800dafc 	.word	0x0800dafc
 8001db8:	20000c4a 	.word	0x20000c4a
 8001dbc:	0800db10 	.word	0x0800db10
 8001dc0:	0800db20 	.word	0x0800db20
 8001dc4:	0800db30 	.word	0x0800db30
			} else if(dilSecim == 1) {
 8001dc8:	4b98      	ldr	r3, [pc, #608]	; (800202c <menu+0xba4>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d104      	bne.n	8001dda <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 8001dd0:	4a97      	ldr	r2, [pc, #604]	; (8002030 <menu+0xba8>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2002      	movs	r0, #2
 8001dd6:	f7fe fc47 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001dda:	2102      	movs	r1, #2
 8001ddc:	4895      	ldr	r0, [pc, #596]	; (8002034 <menu+0xbac>)
 8001dde:	f007 ff1d 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d119      	bne.n	8001e1c <menu+0x994>
 8001de8:	4b93      	ldr	r3, [pc, #588]	; (8002038 <menu+0xbb0>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	f083 0301 	eor.w	r3, r3, #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d012      	beq.n	8001e1c <menu+0x994>
 8001df6:	4b91      	ldr	r3, [pc, #580]	; (800203c <menu+0xbb4>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10e      	bne.n	8001e1c <menu+0x994>
			calismaSekli = calismaSekli + 1;
 8001dfe:	4b90      	ldr	r3, [pc, #576]	; (8002040 <menu+0xbb8>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b8e      	ldr	r3, [pc, #568]	; (8002040 <menu+0xbb8>)
 8001e08:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001e0a:	4b8d      	ldr	r3, [pc, #564]	; (8002040 <menu+0xbb8>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d902      	bls.n	8001e18 <menu+0x990>
				calismaSekli = 0;
 8001e12:	4b8b      	ldr	r3, [pc, #556]	; (8002040 <menu+0xbb8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e18:	f004 f8c2 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4885      	ldr	r0, [pc, #532]	; (8002034 <menu+0xbac>)
 8001e20:	f007 fefc 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d119      	bne.n	8001e5e <menu+0x9d6>
 8001e2a:	4b83      	ldr	r3, [pc, #524]	; (8002038 <menu+0xbb0>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	f083 0301 	eor.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d012      	beq.n	8001e5e <menu+0x9d6>
 8001e38:	4b80      	ldr	r3, [pc, #512]	; (800203c <menu+0xbb4>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10e      	bne.n	8001e5e <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 8001e40:	4b7f      	ldr	r3, [pc, #508]	; (8002040 <menu+0xbb8>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b7d      	ldr	r3, [pc, #500]	; (8002040 <menu+0xbb8>)
 8001e4a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e4c:	4b7c      	ldr	r3, [pc, #496]	; (8002040 <menu+0xbb8>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <menu+0x9d2>
	    		calismaSekli = 1;
 8001e54:	4b7a      	ldr	r3, [pc, #488]	; (8002040 <menu+0xbb8>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e5a:	f004 f8a1 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e5e:	2108      	movs	r1, #8
 8001e60:	4874      	ldr	r0, [pc, #464]	; (8002034 <menu+0xbac>)
 8001e62:	f007 fedb 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d118      	bne.n	8001e9e <menu+0xa16>
 8001e6c:	4b72      	ldr	r3, [pc, #456]	; (8002038 <menu+0xbb0>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f083 0301 	eor.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d011      	beq.n	8001e9e <menu+0xa16>
			eepromData[1] = calismaSekli;
 8001e7a:	4b71      	ldr	r3, [pc, #452]	; (8002040 <menu+0xbb8>)
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b71      	ldr	r3, [pc, #452]	; (8002044 <menu+0xbbc>)
 8001e80:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001e82:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <menu+0xbb8>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d106      	bne.n	8001e98 <menu+0xa10>
				altLimit = 1;
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <menu+0xbc0>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e90:	4b6d      	ldr	r3, [pc, #436]	; (8002048 <menu+0xbc0>)
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	4b6b      	ldr	r3, [pc, #428]	; (8002044 <menu+0xbbc>)
 8001e96:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e98:	4b6c      	ldr	r3, [pc, #432]	; (800204c <menu+0xbc4>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001e9e:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <menu+0xbc8>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	f040 8083 	bne.w	8001fae <menu+0xb26>
		if(dilSecim == 0) {
 8001ea8:	4b60      	ldr	r3, [pc, #384]	; (800202c <menu+0xba4>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001eb0:	4a68      	ldr	r2, [pc, #416]	; (8002054 <menu+0xbcc>)
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7fe fbd7 	bl	8000668 <lcd_print>
 8001eba:	e008      	b.n	8001ece <menu+0xa46>
		} else if(dilSecim == 1) {
 8001ebc:	4b5b      	ldr	r3, [pc, #364]	; (800202c <menu+0xba4>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d104      	bne.n	8001ece <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001ec4:	4a64      	ldr	r2, [pc, #400]	; (8002058 <menu+0xbd0>)
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f7fe fbcd 	bl	8000668 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <menu+0xbd4>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d113      	bne.n	8001efe <menu+0xa76>
			if(dilSecim == 0) {
 8001ed6:	4b55      	ldr	r3, [pc, #340]	; (800202c <menu+0xba4>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 8001ede:	4a60      	ldr	r2, [pc, #384]	; (8002060 <menu+0xbd8>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f7fe fbc0 	bl	8000668 <lcd_print>
 8001ee8:	e012      	b.n	8001f10 <menu+0xa88>
			} else if(dilSecim == 1) {
 8001eea:	4b50      	ldr	r3, [pc, #320]	; (800202c <menu+0xba4>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10e      	bne.n	8001f10 <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 8001ef2:	4a5c      	ldr	r2, [pc, #368]	; (8002064 <menu+0xbdc>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	2002      	movs	r0, #2
 8001ef8:	f7fe fbb6 	bl	8000668 <lcd_print>
 8001efc:	e008      	b.n	8001f10 <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 8001efe:	4b57      	ldr	r3, [pc, #348]	; (800205c <menu+0xbd4>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d104      	bne.n	8001f10 <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 8001f06:	4a58      	ldr	r2, [pc, #352]	; (8002068 <menu+0xbe0>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f7fe fbac 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f10:	2102      	movs	r1, #2
 8001f12:	4848      	ldr	r0, [pc, #288]	; (8002034 <menu+0xbac>)
 8001f14:	f007 fe82 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d115      	bne.n	8001f4a <menu+0xac2>
 8001f1e:	4b46      	ldr	r3, [pc, #280]	; (8002038 <menu+0xbb0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	f083 0301 	eor.w	r3, r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00e      	beq.n	8001f4a <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f2c:	4b4b      	ldr	r3, [pc, #300]	; (800205c <menu+0xbd4>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b49      	ldr	r3, [pc, #292]	; (800205c <menu+0xbd4>)
 8001f36:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f38:	4b48      	ldr	r3, [pc, #288]	; (800205c <menu+0xbd4>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d902      	bls.n	8001f46 <menu+0xabe>
				emniyetCercevesi = 0;
 8001f40:	4b46      	ldr	r3, [pc, #280]	; (800205c <menu+0xbd4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f46:	f004 f82b 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f4a:	2104      	movs	r1, #4
 8001f4c:	4839      	ldr	r0, [pc, #228]	; (8002034 <menu+0xbac>)
 8001f4e:	f007 fe65 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d115      	bne.n	8001f84 <menu+0xafc>
 8001f58:	4b37      	ldr	r3, [pc, #220]	; (8002038 <menu+0xbb0>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	f083 0301 	eor.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00e      	beq.n	8001f84 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <menu+0xbd4>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b3b      	ldr	r3, [pc, #236]	; (800205c <menu+0xbd4>)
 8001f70:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f72:	4b3a      	ldr	r3, [pc, #232]	; (800205c <menu+0xbd4>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <menu+0xaf8>
		   		emniyetCercevesi = 1;
 8001f7a:	4b38      	ldr	r3, [pc, #224]	; (800205c <menu+0xbd4>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f80:	f004 f80e 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001f84:	2108      	movs	r1, #8
 8001f86:	482b      	ldr	r0, [pc, #172]	; (8002034 <menu+0xbac>)
 8001f88:	f007 fe48 	bl	8009c1c <HAL_GPIO_ReadPin>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d10d      	bne.n	8001fae <menu+0xb26>
 8001f92:	4b29      	ldr	r3, [pc, #164]	; (8002038 <menu+0xbb0>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	f083 0301 	eor.w	r3, r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <menu+0xbd4>)
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <menu+0xbbc>)
 8001fa6:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <menu+0xbc4>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <menu+0xbc8>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	f040 80ba 	bne.w	800212c <menu+0xca4>
		if(dilSecim == 0) {
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	; (800202c <menu+0xba4>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001fc0:	4a2a      	ldr	r2, [pc, #168]	; (800206c <menu+0xbe4>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7fe fb4f 	bl	8000668 <lcd_print>
 8001fca:	e008      	b.n	8001fde <menu+0xb56>
		} else if(dilSecim == 1) {
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <menu+0xba4>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d104      	bne.n	8001fde <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001fd4:	4a26      	ldr	r2, [pc, #152]	; (8002070 <menu+0xbe8>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7fe fb45 	bl	8000668 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <menu+0xbec>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d113      	bne.n	800200e <menu+0xb86>
			if(dilSecim == 0) {
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <menu+0xba4>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d105      	bne.n	8001ffa <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <menu+0xbd8>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f7fe fb38 	bl	8000668 <lcd_print>
 8001ff8:	e049      	b.n	800208e <menu+0xc06>
			} else if(dilSecim == 1) {
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <menu+0xba4>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d145      	bne.n	800208e <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <menu+0xbdc>)
 8002004:	2101      	movs	r1, #1
 8002006:	2002      	movs	r0, #2
 8002008:	f7fe fb2e 	bl	8000668 <lcd_print>
 800200c:	e03f      	b.n	800208e <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <menu+0xbec>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d13b      	bne.n	800208e <menu+0xc06>
			if(dilSecim == 0) {
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <menu+0xba4>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d12e      	bne.n	800207c <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 800201e:	4a16      	ldr	r2, [pc, #88]	; (8002078 <menu+0xbf0>)
 8002020:	2101      	movs	r1, #1
 8002022:	2002      	movs	r0, #2
 8002024:	f7fe fb20 	bl	8000668 <lcd_print>
 8002028:	e031      	b.n	800208e <menu+0xc06>
 800202a:	bf00      	nop
 800202c:	20000c6a 	.word	0x20000c6a
 8002030:	0800db40 	.word	0x0800db40
 8002034:	40010800 	.word	0x40010800
 8002038:	20000c78 	.word	0x20000c78
 800203c:	20000c58 	.word	0x20000c58
 8002040:	20000c4a 	.word	0x20000c4a
 8002044:	20000b38 	.word	0x20000b38
 8002048:	20000c4f 	.word	0x20000c4f
 800204c:	20000c75 	.word	0x20000c75
 8002050:	20000c49 	.word	0x20000c49
 8002054:	0800db50 	.word	0x0800db50
 8002058:	0800db64 	.word	0x0800db64
 800205c:	20000c4d 	.word	0x20000c4d
 8002060:	0800db78 	.word	0x0800db78
 8002064:	0800db8c 	.word	0x0800db8c
 8002068:	0800dba0 	.word	0x0800dba0
 800206c:	0800dbb0 	.word	0x0800dbb0
 8002070:	0800dbc4 	.word	0x0800dbc4
 8002074:	20000c4e 	.word	0x20000c4e
 8002078:	0800dbd8 	.word	0x0800dbd8
			} else if(dilSecim == 1) {
 800207c:	4b92      	ldr	r3, [pc, #584]	; (80022c8 <menu+0xe40>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d104      	bne.n	800208e <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 8002084:	4a91      	ldr	r2, [pc, #580]	; (80022cc <menu+0xe44>)
 8002086:	2101      	movs	r1, #1
 8002088:	2002      	movs	r0, #2
 800208a:	f7fe faed 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800208e:	2102      	movs	r1, #2
 8002090:	488f      	ldr	r0, [pc, #572]	; (80022d0 <menu+0xe48>)
 8002092:	f007 fdc3 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002096:	4603      	mov	r3, r0
 8002098:	2b01      	cmp	r3, #1
 800209a:	d115      	bne.n	80020c8 <menu+0xc40>
 800209c:	4b8d      	ldr	r3, [pc, #564]	; (80022d4 <menu+0xe4c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	f083 0301 	eor.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00e      	beq.n	80020c8 <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <menu+0xe50>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	3301      	adds	r3, #1
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4b89      	ldr	r3, [pc, #548]	; (80022d8 <menu+0xe50>)
 80020b4:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <menu+0xe50>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d902      	bls.n	80020c4 <menu+0xc3c>
				yavaslamaLimit = 0;
 80020be:	4b86      	ldr	r3, [pc, #536]	; (80022d8 <menu+0xe50>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020c4:	f003 ff6c 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020c8:	2104      	movs	r1, #4
 80020ca:	4881      	ldr	r0, [pc, #516]	; (80022d0 <menu+0xe48>)
 80020cc:	f007 fda6 	bl	8009c1c <HAL_GPIO_ReadPin>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d115      	bne.n	8002102 <menu+0xc7a>
 80020d6:	4b7f      	ldr	r3, [pc, #508]	; (80022d4 <menu+0xe4c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	f083 0301 	eor.w	r3, r3, #1
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00e      	beq.n	8002102 <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 80020e4:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <menu+0xe50>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b7a      	ldr	r3, [pc, #488]	; (80022d8 <menu+0xe50>)
 80020ee:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80020f0:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <menu+0xe50>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <menu+0xc76>
		   		yavaslamaLimit = 1;
 80020f8:	4b77      	ldr	r3, [pc, #476]	; (80022d8 <menu+0xe50>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020fe:	f003 ff4f 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002102:	2108      	movs	r1, #8
 8002104:	4872      	ldr	r0, [pc, #456]	; (80022d0 <menu+0xe48>)
 8002106:	f007 fd89 	bl	8009c1c <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b01      	cmp	r3, #1
 800210e:	d10d      	bne.n	800212c <menu+0xca4>
 8002110:	4b70      	ldr	r3, [pc, #448]	; (80022d4 <menu+0xe4c>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	f083 0301 	eor.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 800211e:	4b6e      	ldr	r3, [pc, #440]	; (80022d8 <menu+0xe50>)
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	4b6e      	ldr	r3, [pc, #440]	; (80022dc <menu+0xe54>)
 8002124:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002126:	4b6e      	ldr	r3, [pc, #440]	; (80022e0 <menu+0xe58>)
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 800212c:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <menu+0xe5c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b05      	cmp	r3, #5
 8002132:	f040 80b9 	bne.w	80022a8 <menu+0xe20>
		if(dilSecim == 0) {
 8002136:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <menu+0xe40>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 800213e:	4a6a      	ldr	r2, [pc, #424]	; (80022e8 <menu+0xe60>)
 8002140:	2101      	movs	r1, #1
 8002142:	2001      	movs	r0, #1
 8002144:	f7fe fa90 	bl	8000668 <lcd_print>
 8002148:	e008      	b.n	800215c <menu+0xcd4>
		} else if(dilSecim == 1) {
 800214a:	4b5f      	ldr	r3, [pc, #380]	; (80022c8 <menu+0xe40>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d104      	bne.n	800215c <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002152:	4a66      	ldr	r2, [pc, #408]	; (80022ec <menu+0xe64>)
 8002154:	2101      	movs	r1, #1
 8002156:	2001      	movs	r0, #1
 8002158:	f7fe fa86 	bl	8000668 <lcd_print>
		}

		if(altLimit == 0) {
 800215c:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <menu+0xe68>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d113      	bne.n	800218c <menu+0xd04>
			if(dilSecim == 0) {
 8002164:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <menu+0xe40>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 800216c:	4a61      	ldr	r2, [pc, #388]	; (80022f4 <menu+0xe6c>)
 800216e:	2101      	movs	r1, #1
 8002170:	2002      	movs	r0, #2
 8002172:	f7fe fa79 	bl	8000668 <lcd_print>
 8002176:	e020      	b.n	80021ba <menu+0xd32>
			} else if(dilSecim == 1) {
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <menu+0xe40>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d11c      	bne.n	80021ba <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 8002180:	4a5d      	ldr	r2, [pc, #372]	; (80022f8 <menu+0xe70>)
 8002182:	2101      	movs	r1, #1
 8002184:	2002      	movs	r0, #2
 8002186:	f7fe fa6f 	bl	8000668 <lcd_print>
 800218a:	e016      	b.n	80021ba <menu+0xd32>
			}
		} else if(altLimit == 1) {
 800218c:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <menu+0xe68>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d112      	bne.n	80021ba <menu+0xd32>
			if(dilSecim == 0){
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <menu+0xe40>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 800219c:	4a57      	ldr	r2, [pc, #348]	; (80022fc <menu+0xe74>)
 800219e:	2101      	movs	r1, #1
 80021a0:	2002      	movs	r0, #2
 80021a2:	f7fe fa61 	bl	8000668 <lcd_print>
 80021a6:	e008      	b.n	80021ba <menu+0xd32>
			} else if(dilSecim == 1){
 80021a8:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <menu+0xe40>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d104      	bne.n	80021ba <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 80021b0:	4a46      	ldr	r2, [pc, #280]	; (80022cc <menu+0xe44>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2002      	movs	r0, #2
 80021b6:	f7fe fa57 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80021ba:	2102      	movs	r1, #2
 80021bc:	4844      	ldr	r0, [pc, #272]	; (80022d0 <menu+0xe48>)
 80021be:	f007 fd2d 	bl	8009c1c <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d119      	bne.n	80021fc <menu+0xd74>
 80021c8:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <menu+0xe4c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f083 0301 	eor.w	r3, r3, #1
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d012      	beq.n	80021fc <menu+0xd74>
 80021d6:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <menu+0xe78>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10e      	bne.n	80021fc <menu+0xd74>
			altLimit = altLimit + 1;
 80021de:	4b44      	ldr	r3, [pc, #272]	; (80022f0 <menu+0xe68>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <menu+0xe68>)
 80021e8:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <menu+0xe68>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d902      	bls.n	80021f8 <menu+0xd70>
				altLimit = 0;
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <menu+0xe68>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021f8:	f003 fed2 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80021fc:	2104      	movs	r1, #4
 80021fe:	4834      	ldr	r0, [pc, #208]	; (80022d0 <menu+0xe48>)
 8002200:	f007 fd0c 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b01      	cmp	r3, #1
 8002208:	d119      	bne.n	800223e <menu+0xdb6>
 800220a:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <menu+0xe4c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	f083 0301 	eor.w	r3, r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d012      	beq.n	800223e <menu+0xdb6>
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <menu+0xe78>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10e      	bne.n	800223e <menu+0xdb6>
			altLimit = altLimit - 1;
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <menu+0xe68>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	3b01      	subs	r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <menu+0xe68>)
 800222a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <menu+0xe68>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <menu+0xdb2>
		   		altLimit = 1;
 8002234:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <menu+0xe68>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800223a:	f003 feb1 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800223e:	2108      	movs	r1, #8
 8002240:	4823      	ldr	r0, [pc, #140]	; (80022d0 <menu+0xe48>)
 8002242:	f007 fceb 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002246:	4603      	mov	r3, r0
 8002248:	2b01      	cmp	r3, #1
 800224a:	d12d      	bne.n	80022a8 <menu+0xe20>
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <menu+0xe4c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	f083 0301 	eor.w	r3, r3, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d026      	beq.n	80022a8 <menu+0xe20>
			eepromData[5] = altLimit;
 800225a:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <menu+0xe68>)
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <menu+0xe54>)
 8002260:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <menu+0xe68>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d110      	bne.n	800228c <menu+0xe04>
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <menu+0xe7c>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <menu+0xdf2>
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <menu+0xe7c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d108      	bne.n	800228c <menu+0xe04>
				kapiTablaAcKonum = 3;
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <menu+0xe7c>)
 800227c:	2203      	movs	r2, #3
 800227e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002280:	4b20      	ldr	r3, [pc, #128]	; (8002304 <menu+0xe7c>)
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <menu+0xe54>)
 8002286:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800228a:	e00a      	b.n	80022a2 <menu+0xe1a>
			} else if(altLimit == 0) {
 800228c:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <menu+0xe68>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <menu+0xe1a>
				platformSilindirTipi = 0;
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <menu+0xe80>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <menu+0xe80>)
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <menu+0xe54>)
 80022a0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <menu+0xe58>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <menu+0xe5c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b06      	cmp	r3, #6
 80022ae:	f040 80b6 	bne.w	800241e <menu+0xf96>
		if(dilSecim == 0) {
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <menu+0xe40>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d12a      	bne.n	8002310 <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 80022ba:	4a14      	ldr	r2, [pc, #80]	; (800230c <menu+0xe84>)
 80022bc:	2101      	movs	r1, #1
 80022be:	2001      	movs	r0, #1
 80022c0:	f7fe f9d2 	bl	8000668 <lcd_print>
 80022c4:	e02d      	b.n	8002322 <menu+0xe9a>
 80022c6:	bf00      	nop
 80022c8:	20000c6a 	.word	0x20000c6a
 80022cc:	0800dbec 	.word	0x0800dbec
 80022d0:	40010800 	.word	0x40010800
 80022d4:	20000c78 	.word	0x20000c78
 80022d8:	20000c4e 	.word	0x20000c4e
 80022dc:	20000b38 	.word	0x20000b38
 80022e0:	20000c75 	.word	0x20000c75
 80022e4:	20000c49 	.word	0x20000c49
 80022e8:	0800dc00 	.word	0x0800dc00
 80022ec:	0800dc14 	.word	0x0800dc14
 80022f0:	20000c4f 	.word	0x20000c4f
 80022f4:	0800db78 	.word	0x0800db78
 80022f8:	0800db8c 	.word	0x0800db8c
 80022fc:	0800dbd8 	.word	0x0800dbd8
 8002300:	20000c4a 	.word	0x20000c4a
 8002304:	20000c56 	.word	0x20000c56
 8002308:	20000c5c 	.word	0x20000c5c
 800230c:	0800dc28 	.word	0x0800dc28
		} else if(dilSecim == 1){
 8002310:	4b7a      	ldr	r3, [pc, #488]	; (80024fc <menu+0x1074>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d104      	bne.n	8002322 <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002318:	4a79      	ldr	r2, [pc, #484]	; (8002500 <menu+0x1078>)
 800231a:	2101      	movs	r1, #1
 800231c:	2001      	movs	r0, #1
 800231e:	f7fe f9a3 	bl	8000668 <lcd_print>
		}
		if(basincSalteri == 0){
 8002322:	4b78      	ldr	r3, [pc, #480]	; (8002504 <menu+0x107c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d113      	bne.n	8002352 <menu+0xeca>
			if(dilSecim == 0) {
 800232a:	4b74      	ldr	r3, [pc, #464]	; (80024fc <menu+0x1074>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d105      	bne.n	800233e <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 8002332:	4a75      	ldr	r2, [pc, #468]	; (8002508 <menu+0x1080>)
 8002334:	2101      	movs	r1, #1
 8002336:	2002      	movs	r0, #2
 8002338:	f7fe f996 	bl	8000668 <lcd_print>
 800233c:	e020      	b.n	8002380 <menu+0xef8>
			} else if(dilSecim == 1){
 800233e:	4b6f      	ldr	r3, [pc, #444]	; (80024fc <menu+0x1074>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d11c      	bne.n	8002380 <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 8002346:	4a71      	ldr	r2, [pc, #452]	; (800250c <menu+0x1084>)
 8002348:	2101      	movs	r1, #1
 800234a:	2002      	movs	r0, #2
 800234c:	f7fe f98c 	bl	8000668 <lcd_print>
 8002350:	e016      	b.n	8002380 <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 8002352:	4b6c      	ldr	r3, [pc, #432]	; (8002504 <menu+0x107c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d112      	bne.n	8002380 <menu+0xef8>
			if(dilSecim == 0) {
 800235a:	4b68      	ldr	r3, [pc, #416]	; (80024fc <menu+0x1074>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 8002362:	4a6b      	ldr	r2, [pc, #428]	; (8002510 <menu+0x1088>)
 8002364:	2101      	movs	r1, #1
 8002366:	2002      	movs	r0, #2
 8002368:	f7fe f97e 	bl	8000668 <lcd_print>
 800236c:	e008      	b.n	8002380 <menu+0xef8>
			} else if(dilSecim == 1) {
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <menu+0x1074>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d104      	bne.n	8002380 <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 8002376:	4a67      	ldr	r2, [pc, #412]	; (8002514 <menu+0x108c>)
 8002378:	2101      	movs	r1, #1
 800237a:	2002      	movs	r0, #2
 800237c:	f7fe f974 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002380:	2102      	movs	r1, #2
 8002382:	4865      	ldr	r0, [pc, #404]	; (8002518 <menu+0x1090>)
 8002384:	f007 fc4a 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002388:	4603      	mov	r3, r0
 800238a:	2b01      	cmp	r3, #1
 800238c:	d115      	bne.n	80023ba <menu+0xf32>
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <menu+0x1094>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	f083 0301 	eor.w	r3, r3, #1
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00e      	beq.n	80023ba <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 800239c:	4b59      	ldr	r3, [pc, #356]	; (8002504 <menu+0x107c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b57      	ldr	r3, [pc, #348]	; (8002504 <menu+0x107c>)
 80023a6:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80023a8:	4b56      	ldr	r3, [pc, #344]	; (8002504 <menu+0x107c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d902      	bls.n	80023b6 <menu+0xf2e>
				basincSalteri = 0;
 80023b0:	4b54      	ldr	r3, [pc, #336]	; (8002504 <menu+0x107c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023b6:	f003 fdf3 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ba:	2104      	movs	r1, #4
 80023bc:	4856      	ldr	r0, [pc, #344]	; (8002518 <menu+0x1090>)
 80023be:	f007 fc2d 	bl	8009c1c <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d115      	bne.n	80023f4 <menu+0xf6c>
 80023c8:	4b54      	ldr	r3, [pc, #336]	; (800251c <menu+0x1094>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	f083 0301 	eor.w	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00e      	beq.n	80023f4 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 80023d6:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <menu+0x107c>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	3b01      	subs	r3, #1
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4b49      	ldr	r3, [pc, #292]	; (8002504 <menu+0x107c>)
 80023e0:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <menu+0x107c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <menu+0xf68>
		   		basincSalteri = 1;
 80023ea:	4b46      	ldr	r3, [pc, #280]	; (8002504 <menu+0x107c>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023f0:	f003 fdd6 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f4:	2108      	movs	r1, #8
 80023f6:	4848      	ldr	r0, [pc, #288]	; (8002518 <menu+0x1090>)
 80023f8:	f007 fc10 	bl	8009c1c <HAL_GPIO_ReadPin>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10d      	bne.n	800241e <menu+0xf96>
 8002402:	4b46      	ldr	r3, [pc, #280]	; (800251c <menu+0x1094>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	f083 0301 	eor.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <menu+0xf96>
			eepromData[6] = basincSalteri;
 8002410:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <menu+0x107c>)
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	4b42      	ldr	r3, [pc, #264]	; (8002520 <menu+0x1098>)
 8002416:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002418:	4b42      	ldr	r3, [pc, #264]	; (8002524 <menu+0x109c>)
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800241e:	4b42      	ldr	r3, [pc, #264]	; (8002528 <menu+0x10a0>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b07      	cmp	r3, #7
 8002424:	f040 80f5 	bne.w	8002612 <menu+0x118a>
		if(dilSecim == 0) {
 8002428:	4b34      	ldr	r3, [pc, #208]	; (80024fc <menu+0x1074>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002430:	4a3e      	ldr	r2, [pc, #248]	; (800252c <menu+0x10a4>)
 8002432:	2101      	movs	r1, #1
 8002434:	2001      	movs	r0, #1
 8002436:	f7fe f917 	bl	8000668 <lcd_print>
 800243a:	e008      	b.n	800244e <menu+0xfc6>
		} else if(dilSecim == 1){
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <menu+0x1074>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d104      	bne.n	800244e <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002444:	4a3a      	ldr	r2, [pc, #232]	; (8002530 <menu+0x10a8>)
 8002446:	2101      	movs	r1, #1
 8002448:	2001      	movs	r0, #1
 800244a:	f7fe f90d 	bl	8000668 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800244e:	4b39      	ldr	r3, [pc, #228]	; (8002534 <menu+0x10ac>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d113      	bne.n	800247e <menu+0xff6>
			if(dilSecim == 0) {
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <menu+0x1074>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 800245e:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <menu+0x1080>)
 8002460:	2101      	movs	r1, #1
 8002462:	2002      	movs	r0, #2
 8002464:	f7fe f900 	bl	8000668 <lcd_print>
 8002468:	e079      	b.n	800255e <menu+0x10d6>
			} else if(dilSecim == 1){
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <menu+0x1074>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d175      	bne.n	800255e <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 8002472:	4a26      	ldr	r2, [pc, #152]	; (800250c <menu+0x1084>)
 8002474:	2101      	movs	r1, #1
 8002476:	2002      	movs	r0, #2
 8002478:	f7fe f8f6 	bl	8000668 <lcd_print>
 800247c:	e06f      	b.n	800255e <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <menu+0x10ac>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d113      	bne.n	80024ae <menu+0x1026>
			if(dilSecim == 0) {
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <menu+0x1074>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d105      	bne.n	800249a <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 800248e:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <menu+0x10b0>)
 8002490:	2101      	movs	r1, #1
 8002492:	2002      	movs	r0, #2
 8002494:	f7fe f8e8 	bl	8000668 <lcd_print>
 8002498:	e061      	b.n	800255e <menu+0x10d6>
			} else if(dilSecim == 1) {
 800249a:	4b18      	ldr	r3, [pc, #96]	; (80024fc <menu+0x1074>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d15d      	bne.n	800255e <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 80024a2:	4a26      	ldr	r2, [pc, #152]	; (800253c <menu+0x10b4>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	2002      	movs	r0, #2
 80024a8:	f7fe f8de 	bl	8000668 <lcd_print>
 80024ac:	e057      	b.n	800255e <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <menu+0x10ac>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d113      	bne.n	80024de <menu+0x1056>
			if(dilSecim == 0) {
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <menu+0x1074>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 80024be:	4a20      	ldr	r2, [pc, #128]	; (8002540 <menu+0x10b8>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	2002      	movs	r0, #2
 80024c4:	f7fe f8d0 	bl	8000668 <lcd_print>
 80024c8:	e049      	b.n	800255e <menu+0x10d6>
			} else if(dilSecim == 1) {
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <menu+0x1074>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d145      	bne.n	800255e <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 80024d2:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <menu+0x10bc>)
 80024d4:	2101      	movs	r1, #1
 80024d6:	2002      	movs	r0, #2
 80024d8:	f7fe f8c6 	bl	8000668 <lcd_print>
 80024dc:	e03f      	b.n	800255e <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <menu+0x10ac>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d13b      	bne.n	800255e <menu+0x10d6>
			if(dilSecim == 0) {
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <menu+0x1074>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d12e      	bne.n	800254c <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80024ee:	4a16      	ldr	r2, [pc, #88]	; (8002548 <menu+0x10c0>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	2002      	movs	r0, #2
 80024f4:	f7fe f8b8 	bl	8000668 <lcd_print>
 80024f8:	e031      	b.n	800255e <menu+0x10d6>
 80024fa:	bf00      	nop
 80024fc:	20000c6a 	.word	0x20000c6a
 8002500:	0800dc38 	.word	0x0800dc38
 8002504:	20000c50 	.word	0x20000c50
 8002508:	0800db78 	.word	0x0800db78
 800250c:	0800db8c 	.word	0x0800db8c
 8002510:	0800dbd8 	.word	0x0800dbd8
 8002514:	0800dbec 	.word	0x0800dbec
 8002518:	40010800 	.word	0x40010800
 800251c:	20000c78 	.word	0x20000c78
 8002520:	20000b38 	.word	0x20000b38
 8002524:	20000c75 	.word	0x20000c75
 8002528:	20000c49 	.word	0x20000c49
 800252c:	0800dc48 	.word	0x0800dc48
 8002530:	0800dc5c 	.word	0x0800dc5c
 8002534:	20000c51 	.word	0x20000c51
 8002538:	0800dc70 	.word	0x0800dc70
 800253c:	0800dc84 	.word	0x0800dc84
 8002540:	0800dc98 	.word	0x0800dc98
 8002544:	0800dcac 	.word	0x0800dcac
 8002548:	0800dcc0 	.word	0x0800dcc0
			} else if(dilSecim == 1){
 800254c:	4b99      	ldr	r3, [pc, #612]	; (80027b4 <menu+0x132c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d104      	bne.n	800255e <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002554:	4a98      	ldr	r2, [pc, #608]	; (80027b8 <menu+0x1330>)
 8002556:	2101      	movs	r1, #1
 8002558:	2002      	movs	r0, #2
 800255a:	f7fe f885 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800255e:	2102      	movs	r1, #2
 8002560:	4896      	ldr	r0, [pc, #600]	; (80027bc <menu+0x1334>)
 8002562:	f007 fb5b 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002566:	4603      	mov	r3, r0
 8002568:	2b01      	cmp	r3, #1
 800256a:	d115      	bne.n	8002598 <menu+0x1110>
 800256c:	4b94      	ldr	r3, [pc, #592]	; (80027c0 <menu+0x1338>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f083 0301 	eor.w	r3, r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00e      	beq.n	8002598 <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 800257a:	4b92      	ldr	r3, [pc, #584]	; (80027c4 <menu+0x133c>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	3301      	adds	r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b90      	ldr	r3, [pc, #576]	; (80027c4 <menu+0x133c>)
 8002584:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002586:	4b8f      	ldr	r3, [pc, #572]	; (80027c4 <menu+0x133c>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d902      	bls.n	8002594 <menu+0x110c>
				kapiSecimleri = 0;
 800258e:	4b8d      	ldr	r3, [pc, #564]	; (80027c4 <menu+0x133c>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002594:	f003 fd04 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002598:	2104      	movs	r1, #4
 800259a:	4888      	ldr	r0, [pc, #544]	; (80027bc <menu+0x1334>)
 800259c:	f007 fb3e 	bl	8009c1c <HAL_GPIO_ReadPin>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d115      	bne.n	80025d2 <menu+0x114a>
 80025a6:	4b86      	ldr	r3, [pc, #536]	; (80027c0 <menu+0x1338>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f083 0301 	eor.w	r3, r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00e      	beq.n	80025d2 <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 80025b4:	4b83      	ldr	r3, [pc, #524]	; (80027c4 <menu+0x133c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <menu+0x133c>)
 80025be:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80025c0:	4b80      	ldr	r3, [pc, #512]	; (80027c4 <menu+0x133c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d902      	bls.n	80025ce <menu+0x1146>
		   		kapiSecimleri = 3;
 80025c8:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <menu+0x133c>)
 80025ca:	2203      	movs	r2, #3
 80025cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025ce:	f003 fce7 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025d2:	2108      	movs	r1, #8
 80025d4:	4879      	ldr	r0, [pc, #484]	; (80027bc <menu+0x1334>)
 80025d6:	f007 fb21 	bl	8009c1c <HAL_GPIO_ReadPin>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d118      	bne.n	8002612 <menu+0x118a>
 80025e0:	4b77      	ldr	r3, [pc, #476]	; (80027c0 <menu+0x1338>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	f083 0301 	eor.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d011      	beq.n	8002612 <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 80025ee:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <menu+0x133c>)
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <menu+0x1340>)
 80025f4:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80025f6:	4b73      	ldr	r3, [pc, #460]	; (80027c4 <menu+0x133c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <menu+0x1184>
				altLimit = 1;
 80025fe:	4b73      	ldr	r3, [pc, #460]	; (80027cc <menu+0x1344>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002604:	4b71      	ldr	r3, [pc, #452]	; (80027cc <menu+0x1344>)
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <menu+0x1340>)
 800260a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800260c:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <menu+0x1348>)
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002612:	4b70      	ldr	r3, [pc, #448]	; (80027d4 <menu+0x134c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b08      	cmp	r3, #8
 8002618:	f040 8092 	bne.w	8002740 <menu+0x12b8>
		if(dilSecim == 0) {
 800261c:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <menu+0x132c>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002624:	4a6c      	ldr	r2, [pc, #432]	; (80027d8 <menu+0x1350>)
 8002626:	2101      	movs	r1, #1
 8002628:	2001      	movs	r0, #1
 800262a:	f7fe f81d 	bl	8000668 <lcd_print>
 800262e:	e008      	b.n	8002642 <menu+0x11ba>
		} else if(dilSecim == 1) {
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <menu+0x132c>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d104      	bne.n	8002642 <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002638:	4a68      	ldr	r2, [pc, #416]	; (80027dc <menu+0x1354>)
 800263a:	2101      	movs	r1, #1
 800263c:	2001      	movs	r0, #1
 800263e:	f7fe f813 	bl	8000668 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002642:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <menu+0x1358>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d113      	bne.n	8002672 <menu+0x11ea>
			if(dilSecim == 0) {
 800264a:	4b5a      	ldr	r3, [pc, #360]	; (80027b4 <menu+0x132c>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002652:	4a64      	ldr	r2, [pc, #400]	; (80027e4 <menu+0x135c>)
 8002654:	2101      	movs	r1, #1
 8002656:	2002      	movs	r0, #2
 8002658:	f7fe f806 	bl	8000668 <lcd_print>
 800265c:	e020      	b.n	80026a0 <menu+0x1218>
			} else if(dilSecim == 1) {
 800265e:	4b55      	ldr	r3, [pc, #340]	; (80027b4 <menu+0x132c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d11c      	bne.n	80026a0 <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 8002666:	4a60      	ldr	r2, [pc, #384]	; (80027e8 <menu+0x1360>)
 8002668:	2101      	movs	r1, #1
 800266a:	2002      	movs	r0, #2
 800266c:	f7fd fffc 	bl	8000668 <lcd_print>
 8002670:	e016      	b.n	80026a0 <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 8002672:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <menu+0x1358>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d112      	bne.n	80026a0 <menu+0x1218>
			if(dilSecim == 0){
 800267a:	4b4e      	ldr	r3, [pc, #312]	; (80027b4 <menu+0x132c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002682:	4a5a      	ldr	r2, [pc, #360]	; (80027ec <menu+0x1364>)
 8002684:	2101      	movs	r1, #1
 8002686:	2002      	movs	r0, #2
 8002688:	f7fd ffee 	bl	8000668 <lcd_print>
 800268c:	e008      	b.n	80026a0 <menu+0x1218>
			} else if(dilSecim == 1){
 800268e:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <menu+0x132c>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d104      	bne.n	80026a0 <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 8002696:	4a56      	ldr	r2, [pc, #344]	; (80027f0 <menu+0x1368>)
 8002698:	2101      	movs	r1, #1
 800269a:	2002      	movs	r0, #2
 800269c:	f7fd ffe4 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026a0:	2102      	movs	r1, #2
 80026a2:	4846      	ldr	r0, [pc, #280]	; (80027bc <menu+0x1334>)
 80026a4:	f007 faba 	bl	8009c1c <HAL_GPIO_ReadPin>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d115      	bne.n	80026da <menu+0x1252>
 80026ae:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <menu+0x1338>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	f083 0301 	eor.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00e      	beq.n	80026da <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 80026bc:	4b48      	ldr	r3, [pc, #288]	; (80027e0 <menu+0x1358>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <menu+0x1358>)
 80026c6:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80026c8:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <menu+0x1358>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d902      	bls.n	80026d6 <menu+0x124e>
				kapiAcTipi = 0;
 80026d0:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <menu+0x1358>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026d6:	f003 fc63 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026da:	2104      	movs	r1, #4
 80026dc:	4837      	ldr	r0, [pc, #220]	; (80027bc <menu+0x1334>)
 80026de:	f007 fa9d 	bl	8009c1c <HAL_GPIO_ReadPin>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d115      	bne.n	8002714 <menu+0x128c>
 80026e8:	4b35      	ldr	r3, [pc, #212]	; (80027c0 <menu+0x1338>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f083 0301 	eor.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00e      	beq.n	8002714 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 80026f6:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <menu+0x1358>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <menu+0x1358>)
 8002700:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002702:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <menu+0x1358>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <menu+0x1288>
		   		kapiAcTipi = 1;
 800270a:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <menu+0x1358>)
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002710:	f003 fc46 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002714:	2108      	movs	r1, #8
 8002716:	4829      	ldr	r0, [pc, #164]	; (80027bc <menu+0x1334>)
 8002718:	f007 fa80 	bl	8009c1c <HAL_GPIO_ReadPin>
 800271c:	4603      	mov	r3, r0
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10e      	bne.n	8002740 <menu+0x12b8>
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <menu+0x1338>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	f083 0301 	eor.w	r3, r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <menu+0x1358>)
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <menu+0x1340>)
 8002736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <menu+0x1348>)
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <menu+0x134c>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b09      	cmp	r3, #9
 8002746:	f040 80b9 	bne.w	80028bc <menu+0x1434>
		if(dilSecim == 0){
 800274a:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <menu+0x132c>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002752:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <menu+0x136c>)
 8002754:	2101      	movs	r1, #1
 8002756:	2001      	movs	r0, #1
 8002758:	f7fd ff86 	bl	8000668 <lcd_print>
 800275c:	e008      	b.n	8002770 <menu+0x12e8>
		} else if(dilSecim == 1) {
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <menu+0x132c>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d104      	bne.n	8002770 <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002766:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <menu+0x1370>)
 8002768:	2101      	movs	r1, #1
 800276a:	2001      	movs	r0, #1
 800276c:	f7fd ff7c 	bl	8000668 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <menu+0x1374>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 8002778:	4a21      	ldr	r2, [pc, #132]	; (8002800 <menu+0x1378>)
 800277a:	2101      	movs	r1, #1
 800277c:	2002      	movs	r0, #2
 800277e:	f7fd ff73 	bl	8000668 <lcd_print>
 8002782:	e04c      	b.n	800281e <menu+0x1396>
		} else if(kapi1Tip == 1) {
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <menu+0x1374>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d13f      	bne.n	800280c <menu+0x1384>
			if(dilSecim == 0){
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <menu+0x132c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <menu+0x137c>)
 8002796:	2101      	movs	r1, #1
 8002798:	2002      	movs	r0, #2
 800279a:	f7fd ff65 	bl	8000668 <lcd_print>
 800279e:	e03e      	b.n	800281e <menu+0x1396>
			} else if(dilSecim == 1) {
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <menu+0x132c>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d13a      	bne.n	800281e <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 80027a8:	4a17      	ldr	r2, [pc, #92]	; (8002808 <menu+0x1380>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	2002      	movs	r0, #2
 80027ae:	f7fd ff5b 	bl	8000668 <lcd_print>
 80027b2:	e034      	b.n	800281e <menu+0x1396>
 80027b4:	20000c6a 	.word	0x20000c6a
 80027b8:	0800dcd4 	.word	0x0800dcd4
 80027bc:	40010800 	.word	0x40010800
 80027c0:	20000c78 	.word	0x20000c78
 80027c4:	20000c51 	.word	0x20000c51
 80027c8:	20000b38 	.word	0x20000b38
 80027cc:	20000c4f 	.word	0x20000c4f
 80027d0:	20000c75 	.word	0x20000c75
 80027d4:	20000c49 	.word	0x20000c49
 80027d8:	0800dce8 	.word	0x0800dce8
 80027dc:	0800dcfc 	.word	0x0800dcfc
 80027e0:	20000c55 	.word	0x20000c55
 80027e4:	0800dd10 	.word	0x0800dd10
 80027e8:	0800dd20 	.word	0x0800dd20
 80027ec:	0800dd30 	.word	0x0800dd30
 80027f0:	0800dd44 	.word	0x0800dd44
 80027f4:	0800dd58 	.word	0x0800dd58
 80027f8:	0800dd6c 	.word	0x0800dd6c
 80027fc:	20000c52 	.word	0x20000c52
 8002800:	0800dd80 	.word	0x0800dd80
 8002804:	0800dd94 	.word	0x0800dd94
 8002808:	0800dda4 	.word	0x0800dda4
			}
		} else if(kapi1Tip == 2) {
 800280c:	4b8a      	ldr	r3, [pc, #552]	; (8002a38 <menu+0x15b0>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d104      	bne.n	800281e <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 8002814:	4a89      	ldr	r2, [pc, #548]	; (8002a3c <menu+0x15b4>)
 8002816:	2101      	movs	r1, #1
 8002818:	2002      	movs	r0, #2
 800281a:	f7fd ff25 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800281e:	2102      	movs	r1, #2
 8002820:	4887      	ldr	r0, [pc, #540]	; (8002a40 <menu+0x15b8>)
 8002822:	f007 f9fb 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d115      	bne.n	8002858 <menu+0x13d0>
 800282c:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <menu+0x15bc>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	f083 0301 	eor.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00e      	beq.n	8002858 <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 800283a:	4b7f      	ldr	r3, [pc, #508]	; (8002a38 <menu+0x15b0>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b7d      	ldr	r3, [pc, #500]	; (8002a38 <menu+0x15b0>)
 8002844:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002846:	4b7c      	ldr	r3, [pc, #496]	; (8002a38 <menu+0x15b0>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d902      	bls.n	8002854 <menu+0x13cc>
				kapi1Tip = 0;
 800284e:	4b7a      	ldr	r3, [pc, #488]	; (8002a38 <menu+0x15b0>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002854:	f003 fba4 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002858:	2104      	movs	r1, #4
 800285a:	4879      	ldr	r0, [pc, #484]	; (8002a40 <menu+0x15b8>)
 800285c:	f007 f9de 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d115      	bne.n	8002892 <menu+0x140a>
 8002866:	4b77      	ldr	r3, [pc, #476]	; (8002a44 <menu+0x15bc>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	f083 0301 	eor.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00e      	beq.n	8002892 <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 8002874:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <menu+0x15b0>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	3b01      	subs	r3, #1
 800287a:	b2da      	uxtb	r2, r3
 800287c:	4b6e      	ldr	r3, [pc, #440]	; (8002a38 <menu+0x15b0>)
 800287e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002880:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <menu+0x15b0>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d902      	bls.n	800288e <menu+0x1406>
		   		kapi1Tip = 2;
 8002888:	4b6b      	ldr	r3, [pc, #428]	; (8002a38 <menu+0x15b0>)
 800288a:	2202      	movs	r2, #2
 800288c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800288e:	f003 fb87 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002892:	2108      	movs	r1, #8
 8002894:	486a      	ldr	r0, [pc, #424]	; (8002a40 <menu+0x15b8>)
 8002896:	f007 f9c1 	bl	8009c1c <HAL_GPIO_ReadPin>
 800289a:	4603      	mov	r3, r0
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10d      	bne.n	80028bc <menu+0x1434>
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <menu+0x15bc>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	f083 0301 	eor.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <menu+0x1434>
			eepromData[8] = kapi1Tip;
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <menu+0x15b0>)
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <menu+0x15c0>)
 80028b4:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80028b6:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <menu+0x15c4>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80028bc:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <menu+0x15c8>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b0a      	cmp	r3, #10
 80028c2:	d17f      	bne.n	80029c4 <menu+0x153c>
		if(dilSecim == 0) {
 80028c4:	4b63      	ldr	r3, [pc, #396]	; (8002a54 <menu+0x15cc>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80028cc:	4a62      	ldr	r2, [pc, #392]	; (8002a58 <menu+0x15d0>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7fd fec9 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80028d6:	4a61      	ldr	r2, [pc, #388]	; (8002a5c <menu+0x15d4>)
 80028d8:	2101      	movs	r1, #1
 80028da:	2002      	movs	r0, #2
 80028dc:	f7fd fec4 	bl	8000668 <lcd_print>
 80028e0:	e00d      	b.n	80028fe <menu+0x1476>
		} else if(dilSecim == 1) {
 80028e2:	4b5c      	ldr	r3, [pc, #368]	; (8002a54 <menu+0x15cc>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d109      	bne.n	80028fe <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80028ea:	4a5d      	ldr	r2, [pc, #372]	; (8002a60 <menu+0x15d8>)
 80028ec:	2101      	movs	r1, #1
 80028ee:	2001      	movs	r0, #1
 80028f0:	f7fd feba 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80028f4:	4a5b      	ldr	r2, [pc, #364]	; (8002a64 <menu+0x15dc>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	2002      	movs	r0, #2
 80028fa:	f7fd feb5 	bl	8000668 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80028fe:	4b5a      	ldr	r3, [pc, #360]	; (8002a68 <menu+0x15e0>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	220a      	movs	r2, #10
 8002904:	4959      	ldr	r1, [pc, #356]	; (8002a6c <menu+0x15e4>)
 8002906:	4618      	mov	r0, r3
 8002908:	f00a f9b4 	bl	800cc74 <itoa>
		lcd_print(2,16,snum);
 800290c:	4a57      	ldr	r2, [pc, #348]	; (8002a6c <menu+0x15e4>)
 800290e:	2110      	movs	r1, #16
 8002910:	2002      	movs	r0, #2
 8002912:	f7fd fea9 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002916:	2102      	movs	r1, #2
 8002918:	4849      	ldr	r0, [pc, #292]	; (8002a40 <menu+0x15b8>)
 800291a:	f007 f97f 	bl	8009c1c <HAL_GPIO_ReadPin>
 800291e:	4603      	mov	r3, r0
 8002920:	2b01      	cmp	r3, #1
 8002922:	d119      	bne.n	8002958 <menu+0x14d0>
 8002924:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <menu+0x15bc>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f083 0301 	eor.w	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d012      	beq.n	8002958 <menu+0x14d0>
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <menu+0x15b0>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10e      	bne.n	8002958 <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 800293a:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <menu+0x15e0>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	3301      	adds	r3, #1
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <menu+0x15e0>)
 8002944:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002946:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <menu+0x15e0>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d902      	bls.n	8002954 <menu+0x14cc>
				kapi1AcSure = 0;
 800294e:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <menu+0x15e0>)
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002954:	f003 fb24 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002958:	2104      	movs	r1, #4
 800295a:	4839      	ldr	r0, [pc, #228]	; (8002a40 <menu+0x15b8>)
 800295c:	f007 f95e 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d119      	bne.n	800299a <menu+0x1512>
 8002966:	4b37      	ldr	r3, [pc, #220]	; (8002a44 <menu+0x15bc>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f083 0301 	eor.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d012      	beq.n	800299a <menu+0x1512>
 8002974:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <menu+0x15b0>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10e      	bne.n	800299a <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <menu+0x15e0>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	3b01      	subs	r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <menu+0x15e0>)
 8002986:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002988:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <menu+0x15e0>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b06      	cmp	r3, #6
 800298e:	d902      	bls.n	8002996 <menu+0x150e>
		   		kapi1AcSure = 5;
 8002990:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <menu+0x15e0>)
 8002992:	2205      	movs	r2, #5
 8002994:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002996:	f003 fb03 	bl	8005fa0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800299a:	2108      	movs	r1, #8
 800299c:	4828      	ldr	r0, [pc, #160]	; (8002a40 <menu+0x15b8>)
 800299e:	f007 f93d 	bl	8009c1c <HAL_GPIO_ReadPin>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d10d      	bne.n	80029c4 <menu+0x153c>
 80029a8:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <menu+0x15bc>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <menu+0x15e0>)
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <menu+0x15c0>)
 80029bc:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80029be:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <menu+0x15c4>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80029c4:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <menu+0x15c8>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b0b      	cmp	r3, #11
 80029ca:	f040 80b5 	bne.w	8002b38 <menu+0x16b0>
		if(dilSecim == 0) {
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <menu+0x15cc>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80029d6:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <menu+0x15e8>)
 80029d8:	2101      	movs	r1, #1
 80029da:	2001      	movs	r0, #1
 80029dc:	f7fd fe44 	bl	8000668 <lcd_print>
 80029e0:	e008      	b.n	80029f4 <menu+0x156c>
		} else if(dilSecim == 1) {
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <menu+0x15cc>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d104      	bne.n	80029f4 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <menu+0x15ec>)
 80029ec:	2101      	movs	r1, #1
 80029ee:	2001      	movs	r0, #1
 80029f0:	f7fd fe3a 	bl	8000668 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80029f4:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <menu+0x15f0>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <menu+0x15f4>)
 80029fe:	2101      	movs	r1, #1
 8002a00:	2002      	movs	r0, #2
 8002a02:	f7fd fe31 	bl	8000668 <lcd_print>
 8002a06:	e048      	b.n	8002a9a <menu+0x1612>
		} else if(kapi2Tip == 1) {
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <menu+0x15f0>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d13b      	bne.n	8002a88 <menu+0x1600>
			if(dilSecim == 0) {
 8002a10:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <menu+0x15cc>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <menu+0x15f8>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f7fd fe23 	bl	8000668 <lcd_print>
 8002a22:	e03a      	b.n	8002a9a <menu+0x1612>
			} else if(dilSecim == 1) {
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <menu+0x15cc>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d136      	bne.n	8002a9a <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 8002a2c:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <menu+0x15fc>)
 8002a2e:	2101      	movs	r1, #1
 8002a30:	2002      	movs	r0, #2
 8002a32:	f7fd fe19 	bl	8000668 <lcd_print>
 8002a36:	e030      	b.n	8002a9a <menu+0x1612>
 8002a38:	20000c52 	.word	0x20000c52
 8002a3c:	0800ddb8 	.word	0x0800ddb8
 8002a40:	40010800 	.word	0x40010800
 8002a44:	20000c78 	.word	0x20000c78
 8002a48:	20000b38 	.word	0x20000b38
 8002a4c:	20000c75 	.word	0x20000c75
 8002a50:	20000c49 	.word	0x20000c49
 8002a54:	20000c6a 	.word	0x20000c6a
 8002a58:	0800ddc8 	.word	0x0800ddc8
 8002a5c:	0800dddc 	.word	0x0800dddc
 8002a60:	0800ddec 	.word	0x0800ddec
 8002a64:	0800de00 	.word	0x0800de00
 8002a68:	20000c62 	.word	0x20000c62
 8002a6c:	20000bcc 	.word	0x20000bcc
 8002a70:	0800de10 	.word	0x0800de10
 8002a74:	0800de24 	.word	0x0800de24
 8002a78:	20000c53 	.word	0x20000c53
 8002a7c:	0800dd80 	.word	0x0800dd80
 8002a80:	0800dd94 	.word	0x0800dd94
 8002a84:	0800dda4 	.word	0x0800dda4
			}
		} else if(kapi2Tip == 2) {
 8002a88:	4b8a      	ldr	r3, [pc, #552]	; (8002cb4 <menu+0x182c>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d104      	bne.n	8002a9a <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8002a90:	4a89      	ldr	r2, [pc, #548]	; (8002cb8 <menu+0x1830>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	2002      	movs	r0, #2
 8002a96:	f7fd fde7 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	4887      	ldr	r0, [pc, #540]	; (8002cbc <menu+0x1834>)
 8002a9e:	f007 f8bd 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d115      	bne.n	8002ad4 <menu+0x164c>
 8002aa8:	4b85      	ldr	r3, [pc, #532]	; (8002cc0 <menu+0x1838>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	f083 0301 	eor.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00e      	beq.n	8002ad4 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 8002ab6:	4b7f      	ldr	r3, [pc, #508]	; (8002cb4 <menu+0x182c>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	3301      	adds	r3, #1
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b7d      	ldr	r3, [pc, #500]	; (8002cb4 <menu+0x182c>)
 8002ac0:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002ac2:	4b7c      	ldr	r3, [pc, #496]	; (8002cb4 <menu+0x182c>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d902      	bls.n	8002ad0 <menu+0x1648>
				kapi2Tip = 0;
 8002aca:	4b7a      	ldr	r3, [pc, #488]	; (8002cb4 <menu+0x182c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ad0:	f003 fa66 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad4:	2104      	movs	r1, #4
 8002ad6:	4879      	ldr	r0, [pc, #484]	; (8002cbc <menu+0x1834>)
 8002ad8:	f007 f8a0 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d115      	bne.n	8002b0e <menu+0x1686>
 8002ae2:	4b77      	ldr	r3, [pc, #476]	; (8002cc0 <menu+0x1838>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	f083 0301 	eor.w	r3, r3, #1
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00e      	beq.n	8002b0e <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 8002af0:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <menu+0x182c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	4b6e      	ldr	r3, [pc, #440]	; (8002cb4 <menu+0x182c>)
 8002afa:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002afc:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <menu+0x182c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d902      	bls.n	8002b0a <menu+0x1682>
		   		kapi2Tip = 2;
 8002b04:	4b6b      	ldr	r3, [pc, #428]	; (8002cb4 <menu+0x182c>)
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b0a:	f003 fa49 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0e:	2108      	movs	r1, #8
 8002b10:	486a      	ldr	r0, [pc, #424]	; (8002cbc <menu+0x1834>)
 8002b12:	f007 f883 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d10d      	bne.n	8002b38 <menu+0x16b0>
 8002b1c:	4b68      	ldr	r3, [pc, #416]	; (8002cc0 <menu+0x1838>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	f083 0301 	eor.w	r3, r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 8002b2a:	4b62      	ldr	r3, [pc, #392]	; (8002cb4 <menu+0x182c>)
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <menu+0x183c>)
 8002b30:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002b32:	4b65      	ldr	r3, [pc, #404]	; (8002cc8 <menu+0x1840>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002b38:	4b64      	ldr	r3, [pc, #400]	; (8002ccc <menu+0x1844>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	d17f      	bne.n	8002c40 <menu+0x17b8>
		if(dilSecim == 0) {
 8002b40:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <menu+0x1848>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002b48:	4a62      	ldr	r2, [pc, #392]	; (8002cd4 <menu+0x184c>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f7fd fd8b 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002b52:	4a61      	ldr	r2, [pc, #388]	; (8002cd8 <menu+0x1850>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	2002      	movs	r0, #2
 8002b58:	f7fd fd86 	bl	8000668 <lcd_print>
 8002b5c:	e00d      	b.n	8002b7a <menu+0x16f2>
		} else if(dilSecim == 1) {
 8002b5e:	4b5c      	ldr	r3, [pc, #368]	; (8002cd0 <menu+0x1848>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d109      	bne.n	8002b7a <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002b66:	4a5d      	ldr	r2, [pc, #372]	; (8002cdc <menu+0x1854>)
 8002b68:	2101      	movs	r1, #1
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f7fd fd7c 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002b70:	4a5b      	ldr	r2, [pc, #364]	; (8002ce0 <menu+0x1858>)
 8002b72:	2101      	movs	r1, #1
 8002b74:	2002      	movs	r0, #2
 8002b76:	f7fd fd77 	bl	8000668 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002b7a:	4b5a      	ldr	r3, [pc, #360]	; (8002ce4 <menu+0x185c>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	220a      	movs	r2, #10
 8002b80:	4959      	ldr	r1, [pc, #356]	; (8002ce8 <menu+0x1860>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f00a f876 	bl	800cc74 <itoa>
		lcd_print(2,16,snum);
 8002b88:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <menu+0x1860>)
 8002b8a:	2110      	movs	r1, #16
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	f7fd fd6b 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b92:	2102      	movs	r1, #2
 8002b94:	4849      	ldr	r0, [pc, #292]	; (8002cbc <menu+0x1834>)
 8002b96:	f007 f841 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d119      	bne.n	8002bd4 <menu+0x174c>
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <menu+0x1838>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	f083 0301 	eor.w	r3, r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <menu+0x174c>
 8002bae:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <menu+0x182c>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10e      	bne.n	8002bd4 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 8002bb6:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <menu+0x185c>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <menu+0x185c>)
 8002bc0:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002bc2:	4b48      	ldr	r3, [pc, #288]	; (8002ce4 <menu+0x185c>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b05      	cmp	r3, #5
 8002bc8:	d902      	bls.n	8002bd0 <menu+0x1748>
				kapi2AcSure = 0;
 8002bca:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <menu+0x185c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bd0:	f003 f9e6 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	4839      	ldr	r0, [pc, #228]	; (8002cbc <menu+0x1834>)
 8002bd8:	f007 f820 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d119      	bne.n	8002c16 <menu+0x178e>
 8002be2:	4b37      	ldr	r3, [pc, #220]	; (8002cc0 <menu+0x1838>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	f083 0301 	eor.w	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d012      	beq.n	8002c16 <menu+0x178e>
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <menu+0x182c>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10e      	bne.n	8002c16 <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 8002bf8:	4b3a      	ldr	r3, [pc, #232]	; (8002ce4 <menu+0x185c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <menu+0x185c>)
 8002c02:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002c04:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <menu+0x185c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b06      	cmp	r3, #6
 8002c0a:	d902      	bls.n	8002c12 <menu+0x178a>
		   		kapi2AcSure = 5;
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <menu+0x185c>)
 8002c0e:	2205      	movs	r2, #5
 8002c10:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c12:	f003 f9c5 	bl	8005fa0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c16:	2108      	movs	r1, #8
 8002c18:	4828      	ldr	r0, [pc, #160]	; (8002cbc <menu+0x1834>)
 8002c1a:	f006 ffff 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10d      	bne.n	8002c40 <menu+0x17b8>
 8002c24:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <menu+0x1838>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	f083 0301 	eor.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 8002c32:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <menu+0x185c>)
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <menu+0x183c>)
 8002c38:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <menu+0x1840>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <menu+0x1844>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b0d      	cmp	r3, #13
 8002c46:	f040 80b5 	bne.w	8002db4 <menu+0x192c>
		if(dilSecim == 0) {
 8002c4a:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <menu+0x1848>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002c52:	4a26      	ldr	r2, [pc, #152]	; (8002cec <menu+0x1864>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	2001      	movs	r0, #1
 8002c58:	f7fd fd06 	bl	8000668 <lcd_print>
 8002c5c:	e008      	b.n	8002c70 <menu+0x17e8>
		} else if(dilSecim == 1){
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <menu+0x1848>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d104      	bne.n	8002c70 <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <menu+0x1868>)
 8002c68:	2101      	movs	r1, #1
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f7fd fcfc 	bl	8000668 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <menu+0x186c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 8002c78:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <menu+0x1870>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f7fd fcf3 	bl	8000668 <lcd_print>
 8002c82:	e048      	b.n	8002d16 <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <menu+0x186c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d13b      	bne.n	8002d04 <menu+0x187c>
			if(dilSecim == 0) {
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <menu+0x1848>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8002c94:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <menu+0x1874>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	2002      	movs	r0, #2
 8002c9a:	f7fd fce5 	bl	8000668 <lcd_print>
 8002c9e:	e03a      	b.n	8002d16 <menu+0x188e>
			} else if(dilSecim == 1) {
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <menu+0x1848>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d136      	bne.n	8002d16 <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 8002ca8:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <menu+0x1878>)
 8002caa:	2101      	movs	r1, #1
 8002cac:	2002      	movs	r0, #2
 8002cae:	f7fd fcdb 	bl	8000668 <lcd_print>
 8002cb2:	e030      	b.n	8002d16 <menu+0x188e>
 8002cb4:	20000c53 	.word	0x20000c53
 8002cb8:	0800ddb8 	.word	0x0800ddb8
 8002cbc:	40010800 	.word	0x40010800
 8002cc0:	20000c78 	.word	0x20000c78
 8002cc4:	20000b38 	.word	0x20000b38
 8002cc8:	20000c75 	.word	0x20000c75
 8002ccc:	20000c49 	.word	0x20000c49
 8002cd0:	20000c6a 	.word	0x20000c6a
 8002cd4:	0800de38 	.word	0x0800de38
 8002cd8:	0800dddc 	.word	0x0800dddc
 8002cdc:	0800de4c 	.word	0x0800de4c
 8002ce0:	0800de00 	.word	0x0800de00
 8002ce4:	20000c63 	.word	0x20000c63
 8002ce8:	20000bcc 	.word	0x20000bcc
 8002cec:	0800de60 	.word	0x0800de60
 8002cf0:	0800de74 	.word	0x0800de74
 8002cf4:	20000c54 	.word	0x20000c54
 8002cf8:	0800dd80 	.word	0x0800dd80
 8002cfc:	0800dd94 	.word	0x0800dd94
 8002d00:	0800dda4 	.word	0x0800dda4
			}
		} else if(kapitablaTip == 2) {
 8002d04:	4b5b      	ldr	r3, [pc, #364]	; (8002e74 <menu+0x19ec>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d104      	bne.n	8002d16 <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 8002d0c:	4a5a      	ldr	r2, [pc, #360]	; (8002e78 <menu+0x19f0>)
 8002d0e:	2101      	movs	r1, #1
 8002d10:	2002      	movs	r0, #2
 8002d12:	f7fd fca9 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d16:	2102      	movs	r1, #2
 8002d18:	4858      	ldr	r0, [pc, #352]	; (8002e7c <menu+0x19f4>)
 8002d1a:	f006 ff7f 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d115      	bne.n	8002d50 <menu+0x18c8>
 8002d24:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <menu+0x19f8>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	f083 0301 	eor.w	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00e      	beq.n	8002d50 <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 8002d32:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <menu+0x19ec>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b4e      	ldr	r3, [pc, #312]	; (8002e74 <menu+0x19ec>)
 8002d3c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002d3e:	4b4d      	ldr	r3, [pc, #308]	; (8002e74 <menu+0x19ec>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d902      	bls.n	8002d4c <menu+0x18c4>
				kapitablaTip = 0;
 8002d46:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <menu+0x19ec>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d4c:	f003 f928 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d50:	2104      	movs	r1, #4
 8002d52:	484a      	ldr	r0, [pc, #296]	; (8002e7c <menu+0x19f4>)
 8002d54:	f006 ff62 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d115      	bne.n	8002d8a <menu+0x1902>
 8002d5e:	4b48      	ldr	r3, [pc, #288]	; (8002e80 <menu+0x19f8>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	f083 0301 	eor.w	r3, r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8002d6c:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <menu+0x19ec>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <menu+0x19ec>)
 8002d76:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002d78:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <menu+0x19ec>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d902      	bls.n	8002d86 <menu+0x18fe>
		   		kapitablaTip = 2;
 8002d80:	4b3c      	ldr	r3, [pc, #240]	; (8002e74 <menu+0x19ec>)
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d86:	f003 f90b 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d8a:	2108      	movs	r1, #8
 8002d8c:	483b      	ldr	r0, [pc, #236]	; (8002e7c <menu+0x19f4>)
 8002d8e:	f006 ff45 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10d      	bne.n	8002db4 <menu+0x192c>
 8002d98:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <menu+0x19f8>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f083 0301 	eor.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 8002da6:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <menu+0x19ec>)
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <menu+0x19fc>)
 8002dac:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002dae:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <menu+0x1a00>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002db4:	4b35      	ldr	r3, [pc, #212]	; (8002e8c <menu+0x1a04>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b0e      	cmp	r3, #14
 8002dba:	f040 80f2 	bne.w	8002fa2 <menu+0x1b1a>
		if(dilSecim == 0) {
 8002dbe:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <menu+0x1a08>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002dc6:	4a33      	ldr	r2, [pc, #204]	; (8002e94 <menu+0x1a0c>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f7fd fc4c 	bl	8000668 <lcd_print>
 8002dd0:	e008      	b.n	8002de4 <menu+0x195c>
		} else if(dilSecim == 1) {
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <menu+0x1a08>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d104      	bne.n	8002de4 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002dda:	4a2f      	ldr	r2, [pc, #188]	; (8002e98 <menu+0x1a10>)
 8002ddc:	2101      	movs	r1, #1
 8002dde:	2001      	movs	r0, #1
 8002de0:	f7fd fc42 	bl	8000668 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002de4:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <menu+0x1a14>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d113      	bne.n	8002e14 <menu+0x198c>
			if(dilSecim == 0){
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <menu+0x1a08>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 8002df4:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <menu+0x1a18>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	2002      	movs	r0, #2
 8002dfa:	f7fd fc35 	bl	8000668 <lcd_print>
 8002dfe:	e071      	b.n	8002ee4 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <menu+0x1a08>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d16d      	bne.n	8002ee4 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 8002e08:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <menu+0x1a1c>)
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	2002      	movs	r0, #2
 8002e0e:	f7fd fc2b 	bl	8000668 <lcd_print>
 8002e12:	e067      	b.n	8002ee4 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002e14:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <menu+0x1a14>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d112      	bne.n	8002e42 <menu+0x19ba>
			if(dilSecim == 0){
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <menu+0x1a08>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d104      	bne.n	8002e2e <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 8002e24:	4a20      	ldr	r2, [pc, #128]	; (8002ea8 <menu+0x1a20>)
 8002e26:	2101      	movs	r1, #1
 8002e28:	2002      	movs	r0, #2
 8002e2a:	f7fd fc1d 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <menu+0x1a08>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d156      	bne.n	8002ee4 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 8002e36:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <menu+0x1a24>)
 8002e38:	2101      	movs	r1, #1
 8002e3a:	2002      	movs	r0, #2
 8002e3c:	f7fd fc14 	bl	8000668 <lcd_print>
 8002e40:	e050      	b.n	8002ee4 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <menu+0x1a14>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d136      	bne.n	8002eb8 <menu+0x1a30>
			if(dilSecim == 0){
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <menu+0x1a08>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002e52:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <menu+0x1a28>)
 8002e54:	2101      	movs	r1, #1
 8002e56:	2002      	movs	r0, #2
 8002e58:	f7fd fc06 	bl	8000668 <lcd_print>
 8002e5c:	e042      	b.n	8002ee4 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <menu+0x1a08>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d13e      	bne.n	8002ee4 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 8002e66:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <menu+0x1a2c>)
 8002e68:	2101      	movs	r1, #1
 8002e6a:	2002      	movs	r0, #2
 8002e6c:	f7fd fbfc 	bl	8000668 <lcd_print>
 8002e70:	e038      	b.n	8002ee4 <menu+0x1a5c>
 8002e72:	bf00      	nop
 8002e74:	20000c54 	.word	0x20000c54
 8002e78:	0800ddb8 	.word	0x0800ddb8
 8002e7c:	40010800 	.word	0x40010800
 8002e80:	20000c78 	.word	0x20000c78
 8002e84:	20000b38 	.word	0x20000b38
 8002e88:	20000c75 	.word	0x20000c75
 8002e8c:	20000c49 	.word	0x20000c49
 8002e90:	20000c6a 	.word	0x20000c6a
 8002e94:	0800de88 	.word	0x0800de88
 8002e98:	0800de9c 	.word	0x0800de9c
 8002e9c:	20000c56 	.word	0x20000c56
 8002ea0:	0800deb0 	.word	0x0800deb0
 8002ea4:	0800dec0 	.word	0x0800dec0
 8002ea8:	0800ded0 	.word	0x0800ded0
 8002eac:	0800dee0 	.word	0x0800dee0
 8002eb0:	0800def0 	.word	0x0800def0
 8002eb4:	0800df04 	.word	0x0800df04
			}
		} else if(kapiTablaAcKonum == 3) {
 8002eb8:	4b9b      	ldr	r3, [pc, #620]	; (8003128 <menu+0x1ca0>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d111      	bne.n	8002ee4 <menu+0x1a5c>
			if(dilSecim == 0) {
 8002ec0:	4b9a      	ldr	r3, [pc, #616]	; (800312c <menu+0x1ca4>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 8002ec8:	4a99      	ldr	r2, [pc, #612]	; (8003130 <menu+0x1ca8>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f7fd fbcb 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8002ed2:	4b96      	ldr	r3, [pc, #600]	; (800312c <menu+0x1ca4>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d104      	bne.n	8002ee4 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 8002eda:	4a96      	ldr	r2, [pc, #600]	; (8003134 <menu+0x1cac>)
 8002edc:	2101      	movs	r1, #1
 8002ede:	2002      	movs	r0, #2
 8002ee0:	f7fd fbc2 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	4894      	ldr	r0, [pc, #592]	; (8003138 <menu+0x1cb0>)
 8002ee8:	f006 fe98 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d115      	bne.n	8002f1e <menu+0x1a96>
 8002ef2:	4b92      	ldr	r3, [pc, #584]	; (800313c <menu+0x1cb4>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	f083 0301 	eor.w	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00e      	beq.n	8002f1e <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002f00:	4b89      	ldr	r3, [pc, #548]	; (8003128 <menu+0x1ca0>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b87      	ldr	r3, [pc, #540]	; (8003128 <menu+0x1ca0>)
 8002f0a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002f0c:	4b86      	ldr	r3, [pc, #536]	; (8003128 <menu+0x1ca0>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d902      	bls.n	8002f1a <menu+0x1a92>
				kapiTablaAcKonum = 0;
 8002f14:	4b84      	ldr	r3, [pc, #528]	; (8003128 <menu+0x1ca0>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f1a:	f003 f841 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f1e:	2104      	movs	r1, #4
 8002f20:	4885      	ldr	r0, [pc, #532]	; (8003138 <menu+0x1cb0>)
 8002f22:	f006 fe7b 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d115      	bne.n	8002f58 <menu+0x1ad0>
 8002f2c:	4b83      	ldr	r3, [pc, #524]	; (800313c <menu+0x1cb4>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	f083 0301 	eor.w	r3, r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00e      	beq.n	8002f58 <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002f3a:	4b7b      	ldr	r3, [pc, #492]	; (8003128 <menu+0x1ca0>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b79      	ldr	r3, [pc, #484]	; (8003128 <menu+0x1ca0>)
 8002f44:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002f46:	4b78      	ldr	r3, [pc, #480]	; (8003128 <menu+0x1ca0>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d902      	bls.n	8002f54 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <menu+0x1ca0>)
 8002f50:	2202      	movs	r2, #2
 8002f52:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f54:	f003 f824 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f58:	2108      	movs	r1, #8
 8002f5a:	4877      	ldr	r0, [pc, #476]	; (8003138 <menu+0x1cb0>)
 8002f5c:	f006 fe5e 	bl	8009c1c <HAL_GPIO_ReadPin>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d11d      	bne.n	8002fa2 <menu+0x1b1a>
 8002f66:	4b75      	ldr	r3, [pc, #468]	; (800313c <menu+0x1cb4>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	f083 0301 	eor.w	r3, r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d016      	beq.n	8002fa2 <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 8002f74:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <menu+0x1ca0>)
 8002f76:	781a      	ldrb	r2, [r3, #0]
 8002f78:	4b71      	ldr	r3, [pc, #452]	; (8003140 <menu+0x1cb8>)
 8002f7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002f7e:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <menu+0x1ca0>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <menu+0x1b06>
 8002f86:	4b68      	ldr	r3, [pc, #416]	; (8003128 <menu+0x1ca0>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d106      	bne.n	8002f9c <menu+0x1b14>
				altLimit = 1;
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <menu+0x1cbc>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f94:	4b6b      	ldr	r3, [pc, #428]	; (8003144 <menu+0x1cbc>)
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	4b69      	ldr	r3, [pc, #420]	; (8003140 <menu+0x1cb8>)
 8002f9a:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002f9c:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <menu+0x1cc0>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002fa2:	4b6a      	ldr	r3, [pc, #424]	; (800314c <menu+0x1cc4>)
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b0f      	cmp	r3, #15
 8002fa8:	d17f      	bne.n	80030aa <menu+0x1c22>
		if(dilSecim == 0) {
 8002faa:	4b60      	ldr	r3, [pc, #384]	; (800312c <menu+0x1ca4>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10a      	bne.n	8002fc8 <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002fb2:	4a67      	ldr	r2, [pc, #412]	; (8003150 <menu+0x1cc8>)
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f7fd fb56 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002fbc:	4a65      	ldr	r2, [pc, #404]	; (8003154 <menu+0x1ccc>)
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2002      	movs	r0, #2
 8002fc2:	f7fd fb51 	bl	8000668 <lcd_print>
 8002fc6:	e00d      	b.n	8002fe4 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 8002fc8:	4b58      	ldr	r3, [pc, #352]	; (800312c <menu+0x1ca4>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d109      	bne.n	8002fe4 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002fd0:	4a61      	ldr	r2, [pc, #388]	; (8003158 <menu+0x1cd0>)
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f7fd fb47 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002fda:	4a60      	ldr	r2, [pc, #384]	; (800315c <menu+0x1cd4>)
 8002fdc:	2101      	movs	r1, #1
 8002fde:	2002      	movs	r0, #2
 8002fe0:	f7fd fb42 	bl	8000668 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002fe4:	4b5e      	ldr	r3, [pc, #376]	; (8003160 <menu+0x1cd8>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	220a      	movs	r2, #10
 8002fea:	495e      	ldr	r1, [pc, #376]	; (8003164 <menu+0x1cdc>)
 8002fec:	4618      	mov	r0, r3
 8002fee:	f009 fe41 	bl	800cc74 <itoa>
		lcd_print(2,16,snum);
 8002ff2:	4a5c      	ldr	r2, [pc, #368]	; (8003164 <menu+0x1cdc>)
 8002ff4:	2110      	movs	r1, #16
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	f7fd fb36 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	484e      	ldr	r0, [pc, #312]	; (8003138 <menu+0x1cb0>)
 8003000:	f006 fe0c 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003004:	4603      	mov	r3, r0
 8003006:	2b01      	cmp	r3, #1
 8003008:	d119      	bne.n	800303e <menu+0x1bb6>
 800300a:	4b4c      	ldr	r3, [pc, #304]	; (800313c <menu+0x1cb4>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	f083 0301 	eor.w	r3, r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d012      	beq.n	800303e <menu+0x1bb6>
 8003018:	4b53      	ldr	r3, [pc, #332]	; (8003168 <menu+0x1ce0>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10e      	bne.n	800303e <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003020:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <menu+0x1cd8>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b4d      	ldr	r3, [pc, #308]	; (8003160 <menu+0x1cd8>)
 800302a:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 800302c:	4b4c      	ldr	r3, [pc, #304]	; (8003160 <menu+0x1cd8>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b05      	cmp	r3, #5
 8003032:	d902      	bls.n	800303a <menu+0x1bb2>
				kapiTablaAcSure = 0;
 8003034:	4b4a      	ldr	r3, [pc, #296]	; (8003160 <menu+0x1cd8>)
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800303a:	f002 ffb1 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800303e:	2104      	movs	r1, #4
 8003040:	483d      	ldr	r0, [pc, #244]	; (8003138 <menu+0x1cb0>)
 8003042:	f006 fdeb 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003046:	4603      	mov	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	d119      	bne.n	8003080 <menu+0x1bf8>
 800304c:	4b3b      	ldr	r3, [pc, #236]	; (800313c <menu+0x1cb4>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <menu+0x1bf8>
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <menu+0x1ce0>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10e      	bne.n	8003080 <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003062:	4b3f      	ldr	r3, [pc, #252]	; (8003160 <menu+0x1cd8>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	3b01      	subs	r3, #1
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <menu+0x1cd8>)
 800306c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800306e:	4b3c      	ldr	r3, [pc, #240]	; (8003160 <menu+0x1cd8>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b06      	cmp	r3, #6
 8003074:	d902      	bls.n	800307c <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 8003076:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <menu+0x1cd8>)
 8003078:	2205      	movs	r2, #5
 800307a:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800307c:	f002 ff90 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003080:	2108      	movs	r1, #8
 8003082:	482d      	ldr	r0, [pc, #180]	; (8003138 <menu+0x1cb0>)
 8003084:	f006 fdca 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10d      	bne.n	80030aa <menu+0x1c22>
 800308e:	4b2b      	ldr	r3, [pc, #172]	; (800313c <menu+0x1cb4>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	f083 0301 	eor.w	r3, r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <menu+0x1cd8>)
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <menu+0x1cb8>)
 80030a2:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80030a4:	4b28      	ldr	r3, [pc, #160]	; (8003148 <menu+0x1cc0>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80030aa:	4b28      	ldr	r3, [pc, #160]	; (800314c <menu+0x1cc4>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b10      	cmp	r3, #16
 80030b0:	f040 80bc 	bne.w	800322c <menu+0x1da4>
		if(dilSecim == 0) {
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <menu+0x1ca4>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80030bc:	4a2b      	ldr	r2, [pc, #172]	; (800316c <menu+0x1ce4>)
 80030be:	2101      	movs	r1, #1
 80030c0:	2001      	movs	r0, #1
 80030c2:	f7fd fad1 	bl	8000668 <lcd_print>
 80030c6:	e008      	b.n	80030da <menu+0x1c52>
		} else if(dilSecim == 1) {
 80030c8:	4b18      	ldr	r3, [pc, #96]	; (800312c <menu+0x1ca4>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d104      	bne.n	80030da <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <menu+0x1ce8>)
 80030d2:	2101      	movs	r1, #1
 80030d4:	2001      	movs	r0, #1
 80030d6:	f7fd fac7 	bl	8000668 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <menu+0x1cec>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d113      	bne.n	800310a <menu+0x1c82>
			if(dilSecim == 0) {
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <menu+0x1ca4>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 80030ea:	4a11      	ldr	r2, [pc, #68]	; (8003130 <menu+0x1ca8>)
 80030ec:	2101      	movs	r1, #1
 80030ee:	2002      	movs	r0, #2
 80030f0:	f7fd faba 	bl	8000668 <lcd_print>
 80030f4:	e04b      	b.n	800318e <menu+0x1d06>
			} else if(dilSecim == 1) {
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <menu+0x1ca4>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d147      	bne.n	800318e <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 80030fe:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <menu+0x1cac>)
 8003100:	2101      	movs	r1, #1
 8003102:	2002      	movs	r0, #2
 8003104:	f7fd fab0 	bl	8000668 <lcd_print>
 8003108:	e041      	b.n	800318e <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <menu+0x1cec>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d13d      	bne.n	800318e <menu+0x1d06>
			if(dilSecim == 0) {
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <menu+0x1ca4>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d130      	bne.n	800317c <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 800311a:	4a17      	ldr	r2, [pc, #92]	; (8003178 <menu+0x1cf0>)
 800311c:	2101      	movs	r1, #1
 800311e:	2002      	movs	r0, #2
 8003120:	f7fd faa2 	bl	8000668 <lcd_print>
 8003124:	e033      	b.n	800318e <menu+0x1d06>
 8003126:	bf00      	nop
 8003128:	20000c56 	.word	0x20000c56
 800312c:	20000c6a 	.word	0x20000c6a
 8003130:	0800db78 	.word	0x0800db78
 8003134:	0800db8c 	.word	0x0800db8c
 8003138:	40010800 	.word	0x40010800
 800313c:	20000c78 	.word	0x20000c78
 8003140:	20000b38 	.word	0x20000b38
 8003144:	20000c4f 	.word	0x20000c4f
 8003148:	20000c75 	.word	0x20000c75
 800314c:	20000c49 	.word	0x20000c49
 8003150:	0800df18 	.word	0x0800df18
 8003154:	0800dddc 	.word	0x0800dddc
 8003158:	0800df2c 	.word	0x0800df2c
 800315c:	0800de00 	.word	0x0800de00
 8003160:	20000c64 	.word	0x20000c64
 8003164:	20000bcc 	.word	0x20000bcc
 8003168:	20000c54 	.word	0x20000c54
 800316c:	0800df40 	.word	0x0800df40
 8003170:	0800df54 	.word	0x0800df54
 8003174:	20000c57 	.word	0x20000c57
 8003178:	0800dbd8 	.word	0x0800dbd8
			} else if(dilSecim == 1) {
 800317c:	4b99      	ldr	r3, [pc, #612]	; (80033e4 <menu+0x1f5c>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d104      	bne.n	800318e <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 8003184:	4a98      	ldr	r2, [pc, #608]	; (80033e8 <menu+0x1f60>)
 8003186:	2101      	movs	r1, #1
 8003188:	2002      	movs	r0, #2
 800318a:	f7fd fa6d 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800318e:	2102      	movs	r1, #2
 8003190:	4896      	ldr	r0, [pc, #600]	; (80033ec <menu+0x1f64>)
 8003192:	f006 fd43 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d115      	bne.n	80031c8 <menu+0x1d40>
 800319c:	4b94      	ldr	r3, [pc, #592]	; (80033f0 <menu+0x1f68>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	f083 0301 	eor.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00e      	beq.n	80031c8 <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 80031aa:	4b92      	ldr	r3, [pc, #584]	; (80033f4 <menu+0x1f6c>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b90      	ldr	r3, [pc, #576]	; (80033f4 <menu+0x1f6c>)
 80031b4:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80031b6:	4b8f      	ldr	r3, [pc, #572]	; (80033f4 <menu+0x1f6c>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d902      	bls.n	80031c4 <menu+0x1d3c>
				yukariYavasLimit = 0;
 80031be:	4b8d      	ldr	r3, [pc, #564]	; (80033f4 <menu+0x1f6c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031c4:	f002 feec 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c8:	2104      	movs	r1, #4
 80031ca:	4888      	ldr	r0, [pc, #544]	; (80033ec <menu+0x1f64>)
 80031cc:	f006 fd26 	bl	8009c1c <HAL_GPIO_ReadPin>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d115      	bne.n	8003202 <menu+0x1d7a>
 80031d6:	4b86      	ldr	r3, [pc, #536]	; (80033f0 <menu+0x1f68>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	f083 0301 	eor.w	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00e      	beq.n	8003202 <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 80031e4:	4b83      	ldr	r3, [pc, #524]	; (80033f4 <menu+0x1f6c>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	4b81      	ldr	r3, [pc, #516]	; (80033f4 <menu+0x1f6c>)
 80031ee:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80031f0:	4b80      	ldr	r3, [pc, #512]	; (80033f4 <menu+0x1f6c>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <menu+0x1d76>
		   		yukariYavasLimit = 1;
 80031f8:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <menu+0x1f6c>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031fe:	f002 fecf 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003202:	2108      	movs	r1, #8
 8003204:	4879      	ldr	r0, [pc, #484]	; (80033ec <menu+0x1f64>)
 8003206:	f006 fd09 	bl	8009c1c <HAL_GPIO_ReadPin>
 800320a:	4603      	mov	r3, r0
 800320c:	2b01      	cmp	r3, #1
 800320e:	d10d      	bne.n	800322c <menu+0x1da4>
 8003210:	4b77      	ldr	r3, [pc, #476]	; (80033f0 <menu+0x1f68>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	f083 0301 	eor.w	r3, r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 800321e:	4b75      	ldr	r3, [pc, #468]	; (80033f4 <menu+0x1f6c>)
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <menu+0x1f70>)
 8003224:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003226:	4b75      	ldr	r3, [pc, #468]	; (80033fc <menu+0x1f74>)
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800322c:	4b74      	ldr	r3, [pc, #464]	; (8003400 <menu+0x1f78>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b11      	cmp	r3, #17
 8003232:	f040 80c3 	bne.w	80033bc <menu+0x1f34>
		if(dilSecim == 0) {
 8003236:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <menu+0x1f5c>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800323e:	4a71      	ldr	r2, [pc, #452]	; (8003404 <menu+0x1f7c>)
 8003240:	2101      	movs	r1, #1
 8003242:	2001      	movs	r0, #1
 8003244:	f7fd fa10 	bl	8000668 <lcd_print>
 8003248:	e008      	b.n	800325c <menu+0x1dd4>
		} else if(dilSecim == 1) {
 800324a:	4b66      	ldr	r3, [pc, #408]	; (80033e4 <menu+0x1f5c>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d104      	bne.n	800325c <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003252:	4a6d      	ldr	r2, [pc, #436]	; (8003408 <menu+0x1f80>)
 8003254:	2101      	movs	r1, #1
 8003256:	2001      	movs	r0, #1
 8003258:	f7fd fa06 	bl	8000668 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 800325c:	4b6b      	ldr	r3, [pc, #428]	; (800340c <menu+0x1f84>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d113      	bne.n	800328c <menu+0x1e04>
			if(dilSecim == 0){
 8003264:	4b5f      	ldr	r3, [pc, #380]	; (80033e4 <menu+0x1f5c>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 800326c:	4a68      	ldr	r2, [pc, #416]	; (8003410 <menu+0x1f88>)
 800326e:	2101      	movs	r1, #1
 8003270:	2002      	movs	r0, #2
 8003272:	f7fd f9f9 	bl	8000668 <lcd_print>
 8003276:	e038      	b.n	80032ea <menu+0x1e62>
			} else if(dilSecim == 1){
 8003278:	4b5a      	ldr	r3, [pc, #360]	; (80033e4 <menu+0x1f5c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d134      	bne.n	80032ea <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 8003280:	4a64      	ldr	r2, [pc, #400]	; (8003414 <menu+0x1f8c>)
 8003282:	2101      	movs	r1, #1
 8003284:	2002      	movs	r0, #2
 8003286:	f7fd f9ef 	bl	8000668 <lcd_print>
 800328a:	e02e      	b.n	80032ea <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800328c:	4b5f      	ldr	r3, [pc, #380]	; (800340c <menu+0x1f84>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d113      	bne.n	80032bc <menu+0x1e34>
			if(dilSecim == 0){
 8003294:	4b53      	ldr	r3, [pc, #332]	; (80033e4 <menu+0x1f5c>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 800329c:	4a5e      	ldr	r2, [pc, #376]	; (8003418 <menu+0x1f90>)
 800329e:	2101      	movs	r1, #1
 80032a0:	2002      	movs	r0, #2
 80032a2:	f7fd f9e1 	bl	8000668 <lcd_print>
 80032a6:	e020      	b.n	80032ea <menu+0x1e62>
			} else if(dilSecim == 1) {
 80032a8:	4b4e      	ldr	r3, [pc, #312]	; (80033e4 <menu+0x1f5c>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d11c      	bne.n	80032ea <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 80032b0:	4a5a      	ldr	r2, [pc, #360]	; (800341c <menu+0x1f94>)
 80032b2:	2101      	movs	r1, #1
 80032b4:	2002      	movs	r0, #2
 80032b6:	f7fd f9d7 	bl	8000668 <lcd_print>
 80032ba:	e016      	b.n	80032ea <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80032bc:	4b53      	ldr	r3, [pc, #332]	; (800340c <menu+0x1f84>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d112      	bne.n	80032ea <menu+0x1e62>
			if(dilSecim == 0) {
 80032c4:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <menu+0x1f5c>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 80032cc:	4a54      	ldr	r2, [pc, #336]	; (8003420 <menu+0x1f98>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	2002      	movs	r0, #2
 80032d2:	f7fd f9c9 	bl	8000668 <lcd_print>
 80032d6:	e008      	b.n	80032ea <menu+0x1e62>
			} else if(dilSecim == 1) {
 80032d8:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <menu+0x1f5c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d104      	bne.n	80032ea <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 80032e0:	4a50      	ldr	r2, [pc, #320]	; (8003424 <menu+0x1f9c>)
 80032e2:	2101      	movs	r1, #1
 80032e4:	2002      	movs	r0, #2
 80032e6:	f7fd f9bf 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ea:	2102      	movs	r1, #2
 80032ec:	483f      	ldr	r0, [pc, #252]	; (80033ec <menu+0x1f64>)
 80032ee:	f006 fc95 	bl	8009c1c <HAL_GPIO_ReadPin>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d115      	bne.n	8003324 <menu+0x1e9c>
 80032f8:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <menu+0x1f68>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	f083 0301 	eor.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00e      	beq.n	8003324 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <menu+0x1f84>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	3301      	adds	r3, #1
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4b3f      	ldr	r3, [pc, #252]	; (800340c <menu+0x1f84>)
 8003310:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003312:	4b3e      	ldr	r3, [pc, #248]	; (800340c <menu+0x1f84>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d902      	bls.n	8003320 <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 800331a:	4b3c      	ldr	r3, [pc, #240]	; (800340c <menu+0x1f84>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003320:	f002 fe3e 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003324:	2104      	movs	r1, #4
 8003326:	4831      	ldr	r0, [pc, #196]	; (80033ec <menu+0x1f64>)
 8003328:	f006 fc78 	bl	8009c1c <HAL_GPIO_ReadPin>
 800332c:	4603      	mov	r3, r0
 800332e:	2b01      	cmp	r3, #1
 8003330:	d115      	bne.n	800335e <menu+0x1ed6>
 8003332:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <menu+0x1f68>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	f083 0301 	eor.w	r3, r3, #1
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00e      	beq.n	800335e <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003340:	4b32      	ldr	r3, [pc, #200]	; (800340c <menu+0x1f84>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	3b01      	subs	r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4b30      	ldr	r3, [pc, #192]	; (800340c <menu+0x1f84>)
 800334a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 800334c:	4b2f      	ldr	r3, [pc, #188]	; (800340c <menu+0x1f84>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d902      	bls.n	800335a <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 8003354:	4b2d      	ldr	r3, [pc, #180]	; (800340c <menu+0x1f84>)
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800335a:	f002 fe21 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800335e:	2108      	movs	r1, #8
 8003360:	4822      	ldr	r0, [pc, #136]	; (80033ec <menu+0x1f64>)
 8003362:	f006 fc5b 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003366:	4603      	mov	r3, r0
 8003368:	2b01      	cmp	r3, #1
 800336a:	d127      	bne.n	80033bc <menu+0x1f34>
 800336c:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <menu+0x1f68>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	f083 0301 	eor.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <menu+0x1f84>)
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <menu+0x1f70>)
 8003380:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003382:	4b22      	ldr	r3, [pc, #136]	; (800340c <menu+0x1f84>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d003      	beq.n	8003392 <menu+0x1f0a>
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <menu+0x1f84>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d106      	bne.n	80033a0 <menu+0x1f18>
				calismaSekli = 0;
 8003392:	4b25      	ldr	r3, [pc, #148]	; (8003428 <menu+0x1fa0>)
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003398:	4b23      	ldr	r3, [pc, #140]	; (8003428 <menu+0x1fa0>)
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <menu+0x1f70>)
 800339e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <menu+0x1f84>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d106      	bne.n	80033b6 <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 80033a8:	4b20      	ldr	r3, [pc, #128]	; (800342c <menu+0x1fa4>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80033ae:	4b1f      	ldr	r3, [pc, #124]	; (800342c <menu+0x1fa4>)
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <menu+0x1f70>)
 80033b4:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <menu+0x1f74>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <menu+0x1f78>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b12      	cmp	r3, #18
 80033c2:	f040 80d5 	bne.w	8003570 <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <menu+0x1f84>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d13c      	bne.n	8003448 <menu+0x1fc0>
			if(dilSecim == 0) {
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <menu+0x1f5c>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d12e      	bne.n	8003434 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80033d6:	4a16      	ldr	r2, [pc, #88]	; (8003430 <menu+0x1fa8>)
 80033d8:	2101      	movs	r1, #1
 80033da:	2001      	movs	r0, #1
 80033dc:	f7fd f944 	bl	8000668 <lcd_print>
 80033e0:	e048      	b.n	8003474 <menu+0x1fec>
 80033e2:	bf00      	nop
 80033e4:	20000c6a 	.word	0x20000c6a
 80033e8:	0800dbec 	.word	0x0800dbec
 80033ec:	40010800 	.word	0x40010800
 80033f0:	20000c78 	.word	0x20000c78
 80033f4:	20000c57 	.word	0x20000c57
 80033f8:	20000b38 	.word	0x20000b38
 80033fc:	20000c75 	.word	0x20000c75
 8003400:	20000c49 	.word	0x20000c49
 8003404:	0800df68 	.word	0x0800df68
 8003408:	0800df7c 	.word	0x0800df7c
 800340c:	20000c58 	.word	0x20000c58
 8003410:	0800df90 	.word	0x0800df90
 8003414:	0800dfa0 	.word	0x0800dfa0
 8003418:	0800dfb0 	.word	0x0800dfb0
 800341c:	0800dfc0 	.word	0x0800dfc0
 8003420:	0800db78 	.word	0x0800db78
 8003424:	0800db8c 	.word	0x0800db8c
 8003428:	20000c4a 	.word	0x20000c4a
 800342c:	20000c5b 	.word	0x20000c5b
 8003430:	0800dfd0 	.word	0x0800dfd0
			} else if(dilSecim == 1) {
 8003434:	4b7b      	ldr	r3, [pc, #492]	; (8003624 <menu+0x219c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d11b      	bne.n	8003474 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 800343c:	4a7a      	ldr	r2, [pc, #488]	; (8003628 <menu+0x21a0>)
 800343e:	2101      	movs	r1, #1
 8003440:	2001      	movs	r0, #1
 8003442:	f7fd f911 	bl	8000668 <lcd_print>
 8003446:	e015      	b.n	8003474 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003448:	4b78      	ldr	r3, [pc, #480]	; (800362c <menu+0x21a4>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d111      	bne.n	8003474 <menu+0x1fec>
			if(dilSecim == 0){
 8003450:	4b74      	ldr	r3, [pc, #464]	; (8003624 <menu+0x219c>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003458:	4a75      	ldr	r2, [pc, #468]	; (8003630 <menu+0x21a8>)
 800345a:	2101      	movs	r1, #1
 800345c:	2001      	movs	r0, #1
 800345e:	f7fd f903 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 8003462:	4b70      	ldr	r3, [pc, #448]	; (8003624 <menu+0x219c>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d104      	bne.n	8003474 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800346a:	4a72      	ldr	r2, [pc, #456]	; (8003634 <menu+0x21ac>)
 800346c:	2101      	movs	r1, #1
 800346e:	2001      	movs	r0, #1
 8003470:	f7fd f8fa 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003474:	4b70      	ldr	r3, [pc, #448]	; (8003638 <menu+0x21b0>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d113      	bne.n	80034a4 <menu+0x201c>
			if(dilSecim == 0) {
 800347c:	4b69      	ldr	r3, [pc, #420]	; (8003624 <menu+0x219c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 8003484:	4a6d      	ldr	r2, [pc, #436]	; (800363c <menu+0x21b4>)
 8003486:	2101      	movs	r1, #1
 8003488:	2002      	movs	r0, #2
 800348a:	f7fd f8ed 	bl	8000668 <lcd_print>
 800348e:	e020      	b.n	80034d2 <menu+0x204a>
			} else if(dilSecim == 1){
 8003490:	4b64      	ldr	r3, [pc, #400]	; (8003624 <menu+0x219c>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d11c      	bne.n	80034d2 <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 8003498:	4a69      	ldr	r2, [pc, #420]	; (8003640 <menu+0x21b8>)
 800349a:	2101      	movs	r1, #1
 800349c:	2002      	movs	r0, #2
 800349e:	f7fd f8e3 	bl	8000668 <lcd_print>
 80034a2:	e016      	b.n	80034d2 <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80034a4:	4b64      	ldr	r3, [pc, #400]	; (8003638 <menu+0x21b0>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d112      	bne.n	80034d2 <menu+0x204a>
			if(dilSecim == 0){
 80034ac:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <menu+0x219c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 80034b4:	4a63      	ldr	r2, [pc, #396]	; (8003644 <menu+0x21bc>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	2002      	movs	r0, #2
 80034ba:	f7fd f8d5 	bl	8000668 <lcd_print>
 80034be:	e008      	b.n	80034d2 <menu+0x204a>
			} else if(dilSecim == 1){
 80034c0:	4b58      	ldr	r3, [pc, #352]	; (8003624 <menu+0x219c>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d104      	bne.n	80034d2 <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 80034c8:	4a5f      	ldr	r2, [pc, #380]	; (8003648 <menu+0x21c0>)
 80034ca:	2101      	movs	r1, #1
 80034cc:	2002      	movs	r0, #2
 80034ce:	f7fd f8cb 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034d2:	2102      	movs	r1, #2
 80034d4:	485d      	ldr	r0, [pc, #372]	; (800364c <menu+0x21c4>)
 80034d6:	f006 fba1 	bl	8009c1c <HAL_GPIO_ReadPin>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d115      	bne.n	800350c <menu+0x2084>
 80034e0:	4b5b      	ldr	r3, [pc, #364]	; (8003650 <menu+0x21c8>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	f083 0301 	eor.w	r3, r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00e      	beq.n	800350c <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80034ee:	4b52      	ldr	r3, [pc, #328]	; (8003638 <menu+0x21b0>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4b50      	ldr	r3, [pc, #320]	; (8003638 <menu+0x21b0>)
 80034f8:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80034fa:	4b4f      	ldr	r3, [pc, #316]	; (8003638 <menu+0x21b0>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d902      	bls.n	8003508 <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 8003502:	4b4d      	ldr	r3, [pc, #308]	; (8003638 <menu+0x21b0>)
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003508:	f002 fd4a 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800350c:	2104      	movs	r1, #4
 800350e:	484f      	ldr	r0, [pc, #316]	; (800364c <menu+0x21c4>)
 8003510:	f006 fb84 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003514:	4603      	mov	r3, r0
 8003516:	2b01      	cmp	r3, #1
 8003518:	d115      	bne.n	8003546 <menu+0x20be>
 800351a:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <menu+0x21c8>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	f083 0301 	eor.w	r3, r3, #1
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00e      	beq.n	8003546 <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003528:	4b43      	ldr	r3, [pc, #268]	; (8003638 <menu+0x21b0>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	3b01      	subs	r3, #1
 800352e:	b2da      	uxtb	r2, r3
 8003530:	4b41      	ldr	r3, [pc, #260]	; (8003638 <menu+0x21b0>)
 8003532:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003534:	4b40      	ldr	r3, [pc, #256]	; (8003638 <menu+0x21b0>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 800353c:	4b3e      	ldr	r3, [pc, #248]	; (8003638 <menu+0x21b0>)
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003542:	f002 fd2d 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003546:	2108      	movs	r1, #8
 8003548:	4840      	ldr	r0, [pc, #256]	; (800364c <menu+0x21c4>)
 800354a:	f006 fb67 	bl	8009c1c <HAL_GPIO_ReadPin>
 800354e:	4603      	mov	r3, r0
 8003550:	2b01      	cmp	r3, #1
 8003552:	d10d      	bne.n	8003570 <menu+0x20e8>
 8003554:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <menu+0x21c8>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	f083 0301 	eor.w	r3, r3, #1
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 8003562:	4b35      	ldr	r3, [pc, #212]	; (8003638 <menu+0x21b0>)
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <menu+0x21cc>)
 8003568:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <menu+0x21d0>)
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003570:	4b3a      	ldr	r3, [pc, #232]	; (800365c <menu+0x21d4>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b13      	cmp	r3, #19
 8003576:	f040 80d5 	bne.w	8003724 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 800357a:	4b2c      	ldr	r3, [pc, #176]	; (800362c <menu+0x21a4>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d113      	bne.n	80035aa <menu+0x2122>
			if(dilSecim == 0) {
 8003582:	4b28      	ldr	r3, [pc, #160]	; (8003624 <menu+0x219c>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800358a:	4a35      	ldr	r2, [pc, #212]	; (8003660 <menu+0x21d8>)
 800358c:	2101      	movs	r1, #1
 800358e:	2001      	movs	r0, #1
 8003590:	f7fd f86a 	bl	8000668 <lcd_print>
 8003594:	e01f      	b.n	80035d6 <menu+0x214e>
			} else if(dilSecim == 1) {
 8003596:	4b23      	ldr	r3, [pc, #140]	; (8003624 <menu+0x219c>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d11b      	bne.n	80035d6 <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800359e:	4a31      	ldr	r2, [pc, #196]	; (8003664 <menu+0x21dc>)
 80035a0:	2101      	movs	r1, #1
 80035a2:	2001      	movs	r0, #1
 80035a4:	f7fd f860 	bl	8000668 <lcd_print>
 80035a8:	e015      	b.n	80035d6 <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <menu+0x21a4>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d111      	bne.n	80035d6 <menu+0x214e>
			if(dilSecim == 0) {
 80035b2:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <menu+0x219c>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d104      	bne.n	80035c4 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80035ba:	4a2b      	ldr	r2, [pc, #172]	; (8003668 <menu+0x21e0>)
 80035bc:	2101      	movs	r1, #1
 80035be:	2001      	movs	r0, #1
 80035c0:	f7fd f852 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <menu+0x219c>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d104      	bne.n	80035d6 <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80035cc:	4a27      	ldr	r2, [pc, #156]	; (800366c <menu+0x21e4>)
 80035ce:	2101      	movs	r1, #1
 80035d0:	2001      	movs	r0, #1
 80035d2:	f7fd f849 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80035d6:	4b26      	ldr	r3, [pc, #152]	; (8003670 <menu+0x21e8>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d113      	bne.n	8003606 <menu+0x217e>
			if(dilSecim == 0) {
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <menu+0x219c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 80035e6:	4a15      	ldr	r2, [pc, #84]	; (800363c <menu+0x21b4>)
 80035e8:	2101      	movs	r1, #1
 80035ea:	2002      	movs	r0, #2
 80035ec:	f7fd f83c 	bl	8000668 <lcd_print>
 80035f0:	e049      	b.n	8003686 <menu+0x21fe>
			} else if(dilSecim == 1) {
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <menu+0x219c>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d145      	bne.n	8003686 <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 80035fa:	4a11      	ldr	r2, [pc, #68]	; (8003640 <menu+0x21b8>)
 80035fc:	2101      	movs	r1, #1
 80035fe:	2002      	movs	r0, #2
 8003600:	f7fd f832 	bl	8000668 <lcd_print>
 8003604:	e03f      	b.n	8003686 <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <menu+0x21e8>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d13b      	bne.n	8003686 <menu+0x21fe>
			if(dilSecim == 0) {
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <menu+0x219c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d12e      	bne.n	8003674 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 8003616:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <menu+0x21bc>)
 8003618:	2101      	movs	r1, #1
 800361a:	2002      	movs	r0, #2
 800361c:	f7fd f824 	bl	8000668 <lcd_print>
 8003620:	e031      	b.n	8003686 <menu+0x21fe>
 8003622:	bf00      	nop
 8003624:	20000c6a 	.word	0x20000c6a
 8003628:	0800dfe4 	.word	0x0800dfe4
 800362c:	20000c58 	.word	0x20000c58
 8003630:	0800dff4 	.word	0x0800dff4
 8003634:	0800e008 	.word	0x0800e008
 8003638:	20000c59 	.word	0x20000c59
 800363c:	0800db78 	.word	0x0800db78
 8003640:	0800db8c 	.word	0x0800db8c
 8003644:	0800dbd8 	.word	0x0800dbd8
 8003648:	0800dbec 	.word	0x0800dbec
 800364c:	40010800 	.word	0x40010800
 8003650:	20000c78 	.word	0x20000c78
 8003654:	20000b38 	.word	0x20000b38
 8003658:	20000c75 	.word	0x20000c75
 800365c:	20000c49 	.word	0x20000c49
 8003660:	0800e01c 	.word	0x0800e01c
 8003664:	0800e030 	.word	0x0800e030
 8003668:	0800e044 	.word	0x0800e044
 800366c:	0800e058 	.word	0x0800e058
 8003670:	20000c5a 	.word	0x20000c5a
			} else if(dilSecim == 1) {
 8003674:	4b90      	ldr	r3, [pc, #576]	; (80038b8 <menu+0x2430>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d104      	bne.n	8003686 <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 800367c:	4a8f      	ldr	r2, [pc, #572]	; (80038bc <menu+0x2434>)
 800367e:	2101      	movs	r1, #1
 8003680:	2002      	movs	r0, #2
 8003682:	f7fc fff1 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003686:	2102      	movs	r1, #2
 8003688:	488d      	ldr	r0, [pc, #564]	; (80038c0 <menu+0x2438>)
 800368a:	f006 fac7 	bl	8009c1c <HAL_GPIO_ReadPin>
 800368e:	4603      	mov	r3, r0
 8003690:	2b01      	cmp	r3, #1
 8003692:	d115      	bne.n	80036c0 <menu+0x2238>
 8003694:	4b8b      	ldr	r3, [pc, #556]	; (80038c4 <menu+0x243c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	f083 0301 	eor.w	r3, r3, #1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00e      	beq.n	80036c0 <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80036a2:	4b89      	ldr	r3, [pc, #548]	; (80038c8 <menu+0x2440>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4b87      	ldr	r3, [pc, #540]	; (80038c8 <menu+0x2440>)
 80036ac:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80036ae:	4b86      	ldr	r3, [pc, #536]	; (80038c8 <menu+0x2440>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d902      	bls.n	80036bc <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 80036b6:	4b84      	ldr	r3, [pc, #528]	; (80038c8 <menu+0x2440>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036bc:	f002 fc70 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036c0:	2104      	movs	r1, #4
 80036c2:	487f      	ldr	r0, [pc, #508]	; (80038c0 <menu+0x2438>)
 80036c4:	f006 faaa 	bl	8009c1c <HAL_GPIO_ReadPin>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d115      	bne.n	80036fa <menu+0x2272>
 80036ce:	4b7d      	ldr	r3, [pc, #500]	; (80038c4 <menu+0x243c>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	f083 0301 	eor.w	r3, r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80036dc:	4b7a      	ldr	r3, [pc, #488]	; (80038c8 <menu+0x2440>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4b78      	ldr	r3, [pc, #480]	; (80038c8 <menu+0x2440>)
 80036e6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80036e8:	4b77      	ldr	r3, [pc, #476]	; (80038c8 <menu+0x2440>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 80036f0:	4b75      	ldr	r3, [pc, #468]	; (80038c8 <menu+0x2440>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036f6:	f002 fc53 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036fa:	2108      	movs	r1, #8
 80036fc:	4870      	ldr	r0, [pc, #448]	; (80038c0 <menu+0x2438>)
 80036fe:	f006 fa8d 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003702:	4603      	mov	r3, r0
 8003704:	2b01      	cmp	r3, #1
 8003706:	d10d      	bne.n	8003724 <menu+0x229c>
 8003708:	4b6e      	ldr	r3, [pc, #440]	; (80038c4 <menu+0x243c>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	f083 0301 	eor.w	r3, r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003716:	4b6c      	ldr	r3, [pc, #432]	; (80038c8 <menu+0x2440>)
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <menu+0x2444>)
 800371c:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800371e:	4b6c      	ldr	r3, [pc, #432]	; (80038d0 <menu+0x2448>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003724:	4b6b      	ldr	r3, [pc, #428]	; (80038d4 <menu+0x244c>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b14      	cmp	r3, #20
 800372a:	f040 80b5 	bne.w	8003898 <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 800372e:	4b6a      	ldr	r3, [pc, #424]	; (80038d8 <menu+0x2450>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d113      	bne.n	800375e <menu+0x22d6>
			if(dilSecim == 0) {
 8003736:	4b60      	ldr	r3, [pc, #384]	; (80038b8 <menu+0x2430>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800373e:	4a67      	ldr	r2, [pc, #412]	; (80038dc <menu+0x2454>)
 8003740:	2101      	movs	r1, #1
 8003742:	2001      	movs	r0, #1
 8003744:	f7fc ff90 	bl	8000668 <lcd_print>
 8003748:	e020      	b.n	800378c <menu+0x2304>
			} else if(dilSecim == 1) {
 800374a:	4b5b      	ldr	r3, [pc, #364]	; (80038b8 <menu+0x2430>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d11c      	bne.n	800378c <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003752:	4a63      	ldr	r2, [pc, #396]	; (80038e0 <menu+0x2458>)
 8003754:	2101      	movs	r1, #1
 8003756:	2001      	movs	r0, #1
 8003758:	f7fc ff86 	bl	8000668 <lcd_print>
 800375c:	e016      	b.n	800378c <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800375e:	4b5e      	ldr	r3, [pc, #376]	; (80038d8 <menu+0x2450>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d112      	bne.n	800378c <menu+0x2304>
			if(dilSecim == 0) {
 8003766:	4b54      	ldr	r3, [pc, #336]	; (80038b8 <menu+0x2430>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800376e:	4a5d      	ldr	r2, [pc, #372]	; (80038e4 <menu+0x245c>)
 8003770:	2101      	movs	r1, #1
 8003772:	2001      	movs	r0, #1
 8003774:	f7fc ff78 	bl	8000668 <lcd_print>
 8003778:	e008      	b.n	800378c <menu+0x2304>
			} else if(dilSecim == 1) {
 800377a:	4b4f      	ldr	r3, [pc, #316]	; (80038b8 <menu+0x2430>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d104      	bne.n	800378c <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003782:	4a59      	ldr	r2, [pc, #356]	; (80038e8 <menu+0x2460>)
 8003784:	2101      	movs	r1, #1
 8003786:	2001      	movs	r0, #1
 8003788:	f7fc ff6e 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 800378c:	4b57      	ldr	r3, [pc, #348]	; (80038ec <menu+0x2464>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d113      	bne.n	80037bc <menu+0x2334>
			if(dilSecim == 0) {
 8003794:	4b48      	ldr	r3, [pc, #288]	; (80038b8 <menu+0x2430>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d105      	bne.n	80037a8 <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 800379c:	4a54      	ldr	r2, [pc, #336]	; (80038f0 <menu+0x2468>)
 800379e:	2101      	movs	r1, #1
 80037a0:	2002      	movs	r0, #2
 80037a2:	f7fc ff61 	bl	8000668 <lcd_print>
 80037a6:	e020      	b.n	80037ea <menu+0x2362>
			} else if(dilSecim == 1) {
 80037a8:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <menu+0x2430>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d11c      	bne.n	80037ea <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 80037b0:	4a50      	ldr	r2, [pc, #320]	; (80038f4 <menu+0x246c>)
 80037b2:	2101      	movs	r1, #1
 80037b4:	2002      	movs	r0, #2
 80037b6:	f7fc ff57 	bl	8000668 <lcd_print>
 80037ba:	e016      	b.n	80037ea <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 80037bc:	4b4b      	ldr	r3, [pc, #300]	; (80038ec <menu+0x2464>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d112      	bne.n	80037ea <menu+0x2362>
			if(dilSecim == 0) {
 80037c4:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <menu+0x2430>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 80037cc:	4a4a      	ldr	r2, [pc, #296]	; (80038f8 <menu+0x2470>)
 80037ce:	2101      	movs	r1, #1
 80037d0:	2002      	movs	r0, #2
 80037d2:	f7fc ff49 	bl	8000668 <lcd_print>
 80037d6:	e008      	b.n	80037ea <menu+0x2362>
			} else if(dilSecim == 1) {
 80037d8:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <menu+0x2430>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d104      	bne.n	80037ea <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 80037e0:	4a46      	ldr	r2, [pc, #280]	; (80038fc <menu+0x2474>)
 80037e2:	2101      	movs	r1, #1
 80037e4:	2002      	movs	r0, #2
 80037e6:	f7fc ff3f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80037ea:	2102      	movs	r1, #2
 80037ec:	4834      	ldr	r0, [pc, #208]	; (80038c0 <menu+0x2438>)
 80037ee:	f006 fa15 	bl	8009c1c <HAL_GPIO_ReadPin>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d119      	bne.n	800382c <menu+0x23a4>
 80037f8:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <menu+0x243c>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	f083 0301 	eor.w	r3, r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d012      	beq.n	800382c <menu+0x23a4>
 8003806:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <menu+0x2450>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d10e      	bne.n	800382c <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800380e:	4b37      	ldr	r3, [pc, #220]	; (80038ec <menu+0x2464>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4b35      	ldr	r3, [pc, #212]	; (80038ec <menu+0x2464>)
 8003818:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800381a:	4b34      	ldr	r3, [pc, #208]	; (80038ec <menu+0x2464>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d902      	bls.n	8003828 <menu+0x23a0>
				devirmeSilindirTipi = 0;
 8003822:	4b32      	ldr	r3, [pc, #200]	; (80038ec <menu+0x2464>)
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003828:	f002 fbba 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800382c:	2104      	movs	r1, #4
 800382e:	4824      	ldr	r0, [pc, #144]	; (80038c0 <menu+0x2438>)
 8003830:	f006 f9f4 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003834:	4603      	mov	r3, r0
 8003836:	2b01      	cmp	r3, #1
 8003838:	d119      	bne.n	800386e <menu+0x23e6>
 800383a:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <menu+0x243c>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	f083 0301 	eor.w	r3, r3, #1
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d012      	beq.n	800386e <menu+0x23e6>
 8003848:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <menu+0x2450>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d10e      	bne.n	800386e <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003850:	4b26      	ldr	r3, [pc, #152]	; (80038ec <menu+0x2464>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	b2da      	uxtb	r2, r3
 8003858:	4b24      	ldr	r3, [pc, #144]	; (80038ec <menu+0x2464>)
 800385a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <menu+0x2464>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <menu+0x2464>)
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800386a:	f002 fb99 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800386e:	2108      	movs	r1, #8
 8003870:	4813      	ldr	r0, [pc, #76]	; (80038c0 <menu+0x2438>)
 8003872:	f006 f9d3 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003876:	4603      	mov	r3, r0
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10d      	bne.n	8003898 <menu+0x2410>
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <menu+0x243c>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	f083 0301 	eor.w	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 800388a:	4b18      	ldr	r3, [pc, #96]	; (80038ec <menu+0x2464>)
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <menu+0x2444>)
 8003890:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <menu+0x2448>)
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <menu+0x244c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b15      	cmp	r3, #21
 800389e:	f040 80c2 	bne.w	8003a26 <menu+0x259e>
		if(dilSecim == 0) {
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <menu+0x2430>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d12c      	bne.n	8003904 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80038aa:	4a15      	ldr	r2, [pc, #84]	; (8003900 <menu+0x2478>)
 80038ac:	2101      	movs	r1, #1
 80038ae:	2001      	movs	r0, #1
 80038b0:	f7fc feda 	bl	8000668 <lcd_print>
 80038b4:	e02f      	b.n	8003916 <menu+0x248e>
 80038b6:	bf00      	nop
 80038b8:	20000c6a 	.word	0x20000c6a
 80038bc:	0800dbec 	.word	0x0800dbec
 80038c0:	40010800 	.word	0x40010800
 80038c4:	20000c78 	.word	0x20000c78
 80038c8:	20000c5a 	.word	0x20000c5a
 80038cc:	20000b38 	.word	0x20000b38
 80038d0:	20000c75 	.word	0x20000c75
 80038d4:	20000c49 	.word	0x20000c49
 80038d8:	20000c58 	.word	0x20000c58
 80038dc:	0800e06c 	.word	0x0800e06c
 80038e0:	0800e080 	.word	0x0800e080
 80038e4:	0800e094 	.word	0x0800e094
 80038e8:	0800e0a8 	.word	0x0800e0a8
 80038ec:	20000c5b 	.word	0x20000c5b
 80038f0:	0800e0bc 	.word	0x0800e0bc
 80038f4:	0800e0d0 	.word	0x0800e0d0
 80038f8:	0800e0e0 	.word	0x0800e0e0
 80038fc:	0800e0f4 	.word	0x0800e0f4
 8003900:	0800e104 	.word	0x0800e104
		} else if(dilSecim == 1) {
 8003904:	4b9c      	ldr	r3, [pc, #624]	; (8003b78 <menu+0x26f0>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d104      	bne.n	8003916 <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 800390c:	4a9b      	ldr	r2, [pc, #620]	; (8003b7c <menu+0x26f4>)
 800390e:	2101      	movs	r1, #1
 8003910:	2001      	movs	r0, #1
 8003912:	f7fc fea9 	bl	8000668 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003916:	4b9a      	ldr	r3, [pc, #616]	; (8003b80 <menu+0x26f8>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d112      	bne.n	8003944 <menu+0x24bc>
			if(dilSecim == 0) {
 800391e:	4b96      	ldr	r3, [pc, #600]	; (8003b78 <menu+0x26f0>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d104      	bne.n	8003930 <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 8003926:	4a97      	ldr	r2, [pc, #604]	; (8003b84 <menu+0x26fc>)
 8003928:	2101      	movs	r1, #1
 800392a:	2002      	movs	r0, #2
 800392c:	f7fc fe9c 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003930:	4b91      	ldr	r3, [pc, #580]	; (8003b78 <menu+0x26f0>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d11c      	bne.n	8003972 <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 8003938:	4a93      	ldr	r2, [pc, #588]	; (8003b88 <menu+0x2700>)
 800393a:	2101      	movs	r1, #1
 800393c:	2002      	movs	r0, #2
 800393e:	f7fc fe93 	bl	8000668 <lcd_print>
 8003942:	e016      	b.n	8003972 <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 8003944:	4b8e      	ldr	r3, [pc, #568]	; (8003b80 <menu+0x26f8>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d112      	bne.n	8003972 <menu+0x24ea>
			if(dilSecim == 0) {
 800394c:	4b8a      	ldr	r3, [pc, #552]	; (8003b78 <menu+0x26f0>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 8003954:	4a8d      	ldr	r2, [pc, #564]	; (8003b8c <menu+0x2704>)
 8003956:	2101      	movs	r1, #1
 8003958:	2002      	movs	r0, #2
 800395a:	f7fc fe85 	bl	8000668 <lcd_print>
 800395e:	e008      	b.n	8003972 <menu+0x24ea>
			} else if(dilSecim == 1) {
 8003960:	4b85      	ldr	r3, [pc, #532]	; (8003b78 <menu+0x26f0>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d104      	bne.n	8003972 <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 8003968:	4a89      	ldr	r2, [pc, #548]	; (8003b90 <menu+0x2708>)
 800396a:	2101      	movs	r1, #1
 800396c:	2002      	movs	r0, #2
 800396e:	f7fc fe7b 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003972:	2102      	movs	r1, #2
 8003974:	4887      	ldr	r0, [pc, #540]	; (8003b94 <menu+0x270c>)
 8003976:	f006 f951 	bl	8009c1c <HAL_GPIO_ReadPin>
 800397a:	4603      	mov	r3, r0
 800397c:	2b01      	cmp	r3, #1
 800397e:	d115      	bne.n	80039ac <menu+0x2524>
 8003980:	4b85      	ldr	r3, [pc, #532]	; (8003b98 <menu+0x2710>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	f083 0301 	eor.w	r3, r3, #1
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00e      	beq.n	80039ac <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 800398e:	4b7c      	ldr	r3, [pc, #496]	; (8003b80 <menu+0x26f8>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	3301      	adds	r3, #1
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b7a      	ldr	r3, [pc, #488]	; (8003b80 <menu+0x26f8>)
 8003998:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800399a:	4b79      	ldr	r3, [pc, #484]	; (8003b80 <menu+0x26f8>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d902      	bls.n	80039a8 <menu+0x2520>
				platformSilindirTipi = 0;
 80039a2:	4b77      	ldr	r3, [pc, #476]	; (8003b80 <menu+0x26f8>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039a8:	f002 fafa 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ac:	2104      	movs	r1, #4
 80039ae:	4879      	ldr	r0, [pc, #484]	; (8003b94 <menu+0x270c>)
 80039b0:	f006 f934 	bl	8009c1c <HAL_GPIO_ReadPin>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d115      	bne.n	80039e6 <menu+0x255e>
 80039ba:	4b77      	ldr	r3, [pc, #476]	; (8003b98 <menu+0x2710>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	f083 0301 	eor.w	r3, r3, #1
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00e      	beq.n	80039e6 <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 80039c8:	4b6d      	ldr	r3, [pc, #436]	; (8003b80 <menu+0x26f8>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	4b6b      	ldr	r3, [pc, #428]	; (8003b80 <menu+0x26f8>)
 80039d2:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80039d4:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <menu+0x26f8>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <menu+0x255a>
		   		platformSilindirTipi = 1;
 80039dc:	4b68      	ldr	r3, [pc, #416]	; (8003b80 <menu+0x26f8>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039e2:	f002 fadd 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e6:	2108      	movs	r1, #8
 80039e8:	486a      	ldr	r0, [pc, #424]	; (8003b94 <menu+0x270c>)
 80039ea:	f006 f917 	bl	8009c1c <HAL_GPIO_ReadPin>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d118      	bne.n	8003a26 <menu+0x259e>
 80039f4:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <menu+0x2710>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	f083 0301 	eor.w	r3, r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d011      	beq.n	8003a26 <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 8003a02:	4b5f      	ldr	r3, [pc, #380]	; (8003b80 <menu+0x26f8>)
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	4b65      	ldr	r3, [pc, #404]	; (8003b9c <menu+0x2714>)
 8003a08:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003a0a:	4b5d      	ldr	r3, [pc, #372]	; (8003b80 <menu+0x26f8>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d106      	bne.n	8003a20 <menu+0x2598>
				altLimit = 1;
 8003a12:	4b63      	ldr	r3, [pc, #396]	; (8003ba0 <menu+0x2718>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003a18:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <menu+0x2718>)
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	4b5f      	ldr	r3, [pc, #380]	; (8003b9c <menu+0x2714>)
 8003a1e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003a20:	4b60      	ldr	r3, [pc, #384]	; (8003ba4 <menu+0x271c>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003a26:	4b60      	ldr	r3, [pc, #384]	; (8003ba8 <menu+0x2720>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b16      	cmp	r3, #22
 8003a2c:	f040 8081 	bne.w	8003b32 <menu+0x26aa>
		if(dilSecim == 0) {
 8003a30:	4b51      	ldr	r3, [pc, #324]	; (8003b78 <menu+0x26f0>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003a38:	4a5c      	ldr	r2, [pc, #368]	; (8003bac <menu+0x2724>)
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	f7fc fe13 	bl	8000668 <lcd_print>
 8003a42:	e008      	b.n	8003a56 <menu+0x25ce>
		} else if(dilSecim == 1) {
 8003a44:	4b4c      	ldr	r3, [pc, #304]	; (8003b78 <menu+0x26f0>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d104      	bne.n	8003a56 <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003a4c:	4a58      	ldr	r2, [pc, #352]	; (8003bb0 <menu+0x2728>)
 8003a4e:	2101      	movs	r1, #1
 8003a50:	2001      	movs	r0, #1
 8003a52:	f7fc fe09 	bl	8000668 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a56:	4b48      	ldr	r3, [pc, #288]	; (8003b78 <menu+0x26f0>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a5e:	4a55      	ldr	r2, [pc, #340]	; (8003bb4 <menu+0x272c>)
 8003a60:	2101      	movs	r1, #1
 8003a62:	2002      	movs	r0, #2
 8003a64:	f7fc fe00 	bl	8000668 <lcd_print>
 8003a68:	e008      	b.n	8003a7c <menu+0x25f4>
			} else if(dilSecim == 1){
 8003a6a:	4b43      	ldr	r3, [pc, #268]	; (8003b78 <menu+0x26f0>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d104      	bne.n	8003a7c <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8003a72:	4a51      	ldr	r2, [pc, #324]	; (8003bb8 <menu+0x2730>)
 8003a74:	2101      	movs	r1, #1
 8003a76:	2002      	movs	r0, #2
 8003a78:	f7fc fdf6 	bl	8000668 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003a7c:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <menu+0x2734>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	220a      	movs	r2, #10
 8003a82:	494f      	ldr	r1, [pc, #316]	; (8003bc0 <menu+0x2738>)
 8003a84:	4618      	mov	r0, r3
 8003a86:	f009 f8f5 	bl	800cc74 <itoa>
		lcd_print(2,16,snum);
 8003a8a:	4a4d      	ldr	r2, [pc, #308]	; (8003bc0 <menu+0x2738>)
 8003a8c:	2110      	movs	r1, #16
 8003a8e:	2002      	movs	r0, #2
 8003a90:	f7fc fdea 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a94:	2102      	movs	r1, #2
 8003a96:	483f      	ldr	r0, [pc, #252]	; (8003b94 <menu+0x270c>)
 8003a98:	f006 f8c0 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d115      	bne.n	8003ace <menu+0x2646>
 8003aa2:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <menu+0x2710>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	f083 0301 	eor.w	r3, r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00e      	beq.n	8003ace <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 8003ab0:	4b42      	ldr	r3, [pc, #264]	; (8003bbc <menu+0x2734>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	4b40      	ldr	r3, [pc, #256]	; (8003bbc <menu+0x2734>)
 8003aba:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003abc:	4b3f      	ldr	r3, [pc, #252]	; (8003bbc <menu+0x2734>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b05      	cmp	r3, #5
 8003ac2:	d902      	bls.n	8003aca <menu+0x2642>
				yukariValfTmr = 0;
 8003ac4:	4b3d      	ldr	r3, [pc, #244]	; (8003bbc <menu+0x2734>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003aca:	f002 fa69 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ace:	2104      	movs	r1, #4
 8003ad0:	4830      	ldr	r0, [pc, #192]	; (8003b94 <menu+0x270c>)
 8003ad2:	f006 f8a3 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d115      	bne.n	8003b08 <menu+0x2680>
 8003adc:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <menu+0x2710>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	f083 0301 	eor.w	r3, r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00e      	beq.n	8003b08 <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 8003aea:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <menu+0x2734>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4b32      	ldr	r3, [pc, #200]	; (8003bbc <menu+0x2734>)
 8003af4:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <menu+0x2734>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d902      	bls.n	8003b04 <menu+0x267c>
		   		yukariValfTmr = 5;
 8003afe:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <menu+0x2734>)
 8003b00:	2205      	movs	r2, #5
 8003b02:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b04:	f002 fa4c 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b08:	2108      	movs	r1, #8
 8003b0a:	4822      	ldr	r0, [pc, #136]	; (8003b94 <menu+0x270c>)
 8003b0c:	f006 f886 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d10d      	bne.n	8003b32 <menu+0x26aa>
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <menu+0x2710>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	f083 0301 	eor.w	r3, r3, #1
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d006      	beq.n	8003b32 <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 8003b24:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <menu+0x2734>)
 8003b26:	781a      	ldrb	r2, [r3, #0]
 8003b28:	4b1c      	ldr	r3, [pc, #112]	; (8003b9c <menu+0x2714>)
 8003b2a:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003b2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <menu+0x271c>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <menu+0x2720>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b17      	cmp	r3, #23
 8003b38:	f040 80ac 	bne.w	8003c94 <menu+0x280c>
		if(dilSecim == 0) {
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <menu+0x26f0>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003b44:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <menu+0x273c>)
 8003b46:	2101      	movs	r1, #1
 8003b48:	2001      	movs	r0, #1
 8003b4a:	f7fc fd8d 	bl	8000668 <lcd_print>
 8003b4e:	e008      	b.n	8003b62 <menu+0x26da>
		} else if(dilSecim == 1) {
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <menu+0x26f0>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d104      	bne.n	8003b62 <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003b58:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <menu+0x2740>)
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f7fc fd83 	bl	8000668 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <menu+0x26f0>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d130      	bne.n	8003bcc <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b6a:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <menu+0x272c>)
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	2002      	movs	r0, #2
 8003b70:	f7fc fd7a 	bl	8000668 <lcd_print>
 8003b74:	e033      	b.n	8003bde <menu+0x2756>
 8003b76:	bf00      	nop
 8003b78:	20000c6a 	.word	0x20000c6a
 8003b7c:	0800e118 	.word	0x0800e118
 8003b80:	20000c5c 	.word	0x20000c5c
 8003b84:	0800e0bc 	.word	0x0800e0bc
 8003b88:	0800e0d0 	.word	0x0800e0d0
 8003b8c:	0800e0e0 	.word	0x0800e0e0
 8003b90:	0800e0f4 	.word	0x0800e0f4
 8003b94:	40010800 	.word	0x40010800
 8003b98:	20000c78 	.word	0x20000c78
 8003b9c:	20000b38 	.word	0x20000b38
 8003ba0:	20000c4f 	.word	0x20000c4f
 8003ba4:	20000c75 	.word	0x20000c75
 8003ba8:	20000c49 	.word	0x20000c49
 8003bac:	0800e128 	.word	0x0800e128
 8003bb0:	0800e13c 	.word	0x0800e13c
 8003bb4:	0800dddc 	.word	0x0800dddc
 8003bb8:	0800e150 	.word	0x0800e150
 8003bbc:	20000c5d 	.word	0x20000c5d
 8003bc0:	20000bcc 	.word	0x20000bcc
 8003bc4:	0800e160 	.word	0x0800e160
 8003bc8:	0800e174 	.word	0x0800e174
			} else if(dilSecim == 1) {
 8003bcc:	4b98      	ldr	r3, [pc, #608]	; (8003e30 <menu+0x29a8>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d104      	bne.n	8003bde <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 8003bd4:	4a97      	ldr	r2, [pc, #604]	; (8003e34 <menu+0x29ac>)
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	2002      	movs	r0, #2
 8003bda:	f7fc fd45 	bl	8000668 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003bde:	4b96      	ldr	r3, [pc, #600]	; (8003e38 <menu+0x29b0>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	220a      	movs	r2, #10
 8003be4:	4995      	ldr	r1, [pc, #596]	; (8003e3c <menu+0x29b4>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f009 f844 	bl	800cc74 <itoa>
		lcd_print(2,16,snum);
 8003bec:	4a93      	ldr	r2, [pc, #588]	; (8003e3c <menu+0x29b4>)
 8003bee:	2110      	movs	r1, #16
 8003bf0:	2002      	movs	r0, #2
 8003bf2:	f7fc fd39 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	4891      	ldr	r0, [pc, #580]	; (8003e40 <menu+0x29b8>)
 8003bfa:	f006 f80f 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d115      	bne.n	8003c30 <menu+0x27a8>
 8003c04:	4b8f      	ldr	r3, [pc, #572]	; (8003e44 <menu+0x29bc>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	f083 0301 	eor.w	r3, r3, #1
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 8003c12:	4b89      	ldr	r3, [pc, #548]	; (8003e38 <menu+0x29b0>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	3301      	adds	r3, #1
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	4b87      	ldr	r3, [pc, #540]	; (8003e38 <menu+0x29b0>)
 8003c1c:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003c1e:	4b86      	ldr	r3, [pc, #536]	; (8003e38 <menu+0x29b0>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d902      	bls.n	8003c2c <menu+0x27a4>
				asagiValfTmr = 0;
 8003c26:	4b84      	ldr	r3, [pc, #528]	; (8003e38 <menu+0x29b0>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c2c:	f002 f9b8 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c30:	2104      	movs	r1, #4
 8003c32:	4883      	ldr	r0, [pc, #524]	; (8003e40 <menu+0x29b8>)
 8003c34:	f005 fff2 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d115      	bne.n	8003c6a <menu+0x27e2>
 8003c3e:	4b81      	ldr	r3, [pc, #516]	; (8003e44 <menu+0x29bc>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	f083 0301 	eor.w	r3, r3, #1
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00e      	beq.n	8003c6a <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 8003c4c:	4b7a      	ldr	r3, [pc, #488]	; (8003e38 <menu+0x29b0>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	4b78      	ldr	r3, [pc, #480]	; (8003e38 <menu+0x29b0>)
 8003c56:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003c58:	4b77      	ldr	r3, [pc, #476]	; (8003e38 <menu+0x29b0>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b06      	cmp	r3, #6
 8003c5e:	d902      	bls.n	8003c66 <menu+0x27de>
		   		asagiValfTmr = 5;
 8003c60:	4b75      	ldr	r3, [pc, #468]	; (8003e38 <menu+0x29b0>)
 8003c62:	2205      	movs	r2, #5
 8003c64:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c66:	f002 f99b 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c6a:	2108      	movs	r1, #8
 8003c6c:	4874      	ldr	r0, [pc, #464]	; (8003e40 <menu+0x29b8>)
 8003c6e:	f005 ffd5 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10d      	bne.n	8003c94 <menu+0x280c>
 8003c78:	4b72      	ldr	r3, [pc, #456]	; (8003e44 <menu+0x29bc>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	f083 0301 	eor.w	r3, r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 8003c86:	4b6c      	ldr	r3, [pc, #432]	; (8003e38 <menu+0x29b0>)
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	4b6f      	ldr	r3, [pc, #444]	; (8003e48 <menu+0x29c0>)
 8003c8c:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003c8e:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <menu+0x29c4>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003c94:	4b6e      	ldr	r3, [pc, #440]	; (8003e50 <menu+0x29c8>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b18      	cmp	r3, #24
 8003c9a:	f040 809d 	bne.w	8003dd8 <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 8003c9e:	4b6d      	ldr	r3, [pc, #436]	; (8003e54 <menu+0x29cc>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d113      	bne.n	8003cce <menu+0x2846>
			if(dilSecim == 0) {
 8003ca6:	4b62      	ldr	r3, [pc, #392]	; (8003e30 <menu+0x29a8>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d105      	bne.n	8003cba <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003cae:	4a6a      	ldr	r2, [pc, #424]	; (8003e58 <menu+0x29d0>)
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	2001      	movs	r0, #1
 8003cb4:	f7fc fcd8 	bl	8000668 <lcd_print>
 8003cb8:	e020      	b.n	8003cfc <menu+0x2874>
			} else if(dilSecim == 1) {
 8003cba:	4b5d      	ldr	r3, [pc, #372]	; (8003e30 <menu+0x29a8>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d11c      	bne.n	8003cfc <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003cc2:	4a66      	ldr	r2, [pc, #408]	; (8003e5c <menu+0x29d4>)
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f7fc fcce 	bl	8000668 <lcd_print>
 8003ccc:	e016      	b.n	8003cfc <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003cce:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <menu+0x29cc>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d112      	bne.n	8003cfc <menu+0x2874>
			if(dilSecim == 0) {
 8003cd6:	4b56      	ldr	r3, [pc, #344]	; (8003e30 <menu+0x29a8>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d105      	bne.n	8003cea <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003cde:	4a60      	ldr	r2, [pc, #384]	; (8003e60 <menu+0x29d8>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	2001      	movs	r0, #1
 8003ce4:	f7fc fcc0 	bl	8000668 <lcd_print>
 8003ce8:	e008      	b.n	8003cfc <menu+0x2874>
			} else if(dilSecim == 1) {
 8003cea:	4b51      	ldr	r3, [pc, #324]	; (8003e30 <menu+0x29a8>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d104      	bne.n	8003cfc <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003cf2:	4a5c      	ldr	r2, [pc, #368]	; (8003e64 <menu+0x29dc>)
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f7fc fcb6 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003cfc:	4b4c      	ldr	r3, [pc, #304]	; (8003e30 <menu+0x29a8>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d105      	bne.n	8003d10 <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d04:	4a58      	ldr	r2, [pc, #352]	; (8003e68 <menu+0x29e0>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	2002      	movs	r0, #2
 8003d0a:	f7fc fcad 	bl	8000668 <lcd_print>
 8003d0e:	e008      	b.n	8003d22 <menu+0x289a>
			} else if(dilSecim == 1) {
 8003d10:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <menu+0x29a8>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d104      	bne.n	8003d22 <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 8003d18:	4a46      	ldr	r2, [pc, #280]	; (8003e34 <menu+0x29ac>)
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	2002      	movs	r0, #2
 8003d1e:	f7fc fca3 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003d22:	4b52      	ldr	r3, [pc, #328]	; (8003e6c <menu+0x29e4>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	220a      	movs	r2, #10
 8003d28:	4944      	ldr	r1, [pc, #272]	; (8003e3c <menu+0x29b4>)
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f008 ffa2 	bl	800cc74 <itoa>
		lcd_print(2, 16, snum);
 8003d30:	4a42      	ldr	r2, [pc, #264]	; (8003e3c <menu+0x29b4>)
 8003d32:	2110      	movs	r1, #16
 8003d34:	2002      	movs	r0, #2
 8003d36:	f7fc fc97 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	4840      	ldr	r0, [pc, #256]	; (8003e40 <menu+0x29b8>)
 8003d3e:	f005 ff6d 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d115      	bne.n	8003d74 <menu+0x28ec>
 8003d48:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <menu+0x29bc>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f083 0301 	eor.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00e      	beq.n	8003d74 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003d56:	4b45      	ldr	r3, [pc, #276]	; (8003e6c <menu+0x29e4>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <menu+0x29e4>)
 8003d60:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003d62:	4b42      	ldr	r3, [pc, #264]	; (8003e6c <menu+0x29e4>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	d902      	bls.n	8003d70 <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 8003d6a:	4b40      	ldr	r3, [pc, #256]	; (8003e6c <menu+0x29e4>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d70:	f002 f916 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d74:	2104      	movs	r1, #4
 8003d76:	4832      	ldr	r0, [pc, #200]	; (8003e40 <menu+0x29b8>)
 8003d78:	f005 ff50 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d115      	bne.n	8003dae <menu+0x2926>
 8003d82:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <menu+0x29bc>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	f083 0301 	eor.w	r3, r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00e      	beq.n	8003dae <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003d90:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <menu+0x29e4>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <menu+0x29e4>)
 8003d9a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003d9c:	4b33      	ldr	r3, [pc, #204]	; (8003e6c <menu+0x29e4>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b06      	cmp	r3, #6
 8003da2:	d902      	bls.n	8003daa <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8003da4:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <menu+0x29e4>)
 8003da6:	2205      	movs	r2, #5
 8003da8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003daa:	f002 f8f9 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dae:	2108      	movs	r1, #8
 8003db0:	4823      	ldr	r0, [pc, #140]	; (8003e40 <menu+0x29b8>)
 8003db2:	f005 ff33 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d10d      	bne.n	8003dd8 <menu+0x2950>
 8003dbc:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <menu+0x29bc>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	f083 0301 	eor.w	r3, r3, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d006      	beq.n	8003dd8 <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 8003dca:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <menu+0x29e4>)
 8003dcc:	781a      	ldrb	r2, [r3, #0]
 8003dce:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <menu+0x29c0>)
 8003dd0:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <menu+0x29c4>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <menu+0x29c8>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b19      	cmp	r3, #25
 8003dde:	f040 80c4 	bne.w	8003f6a <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 8003de2:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <menu+0x29cc>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d113      	bne.n	8003e12 <menu+0x298a>
			if(dilSecim == 0) {
 8003dea:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <menu+0x29a8>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003df2:	4a1f      	ldr	r2, [pc, #124]	; (8003e70 <menu+0x29e8>)
 8003df4:	2101      	movs	r1, #1
 8003df6:	2001      	movs	r0, #1
 8003df8:	f7fc fc36 	bl	8000668 <lcd_print>
 8003dfc:	e047      	b.n	8003e8e <menu+0x2a06>
			} else if(dilSecim == 1) {
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <menu+0x29a8>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d143      	bne.n	8003e8e <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003e06:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <menu+0x29ec>)
 8003e08:	2101      	movs	r1, #1
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f7fc fc2c 	bl	8000668 <lcd_print>
 8003e10:	e03d      	b.n	8003e8e <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <menu+0x29cc>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d139      	bne.n	8003e8e <menu+0x2a06>
			if(dilSecim == 0) {
 8003e1a:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <menu+0x29a8>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d12c      	bne.n	8003e7c <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003e22:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <menu+0x29f0>)
 8003e24:	2101      	movs	r1, #1
 8003e26:	2001      	movs	r0, #1
 8003e28:	f7fc fc1e 	bl	8000668 <lcd_print>
 8003e2c:	e02f      	b.n	8003e8e <menu+0x2a06>
 8003e2e:	bf00      	nop
 8003e30:	20000c6a 	.word	0x20000c6a
 8003e34:	0800e150 	.word	0x0800e150
 8003e38:	20000c5e 	.word	0x20000c5e
 8003e3c:	20000bcc 	.word	0x20000bcc
 8003e40:	40010800 	.word	0x40010800
 8003e44:	20000c78 	.word	0x20000c78
 8003e48:	20000b38 	.word	0x20000b38
 8003e4c:	20000c75 	.word	0x20000c75
 8003e50:	20000c49 	.word	0x20000c49
 8003e54:	20000c58 	.word	0x20000c58
 8003e58:	0800e188 	.word	0x0800e188
 8003e5c:	0800e19c 	.word	0x0800e19c
 8003e60:	0800e1b0 	.word	0x0800e1b0
 8003e64:	0800e1c4 	.word	0x0800e1c4
 8003e68:	0800dddc 	.word	0x0800dddc
 8003e6c:	20000c5f 	.word	0x20000c5f
 8003e70:	0800e1d8 	.word	0x0800e1d8
 8003e74:	0800e1ec 	.word	0x0800e1ec
 8003e78:	0800e200 	.word	0x0800e200
			} else if(dilSecim == 1) {
 8003e7c:	4b73      	ldr	r3, [pc, #460]	; (800404c <menu+0x2bc4>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d104      	bne.n	8003e8e <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003e84:	4a72      	ldr	r2, [pc, #456]	; (8004050 <menu+0x2bc8>)
 8003e86:	2101      	movs	r1, #1
 8003e88:	2001      	movs	r0, #1
 8003e8a:	f7fc fbed 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003e8e:	4b6f      	ldr	r3, [pc, #444]	; (800404c <menu+0x2bc4>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d105      	bne.n	8003ea2 <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e96:	4a6f      	ldr	r2, [pc, #444]	; (8004054 <menu+0x2bcc>)
 8003e98:	2101      	movs	r1, #1
 8003e9a:	2002      	movs	r0, #2
 8003e9c:	f7fc fbe4 	bl	8000668 <lcd_print>
 8003ea0:	e008      	b.n	8003eb4 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 8003ea2:	4b6a      	ldr	r3, [pc, #424]	; (800404c <menu+0x2bc4>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d104      	bne.n	8003eb4 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 8003eaa:	4a6b      	ldr	r2, [pc, #428]	; (8004058 <menu+0x2bd0>)
 8003eac:	2101      	movs	r1, #1
 8003eae:	2002      	movs	r0, #2
 8003eb0:	f7fc fbda 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003eb4:	4b69      	ldr	r3, [pc, #420]	; (800405c <menu+0x2bd4>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	220a      	movs	r2, #10
 8003eba:	4969      	ldr	r1, [pc, #420]	; (8004060 <menu+0x2bd8>)
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f008 fed9 	bl	800cc74 <itoa>
		lcd_print(2,16,snum);
 8003ec2:	4a67      	ldr	r2, [pc, #412]	; (8004060 <menu+0x2bd8>)
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	2002      	movs	r0, #2
 8003ec8:	f7fc fbce 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ecc:	2102      	movs	r1, #2
 8003ece:	4865      	ldr	r0, [pc, #404]	; (8004064 <menu+0x2bdc>)
 8003ed0:	f005 fea4 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d115      	bne.n	8003f06 <menu+0x2a7e>
 8003eda:	4b63      	ldr	r3, [pc, #396]	; (8004068 <menu+0x2be0>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	f083 0301 	eor.w	r3, r3, #1
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00e      	beq.n	8003f06 <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003ee8:	4b5c      	ldr	r3, [pc, #368]	; (800405c <menu+0x2bd4>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	3301      	adds	r3, #1
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	4b5a      	ldr	r3, [pc, #360]	; (800405c <menu+0x2bd4>)
 8003ef2:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003ef4:	4b59      	ldr	r3, [pc, #356]	; (800405c <menu+0x2bd4>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b05      	cmp	r3, #5
 8003efa:	d902      	bls.n	8003f02 <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 8003efc:	4b57      	ldr	r3, [pc, #348]	; (800405c <menu+0x2bd4>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f02:	f002 f84d 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f06:	2104      	movs	r1, #4
 8003f08:	4856      	ldr	r0, [pc, #344]	; (8004064 <menu+0x2bdc>)
 8003f0a:	f005 fe87 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d115      	bne.n	8003f40 <menu+0x2ab8>
 8003f14:	4b54      	ldr	r3, [pc, #336]	; (8004068 <menu+0x2be0>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f083 0301 	eor.w	r3, r3, #1
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003f22:	4b4e      	ldr	r3, [pc, #312]	; (800405c <menu+0x2bd4>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4b4c      	ldr	r3, [pc, #304]	; (800405c <menu+0x2bd4>)
 8003f2c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003f2e:	4b4b      	ldr	r3, [pc, #300]	; (800405c <menu+0x2bd4>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d902      	bls.n	8003f3c <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 8003f36:	4b49      	ldr	r3, [pc, #292]	; (800405c <menu+0x2bd4>)
 8003f38:	2205      	movs	r2, #5
 8003f3a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f3c:	f002 f830 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f40:	2108      	movs	r1, #8
 8003f42:	4848      	ldr	r0, [pc, #288]	; (8004064 <menu+0x2bdc>)
 8003f44:	f005 fe6a 	bl	8009c1c <HAL_GPIO_ReadPin>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d10d      	bne.n	8003f6a <menu+0x2ae2>
 8003f4e:	4b46      	ldr	r3, [pc, #280]	; (8004068 <menu+0x2be0>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	f083 0301 	eor.w	r3, r3, #1
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003f5c:	4b3f      	ldr	r3, [pc, #252]	; (800405c <menu+0x2bd4>)
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	4b42      	ldr	r3, [pc, #264]	; (800406c <menu+0x2be4>)
 8003f62:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003f64:	4b42      	ldr	r3, [pc, #264]	; (8004070 <menu+0x2be8>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003f6a:	4b42      	ldr	r3, [pc, #264]	; (8004074 <menu+0x2bec>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b1a      	cmp	r3, #26
 8003f70:	f040 80ec 	bne.w	800414c <menu+0x2cc4>
		if(dilSecim == 0) {
 8003f74:	4b35      	ldr	r3, [pc, #212]	; (800404c <menu+0x2bc4>)
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003f7c:	4a3e      	ldr	r2, [pc, #248]	; (8004078 <menu+0x2bf0>)
 8003f7e:	2101      	movs	r1, #1
 8003f80:	2001      	movs	r0, #1
 8003f82:	f7fc fb71 	bl	8000668 <lcd_print>
 8003f86:	e008      	b.n	8003f9a <menu+0x2b12>
		} else if(dilSecim == 1) {
 8003f88:	4b30      	ldr	r3, [pc, #192]	; (800404c <menu+0x2bc4>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d104      	bne.n	8003f9a <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 8003f90:	4a3a      	ldr	r2, [pc, #232]	; (800407c <menu+0x2bf4>)
 8003f92:	2101      	movs	r1, #1
 8003f94:	2001      	movs	r0, #1
 8003f96:	f7fc fb67 	bl	8000668 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003f9a:	4b39      	ldr	r3, [pc, #228]	; (8004080 <menu+0x2bf8>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b63      	cmp	r3, #99	; 0x63
 8003fa0:	d91e      	bls.n	8003fe0 <menu+0x2b58>
			if(dilSecim == 0) {
 8003fa2:	4b2a      	ldr	r3, [pc, #168]	; (800404c <menu+0x2bc4>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 8003faa:	4a2a      	ldr	r2, [pc, #168]	; (8004054 <menu+0x2bcc>)
 8003fac:	2101      	movs	r1, #1
 8003fae:	2002      	movs	r0, #2
 8003fb0:	f7fc fb5a 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <menu+0x2bc4>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d104      	bne.n	8003fc6 <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 8003fbc:	4a26      	ldr	r2, [pc, #152]	; (8004058 <menu+0x2bd0>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	2002      	movs	r0, #2
 8003fc2:	f7fc fb51 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003fc6:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <menu+0x2bf8>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	220a      	movs	r2, #10
 8003fcc:	4924      	ldr	r1, [pc, #144]	; (8004060 <menu+0x2bd8>)
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f008 fe50 	bl	800cc74 <itoa>
			lcd_print(2,14,snum);
 8003fd4:	4a22      	ldr	r2, [pc, #136]	; (8004060 <menu+0x2bd8>)
 8003fd6:	210e      	movs	r1, #14
 8003fd8:	2002      	movs	r0, #2
 8003fda:	f7fc fb45 	bl	8000668 <lcd_print>
 8003fde:	e066      	b.n	80040ae <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003fe0:	4b27      	ldr	r3, [pc, #156]	; (8004080 <menu+0x2bf8>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b09      	cmp	r3, #9
 8003fe6:	d923      	bls.n	8004030 <menu+0x2ba8>
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <menu+0x2bf8>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b63      	cmp	r3, #99	; 0x63
 8003fee:	d81f      	bhi.n	8004030 <menu+0x2ba8>
			if(dilSecim == 0) {
 8003ff0:	4b16      	ldr	r3, [pc, #88]	; (800404c <menu+0x2bc4>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ff8:	4a16      	ldr	r2, [pc, #88]	; (8004054 <menu+0x2bcc>)
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	2002      	movs	r0, #2
 8003ffe:	f7fc fb33 	bl	8000668 <lcd_print>
 8004002:	e008      	b.n	8004016 <menu+0x2b8e>
			} else if(dilSecim == 1) {
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <menu+0x2bc4>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d104      	bne.n	8004016 <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <menu+0x2bd0>)
 800400e:	2101      	movs	r1, #1
 8004010:	2002      	movs	r0, #2
 8004012:	f7fc fb29 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004016:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <menu+0x2bf8>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	220a      	movs	r2, #10
 800401c:	4910      	ldr	r1, [pc, #64]	; (8004060 <menu+0x2bd8>)
 800401e:	4618      	mov	r0, r3
 8004020:	f008 fe28 	bl	800cc74 <itoa>
			lcd_print(2, 15, snum);
 8004024:	4a0e      	ldr	r2, [pc, #56]	; (8004060 <menu+0x2bd8>)
 8004026:	210f      	movs	r1, #15
 8004028:	2002      	movs	r0, #2
 800402a:	f7fc fb1d 	bl	8000668 <lcd_print>
 800402e:	e03e      	b.n	80040ae <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <menu+0x2bf8>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b09      	cmp	r3, #9
 8004036:	d83a      	bhi.n	80040ae <menu+0x2c26>
			if(dilSecim == 0) {
 8004038:	4b04      	ldr	r3, [pc, #16]	; (800404c <menu+0x2bc4>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d121      	bne.n	8004084 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <menu+0x2bcc>)
 8004042:	2101      	movs	r1, #1
 8004044:	2002      	movs	r0, #2
 8004046:	f7fc fb0f 	bl	8000668 <lcd_print>
 800404a:	e024      	b.n	8004096 <menu+0x2c0e>
 800404c:	20000c6a 	.word	0x20000c6a
 8004050:	0800e214 	.word	0x0800e214
 8004054:	0800dddc 	.word	0x0800dddc
 8004058:	0800e150 	.word	0x0800e150
 800405c:	20000c60 	.word	0x20000c60
 8004060:	20000bcc 	.word	0x20000bcc
 8004064:	40010800 	.word	0x40010800
 8004068:	20000c78 	.word	0x20000c78
 800406c:	20000b38 	.word	0x20000b38
 8004070:	20000c75 	.word	0x20000c75
 8004074:	20000c49 	.word	0x20000c49
 8004078:	0800e228 	.word	0x0800e228
 800407c:	0800e23c 	.word	0x0800e23c
 8004080:	20000c61 	.word	0x20000c61
			} else if(dilSecim == 1) {
 8004084:	4b8f      	ldr	r3, [pc, #572]	; (80042c4 <menu+0x2e3c>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d104      	bne.n	8004096 <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 800408c:	4a8e      	ldr	r2, [pc, #568]	; (80042c8 <menu+0x2e40>)
 800408e:	2101      	movs	r1, #1
 8004090:	2002      	movs	r0, #2
 8004092:	f7fc fae9 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004096:	4b8d      	ldr	r3, [pc, #564]	; (80042cc <menu+0x2e44>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	220a      	movs	r2, #10
 800409c:	498c      	ldr	r1, [pc, #560]	; (80042d0 <menu+0x2e48>)
 800409e:	4618      	mov	r0, r3
 80040a0:	f008 fde8 	bl	800cc74 <itoa>
			lcd_print(2, 16, snum);
 80040a4:	4a8a      	ldr	r2, [pc, #552]	; (80042d0 <menu+0x2e48>)
 80040a6:	2110      	movs	r1, #16
 80040a8:	2002      	movs	r0, #2
 80040aa:	f7fc fadd 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040ae:	2102      	movs	r1, #2
 80040b0:	4888      	ldr	r0, [pc, #544]	; (80042d4 <menu+0x2e4c>)
 80040b2:	f005 fdb3 	bl	8009c1c <HAL_GPIO_ReadPin>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d115      	bne.n	80040e8 <menu+0x2c60>
 80040bc:	4b86      	ldr	r3, [pc, #536]	; (80042d8 <menu+0x2e50>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	f083 0301 	eor.w	r3, r3, #1
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00e      	beq.n	80040e8 <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 80040ca:	4b80      	ldr	r3, [pc, #512]	; (80042cc <menu+0x2e44>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4b7e      	ldr	r3, [pc, #504]	; (80042cc <menu+0x2e44>)
 80040d4:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80040d6:	4b7d      	ldr	r3, [pc, #500]	; (80042cc <menu+0x2e44>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2bb4      	cmp	r3, #180	; 0xb4
 80040dc:	d902      	bls.n	80040e4 <menu+0x2c5c>
				makineCalismaTmr = 0;
 80040de:	4b7b      	ldr	r3, [pc, #492]	; (80042cc <menu+0x2e44>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040e4:	f001 ff5c 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040e8:	2104      	movs	r1, #4
 80040ea:	487a      	ldr	r0, [pc, #488]	; (80042d4 <menu+0x2e4c>)
 80040ec:	f005 fd96 	bl	8009c1c <HAL_GPIO_ReadPin>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d115      	bne.n	8004122 <menu+0x2c9a>
 80040f6:	4b78      	ldr	r3, [pc, #480]	; (80042d8 <menu+0x2e50>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	f083 0301 	eor.w	r3, r3, #1
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004104:	4b71      	ldr	r3, [pc, #452]	; (80042cc <menu+0x2e44>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	3b01      	subs	r3, #1
 800410a:	b2da      	uxtb	r2, r3
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <menu+0x2e44>)
 800410e:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004110:	4b6e      	ldr	r3, [pc, #440]	; (80042cc <menu+0x2e44>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2bb5      	cmp	r3, #181	; 0xb5
 8004116:	d902      	bls.n	800411e <menu+0x2c96>
		   		makineCalismaTmr = 180;
 8004118:	4b6c      	ldr	r3, [pc, #432]	; (80042cc <menu+0x2e44>)
 800411a:	22b4      	movs	r2, #180	; 0xb4
 800411c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800411e:	f001 ff3f 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004122:	2108      	movs	r1, #8
 8004124:	486b      	ldr	r0, [pc, #428]	; (80042d4 <menu+0x2e4c>)
 8004126:	f005 fd79 	bl	8009c1c <HAL_GPIO_ReadPin>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10d      	bne.n	800414c <menu+0x2cc4>
 8004130:	4b69      	ldr	r3, [pc, #420]	; (80042d8 <menu+0x2e50>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	f083 0301 	eor.w	r3, r3, #1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d006      	beq.n	800414c <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 800413e:	4b63      	ldr	r3, [pc, #396]	; (80042cc <menu+0x2e44>)
 8004140:	781a      	ldrb	r2, [r3, #0]
 8004142:	4b66      	ldr	r3, [pc, #408]	; (80042dc <menu+0x2e54>)
 8004144:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004146:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <menu+0x2e58>)
 8004148:	2201      	movs	r2, #1
 800414a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 800414c:	4b65      	ldr	r3, [pc, #404]	; (80042e4 <menu+0x2e5c>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b1b      	cmp	r3, #27
 8004152:	f040 8083 	bne.w	800425c <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 8004156:	4a64      	ldr	r2, [pc, #400]	; (80042e8 <menu+0x2e60>)
 8004158:	2101      	movs	r1, #1
 800415a:	2001      	movs	r0, #1
 800415c:	f7fc fa84 	bl	8000668 <lcd_print>

		if(buzzer == 0) {
 8004160:	4b62      	ldr	r3, [pc, #392]	; (80042ec <menu+0x2e64>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d113      	bne.n	8004190 <menu+0x2d08>
			if(dilSecim == 0) {
 8004168:	4b56      	ldr	r3, [pc, #344]	; (80042c4 <menu+0x2e3c>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d105      	bne.n	800417c <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 8004170:	4a5f      	ldr	r2, [pc, #380]	; (80042f0 <menu+0x2e68>)
 8004172:	2101      	movs	r1, #1
 8004174:	2002      	movs	r0, #2
 8004176:	f7fc fa77 	bl	8000668 <lcd_print>
 800417a:	e020      	b.n	80041be <menu+0x2d36>
			} else if(dilSecim == 1) {
 800417c:	4b51      	ldr	r3, [pc, #324]	; (80042c4 <menu+0x2e3c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d11c      	bne.n	80041be <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 8004184:	4a5b      	ldr	r2, [pc, #364]	; (80042f4 <menu+0x2e6c>)
 8004186:	2101      	movs	r1, #1
 8004188:	2002      	movs	r0, #2
 800418a:	f7fc fa6d 	bl	8000668 <lcd_print>
 800418e:	e016      	b.n	80041be <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 8004190:	4b56      	ldr	r3, [pc, #344]	; (80042ec <menu+0x2e64>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d112      	bne.n	80041be <menu+0x2d36>
			if(dilSecim == 0) {
 8004198:	4b4a      	ldr	r3, [pc, #296]	; (80042c4 <menu+0x2e3c>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 80041a0:	4a55      	ldr	r2, [pc, #340]	; (80042f8 <menu+0x2e70>)
 80041a2:	2101      	movs	r1, #1
 80041a4:	2002      	movs	r0, #2
 80041a6:	f7fc fa5f 	bl	8000668 <lcd_print>
 80041aa:	e008      	b.n	80041be <menu+0x2d36>
			} else if(dilSecim == 1) {
 80041ac:	4b45      	ldr	r3, [pc, #276]	; (80042c4 <menu+0x2e3c>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d104      	bne.n	80041be <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 80041b4:	4a51      	ldr	r2, [pc, #324]	; (80042fc <menu+0x2e74>)
 80041b6:	2101      	movs	r1, #1
 80041b8:	2002      	movs	r0, #2
 80041ba:	f7fc fa55 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041be:	2102      	movs	r1, #2
 80041c0:	4844      	ldr	r0, [pc, #272]	; (80042d4 <menu+0x2e4c>)
 80041c2:	f005 fd2b 	bl	8009c1c <HAL_GPIO_ReadPin>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d115      	bne.n	80041f8 <menu+0x2d70>
 80041cc:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <menu+0x2e50>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	f083 0301 	eor.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <menu+0x2d70>
			buzzer = buzzer + 1;
 80041da:	4b44      	ldr	r3, [pc, #272]	; (80042ec <menu+0x2e64>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	3301      	adds	r3, #1
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	4b42      	ldr	r3, [pc, #264]	; (80042ec <menu+0x2e64>)
 80041e4:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80041e6:	4b41      	ldr	r3, [pc, #260]	; (80042ec <menu+0x2e64>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d902      	bls.n	80041f4 <menu+0x2d6c>
				buzzer = 0;
 80041ee:	4b3f      	ldr	r3, [pc, #252]	; (80042ec <menu+0x2e64>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041f4:	f001 fed4 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041f8:	2104      	movs	r1, #4
 80041fa:	4836      	ldr	r0, [pc, #216]	; (80042d4 <menu+0x2e4c>)
 80041fc:	f005 fd0e 	bl	8009c1c <HAL_GPIO_ReadPin>
 8004200:	4603      	mov	r3, r0
 8004202:	2b01      	cmp	r3, #1
 8004204:	d115      	bne.n	8004232 <menu+0x2daa>
 8004206:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <menu+0x2e50>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	f083 0301 	eor.w	r3, r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00e      	beq.n	8004232 <menu+0x2daa>
			buzzer = buzzer - 1;
 8004214:	4b35      	ldr	r3, [pc, #212]	; (80042ec <menu+0x2e64>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	3b01      	subs	r3, #1
 800421a:	b2da      	uxtb	r2, r3
 800421c:	4b33      	ldr	r3, [pc, #204]	; (80042ec <menu+0x2e64>)
 800421e:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004220:	4b32      	ldr	r3, [pc, #200]	; (80042ec <menu+0x2e64>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <menu+0x2da6>
		   		buzzer = 1;
 8004228:	4b30      	ldr	r3, [pc, #192]	; (80042ec <menu+0x2e64>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800422e:	f001 feb7 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004232:	2108      	movs	r1, #8
 8004234:	4827      	ldr	r0, [pc, #156]	; (80042d4 <menu+0x2e4c>)
 8004236:	f005 fcf1 	bl	8009c1c <HAL_GPIO_ReadPin>
 800423a:	4603      	mov	r3, r0
 800423c:	2b01      	cmp	r3, #1
 800423e:	d10d      	bne.n	800425c <menu+0x2dd4>
 8004240:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <menu+0x2e50>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	f083 0301 	eor.w	r3, r3, #1
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d006      	beq.n	800425c <menu+0x2dd4>
			eepromData[25] = buzzer;
 800424e:	4b27      	ldr	r3, [pc, #156]	; (80042ec <menu+0x2e64>)
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <menu+0x2e54>)
 8004254:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8004256:	4b22      	ldr	r3, [pc, #136]	; (80042e0 <menu+0x2e58>)
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800425c:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <menu+0x2e5c>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b1c      	cmp	r3, #28
 8004262:	f040 80ab 	bne.w	80043bc <menu+0x2f34>
		calismaSayModu = 0;
 8004266:	4b26      	ldr	r3, [pc, #152]	; (8004300 <menu+0x2e78>)
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 800426c:	4a25      	ldr	r2, [pc, #148]	; (8004304 <menu+0x2e7c>)
 800426e:	2101      	movs	r1, #1
 8004270:	2001      	movs	r0, #1
 8004272:	f7fc f9f9 	bl	8000668 <lcd_print>

		if(demoMode == 0) {
 8004276:	4b24      	ldr	r3, [pc, #144]	; (8004308 <menu+0x2e80>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d113      	bne.n	80042a6 <menu+0x2e1e>
			if(dilSecim == 0) {
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <menu+0x2e3c>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 8004286:	4a1a      	ldr	r2, [pc, #104]	; (80042f0 <menu+0x2e68>)
 8004288:	2101      	movs	r1, #1
 800428a:	2002      	movs	r0, #2
 800428c:	f7fc f9ec 	bl	8000668 <lcd_print>
 8004290:	e045      	b.n	800431e <menu+0x2e96>
			} else if(dilSecim == 1) {
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <menu+0x2e3c>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d141      	bne.n	800431e <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 800429a:	4a16      	ldr	r2, [pc, #88]	; (80042f4 <menu+0x2e6c>)
 800429c:	2101      	movs	r1, #1
 800429e:	2002      	movs	r0, #2
 80042a0:	f7fc f9e2 	bl	8000668 <lcd_print>
 80042a4:	e03b      	b.n	800431e <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <menu+0x2e80>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d137      	bne.n	800431e <menu+0x2e96>
			if(dilSecim == 0){
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <menu+0x2e3c>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d12a      	bne.n	800430c <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 80042b6:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <menu+0x2e70>)
 80042b8:	2101      	movs	r1, #1
 80042ba:	2002      	movs	r0, #2
 80042bc:	f7fc f9d4 	bl	8000668 <lcd_print>
 80042c0:	e02d      	b.n	800431e <menu+0x2e96>
 80042c2:	bf00      	nop
 80042c4:	20000c6a 	.word	0x20000c6a
 80042c8:	0800e150 	.word	0x0800e150
 80042cc:	20000c61 	.word	0x20000c61
 80042d0:	20000bcc 	.word	0x20000bcc
 80042d4:	40010800 	.word	0x40010800
 80042d8:	20000c78 	.word	0x20000c78
 80042dc:	20000b38 	.word	0x20000b38
 80042e0:	20000c75 	.word	0x20000c75
 80042e4:	20000c49 	.word	0x20000c49
 80042e8:	0800e250 	.word	0x0800e250
 80042ec:	20000c65 	.word	0x20000c65
 80042f0:	0800db78 	.word	0x0800db78
 80042f4:	0800db8c 	.word	0x0800db8c
 80042f8:	0800dbd8 	.word	0x0800dbd8
 80042fc:	0800dbec 	.word	0x0800dbec
 8004300:	20000c69 	.word	0x20000c69
 8004304:	0800e264 	.word	0x0800e264
 8004308:	20000c67 	.word	0x20000c67
			} else if(dilSecim == 1) {
 800430c:	4b71      	ldr	r3, [pc, #452]	; (80044d4 <menu+0x304c>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d104      	bne.n	800431e <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 8004314:	4a70      	ldr	r2, [pc, #448]	; (80044d8 <menu+0x3050>)
 8004316:	2101      	movs	r1, #1
 8004318:	2002      	movs	r0, #2
 800431a:	f7fc f9a5 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800431e:	2102      	movs	r1, #2
 8004320:	486e      	ldr	r0, [pc, #440]	; (80044dc <menu+0x3054>)
 8004322:	f005 fc7b 	bl	8009c1c <HAL_GPIO_ReadPin>
 8004326:	4603      	mov	r3, r0
 8004328:	2b01      	cmp	r3, #1
 800432a:	d115      	bne.n	8004358 <menu+0x2ed0>
 800432c:	4b6c      	ldr	r3, [pc, #432]	; (80044e0 <menu+0x3058>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	f083 0301 	eor.w	r3, r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00e      	beq.n	8004358 <menu+0x2ed0>
			demoMode = demoMode + 1;
 800433a:	4b6a      	ldr	r3, [pc, #424]	; (80044e4 <menu+0x305c>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4b68      	ldr	r3, [pc, #416]	; (80044e4 <menu+0x305c>)
 8004344:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004346:	4b67      	ldr	r3, [pc, #412]	; (80044e4 <menu+0x305c>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d902      	bls.n	8004354 <menu+0x2ecc>
				demoMode = 0;
 800434e:	4b65      	ldr	r3, [pc, #404]	; (80044e4 <menu+0x305c>)
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004354:	f001 fe24 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004358:	2104      	movs	r1, #4
 800435a:	4860      	ldr	r0, [pc, #384]	; (80044dc <menu+0x3054>)
 800435c:	f005 fc5e 	bl	8009c1c <HAL_GPIO_ReadPin>
 8004360:	4603      	mov	r3, r0
 8004362:	2b01      	cmp	r3, #1
 8004364:	d115      	bne.n	8004392 <menu+0x2f0a>
 8004366:	4b5e      	ldr	r3, [pc, #376]	; (80044e0 <menu+0x3058>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00e      	beq.n	8004392 <menu+0x2f0a>
			demoMode = demoMode - 1;
 8004374:	4b5b      	ldr	r3, [pc, #364]	; (80044e4 <menu+0x305c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	3b01      	subs	r3, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	4b59      	ldr	r3, [pc, #356]	; (80044e4 <menu+0x305c>)
 800437e:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004380:	4b58      	ldr	r3, [pc, #352]	; (80044e4 <menu+0x305c>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <menu+0x2f06>
		   		demoMode = 1;
 8004388:	4b56      	ldr	r3, [pc, #344]	; (80044e4 <menu+0x305c>)
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800438e:	f001 fe07 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004392:	2108      	movs	r1, #8
 8004394:	4851      	ldr	r0, [pc, #324]	; (80044dc <menu+0x3054>)
 8004396:	f005 fc41 	bl	8009c1c <HAL_GPIO_ReadPin>
 800439a:	4603      	mov	r3, r0
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10d      	bne.n	80043bc <menu+0x2f34>
 80043a0:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <menu+0x3058>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	f083 0301 	eor.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <menu+0x2f34>
			eepromData[26] = demoMode;
 80043ae:	4b4d      	ldr	r3, [pc, #308]	; (80044e4 <menu+0x305c>)
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	4b4d      	ldr	r3, [pc, #308]	; (80044e8 <menu+0x3060>)
 80043b4:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80043b6:	4b4d      	ldr	r3, [pc, #308]	; (80044ec <menu+0x3064>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80043bc:	4b4c      	ldr	r3, [pc, #304]	; (80044f0 <menu+0x3068>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b1d      	cmp	r3, #29
 80043c2:	f040 8132 	bne.w	800462a <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80043c6:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <menu+0x306c>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d113      	bne.n	80043f6 <menu+0x2f6e>
 80043ce:	4b4a      	ldr	r3, [pc, #296]	; (80044f8 <menu+0x3070>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10f      	bne.n	80043f6 <menu+0x2f6e>
 80043d6:	4b49      	ldr	r3, [pc, #292]	; (80044fc <menu+0x3074>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10b      	bne.n	80043f6 <menu+0x2f6e>
 80043de:	4b48      	ldr	r3, [pc, #288]	; (8004500 <menu+0x3078>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d107      	bne.n	80043f6 <menu+0x2f6e>
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <menu+0x307c>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d103      	bne.n	80043f6 <menu+0x2f6e>
			calismaSayisiYar = 0;
 80043ee:	4b46      	ldr	r3, [pc, #280]	; (8004508 <menu+0x3080>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e002      	b.n	80043fc <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 80043f6:	4b44      	ldr	r3, [pc, #272]	; (8004508 <menu+0x3080>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80043fc:	4b43      	ldr	r3, [pc, #268]	; (800450c <menu+0x3084>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d154      	bne.n	80044ae <menu+0x3026>
			if(dilSecim == 0) {
 8004404:	4b33      	ldr	r3, [pc, #204]	; (80044d4 <menu+0x304c>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800440c:	4a40      	ldr	r2, [pc, #256]	; (8004510 <menu+0x3088>)
 800440e:	2101      	movs	r1, #1
 8004410:	2001      	movs	r0, #1
 8004412:	f7fc f929 	bl	8000668 <lcd_print>
 8004416:	e008      	b.n	800442a <menu+0x2fa2>
			} else if(dilSecim == 1) {
 8004418:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <menu+0x304c>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d104      	bne.n	800442a <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 8004420:	4a3c      	ldr	r2, [pc, #240]	; (8004514 <menu+0x308c>)
 8004422:	2101      	movs	r1, #1
 8004424:	2001      	movs	r0, #1
 8004426:	f7fc f91f 	bl	8000668 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800442a:	4b36      	ldr	r3, [pc, #216]	; (8004504 <menu+0x307c>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	220a      	movs	r2, #10
 8004430:	4939      	ldr	r1, [pc, #228]	; (8004518 <menu+0x3090>)
 8004432:	4618      	mov	r0, r3
 8004434:	f008 fc1e 	bl	800cc74 <itoa>
			lcd_print(2, 12, snum);
 8004438:	4a37      	ldr	r2, [pc, #220]	; (8004518 <menu+0x3090>)
 800443a:	210c      	movs	r1, #12
 800443c:	2002      	movs	r0, #2
 800443e:	f7fc f913 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004442:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <menu+0x3078>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	220a      	movs	r2, #10
 8004448:	4933      	ldr	r1, [pc, #204]	; (8004518 <menu+0x3090>)
 800444a:	4618      	mov	r0, r3
 800444c:	f008 fc12 	bl	800cc74 <itoa>
			lcd_print(2, 13, snum);
 8004450:	4a31      	ldr	r2, [pc, #196]	; (8004518 <menu+0x3090>)
 8004452:	210d      	movs	r1, #13
 8004454:	2002      	movs	r0, #2
 8004456:	f7fc f907 	bl	8000668 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800445a:	4b28      	ldr	r3, [pc, #160]	; (80044fc <menu+0x3074>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	220a      	movs	r2, #10
 8004460:	492d      	ldr	r1, [pc, #180]	; (8004518 <menu+0x3090>)
 8004462:	4618      	mov	r0, r3
 8004464:	f008 fc06 	bl	800cc74 <itoa>
			lcd_print(2, 14, snum);
 8004468:	4a2b      	ldr	r2, [pc, #172]	; (8004518 <menu+0x3090>)
 800446a:	210e      	movs	r1, #14
 800446c:	2002      	movs	r0, #2
 800446e:	f7fc f8fb 	bl	8000668 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004472:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <menu+0x3070>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	220a      	movs	r2, #10
 8004478:	4927      	ldr	r1, [pc, #156]	; (8004518 <menu+0x3090>)
 800447a:	4618      	mov	r0, r3
 800447c:	f008 fbfa 	bl	800cc74 <itoa>
			lcd_print(2, 15, snum);
 8004480:	4a25      	ldr	r2, [pc, #148]	; (8004518 <menu+0x3090>)
 8004482:	210f      	movs	r1, #15
 8004484:	2002      	movs	r0, #2
 8004486:	f7fc f8ef 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <menu+0x306c>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	220a      	movs	r2, #10
 8004490:	4921      	ldr	r1, [pc, #132]	; (8004518 <menu+0x3090>)
 8004492:	4618      	mov	r0, r3
 8004494:	f008 fbee 	bl	800cc74 <itoa>
			lcd_print(2, 16, snum);
 8004498:	4a1f      	ldr	r2, [pc, #124]	; (8004518 <menu+0x3090>)
 800449a:	2110      	movs	r1, #16
 800449c:	2002      	movs	r0, #2
 800449e:	f7fc f8e3 	bl	8000668 <lcd_print>

			lcd_print(2, 1, "           ");
 80044a2:	4a1e      	ldr	r2, [pc, #120]	; (800451c <menu+0x3094>)
 80044a4:	2101      	movs	r1, #1
 80044a6:	2002      	movs	r0, #2
 80044a8:	f7fc f8de 	bl	8000668 <lcd_print>
 80044ac:	e048      	b.n	8004540 <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 80044ae:	4b17      	ldr	r3, [pc, #92]	; (800450c <menu+0x3084>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d144      	bne.n	8004540 <menu+0x30b8>
			if(dilSecim == 0) {
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <menu+0x304c>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d132      	bne.n	8004524 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80044be:	4a14      	ldr	r2, [pc, #80]	; (8004510 <menu+0x3088>)
 80044c0:	2101      	movs	r1, #1
 80044c2:	2001      	movs	r0, #1
 80044c4:	f7fc f8d0 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80044c8:	4a15      	ldr	r2, [pc, #84]	; (8004520 <menu+0x3098>)
 80044ca:	2101      	movs	r1, #1
 80044cc:	2002      	movs	r0, #2
 80044ce:	f7fc f8cb 	bl	8000668 <lcd_print>
 80044d2:	e035      	b.n	8004540 <menu+0x30b8>
 80044d4:	20000c6a 	.word	0x20000c6a
 80044d8:	0800dbec 	.word	0x0800dbec
 80044dc:	40010800 	.word	0x40010800
 80044e0:	20000c78 	.word	0x20000c78
 80044e4:	20000c67 	.word	0x20000c67
 80044e8:	20000b38 	.word	0x20000b38
 80044ec:	20000c75 	.word	0x20000c75
 80044f0:	20000c49 	.word	0x20000c49
 80044f4:	20000c46 	.word	0x20000c46
 80044f8:	20000c47 	.word	0x20000c47
 80044fc:	200009bf 	.word	0x200009bf
 8004500:	200009c0 	.word	0x200009c0
 8004504:	20000c48 	.word	0x20000c48
 8004508:	20000c8a 	.word	0x20000c8a
 800450c:	20000c69 	.word	0x20000c69
 8004510:	0800e274 	.word	0x0800e274
 8004514:	0800e288 	.word	0x0800e288
 8004518:	20000bcc 	.word	0x20000bcc
 800451c:	0800e29c 	.word	0x0800e29c
 8004520:	0800e2a8 	.word	0x0800e2a8
			} else if(dilSecim == 1) {
 8004524:	4b94      	ldr	r3, [pc, #592]	; (8004778 <menu+0x32f0>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d109      	bne.n	8004540 <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 800452c:	4a93      	ldr	r2, [pc, #588]	; (800477c <menu+0x32f4>)
 800452e:	2101      	movs	r1, #1
 8004530:	2001      	movs	r0, #1
 8004532:	f7fc f899 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004536:	4a92      	ldr	r2, [pc, #584]	; (8004780 <menu+0x32f8>)
 8004538:	2101      	movs	r1, #1
 800453a:	2002      	movs	r0, #2
 800453c:	f7fc f894 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004540:	2102      	movs	r1, #2
 8004542:	4890      	ldr	r0, [pc, #576]	; (8004784 <menu+0x32fc>)
 8004544:	f005 fb6a 	bl	8009c1c <HAL_GPIO_ReadPin>
 8004548:	4603      	mov	r3, r0
 800454a:	2b01      	cmp	r3, #1
 800454c:	d119      	bne.n	8004582 <menu+0x30fa>
 800454e:	4b8e      	ldr	r3, [pc, #568]	; (8004788 <menu+0x3300>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	f083 0301 	eor.w	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d012      	beq.n	8004582 <menu+0x30fa>
 800455c:	4b8b      	ldr	r3, [pc, #556]	; (800478c <menu+0x3304>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00e      	beq.n	8004582 <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 8004564:	4b8a      	ldr	r3, [pc, #552]	; (8004790 <menu+0x3308>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	3301      	adds	r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	4b88      	ldr	r3, [pc, #544]	; (8004790 <menu+0x3308>)
 800456e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004570:	4b87      	ldr	r3, [pc, #540]	; (8004790 <menu+0x3308>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d902      	bls.n	800457e <menu+0x30f6>
				calismaSayModu = 0;
 8004578:	4b85      	ldr	r3, [pc, #532]	; (8004790 <menu+0x3308>)
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800457e:	f001 fd0f 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004582:	2104      	movs	r1, #4
 8004584:	487f      	ldr	r0, [pc, #508]	; (8004784 <menu+0x32fc>)
 8004586:	f005 fb49 	bl	8009c1c <HAL_GPIO_ReadPin>
 800458a:	4603      	mov	r3, r0
 800458c:	2b01      	cmp	r3, #1
 800458e:	d119      	bne.n	80045c4 <menu+0x313c>
 8004590:	4b7d      	ldr	r3, [pc, #500]	; (8004788 <menu+0x3300>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f083 0301 	eor.w	r3, r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <menu+0x313c>
 800459e:	4b7b      	ldr	r3, [pc, #492]	; (800478c <menu+0x3304>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00e      	beq.n	80045c4 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 80045a6:	4b7a      	ldr	r3, [pc, #488]	; (8004790 <menu+0x3308>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4b78      	ldr	r3, [pc, #480]	; (8004790 <menu+0x3308>)
 80045b0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80045b2:	4b77      	ldr	r3, [pc, #476]	; (8004790 <menu+0x3308>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <menu+0x3138>
		   		calismaSayModu = 1;
 80045ba:	4b75      	ldr	r3, [pc, #468]	; (8004790 <menu+0x3308>)
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045c0:	f001 fcee 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045c4:	2108      	movs	r1, #8
 80045c6:	486f      	ldr	r0, [pc, #444]	; (8004784 <menu+0x32fc>)
 80045c8:	f005 fb28 	bl	8009c1c <HAL_GPIO_ReadPin>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d12b      	bne.n	800462a <menu+0x31a2>
 80045d2:	4b6d      	ldr	r3, [pc, #436]	; (8004788 <menu+0x3300>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f083 0301 	eor.w	r3, r3, #1
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d024      	beq.n	800462a <menu+0x31a2>
			eepromData[32] = 0;
 80045e0:	4b6c      	ldr	r3, [pc, #432]	; (8004794 <menu+0x330c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80045e8:	4b6a      	ldr	r3, [pc, #424]	; (8004794 <menu+0x330c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80045ee:	4b69      	ldr	r3, [pc, #420]	; (8004794 <menu+0x330c>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80045f4:	4b67      	ldr	r3, [pc, #412]	; (8004794 <menu+0x330c>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80045fa:	4b66      	ldr	r3, [pc, #408]	; (8004794 <menu+0x330c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004600:	4b65      	ldr	r3, [pc, #404]	; (8004798 <menu+0x3310>)
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004606:	4b65      	ldr	r3, [pc, #404]	; (800479c <menu+0x3314>)
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800460c:	4b64      	ldr	r3, [pc, #400]	; (80047a0 <menu+0x3318>)
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004612:	4b64      	ldr	r3, [pc, #400]	; (80047a4 <menu+0x331c>)
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004618:	4b63      	ldr	r3, [pc, #396]	; (80047a8 <menu+0x3320>)
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800461e:	4b5c      	ldr	r3, [pc, #368]	; (8004790 <menu+0x3308>)
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004624:	4b61      	ldr	r3, [pc, #388]	; (80047ac <menu+0x3324>)
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800462a:	4b61      	ldr	r3, [pc, #388]	; (80047b0 <menu+0x3328>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b1e      	cmp	r3, #30
 8004630:	d16f      	bne.n	8004712 <menu+0x328a>
		calismaSayModu = 0;
 8004632:	4b57      	ldr	r3, [pc, #348]	; (8004790 <menu+0x3308>)
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004638:	4b4f      	ldr	r3, [pc, #316]	; (8004778 <menu+0x32f0>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004640:	4a5c      	ldr	r2, [pc, #368]	; (80047b4 <menu+0x332c>)
 8004642:	2101      	movs	r1, #1
 8004644:	2001      	movs	r0, #1
 8004646:	f7fc f80f 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800464a:	4a5b      	ldr	r2, [pc, #364]	; (80047b8 <menu+0x3330>)
 800464c:	2101      	movs	r1, #1
 800464e:	2002      	movs	r0, #2
 8004650:	f7fc f80a 	bl	8000668 <lcd_print>
 8004654:	e00d      	b.n	8004672 <menu+0x31ea>
		} else if(dilSecim == 1) {
 8004656:	4b48      	ldr	r3, [pc, #288]	; (8004778 <menu+0x32f0>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d109      	bne.n	8004672 <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800465e:	4a57      	ldr	r2, [pc, #348]	; (80047bc <menu+0x3334>)
 8004660:	2101      	movs	r1, #1
 8004662:	2001      	movs	r0, #1
 8004664:	f7fc f800 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004668:	4a55      	ldr	r2, [pc, #340]	; (80047c0 <menu+0x3338>)
 800466a:	2101      	movs	r1, #1
 800466c:	2002      	movs	r0, #2
 800466e:	f7fb fffb 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004672:	2102      	movs	r1, #2
 8004674:	4843      	ldr	r0, [pc, #268]	; (8004784 <menu+0x32fc>)
 8004676:	f005 fad1 	bl	8009c1c <HAL_GPIO_ReadPin>
 800467a:	4603      	mov	r3, r0
 800467c:	2b01      	cmp	r3, #1
 800467e:	d115      	bne.n	80046ac <menu+0x3224>
 8004680:	4b41      	ldr	r3, [pc, #260]	; (8004788 <menu+0x3300>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	f083 0301 	eor.w	r3, r3, #1
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00e      	beq.n	80046ac <menu+0x3224>
			dilSecim = dilSecim + 1;
 800468e:	4b3a      	ldr	r3, [pc, #232]	; (8004778 <menu+0x32f0>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <menu+0x32f0>)
 8004698:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800469a:	4b37      	ldr	r3, [pc, #220]	; (8004778 <menu+0x32f0>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d902      	bls.n	80046a8 <menu+0x3220>
				dilSecim = 0;
 80046a2:	4b35      	ldr	r3, [pc, #212]	; (8004778 <menu+0x32f0>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046a8:	f001 fc7a 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ac:	2104      	movs	r1, #4
 80046ae:	4835      	ldr	r0, [pc, #212]	; (8004784 <menu+0x32fc>)
 80046b0:	f005 fab4 	bl	8009c1c <HAL_GPIO_ReadPin>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d115      	bne.n	80046e6 <menu+0x325e>
 80046ba:	4b33      	ldr	r3, [pc, #204]	; (8004788 <menu+0x3300>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	f083 0301 	eor.w	r3, r3, #1
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00e      	beq.n	80046e6 <menu+0x325e>
			dilSecim = dilSecim - 1;
 80046c8:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <menu+0x32f0>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	4b29      	ldr	r3, [pc, #164]	; (8004778 <menu+0x32f0>)
 80046d2:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80046d4:	4b28      	ldr	r3, [pc, #160]	; (8004778 <menu+0x32f0>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <menu+0x325a>
		   		dilSecim = 1;
 80046dc:	4b26      	ldr	r3, [pc, #152]	; (8004778 <menu+0x32f0>)
 80046de:	2201      	movs	r2, #1
 80046e0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80046e2:	f001 fc5d 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046e6:	2108      	movs	r1, #8
 80046e8:	4826      	ldr	r0, [pc, #152]	; (8004784 <menu+0x32fc>)
 80046ea:	f005 fa97 	bl	8009c1c <HAL_GPIO_ReadPin>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d10e      	bne.n	8004712 <menu+0x328a>
 80046f4:	4b24      	ldr	r3, [pc, #144]	; (8004788 <menu+0x3300>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f083 0301 	eor.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <menu+0x328a>
			eepromData[33] = dilSecim;
 8004702:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <menu+0x32f0>)
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	4b23      	ldr	r3, [pc, #140]	; (8004794 <menu+0x330c>)
 8004708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 800470c:	4b27      	ldr	r3, [pc, #156]	; (80047ac <menu+0x3324>)
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004712:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <menu+0x3328>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b1f      	cmp	r3, #31
 8004718:	f040 80b7 	bne.w	800488a <menu+0x3402>
		calismaSayModu = 0;
 800471c:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <menu+0x3308>)
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004722:	4a28      	ldr	r2, [pc, #160]	; (80047c4 <menu+0x333c>)
 8004724:	2101      	movs	r1, #1
 8004726:	2001      	movs	r0, #1
 8004728:	f7fb ff9e 	bl	8000668 <lcd_print>

		if(iotMode == 0) {
 800472c:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <menu+0x3340>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d113      	bne.n	800475c <menu+0x32d4>
			if(dilSecim == 0) {
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <menu+0x32f0>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 800473c:	4a23      	ldr	r2, [pc, #140]	; (80047cc <menu+0x3344>)
 800473e:	2101      	movs	r1, #1
 8004740:	2002      	movs	r0, #2
 8004742:	f7fb ff91 	bl	8000668 <lcd_print>
 8004746:	e050      	b.n	80047ea <menu+0x3362>
			} else if(dilSecim == 1) {
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <menu+0x32f0>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d14c      	bne.n	80047ea <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 8004750:	4a1f      	ldr	r2, [pc, #124]	; (80047d0 <menu+0x3348>)
 8004752:	2101      	movs	r1, #1
 8004754:	2002      	movs	r0, #2
 8004756:	f7fb ff87 	bl	8000668 <lcd_print>
 800475a:	e046      	b.n	80047ea <menu+0x3362>
			}
		} else if(iotMode == 1) {
 800475c:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <menu+0x3340>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d142      	bne.n	80047ea <menu+0x3362>
			if(dilSecim == 0){
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <menu+0x32f0>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d135      	bne.n	80047d8 <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 800476c:	4a19      	ldr	r2, [pc, #100]	; (80047d4 <menu+0x334c>)
 800476e:	2101      	movs	r1, #1
 8004770:	2002      	movs	r0, #2
 8004772:	f7fb ff79 	bl	8000668 <lcd_print>
 8004776:	e038      	b.n	80047ea <menu+0x3362>
 8004778:	20000c6a 	.word	0x20000c6a
 800477c:	0800e288 	.word	0x0800e288
 8004780:	0800e2bc 	.word	0x0800e2bc
 8004784:	40010800 	.word	0x40010800
 8004788:	20000c78 	.word	0x20000c78
 800478c:	20000c8a 	.word	0x20000c8a
 8004790:	20000c69 	.word	0x20000c69
 8004794:	20000b38 	.word	0x20000b38
 8004798:	20000c48 	.word	0x20000c48
 800479c:	200009c0 	.word	0x200009c0
 80047a0:	200009bf 	.word	0x200009bf
 80047a4:	20000c47 	.word	0x20000c47
 80047a8:	20000c46 	.word	0x20000c46
 80047ac:	20000c75 	.word	0x20000c75
 80047b0:	20000c49 	.word	0x20000c49
 80047b4:	0800e2d0 	.word	0x0800e2d0
 80047b8:	0800e2e4 	.word	0x0800e2e4
 80047bc:	0800e2f8 	.word	0x0800e2f8
 80047c0:	0800e30c 	.word	0x0800e30c
 80047c4:	0800e320 	.word	0x0800e320
 80047c8:	20000c68 	.word	0x20000c68
 80047cc:	0800db78 	.word	0x0800db78
 80047d0:	0800db8c 	.word	0x0800db8c
 80047d4:	0800dbd8 	.word	0x0800dbd8
			} else if(dilSecim == 1) {
 80047d8:	4b90      	ldr	r3, [pc, #576]	; (8004a1c <menu+0x3594>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d104      	bne.n	80047ea <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 80047e0:	4a8f      	ldr	r2, [pc, #572]	; (8004a20 <menu+0x3598>)
 80047e2:	2101      	movs	r1, #1
 80047e4:	2002      	movs	r0, #2
 80047e6:	f7fb ff3f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ea:	2102      	movs	r1, #2
 80047ec:	488d      	ldr	r0, [pc, #564]	; (8004a24 <menu+0x359c>)
 80047ee:	f005 fa15 	bl	8009c1c <HAL_GPIO_ReadPin>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d115      	bne.n	8004824 <menu+0x339c>
 80047f8:	4b8b      	ldr	r3, [pc, #556]	; (8004a28 <menu+0x35a0>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	f083 0301 	eor.w	r3, r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00e      	beq.n	8004824 <menu+0x339c>
			iotMode = iotMode + 1;
 8004806:	4b89      	ldr	r3, [pc, #548]	; (8004a2c <menu+0x35a4>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	3301      	adds	r3, #1
 800480c:	b2da      	uxtb	r2, r3
 800480e:	4b87      	ldr	r3, [pc, #540]	; (8004a2c <menu+0x35a4>)
 8004810:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004812:	4b86      	ldr	r3, [pc, #536]	; (8004a2c <menu+0x35a4>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d902      	bls.n	8004820 <menu+0x3398>
				iotMode = 0;
 800481a:	4b84      	ldr	r3, [pc, #528]	; (8004a2c <menu+0x35a4>)
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004820:	f001 fbbe 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004824:	2104      	movs	r1, #4
 8004826:	487f      	ldr	r0, [pc, #508]	; (8004a24 <menu+0x359c>)
 8004828:	f005 f9f8 	bl	8009c1c <HAL_GPIO_ReadPin>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d115      	bne.n	800485e <menu+0x33d6>
 8004832:	4b7d      	ldr	r3, [pc, #500]	; (8004a28 <menu+0x35a0>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	f083 0301 	eor.w	r3, r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00e      	beq.n	800485e <menu+0x33d6>
			iotMode = iotMode - 1;
 8004840:	4b7a      	ldr	r3, [pc, #488]	; (8004a2c <menu+0x35a4>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	3b01      	subs	r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	4b78      	ldr	r3, [pc, #480]	; (8004a2c <menu+0x35a4>)
 800484a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 800484c:	4b77      	ldr	r3, [pc, #476]	; (8004a2c <menu+0x35a4>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <menu+0x33d2>
		   		iotMode = 1;
 8004854:	4b75      	ldr	r3, [pc, #468]	; (8004a2c <menu+0x35a4>)
 8004856:	2201      	movs	r2, #1
 8004858:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800485a:	f001 fba1 	bl	8005fa0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800485e:	2108      	movs	r1, #8
 8004860:	4870      	ldr	r0, [pc, #448]	; (8004a24 <menu+0x359c>)
 8004862:	f005 f9db 	bl	8009c1c <HAL_GPIO_ReadPin>
 8004866:	4603      	mov	r3, r0
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10e      	bne.n	800488a <menu+0x3402>
 800486c:	4b6e      	ldr	r3, [pc, #440]	; (8004a28 <menu+0x35a0>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	f083 0301 	eor.w	r3, r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <menu+0x3402>
			eepromData[37] = iotMode;
 800487a:	4b6c      	ldr	r3, [pc, #432]	; (8004a2c <menu+0x35a4>)
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	4b6c      	ldr	r3, [pc, #432]	; (8004a30 <menu+0x35a8>)
 8004880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 8004884:	4b6b      	ldr	r3, [pc, #428]	; (8004a34 <menu+0x35ac>)
 8004886:	2201      	movs	r2, #1
 8004888:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800488a:	4b6b      	ldr	r3, [pc, #428]	; (8004a38 <menu+0x35b0>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b20      	cmp	r3, #32
 8004890:	d147      	bne.n	8004922 <menu+0x349a>
		calismaSayModu = 0;
 8004892:	4b6a      	ldr	r3, [pc, #424]	; (8004a3c <menu+0x35b4>)
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004898:	4a69      	ldr	r2, [pc, #420]	; (8004a40 <menu+0x35b8>)
 800489a:	2101      	movs	r1, #1
 800489c:	2001      	movs	r0, #1
 800489e:	f7fb fee3 	bl	8000668 <lcd_print>

		lcd_print(2, 1, machineID);
 80048a2:	4a68      	ldr	r2, [pc, #416]	; (8004a44 <menu+0x35bc>)
 80048a4:	2101      	movs	r1, #1
 80048a6:	2002      	movs	r0, #2
 80048a8:	f7fb fede 	bl	8000668 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 80048ac:	4865      	ldr	r0, [pc, #404]	; (8004a44 <menu+0x35bc>)
 80048ae:	f7fb fcb9 	bl	8000224 <strlen>
 80048b2:	4603      	mov	r3, r0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	3301      	adds	r3, #1
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	4a63      	ldr	r2, [pc, #396]	; (8004a48 <menu+0x35c0>)
 80048bc:	4619      	mov	r1, r3
 80048be:	2002      	movs	r0, #2
 80048c0:	f7fb fed2 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048c4:	2102      	movs	r1, #2
 80048c6:	4857      	ldr	r0, [pc, #348]	; (8004a24 <menu+0x359c>)
 80048c8:	f005 f9a8 	bl	8009c1c <HAL_GPIO_ReadPin>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d127      	bne.n	8004922 <menu+0x349a>
 80048d2:	2104      	movs	r1, #4
 80048d4:	4853      	ldr	r0, [pc, #332]	; (8004a24 <menu+0x359c>)
 80048d6:	f005 f9a1 	bl	8009c1c <HAL_GPIO_ReadPin>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d120      	bne.n	8004922 <menu+0x349a>
 80048e0:	4b51      	ldr	r3, [pc, #324]	; (8004a28 <menu+0x35a0>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f083 0301 	eor.w	r3, r3, #1
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d019      	beq.n	8004922 <menu+0x349a>
			takeMachineID(0, hi2c1);
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7fc f8f3 	bl	8000adc <takeMachineID>

			HAL_Delay(50);
 80048f6:	2032      	movs	r0, #50	; 0x32
 80048f8:	f004 fbc0 	bl	800907c <HAL_Delay>

			lcd_print(2, 1, machineID);
 80048fc:	4a51      	ldr	r2, [pc, #324]	; (8004a44 <menu+0x35bc>)
 80048fe:	2101      	movs	r1, #1
 8004900:	2002      	movs	r0, #2
 8004902:	f7fb feb1 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 8004906:	484f      	ldr	r0, [pc, #316]	; (8004a44 <menu+0x35bc>)
 8004908:	f7fb fc8c 	bl	8000224 <strlen>
 800490c:	4603      	mov	r3, r0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	3301      	adds	r3, #1
 8004912:	b2db      	uxtb	r3, r3
 8004914:	4a4c      	ldr	r2, [pc, #304]	; (8004a48 <menu+0x35c0>)
 8004916:	4619      	mov	r1, r3
 8004918:	2002      	movs	r0, #2
 800491a:	f7fb fea5 	bl	8000668 <lcd_print>

			bekle();
 800491e:	f001 fb3f 	bl	8005fa0 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004922:	4b45      	ldr	r3, [pc, #276]	; (8004a38 <menu+0x35b0>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b21      	cmp	r3, #33	; 0x21
 8004928:	d154      	bne.n	80049d4 <menu+0x354c>
		calismaSayModu = 0;
 800492a:	4b44      	ldr	r3, [pc, #272]	; (8004a3c <menu+0x35b4>)
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004930:	4a46      	ldr	r2, [pc, #280]	; (8004a4c <menu+0x35c4>)
 8004932:	2101      	movs	r1, #1
 8004934:	2001      	movs	r0, #1
 8004936:	f7fb fe97 	bl	8000668 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 800493a:	4845      	ldr	r0, [pc, #276]	; (8004a50 <menu+0x35c8>)
 800493c:	f7fb fc72 	bl	8000224 <strlen>
 8004940:	4603      	mov	r3, r0
 8004942:	2b10      	cmp	r3, #16
 8004944:	d811      	bhi.n	800496a <menu+0x34e2>
			lcd_print(2, 1, wifiSSID);
 8004946:	4a42      	ldr	r2, [pc, #264]	; (8004a50 <menu+0x35c8>)
 8004948:	2101      	movs	r1, #1
 800494a:	2002      	movs	r0, #2
 800494c:	f7fb fe8c 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004950:	483f      	ldr	r0, [pc, #252]	; (8004a50 <menu+0x35c8>)
 8004952:	f7fb fc67 	bl	8000224 <strlen>
 8004956:	4603      	mov	r3, r0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	3301      	adds	r3, #1
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4a3a      	ldr	r2, [pc, #232]	; (8004a48 <menu+0x35c0>)
 8004960:	4619      	mov	r1, r3
 8004962:	2002      	movs	r0, #2
 8004964:	f7fb fe80 	bl	8000668 <lcd_print>
 8004968:	e005      	b.n	8004976 <menu+0x34ee>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 800496a:	2300      	movs	r3, #0
 800496c:	2202      	movs	r2, #2
 800496e:	2101      	movs	r1, #1
 8004970:	4837      	ldr	r0, [pc, #220]	; (8004a50 <menu+0x35c8>)
 8004972:	f7fc fce3 	bl	800133c <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004976:	2102      	movs	r1, #2
 8004978:	482a      	ldr	r0, [pc, #168]	; (8004a24 <menu+0x359c>)
 800497a:	f005 f94f 	bl	8009c1c <HAL_GPIO_ReadPin>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d127      	bne.n	80049d4 <menu+0x354c>
 8004984:	2104      	movs	r1, #4
 8004986:	4827      	ldr	r0, [pc, #156]	; (8004a24 <menu+0x359c>)
 8004988:	f005 f948 	bl	8009c1c <HAL_GPIO_ReadPin>
 800498c:	4603      	mov	r3, r0
 800498e:	2b01      	cmp	r3, #1
 8004990:	d120      	bne.n	80049d4 <menu+0x354c>
 8004992:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <menu+0x35a0>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	f083 0301 	eor.w	r3, r3, #1
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d019      	beq.n	80049d4 <menu+0x354c>
			takeWifiSSID(0, hi2c1);
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	2000      	movs	r0, #0
 80049a4:	f7fc f9ae 	bl	8000d04 <takeWifiSSID>

			HAL_Delay(50);
 80049a8:	2032      	movs	r0, #50	; 0x32
 80049aa:	f004 fb67 	bl	800907c <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 80049ae:	4a28      	ldr	r2, [pc, #160]	; (8004a50 <menu+0x35c8>)
 80049b0:	2101      	movs	r1, #1
 80049b2:	2002      	movs	r0, #2
 80049b4:	f7fb fe58 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80049b8:	4825      	ldr	r0, [pc, #148]	; (8004a50 <menu+0x35c8>)
 80049ba:	f7fb fc33 	bl	8000224 <strlen>
 80049be:	4603      	mov	r3, r0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	3301      	adds	r3, #1
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <menu+0x35c0>)
 80049c8:	4619      	mov	r1, r3
 80049ca:	2002      	movs	r0, #2
 80049cc:	f7fb fe4c 	bl	8000668 <lcd_print>

			bekle();
 80049d0:	f001 fae6 	bl	8005fa0 <bekle>
		}
	}

	if (menuSayac == 34) {
 80049d4:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <menu+0x35b0>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b22      	cmp	r3, #34	; 0x22
 80049da:	d174      	bne.n	8004ac6 <menu+0x363e>
		calismaSayModu = 0;
 80049dc:	4b17      	ldr	r3, [pc, #92]	; (8004a3c <menu+0x35b4>)
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80049e2:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <menu+0x35cc>)
 80049e4:	2101      	movs	r1, #1
 80049e6:	2001      	movs	r0, #1
 80049e8:	f7fb fe3e 	bl	8000668 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 80049ec:	481a      	ldr	r0, [pc, #104]	; (8004a58 <menu+0x35d0>)
 80049ee:	f7fb fc19 	bl	8000224 <strlen>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d831      	bhi.n	8004a5c <menu+0x35d4>
			lcd_print(2, 1, wifiPass);
 80049f8:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <menu+0x35d0>)
 80049fa:	2101      	movs	r1, #1
 80049fc:	2002      	movs	r0, #2
 80049fe:	f7fb fe33 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a02:	4815      	ldr	r0, [pc, #84]	; (8004a58 <menu+0x35d0>)
 8004a04:	f7fb fc0e 	bl	8000224 <strlen>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	4a0d      	ldr	r2, [pc, #52]	; (8004a48 <menu+0x35c0>)
 8004a12:	4619      	mov	r1, r3
 8004a14:	2002      	movs	r0, #2
 8004a16:	f7fb fe27 	bl	8000668 <lcd_print>
 8004a1a:	e025      	b.n	8004a68 <menu+0x35e0>
 8004a1c:	20000c6a 	.word	0x20000c6a
 8004a20:	0800dbec 	.word	0x0800dbec
 8004a24:	40010800 	.word	0x40010800
 8004a28:	20000c78 	.word	0x20000c78
 8004a2c:	20000c68 	.word	0x20000c68
 8004a30:	20000b38 	.word	0x20000b38
 8004a34:	20000c75 	.word	0x20000c75
 8004a38:	20000c49 	.word	0x20000c49
 8004a3c:	20000c69 	.word	0x20000c69
 8004a40:	0800e334 	.word	0x0800e334
 8004a44:	20000bf4 	.word	0x20000bf4
 8004a48:	2000094c 	.word	0x2000094c
 8004a4c:	0800e348 	.word	0x0800e348
 8004a50:	20000c00 	.word	0x20000c00
 8004a54:	0800e35c 	.word	0x0800e35c
 8004a58:	20000c24 	.word	0x20000c24
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	2202      	movs	r2, #2
 8004a60:	2101      	movs	r1, #1
 8004a62:	4834      	ldr	r0, [pc, #208]	; (8004b34 <menu+0x36ac>)
 8004a64:	f7fc fc6a 	bl	800133c <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a68:	2102      	movs	r1, #2
 8004a6a:	4833      	ldr	r0, [pc, #204]	; (8004b38 <menu+0x36b0>)
 8004a6c:	f005 f8d6 	bl	8009c1c <HAL_GPIO_ReadPin>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d127      	bne.n	8004ac6 <menu+0x363e>
 8004a76:	2104      	movs	r1, #4
 8004a78:	482f      	ldr	r0, [pc, #188]	; (8004b38 <menu+0x36b0>)
 8004a7a:	f005 f8cf 	bl	8009c1c <HAL_GPIO_ReadPin>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d120      	bne.n	8004ac6 <menu+0x363e>
 8004a84:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <menu+0x36b4>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	f083 0301 	eor.w	r3, r3, #1
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d019      	beq.n	8004ac6 <menu+0x363e>
			takeWifiPass(0, hi2c1);
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	2000      	movs	r0, #0
 8004a96:	f7fc faa9 	bl	8000fec <takeWifiPass>

			HAL_Delay(50);
 8004a9a:	2032      	movs	r0, #50	; 0x32
 8004a9c:	f004 faee 	bl	800907c <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004aa0:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <menu+0x36ac>)
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	2002      	movs	r0, #2
 8004aa6:	f7fb fddf 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004aaa:	4822      	ldr	r0, [pc, #136]	; (8004b34 <menu+0x36ac>)
 8004aac:	f7fb fbba 	bl	8000224 <strlen>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <menu+0x36b8>)
 8004aba:	4619      	mov	r1, r3
 8004abc:	2002      	movs	r0, #2
 8004abe:	f7fb fdd3 	bl	8000668 <lcd_print>

			bekle();
 8004ac2:	f001 fa6d 	bl	8005fa0 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004ac6:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <menu+0x36bc>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b23      	cmp	r3, #35	; 0x23
 8004acc:	d12e      	bne.n	8004b2c <menu+0x36a4>
		if(dilSecim == 0) {
 8004ace:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <menu+0x36c0>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <menu+0x3664>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004ad6:	4a1d      	ldr	r2, [pc, #116]	; (8004b4c <menu+0x36c4>)
 8004ad8:	2101      	movs	r1, #1
 8004ada:	2001      	movs	r0, #1
 8004adc:	f7fb fdc4 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004ae0:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <menu+0x36c8>)
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	2002      	movs	r0, #2
 8004ae6:	f7fb fdbf 	bl	8000668 <lcd_print>
 8004aea:	e00d      	b.n	8004b08 <menu+0x3680>
		} else if(dilSecim == 1) {
 8004aec:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <menu+0x36c0>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d109      	bne.n	8004b08 <menu+0x3680>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004af4:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <menu+0x36cc>)
 8004af6:	2101      	movs	r1, #1
 8004af8:	2001      	movs	r0, #1
 8004afa:	f7fb fdb5 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004afe:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <menu+0x36d0>)
 8004b00:	2101      	movs	r1, #1
 8004b02:	2002      	movs	r0, #2
 8004b04:	f7fb fdb0 	bl	8000668 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004b08:	2108      	movs	r1, #8
 8004b0a:	480b      	ldr	r0, [pc, #44]	; (8004b38 <menu+0x36b0>)
 8004b0c:	f005 f886 	bl	8009c1c <HAL_GPIO_ReadPin>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d10a      	bne.n	8004b2c <menu+0x36a4>
			menuGiris = 0;
 8004b16:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <menu+0x36d4>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004b1c:	f7fb fdd0 	bl	80006c0 <lcd_clear>
			HAL_Delay(500);
 8004b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b24:	f004 faaa 	bl	800907c <HAL_Delay>
			NVIC_SystemReset();
 8004b28:	f7fb fe12 	bl	8000750 <__NVIC_SystemReset>
		}
	}
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000c24 	.word	0x20000c24
 8004b38:	40010800 	.word	0x40010800
 8004b3c:	20000c78 	.word	0x20000c78
 8004b40:	2000094c 	.word	0x2000094c
 8004b44:	20000c49 	.word	0x20000c49
 8004b48:	20000c6a 	.word	0x20000c6a
 8004b4c:	0800e370 	.word	0x0800e370
 8004b50:	0800e384 	.word	0x0800e384
 8004b54:	0800e398 	.word	0x0800e398
 8004b58:	0800e3ac 	.word	0x0800e3ac
 8004b5c:	20000c66 	.word	0x20000c66

08004b60 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004b6a:	48a9      	ldr	r0, [pc, #676]	; (8004e10 <loadMenuTexts+0x2b0>)
 8004b6c:	f7fb fe06 	bl	800077c <copyText>
 8004b70:	4603      	mov	r3, r0
 8004b72:	4aa8      	ldr	r2, [pc, #672]	; (8004e14 <loadMenuTexts+0x2b4>)
 8004b74:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004b76:	48a8      	ldr	r0, [pc, #672]	; (8004e18 <loadMenuTexts+0x2b8>)
 8004b78:	f7fb fe00 	bl	800077c <copyText>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	4aa7      	ldr	r2, [pc, #668]	; (8004e1c <loadMenuTexts+0x2bc>)
 8004b80:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004b82:	48a7      	ldr	r0, [pc, #668]	; (8004e20 <loadMenuTexts+0x2c0>)
 8004b84:	f7fb fdfa 	bl	800077c <copyText>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4aa6      	ldr	r2, [pc, #664]	; (8004e24 <loadMenuTexts+0x2c4>)
 8004b8c:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004b8e:	48a6      	ldr	r0, [pc, #664]	; (8004e28 <loadMenuTexts+0x2c8>)
 8004b90:	f7fb fdf4 	bl	800077c <copyText>
 8004b94:	4603      	mov	r3, r0
 8004b96:	4aa5      	ldr	r2, [pc, #660]	; (8004e2c <loadMenuTexts+0x2cc>)
 8004b98:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004b9a:	48a5      	ldr	r0, [pc, #660]	; (8004e30 <loadMenuTexts+0x2d0>)
 8004b9c:	f7fb fdee 	bl	800077c <copyText>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4aa4      	ldr	r2, [pc, #656]	; (8004e34 <loadMenuTexts+0x2d4>)
 8004ba4:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004ba6:	48a4      	ldr	r0, [pc, #656]	; (8004e38 <loadMenuTexts+0x2d8>)
 8004ba8:	f7fb fde8 	bl	800077c <copyText>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4aa3      	ldr	r2, [pc, #652]	; (8004e3c <loadMenuTexts+0x2dc>)
 8004bb0:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004bb2:	48a3      	ldr	r0, [pc, #652]	; (8004e40 <loadMenuTexts+0x2e0>)
 8004bb4:	f7fb fde2 	bl	800077c <copyText>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4aa2      	ldr	r2, [pc, #648]	; (8004e44 <loadMenuTexts+0x2e4>)
 8004bbc:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 82d1 	bne.w	8005168 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004bc6:	48a0      	ldr	r0, [pc, #640]	; (8004e48 <loadMenuTexts+0x2e8>)
 8004bc8:	f7fb fdd8 	bl	800077c <copyText>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	4a9f      	ldr	r2, [pc, #636]	; (8004e4c <loadMenuTexts+0x2ec>)
 8004bd0:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004bd2:	489f      	ldr	r0, [pc, #636]	; (8004e50 <loadMenuTexts+0x2f0>)
 8004bd4:	f7fb fdd2 	bl	800077c <copyText>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	4a9e      	ldr	r2, [pc, #632]	; (8004e54 <loadMenuTexts+0x2f4>)
 8004bdc:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004bde:	489e      	ldr	r0, [pc, #632]	; (8004e58 <loadMenuTexts+0x2f8>)
 8004be0:	f7fb fdcc 	bl	800077c <copyText>
 8004be4:	4603      	mov	r3, r0
 8004be6:	4a9d      	ldr	r2, [pc, #628]	; (8004e5c <loadMenuTexts+0x2fc>)
 8004be8:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004bea:	489d      	ldr	r0, [pc, #628]	; (8004e60 <loadMenuTexts+0x300>)
 8004bec:	f7fb fdc6 	bl	800077c <copyText>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4a9c      	ldr	r2, [pc, #624]	; (8004e64 <loadMenuTexts+0x304>)
 8004bf4:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004bf6:	489c      	ldr	r0, [pc, #624]	; (8004e68 <loadMenuTexts+0x308>)
 8004bf8:	f7fb fdc0 	bl	800077c <copyText>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	4a9b      	ldr	r2, [pc, #620]	; (8004e6c <loadMenuTexts+0x30c>)
 8004c00:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004c02:	489b      	ldr	r0, [pc, #620]	; (8004e70 <loadMenuTexts+0x310>)
 8004c04:	f7fb fdba 	bl	800077c <copyText>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	4a9a      	ldr	r2, [pc, #616]	; (8004e74 <loadMenuTexts+0x314>)
 8004c0c:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004c0e:	489a      	ldr	r0, [pc, #616]	; (8004e78 <loadMenuTexts+0x318>)
 8004c10:	f7fb fdb4 	bl	800077c <copyText>
 8004c14:	4603      	mov	r3, r0
 8004c16:	4a99      	ldr	r2, [pc, #612]	; (8004e7c <loadMenuTexts+0x31c>)
 8004c18:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004c1a:	4899      	ldr	r0, [pc, #612]	; (8004e80 <loadMenuTexts+0x320>)
 8004c1c:	f7fb fdae 	bl	800077c <copyText>
 8004c20:	4603      	mov	r3, r0
 8004c22:	4a98      	ldr	r2, [pc, #608]	; (8004e84 <loadMenuTexts+0x324>)
 8004c24:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004c26:	4898      	ldr	r0, [pc, #608]	; (8004e88 <loadMenuTexts+0x328>)
 8004c28:	f7fb fda8 	bl	800077c <copyText>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4a97      	ldr	r2, [pc, #604]	; (8004e8c <loadMenuTexts+0x32c>)
 8004c30:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004c32:	4897      	ldr	r0, [pc, #604]	; (8004e90 <loadMenuTexts+0x330>)
 8004c34:	f7fb fda2 	bl	800077c <copyText>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4a96      	ldr	r2, [pc, #600]	; (8004e94 <loadMenuTexts+0x334>)
 8004c3c:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004c3e:	4896      	ldr	r0, [pc, #600]	; (8004e98 <loadMenuTexts+0x338>)
 8004c40:	f7fb fd9c 	bl	800077c <copyText>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4a95      	ldr	r2, [pc, #596]	; (8004e9c <loadMenuTexts+0x33c>)
 8004c48:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004c4a:	4895      	ldr	r0, [pc, #596]	; (8004ea0 <loadMenuTexts+0x340>)
 8004c4c:	f7fb fd96 	bl	800077c <copyText>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4a94      	ldr	r2, [pc, #592]	; (8004ea4 <loadMenuTexts+0x344>)
 8004c54:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004c56:	4894      	ldr	r0, [pc, #592]	; (8004ea8 <loadMenuTexts+0x348>)
 8004c58:	f7fb fd90 	bl	800077c <copyText>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4a93      	ldr	r2, [pc, #588]	; (8004eac <loadMenuTexts+0x34c>)
 8004c60:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004c62:	4893      	ldr	r0, [pc, #588]	; (8004eb0 <loadMenuTexts+0x350>)
 8004c64:	f7fb fd8a 	bl	800077c <copyText>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4a92      	ldr	r2, [pc, #584]	; (8004eb4 <loadMenuTexts+0x354>)
 8004c6c:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004c6e:	4892      	ldr	r0, [pc, #584]	; (8004eb8 <loadMenuTexts+0x358>)
 8004c70:	f7fb fd84 	bl	800077c <copyText>
 8004c74:	4603      	mov	r3, r0
 8004c76:	4a91      	ldr	r2, [pc, #580]	; (8004ebc <loadMenuTexts+0x35c>)
 8004c78:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004c7a:	4891      	ldr	r0, [pc, #580]	; (8004ec0 <loadMenuTexts+0x360>)
 8004c7c:	f7fb fd7e 	bl	800077c <copyText>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4a90      	ldr	r2, [pc, #576]	; (8004ec4 <loadMenuTexts+0x364>)
 8004c84:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004c86:	4890      	ldr	r0, [pc, #576]	; (8004ec8 <loadMenuTexts+0x368>)
 8004c88:	f7fb fd78 	bl	800077c <copyText>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	4a8f      	ldr	r2, [pc, #572]	; (8004ecc <loadMenuTexts+0x36c>)
 8004c90:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004c92:	488f      	ldr	r0, [pc, #572]	; (8004ed0 <loadMenuTexts+0x370>)
 8004c94:	f7fb fd72 	bl	800077c <copyText>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4a8e      	ldr	r2, [pc, #568]	; (8004ed4 <loadMenuTexts+0x374>)
 8004c9c:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004c9e:	488e      	ldr	r0, [pc, #568]	; (8004ed8 <loadMenuTexts+0x378>)
 8004ca0:	f7fb fd6c 	bl	800077c <copyText>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4a8d      	ldr	r2, [pc, #564]	; (8004edc <loadMenuTexts+0x37c>)
 8004ca8:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004caa:	488d      	ldr	r0, [pc, #564]	; (8004ee0 <loadMenuTexts+0x380>)
 8004cac:	f7fb fd66 	bl	800077c <copyText>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4a8c      	ldr	r2, [pc, #560]	; (8004ee4 <loadMenuTexts+0x384>)
 8004cb4:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004cb6:	488c      	ldr	r0, [pc, #560]	; (8004ee8 <loadMenuTexts+0x388>)
 8004cb8:	f7fb fd60 	bl	800077c <copyText>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4a8b      	ldr	r2, [pc, #556]	; (8004eec <loadMenuTexts+0x38c>)
 8004cc0:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004cc2:	488b      	ldr	r0, [pc, #556]	; (8004ef0 <loadMenuTexts+0x390>)
 8004cc4:	f7fb fd5a 	bl	800077c <copyText>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4a8a      	ldr	r2, [pc, #552]	; (8004ef4 <loadMenuTexts+0x394>)
 8004ccc:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004cce:	488a      	ldr	r0, [pc, #552]	; (8004ef8 <loadMenuTexts+0x398>)
 8004cd0:	f7fb fd54 	bl	800077c <copyText>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4a89      	ldr	r2, [pc, #548]	; (8004efc <loadMenuTexts+0x39c>)
 8004cd8:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004cda:	4889      	ldr	r0, [pc, #548]	; (8004f00 <loadMenuTexts+0x3a0>)
 8004cdc:	f7fb fd4e 	bl	800077c <copyText>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4a88      	ldr	r2, [pc, #544]	; (8004f04 <loadMenuTexts+0x3a4>)
 8004ce4:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004ce6:	4888      	ldr	r0, [pc, #544]	; (8004f08 <loadMenuTexts+0x3a8>)
 8004ce8:	f7fb fd48 	bl	800077c <copyText>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4a87      	ldr	r2, [pc, #540]	; (8004f0c <loadMenuTexts+0x3ac>)
 8004cf0:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004cf2:	4887      	ldr	r0, [pc, #540]	; (8004f10 <loadMenuTexts+0x3b0>)
 8004cf4:	f7fb fd42 	bl	800077c <copyText>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4a86      	ldr	r2, [pc, #536]	; (8004f14 <loadMenuTexts+0x3b4>)
 8004cfc:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004cfe:	4886      	ldr	r0, [pc, #536]	; (8004f18 <loadMenuTexts+0x3b8>)
 8004d00:	f7fb fd3c 	bl	800077c <copyText>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4a85      	ldr	r2, [pc, #532]	; (8004f1c <loadMenuTexts+0x3bc>)
 8004d08:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004d0a:	4885      	ldr	r0, [pc, #532]	; (8004f20 <loadMenuTexts+0x3c0>)
 8004d0c:	f7fb fd36 	bl	800077c <copyText>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4a84      	ldr	r2, [pc, #528]	; (8004f24 <loadMenuTexts+0x3c4>)
 8004d14:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004d16:	4884      	ldr	r0, [pc, #528]	; (8004f28 <loadMenuTexts+0x3c8>)
 8004d18:	f7fb fd30 	bl	800077c <copyText>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4a83      	ldr	r2, [pc, #524]	; (8004f2c <loadMenuTexts+0x3cc>)
 8004d20:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004d22:	4883      	ldr	r0, [pc, #524]	; (8004f30 <loadMenuTexts+0x3d0>)
 8004d24:	f7fb fd2a 	bl	800077c <copyText>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4a82      	ldr	r2, [pc, #520]	; (8004f34 <loadMenuTexts+0x3d4>)
 8004d2c:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004d2e:	4882      	ldr	r0, [pc, #520]	; (8004f38 <loadMenuTexts+0x3d8>)
 8004d30:	f7fb fd24 	bl	800077c <copyText>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4a81      	ldr	r2, [pc, #516]	; (8004f3c <loadMenuTexts+0x3dc>)
 8004d38:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004d3a:	4881      	ldr	r0, [pc, #516]	; (8004f40 <loadMenuTexts+0x3e0>)
 8004d3c:	f7fb fd1e 	bl	800077c <copyText>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4a80      	ldr	r2, [pc, #512]	; (8004f44 <loadMenuTexts+0x3e4>)
 8004d44:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004d46:	4880      	ldr	r0, [pc, #512]	; (8004f48 <loadMenuTexts+0x3e8>)
 8004d48:	f7fb fd18 	bl	800077c <copyText>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4a7f      	ldr	r2, [pc, #508]	; (8004f4c <loadMenuTexts+0x3ec>)
 8004d50:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004d52:	487f      	ldr	r0, [pc, #508]	; (8004f50 <loadMenuTexts+0x3f0>)
 8004d54:	f7fb fd12 	bl	800077c <copyText>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4a7e      	ldr	r2, [pc, #504]	; (8004f54 <loadMenuTexts+0x3f4>)
 8004d5c:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004d5e:	487e      	ldr	r0, [pc, #504]	; (8004f58 <loadMenuTexts+0x3f8>)
 8004d60:	f7fb fd0c 	bl	800077c <copyText>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4a7d      	ldr	r2, [pc, #500]	; (8004f5c <loadMenuTexts+0x3fc>)
 8004d68:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004d6a:	487d      	ldr	r0, [pc, #500]	; (8004f60 <loadMenuTexts+0x400>)
 8004d6c:	f7fb fd06 	bl	800077c <copyText>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4a7c      	ldr	r2, [pc, #496]	; (8004f64 <loadMenuTexts+0x404>)
 8004d74:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004d76:	487c      	ldr	r0, [pc, #496]	; (8004f68 <loadMenuTexts+0x408>)
 8004d78:	f7fb fd00 	bl	800077c <copyText>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4a7b      	ldr	r2, [pc, #492]	; (8004f6c <loadMenuTexts+0x40c>)
 8004d80:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004d82:	487b      	ldr	r0, [pc, #492]	; (8004f70 <loadMenuTexts+0x410>)
 8004d84:	f7fb fcfa 	bl	800077c <copyText>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4a7a      	ldr	r2, [pc, #488]	; (8004f74 <loadMenuTexts+0x414>)
 8004d8c:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004d8e:	487a      	ldr	r0, [pc, #488]	; (8004f78 <loadMenuTexts+0x418>)
 8004d90:	f7fb fcf4 	bl	800077c <copyText>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4a79      	ldr	r2, [pc, #484]	; (8004f7c <loadMenuTexts+0x41c>)
 8004d98:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004d9a:	4879      	ldr	r0, [pc, #484]	; (8004f80 <loadMenuTexts+0x420>)
 8004d9c:	f7fb fcee 	bl	800077c <copyText>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4a78      	ldr	r2, [pc, #480]	; (8004f84 <loadMenuTexts+0x424>)
 8004da4:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004da6:	4878      	ldr	r0, [pc, #480]	; (8004f88 <loadMenuTexts+0x428>)
 8004da8:	f7fb fce8 	bl	800077c <copyText>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4a77      	ldr	r2, [pc, #476]	; (8004f8c <loadMenuTexts+0x42c>)
 8004db0:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004db2:	4877      	ldr	r0, [pc, #476]	; (8004f90 <loadMenuTexts+0x430>)
 8004db4:	f7fb fce2 	bl	800077c <copyText>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4a76      	ldr	r2, [pc, #472]	; (8004f94 <loadMenuTexts+0x434>)
 8004dbc:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004dbe:	4876      	ldr	r0, [pc, #472]	; (8004f98 <loadMenuTexts+0x438>)
 8004dc0:	f7fb fcdc 	bl	800077c <copyText>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4a75      	ldr	r2, [pc, #468]	; (8004f9c <loadMenuTexts+0x43c>)
 8004dc8:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004dca:	4875      	ldr	r0, [pc, #468]	; (8004fa0 <loadMenuTexts+0x440>)
 8004dcc:	f7fb fcd6 	bl	800077c <copyText>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4a74      	ldr	r2, [pc, #464]	; (8004fa4 <loadMenuTexts+0x444>)
 8004dd4:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004dd6:	4874      	ldr	r0, [pc, #464]	; (8004fa8 <loadMenuTexts+0x448>)
 8004dd8:	f7fb fcd0 	bl	800077c <copyText>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4a73      	ldr	r2, [pc, #460]	; (8004fac <loadMenuTexts+0x44c>)
 8004de0:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004de2:	4873      	ldr	r0, [pc, #460]	; (8004fb0 <loadMenuTexts+0x450>)
 8004de4:	f7fb fcca 	bl	800077c <copyText>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4a72      	ldr	r2, [pc, #456]	; (8004fb4 <loadMenuTexts+0x454>)
 8004dec:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004dee:	4872      	ldr	r0, [pc, #456]	; (8004fb8 <loadMenuTexts+0x458>)
 8004df0:	f7fb fcc4 	bl	800077c <copyText>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a71      	ldr	r2, [pc, #452]	; (8004fbc <loadMenuTexts+0x45c>)
 8004df8:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004dfa:	4871      	ldr	r0, [pc, #452]	; (8004fc0 <loadMenuTexts+0x460>)
 8004dfc:	f7fb fcbe 	bl	800077c <copyText>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4a70      	ldr	r2, [pc, #448]	; (8004fc4 <loadMenuTexts+0x464>)
 8004e04:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004e06:	4870      	ldr	r0, [pc, #448]	; (8004fc8 <loadMenuTexts+0x468>)
 8004e08:	f7fb fcb8 	bl	800077c <copyText>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	e0dd      	b.n	8004fcc <loadMenuTexts+0x46c>
 8004e10:	20000000 	.word	0x20000000
 8004e14:	20000cb0 	.word	0x20000cb0
 8004e18:	20000010 	.word	0x20000010
 8004e1c:	20000cb4 	.word	0x20000cb4
 8004e20:	20000020 	.word	0x20000020
 8004e24:	20000d0c 	.word	0x20000d0c
 8004e28:	20000030 	.word	0x20000030
 8004e2c:	20000d3c 	.word	0x20000d3c
 8004e30:	20000040 	.word	0x20000040
 8004e34:	20000d44 	.word	0x20000d44
 8004e38:	20000050 	.word	0x20000050
 8004e3c:	20000dbc 	.word	0x20000dbc
 8004e40:	20000060 	.word	0x20000060
 8004e44:	20000dc0 	.word	0x20000dc0
 8004e48:	20000070 	.word	0x20000070
 8004e4c:	20000cb8 	.word	0x20000cb8
 8004e50:	20000080 	.word	0x20000080
 8004e54:	20000cbc 	.word	0x20000cbc
 8004e58:	20000090 	.word	0x20000090
 8004e5c:	20000cc0 	.word	0x20000cc0
 8004e60:	200000a0 	.word	0x200000a0
 8004e64:	20000cc4 	.word	0x20000cc4
 8004e68:	200000b0 	.word	0x200000b0
 8004e6c:	20000cc8 	.word	0x20000cc8
 8004e70:	200000c0 	.word	0x200000c0
 8004e74:	20000ccc 	.word	0x20000ccc
 8004e78:	200000d0 	.word	0x200000d0
 8004e7c:	20000cd0 	.word	0x20000cd0
 8004e80:	200000e0 	.word	0x200000e0
 8004e84:	20000cd4 	.word	0x20000cd4
 8004e88:	200000f0 	.word	0x200000f0
 8004e8c:	20000cd8 	.word	0x20000cd8
 8004e90:	20000100 	.word	0x20000100
 8004e94:	20000cdc 	.word	0x20000cdc
 8004e98:	20000110 	.word	0x20000110
 8004e9c:	20000ce0 	.word	0x20000ce0
 8004ea0:	20000120 	.word	0x20000120
 8004ea4:	20000ce4 	.word	0x20000ce4
 8004ea8:	20000130 	.word	0x20000130
 8004eac:	20000ce8 	.word	0x20000ce8
 8004eb0:	20000140 	.word	0x20000140
 8004eb4:	20000cec 	.word	0x20000cec
 8004eb8:	20000150 	.word	0x20000150
 8004ebc:	20000cf0 	.word	0x20000cf0
 8004ec0:	20000160 	.word	0x20000160
 8004ec4:	20000cf4 	.word	0x20000cf4
 8004ec8:	20000170 	.word	0x20000170
 8004ecc:	20000cf8 	.word	0x20000cf8
 8004ed0:	20000180 	.word	0x20000180
 8004ed4:	20000cfc 	.word	0x20000cfc
 8004ed8:	20000190 	.word	0x20000190
 8004edc:	20000d00 	.word	0x20000d00
 8004ee0:	200001a0 	.word	0x200001a0
 8004ee4:	20000d04 	.word	0x20000d04
 8004ee8:	200001b0 	.word	0x200001b0
 8004eec:	20000d08 	.word	0x20000d08
 8004ef0:	200001c0 	.word	0x200001c0
 8004ef4:	20000d10 	.word	0x20000d10
 8004ef8:	200001d0 	.word	0x200001d0
 8004efc:	20000d14 	.word	0x20000d14
 8004f00:	200001e0 	.word	0x200001e0
 8004f04:	20000d18 	.word	0x20000d18
 8004f08:	200001f0 	.word	0x200001f0
 8004f0c:	20000d1c 	.word	0x20000d1c
 8004f10:	20000200 	.word	0x20000200
 8004f14:	20000d20 	.word	0x20000d20
 8004f18:	20000210 	.word	0x20000210
 8004f1c:	20000d24 	.word	0x20000d24
 8004f20:	20000220 	.word	0x20000220
 8004f24:	20000d28 	.word	0x20000d28
 8004f28:	20000230 	.word	0x20000230
 8004f2c:	20000d2c 	.word	0x20000d2c
 8004f30:	20000240 	.word	0x20000240
 8004f34:	20000d30 	.word	0x20000d30
 8004f38:	20000250 	.word	0x20000250
 8004f3c:	20000d34 	.word	0x20000d34
 8004f40:	20000260 	.word	0x20000260
 8004f44:	20000d38 	.word	0x20000d38
 8004f48:	20000270 	.word	0x20000270
 8004f4c:	20000d40 	.word	0x20000d40
 8004f50:	20000280 	.word	0x20000280
 8004f54:	20000d48 	.word	0x20000d48
 8004f58:	20000290 	.word	0x20000290
 8004f5c:	20000d4c 	.word	0x20000d4c
 8004f60:	200002a0 	.word	0x200002a0
 8004f64:	20000d50 	.word	0x20000d50
 8004f68:	200002b0 	.word	0x200002b0
 8004f6c:	20000d54 	.word	0x20000d54
 8004f70:	200002c0 	.word	0x200002c0
 8004f74:	20000d58 	.word	0x20000d58
 8004f78:	200002d0 	.word	0x200002d0
 8004f7c:	20000d5c 	.word	0x20000d5c
 8004f80:	200002e0 	.word	0x200002e0
 8004f84:	20000d60 	.word	0x20000d60
 8004f88:	200002f0 	.word	0x200002f0
 8004f8c:	20000d64 	.word	0x20000d64
 8004f90:	20000300 	.word	0x20000300
 8004f94:	20000d68 	.word	0x20000d68
 8004f98:	20000310 	.word	0x20000310
 8004f9c:	20000d6c 	.word	0x20000d6c
 8004fa0:	20000320 	.word	0x20000320
 8004fa4:	20000d70 	.word	0x20000d70
 8004fa8:	20000330 	.word	0x20000330
 8004fac:	20000d74 	.word	0x20000d74
 8004fb0:	20000340 	.word	0x20000340
 8004fb4:	20000d78 	.word	0x20000d78
 8004fb8:	20000350 	.word	0x20000350
 8004fbc:	20000d7c 	.word	0x20000d7c
 8004fc0:	20000360 	.word	0x20000360
 8004fc4:	20000d80 	.word	0x20000d80
 8004fc8:	20000370 	.word	0x20000370
 8004fcc:	4a3d      	ldr	r2, [pc, #244]	; (80050c4 <loadMenuTexts+0x564>)
 8004fce:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8004fd0:	483d      	ldr	r0, [pc, #244]	; (80050c8 <loadMenuTexts+0x568>)
 8004fd2:	f7fb fbd3 	bl	800077c <copyText>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <loadMenuTexts+0x56c>)
 8004fda:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8004fdc:	483c      	ldr	r0, [pc, #240]	; (80050d0 <loadMenuTexts+0x570>)
 8004fde:	f7fb fbcd 	bl	800077c <copyText>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4a3b      	ldr	r2, [pc, #236]	; (80050d4 <loadMenuTexts+0x574>)
 8004fe6:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8004fe8:	483b      	ldr	r0, [pc, #236]	; (80050d8 <loadMenuTexts+0x578>)
 8004fea:	f7fb fbc7 	bl	800077c <copyText>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4a3a      	ldr	r2, [pc, #232]	; (80050dc <loadMenuTexts+0x57c>)
 8004ff2:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8004ff4:	483a      	ldr	r0, [pc, #232]	; (80050e0 <loadMenuTexts+0x580>)
 8004ff6:	f7fb fbc1 	bl	800077c <copyText>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4a39      	ldr	r2, [pc, #228]	; (80050e4 <loadMenuTexts+0x584>)
 8004ffe:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8005000:	4839      	ldr	r0, [pc, #228]	; (80050e8 <loadMenuTexts+0x588>)
 8005002:	f7fb fbbb 	bl	800077c <copyText>
 8005006:	4603      	mov	r3, r0
 8005008:	4a38      	ldr	r2, [pc, #224]	; (80050ec <loadMenuTexts+0x58c>)
 800500a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 800500c:	4838      	ldr	r0, [pc, #224]	; (80050f0 <loadMenuTexts+0x590>)
 800500e:	f7fb fbb5 	bl	800077c <copyText>
 8005012:	4603      	mov	r3, r0
 8005014:	4a37      	ldr	r2, [pc, #220]	; (80050f4 <loadMenuTexts+0x594>)
 8005016:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8005018:	4837      	ldr	r0, [pc, #220]	; (80050f8 <loadMenuTexts+0x598>)
 800501a:	f7fb fbaf 	bl	800077c <copyText>
 800501e:	4603      	mov	r3, r0
 8005020:	4a36      	ldr	r2, [pc, #216]	; (80050fc <loadMenuTexts+0x59c>)
 8005022:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005024:	4836      	ldr	r0, [pc, #216]	; (8005100 <loadMenuTexts+0x5a0>)
 8005026:	f7fb fba9 	bl	800077c <copyText>
 800502a:	4603      	mov	r3, r0
 800502c:	4a35      	ldr	r2, [pc, #212]	; (8005104 <loadMenuTexts+0x5a4>)
 800502e:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005030:	4835      	ldr	r0, [pc, #212]	; (8005108 <loadMenuTexts+0x5a8>)
 8005032:	f7fb fba3 	bl	800077c <copyText>
 8005036:	4603      	mov	r3, r0
 8005038:	4a34      	ldr	r2, [pc, #208]	; (800510c <loadMenuTexts+0x5ac>)
 800503a:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 800503c:	4834      	ldr	r0, [pc, #208]	; (8005110 <loadMenuTexts+0x5b0>)
 800503e:	f7fb fb9d 	bl	800077c <copyText>
 8005042:	4603      	mov	r3, r0
 8005044:	4a33      	ldr	r2, [pc, #204]	; (8005114 <loadMenuTexts+0x5b4>)
 8005046:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8005048:	4833      	ldr	r0, [pc, #204]	; (8005118 <loadMenuTexts+0x5b8>)
 800504a:	f7fb fb97 	bl	800077c <copyText>
 800504e:	4603      	mov	r3, r0
 8005050:	4a32      	ldr	r2, [pc, #200]	; (800511c <loadMenuTexts+0x5bc>)
 8005052:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005054:	4832      	ldr	r0, [pc, #200]	; (8005120 <loadMenuTexts+0x5c0>)
 8005056:	f7fb fb91 	bl	800077c <copyText>
 800505a:	4603      	mov	r3, r0
 800505c:	4a31      	ldr	r2, [pc, #196]	; (8005124 <loadMenuTexts+0x5c4>)
 800505e:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8005060:	4831      	ldr	r0, [pc, #196]	; (8005128 <loadMenuTexts+0x5c8>)
 8005062:	f7fb fb8b 	bl	800077c <copyText>
 8005066:	4603      	mov	r3, r0
 8005068:	4a30      	ldr	r2, [pc, #192]	; (800512c <loadMenuTexts+0x5cc>)
 800506a:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 800506c:	4830      	ldr	r0, [pc, #192]	; (8005130 <loadMenuTexts+0x5d0>)
 800506e:	f7fb fb85 	bl	800077c <copyText>
 8005072:	4603      	mov	r3, r0
 8005074:	4a2f      	ldr	r2, [pc, #188]	; (8005134 <loadMenuTexts+0x5d4>)
 8005076:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8005078:	482f      	ldr	r0, [pc, #188]	; (8005138 <loadMenuTexts+0x5d8>)
 800507a:	f7fb fb7f 	bl	800077c <copyText>
 800507e:	4603      	mov	r3, r0
 8005080:	4a2e      	ldr	r2, [pc, #184]	; (800513c <loadMenuTexts+0x5dc>)
 8005082:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005084:	482e      	ldr	r0, [pc, #184]	; (8005140 <loadMenuTexts+0x5e0>)
 8005086:	f7fb fb79 	bl	800077c <copyText>
 800508a:	4603      	mov	r3, r0
 800508c:	4a2d      	ldr	r2, [pc, #180]	; (8005144 <loadMenuTexts+0x5e4>)
 800508e:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8005090:	482d      	ldr	r0, [pc, #180]	; (8005148 <loadMenuTexts+0x5e8>)
 8005092:	f7fb fb73 	bl	800077c <copyText>
 8005096:	4603      	mov	r3, r0
 8005098:	4a2c      	ldr	r2, [pc, #176]	; (800514c <loadMenuTexts+0x5ec>)
 800509a:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 800509c:	482c      	ldr	r0, [pc, #176]	; (8005150 <loadMenuTexts+0x5f0>)
 800509e:	f7fb fb6d 	bl	800077c <copyText>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4a2b      	ldr	r2, [pc, #172]	; (8005154 <loadMenuTexts+0x5f4>)
 80050a6:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80050a8:	482b      	ldr	r0, [pc, #172]	; (8005158 <loadMenuTexts+0x5f8>)
 80050aa:	f7fb fb67 	bl	800077c <copyText>
 80050ae:	4603      	mov	r3, r0
 80050b0:	4a2a      	ldr	r2, [pc, #168]	; (800515c <loadMenuTexts+0x5fc>)
 80050b2:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80050b4:	482a      	ldr	r0, [pc, #168]	; (8005160 <loadMenuTexts+0x600>)
 80050b6:	f7fb fb61 	bl	800077c <copyText>
 80050ba:	4603      	mov	r3, r0
 80050bc:	4a29      	ldr	r2, [pc, #164]	; (8005164 <loadMenuTexts+0x604>)
 80050be:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80050c0:	e2d3      	b.n	800566a <loadMenuTexts+0xb0a>
 80050c2:	bf00      	nop
 80050c4:	20000d84 	.word	0x20000d84
 80050c8:	20000380 	.word	0x20000380
 80050cc:	20000d88 	.word	0x20000d88
 80050d0:	20000390 	.word	0x20000390
 80050d4:	20000d8c 	.word	0x20000d8c
 80050d8:	200003a0 	.word	0x200003a0
 80050dc:	20000d90 	.word	0x20000d90
 80050e0:	200003b0 	.word	0x200003b0
 80050e4:	20000d94 	.word	0x20000d94
 80050e8:	200003c0 	.word	0x200003c0
 80050ec:	20000d98 	.word	0x20000d98
 80050f0:	200003d0 	.word	0x200003d0
 80050f4:	20000d9c 	.word	0x20000d9c
 80050f8:	200003e0 	.word	0x200003e0
 80050fc:	20000da0 	.word	0x20000da0
 8005100:	200003f0 	.word	0x200003f0
 8005104:	20000da4 	.word	0x20000da4
 8005108:	20000400 	.word	0x20000400
 800510c:	20000da8 	.word	0x20000da8
 8005110:	20000410 	.word	0x20000410
 8005114:	20000dac 	.word	0x20000dac
 8005118:	20000420 	.word	0x20000420
 800511c:	20000db0 	.word	0x20000db0
 8005120:	20000430 	.word	0x20000430
 8005124:	20000db4 	.word	0x20000db4
 8005128:	20000440 	.word	0x20000440
 800512c:	20000db8 	.word	0x20000db8
 8005130:	20000450 	.word	0x20000450
 8005134:	20000dc4 	.word	0x20000dc4
 8005138:	20000460 	.word	0x20000460
 800513c:	20000dc8 	.word	0x20000dc8
 8005140:	20000470 	.word	0x20000470
 8005144:	20000dcc 	.word	0x20000dcc
 8005148:	20000480 	.word	0x20000480
 800514c:	20000dd0 	.word	0x20000dd0
 8005150:	20000490 	.word	0x20000490
 8005154:	20000dd4 	.word	0x20000dd4
 8005158:	200004a0 	.word	0x200004a0
 800515c:	20000dd8 	.word	0x20000dd8
 8005160:	200004b0 	.word	0x200004b0
 8005164:	20000ddc 	.word	0x20000ddc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8005168:	48a9      	ldr	r0, [pc, #676]	; (8005410 <loadMenuTexts+0x8b0>)
 800516a:	f7fb fb07 	bl	800077c <copyText>
 800516e:	4603      	mov	r3, r0
 8005170:	4aa8      	ldr	r2, [pc, #672]	; (8005414 <loadMenuTexts+0x8b4>)
 8005172:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8005174:	48a8      	ldr	r0, [pc, #672]	; (8005418 <loadMenuTexts+0x8b8>)
 8005176:	f7fb fb01 	bl	800077c <copyText>
 800517a:	4603      	mov	r3, r0
 800517c:	4aa7      	ldr	r2, [pc, #668]	; (800541c <loadMenuTexts+0x8bc>)
 800517e:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8005180:	48a7      	ldr	r0, [pc, #668]	; (8005420 <loadMenuTexts+0x8c0>)
 8005182:	f7fb fafb 	bl	800077c <copyText>
 8005186:	4603      	mov	r3, r0
 8005188:	4aa6      	ldr	r2, [pc, #664]	; (8005424 <loadMenuTexts+0x8c4>)
 800518a:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 800518c:	48a6      	ldr	r0, [pc, #664]	; (8005428 <loadMenuTexts+0x8c8>)
 800518e:	f7fb faf5 	bl	800077c <copyText>
 8005192:	4603      	mov	r3, r0
 8005194:	4aa5      	ldr	r2, [pc, #660]	; (800542c <loadMenuTexts+0x8cc>)
 8005196:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8005198:	48a5      	ldr	r0, [pc, #660]	; (8005430 <loadMenuTexts+0x8d0>)
 800519a:	f7fb faef 	bl	800077c <copyText>
 800519e:	4603      	mov	r3, r0
 80051a0:	4aa4      	ldr	r2, [pc, #656]	; (8005434 <loadMenuTexts+0x8d4>)
 80051a2:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80051a4:	48a4      	ldr	r0, [pc, #656]	; (8005438 <loadMenuTexts+0x8d8>)
 80051a6:	f7fb fae9 	bl	800077c <copyText>
 80051aa:	4603      	mov	r3, r0
 80051ac:	4aa3      	ldr	r2, [pc, #652]	; (800543c <loadMenuTexts+0x8dc>)
 80051ae:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80051b0:	48a3      	ldr	r0, [pc, #652]	; (8005440 <loadMenuTexts+0x8e0>)
 80051b2:	f7fb fae3 	bl	800077c <copyText>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4aa2      	ldr	r2, [pc, #648]	; (8005444 <loadMenuTexts+0x8e4>)
 80051ba:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80051bc:	48a2      	ldr	r0, [pc, #648]	; (8005448 <loadMenuTexts+0x8e8>)
 80051be:	f7fb fadd 	bl	800077c <copyText>
 80051c2:	4603      	mov	r3, r0
 80051c4:	4aa1      	ldr	r2, [pc, #644]	; (800544c <loadMenuTexts+0x8ec>)
 80051c6:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80051c8:	48a1      	ldr	r0, [pc, #644]	; (8005450 <loadMenuTexts+0x8f0>)
 80051ca:	f7fb fad7 	bl	800077c <copyText>
 80051ce:	4603      	mov	r3, r0
 80051d0:	4aa0      	ldr	r2, [pc, #640]	; (8005454 <loadMenuTexts+0x8f4>)
 80051d2:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80051d4:	48a0      	ldr	r0, [pc, #640]	; (8005458 <loadMenuTexts+0x8f8>)
 80051d6:	f7fb fad1 	bl	800077c <copyText>
 80051da:	4603      	mov	r3, r0
 80051dc:	4a9f      	ldr	r2, [pc, #636]	; (800545c <loadMenuTexts+0x8fc>)
 80051de:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80051e0:	489f      	ldr	r0, [pc, #636]	; (8005460 <loadMenuTexts+0x900>)
 80051e2:	f7fb facb 	bl	800077c <copyText>
 80051e6:	4603      	mov	r3, r0
 80051e8:	4a9e      	ldr	r2, [pc, #632]	; (8005464 <loadMenuTexts+0x904>)
 80051ea:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80051ec:	489e      	ldr	r0, [pc, #632]	; (8005468 <loadMenuTexts+0x908>)
 80051ee:	f7fb fac5 	bl	800077c <copyText>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4a9d      	ldr	r2, [pc, #628]	; (800546c <loadMenuTexts+0x90c>)
 80051f6:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80051f8:	489d      	ldr	r0, [pc, #628]	; (8005470 <loadMenuTexts+0x910>)
 80051fa:	f7fb fabf 	bl	800077c <copyText>
 80051fe:	4603      	mov	r3, r0
 8005200:	4a9c      	ldr	r2, [pc, #624]	; (8005474 <loadMenuTexts+0x914>)
 8005202:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8005204:	489c      	ldr	r0, [pc, #624]	; (8005478 <loadMenuTexts+0x918>)
 8005206:	f7fb fab9 	bl	800077c <copyText>
 800520a:	4603      	mov	r3, r0
 800520c:	4a9b      	ldr	r2, [pc, #620]	; (800547c <loadMenuTexts+0x91c>)
 800520e:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005210:	489b      	ldr	r0, [pc, #620]	; (8005480 <loadMenuTexts+0x920>)
 8005212:	f7fb fab3 	bl	800077c <copyText>
 8005216:	4603      	mov	r3, r0
 8005218:	4a9a      	ldr	r2, [pc, #616]	; (8005484 <loadMenuTexts+0x924>)
 800521a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 800521c:	489a      	ldr	r0, [pc, #616]	; (8005488 <loadMenuTexts+0x928>)
 800521e:	f7fb faad 	bl	800077c <copyText>
 8005222:	4603      	mov	r3, r0
 8005224:	4a99      	ldr	r2, [pc, #612]	; (800548c <loadMenuTexts+0x92c>)
 8005226:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8005228:	4899      	ldr	r0, [pc, #612]	; (8005490 <loadMenuTexts+0x930>)
 800522a:	f7fb faa7 	bl	800077c <copyText>
 800522e:	4603      	mov	r3, r0
 8005230:	4a98      	ldr	r2, [pc, #608]	; (8005494 <loadMenuTexts+0x934>)
 8005232:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005234:	4898      	ldr	r0, [pc, #608]	; (8005498 <loadMenuTexts+0x938>)
 8005236:	f7fb faa1 	bl	800077c <copyText>
 800523a:	4603      	mov	r3, r0
 800523c:	4a97      	ldr	r2, [pc, #604]	; (800549c <loadMenuTexts+0x93c>)
 800523e:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005240:	4897      	ldr	r0, [pc, #604]	; (80054a0 <loadMenuTexts+0x940>)
 8005242:	f7fb fa9b 	bl	800077c <copyText>
 8005246:	4603      	mov	r3, r0
 8005248:	4a96      	ldr	r2, [pc, #600]	; (80054a4 <loadMenuTexts+0x944>)
 800524a:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 800524c:	4896      	ldr	r0, [pc, #600]	; (80054a8 <loadMenuTexts+0x948>)
 800524e:	f7fb fa95 	bl	800077c <copyText>
 8005252:	4603      	mov	r3, r0
 8005254:	4a95      	ldr	r2, [pc, #596]	; (80054ac <loadMenuTexts+0x94c>)
 8005256:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8005258:	4895      	ldr	r0, [pc, #596]	; (80054b0 <loadMenuTexts+0x950>)
 800525a:	f7fb fa8f 	bl	800077c <copyText>
 800525e:	4603      	mov	r3, r0
 8005260:	4a94      	ldr	r2, [pc, #592]	; (80054b4 <loadMenuTexts+0x954>)
 8005262:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005264:	4894      	ldr	r0, [pc, #592]	; (80054b8 <loadMenuTexts+0x958>)
 8005266:	f7fb fa89 	bl	800077c <copyText>
 800526a:	4603      	mov	r3, r0
 800526c:	4a93      	ldr	r2, [pc, #588]	; (80054bc <loadMenuTexts+0x95c>)
 800526e:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8005270:	4893      	ldr	r0, [pc, #588]	; (80054c0 <loadMenuTexts+0x960>)
 8005272:	f7fb fa83 	bl	800077c <copyText>
 8005276:	4603      	mov	r3, r0
 8005278:	4a92      	ldr	r2, [pc, #584]	; (80054c4 <loadMenuTexts+0x964>)
 800527a:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 800527c:	4892      	ldr	r0, [pc, #584]	; (80054c8 <loadMenuTexts+0x968>)
 800527e:	f7fb fa7d 	bl	800077c <copyText>
 8005282:	4603      	mov	r3, r0
 8005284:	4a91      	ldr	r2, [pc, #580]	; (80054cc <loadMenuTexts+0x96c>)
 8005286:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8005288:	4891      	ldr	r0, [pc, #580]	; (80054d0 <loadMenuTexts+0x970>)
 800528a:	f7fb fa77 	bl	800077c <copyText>
 800528e:	4603      	mov	r3, r0
 8005290:	4a90      	ldr	r2, [pc, #576]	; (80054d4 <loadMenuTexts+0x974>)
 8005292:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005294:	4890      	ldr	r0, [pc, #576]	; (80054d8 <loadMenuTexts+0x978>)
 8005296:	f7fb fa71 	bl	800077c <copyText>
 800529a:	4603      	mov	r3, r0
 800529c:	4a8f      	ldr	r2, [pc, #572]	; (80054dc <loadMenuTexts+0x97c>)
 800529e:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80052a0:	488f      	ldr	r0, [pc, #572]	; (80054e0 <loadMenuTexts+0x980>)
 80052a2:	f7fb fa6b 	bl	800077c <copyText>
 80052a6:	4603      	mov	r3, r0
 80052a8:	4a8e      	ldr	r2, [pc, #568]	; (80054e4 <loadMenuTexts+0x984>)
 80052aa:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80052ac:	488e      	ldr	r0, [pc, #568]	; (80054e8 <loadMenuTexts+0x988>)
 80052ae:	f7fb fa65 	bl	800077c <copyText>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4a8d      	ldr	r2, [pc, #564]	; (80054ec <loadMenuTexts+0x98c>)
 80052b6:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 80052b8:	488d      	ldr	r0, [pc, #564]	; (80054f0 <loadMenuTexts+0x990>)
 80052ba:	f7fb fa5f 	bl	800077c <copyText>
 80052be:	4603      	mov	r3, r0
 80052c0:	4a8c      	ldr	r2, [pc, #560]	; (80054f4 <loadMenuTexts+0x994>)
 80052c2:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80052c4:	488c      	ldr	r0, [pc, #560]	; (80054f8 <loadMenuTexts+0x998>)
 80052c6:	f7fb fa59 	bl	800077c <copyText>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4a8b      	ldr	r2, [pc, #556]	; (80054fc <loadMenuTexts+0x99c>)
 80052ce:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 80052d0:	488b      	ldr	r0, [pc, #556]	; (8005500 <loadMenuTexts+0x9a0>)
 80052d2:	f7fb fa53 	bl	800077c <copyText>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4a8a      	ldr	r2, [pc, #552]	; (8005504 <loadMenuTexts+0x9a4>)
 80052da:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 80052dc:	488a      	ldr	r0, [pc, #552]	; (8005508 <loadMenuTexts+0x9a8>)
 80052de:	f7fb fa4d 	bl	800077c <copyText>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4a89      	ldr	r2, [pc, #548]	; (800550c <loadMenuTexts+0x9ac>)
 80052e6:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80052e8:	4889      	ldr	r0, [pc, #548]	; (8005510 <loadMenuTexts+0x9b0>)
 80052ea:	f7fb fa47 	bl	800077c <copyText>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4a88      	ldr	r2, [pc, #544]	; (8005514 <loadMenuTexts+0x9b4>)
 80052f2:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 80052f4:	4888      	ldr	r0, [pc, #544]	; (8005518 <loadMenuTexts+0x9b8>)
 80052f6:	f7fb fa41 	bl	800077c <copyText>
 80052fa:	4603      	mov	r3, r0
 80052fc:	4a87      	ldr	r2, [pc, #540]	; (800551c <loadMenuTexts+0x9bc>)
 80052fe:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005300:	4887      	ldr	r0, [pc, #540]	; (8005520 <loadMenuTexts+0x9c0>)
 8005302:	f7fb fa3b 	bl	800077c <copyText>
 8005306:	4603      	mov	r3, r0
 8005308:	4a86      	ldr	r2, [pc, #536]	; (8005524 <loadMenuTexts+0x9c4>)
 800530a:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 800530c:	4886      	ldr	r0, [pc, #536]	; (8005528 <loadMenuTexts+0x9c8>)
 800530e:	f7fb fa35 	bl	800077c <copyText>
 8005312:	4603      	mov	r3, r0
 8005314:	4a85      	ldr	r2, [pc, #532]	; (800552c <loadMenuTexts+0x9cc>)
 8005316:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005318:	4885      	ldr	r0, [pc, #532]	; (8005530 <loadMenuTexts+0x9d0>)
 800531a:	f7fb fa2f 	bl	800077c <copyText>
 800531e:	4603      	mov	r3, r0
 8005320:	4a84      	ldr	r2, [pc, #528]	; (8005534 <loadMenuTexts+0x9d4>)
 8005322:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005324:	4884      	ldr	r0, [pc, #528]	; (8005538 <loadMenuTexts+0x9d8>)
 8005326:	f7fb fa29 	bl	800077c <copyText>
 800532a:	4603      	mov	r3, r0
 800532c:	4a83      	ldr	r2, [pc, #524]	; (800553c <loadMenuTexts+0x9dc>)
 800532e:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005330:	4883      	ldr	r0, [pc, #524]	; (8005540 <loadMenuTexts+0x9e0>)
 8005332:	f7fb fa23 	bl	800077c <copyText>
 8005336:	4603      	mov	r3, r0
 8005338:	4a82      	ldr	r2, [pc, #520]	; (8005544 <loadMenuTexts+0x9e4>)
 800533a:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 800533c:	4882      	ldr	r0, [pc, #520]	; (8005548 <loadMenuTexts+0x9e8>)
 800533e:	f7fb fa1d 	bl	800077c <copyText>
 8005342:	4603      	mov	r3, r0
 8005344:	4a81      	ldr	r2, [pc, #516]	; (800554c <loadMenuTexts+0x9ec>)
 8005346:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005348:	4881      	ldr	r0, [pc, #516]	; (8005550 <loadMenuTexts+0x9f0>)
 800534a:	f7fb fa17 	bl	800077c <copyText>
 800534e:	4603      	mov	r3, r0
 8005350:	4a80      	ldr	r2, [pc, #512]	; (8005554 <loadMenuTexts+0x9f4>)
 8005352:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005354:	4880      	ldr	r0, [pc, #512]	; (8005558 <loadMenuTexts+0x9f8>)
 8005356:	f7fb fa11 	bl	800077c <copyText>
 800535a:	4603      	mov	r3, r0
 800535c:	4a7f      	ldr	r2, [pc, #508]	; (800555c <loadMenuTexts+0x9fc>)
 800535e:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8005360:	487f      	ldr	r0, [pc, #508]	; (8005560 <loadMenuTexts+0xa00>)
 8005362:	f7fb fa0b 	bl	800077c <copyText>
 8005366:	4603      	mov	r3, r0
 8005368:	4a7e      	ldr	r2, [pc, #504]	; (8005564 <loadMenuTexts+0xa04>)
 800536a:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 800536c:	487e      	ldr	r0, [pc, #504]	; (8005568 <loadMenuTexts+0xa08>)
 800536e:	f7fb fa05 	bl	800077c <copyText>
 8005372:	4603      	mov	r3, r0
 8005374:	4a7d      	ldr	r2, [pc, #500]	; (800556c <loadMenuTexts+0xa0c>)
 8005376:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8005378:	487d      	ldr	r0, [pc, #500]	; (8005570 <loadMenuTexts+0xa10>)
 800537a:	f7fb f9ff 	bl	800077c <copyText>
 800537e:	4603      	mov	r3, r0
 8005380:	4a7c      	ldr	r2, [pc, #496]	; (8005574 <loadMenuTexts+0xa14>)
 8005382:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005384:	487c      	ldr	r0, [pc, #496]	; (8005578 <loadMenuTexts+0xa18>)
 8005386:	f7fb f9f9 	bl	800077c <copyText>
 800538a:	4603      	mov	r3, r0
 800538c:	4a7b      	ldr	r2, [pc, #492]	; (800557c <loadMenuTexts+0xa1c>)
 800538e:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8005390:	487b      	ldr	r0, [pc, #492]	; (8005580 <loadMenuTexts+0xa20>)
 8005392:	f7fb f9f3 	bl	800077c <copyText>
 8005396:	4603      	mov	r3, r0
 8005398:	4a7a      	ldr	r2, [pc, #488]	; (8005584 <loadMenuTexts+0xa24>)
 800539a:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 800539c:	487a      	ldr	r0, [pc, #488]	; (8005588 <loadMenuTexts+0xa28>)
 800539e:	f7fb f9ed 	bl	800077c <copyText>
 80053a2:	4603      	mov	r3, r0
 80053a4:	4a79      	ldr	r2, [pc, #484]	; (800558c <loadMenuTexts+0xa2c>)
 80053a6:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80053a8:	4879      	ldr	r0, [pc, #484]	; (8005590 <loadMenuTexts+0xa30>)
 80053aa:	f7fb f9e7 	bl	800077c <copyText>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4a78      	ldr	r2, [pc, #480]	; (8005594 <loadMenuTexts+0xa34>)
 80053b2:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80053b4:	4878      	ldr	r0, [pc, #480]	; (8005598 <loadMenuTexts+0xa38>)
 80053b6:	f7fb f9e1 	bl	800077c <copyText>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a77      	ldr	r2, [pc, #476]	; (800559c <loadMenuTexts+0xa3c>)
 80053be:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80053c0:	4877      	ldr	r0, [pc, #476]	; (80055a0 <loadMenuTexts+0xa40>)
 80053c2:	f7fb f9db 	bl	800077c <copyText>
 80053c6:	4603      	mov	r3, r0
 80053c8:	4a76      	ldr	r2, [pc, #472]	; (80055a4 <loadMenuTexts+0xa44>)
 80053ca:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 80053cc:	4876      	ldr	r0, [pc, #472]	; (80055a8 <loadMenuTexts+0xa48>)
 80053ce:	f7fb f9d5 	bl	800077c <copyText>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a75      	ldr	r2, [pc, #468]	; (80055ac <loadMenuTexts+0xa4c>)
 80053d6:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 80053d8:	4875      	ldr	r0, [pc, #468]	; (80055b0 <loadMenuTexts+0xa50>)
 80053da:	f7fb f9cf 	bl	800077c <copyText>
 80053de:	4603      	mov	r3, r0
 80053e0:	4a74      	ldr	r2, [pc, #464]	; (80055b4 <loadMenuTexts+0xa54>)
 80053e2:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80053e4:	4874      	ldr	r0, [pc, #464]	; (80055b8 <loadMenuTexts+0xa58>)
 80053e6:	f7fb f9c9 	bl	800077c <copyText>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a73      	ldr	r2, [pc, #460]	; (80055bc <loadMenuTexts+0xa5c>)
 80053ee:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80053f0:	4873      	ldr	r0, [pc, #460]	; (80055c0 <loadMenuTexts+0xa60>)
 80053f2:	f7fb f9c3 	bl	800077c <copyText>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4a72      	ldr	r2, [pc, #456]	; (80055c4 <loadMenuTexts+0xa64>)
 80053fa:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80053fc:	4872      	ldr	r0, [pc, #456]	; (80055c8 <loadMenuTexts+0xa68>)
 80053fe:	f7fb f9bd 	bl	800077c <copyText>
 8005402:	4603      	mov	r3, r0
 8005404:	4a71      	ldr	r2, [pc, #452]	; (80055cc <loadMenuTexts+0xa6c>)
 8005406:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005408:	4871      	ldr	r0, [pc, #452]	; (80055d0 <loadMenuTexts+0xa70>)
 800540a:	f7fb f9b7 	bl	800077c <copyText>
 800540e:	e0e1      	b.n	80055d4 <loadMenuTexts+0xa74>
 8005410:	200004c0 	.word	0x200004c0
 8005414:	20000cb8 	.word	0x20000cb8
 8005418:	200004d0 	.word	0x200004d0
 800541c:	20000cbc 	.word	0x20000cbc
 8005420:	200004e0 	.word	0x200004e0
 8005424:	20000cc0 	.word	0x20000cc0
 8005428:	200004f0 	.word	0x200004f0
 800542c:	20000cc4 	.word	0x20000cc4
 8005430:	20000500 	.word	0x20000500
 8005434:	20000cc8 	.word	0x20000cc8
 8005438:	20000510 	.word	0x20000510
 800543c:	20000ccc 	.word	0x20000ccc
 8005440:	20000520 	.word	0x20000520
 8005444:	20000cd0 	.word	0x20000cd0
 8005448:	20000530 	.word	0x20000530
 800544c:	20000cd4 	.word	0x20000cd4
 8005450:	20000540 	.word	0x20000540
 8005454:	20000cd8 	.word	0x20000cd8
 8005458:	20000550 	.word	0x20000550
 800545c:	20000cdc 	.word	0x20000cdc
 8005460:	20000560 	.word	0x20000560
 8005464:	20000ce0 	.word	0x20000ce0
 8005468:	20000570 	.word	0x20000570
 800546c:	20000ce4 	.word	0x20000ce4
 8005470:	20000580 	.word	0x20000580
 8005474:	20000ce8 	.word	0x20000ce8
 8005478:	20000590 	.word	0x20000590
 800547c:	20000cec 	.word	0x20000cec
 8005480:	200005a0 	.word	0x200005a0
 8005484:	20000cf0 	.word	0x20000cf0
 8005488:	200005b0 	.word	0x200005b0
 800548c:	20000cf4 	.word	0x20000cf4
 8005490:	200005c0 	.word	0x200005c0
 8005494:	20000cf8 	.word	0x20000cf8
 8005498:	200005d0 	.word	0x200005d0
 800549c:	20000cfc 	.word	0x20000cfc
 80054a0:	200005e0 	.word	0x200005e0
 80054a4:	20000d00 	.word	0x20000d00
 80054a8:	200005f0 	.word	0x200005f0
 80054ac:	20000d04 	.word	0x20000d04
 80054b0:	20000600 	.word	0x20000600
 80054b4:	20000d08 	.word	0x20000d08
 80054b8:	20000610 	.word	0x20000610
 80054bc:	20000d10 	.word	0x20000d10
 80054c0:	20000620 	.word	0x20000620
 80054c4:	20000d14 	.word	0x20000d14
 80054c8:	20000630 	.word	0x20000630
 80054cc:	20000d18 	.word	0x20000d18
 80054d0:	20000640 	.word	0x20000640
 80054d4:	20000d1c 	.word	0x20000d1c
 80054d8:	20000650 	.word	0x20000650
 80054dc:	20000d20 	.word	0x20000d20
 80054e0:	20000660 	.word	0x20000660
 80054e4:	20000d24 	.word	0x20000d24
 80054e8:	20000670 	.word	0x20000670
 80054ec:	20000d28 	.word	0x20000d28
 80054f0:	20000680 	.word	0x20000680
 80054f4:	20000d2c 	.word	0x20000d2c
 80054f8:	20000690 	.word	0x20000690
 80054fc:	20000d30 	.word	0x20000d30
 8005500:	200006a0 	.word	0x200006a0
 8005504:	20000d34 	.word	0x20000d34
 8005508:	200006b0 	.word	0x200006b0
 800550c:	20000d38 	.word	0x20000d38
 8005510:	200006c0 	.word	0x200006c0
 8005514:	20000d40 	.word	0x20000d40
 8005518:	200006d0 	.word	0x200006d0
 800551c:	20000d48 	.word	0x20000d48
 8005520:	200006e0 	.word	0x200006e0
 8005524:	20000d4c 	.word	0x20000d4c
 8005528:	200006f0 	.word	0x200006f0
 800552c:	20000d50 	.word	0x20000d50
 8005530:	20000700 	.word	0x20000700
 8005534:	20000d54 	.word	0x20000d54
 8005538:	20000710 	.word	0x20000710
 800553c:	20000d58 	.word	0x20000d58
 8005540:	20000720 	.word	0x20000720
 8005544:	20000d5c 	.word	0x20000d5c
 8005548:	20000730 	.word	0x20000730
 800554c:	20000d60 	.word	0x20000d60
 8005550:	20000740 	.word	0x20000740
 8005554:	20000d64 	.word	0x20000d64
 8005558:	20000750 	.word	0x20000750
 800555c:	20000d68 	.word	0x20000d68
 8005560:	20000760 	.word	0x20000760
 8005564:	20000d6c 	.word	0x20000d6c
 8005568:	20000770 	.word	0x20000770
 800556c:	20000d70 	.word	0x20000d70
 8005570:	20000780 	.word	0x20000780
 8005574:	20000d74 	.word	0x20000d74
 8005578:	20000790 	.word	0x20000790
 800557c:	20000d78 	.word	0x20000d78
 8005580:	200007a0 	.word	0x200007a0
 8005584:	20000d7c 	.word	0x20000d7c
 8005588:	200007b0 	.word	0x200007b0
 800558c:	20000d80 	.word	0x20000d80
 8005590:	200007c0 	.word	0x200007c0
 8005594:	20000d84 	.word	0x20000d84
 8005598:	200007d0 	.word	0x200007d0
 800559c:	20000d88 	.word	0x20000d88
 80055a0:	200007e0 	.word	0x200007e0
 80055a4:	20000d8c 	.word	0x20000d8c
 80055a8:	200007f0 	.word	0x200007f0
 80055ac:	20000d90 	.word	0x20000d90
 80055b0:	20000800 	.word	0x20000800
 80055b4:	20000d94 	.word	0x20000d94
 80055b8:	20000810 	.word	0x20000810
 80055bc:	20000d98 	.word	0x20000d98
 80055c0:	20000820 	.word	0x20000820
 80055c4:	20000d9c 	.word	0x20000d9c
 80055c8:	20000830 	.word	0x20000830
 80055cc:	20000da0 	.word	0x20000da0
 80055d0:	20000840 	.word	0x20000840
 80055d4:	4603      	mov	r3, r0
 80055d6:	4a27      	ldr	r2, [pc, #156]	; (8005674 <loadMenuTexts+0xb14>)
 80055d8:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80055da:	4827      	ldr	r0, [pc, #156]	; (8005678 <loadMenuTexts+0xb18>)
 80055dc:	f7fb f8ce 	bl	800077c <copyText>
 80055e0:	4603      	mov	r3, r0
 80055e2:	4a26      	ldr	r2, [pc, #152]	; (800567c <loadMenuTexts+0xb1c>)
 80055e4:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80055e6:	4826      	ldr	r0, [pc, #152]	; (8005680 <loadMenuTexts+0xb20>)
 80055e8:	f7fb f8c8 	bl	800077c <copyText>
 80055ec:	4603      	mov	r3, r0
 80055ee:	4a25      	ldr	r2, [pc, #148]	; (8005684 <loadMenuTexts+0xb24>)
 80055f0:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80055f2:	4825      	ldr	r0, [pc, #148]	; (8005688 <loadMenuTexts+0xb28>)
 80055f4:	f7fb f8c2 	bl	800077c <copyText>
 80055f8:	4603      	mov	r3, r0
 80055fa:	4a24      	ldr	r2, [pc, #144]	; (800568c <loadMenuTexts+0xb2c>)
 80055fc:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80055fe:	4824      	ldr	r0, [pc, #144]	; (8005690 <loadMenuTexts+0xb30>)
 8005600:	f7fb f8bc 	bl	800077c <copyText>
 8005604:	4603      	mov	r3, r0
 8005606:	4a23      	ldr	r2, [pc, #140]	; (8005694 <loadMenuTexts+0xb34>)
 8005608:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 800560a:	4823      	ldr	r0, [pc, #140]	; (8005698 <loadMenuTexts+0xb38>)
 800560c:	f7fb f8b6 	bl	800077c <copyText>
 8005610:	4603      	mov	r3, r0
 8005612:	4a22      	ldr	r2, [pc, #136]	; (800569c <loadMenuTexts+0xb3c>)
 8005614:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8005616:	4822      	ldr	r0, [pc, #136]	; (80056a0 <loadMenuTexts+0xb40>)
 8005618:	f7fb f8b0 	bl	800077c <copyText>
 800561c:	4603      	mov	r3, r0
 800561e:	4a21      	ldr	r2, [pc, #132]	; (80056a4 <loadMenuTexts+0xb44>)
 8005620:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8005622:	4821      	ldr	r0, [pc, #132]	; (80056a8 <loadMenuTexts+0xb48>)
 8005624:	f7fb f8aa 	bl	800077c <copyText>
 8005628:	4603      	mov	r3, r0
 800562a:	4a20      	ldr	r2, [pc, #128]	; (80056ac <loadMenuTexts+0xb4c>)
 800562c:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800562e:	4820      	ldr	r0, [pc, #128]	; (80056b0 <loadMenuTexts+0xb50>)
 8005630:	f7fb f8a4 	bl	800077c <copyText>
 8005634:	4603      	mov	r3, r0
 8005636:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <loadMenuTexts+0xb54>)
 8005638:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 800563a:	481f      	ldr	r0, [pc, #124]	; (80056b8 <loadMenuTexts+0xb58>)
 800563c:	f7fb f89e 	bl	800077c <copyText>
 8005640:	4603      	mov	r3, r0
 8005642:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <loadMenuTexts+0xb5c>)
 8005644:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8005646:	481e      	ldr	r0, [pc, #120]	; (80056c0 <loadMenuTexts+0xb60>)
 8005648:	f7fb f898 	bl	800077c <copyText>
 800564c:	4603      	mov	r3, r0
 800564e:	4a1d      	ldr	r2, [pc, #116]	; (80056c4 <loadMenuTexts+0xb64>)
 8005650:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8005652:	481d      	ldr	r0, [pc, #116]	; (80056c8 <loadMenuTexts+0xb68>)
 8005654:	f7fb f892 	bl	800077c <copyText>
 8005658:	4603      	mov	r3, r0
 800565a:	4a1c      	ldr	r2, [pc, #112]	; (80056cc <loadMenuTexts+0xb6c>)
 800565c:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 800565e:	481c      	ldr	r0, [pc, #112]	; (80056d0 <loadMenuTexts+0xb70>)
 8005660:	f7fb f88c 	bl	800077c <copyText>
 8005664:	4603      	mov	r3, r0
 8005666:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <loadMenuTexts+0xb74>)
 8005668:	6013      	str	r3, [r2, #0]
}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	20000da4 	.word	0x20000da4
 8005678:	20000850 	.word	0x20000850
 800567c:	20000da8 	.word	0x20000da8
 8005680:	20000860 	.word	0x20000860
 8005684:	20000dac 	.word	0x20000dac
 8005688:	20000870 	.word	0x20000870
 800568c:	20000db0 	.word	0x20000db0
 8005690:	20000880 	.word	0x20000880
 8005694:	20000db4 	.word	0x20000db4
 8005698:	20000890 	.word	0x20000890
 800569c:	20000db8 	.word	0x20000db8
 80056a0:	200008a0 	.word	0x200008a0
 80056a4:	20000dc4 	.word	0x20000dc4
 80056a8:	200008b0 	.word	0x200008b0
 80056ac:	20000dc8 	.word	0x20000dc8
 80056b0:	200008c0 	.word	0x200008c0
 80056b4:	20000dcc 	.word	0x20000dcc
 80056b8:	200008d0 	.word	0x200008d0
 80056bc:	20000dd0 	.word	0x20000dd0
 80056c0:	200008e0 	.word	0x200008e0
 80056c4:	20000dd4 	.word	0x20000dd4
 80056c8:	200008f0 	.word	0x200008f0
 80056cc:	20000dd8 	.word	0x20000dd8
 80056d0:	20000900 	.word	0x20000900
 80056d4:	20000ddc 	.word	0x20000ddc

080056d8 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d105      	bne.n	80056f4 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80056e8:	4a22      	ldr	r2, [pc, #136]	; (8005774 <lcdUpdate+0x9c>)
 80056ea:	2101      	movs	r1, #1
 80056ec:	2002      	movs	r0, #2
 80056ee:	f7fa ffbb 	bl	8000668 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80056f2:	e03b      	b.n	800576c <lcdUpdate+0x94>
	} else if(y==2) {
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d105      	bne.n	8005706 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80056fa:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <lcdUpdate+0x9c>)
 80056fc:	2102      	movs	r1, #2
 80056fe:	2002      	movs	r0, #2
 8005700:	f7fa ffb2 	bl	8000668 <lcd_print>
}
 8005704:	e032      	b.n	800576c <lcdUpdate+0x94>
	} else if(y==3) {
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	2b03      	cmp	r3, #3
 800570a:	d105      	bne.n	8005718 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 800570c:	4a19      	ldr	r2, [pc, #100]	; (8005774 <lcdUpdate+0x9c>)
 800570e:	2103      	movs	r1, #3
 8005710:	2002      	movs	r0, #2
 8005712:	f7fa ffa9 	bl	8000668 <lcd_print>
}
 8005716:	e029      	b.n	800576c <lcdUpdate+0x94>
	} else if(y==4) {
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	2b04      	cmp	r3, #4
 800571c:	d105      	bne.n	800572a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800571e:	4a15      	ldr	r2, [pc, #84]	; (8005774 <lcdUpdate+0x9c>)
 8005720:	2104      	movs	r1, #4
 8005722:	2002      	movs	r0, #2
 8005724:	f7fa ffa0 	bl	8000668 <lcd_print>
}
 8005728:	e020      	b.n	800576c <lcdUpdate+0x94>
	} else if(y==5) {
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	2b05      	cmp	r3, #5
 800572e:	d105      	bne.n	800573c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005730:	4a10      	ldr	r2, [pc, #64]	; (8005774 <lcdUpdate+0x9c>)
 8005732:	2105      	movs	r1, #5
 8005734:	2002      	movs	r0, #2
 8005736:	f7fa ff97 	bl	8000668 <lcd_print>
}
 800573a:	e017      	b.n	800576c <lcdUpdate+0x94>
	} else if(y==6) {
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	2b06      	cmp	r3, #6
 8005740:	d105      	bne.n	800574e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005742:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <lcdUpdate+0x9c>)
 8005744:	2106      	movs	r1, #6
 8005746:	2002      	movs	r0, #2
 8005748:	f7fa ff8e 	bl	8000668 <lcd_print>
}
 800574c:	e00e      	b.n	800576c <lcdUpdate+0x94>
	} else if (y==7) {
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	2b07      	cmp	r3, #7
 8005752:	d10b      	bne.n	800576c <lcdUpdate+0x94>
		lcd_clear();
 8005754:	f7fa ffb4 	bl	80006c0 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005758:	4a07      	ldr	r2, [pc, #28]	; (8005778 <lcdUpdate+0xa0>)
 800575a:	2101      	movs	r1, #1
 800575c:	2001      	movs	r0, #1
 800575e:	f7fa ff83 	bl	8000668 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005762:	4a06      	ldr	r2, [pc, #24]	; (800577c <lcdUpdate+0xa4>)
 8005764:	2101      	movs	r1, #1
 8005766:	2002      	movs	r0, #2
 8005768:	f7fa ff7e 	bl	8000668 <lcd_print>
}
 800576c:	bf00      	nop
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	0800da94 	.word	0x0800da94
 8005778:	0800e3c0 	.word	0x0800e3c0
 800577c:	0800e3d4 	.word	0x0800e3d4

08005780 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d11d      	bne.n	80057cc <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8005790:	4b62      	ldr	r3, [pc, #392]	; (800591c <hataKoduLcdGoster+0x19c>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d105      	bne.n	80057a4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005798:	4a61      	ldr	r2, [pc, #388]	; (8005920 <hataKoduLcdGoster+0x1a0>)
 800579a:	2101      	movs	r1, #1
 800579c:	2001      	movs	r0, #1
 800579e:	f7fa ff63 	bl	8000668 <lcd_print>
 80057a2:	e008      	b.n	80057b6 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80057a4:	4b5d      	ldr	r3, [pc, #372]	; (800591c <hataKoduLcdGoster+0x19c>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d104      	bne.n	80057b6 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80057ac:	4a5d      	ldr	r2, [pc, #372]	; (8005924 <hataKoduLcdGoster+0x1a4>)
 80057ae:	2101      	movs	r1, #1
 80057b0:	2001      	movs	r0, #1
 80057b2:	f7fa ff59 	bl	8000668 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80057b6:	4a5c      	ldr	r2, [pc, #368]	; (8005928 <hataKoduLcdGoster+0x1a8>)
 80057b8:	2101      	movs	r1, #1
 80057ba:	2002      	movs	r0, #2
 80057bc:	f7fa ff54 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80057c0:	4a5a      	ldr	r2, [pc, #360]	; (800592c <hataKoduLcdGoster+0x1ac>)
 80057c2:	2107      	movs	r1, #7
 80057c4:	2002      	movs	r0, #2
 80057c6:	f7fa ff4f 	bl	8000668 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80057ca:	e0a3      	b.n	8005914 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d11d      	bne.n	800580e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80057d2:	4b52      	ldr	r3, [pc, #328]	; (800591c <hataKoduLcdGoster+0x19c>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 80057da:	4a51      	ldr	r2, [pc, #324]	; (8005920 <hataKoduLcdGoster+0x1a0>)
 80057dc:	2101      	movs	r1, #1
 80057de:	2001      	movs	r0, #1
 80057e0:	f7fa ff42 	bl	8000668 <lcd_print>
 80057e4:	e008      	b.n	80057f8 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80057e6:	4b4d      	ldr	r3, [pc, #308]	; (800591c <hataKoduLcdGoster+0x19c>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d104      	bne.n	80057f8 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80057ee:	4a4d      	ldr	r2, [pc, #308]	; (8005924 <hataKoduLcdGoster+0x1a4>)
 80057f0:	2101      	movs	r1, #1
 80057f2:	2001      	movs	r0, #1
 80057f4:	f7fa ff38 	bl	8000668 <lcd_print>
		lcd_print(2, 2, "2");
 80057f8:	4a4d      	ldr	r2, [pc, #308]	; (8005930 <hataKoduLcdGoster+0x1b0>)
 80057fa:	2102      	movs	r1, #2
 80057fc:	2002      	movs	r0, #2
 80057fe:	f7fa ff33 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005802:	4a4a      	ldr	r2, [pc, #296]	; (800592c <hataKoduLcdGoster+0x1ac>)
 8005804:	2107      	movs	r1, #7
 8005806:	2002      	movs	r0, #2
 8005808:	f7fa ff2e 	bl	8000668 <lcd_print>
}
 800580c:	e082      	b.n	8005914 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d11d      	bne.n	8005850 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005814:	4b41      	ldr	r3, [pc, #260]	; (800591c <hataKoduLcdGoster+0x19c>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d105      	bne.n	8005828 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 800581c:	4a40      	ldr	r2, [pc, #256]	; (8005920 <hataKoduLcdGoster+0x1a0>)
 800581e:	2101      	movs	r1, #1
 8005820:	2001      	movs	r0, #1
 8005822:	f7fa ff21 	bl	8000668 <lcd_print>
 8005826:	e008      	b.n	800583a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005828:	4b3c      	ldr	r3, [pc, #240]	; (800591c <hataKoduLcdGoster+0x19c>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d104      	bne.n	800583a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005830:	4a3c      	ldr	r2, [pc, #240]	; (8005924 <hataKoduLcdGoster+0x1a4>)
 8005832:	2101      	movs	r1, #1
 8005834:	2001      	movs	r0, #1
 8005836:	f7fa ff17 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "3");
 800583a:	4a3e      	ldr	r2, [pc, #248]	; (8005934 <hataKoduLcdGoster+0x1b4>)
 800583c:	2103      	movs	r1, #3
 800583e:	2002      	movs	r0, #2
 8005840:	f7fa ff12 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005844:	4a39      	ldr	r2, [pc, #228]	; (800592c <hataKoduLcdGoster+0x1ac>)
 8005846:	2107      	movs	r1, #7
 8005848:	2002      	movs	r0, #2
 800584a:	f7fa ff0d 	bl	8000668 <lcd_print>
}
 800584e:	e061      	b.n	8005914 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	2b04      	cmp	r3, #4
 8005854:	d11d      	bne.n	8005892 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005856:	4b31      	ldr	r3, [pc, #196]	; (800591c <hataKoduLcdGoster+0x19c>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d105      	bne.n	800586a <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 800585e:	4a30      	ldr	r2, [pc, #192]	; (8005920 <hataKoduLcdGoster+0x1a0>)
 8005860:	2101      	movs	r1, #1
 8005862:	2001      	movs	r0, #1
 8005864:	f7fa ff00 	bl	8000668 <lcd_print>
 8005868:	e008      	b.n	800587c <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800586a:	4b2c      	ldr	r3, [pc, #176]	; (800591c <hataKoduLcdGoster+0x19c>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d104      	bne.n	800587c <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005872:	4a2c      	ldr	r2, [pc, #176]	; (8005924 <hataKoduLcdGoster+0x1a4>)
 8005874:	2101      	movs	r1, #1
 8005876:	2001      	movs	r0, #1
 8005878:	f7fa fef6 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "4");
 800587c:	4a2e      	ldr	r2, [pc, #184]	; (8005938 <hataKoduLcdGoster+0x1b8>)
 800587e:	2104      	movs	r1, #4
 8005880:	2002      	movs	r0, #2
 8005882:	f7fa fef1 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005886:	4a29      	ldr	r2, [pc, #164]	; (800592c <hataKoduLcdGoster+0x1ac>)
 8005888:	2107      	movs	r1, #7
 800588a:	2002      	movs	r0, #2
 800588c:	f7fa feec 	bl	8000668 <lcd_print>
}
 8005890:	e040      	b.n	8005914 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	2b05      	cmp	r3, #5
 8005896:	d11d      	bne.n	80058d4 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005898:	4b20      	ldr	r3, [pc, #128]	; (800591c <hataKoduLcdGoster+0x19c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d105      	bne.n	80058ac <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80058a0:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <hataKoduLcdGoster+0x1a0>)
 80058a2:	2101      	movs	r1, #1
 80058a4:	2001      	movs	r0, #1
 80058a6:	f7fa fedf 	bl	8000668 <lcd_print>
 80058aa:	e008      	b.n	80058be <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <hataKoduLcdGoster+0x19c>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d104      	bne.n	80058be <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058b4:	4a1b      	ldr	r2, [pc, #108]	; (8005924 <hataKoduLcdGoster+0x1a4>)
 80058b6:	2101      	movs	r1, #1
 80058b8:	2001      	movs	r0, #1
 80058ba:	f7fa fed5 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "5");
 80058be:	4a1f      	ldr	r2, [pc, #124]	; (800593c <hataKoduLcdGoster+0x1bc>)
 80058c0:	2105      	movs	r1, #5
 80058c2:	2002      	movs	r0, #2
 80058c4:	f7fa fed0 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80058c8:	4a18      	ldr	r2, [pc, #96]	; (800592c <hataKoduLcdGoster+0x1ac>)
 80058ca:	2107      	movs	r1, #7
 80058cc:	2002      	movs	r0, #2
 80058ce:	f7fa fecb 	bl	8000668 <lcd_print>
}
 80058d2:	e01f      	b.n	8005914 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	2b06      	cmp	r3, #6
 80058d8:	d11c      	bne.n	8005914 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80058da:	4b10      	ldr	r3, [pc, #64]	; (800591c <hataKoduLcdGoster+0x19c>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d105      	bne.n	80058ee <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 80058e2:	4a0f      	ldr	r2, [pc, #60]	; (8005920 <hataKoduLcdGoster+0x1a0>)
 80058e4:	2101      	movs	r1, #1
 80058e6:	2001      	movs	r0, #1
 80058e8:	f7fa febe 	bl	8000668 <lcd_print>
 80058ec:	e008      	b.n	8005900 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <hataKoduLcdGoster+0x19c>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d104      	bne.n	8005900 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058f6:	4a0b      	ldr	r2, [pc, #44]	; (8005924 <hataKoduLcdGoster+0x1a4>)
 80058f8:	2101      	movs	r1, #1
 80058fa:	2001      	movs	r0, #1
 80058fc:	f7fa feb4 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "6");
 8005900:	4a0f      	ldr	r2, [pc, #60]	; (8005940 <hataKoduLcdGoster+0x1c0>)
 8005902:	2106      	movs	r1, #6
 8005904:	2002      	movs	r0, #2
 8005906:	f7fa feaf 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 800590a:	4a08      	ldr	r2, [pc, #32]	; (800592c <hataKoduLcdGoster+0x1ac>)
 800590c:	2107      	movs	r1, #7
 800590e:	2002      	movs	r0, #2
 8005910:	f7fa feaa 	bl	8000668 <lcd_print>
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20000c6a 	.word	0x20000c6a
 8005920:	0800e3e8 	.word	0x0800e3e8
 8005924:	0800e3fc 	.word	0x0800e3fc
 8005928:	0800d83c 	.word	0x0800d83c
 800592c:	0800e410 	.word	0x0800e410
 8005930:	0800d840 	.word	0x0800d840
 8005934:	0800d844 	.word	0x0800d844
 8005938:	0800d848 	.word	0x0800d848
 800593c:	0800d84c 	.word	0x0800d84c
 8005940:	0800d850 	.word	0x0800d850

08005944 <convertAndSendData>:

void convertAndSendData() {
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 800594a:	4a14      	ldr	r2, [pc, #80]	; (800599c <convertAndSendData+0x58>)
 800594c:	2101      	movs	r1, #1
 800594e:	2001      	movs	r0, #1
 8005950:	f7fa fe8a 	bl	8000668 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005954:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <convertAndSendData+0x5c>)
 8005956:	2101      	movs	r1, #1
 8005958:	2002      	movs	r0, #2
 800595a:	f7fa fe85 	bl	8000668 <lcd_print>
	for(int i=0; i<2; i++) {
 800595e:	2300      	movs	r3, #0
 8005960:	607b      	str	r3, [r7, #4]
 8005962:	e00a      	b.n	800597a <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005964:	f002 fb3c 	bl	8007fe0 <mergeData>
 8005968:	4603      	mov	r3, r0
 800596a:	461a      	mov	r2, r3
 800596c:	490d      	ldr	r1, [pc, #52]	; (80059a4 <convertAndSendData+0x60>)
 800596e:	480e      	ldr	r0, [pc, #56]	; (80059a8 <convertAndSendData+0x64>)
 8005970:	f7fa fc60 	bl	8000234 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3301      	adds	r3, #1
 8005978:	607b      	str	r3, [r7, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b01      	cmp	r3, #1
 800597e:	ddf1      	ble.n	8005964 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005984:	f003 fb7a 	bl	800907c <HAL_Delay>
	lcd_clear();
 8005988:	f7fa fe9a 	bl	80006c0 <lcd_clear>
	HAL_Delay(500);
 800598c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005990:	f003 fb74 	bl	800907c <HAL_Delay>
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	0800e41c 	.word	0x0800e41c
 80059a0:	0800e428 	.word	0x0800e428
 80059a4:	20000bf4 	.word	0x20000bf4
 80059a8:	20000ea4 	.word	0x20000ea4

080059ac <eepromKontrol>:

void eepromKontrol(int type) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af04      	add	r7, sp, #16
 80059b2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,145,eepromData,145,3000);
 80059b4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80059b8:	9302      	str	r3, [sp, #8]
 80059ba:	2391      	movs	r3, #145	; 0x91
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	4b9c      	ldr	r3, [pc, #624]	; (8005c30 <eepromKontrol+0x284>)
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	2391      	movs	r3, #145	; 0x91
 80059c4:	2200      	movs	r2, #0
 80059c6:	21a0      	movs	r1, #160	; 0xa0
 80059c8:	489a      	ldr	r0, [pc, #616]	; (8005c34 <eepromKontrol+0x288>)
 80059ca:	f004 fcdb 	bl	800a384 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80059ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059d2:	f003 fb53 	bl	800907c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 80059d6:	4b96      	ldr	r3, [pc, #600]	; (8005c30 <eepromKontrol+0x284>)
 80059d8:	78da      	ldrb	r2, [r3, #3]
 80059da:	4b97      	ldr	r3, [pc, #604]	; (8005c38 <eepromKontrol+0x28c>)
 80059dc:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 80059de:	4b94      	ldr	r3, [pc, #592]	; (8005c30 <eepromKontrol+0x284>)
 80059e0:	785a      	ldrb	r2, [r3, #1]
 80059e2:	4b96      	ldr	r3, [pc, #600]	; (8005c3c <eepromKontrol+0x290>)
 80059e4:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 80059e6:	4b92      	ldr	r3, [pc, #584]	; (8005c30 <eepromKontrol+0x284>)
 80059e8:	789a      	ldrb	r2, [r3, #2]
 80059ea:	4b95      	ldr	r3, [pc, #596]	; (8005c40 <eepromKontrol+0x294>)
 80059ec:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 80059ee:	4b90      	ldr	r3, [pc, #576]	; (8005c30 <eepromKontrol+0x284>)
 80059f0:	791a      	ldrb	r2, [r3, #4]
 80059f2:	4b94      	ldr	r3, [pc, #592]	; (8005c44 <eepromKontrol+0x298>)
 80059f4:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 80059f6:	4b8e      	ldr	r3, [pc, #568]	; (8005c30 <eepromKontrol+0x284>)
 80059f8:	795a      	ldrb	r2, [r3, #5]
 80059fa:	4b93      	ldr	r3, [pc, #588]	; (8005c48 <eepromKontrol+0x29c>)
 80059fc:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 80059fe:	4b8c      	ldr	r3, [pc, #560]	; (8005c30 <eepromKontrol+0x284>)
 8005a00:	799a      	ldrb	r2, [r3, #6]
 8005a02:	4b92      	ldr	r3, [pc, #584]	; (8005c4c <eepromKontrol+0x2a0>)
 8005a04:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005a06:	4b8a      	ldr	r3, [pc, #552]	; (8005c30 <eepromKontrol+0x284>)
 8005a08:	79da      	ldrb	r2, [r3, #7]
 8005a0a:	4b91      	ldr	r3, [pc, #580]	; (8005c50 <eepromKontrol+0x2a4>)
 8005a0c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005a0e:	4b88      	ldr	r3, [pc, #544]	; (8005c30 <eepromKontrol+0x284>)
 8005a10:	7a1a      	ldrb	r2, [r3, #8]
 8005a12:	4b90      	ldr	r3, [pc, #576]	; (8005c54 <eepromKontrol+0x2a8>)
 8005a14:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005a16:	4b86      	ldr	r3, [pc, #536]	; (8005c30 <eepromKontrol+0x284>)
 8005a18:	7a5a      	ldrb	r2, [r3, #9]
 8005a1a:	4b8f      	ldr	r3, [pc, #572]	; (8005c58 <eepromKontrol+0x2ac>)
 8005a1c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005a1e:	4b84      	ldr	r3, [pc, #528]	; (8005c30 <eepromKontrol+0x284>)
 8005a20:	7a9a      	ldrb	r2, [r3, #10]
 8005a22:	4b8e      	ldr	r3, [pc, #568]	; (8005c5c <eepromKontrol+0x2b0>)
 8005a24:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005a26:	4b82      	ldr	r3, [pc, #520]	; (8005c30 <eepromKontrol+0x284>)
 8005a28:	7ada      	ldrb	r2, [r3, #11]
 8005a2a:	4b8d      	ldr	r3, [pc, #564]	; (8005c60 <eepromKontrol+0x2b4>)
 8005a2c:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005a2e:	4b80      	ldr	r3, [pc, #512]	; (8005c30 <eepromKontrol+0x284>)
 8005a30:	7b1a      	ldrb	r2, [r3, #12]
 8005a32:	4b8c      	ldr	r3, [pc, #560]	; (8005c64 <eepromKontrol+0x2b8>)
 8005a34:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005a36:	4b7e      	ldr	r3, [pc, #504]	; (8005c30 <eepromKontrol+0x284>)
 8005a38:	7b5a      	ldrb	r2, [r3, #13]
 8005a3a:	4b8b      	ldr	r3, [pc, #556]	; (8005c68 <eepromKontrol+0x2bc>)
 8005a3c:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005a3e:	4b7c      	ldr	r3, [pc, #496]	; (8005c30 <eepromKontrol+0x284>)
 8005a40:	7b9a      	ldrb	r2, [r3, #14]
 8005a42:	4b8a      	ldr	r3, [pc, #552]	; (8005c6c <eepromKontrol+0x2c0>)
 8005a44:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005a46:	4b7a      	ldr	r3, [pc, #488]	; (8005c30 <eepromKontrol+0x284>)
 8005a48:	7bda      	ldrb	r2, [r3, #15]
 8005a4a:	4b89      	ldr	r3, [pc, #548]	; (8005c70 <eepromKontrol+0x2c4>)
 8005a4c:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005a4e:	4b78      	ldr	r3, [pc, #480]	; (8005c30 <eepromKontrol+0x284>)
 8005a50:	7c1a      	ldrb	r2, [r3, #16]
 8005a52:	4b88      	ldr	r3, [pc, #544]	; (8005c74 <eepromKontrol+0x2c8>)
 8005a54:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005a56:	4b76      	ldr	r3, [pc, #472]	; (8005c30 <eepromKontrol+0x284>)
 8005a58:	7c5a      	ldrb	r2, [r3, #17]
 8005a5a:	4b87      	ldr	r3, [pc, #540]	; (8005c78 <eepromKontrol+0x2cc>)
 8005a5c:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005a5e:	4b74      	ldr	r3, [pc, #464]	; (8005c30 <eepromKontrol+0x284>)
 8005a60:	7c9a      	ldrb	r2, [r3, #18]
 8005a62:	4b86      	ldr	r3, [pc, #536]	; (8005c7c <eepromKontrol+0x2d0>)
 8005a64:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005a66:	4b72      	ldr	r3, [pc, #456]	; (8005c30 <eepromKontrol+0x284>)
 8005a68:	7cda      	ldrb	r2, [r3, #19]
 8005a6a:	4b85      	ldr	r3, [pc, #532]	; (8005c80 <eepromKontrol+0x2d4>)
 8005a6c:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005a6e:	4b70      	ldr	r3, [pc, #448]	; (8005c30 <eepromKontrol+0x284>)
 8005a70:	7d1a      	ldrb	r2, [r3, #20]
 8005a72:	4b84      	ldr	r3, [pc, #528]	; (8005c84 <eepromKontrol+0x2d8>)
 8005a74:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005a76:	4b6e      	ldr	r3, [pc, #440]	; (8005c30 <eepromKontrol+0x284>)
 8005a78:	7d5a      	ldrb	r2, [r3, #21]
 8005a7a:	4b83      	ldr	r3, [pc, #524]	; (8005c88 <eepromKontrol+0x2dc>)
 8005a7c:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005a7e:	4b6c      	ldr	r3, [pc, #432]	; (8005c30 <eepromKontrol+0x284>)
 8005a80:	7d9a      	ldrb	r2, [r3, #22]
 8005a82:	4b82      	ldr	r3, [pc, #520]	; (8005c8c <eepromKontrol+0x2e0>)
 8005a84:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005a86:	4b6a      	ldr	r3, [pc, #424]	; (8005c30 <eepromKontrol+0x284>)
 8005a88:	7dda      	ldrb	r2, [r3, #23]
 8005a8a:	4b81      	ldr	r3, [pc, #516]	; (8005c90 <eepromKontrol+0x2e4>)
 8005a8c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005a8e:	4b68      	ldr	r3, [pc, #416]	; (8005c30 <eepromKontrol+0x284>)
 8005a90:	7e1a      	ldrb	r2, [r3, #24]
 8005a92:	4b80      	ldr	r3, [pc, #512]	; (8005c94 <eepromKontrol+0x2e8>)
 8005a94:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005a96:	4b66      	ldr	r3, [pc, #408]	; (8005c30 <eepromKontrol+0x284>)
 8005a98:	7e5a      	ldrb	r2, [r3, #25]
 8005a9a:	4b7f      	ldr	r3, [pc, #508]	; (8005c98 <eepromKontrol+0x2ec>)
 8005a9c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005a9e:	4b64      	ldr	r3, [pc, #400]	; (8005c30 <eepromKontrol+0x284>)
 8005aa0:	7e9a      	ldrb	r2, [r3, #26]
 8005aa2:	4b7e      	ldr	r3, [pc, #504]	; (8005c9c <eepromKontrol+0x2f0>)
 8005aa4:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005aa6:	4b62      	ldr	r3, [pc, #392]	; (8005c30 <eepromKontrol+0x284>)
 8005aa8:	7eda      	ldrb	r2, [r3, #27]
 8005aaa:	4b7d      	ldr	r3, [pc, #500]	; (8005ca0 <eepromKontrol+0x2f4>)
 8005aac:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005aae:	4b60      	ldr	r3, [pc, #384]	; (8005c30 <eepromKontrol+0x284>)
 8005ab0:	7f1a      	ldrb	r2, [r3, #28]
 8005ab2:	4b7c      	ldr	r3, [pc, #496]	; (8005ca4 <eepromKontrol+0x2f8>)
 8005ab4:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005ab6:	4b5e      	ldr	r3, [pc, #376]	; (8005c30 <eepromKontrol+0x284>)
 8005ab8:	7f5a      	ldrb	r2, [r3, #29]
 8005aba:	4b7b      	ldr	r3, [pc, #492]	; (8005ca8 <eepromKontrol+0x2fc>)
 8005abc:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005abe:	4b5c      	ldr	r3, [pc, #368]	; (8005c30 <eepromKontrol+0x284>)
 8005ac0:	7f9a      	ldrb	r2, [r3, #30]
 8005ac2:	4b7a      	ldr	r3, [pc, #488]	; (8005cac <eepromKontrol+0x300>)
 8005ac4:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005ac6:	4b5a      	ldr	r3, [pc, #360]	; (8005c30 <eepromKontrol+0x284>)
 8005ac8:	7fda      	ldrb	r2, [r3, #31]
 8005aca:	4b79      	ldr	r3, [pc, #484]	; (8005cb0 <eepromKontrol+0x304>)
 8005acc:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005ace:	4b58      	ldr	r3, [pc, #352]	; (8005c30 <eepromKontrol+0x284>)
 8005ad0:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005ad4:	4b77      	ldr	r3, [pc, #476]	; (8005cb4 <eepromKontrol+0x308>)
 8005ad6:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005ad8:	4b55      	ldr	r3, [pc, #340]	; (8005c30 <eepromKontrol+0x284>)
 8005ada:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005ade:	4b76      	ldr	r3, [pc, #472]	; (8005cb8 <eepromKontrol+0x30c>)
 8005ae0:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8005ae2:	4b53      	ldr	r3, [pc, #332]	; (8005c30 <eepromKontrol+0x284>)
 8005ae4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005ae8:	4b74      	ldr	r3, [pc, #464]	; (8005cbc <eepromKontrol+0x310>)
 8005aea:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005aec:	4b50      	ldr	r3, [pc, #320]	; (8005c30 <eepromKontrol+0x284>)
 8005aee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005af2:	4b73      	ldr	r3, [pc, #460]	; (8005cc0 <eepromKontrol+0x314>)
 8005af4:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005af6:	4b4e      	ldr	r3, [pc, #312]	; (8005c30 <eepromKontrol+0x284>)
 8005af8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005afc:	4b71      	ldr	r3, [pc, #452]	; (8005cc4 <eepromKontrol+0x318>)
 8005afe:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005b00:	4b4b      	ldr	r3, [pc, #300]	; (8005c30 <eepromKontrol+0x284>)
 8005b02:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005b06:	4b70      	ldr	r3, [pc, #448]	; (8005cc8 <eepromKontrol+0x31c>)
 8005b08:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005b0a:	4b49      	ldr	r3, [pc, #292]	; (8005c30 <eepromKontrol+0x284>)
 8005b0c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005b10:	4b6e      	ldr	r3, [pc, #440]	; (8005ccc <eepromKontrol+0x320>)
 8005b12:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005b14:	4b46      	ldr	r3, [pc, #280]	; (8005c30 <eepromKontrol+0x284>)
 8005b16:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005b1a:	4b6d      	ldr	r3, [pc, #436]	; (8005cd0 <eepromKontrol+0x324>)
 8005b1c:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005b1e:	4b44      	ldr	r3, [pc, #272]	; (8005c30 <eepromKontrol+0x284>)
 8005b20:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005b24:	4b6b      	ldr	r3, [pc, #428]	; (8005cd4 <eepromKontrol+0x328>)
 8005b26:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005b28:	4b41      	ldr	r3, [pc, #260]	; (8005c30 <eepromKontrol+0x284>)
 8005b2a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005b2e:	4b6a      	ldr	r3, [pc, #424]	; (8005cd8 <eepromKontrol+0x32c>)
 8005b30:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005b32:	4b3f      	ldr	r3, [pc, #252]	; (8005c30 <eepromKontrol+0x284>)
 8005b34:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005b38:	4b68      	ldr	r3, [pc, #416]	; (8005cdc <eepromKontrol+0x330>)
 8005b3a:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005b3c:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <eepromKontrol+0x284>)
 8005b3e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005b42:	4b67      	ldr	r3, [pc, #412]	; (8005ce0 <eepromKontrol+0x334>)
 8005b44:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005b46:	4b3a      	ldr	r3, [pc, #232]	; (8005c30 <eepromKontrol+0x284>)
 8005b48:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005b4c:	4b65      	ldr	r3, [pc, #404]	; (8005ce4 <eepromKontrol+0x338>)
 8005b4e:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005b50:	4b37      	ldr	r3, [pc, #220]	; (8005c30 <eepromKontrol+0x284>)
 8005b52:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005b56:	4b64      	ldr	r3, [pc, #400]	; (8005ce8 <eepromKontrol+0x33c>)
 8005b58:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005b5a:	4b35      	ldr	r3, [pc, #212]	; (8005c30 <eepromKontrol+0x284>)
 8005b5c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005b60:	4b62      	ldr	r3, [pc, #392]	; (8005cec <eepromKontrol+0x340>)
 8005b62:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005b64:	4b32      	ldr	r3, [pc, #200]	; (8005c30 <eepromKontrol+0x284>)
 8005b66:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005b6a:	4b61      	ldr	r3, [pc, #388]	; (8005cf0 <eepromKontrol+0x344>)
 8005b6c:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005b6e:	4b52      	ldr	r3, [pc, #328]	; (8005cb8 <eepromKontrol+0x30c>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe fff4 	bl	8004b60 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005b78:	4b4e      	ldr	r3, [pc, #312]	; (8005cb4 <eepromKontrol+0x308>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b09      	cmp	r3, #9
 8005b7e:	d902      	bls.n	8005b86 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005b80:	4b4c      	ldr	r3, [pc, #304]	; (8005cb4 <eepromKontrol+0x308>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005b86:	4b4a      	ldr	r3, [pc, #296]	; (8005cb0 <eepromKontrol+0x304>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b09      	cmp	r3, #9
 8005b8c:	d902      	bls.n	8005b94 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005b8e:	4b48      	ldr	r3, [pc, #288]	; (8005cb0 <eepromKontrol+0x304>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005b94:	4b45      	ldr	r3, [pc, #276]	; (8005cac <eepromKontrol+0x300>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b09      	cmp	r3, #9
 8005b9a:	d902      	bls.n	8005ba2 <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005b9c:	4b43      	ldr	r3, [pc, #268]	; (8005cac <eepromKontrol+0x300>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005ba2:	4b41      	ldr	r3, [pc, #260]	; (8005ca8 <eepromKontrol+0x2fc>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b09      	cmp	r3, #9
 8005ba8:	d902      	bls.n	8005bb0 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005baa:	4b3f      	ldr	r3, [pc, #252]	; (8005ca8 <eepromKontrol+0x2fc>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005bb0:	4b3c      	ldr	r3, [pc, #240]	; (8005ca4 <eepromKontrol+0x2f8>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b09      	cmp	r3, #9
 8005bb6:	d902      	bls.n	8005bbe <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005bb8:	4b3a      	ldr	r3, [pc, #232]	; (8005ca4 <eepromKontrol+0x2f8>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005bbe:	4b1f      	ldr	r3, [pc, #124]	; (8005c3c <eepromKontrol+0x290>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d902      	bls.n	8005bcc <eepromKontrol+0x220>
	    calismaSekli=0;
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <eepromKontrol+0x290>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005bcc:	4b1c      	ldr	r3, [pc, #112]	; (8005c40 <eepromKontrol+0x294>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d902      	bls.n	8005bda <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005bd4:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <eepromKontrol+0x294>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005bda:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <eepromKontrol+0x298>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d902      	bls.n	8005be8 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005be2:	4b18      	ldr	r3, [pc, #96]	; (8005c44 <eepromKontrol+0x298>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005be8:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <eepromKontrol+0x29c>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d902      	bls.n	8005bf6 <eepromKontrol+0x24a>
	    altLimit=1;
 8005bf0:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <eepromKontrol+0x29c>)
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005bf6:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <eepromKontrol+0x2a0>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d902      	bls.n	8005c04 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005bfe:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <eepromKontrol+0x2a0>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <eepromKontrol+0x2a4>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d902      	bls.n	8005c12 <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005c0c:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <eepromKontrol+0x2a4>)
 8005c0e:	2203      	movs	r2, #3
 8005c10:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005c12:	4b2d      	ldr	r3, [pc, #180]	; (8005cc8 <eepromKontrol+0x31c>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d902      	bls.n	8005c20 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005c1a:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <eepromKontrol+0x31c>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005c20:	4b0c      	ldr	r3, [pc, #48]	; (8005c54 <eepromKontrol+0x2a8>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d965      	bls.n	8005cf4 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005c28:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <eepromKontrol+0x2a8>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	e061      	b.n	8005cf4 <eepromKontrol+0x348>
 8005c30:	20000b38 	.word	0x20000b38
 8005c34:	20000e08 	.word	0x20000e08
 8005c38:	20000bc9 	.word	0x20000bc9
 8005c3c:	20000c4a 	.word	0x20000c4a
 8005c40:	20000c4d 	.word	0x20000c4d
 8005c44:	20000c4e 	.word	0x20000c4e
 8005c48:	20000c4f 	.word	0x20000c4f
 8005c4c:	20000c50 	.word	0x20000c50
 8005c50:	20000c51 	.word	0x20000c51
 8005c54:	20000c52 	.word	0x20000c52
 8005c58:	20000c62 	.word	0x20000c62
 8005c5c:	20000c53 	.word	0x20000c53
 8005c60:	20000c63 	.word	0x20000c63
 8005c64:	20000c54 	.word	0x20000c54
 8005c68:	20000c64 	.word	0x20000c64
 8005c6c:	20000c57 	.word	0x20000c57
 8005c70:	20000c58 	.word	0x20000c58
 8005c74:	20000c59 	.word	0x20000c59
 8005c78:	20000c5a 	.word	0x20000c5a
 8005c7c:	20000c5b 	.word	0x20000c5b
 8005c80:	20000c5c 	.word	0x20000c5c
 8005c84:	20000c5d 	.word	0x20000c5d
 8005c88:	20000c5e 	.word	0x20000c5e
 8005c8c:	20000c5f 	.word	0x20000c5f
 8005c90:	20000c60 	.word	0x20000c60
 8005c94:	20000c61 	.word	0x20000c61
 8005c98:	20000c65 	.word	0x20000c65
 8005c9c:	20000c67 	.word	0x20000c67
 8005ca0:	20000c45 	.word	0x20000c45
 8005ca4:	20000c46 	.word	0x20000c46
 8005ca8:	20000c47 	.word	0x20000c47
 8005cac:	200009bf 	.word	0x200009bf
 8005cb0:	200009c0 	.word	0x200009c0
 8005cb4:	20000c48 	.word	0x20000c48
 8005cb8:	20000c6a 	.word	0x20000c6a
 8005cbc:	20000c68 	.word	0x20000c68
 8005cc0:	20000c56 	.word	0x20000c56
 8005cc4:	20000c69 	.word	0x20000c69
 8005cc8:	20000c55 	.word	0x20000c55
 8005ccc:	20000c6b 	.word	0x20000c6b
 8005cd0:	20000c6c 	.word	0x20000c6c
 8005cd4:	20000c6d 	.word	0x20000c6d
 8005cd8:	20000c6e 	.word	0x20000c6e
 8005cdc:	20000c6f 	.word	0x20000c6f
 8005ce0:	20000c70 	.word	0x20000c70
 8005ce4:	20000c71 	.word	0x20000c71
 8005ce8:	20000c72 	.word	0x20000c72
 8005cec:	20000c73 	.word	0x20000c73
 8005cf0:	20000c74 	.word	0x20000c74
	}

	if(kapi1AcSure>5) {
 8005cf4:	4b56      	ldr	r3, [pc, #344]	; (8005e50 <eepromKontrol+0x4a4>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b05      	cmp	r3, #5
 8005cfa:	d902      	bls.n	8005d02 <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005cfc:	4b54      	ldr	r3, [pc, #336]	; (8005e50 <eepromKontrol+0x4a4>)
 8005cfe:	2205      	movs	r2, #5
 8005d00:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005d02:	4b54      	ldr	r3, [pc, #336]	; (8005e54 <eepromKontrol+0x4a8>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d902      	bls.n	8005d10 <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005d0a:	4b52      	ldr	r3, [pc, #328]	; (8005e54 <eepromKontrol+0x4a8>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005d10:	4b51      	ldr	r3, [pc, #324]	; (8005e58 <eepromKontrol+0x4ac>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b05      	cmp	r3, #5
 8005d16:	d902      	bls.n	8005d1e <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005d18:	4b4f      	ldr	r3, [pc, #316]	; (8005e58 <eepromKontrol+0x4ac>)
 8005d1a:	2205      	movs	r2, #5
 8005d1c:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005d1e:	4b4f      	ldr	r3, [pc, #316]	; (8005e5c <eepromKontrol+0x4b0>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d902      	bls.n	8005d2c <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005d26:	4b4d      	ldr	r3, [pc, #308]	; (8005e5c <eepromKontrol+0x4b0>)
 8005d28:	2201      	movs	r2, #1
 8005d2a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005d2c:	4b4c      	ldr	r3, [pc, #304]	; (8005e60 <eepromKontrol+0x4b4>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d902      	bls.n	8005d3a <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005d34:	4b4a      	ldr	r3, [pc, #296]	; (8005e60 <eepromKontrol+0x4b4>)
 8005d36:	2202      	movs	r2, #2
 8005d38:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005d3a:	4b4a      	ldr	r3, [pc, #296]	; (8005e64 <eepromKontrol+0x4b8>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b05      	cmp	r3, #5
 8005d40:	d902      	bls.n	8005d48 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005d42:	4b48      	ldr	r3, [pc, #288]	; (8005e64 <eepromKontrol+0x4b8>)
 8005d44:	2205      	movs	r2, #5
 8005d46:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005d48:	4b47      	ldr	r3, [pc, #284]	; (8005e68 <eepromKontrol+0x4bc>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d902      	bls.n	8005d56 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005d50:	4b45      	ldr	r3, [pc, #276]	; (8005e68 <eepromKontrol+0x4bc>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005d56:	4b45      	ldr	r3, [pc, #276]	; (8005e6c <eepromKontrol+0x4c0>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d902      	bls.n	8005d64 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005d5e:	4b43      	ldr	r3, [pc, #268]	; (8005e6c <eepromKontrol+0x4c0>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005d64:	4b42      	ldr	r3, [pc, #264]	; (8005e70 <eepromKontrol+0x4c4>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d902      	bls.n	8005d72 <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005d6c:	4b40      	ldr	r3, [pc, #256]	; (8005e70 <eepromKontrol+0x4c4>)
 8005d6e:	2201      	movs	r2, #1
 8005d70:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005d72:	4b40      	ldr	r3, [pc, #256]	; (8005e74 <eepromKontrol+0x4c8>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d902      	bls.n	8005d80 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005d7a:	4b3e      	ldr	r3, [pc, #248]	; (8005e74 <eepromKontrol+0x4c8>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005d80:	4b3d      	ldr	r3, [pc, #244]	; (8005e78 <eepromKontrol+0x4cc>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d902      	bls.n	8005d8e <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005d88:	4b3b      	ldr	r3, [pc, #236]	; (8005e78 <eepromKontrol+0x4cc>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005d8e:	4b3b      	ldr	r3, [pc, #236]	; (8005e7c <eepromKontrol+0x4d0>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d902      	bls.n	8005d9c <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005d96:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <eepromKontrol+0x4d0>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005d9c:	4b38      	ldr	r3, [pc, #224]	; (8005e80 <eepromKontrol+0x4d4>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b05      	cmp	r3, #5
 8005da2:	d902      	bls.n	8005daa <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005da4:	4b36      	ldr	r3, [pc, #216]	; (8005e80 <eepromKontrol+0x4d4>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005daa:	4b36      	ldr	r3, [pc, #216]	; (8005e84 <eepromKontrol+0x4d8>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	d902      	bls.n	8005db8 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005db2:	4b34      	ldr	r3, [pc, #208]	; (8005e84 <eepromKontrol+0x4d8>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005db8:	4b33      	ldr	r3, [pc, #204]	; (8005e88 <eepromKontrol+0x4dc>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b05      	cmp	r3, #5
 8005dbe:	d902      	bls.n	8005dc6 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005dc0:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <eepromKontrol+0x4dc>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005dc6:	4b31      	ldr	r3, [pc, #196]	; (8005e8c <eepromKontrol+0x4e0>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d902      	bls.n	8005dd4 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005dce:	4b2f      	ldr	r3, [pc, #188]	; (8005e8c <eepromKontrol+0x4e0>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005dd4:	4b2e      	ldr	r3, [pc, #184]	; (8005e90 <eepromKontrol+0x4e4>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2bb4      	cmp	r3, #180	; 0xb4
 8005dda:	d902      	bls.n	8005de2 <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005ddc:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <eepromKontrol+0x4e4>)
 8005dde:	223c      	movs	r2, #60	; 0x3c
 8005de0:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005de2:	4b2c      	ldr	r3, [pc, #176]	; (8005e94 <eepromKontrol+0x4e8>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d902      	bls.n	8005df0 <eepromKontrol+0x444>
	    buzzer=0;
 8005dea:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <eepromKontrol+0x4e8>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005df0:	4b29      	ldr	r3, [pc, #164]	; (8005e98 <eepromKontrol+0x4ec>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d902      	bls.n	8005dfe <eepromKontrol+0x452>
	    demoMode=0;
 8005df8:	4b27      	ldr	r3, [pc, #156]	; (8005e98 <eepromKontrol+0x4ec>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005dfe:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <eepromKontrol+0x4f0>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d902      	bls.n	8005e0c <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005e06:	4b25      	ldr	r3, [pc, #148]	; (8005e9c <eepromKontrol+0x4f0>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005e0c:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <eepromKontrol+0x4f4>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d902      	bls.n	8005e1a <eepromKontrol+0x46e>
	    dilSecim=0;
 8005e14:	4b22      	ldr	r3, [pc, #136]	; (8005ea0 <eepromKontrol+0x4f4>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005e1a:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <eepromKontrol+0x4f8>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d902      	bls.n	8005e28 <eepromKontrol+0x47c>
		iotMode=0;
 8005e22:	4b20      	ldr	r3, [pc, #128]	; (8005ea4 <eepromKontrol+0x4f8>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8005e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e2c:	f003 f926 	bl	800907c <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8005e30:	4b1c      	ldr	r3, [pc, #112]	; (8005ea4 <eepromKontrol+0x4f8>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d104      	bne.n	8005e42 <eepromKontrol+0x496>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <eepromKontrol+0x496>
		convertAndSendData();
 8005e3e:	f7ff fd81 	bl	8005944 <convertAndSendData>
	}

	saveAndConvert(0);
 8005e42:	2000      	movs	r0, #0
 8005e44:	f002 fbe6 	bl	8008614 <saveAndConvert>
}
 8005e48:	bf00      	nop
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000c62 	.word	0x20000c62
 8005e54:	20000c53 	.word	0x20000c53
 8005e58:	20000c63 	.word	0x20000c63
 8005e5c:	20000c54 	.word	0x20000c54
 8005e60:	20000c56 	.word	0x20000c56
 8005e64:	20000c64 	.word	0x20000c64
 8005e68:	20000c57 	.word	0x20000c57
 8005e6c:	20000c58 	.word	0x20000c58
 8005e70:	20000c59 	.word	0x20000c59
 8005e74:	20000c5a 	.word	0x20000c5a
 8005e78:	20000c5b 	.word	0x20000c5b
 8005e7c:	20000c5c 	.word	0x20000c5c
 8005e80:	20000c5d 	.word	0x20000c5d
 8005e84:	20000c5e 	.word	0x20000c5e
 8005e88:	20000c5f 	.word	0x20000c5f
 8005e8c:	20000c60 	.word	0x20000c60
 8005e90:	20000c61 	.word	0x20000c61
 8005e94:	20000c65 	.word	0x20000c65
 8005e98:	20000c67 	.word	0x20000c67
 8005e9c:	20000c69 	.word	0x20000c69
 8005ea0:	20000c6a 	.word	0x20000c6a
 8005ea4:	20000c68 	.word	0x20000c68

08005ea8 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b089      	sub	sp, #36	; 0x24
 8005eac:	af04      	add	r7, sp, #16
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005eb2:	4b26      	ldr	r3, [pc, #152]	; (8005f4c <hata2EEPROM+0xa4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1e5a      	subs	r2, r3, #1
 8005eb8:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <hata2EEPROM+0xa8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	4a25      	ldr	r2, [pc, #148]	; (8005f54 <hata2EEPROM+0xac>)
 8005ec0:	5cd3      	ldrb	r3, [r2, r3]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005ec6:	f000 f849 	bl	8005f5c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005eca:	e000      	b.n	8005ece <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005ecc:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	e012      	b.n	8005efa <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005ed4:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <hata2EEPROM+0xa8>)
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	4a1d      	ldr	r2, [pc, #116]	; (8005f54 <hata2EEPROM+0xac>)
 8005ede:	5cd3      	ldrb	r3, [r2, r3]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d107      	bne.n	8005ef4 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005ee4:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <hata2EEPROM+0xa8>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	4919      	ldr	r1, [pc, #100]	; (8005f54 <hata2EEPROM+0xac>)
 8005eee:	79fa      	ldrb	r2, [r7, #7]
 8005ef0:	54ca      	strb	r2, [r1, r3]
					break;
 8005ef2:	e007      	b.n	8005f04 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <hata2EEPROM+0xa4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	dbe7      	blt.n	8005ed4 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8005f04:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <hata2EEPROM+0xa8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	b299      	uxth	r1, r3
 8005f0a:	4b10      	ldr	r3, [pc, #64]	; (8005f4c <hata2EEPROM+0xa4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	b298      	uxth	r0, r3
 8005f10:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <hata2EEPROM+0xa8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a0f      	ldr	r2, [pc, #60]	; (8005f54 <hata2EEPROM+0xac>)
 8005f16:	4413      	add	r3, r2
 8005f18:	4a0c      	ldr	r2, [pc, #48]	; (8005f4c <hata2EEPROM+0xa4>)
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005f22:	9402      	str	r4, [sp, #8]
 8005f24:	9201      	str	r2, [sp, #4]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	4603      	mov	r3, r0
 8005f2a:	460a      	mov	r2, r1
 8005f2c:	21a0      	movs	r1, #160	; 0xa0
 8005f2e:	480a      	ldr	r0, [pc, #40]	; (8005f58 <hata2EEPROM+0xb0>)
 8005f30:	f004 f92e 	bl	800a190 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005f34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f38:	f003 f8a0 	bl	800907c <HAL_Delay>
	eepromKontrol(1);
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	f7ff fd35 	bl	80059ac <eepromKontrol>
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd90      	pop	{r4, r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000938 	.word	0x20000938
 8005f50:	2000093c 	.word	0x2000093c
 8005f54:	20000b38 	.word	0x20000b38
 8005f58:	20000e08 	.word	0x20000e08

08005f5c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005f62:	2300      	movs	r3, #0
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	e009      	b.n	8005f7c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005f68:	4a0a      	ldr	r2, [pc, #40]	; (8005f94 <eepromDataFillWithEmpty+0x38>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f70:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <eepromDataFillWithEmpty+0x3c>)
 8005f72:	2100      	movs	r1, #0
 8005f74:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	4b07      	ldr	r3, [pc, #28]	; (8005f9c <eepromDataFillWithEmpty+0x40>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	dbf0      	blt.n	8005f68 <eepromDataFillWithEmpty+0xc>
	}
}
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000910 	.word	0x20000910
 8005f98:	20000b38 	.word	0x20000b38
 8005f9c:	20000938 	.word	0x20000938

08005fa0 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
	timer1=millis;
 8005fa4:	4b47      	ldr	r3, [pc, #284]	; (80060c4 <bekle+0x124>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a47      	ldr	r2, [pc, #284]	; (80060c8 <bekle+0x128>)
 8005faa:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fac:	e002      	b.n	8005fb4 <bekle+0x14>
    	butonKontrol = 1;
 8005fae:	4b47      	ldr	r3, [pc, #284]	; (80060cc <bekle+0x12c>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	4846      	ldr	r0, [pc, #280]	; (80060d0 <bekle+0x130>)
 8005fb8:	f003 fe30 	bl	8009c1c <HAL_GPIO_ReadPin>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d109      	bne.n	8005fd6 <bekle+0x36>
 8005fc2:	4b40      	ldr	r3, [pc, #256]	; (80060c4 <bekle+0x124>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b40      	ldr	r3, [pc, #256]	; (80060c8 <bekle+0x128>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d0ef      	beq.n	8005fae <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fce:	e002      	b.n	8005fd6 <bekle+0x36>
    	butonKontrol = 1;
 8005fd0:	4b3e      	ldr	r3, [pc, #248]	; (80060cc <bekle+0x12c>)
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fd6:	2108      	movs	r1, #8
 8005fd8:	483e      	ldr	r0, [pc, #248]	; (80060d4 <bekle+0x134>)
 8005fda:	f003 fe1f 	bl	8009c1c <HAL_GPIO_ReadPin>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d109      	bne.n	8005ff8 <bekle+0x58>
 8005fe4:	4b37      	ldr	r3, [pc, #220]	; (80060c4 <bekle+0x124>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b37      	ldr	r3, [pc, #220]	; (80060c8 <bekle+0x128>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d0ef      	beq.n	8005fd0 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005ff0:	e002      	b.n	8005ff8 <bekle+0x58>
    	butonKontrol = 1;
 8005ff2:	4b36      	ldr	r3, [pc, #216]	; (80060cc <bekle+0x12c>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005ff8:	2102      	movs	r1, #2
 8005ffa:	4835      	ldr	r0, [pc, #212]	; (80060d0 <bekle+0x130>)
 8005ffc:	f003 fe0e 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006000:	4603      	mov	r3, r0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d109      	bne.n	800601a <bekle+0x7a>
 8006006:	4b2f      	ldr	r3, [pc, #188]	; (80060c4 <bekle+0x124>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4b2f      	ldr	r3, [pc, #188]	; (80060c8 <bekle+0x128>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d0ef      	beq.n	8005ff2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006012:	e002      	b.n	800601a <bekle+0x7a>
    	butonKontrol = 1;
 8006014:	4b2d      	ldr	r3, [pc, #180]	; (80060cc <bekle+0x12c>)
 8006016:	2201      	movs	r2, #1
 8006018:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800601a:	2104      	movs	r1, #4
 800601c:	482c      	ldr	r0, [pc, #176]	; (80060d0 <bekle+0x130>)
 800601e:	f003 fdfd 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006022:	4603      	mov	r3, r0
 8006024:	2b01      	cmp	r3, #1
 8006026:	d109      	bne.n	800603c <bekle+0x9c>
 8006028:	4b26      	ldr	r3, [pc, #152]	; (80060c4 <bekle+0x124>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <bekle+0x128>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d0ef      	beq.n	8006014 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006034:	e002      	b.n	800603c <bekle+0x9c>
    	butonKontrol = 1;
 8006036:	4b25      	ldr	r3, [pc, #148]	; (80060cc <bekle+0x12c>)
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800603c:	2108      	movs	r1, #8
 800603e:	4824      	ldr	r0, [pc, #144]	; (80060d0 <bekle+0x130>)
 8006040:	f003 fdec 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006044:	4603      	mov	r3, r0
 8006046:	2b01      	cmp	r3, #1
 8006048:	d109      	bne.n	800605e <bekle+0xbe>
 800604a:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <bekle+0x124>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <bekle+0x128>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d0ef      	beq.n	8006036 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006056:	e002      	b.n	800605e <bekle+0xbe>
    	butonKontrol = 1;
 8006058:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <bekle+0x12c>)
 800605a:	2201      	movs	r2, #1
 800605c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800605e:	2180      	movs	r1, #128	; 0x80
 8006060:	481c      	ldr	r0, [pc, #112]	; (80060d4 <bekle+0x134>)
 8006062:	f003 fddb 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <bekle+0xe0>
 800606c:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <bekle+0x124>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	4b15      	ldr	r3, [pc, #84]	; (80060c8 <bekle+0x128>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d0ef      	beq.n	8006058 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006078:	e002      	b.n	8006080 <bekle+0xe0>
    	butonKontrol = 1;
 800607a:	4b14      	ldr	r3, [pc, #80]	; (80060cc <bekle+0x12c>)
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006084:	4813      	ldr	r0, [pc, #76]	; (80060d4 <bekle+0x134>)
 8006086:	f003 fdc9 	bl	8009c1c <HAL_GPIO_ReadPin>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <bekle+0x104>
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <bekle+0x124>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <bekle+0x128>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d0ee      	beq.n	800607a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800609c:	e002      	b.n	80060a4 <bekle+0x104>
    	butonKontrol = 1;
 800609e:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <bekle+0x12c>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060a8:	480a      	ldr	r0, [pc, #40]	; (80060d4 <bekle+0x134>)
 80060aa:	f003 fdb7 	bl	8009c1c <HAL_GPIO_ReadPin>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d105      	bne.n	80060c0 <bekle+0x120>
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <bekle+0x124>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <bekle+0x128>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d0ee      	beq.n	800609e <bekle+0xfe>
    }

}
 80060c0:	bf00      	nop
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	20000bd4 	.word	0x20000bd4
 80060c8:	20000bdc 	.word	0x20000bdc
 80060cc:	20000c78 	.word	0x20000c78
 80060d0:	40010800 	.word	0x40010800
 80060d4:	40011000 	.word	0x40011000

080060d8 <i2cTest>:

void i2cTest() {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80060de:	463b      	mov	r3, r7
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80060ea:	4b50      	ldr	r3, [pc, #320]	; (800622c <i2cTest+0x154>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	4b4e      	ldr	r3, [pc, #312]	; (800622c <i2cTest+0x154>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80060fa:	484c      	ldr	r0, [pc, #304]	; (800622c <i2cTest+0x154>)
 80060fc:	f003 ff1a 	bl	8009f34 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006100:	23c0      	movs	r3, #192	; 0xc0
 8006102:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8006104:	2311      	movs	r3, #17
 8006106:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006108:	2301      	movs	r3, #1
 800610a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800610c:	2303      	movs	r3, #3
 800610e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006110:	463b      	mov	r3, r7
 8006112:	4619      	mov	r1, r3
 8006114:	4846      	ldr	r0, [pc, #280]	; (8006230 <i2cTest+0x158>)
 8006116:	f003 fb21 	bl	800975c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800611a:	2201      	movs	r2, #1
 800611c:	2140      	movs	r1, #64	; 0x40
 800611e:	4844      	ldr	r0, [pc, #272]	; (8006230 <i2cTest+0x158>)
 8006120:	f003 fd93 	bl	8009c4a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006124:	2201      	movs	r2, #1
 8006126:	2180      	movs	r1, #128	; 0x80
 8006128:	4841      	ldr	r0, [pc, #260]	; (8006230 <i2cTest+0x158>)
 800612a:	f003 fd8e 	bl	8009c4a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800612e:	200a      	movs	r0, #10
 8006130:	f002 ffa4 	bl	800907c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006134:	bf00      	nop
 8006136:	2140      	movs	r1, #64	; 0x40
 8006138:	483d      	ldr	r0, [pc, #244]	; (8006230 <i2cTest+0x158>)
 800613a:	f003 fd6f 	bl	8009c1c <HAL_GPIO_ReadPin>
 800613e:	4603      	mov	r3, r0
 8006140:	2b01      	cmp	r3, #1
 8006142:	d006      	beq.n	8006152 <i2cTest+0x7a>
 8006144:	2180      	movs	r1, #128	; 0x80
 8006146:	483a      	ldr	r0, [pc, #232]	; (8006230 <i2cTest+0x158>)
 8006148:	f003 fd68 	bl	8009c1c <HAL_GPIO_ReadPin>
 800614c:	4603      	mov	r3, r0
 800614e:	2b01      	cmp	r3, #1
 8006150:	d1f1      	bne.n	8006136 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8006152:	2200      	movs	r2, #0
 8006154:	2180      	movs	r1, #128	; 0x80
 8006156:	4836      	ldr	r0, [pc, #216]	; (8006230 <i2cTest+0x158>)
 8006158:	f003 fd77 	bl	8009c4a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800615c:	200a      	movs	r0, #10
 800615e:	f002 ff8d 	bl	800907c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8006162:	bf00      	nop
 8006164:	2180      	movs	r1, #128	; 0x80
 8006166:	4832      	ldr	r0, [pc, #200]	; (8006230 <i2cTest+0x158>)
 8006168:	f003 fd58 	bl	8009c1c <HAL_GPIO_ReadPin>
 800616c:	4603      	mov	r3, r0
 800616e:	2b01      	cmp	r3, #1
 8006170:	d0f8      	beq.n	8006164 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8006172:	2200      	movs	r2, #0
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	482e      	ldr	r0, [pc, #184]	; (8006230 <i2cTest+0x158>)
 8006178:	f003 fd67 	bl	8009c4a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800617c:	200a      	movs	r0, #10
 800617e:	f002 ff7d 	bl	800907c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8006182:	bf00      	nop
 8006184:	2140      	movs	r1, #64	; 0x40
 8006186:	482a      	ldr	r0, [pc, #168]	; (8006230 <i2cTest+0x158>)
 8006188:	f003 fd48 	bl	8009c1c <HAL_GPIO_ReadPin>
 800618c:	4603      	mov	r3, r0
 800618e:	2b01      	cmp	r3, #1
 8006190:	d0f8      	beq.n	8006184 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006192:	2201      	movs	r2, #1
 8006194:	2140      	movs	r1, #64	; 0x40
 8006196:	4826      	ldr	r0, [pc, #152]	; (8006230 <i2cTest+0x158>)
 8006198:	f003 fd57 	bl	8009c4a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800619c:	200a      	movs	r0, #10
 800619e:	f002 ff6d 	bl	800907c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80061a2:	bf00      	nop
 80061a4:	2140      	movs	r1, #64	; 0x40
 80061a6:	4822      	ldr	r0, [pc, #136]	; (8006230 <i2cTest+0x158>)
 80061a8:	f003 fd38 	bl	8009c1c <HAL_GPIO_ReadPin>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d1f8      	bne.n	80061a4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80061b2:	2201      	movs	r2, #1
 80061b4:	2180      	movs	r1, #128	; 0x80
 80061b6:	481e      	ldr	r0, [pc, #120]	; (8006230 <i2cTest+0x158>)
 80061b8:	f003 fd47 	bl	8009c4a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80061bc:	200a      	movs	r0, #10
 80061be:	f002 ff5d 	bl	800907c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80061c2:	bf00      	nop
 80061c4:	2180      	movs	r1, #128	; 0x80
 80061c6:	481a      	ldr	r0, [pc, #104]	; (8006230 <i2cTest+0x158>)
 80061c8:	f003 fd28 	bl	8009c1c <HAL_GPIO_ReadPin>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d1f8      	bne.n	80061c4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061d2:	23c0      	movs	r3, #192	; 0xc0
 80061d4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80061d6:	2312      	movs	r3, #18
 80061d8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80061da:	2301      	movs	r3, #1
 80061dc:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80061de:	2303      	movs	r3, #3
 80061e0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80061e2:	463b      	mov	r3, r7
 80061e4:	4619      	mov	r1, r3
 80061e6:	4812      	ldr	r0, [pc, #72]	; (8006230 <i2cTest+0x158>)
 80061e8:	f003 fab8 	bl	800975c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80061ec:	4b0f      	ldr	r3, [pc, #60]	; (800622c <i2cTest+0x154>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b0e      	ldr	r3, [pc, #56]	; (800622c <i2cTest+0x154>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061fa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80061fc:	4b0b      	ldr	r3, [pc, #44]	; (800622c <i2cTest+0x154>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b0a      	ldr	r3, [pc, #40]	; (800622c <i2cTest+0x154>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800620a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <i2cTest+0x154>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4b06      	ldr	r3, [pc, #24]	; (800622c <i2cTest+0x154>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 800621c:	4803      	ldr	r0, [pc, #12]	; (800622c <i2cTest+0x154>)
 800621e:	f003 fd45 	bl	8009cac <HAL_I2C_Init>
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000e08 	.word	0x20000e08
 8006230:	40010c00 	.word	0x40010c00

08006234 <checkLCDBacklight>:

void checkLCDBacklight() {
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006238:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <checkLCDBacklight+0x34>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <checkLCDBacklight+0x38>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <checkLCDBacklight+0x3c>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	4619      	mov	r1, r3
 8006248:	460b      	mov	r3, r1
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	429a      	cmp	r2, r3
 8006252:	d303      	bcc.n	800625c <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8006254:	2000      	movs	r0, #0
 8006256:	f7fa fa53 	bl	8000700 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 800625a:	e002      	b.n	8006262 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 800625c:	2001      	movs	r0, #1
 800625e:	f7fa fa4f 	bl	8000700 <lcd_backlight>
}
 8006262:	bf00      	nop
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000bd4 	.word	0x20000bd4
 800626c:	20000bf0 	.word	0x20000bf0
 8006270:	20000940 	.word	0x20000940

08006274 <checkBasincSalteri>:

void checkBasincSalteri() {
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006278:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <checkBasincSalteri+0x54>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <checkBasincSalteri+0x12>
		basincVar=1;
 8006280:	4b12      	ldr	r3, [pc, #72]	; (80062cc <checkBasincSalteri+0x58>)
 8006282:	2201      	movs	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8006286:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <checkBasincSalteri+0x54>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d119      	bne.n	80062c2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800628e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006292:	480f      	ldr	r0, [pc, #60]	; (80062d0 <checkBasincSalteri+0x5c>)
 8006294:	f003 fcc2 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 800629e:	4b0d      	ldr	r3, [pc, #52]	; (80062d4 <checkBasincSalteri+0x60>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <checkBasincSalteri+0x64>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d90a      	bls.n	80062c2 <checkBasincSalteri+0x4e>
				basincVar=1;
 80062ac:	4b07      	ldr	r3, [pc, #28]	; (80062cc <checkBasincSalteri+0x58>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80062b2:	e006      	b.n	80062c2 <checkBasincSalteri+0x4e>
			timer5=millis;
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <checkBasincSalteri+0x60>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a07      	ldr	r2, [pc, #28]	; (80062d8 <checkBasincSalteri+0x64>)
 80062ba:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80062bc:	4b03      	ldr	r3, [pc, #12]	; (80062cc <checkBasincSalteri+0x58>)
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
}
 80062c2:	bf00      	nop
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000c50 	.word	0x20000c50
 80062cc:	20000c4c 	.word	0x20000c4c
 80062d0:	40011000 	.word	0x40011000
 80062d4:	20000bd4 	.word	0x20000bd4
 80062d8:	20000bec 	.word	0x20000bec

080062dc <checkBasGonder>:

void checkBasGonder() {
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80062e0:	4b1b      	ldr	r3, [pc, #108]	; (8006350 <checkBasGonder+0x74>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d10b      	bne.n	8006300 <checkBasGonder+0x24>
 80062e8:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <checkBasGonder+0x78>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d007      	beq.n	8006300 <checkBasGonder+0x24>
 80062f0:	4b19      	ldr	r3, [pc, #100]	; (8006358 <checkBasGonder+0x7c>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80062f8:	4b18      	ldr	r3, [pc, #96]	; (800635c <checkBasGonder+0x80>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	e009      	b.n	8006314 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006300:	4b14      	ldr	r3, [pc, #80]	; (8006354 <checkBasGonder+0x78>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f083 0301 	eor.w	r3, r3, #1
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <checkBasGonder+0x80>)
 8006310:	2200      	movs	r2, #0
 8006312:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006314:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <checkBasGonder+0x74>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d10b      	bne.n	8006334 <checkBasGonder+0x58>
 800631c:	4b10      	ldr	r3, [pc, #64]	; (8006360 <checkBasGonder+0x84>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d007      	beq.n	8006334 <checkBasGonder+0x58>
 8006324:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <checkBasGonder+0x7c>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d103      	bne.n	8006334 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 800632c:	4b0d      	ldr	r3, [pc, #52]	; (8006364 <checkBasGonder+0x88>)
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8006332:	e009      	b.n	8006348 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006334:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <checkBasGonder+0x84>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	f083 0301 	eor.w	r3, r3, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <checkBasGonder+0x88>)
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]
}
 8006348:	bf00      	nop
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr
 8006350:	20000c4a 	.word	0x20000c4a
 8006354:	20000c7e 	.word	0x20000c7e
 8006358:	20000c58 	.word	0x20000c58
 800635c:	20000c85 	.word	0x20000c85
 8006360:	20000c81 	.word	0x20000c81
 8006364:	20000c86 	.word	0x20000c86

08006368 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800636c:	4b24      	ldr	r3, [pc, #144]	; (8006400 <checkKapiSecimleri+0x98>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8006374:	4b23      	ldr	r3, [pc, #140]	; (8006404 <checkKapiSecimleri+0x9c>)
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800637a:	4b21      	ldr	r3, [pc, #132]	; (8006400 <checkKapiSecimleri+0x98>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d10e      	bne.n	80063a0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006382:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006386:	4820      	ldr	r0, [pc, #128]	; (8006408 <checkKapiSecimleri+0xa0>)
 8006388:	f003 fc48 	bl	8009c1c <HAL_GPIO_ReadPin>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d103      	bne.n	800639a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8006392:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <checkKapiSecimleri+0x9c>)
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	e002      	b.n	80063a0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800639a:	4b1a      	ldr	r3, [pc, #104]	; (8006404 <checkKapiSecimleri+0x9c>)
 800639c:	2200      	movs	r2, #0
 800639e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80063a0:	4b17      	ldr	r3, [pc, #92]	; (8006400 <checkKapiSecimleri+0x98>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d10e      	bne.n	80063c6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80063a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063ac:	4816      	ldr	r0, [pc, #88]	; (8006408 <checkKapiSecimleri+0xa0>)
 80063ae:	f003 fc35 	bl	8009c1c <HAL_GPIO_ReadPin>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d103      	bne.n	80063c0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80063b8:	4b12      	ldr	r3, [pc, #72]	; (8006404 <checkKapiSecimleri+0x9c>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	e002      	b.n	80063c6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80063c0:	4b10      	ldr	r3, [pc, #64]	; (8006404 <checkKapiSecimleri+0x9c>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80063c6:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <checkKapiSecimleri+0x98>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d116      	bne.n	80063fc <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80063ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063d2:	480d      	ldr	r0, [pc, #52]	; (8006408 <checkKapiSecimleri+0xa0>)
 80063d4:	f003 fc22 	bl	8009c1c <HAL_GPIO_ReadPin>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10b      	bne.n	80063f6 <checkKapiSecimleri+0x8e>
 80063de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063e2:	4809      	ldr	r0, [pc, #36]	; (8006408 <checkKapiSecimleri+0xa0>)
 80063e4:	f003 fc1a 	bl	8009c1c <HAL_GPIO_ReadPin>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d103      	bne.n	80063f6 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <checkKapiSecimleri+0x9c>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80063f4:	e002      	b.n	80063fc <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80063f6:	4b03      	ldr	r3, [pc, #12]	; (8006404 <checkKapiSecimleri+0x9c>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	701a      	strb	r2, [r3, #0]
}
 80063fc:	bf00      	nop
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000c51 	.word	0x20000c51
 8006404:	20000c9c 	.word	0x20000c9c
 8006408:	40010800 	.word	0x40010800

0800640c <checkAktifCalisma>:

void checkAktifCalisma() {
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006410:	4b62      	ldr	r3, [pc, #392]	; (800659c <checkAktifCalisma+0x190>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f041 8332 	bne.w	8007a7e <checkAktifCalisma+0x1672>
 800641a:	4b61      	ldr	r3, [pc, #388]	; (80065a0 <checkAktifCalisma+0x194>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f041 832d 	bne.w	8007a7e <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8006424:	4b5f      	ldr	r3, [pc, #380]	; (80065a4 <checkAktifCalisma+0x198>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d11a      	bne.n	8006462 <checkAktifCalisma+0x56>
 800642c:	4b5e      	ldr	r3, [pc, #376]	; (80065a8 <checkAktifCalisma+0x19c>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d116      	bne.n	8006462 <checkAktifCalisma+0x56>
 8006434:	4b5d      	ldr	r3, [pc, #372]	; (80065ac <checkAktifCalisma+0x1a0>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <checkAktifCalisma+0x46>
 800643c:	4b5c      	ldr	r3, [pc, #368]	; (80065b0 <checkAktifCalisma+0x1a4>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	f083 0301 	eor.w	r3, r3, #1
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <checkAktifCalisma+0x46>
 800644a:	4b5a      	ldr	r3, [pc, #360]	; (80065b4 <checkAktifCalisma+0x1a8>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d007      	beq.n	8006462 <checkAktifCalisma+0x56>
 8006452:	4b59      	ldr	r3, [pc, #356]	; (80065b8 <checkAktifCalisma+0x1ac>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d018      	beq.n	800648c <checkAktifCalisma+0x80>
 800645a:	4b58      	ldr	r3, [pc, #352]	; (80065bc <checkAktifCalisma+0x1b0>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d114      	bne.n	800648c <checkAktifCalisma+0x80>
 8006462:	4b57      	ldr	r3, [pc, #348]	; (80065c0 <checkAktifCalisma+0x1b4>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d010      	beq.n	800648c <checkAktifCalisma+0x80>
 800646a:	4b56      	ldr	r3, [pc, #344]	; (80065c4 <checkAktifCalisma+0x1b8>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006472:	2201      	movs	r2, #1
 8006474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006478:	4853      	ldr	r0, [pc, #332]	; (80065c8 <checkAktifCalisma+0x1bc>)
 800647a:	f003 fbe6 	bl	8009c4a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 800647e:	4b53      	ldr	r3, [pc, #332]	; (80065cc <checkAktifCalisma+0x1c0>)
 8006480:	2201      	movs	r2, #1
 8006482:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8006484:	4b52      	ldr	r3, [pc, #328]	; (80065d0 <checkAktifCalisma+0x1c4>)
 8006486:	2201      	movs	r2, #1
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e008      	b.n	800649e <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800648c:	2200      	movs	r2, #0
 800648e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006492:	484d      	ldr	r0, [pc, #308]	; (80065c8 <checkAktifCalisma+0x1bc>)
 8006494:	f003 fbd9 	bl	8009c4a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006498:	4b4c      	ldr	r3, [pc, #304]	; (80065cc <checkAktifCalisma+0x1c0>)
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 800649e:	4b40      	ldr	r3, [pc, #256]	; (80065a0 <checkAktifCalisma+0x194>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d160      	bne.n	8006568 <checkAktifCalisma+0x15c>
 80064a6:	4b46      	ldr	r3, [pc, #280]	; (80065c0 <checkAktifCalisma+0x1b4>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d05c      	beq.n	8006568 <checkAktifCalisma+0x15c>
 80064ae:	4b45      	ldr	r3, [pc, #276]	; (80065c4 <checkAktifCalisma+0x1b8>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d058      	beq.n	8006568 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80064b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064ba:	4843      	ldr	r0, [pc, #268]	; (80065c8 <checkAktifCalisma+0x1bc>)
 80064bc:	f003 fbae 	bl	8009c1c <HAL_GPIO_ReadPin>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <checkAktifCalisma+0xc2>
 80064c6:	4b43      	ldr	r3, [pc, #268]	; (80065d4 <checkAktifCalisma+0x1c8>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d04c      	beq.n	8006568 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80064ce:	2102      	movs	r1, #2
 80064d0:	4841      	ldr	r0, [pc, #260]	; (80065d8 <checkAktifCalisma+0x1cc>)
 80064d2:	f003 fba3 	bl	8009c1c <HAL_GPIO_ReadPin>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d145      	bne.n	8006568 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80064dc:	4b3f      	ldr	r3, [pc, #252]	; (80065dc <checkAktifCalisma+0x1d0>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d041      	beq.n	8006568 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80064e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064e8:	4837      	ldr	r0, [pc, #220]	; (80065c8 <checkAktifCalisma+0x1bc>)
 80064ea:	f003 fb97 	bl	8009c1c <HAL_GPIO_ReadPin>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d10e      	bne.n	8006512 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80064f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064f8:	4833      	ldr	r0, [pc, #204]	; (80065c8 <checkAktifCalisma+0x1bc>)
 80064fa:	f003 fb8f 	bl	8009c1c <HAL_GPIO_ReadPin>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b01      	cmp	r3, #1
 8006502:	d106      	bne.n	8006512 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006504:	2140      	movs	r1, #64	; 0x40
 8006506:	4834      	ldr	r0, [pc, #208]	; (80065d8 <checkAktifCalisma+0x1cc>)
 8006508:	f003 fb88 	bl	8009c1c <HAL_GPIO_ReadPin>
 800650c:	4603      	mov	r3, r0
 800650e:	2b01      	cmp	r3, #1
 8006510:	d003      	beq.n	800651a <checkAktifCalisma+0x10e>
 8006512:	4b24      	ldr	r3, [pc, #144]	; (80065a4 <checkAktifCalisma+0x198>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d026      	beq.n	8006568 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800651a:	4b24      	ldr	r3, [pc, #144]	; (80065ac <checkAktifCalisma+0x1a0>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	f083 0301 	eor.w	r3, r3, #1
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01f      	beq.n	8006568 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006528:	4b1f      	ldr	r3, [pc, #124]	; (80065a8 <checkAktifCalisma+0x19c>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f083 0301 	eor.w	r3, r3, #1
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d018      	beq.n	8006568 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8006536:	4b20      	ldr	r3, [pc, #128]	; (80065b8 <checkAktifCalisma+0x1ac>)
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f083 0301 	eor.w	r3, r3, #1
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d011      	beq.n	8006568 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006544:	4b26      	ldr	r3, [pc, #152]	; (80065e0 <checkAktifCalisma+0x1d4>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	f083 0301 	eor.w	r3, r3, #1
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8006552:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <checkAktifCalisma+0x1d8>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	f083 0301 	eor.w	r3, r3, #1
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006560:	4b10      	ldr	r3, [pc, #64]	; (80065a4 <checkAktifCalisma+0x198>)
 8006562:	2201      	movs	r2, #1
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	e002      	b.n	800656e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006568:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <checkAktifCalisma+0x198>)
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <checkAktifCalisma+0x198>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d03a      	beq.n	80065ec <checkAktifCalisma+0x1e0>
 8006576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800657a:	4817      	ldr	r0, [pc, #92]	; (80065d8 <checkAktifCalisma+0x1cc>)
 800657c:	f003 fb4e 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006580:	4603      	mov	r3, r0
 8006582:	2b01      	cmp	r3, #1
 8006584:	d132      	bne.n	80065ec <checkAktifCalisma+0x1e0>
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <checkAktifCalisma+0x1dc>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d02e      	beq.n	80065ec <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800658e:	2201      	movs	r2, #1
 8006590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006594:	480c      	ldr	r0, [pc, #48]	; (80065c8 <checkAktifCalisma+0x1bc>)
 8006596:	f003 fb58 	bl	8009c4a <HAL_GPIO_WritePin>
 800659a:	e02d      	b.n	80065f8 <checkAktifCalisma+0x1ec>
 800659c:	20000c67 	.word	0x20000c67
 80065a0:	20000c66 	.word	0x20000c66
 80065a4:	20000c7e 	.word	0x20000c7e
 80065a8:	20000c7f 	.word	0x20000c7f
 80065ac:	20000c81 	.word	0x20000c81
 80065b0:	20000c79 	.word	0x20000c79
 80065b4:	20000c5c 	.word	0x20000c5c
 80065b8:	20000c80 	.word	0x20000c80
 80065bc:	20000c5b 	.word	0x20000c5b
 80065c0:	20000c9b 	.word	0x20000c9b
 80065c4:	20000c9c 	.word	0x20000c9c
 80065c8:	40010c00 	.word	0x40010c00
 80065cc:	20000c9d 	.word	0x20000c9d
 80065d0:	20000c88 	.word	0x20000c88
 80065d4:	20000c85 	.word	0x20000c85
 80065d8:	40011000 	.word	0x40011000
 80065dc:	20000c4c 	.word	0x20000c4c
 80065e0:	20000c83 	.word	0x20000c83
 80065e4:	20000c84 	.word	0x20000c84
 80065e8:	20000c57 	.word	0x20000c57
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80065ec:	2200      	movs	r2, #0
 80065ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065f2:	4860      	ldr	r0, [pc, #384]	; (8006774 <checkAktifCalisma+0x368>)
 80065f4:	f003 fb29 	bl	8009c4a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80065f8:	4b5f      	ldr	r3, [pc, #380]	; (8006778 <checkAktifCalisma+0x36c>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d013      	beq.n	8006628 <checkAktifCalisma+0x21c>
 8006600:	4b5e      	ldr	r3, [pc, #376]	; (800677c <checkAktifCalisma+0x370>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d007      	beq.n	8006618 <checkAktifCalisma+0x20c>
 8006608:	4b5c      	ldr	r3, [pc, #368]	; (800677c <checkAktifCalisma+0x370>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d003      	beq.n	8006618 <checkAktifCalisma+0x20c>
 8006610:	4b5b      	ldr	r3, [pc, #364]	; (8006780 <checkAktifCalisma+0x374>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d107      	bne.n	8006628 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006618:	2201      	movs	r2, #1
 800661a:	2104      	movs	r1, #4
 800661c:	4855      	ldr	r0, [pc, #340]	; (8006774 <checkAktifCalisma+0x368>)
 800661e:	f003 fb14 	bl	8009c4a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8006622:	4b58      	ldr	r3, [pc, #352]	; (8006784 <checkAktifCalisma+0x378>)
 8006624:	2201      	movs	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006628:	4b56      	ldr	r3, [pc, #344]	; (8006784 <checkAktifCalisma+0x378>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d02f      	beq.n	8006690 <checkAktifCalisma+0x284>
 8006630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006634:	484f      	ldr	r0, [pc, #316]	; (8006774 <checkAktifCalisma+0x368>)
 8006636:	f003 faf1 	bl	8009c1c <HAL_GPIO_ReadPin>
 800663a:	4603      	mov	r3, r0
 800663c:	2b01      	cmp	r3, #1
 800663e:	d106      	bne.n	800664e <checkAktifCalisma+0x242>
 8006640:	4b51      	ldr	r3, [pc, #324]	; (8006788 <checkAktifCalisma+0x37c>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f083 0301 	eor.w	r3, r3, #1
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <checkAktifCalisma+0x250>
 800664e:	2102      	movs	r1, #2
 8006650:	484e      	ldr	r0, [pc, #312]	; (800678c <checkAktifCalisma+0x380>)
 8006652:	f003 fae3 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006656:	4603      	mov	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	d119      	bne.n	8006690 <checkAktifCalisma+0x284>
 800665c:	4b4c      	ldr	r3, [pc, #304]	; (8006790 <checkAktifCalisma+0x384>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d015      	beq.n	8006690 <checkAktifCalisma+0x284>
 8006664:	4b4b      	ldr	r3, [pc, #300]	; (8006794 <checkAktifCalisma+0x388>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d011      	beq.n	8006690 <checkAktifCalisma+0x284>
 800666c:	4b4a      	ldr	r3, [pc, #296]	; (8006798 <checkAktifCalisma+0x38c>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00d      	beq.n	8006690 <checkAktifCalisma+0x284>
 8006674:	4b49      	ldr	r3, [pc, #292]	; (800679c <checkAktifCalisma+0x390>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	f083 0301 	eor.w	r3, r3, #1
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d006      	beq.n	8006690 <checkAktifCalisma+0x284>
			timer2=millis;
 8006682:	4b47      	ldr	r3, [pc, #284]	; (80067a0 <checkAktifCalisma+0x394>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a47      	ldr	r2, [pc, #284]	; (80067a4 <checkAktifCalisma+0x398>)
 8006688:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800668a:	4b44      	ldr	r3, [pc, #272]	; (800679c <checkAktifCalisma+0x390>)
 800668c:	2201      	movs	r2, #1
 800668e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006690:	4b43      	ldr	r3, [pc, #268]	; (80067a0 <checkAktifCalisma+0x394>)
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	4b43      	ldr	r3, [pc, #268]	; (80067a4 <checkAktifCalisma+0x398>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	4a43      	ldr	r2, [pc, #268]	; (80067a8 <checkAktifCalisma+0x39c>)
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	4293      	cmp	r3, r2
 80066a0:	d303      	bcc.n	80066aa <checkAktifCalisma+0x29e>
 80066a2:	4b3e      	ldr	r3, [pc, #248]	; (800679c <checkAktifCalisma+0x390>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d111      	bne.n	80066ce <checkAktifCalisma+0x2c2>
 80066aa:	4b39      	ldr	r3, [pc, #228]	; (8006790 <checkAktifCalisma+0x384>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	f083 0301 	eor.w	r3, r3, #1
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <checkAktifCalisma+0x2c2>
 80066b8:	4b36      	ldr	r3, [pc, #216]	; (8006794 <checkAktifCalisma+0x388>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	f083 0301 	eor.w	r3, r3, #1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <checkAktifCalisma+0x2c2>
 80066c6:	4b34      	ldr	r3, [pc, #208]	; (8006798 <checkAktifCalisma+0x38c>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80066ce:	2200      	movs	r2, #0
 80066d0:	2104      	movs	r1, #4
 80066d2:	4828      	ldr	r0, [pc, #160]	; (8006774 <checkAktifCalisma+0x368>)
 80066d4:	f003 fab9 	bl	8009c4a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80066d8:	4b2a      	ldr	r3, [pc, #168]	; (8006784 <checkAktifCalisma+0x378>)
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80066de:	4b2f      	ldr	r3, [pc, #188]	; (800679c <checkAktifCalisma+0x390>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80066e4:	4b31      	ldr	r3, [pc, #196]	; (80067ac <checkAktifCalisma+0x3a0>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d102      	bne.n	80066f2 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80066ec:	4b30      	ldr	r3, [pc, #192]	; (80067b0 <checkAktifCalisma+0x3a4>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80066f2:	4b2e      	ldr	r3, [pc, #184]	; (80067ac <checkAktifCalisma+0x3a0>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d116      	bne.n	8006728 <checkAktifCalisma+0x31c>
 80066fa:	4b2e      	ldr	r3, [pc, #184]	; (80067b4 <checkAktifCalisma+0x3a8>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d112      	bne.n	8006728 <checkAktifCalisma+0x31c>
 8006702:	2101      	movs	r1, #1
 8006704:	4821      	ldr	r0, [pc, #132]	; (800678c <checkAktifCalisma+0x380>)
 8006706:	f003 fa89 	bl	8009c1c <HAL_GPIO_ReadPin>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <checkAktifCalisma+0x31c>
 8006710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006714:	4817      	ldr	r0, [pc, #92]	; (8006774 <checkAktifCalisma+0x368>)
 8006716:	f003 fa81 	bl	8009c1c <HAL_GPIO_ReadPin>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006720:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <checkAktifCalisma+0x3a4>)
 8006722:	2201      	movs	r2, #1
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	e011      	b.n	800674c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006728:	4b20      	ldr	r3, [pc, #128]	; (80067ac <checkAktifCalisma+0x3a0>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10d      	bne.n	800674c <checkAktifCalisma+0x340>
 8006730:	2101      	movs	r1, #1
 8006732:	4816      	ldr	r0, [pc, #88]	; (800678c <checkAktifCalisma+0x380>)
 8006734:	f003 fa72 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006738:	4603      	mov	r3, r0
 800673a:	2b01      	cmp	r3, #1
 800673c:	d106      	bne.n	800674c <checkAktifCalisma+0x340>
 800673e:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <checkAktifCalisma+0x3a8>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d102      	bne.n	800674c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006746:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <checkAktifCalisma+0x3a4>)
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800674c:	4b17      	ldr	r3, [pc, #92]	; (80067ac <checkAktifCalisma+0x3a0>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d134      	bne.n	80067be <checkAktifCalisma+0x3b2>
 8006754:	4b17      	ldr	r3, [pc, #92]	; (80067b4 <checkAktifCalisma+0x3a8>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d130      	bne.n	80067be <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800675c:	2101      	movs	r1, #1
 800675e:	480b      	ldr	r0, [pc, #44]	; (800678c <checkAktifCalisma+0x380>)
 8006760:	f003 fa5c 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d126      	bne.n	80067b8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800676a:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <checkAktifCalisma+0x3a4>)
 800676c:	2201      	movs	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	e025      	b.n	80067be <checkAktifCalisma+0x3b2>
 8006772:	bf00      	nop
 8006774:	40010c00 	.word	0x40010c00
 8006778:	20000c7e 	.word	0x20000c7e
 800677c:	20000c58 	.word	0x20000c58
 8006780:	20000c5c 	.word	0x20000c5c
 8006784:	20000c82 	.word	0x20000c82
 8006788:	20000c85 	.word	0x20000c85
 800678c:	40011000 	.word	0x40011000
 8006790:	20000c9b 	.word	0x20000c9b
 8006794:	20000c9c 	.word	0x20000c9c
 8006798:	20000c4c 	.word	0x20000c4c
 800679c:	20000c7a 	.word	0x20000c7a
 80067a0:	20000bd4 	.word	0x20000bd4
 80067a4:	20000be0 	.word	0x20000be0
 80067a8:	20000c5d 	.word	0x20000c5d
 80067ac:	20000c4d 	.word	0x20000c4d
 80067b0:	20000ca0 	.word	0x20000ca0
 80067b4:	20000c4a 	.word	0x20000c4a
			} else {
				cerceveVar=0;
 80067b8:	4b7f      	ldr	r3, [pc, #508]	; (80069b8 <checkAktifCalisma+0x5ac>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80067be:	4b7f      	ldr	r3, [pc, #508]	; (80069bc <checkAktifCalisma+0x5b0>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d17c      	bne.n	80068c0 <checkAktifCalisma+0x4b4>
 80067c6:	4b7e      	ldr	r3, [pc, #504]	; (80069c0 <checkAktifCalisma+0x5b4>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d078      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
 80067ce:	4b7d      	ldr	r3, [pc, #500]	; (80069c4 <checkAktifCalisma+0x5b8>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d074      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80067d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067da:	487b      	ldr	r0, [pc, #492]	; (80069c8 <checkAktifCalisma+0x5bc>)
 80067dc:	f003 fa1e 	bl	8009c1c <HAL_GPIO_ReadPin>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <checkAktifCalisma+0x3e2>
 80067e6:	4b79      	ldr	r3, [pc, #484]	; (80069cc <checkAktifCalisma+0x5c0>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d068      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80067ee:	4b72      	ldr	r3, [pc, #456]	; (80069b8 <checkAktifCalisma+0x5ac>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d064      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
 80067f6:	4b76      	ldr	r3, [pc, #472]	; (80069d0 <checkAktifCalisma+0x5c4>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	f083 0301 	eor.w	r3, r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d05d      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006804:	2104      	movs	r1, #4
 8006806:	4873      	ldr	r0, [pc, #460]	; (80069d4 <checkAktifCalisma+0x5c8>)
 8006808:	f003 fa08 	bl	8009c1c <HAL_GPIO_ReadPin>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <checkAktifCalisma+0x40e>
 8006812:	4b71      	ldr	r3, [pc, #452]	; (80069d8 <checkAktifCalisma+0x5cc>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d152      	bne.n	80068c0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800681a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800681e:	486a      	ldr	r0, [pc, #424]	; (80069c8 <checkAktifCalisma+0x5bc>)
 8006820:	f003 f9fc 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006824:	4603      	mov	r3, r0
 8006826:	2b01      	cmp	r3, #1
 8006828:	d10e      	bne.n	8006848 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800682a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800682e:	4866      	ldr	r0, [pc, #408]	; (80069c8 <checkAktifCalisma+0x5bc>)
 8006830:	f003 f9f4 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006834:	4603      	mov	r3, r0
 8006836:	2b01      	cmp	r3, #1
 8006838:	d106      	bne.n	8006848 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800683a:	2140      	movs	r1, #64	; 0x40
 800683c:	4865      	ldr	r0, [pc, #404]	; (80069d4 <checkAktifCalisma+0x5c8>)
 800683e:	f003 f9ed 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006842:	4603      	mov	r3, r0
 8006844:	2b01      	cmp	r3, #1
 8006846:	d003      	beq.n	8006850 <checkAktifCalisma+0x444>
 8006848:	4b64      	ldr	r3, [pc, #400]	; (80069dc <checkAktifCalisma+0x5d0>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d037      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006850:	4b63      	ldr	r3, [pc, #396]	; (80069e0 <checkAktifCalisma+0x5d4>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f083 0301 	eor.w	r3, r3, #1
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d030      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800685e:	4b61      	ldr	r3, [pc, #388]	; (80069e4 <checkAktifCalisma+0x5d8>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f083 0301 	eor.w	r3, r3, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d029      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800686c:	4b5e      	ldr	r3, [pc, #376]	; (80069e8 <checkAktifCalisma+0x5dc>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f083 0301 	eor.w	r3, r3, #1
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d022      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800687a:	4b5c      	ldr	r3, [pc, #368]	; (80069ec <checkAktifCalisma+0x5e0>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f083 0301 	eor.w	r3, r3, #1
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d01b      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006888:	4b59      	ldr	r3, [pc, #356]	; (80069f0 <checkAktifCalisma+0x5e4>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f083 0301 	eor.w	r3, r3, #1
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d014      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006896:	4b57      	ldr	r3, [pc, #348]	; (80069f4 <checkAktifCalisma+0x5e8>)
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	f083 0301 	eor.w	r3, r3, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80068a4:	2201      	movs	r2, #1
 80068a6:	2102      	movs	r1, #2
 80068a8:	4847      	ldr	r0, [pc, #284]	; (80069c8 <checkAktifCalisma+0x5bc>)
 80068aa:	f003 f9ce 	bl	8009c4a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80068ae:	4b4b      	ldr	r3, [pc, #300]	; (80069dc <checkAktifCalisma+0x5d0>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80068b4:	4b50      	ldr	r3, [pc, #320]	; (80069f8 <checkAktifCalisma+0x5ec>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80068ba:	4b50      	ldr	r3, [pc, #320]	; (80069fc <checkAktifCalisma+0x5f0>)
 80068bc:	2201      	movs	r2, #1
 80068be:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80068c0:	4b46      	ldr	r3, [pc, #280]	; (80069dc <checkAktifCalisma+0x5d0>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d033      	beq.n	8006930 <checkAktifCalisma+0x524>
 80068c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068cc:	483e      	ldr	r0, [pc, #248]	; (80069c8 <checkAktifCalisma+0x5bc>)
 80068ce:	f003 f9a5 	bl	8009c1c <HAL_GPIO_ReadPin>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d106      	bne.n	80068e6 <checkAktifCalisma+0x4da>
 80068d8:	4b3c      	ldr	r3, [pc, #240]	; (80069cc <checkAktifCalisma+0x5c0>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	f083 0301 	eor.w	r3, r3, #1
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10a      	bne.n	80068fc <checkAktifCalisma+0x4f0>
 80068e6:	2104      	movs	r1, #4
 80068e8:	483a      	ldr	r0, [pc, #232]	; (80069d4 <checkAktifCalisma+0x5c8>)
 80068ea:	f003 f997 	bl	8009c1c <HAL_GPIO_ReadPin>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d11d      	bne.n	8006930 <checkAktifCalisma+0x524>
 80068f4:	4b38      	ldr	r3, [pc, #224]	; (80069d8 <checkAktifCalisma+0x5cc>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d019      	beq.n	8006930 <checkAktifCalisma+0x524>
 80068fc:	4b30      	ldr	r3, [pc, #192]	; (80069c0 <checkAktifCalisma+0x5b4>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d015      	beq.n	8006930 <checkAktifCalisma+0x524>
 8006904:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <checkAktifCalisma+0x5b8>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d011      	beq.n	8006930 <checkAktifCalisma+0x524>
 800690c:	4b2a      	ldr	r3, [pc, #168]	; (80069b8 <checkAktifCalisma+0x5ac>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00d      	beq.n	8006930 <checkAktifCalisma+0x524>
 8006914:	4b3a      	ldr	r3, [pc, #232]	; (8006a00 <checkAktifCalisma+0x5f4>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	f083 0301 	eor.w	r3, r3, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d006      	beq.n	8006930 <checkAktifCalisma+0x524>
			timer2=millis;
 8006922:	4b38      	ldr	r3, [pc, #224]	; (8006a04 <checkAktifCalisma+0x5f8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a38      	ldr	r2, [pc, #224]	; (8006a08 <checkAktifCalisma+0x5fc>)
 8006928:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800692a:	4b35      	ldr	r3, [pc, #212]	; (8006a00 <checkAktifCalisma+0x5f4>)
 800692c:	2201      	movs	r2, #1
 800692e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006930:	4b34      	ldr	r3, [pc, #208]	; (8006a04 <checkAktifCalisma+0x5f8>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	4b34      	ldr	r3, [pc, #208]	; (8006a08 <checkAktifCalisma+0x5fc>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	4a34      	ldr	r2, [pc, #208]	; (8006a0c <checkAktifCalisma+0x600>)
 800693c:	7812      	ldrb	r2, [r2, #0]
 800693e:	4293      	cmp	r3, r2
 8006940:	d303      	bcc.n	800694a <checkAktifCalisma+0x53e>
 8006942:	4b2f      	ldr	r3, [pc, #188]	; (8006a00 <checkAktifCalisma+0x5f4>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d114      	bne.n	8006974 <checkAktifCalisma+0x568>
 800694a:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <checkAktifCalisma+0x5b4>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	f083 0301 	eor.w	r3, r3, #1
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10d      	bne.n	8006974 <checkAktifCalisma+0x568>
 8006958:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <checkAktifCalisma+0x5b8>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f083 0301 	eor.w	r3, r3, #1
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <checkAktifCalisma+0x568>
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <checkAktifCalisma+0x5ac>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	f083 0301 	eor.w	r3, r3, #1
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006974:	2200      	movs	r2, #0
 8006976:	2102      	movs	r1, #2
 8006978:	4813      	ldr	r0, [pc, #76]	; (80069c8 <checkAktifCalisma+0x5bc>)
 800697a:	f003 f966 	bl	8009c4a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800697e:	4b17      	ldr	r3, [pc, #92]	; (80069dc <checkAktifCalisma+0x5d0>)
 8006980:	2200      	movs	r2, #0
 8006982:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006984:	4b1e      	ldr	r3, [pc, #120]	; (8006a00 <checkAktifCalisma+0x5f4>)
 8006986:	2200      	movs	r2, #0
 8006988:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800698a:	4b14      	ldr	r3, [pc, #80]	; (80069dc <checkAktifCalisma+0x5d0>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d040      	beq.n	8006a14 <checkAktifCalisma+0x608>
 8006992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006996:	480f      	ldr	r0, [pc, #60]	; (80069d4 <checkAktifCalisma+0x5c8>)
 8006998:	f003 f940 	bl	8009c1c <HAL_GPIO_ReadPin>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d138      	bne.n	8006a14 <checkAktifCalisma+0x608>
 80069a2:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <checkAktifCalisma+0x604>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d034      	beq.n	8006a14 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80069aa:	2201      	movs	r2, #1
 80069ac:	2101      	movs	r1, #1
 80069ae:	4806      	ldr	r0, [pc, #24]	; (80069c8 <checkAktifCalisma+0x5bc>)
 80069b0:	f003 f94b 	bl	8009c4a <HAL_GPIO_WritePin>
 80069b4:	e033      	b.n	8006a1e <checkAktifCalisma+0x612>
 80069b6:	bf00      	nop
 80069b8:	20000ca0 	.word	0x20000ca0
 80069bc:	20000c66 	.word	0x20000c66
 80069c0:	20000c9b 	.word	0x20000c9b
 80069c4:	20000c9c 	.word	0x20000c9c
 80069c8:	40010c00 	.word	0x40010c00
 80069cc:	20000c86 	.word	0x20000c86
 80069d0:	20000c9a 	.word	0x20000c9a
 80069d4:	40011000 	.word	0x40011000
 80069d8:	20000c4f 	.word	0x20000c4f
 80069dc:	20000c81 	.word	0x20000c81
 80069e0:	20000c7e 	.word	0x20000c7e
 80069e4:	20000c82 	.word	0x20000c82
 80069e8:	20000c7f 	.word	0x20000c7f
 80069ec:	20000c80 	.word	0x20000c80
 80069f0:	20000c83 	.word	0x20000c83
 80069f4:	20000c84 	.word	0x20000c84
 80069f8:	20000c89 	.word	0x20000c89
 80069fc:	20000caa 	.word	0x20000caa
 8006a00:	20000c79 	.word	0x20000c79
 8006a04:	20000bd4 	.word	0x20000bd4
 8006a08:	20000be0 	.word	0x20000be0
 8006a0c:	20000c5e 	.word	0x20000c5e
 8006a10:	20000c4e 	.word	0x20000c4e
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a14:	2200      	movs	r2, #0
 8006a16:	2101      	movs	r1, #1
 8006a18:	4836      	ldr	r0, [pc, #216]	; (8006af4 <checkAktifCalisma+0x6e8>)
 8006a1a:	f003 f916 	bl	8009c4a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006a1e:	4b36      	ldr	r3, [pc, #216]	; (8006af8 <checkAktifCalisma+0x6ec>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f040 8080 	bne.w	8006b28 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006a28:	4b34      	ldr	r3, [pc, #208]	; (8006afc <checkAktifCalisma+0x6f0>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d003      	beq.n	8006a38 <checkAktifCalisma+0x62c>
 8006a30:	4b32      	ldr	r3, [pc, #200]	; (8006afc <checkAktifCalisma+0x6f0>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d177      	bne.n	8006b28 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006a38:	4b31      	ldr	r3, [pc, #196]	; (8006b00 <checkAktifCalisma+0x6f4>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d073      	beq.n	8006b28 <checkAktifCalisma+0x71c>
 8006a40:	4b30      	ldr	r3, [pc, #192]	; (8006b04 <checkAktifCalisma+0x6f8>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d06f      	beq.n	8006b28 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a4c:	4829      	ldr	r0, [pc, #164]	; (8006af4 <checkAktifCalisma+0x6e8>)
 8006a4e:	f003 f8e5 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d167      	bne.n	8006b28 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a5c:	482a      	ldr	r0, [pc, #168]	; (8006b08 <checkAktifCalisma+0x6fc>)
 8006a5e:	f003 f8dd 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <checkAktifCalisma+0x664>
 8006a68:	4b28      	ldr	r3, [pc, #160]	; (8006b0c <checkAktifCalisma+0x700>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d15b      	bne.n	8006b28 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006a70:	2140      	movs	r1, #64	; 0x40
 8006a72:	4825      	ldr	r0, [pc, #148]	; (8006b08 <checkAktifCalisma+0x6fc>)
 8006a74:	f003 f8d2 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d10f      	bne.n	8006a9e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a82:	481c      	ldr	r0, [pc, #112]	; (8006af4 <checkAktifCalisma+0x6e8>)
 8006a84:	f003 f8ca 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d107      	bne.n	8006a9e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a92:	4818      	ldr	r0, [pc, #96]	; (8006af4 <checkAktifCalisma+0x6e8>)
 8006a94:	f003 f8c2 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d003      	beq.n	8006aa6 <checkAktifCalisma+0x69a>
 8006a9e:	4b1c      	ldr	r3, [pc, #112]	; (8006b10 <checkAktifCalisma+0x704>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d040      	beq.n	8006b28 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006aa6:	4b1b      	ldr	r3, [pc, #108]	; (8006b14 <checkAktifCalisma+0x708>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	f083 0301 	eor.w	r3, r3, #1
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d039      	beq.n	8006b28 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006ab4:	4b18      	ldr	r3, [pc, #96]	; (8006b18 <checkAktifCalisma+0x70c>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	f083 0301 	eor.w	r3, r3, #1
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d032      	beq.n	8006b28 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006ac2:	4b16      	ldr	r3, [pc, #88]	; (8006b1c <checkAktifCalisma+0x710>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f083 0301 	eor.w	r3, r3, #1
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d02b      	beq.n	8006b28 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006ad0:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <checkAktifCalisma+0x714>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f083 0301 	eor.w	r3, r3, #1
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d024      	beq.n	8006b28 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <checkAktifCalisma+0x718>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f083 0301 	eor.w	r3, r3, #1
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01d      	beq.n	8006b28 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <checkAktifCalisma+0x704>)
 8006aee:	2201      	movs	r2, #1
 8006af0:	701a      	strb	r2, [r3, #0]
 8006af2:	e01c      	b.n	8006b2e <checkAktifCalisma+0x722>
 8006af4:	40010c00 	.word	0x40010c00
 8006af8:	20000c66 	.word	0x20000c66
 8006afc:	20000c58 	.word	0x20000c58
 8006b00:	20000c9b 	.word	0x20000c9b
 8006b04:	20000c9c 	.word	0x20000c9c
 8006b08:	40011000 	.word	0x40011000
 8006b0c:	20000c59 	.word	0x20000c59
 8006b10:	20000c7f 	.word	0x20000c7f
 8006b14:	20000c7e 	.word	0x20000c7e
 8006b18:	20000c82 	.word	0x20000c82
 8006b1c:	20000c81 	.word	0x20000c81
 8006b20:	20000c80 	.word	0x20000c80
 8006b24:	20000c84 	.word	0x20000c84
		} else {
			devmotoryukaricalisiyor=0;
 8006b28:	4b64      	ldr	r3, [pc, #400]	; (8006cbc <checkAktifCalisma+0x8b0>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006b2e:	4b63      	ldr	r3, [pc, #396]	; (8006cbc <checkAktifCalisma+0x8b0>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006b36:	2201      	movs	r2, #1
 8006b38:	2120      	movs	r1, #32
 8006b3a:	4861      	ldr	r0, [pc, #388]	; (8006cc0 <checkAktifCalisma+0x8b4>)
 8006b3c:	f003 f885 	bl	8009c4a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006b40:	4b60      	ldr	r3, [pc, #384]	; (8006cc4 <checkAktifCalisma+0x8b8>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006b46:	4b5f      	ldr	r3, [pc, #380]	; (8006cc4 <checkAktifCalisma+0x8b8>)
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d025      	beq.n	8006b9a <checkAktifCalisma+0x78e>
 8006b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b52:	485d      	ldr	r0, [pc, #372]	; (8006cc8 <checkAktifCalisma+0x8bc>)
 8006b54:	f003 f862 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d007      	beq.n	8006b6e <checkAktifCalisma+0x762>
 8006b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b62:	4857      	ldr	r0, [pc, #348]	; (8006cc0 <checkAktifCalisma+0x8b4>)
 8006b64:	f003 f85a 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d115      	bne.n	8006b9a <checkAktifCalisma+0x78e>
 8006b6e:	4b57      	ldr	r3, [pc, #348]	; (8006ccc <checkAktifCalisma+0x8c0>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d011      	beq.n	8006b9a <checkAktifCalisma+0x78e>
 8006b76:	4b56      	ldr	r3, [pc, #344]	; (8006cd0 <checkAktifCalisma+0x8c4>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00d      	beq.n	8006b9a <checkAktifCalisma+0x78e>
 8006b7e:	4b55      	ldr	r3, [pc, #340]	; (8006cd4 <checkAktifCalisma+0x8c8>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	f083 0301 	eor.w	r3, r3, #1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d006      	beq.n	8006b9a <checkAktifCalisma+0x78e>
			timer2=millis;
 8006b8c:	4b52      	ldr	r3, [pc, #328]	; (8006cd8 <checkAktifCalisma+0x8cc>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a52      	ldr	r2, [pc, #328]	; (8006cdc <checkAktifCalisma+0x8d0>)
 8006b92:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006b94:	4b4f      	ldr	r3, [pc, #316]	; (8006cd4 <checkAktifCalisma+0x8c8>)
 8006b96:	2201      	movs	r2, #1
 8006b98:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006b9a:	4b4f      	ldr	r3, [pc, #316]	; (8006cd8 <checkAktifCalisma+0x8cc>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4b4f      	ldr	r3, [pc, #316]	; (8006cdc <checkAktifCalisma+0x8d0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	4a4e      	ldr	r2, [pc, #312]	; (8006ce0 <checkAktifCalisma+0x8d4>)
 8006ba6:	7812      	ldrb	r2, [r2, #0]
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d303      	bcc.n	8006bb4 <checkAktifCalisma+0x7a8>
 8006bac:	4b49      	ldr	r3, [pc, #292]	; (8006cd4 <checkAktifCalisma+0x8c8>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10d      	bne.n	8006bd0 <checkAktifCalisma+0x7c4>
 8006bb4:	4b45      	ldr	r3, [pc, #276]	; (8006ccc <checkAktifCalisma+0x8c0>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	f083 0301 	eor.w	r3, r3, #1
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <checkAktifCalisma+0x7c4>
 8006bc2:	4b43      	ldr	r3, [pc, #268]	; (8006cd0 <checkAktifCalisma+0x8c4>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f083 0301 	eor.w	r3, r3, #1
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2120      	movs	r1, #32
 8006bd4:	483a      	ldr	r0, [pc, #232]	; (8006cc0 <checkAktifCalisma+0x8b4>)
 8006bd6:	f003 f838 	bl	8009c4a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006bda:	4b3a      	ldr	r3, [pc, #232]	; (8006cc4 <checkAktifCalisma+0x8b8>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006be0:	4b3c      	ldr	r3, [pc, #240]	; (8006cd4 <checkAktifCalisma+0x8c8>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006be6:	4b3f      	ldr	r3, [pc, #252]	; (8006ce4 <checkAktifCalisma+0x8d8>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f040 8088 	bne.w	8006d00 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006bf0:	4b3d      	ldr	r3, [pc, #244]	; (8006ce8 <checkAktifCalisma+0x8dc>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d003      	beq.n	8006c00 <checkAktifCalisma+0x7f4>
 8006bf8:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <checkAktifCalisma+0x8dc>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d17f      	bne.n	8006d00 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006c00:	4b32      	ldr	r3, [pc, #200]	; (8006ccc <checkAktifCalisma+0x8c0>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d07b      	beq.n	8006d00 <checkAktifCalisma+0x8f4>
 8006c08:	4b31      	ldr	r3, [pc, #196]	; (8006cd0 <checkAktifCalisma+0x8c4>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d077      	beq.n	8006d00 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006c10:	2140      	movs	r1, #64	; 0x40
 8006c12:	482b      	ldr	r0, [pc, #172]	; (8006cc0 <checkAktifCalisma+0x8b4>)
 8006c14:	f003 f802 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d170      	bne.n	8006d00 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c22:	4827      	ldr	r0, [pc, #156]	; (8006cc0 <checkAktifCalisma+0x8b4>)
 8006c24:	f002 fffa 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <checkAktifCalisma+0x82a>
 8006c2e:	4b2f      	ldr	r3, [pc, #188]	; (8006cec <checkAktifCalisma+0x8e0>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d164      	bne.n	8006d00 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c3a:	4823      	ldr	r0, [pc, #140]	; (8006cc8 <checkAktifCalisma+0x8bc>)
 8006c3c:	f002 ffee 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d10f      	bne.n	8006c66 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c4a:	481f      	ldr	r0, [pc, #124]	; (8006cc8 <checkAktifCalisma+0x8bc>)
 8006c4c:	f002 ffe6 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d107      	bne.n	8006c66 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006c56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c5a:	481b      	ldr	r0, [pc, #108]	; (8006cc8 <checkAktifCalisma+0x8bc>)
 8006c5c:	f002 ffde 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d003      	beq.n	8006c6e <checkAktifCalisma+0x862>
 8006c66:	4b22      	ldr	r3, [pc, #136]	; (8006cf0 <checkAktifCalisma+0x8e4>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d048      	beq.n	8006d00 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006c6e:	4b21      	ldr	r3, [pc, #132]	; (8006cf4 <checkAktifCalisma+0x8e8>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	f083 0301 	eor.w	r3, r3, #1
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d041      	beq.n	8006d00 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006c7c:	4b1e      	ldr	r3, [pc, #120]	; (8006cf8 <checkAktifCalisma+0x8ec>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f083 0301 	eor.w	r3, r3, #1
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d03a      	beq.n	8006d00 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006c8a:	4b1c      	ldr	r3, [pc, #112]	; (8006cfc <checkAktifCalisma+0x8f0>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	f083 0301 	eor.w	r3, r3, #1
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d033      	beq.n	8006d00 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006c98:	4b0a      	ldr	r3, [pc, #40]	; (8006cc4 <checkAktifCalisma+0x8b8>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f083 0301 	eor.w	r3, r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d02c      	beq.n	8006d00 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006ca6:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <checkAktifCalisma+0x8b0>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	f083 0301 	eor.w	r3, r3, #1
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d025      	beq.n	8006d00 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	; (8006cf0 <checkAktifCalisma+0x8e4>)
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	e024      	b.n	8006d06 <checkAktifCalisma+0x8fa>
 8006cbc:	20000c7f 	.word	0x20000c7f
 8006cc0:	40011000 	.word	0x40011000
 8006cc4:	20000c83 	.word	0x20000c83
 8006cc8:	40010c00 	.word	0x40010c00
 8006ccc:	20000c9b 	.word	0x20000c9b
 8006cd0:	20000c9c 	.word	0x20000c9c
 8006cd4:	20000c7b 	.word	0x20000c7b
 8006cd8:	20000bd4 	.word	0x20000bd4
 8006cdc:	20000be0 	.word	0x20000be0
 8006ce0:	20000c5f 	.word	0x20000c5f
 8006ce4:	20000c66 	.word	0x20000c66
 8006ce8:	20000c58 	.word	0x20000c58
 8006cec:	20000c5a 	.word	0x20000c5a
 8006cf0:	20000c80 	.word	0x20000c80
 8006cf4:	20000c7e 	.word	0x20000c7e
 8006cf8:	20000c82 	.word	0x20000c82
 8006cfc:	20000c81 	.word	0x20000c81
		} else {
			devmotorasagicalisiyor=0;
 8006d00:	4b96      	ldr	r3, [pc, #600]	; (8006f5c <checkAktifCalisma+0xb50>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006d06:	4b95      	ldr	r3, [pc, #596]	; (8006f5c <checkAktifCalisma+0xb50>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d007      	beq.n	8006d1e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006d0e:	2201      	movs	r2, #1
 8006d10:	2110      	movs	r1, #16
 8006d12:	4893      	ldr	r0, [pc, #588]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006d14:	f002 ff99 	bl	8009c4a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006d18:	4b92      	ldr	r3, [pc, #584]	; (8006f64 <checkAktifCalisma+0xb58>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006d1e:	4b91      	ldr	r3, [pc, #580]	; (8006f64 <checkAktifCalisma+0xb58>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d024      	beq.n	8006d70 <checkAktifCalisma+0x964>
 8006d26:	2140      	movs	r1, #64	; 0x40
 8006d28:	488d      	ldr	r0, [pc, #564]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006d2a:	f002 ff77 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d007      	beq.n	8006d44 <checkAktifCalisma+0x938>
 8006d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d38:	4889      	ldr	r0, [pc, #548]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006d3a:	f002 ff6f 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d115      	bne.n	8006d70 <checkAktifCalisma+0x964>
 8006d44:	4b88      	ldr	r3, [pc, #544]	; (8006f68 <checkAktifCalisma+0xb5c>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d011      	beq.n	8006d70 <checkAktifCalisma+0x964>
 8006d4c:	4b87      	ldr	r3, [pc, #540]	; (8006f6c <checkAktifCalisma+0xb60>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <checkAktifCalisma+0x964>
 8006d54:	4b86      	ldr	r3, [pc, #536]	; (8006f70 <checkAktifCalisma+0xb64>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	f083 0301 	eor.w	r3, r3, #1
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d006      	beq.n	8006d70 <checkAktifCalisma+0x964>
			timer2=millis;
 8006d62:	4b84      	ldr	r3, [pc, #528]	; (8006f74 <checkAktifCalisma+0xb68>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a84      	ldr	r2, [pc, #528]	; (8006f78 <checkAktifCalisma+0xb6c>)
 8006d68:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006d6a:	4b81      	ldr	r3, [pc, #516]	; (8006f70 <checkAktifCalisma+0xb64>)
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006d70:	4b80      	ldr	r3, [pc, #512]	; (8006f74 <checkAktifCalisma+0xb68>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	4b80      	ldr	r3, [pc, #512]	; (8006f78 <checkAktifCalisma+0xb6c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	4a80      	ldr	r2, [pc, #512]	; (8006f7c <checkAktifCalisma+0xb70>)
 8006d7c:	7812      	ldrb	r2, [r2, #0]
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d303      	bcc.n	8006d8a <checkAktifCalisma+0x97e>
 8006d82:	4b7b      	ldr	r3, [pc, #492]	; (8006f70 <checkAktifCalisma+0xb64>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10d      	bne.n	8006da6 <checkAktifCalisma+0x99a>
 8006d8a:	4b77      	ldr	r3, [pc, #476]	; (8006f68 <checkAktifCalisma+0xb5c>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	f083 0301 	eor.w	r3, r3, #1
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d106      	bne.n	8006da6 <checkAktifCalisma+0x99a>
 8006d98:	4b74      	ldr	r3, [pc, #464]	; (8006f6c <checkAktifCalisma+0xb60>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f083 0301 	eor.w	r3, r3, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006da6:	2200      	movs	r2, #0
 8006da8:	2110      	movs	r1, #16
 8006daa:	486d      	ldr	r0, [pc, #436]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006dac:	f002 ff4d 	bl	8009c4a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006db0:	4b6c      	ldr	r3, [pc, #432]	; (8006f64 <checkAktifCalisma+0xb58>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006db6:	4b6e      	ldr	r3, [pc, #440]	; (8006f70 <checkAktifCalisma+0xb64>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dc0:	486f      	ldr	r0, [pc, #444]	; (8006f80 <checkAktifCalisma+0xb74>)
 8006dc2:	f002 ff2b 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d120      	bne.n	8006e0e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dd0:	486b      	ldr	r0, [pc, #428]	; (8006f80 <checkAktifCalisma+0xb74>)
 8006dd2:	f002 ff23 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d118      	bne.n	8006e0e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006ddc:	2104      	movs	r1, #4
 8006dde:	4868      	ldr	r0, [pc, #416]	; (8006f80 <checkAktifCalisma+0xb74>)
 8006de0:	f002 ff1c 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d111      	bne.n	8006e0e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006dea:	2102      	movs	r1, #2
 8006dec:	4864      	ldr	r0, [pc, #400]	; (8006f80 <checkAktifCalisma+0xb74>)
 8006dee:	f002 ff15 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006df8:	2101      	movs	r1, #1
 8006dfa:	4861      	ldr	r0, [pc, #388]	; (8006f80 <checkAktifCalisma+0xb74>)
 8006dfc:	f002 ff0e 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d103      	bne.n	8006e0e <checkAktifCalisma+0xa02>
			makineStop=1;
 8006e06:	4b5f      	ldr	r3, [pc, #380]	; (8006f84 <checkAktifCalisma+0xb78>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e002      	b.n	8006e14 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006e0e:	4b5d      	ldr	r3, [pc, #372]	; (8006f84 <checkAktifCalisma+0xb78>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006e14:	4b5c      	ldr	r3, [pc, #368]	; (8006f88 <checkAktifCalisma+0xb7c>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d144      	bne.n	8006ea6 <checkAktifCalisma+0xa9a>
 8006e1c:	4b5b      	ldr	r3, [pc, #364]	; (8006f8c <checkAktifCalisma+0xb80>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d003      	beq.n	8006e2c <checkAktifCalisma+0xa20>
 8006e24:	4b59      	ldr	r3, [pc, #356]	; (8006f8c <checkAktifCalisma+0xb80>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d13c      	bne.n	8006ea6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006e2c:	2180      	movs	r1, #128	; 0x80
 8006e2e:	484c      	ldr	r0, [pc, #304]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006e30:	f002 fef4 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <checkAktifCalisma+0xa36>
 8006e3a:	4b55      	ldr	r3, [pc, #340]	; (8006f90 <checkAktifCalisma+0xb84>)
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <checkAktifCalisma+0xa4e>
 8006e42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e46:	484e      	ldr	r0, [pc, #312]	; (8006f80 <checkAktifCalisma+0xb74>)
 8006e48:	f002 fee8 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d129      	bne.n	8006ea6 <checkAktifCalisma+0xa9a>
 8006e52:	4b4f      	ldr	r3, [pc, #316]	; (8006f90 <checkAktifCalisma+0xb84>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d125      	bne.n	8006ea6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006e5a:	2104      	movs	r1, #4
 8006e5c:	4840      	ldr	r0, [pc, #256]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006e5e:	f002 fedd 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d003      	beq.n	8006e70 <checkAktifCalisma+0xa64>
 8006e68:	4b4a      	ldr	r3, [pc, #296]	; (8006f94 <checkAktifCalisma+0xb88>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d11a      	bne.n	8006ea6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006e70:	2102      	movs	r1, #2
 8006e72:	483b      	ldr	r0, [pc, #236]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006e74:	f002 fed2 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d113      	bne.n	8006ea6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006e7e:	4b46      	ldr	r3, [pc, #280]	; (8006f98 <checkAktifCalisma+0xb8c>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	f083 0301 	eor.w	r3, r3, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00c      	beq.n	8006ea6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006e8c:	4b3d      	ldr	r3, [pc, #244]	; (8006f84 <checkAktifCalisma+0xb78>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006e94:	4b41      	ldr	r3, [pc, #260]	; (8006f9c <checkAktifCalisma+0xb90>)
 8006e96:	2201      	movs	r2, #1
 8006e98:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006e9a:	4b36      	ldr	r3, [pc, #216]	; (8006f74 <checkAktifCalisma+0xb68>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a40      	ldr	r2, [pc, #256]	; (8006fa0 <checkAktifCalisma+0xb94>)
 8006ea0:	6013      	str	r3, [r2, #0]
			bekle();
 8006ea2:	f7ff f87d 	bl	8005fa0 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006ea6:	4b33      	ldr	r3, [pc, #204]	; (8006f74 <checkAktifCalisma+0xb68>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	4b3d      	ldr	r3, [pc, #244]	; (8006fa0 <checkAktifCalisma+0xb94>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	4a3c      	ldr	r2, [pc, #240]	; (8006fa4 <checkAktifCalisma+0xb98>)
 8006eb2:	7812      	ldrb	r2, [r2, #0]
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d211      	bcs.n	8006edc <checkAktifCalisma+0xad0>
 8006eb8:	2104      	movs	r1, #4
 8006eba:	4829      	ldr	r0, [pc, #164]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006ebc:	f002 feae 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <checkAktifCalisma+0xad0>
 8006ec6:	4b33      	ldr	r3, [pc, #204]	; (8006f94 <checkAktifCalisma+0xb88>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d006      	beq.n	8006edc <checkAktifCalisma+0xad0>
 8006ece:	4b2d      	ldr	r3, [pc, #180]	; (8006f84 <checkAktifCalisma+0xb78>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	f083 0301 	eor.w	r3, r3, #1
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006edc:	4b2f      	ldr	r3, [pc, #188]	; (8006f9c <checkAktifCalisma+0xb90>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006ee2:	4b29      	ldr	r3, [pc, #164]	; (8006f88 <checkAktifCalisma+0xb7c>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d160      	bne.n	8006fac <checkAktifCalisma+0xba0>
 8006eea:	4b28      	ldr	r3, [pc, #160]	; (8006f8c <checkAktifCalisma+0xb80>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d003      	beq.n	8006efa <checkAktifCalisma+0xaee>
 8006ef2:	4b26      	ldr	r3, [pc, #152]	; (8006f8c <checkAktifCalisma+0xb80>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d158      	bne.n	8006fac <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006efa:	2104      	movs	r1, #4
 8006efc:	4818      	ldr	r0, [pc, #96]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006efe:	f002 fe8d 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d003      	beq.n	8006f10 <checkAktifCalisma+0xb04>
 8006f08:	4b22      	ldr	r3, [pc, #136]	; (8006f94 <checkAktifCalisma+0xb88>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d14d      	bne.n	8006fac <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006f10:	2102      	movs	r1, #2
 8006f12:	4813      	ldr	r0, [pc, #76]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006f14:	f002 fe82 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d146      	bne.n	8006fac <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f1e:	2180      	movs	r1, #128	; 0x80
 8006f20:	480f      	ldr	r0, [pc, #60]	; (8006f60 <checkAktifCalisma+0xb54>)
 8006f22:	f002 fe7b 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <checkAktifCalisma+0xb28>
 8006f2c:	4b18      	ldr	r3, [pc, #96]	; (8006f90 <checkAktifCalisma+0xb84>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <checkAktifCalisma+0xb40>
 8006f34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f38:	4811      	ldr	r0, [pc, #68]	; (8006f80 <checkAktifCalisma+0xb74>)
 8006f3a:	f002 fe6f 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d133      	bne.n	8006fac <checkAktifCalisma+0xba0>
 8006f44:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <checkAktifCalisma+0xb84>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d12f      	bne.n	8006fac <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <checkAktifCalisma+0xb78>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d02b      	beq.n	8006fac <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006f54:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <checkAktifCalisma+0xb9c>)
 8006f56:	2201      	movs	r2, #1
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e02a      	b.n	8006fb2 <checkAktifCalisma+0xba6>
 8006f5c:	20000c80 	.word	0x20000c80
 8006f60:	40011000 	.word	0x40011000
 8006f64:	20000c84 	.word	0x20000c84
 8006f68:	20000c9b 	.word	0x20000c9b
 8006f6c:	20000c9c 	.word	0x20000c9c
 8006f70:	20000c7c 	.word	0x20000c7c
 8006f74:	20000bd4 	.word	0x20000bd4
 8006f78:	20000be0 	.word	0x20000be0
 8006f7c:	20000c5f 	.word	0x20000c5f
 8006f80:	40010c00 	.word	0x40010c00
 8006f84:	20000c8b 	.word	0x20000c8b
 8006f88:	20000c52 	.word	0x20000c52
 8006f8c:	20000c51 	.word	0x20000c51
 8006f90:	20000c55 	.word	0x20000c55
 8006f94:	20000c4f 	.word	0x20000c4f
 8006f98:	20000c78 	.word	0x20000c78
 8006f9c:	20000c8c 	.word	0x20000c8c
 8006fa0:	20000bd8 	.word	0x20000bd8
 8006fa4:	20000c62 	.word	0x20000c62
 8006fa8:	20000c8d 	.word	0x20000c8d
		} else {
			kapi1butonkontrol=0;
 8006fac:	4b8b      	ldr	r3, [pc, #556]	; (80071dc <checkAktifCalisma+0xdd0>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006fb2:	4b8b      	ldr	r3, [pc, #556]	; (80071e0 <checkAktifCalisma+0xdd4>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d121      	bne.n	8006ffe <checkAktifCalisma+0xbf2>
 8006fba:	4b8a      	ldr	r3, [pc, #552]	; (80071e4 <checkAktifCalisma+0xdd8>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d003      	beq.n	8006fca <checkAktifCalisma+0xbbe>
 8006fc2:	4b88      	ldr	r3, [pc, #544]	; (80071e4 <checkAktifCalisma+0xdd8>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d119      	bne.n	8006ffe <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006fca:	2104      	movs	r1, #4
 8006fcc:	4886      	ldr	r0, [pc, #536]	; (80071e8 <checkAktifCalisma+0xddc>)
 8006fce:	f002 fe25 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d003      	beq.n	8006fe0 <checkAktifCalisma+0xbd4>
 8006fd8:	4b84      	ldr	r3, [pc, #528]	; (80071ec <checkAktifCalisma+0xde0>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10e      	bne.n	8006ffe <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006fe0:	2102      	movs	r1, #2
 8006fe2:	4881      	ldr	r0, [pc, #516]	; (80071e8 <checkAktifCalisma+0xddc>)
 8006fe4:	f002 fe1a 	bl	8009c1c <HAL_GPIO_ReadPin>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d107      	bne.n	8006ffe <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8006fee:	4b80      	ldr	r3, [pc, #512]	; (80071f0 <checkAktifCalisma+0xde4>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8006ff6:	4b7f      	ldr	r3, [pc, #508]	; (80071f4 <checkAktifCalisma+0xde8>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e002      	b.n	8007004 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006ffe:	4b7d      	ldr	r3, [pc, #500]	; (80071f4 <checkAktifCalisma+0xde8>)
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8007004:	4b75      	ldr	r3, [pc, #468]	; (80071dc <checkAktifCalisma+0xdd0>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d107      	bne.n	800701c <checkAktifCalisma+0xc10>
 800700c:	4b79      	ldr	r3, [pc, #484]	; (80071f4 <checkAktifCalisma+0xde8>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d103      	bne.n	800701c <checkAktifCalisma+0xc10>
 8007014:	4b78      	ldr	r3, [pc, #480]	; (80071f8 <checkAktifCalisma+0xdec>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800701c:	2201      	movs	r2, #1
 800701e:	2180      	movs	r1, #128	; 0x80
 8007020:	4876      	ldr	r0, [pc, #472]	; (80071fc <checkAktifCalisma+0xdf0>)
 8007022:	f002 fe12 	bl	8009c4a <HAL_GPIO_WritePin>
 8007026:	e004      	b.n	8007032 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007028:	2200      	movs	r2, #0
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	4873      	ldr	r0, [pc, #460]	; (80071fc <checkAktifCalisma+0xdf0>)
 800702e:	f002 fe0c 	bl	8009c4a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007032:	4b73      	ldr	r3, [pc, #460]	; (8007200 <checkAktifCalisma+0xdf4>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d141      	bne.n	80070be <checkAktifCalisma+0xcb2>
 800703a:	4b6a      	ldr	r3, [pc, #424]	; (80071e4 <checkAktifCalisma+0xdd8>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d003      	beq.n	800704a <checkAktifCalisma+0xc3e>
 8007042:	4b68      	ldr	r3, [pc, #416]	; (80071e4 <checkAktifCalisma+0xdd8>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d139      	bne.n	80070be <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800704a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800704e:	4866      	ldr	r0, [pc, #408]	; (80071e8 <checkAktifCalisma+0xddc>)
 8007050:	f002 fde4 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <checkAktifCalisma+0xc56>
 800705a:	4b6a      	ldr	r3, [pc, #424]	; (8007204 <checkAktifCalisma+0xdf8>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <checkAktifCalisma+0xc6e>
 8007062:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007066:	4868      	ldr	r0, [pc, #416]	; (8007208 <checkAktifCalisma+0xdfc>)
 8007068:	f002 fdd8 	bl	8009c1c <HAL_GPIO_ReadPin>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d125      	bne.n	80070be <checkAktifCalisma+0xcb2>
 8007072:	4b64      	ldr	r3, [pc, #400]	; (8007204 <checkAktifCalisma+0xdf8>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d121      	bne.n	80070be <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800707a:	2102      	movs	r1, #2
 800707c:	485a      	ldr	r0, [pc, #360]	; (80071e8 <checkAktifCalisma+0xddc>)
 800707e:	f002 fdcd 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007082:	4603      	mov	r3, r0
 8007084:	2b01      	cmp	r3, #1
 8007086:	d11a      	bne.n	80070be <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007088:	2104      	movs	r1, #4
 800708a:	4857      	ldr	r0, [pc, #348]	; (80071e8 <checkAktifCalisma+0xddc>)
 800708c:	f002 fdc6 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d113      	bne.n	80070be <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8007096:	4b56      	ldr	r3, [pc, #344]	; (80071f0 <checkAktifCalisma+0xde4>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00f      	beq.n	80070be <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 800709e:	4b5b      	ldr	r3, [pc, #364]	; (800720c <checkAktifCalisma+0xe00>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	f083 0301 	eor.w	r3, r3, #1
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80070ac:	4b58      	ldr	r3, [pc, #352]	; (8007210 <checkAktifCalisma+0xe04>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80070b2:	4b58      	ldr	r3, [pc, #352]	; (8007214 <checkAktifCalisma+0xe08>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a58      	ldr	r2, [pc, #352]	; (8007218 <checkAktifCalisma+0xe0c>)
 80070b8:	6013      	str	r3, [r2, #0]
			bekle();
 80070ba:	f7fe ff71 	bl	8005fa0 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80070be:	4b55      	ldr	r3, [pc, #340]	; (8007214 <checkAktifCalisma+0xe08>)
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4b55      	ldr	r3, [pc, #340]	; (8007218 <checkAktifCalisma+0xe0c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	4a54      	ldr	r2, [pc, #336]	; (800721c <checkAktifCalisma+0xe10>)
 80070ca:	7812      	ldrb	r2, [r2, #0]
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d20d      	bcs.n	80070ec <checkAktifCalisma+0xce0>
 80070d0:	2102      	movs	r1, #2
 80070d2:	4845      	ldr	r0, [pc, #276]	; (80071e8 <checkAktifCalisma+0xddc>)
 80070d4:	f002 fda2 	bl	8009c1c <HAL_GPIO_ReadPin>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d006      	beq.n	80070ec <checkAktifCalisma+0xce0>
 80070de:	4b44      	ldr	r3, [pc, #272]	; (80071f0 <checkAktifCalisma+0xde4>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	f083 0301 	eor.w	r3, r3, #1
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d002      	beq.n	80070f2 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80070ec:	4b48      	ldr	r3, [pc, #288]	; (8007210 <checkAktifCalisma+0xe04>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80070f2:	4b43      	ldr	r3, [pc, #268]	; (8007200 <checkAktifCalisma+0xdf4>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d135      	bne.n	8007166 <checkAktifCalisma+0xd5a>
 80070fa:	4b3a      	ldr	r3, [pc, #232]	; (80071e4 <checkAktifCalisma+0xdd8>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d003      	beq.n	800710a <checkAktifCalisma+0xcfe>
 8007102:	4b38      	ldr	r3, [pc, #224]	; (80071e4 <checkAktifCalisma+0xdd8>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b03      	cmp	r3, #3
 8007108:	d12d      	bne.n	8007166 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800710a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800710e:	4836      	ldr	r0, [pc, #216]	; (80071e8 <checkAktifCalisma+0xddc>)
 8007110:	f002 fd84 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d103      	bne.n	8007122 <checkAktifCalisma+0xd16>
 800711a:	4b3a      	ldr	r3, [pc, #232]	; (8007204 <checkAktifCalisma+0xdf8>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <checkAktifCalisma+0xd2e>
 8007122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007126:	4838      	ldr	r0, [pc, #224]	; (8007208 <checkAktifCalisma+0xdfc>)
 8007128:	f002 fd78 	bl	8009c1c <HAL_GPIO_ReadPin>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d119      	bne.n	8007166 <checkAktifCalisma+0xd5a>
 8007132:	4b34      	ldr	r3, [pc, #208]	; (8007204 <checkAktifCalisma+0xdf8>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d115      	bne.n	8007166 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800713a:	2102      	movs	r1, #2
 800713c:	482a      	ldr	r0, [pc, #168]	; (80071e8 <checkAktifCalisma+0xddc>)
 800713e:	f002 fd6d 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007142:	4603      	mov	r3, r0
 8007144:	2b01      	cmp	r3, #1
 8007146:	d10e      	bne.n	8007166 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007148:	2104      	movs	r1, #4
 800714a:	4827      	ldr	r0, [pc, #156]	; (80071e8 <checkAktifCalisma+0xddc>)
 800714c:	f002 fd66 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d107      	bne.n	8007166 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8007156:	4b26      	ldr	r3, [pc, #152]	; (80071f0 <checkAktifCalisma+0xde4>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800715e:	4b30      	ldr	r3, [pc, #192]	; (8007220 <checkAktifCalisma+0xe14>)
 8007160:	2201      	movs	r2, #1
 8007162:	701a      	strb	r2, [r3, #0]
 8007164:	e002      	b.n	800716c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8007166:	4b2e      	ldr	r3, [pc, #184]	; (8007220 <checkAktifCalisma+0xe14>)
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800716c:	4b24      	ldr	r3, [pc, #144]	; (8007200 <checkAktifCalisma+0xdf4>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d11d      	bne.n	80071b0 <checkAktifCalisma+0xda4>
 8007174:	4b1b      	ldr	r3, [pc, #108]	; (80071e4 <checkAktifCalisma+0xdd8>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d003      	beq.n	8007184 <checkAktifCalisma+0xd78>
 800717c:	4b19      	ldr	r3, [pc, #100]	; (80071e4 <checkAktifCalisma+0xdd8>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d115      	bne.n	80071b0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007184:	2102      	movs	r1, #2
 8007186:	4818      	ldr	r0, [pc, #96]	; (80071e8 <checkAktifCalisma+0xddc>)
 8007188:	f002 fd48 	bl	8009c1c <HAL_GPIO_ReadPin>
 800718c:	4603      	mov	r3, r0
 800718e:	2b01      	cmp	r3, #1
 8007190:	d10e      	bne.n	80071b0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007192:	2104      	movs	r1, #4
 8007194:	4814      	ldr	r0, [pc, #80]	; (80071e8 <checkAktifCalisma+0xddc>)
 8007196:	f002 fd41 	bl	8009c1c <HAL_GPIO_ReadPin>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d107      	bne.n	80071b0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80071a0:	4b13      	ldr	r3, [pc, #76]	; (80071f0 <checkAktifCalisma+0xde4>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80071a8:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <checkAktifCalisma+0xe18>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	e002      	b.n	80071b6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80071b0:	4b1c      	ldr	r3, [pc, #112]	; (8007224 <checkAktifCalisma+0xe18>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80071b6:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <checkAktifCalisma+0xe14>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d107      	bne.n	80071ce <checkAktifCalisma+0xdc2>
 80071be:	4b19      	ldr	r3, [pc, #100]	; (8007224 <checkAktifCalisma+0xe18>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <checkAktifCalisma+0xdc2>
 80071c6:	4b12      	ldr	r3, [pc, #72]	; (8007210 <checkAktifCalisma+0xe04>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d02c      	beq.n	8007228 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80071ce:	2201      	movs	r2, #1
 80071d0:	2140      	movs	r1, #64	; 0x40
 80071d2:	480a      	ldr	r0, [pc, #40]	; (80071fc <checkAktifCalisma+0xdf0>)
 80071d4:	f002 fd39 	bl	8009c4a <HAL_GPIO_WritePin>
 80071d8:	e02b      	b.n	8007232 <checkAktifCalisma+0xe26>
 80071da:	bf00      	nop
 80071dc:	20000c8d 	.word	0x20000c8d
 80071e0:	20000c52 	.word	0x20000c52
 80071e4:	20000c51 	.word	0x20000c51
 80071e8:	40011000 	.word	0x40011000
 80071ec:	20000c4f 	.word	0x20000c4f
 80071f0:	20000c8b 	.word	0x20000c8b
 80071f4:	20000c8e 	.word	0x20000c8e
 80071f8:	20000c8c 	.word	0x20000c8c
 80071fc:	40010800 	.word	0x40010800
 8007200:	20000c53 	.word	0x20000c53
 8007204:	20000c55 	.word	0x20000c55
 8007208:	40010c00 	.word	0x40010c00
 800720c:	20000c78 	.word	0x20000c78
 8007210:	20000c8f 	.word	0x20000c8f
 8007214:	20000bd4 	.word	0x20000bd4
 8007218:	20000bd8 	.word	0x20000bd8
 800721c:	20000c63 	.word	0x20000c63
 8007220:	20000c90 	.word	0x20000c90
 8007224:	20000c91 	.word	0x20000c91
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007228:	2200      	movs	r2, #0
 800722a:	2140      	movs	r1, #64	; 0x40
 800722c:	488d      	ldr	r0, [pc, #564]	; (8007464 <checkAktifCalisma+0x1058>)
 800722e:	f002 fd0c 	bl	8009c4a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8007232:	4b8d      	ldr	r3, [pc, #564]	; (8007468 <checkAktifCalisma+0x105c>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <checkAktifCalisma+0xe36>
 800723a:	4b8b      	ldr	r3, [pc, #556]	; (8007468 <checkAktifCalisma+0x105c>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d115      	bne.n	800726e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007242:	2104      	movs	r1, #4
 8007244:	4889      	ldr	r0, [pc, #548]	; (800746c <checkAktifCalisma+0x1060>)
 8007246:	f002 fce9 	bl	8009c1c <HAL_GPIO_ReadPin>
 800724a:	4603      	mov	r3, r0
 800724c:	2b01      	cmp	r3, #1
 800724e:	d003      	beq.n	8007258 <checkAktifCalisma+0xe4c>
 8007250:	4b87      	ldr	r3, [pc, #540]	; (8007470 <checkAktifCalisma+0x1064>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007258:	2102      	movs	r1, #2
 800725a:	4884      	ldr	r0, [pc, #528]	; (800746c <checkAktifCalisma+0x1060>)
 800725c:	f002 fcde 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8007266:	4b83      	ldr	r3, [pc, #524]	; (8007474 <checkAktifCalisma+0x1068>)
 8007268:	2201      	movs	r2, #1
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	e002      	b.n	8007274 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 800726e:	4b81      	ldr	r3, [pc, #516]	; (8007474 <checkAktifCalisma+0x1068>)
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8007274:	4b7c      	ldr	r3, [pc, #496]	; (8007468 <checkAktifCalisma+0x105c>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d003      	beq.n	8007284 <checkAktifCalisma+0xe78>
 800727c:	4b7a      	ldr	r3, [pc, #488]	; (8007468 <checkAktifCalisma+0x105c>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d111      	bne.n	80072a8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007284:	2102      	movs	r1, #2
 8007286:	4879      	ldr	r0, [pc, #484]	; (800746c <checkAktifCalisma+0x1060>)
 8007288:	f002 fcc8 	bl	8009c1c <HAL_GPIO_ReadPin>
 800728c:	4603      	mov	r3, r0
 800728e:	2b01      	cmp	r3, #1
 8007290:	d10a      	bne.n	80072a8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8007292:	2104      	movs	r1, #4
 8007294:	4875      	ldr	r0, [pc, #468]	; (800746c <checkAktifCalisma+0x1060>)
 8007296:	f002 fcc1 	bl	8009c1c <HAL_GPIO_ReadPin>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80072a0:	4b75      	ldr	r3, [pc, #468]	; (8007478 <checkAktifCalisma+0x106c>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	e002      	b.n	80072ae <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80072a8:	4b73      	ldr	r3, [pc, #460]	; (8007478 <checkAktifCalisma+0x106c>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80072ae:	4b71      	ldr	r3, [pc, #452]	; (8007474 <checkAktifCalisma+0x1068>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00f      	beq.n	80072d6 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80072b6:	4b71      	ldr	r3, [pc, #452]	; (800747c <checkAktifCalisma+0x1070>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d10b      	bne.n	80072d6 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80072be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072c2:	486f      	ldr	r0, [pc, #444]	; (8007480 <checkAktifCalisma+0x1074>)
 80072c4:	f002 fcaa 	bl	8009c1c <HAL_GPIO_ReadPin>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80072ce:	4b6d      	ldr	r3, [pc, #436]	; (8007484 <checkAktifCalisma+0x1078>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	e002      	b.n	80072dc <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80072d6:	4b6b      	ldr	r3, [pc, #428]	; (8007484 <checkAktifCalisma+0x1078>)
 80072d8:	2200      	movs	r2, #0
 80072da:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80072dc:	4b66      	ldr	r3, [pc, #408]	; (8007478 <checkAktifCalisma+0x106c>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00f      	beq.n	8007304 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80072e4:	4b65      	ldr	r3, [pc, #404]	; (800747c <checkAktifCalisma+0x1070>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d10b      	bne.n	8007304 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80072ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072f0:	4863      	ldr	r0, [pc, #396]	; (8007480 <checkAktifCalisma+0x1074>)
 80072f2:	f002 fc93 	bl	8009c1c <HAL_GPIO_ReadPin>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 80072fc:	4b62      	ldr	r3, [pc, #392]	; (8007488 <checkAktifCalisma+0x107c>)
 80072fe:	2201      	movs	r2, #1
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	e002      	b.n	800730a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8007304:	4b60      	ldr	r3, [pc, #384]	; (8007488 <checkAktifCalisma+0x107c>)
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800730a:	4b60      	ldr	r3, [pc, #384]	; (800748c <checkAktifCalisma+0x1080>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d137      	bne.n	8007382 <checkAktifCalisma+0xf76>
 8007312:	4b5f      	ldr	r3, [pc, #380]	; (8007490 <checkAktifCalisma+0x1084>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d003      	beq.n	8007322 <checkAktifCalisma+0xf16>
 800731a:	4b5d      	ldr	r3, [pc, #372]	; (8007490 <checkAktifCalisma+0x1084>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b03      	cmp	r3, #3
 8007320:	d12f      	bne.n	8007382 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007322:	4b54      	ldr	r3, [pc, #336]	; (8007474 <checkAktifCalisma+0x1068>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <checkAktifCalisma+0xf26>
 800732a:	4b53      	ldr	r3, [pc, #332]	; (8007478 <checkAktifCalisma+0x106c>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d027      	beq.n	8007382 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007336:	484d      	ldr	r0, [pc, #308]	; (800746c <checkAktifCalisma+0x1060>)
 8007338:	f002 fc70 	bl	8009c1c <HAL_GPIO_ReadPin>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <checkAktifCalisma+0xf3e>
 8007342:	4b4e      	ldr	r3, [pc, #312]	; (800747c <checkAktifCalisma+0x1070>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d007      	beq.n	800735a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800734a:	4b4e      	ldr	r3, [pc, #312]	; (8007484 <checkAktifCalisma+0x1078>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d103      	bne.n	800735a <checkAktifCalisma+0xf4e>
 8007352:	4b4d      	ldr	r3, [pc, #308]	; (8007488 <checkAktifCalisma+0x107c>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d013      	beq.n	8007382 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 800735a:	4b4e      	ldr	r3, [pc, #312]	; (8007494 <checkAktifCalisma+0x1088>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00f      	beq.n	8007382 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8007362:	4b4d      	ldr	r3, [pc, #308]	; (8007498 <checkAktifCalisma+0x108c>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	f083 0301 	eor.w	r3, r3, #1
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d008      	beq.n	8007382 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007370:	4b4a      	ldr	r3, [pc, #296]	; (800749c <checkAktifCalisma+0x1090>)
 8007372:	2201      	movs	r2, #1
 8007374:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007376:	4b4a      	ldr	r3, [pc, #296]	; (80074a0 <checkAktifCalisma+0x1094>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a4a      	ldr	r2, [pc, #296]	; (80074a4 <checkAktifCalisma+0x1098>)
 800737c:	6013      	str	r3, [r2, #0]
			bekle();
 800737e:	f7fe fe0f 	bl	8005fa0 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8007382:	4b47      	ldr	r3, [pc, #284]	; (80074a0 <checkAktifCalisma+0x1094>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4b47      	ldr	r3, [pc, #284]	; (80074a4 <checkAktifCalisma+0x1098>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	4a46      	ldr	r2, [pc, #280]	; (80074a8 <checkAktifCalisma+0x109c>)
 800738e:	7812      	ldrb	r2, [r2, #0]
 8007390:	4293      	cmp	r3, r2
 8007392:	d214      	bcs.n	80073be <checkAktifCalisma+0xfb2>
 8007394:	4b37      	ldr	r3, [pc, #220]	; (8007474 <checkAktifCalisma+0x1068>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	f083 0301 	eor.w	r3, r3, #1
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d006      	beq.n	80073b0 <checkAktifCalisma+0xfa4>
 80073a2:	4b35      	ldr	r3, [pc, #212]	; (8007478 <checkAktifCalisma+0x106c>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	f083 0301 	eor.w	r3, r3, #1
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d106      	bne.n	80073be <checkAktifCalisma+0xfb2>
 80073b0:	4b38      	ldr	r3, [pc, #224]	; (8007494 <checkAktifCalisma+0x1088>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f083 0301 	eor.w	r3, r3, #1
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80073be:	4b37      	ldr	r3, [pc, #220]	; (800749c <checkAktifCalisma+0x1090>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80073c4:	4b31      	ldr	r3, [pc, #196]	; (800748c <checkAktifCalisma+0x1080>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d12b      	bne.n	8007424 <checkAktifCalisma+0x1018>
 80073cc:	4b30      	ldr	r3, [pc, #192]	; (8007490 <checkAktifCalisma+0x1084>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d003      	beq.n	80073dc <checkAktifCalisma+0xfd0>
 80073d4:	4b2e      	ldr	r3, [pc, #184]	; (8007490 <checkAktifCalisma+0x1084>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d123      	bne.n	8007424 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80073dc:	4b25      	ldr	r3, [pc, #148]	; (8007474 <checkAktifCalisma+0x1068>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d103      	bne.n	80073ec <checkAktifCalisma+0xfe0>
 80073e4:	4b24      	ldr	r3, [pc, #144]	; (8007478 <checkAktifCalisma+0x106c>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01b      	beq.n	8007424 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80073ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073f0:	481e      	ldr	r0, [pc, #120]	; (800746c <checkAktifCalisma+0x1060>)
 80073f2:	f002 fc13 	bl	8009c1c <HAL_GPIO_ReadPin>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <checkAktifCalisma+0xff8>
 80073fc:	4b1f      	ldr	r3, [pc, #124]	; (800747c <checkAktifCalisma+0x1070>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d007      	beq.n	8007414 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007404:	4b1f      	ldr	r3, [pc, #124]	; (8007484 <checkAktifCalisma+0x1078>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d103      	bne.n	8007414 <checkAktifCalisma+0x1008>
 800740c:	4b1e      	ldr	r3, [pc, #120]	; (8007488 <checkAktifCalisma+0x107c>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d007      	beq.n	8007424 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8007414:	4b1f      	ldr	r3, [pc, #124]	; (8007494 <checkAktifCalisma+0x1088>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 800741c:	4b23      	ldr	r3, [pc, #140]	; (80074ac <checkAktifCalisma+0x10a0>)
 800741e:	2201      	movs	r2, #1
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e002      	b.n	800742a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8007424:	4b21      	ldr	r3, [pc, #132]	; (80074ac <checkAktifCalisma+0x10a0>)
 8007426:	2200      	movs	r2, #0
 8007428:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800742a:	4b18      	ldr	r3, [pc, #96]	; (800748c <checkAktifCalisma+0x1080>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b02      	cmp	r3, #2
 8007430:	d140      	bne.n	80074b4 <checkAktifCalisma+0x10a8>
 8007432:	4b17      	ldr	r3, [pc, #92]	; (8007490 <checkAktifCalisma+0x1084>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d003      	beq.n	8007442 <checkAktifCalisma+0x1036>
 800743a:	4b15      	ldr	r3, [pc, #84]	; (8007490 <checkAktifCalisma+0x1084>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b03      	cmp	r3, #3
 8007440:	d138      	bne.n	80074b4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007442:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <checkAktifCalisma+0x1068>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d103      	bne.n	8007452 <checkAktifCalisma+0x1046>
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <checkAktifCalisma+0x106c>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d030      	beq.n	80074b4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8007452:	4b10      	ldr	r3, [pc, #64]	; (8007494 <checkAktifCalisma+0x1088>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d02c      	beq.n	80074b4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800745a:	4b15      	ldr	r3, [pc, #84]	; (80074b0 <checkAktifCalisma+0x10a4>)
 800745c:	2201      	movs	r2, #1
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	e02b      	b.n	80074ba <checkAktifCalisma+0x10ae>
 8007462:	bf00      	nop
 8007464:	40010800 	.word	0x40010800
 8007468:	20000c56 	.word	0x20000c56
 800746c:	40011000 	.word	0x40011000
 8007470:	20000c4f 	.word	0x20000c4f
 8007474:	20000c95 	.word	0x20000c95
 8007478:	20000c96 	.word	0x20000c96
 800747c:	20000c55 	.word	0x20000c55
 8007480:	40010c00 	.word	0x40010c00
 8007484:	20000ca5 	.word	0x20000ca5
 8007488:	20000ca6 	.word	0x20000ca6
 800748c:	20000c54 	.word	0x20000c54
 8007490:	20000c51 	.word	0x20000c51
 8007494:	20000c8b 	.word	0x20000c8b
 8007498:	20000c78 	.word	0x20000c78
 800749c:	20000c92 	.word	0x20000c92
 80074a0:	20000bd4 	.word	0x20000bd4
 80074a4:	20000bd8 	.word	0x20000bd8
 80074a8:	20000c64 	.word	0x20000c64
 80074ac:	20000c93 	.word	0x20000c93
 80074b0:	20000c94 	.word	0x20000c94
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80074b4:	4b89      	ldr	r3, [pc, #548]	; (80076dc <checkAktifCalisma+0x12d0>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80074ba:	4b89      	ldr	r3, [pc, #548]	; (80076e0 <checkAktifCalisma+0x12d4>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d107      	bne.n	80074d2 <checkAktifCalisma+0x10c6>
 80074c2:	4b88      	ldr	r3, [pc, #544]	; (80076e4 <checkAktifCalisma+0x12d8>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d103      	bne.n	80074d2 <checkAktifCalisma+0x10c6>
 80074ca:	4b84      	ldr	r3, [pc, #528]	; (80076dc <checkAktifCalisma+0x12d0>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80074d2:	2201      	movs	r2, #1
 80074d4:	2120      	movs	r1, #32
 80074d6:	4884      	ldr	r0, [pc, #528]	; (80076e8 <checkAktifCalisma+0x12dc>)
 80074d8:	f002 fbb7 	bl	8009c4a <HAL_GPIO_WritePin>
 80074dc:	e004      	b.n	80074e8 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80074de:	2200      	movs	r2, #0
 80074e0:	2120      	movs	r1, #32
 80074e2:	4881      	ldr	r0, [pc, #516]	; (80076e8 <checkAktifCalisma+0x12dc>)
 80074e4:	f002 fbb1 	bl	8009c4a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80074e8:	4b80      	ldr	r3, [pc, #512]	; (80076ec <checkAktifCalisma+0x12e0>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00e      	beq.n	800750e <checkAktifCalisma+0x1102>
 80074f0:	2102      	movs	r1, #2
 80074f2:	487f      	ldr	r0, [pc, #508]	; (80076f0 <checkAktifCalisma+0x12e4>)
 80074f4:	f002 fb92 	bl	8009c1c <HAL_GPIO_ReadPin>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d107      	bne.n	800750e <checkAktifCalisma+0x1102>
 80074fe:	4b7d      	ldr	r3, [pc, #500]	; (80076f4 <checkAktifCalisma+0x12e8>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <checkAktifCalisma+0x1102>
 8007506:	4b7c      	ldr	r3, [pc, #496]	; (80076f8 <checkAktifCalisma+0x12ec>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d112      	bne.n	8007534 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800750e:	4b7b      	ldr	r3, [pc, #492]	; (80076fc <checkAktifCalisma+0x12f0>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d066      	beq.n	80075e4 <checkAktifCalisma+0x11d8>
 8007516:	2104      	movs	r1, #4
 8007518:	4875      	ldr	r0, [pc, #468]	; (80076f0 <checkAktifCalisma+0x12e4>)
 800751a:	f002 fb7f 	bl	8009c1c <HAL_GPIO_ReadPin>
 800751e:	4603      	mov	r3, r0
 8007520:	2b01      	cmp	r3, #1
 8007522:	d15f      	bne.n	80075e4 <checkAktifCalisma+0x11d8>
 8007524:	4b73      	ldr	r3, [pc, #460]	; (80076f4 <checkAktifCalisma+0x12e8>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d05b      	beq.n	80075e4 <checkAktifCalisma+0x11d8>
 800752c:	4b72      	ldr	r3, [pc, #456]	; (80076f8 <checkAktifCalisma+0x12ec>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d057      	beq.n	80075e4 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007534:	4b72      	ldr	r3, [pc, #456]	; (8007700 <checkAktifCalisma+0x12f4>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	3301      	adds	r3, #1
 800753a:	b2da      	uxtb	r2, r3
 800753c:	4b70      	ldr	r3, [pc, #448]	; (8007700 <checkAktifCalisma+0x12f4>)
 800753e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007540:	4b6f      	ldr	r3, [pc, #444]	; (8007700 <checkAktifCalisma+0x12f4>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b09      	cmp	r3, #9
 8007546:	d908      	bls.n	800755a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007548:	4b6d      	ldr	r3, [pc, #436]	; (8007700 <checkAktifCalisma+0x12f4>)
 800754a:	2200      	movs	r2, #0
 800754c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800754e:	4b6d      	ldr	r3, [pc, #436]	; (8007704 <checkAktifCalisma+0x12f8>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	3301      	adds	r3, #1
 8007554:	b2da      	uxtb	r2, r3
 8007556:	4b6b      	ldr	r3, [pc, #428]	; (8007704 <checkAktifCalisma+0x12f8>)
 8007558:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800755a:	4b6a      	ldr	r3, [pc, #424]	; (8007704 <checkAktifCalisma+0x12f8>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b09      	cmp	r3, #9
 8007560:	d908      	bls.n	8007574 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8007562:	4b68      	ldr	r3, [pc, #416]	; (8007704 <checkAktifCalisma+0x12f8>)
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007568:	4b67      	ldr	r3, [pc, #412]	; (8007708 <checkAktifCalisma+0x12fc>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	3301      	adds	r3, #1
 800756e:	b2da      	uxtb	r2, r3
 8007570:	4b65      	ldr	r3, [pc, #404]	; (8007708 <checkAktifCalisma+0x12fc>)
 8007572:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007574:	4b64      	ldr	r3, [pc, #400]	; (8007708 <checkAktifCalisma+0x12fc>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b09      	cmp	r3, #9
 800757a:	d908      	bls.n	800758e <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 800757c:	4b62      	ldr	r3, [pc, #392]	; (8007708 <checkAktifCalisma+0x12fc>)
 800757e:	2200      	movs	r2, #0
 8007580:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8007582:	4b62      	ldr	r3, [pc, #392]	; (800770c <checkAktifCalisma+0x1300>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	3301      	adds	r3, #1
 8007588:	b2da      	uxtb	r2, r3
 800758a:	4b60      	ldr	r3, [pc, #384]	; (800770c <checkAktifCalisma+0x1300>)
 800758c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 800758e:	4b5f      	ldr	r3, [pc, #380]	; (800770c <checkAktifCalisma+0x1300>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b09      	cmp	r3, #9
 8007594:	d908      	bls.n	80075a8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8007596:	4b5d      	ldr	r3, [pc, #372]	; (800770c <checkAktifCalisma+0x1300>)
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 800759c:	4b5c      	ldr	r3, [pc, #368]	; (8007710 <checkAktifCalisma+0x1304>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	4b5a      	ldr	r3, [pc, #360]	; (8007710 <checkAktifCalisma+0x1304>)
 80075a6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80075a8:	4b59      	ldr	r3, [pc, #356]	; (8007710 <checkAktifCalisma+0x1304>)
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	4b59      	ldr	r3, [pc, #356]	; (8007714 <checkAktifCalisma+0x1308>)
 80075ae:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80075b2:	4b56      	ldr	r3, [pc, #344]	; (800770c <checkAktifCalisma+0x1300>)
 80075b4:	781a      	ldrb	r2, [r3, #0]
 80075b6:	4b57      	ldr	r3, [pc, #348]	; (8007714 <checkAktifCalisma+0x1308>)
 80075b8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80075ba:	4b53      	ldr	r3, [pc, #332]	; (8007708 <checkAktifCalisma+0x12fc>)
 80075bc:	781a      	ldrb	r2, [r3, #0]
 80075be:	4b55      	ldr	r3, [pc, #340]	; (8007714 <checkAktifCalisma+0x1308>)
 80075c0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80075c2:	4b50      	ldr	r3, [pc, #320]	; (8007704 <checkAktifCalisma+0x12f8>)
 80075c4:	781a      	ldrb	r2, [r3, #0]
 80075c6:	4b53      	ldr	r3, [pc, #332]	; (8007714 <checkAktifCalisma+0x1308>)
 80075c8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80075ca:	4b4d      	ldr	r3, [pc, #308]	; (8007700 <checkAktifCalisma+0x12f4>)
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	4b51      	ldr	r3, [pc, #324]	; (8007714 <checkAktifCalisma+0x1308>)
 80075d0:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80075d2:	4b51      	ldr	r3, [pc, #324]	; (8007718 <checkAktifCalisma+0x130c>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80075d8:	4b44      	ldr	r3, [pc, #272]	; (80076ec <checkAktifCalisma+0x12e0>)
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80075de:	4b47      	ldr	r3, [pc, #284]	; (80076fc <checkAktifCalisma+0x12f0>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80075e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075e8:	484c      	ldr	r0, [pc, #304]	; (800771c <checkAktifCalisma+0x1310>)
 80075ea:	f002 fb17 	bl	8009c1c <HAL_GPIO_ReadPin>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d016      	beq.n	8007622 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80075f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80075f8:	4848      	ldr	r0, [pc, #288]	; (800771c <checkAktifCalisma+0x1310>)
 80075fa:	f002 fb0f 	bl	8009c1c <HAL_GPIO_ReadPin>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00e      	beq.n	8007622 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007608:	4844      	ldr	r0, [pc, #272]	; (800771c <checkAktifCalisma+0x1310>)
 800760a:	f002 fb07 	bl	8009c1c <HAL_GPIO_ReadPin>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d006      	beq.n	8007622 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007614:	2140      	movs	r1, #64	; 0x40
 8007616:	4836      	ldr	r0, [pc, #216]	; (80076f0 <checkAktifCalisma+0x12e4>)
 8007618:	f002 fb00 	bl	8009c1c <HAL_GPIO_ReadPin>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d103      	bne.n	800762a <checkAktifCalisma+0x121e>
			startBasili=1;
 8007622:	4b3f      	ldr	r3, [pc, #252]	; (8007720 <checkAktifCalisma+0x1314>)
 8007624:	2201      	movs	r2, #1
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	e002      	b.n	8007630 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800762a:	4b3d      	ldr	r3, [pc, #244]	; (8007720 <checkAktifCalisma+0x1314>)
 800762c:	2200      	movs	r2, #0
 800762e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007630:	4b3b      	ldr	r3, [pc, #236]	; (8007720 <checkAktifCalisma+0x1314>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d014      	beq.n	8007662 <checkAktifCalisma+0x1256>
 8007638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800763c:	4837      	ldr	r0, [pc, #220]	; (800771c <checkAktifCalisma+0x1310>)
 800763e:	f002 faed 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007642:	4603      	mov	r3, r0
 8007644:	2b01      	cmp	r3, #1
 8007646:	d10c      	bne.n	8007662 <checkAktifCalisma+0x1256>
			hataVar=1;
 8007648:	4b36      	ldr	r3, [pc, #216]	; (8007724 <checkAktifCalisma+0x1318>)
 800764a:	2201      	movs	r2, #1
 800764c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800764e:	2001      	movs	r0, #1
 8007650:	f7fe f896 	bl	8005780 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007654:	2001      	movs	r0, #1
 8007656:	f7fe fc27 	bl	8005ea8 <hata2EEPROM>
			acilstophatasi=1;
 800765a:	4b33      	ldr	r3, [pc, #204]	; (8007728 <checkAktifCalisma+0x131c>)
 800765c:	2201      	movs	r2, #1
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	e018      	b.n	8007694 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8007662:	4b31      	ldr	r3, [pc, #196]	; (8007728 <checkAktifCalisma+0x131c>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d014      	beq.n	8007694 <checkAktifCalisma+0x1288>
 800766a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800766e:	482b      	ldr	r0, [pc, #172]	; (800771c <checkAktifCalisma+0x1310>)
 8007670:	f002 fad4 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10c      	bne.n	8007694 <checkAktifCalisma+0x1288>
 800767a:	4b29      	ldr	r3, [pc, #164]	; (8007720 <checkAktifCalisma+0x1314>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f083 0301 	eor.w	r3, r3, #1
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <checkAktifCalisma+0x131c>)
 800768a:	2200      	movs	r2, #0
 800768c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800768e:	2001      	movs	r0, #1
 8007690:	f7fe f822 	bl	80056d8 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007694:	4b25      	ldr	r3, [pc, #148]	; (800772c <checkAktifCalisma+0x1320>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	f083 0301 	eor.w	r3, r3, #1
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d04c      	beq.n	800773c <checkAktifCalisma+0x1330>
 80076a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076a6:	481d      	ldr	r0, [pc, #116]	; (800771c <checkAktifCalisma+0x1310>)
 80076a8:	f002 fab8 	bl	8009c1c <HAL_GPIO_ReadPin>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <checkAktifCalisma+0x12ae>
 80076b2:	4b1f      	ldr	r3, [pc, #124]	; (8007730 <checkAktifCalisma+0x1324>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d040      	beq.n	800773c <checkAktifCalisma+0x1330>
 80076ba:	4b1e      	ldr	r3, [pc, #120]	; (8007734 <checkAktifCalisma+0x1328>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d13c      	bne.n	800773c <checkAktifCalisma+0x1330>
			hataVar=1;
 80076c2:	4b18      	ldr	r3, [pc, #96]	; (8007724 <checkAktifCalisma+0x1318>)
 80076c4:	2201      	movs	r2, #1
 80076c6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80076c8:	2002      	movs	r0, #2
 80076ca:	f7fe f859 	bl	8005780 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80076ce:	2002      	movs	r0, #2
 80076d0:	f7fe fbea 	bl	8005ea8 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 80076d4:	4b18      	ldr	r3, [pc, #96]	; (8007738 <checkAktifCalisma+0x132c>)
 80076d6:	2201      	movs	r2, #1
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e047      	b.n	800776c <checkAktifCalisma+0x1360>
 80076dc:	20000c94 	.word	0x20000c94
 80076e0:	20000c93 	.word	0x20000c93
 80076e4:	20000c92 	.word	0x20000c92
 80076e8:	40010800 	.word	0x40010800
 80076ec:	20000c88 	.word	0x20000c88
 80076f0:	40011000 	.word	0x40011000
 80076f4:	20000c4f 	.word	0x20000c4f
 80076f8:	20000c8b 	.word	0x20000c8b
 80076fc:	20000c89 	.word	0x20000c89
 8007700:	20000c46 	.word	0x20000c46
 8007704:	20000c47 	.word	0x20000c47
 8007708:	200009bf 	.word	0x200009bf
 800770c:	200009c0 	.word	0x200009c0
 8007710:	20000c48 	.word	0x20000c48
 8007714:	20000b38 	.word	0x20000b38
 8007718:	20000c75 	.word	0x20000c75
 800771c:	40010c00 	.word	0x40010c00
 8007720:	20000c97 	.word	0x20000c97
 8007724:	20000c9e 	.word	0x20000c9e
 8007728:	20000c99 	.word	0x20000c99
 800772c:	20000ca0 	.word	0x20000ca0
 8007730:	20000caa 	.word	0x20000caa
 8007734:	20000c4d 	.word	0x20000c4d
 8007738:	20000c9a 	.word	0x20000c9a
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800773c:	4b97      	ldr	r3, [pc, #604]	; (800799c <checkAktifCalisma+0x1590>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d013      	beq.n	800776c <checkAktifCalisma+0x1360>
 8007744:	4b96      	ldr	r3, [pc, #600]	; (80079a0 <checkAktifCalisma+0x1594>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00f      	beq.n	800776c <checkAktifCalisma+0x1360>
 800774c:	4b95      	ldr	r3, [pc, #596]	; (80079a4 <checkAktifCalisma+0x1598>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	f083 0301 	eor.w	r3, r3, #1
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d008      	beq.n	800776c <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 800775a:	4b90      	ldr	r3, [pc, #576]	; (800799c <checkAktifCalisma+0x1590>)
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007760:	4b91      	ldr	r3, [pc, #580]	; (80079a8 <checkAktifCalisma+0x159c>)
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007766:	2002      	movs	r0, #2
 8007768:	f7fd ffb6 	bl	80056d8 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 800776c:	4b8f      	ldr	r3, [pc, #572]	; (80079ac <checkAktifCalisma+0x15a0>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d11c      	bne.n	80077ae <checkAktifCalisma+0x13a2>
 8007774:	4b8e      	ldr	r3, [pc, #568]	; (80079b0 <checkAktifCalisma+0x15a4>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d118      	bne.n	80077ae <checkAktifCalisma+0x13a2>
 800777c:	4b8d      	ldr	r3, [pc, #564]	; (80079b4 <checkAktifCalisma+0x15a8>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d014      	beq.n	80077ae <checkAktifCalisma+0x13a2>
 8007784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007788:	488b      	ldr	r0, [pc, #556]	; (80079b8 <checkAktifCalisma+0x15ac>)
 800778a:	f002 fa47 	bl	8009c1c <HAL_GPIO_ReadPin>
 800778e:	4603      	mov	r3, r0
 8007790:	2b01      	cmp	r3, #1
 8007792:	d10c      	bne.n	80077ae <checkAktifCalisma+0x13a2>
			hataVar=1;
 8007794:	4b89      	ldr	r3, [pc, #548]	; (80079bc <checkAktifCalisma+0x15b0>)
 8007796:	2201      	movs	r2, #1
 8007798:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800779a:	2003      	movs	r0, #3
 800779c:	f7fd fff0 	bl	8005780 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80077a0:	2003      	movs	r0, #3
 80077a2:	f7fe fb81 	bl	8005ea8 <hata2EEPROM>
			basinchatasi=1;
 80077a6:	4b86      	ldr	r3, [pc, #536]	; (80079c0 <checkAktifCalisma+0x15b4>)
 80077a8:	2201      	movs	r2, #1
 80077aa:	701a      	strb	r2, [r3, #0]
 80077ac:	e015      	b.n	80077da <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80077ae:	4b84      	ldr	r3, [pc, #528]	; (80079c0 <checkAktifCalisma+0x15b4>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d011      	beq.n	80077da <checkAktifCalisma+0x13ce>
 80077b6:	4b7d      	ldr	r3, [pc, #500]	; (80079ac <checkAktifCalisma+0x15a0>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d10d      	bne.n	80077da <checkAktifCalisma+0x13ce>
 80077be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077c2:	4880      	ldr	r0, [pc, #512]	; (80079c4 <checkAktifCalisma+0x15b8>)
 80077c4:	f002 fa2a 	bl	8009c1c <HAL_GPIO_ReadPin>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d105      	bne.n	80077da <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 80077ce:	4b7c      	ldr	r3, [pc, #496]	; (80079c0 <checkAktifCalisma+0x15b4>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80077d4:	2003      	movs	r0, #3
 80077d6:	f7fd ff7f 	bl	80056d8 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80077da:	4b7b      	ldr	r3, [pc, #492]	; (80079c8 <checkAktifCalisma+0x15bc>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d103      	bne.n	80077ea <checkAktifCalisma+0x13de>
 80077e2:	4b7a      	ldr	r3, [pc, #488]	; (80079cc <checkAktifCalisma+0x15c0>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01c      	beq.n	8007824 <checkAktifCalisma+0x1418>
 80077ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077ee:	4878      	ldr	r0, [pc, #480]	; (80079d0 <checkAktifCalisma+0x15c4>)
 80077f0:	f002 fa14 	bl	8009c1c <HAL_GPIO_ReadPin>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d114      	bne.n	8007824 <checkAktifCalisma+0x1418>
 80077fa:	4b76      	ldr	r3, [pc, #472]	; (80079d4 <checkAktifCalisma+0x15c8>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d003      	beq.n	800780a <checkAktifCalisma+0x13fe>
 8007802:	4b74      	ldr	r3, [pc, #464]	; (80079d4 <checkAktifCalisma+0x15c8>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b03      	cmp	r3, #3
 8007808:	d10c      	bne.n	8007824 <checkAktifCalisma+0x1418>
			hataVar=1;
 800780a:	4b6c      	ldr	r3, [pc, #432]	; (80079bc <checkAktifCalisma+0x15b0>)
 800780c:	2201      	movs	r2, #1
 800780e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007810:	2004      	movs	r0, #4
 8007812:	f7fd ffb5 	bl	8005780 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007816:	2004      	movs	r0, #4
 8007818:	f7fe fb46 	bl	8005ea8 <hata2EEPROM>
			katkapisivicihatasi=1;
 800781c:	4b6e      	ldr	r3, [pc, #440]	; (80079d8 <checkAktifCalisma+0x15cc>)
 800781e:	2201      	movs	r2, #1
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	e01f      	b.n	8007864 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007824:	4b6c      	ldr	r3, [pc, #432]	; (80079d8 <checkAktifCalisma+0x15cc>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01b      	beq.n	8007864 <checkAktifCalisma+0x1458>
 800782c:	4b6b      	ldr	r3, [pc, #428]	; (80079dc <checkAktifCalisma+0x15d0>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d017      	beq.n	8007864 <checkAktifCalisma+0x1458>
 8007834:	4b64      	ldr	r3, [pc, #400]	; (80079c8 <checkAktifCalisma+0x15bc>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f083 0301 	eor.w	r3, r3, #1
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d010      	beq.n	8007864 <checkAktifCalisma+0x1458>
 8007842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007846:	4862      	ldr	r0, [pc, #392]	; (80079d0 <checkAktifCalisma+0x15c4>)
 8007848:	f002 f9e8 	bl	8009c1c <HAL_GPIO_ReadPin>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d108      	bne.n	8007864 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8007852:	4b61      	ldr	r3, [pc, #388]	; (80079d8 <checkAktifCalisma+0x15cc>)
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007858:	4b5c      	ldr	r3, [pc, #368]	; (80079cc <checkAktifCalisma+0x15c0>)
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800785e:	2004      	movs	r0, #4
 8007860:	f7fd ff3a 	bl	80056d8 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007864:	4b58      	ldr	r3, [pc, #352]	; (80079c8 <checkAktifCalisma+0x15bc>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <checkAktifCalisma+0x1468>
 800786c:	4b5c      	ldr	r3, [pc, #368]	; (80079e0 <checkAktifCalisma+0x15d4>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01c      	beq.n	80078ae <checkAktifCalisma+0x14a2>
 8007874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007878:	4855      	ldr	r0, [pc, #340]	; (80079d0 <checkAktifCalisma+0x15c4>)
 800787a:	f002 f9cf 	bl	8009c1c <HAL_GPIO_ReadPin>
 800787e:	4603      	mov	r3, r0
 8007880:	2b01      	cmp	r3, #1
 8007882:	d114      	bne.n	80078ae <checkAktifCalisma+0x14a2>
 8007884:	4b53      	ldr	r3, [pc, #332]	; (80079d4 <checkAktifCalisma+0x15c8>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d003      	beq.n	8007894 <checkAktifCalisma+0x1488>
 800788c:	4b51      	ldr	r3, [pc, #324]	; (80079d4 <checkAktifCalisma+0x15c8>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b03      	cmp	r3, #3
 8007892:	d10c      	bne.n	80078ae <checkAktifCalisma+0x14a2>
			hataVar=1;
 8007894:	4b49      	ldr	r3, [pc, #292]	; (80079bc <checkAktifCalisma+0x15b0>)
 8007896:	2201      	movs	r2, #1
 8007898:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800789a:	2005      	movs	r0, #5
 800789c:	f7fd ff70 	bl	8005780 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80078a0:	2005      	movs	r0, #5
 80078a2:	f7fe fb01 	bl	8005ea8 <hata2EEPROM>
			tablakapisivicihatasi=1;
 80078a6:	4b4f      	ldr	r3, [pc, #316]	; (80079e4 <checkAktifCalisma+0x15d8>)
 80078a8:	2201      	movs	r2, #1
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	e023      	b.n	80078f6 <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80078ae:	4b4d      	ldr	r3, [pc, #308]	; (80079e4 <checkAktifCalisma+0x15d8>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01f      	beq.n	80078f6 <checkAktifCalisma+0x14ea>
 80078b6:	4b49      	ldr	r3, [pc, #292]	; (80079dc <checkAktifCalisma+0x15d0>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01b      	beq.n	80078f6 <checkAktifCalisma+0x14ea>
 80078be:	4b42      	ldr	r3, [pc, #264]	; (80079c8 <checkAktifCalisma+0x15bc>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f083 0301 	eor.w	r3, r3, #1
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d014      	beq.n	80078f6 <checkAktifCalisma+0x14ea>
 80078cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078d0:	483f      	ldr	r0, [pc, #252]	; (80079d0 <checkAktifCalisma+0x15c4>)
 80078d2:	f002 f9a3 	bl	8009c1c <HAL_GPIO_ReadPin>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10c      	bne.n	80078f6 <checkAktifCalisma+0x14ea>
 80078dc:	4b3f      	ldr	r3, [pc, #252]	; (80079dc <checkAktifCalisma+0x15d0>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d008      	beq.n	80078f6 <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 80078e4:	4b3f      	ldr	r3, [pc, #252]	; (80079e4 <checkAktifCalisma+0x15d8>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80078ea:	4b3d      	ldr	r3, [pc, #244]	; (80079e0 <checkAktifCalisma+0x15d4>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80078f0:	2005      	movs	r0, #5
 80078f2:	f7fd fef1 	bl	80056d8 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80078f6:	4b2f      	ldr	r3, [pc, #188]	; (80079b4 <checkAktifCalisma+0x15a8>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d107      	bne.n	800790e <checkAktifCalisma+0x1502>
 80078fe:	4b29      	ldr	r3, [pc, #164]	; (80079a4 <checkAktifCalisma+0x1598>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d103      	bne.n	800790e <checkAktifCalisma+0x1502>
 8007906:	4b38      	ldr	r3, [pc, #224]	; (80079e8 <checkAktifCalisma+0x15dc>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d014      	beq.n	8007938 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 800790e:	4b37      	ldr	r3, [pc, #220]	; (80079ec <checkAktifCalisma+0x15e0>)
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b37      	ldr	r3, [pc, #220]	; (80079f0 <checkAktifCalisma+0x15e4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	4a36      	ldr	r2, [pc, #216]	; (80079f4 <checkAktifCalisma+0x15e8>)
 800791a:	7812      	ldrb	r2, [r2, #0]
 800791c:	4293      	cmp	r3, r2
 800791e:	d30b      	bcc.n	8007938 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007920:	4b26      	ldr	r3, [pc, #152]	; (80079bc <checkAktifCalisma+0x15b0>)
 8007922:	2201      	movs	r2, #1
 8007924:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007926:	2006      	movs	r0, #6
 8007928:	f7fd ff2a 	bl	8005780 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 800792c:	2006      	movs	r0, #6
 800792e:	f7fe fabb 	bl	8005ea8 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007932:	4b31      	ldr	r3, [pc, #196]	; (80079f8 <checkAktifCalisma+0x15ec>)
 8007934:	2201      	movs	r2, #1
 8007936:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007938:	4b2f      	ldr	r3, [pc, #188]	; (80079f8 <checkAktifCalisma+0x15ec>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d013      	beq.n	8007968 <checkAktifCalisma+0x155c>
 8007940:	2108      	movs	r1, #8
 8007942:	4823      	ldr	r0, [pc, #140]	; (80079d0 <checkAktifCalisma+0x15c4>)
 8007944:	f002 f96a 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00c      	beq.n	8007968 <checkAktifCalisma+0x155c>
 800794e:	4b1e      	ldr	r3, [pc, #120]	; (80079c8 <checkAktifCalisma+0x15bc>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f083 0301 	eor.w	r3, r3, #1
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 800795c:	4b26      	ldr	r3, [pc, #152]	; (80079f8 <checkAktifCalisma+0x15ec>)
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007962:	2006      	movs	r0, #6
 8007964:	f7fd feb8 	bl	80056d8 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007968:	4b24      	ldr	r3, [pc, #144]	; (80079fc <checkAktifCalisma+0x15f0>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10b      	bne.n	8007988 <checkAktifCalisma+0x157c>
 8007970:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <checkAktifCalisma+0x1598>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d107      	bne.n	8007988 <checkAktifCalisma+0x157c>
 8007978:	4b21      	ldr	r3, [pc, #132]	; (8007a00 <checkAktifCalisma+0x15f4>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d103      	bne.n	8007988 <checkAktifCalisma+0x157c>
 8007980:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <checkAktifCalisma+0x15dc>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d03f      	beq.n	8007a08 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007988:	4b1e      	ldr	r3, [pc, #120]	; (8007a04 <checkAktifCalisma+0x15f8>)
 800798a:	2200      	movs	r2, #0
 800798c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800798e:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <checkAktifCalisma+0x15c0>)
 8007990:	2201      	movs	r2, #1
 8007992:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007994:	4b12      	ldr	r3, [pc, #72]	; (80079e0 <checkAktifCalisma+0x15d4>)
 8007996:	2201      	movs	r2, #1
 8007998:	701a      	strb	r2, [r3, #0]
 800799a:	e03c      	b.n	8007a16 <checkAktifCalisma+0x160a>
 800799c:	20000c9a 	.word	0x20000c9a
 80079a0:	20000ca0 	.word	0x20000ca0
 80079a4:	20000c81 	.word	0x20000c81
 80079a8:	20000caa 	.word	0x20000caa
 80079ac:	20000c4c 	.word	0x20000c4c
 80079b0:	20000c50 	.word	0x20000c50
 80079b4:	20000c9d 	.word	0x20000c9d
 80079b8:	40011000 	.word	0x40011000
 80079bc:	20000c9e 	.word	0x20000c9e
 80079c0:	20000ca7 	.word	0x20000ca7
 80079c4:	40010c00 	.word	0x40010c00
 80079c8:	20000c97 	.word	0x20000c97
 80079cc:	20000cab 	.word	0x20000cab
 80079d0:	40010800 	.word	0x40010800
 80079d4:	20000c51 	.word	0x20000c51
 80079d8:	20000ca8 	.word	0x20000ca8
 80079dc:	20000c8b 	.word	0x20000c8b
 80079e0:	20000cac 	.word	0x20000cac
 80079e4:	20000ca9 	.word	0x20000ca9
 80079e8:	20000c80 	.word	0x20000c80
 80079ec:	20000bd4 	.word	0x20000bd4
 80079f0:	20000be8 	.word	0x20000be8
 80079f4:	20000c61 	.word	0x20000c61
 80079f8:	20000c98 	.word	0x20000c98
 80079fc:	20000c7e 	.word	0x20000c7e
 8007a00:	20000c7f 	.word	0x20000c7f
 8007a04:	20000c9f 	.word	0x20000c9f
		} else {
			makineCalisiyor=1;
 8007a08:	4b1e      	ldr	r3, [pc, #120]	; (8007a84 <checkAktifCalisma+0x1678>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007a0e:	4b1e      	ldr	r3, [pc, #120]	; (8007a88 <checkAktifCalisma+0x167c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a1e      	ldr	r2, [pc, #120]	; (8007a8c <checkAktifCalisma+0x1680>)
 8007a14:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007a16:	4b1e      	ldr	r3, [pc, #120]	; (8007a90 <checkAktifCalisma+0x1684>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d02f      	beq.n	8007a7e <checkAktifCalisma+0x1672>
 8007a1e:	4b1d      	ldr	r3, [pc, #116]	; (8007a94 <checkAktifCalisma+0x1688>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	f083 0301 	eor.w	r3, r3, #1
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d028      	beq.n	8007a7e <checkAktifCalisma+0x1672>
 8007a2c:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <checkAktifCalisma+0x168c>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	f083 0301 	eor.w	r3, r3, #1
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d021      	beq.n	8007a7e <checkAktifCalisma+0x1672>
 8007a3a:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <checkAktifCalisma+0x1690>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	f083 0301 	eor.w	r3, r3, #1
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01a      	beq.n	8007a7e <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007a48:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <checkAktifCalisma+0x1694>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f083 0301 	eor.w	r3, r3, #1
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d013      	beq.n	8007a7e <checkAktifCalisma+0x1672>
 8007a56:	4b13      	ldr	r3, [pc, #76]	; (8007aa4 <checkAktifCalisma+0x1698>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f083 0301 	eor.w	r3, r3, #1
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00c      	beq.n	8007a7e <checkAktifCalisma+0x1672>
 8007a64:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <checkAktifCalisma+0x169c>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f083 0301 	eor.w	r3, r3, #1
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <checkAktifCalisma+0x1672>
			hataVar=0;
 8007a72:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <checkAktifCalisma+0x1684>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007a78:	2007      	movs	r0, #7
 8007a7a:	f7fd fe2d 	bl	80056d8 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007a7e:	bf00      	nop
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000c9f 	.word	0x20000c9f
 8007a88:	20000bd4 	.word	0x20000bd4
 8007a8c:	20000be8 	.word	0x20000be8
 8007a90:	20000c9e 	.word	0x20000c9e
 8007a94:	20000c99 	.word	0x20000c99
 8007a98:	20000c9a 	.word	0x20000c9a
 8007a9c:	20000ca7 	.word	0x20000ca7
 8007aa0:	20000ca8 	.word	0x20000ca8
 8007aa4:	20000ca9 	.word	0x20000ca9
 8007aa8:	20000c98 	.word	0x20000c98

08007aac <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007ab0:	4b8b      	ldr	r3, [pc, #556]	; (8007ce0 <checkDemoModCalisma+0x234>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	f040 8229 	bne.w	8007f0c <checkDemoModCalisma+0x460>
 8007aba:	4b8a      	ldr	r3, [pc, #552]	; (8007ce4 <checkDemoModCalisma+0x238>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8224 	beq.w	8007f0c <checkDemoModCalisma+0x460>
 8007ac4:	4b88      	ldr	r3, [pc, #544]	; (8007ce8 <checkDemoModCalisma+0x23c>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f040 821f 	bne.w	8007f0c <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007ace:	2102      	movs	r1, #2
 8007ad0:	4886      	ldr	r0, [pc, #536]	; (8007cec <checkDemoModCalisma+0x240>)
 8007ad2:	f002 f8a3 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d11d      	bne.n	8007b18 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007adc:	4b84      	ldr	r3, [pc, #528]	; (8007cf0 <checkDemoModCalisma+0x244>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	f083 0301 	eor.w	r3, r3, #1
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d016      	beq.n	8007b18 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007aea:	4b82      	ldr	r3, [pc, #520]	; (8007cf4 <checkDemoModCalisma+0x248>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	f083 0301 	eor.w	r3, r3, #1
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00f      	beq.n	8007b18 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007af8:	4b7f      	ldr	r3, [pc, #508]	; (8007cf8 <checkDemoModCalisma+0x24c>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	f083 0301 	eor.w	r3, r3, #1
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d008      	beq.n	8007b18 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007b06:	2201      	movs	r2, #1
 8007b08:	2104      	movs	r1, #4
 8007b0a:	487c      	ldr	r0, [pc, #496]	; (8007cfc <checkDemoModCalisma+0x250>)
 8007b0c:	f002 f89d 	bl	8009c4a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007b10:	4b7b      	ldr	r3, [pc, #492]	; (8007d00 <checkDemoModCalisma+0x254>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	e00e      	b.n	8007b36 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007b18:	2102      	movs	r1, #2
 8007b1a:	4874      	ldr	r0, [pc, #464]	; (8007cec <checkDemoModCalisma+0x240>)
 8007b1c:	f002 f87e 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d107      	bne.n	8007b36 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007b26:	2200      	movs	r2, #0
 8007b28:	2104      	movs	r1, #4
 8007b2a:	4874      	ldr	r0, [pc, #464]	; (8007cfc <checkDemoModCalisma+0x250>)
 8007b2c:	f002 f88d 	bl	8009c4a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007b30:	4b73      	ldr	r3, [pc, #460]	; (8007d00 <checkDemoModCalisma+0x254>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007b36:	4b72      	ldr	r3, [pc, #456]	; (8007d00 <checkDemoModCalisma+0x254>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <checkDemoModCalisma+0xaa>
 8007b3e:	4b6d      	ldr	r3, [pc, #436]	; (8007cf4 <checkDemoModCalisma+0x248>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d107      	bne.n	8007b56 <checkDemoModCalisma+0xaa>
 8007b46:	4b6c      	ldr	r3, [pc, #432]	; (8007cf8 <checkDemoModCalisma+0x24c>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d103      	bne.n	8007b56 <checkDemoModCalisma+0xaa>
 8007b4e:	4b68      	ldr	r3, [pc, #416]	; (8007cf0 <checkDemoModCalisma+0x244>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00c      	beq.n	8007b70 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007b56:	2201      	movs	r2, #1
 8007b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b5c:	4867      	ldr	r0, [pc, #412]	; (8007cfc <checkDemoModCalisma+0x250>)
 8007b5e:	f002 f874 	bl	8009c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007b62:	2201      	movs	r2, #1
 8007b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b68:	4864      	ldr	r0, [pc, #400]	; (8007cfc <checkDemoModCalisma+0x250>)
 8007b6a:	f002 f86e 	bl	8009c4a <HAL_GPIO_WritePin>
 8007b6e:	e00b      	b.n	8007b88 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007b70:	2200      	movs	r2, #0
 8007b72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b76:	4861      	ldr	r0, [pc, #388]	; (8007cfc <checkDemoModCalisma+0x250>)
 8007b78:	f002 f867 	bl	8009c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b82:	485e      	ldr	r0, [pc, #376]	; (8007cfc <checkDemoModCalisma+0x250>)
 8007b84:	f002 f861 	bl	8009c4a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007b88:	2102      	movs	r1, #2
 8007b8a:	4858      	ldr	r0, [pc, #352]	; (8007cec <checkDemoModCalisma+0x240>)
 8007b8c:	f002 f846 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d10d      	bne.n	8007bb2 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b9a:	4854      	ldr	r0, [pc, #336]	; (8007cec <checkDemoModCalisma+0x240>)
 8007b9c:	f002 f83e 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d105      	bne.n	8007bb2 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007ba6:	4b56      	ldr	r3, [pc, #344]	; (8007d00 <checkDemoModCalisma+0x254>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	f083 0301 	eor.w	r3, r3, #1
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007bb2:	2102      	movs	r1, #2
 8007bb4:	484d      	ldr	r0, [pc, #308]	; (8007cec <checkDemoModCalisma+0x240>)
 8007bb6:	f002 f831 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d125      	bne.n	8007c0c <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007bc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bc4:	4849      	ldr	r0, [pc, #292]	; (8007cec <checkDemoModCalisma+0x240>)
 8007bc6:	f002 f829 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d11d      	bne.n	8007c0c <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007bd0:	4b4b      	ldr	r3, [pc, #300]	; (8007d00 <checkDemoModCalisma+0x254>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	f083 0301 	eor.w	r3, r3, #1
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d016      	beq.n	8007c0c <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007bde:	4b44      	ldr	r3, [pc, #272]	; (8007cf0 <checkDemoModCalisma+0x244>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	f083 0301 	eor.w	r3, r3, #1
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00f      	beq.n	8007c0c <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007bec:	4b42      	ldr	r3, [pc, #264]	; (8007cf8 <checkDemoModCalisma+0x24c>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	f083 0301 	eor.w	r3, r3, #1
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	2120      	movs	r1, #32
 8007bfe:	483b      	ldr	r0, [pc, #236]	; (8007cec <checkDemoModCalisma+0x240>)
 8007c00:	f002 f823 	bl	8009c4a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007c04:	4b3b      	ldr	r3, [pc, #236]	; (8007cf4 <checkDemoModCalisma+0x248>)
 8007c06:	2201      	movs	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e007      	b.n	8007c1c <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2120      	movs	r1, #32
 8007c10:	4836      	ldr	r0, [pc, #216]	; (8007cec <checkDemoModCalisma+0x240>)
 8007c12:	f002 f81a 	bl	8009c4a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007c16:	4b37      	ldr	r3, [pc, #220]	; (8007cf4 <checkDemoModCalisma+0x248>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007c1c:	2102      	movs	r1, #2
 8007c1e:	4833      	ldr	r0, [pc, #204]	; (8007cec <checkDemoModCalisma+0x240>)
 8007c20:	f001 fffc 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d125      	bne.n	8007c76 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007c2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c2e:	482f      	ldr	r0, [pc, #188]	; (8007cec <checkDemoModCalisma+0x240>)
 8007c30:	f001 fff4 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d11d      	bne.n	8007c76 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007c3a:	4b31      	ldr	r3, [pc, #196]	; (8007d00 <checkDemoModCalisma+0x254>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	f083 0301 	eor.w	r3, r3, #1
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d016      	beq.n	8007c76 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007c48:	4b2a      	ldr	r3, [pc, #168]	; (8007cf4 <checkDemoModCalisma+0x248>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	f083 0301 	eor.w	r3, r3, #1
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00f      	beq.n	8007c76 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007c56:	4b26      	ldr	r3, [pc, #152]	; (8007cf0 <checkDemoModCalisma+0x244>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f083 0301 	eor.w	r3, r3, #1
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007c64:	2201      	movs	r2, #1
 8007c66:	2110      	movs	r1, #16
 8007c68:	4820      	ldr	r0, [pc, #128]	; (8007cec <checkDemoModCalisma+0x240>)
 8007c6a:	f001 ffee 	bl	8009c4a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007c6e:	4b22      	ldr	r3, [pc, #136]	; (8007cf8 <checkDemoModCalisma+0x24c>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	701a      	strb	r2, [r3, #0]
 8007c74:	e007      	b.n	8007c86 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007c76:	2200      	movs	r2, #0
 8007c78:	2110      	movs	r1, #16
 8007c7a:	481c      	ldr	r0, [pc, #112]	; (8007cec <checkDemoModCalisma+0x240>)
 8007c7c:	f001 ffe5 	bl	8009c4a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007c80:	4b1d      	ldr	r3, [pc, #116]	; (8007cf8 <checkDemoModCalisma+0x24c>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007c86:	2104      	movs	r1, #4
 8007c88:	4818      	ldr	r0, [pc, #96]	; (8007cec <checkDemoModCalisma+0x240>)
 8007c8a:	f001 ffc7 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d139      	bne.n	8007d08 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007c94:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <checkDemoModCalisma+0x254>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f083 0301 	eor.w	r3, r3, #1
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d032      	beq.n	8007d08 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <checkDemoModCalisma+0x24c>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f083 0301 	eor.w	r3, r3, #1
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d02b      	beq.n	8007d08 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007cb0:	4b10      	ldr	r3, [pc, #64]	; (8007cf4 <checkDemoModCalisma+0x248>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	f083 0301 	eor.w	r3, r3, #1
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d024      	beq.n	8007d08 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	2102      	movs	r1, #2
 8007cc2:	480e      	ldr	r0, [pc, #56]	; (8007cfc <checkDemoModCalisma+0x250>)
 8007cc4:	f001 ffc1 	bl	8009c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007cc8:	2201      	movs	r2, #1
 8007cca:	2101      	movs	r1, #1
 8007ccc:	480b      	ldr	r0, [pc, #44]	; (8007cfc <checkDemoModCalisma+0x250>)
 8007cce:	f001 ffbc 	bl	8009c4a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <checkDemoModCalisma+0x244>)
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007cd8:	4b0a      	ldr	r3, [pc, #40]	; (8007d04 <checkDemoModCalisma+0x258>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	701a      	strb	r2, [r3, #0]
 8007cde:	e027      	b.n	8007d30 <checkDemoModCalisma+0x284>
 8007ce0:	20000c67 	.word	0x20000c67
 8007ce4:	20000c9b 	.word	0x20000c9b
 8007ce8:	20000c66 	.word	0x20000c66
 8007cec:	40011000 	.word	0x40011000
 8007cf0:	20000ca2 	.word	0x20000ca2
 8007cf4:	20000ca3 	.word	0x20000ca3
 8007cf8:	20000ca4 	.word	0x20000ca4
 8007cfc:	40010c00 	.word	0x40010c00
 8007d00:	20000ca1 	.word	0x20000ca1
 8007d04:	20000c87 	.word	0x20000c87
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007d08:	2104      	movs	r1, #4
 8007d0a:	48a0      	ldr	r0, [pc, #640]	; (8007f8c <checkDemoModCalisma+0x4e0>)
 8007d0c:	f001 ff86 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d10c      	bne.n	8007d30 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007d16:	2200      	movs	r2, #0
 8007d18:	2102      	movs	r1, #2
 8007d1a:	489d      	ldr	r0, [pc, #628]	; (8007f90 <checkDemoModCalisma+0x4e4>)
 8007d1c:	f001 ff95 	bl	8009c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007d20:	2200      	movs	r2, #0
 8007d22:	2101      	movs	r1, #1
 8007d24:	489a      	ldr	r0, [pc, #616]	; (8007f90 <checkDemoModCalisma+0x4e4>)
 8007d26:	f001 ff90 	bl	8009c4a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007d2a:	4b9a      	ldr	r3, [pc, #616]	; (8007f94 <checkDemoModCalisma+0x4e8>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007d30:	2104      	movs	r1, #4
 8007d32:	4896      	ldr	r0, [pc, #600]	; (8007f8c <checkDemoModCalisma+0x4e0>)
 8007d34:	f001 ff72 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d10d      	bne.n	8007d5a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007d3e:	2201      	movs	r2, #1
 8007d40:	2180      	movs	r1, #128	; 0x80
 8007d42:	4895      	ldr	r0, [pc, #596]	; (8007f98 <checkDemoModCalisma+0x4ec>)
 8007d44:	f001 ff81 	bl	8009c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007d48:	2201      	movs	r2, #1
 8007d4a:	2120      	movs	r1, #32
 8007d4c:	4892      	ldr	r0, [pc, #584]	; (8007f98 <checkDemoModCalisma+0x4ec>)
 8007d4e:	f001 ff7c 	bl	8009c4a <HAL_GPIO_WritePin>
			timer3 = millis;
 8007d52:	4b92      	ldr	r3, [pc, #584]	; (8007f9c <checkDemoModCalisma+0x4f0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a92      	ldr	r2, [pc, #584]	; (8007fa0 <checkDemoModCalisma+0x4f4>)
 8007d58:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007d5a:	4b90      	ldr	r3, [pc, #576]	; (8007f9c <checkDemoModCalisma+0x4f0>)
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	4b90      	ldr	r3, [pc, #576]	; (8007fa0 <checkDemoModCalisma+0x4f4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d909      	bls.n	8007d7c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2180      	movs	r1, #128	; 0x80
 8007d6c:	488a      	ldr	r0, [pc, #552]	; (8007f98 <checkDemoModCalisma+0x4ec>)
 8007d6e:	f001 ff6c 	bl	8009c4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007d72:	2200      	movs	r2, #0
 8007d74:	2120      	movs	r1, #32
 8007d76:	4888      	ldr	r0, [pc, #544]	; (8007f98 <checkDemoModCalisma+0x4ec>)
 8007d78:	f001 ff67 	bl	8009c4a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007d7c:	2102      	movs	r1, #2
 8007d7e:	4883      	ldr	r0, [pc, #524]	; (8007f8c <checkDemoModCalisma+0x4e0>)
 8007d80:	f001 ff4c 	bl	8009c1c <HAL_GPIO_ReadPin>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d108      	bne.n	8007d9c <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	2140      	movs	r1, #64	; 0x40
 8007d8e:	4882      	ldr	r0, [pc, #520]	; (8007f98 <checkDemoModCalisma+0x4ec>)
 8007d90:	f001 ff5b 	bl	8009c4a <HAL_GPIO_WritePin>
			timer3 = millis;
 8007d94:	4b81      	ldr	r3, [pc, #516]	; (8007f9c <checkDemoModCalisma+0x4f0>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a81      	ldr	r2, [pc, #516]	; (8007fa0 <checkDemoModCalisma+0x4f4>)
 8007d9a:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007d9c:	4b7f      	ldr	r3, [pc, #508]	; (8007f9c <checkDemoModCalisma+0x4f0>)
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	4b7f      	ldr	r3, [pc, #508]	; (8007fa0 <checkDemoModCalisma+0x4f4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d904      	bls.n	8007db4 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007daa:	2200      	movs	r2, #0
 8007dac:	2140      	movs	r1, #64	; 0x40
 8007dae:	487a      	ldr	r0, [pc, #488]	; (8007f98 <checkDemoModCalisma+0x4ec>)
 8007db0:	f001 ff4b 	bl	8009c4a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007db4:	4b7b      	ldr	r3, [pc, #492]	; (8007fa4 <checkDemoModCalisma+0x4f8>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d058      	beq.n	8007e6e <checkDemoModCalisma+0x3c2>
 8007dbc:	4b7a      	ldr	r3, [pc, #488]	; (8007fa8 <checkDemoModCalisma+0x4fc>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d054      	beq.n	8007e6e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007dc4:	4b79      	ldr	r3, [pc, #484]	; (8007fac <checkDemoModCalisma+0x500>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	4b77      	ldr	r3, [pc, #476]	; (8007fac <checkDemoModCalisma+0x500>)
 8007dce:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007dd0:	4b76      	ldr	r3, [pc, #472]	; (8007fac <checkDemoModCalisma+0x500>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b09      	cmp	r3, #9
 8007dd6:	d908      	bls.n	8007dea <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007dd8:	4b74      	ldr	r3, [pc, #464]	; (8007fac <checkDemoModCalisma+0x500>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007dde:	4b74      	ldr	r3, [pc, #464]	; (8007fb0 <checkDemoModCalisma+0x504>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	4b72      	ldr	r3, [pc, #456]	; (8007fb0 <checkDemoModCalisma+0x504>)
 8007de8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007dea:	4b71      	ldr	r3, [pc, #452]	; (8007fb0 <checkDemoModCalisma+0x504>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	d908      	bls.n	8007e04 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007df2:	4b6f      	ldr	r3, [pc, #444]	; (8007fb0 <checkDemoModCalisma+0x504>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007df8:	4b6e      	ldr	r3, [pc, #440]	; (8007fb4 <checkDemoModCalisma+0x508>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	4b6c      	ldr	r3, [pc, #432]	; (8007fb4 <checkDemoModCalisma+0x508>)
 8007e02:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007e04:	4b6b      	ldr	r3, [pc, #428]	; (8007fb4 <checkDemoModCalisma+0x508>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b09      	cmp	r3, #9
 8007e0a:	d908      	bls.n	8007e1e <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007e0c:	4b69      	ldr	r3, [pc, #420]	; (8007fb4 <checkDemoModCalisma+0x508>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007e12:	4b69      	ldr	r3, [pc, #420]	; (8007fb8 <checkDemoModCalisma+0x50c>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	3301      	adds	r3, #1
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	4b67      	ldr	r3, [pc, #412]	; (8007fb8 <checkDemoModCalisma+0x50c>)
 8007e1c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007e1e:	4b66      	ldr	r3, [pc, #408]	; (8007fb8 <checkDemoModCalisma+0x50c>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b09      	cmp	r3, #9
 8007e24:	d908      	bls.n	8007e38 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007e26:	4b64      	ldr	r3, [pc, #400]	; (8007fb8 <checkDemoModCalisma+0x50c>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007e2c:	4b63      	ldr	r3, [pc, #396]	; (8007fbc <checkDemoModCalisma+0x510>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	3301      	adds	r3, #1
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	4b61      	ldr	r3, [pc, #388]	; (8007fbc <checkDemoModCalisma+0x510>)
 8007e36:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007e38:	4b60      	ldr	r3, [pc, #384]	; (8007fbc <checkDemoModCalisma+0x510>)
 8007e3a:	781a      	ldrb	r2, [r3, #0]
 8007e3c:	4b60      	ldr	r3, [pc, #384]	; (8007fc0 <checkDemoModCalisma+0x514>)
 8007e3e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007e42:	4b5d      	ldr	r3, [pc, #372]	; (8007fb8 <checkDemoModCalisma+0x50c>)
 8007e44:	781a      	ldrb	r2, [r3, #0]
 8007e46:	4b5e      	ldr	r3, [pc, #376]	; (8007fc0 <checkDemoModCalisma+0x514>)
 8007e48:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007e4a:	4b5a      	ldr	r3, [pc, #360]	; (8007fb4 <checkDemoModCalisma+0x508>)
 8007e4c:	781a      	ldrb	r2, [r3, #0]
 8007e4e:	4b5c      	ldr	r3, [pc, #368]	; (8007fc0 <checkDemoModCalisma+0x514>)
 8007e50:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007e52:	4b57      	ldr	r3, [pc, #348]	; (8007fb0 <checkDemoModCalisma+0x504>)
 8007e54:	781a      	ldrb	r2, [r3, #0]
 8007e56:	4b5a      	ldr	r3, [pc, #360]	; (8007fc0 <checkDemoModCalisma+0x514>)
 8007e58:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007e5a:	4b54      	ldr	r3, [pc, #336]	; (8007fac <checkDemoModCalisma+0x500>)
 8007e5c:	781a      	ldrb	r2, [r3, #0]
 8007e5e:	4b58      	ldr	r3, [pc, #352]	; (8007fc0 <checkDemoModCalisma+0x514>)
 8007e60:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007e62:	4b58      	ldr	r3, [pc, #352]	; (8007fc4 <checkDemoModCalisma+0x518>)
 8007e64:	2201      	movs	r2, #1
 8007e66:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007e68:	4b4f      	ldr	r3, [pc, #316]	; (8007fa8 <checkDemoModCalisma+0x4fc>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007e6e:	4b56      	ldr	r3, [pc, #344]	; (8007fc8 <checkDemoModCalisma+0x51c>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f040 8087 	bne.w	8007f86 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007e78:	4a54      	ldr	r2, [pc, #336]	; (8007fcc <checkDemoModCalisma+0x520>)
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	2002      	movs	r0, #2
 8007e7e:	f7f8 fbf3 	bl	8000668 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007e82:	4a53      	ldr	r2, [pc, #332]	; (8007fd0 <checkDemoModCalisma+0x524>)
 8007e84:	2101      	movs	r1, #1
 8007e86:	2001      	movs	r0, #1
 8007e88:	f7f8 fbee 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007e8c:	4b4b      	ldr	r3, [pc, #300]	; (8007fbc <checkDemoModCalisma+0x510>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	220a      	movs	r2, #10
 8007e92:	4950      	ldr	r1, [pc, #320]	; (8007fd4 <checkDemoModCalisma+0x528>)
 8007e94:	4618      	mov	r0, r3
 8007e96:	f004 feed 	bl	800cc74 <itoa>
			lcd_print(2,12,snum);
 8007e9a:	4a4e      	ldr	r2, [pc, #312]	; (8007fd4 <checkDemoModCalisma+0x528>)
 8007e9c:	210c      	movs	r1, #12
 8007e9e:	2002      	movs	r0, #2
 8007ea0:	f7f8 fbe2 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007ea4:	4b44      	ldr	r3, [pc, #272]	; (8007fb8 <checkDemoModCalisma+0x50c>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	220a      	movs	r2, #10
 8007eaa:	494a      	ldr	r1, [pc, #296]	; (8007fd4 <checkDemoModCalisma+0x528>)
 8007eac:	4618      	mov	r0, r3
 8007eae:	f004 fee1 	bl	800cc74 <itoa>
			lcd_print(2,13,snum);
 8007eb2:	4a48      	ldr	r2, [pc, #288]	; (8007fd4 <checkDemoModCalisma+0x528>)
 8007eb4:	210d      	movs	r1, #13
 8007eb6:	2002      	movs	r0, #2
 8007eb8:	f7f8 fbd6 	bl	8000668 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007ebc:	4b3d      	ldr	r3, [pc, #244]	; (8007fb4 <checkDemoModCalisma+0x508>)
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	220a      	movs	r2, #10
 8007ec2:	4944      	ldr	r1, [pc, #272]	; (8007fd4 <checkDemoModCalisma+0x528>)
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f004 fed5 	bl	800cc74 <itoa>
			lcd_print(2,14,snum);
 8007eca:	4a42      	ldr	r2, [pc, #264]	; (8007fd4 <checkDemoModCalisma+0x528>)
 8007ecc:	210e      	movs	r1, #14
 8007ece:	2002      	movs	r0, #2
 8007ed0:	f7f8 fbca 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007ed4:	4b36      	ldr	r3, [pc, #216]	; (8007fb0 <checkDemoModCalisma+0x504>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	220a      	movs	r2, #10
 8007eda:	493e      	ldr	r1, [pc, #248]	; (8007fd4 <checkDemoModCalisma+0x528>)
 8007edc:	4618      	mov	r0, r3
 8007ede:	f004 fec9 	bl	800cc74 <itoa>
			lcd_print(2,15,snum);
 8007ee2:	4a3c      	ldr	r2, [pc, #240]	; (8007fd4 <checkDemoModCalisma+0x528>)
 8007ee4:	210f      	movs	r1, #15
 8007ee6:	2002      	movs	r0, #2
 8007ee8:	f7f8 fbbe 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007eec:	4b2f      	ldr	r3, [pc, #188]	; (8007fac <checkDemoModCalisma+0x500>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	4938      	ldr	r1, [pc, #224]	; (8007fd4 <checkDemoModCalisma+0x528>)
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f004 febd 	bl	800cc74 <itoa>
			lcd_print(2,16,snum);
 8007efa:	4a36      	ldr	r2, [pc, #216]	; (8007fd4 <checkDemoModCalisma+0x528>)
 8007efc:	2110      	movs	r1, #16
 8007efe:	2002      	movs	r0, #2
 8007f00:	f7f8 fbb2 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8007f04:	4b34      	ldr	r3, [pc, #208]	; (8007fd8 <checkDemoModCalisma+0x52c>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007f0a:	e03c      	b.n	8007f86 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007f0c:	4b33      	ldr	r3, [pc, #204]	; (8007fdc <checkDemoModCalisma+0x530>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d003      	beq.n	8007f1c <checkDemoModCalisma+0x470>
 8007f14:	4b2c      	ldr	r3, [pc, #176]	; (8007fc8 <checkDemoModCalisma+0x51c>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d134      	bne.n	8007f86 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f22:	481b      	ldr	r0, [pc, #108]	; (8007f90 <checkDemoModCalisma+0x4e4>)
 8007f24:	f001 fe91 	bl	8009c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f2e:	4818      	ldr	r0, [pc, #96]	; (8007f90 <checkDemoModCalisma+0x4e4>)
 8007f30:	f001 fe8b 	bl	8009c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f34:	2200      	movs	r2, #0
 8007f36:	2104      	movs	r1, #4
 8007f38:	4815      	ldr	r0, [pc, #84]	; (8007f90 <checkDemoModCalisma+0x4e4>)
 8007f3a:	f001 fe86 	bl	8009c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2102      	movs	r1, #2
 8007f42:	4813      	ldr	r0, [pc, #76]	; (8007f90 <checkDemoModCalisma+0x4e4>)
 8007f44:	f001 fe81 	bl	8009c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	4810      	ldr	r0, [pc, #64]	; (8007f90 <checkDemoModCalisma+0x4e4>)
 8007f4e:	f001 fe7c 	bl	8009c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f52:	2200      	movs	r2, #0
 8007f54:	2120      	movs	r1, #32
 8007f56:	480d      	ldr	r0, [pc, #52]	; (8007f8c <checkDemoModCalisma+0x4e0>)
 8007f58:	f001 fe77 	bl	8009c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2110      	movs	r1, #16
 8007f60:	480a      	ldr	r0, [pc, #40]	; (8007f8c <checkDemoModCalisma+0x4e0>)
 8007f62:	f001 fe72 	bl	8009c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f66:	2200      	movs	r2, #0
 8007f68:	2180      	movs	r1, #128	; 0x80
 8007f6a:	480b      	ldr	r0, [pc, #44]	; (8007f98 <checkDemoModCalisma+0x4ec>)
 8007f6c:	f001 fe6d 	bl	8009c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f70:	2200      	movs	r2, #0
 8007f72:	2140      	movs	r1, #64	; 0x40
 8007f74:	4808      	ldr	r0, [pc, #32]	; (8007f98 <checkDemoModCalisma+0x4ec>)
 8007f76:	f001 fe68 	bl	8009c4a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2120      	movs	r1, #32
 8007f7e:	4806      	ldr	r0, [pc, #24]	; (8007f98 <checkDemoModCalisma+0x4ec>)
 8007f80:	f001 fe63 	bl	8009c4a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007f84:	e7ff      	b.n	8007f86 <checkDemoModCalisma+0x4da>
 8007f86:	bf00      	nop
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	40011000 	.word	0x40011000
 8007f90:	40010c00 	.word	0x40010c00
 8007f94:	20000ca2 	.word	0x20000ca2
 8007f98:	40010800 	.word	0x40010800
 8007f9c:	20000bd4 	.word	0x20000bd4
 8007fa0:	20000be4 	.word	0x20000be4
 8007fa4:	20000ca1 	.word	0x20000ca1
 8007fa8:	20000c87 	.word	0x20000c87
 8007fac:	20000c46 	.word	0x20000c46
 8007fb0:	20000c47 	.word	0x20000c47
 8007fb4:	200009bf 	.word	0x200009bf
 8007fb8:	200009c0 	.word	0x200009c0
 8007fbc:	20000c48 	.word	0x20000c48
 8007fc0:	20000b38 	.word	0x20000b38
 8007fc4:	20000c75 	.word	0x20000c75
 8007fc8:	20000c66 	.word	0x20000c66
 8007fcc:	0800e438 	.word	0x0800e438
 8007fd0:	0800e444 	.word	0x0800e444
 8007fd4:	20000bcc 	.word	0x20000bcc
 8007fd8:	20000c7d 	.word	0x20000c7d
 8007fdc:	20000c67 	.word	0x20000c67

08007fe0 <mergeData>:

char* mergeData() {
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b09e      	sub	sp, #120	; 0x78
 8007fe4:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8007fea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fee:	2229      	movs	r2, #41	; 0x29
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f004 ff56 	bl	800cea4 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007ff8:	4b6a      	ldr	r3, [pc, #424]	; (80081a4 <mergeData+0x1c4>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	713b      	strb	r3, [r7, #4]
 8007ffe:	4b6a      	ldr	r3, [pc, #424]	; (80081a8 <mergeData+0x1c8>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	717b      	strb	r3, [r7, #5]
 8008004:	4b69      	ldr	r3, [pc, #420]	; (80081ac <mergeData+0x1cc>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	71bb      	strb	r3, [r7, #6]
 800800a:	4b69      	ldr	r3, [pc, #420]	; (80081b0 <mergeData+0x1d0>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	71fb      	strb	r3, [r7, #7]
 8008010:	4b68      	ldr	r3, [pc, #416]	; (80081b4 <mergeData+0x1d4>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	723b      	strb	r3, [r7, #8]
 8008016:	4b68      	ldr	r3, [pc, #416]	; (80081b8 <mergeData+0x1d8>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	727b      	strb	r3, [r7, #9]
 800801c:	4b67      	ldr	r3, [pc, #412]	; (80081bc <mergeData+0x1dc>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	72bb      	strb	r3, [r7, #10]
 8008022:	4b67      	ldr	r3, [pc, #412]	; (80081c0 <mergeData+0x1e0>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	72fb      	strb	r3, [r7, #11]
 8008028:	4b66      	ldr	r3, [pc, #408]	; (80081c4 <mergeData+0x1e4>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	733b      	strb	r3, [r7, #12]
 800802e:	4b66      	ldr	r3, [pc, #408]	; (80081c8 <mergeData+0x1e8>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	737b      	strb	r3, [r7, #13]
 8008034:	4b65      	ldr	r3, [pc, #404]	; (80081cc <mergeData+0x1ec>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	73bb      	strb	r3, [r7, #14]
 800803a:	4b65      	ldr	r3, [pc, #404]	; (80081d0 <mergeData+0x1f0>)
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	73fb      	strb	r3, [r7, #15]
 8008040:	4b64      	ldr	r3, [pc, #400]	; (80081d4 <mergeData+0x1f4>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	743b      	strb	r3, [r7, #16]
 8008046:	4b64      	ldr	r3, [pc, #400]	; (80081d8 <mergeData+0x1f8>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	747b      	strb	r3, [r7, #17]
 800804c:	4b63      	ldr	r3, [pc, #396]	; (80081dc <mergeData+0x1fc>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	74bb      	strb	r3, [r7, #18]
 8008052:	4b63      	ldr	r3, [pc, #396]	; (80081e0 <mergeData+0x200>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	74fb      	strb	r3, [r7, #19]
 8008058:	4b62      	ldr	r3, [pc, #392]	; (80081e4 <mergeData+0x204>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	753b      	strb	r3, [r7, #20]
 800805e:	4b62      	ldr	r3, [pc, #392]	; (80081e8 <mergeData+0x208>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	757b      	strb	r3, [r7, #21]
 8008064:	4b61      	ldr	r3, [pc, #388]	; (80081ec <mergeData+0x20c>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	75bb      	strb	r3, [r7, #22]
 800806a:	4b61      	ldr	r3, [pc, #388]	; (80081f0 <mergeData+0x210>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	75fb      	strb	r3, [r7, #23]
 8008070:	4b60      	ldr	r3, [pc, #384]	; (80081f4 <mergeData+0x214>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	763b      	strb	r3, [r7, #24]
 8008076:	4b60      	ldr	r3, [pc, #384]	; (80081f8 <mergeData+0x218>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	767b      	strb	r3, [r7, #25]
 800807c:	4b5f      	ldr	r3, [pc, #380]	; (80081fc <mergeData+0x21c>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	76bb      	strb	r3, [r7, #26]
 8008082:	4b5f      	ldr	r3, [pc, #380]	; (8008200 <mergeData+0x220>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	76fb      	strb	r3, [r7, #27]
 8008088:	4b5e      	ldr	r3, [pc, #376]	; (8008204 <mergeData+0x224>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	773b      	strb	r3, [r7, #28]
 800808e:	4b5e      	ldr	r3, [pc, #376]	; (8008208 <mergeData+0x228>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	777b      	strb	r3, [r7, #29]
 8008094:	4b5d      	ldr	r3, [pc, #372]	; (800820c <mergeData+0x22c>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	77bb      	strb	r3, [r7, #30]
 800809a:	4b5d      	ldr	r3, [pc, #372]	; (8008210 <mergeData+0x230>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	77fb      	strb	r3, [r7, #31]
 80080a0:	4b5c      	ldr	r3, [pc, #368]	; (8008214 <mergeData+0x234>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	f887 3020 	strb.w	r3, [r7, #32]
 80080a8:	4b5b      	ldr	r3, [pc, #364]	; (8008218 <mergeData+0x238>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80080b0:	4b5a      	ldr	r3, [pc, #360]	; (800821c <mergeData+0x23c>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80080b8:	4b59      	ldr	r3, [pc, #356]	; (8008220 <mergeData+0x240>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080c0:	4b58      	ldr	r3, [pc, #352]	; (8008224 <mergeData+0x244>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80080c8:	4b57      	ldr	r3, [pc, #348]	; (8008228 <mergeData+0x248>)
 80080ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80080ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80080d2:	4b55      	ldr	r3, [pc, #340]	; (8008228 <mergeData+0x248>)
 80080d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80080d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 80080dc:	4b52      	ldr	r3, [pc, #328]	; (8008228 <mergeData+0x248>)
 80080de:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80080e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80080e6:	4b50      	ldr	r3, [pc, #320]	; (8008228 <mergeData+0x248>)
 80080e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80080ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80080f0:	4b4d      	ldr	r3, [pc, #308]	; (8008228 <mergeData+0x248>)
 80080f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80080f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80080fa:	4b4b      	ldr	r3, [pc, #300]	; (8008228 <mergeData+0x248>)
 80080fc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8008100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8008104:	4b48      	ldr	r3, [pc, #288]	; (8008228 <mergeData+0x248>)
 8008106:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800810a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 800810e:	4b46      	ldr	r3, [pc, #280]	; (8008228 <mergeData+0x248>)
 8008110:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8008114:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8008118:	4b43      	ldr	r3, [pc, #268]	; (8008228 <mergeData+0x248>)
 800811a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800811e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 8008122:	4b41      	ldr	r3, [pc, #260]	; (8008228 <mergeData+0x248>)
 8008124:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008128:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 800812c:	4b3e      	ldr	r3, [pc, #248]	; (8008228 <mergeData+0x248>)
 800812e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8008132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008136:	4b3d      	ldr	r3, [pc, #244]	; (800822c <mergeData+0x24c>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800813e:	2300      	movs	r3, #0
 8008140:	677b      	str	r3, [r7, #116]	; 0x74
 8008142:	e015      	b.n	8008170 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8008144:	1d3a      	adds	r2, r7, #4
 8008146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008148:	4413      	add	r3, r2
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008152:	4937      	ldr	r1, [pc, #220]	; (8008230 <mergeData+0x250>)
 8008154:	4618      	mov	r0, r3
 8008156:	f004 fe85 	bl	800ce64 <siprintf>
	    strcat(combinedString, temp);
 800815a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800815e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008162:	4611      	mov	r1, r2
 8008164:	4618      	mov	r0, r3
 8008166:	f004 fea5 	bl	800ceb4 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800816a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800816c:	3301      	adds	r3, #1
 800816e:	677b      	str	r3, [r7, #116]	; 0x74
 8008170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008172:	2b2c      	cmp	r3, #44	; 0x2c
 8008174:	d9e6      	bls.n	8008144 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008176:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800817a:	4618      	mov	r0, r3
 800817c:	f7f8 f852 	bl	8000224 <strlen>
 8008180:	4603      	mov	r3, r0
 8008182:	3301      	adds	r3, #1
 8008184:	4618      	mov	r0, r3
 8008186:	f004 fd77 	bl	800cc78 <malloc>
 800818a:	4603      	mov	r3, r0
 800818c:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 800818e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008192:	4619      	mov	r1, r3
 8008194:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008196:	f004 fed9 	bl	800cf4c <strcpy>
	return result;
 800819a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 800819c:	4618      	mov	r0, r3
 800819e:	3778      	adds	r7, #120	; 0x78
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000c58 	.word	0x20000c58
 80081a8:	20000c4a 	.word	0x20000c4a
 80081ac:	20000c4d 	.word	0x20000c4d
 80081b0:	20000c4e 	.word	0x20000c4e
 80081b4:	20000c4f 	.word	0x20000c4f
 80081b8:	20000c56 	.word	0x20000c56
 80081bc:	20000c50 	.word	0x20000c50
 80081c0:	20000c51 	.word	0x20000c51
 80081c4:	20000c55 	.word	0x20000c55
 80081c8:	20000c52 	.word	0x20000c52
 80081cc:	20000c62 	.word	0x20000c62
 80081d0:	20000c53 	.word	0x20000c53
 80081d4:	20000c63 	.word	0x20000c63
 80081d8:	20000c54 	.word	0x20000c54
 80081dc:	20000c64 	.word	0x20000c64
 80081e0:	20000c57 	.word	0x20000c57
 80081e4:	20000c59 	.word	0x20000c59
 80081e8:	20000c5a 	.word	0x20000c5a
 80081ec:	20000c5b 	.word	0x20000c5b
 80081f0:	20000c5c 	.word	0x20000c5c
 80081f4:	20000c5d 	.word	0x20000c5d
 80081f8:	20000c5e 	.word	0x20000c5e
 80081fc:	20000c5f 	.word	0x20000c5f
 8008200:	20000c60 	.word	0x20000c60
 8008204:	20000c61 	.word	0x20000c61
 8008208:	20000c65 	.word	0x20000c65
 800820c:	20000c67 	.word	0x20000c67
 8008210:	20000c46 	.word	0x20000c46
 8008214:	20000c47 	.word	0x20000c47
 8008218:	200009bf 	.word	0x200009bf
 800821c:	200009c0 	.word	0x200009c0
 8008220:	20000c48 	.word	0x20000c48
 8008224:	20000c6a 	.word	0x20000c6a
 8008228:	20000b38 	.word	0x20000b38
 800822c:	20000940 	.word	0x20000940
 8008230:	0800e458 	.word	0x0800e458

08008234 <mainLoop>:

void mainLoop() {
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800823a:	f7fd fffb 	bl	8006234 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800823e:	2101      	movs	r1, #1
 8008240:	48ac      	ldr	r0, [pc, #688]	; (80084f4 <mainLoop+0x2c0>)
 8008242:	f001 fceb 	bl	8009c1c <HAL_GPIO_ReadPin>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d136      	bne.n	80082ba <mainLoop+0x86>
 800824c:	2108      	movs	r1, #8
 800824e:	48aa      	ldr	r0, [pc, #680]	; (80084f8 <mainLoop+0x2c4>)
 8008250:	f001 fce4 	bl	8009c1c <HAL_GPIO_ReadPin>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d12f      	bne.n	80082ba <mainLoop+0x86>
 800825a:	2102      	movs	r1, #2
 800825c:	48a5      	ldr	r0, [pc, #660]	; (80084f4 <mainLoop+0x2c0>)
 800825e:	f001 fcdd 	bl	8009c1c <HAL_GPIO_ReadPin>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d128      	bne.n	80082ba <mainLoop+0x86>
 8008268:	2104      	movs	r1, #4
 800826a:	48a2      	ldr	r0, [pc, #648]	; (80084f4 <mainLoop+0x2c0>)
 800826c:	f001 fcd6 	bl	8009c1c <HAL_GPIO_ReadPin>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d121      	bne.n	80082ba <mainLoop+0x86>
 8008276:	2108      	movs	r1, #8
 8008278:	489e      	ldr	r0, [pc, #632]	; (80084f4 <mainLoop+0x2c0>)
 800827a:	f001 fccf 	bl	8009c1c <HAL_GPIO_ReadPin>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d11a      	bne.n	80082ba <mainLoop+0x86>
 8008284:	2180      	movs	r1, #128	; 0x80
 8008286:	489c      	ldr	r0, [pc, #624]	; (80084f8 <mainLoop+0x2c4>)
 8008288:	f001 fcc8 	bl	8009c1c <HAL_GPIO_ReadPin>
 800828c:	4603      	mov	r3, r0
 800828e:	2b01      	cmp	r3, #1
 8008290:	d113      	bne.n	80082ba <mainLoop+0x86>
 8008292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008296:	4898      	ldr	r0, [pc, #608]	; (80084f8 <mainLoop+0x2c4>)
 8008298:	f001 fcc0 	bl	8009c1c <HAL_GPIO_ReadPin>
 800829c:	4603      	mov	r3, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d10b      	bne.n	80082ba <mainLoop+0x86>
 80082a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082a6:	4894      	ldr	r0, [pc, #592]	; (80084f8 <mainLoop+0x2c4>)
 80082a8:	f001 fcb8 	bl	8009c1c <HAL_GPIO_ReadPin>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d103      	bne.n	80082ba <mainLoop+0x86>
			butonKontrol=0;
 80082b2:	4b92      	ldr	r3, [pc, #584]	; (80084fc <mainLoop+0x2c8>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	701a      	strb	r2, [r3, #0]
 80082b8:	e003      	b.n	80082c2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80082ba:	4b91      	ldr	r3, [pc, #580]	; (8008500 <mainLoop+0x2cc>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a91      	ldr	r2, [pc, #580]	; (8008504 <mainLoop+0x2d0>)
 80082c0:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80082c2:	4b91      	ldr	r3, [pc, #580]	; (8008508 <mainLoop+0x2d4>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d039      	beq.n	800833e <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80082ca:	bf00      	nop
 80082cc:	488f      	ldr	r0, [pc, #572]	; (800850c <mainLoop+0x2d8>)
 80082ce:	f002 face 	bl	800a86e <HAL_I2C_GetError>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d0f9      	beq.n	80082cc <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80082d8:	bf00      	nop
 80082da:	488c      	ldr	r0, [pc, #560]	; (800850c <mainLoop+0x2d8>)
 80082dc:	f002 faba 	bl	800a854 <HAL_I2C_GetState>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b20      	cmp	r3, #32
 80082e4:	d1f9      	bne.n	80082da <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80082e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80082ea:	9302      	str	r3, [sp, #8]
 80082ec:	233f      	movs	r3, #63	; 0x3f
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	4b87      	ldr	r3, [pc, #540]	; (8008510 <mainLoop+0x2dc>)
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	233f      	movs	r3, #63	; 0x3f
 80082f6:	2200      	movs	r2, #0
 80082f8:	21a0      	movs	r1, #160	; 0xa0
 80082fa:	4884      	ldr	r0, [pc, #528]	; (800850c <mainLoop+0x2d8>)
 80082fc:	f001 ff48 	bl	800a190 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8008300:	2005      	movs	r0, #5
 8008302:	f000 febb 	bl	800907c <HAL_Delay>

		  hafizaYaz=0;
 8008306:	4b80      	ldr	r3, [pc, #512]	; (8008508 <mainLoop+0x2d4>)
 8008308:	2200      	movs	r2, #0
 800830a:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 800830c:	4b81      	ldr	r3, [pc, #516]	; (8008514 <mainLoop+0x2e0>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d105      	bne.n	8008320 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 8008314:	4a80      	ldr	r2, [pc, #512]	; (8008518 <mainLoop+0x2e4>)
 8008316:	2101      	movs	r1, #1
 8008318:	2002      	movs	r0, #2
 800831a:	f7f8 f9a5 	bl	8000668 <lcd_print>
 800831e:	e008      	b.n	8008332 <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8008320:	4b7c      	ldr	r3, [pc, #496]	; (8008514 <mainLoop+0x2e0>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d104      	bne.n	8008332 <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8008328:	4a7c      	ldr	r2, [pc, #496]	; (800851c <mainLoop+0x2e8>)
 800832a:	2101      	movs	r1, #1
 800832c:	2002      	movs	r0, #2
 800832e:	f7f8 f99b 	bl	8000668 <lcd_print>
		  }

		  HAL_Delay(1000);
 8008332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008336:	f000 fea1 	bl	800907c <HAL_Delay>
		  lcd_clear();
 800833a:	f7f8 f9c1 	bl	80006c0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800833e:	4b78      	ldr	r3, [pc, #480]	; (8008520 <mainLoop+0x2ec>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	f083 0301 	eor.w	r3, r3, #1
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d06e      	beq.n	800842a <mainLoop+0x1f6>
 800834c:	486f      	ldr	r0, [pc, #444]	; (800850c <mainLoop+0x2d8>)
 800834e:	f002 fa81 	bl	800a854 <HAL_I2C_GetState>
 8008352:	4603      	mov	r3, r0
 8008354:	2b20      	cmp	r3, #32
 8008356:	d168      	bne.n	800842a <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8008358:	4b72      	ldr	r3, [pc, #456]	; (8008524 <mainLoop+0x2f0>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	f083 0301 	eor.w	r3, r3, #1
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d044      	beq.n	80083f0 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008366:	4a70      	ldr	r2, [pc, #448]	; (8008528 <mainLoop+0x2f4>)
 8008368:	2101      	movs	r1, #1
 800836a:	2001      	movs	r0, #1
 800836c:	f7f8 f97c 	bl	8000668 <lcd_print>
			  if(dilSecim==0) {
 8008370:	4b68      	ldr	r3, [pc, #416]	; (8008514 <mainLoop+0x2e0>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d105      	bne.n	8008384 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8008378:	4a6c      	ldr	r2, [pc, #432]	; (800852c <mainLoop+0x2f8>)
 800837a:	2101      	movs	r1, #1
 800837c:	2002      	movs	r0, #2
 800837e:	f7f8 f973 	bl	8000668 <lcd_print>
 8008382:	e008      	b.n	8008396 <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8008384:	4b63      	ldr	r3, [pc, #396]	; (8008514 <mainLoop+0x2e0>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d104      	bne.n	8008396 <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 800838c:	4a68      	ldr	r2, [pc, #416]	; (8008530 <mainLoop+0x2fc>)
 800838e:	2101      	movs	r1, #1
 8008390:	2002      	movs	r0, #2
 8008392:	f7f8 f969 	bl	8000668 <lcd_print>
			  }
			  HAL_Delay(1000);
 8008396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800839a:	f000 fe6f 	bl	800907c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800839e:	bf00      	nop
 80083a0:	485a      	ldr	r0, [pc, #360]	; (800850c <mainLoop+0x2d8>)
 80083a2:	f002 fa64 	bl	800a86e <HAL_I2C_GetError>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d0f9      	beq.n	80083a0 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80083ac:	e003      	b.n	80083b6 <mainLoop+0x182>
				  HAL_Delay(1000);
 80083ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083b2:	f000 fe63 	bl	800907c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80083b6:	4855      	ldr	r0, [pc, #340]	; (800850c <mainLoop+0x2d8>)
 80083b8:	f002 fa4c 	bl	800a854 <HAL_I2C_GetState>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b20      	cmp	r3, #32
 80083c0:	d1f5      	bne.n	80083ae <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 80083c2:	4b54      	ldr	r3, [pc, #336]	; (8008514 <mainLoop+0x2e0>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d105      	bne.n	80083d6 <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 80083ca:	4a5a      	ldr	r2, [pc, #360]	; (8008534 <mainLoop+0x300>)
 80083cc:	2101      	movs	r1, #1
 80083ce:	2002      	movs	r0, #2
 80083d0:	f7f8 f94a 	bl	8000668 <lcd_print>
 80083d4:	e008      	b.n	80083e8 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 80083d6:	4b4f      	ldr	r3, [pc, #316]	; (8008514 <mainLoop+0x2e0>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d104      	bne.n	80083e8 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 80083de:	4a56      	ldr	r2, [pc, #344]	; (8008538 <mainLoop+0x304>)
 80083e0:	2101      	movs	r1, #1
 80083e2:	2002      	movs	r0, #2
 80083e4:	f7f8 f940 	bl	8000668 <lcd_print>
			  }

			  ilkOkuma=1;
 80083e8:	4b4e      	ldr	r3, [pc, #312]	; (8008524 <mainLoop+0x2f0>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	e014      	b.n	800841a <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 80083f0:	4b48      	ldr	r3, [pc, #288]	; (8008514 <mainLoop+0x2e0>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 80083f8:	4a50      	ldr	r2, [pc, #320]	; (800853c <mainLoop+0x308>)
 80083fa:	2101      	movs	r1, #1
 80083fc:	2002      	movs	r0, #2
 80083fe:	f7f8 f933 	bl	8000668 <lcd_print>
 8008402:	e008      	b.n	8008416 <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 8008404:	4b43      	ldr	r3, [pc, #268]	; (8008514 <mainLoop+0x2e0>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d104      	bne.n	8008416 <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 800840c:	4a4c      	ldr	r2, [pc, #304]	; (8008540 <mainLoop+0x30c>)
 800840e:	2101      	movs	r1, #1
 8008410:	2002      	movs	r0, #2
 8008412:	f7f8 f929 	bl	8000668 <lcd_print>
			  }
			  lcd_clear();
 8008416:	f7f8 f953 	bl	80006c0 <lcd_clear>
		  }

		  lcd_clear();
 800841a:	f7f8 f951 	bl	80006c0 <lcd_clear>

		  eepromKontrol(1);
 800841e:	2001      	movs	r0, #1
 8008420:	f7fd fac4 	bl	80059ac <eepromKontrol>
		  hafizaOku=1;
 8008424:	4b3e      	ldr	r3, [pc, #248]	; (8008520 <mainLoop+0x2ec>)
 8008426:	2201      	movs	r2, #1
 8008428:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 800842a:	4b46      	ldr	r3, [pc, #280]	; (8008544 <mainLoop+0x310>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d11c      	bne.n	800846c <mainLoop+0x238>
 8008432:	4b45      	ldr	r3, [pc, #276]	; (8008548 <mainLoop+0x314>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	f083 0301 	eor.w	r3, r3, #1
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	d015      	beq.n	800846c <mainLoop+0x238>
 8008440:	4b42      	ldr	r3, [pc, #264]	; (800854c <mainLoop+0x318>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d111      	bne.n	800846c <mainLoop+0x238>
			lcd_clear();
 8008448:	f7f8 f93a 	bl	80006c0 <lcd_clear>
			HAL_Delay(10);
 800844c:	200a      	movs	r0, #10
 800844e:	f000 fe15 	bl	800907c <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008452:	4a3f      	ldr	r2, [pc, #252]	; (8008550 <mainLoop+0x31c>)
 8008454:	2101      	movs	r1, #1
 8008456:	2001      	movs	r0, #1
 8008458:	f7f8 f906 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 800845c:	4a3d      	ldr	r2, [pc, #244]	; (8008554 <mainLoop+0x320>)
 800845e:	2101      	movs	r1, #1
 8008460:	2002      	movs	r0, #2
 8008462:	f7f8 f901 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8008466:	4b38      	ldr	r3, [pc, #224]	; (8008548 <mainLoop+0x314>)
 8008468:	2201      	movs	r2, #1
 800846a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800846c:	4b35      	ldr	r3, [pc, #212]	; (8008544 <mainLoop+0x310>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d112      	bne.n	800849a <mainLoop+0x266>
 8008474:	2102      	movs	r1, #2
 8008476:	481f      	ldr	r0, [pc, #124]	; (80084f4 <mainLoop+0x2c0>)
 8008478:	f001 fbd0 	bl	8009c1c <HAL_GPIO_ReadPin>
 800847c:	4603      	mov	r3, r0
 800847e:	2b01      	cmp	r3, #1
 8008480:	d10b      	bne.n	800849a <mainLoop+0x266>
 8008482:	2104      	movs	r1, #4
 8008484:	481b      	ldr	r0, [pc, #108]	; (80084f4 <mainLoop+0x2c0>)
 8008486:	f001 fbc9 	bl	8009c1c <HAL_GPIO_ReadPin>
 800848a:	4603      	mov	r3, r0
 800848c:	2b01      	cmp	r3, #1
 800848e:	d104      	bne.n	800849a <mainLoop+0x266>
			menuGiris=1;
 8008490:	4b2c      	ldr	r3, [pc, #176]	; (8008544 <mainLoop+0x310>)
 8008492:	2201      	movs	r2, #1
 8008494:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8008496:	f7f8 f913 	bl	80006c0 <lcd_clear>
		}

		if(menuGiris==1) {
 800849a:	4b2a      	ldr	r3, [pc, #168]	; (8008544 <mainLoop+0x310>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d102      	bne.n	80084a8 <mainLoop+0x274>
			menu(&hi2c1);
 80084a2:	481a      	ldr	r0, [pc, #104]	; (800850c <mainLoop+0x2d8>)
 80084a4:	f7f8 fff0 	bl	8001488 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80084a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084ac:	4812      	ldr	r0, [pc, #72]	; (80084f8 <mainLoop+0x2c4>)
 80084ae:	f001 fbe4 	bl	8009c7a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80084b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084b6:	4828      	ldr	r0, [pc, #160]	; (8008558 <mainLoop+0x324>)
 80084b8:	f001 fbb0 	bl	8009c1c <HAL_GPIO_ReadPin>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <mainLoop+0x2a4>
 80084c2:	4b26      	ldr	r3, [pc, #152]	; (800855c <mainLoop+0x328>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	f083 0301 	eor.w	r3, r3, #1
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <mainLoop+0x2a4>
			stopVar=1;
 80084d0:	4b23      	ldr	r3, [pc, #140]	; (8008560 <mainLoop+0x32c>)
 80084d2:	2201      	movs	r2, #1
 80084d4:	701a      	strb	r2, [r3, #0]
 80084d6:	e002      	b.n	80084de <mainLoop+0x2aa>
		} else {
			stopVar=0;
 80084d8:	4b21      	ldr	r3, [pc, #132]	; (8008560 <mainLoop+0x32c>)
 80084da:	2200      	movs	r2, #0
 80084dc:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80084de:	f7fd fec9 	bl	8006274 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80084e2:	f7fd fefb 	bl	80062dc <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80084e6:	f7fd ff3f 	bl	8006368 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80084ea:	f7fd ff8f 	bl	800640c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80084ee:	f7ff fadd 	bl	8007aac <checkDemoModCalisma>
		checkLCDBacklight();
 80084f2:	e6a2      	b.n	800823a <mainLoop+0x6>
 80084f4:	40010800 	.word	0x40010800
 80084f8:	40011000 	.word	0x40011000
 80084fc:	20000c78 	.word	0x20000c78
 8008500:	20000bd4 	.word	0x20000bd4
 8008504:	20000bf0 	.word	0x20000bf0
 8008508:	20000c75 	.word	0x20000c75
 800850c:	20000e08 	.word	0x20000e08
 8008510:	20000b38 	.word	0x20000b38
 8008514:	20000c6a 	.word	0x20000c6a
 8008518:	0800e45c 	.word	0x0800e45c
 800851c:	0800e470 	.word	0x0800e470
 8008520:	20000c76 	.word	0x20000c76
 8008524:	20000c77 	.word	0x20000c77
 8008528:	0800e484 	.word	0x0800e484
 800852c:	0800e498 	.word	0x0800e498
 8008530:	0800e4ac 	.word	0x0800e4ac
 8008534:	0800e4c0 	.word	0x0800e4c0
 8008538:	0800e4d4 	.word	0x0800e4d4
 800853c:	0800e4e8 	.word	0x0800e4e8
 8008540:	0800e4fc 	.word	0x0800e4fc
 8008544:	20000c66 	.word	0x20000c66
 8008548:	20000c7d 	.word	0x20000c7d
 800854c:	20000c67 	.word	0x20000c67
 8008550:	0800e3c0 	.word	0x0800e3c0
 8008554:	0800e3d4 	.word	0x0800e3d4
 8008558:	40010c00 	.word	0x40010c00
 800855c:	20000c9e 	.word	0x20000c9e
 8008560:	20000c9b 	.word	0x20000c9b

08008564 <convertAndSave>:
	}
}

void convertAndSave(const char* writeArray, int state) {
 8008564:	b580      	push	{r7, lr}
 8008566:	b08a      	sub	sp, #40	; 0x28
 8008568:	af04      	add	r7, sp, #16
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
	int arrayLength = strlen(writeArray);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7f7 fe58 	bl	8000224 <strlen>
 8008574:	4603      	mov	r3, r0
 8008576:	60bb      	str	r3, [r7, #8]
	int loopVal;

	if(state == 0) {
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d12c      	bne.n	80085d8 <convertAndSave+0x74>
		loopVal = 60;
 800857e:	233c      	movs	r3, #60	; 0x3c
 8008580:	617b      	str	r3, [r7, #20]
		for(int i=0; i<arrayLength; i++) {
 8008582:	2300      	movs	r3, #0
 8008584:	613b      	str	r3, [r7, #16]
 8008586:	e023      	b.n	80085d0 <convertAndSave+0x6c>
			for(int j=0; j<strlen(numbersArray); j++) {
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	e016      	b.n	80085bc <convertAndSave+0x58>
				if(writeArray[i] == numbersArray[j]) {
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	781a      	ldrb	r2, [r3, #0]
 8008596:	491c      	ldr	r1, [pc, #112]	; (8008608 <convertAndSave+0xa4>)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	440b      	add	r3, r1
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d109      	bne.n	80085b6 <convertAndSave+0x52>
					eepromData[loopVal] = j;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	b2d9      	uxtb	r1, r3
 80085a6:	4a19      	ldr	r2, [pc, #100]	; (800860c <convertAndSave+0xa8>)
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	4413      	add	r3, r2
 80085ac:	460a      	mov	r2, r1
 80085ae:	701a      	strb	r2, [r3, #0]
					loopVal++;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	3301      	adds	r3, #1
 80085b4:	617b      	str	r3, [r7, #20]
			for(int j=0; j<strlen(numbersArray); j++) {
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3301      	adds	r3, #1
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	4812      	ldr	r0, [pc, #72]	; (8008608 <convertAndSave+0xa4>)
 80085be:	f7f7 fe31 	bl	8000224 <strlen>
 80085c2:	4602      	mov	r2, r0
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d8e1      	bhi.n	800858e <convertAndSave+0x2a>
		for(int i=0; i<arrayLength; i++) {
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	3301      	adds	r3, #1
 80085ce:	613b      	str	r3, [r7, #16]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	dbd7      	blt.n	8008588 <convertAndSave+0x24>
				}
			}
		}
	}

	HAL_Delay(200);
 80085d8:	20c8      	movs	r0, #200	; 0xc8
 80085da:	f000 fd4f 	bl	800907c <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1,0xA0,0,145,&eepromData[0],145,3000);
 80085de:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80085e2:	9302      	str	r3, [sp, #8]
 80085e4:	2391      	movs	r3, #145	; 0x91
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	4b08      	ldr	r3, [pc, #32]	; (800860c <convertAndSave+0xa8>)
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2391      	movs	r3, #145	; 0x91
 80085ee:	2200      	movs	r2, #0
 80085f0:	21a0      	movs	r1, #160	; 0xa0
 80085f2:	4807      	ldr	r0, [pc, #28]	; (8008610 <convertAndSave+0xac>)
 80085f4:	f001 fdcc 	bl	800a190 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80085f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085fc:	f000 fd3e 	bl	800907c <HAL_Delay>
}
 8008600:	bf00      	nop
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	200009b4 	.word	0x200009b4
 800860c:	20000b38 	.word	0x20000b38
 8008610:	20000e08 	.word	0x20000e08

08008614 <saveAndConvert>:

void saveAndConvert(int state) {
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af04      	add	r7, sp, #16
 800861a:	6078      	str	r0, [r7, #4]
	int loopVal;

	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 145, eepromData, 145, 3000);
 800861c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008620:	9302      	str	r3, [sp, #8]
 8008622:	2391      	movs	r3, #145	; 0x91
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	4b1a      	ldr	r3, [pc, #104]	; (8008690 <saveAndConvert+0x7c>)
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	2391      	movs	r3, #145	; 0x91
 800862c:	2200      	movs	r2, #0
 800862e:	21a0      	movs	r1, #160	; 0xa0
 8008630:	4818      	ldr	r0, [pc, #96]	; (8008694 <saveAndConvert+0x80>)
 8008632:	f001 fea7 	bl	800a384 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8008636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800863a:	f000 fd1f 	bl	800907c <HAL_Delay>

	if(state == 0) {
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d121      	bne.n	8008688 <saveAndConvert+0x74>
		loopVal = 60;
 8008644:	233c      	movs	r3, #60	; 0x3c
 8008646:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<12; i++) {
 8008648:	2300      	movs	r3, #0
 800864a:	60bb      	str	r3, [r7, #8]
 800864c:	e019      	b.n	8008682 <saveAndConvert+0x6e>
			if(eepromData[loopVal] != '\0') {
 800864e:	4a10      	ldr	r2, [pc, #64]	; (8008690 <saveAndConvert+0x7c>)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4413      	add	r3, r2
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d010      	beq.n	800867c <saveAndConvert+0x68>
				machineID[i] = getNumbersFromCursorPosition(eepromData[loopVal]);
 800865a:	4a0d      	ldr	r2, [pc, #52]	; (8008690 <saveAndConvert+0x7c>)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	4618      	mov	r0, r3
 8008664:	f7f8 fa2a 	bl	8000abc <getNumbersFromCursorPosition>
 8008668:	4603      	mov	r3, r0
 800866a:	4619      	mov	r1, r3
 800866c:	4a0a      	ldr	r2, [pc, #40]	; (8008698 <saveAndConvert+0x84>)
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	4413      	add	r3, r2
 8008672:	460a      	mov	r2, r1
 8008674:	701a      	strb	r2, [r3, #0]
				loopVal++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<12; i++) {
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	3301      	adds	r3, #1
 8008680:	60bb      	str	r3, [r7, #8]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b0b      	cmp	r3, #11
 8008686:	dde2      	ble.n	800864e <saveAndConvert+0x3a>
			}
		}
	}
}
 8008688:	bf00      	nop
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	20000b38 	.word	0x20000b38
 8008694:	20000e08 	.word	0x20000e08
 8008698:	20000bf4 	.word	0x20000bf4

0800869c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80086a4:	4b04      	ldr	r3, [pc, #16]	; (80086b8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3301      	adds	r3, #1
 80086aa:	4a03      	ldr	r2, [pc, #12]	; (80086b8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80086ac:	6013      	str	r3, [r2, #0]
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bc80      	pop	{r7}
 80086b6:	4770      	bx	lr
 80086b8:	20000bd4 	.word	0x20000bd4

080086bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80086c0:	f000 fc7a 	bl	8008fb8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80086c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086c8:	f000 fcd8 	bl	800907c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80086cc:	f000 f8aa 	bl	8008824 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80086d0:	f000 f9cc 	bl	8008a6c <MX_GPIO_Init>
  MX_CAN_Init();
 80086d4:	f000 f8ec 	bl	80088b0 <MX_CAN_Init>
  MX_I2C1_Init();
 80086d8:	f000 f91e 	bl	8008918 <MX_I2C1_Init>
  MX_TIM1_Init();
 80086dc:	f000 f94a 	bl	8008974 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80086e0:	f000 f99a 	bl	8008a18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80086e4:	2201      	movs	r2, #1
 80086e6:	2140      	movs	r1, #64	; 0x40
 80086e8:	4844      	ldr	r0, [pc, #272]	; (80087fc <main+0x140>)
 80086ea:	f001 faae 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80086ee:	2201      	movs	r2, #1
 80086f0:	2180      	movs	r1, #128	; 0x80
 80086f2:	4842      	ldr	r0, [pc, #264]	; (80087fc <main+0x140>)
 80086f4:	f001 faa9 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80086f8:	200a      	movs	r0, #10
 80086fa:	f000 fcbf 	bl	800907c <HAL_Delay>
  lcd_init();
 80086fe:	f7f7 ff81 	bl	8000604 <lcd_init>
  HAL_Delay(10);
 8008702:	200a      	movs	r0, #10
 8008704:	f000 fcba 	bl	800907c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008708:	483d      	ldr	r0, [pc, #244]	; (8008800 <main+0x144>)
 800870a:	f003 f951 	bl	800b9b0 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800870e:	bf00      	nop
 8008710:	483c      	ldr	r0, [pc, #240]	; (8008804 <main+0x148>)
 8008712:	f002 f8ac 	bl	800a86e <HAL_I2C_GetError>
 8008716:	4603      	mov	r3, r0
 8008718:	2b04      	cmp	r3, #4
 800871a:	d0f9      	beq.n	8008710 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800871c:	bf00      	nop
 800871e:	4839      	ldr	r0, [pc, #228]	; (8008804 <main+0x148>)
 8008720:	f002 f898 	bl	800a854 <HAL_I2C_GetState>
 8008724:	4603      	mov	r3, r0
 8008726:	2b20      	cmp	r3, #32
 8008728:	d1f9      	bne.n	800871e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800872a:	2200      	movs	r2, #0
 800872c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008730:	4832      	ldr	r0, [pc, #200]	; (80087fc <main+0x140>)
 8008732:	f001 fa8a 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008736:	2200      	movs	r2, #0
 8008738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800873c:	482f      	ldr	r0, [pc, #188]	; (80087fc <main+0x140>)
 800873e:	f001 fa84 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008742:	2200      	movs	r2, #0
 8008744:	2104      	movs	r1, #4
 8008746:	482d      	ldr	r0, [pc, #180]	; (80087fc <main+0x140>)
 8008748:	f001 fa7f 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800874c:	2200      	movs	r2, #0
 800874e:	2102      	movs	r1, #2
 8008750:	482a      	ldr	r0, [pc, #168]	; (80087fc <main+0x140>)
 8008752:	f001 fa7a 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008756:	2200      	movs	r2, #0
 8008758:	2101      	movs	r1, #1
 800875a:	4828      	ldr	r0, [pc, #160]	; (80087fc <main+0x140>)
 800875c:	f001 fa75 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008760:	2200      	movs	r2, #0
 8008762:	2120      	movs	r1, #32
 8008764:	4828      	ldr	r0, [pc, #160]	; (8008808 <main+0x14c>)
 8008766:	f001 fa70 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800876a:	2200      	movs	r2, #0
 800876c:	2110      	movs	r1, #16
 800876e:	4826      	ldr	r0, [pc, #152]	; (8008808 <main+0x14c>)
 8008770:	f001 fa6b 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008774:	2200      	movs	r2, #0
 8008776:	2180      	movs	r1, #128	; 0x80
 8008778:	4824      	ldr	r0, [pc, #144]	; (800880c <main+0x150>)
 800877a:	f001 fa66 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800877e:	2200      	movs	r2, #0
 8008780:	2140      	movs	r1, #64	; 0x40
 8008782:	4822      	ldr	r0, [pc, #136]	; (800880c <main+0x150>)
 8008784:	f001 fa61 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008788:	2200      	movs	r2, #0
 800878a:	2120      	movs	r1, #32
 800878c:	481f      	ldr	r0, [pc, #124]	; (800880c <main+0x150>)
 800878e:	f001 fa5c 	bl	8009c4a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008792:	2200      	movs	r2, #0
 8008794:	2110      	movs	r1, #16
 8008796:	481d      	ldr	r0, [pc, #116]	; (800880c <main+0x150>)
 8008798:	f001 fa57 	bl	8009c4a <HAL_GPIO_WritePin>

  i2cTest();
 800879c:	f7fd fc9c 	bl	80060d8 <i2cTest>
  HAL_Delay(100);
 80087a0:	2064      	movs	r0, #100	; 0x64
 80087a2:	f000 fc6b 	bl	800907c <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80087a6:	4a1a      	ldr	r2, [pc, #104]	; (8008810 <main+0x154>)
 80087a8:	2101      	movs	r1, #1
 80087aa:	2001      	movs	r0, #1
 80087ac:	f7f7 ff5c 	bl	8000668 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80087b0:	4a18      	ldr	r2, [pc, #96]	; (8008814 <main+0x158>)
 80087b2:	2101      	movs	r1, #1
 80087b4:	2002      	movs	r0, #2
 80087b6:	f7f7 ff57 	bl	8000668 <lcd_print>
  HAL_Delay(1000);
 80087ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087be:	f000 fc5d 	bl	800907c <HAL_Delay>
  lcd_clear();
 80087c2:	f7f7 ff7d 	bl	80006c0 <lcd_clear>

  eepromKontrol(0);
 80087c6:	2000      	movs	r0, #0
 80087c8:	f7fd f8f0 	bl	80059ac <eepromKontrol>
  HAL_Delay(200);
 80087cc:	20c8      	movs	r0, #200	; 0xc8
 80087ce:	f000 fc55 	bl	800907c <HAL_Delay>

  lcd_clear();
 80087d2:	f7f7 ff75 	bl	80006c0 <lcd_clear>
  HAL_Delay(200);
 80087d6:	20c8      	movs	r0, #200	; 0xc8
 80087d8:	f000 fc50 	bl	800907c <HAL_Delay>

  backLightTimer = millis;
 80087dc:	4b0e      	ldr	r3, [pc, #56]	; (8008818 <main+0x15c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a0e      	ldr	r2, [pc, #56]	; (800881c <main+0x160>)
 80087e2:	6013      	str	r3, [r2, #0]

  takeMachineID(1, &hi2c1);
 80087e4:	4907      	ldr	r1, [pc, #28]	; (8008804 <main+0x148>)
 80087e6:	2001      	movs	r0, #1
 80087e8:	f7f8 f978 	bl	8000adc <takeMachineID>
  convertAndSave(machineID, 0);
 80087ec:	2100      	movs	r1, #0
 80087ee:	480c      	ldr	r0, [pc, #48]	; (8008820 <main+0x164>)
 80087f0:	f7ff feb8 	bl	8008564 <convertAndSave>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80087f4:	f7ff fd1e 	bl	8008234 <mainLoop>
 80087f8:	e7fc      	b.n	80087f4 <main+0x138>
 80087fa:	bf00      	nop
 80087fc:	40010c00 	.word	0x40010c00
 8008800:	20000e5c 	.word	0x20000e5c
 8008804:	20000e08 	.word	0x20000e08
 8008808:	40011000 	.word	0x40011000
 800880c:	40010800 	.word	0x40010800
 8008810:	0800e510 	.word	0x0800e510
 8008814:	0800e524 	.word	0x0800e524
 8008818:	20000bd4 	.word	0x20000bd4
 800881c:	20000bf0 	.word	0x20000bf0
 8008820:	20000bf4 	.word	0x20000bf4

08008824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b090      	sub	sp, #64	; 0x40
 8008828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800882a:	f107 0318 	add.w	r3, r7, #24
 800882e:	2228      	movs	r2, #40	; 0x28
 8008830:	2100      	movs	r1, #0
 8008832:	4618      	mov	r0, r3
 8008834:	f004 fb36 	bl	800cea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008838:	1d3b      	adds	r3, r7, #4
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	605a      	str	r2, [r3, #4]
 8008840:	609a      	str	r2, [r3, #8]
 8008842:	60da      	str	r2, [r3, #12]
 8008844:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008846:	2301      	movs	r3, #1
 8008848:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800884a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800884e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008850:	2300      	movs	r3, #0
 8008852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008854:	2301      	movs	r3, #1
 8008856:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008858:	2302      	movs	r3, #2
 800885a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800885c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008860:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008862:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008868:	f107 0318 	add.w	r3, r7, #24
 800886c:	4618      	mov	r0, r3
 800886e:	f002 fc3f 	bl	800b0f0 <HAL_RCC_OscConfig>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008878:	f000 f9a2 	bl	8008bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800887c:	230f      	movs	r3, #15
 800887e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008880:	2302      	movs	r3, #2
 8008882:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008892:	1d3b      	adds	r3, r7, #4
 8008894:	2102      	movs	r1, #2
 8008896:	4618      	mov	r0, r3
 8008898:	f002 feac 	bl	800b5f4 <HAL_RCC_ClockConfig>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80088a2:	f000 f98d 	bl	8008bc0 <Error_Handler>
  }
}
 80088a6:	bf00      	nop
 80088a8:	3740      	adds	r7, #64	; 0x40
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80088b4:	4b16      	ldr	r3, [pc, #88]	; (8008910 <MX_CAN_Init+0x60>)
 80088b6:	4a17      	ldr	r2, [pc, #92]	; (8008914 <MX_CAN_Init+0x64>)
 80088b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80088ba:	4b15      	ldr	r3, [pc, #84]	; (8008910 <MX_CAN_Init+0x60>)
 80088bc:	2210      	movs	r2, #16
 80088be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80088c0:	4b13      	ldr	r3, [pc, #76]	; (8008910 <MX_CAN_Init+0x60>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80088c6:	4b12      	ldr	r3, [pc, #72]	; (8008910 <MX_CAN_Init+0x60>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80088cc:	4b10      	ldr	r3, [pc, #64]	; (8008910 <MX_CAN_Init+0x60>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80088d2:	4b0f      	ldr	r3, [pc, #60]	; (8008910 <MX_CAN_Init+0x60>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80088d8:	4b0d      	ldr	r3, [pc, #52]	; (8008910 <MX_CAN_Init+0x60>)
 80088da:	2200      	movs	r2, #0
 80088dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <MX_CAN_Init+0x60>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <MX_CAN_Init+0x60>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80088ea:	4b09      	ldr	r3, [pc, #36]	; (8008910 <MX_CAN_Init+0x60>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80088f0:	4b07      	ldr	r3, [pc, #28]	; (8008910 <MX_CAN_Init+0x60>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80088f6:	4b06      	ldr	r3, [pc, #24]	; (8008910 <MX_CAN_Init+0x60>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80088fc:	4804      	ldr	r0, [pc, #16]	; (8008910 <MX_CAN_Init+0x60>)
 80088fe:	f000 fbe1 	bl	80090c4 <HAL_CAN_Init>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008908:	f000 f95a 	bl	8008bc0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800890c:	bf00      	nop
 800890e:	bd80      	pop	{r7, pc}
 8008910:	20000de0 	.word	0x20000de0
 8008914:	40006400 	.word	0x40006400

08008918 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800891c:	4b12      	ldr	r3, [pc, #72]	; (8008968 <MX_I2C1_Init+0x50>)
 800891e:	4a13      	ldr	r2, [pc, #76]	; (800896c <MX_I2C1_Init+0x54>)
 8008920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008922:	4b11      	ldr	r3, [pc, #68]	; (8008968 <MX_I2C1_Init+0x50>)
 8008924:	4a12      	ldr	r2, [pc, #72]	; (8008970 <MX_I2C1_Init+0x58>)
 8008926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008928:	4b0f      	ldr	r3, [pc, #60]	; (8008968 <MX_I2C1_Init+0x50>)
 800892a:	2200      	movs	r2, #0
 800892c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800892e:	4b0e      	ldr	r3, [pc, #56]	; (8008968 <MX_I2C1_Init+0x50>)
 8008930:	2200      	movs	r2, #0
 8008932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008934:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <MX_I2C1_Init+0x50>)
 8008936:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800893a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800893c:	4b0a      	ldr	r3, [pc, #40]	; (8008968 <MX_I2C1_Init+0x50>)
 800893e:	2200      	movs	r2, #0
 8008940:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008942:	4b09      	ldr	r3, [pc, #36]	; (8008968 <MX_I2C1_Init+0x50>)
 8008944:	2200      	movs	r2, #0
 8008946:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008948:	4b07      	ldr	r3, [pc, #28]	; (8008968 <MX_I2C1_Init+0x50>)
 800894a:	2200      	movs	r2, #0
 800894c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800894e:	4b06      	ldr	r3, [pc, #24]	; (8008968 <MX_I2C1_Init+0x50>)
 8008950:	2200      	movs	r2, #0
 8008952:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008954:	4804      	ldr	r0, [pc, #16]	; (8008968 <MX_I2C1_Init+0x50>)
 8008956:	f001 f9a9 	bl	8009cac <HAL_I2C_Init>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008960:	f000 f92e 	bl	8008bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008964:	bf00      	nop
 8008966:	bd80      	pop	{r7, pc}
 8008968:	20000e08 	.word	0x20000e08
 800896c:	40005400 	.word	0x40005400
 8008970:	00061a80 	.word	0x00061a80

08008974 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800897a:	f107 0308 	add.w	r3, r7, #8
 800897e:	2200      	movs	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	605a      	str	r2, [r3, #4]
 8008984:	609a      	str	r2, [r3, #8]
 8008986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008988:	463b      	mov	r3, r7
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008990:	4b1f      	ldr	r3, [pc, #124]	; (8008a10 <MX_TIM1_Init+0x9c>)
 8008992:	4a20      	ldr	r2, [pc, #128]	; (8008a14 <MX_TIM1_Init+0xa0>)
 8008994:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008996:	4b1e      	ldr	r3, [pc, #120]	; (8008a10 <MX_TIM1_Init+0x9c>)
 8008998:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800899c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800899e:	4b1c      	ldr	r3, [pc, #112]	; (8008a10 <MX_TIM1_Init+0x9c>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80089a4:	4b1a      	ldr	r3, [pc, #104]	; (8008a10 <MX_TIM1_Init+0x9c>)
 80089a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80089aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089ac:	4b18      	ldr	r3, [pc, #96]	; (8008a10 <MX_TIM1_Init+0x9c>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80089b2:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <MX_TIM1_Init+0x9c>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80089b8:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <MX_TIM1_Init+0x9c>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80089be:	4814      	ldr	r0, [pc, #80]	; (8008a10 <MX_TIM1_Init+0x9c>)
 80089c0:	f002 ffa6 	bl	800b910 <HAL_TIM_Base_Init>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80089ca:	f000 f8f9 	bl	8008bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80089ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80089d4:	f107 0308 	add.w	r3, r7, #8
 80089d8:	4619      	mov	r1, r3
 80089da:	480d      	ldr	r0, [pc, #52]	; (8008a10 <MX_TIM1_Init+0x9c>)
 80089dc:	f003 f950 	bl	800bc80 <HAL_TIM_ConfigClockSource>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80089e6:	f000 f8eb 	bl	8008bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089ea:	2300      	movs	r3, #0
 80089ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80089f2:	463b      	mov	r3, r7
 80089f4:	4619      	mov	r1, r3
 80089f6:	4806      	ldr	r0, [pc, #24]	; (8008a10 <MX_TIM1_Init+0x9c>)
 80089f8:	f003 fb3e 	bl	800c078 <HAL_TIMEx_MasterConfigSynchronization>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008a02:	f000 f8dd 	bl	8008bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008a06:	bf00      	nop
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20000e5c 	.word	0x20000e5c
 8008a14:	40012c00 	.word	0x40012c00

08008a18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a1c:	4b11      	ldr	r3, [pc, #68]	; (8008a64 <MX_USART1_UART_Init+0x4c>)
 8008a1e:	4a12      	ldr	r2, [pc, #72]	; (8008a68 <MX_USART1_UART_Init+0x50>)
 8008a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008a22:	4b10      	ldr	r3, [pc, #64]	; (8008a64 <MX_USART1_UART_Init+0x4c>)
 8008a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <MX_USART1_UART_Init+0x4c>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008a30:	4b0c      	ldr	r3, [pc, #48]	; (8008a64 <MX_USART1_UART_Init+0x4c>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <MX_USART1_UART_Init+0x4c>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008a3c:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <MX_USART1_UART_Init+0x4c>)
 8008a3e:	220c      	movs	r2, #12
 8008a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <MX_USART1_UART_Init+0x4c>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a48:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <MX_USART1_UART_Init+0x4c>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008a4e:	4805      	ldr	r0, [pc, #20]	; (8008a64 <MX_USART1_UART_Init+0x4c>)
 8008a50:	f003 fb90 	bl	800c174 <HAL_UART_Init>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008a5a:	f000 f8b1 	bl	8008bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008a5e:	bf00      	nop
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000ea4 	.word	0x20000ea4
 8008a68:	40013800 	.word	0x40013800

08008a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a72:	f107 0310 	add.w	r3, r7, #16
 8008a76:	2200      	movs	r2, #0
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	605a      	str	r2, [r3, #4]
 8008a7c:	609a      	str	r2, [r3, #8]
 8008a7e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a80:	4b4b      	ldr	r3, [pc, #300]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	4a4a      	ldr	r2, [pc, #296]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008a86:	f043 0310 	orr.w	r3, r3, #16
 8008a8a:	6193      	str	r3, [r2, #24]
 8008a8c:	4b48      	ldr	r3, [pc, #288]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f003 0310 	and.w	r3, r3, #16
 8008a94:	60fb      	str	r3, [r7, #12]
 8008a96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a98:	4b45      	ldr	r3, [pc, #276]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	4a44      	ldr	r2, [pc, #272]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008a9e:	f043 0320 	orr.w	r3, r3, #32
 8008aa2:	6193      	str	r3, [r2, #24]
 8008aa4:	4b42      	ldr	r3, [pc, #264]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	f003 0320 	and.w	r3, r3, #32
 8008aac:	60bb      	str	r3, [r7, #8]
 8008aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ab0:	4b3f      	ldr	r3, [pc, #252]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	4a3e      	ldr	r2, [pc, #248]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008ab6:	f043 0304 	orr.w	r3, r3, #4
 8008aba:	6193      	str	r3, [r2, #24]
 8008abc:	4b3c      	ldr	r3, [pc, #240]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	f003 0304 	and.w	r3, r3, #4
 8008ac4:	607b      	str	r3, [r7, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ac8:	4b39      	ldr	r3, [pc, #228]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	4a38      	ldr	r2, [pc, #224]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008ace:	f043 0308 	orr.w	r3, r3, #8
 8008ad2:	6193      	str	r3, [r2, #24]
 8008ad4:	4b36      	ldr	r3, [pc, #216]	; (8008bb0 <MX_GPIO_Init+0x144>)
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	603b      	str	r3, [r7, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	21f0      	movs	r1, #240	; 0xf0
 8008ae4:	4833      	ldr	r0, [pc, #204]	; (8008bb4 <MX_GPIO_Init+0x148>)
 8008ae6:	f001 f8b0 	bl	8009c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008aea:	2200      	movs	r2, #0
 8008aec:	f241 0130 	movw	r1, #4144	; 0x1030
 8008af0:	4831      	ldr	r0, [pc, #196]	; (8008bb8 <MX_GPIO_Init+0x14c>)
 8008af2:	f001 f8aa 	bl	8009c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008af6:	2200      	movs	r2, #0
 8008af8:	f640 4107 	movw	r1, #3079	; 0xc07
 8008afc:	482f      	ldr	r0, [pc, #188]	; (8008bbc <MX_GPIO_Init+0x150>)
 8008afe:	f001 f8a4 	bl	8009c4a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008b02:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008b06:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b10:	f107 0310 	add.w	r3, r7, #16
 8008b14:	4619      	mov	r1, r3
 8008b16:	4828      	ldr	r0, [pc, #160]	; (8008bb8 <MX_GPIO_Init+0x14c>)
 8008b18:	f000 fe20 	bl	800975c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008b1c:	f248 130f 	movw	r3, #33039	; 0x810f
 8008b20:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b2a:	f107 0310 	add.w	r3, r7, #16
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4820      	ldr	r0, [pc, #128]	; (8008bb4 <MX_GPIO_Init+0x148>)
 8008b32:	f000 fe13 	bl	800975c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008b36:	23f0      	movs	r3, #240	; 0xf0
 8008b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b42:	2302      	movs	r3, #2
 8008b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b46:	f107 0310 	add.w	r3, r7, #16
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4819      	ldr	r0, [pc, #100]	; (8008bb4 <MX_GPIO_Init+0x148>)
 8008b4e:	f000 fe05 	bl	800975c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008b52:	f241 0330 	movw	r3, #4144	; 0x1030
 8008b56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b60:	2302      	movs	r3, #2
 8008b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b64:	f107 0310 	add.w	r3, r7, #16
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4813      	ldr	r0, [pc, #76]	; (8008bb8 <MX_GPIO_Init+0x14c>)
 8008b6c:	f000 fdf6 	bl	800975c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008b70:	f640 4307 	movw	r3, #3079	; 0xc07
 8008b74:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b76:	2301      	movs	r3, #1
 8008b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b7e:	2302      	movs	r3, #2
 8008b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b82:	f107 0310 	add.w	r3, r7, #16
 8008b86:	4619      	mov	r1, r3
 8008b88:	480c      	ldr	r0, [pc, #48]	; (8008bbc <MX_GPIO_Init+0x150>)
 8008b8a:	f000 fde7 	bl	800975c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008b8e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b94:	2300      	movs	r3, #0
 8008b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b9c:	f107 0310 	add.w	r3, r7, #16
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4806      	ldr	r0, [pc, #24]	; (8008bbc <MX_GPIO_Init+0x150>)
 8008ba4:	f000 fdda 	bl	800975c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008ba8:	bf00      	nop
 8008baa:	3720      	adds	r7, #32
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	40021000 	.word	0x40021000
 8008bb4:	40010800 	.word	0x40010800
 8008bb8:	40011000 	.word	0x40011000
 8008bbc:	40010c00 	.word	0x40010c00

08008bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008bc4:	bf00      	nop
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc80      	pop	{r7}
 8008bca:	4770      	bx	lr

08008bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008bd2:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <HAL_MspInit+0x5c>)
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	4a14      	ldr	r2, [pc, #80]	; (8008c28 <HAL_MspInit+0x5c>)
 8008bd8:	f043 0301 	orr.w	r3, r3, #1
 8008bdc:	6193      	str	r3, [r2, #24]
 8008bde:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <HAL_MspInit+0x5c>)
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	60bb      	str	r3, [r7, #8]
 8008be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008bea:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <HAL_MspInit+0x5c>)
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	4a0e      	ldr	r2, [pc, #56]	; (8008c28 <HAL_MspInit+0x5c>)
 8008bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf4:	61d3      	str	r3, [r2, #28]
 8008bf6:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <HAL_MspInit+0x5c>)
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bfe:	607b      	str	r3, [r7, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c02:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <HAL_MspInit+0x60>)
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	4a04      	ldr	r2, [pc, #16]	; (8008c2c <HAL_MspInit+0x60>)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c1e:	bf00      	nop
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bc80      	pop	{r7}
 8008c26:	4770      	bx	lr
 8008c28:	40021000 	.word	0x40021000
 8008c2c:	40010000 	.word	0x40010000

08008c30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b088      	sub	sp, #32
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c38:	f107 0310 	add.w	r3, r7, #16
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	605a      	str	r2, [r3, #4]
 8008c42:	609a      	str	r2, [r3, #8]
 8008c44:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1c      	ldr	r2, [pc, #112]	; (8008cbc <HAL_CAN_MspInit+0x8c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d131      	bne.n	8008cb4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008c50:	4b1b      	ldr	r3, [pc, #108]	; (8008cc0 <HAL_CAN_MspInit+0x90>)
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	4a1a      	ldr	r2, [pc, #104]	; (8008cc0 <HAL_CAN_MspInit+0x90>)
 8008c56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c5a:	61d3      	str	r3, [r2, #28]
 8008c5c:	4b18      	ldr	r3, [pc, #96]	; (8008cc0 <HAL_CAN_MspInit+0x90>)
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c68:	4b15      	ldr	r3, [pc, #84]	; (8008cc0 <HAL_CAN_MspInit+0x90>)
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	4a14      	ldr	r2, [pc, #80]	; (8008cc0 <HAL_CAN_MspInit+0x90>)
 8008c6e:	f043 0304 	orr.w	r3, r3, #4
 8008c72:	6193      	str	r3, [r2, #24]
 8008c74:	4b12      	ldr	r3, [pc, #72]	; (8008cc0 <HAL_CAN_MspInit+0x90>)
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	60bb      	str	r3, [r7, #8]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008c80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c86:	2300      	movs	r3, #0
 8008c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c8e:	f107 0310 	add.w	r3, r7, #16
 8008c92:	4619      	mov	r1, r3
 8008c94:	480b      	ldr	r0, [pc, #44]	; (8008cc4 <HAL_CAN_MspInit+0x94>)
 8008c96:	f000 fd61 	bl	800975c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ca8:	f107 0310 	add.w	r3, r7, #16
 8008cac:	4619      	mov	r1, r3
 8008cae:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <HAL_CAN_MspInit+0x94>)
 8008cb0:	f000 fd54 	bl	800975c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008cb4:	bf00      	nop
 8008cb6:	3720      	adds	r7, #32
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	40006400 	.word	0x40006400
 8008cc0:	40021000 	.word	0x40021000
 8008cc4:	40010800 	.word	0x40010800

08008cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cd0:	f107 0310 	add.w	r3, r7, #16
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	605a      	str	r2, [r3, #4]
 8008cda:	609a      	str	r2, [r3, #8]
 8008cdc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a15      	ldr	r2, [pc, #84]	; (8008d38 <HAL_I2C_MspInit+0x70>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d123      	bne.n	8008d30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ce8:	4b14      	ldr	r3, [pc, #80]	; (8008d3c <HAL_I2C_MspInit+0x74>)
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	4a13      	ldr	r2, [pc, #76]	; (8008d3c <HAL_I2C_MspInit+0x74>)
 8008cee:	f043 0308 	orr.w	r3, r3, #8
 8008cf2:	6193      	str	r3, [r2, #24]
 8008cf4:	4b11      	ldr	r3, [pc, #68]	; (8008d3c <HAL_I2C_MspInit+0x74>)
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	f003 0308 	and.w	r3, r3, #8
 8008cfc:	60fb      	str	r3, [r7, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008d00:	23c0      	movs	r3, #192	; 0xc0
 8008d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d04:	2312      	movs	r3, #18
 8008d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d0c:	f107 0310 	add.w	r3, r7, #16
 8008d10:	4619      	mov	r1, r3
 8008d12:	480b      	ldr	r0, [pc, #44]	; (8008d40 <HAL_I2C_MspInit+0x78>)
 8008d14:	f000 fd22 	bl	800975c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d18:	4b08      	ldr	r3, [pc, #32]	; (8008d3c <HAL_I2C_MspInit+0x74>)
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	4a07      	ldr	r2, [pc, #28]	; (8008d3c <HAL_I2C_MspInit+0x74>)
 8008d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d22:	61d3      	str	r3, [r2, #28]
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <HAL_I2C_MspInit+0x74>)
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d2c:	60bb      	str	r3, [r7, #8]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008d30:	bf00      	nop
 8008d32:	3720      	adds	r7, #32
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	40005400 	.word	0x40005400
 8008d3c:	40021000 	.word	0x40021000
 8008d40:	40010c00 	.word	0x40010c00

08008d44 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a0a      	ldr	r2, [pc, #40]	; (8008d7c <HAL_I2C_MspDeInit+0x38>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d10d      	bne.n	8008d72 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008d56:	4b0a      	ldr	r3, [pc, #40]	; (8008d80 <HAL_I2C_MspDeInit+0x3c>)
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	4a09      	ldr	r2, [pc, #36]	; (8008d80 <HAL_I2C_MspDeInit+0x3c>)
 8008d5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d60:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008d62:	2140      	movs	r1, #64	; 0x40
 8008d64:	4807      	ldr	r0, [pc, #28]	; (8008d84 <HAL_I2C_MspDeInit+0x40>)
 8008d66:	f000 fe8d 	bl	8009a84 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008d6a:	2180      	movs	r1, #128	; 0x80
 8008d6c:	4805      	ldr	r0, [pc, #20]	; (8008d84 <HAL_I2C_MspDeInit+0x40>)
 8008d6e:	f000 fe89 	bl	8009a84 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008d72:	bf00      	nop
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40005400 	.word	0x40005400
 8008d80:	40021000 	.word	0x40021000
 8008d84:	40010c00 	.word	0x40010c00

08008d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a0d      	ldr	r2, [pc, #52]	; (8008dcc <HAL_TIM_Base_MspInit+0x44>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d113      	bne.n	8008dc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008d9a:	4b0d      	ldr	r3, [pc, #52]	; (8008dd0 <HAL_TIM_Base_MspInit+0x48>)
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	4a0c      	ldr	r2, [pc, #48]	; (8008dd0 <HAL_TIM_Base_MspInit+0x48>)
 8008da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008da4:	6193      	str	r3, [r2, #24]
 8008da6:	4b0a      	ldr	r3, [pc, #40]	; (8008dd0 <HAL_TIM_Base_MspInit+0x48>)
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008db2:	2200      	movs	r2, #0
 8008db4:	2100      	movs	r1, #0
 8008db6:	2019      	movs	r0, #25
 8008db8:	f000 fb57 	bl	800946a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008dbc:	2019      	movs	r0, #25
 8008dbe:	f000 fb70 	bl	80094a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40012c00 	.word	0x40012c00
 8008dd0:	40021000 	.word	0x40021000

08008dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ddc:	f107 0310 	add.w	r3, r7, #16
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	605a      	str	r2, [r3, #4]
 8008de6:	609a      	str	r2, [r3, #8]
 8008de8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a20      	ldr	r2, [pc, #128]	; (8008e70 <HAL_UART_MspInit+0x9c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d139      	bne.n	8008e68 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008df4:	4b1f      	ldr	r3, [pc, #124]	; (8008e74 <HAL_UART_MspInit+0xa0>)
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <HAL_UART_MspInit+0xa0>)
 8008dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dfe:	6193      	str	r3, [r2, #24]
 8008e00:	4b1c      	ldr	r3, [pc, #112]	; (8008e74 <HAL_UART_MspInit+0xa0>)
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e08:	60fb      	str	r3, [r7, #12]
 8008e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e0c:	4b19      	ldr	r3, [pc, #100]	; (8008e74 <HAL_UART_MspInit+0xa0>)
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	4a18      	ldr	r2, [pc, #96]	; (8008e74 <HAL_UART_MspInit+0xa0>)
 8008e12:	f043 0304 	orr.w	r3, r3, #4
 8008e16:	6193      	str	r3, [r2, #24]
 8008e18:	4b16      	ldr	r3, [pc, #88]	; (8008e74 <HAL_UART_MspInit+0xa0>)
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	60bb      	str	r3, [r7, #8]
 8008e22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e32:	f107 0310 	add.w	r3, r7, #16
 8008e36:	4619      	mov	r1, r3
 8008e38:	480f      	ldr	r0, [pc, #60]	; (8008e78 <HAL_UART_MspInit+0xa4>)
 8008e3a:	f000 fc8f 	bl	800975c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e44:	2300      	movs	r3, #0
 8008e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e4c:	f107 0310 	add.w	r3, r7, #16
 8008e50:	4619      	mov	r1, r3
 8008e52:	4809      	ldr	r0, [pc, #36]	; (8008e78 <HAL_UART_MspInit+0xa4>)
 8008e54:	f000 fc82 	bl	800975c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	2025      	movs	r0, #37	; 0x25
 8008e5e:	f000 fb04 	bl	800946a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008e62:	2025      	movs	r0, #37	; 0x25
 8008e64:	f000 fb1d 	bl	80094a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008e68:	bf00      	nop
 8008e6a:	3720      	adds	r7, #32
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	40013800 	.word	0x40013800
 8008e74:	40021000 	.word	0x40021000
 8008e78:	40010800 	.word	0x40010800

08008e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008e80:	e7fe      	b.n	8008e80 <NMI_Handler+0x4>

08008e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008e82:	b480      	push	{r7}
 8008e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008e86:	e7fe      	b.n	8008e86 <HardFault_Handler+0x4>

08008e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008e8c:	e7fe      	b.n	8008e8c <MemManage_Handler+0x4>

08008e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008e92:	e7fe      	b.n	8008e92 <BusFault_Handler+0x4>

08008e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008e94:	b480      	push	{r7}
 8008e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008e98:	e7fe      	b.n	8008e98 <UsageFault_Handler+0x4>

08008e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008e9e:	bf00      	nop
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bc80      	pop	{r7}
 8008ea4:	4770      	bx	lr

08008ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008eaa:	bf00      	nop
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr

08008eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008eb6:	bf00      	nop
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bc80      	pop	{r7}
 8008ebc:	4770      	bx	lr

08008ebe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ec2:	f000 f8bf 	bl	8009044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ec6:	bf00      	nop
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008ed0:	4802      	ldr	r0, [pc, #8]	; (8008edc <TIM1_UP_IRQHandler+0x10>)
 8008ed2:	f002 fdcd 	bl	800ba70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008ed6:	bf00      	nop
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20000e5c 	.word	0x20000e5c

08008ee0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ee4:	4802      	ldr	r0, [pc, #8]	; (8008ef0 <USART1_IRQHandler+0x10>)
 8008ee6:	f003 f9cb 	bl	800c280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008eea:	bf00      	nop
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000ea4 	.word	0x20000ea4

08008ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008efc:	4a14      	ldr	r2, [pc, #80]	; (8008f50 <_sbrk+0x5c>)
 8008efe:	4b15      	ldr	r3, [pc, #84]	; (8008f54 <_sbrk+0x60>)
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f08:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <_sbrk+0x64>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f10:	4b11      	ldr	r3, [pc, #68]	; (8008f58 <_sbrk+0x64>)
 8008f12:	4a12      	ldr	r2, [pc, #72]	; (8008f5c <_sbrk+0x68>)
 8008f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f16:	4b10      	ldr	r3, [pc, #64]	; (8008f58 <_sbrk+0x64>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d207      	bcs.n	8008f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008f24:	f003 ffe6 	bl	800cef4 <__errno>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	220c      	movs	r2, #12
 8008f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f32:	e009      	b.n	8008f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008f34:	4b08      	ldr	r3, [pc, #32]	; (8008f58 <_sbrk+0x64>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008f3a:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <_sbrk+0x64>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4413      	add	r3, r2
 8008f42:	4a05      	ldr	r2, [pc, #20]	; (8008f58 <_sbrk+0x64>)
 8008f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008f46:	68fb      	ldr	r3, [r7, #12]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	2000c000 	.word	0x2000c000
 8008f54:	00000400 	.word	0x00000400
 8008f58:	20000eec 	.word	0x20000eec
 8008f5c:	20001040 	.word	0x20001040

08008f60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008f64:	bf00      	nop
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bc80      	pop	{r7}
 8008f6a:	4770      	bx	lr

08008f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008f6c:	480c      	ldr	r0, [pc, #48]	; (8008fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008f6e:	490d      	ldr	r1, [pc, #52]	; (8008fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008f70:	4a0d      	ldr	r2, [pc, #52]	; (8008fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008f74:	e002      	b.n	8008f7c <LoopCopyDataInit>

08008f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008f7a:	3304      	adds	r3, #4

08008f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008f80:	d3f9      	bcc.n	8008f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008f82:	4a0a      	ldr	r2, [pc, #40]	; (8008fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008f84:	4c0a      	ldr	r4, [pc, #40]	; (8008fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008f88:	e001      	b.n	8008f8e <LoopFillZerobss>

08008f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008f8c:	3204      	adds	r2, #4

08008f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008f90:	d3fb      	bcc.n	8008f8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008f92:	f7ff ffe5 	bl	8008f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f96:	f003 ffb3 	bl	800cf00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008f9a:	f7ff fb8f 	bl	80086bc <main>
  bx lr
 8008f9e:	4770      	bx	lr
  ldr r0, =_sdata
 8008fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008fa4:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8008fa8:	0800e5c4 	.word	0x0800e5c4
  ldr r2, =_sbss
 8008fac:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8008fb0:	2000103c 	.word	0x2000103c

08008fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008fb4:	e7fe      	b.n	8008fb4 <ADC1_2_IRQHandler>
	...

08008fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008fbc:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <HAL_Init+0x28>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a07      	ldr	r2, [pc, #28]	; (8008fe0 <HAL_Init+0x28>)
 8008fc2:	f043 0310 	orr.w	r3, r3, #16
 8008fc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008fc8:	2003      	movs	r0, #3
 8008fca:	f000 fa43 	bl	8009454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008fce:	200f      	movs	r0, #15
 8008fd0:	f000 f808 	bl	8008fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008fd4:	f7ff fdfa 	bl	8008bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	40022000 	.word	0x40022000

08008fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008fec:	4b12      	ldr	r3, [pc, #72]	; (8009038 <HAL_InitTick+0x54>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	4b12      	ldr	r3, [pc, #72]	; (800903c <HAL_InitTick+0x58>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fa5b 	bl	80094be <HAL_SYSTICK_Config>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e00e      	b.n	8009030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b0f      	cmp	r3, #15
 8009016:	d80a      	bhi.n	800902e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009018:	2200      	movs	r2, #0
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	f000 fa23 	bl	800946a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009024:	4a06      	ldr	r2, [pc, #24]	; (8009040 <HAL_InitTick+0x5c>)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	e000      	b.n	8009030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
}
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	200009c4 	.word	0x200009c4
 800903c:	200009cc 	.word	0x200009cc
 8009040:	200009c8 	.word	0x200009c8

08009044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009048:	4b05      	ldr	r3, [pc, #20]	; (8009060 <HAL_IncTick+0x1c>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <HAL_IncTick+0x20>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4413      	add	r3, r2
 8009054:	4a03      	ldr	r2, [pc, #12]	; (8009064 <HAL_IncTick+0x20>)
 8009056:	6013      	str	r3, [r2, #0]
}
 8009058:	bf00      	nop
 800905a:	46bd      	mov	sp, r7
 800905c:	bc80      	pop	{r7}
 800905e:	4770      	bx	lr
 8009060:	200009cc 	.word	0x200009cc
 8009064:	20000ef0 	.word	0x20000ef0

08009068 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  return uwTick;
 800906c:	4b02      	ldr	r3, [pc, #8]	; (8009078 <HAL_GetTick+0x10>)
 800906e:	681b      	ldr	r3, [r3, #0]
}
 8009070:	4618      	mov	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr
 8009078:	20000ef0 	.word	0x20000ef0

0800907c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009084:	f7ff fff0 	bl	8009068 <HAL_GetTick>
 8009088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d005      	beq.n	80090a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009096:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <HAL_Delay+0x44>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4413      	add	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80090a2:	bf00      	nop
 80090a4:	f7ff ffe0 	bl	8009068 <HAL_GetTick>
 80090a8:	4602      	mov	r2, r0
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d8f7      	bhi.n	80090a4 <HAL_Delay+0x28>
  {
  }
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	200009cc 	.word	0x200009cc

080090c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e0ed      	b.n	80092b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d102      	bne.n	80090e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff fda4 	bl	8008c30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0201 	orr.w	r2, r2, #1
 80090f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80090f8:	f7ff ffb6 	bl	8009068 <HAL_GetTick>
 80090fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80090fe:	e012      	b.n	8009126 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009100:	f7ff ffb2 	bl	8009068 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	2b0a      	cmp	r3, #10
 800910c:	d90b      	bls.n	8009126 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2205      	movs	r2, #5
 800911e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e0c5      	b.n	80092b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0e5      	beq.n	8009100 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 0202 	bic.w	r2, r2, #2
 8009142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009144:	f7ff ff90 	bl	8009068 <HAL_GetTick>
 8009148:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800914a:	e012      	b.n	8009172 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800914c:	f7ff ff8c 	bl	8009068 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b0a      	cmp	r3, #10
 8009158:	d90b      	bls.n	8009172 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2205      	movs	r2, #5
 800916a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e09f      	b.n	80092b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e5      	bne.n	800914c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7e1b      	ldrb	r3, [r3, #24]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d108      	bne.n	800919a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	e007      	b.n	80091aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7e5b      	ldrb	r3, [r3, #25]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d108      	bne.n	80091c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	e007      	b.n	80091d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	7e9b      	ldrb	r3, [r3, #26]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d108      	bne.n	80091ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0220 	orr.w	r2, r2, #32
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	e007      	b.n	80091fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 0220 	bic.w	r2, r2, #32
 80091fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	7edb      	ldrb	r3, [r3, #27]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d108      	bne.n	8009218 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0210 	bic.w	r2, r2, #16
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	e007      	b.n	8009228 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0210 	orr.w	r2, r2, #16
 8009226:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	7f1b      	ldrb	r3, [r3, #28]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d108      	bne.n	8009242 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0208 	orr.w	r2, r2, #8
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	e007      	b.n	8009252 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0208 	bic.w	r2, r2, #8
 8009250:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	7f5b      	ldrb	r3, [r3, #29]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d108      	bne.n	800926c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f042 0204 	orr.w	r2, r2, #4
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	e007      	b.n	800927c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 0204 	bic.w	r2, r2, #4
 800927a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	431a      	orrs	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	431a      	orrs	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	ea42 0103 	orr.w	r1, r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	1e5a      	subs	r2, r3, #1
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	430a      	orrs	r2, r1
 80092a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <__NVIC_SetPriorityGrouping>:
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80092cc:	4b0c      	ldr	r3, [pc, #48]	; (8009300 <__NVIC_SetPriorityGrouping+0x44>)
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80092d8:	4013      	ands	r3, r2
 80092da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80092e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80092e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80092ee:	4a04      	ldr	r2, [pc, #16]	; (8009300 <__NVIC_SetPriorityGrouping+0x44>)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	60d3      	str	r3, [r2, #12]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	e000ed00 	.word	0xe000ed00

08009304 <__NVIC_GetPriorityGrouping>:
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009308:	4b04      	ldr	r3, [pc, #16]	; (800931c <__NVIC_GetPriorityGrouping+0x18>)
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	0a1b      	lsrs	r3, r3, #8
 800930e:	f003 0307 	and.w	r3, r3, #7
}
 8009312:	4618      	mov	r0, r3
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	e000ed00 	.word	0xe000ed00

08009320 <__NVIC_EnableIRQ>:
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800932a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800932e:	2b00      	cmp	r3, #0
 8009330:	db0b      	blt.n	800934a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009332:	79fb      	ldrb	r3, [r7, #7]
 8009334:	f003 021f 	and.w	r2, r3, #31
 8009338:	4906      	ldr	r1, [pc, #24]	; (8009354 <__NVIC_EnableIRQ+0x34>)
 800933a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800933e:	095b      	lsrs	r3, r3, #5
 8009340:	2001      	movs	r0, #1
 8009342:	fa00 f202 	lsl.w	r2, r0, r2
 8009346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	bc80      	pop	{r7}
 8009352:	4770      	bx	lr
 8009354:	e000e100 	.word	0xe000e100

08009358 <__NVIC_SetPriority>:
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	6039      	str	r1, [r7, #0]
 8009362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009368:	2b00      	cmp	r3, #0
 800936a:	db0a      	blt.n	8009382 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	b2da      	uxtb	r2, r3
 8009370:	490c      	ldr	r1, [pc, #48]	; (80093a4 <__NVIC_SetPriority+0x4c>)
 8009372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009376:	0112      	lsls	r2, r2, #4
 8009378:	b2d2      	uxtb	r2, r2
 800937a:	440b      	add	r3, r1
 800937c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009380:	e00a      	b.n	8009398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	b2da      	uxtb	r2, r3
 8009386:	4908      	ldr	r1, [pc, #32]	; (80093a8 <__NVIC_SetPriority+0x50>)
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	f003 030f 	and.w	r3, r3, #15
 800938e:	3b04      	subs	r3, #4
 8009390:	0112      	lsls	r2, r2, #4
 8009392:	b2d2      	uxtb	r2, r2
 8009394:	440b      	add	r3, r1
 8009396:	761a      	strb	r2, [r3, #24]
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	e000e100 	.word	0xe000e100
 80093a8:	e000ed00 	.word	0xe000ed00

080093ac <NVIC_EncodePriority>:
{
 80093ac:	b480      	push	{r7}
 80093ae:	b089      	sub	sp, #36	; 0x24
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f003 0307 	and.w	r3, r3, #7
 80093be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	f1c3 0307 	rsb	r3, r3, #7
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	bf28      	it	cs
 80093ca:	2304      	movcs	r3, #4
 80093cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	3304      	adds	r3, #4
 80093d2:	2b06      	cmp	r3, #6
 80093d4:	d902      	bls.n	80093dc <NVIC_EncodePriority+0x30>
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3b03      	subs	r3, #3
 80093da:	e000      	b.n	80093de <NVIC_EncodePriority+0x32>
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ea:	43da      	mvns	r2, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	401a      	ands	r2, r3
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80093f4:	f04f 31ff 	mov.w	r1, #4294967295
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	fa01 f303 	lsl.w	r3, r1, r3
 80093fe:	43d9      	mvns	r1, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009404:	4313      	orrs	r3, r2
}
 8009406:	4618      	mov	r0, r3
 8009408:	3724      	adds	r7, #36	; 0x24
 800940a:	46bd      	mov	sp, r7
 800940c:	bc80      	pop	{r7}
 800940e:	4770      	bx	lr

08009410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	3b01      	subs	r3, #1
 800941c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009420:	d301      	bcc.n	8009426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009422:	2301      	movs	r3, #1
 8009424:	e00f      	b.n	8009446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009426:	4a0a      	ldr	r2, [pc, #40]	; (8009450 <SysTick_Config+0x40>)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	3b01      	subs	r3, #1
 800942c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800942e:	210f      	movs	r1, #15
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	f7ff ff90 	bl	8009358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009438:	4b05      	ldr	r3, [pc, #20]	; (8009450 <SysTick_Config+0x40>)
 800943a:	2200      	movs	r2, #0
 800943c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800943e:	4b04      	ldr	r3, [pc, #16]	; (8009450 <SysTick_Config+0x40>)
 8009440:	2207      	movs	r2, #7
 8009442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	e000e010 	.word	0xe000e010

08009454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff ff2d 	bl	80092bc <__NVIC_SetPriorityGrouping>
}
 8009462:	bf00      	nop
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800946a:	b580      	push	{r7, lr}
 800946c:	b086      	sub	sp, #24
 800946e:	af00      	add	r7, sp, #0
 8009470:	4603      	mov	r3, r0
 8009472:	60b9      	str	r1, [r7, #8]
 8009474:	607a      	str	r2, [r7, #4]
 8009476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009478:	2300      	movs	r3, #0
 800947a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800947c:	f7ff ff42 	bl	8009304 <__NVIC_GetPriorityGrouping>
 8009480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	68b9      	ldr	r1, [r7, #8]
 8009486:	6978      	ldr	r0, [r7, #20]
 8009488:	f7ff ff90 	bl	80093ac <NVIC_EncodePriority>
 800948c:	4602      	mov	r2, r0
 800948e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff ff5f 	bl	8009358 <__NVIC_SetPriority>
}
 800949a:	bf00      	nop
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	4603      	mov	r3, r0
 80094aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80094ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff ff35 	bl	8009320 <__NVIC_EnableIRQ>
}
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b082      	sub	sp, #8
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff ffa2 	bl	8009410 <SysTick_Config>
 80094cc:	4603      	mov	r3, r0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80094d6:	b480      	push	{r7}
 80094d8:	b085      	sub	sp, #20
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d008      	beq.n	8009500 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2204      	movs	r2, #4
 80094f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e020      	b.n	8009542 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 020e 	bic.w	r2, r2, #14
 800950e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 0201 	bic.w	r2, r2, #1
 800951e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009528:	2101      	movs	r1, #1
 800952a:	fa01 f202 	lsl.w	r2, r1, r2
 800952e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009540:	7bfb      	ldrb	r3, [r7, #15]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	bc80      	pop	{r7}
 800954a:	4770      	bx	lr

0800954c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b02      	cmp	r3, #2
 8009562:	d005      	beq.n	8009570 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2204      	movs	r2, #4
 8009568:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	73fb      	strb	r3, [r7, #15]
 800956e:	e0d6      	b.n	800971e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f022 020e 	bic.w	r2, r2, #14
 800957e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0201 	bic.w	r2, r2, #1
 800958e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	461a      	mov	r2, r3
 8009596:	4b64      	ldr	r3, [pc, #400]	; (8009728 <HAL_DMA_Abort_IT+0x1dc>)
 8009598:	429a      	cmp	r2, r3
 800959a:	d958      	bls.n	800964e <HAL_DMA_Abort_IT+0x102>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a62      	ldr	r2, [pc, #392]	; (800972c <HAL_DMA_Abort_IT+0x1e0>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d04f      	beq.n	8009646 <HAL_DMA_Abort_IT+0xfa>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a61      	ldr	r2, [pc, #388]	; (8009730 <HAL_DMA_Abort_IT+0x1e4>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d048      	beq.n	8009642 <HAL_DMA_Abort_IT+0xf6>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a5f      	ldr	r2, [pc, #380]	; (8009734 <HAL_DMA_Abort_IT+0x1e8>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d040      	beq.n	800963c <HAL_DMA_Abort_IT+0xf0>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a5e      	ldr	r2, [pc, #376]	; (8009738 <HAL_DMA_Abort_IT+0x1ec>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d038      	beq.n	8009636 <HAL_DMA_Abort_IT+0xea>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a5c      	ldr	r2, [pc, #368]	; (800973c <HAL_DMA_Abort_IT+0x1f0>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d030      	beq.n	8009630 <HAL_DMA_Abort_IT+0xe4>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a5b      	ldr	r2, [pc, #364]	; (8009740 <HAL_DMA_Abort_IT+0x1f4>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d028      	beq.n	800962a <HAL_DMA_Abort_IT+0xde>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a52      	ldr	r2, [pc, #328]	; (8009728 <HAL_DMA_Abort_IT+0x1dc>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d020      	beq.n	8009624 <HAL_DMA_Abort_IT+0xd8>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a57      	ldr	r2, [pc, #348]	; (8009744 <HAL_DMA_Abort_IT+0x1f8>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d019      	beq.n	8009620 <HAL_DMA_Abort_IT+0xd4>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a55      	ldr	r2, [pc, #340]	; (8009748 <HAL_DMA_Abort_IT+0x1fc>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d012      	beq.n	800961c <HAL_DMA_Abort_IT+0xd0>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a54      	ldr	r2, [pc, #336]	; (800974c <HAL_DMA_Abort_IT+0x200>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d00a      	beq.n	8009616 <HAL_DMA_Abort_IT+0xca>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a52      	ldr	r2, [pc, #328]	; (8009750 <HAL_DMA_Abort_IT+0x204>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d102      	bne.n	8009610 <HAL_DMA_Abort_IT+0xc4>
 800960a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800960e:	e01b      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 8009610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009614:	e018      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 8009616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800961a:	e015      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 800961c:	2310      	movs	r3, #16
 800961e:	e013      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 8009620:	2301      	movs	r3, #1
 8009622:	e011      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 8009624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009628:	e00e      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 800962a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800962e:	e00b      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 8009630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009634:	e008      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 8009636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800963a:	e005      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 800963c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009640:	e002      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 8009642:	2310      	movs	r3, #16
 8009644:	e000      	b.n	8009648 <HAL_DMA_Abort_IT+0xfc>
 8009646:	2301      	movs	r3, #1
 8009648:	4a42      	ldr	r2, [pc, #264]	; (8009754 <HAL_DMA_Abort_IT+0x208>)
 800964a:	6053      	str	r3, [r2, #4]
 800964c:	e057      	b.n	80096fe <HAL_DMA_Abort_IT+0x1b2>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a36      	ldr	r2, [pc, #216]	; (800972c <HAL_DMA_Abort_IT+0x1e0>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d04f      	beq.n	80096f8 <HAL_DMA_Abort_IT+0x1ac>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a34      	ldr	r2, [pc, #208]	; (8009730 <HAL_DMA_Abort_IT+0x1e4>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d048      	beq.n	80096f4 <HAL_DMA_Abort_IT+0x1a8>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a33      	ldr	r2, [pc, #204]	; (8009734 <HAL_DMA_Abort_IT+0x1e8>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d040      	beq.n	80096ee <HAL_DMA_Abort_IT+0x1a2>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a31      	ldr	r2, [pc, #196]	; (8009738 <HAL_DMA_Abort_IT+0x1ec>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d038      	beq.n	80096e8 <HAL_DMA_Abort_IT+0x19c>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a30      	ldr	r2, [pc, #192]	; (800973c <HAL_DMA_Abort_IT+0x1f0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d030      	beq.n	80096e2 <HAL_DMA_Abort_IT+0x196>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a2e      	ldr	r2, [pc, #184]	; (8009740 <HAL_DMA_Abort_IT+0x1f4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d028      	beq.n	80096dc <HAL_DMA_Abort_IT+0x190>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a26      	ldr	r2, [pc, #152]	; (8009728 <HAL_DMA_Abort_IT+0x1dc>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d020      	beq.n	80096d6 <HAL_DMA_Abort_IT+0x18a>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a2a      	ldr	r2, [pc, #168]	; (8009744 <HAL_DMA_Abort_IT+0x1f8>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d019      	beq.n	80096d2 <HAL_DMA_Abort_IT+0x186>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a29      	ldr	r2, [pc, #164]	; (8009748 <HAL_DMA_Abort_IT+0x1fc>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d012      	beq.n	80096ce <HAL_DMA_Abort_IT+0x182>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a27      	ldr	r2, [pc, #156]	; (800974c <HAL_DMA_Abort_IT+0x200>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00a      	beq.n	80096c8 <HAL_DMA_Abort_IT+0x17c>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a26      	ldr	r2, [pc, #152]	; (8009750 <HAL_DMA_Abort_IT+0x204>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d102      	bne.n	80096c2 <HAL_DMA_Abort_IT+0x176>
 80096bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096c0:	e01b      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096c6:	e018      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096cc:	e015      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096ce:	2310      	movs	r3, #16
 80096d0:	e013      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e011      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096da:	e00e      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80096e0:	e00b      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096e6:	e008      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096ec:	e005      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096f2:	e002      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096f4:	2310      	movs	r3, #16
 80096f6:	e000      	b.n	80096fa <HAL_DMA_Abort_IT+0x1ae>
 80096f8:	2301      	movs	r3, #1
 80096fa:	4a17      	ldr	r2, [pc, #92]	; (8009758 <HAL_DMA_Abort_IT+0x20c>)
 80096fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009712:	2b00      	cmp	r3, #0
 8009714:	d003      	beq.n	800971e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	4798      	blx	r3
    } 
  }
  return status;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	40020080 	.word	0x40020080
 800972c:	40020008 	.word	0x40020008
 8009730:	4002001c 	.word	0x4002001c
 8009734:	40020030 	.word	0x40020030
 8009738:	40020044 	.word	0x40020044
 800973c:	40020058 	.word	0x40020058
 8009740:	4002006c 	.word	0x4002006c
 8009744:	40020408 	.word	0x40020408
 8009748:	4002041c 	.word	0x4002041c
 800974c:	40020430 	.word	0x40020430
 8009750:	40020444 	.word	0x40020444
 8009754:	40020400 	.word	0x40020400
 8009758:	40020000 	.word	0x40020000

0800975c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800975c:	b480      	push	{r7}
 800975e:	b08b      	sub	sp, #44	; 0x2c
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009766:	2300      	movs	r3, #0
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800976a:	2300      	movs	r3, #0
 800976c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800976e:	e179      	b.n	8009a64 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009770:	2201      	movs	r2, #1
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	fa02 f303 	lsl.w	r3, r2, r3
 8009778:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	69fa      	ldr	r2, [r7, #28]
 8009780:	4013      	ands	r3, r2
 8009782:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	429a      	cmp	r2, r3
 800978a:	f040 8168 	bne.w	8009a5e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	4a96      	ldr	r2, [pc, #600]	; (80099ec <HAL_GPIO_Init+0x290>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d05e      	beq.n	8009856 <HAL_GPIO_Init+0xfa>
 8009798:	4a94      	ldr	r2, [pc, #592]	; (80099ec <HAL_GPIO_Init+0x290>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d875      	bhi.n	800988a <HAL_GPIO_Init+0x12e>
 800979e:	4a94      	ldr	r2, [pc, #592]	; (80099f0 <HAL_GPIO_Init+0x294>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d058      	beq.n	8009856 <HAL_GPIO_Init+0xfa>
 80097a4:	4a92      	ldr	r2, [pc, #584]	; (80099f0 <HAL_GPIO_Init+0x294>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d86f      	bhi.n	800988a <HAL_GPIO_Init+0x12e>
 80097aa:	4a92      	ldr	r2, [pc, #584]	; (80099f4 <HAL_GPIO_Init+0x298>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d052      	beq.n	8009856 <HAL_GPIO_Init+0xfa>
 80097b0:	4a90      	ldr	r2, [pc, #576]	; (80099f4 <HAL_GPIO_Init+0x298>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d869      	bhi.n	800988a <HAL_GPIO_Init+0x12e>
 80097b6:	4a90      	ldr	r2, [pc, #576]	; (80099f8 <HAL_GPIO_Init+0x29c>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d04c      	beq.n	8009856 <HAL_GPIO_Init+0xfa>
 80097bc:	4a8e      	ldr	r2, [pc, #568]	; (80099f8 <HAL_GPIO_Init+0x29c>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d863      	bhi.n	800988a <HAL_GPIO_Init+0x12e>
 80097c2:	4a8e      	ldr	r2, [pc, #568]	; (80099fc <HAL_GPIO_Init+0x2a0>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d046      	beq.n	8009856 <HAL_GPIO_Init+0xfa>
 80097c8:	4a8c      	ldr	r2, [pc, #560]	; (80099fc <HAL_GPIO_Init+0x2a0>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d85d      	bhi.n	800988a <HAL_GPIO_Init+0x12e>
 80097ce:	2b12      	cmp	r3, #18
 80097d0:	d82a      	bhi.n	8009828 <HAL_GPIO_Init+0xcc>
 80097d2:	2b12      	cmp	r3, #18
 80097d4:	d859      	bhi.n	800988a <HAL_GPIO_Init+0x12e>
 80097d6:	a201      	add	r2, pc, #4	; (adr r2, 80097dc <HAL_GPIO_Init+0x80>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	08009857 	.word	0x08009857
 80097e0:	08009831 	.word	0x08009831
 80097e4:	08009843 	.word	0x08009843
 80097e8:	08009885 	.word	0x08009885
 80097ec:	0800988b 	.word	0x0800988b
 80097f0:	0800988b 	.word	0x0800988b
 80097f4:	0800988b 	.word	0x0800988b
 80097f8:	0800988b 	.word	0x0800988b
 80097fc:	0800988b 	.word	0x0800988b
 8009800:	0800988b 	.word	0x0800988b
 8009804:	0800988b 	.word	0x0800988b
 8009808:	0800988b 	.word	0x0800988b
 800980c:	0800988b 	.word	0x0800988b
 8009810:	0800988b 	.word	0x0800988b
 8009814:	0800988b 	.word	0x0800988b
 8009818:	0800988b 	.word	0x0800988b
 800981c:	0800988b 	.word	0x0800988b
 8009820:	08009839 	.word	0x08009839
 8009824:	0800984d 	.word	0x0800984d
 8009828:	4a75      	ldr	r2, [pc, #468]	; (8009a00 <HAL_GPIO_Init+0x2a4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d013      	beq.n	8009856 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800982e:	e02c      	b.n	800988a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	623b      	str	r3, [r7, #32]
          break;
 8009836:	e029      	b.n	800988c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	3304      	adds	r3, #4
 800983e:	623b      	str	r3, [r7, #32]
          break;
 8009840:	e024      	b.n	800988c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	3308      	adds	r3, #8
 8009848:	623b      	str	r3, [r7, #32]
          break;
 800984a:	e01f      	b.n	800988c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	330c      	adds	r3, #12
 8009852:	623b      	str	r3, [r7, #32]
          break;
 8009854:	e01a      	b.n	800988c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d102      	bne.n	8009864 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800985e:	2304      	movs	r3, #4
 8009860:	623b      	str	r3, [r7, #32]
          break;
 8009862:	e013      	b.n	800988c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d105      	bne.n	8009878 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800986c:	2308      	movs	r3, #8
 800986e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	69fa      	ldr	r2, [r7, #28]
 8009874:	611a      	str	r2, [r3, #16]
          break;
 8009876:	e009      	b.n	800988c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009878:	2308      	movs	r3, #8
 800987a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	615a      	str	r2, [r3, #20]
          break;
 8009882:	e003      	b.n	800988c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009884:	2300      	movs	r3, #0
 8009886:	623b      	str	r3, [r7, #32]
          break;
 8009888:	e000      	b.n	800988c <HAL_GPIO_Init+0x130>
          break;
 800988a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	2bff      	cmp	r3, #255	; 0xff
 8009890:	d801      	bhi.n	8009896 <HAL_GPIO_Init+0x13a>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	e001      	b.n	800989a <HAL_GPIO_Init+0x13e>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3304      	adds	r3, #4
 800989a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	2bff      	cmp	r3, #255	; 0xff
 80098a0:	d802      	bhi.n	80098a8 <HAL_GPIO_Init+0x14c>
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	e002      	b.n	80098ae <HAL_GPIO_Init+0x152>
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	3b08      	subs	r3, #8
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	210f      	movs	r1, #15
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	fa01 f303 	lsl.w	r3, r1, r3
 80098bc:	43db      	mvns	r3, r3
 80098be:	401a      	ands	r2, r3
 80098c0:	6a39      	ldr	r1, [r7, #32]
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	fa01 f303 	lsl.w	r3, r1, r3
 80098c8:	431a      	orrs	r2, r3
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 80c1 	beq.w	8009a5e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80098dc:	4b49      	ldr	r3, [pc, #292]	; (8009a04 <HAL_GPIO_Init+0x2a8>)
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	4a48      	ldr	r2, [pc, #288]	; (8009a04 <HAL_GPIO_Init+0x2a8>)
 80098e2:	f043 0301 	orr.w	r3, r3, #1
 80098e6:	6193      	str	r3, [r2, #24]
 80098e8:	4b46      	ldr	r3, [pc, #280]	; (8009a04 <HAL_GPIO_Init+0x2a8>)
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	60bb      	str	r3, [r7, #8]
 80098f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80098f4:	4a44      	ldr	r2, [pc, #272]	; (8009a08 <HAL_GPIO_Init+0x2ac>)
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	089b      	lsrs	r3, r3, #2
 80098fa:	3302      	adds	r3, #2
 80098fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009900:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	f003 0303 	and.w	r3, r3, #3
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	220f      	movs	r2, #15
 800990c:	fa02 f303 	lsl.w	r3, r2, r3
 8009910:	43db      	mvns	r3, r3
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	4013      	ands	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a3c      	ldr	r2, [pc, #240]	; (8009a0c <HAL_GPIO_Init+0x2b0>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d01f      	beq.n	8009960 <HAL_GPIO_Init+0x204>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a3b      	ldr	r2, [pc, #236]	; (8009a10 <HAL_GPIO_Init+0x2b4>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d019      	beq.n	800995c <HAL_GPIO_Init+0x200>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a3a      	ldr	r2, [pc, #232]	; (8009a14 <HAL_GPIO_Init+0x2b8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d013      	beq.n	8009958 <HAL_GPIO_Init+0x1fc>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a39      	ldr	r2, [pc, #228]	; (8009a18 <HAL_GPIO_Init+0x2bc>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00d      	beq.n	8009954 <HAL_GPIO_Init+0x1f8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a38      	ldr	r2, [pc, #224]	; (8009a1c <HAL_GPIO_Init+0x2c0>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d007      	beq.n	8009950 <HAL_GPIO_Init+0x1f4>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a37      	ldr	r2, [pc, #220]	; (8009a20 <HAL_GPIO_Init+0x2c4>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d101      	bne.n	800994c <HAL_GPIO_Init+0x1f0>
 8009948:	2305      	movs	r3, #5
 800994a:	e00a      	b.n	8009962 <HAL_GPIO_Init+0x206>
 800994c:	2306      	movs	r3, #6
 800994e:	e008      	b.n	8009962 <HAL_GPIO_Init+0x206>
 8009950:	2304      	movs	r3, #4
 8009952:	e006      	b.n	8009962 <HAL_GPIO_Init+0x206>
 8009954:	2303      	movs	r3, #3
 8009956:	e004      	b.n	8009962 <HAL_GPIO_Init+0x206>
 8009958:	2302      	movs	r3, #2
 800995a:	e002      	b.n	8009962 <HAL_GPIO_Init+0x206>
 800995c:	2301      	movs	r3, #1
 800995e:	e000      	b.n	8009962 <HAL_GPIO_Init+0x206>
 8009960:	2300      	movs	r3, #0
 8009962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009964:	f002 0203 	and.w	r2, r2, #3
 8009968:	0092      	lsls	r2, r2, #2
 800996a:	4093      	lsls	r3, r2
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009972:	4925      	ldr	r1, [pc, #148]	; (8009a08 <HAL_GPIO_Init+0x2ac>)
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	089b      	lsrs	r3, r3, #2
 8009978:	3302      	adds	r3, #2
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d006      	beq.n	800999a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800998c:	4b25      	ldr	r3, [pc, #148]	; (8009a24 <HAL_GPIO_Init+0x2c8>)
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	4924      	ldr	r1, [pc, #144]	; (8009a24 <HAL_GPIO_Init+0x2c8>)
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	4313      	orrs	r3, r2
 8009996:	608b      	str	r3, [r1, #8]
 8009998:	e006      	b.n	80099a8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800999a:	4b22      	ldr	r3, [pc, #136]	; (8009a24 <HAL_GPIO_Init+0x2c8>)
 800999c:	689a      	ldr	r2, [r3, #8]
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	43db      	mvns	r3, r3
 80099a2:	4920      	ldr	r1, [pc, #128]	; (8009a24 <HAL_GPIO_Init+0x2c8>)
 80099a4:	4013      	ands	r3, r2
 80099a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d006      	beq.n	80099c2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80099b4:	4b1b      	ldr	r3, [pc, #108]	; (8009a24 <HAL_GPIO_Init+0x2c8>)
 80099b6:	68da      	ldr	r2, [r3, #12]
 80099b8:	491a      	ldr	r1, [pc, #104]	; (8009a24 <HAL_GPIO_Init+0x2c8>)
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	4313      	orrs	r3, r2
 80099be:	60cb      	str	r3, [r1, #12]
 80099c0:	e006      	b.n	80099d0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80099c2:	4b18      	ldr	r3, [pc, #96]	; (8009a24 <HAL_GPIO_Init+0x2c8>)
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	43db      	mvns	r3, r3
 80099ca:	4916      	ldr	r1, [pc, #88]	; (8009a24 <HAL_GPIO_Init+0x2c8>)
 80099cc:	4013      	ands	r3, r2
 80099ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d025      	beq.n	8009a28 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80099dc:	4b11      	ldr	r3, [pc, #68]	; (8009a24 <HAL_GPIO_Init+0x2c8>)
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	4910      	ldr	r1, [pc, #64]	; (8009a24 <HAL_GPIO_Init+0x2c8>)
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	604b      	str	r3, [r1, #4]
 80099e8:	e025      	b.n	8009a36 <HAL_GPIO_Init+0x2da>
 80099ea:	bf00      	nop
 80099ec:	10320000 	.word	0x10320000
 80099f0:	10310000 	.word	0x10310000
 80099f4:	10220000 	.word	0x10220000
 80099f8:	10210000 	.word	0x10210000
 80099fc:	10120000 	.word	0x10120000
 8009a00:	10110000 	.word	0x10110000
 8009a04:	40021000 	.word	0x40021000
 8009a08:	40010000 	.word	0x40010000
 8009a0c:	40010800 	.word	0x40010800
 8009a10:	40010c00 	.word	0x40010c00
 8009a14:	40011000 	.word	0x40011000
 8009a18:	40011400 	.word	0x40011400
 8009a1c:	40011800 	.word	0x40011800
 8009a20:	40011c00 	.word	0x40011c00
 8009a24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <HAL_GPIO_Init+0x324>)
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	43db      	mvns	r3, r3
 8009a30:	4913      	ldr	r1, [pc, #76]	; (8009a80 <HAL_GPIO_Init+0x324>)
 8009a32:	4013      	ands	r3, r2
 8009a34:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d006      	beq.n	8009a50 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009a42:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <HAL_GPIO_Init+0x324>)
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	490e      	ldr	r1, [pc, #56]	; (8009a80 <HAL_GPIO_Init+0x324>)
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	600b      	str	r3, [r1, #0]
 8009a4e:	e006      	b.n	8009a5e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009a50:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <HAL_GPIO_Init+0x324>)
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	43db      	mvns	r3, r3
 8009a58:	4909      	ldr	r1, [pc, #36]	; (8009a80 <HAL_GPIO_Init+0x324>)
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	3301      	adds	r3, #1
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f47f ae7e 	bne.w	8009770 <HAL_GPIO_Init+0x14>
  }
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	372c      	adds	r7, #44	; 0x2c
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bc80      	pop	{r7}
 8009a7e:	4770      	bx	lr
 8009a80:	40010400 	.word	0x40010400

08009a84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b089      	sub	sp, #36	; 0x24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009a92:	e0a6      	b.n	8009be2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009a94:	2201      	movs	r2, #1
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	fa02 f303 	lsl.w	r3, r2, r3
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 8099 	beq.w	8009bdc <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009aaa:	4a54      	ldr	r2, [pc, #336]	; (8009bfc <HAL_GPIO_DeInit+0x178>)
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	089b      	lsrs	r3, r3, #2
 8009ab0:	3302      	adds	r3, #2
 8009ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ab6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	f003 0303 	and.w	r3, r3, #3
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	220f      	movs	r2, #15
 8009ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	4013      	ands	r3, r2
 8009aca:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a4c      	ldr	r2, [pc, #304]	; (8009c00 <HAL_GPIO_DeInit+0x17c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d01f      	beq.n	8009b14 <HAL_GPIO_DeInit+0x90>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a4b      	ldr	r2, [pc, #300]	; (8009c04 <HAL_GPIO_DeInit+0x180>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d019      	beq.n	8009b10 <HAL_GPIO_DeInit+0x8c>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a4a      	ldr	r2, [pc, #296]	; (8009c08 <HAL_GPIO_DeInit+0x184>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d013      	beq.n	8009b0c <HAL_GPIO_DeInit+0x88>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a49      	ldr	r2, [pc, #292]	; (8009c0c <HAL_GPIO_DeInit+0x188>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d00d      	beq.n	8009b08 <HAL_GPIO_DeInit+0x84>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a48      	ldr	r2, [pc, #288]	; (8009c10 <HAL_GPIO_DeInit+0x18c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d007      	beq.n	8009b04 <HAL_GPIO_DeInit+0x80>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a47      	ldr	r2, [pc, #284]	; (8009c14 <HAL_GPIO_DeInit+0x190>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d101      	bne.n	8009b00 <HAL_GPIO_DeInit+0x7c>
 8009afc:	2305      	movs	r3, #5
 8009afe:	e00a      	b.n	8009b16 <HAL_GPIO_DeInit+0x92>
 8009b00:	2306      	movs	r3, #6
 8009b02:	e008      	b.n	8009b16 <HAL_GPIO_DeInit+0x92>
 8009b04:	2304      	movs	r3, #4
 8009b06:	e006      	b.n	8009b16 <HAL_GPIO_DeInit+0x92>
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e004      	b.n	8009b16 <HAL_GPIO_DeInit+0x92>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	e002      	b.n	8009b16 <HAL_GPIO_DeInit+0x92>
 8009b10:	2301      	movs	r3, #1
 8009b12:	e000      	b.n	8009b16 <HAL_GPIO_DeInit+0x92>
 8009b14:	2300      	movs	r3, #0
 8009b16:	69fa      	ldr	r2, [r7, #28]
 8009b18:	f002 0203 	and.w	r2, r2, #3
 8009b1c:	0092      	lsls	r2, r2, #2
 8009b1e:	4093      	lsls	r3, r2
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d132      	bne.n	8009b8c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009b26:	4b3c      	ldr	r3, [pc, #240]	; (8009c18 <HAL_GPIO_DeInit+0x194>)
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	43db      	mvns	r3, r3
 8009b2e:	493a      	ldr	r1, [pc, #232]	; (8009c18 <HAL_GPIO_DeInit+0x194>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009b34:	4b38      	ldr	r3, [pc, #224]	; (8009c18 <HAL_GPIO_DeInit+0x194>)
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	4936      	ldr	r1, [pc, #216]	; (8009c18 <HAL_GPIO_DeInit+0x194>)
 8009b3e:	4013      	ands	r3, r2
 8009b40:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009b42:	4b35      	ldr	r3, [pc, #212]	; (8009c18 <HAL_GPIO_DeInit+0x194>)
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	43db      	mvns	r3, r3
 8009b4a:	4933      	ldr	r1, [pc, #204]	; (8009c18 <HAL_GPIO_DeInit+0x194>)
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009b50:	4b31      	ldr	r3, [pc, #196]	; (8009c18 <HAL_GPIO_DeInit+0x194>)
 8009b52:	689a      	ldr	r2, [r3, #8]
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	43db      	mvns	r3, r3
 8009b58:	492f      	ldr	r1, [pc, #188]	; (8009c18 <HAL_GPIO_DeInit+0x194>)
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	f003 0303 	and.w	r3, r3, #3
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	220f      	movs	r2, #15
 8009b68:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009b6e:	4a23      	ldr	r2, [pc, #140]	; (8009bfc <HAL_GPIO_DeInit+0x178>)
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	089b      	lsrs	r3, r3, #2
 8009b74:	3302      	adds	r3, #2
 8009b76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	43da      	mvns	r2, r3
 8009b7e:	481f      	ldr	r0, [pc, #124]	; (8009bfc <HAL_GPIO_DeInit+0x178>)
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	089b      	lsrs	r3, r3, #2
 8009b84:	400a      	ands	r2, r1
 8009b86:	3302      	adds	r3, #2
 8009b88:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	2bff      	cmp	r3, #255	; 0xff
 8009b90:	d801      	bhi.n	8009b96 <HAL_GPIO_DeInit+0x112>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	e001      	b.n	8009b9a <HAL_GPIO_DeInit+0x116>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3304      	adds	r3, #4
 8009b9a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	2bff      	cmp	r3, #255	; 0xff
 8009ba0:	d802      	bhi.n	8009ba8 <HAL_GPIO_DeInit+0x124>
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	e002      	b.n	8009bae <HAL_GPIO_DeInit+0x12a>
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	3b08      	subs	r3, #8
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	210f      	movs	r1, #15
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bbc:	43db      	mvns	r3, r3
 8009bbe:	401a      	ands	r2, r3
 8009bc0:	2104      	movs	r1, #4
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc8:	431a      	orrs	r2, r3
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68da      	ldr	r2, [r3, #12]
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	401a      	ands	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	3301      	adds	r3, #1
 8009be0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f47f af52 	bne.w	8009a94 <HAL_GPIO_DeInit+0x10>
  }
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	3724      	adds	r7, #36	; 0x24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bc80      	pop	{r7}
 8009bfa:	4770      	bx	lr
 8009bfc:	40010000 	.word	0x40010000
 8009c00:	40010800 	.word	0x40010800
 8009c04:	40010c00 	.word	0x40010c00
 8009c08:	40011000 	.word	0x40011000
 8009c0c:	40011400 	.word	0x40011400
 8009c10:	40011800 	.word	0x40011800
 8009c14:	40011c00 	.word	0x40011c00
 8009c18:	40010400 	.word	0x40010400

08009c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	887b      	ldrh	r3, [r7, #2]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009c34:	2301      	movs	r3, #1
 8009c36:	73fb      	strb	r3, [r7, #15]
 8009c38:	e001      	b.n	8009c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bc80      	pop	{r7}
 8009c48:	4770      	bx	lr

08009c4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	460b      	mov	r3, r1
 8009c54:	807b      	strh	r3, [r7, #2]
 8009c56:	4613      	mov	r3, r2
 8009c58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c5a:	787b      	ldrb	r3, [r7, #1]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009c60:	887a      	ldrh	r2, [r7, #2]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009c66:	e003      	b.n	8009c70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009c68:	887b      	ldrh	r3, [r7, #2]
 8009c6a:	041a      	lsls	r2, r3, #16
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	611a      	str	r2, [r3, #16]
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bc80      	pop	{r7}
 8009c78:	4770      	bx	lr

08009c7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c7a:	b480      	push	{r7}
 8009c7c:	b085      	sub	sp, #20
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	460b      	mov	r3, r1
 8009c84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009c8c:	887a      	ldrh	r2, [r7, #2]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4013      	ands	r3, r2
 8009c92:	041a      	lsls	r2, r3, #16
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	43d9      	mvns	r1, r3
 8009c98:	887b      	ldrh	r3, [r7, #2]
 8009c9a:	400b      	ands	r3, r1
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	611a      	str	r2, [r3, #16]
}
 8009ca2:	bf00      	nop
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bc80      	pop	{r7}
 8009caa:	4770      	bx	lr

08009cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e12b      	b.n	8009f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d106      	bne.n	8009cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7fe fff8 	bl	8008cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2224      	movs	r2, #36	; 0x24
 8009cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 0201 	bic.w	r2, r2, #1
 8009cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d10:	f001 fdb8 	bl	800b884 <HAL_RCC_GetPCLK1Freq>
 8009d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	4a81      	ldr	r2, [pc, #516]	; (8009f20 <HAL_I2C_Init+0x274>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d807      	bhi.n	8009d30 <HAL_I2C_Init+0x84>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4a80      	ldr	r2, [pc, #512]	; (8009f24 <HAL_I2C_Init+0x278>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	bf94      	ite	ls
 8009d28:	2301      	movls	r3, #1
 8009d2a:	2300      	movhi	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	e006      	b.n	8009d3e <HAL_I2C_Init+0x92>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4a7d      	ldr	r2, [pc, #500]	; (8009f28 <HAL_I2C_Init+0x27c>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	bf94      	ite	ls
 8009d38:	2301      	movls	r3, #1
 8009d3a:	2300      	movhi	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e0e7      	b.n	8009f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4a78      	ldr	r2, [pc, #480]	; (8009f2c <HAL_I2C_Init+0x280>)
 8009d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4e:	0c9b      	lsrs	r3, r3, #18
 8009d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	4a6a      	ldr	r2, [pc, #424]	; (8009f20 <HAL_I2C_Init+0x274>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d802      	bhi.n	8009d80 <HAL_I2C_Init+0xd4>
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	e009      	b.n	8009d94 <HAL_I2C_Init+0xe8>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009d86:	fb02 f303 	mul.w	r3, r2, r3
 8009d8a:	4a69      	ldr	r2, [pc, #420]	; (8009f30 <HAL_I2C_Init+0x284>)
 8009d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d90:	099b      	lsrs	r3, r3, #6
 8009d92:	3301      	adds	r3, #1
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	6812      	ldr	r2, [r2, #0]
 8009d98:	430b      	orrs	r3, r1
 8009d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009da6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	495c      	ldr	r1, [pc, #368]	; (8009f20 <HAL_I2C_Init+0x274>)
 8009db0:	428b      	cmp	r3, r1
 8009db2:	d819      	bhi.n	8009de8 <HAL_I2C_Init+0x13c>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	1e59      	subs	r1, r3, #1
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009dc2:	1c59      	adds	r1, r3, #1
 8009dc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009dc8:	400b      	ands	r3, r1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <HAL_I2C_Init+0x138>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1e59      	subs	r1, r3, #1
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ddc:	3301      	adds	r3, #1
 8009dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009de2:	e051      	b.n	8009e88 <HAL_I2C_Init+0x1dc>
 8009de4:	2304      	movs	r3, #4
 8009de6:	e04f      	b.n	8009e88 <HAL_I2C_Init+0x1dc>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d111      	bne.n	8009e14 <HAL_I2C_Init+0x168>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	1e58      	subs	r0, r3, #1
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6859      	ldr	r1, [r3, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	440b      	add	r3, r1
 8009dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e02:	3301      	adds	r3, #1
 8009e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	bf0c      	ite	eq
 8009e0c:	2301      	moveq	r3, #1
 8009e0e:	2300      	movne	r3, #0
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	e012      	b.n	8009e3a <HAL_I2C_Init+0x18e>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	1e58      	subs	r0, r3, #1
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6859      	ldr	r1, [r3, #4]
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	440b      	add	r3, r1
 8009e22:	0099      	lsls	r1, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	bf0c      	ite	eq
 8009e34:	2301      	moveq	r3, #1
 8009e36:	2300      	movne	r3, #0
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <HAL_I2C_Init+0x196>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e022      	b.n	8009e88 <HAL_I2C_Init+0x1dc>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10e      	bne.n	8009e68 <HAL_I2C_Init+0x1bc>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	1e58      	subs	r0, r3, #1
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6859      	ldr	r1, [r3, #4]
 8009e52:	460b      	mov	r3, r1
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	440b      	add	r3, r1
 8009e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e66:	e00f      	b.n	8009e88 <HAL_I2C_Init+0x1dc>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	1e58      	subs	r0, r3, #1
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6859      	ldr	r1, [r3, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	440b      	add	r3, r1
 8009e76:	0099      	lsls	r1, r3, #2
 8009e78:	440b      	add	r3, r1
 8009e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e7e:	3301      	adds	r3, #1
 8009e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	6809      	ldr	r1, [r1, #0]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	69da      	ldr	r2, [r3, #28]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	6911      	ldr	r1, [r2, #16]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	68d2      	ldr	r2, [r2, #12]
 8009ec2:	4311      	orrs	r1, r2
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	430b      	orrs	r3, r1
 8009eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	695a      	ldr	r2, [r3, #20]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	431a      	orrs	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f042 0201 	orr.w	r2, r2, #1
 8009ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	000186a0 	.word	0x000186a0
 8009f24:	001e847f 	.word	0x001e847f
 8009f28:	003d08ff 	.word	0x003d08ff
 8009f2c:	431bde83 	.word	0x431bde83
 8009f30:	10624dd3 	.word	0x10624dd3

08009f34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e021      	b.n	8009f8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2224      	movs	r2, #36	; 0x24
 8009f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f022 0201 	bic.w	r2, r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7fe fef0 	bl	8008d44 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	607a      	str	r2, [r7, #4]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	817b      	strh	r3, [r7, #10]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009fa8:	f7ff f85e 	bl	8009068 <HAL_GetTick>
 8009fac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b20      	cmp	r3, #32
 8009fb8:	f040 80e0 	bne.w	800a17c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	2319      	movs	r3, #25
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	4970      	ldr	r1, [pc, #448]	; (800a188 <HAL_I2C_Master_Transmit+0x1f4>)
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f000 fe5c 	bl	800ac84 <I2C_WaitOnFlagUntilTimeout>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	e0d3      	b.n	800a17e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d101      	bne.n	8009fe4 <HAL_I2C_Master_Transmit+0x50>
 8009fe0:	2302      	movs	r3, #2
 8009fe2:	e0cc      	b.n	800a17e <HAL_I2C_Master_Transmit+0x1ea>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d007      	beq.n	800a00a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 0201 	orr.w	r2, r2, #1
 800a008:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a018:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2221      	movs	r2, #33	; 0x21
 800a01e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2210      	movs	r2, #16
 800a026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	893a      	ldrh	r2, [r7, #8]
 800a03a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a040:	b29a      	uxth	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4a50      	ldr	r2, [pc, #320]	; (800a18c <HAL_I2C_Master_Transmit+0x1f8>)
 800a04a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a04c:	8979      	ldrh	r1, [r7, #10]
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	6a3a      	ldr	r2, [r7, #32]
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fc16 	bl	800a884 <I2C_MasterRequestWrite>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e08d      	b.n	800a17e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a062:	2300      	movs	r3, #0
 800a064:	613b      	str	r3, [r7, #16]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	695b      	ldr	r3, [r3, #20]
 800a06c:	613b      	str	r3, [r7, #16]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	613b      	str	r3, [r7, #16]
 800a076:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a078:	e066      	b.n	800a148 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	6a39      	ldr	r1, [r7, #32]
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f000 ff1a 	bl	800aeb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00d      	beq.n	800a0a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08e:	2b04      	cmp	r3, #4
 800a090:	d107      	bne.n	800a0a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e06b      	b.n	800a17e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0aa:	781a      	ldrb	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	1c5a      	adds	r2, r3, #1
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	f003 0304 	and.w	r3, r3, #4
 800a0e0:	2b04      	cmp	r3, #4
 800a0e2:	d11b      	bne.n	800a11c <HAL_I2C_Master_Transmit+0x188>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d017      	beq.n	800a11c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f0:	781a      	ldrb	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a106:	b29b      	uxth	r3, r3
 800a108:	3b01      	subs	r3, #1
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a114:	3b01      	subs	r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	6a39      	ldr	r1, [r7, #32]
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 ff11 	bl	800af48 <I2C_WaitOnBTFFlagUntilTimeout>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00d      	beq.n	800a148 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a130:	2b04      	cmp	r3, #4
 800a132:	d107      	bne.n	800a144 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a142:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e01a      	b.n	800a17e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d194      	bne.n	800a07a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a15e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2220      	movs	r2, #32
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	e000      	b.n	800a17e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a17c:	2302      	movs	r3, #2
  }
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	00100002 	.word	0x00100002
 800a18c:	ffff0000 	.word	0xffff0000

0800a190 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b088      	sub	sp, #32
 800a194:	af02      	add	r7, sp, #8
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	4608      	mov	r0, r1
 800a19a:	4611      	mov	r1, r2
 800a19c:	461a      	mov	r2, r3
 800a19e:	4603      	mov	r3, r0
 800a1a0:	817b      	strh	r3, [r7, #10]
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	813b      	strh	r3, [r7, #8]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1aa:	f7fe ff5d 	bl	8009068 <HAL_GetTick>
 800a1ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b20      	cmp	r3, #32
 800a1ba:	f040 80d9 	bne.w	800a370 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	2319      	movs	r3, #25
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	496d      	ldr	r1, [pc, #436]	; (800a37c <HAL_I2C_Mem_Write+0x1ec>)
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 fd5b 	bl	800ac84 <I2C_WaitOnFlagUntilTimeout>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	e0cc      	b.n	800a372 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d101      	bne.n	800a1e6 <HAL_I2C_Mem_Write+0x56>
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	e0c5      	b.n	800a372 <HAL_I2C_Mem_Write+0x1e2>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0301 	and.w	r3, r3, #1
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d007      	beq.n	800a20c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f042 0201 	orr.w	r2, r2, #1
 800a20a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a21a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2221      	movs	r2, #33	; 0x21
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2240      	movs	r2, #64	; 0x40
 800a228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6a3a      	ldr	r2, [r7, #32]
 800a236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a23c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a242:	b29a      	uxth	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4a4d      	ldr	r2, [pc, #308]	; (800a380 <HAL_I2C_Mem_Write+0x1f0>)
 800a24c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a24e:	88f8      	ldrh	r0, [r7, #6]
 800a250:	893a      	ldrh	r2, [r7, #8]
 800a252:	8979      	ldrh	r1, [r7, #10]
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	9301      	str	r3, [sp, #4]
 800a258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	4603      	mov	r3, r0
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f000 fb92 	bl	800a988 <I2C_RequestMemoryWrite>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d052      	beq.n	800a310 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e081      	b.n	800a372 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 fe20 	bl	800aeb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00d      	beq.n	800a29a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a282:	2b04      	cmp	r3, #4
 800a284:	d107      	bne.n	800a296 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e06b      	b.n	800a372 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	781a      	ldrb	r2, [r3, #0]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d11b      	bne.n	800a310 <HAL_I2C_Mem_Write+0x180>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d017      	beq.n	800a310 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e4:	781a      	ldrb	r2, [r3, #0]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f0:	1c5a      	adds	r2, r3, #1
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a306:	b29b      	uxth	r3, r3
 800a308:	3b01      	subs	r3, #1
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1aa      	bne.n	800a26e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f000 fe13 	bl	800af48 <I2C_WaitOnBTFFlagUntilTimeout>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00d      	beq.n	800a344 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32c:	2b04      	cmp	r3, #4
 800a32e:	d107      	bne.n	800a340 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a33e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	e016      	b.n	800a372 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2220      	movs	r2, #32
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	e000      	b.n	800a372 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a370:	2302      	movs	r3, #2
  }
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	00100002 	.word	0x00100002
 800a380:	ffff0000 	.word	0xffff0000

0800a384 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b08c      	sub	sp, #48	; 0x30
 800a388:	af02      	add	r7, sp, #8
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	4608      	mov	r0, r1
 800a38e:	4611      	mov	r1, r2
 800a390:	461a      	mov	r2, r3
 800a392:	4603      	mov	r3, r0
 800a394:	817b      	strh	r3, [r7, #10]
 800a396:	460b      	mov	r3, r1
 800a398:	813b      	strh	r3, [r7, #8]
 800a39a:	4613      	mov	r3, r2
 800a39c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a3a2:	f7fe fe61 	bl	8009068 <HAL_GetTick>
 800a3a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b20      	cmp	r3, #32
 800a3b2:	f040 8244 	bne.w	800a83e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	2319      	movs	r3, #25
 800a3bc:	2201      	movs	r2, #1
 800a3be:	4982      	ldr	r1, [pc, #520]	; (800a5c8 <HAL_I2C_Mem_Read+0x244>)
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f000 fc5f 	bl	800ac84 <I2C_WaitOnFlagUntilTimeout>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	e237      	b.n	800a840 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d101      	bne.n	800a3de <HAL_I2C_Mem_Read+0x5a>
 800a3da:	2302      	movs	r3, #2
 800a3dc:	e230      	b.n	800a840 <HAL_I2C_Mem_Read+0x4bc>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d007      	beq.n	800a404 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f042 0201 	orr.w	r2, r2, #1
 800a402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2222      	movs	r2, #34	; 0x22
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2240      	movs	r2, #64	; 0x40
 800a420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a42e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4a62      	ldr	r2, [pc, #392]	; (800a5cc <HAL_I2C_Mem_Read+0x248>)
 800a444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a446:	88f8      	ldrh	r0, [r7, #6]
 800a448:	893a      	ldrh	r2, [r7, #8]
 800a44a:	8979      	ldrh	r1, [r7, #10]
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	9301      	str	r3, [sp, #4]
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	4603      	mov	r3, r0
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 fb2c 	bl	800aab4 <I2C_RequestMemoryRead>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e1ec      	b.n	800a840 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d113      	bne.n	800a496 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a46e:	2300      	movs	r3, #0
 800a470:	61fb      	str	r3, [r7, #28]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	61fb      	str	r3, [r7, #28]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	61fb      	str	r3, [r7, #28]
 800a482:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	e1c0      	b.n	800a818 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d11e      	bne.n	800a4dc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4ae:	b672      	cpsid	i
}
 800a4b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61bb      	str	r3, [r7, #24]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	61bb      	str	r3, [r7, #24]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	61bb      	str	r3, [r7, #24]
 800a4c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a4d8:	b662      	cpsie	i
}
 800a4da:	e035      	b.n	800a548 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d11e      	bne.n	800a522 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4f4:	b672      	cpsid	i
}
 800a4f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	617b      	str	r3, [r7, #20]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a51c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a51e:	b662      	cpsie	i
}
 800a520:	e012      	b.n	800a548 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a530:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a532:	2300      	movs	r3, #0
 800a534:	613b      	str	r3, [r7, #16]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	613b      	str	r3, [r7, #16]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	613b      	str	r3, [r7, #16]
 800a546:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a548:	e166      	b.n	800a818 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a54e:	2b03      	cmp	r3, #3
 800a550:	f200 811f 	bhi.w	800a792 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d123      	bne.n	800a5a4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a55c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a55e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f000 fd39 	bl	800afd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e167      	b.n	800a840 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	691a      	ldr	r2, [r3, #16]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	b2d2      	uxtb	r2, r2
 800a57c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a58c:	3b01      	subs	r3, #1
 800a58e:	b29a      	uxth	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a598:	b29b      	uxth	r3, r3
 800a59a:	3b01      	subs	r3, #1
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5a2:	e139      	b.n	800a818 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d152      	bne.n	800a652 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4906      	ldr	r1, [pc, #24]	; (800a5d0 <HAL_I2C_Mem_Read+0x24c>)
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 fb64 	bl	800ac84 <I2C_WaitOnFlagUntilTimeout>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d008      	beq.n	800a5d4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e13c      	b.n	800a840 <HAL_I2C_Mem_Read+0x4bc>
 800a5c6:	bf00      	nop
 800a5c8:	00100002 	.word	0x00100002
 800a5cc:	ffff0000 	.word	0xffff0000
 800a5d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a5d4:	b672      	cpsid	i
}
 800a5d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	691a      	ldr	r2, [r3, #16]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	b2d2      	uxtb	r2, r2
 800a5f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	1c5a      	adds	r2, r3, #1
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a604:	3b01      	subs	r3, #1
 800a606:	b29a      	uxth	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a610:	b29b      	uxth	r3, r3
 800a612:	3b01      	subs	r3, #1
 800a614:	b29a      	uxth	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a61a:	b662      	cpsie	i
}
 800a61c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	691a      	ldr	r2, [r3, #16]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a628:	b2d2      	uxtb	r2, r2
 800a62a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	1c5a      	adds	r2, r3, #1
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a63a:	3b01      	subs	r3, #1
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a646:	b29b      	uxth	r3, r3
 800a648:	3b01      	subs	r3, #1
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a650:	e0e2      	b.n	800a818 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	2200      	movs	r2, #0
 800a65a:	497b      	ldr	r1, [pc, #492]	; (800a848 <HAL_I2C_Mem_Read+0x4c4>)
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 fb11 	bl	800ac84 <I2C_WaitOnFlagUntilTimeout>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e0e9      	b.n	800a840 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a67a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a67c:	b672      	cpsid	i
}
 800a67e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	691a      	ldr	r2, [r3, #16]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68a:	b2d2      	uxtb	r2, r2
 800a68c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a69c:	3b01      	subs	r3, #1
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a6b2:	4b66      	ldr	r3, [pc, #408]	; (800a84c <HAL_I2C_Mem_Read+0x4c8>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	08db      	lsrs	r3, r3, #3
 800a6b8:	4a65      	ldr	r2, [pc, #404]	; (800a850 <HAL_I2C_Mem_Read+0x4cc>)
 800a6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a6be:	0a1a      	lsrs	r2, r3, #8
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	00da      	lsls	r2, r3, #3
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d118      	bne.n	800a70a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f2:	f043 0220 	orr.w	r2, r3, #32
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a6fa:	b662      	cpsie	i
}
 800a6fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e09a      	b.n	800a840 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b04      	cmp	r3, #4
 800a716:	d1d9      	bne.n	800a6cc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	691a      	ldr	r2, [r3, #16]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a732:	b2d2      	uxtb	r2, r2
 800a734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a744:	3b01      	subs	r3, #1
 800a746:	b29a      	uxth	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a750:	b29b      	uxth	r3, r3
 800a752:	3b01      	subs	r3, #1
 800a754:	b29a      	uxth	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a75a:	b662      	cpsie	i
}
 800a75c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	691a      	ldr	r2, [r3, #16]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	b2d2      	uxtb	r2, r2
 800a76a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	1c5a      	adds	r2, r3, #1
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a77a:	3b01      	subs	r3, #1
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a786:	b29b      	uxth	r3, r3
 800a788:	3b01      	subs	r3, #1
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a790:	e042      	b.n	800a818 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a794:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f000 fc1e 	bl	800afd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e04c      	b.n	800a840 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	691a      	ldr	r2, [r3, #16]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b0:	b2d2      	uxtb	r2, r2
 800a7b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	d118      	bne.n	800a818 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	691a      	ldr	r2, [r3, #16]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	b2d2      	uxtb	r2, r2
 800a7f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	1c5a      	adds	r2, r3, #1
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a802:	3b01      	subs	r3, #1
 800a804:	b29a      	uxth	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a80e:	b29b      	uxth	r3, r3
 800a810:	3b01      	subs	r3, #1
 800a812:	b29a      	uxth	r2, r3
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f47f ae94 	bne.w	800a54a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2220      	movs	r2, #32
 800a826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	e000      	b.n	800a840 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a83e:	2302      	movs	r3, #2
  }
}
 800a840:	4618      	mov	r0, r3
 800a842:	3728      	adds	r7, #40	; 0x28
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	00010004 	.word	0x00010004
 800a84c:	200009c4 	.word	0x200009c4
 800a850:	14f8b589 	.word	0x14f8b589

0800a854 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a862:	b2db      	uxtb	r3, r3
}
 800a864:	4618      	mov	r0, r3
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	bc80      	pop	{r7}
 800a86c:	4770      	bx	lr

0800a86e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	bc80      	pop	{r7}
 800a882:	4770      	bx	lr

0800a884 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b088      	sub	sp, #32
 800a888:	af02      	add	r7, sp, #8
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	607a      	str	r2, [r7, #4]
 800a88e:	603b      	str	r3, [r7, #0]
 800a890:	460b      	mov	r3, r1
 800a892:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a898:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b08      	cmp	r3, #8
 800a89e:	d006      	beq.n	800a8ae <I2C_MasterRequestWrite+0x2a>
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d003      	beq.n	800a8ae <I2C_MasterRequestWrite+0x2a>
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a8ac:	d108      	bne.n	800a8c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	e00b      	b.n	800a8d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c4:	2b12      	cmp	r3, #18
 800a8c6:	d107      	bne.n	800a8d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 f9cd 	bl	800ac84 <I2C_WaitOnFlagUntilTimeout>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00d      	beq.n	800a90c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8fe:	d103      	bne.n	800a908 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a906:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e035      	b.n	800a978 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a914:	d108      	bne.n	800a928 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a916:	897b      	ldrh	r3, [r7, #10]
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	461a      	mov	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a924:	611a      	str	r2, [r3, #16]
 800a926:	e01b      	b.n	800a960 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a928:	897b      	ldrh	r3, [r7, #10]
 800a92a:	11db      	asrs	r3, r3, #7
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f003 0306 	and.w	r3, r3, #6
 800a932:	b2db      	uxtb	r3, r3
 800a934:	f063 030f 	orn	r3, r3, #15
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	490e      	ldr	r1, [pc, #56]	; (800a980 <I2C_MasterRequestWrite+0xfc>)
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 fa16 	bl	800ad78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e010      	b.n	800a978 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a956:	897b      	ldrh	r3, [r7, #10]
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	4907      	ldr	r1, [pc, #28]	; (800a984 <I2C_MasterRequestWrite+0x100>)
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 fa06 	bl	800ad78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e000      	b.n	800a978 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3718      	adds	r7, #24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	00010008 	.word	0x00010008
 800a984:	00010002 	.word	0x00010002

0800a988 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af02      	add	r7, sp, #8
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	4608      	mov	r0, r1
 800a992:	4611      	mov	r1, r2
 800a994:	461a      	mov	r2, r3
 800a996:	4603      	mov	r3, r0
 800a998:	817b      	strh	r3, [r7, #10]
 800a99a:	460b      	mov	r3, r1
 800a99c:	813b      	strh	r3, [r7, #8]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f000 f960 	bl	800ac84 <I2C_WaitOnFlagUntilTimeout>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00d      	beq.n	800a9e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9d8:	d103      	bne.n	800a9e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e05f      	b.n	800aaa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a9e6:	897b      	ldrh	r3, [r7, #10]
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a9f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f8:	6a3a      	ldr	r2, [r7, #32]
 800a9fa:	492d      	ldr	r1, [pc, #180]	; (800aab0 <I2C_RequestMemoryWrite+0x128>)
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f000 f9bb 	bl	800ad78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e04c      	b.n	800aaa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	617b      	str	r3, [r7, #20]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	617b      	str	r3, [r7, #20]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa24:	6a39      	ldr	r1, [r7, #32]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f000 fa46 	bl	800aeb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00d      	beq.n	800aa4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d107      	bne.n	800aa4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e02b      	b.n	800aaa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d105      	bne.n	800aa60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa54:	893b      	ldrh	r3, [r7, #8]
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	611a      	str	r2, [r3, #16]
 800aa5e:	e021      	b.n	800aaa4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aa60:	893b      	ldrh	r3, [r7, #8]
 800aa62:	0a1b      	lsrs	r3, r3, #8
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa70:	6a39      	ldr	r1, [r7, #32]
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 fa20 	bl	800aeb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00d      	beq.n	800aa9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	d107      	bne.n	800aa96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e005      	b.n	800aaa6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa9a:	893b      	ldrh	r3, [r7, #8]
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	00010002 	.word	0x00010002

0800aab4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	4608      	mov	r0, r1
 800aabe:	4611      	mov	r1, r2
 800aac0:	461a      	mov	r2, r3
 800aac2:	4603      	mov	r3, r0
 800aac4:	817b      	strh	r3, [r7, #10]
 800aac6:	460b      	mov	r3, r1
 800aac8:	813b      	strh	r3, [r7, #8]
 800aaca:	4613      	mov	r3, r2
 800aacc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aadc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aaec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f000 f8c2 	bl	800ac84 <I2C_WaitOnFlagUntilTimeout>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00d      	beq.n	800ab22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab14:	d103      	bne.n	800ab1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e0aa      	b.n	800ac78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab22:	897b      	ldrh	r3, [r7, #10]
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	461a      	mov	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab34:	6a3a      	ldr	r2, [r7, #32]
 800ab36:	4952      	ldr	r1, [pc, #328]	; (800ac80 <I2C_RequestMemoryRead+0x1cc>)
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f000 f91d 	bl	800ad78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e097      	b.n	800ac78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab48:	2300      	movs	r3, #0
 800ab4a:	617b      	str	r3, [r7, #20]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	617b      	str	r3, [r7, #20]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	699b      	ldr	r3, [r3, #24]
 800ab5a:	617b      	str	r3, [r7, #20]
 800ab5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab60:	6a39      	ldr	r1, [r7, #32]
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 f9a8 	bl	800aeb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00d      	beq.n	800ab8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	2b04      	cmp	r3, #4
 800ab74:	d107      	bne.n	800ab86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	e076      	b.n	800ac78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab8a:	88fb      	ldrh	r3, [r7, #6]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d105      	bne.n	800ab9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab90:	893b      	ldrh	r3, [r7, #8]
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	611a      	str	r2, [r3, #16]
 800ab9a:	e021      	b.n	800abe0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ab9c:	893b      	ldrh	r3, [r7, #8]
 800ab9e:	0a1b      	lsrs	r3, r3, #8
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abac:	6a39      	ldr	r1, [r7, #32]
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f000 f982 	bl	800aeb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00d      	beq.n	800abd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	d107      	bne.n	800abd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e050      	b.n	800ac78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abd6:	893b      	ldrh	r3, [r7, #8]
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe2:	6a39      	ldr	r1, [r7, #32]
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f000 f967 	bl	800aeb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00d      	beq.n	800ac0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf4:	2b04      	cmp	r3, #4
 800abf6:	d107      	bne.n	800ac08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e035      	b.n	800ac78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	6a3b      	ldr	r3, [r7, #32]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 f82b 	bl	800ac84 <I2C_WaitOnFlagUntilTimeout>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00d      	beq.n	800ac50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac42:	d103      	bne.n	800ac4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e013      	b.n	800ac78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ac50:	897b      	ldrh	r3, [r7, #10]
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	f043 0301 	orr.w	r3, r3, #1
 800ac58:	b2da      	uxtb	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	6a3a      	ldr	r2, [r7, #32]
 800ac64:	4906      	ldr	r1, [pc, #24]	; (800ac80 <I2C_RequestMemoryRead+0x1cc>)
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f000 f886 	bl	800ad78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e000      	b.n	800ac78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	00010002 	.word	0x00010002

0800ac84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	4613      	mov	r3, r2
 800ac92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac94:	e048      	b.n	800ad28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9c:	d044      	beq.n	800ad28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac9e:	f7fe f9e3 	bl	8009068 <HAL_GetTick>
 800aca2:	4602      	mov	r2, r0
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d302      	bcc.n	800acb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d139      	bne.n	800ad28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	0c1b      	lsrs	r3, r3, #16
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d10d      	bne.n	800acda <I2C_WaitOnFlagUntilTimeout+0x56>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	43da      	mvns	r2, r3
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	4013      	ands	r3, r2
 800acca:	b29b      	uxth	r3, r3
 800accc:	2b00      	cmp	r3, #0
 800acce:	bf0c      	ite	eq
 800acd0:	2301      	moveq	r3, #1
 800acd2:	2300      	movne	r3, #0
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	461a      	mov	r2, r3
 800acd8:	e00c      	b.n	800acf4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	43da      	mvns	r2, r3
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	4013      	ands	r3, r2
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bf0c      	ite	eq
 800acec:	2301      	moveq	r3, #1
 800acee:	2300      	movne	r3, #0
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	461a      	mov	r2, r3
 800acf4:	79fb      	ldrb	r3, [r7, #7]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d116      	bne.n	800ad28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad14:	f043 0220 	orr.w	r2, r3, #32
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	e023      	b.n	800ad70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	0c1b      	lsrs	r3, r3, #16
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d10d      	bne.n	800ad4e <I2C_WaitOnFlagUntilTimeout+0xca>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	43da      	mvns	r2, r3
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	bf0c      	ite	eq
 800ad44:	2301      	moveq	r3, #1
 800ad46:	2300      	movne	r3, #0
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	e00c      	b.n	800ad68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	43da      	mvns	r2, r3
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	4013      	ands	r3, r2
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bf0c      	ite	eq
 800ad60:	2301      	moveq	r3, #1
 800ad62:	2300      	movne	r3, #0
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	461a      	mov	r2, r3
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d093      	beq.n	800ac96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ad86:	e071      	b.n	800ae6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad96:	d123      	bne.n	800ade0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ada6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800adb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2220      	movs	r2, #32
 800adbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adcc:	f043 0204 	orr.w	r2, r3, #4
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e067      	b.n	800aeb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade6:	d041      	beq.n	800ae6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ade8:	f7fe f93e 	bl	8009068 <HAL_GetTick>
 800adec:	4602      	mov	r2, r0
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d302      	bcc.n	800adfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d136      	bne.n	800ae6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	0c1b      	lsrs	r3, r3, #16
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d10c      	bne.n	800ae22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	43da      	mvns	r2, r3
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	4013      	ands	r3, r2
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bf14      	ite	ne
 800ae1a:	2301      	movne	r3, #1
 800ae1c:	2300      	moveq	r3, #0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	e00b      	b.n	800ae3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	43da      	mvns	r2, r3
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	bf14      	ite	ne
 800ae34:	2301      	movne	r3, #1
 800ae36:	2300      	moveq	r3, #0
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d016      	beq.n	800ae6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2220      	movs	r2, #32
 800ae48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae58:	f043 0220 	orr.w	r2, r3, #32
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e021      	b.n	800aeb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	0c1b      	lsrs	r3, r3, #16
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d10c      	bne.n	800ae90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	43da      	mvns	r2, r3
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	4013      	ands	r3, r2
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	bf14      	ite	ne
 800ae88:	2301      	movne	r3, #1
 800ae8a:	2300      	moveq	r3, #0
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	e00b      	b.n	800aea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	43da      	mvns	r2, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	bf14      	ite	ne
 800aea2:	2301      	movne	r3, #1
 800aea4:	2300      	moveq	r3, #0
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f47f af6d 	bne.w	800ad88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aec4:	e034      	b.n	800af30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f000 f8e3 	bl	800b092 <I2C_IsAcknowledgeFailed>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e034      	b.n	800af40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aedc:	d028      	beq.n	800af30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aede:	f7fe f8c3 	bl	8009068 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d302      	bcc.n	800aef4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d11d      	bne.n	800af30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aefe:	2b80      	cmp	r3, #128	; 0x80
 800af00:	d016      	beq.n	800af30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2220      	movs	r2, #32
 800af0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1c:	f043 0220 	orr.w	r2, r3, #32
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e007      	b.n	800af40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af3a:	2b80      	cmp	r3, #128	; 0x80
 800af3c:	d1c3      	bne.n	800aec6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800af54:	e034      	b.n	800afc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 f89b 	bl	800b092 <I2C_IsAcknowledgeFailed>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e034      	b.n	800afd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6c:	d028      	beq.n	800afc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af6e:	f7fe f87b 	bl	8009068 <HAL_GetTick>
 800af72:	4602      	mov	r2, r0
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d302      	bcc.n	800af84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d11d      	bne.n	800afc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	695b      	ldr	r3, [r3, #20]
 800af8a:	f003 0304 	and.w	r3, r3, #4
 800af8e:	2b04      	cmp	r3, #4
 800af90:	d016      	beq.n	800afc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2220      	movs	r2, #32
 800af9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afac:	f043 0220 	orr.w	r2, r3, #32
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e007      	b.n	800afd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	695b      	ldr	r3, [r3, #20]
 800afc6:	f003 0304 	and.w	r3, r3, #4
 800afca:	2b04      	cmp	r3, #4
 800afcc:	d1c3      	bne.n	800af56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800afe4:	e049      	b.n	800b07a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	f003 0310 	and.w	r3, r3, #16
 800aff0:	2b10      	cmp	r3, #16
 800aff2:	d119      	bne.n	800b028 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f06f 0210 	mvn.w	r2, #16
 800affc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2220      	movs	r2, #32
 800b008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e030      	b.n	800b08a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b028:	f7fe f81e 	bl	8009068 <HAL_GetTick>
 800b02c:	4602      	mov	r2, r0
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	429a      	cmp	r2, r3
 800b036:	d302      	bcc.n	800b03e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d11d      	bne.n	800b07a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b048:	2b40      	cmp	r3, #64	; 0x40
 800b04a:	d016      	beq.n	800b07a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2220      	movs	r2, #32
 800b056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b066:	f043 0220 	orr.w	r2, r3, #32
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e007      	b.n	800b08a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	695b      	ldr	r3, [r3, #20]
 800b080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b084:	2b40      	cmp	r3, #64	; 0x40
 800b086:	d1ae      	bne.n	800afe6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b092:	b480      	push	{r7}
 800b094:	b083      	sub	sp, #12
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0a8:	d11b      	bne.n	800b0e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b0b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2220      	movs	r2, #32
 800b0be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ce:	f043 0204 	orr.w	r2, r3, #4
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e000      	b.n	800b0e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bc80      	pop	{r7}
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	e272      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 0301 	and.w	r3, r3, #1
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f000 8087 	beq.w	800b21e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b110:	4b92      	ldr	r3, [pc, #584]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	f003 030c 	and.w	r3, r3, #12
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d00c      	beq.n	800b136 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b11c:	4b8f      	ldr	r3, [pc, #572]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	f003 030c 	and.w	r3, r3, #12
 800b124:	2b08      	cmp	r3, #8
 800b126:	d112      	bne.n	800b14e <HAL_RCC_OscConfig+0x5e>
 800b128:	4b8c      	ldr	r3, [pc, #560]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b134:	d10b      	bne.n	800b14e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b136:	4b89      	ldr	r3, [pc, #548]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d06c      	beq.n	800b21c <HAL_RCC_OscConfig+0x12c>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d168      	bne.n	800b21c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e24c      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b156:	d106      	bne.n	800b166 <HAL_RCC_OscConfig+0x76>
 800b158:	4b80      	ldr	r3, [pc, #512]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a7f      	ldr	r2, [pc, #508]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b15e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b162:	6013      	str	r3, [r2, #0]
 800b164:	e02e      	b.n	800b1c4 <HAL_RCC_OscConfig+0xd4>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10c      	bne.n	800b188 <HAL_RCC_OscConfig+0x98>
 800b16e:	4b7b      	ldr	r3, [pc, #492]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a7a      	ldr	r2, [pc, #488]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	4b78      	ldr	r3, [pc, #480]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a77      	ldr	r2, [pc, #476]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	e01d      	b.n	800b1c4 <HAL_RCC_OscConfig+0xd4>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b190:	d10c      	bne.n	800b1ac <HAL_RCC_OscConfig+0xbc>
 800b192:	4b72      	ldr	r3, [pc, #456]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a71      	ldr	r2, [pc, #452]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	4b6f      	ldr	r3, [pc, #444]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a6e      	ldr	r2, [pc, #440]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b1a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1a8:	6013      	str	r3, [r2, #0]
 800b1aa:	e00b      	b.n	800b1c4 <HAL_RCC_OscConfig+0xd4>
 800b1ac:	4b6b      	ldr	r3, [pc, #428]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a6a      	ldr	r2, [pc, #424]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b1b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	4b68      	ldr	r3, [pc, #416]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a67      	ldr	r2, [pc, #412]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b1be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d013      	beq.n	800b1f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1cc:	f7fd ff4c 	bl	8009068 <HAL_GetTick>
 800b1d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1d2:	e008      	b.n	800b1e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1d4:	f7fd ff48 	bl	8009068 <HAL_GetTick>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	2b64      	cmp	r3, #100	; 0x64
 800b1e0:	d901      	bls.n	800b1e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e200      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1e6:	4b5d      	ldr	r3, [pc, #372]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0f0      	beq.n	800b1d4 <HAL_RCC_OscConfig+0xe4>
 800b1f2:	e014      	b.n	800b21e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1f4:	f7fd ff38 	bl	8009068 <HAL_GetTick>
 800b1f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1fa:	e008      	b.n	800b20e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1fc:	f7fd ff34 	bl	8009068 <HAL_GetTick>
 800b200:	4602      	mov	r2, r0
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	1ad3      	subs	r3, r2, r3
 800b206:	2b64      	cmp	r3, #100	; 0x64
 800b208:	d901      	bls.n	800b20e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b20a:	2303      	movs	r3, #3
 800b20c:	e1ec      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b20e:	4b53      	ldr	r3, [pc, #332]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1f0      	bne.n	800b1fc <HAL_RCC_OscConfig+0x10c>
 800b21a:	e000      	b.n	800b21e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b21c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 0302 	and.w	r3, r3, #2
 800b226:	2b00      	cmp	r3, #0
 800b228:	d063      	beq.n	800b2f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b22a:	4b4c      	ldr	r3, [pc, #304]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	f003 030c 	and.w	r3, r3, #12
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00b      	beq.n	800b24e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b236:	4b49      	ldr	r3, [pc, #292]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	f003 030c 	and.w	r3, r3, #12
 800b23e:	2b08      	cmp	r3, #8
 800b240:	d11c      	bne.n	800b27c <HAL_RCC_OscConfig+0x18c>
 800b242:	4b46      	ldr	r3, [pc, #280]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d116      	bne.n	800b27c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b24e:	4b43      	ldr	r3, [pc, #268]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 0302 	and.w	r3, r3, #2
 800b256:	2b00      	cmp	r3, #0
 800b258:	d005      	beq.n	800b266 <HAL_RCC_OscConfig+0x176>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d001      	beq.n	800b266 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e1c0      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b266:	4b3d      	ldr	r3, [pc, #244]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	695b      	ldr	r3, [r3, #20]
 800b272:	00db      	lsls	r3, r3, #3
 800b274:	4939      	ldr	r1, [pc, #228]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b276:	4313      	orrs	r3, r2
 800b278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b27a:	e03a      	b.n	800b2f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d020      	beq.n	800b2c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b284:	4b36      	ldr	r3, [pc, #216]	; (800b360 <HAL_RCC_OscConfig+0x270>)
 800b286:	2201      	movs	r2, #1
 800b288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b28a:	f7fd feed 	bl	8009068 <HAL_GetTick>
 800b28e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b290:	e008      	b.n	800b2a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b292:	f7fd fee9 	bl	8009068 <HAL_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d901      	bls.n	800b2a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e1a1      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2a4:	4b2d      	ldr	r3, [pc, #180]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 0302 	and.w	r3, r3, #2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d0f0      	beq.n	800b292 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2b0:	4b2a      	ldr	r3, [pc, #168]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	00db      	lsls	r3, r3, #3
 800b2be:	4927      	ldr	r1, [pc, #156]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	600b      	str	r3, [r1, #0]
 800b2c4:	e015      	b.n	800b2f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2c6:	4b26      	ldr	r3, [pc, #152]	; (800b360 <HAL_RCC_OscConfig+0x270>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2cc:	f7fd fecc 	bl	8009068 <HAL_GetTick>
 800b2d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2d2:	e008      	b.n	800b2e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2d4:	f7fd fec8 	bl	8009068 <HAL_GetTick>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d901      	bls.n	800b2e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e180      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2e6:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0302 	and.w	r3, r3, #2
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1f0      	bne.n	800b2d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0308 	and.w	r3, r3, #8
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d03a      	beq.n	800b374 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d019      	beq.n	800b33a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b306:	4b17      	ldr	r3, [pc, #92]	; (800b364 <HAL_RCC_OscConfig+0x274>)
 800b308:	2201      	movs	r2, #1
 800b30a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b30c:	f7fd feac 	bl	8009068 <HAL_GetTick>
 800b310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b312:	e008      	b.n	800b326 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b314:	f7fd fea8 	bl	8009068 <HAL_GetTick>
 800b318:	4602      	mov	r2, r0
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d901      	bls.n	800b326 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	e160      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b326:	4b0d      	ldr	r3, [pc, #52]	; (800b35c <HAL_RCC_OscConfig+0x26c>)
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	f003 0302 	and.w	r3, r3, #2
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d0f0      	beq.n	800b314 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b332:	2001      	movs	r0, #1
 800b334:	f000 face 	bl	800b8d4 <RCC_Delay>
 800b338:	e01c      	b.n	800b374 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b33a:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <HAL_RCC_OscConfig+0x274>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b340:	f7fd fe92 	bl	8009068 <HAL_GetTick>
 800b344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b346:	e00f      	b.n	800b368 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b348:	f7fd fe8e 	bl	8009068 <HAL_GetTick>
 800b34c:	4602      	mov	r2, r0
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	2b02      	cmp	r3, #2
 800b354:	d908      	bls.n	800b368 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e146      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
 800b35a:	bf00      	nop
 800b35c:	40021000 	.word	0x40021000
 800b360:	42420000 	.word	0x42420000
 800b364:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b368:	4b92      	ldr	r3, [pc, #584]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36c:	f003 0302 	and.w	r3, r3, #2
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1e9      	bne.n	800b348 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f000 80a6 	beq.w	800b4ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b382:	2300      	movs	r3, #0
 800b384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b386:	4b8b      	ldr	r3, [pc, #556]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b388:	69db      	ldr	r3, [r3, #28]
 800b38a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10d      	bne.n	800b3ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b392:	4b88      	ldr	r3, [pc, #544]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b394:	69db      	ldr	r3, [r3, #28]
 800b396:	4a87      	ldr	r2, [pc, #540]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b39c:	61d3      	str	r3, [r2, #28]
 800b39e:	4b85      	ldr	r3, [pc, #532]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b3a0:	69db      	ldr	r3, [r3, #28]
 800b3a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3a6:	60bb      	str	r3, [r7, #8]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3ae:	4b82      	ldr	r3, [pc, #520]	; (800b5b8 <HAL_RCC_OscConfig+0x4c8>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d118      	bne.n	800b3ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b3ba:	4b7f      	ldr	r3, [pc, #508]	; (800b5b8 <HAL_RCC_OscConfig+0x4c8>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a7e      	ldr	r2, [pc, #504]	; (800b5b8 <HAL_RCC_OscConfig+0x4c8>)
 800b3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3c6:	f7fd fe4f 	bl	8009068 <HAL_GetTick>
 800b3ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3cc:	e008      	b.n	800b3e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3ce:	f7fd fe4b 	bl	8009068 <HAL_GetTick>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	2b64      	cmp	r3, #100	; 0x64
 800b3da:	d901      	bls.n	800b3e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e103      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3e0:	4b75      	ldr	r3, [pc, #468]	; (800b5b8 <HAL_RCC_OscConfig+0x4c8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d0f0      	beq.n	800b3ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d106      	bne.n	800b402 <HAL_RCC_OscConfig+0x312>
 800b3f4:	4b6f      	ldr	r3, [pc, #444]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b3f6:	6a1b      	ldr	r3, [r3, #32]
 800b3f8:	4a6e      	ldr	r2, [pc, #440]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b3fa:	f043 0301 	orr.w	r3, r3, #1
 800b3fe:	6213      	str	r3, [r2, #32]
 800b400:	e02d      	b.n	800b45e <HAL_RCC_OscConfig+0x36e>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10c      	bne.n	800b424 <HAL_RCC_OscConfig+0x334>
 800b40a:	4b6a      	ldr	r3, [pc, #424]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b40c:	6a1b      	ldr	r3, [r3, #32]
 800b40e:	4a69      	ldr	r2, [pc, #420]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b410:	f023 0301 	bic.w	r3, r3, #1
 800b414:	6213      	str	r3, [r2, #32]
 800b416:	4b67      	ldr	r3, [pc, #412]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	4a66      	ldr	r2, [pc, #408]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b41c:	f023 0304 	bic.w	r3, r3, #4
 800b420:	6213      	str	r3, [r2, #32]
 800b422:	e01c      	b.n	800b45e <HAL_RCC_OscConfig+0x36e>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	2b05      	cmp	r3, #5
 800b42a:	d10c      	bne.n	800b446 <HAL_RCC_OscConfig+0x356>
 800b42c:	4b61      	ldr	r3, [pc, #388]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	4a60      	ldr	r2, [pc, #384]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b432:	f043 0304 	orr.w	r3, r3, #4
 800b436:	6213      	str	r3, [r2, #32]
 800b438:	4b5e      	ldr	r3, [pc, #376]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b43a:	6a1b      	ldr	r3, [r3, #32]
 800b43c:	4a5d      	ldr	r2, [pc, #372]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b43e:	f043 0301 	orr.w	r3, r3, #1
 800b442:	6213      	str	r3, [r2, #32]
 800b444:	e00b      	b.n	800b45e <HAL_RCC_OscConfig+0x36e>
 800b446:	4b5b      	ldr	r3, [pc, #364]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	4a5a      	ldr	r2, [pc, #360]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b44c:	f023 0301 	bic.w	r3, r3, #1
 800b450:	6213      	str	r3, [r2, #32]
 800b452:	4b58      	ldr	r3, [pc, #352]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	4a57      	ldr	r2, [pc, #348]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b458:	f023 0304 	bic.w	r3, r3, #4
 800b45c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d015      	beq.n	800b492 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b466:	f7fd fdff 	bl	8009068 <HAL_GetTick>
 800b46a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b46c:	e00a      	b.n	800b484 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b46e:	f7fd fdfb 	bl	8009068 <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	f241 3288 	movw	r2, #5000	; 0x1388
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d901      	bls.n	800b484 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e0b1      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b484:	4b4b      	ldr	r3, [pc, #300]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	f003 0302 	and.w	r3, r3, #2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0ee      	beq.n	800b46e <HAL_RCC_OscConfig+0x37e>
 800b490:	e014      	b.n	800b4bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b492:	f7fd fde9 	bl	8009068 <HAL_GetTick>
 800b496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b498:	e00a      	b.n	800b4b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b49a:	f7fd fde5 	bl	8009068 <HAL_GetTick>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d901      	bls.n	800b4b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e09b      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4b0:	4b40      	ldr	r3, [pc, #256]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b4b2:	6a1b      	ldr	r3, [r3, #32]
 800b4b4:	f003 0302 	and.w	r3, r3, #2
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1ee      	bne.n	800b49a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d105      	bne.n	800b4ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4c2:	4b3c      	ldr	r3, [pc, #240]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b4c4:	69db      	ldr	r3, [r3, #28]
 800b4c6:	4a3b      	ldr	r2, [pc, #236]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b4c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	69db      	ldr	r3, [r3, #28]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 8087 	beq.w	800b5e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b4d8:	4b36      	ldr	r3, [pc, #216]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	f003 030c 	and.w	r3, r3, #12
 800b4e0:	2b08      	cmp	r3, #8
 800b4e2:	d061      	beq.n	800b5a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d146      	bne.n	800b57a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4ec:	4b33      	ldr	r3, [pc, #204]	; (800b5bc <HAL_RCC_OscConfig+0x4cc>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4f2:	f7fd fdb9 	bl	8009068 <HAL_GetTick>
 800b4f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b4f8:	e008      	b.n	800b50c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4fa:	f7fd fdb5 	bl	8009068 <HAL_GetTick>
 800b4fe:	4602      	mov	r2, r0
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	2b02      	cmp	r3, #2
 800b506:	d901      	bls.n	800b50c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b508:	2303      	movs	r3, #3
 800b50a:	e06d      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b50c:	4b29      	ldr	r3, [pc, #164]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1f0      	bne.n	800b4fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a1b      	ldr	r3, [r3, #32]
 800b51c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b520:	d108      	bne.n	800b534 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b522:	4b24      	ldr	r3, [pc, #144]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	689b      	ldr	r3, [r3, #8]
 800b52e:	4921      	ldr	r1, [pc, #132]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b530:	4313      	orrs	r3, r2
 800b532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b534:	4b1f      	ldr	r3, [pc, #124]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a19      	ldr	r1, [r3, #32]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	430b      	orrs	r3, r1
 800b546:	491b      	ldr	r1, [pc, #108]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b548:	4313      	orrs	r3, r2
 800b54a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b54c:	4b1b      	ldr	r3, [pc, #108]	; (800b5bc <HAL_RCC_OscConfig+0x4cc>)
 800b54e:	2201      	movs	r2, #1
 800b550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b552:	f7fd fd89 	bl	8009068 <HAL_GetTick>
 800b556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b558:	e008      	b.n	800b56c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b55a:	f7fd fd85 	bl	8009068 <HAL_GetTick>
 800b55e:	4602      	mov	r2, r0
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	2b02      	cmp	r3, #2
 800b566:	d901      	bls.n	800b56c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b568:	2303      	movs	r3, #3
 800b56a:	e03d      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b56c:	4b11      	ldr	r3, [pc, #68]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0f0      	beq.n	800b55a <HAL_RCC_OscConfig+0x46a>
 800b578:	e035      	b.n	800b5e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b57a:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <HAL_RCC_OscConfig+0x4cc>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b580:	f7fd fd72 	bl	8009068 <HAL_GetTick>
 800b584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b586:	e008      	b.n	800b59a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b588:	f7fd fd6e 	bl	8009068 <HAL_GetTick>
 800b58c:	4602      	mov	r2, r0
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	2b02      	cmp	r3, #2
 800b594:	d901      	bls.n	800b59a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	e026      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b59a:	4b06      	ldr	r3, [pc, #24]	; (800b5b4 <HAL_RCC_OscConfig+0x4c4>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1f0      	bne.n	800b588 <HAL_RCC_OscConfig+0x498>
 800b5a6:	e01e      	b.n	800b5e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	69db      	ldr	r3, [r3, #28]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d107      	bne.n	800b5c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e019      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
 800b5b4:	40021000 	.word	0x40021000
 800b5b8:	40007000 	.word	0x40007000
 800b5bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b5c0:	4b0b      	ldr	r3, [pc, #44]	; (800b5f0 <HAL_RCC_OscConfig+0x500>)
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a1b      	ldr	r3, [r3, #32]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d106      	bne.n	800b5e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d001      	beq.n	800b5e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e000      	b.n	800b5e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	40021000 	.word	0x40021000

0800b5f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	e0d0      	b.n	800b7aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b608:	4b6a      	ldr	r3, [pc, #424]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f003 0307 	and.w	r3, r3, #7
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	429a      	cmp	r2, r3
 800b614:	d910      	bls.n	800b638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b616:	4b67      	ldr	r3, [pc, #412]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f023 0207 	bic.w	r2, r3, #7
 800b61e:	4965      	ldr	r1, [pc, #404]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	4313      	orrs	r3, r2
 800b624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b626:	4b63      	ldr	r3, [pc, #396]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f003 0307 	and.w	r3, r3, #7
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	429a      	cmp	r2, r3
 800b632:	d001      	beq.n	800b638 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	e0b8      	b.n	800b7aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0302 	and.w	r3, r3, #2
 800b640:	2b00      	cmp	r3, #0
 800b642:	d020      	beq.n	800b686 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 0304 	and.w	r3, r3, #4
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d005      	beq.n	800b65c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b650:	4b59      	ldr	r3, [pc, #356]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	4a58      	ldr	r2, [pc, #352]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b656:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b65a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b00      	cmp	r3, #0
 800b666:	d005      	beq.n	800b674 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b668:	4b53      	ldr	r3, [pc, #332]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	4a52      	ldr	r2, [pc, #328]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b66e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b672:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b674:	4b50      	ldr	r3, [pc, #320]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	494d      	ldr	r1, [pc, #308]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b682:	4313      	orrs	r3, r2
 800b684:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d040      	beq.n	800b714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d107      	bne.n	800b6aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b69a:	4b47      	ldr	r3, [pc, #284]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d115      	bne.n	800b6d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e07f      	b.n	800b7aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d107      	bne.n	800b6c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6b2:	4b41      	ldr	r3, [pc, #260]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d109      	bne.n	800b6d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e073      	b.n	800b7aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6c2:	4b3d      	ldr	r3, [pc, #244]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 0302 	and.w	r3, r3, #2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e06b      	b.n	800b7aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b6d2:	4b39      	ldr	r3, [pc, #228]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f023 0203 	bic.w	r2, r3, #3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	4936      	ldr	r1, [pc, #216]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b6e4:	f7fd fcc0 	bl	8009068 <HAL_GetTick>
 800b6e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6ea:	e00a      	b.n	800b702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6ec:	f7fd fcbc 	bl	8009068 <HAL_GetTick>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d901      	bls.n	800b702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e053      	b.n	800b7aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b702:	4b2d      	ldr	r3, [pc, #180]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f003 020c 	and.w	r2, r3, #12
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	429a      	cmp	r2, r3
 800b712:	d1eb      	bne.n	800b6ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b714:	4b27      	ldr	r3, [pc, #156]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f003 0307 	and.w	r3, r3, #7
 800b71c:	683a      	ldr	r2, [r7, #0]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d210      	bcs.n	800b744 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b722:	4b24      	ldr	r3, [pc, #144]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f023 0207 	bic.w	r2, r3, #7
 800b72a:	4922      	ldr	r1, [pc, #136]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	4313      	orrs	r3, r2
 800b730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b732:	4b20      	ldr	r3, [pc, #128]	; (800b7b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 0307 	and.w	r3, r3, #7
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d001      	beq.n	800b744 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b740:	2301      	movs	r3, #1
 800b742:	e032      	b.n	800b7aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0304 	and.w	r3, r3, #4
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d008      	beq.n	800b762 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b750:	4b19      	ldr	r3, [pc, #100]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	4916      	ldr	r1, [pc, #88]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b75e:	4313      	orrs	r3, r2
 800b760:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f003 0308 	and.w	r3, r3, #8
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d009      	beq.n	800b782 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b76e:	4b12      	ldr	r3, [pc, #72]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	490e      	ldr	r1, [pc, #56]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b77e:	4313      	orrs	r3, r2
 800b780:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b782:	f000 f821 	bl	800b7c8 <HAL_RCC_GetSysClockFreq>
 800b786:	4602      	mov	r2, r0
 800b788:	4b0b      	ldr	r3, [pc, #44]	; (800b7b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	091b      	lsrs	r3, r3, #4
 800b78e:	f003 030f 	and.w	r3, r3, #15
 800b792:	490a      	ldr	r1, [pc, #40]	; (800b7bc <HAL_RCC_ClockConfig+0x1c8>)
 800b794:	5ccb      	ldrb	r3, [r1, r3]
 800b796:	fa22 f303 	lsr.w	r3, r2, r3
 800b79a:	4a09      	ldr	r2, [pc, #36]	; (800b7c0 <HAL_RCC_ClockConfig+0x1cc>)
 800b79c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b79e:	4b09      	ldr	r3, [pc, #36]	; (800b7c4 <HAL_RCC_ClockConfig+0x1d0>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fd fc1e 	bl	8008fe4 <HAL_InitTick>

  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	40022000 	.word	0x40022000
 800b7b8:	40021000 	.word	0x40021000
 800b7bc:	0800e538 	.word	0x0800e538
 800b7c0:	200009c4 	.word	0x200009c4
 800b7c4:	200009c8 	.word	0x200009c8

0800b7c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60bb      	str	r3, [r7, #8]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b7e2:	4b1e      	ldr	r3, [pc, #120]	; (800b85c <HAL_RCC_GetSysClockFreq+0x94>)
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f003 030c 	and.w	r3, r3, #12
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d002      	beq.n	800b7f8 <HAL_RCC_GetSysClockFreq+0x30>
 800b7f2:	2b08      	cmp	r3, #8
 800b7f4:	d003      	beq.n	800b7fe <HAL_RCC_GetSysClockFreq+0x36>
 800b7f6:	e027      	b.n	800b848 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b7f8:	4b19      	ldr	r3, [pc, #100]	; (800b860 <HAL_RCC_GetSysClockFreq+0x98>)
 800b7fa:	613b      	str	r3, [r7, #16]
      break;
 800b7fc:	e027      	b.n	800b84e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	0c9b      	lsrs	r3, r3, #18
 800b802:	f003 030f 	and.w	r3, r3, #15
 800b806:	4a17      	ldr	r2, [pc, #92]	; (800b864 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b808:	5cd3      	ldrb	r3, [r2, r3]
 800b80a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d010      	beq.n	800b838 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b816:	4b11      	ldr	r3, [pc, #68]	; (800b85c <HAL_RCC_GetSysClockFreq+0x94>)
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	0c5b      	lsrs	r3, r3, #17
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	4a11      	ldr	r2, [pc, #68]	; (800b868 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b822:	5cd3      	ldrb	r3, [r2, r3]
 800b824:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a0d      	ldr	r2, [pc, #52]	; (800b860 <HAL_RCC_GetSysClockFreq+0x98>)
 800b82a:	fb03 f202 	mul.w	r2, r3, r2
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	fbb2 f3f3 	udiv	r3, r2, r3
 800b834:	617b      	str	r3, [r7, #20]
 800b836:	e004      	b.n	800b842 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a0c      	ldr	r2, [pc, #48]	; (800b86c <HAL_RCC_GetSysClockFreq+0xa4>)
 800b83c:	fb02 f303 	mul.w	r3, r2, r3
 800b840:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	613b      	str	r3, [r7, #16]
      break;
 800b846:	e002      	b.n	800b84e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b848:	4b05      	ldr	r3, [pc, #20]	; (800b860 <HAL_RCC_GetSysClockFreq+0x98>)
 800b84a:	613b      	str	r3, [r7, #16]
      break;
 800b84c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b84e:	693b      	ldr	r3, [r7, #16]
}
 800b850:	4618      	mov	r0, r3
 800b852:	371c      	adds	r7, #28
 800b854:	46bd      	mov	sp, r7
 800b856:	bc80      	pop	{r7}
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	40021000 	.word	0x40021000
 800b860:	007a1200 	.word	0x007a1200
 800b864:	0800e550 	.word	0x0800e550
 800b868:	0800e560 	.word	0x0800e560
 800b86c:	003d0900 	.word	0x003d0900

0800b870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b870:	b480      	push	{r7}
 800b872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b874:	4b02      	ldr	r3, [pc, #8]	; (800b880 <HAL_RCC_GetHCLKFreq+0x10>)
 800b876:	681b      	ldr	r3, [r3, #0]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bc80      	pop	{r7}
 800b87e:	4770      	bx	lr
 800b880:	200009c4 	.word	0x200009c4

0800b884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b888:	f7ff fff2 	bl	800b870 <HAL_RCC_GetHCLKFreq>
 800b88c:	4602      	mov	r2, r0
 800b88e:	4b05      	ldr	r3, [pc, #20]	; (800b8a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	0a1b      	lsrs	r3, r3, #8
 800b894:	f003 0307 	and.w	r3, r3, #7
 800b898:	4903      	ldr	r1, [pc, #12]	; (800b8a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b89a:	5ccb      	ldrb	r3, [r1, r3]
 800b89c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	40021000 	.word	0x40021000
 800b8a8:	0800e548 	.word	0x0800e548

0800b8ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b8b0:	f7ff ffde 	bl	800b870 <HAL_RCC_GetHCLKFreq>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	0adb      	lsrs	r3, r3, #11
 800b8bc:	f003 0307 	and.w	r3, r3, #7
 800b8c0:	4903      	ldr	r1, [pc, #12]	; (800b8d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8c2:	5ccb      	ldrb	r3, [r1, r3]
 800b8c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	40021000 	.word	0x40021000
 800b8d0:	0800e548 	.word	0x0800e548

0800b8d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b8dc:	4b0a      	ldr	r3, [pc, #40]	; (800b908 <RCC_Delay+0x34>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a0a      	ldr	r2, [pc, #40]	; (800b90c <RCC_Delay+0x38>)
 800b8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e6:	0a5b      	lsrs	r3, r3, #9
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	fb02 f303 	mul.w	r3, r2, r3
 800b8ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b8f0:	bf00      	nop
  }
  while (Delay --);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	1e5a      	subs	r2, r3, #1
 800b8f6:	60fa      	str	r2, [r7, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1f9      	bne.n	800b8f0 <RCC_Delay+0x1c>
}
 800b8fc:	bf00      	nop
 800b8fe:	bf00      	nop
 800b900:	3714      	adds	r7, #20
 800b902:	46bd      	mov	sp, r7
 800b904:	bc80      	pop	{r7}
 800b906:	4770      	bx	lr
 800b908:	200009c4 	.word	0x200009c4
 800b90c:	10624dd3 	.word	0x10624dd3

0800b910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d101      	bne.n	800b922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b91e:	2301      	movs	r3, #1
 800b920:	e041      	b.n	800b9a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d106      	bne.n	800b93c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7fd fa26 	bl	8008d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2202      	movs	r2, #2
 800b940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	3304      	adds	r3, #4
 800b94c:	4619      	mov	r1, r3
 800b94e:	4610      	mov	r0, r2
 800b950:	f000 fa82 	bl	800be58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2201      	movs	r2, #1
 800b958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
	...

0800b9b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d001      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e044      	b.n	800ba52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68da      	ldr	r2, [r3, #12]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f042 0201 	orr.w	r2, r2, #1
 800b9de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a1d      	ldr	r2, [pc, #116]	; (800ba5c <HAL_TIM_Base_Start_IT+0xac>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d018      	beq.n	800ba1c <HAL_TIM_Base_Start_IT+0x6c>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a1c      	ldr	r2, [pc, #112]	; (800ba60 <HAL_TIM_Base_Start_IT+0xb0>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d013      	beq.n	800ba1c <HAL_TIM_Base_Start_IT+0x6c>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9fc:	d00e      	beq.n	800ba1c <HAL_TIM_Base_Start_IT+0x6c>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a18      	ldr	r2, [pc, #96]	; (800ba64 <HAL_TIM_Base_Start_IT+0xb4>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d009      	beq.n	800ba1c <HAL_TIM_Base_Start_IT+0x6c>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a16      	ldr	r2, [pc, #88]	; (800ba68 <HAL_TIM_Base_Start_IT+0xb8>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d004      	beq.n	800ba1c <HAL_TIM_Base_Start_IT+0x6c>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a15      	ldr	r2, [pc, #84]	; (800ba6c <HAL_TIM_Base_Start_IT+0xbc>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d111      	bne.n	800ba40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	f003 0307 	and.w	r3, r3, #7
 800ba26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2b06      	cmp	r3, #6
 800ba2c:	d010      	beq.n	800ba50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f042 0201 	orr.w	r2, r2, #1
 800ba3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba3e:	e007      	b.n	800ba50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f042 0201 	orr.w	r2, r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bc80      	pop	{r7}
 800ba5a:	4770      	bx	lr
 800ba5c:	40012c00 	.word	0x40012c00
 800ba60:	40013400 	.word	0x40013400
 800ba64:	40000400 	.word	0x40000400
 800ba68:	40000800 	.word	0x40000800
 800ba6c:	40000c00 	.word	0x40000c00

0800ba70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d122      	bne.n	800bacc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b02      	cmp	r3, #2
 800ba92:	d11b      	bne.n	800bacc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f06f 0202 	mvn.w	r2, #2
 800ba9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2201      	movs	r2, #1
 800baa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	699b      	ldr	r3, [r3, #24]
 800baaa:	f003 0303 	and.w	r3, r3, #3
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f9b4 	bl	800be20 <HAL_TIM_IC_CaptureCallback>
 800bab8:	e005      	b.n	800bac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f9a7 	bl	800be0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f9b6 	bl	800be32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	f003 0304 	and.w	r3, r3, #4
 800bad6:	2b04      	cmp	r3, #4
 800bad8:	d122      	bne.n	800bb20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	d11b      	bne.n	800bb20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f06f 0204 	mvn.w	r2, #4
 800baf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2202      	movs	r2, #2
 800baf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f98a 	bl	800be20 <HAL_TIM_IC_CaptureCallback>
 800bb0c:	e005      	b.n	800bb1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f97d 	bl	800be0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f98c 	bl	800be32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	f003 0308 	and.w	r3, r3, #8
 800bb2a:	2b08      	cmp	r3, #8
 800bb2c:	d122      	bne.n	800bb74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f003 0308 	and.w	r3, r3, #8
 800bb38:	2b08      	cmp	r3, #8
 800bb3a:	d11b      	bne.n	800bb74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f06f 0208 	mvn.w	r2, #8
 800bb44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2204      	movs	r2, #4
 800bb4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f003 0303 	and.w	r3, r3, #3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f960 	bl	800be20 <HAL_TIM_IC_CaptureCallback>
 800bb60:	e005      	b.n	800bb6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f953 	bl	800be0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f962 	bl	800be32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	f003 0310 	and.w	r3, r3, #16
 800bb7e:	2b10      	cmp	r3, #16
 800bb80:	d122      	bne.n	800bbc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	f003 0310 	and.w	r3, r3, #16
 800bb8c:	2b10      	cmp	r3, #16
 800bb8e:	d11b      	bne.n	800bbc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f06f 0210 	mvn.w	r2, #16
 800bb98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2208      	movs	r2, #8
 800bb9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d003      	beq.n	800bbb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f936 	bl	800be20 <HAL_TIM_IC_CaptureCallback>
 800bbb4:	e005      	b.n	800bbc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f929 	bl	800be0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f938 	bl	800be32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	f003 0301 	and.w	r3, r3, #1
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d10e      	bne.n	800bbf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	f003 0301 	and.w	r3, r3, #1
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d107      	bne.n	800bbf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f06f 0201 	mvn.w	r2, #1
 800bbec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7fc fd54 	bl	800869c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbfe:	2b80      	cmp	r3, #128	; 0x80
 800bc00:	d10e      	bne.n	800bc20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc0c:	2b80      	cmp	r3, #128	; 0x80
 800bc0e:	d107      	bne.n	800bc20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 faa1 	bl	800c162 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc2a:	2b40      	cmp	r3, #64	; 0x40
 800bc2c:	d10e      	bne.n	800bc4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc38:	2b40      	cmp	r3, #64	; 0x40
 800bc3a:	d107      	bne.n	800bc4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f8fc 	bl	800be44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	f003 0320 	and.w	r3, r3, #32
 800bc56:	2b20      	cmp	r3, #32
 800bc58:	d10e      	bne.n	800bc78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	f003 0320 	and.w	r3, r3, #32
 800bc64:	2b20      	cmp	r3, #32
 800bc66:	d107      	bne.n	800bc78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f06f 0220 	mvn.w	r2, #32
 800bc70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 fa6c 	bl	800c150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc78:	bf00      	nop
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d101      	bne.n	800bc9c <HAL_TIM_ConfigClockSource+0x1c>
 800bc98:	2302      	movs	r3, #2
 800bc9a:	e0b4      	b.n	800be06 <HAL_TIM_ConfigClockSource+0x186>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2202      	movs	r2, #2
 800bca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bcba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcd4:	d03e      	beq.n	800bd54 <HAL_TIM_ConfigClockSource+0xd4>
 800bcd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcda:	f200 8087 	bhi.w	800bdec <HAL_TIM_ConfigClockSource+0x16c>
 800bcde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bce2:	f000 8086 	beq.w	800bdf2 <HAL_TIM_ConfigClockSource+0x172>
 800bce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcea:	d87f      	bhi.n	800bdec <HAL_TIM_ConfigClockSource+0x16c>
 800bcec:	2b70      	cmp	r3, #112	; 0x70
 800bcee:	d01a      	beq.n	800bd26 <HAL_TIM_ConfigClockSource+0xa6>
 800bcf0:	2b70      	cmp	r3, #112	; 0x70
 800bcf2:	d87b      	bhi.n	800bdec <HAL_TIM_ConfigClockSource+0x16c>
 800bcf4:	2b60      	cmp	r3, #96	; 0x60
 800bcf6:	d050      	beq.n	800bd9a <HAL_TIM_ConfigClockSource+0x11a>
 800bcf8:	2b60      	cmp	r3, #96	; 0x60
 800bcfa:	d877      	bhi.n	800bdec <HAL_TIM_ConfigClockSource+0x16c>
 800bcfc:	2b50      	cmp	r3, #80	; 0x50
 800bcfe:	d03c      	beq.n	800bd7a <HAL_TIM_ConfigClockSource+0xfa>
 800bd00:	2b50      	cmp	r3, #80	; 0x50
 800bd02:	d873      	bhi.n	800bdec <HAL_TIM_ConfigClockSource+0x16c>
 800bd04:	2b40      	cmp	r3, #64	; 0x40
 800bd06:	d058      	beq.n	800bdba <HAL_TIM_ConfigClockSource+0x13a>
 800bd08:	2b40      	cmp	r3, #64	; 0x40
 800bd0a:	d86f      	bhi.n	800bdec <HAL_TIM_ConfigClockSource+0x16c>
 800bd0c:	2b30      	cmp	r3, #48	; 0x30
 800bd0e:	d064      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0x15a>
 800bd10:	2b30      	cmp	r3, #48	; 0x30
 800bd12:	d86b      	bhi.n	800bdec <HAL_TIM_ConfigClockSource+0x16c>
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	d060      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0x15a>
 800bd18:	2b20      	cmp	r3, #32
 800bd1a:	d867      	bhi.n	800bdec <HAL_TIM_ConfigClockSource+0x16c>
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d05c      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0x15a>
 800bd20:	2b10      	cmp	r3, #16
 800bd22:	d05a      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0x15a>
 800bd24:	e062      	b.n	800bdec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd36:	f000 f980 	bl	800c03a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	609a      	str	r2, [r3, #8]
      break;
 800bd52:	e04f      	b.n	800bdf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd64:	f000 f969 	bl	800c03a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	689a      	ldr	r2, [r3, #8]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd76:	609a      	str	r2, [r3, #8]
      break;
 800bd78:	e03c      	b.n	800bdf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd86:	461a      	mov	r2, r3
 800bd88:	f000 f8e0 	bl	800bf4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2150      	movs	r1, #80	; 0x50
 800bd92:	4618      	mov	r0, r3
 800bd94:	f000 f937 	bl	800c006 <TIM_ITRx_SetConfig>
      break;
 800bd98:	e02c      	b.n	800bdf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bda6:	461a      	mov	r2, r3
 800bda8:	f000 f8fe 	bl	800bfa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2160      	movs	r1, #96	; 0x60
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 f927 	bl	800c006 <TIM_ITRx_SetConfig>
      break;
 800bdb8:	e01c      	b.n	800bdf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f000 f8c0 	bl	800bf4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2140      	movs	r1, #64	; 0x40
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 f917 	bl	800c006 <TIM_ITRx_SetConfig>
      break;
 800bdd8:	e00c      	b.n	800bdf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4619      	mov	r1, r3
 800bde4:	4610      	mov	r0, r2
 800bde6:	f000 f90e 	bl	800c006 <TIM_ITRx_SetConfig>
      break;
 800bdea:	e003      	b.n	800bdf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	73fb      	strb	r3, [r7, #15]
      break;
 800bdf0:	e000      	b.n	800bdf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bdf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be04:	7bfb      	ldrb	r3, [r7, #15]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be0e:	b480      	push	{r7}
 800be10:	b083      	sub	sp, #12
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be16:	bf00      	nop
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bc80      	pop	{r7}
 800be1e:	4770      	bx	lr

0800be20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bc80      	pop	{r7}
 800be30:	4770      	bx	lr

0800be32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be32:	b480      	push	{r7}
 800be34:	b083      	sub	sp, #12
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be3a:	bf00      	nop
 800be3c:	370c      	adds	r7, #12
 800be3e:	46bd      	mov	sp, r7
 800be40:	bc80      	pop	{r7}
 800be42:	4770      	bx	lr

0800be44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	bc80      	pop	{r7}
 800be54:	4770      	bx	lr
	...

0800be58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a33      	ldr	r2, [pc, #204]	; (800bf38 <TIM_Base_SetConfig+0xe0>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d013      	beq.n	800be98 <TIM_Base_SetConfig+0x40>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a32      	ldr	r2, [pc, #200]	; (800bf3c <TIM_Base_SetConfig+0xe4>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d00f      	beq.n	800be98 <TIM_Base_SetConfig+0x40>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be7e:	d00b      	beq.n	800be98 <TIM_Base_SetConfig+0x40>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a2f      	ldr	r2, [pc, #188]	; (800bf40 <TIM_Base_SetConfig+0xe8>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d007      	beq.n	800be98 <TIM_Base_SetConfig+0x40>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a2e      	ldr	r2, [pc, #184]	; (800bf44 <TIM_Base_SetConfig+0xec>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d003      	beq.n	800be98 <TIM_Base_SetConfig+0x40>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4a2d      	ldr	r2, [pc, #180]	; (800bf48 <TIM_Base_SetConfig+0xf0>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d108      	bne.n	800beaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a22      	ldr	r2, [pc, #136]	; (800bf38 <TIM_Base_SetConfig+0xe0>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d013      	beq.n	800beda <TIM_Base_SetConfig+0x82>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a21      	ldr	r2, [pc, #132]	; (800bf3c <TIM_Base_SetConfig+0xe4>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d00f      	beq.n	800beda <TIM_Base_SetConfig+0x82>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bec0:	d00b      	beq.n	800beda <TIM_Base_SetConfig+0x82>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a1e      	ldr	r2, [pc, #120]	; (800bf40 <TIM_Base_SetConfig+0xe8>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d007      	beq.n	800beda <TIM_Base_SetConfig+0x82>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a1d      	ldr	r2, [pc, #116]	; (800bf44 <TIM_Base_SetConfig+0xec>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d003      	beq.n	800beda <TIM_Base_SetConfig+0x82>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a1c      	ldr	r2, [pc, #112]	; (800bf48 <TIM_Base_SetConfig+0xf0>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d108      	bne.n	800beec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	4313      	orrs	r3, r2
 800beea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	695b      	ldr	r3, [r3, #20]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	689a      	ldr	r2, [r3, #8]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a09      	ldr	r2, [pc, #36]	; (800bf38 <TIM_Base_SetConfig+0xe0>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d003      	beq.n	800bf20 <TIM_Base_SetConfig+0xc8>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a08      	ldr	r2, [pc, #32]	; (800bf3c <TIM_Base_SetConfig+0xe4>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d103      	bne.n	800bf28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	691a      	ldr	r2, [r3, #16]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	615a      	str	r2, [r3, #20]
}
 800bf2e:	bf00      	nop
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bc80      	pop	{r7}
 800bf36:	4770      	bx	lr
 800bf38:	40012c00 	.word	0x40012c00
 800bf3c:	40013400 	.word	0x40013400
 800bf40:	40000400 	.word	0x40000400
 800bf44:	40000800 	.word	0x40000800
 800bf48:	40000c00 	.word	0x40000c00

0800bf4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b087      	sub	sp, #28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6a1b      	ldr	r3, [r3, #32]
 800bf5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6a1b      	ldr	r3, [r3, #32]
 800bf62:	f023 0201 	bic.w	r2, r3, #1
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	f023 030a 	bic.w	r3, r3, #10
 800bf88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	621a      	str	r2, [r3, #32]
}
 800bf9e:	bf00      	nop
 800bfa0:	371c      	adds	r7, #28
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bc80      	pop	{r7}
 800bfa6:	4770      	bx	lr

0800bfa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6a1b      	ldr	r3, [r3, #32]
 800bfb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6a1b      	ldr	r3, [r3, #32]
 800bfbe:	f023 0210 	bic.w	r2, r3, #16
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	699b      	ldr	r3, [r3, #24]
 800bfca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bfd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	031b      	lsls	r3, r3, #12
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bfe4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	011b      	lsls	r3, r3, #4
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	693a      	ldr	r2, [r7, #16]
 800bff4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	621a      	str	r2, [r3, #32]
}
 800bffc:	bf00      	nop
 800bffe:	371c      	adds	r7, #28
 800c000:	46bd      	mov	sp, r7
 800c002:	bc80      	pop	{r7}
 800c004:	4770      	bx	lr

0800c006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c006:	b480      	push	{r7}
 800c008:	b085      	sub	sp, #20
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c01c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	4313      	orrs	r3, r2
 800c024:	f043 0307 	orr.w	r3, r3, #7
 800c028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	609a      	str	r2, [r3, #8]
}
 800c030:	bf00      	nop
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	bc80      	pop	{r7}
 800c038:	4770      	bx	lr

0800c03a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b087      	sub	sp, #28
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	607a      	str	r2, [r7, #4]
 800c046:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c054:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	021a      	lsls	r2, r3, #8
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	431a      	orrs	r2, r3
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	4313      	orrs	r3, r2
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	4313      	orrs	r3, r2
 800c066:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	609a      	str	r2, [r3, #8]
}
 800c06e:	bf00      	nop
 800c070:	371c      	adds	r7, #28
 800c072:	46bd      	mov	sp, r7
 800c074:	bc80      	pop	{r7}
 800c076:	4770      	bx	lr

0800c078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d101      	bne.n	800c090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c08c:	2302      	movs	r3, #2
 800c08e:	e050      	b.n	800c132 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2202      	movs	r2, #2
 800c09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a1b      	ldr	r2, [pc, #108]	; (800c13c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d018      	beq.n	800c106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a19      	ldr	r2, [pc, #100]	; (800c140 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d013      	beq.n	800c106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0e6:	d00e      	beq.n	800c106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a15      	ldr	r2, [pc, #84]	; (800c144 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d009      	beq.n	800c106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a14      	ldr	r2, [pc, #80]	; (800c148 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d004      	beq.n	800c106 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a12      	ldr	r2, [pc, #72]	; (800c14c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d10c      	bne.n	800c120 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c10c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	4313      	orrs	r3, r2
 800c116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3714      	adds	r7, #20
 800c136:	46bd      	mov	sp, r7
 800c138:	bc80      	pop	{r7}
 800c13a:	4770      	bx	lr
 800c13c:	40012c00 	.word	0x40012c00
 800c140:	40013400 	.word	0x40013400
 800c144:	40000400 	.word	0x40000400
 800c148:	40000800 	.word	0x40000800
 800c14c:	40000c00 	.word	0x40000c00

0800c150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bc80      	pop	{r7}
 800c160:	4770      	bx	lr

0800c162 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c162:	b480      	push	{r7}
 800c164:	b083      	sub	sp, #12
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c16a:	bf00      	nop
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	bc80      	pop	{r7}
 800c172:	4770      	bx	lr

0800c174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d101      	bne.n	800c186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	e042      	b.n	800c20c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7fc fe1a 	bl	8008dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2224      	movs	r2, #36	; 0x24
 800c1a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68da      	ldr	r2, [r3, #12]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c1b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 fcb5 	bl	800cb28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	691a      	ldr	r2, [r3, #16]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	695a      	ldr	r2, [r3, #20]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68da      	ldr	r2, [r3, #12]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c1ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2220      	movs	r2, #32
 800c1f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2220      	movs	r2, #32
 800c200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	4613      	mov	r3, r2
 800c220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b20      	cmp	r3, #32
 800c22c:	d121      	bne.n	800c272 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d002      	beq.n	800c23a <HAL_UART_Transmit_IT+0x26>
 800c234:	88fb      	ldrh	r3, [r7, #6]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d101      	bne.n	800c23e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	e01a      	b.n	800c274 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	88fa      	ldrh	r2, [r7, #6]
 800c248:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	88fa      	ldrh	r2, [r7, #6]
 800c24e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2221      	movs	r2, #33	; 0x21
 800c25a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68da      	ldr	r2, [r3, #12]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c26c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	e000      	b.n	800c274 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c272:	2302      	movs	r3, #2
  }
}
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	bc80      	pop	{r7}
 800c27c:	4770      	bx	lr
	...

0800c280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b0ba      	sub	sp, #232	; 0xe8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	695b      	ldr	r3, [r3, #20]
 800c2a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2b6:	f003 030f 	and.w	r3, r3, #15
 800c2ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c2be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10f      	bne.n	800c2e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ca:	f003 0320 	and.w	r3, r3, #32
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d009      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x66>
 800c2d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2d6:	f003 0320 	and.w	r3, r3, #32
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d003      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fb63 	bl	800c9aa <UART_Receive_IT>
      return;
 800c2e4:	e25b      	b.n	800c79e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c2e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 80de 	beq.w	800c4ac <HAL_UART_IRQHandler+0x22c>
 800c2f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2f4:	f003 0301 	and.w	r3, r3, #1
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d106      	bne.n	800c30a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c300:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 80d1 	beq.w	800c4ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00b      	beq.n	800c32e <HAL_UART_IRQHandler+0xae>
 800c316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c31a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d005      	beq.n	800c32e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c326:	f043 0201 	orr.w	r2, r3, #1
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c32e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c332:	f003 0304 	and.w	r3, r3, #4
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00b      	beq.n	800c352 <HAL_UART_IRQHandler+0xd2>
 800c33a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c33e:	f003 0301 	and.w	r3, r3, #1
 800c342:	2b00      	cmp	r3, #0
 800c344:	d005      	beq.n	800c352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c34a:	f043 0202 	orr.w	r2, r3, #2
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00b      	beq.n	800c376 <HAL_UART_IRQHandler+0xf6>
 800c35e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c362:	f003 0301 	and.w	r3, r3, #1
 800c366:	2b00      	cmp	r3, #0
 800c368:	d005      	beq.n	800c376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c36e:	f043 0204 	orr.w	r2, r3, #4
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c37a:	f003 0308 	and.w	r3, r3, #8
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d011      	beq.n	800c3a6 <HAL_UART_IRQHandler+0x126>
 800c382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c386:	f003 0320 	and.w	r3, r3, #32
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d105      	bne.n	800c39a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c38e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	2b00      	cmp	r3, #0
 800c398:	d005      	beq.n	800c3a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c39e:	f043 0208 	orr.w	r2, r3, #8
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f000 81f2 	beq.w	800c794 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c3b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3b4:	f003 0320 	and.w	r3, r3, #32
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d008      	beq.n	800c3ce <HAL_UART_IRQHandler+0x14e>
 800c3bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3c0:	f003 0320 	and.w	r3, r3, #32
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 faee 	bl	800c9aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	695b      	ldr	r3, [r3, #20]
 800c3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	bf14      	ite	ne
 800c3dc:	2301      	movne	r3, #1
 800c3de:	2300      	moveq	r3, #0
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ea:	f003 0308 	and.w	r3, r3, #8
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d103      	bne.n	800c3fa <HAL_UART_IRQHandler+0x17a>
 800c3f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d04f      	beq.n	800c49a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 f9f8 	bl	800c7f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d041      	beq.n	800c492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3314      	adds	r3, #20
 800c414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c41c:	e853 3f00 	ldrex	r3, [r3]
 800c420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c42c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	3314      	adds	r3, #20
 800c436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c43a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c43e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c44a:	e841 2300 	strex	r3, r2, [r1]
 800c44e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1d9      	bne.n	800c40e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d013      	beq.n	800c48a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c466:	4a7e      	ldr	r2, [pc, #504]	; (800c660 <HAL_UART_IRQHandler+0x3e0>)
 800c468:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fd f86c 	bl	800954c <HAL_DMA_Abort_IT>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d016      	beq.n	800c4a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c484:	4610      	mov	r0, r2
 800c486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c488:	e00e      	b.n	800c4a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f99c 	bl	800c7c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c490:	e00a      	b.n	800c4a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f998 	bl	800c7c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c498:	e006      	b.n	800c4a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f994 	bl	800c7c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c4a6:	e175      	b.n	800c794 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a8:	bf00      	nop
    return;
 800c4aa:	e173      	b.n	800c794 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	f040 814f 	bne.w	800c754 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c4b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4ba:	f003 0310 	and.w	r3, r3, #16
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f000 8148 	beq.w	800c754 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4c8:	f003 0310 	and.w	r3, r3, #16
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f000 8141 	beq.w	800c754 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	60bb      	str	r3, [r7, #8]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	60bb      	str	r3, [r7, #8]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	60bb      	str	r3, [r7, #8]
 800c4e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	695b      	ldr	r3, [r3, #20]
 800c4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f000 80b6 	beq.w	800c664 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 8145 	beq.w	800c798 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c516:	429a      	cmp	r2, r3
 800c518:	f080 813e 	bcs.w	800c798 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c522:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	2b20      	cmp	r3, #32
 800c52c:	f000 8088 	beq.w	800c640 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	330c      	adds	r3, #12
 800c536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c53e:	e853 3f00 	ldrex	r3, [r3]
 800c542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c546:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c54a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c54e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	330c      	adds	r3, #12
 800c558:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c55c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c564:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c568:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c56c:	e841 2300 	strex	r3, r2, [r1]
 800c570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d1d9      	bne.n	800c530 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3314      	adds	r3, #20
 800c582:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c586:	e853 3f00 	ldrex	r3, [r3]
 800c58a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c58c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c58e:	f023 0301 	bic.w	r3, r3, #1
 800c592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	3314      	adds	r3, #20
 800c59c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c5a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c5a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5ac:	e841 2300 	strex	r3, r2, [r1]
 800c5b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1e1      	bne.n	800c57c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3314      	adds	r3, #20
 800c5be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5c2:	e853 3f00 	ldrex	r3, [r3]
 800c5c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c5c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3314      	adds	r3, #20
 800c5d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c5dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c5de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c5e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5e4:	e841 2300 	strex	r3, r2, [r1]
 800c5e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c5ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1e3      	bne.n	800c5b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2220      	movs	r2, #32
 800c5f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	330c      	adds	r3, #12
 800c604:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c608:	e853 3f00 	ldrex	r3, [r3]
 800c60c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c60e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c610:	f023 0310 	bic.w	r3, r3, #16
 800c614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	330c      	adds	r3, #12
 800c61e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c622:	65ba      	str	r2, [r7, #88]	; 0x58
 800c624:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c626:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c62a:	e841 2300 	strex	r3, r2, [r1]
 800c62e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1e3      	bne.n	800c5fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fc ff4b 	bl	80094d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2202      	movs	r2, #2
 800c644:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c64e:	b29b      	uxth	r3, r3
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	b29b      	uxth	r3, r3
 800c654:	4619      	mov	r1, r3
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 f8bf 	bl	800c7da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c65c:	e09c      	b.n	800c798 <HAL_UART_IRQHandler+0x518>
 800c65e:	bf00      	nop
 800c660:	0800c8b5 	.word	0x0800c8b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c678:	b29b      	uxth	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 808e 	beq.w	800c79c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 8089 	beq.w	800c79c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	330c      	adds	r3, #12
 800c690:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c694:	e853 3f00 	ldrex	r3, [r3]
 800c698:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c69c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	330c      	adds	r3, #12
 800c6aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c6ae:	647a      	str	r2, [r7, #68]	; 0x44
 800c6b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6b6:	e841 2300 	strex	r3, r2, [r1]
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d1e3      	bne.n	800c68a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	3314      	adds	r3, #20
 800c6c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6cc:	e853 3f00 	ldrex	r3, [r3]
 800c6d0:	623b      	str	r3, [r7, #32]
   return(result);
 800c6d2:	6a3b      	ldr	r3, [r7, #32]
 800c6d4:	f023 0301 	bic.w	r3, r3, #1
 800c6d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3314      	adds	r3, #20
 800c6e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6e6:	633a      	str	r2, [r7, #48]	; 0x30
 800c6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ee:	e841 2300 	strex	r3, r2, [r1]
 800c6f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1e3      	bne.n	800c6c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2220      	movs	r2, #32
 800c6fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	330c      	adds	r3, #12
 800c70e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	e853 3f00 	ldrex	r3, [r3]
 800c716:	60fb      	str	r3, [r7, #12]
   return(result);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f023 0310 	bic.w	r3, r3, #16
 800c71e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	330c      	adds	r3, #12
 800c728:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c72c:	61fa      	str	r2, [r7, #28]
 800c72e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c730:	69b9      	ldr	r1, [r7, #24]
 800c732:	69fa      	ldr	r2, [r7, #28]
 800c734:	e841 2300 	strex	r3, r2, [r1]
 800c738:	617b      	str	r3, [r7, #20]
   return(result);
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1e3      	bne.n	800c708 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2202      	movs	r2, #2
 800c744:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c746:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f844 	bl	800c7da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c752:	e023      	b.n	800c79c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d009      	beq.n	800c774 <HAL_UART_IRQHandler+0x4f4>
 800c760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d003      	beq.n	800c774 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f8b5 	bl	800c8dc <UART_Transmit_IT>
    return;
 800c772:	e014      	b.n	800c79e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00e      	beq.n	800c79e <HAL_UART_IRQHandler+0x51e>
 800c780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d008      	beq.n	800c79e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f8f4 	bl	800c97a <UART_EndTransmit_IT>
    return;
 800c792:	e004      	b.n	800c79e <HAL_UART_IRQHandler+0x51e>
    return;
 800c794:	bf00      	nop
 800c796:	e002      	b.n	800c79e <HAL_UART_IRQHandler+0x51e>
      return;
 800c798:	bf00      	nop
 800c79a:	e000      	b.n	800c79e <HAL_UART_IRQHandler+0x51e>
      return;
 800c79c:	bf00      	nop
  }
}
 800c79e:	37e8      	adds	r7, #232	; 0xe8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c7ac:	bf00      	nop
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bc80      	pop	{r7}
 800c7b4:	4770      	bx	lr

0800c7b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b083      	sub	sp, #12
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c7be:	bf00      	nop
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bc80      	pop	{r7}
 800c7c6:	4770      	bx	lr

0800c7c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bc80      	pop	{r7}
 800c7d8:	4770      	bx	lr

0800c7da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b083      	sub	sp, #12
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7e6:	bf00      	nop
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bc80      	pop	{r7}
 800c7ee:	4770      	bx	lr

0800c7f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b095      	sub	sp, #84	; 0x54
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	330c      	adds	r3, #12
 800c7fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c802:	e853 3f00 	ldrex	r3, [r3]
 800c806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c80e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	330c      	adds	r3, #12
 800c816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c818:	643a      	str	r2, [r7, #64]	; 0x40
 800c81a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c81e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c820:	e841 2300 	strex	r3, r2, [r1]
 800c824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d1e5      	bne.n	800c7f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	3314      	adds	r3, #20
 800c832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c834:	6a3b      	ldr	r3, [r7, #32]
 800c836:	e853 3f00 	ldrex	r3, [r3]
 800c83a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	f023 0301 	bic.w	r3, r3, #1
 800c842:	64bb      	str	r3, [r7, #72]	; 0x48
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3314      	adds	r3, #20
 800c84a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c84c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c84e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c854:	e841 2300 	strex	r3, r2, [r1]
 800c858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e5      	bne.n	800c82c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c864:	2b01      	cmp	r3, #1
 800c866:	d119      	bne.n	800c89c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	330c      	adds	r3, #12
 800c86e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	e853 3f00 	ldrex	r3, [r3]
 800c876:	60bb      	str	r3, [r7, #8]
   return(result);
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	f023 0310 	bic.w	r3, r3, #16
 800c87e:	647b      	str	r3, [r7, #68]	; 0x44
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	330c      	adds	r3, #12
 800c886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c888:	61ba      	str	r2, [r7, #24]
 800c88a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88c:	6979      	ldr	r1, [r7, #20]
 800c88e:	69ba      	ldr	r2, [r7, #24]
 800c890:	e841 2300 	strex	r3, r2, [r1]
 800c894:	613b      	str	r3, [r7, #16]
   return(result);
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1e5      	bne.n	800c868 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2220      	movs	r2, #32
 800c8a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c8aa:	bf00      	nop
 800c8ac:	3754      	adds	r7, #84	; 0x54
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bc80      	pop	{r7}
 800c8b2:	4770      	bx	lr

0800c8b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f7ff ff7a 	bl	800c7c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8d4:	bf00      	nop
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b21      	cmp	r3, #33	; 0x21
 800c8ee:	d13e      	bne.n	800c96e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8f8:	d114      	bne.n	800c924 <UART_Transmit_IT+0x48>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d110      	bne.n	800c924 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	881b      	ldrh	r3, [r3, #0]
 800c90c:	461a      	mov	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c916:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6a1b      	ldr	r3, [r3, #32]
 800c91c:	1c9a      	adds	r2, r3, #2
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	621a      	str	r2, [r3, #32]
 800c922:	e008      	b.n	800c936 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a1b      	ldr	r3, [r3, #32]
 800c928:	1c59      	adds	r1, r3, #1
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	6211      	str	r1, [r2, #32]
 800c92e:	781a      	ldrb	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	3b01      	subs	r3, #1
 800c93e:	b29b      	uxth	r3, r3
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	4619      	mov	r1, r3
 800c944:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10f      	bne.n	800c96a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68da      	ldr	r2, [r3, #12]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c958:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68da      	ldr	r2, [r3, #12]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c968:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c96a:	2300      	movs	r3, #0
 800c96c:	e000      	b.n	800c970 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c96e:	2302      	movs	r3, #2
  }
}
 800c970:	4618      	mov	r0, r3
 800c972:	3714      	adds	r7, #20
 800c974:	46bd      	mov	sp, r7
 800c976:	bc80      	pop	{r7}
 800c978:	4770      	bx	lr

0800c97a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b082      	sub	sp, #8
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	68da      	ldr	r2, [r3, #12]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c990:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2220      	movs	r2, #32
 800c996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff ff02 	bl	800c7a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b08c      	sub	sp, #48	; 0x30
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2b22      	cmp	r3, #34	; 0x22
 800c9bc:	f040 80ae 	bne.w	800cb1c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9c8:	d117      	bne.n	800c9fa <UART_Receive_IT+0x50>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d113      	bne.n	800c9fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9f2:	1c9a      	adds	r2, r3, #2
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	629a      	str	r2, [r3, #40]	; 0x28
 800c9f8:	e026      	b.n	800ca48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ca00:	2300      	movs	r3, #0
 800ca02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca0c:	d007      	beq.n	800ca1e <UART_Receive_IT+0x74>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d10a      	bne.n	800ca2c <UART_Receive_IT+0x82>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d106      	bne.n	800ca2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca28:	701a      	strb	r2, [r3, #0]
 800ca2a:	e008      	b.n	800ca3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca42:	1c5a      	adds	r2, r3, #1
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	4619      	mov	r1, r3
 800ca56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d15d      	bne.n	800cb18 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68da      	ldr	r2, [r3, #12]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f022 0220 	bic.w	r2, r2, #32
 800ca6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	68da      	ldr	r2, [r3, #12]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	695a      	ldr	r2, [r3, #20]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f022 0201 	bic.w	r2, r2, #1
 800ca8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2220      	movs	r2, #32
 800ca90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d135      	bne.n	800cb0e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	330c      	adds	r3, #12
 800caae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	e853 3f00 	ldrex	r3, [r3]
 800cab6:	613b      	str	r3, [r7, #16]
   return(result);
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	f023 0310 	bic.w	r3, r3, #16
 800cabe:	627b      	str	r3, [r7, #36]	; 0x24
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	330c      	adds	r3, #12
 800cac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac8:	623a      	str	r2, [r7, #32]
 800caca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cacc:	69f9      	ldr	r1, [r7, #28]
 800cace:	6a3a      	ldr	r2, [r7, #32]
 800cad0:	e841 2300 	strex	r3, r2, [r1]
 800cad4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1e5      	bne.n	800caa8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f003 0310 	and.w	r3, r3, #16
 800cae6:	2b10      	cmp	r3, #16
 800cae8:	d10a      	bne.n	800cb00 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800caea:	2300      	movs	r3, #0
 800caec:	60fb      	str	r3, [r7, #12]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	60fb      	str	r3, [r7, #12]
 800cafe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb04:	4619      	mov	r1, r3
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7ff fe67 	bl	800c7da <HAL_UARTEx_RxEventCallback>
 800cb0c:	e002      	b.n	800cb14 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7ff fe51 	bl	800c7b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	e002      	b.n	800cb1e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	e000      	b.n	800cb1e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cb1c:	2302      	movs	r3, #2
  }
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3730      	adds	r7, #48	; 0x30
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	691b      	ldr	r3, [r3, #16]
 800cb36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68da      	ldr	r2, [r3, #12]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	430a      	orrs	r2, r1
 800cb44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	689a      	ldr	r2, [r3, #8]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	431a      	orrs	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cb62:	f023 030c 	bic.w	r3, r3, #12
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	6812      	ldr	r2, [r2, #0]
 800cb6a:	68b9      	ldr	r1, [r7, #8]
 800cb6c:	430b      	orrs	r3, r1
 800cb6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	699a      	ldr	r2, [r3, #24]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	430a      	orrs	r2, r1
 800cb84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a2c      	ldr	r2, [pc, #176]	; (800cc3c <UART_SetConfig+0x114>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d103      	bne.n	800cb98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cb90:	f7fe fe8c 	bl	800b8ac <HAL_RCC_GetPCLK2Freq>
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	e002      	b.n	800cb9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cb98:	f7fe fe74 	bl	800b884 <HAL_RCC_GetPCLK1Freq>
 800cb9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	4613      	mov	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	009a      	lsls	r2, r3, #2
 800cba8:	441a      	add	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb4:	4a22      	ldr	r2, [pc, #136]	; (800cc40 <UART_SetConfig+0x118>)
 800cbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbba:	095b      	lsrs	r3, r3, #5
 800cbbc:	0119      	lsls	r1, r3, #4
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	009a      	lsls	r2, r3, #2
 800cbc8:	441a      	add	r2, r3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	fbb2 f2f3 	udiv	r2, r2, r3
 800cbd4:	4b1a      	ldr	r3, [pc, #104]	; (800cc40 <UART_SetConfig+0x118>)
 800cbd6:	fba3 0302 	umull	r0, r3, r3, r2
 800cbda:	095b      	lsrs	r3, r3, #5
 800cbdc:	2064      	movs	r0, #100	; 0x64
 800cbde:	fb00 f303 	mul.w	r3, r0, r3
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	011b      	lsls	r3, r3, #4
 800cbe6:	3332      	adds	r3, #50	; 0x32
 800cbe8:	4a15      	ldr	r2, [pc, #84]	; (800cc40 <UART_SetConfig+0x118>)
 800cbea:	fba2 2303 	umull	r2, r3, r2, r3
 800cbee:	095b      	lsrs	r3, r3, #5
 800cbf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbf4:	4419      	add	r1, r3
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	009a      	lsls	r2, r3, #2
 800cc00:	441a      	add	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc0c:	4b0c      	ldr	r3, [pc, #48]	; (800cc40 <UART_SetConfig+0x118>)
 800cc0e:	fba3 0302 	umull	r0, r3, r3, r2
 800cc12:	095b      	lsrs	r3, r3, #5
 800cc14:	2064      	movs	r0, #100	; 0x64
 800cc16:	fb00 f303 	mul.w	r3, r0, r3
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	011b      	lsls	r3, r3, #4
 800cc1e:	3332      	adds	r3, #50	; 0x32
 800cc20:	4a07      	ldr	r2, [pc, #28]	; (800cc40 <UART_SetConfig+0x118>)
 800cc22:	fba2 2303 	umull	r2, r3, r2, r3
 800cc26:	095b      	lsrs	r3, r3, #5
 800cc28:	f003 020f 	and.w	r2, r3, #15
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	440a      	add	r2, r1
 800cc32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cc34:	bf00      	nop
 800cc36:	3710      	adds	r7, #16
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	40013800 	.word	0x40013800
 800cc40:	51eb851f 	.word	0x51eb851f

0800cc44 <__itoa>:
 800cc44:	1e93      	subs	r3, r2, #2
 800cc46:	2b22      	cmp	r3, #34	; 0x22
 800cc48:	b510      	push	{r4, lr}
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	d904      	bls.n	800cc58 <__itoa+0x14>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	461c      	mov	r4, r3
 800cc52:	700b      	strb	r3, [r1, #0]
 800cc54:	4620      	mov	r0, r4
 800cc56:	bd10      	pop	{r4, pc}
 800cc58:	2a0a      	cmp	r2, #10
 800cc5a:	d109      	bne.n	800cc70 <__itoa+0x2c>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	da07      	bge.n	800cc70 <__itoa+0x2c>
 800cc60:	232d      	movs	r3, #45	; 0x2d
 800cc62:	700b      	strb	r3, [r1, #0]
 800cc64:	2101      	movs	r1, #1
 800cc66:	4240      	negs	r0, r0
 800cc68:	4421      	add	r1, r4
 800cc6a:	f000 f8b9 	bl	800cde0 <__utoa>
 800cc6e:	e7f1      	b.n	800cc54 <__itoa+0x10>
 800cc70:	2100      	movs	r1, #0
 800cc72:	e7f9      	b.n	800cc68 <__itoa+0x24>

0800cc74 <itoa>:
 800cc74:	f7ff bfe6 	b.w	800cc44 <__itoa>

0800cc78 <malloc>:
 800cc78:	4b02      	ldr	r3, [pc, #8]	; (800cc84 <malloc+0xc>)
 800cc7a:	4601      	mov	r1, r0
 800cc7c:	6818      	ldr	r0, [r3, #0]
 800cc7e:	f000 b823 	b.w	800ccc8 <_malloc_r>
 800cc82:	bf00      	nop
 800cc84:	20000a1c 	.word	0x20000a1c

0800cc88 <sbrk_aligned>:
 800cc88:	b570      	push	{r4, r5, r6, lr}
 800cc8a:	4e0e      	ldr	r6, [pc, #56]	; (800ccc4 <sbrk_aligned+0x3c>)
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	6831      	ldr	r1, [r6, #0]
 800cc90:	4605      	mov	r5, r0
 800cc92:	b911      	cbnz	r1, 800cc9a <sbrk_aligned+0x12>
 800cc94:	f000 f91e 	bl	800ced4 <_sbrk_r>
 800cc98:	6030      	str	r0, [r6, #0]
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	f000 f919 	bl	800ced4 <_sbrk_r>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	d00a      	beq.n	800ccbc <sbrk_aligned+0x34>
 800cca6:	1cc4      	adds	r4, r0, #3
 800cca8:	f024 0403 	bic.w	r4, r4, #3
 800ccac:	42a0      	cmp	r0, r4
 800ccae:	d007      	beq.n	800ccc0 <sbrk_aligned+0x38>
 800ccb0:	1a21      	subs	r1, r4, r0
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	f000 f90e 	bl	800ced4 <_sbrk_r>
 800ccb8:	3001      	adds	r0, #1
 800ccba:	d101      	bne.n	800ccc0 <sbrk_aligned+0x38>
 800ccbc:	f04f 34ff 	mov.w	r4, #4294967295
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	20000ef8 	.word	0x20000ef8

0800ccc8 <_malloc_r>:
 800ccc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cccc:	1ccd      	adds	r5, r1, #3
 800ccce:	f025 0503 	bic.w	r5, r5, #3
 800ccd2:	3508      	adds	r5, #8
 800ccd4:	2d0c      	cmp	r5, #12
 800ccd6:	bf38      	it	cc
 800ccd8:	250c      	movcc	r5, #12
 800ccda:	2d00      	cmp	r5, #0
 800ccdc:	4607      	mov	r7, r0
 800ccde:	db01      	blt.n	800cce4 <_malloc_r+0x1c>
 800cce0:	42a9      	cmp	r1, r5
 800cce2:	d905      	bls.n	800ccf0 <_malloc_r+0x28>
 800cce4:	230c      	movs	r3, #12
 800cce6:	2600      	movs	r6, #0
 800cce8:	603b      	str	r3, [r7, #0]
 800ccea:	4630      	mov	r0, r6
 800ccec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccf0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cdc4 <_malloc_r+0xfc>
 800ccf4:	f000 f868 	bl	800cdc8 <__malloc_lock>
 800ccf8:	f8d8 3000 	ldr.w	r3, [r8]
 800ccfc:	461c      	mov	r4, r3
 800ccfe:	bb5c      	cbnz	r4, 800cd58 <_malloc_r+0x90>
 800cd00:	4629      	mov	r1, r5
 800cd02:	4638      	mov	r0, r7
 800cd04:	f7ff ffc0 	bl	800cc88 <sbrk_aligned>
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	d155      	bne.n	800cdba <_malloc_r+0xf2>
 800cd0e:	f8d8 4000 	ldr.w	r4, [r8]
 800cd12:	4626      	mov	r6, r4
 800cd14:	2e00      	cmp	r6, #0
 800cd16:	d145      	bne.n	800cda4 <_malloc_r+0xdc>
 800cd18:	2c00      	cmp	r4, #0
 800cd1a:	d048      	beq.n	800cdae <_malloc_r+0xe6>
 800cd1c:	6823      	ldr	r3, [r4, #0]
 800cd1e:	4631      	mov	r1, r6
 800cd20:	4638      	mov	r0, r7
 800cd22:	eb04 0903 	add.w	r9, r4, r3
 800cd26:	f000 f8d5 	bl	800ced4 <_sbrk_r>
 800cd2a:	4581      	cmp	r9, r0
 800cd2c:	d13f      	bne.n	800cdae <_malloc_r+0xe6>
 800cd2e:	6821      	ldr	r1, [r4, #0]
 800cd30:	4638      	mov	r0, r7
 800cd32:	1a6d      	subs	r5, r5, r1
 800cd34:	4629      	mov	r1, r5
 800cd36:	f7ff ffa7 	bl	800cc88 <sbrk_aligned>
 800cd3a:	3001      	adds	r0, #1
 800cd3c:	d037      	beq.n	800cdae <_malloc_r+0xe6>
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	442b      	add	r3, r5
 800cd42:	6023      	str	r3, [r4, #0]
 800cd44:	f8d8 3000 	ldr.w	r3, [r8]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d038      	beq.n	800cdbe <_malloc_r+0xf6>
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	42a2      	cmp	r2, r4
 800cd50:	d12b      	bne.n	800cdaa <_malloc_r+0xe2>
 800cd52:	2200      	movs	r2, #0
 800cd54:	605a      	str	r2, [r3, #4]
 800cd56:	e00f      	b.n	800cd78 <_malloc_r+0xb0>
 800cd58:	6822      	ldr	r2, [r4, #0]
 800cd5a:	1b52      	subs	r2, r2, r5
 800cd5c:	d41f      	bmi.n	800cd9e <_malloc_r+0xd6>
 800cd5e:	2a0b      	cmp	r2, #11
 800cd60:	d917      	bls.n	800cd92 <_malloc_r+0xca>
 800cd62:	1961      	adds	r1, r4, r5
 800cd64:	42a3      	cmp	r3, r4
 800cd66:	6025      	str	r5, [r4, #0]
 800cd68:	bf18      	it	ne
 800cd6a:	6059      	strne	r1, [r3, #4]
 800cd6c:	6863      	ldr	r3, [r4, #4]
 800cd6e:	bf08      	it	eq
 800cd70:	f8c8 1000 	streq.w	r1, [r8]
 800cd74:	5162      	str	r2, [r4, r5]
 800cd76:	604b      	str	r3, [r1, #4]
 800cd78:	4638      	mov	r0, r7
 800cd7a:	f104 060b 	add.w	r6, r4, #11
 800cd7e:	f000 f829 	bl	800cdd4 <__malloc_unlock>
 800cd82:	f026 0607 	bic.w	r6, r6, #7
 800cd86:	1d23      	adds	r3, r4, #4
 800cd88:	1af2      	subs	r2, r6, r3
 800cd8a:	d0ae      	beq.n	800ccea <_malloc_r+0x22>
 800cd8c:	1b9b      	subs	r3, r3, r6
 800cd8e:	50a3      	str	r3, [r4, r2]
 800cd90:	e7ab      	b.n	800ccea <_malloc_r+0x22>
 800cd92:	42a3      	cmp	r3, r4
 800cd94:	6862      	ldr	r2, [r4, #4]
 800cd96:	d1dd      	bne.n	800cd54 <_malloc_r+0x8c>
 800cd98:	f8c8 2000 	str.w	r2, [r8]
 800cd9c:	e7ec      	b.n	800cd78 <_malloc_r+0xb0>
 800cd9e:	4623      	mov	r3, r4
 800cda0:	6864      	ldr	r4, [r4, #4]
 800cda2:	e7ac      	b.n	800ccfe <_malloc_r+0x36>
 800cda4:	4634      	mov	r4, r6
 800cda6:	6876      	ldr	r6, [r6, #4]
 800cda8:	e7b4      	b.n	800cd14 <_malloc_r+0x4c>
 800cdaa:	4613      	mov	r3, r2
 800cdac:	e7cc      	b.n	800cd48 <_malloc_r+0x80>
 800cdae:	230c      	movs	r3, #12
 800cdb0:	4638      	mov	r0, r7
 800cdb2:	603b      	str	r3, [r7, #0]
 800cdb4:	f000 f80e 	bl	800cdd4 <__malloc_unlock>
 800cdb8:	e797      	b.n	800ccea <_malloc_r+0x22>
 800cdba:	6025      	str	r5, [r4, #0]
 800cdbc:	e7dc      	b.n	800cd78 <_malloc_r+0xb0>
 800cdbe:	605b      	str	r3, [r3, #4]
 800cdc0:	deff      	udf	#255	; 0xff
 800cdc2:	bf00      	nop
 800cdc4:	20000ef4 	.word	0x20000ef4

0800cdc8 <__malloc_lock>:
 800cdc8:	4801      	ldr	r0, [pc, #4]	; (800cdd0 <__malloc_lock+0x8>)
 800cdca:	f000 b8bd 	b.w	800cf48 <__retarget_lock_acquire_recursive>
 800cdce:	bf00      	nop
 800cdd0:	20001038 	.word	0x20001038

0800cdd4 <__malloc_unlock>:
 800cdd4:	4801      	ldr	r0, [pc, #4]	; (800cddc <__malloc_unlock+0x8>)
 800cdd6:	f000 b8b8 	b.w	800cf4a <__retarget_lock_release_recursive>
 800cdda:	bf00      	nop
 800cddc:	20001038 	.word	0x20001038

0800cde0 <__utoa>:
 800cde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cde2:	b08b      	sub	sp, #44	; 0x2c
 800cde4:	4605      	mov	r5, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	466e      	mov	r6, sp
 800cdea:	4c1d      	ldr	r4, [pc, #116]	; (800ce60 <__utoa+0x80>)
 800cdec:	f104 0c20 	add.w	ip, r4, #32
 800cdf0:	4637      	mov	r7, r6
 800cdf2:	6820      	ldr	r0, [r4, #0]
 800cdf4:	6861      	ldr	r1, [r4, #4]
 800cdf6:	3408      	adds	r4, #8
 800cdf8:	c703      	stmia	r7!, {r0, r1}
 800cdfa:	4564      	cmp	r4, ip
 800cdfc:	463e      	mov	r6, r7
 800cdfe:	d1f7      	bne.n	800cdf0 <__utoa+0x10>
 800ce00:	7921      	ldrb	r1, [r4, #4]
 800ce02:	6820      	ldr	r0, [r4, #0]
 800ce04:	7139      	strb	r1, [r7, #4]
 800ce06:	1e91      	subs	r1, r2, #2
 800ce08:	2922      	cmp	r1, #34	; 0x22
 800ce0a:	6038      	str	r0, [r7, #0]
 800ce0c:	f04f 0100 	mov.w	r1, #0
 800ce10:	d904      	bls.n	800ce1c <__utoa+0x3c>
 800ce12:	7019      	strb	r1, [r3, #0]
 800ce14:	460b      	mov	r3, r1
 800ce16:	4618      	mov	r0, r3
 800ce18:	b00b      	add	sp, #44	; 0x2c
 800ce1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce1c:	1e58      	subs	r0, r3, #1
 800ce1e:	4684      	mov	ip, r0
 800ce20:	fbb5 f7f2 	udiv	r7, r5, r2
 800ce24:	fb02 5617 	mls	r6, r2, r7, r5
 800ce28:	3628      	adds	r6, #40	; 0x28
 800ce2a:	446e      	add	r6, sp
 800ce2c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ce30:	460c      	mov	r4, r1
 800ce32:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ce36:	462e      	mov	r6, r5
 800ce38:	42b2      	cmp	r2, r6
 800ce3a:	463d      	mov	r5, r7
 800ce3c:	f101 0101 	add.w	r1, r1, #1
 800ce40:	d9ee      	bls.n	800ce20 <__utoa+0x40>
 800ce42:	2200      	movs	r2, #0
 800ce44:	545a      	strb	r2, [r3, r1]
 800ce46:	1919      	adds	r1, r3, r4
 800ce48:	1aa5      	subs	r5, r4, r2
 800ce4a:	42aa      	cmp	r2, r5
 800ce4c:	dae3      	bge.n	800ce16 <__utoa+0x36>
 800ce4e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ce52:	780e      	ldrb	r6, [r1, #0]
 800ce54:	3201      	adds	r2, #1
 800ce56:	7006      	strb	r6, [r0, #0]
 800ce58:	f801 5901 	strb.w	r5, [r1], #-1
 800ce5c:	e7f4      	b.n	800ce48 <__utoa+0x68>
 800ce5e:	bf00      	nop
 800ce60:	0800e562 	.word	0x0800e562

0800ce64 <siprintf>:
 800ce64:	b40e      	push	{r1, r2, r3}
 800ce66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce6a:	b500      	push	{lr}
 800ce6c:	b09c      	sub	sp, #112	; 0x70
 800ce6e:	ab1d      	add	r3, sp, #116	; 0x74
 800ce70:	9002      	str	r0, [sp, #8]
 800ce72:	9006      	str	r0, [sp, #24]
 800ce74:	9107      	str	r1, [sp, #28]
 800ce76:	9104      	str	r1, [sp, #16]
 800ce78:	4808      	ldr	r0, [pc, #32]	; (800ce9c <siprintf+0x38>)
 800ce7a:	4909      	ldr	r1, [pc, #36]	; (800cea0 <siprintf+0x3c>)
 800ce7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce80:	9105      	str	r1, [sp, #20]
 800ce82:	6800      	ldr	r0, [r0, #0]
 800ce84:	a902      	add	r1, sp, #8
 800ce86:	9301      	str	r3, [sp, #4]
 800ce88:	f000 f90a 	bl	800d0a0 <_svfiprintf_r>
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	9b02      	ldr	r3, [sp, #8]
 800ce90:	701a      	strb	r2, [r3, #0]
 800ce92:	b01c      	add	sp, #112	; 0x70
 800ce94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce98:	b003      	add	sp, #12
 800ce9a:	4770      	bx	lr
 800ce9c:	20000a1c 	.word	0x20000a1c
 800cea0:	ffff0208 	.word	0xffff0208

0800cea4 <memset>:
 800cea4:	4603      	mov	r3, r0
 800cea6:	4402      	add	r2, r0
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d100      	bne.n	800ceae <memset+0xa>
 800ceac:	4770      	bx	lr
 800ceae:	f803 1b01 	strb.w	r1, [r3], #1
 800ceb2:	e7f9      	b.n	800cea8 <memset+0x4>

0800ceb4 <strcat>:
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	b510      	push	{r4, lr}
 800ceb8:	7814      	ldrb	r4, [r2, #0]
 800ceba:	4613      	mov	r3, r2
 800cebc:	3201      	adds	r2, #1
 800cebe:	2c00      	cmp	r4, #0
 800cec0:	d1fa      	bne.n	800ceb8 <strcat+0x4>
 800cec2:	3b01      	subs	r3, #1
 800cec4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cec8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cecc:	2a00      	cmp	r2, #0
 800cece:	d1f9      	bne.n	800cec4 <strcat+0x10>
 800ced0:	bd10      	pop	{r4, pc}
	...

0800ced4 <_sbrk_r>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	2300      	movs	r3, #0
 800ced8:	4d05      	ldr	r5, [pc, #20]	; (800cef0 <_sbrk_r+0x1c>)
 800ceda:	4604      	mov	r4, r0
 800cedc:	4608      	mov	r0, r1
 800cede:	602b      	str	r3, [r5, #0]
 800cee0:	f7fc f808 	bl	8008ef4 <_sbrk>
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d102      	bne.n	800ceee <_sbrk_r+0x1a>
 800cee8:	682b      	ldr	r3, [r5, #0]
 800ceea:	b103      	cbz	r3, 800ceee <_sbrk_r+0x1a>
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	bd38      	pop	{r3, r4, r5, pc}
 800cef0:	20001034 	.word	0x20001034

0800cef4 <__errno>:
 800cef4:	4b01      	ldr	r3, [pc, #4]	; (800cefc <__errno+0x8>)
 800cef6:	6818      	ldr	r0, [r3, #0]
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	20000a1c 	.word	0x20000a1c

0800cf00 <__libc_init_array>:
 800cf00:	b570      	push	{r4, r5, r6, lr}
 800cf02:	2600      	movs	r6, #0
 800cf04:	4d0c      	ldr	r5, [pc, #48]	; (800cf38 <__libc_init_array+0x38>)
 800cf06:	4c0d      	ldr	r4, [pc, #52]	; (800cf3c <__libc_init_array+0x3c>)
 800cf08:	1b64      	subs	r4, r4, r5
 800cf0a:	10a4      	asrs	r4, r4, #2
 800cf0c:	42a6      	cmp	r6, r4
 800cf0e:	d109      	bne.n	800cf24 <__libc_init_array+0x24>
 800cf10:	f000 fbc6 	bl	800d6a0 <_init>
 800cf14:	2600      	movs	r6, #0
 800cf16:	4d0a      	ldr	r5, [pc, #40]	; (800cf40 <__libc_init_array+0x40>)
 800cf18:	4c0a      	ldr	r4, [pc, #40]	; (800cf44 <__libc_init_array+0x44>)
 800cf1a:	1b64      	subs	r4, r4, r5
 800cf1c:	10a4      	asrs	r4, r4, #2
 800cf1e:	42a6      	cmp	r6, r4
 800cf20:	d105      	bne.n	800cf2e <__libc_init_array+0x2e>
 800cf22:	bd70      	pop	{r4, r5, r6, pc}
 800cf24:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf28:	4798      	blx	r3
 800cf2a:	3601      	adds	r6, #1
 800cf2c:	e7ee      	b.n	800cf0c <__libc_init_array+0xc>
 800cf2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf32:	4798      	blx	r3
 800cf34:	3601      	adds	r6, #1
 800cf36:	e7f2      	b.n	800cf1e <__libc_init_array+0x1e>
 800cf38:	0800e5bc 	.word	0x0800e5bc
 800cf3c:	0800e5bc 	.word	0x0800e5bc
 800cf40:	0800e5bc 	.word	0x0800e5bc
 800cf44:	0800e5c0 	.word	0x0800e5c0

0800cf48 <__retarget_lock_acquire_recursive>:
 800cf48:	4770      	bx	lr

0800cf4a <__retarget_lock_release_recursive>:
 800cf4a:	4770      	bx	lr

0800cf4c <strcpy>:
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf52:	f803 2b01 	strb.w	r2, [r3], #1
 800cf56:	2a00      	cmp	r2, #0
 800cf58:	d1f9      	bne.n	800cf4e <strcpy+0x2>
 800cf5a:	4770      	bx	lr

0800cf5c <_free_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4605      	mov	r5, r0
 800cf60:	2900      	cmp	r1, #0
 800cf62:	d040      	beq.n	800cfe6 <_free_r+0x8a>
 800cf64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf68:	1f0c      	subs	r4, r1, #4
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	bfb8      	it	lt
 800cf6e:	18e4      	addlt	r4, r4, r3
 800cf70:	f7ff ff2a 	bl	800cdc8 <__malloc_lock>
 800cf74:	4a1c      	ldr	r2, [pc, #112]	; (800cfe8 <_free_r+0x8c>)
 800cf76:	6813      	ldr	r3, [r2, #0]
 800cf78:	b933      	cbnz	r3, 800cf88 <_free_r+0x2c>
 800cf7a:	6063      	str	r3, [r4, #4]
 800cf7c:	6014      	str	r4, [r2, #0]
 800cf7e:	4628      	mov	r0, r5
 800cf80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf84:	f7ff bf26 	b.w	800cdd4 <__malloc_unlock>
 800cf88:	42a3      	cmp	r3, r4
 800cf8a:	d908      	bls.n	800cf9e <_free_r+0x42>
 800cf8c:	6820      	ldr	r0, [r4, #0]
 800cf8e:	1821      	adds	r1, r4, r0
 800cf90:	428b      	cmp	r3, r1
 800cf92:	bf01      	itttt	eq
 800cf94:	6819      	ldreq	r1, [r3, #0]
 800cf96:	685b      	ldreq	r3, [r3, #4]
 800cf98:	1809      	addeq	r1, r1, r0
 800cf9a:	6021      	streq	r1, [r4, #0]
 800cf9c:	e7ed      	b.n	800cf7a <_free_r+0x1e>
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	b10b      	cbz	r3, 800cfa8 <_free_r+0x4c>
 800cfa4:	42a3      	cmp	r3, r4
 800cfa6:	d9fa      	bls.n	800cf9e <_free_r+0x42>
 800cfa8:	6811      	ldr	r1, [r2, #0]
 800cfaa:	1850      	adds	r0, r2, r1
 800cfac:	42a0      	cmp	r0, r4
 800cfae:	d10b      	bne.n	800cfc8 <_free_r+0x6c>
 800cfb0:	6820      	ldr	r0, [r4, #0]
 800cfb2:	4401      	add	r1, r0
 800cfb4:	1850      	adds	r0, r2, r1
 800cfb6:	4283      	cmp	r3, r0
 800cfb8:	6011      	str	r1, [r2, #0]
 800cfba:	d1e0      	bne.n	800cf7e <_free_r+0x22>
 800cfbc:	6818      	ldr	r0, [r3, #0]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	4408      	add	r0, r1
 800cfc2:	6010      	str	r0, [r2, #0]
 800cfc4:	6053      	str	r3, [r2, #4]
 800cfc6:	e7da      	b.n	800cf7e <_free_r+0x22>
 800cfc8:	d902      	bls.n	800cfd0 <_free_r+0x74>
 800cfca:	230c      	movs	r3, #12
 800cfcc:	602b      	str	r3, [r5, #0]
 800cfce:	e7d6      	b.n	800cf7e <_free_r+0x22>
 800cfd0:	6820      	ldr	r0, [r4, #0]
 800cfd2:	1821      	adds	r1, r4, r0
 800cfd4:	428b      	cmp	r3, r1
 800cfd6:	bf01      	itttt	eq
 800cfd8:	6819      	ldreq	r1, [r3, #0]
 800cfda:	685b      	ldreq	r3, [r3, #4]
 800cfdc:	1809      	addeq	r1, r1, r0
 800cfde:	6021      	streq	r1, [r4, #0]
 800cfe0:	6063      	str	r3, [r4, #4]
 800cfe2:	6054      	str	r4, [r2, #4]
 800cfe4:	e7cb      	b.n	800cf7e <_free_r+0x22>
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	20000ef4 	.word	0x20000ef4

0800cfec <__ssputs_r>:
 800cfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff0:	461f      	mov	r7, r3
 800cff2:	688e      	ldr	r6, [r1, #8]
 800cff4:	4682      	mov	sl, r0
 800cff6:	42be      	cmp	r6, r7
 800cff8:	460c      	mov	r4, r1
 800cffa:	4690      	mov	r8, r2
 800cffc:	680b      	ldr	r3, [r1, #0]
 800cffe:	d82c      	bhi.n	800d05a <__ssputs_r+0x6e>
 800d000:	898a      	ldrh	r2, [r1, #12]
 800d002:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d006:	d026      	beq.n	800d056 <__ssputs_r+0x6a>
 800d008:	6965      	ldr	r5, [r4, #20]
 800d00a:	6909      	ldr	r1, [r1, #16]
 800d00c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d010:	eba3 0901 	sub.w	r9, r3, r1
 800d014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d018:	1c7b      	adds	r3, r7, #1
 800d01a:	444b      	add	r3, r9
 800d01c:	106d      	asrs	r5, r5, #1
 800d01e:	429d      	cmp	r5, r3
 800d020:	bf38      	it	cc
 800d022:	461d      	movcc	r5, r3
 800d024:	0553      	lsls	r3, r2, #21
 800d026:	d527      	bpl.n	800d078 <__ssputs_r+0x8c>
 800d028:	4629      	mov	r1, r5
 800d02a:	f7ff fe4d 	bl	800ccc8 <_malloc_r>
 800d02e:	4606      	mov	r6, r0
 800d030:	b360      	cbz	r0, 800d08c <__ssputs_r+0xa0>
 800d032:	464a      	mov	r2, r9
 800d034:	6921      	ldr	r1, [r4, #16]
 800d036:	f000 faed 	bl	800d614 <memcpy>
 800d03a:	89a3      	ldrh	r3, [r4, #12]
 800d03c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d044:	81a3      	strh	r3, [r4, #12]
 800d046:	6126      	str	r6, [r4, #16]
 800d048:	444e      	add	r6, r9
 800d04a:	6026      	str	r6, [r4, #0]
 800d04c:	463e      	mov	r6, r7
 800d04e:	6165      	str	r5, [r4, #20]
 800d050:	eba5 0509 	sub.w	r5, r5, r9
 800d054:	60a5      	str	r5, [r4, #8]
 800d056:	42be      	cmp	r6, r7
 800d058:	d900      	bls.n	800d05c <__ssputs_r+0x70>
 800d05a:	463e      	mov	r6, r7
 800d05c:	4632      	mov	r2, r6
 800d05e:	4641      	mov	r1, r8
 800d060:	6820      	ldr	r0, [r4, #0]
 800d062:	f000 faaf 	bl	800d5c4 <memmove>
 800d066:	2000      	movs	r0, #0
 800d068:	68a3      	ldr	r3, [r4, #8]
 800d06a:	1b9b      	subs	r3, r3, r6
 800d06c:	60a3      	str	r3, [r4, #8]
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	4433      	add	r3, r6
 800d072:	6023      	str	r3, [r4, #0]
 800d074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d078:	462a      	mov	r2, r5
 800d07a:	f000 fad9 	bl	800d630 <_realloc_r>
 800d07e:	4606      	mov	r6, r0
 800d080:	2800      	cmp	r0, #0
 800d082:	d1e0      	bne.n	800d046 <__ssputs_r+0x5a>
 800d084:	4650      	mov	r0, sl
 800d086:	6921      	ldr	r1, [r4, #16]
 800d088:	f7ff ff68 	bl	800cf5c <_free_r>
 800d08c:	230c      	movs	r3, #12
 800d08e:	f8ca 3000 	str.w	r3, [sl]
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	f04f 30ff 	mov.w	r0, #4294967295
 800d098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d09c:	81a3      	strh	r3, [r4, #12]
 800d09e:	e7e9      	b.n	800d074 <__ssputs_r+0x88>

0800d0a0 <_svfiprintf_r>:
 800d0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a4:	4698      	mov	r8, r3
 800d0a6:	898b      	ldrh	r3, [r1, #12]
 800d0a8:	4607      	mov	r7, r0
 800d0aa:	061b      	lsls	r3, r3, #24
 800d0ac:	460d      	mov	r5, r1
 800d0ae:	4614      	mov	r4, r2
 800d0b0:	b09d      	sub	sp, #116	; 0x74
 800d0b2:	d50e      	bpl.n	800d0d2 <_svfiprintf_r+0x32>
 800d0b4:	690b      	ldr	r3, [r1, #16]
 800d0b6:	b963      	cbnz	r3, 800d0d2 <_svfiprintf_r+0x32>
 800d0b8:	2140      	movs	r1, #64	; 0x40
 800d0ba:	f7ff fe05 	bl	800ccc8 <_malloc_r>
 800d0be:	6028      	str	r0, [r5, #0]
 800d0c0:	6128      	str	r0, [r5, #16]
 800d0c2:	b920      	cbnz	r0, 800d0ce <_svfiprintf_r+0x2e>
 800d0c4:	230c      	movs	r3, #12
 800d0c6:	603b      	str	r3, [r7, #0]
 800d0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0cc:	e0d0      	b.n	800d270 <_svfiprintf_r+0x1d0>
 800d0ce:	2340      	movs	r3, #64	; 0x40
 800d0d0:	616b      	str	r3, [r5, #20]
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d6:	2320      	movs	r3, #32
 800d0d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0dc:	2330      	movs	r3, #48	; 0x30
 800d0de:	f04f 0901 	mov.w	r9, #1
 800d0e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0e6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d288 <_svfiprintf_r+0x1e8>
 800d0ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0ee:	4623      	mov	r3, r4
 800d0f0:	469a      	mov	sl, r3
 800d0f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0f6:	b10a      	cbz	r2, 800d0fc <_svfiprintf_r+0x5c>
 800d0f8:	2a25      	cmp	r2, #37	; 0x25
 800d0fa:	d1f9      	bne.n	800d0f0 <_svfiprintf_r+0x50>
 800d0fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d100:	d00b      	beq.n	800d11a <_svfiprintf_r+0x7a>
 800d102:	465b      	mov	r3, fp
 800d104:	4622      	mov	r2, r4
 800d106:	4629      	mov	r1, r5
 800d108:	4638      	mov	r0, r7
 800d10a:	f7ff ff6f 	bl	800cfec <__ssputs_r>
 800d10e:	3001      	adds	r0, #1
 800d110:	f000 80a9 	beq.w	800d266 <_svfiprintf_r+0x1c6>
 800d114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d116:	445a      	add	r2, fp
 800d118:	9209      	str	r2, [sp, #36]	; 0x24
 800d11a:	f89a 3000 	ldrb.w	r3, [sl]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f000 80a1 	beq.w	800d266 <_svfiprintf_r+0x1c6>
 800d124:	2300      	movs	r3, #0
 800d126:	f04f 32ff 	mov.w	r2, #4294967295
 800d12a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d12e:	f10a 0a01 	add.w	sl, sl, #1
 800d132:	9304      	str	r3, [sp, #16]
 800d134:	9307      	str	r3, [sp, #28]
 800d136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d13a:	931a      	str	r3, [sp, #104]	; 0x68
 800d13c:	4654      	mov	r4, sl
 800d13e:	2205      	movs	r2, #5
 800d140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d144:	4850      	ldr	r0, [pc, #320]	; (800d288 <_svfiprintf_r+0x1e8>)
 800d146:	f000 fa57 	bl	800d5f8 <memchr>
 800d14a:	9a04      	ldr	r2, [sp, #16]
 800d14c:	b9d8      	cbnz	r0, 800d186 <_svfiprintf_r+0xe6>
 800d14e:	06d0      	lsls	r0, r2, #27
 800d150:	bf44      	itt	mi
 800d152:	2320      	movmi	r3, #32
 800d154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d158:	0711      	lsls	r1, r2, #28
 800d15a:	bf44      	itt	mi
 800d15c:	232b      	movmi	r3, #43	; 0x2b
 800d15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d162:	f89a 3000 	ldrb.w	r3, [sl]
 800d166:	2b2a      	cmp	r3, #42	; 0x2a
 800d168:	d015      	beq.n	800d196 <_svfiprintf_r+0xf6>
 800d16a:	4654      	mov	r4, sl
 800d16c:	2000      	movs	r0, #0
 800d16e:	f04f 0c0a 	mov.w	ip, #10
 800d172:	9a07      	ldr	r2, [sp, #28]
 800d174:	4621      	mov	r1, r4
 800d176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d17a:	3b30      	subs	r3, #48	; 0x30
 800d17c:	2b09      	cmp	r3, #9
 800d17e:	d94d      	bls.n	800d21c <_svfiprintf_r+0x17c>
 800d180:	b1b0      	cbz	r0, 800d1b0 <_svfiprintf_r+0x110>
 800d182:	9207      	str	r2, [sp, #28]
 800d184:	e014      	b.n	800d1b0 <_svfiprintf_r+0x110>
 800d186:	eba0 0308 	sub.w	r3, r0, r8
 800d18a:	fa09 f303 	lsl.w	r3, r9, r3
 800d18e:	4313      	orrs	r3, r2
 800d190:	46a2      	mov	sl, r4
 800d192:	9304      	str	r3, [sp, #16]
 800d194:	e7d2      	b.n	800d13c <_svfiprintf_r+0x9c>
 800d196:	9b03      	ldr	r3, [sp, #12]
 800d198:	1d19      	adds	r1, r3, #4
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	9103      	str	r1, [sp, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bfbb      	ittet	lt
 800d1a2:	425b      	neglt	r3, r3
 800d1a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d1a8:	9307      	strge	r3, [sp, #28]
 800d1aa:	9307      	strlt	r3, [sp, #28]
 800d1ac:	bfb8      	it	lt
 800d1ae:	9204      	strlt	r2, [sp, #16]
 800d1b0:	7823      	ldrb	r3, [r4, #0]
 800d1b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d1b4:	d10c      	bne.n	800d1d0 <_svfiprintf_r+0x130>
 800d1b6:	7863      	ldrb	r3, [r4, #1]
 800d1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ba:	d134      	bne.n	800d226 <_svfiprintf_r+0x186>
 800d1bc:	9b03      	ldr	r3, [sp, #12]
 800d1be:	3402      	adds	r4, #2
 800d1c0:	1d1a      	adds	r2, r3, #4
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	9203      	str	r2, [sp, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	bfb8      	it	lt
 800d1ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1ce:	9305      	str	r3, [sp, #20]
 800d1d0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d28c <_svfiprintf_r+0x1ec>
 800d1d4:	2203      	movs	r2, #3
 800d1d6:	4650      	mov	r0, sl
 800d1d8:	7821      	ldrb	r1, [r4, #0]
 800d1da:	f000 fa0d 	bl	800d5f8 <memchr>
 800d1de:	b138      	cbz	r0, 800d1f0 <_svfiprintf_r+0x150>
 800d1e0:	2240      	movs	r2, #64	; 0x40
 800d1e2:	9b04      	ldr	r3, [sp, #16]
 800d1e4:	eba0 000a 	sub.w	r0, r0, sl
 800d1e8:	4082      	lsls	r2, r0
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	3401      	adds	r4, #1
 800d1ee:	9304      	str	r3, [sp, #16]
 800d1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f4:	2206      	movs	r2, #6
 800d1f6:	4826      	ldr	r0, [pc, #152]	; (800d290 <_svfiprintf_r+0x1f0>)
 800d1f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1fc:	f000 f9fc 	bl	800d5f8 <memchr>
 800d200:	2800      	cmp	r0, #0
 800d202:	d038      	beq.n	800d276 <_svfiprintf_r+0x1d6>
 800d204:	4b23      	ldr	r3, [pc, #140]	; (800d294 <_svfiprintf_r+0x1f4>)
 800d206:	bb1b      	cbnz	r3, 800d250 <_svfiprintf_r+0x1b0>
 800d208:	9b03      	ldr	r3, [sp, #12]
 800d20a:	3307      	adds	r3, #7
 800d20c:	f023 0307 	bic.w	r3, r3, #7
 800d210:	3308      	adds	r3, #8
 800d212:	9303      	str	r3, [sp, #12]
 800d214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d216:	4433      	add	r3, r6
 800d218:	9309      	str	r3, [sp, #36]	; 0x24
 800d21a:	e768      	b.n	800d0ee <_svfiprintf_r+0x4e>
 800d21c:	460c      	mov	r4, r1
 800d21e:	2001      	movs	r0, #1
 800d220:	fb0c 3202 	mla	r2, ip, r2, r3
 800d224:	e7a6      	b.n	800d174 <_svfiprintf_r+0xd4>
 800d226:	2300      	movs	r3, #0
 800d228:	f04f 0c0a 	mov.w	ip, #10
 800d22c:	4619      	mov	r1, r3
 800d22e:	3401      	adds	r4, #1
 800d230:	9305      	str	r3, [sp, #20]
 800d232:	4620      	mov	r0, r4
 800d234:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d238:	3a30      	subs	r2, #48	; 0x30
 800d23a:	2a09      	cmp	r2, #9
 800d23c:	d903      	bls.n	800d246 <_svfiprintf_r+0x1a6>
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d0c6      	beq.n	800d1d0 <_svfiprintf_r+0x130>
 800d242:	9105      	str	r1, [sp, #20]
 800d244:	e7c4      	b.n	800d1d0 <_svfiprintf_r+0x130>
 800d246:	4604      	mov	r4, r0
 800d248:	2301      	movs	r3, #1
 800d24a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d24e:	e7f0      	b.n	800d232 <_svfiprintf_r+0x192>
 800d250:	ab03      	add	r3, sp, #12
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	462a      	mov	r2, r5
 800d256:	4638      	mov	r0, r7
 800d258:	4b0f      	ldr	r3, [pc, #60]	; (800d298 <_svfiprintf_r+0x1f8>)
 800d25a:	a904      	add	r1, sp, #16
 800d25c:	f3af 8000 	nop.w
 800d260:	1c42      	adds	r2, r0, #1
 800d262:	4606      	mov	r6, r0
 800d264:	d1d6      	bne.n	800d214 <_svfiprintf_r+0x174>
 800d266:	89ab      	ldrh	r3, [r5, #12]
 800d268:	065b      	lsls	r3, r3, #25
 800d26a:	f53f af2d 	bmi.w	800d0c8 <_svfiprintf_r+0x28>
 800d26e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d270:	b01d      	add	sp, #116	; 0x74
 800d272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d276:	ab03      	add	r3, sp, #12
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	462a      	mov	r2, r5
 800d27c:	4638      	mov	r0, r7
 800d27e:	4b06      	ldr	r3, [pc, #24]	; (800d298 <_svfiprintf_r+0x1f8>)
 800d280:	a904      	add	r1, sp, #16
 800d282:	f000 f87d 	bl	800d380 <_printf_i>
 800d286:	e7eb      	b.n	800d260 <_svfiprintf_r+0x1c0>
 800d288:	0800e587 	.word	0x0800e587
 800d28c:	0800e58d 	.word	0x0800e58d
 800d290:	0800e591 	.word	0x0800e591
 800d294:	00000000 	.word	0x00000000
 800d298:	0800cfed 	.word	0x0800cfed

0800d29c <_printf_common>:
 800d29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a0:	4616      	mov	r6, r2
 800d2a2:	4699      	mov	r9, r3
 800d2a4:	688a      	ldr	r2, [r1, #8]
 800d2a6:	690b      	ldr	r3, [r1, #16]
 800d2a8:	4607      	mov	r7, r0
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	bfb8      	it	lt
 800d2ae:	4613      	movlt	r3, r2
 800d2b0:	6033      	str	r3, [r6, #0]
 800d2b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2b6:	460c      	mov	r4, r1
 800d2b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2bc:	b10a      	cbz	r2, 800d2c2 <_printf_common+0x26>
 800d2be:	3301      	adds	r3, #1
 800d2c0:	6033      	str	r3, [r6, #0]
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	0699      	lsls	r1, r3, #26
 800d2c6:	bf42      	ittt	mi
 800d2c8:	6833      	ldrmi	r3, [r6, #0]
 800d2ca:	3302      	addmi	r3, #2
 800d2cc:	6033      	strmi	r3, [r6, #0]
 800d2ce:	6825      	ldr	r5, [r4, #0]
 800d2d0:	f015 0506 	ands.w	r5, r5, #6
 800d2d4:	d106      	bne.n	800d2e4 <_printf_common+0x48>
 800d2d6:	f104 0a19 	add.w	sl, r4, #25
 800d2da:	68e3      	ldr	r3, [r4, #12]
 800d2dc:	6832      	ldr	r2, [r6, #0]
 800d2de:	1a9b      	subs	r3, r3, r2
 800d2e0:	42ab      	cmp	r3, r5
 800d2e2:	dc2b      	bgt.n	800d33c <_printf_common+0xa0>
 800d2e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2e8:	1e13      	subs	r3, r2, #0
 800d2ea:	6822      	ldr	r2, [r4, #0]
 800d2ec:	bf18      	it	ne
 800d2ee:	2301      	movne	r3, #1
 800d2f0:	0692      	lsls	r2, r2, #26
 800d2f2:	d430      	bmi.n	800d356 <_printf_common+0xba>
 800d2f4:	4649      	mov	r1, r9
 800d2f6:	4638      	mov	r0, r7
 800d2f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2fc:	47c0      	blx	r8
 800d2fe:	3001      	adds	r0, #1
 800d300:	d023      	beq.n	800d34a <_printf_common+0xae>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	6922      	ldr	r2, [r4, #16]
 800d306:	f003 0306 	and.w	r3, r3, #6
 800d30a:	2b04      	cmp	r3, #4
 800d30c:	bf14      	ite	ne
 800d30e:	2500      	movne	r5, #0
 800d310:	6833      	ldreq	r3, [r6, #0]
 800d312:	f04f 0600 	mov.w	r6, #0
 800d316:	bf08      	it	eq
 800d318:	68e5      	ldreq	r5, [r4, #12]
 800d31a:	f104 041a 	add.w	r4, r4, #26
 800d31e:	bf08      	it	eq
 800d320:	1aed      	subeq	r5, r5, r3
 800d322:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d326:	bf08      	it	eq
 800d328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d32c:	4293      	cmp	r3, r2
 800d32e:	bfc4      	itt	gt
 800d330:	1a9b      	subgt	r3, r3, r2
 800d332:	18ed      	addgt	r5, r5, r3
 800d334:	42b5      	cmp	r5, r6
 800d336:	d11a      	bne.n	800d36e <_printf_common+0xd2>
 800d338:	2000      	movs	r0, #0
 800d33a:	e008      	b.n	800d34e <_printf_common+0xb2>
 800d33c:	2301      	movs	r3, #1
 800d33e:	4652      	mov	r2, sl
 800d340:	4649      	mov	r1, r9
 800d342:	4638      	mov	r0, r7
 800d344:	47c0      	blx	r8
 800d346:	3001      	adds	r0, #1
 800d348:	d103      	bne.n	800d352 <_printf_common+0xb6>
 800d34a:	f04f 30ff 	mov.w	r0, #4294967295
 800d34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d352:	3501      	adds	r5, #1
 800d354:	e7c1      	b.n	800d2da <_printf_common+0x3e>
 800d356:	2030      	movs	r0, #48	; 0x30
 800d358:	18e1      	adds	r1, r4, r3
 800d35a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d364:	4422      	add	r2, r4
 800d366:	3302      	adds	r3, #2
 800d368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d36c:	e7c2      	b.n	800d2f4 <_printf_common+0x58>
 800d36e:	2301      	movs	r3, #1
 800d370:	4622      	mov	r2, r4
 800d372:	4649      	mov	r1, r9
 800d374:	4638      	mov	r0, r7
 800d376:	47c0      	blx	r8
 800d378:	3001      	adds	r0, #1
 800d37a:	d0e6      	beq.n	800d34a <_printf_common+0xae>
 800d37c:	3601      	adds	r6, #1
 800d37e:	e7d9      	b.n	800d334 <_printf_common+0x98>

0800d380 <_printf_i>:
 800d380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d384:	7e0f      	ldrb	r7, [r1, #24]
 800d386:	4691      	mov	r9, r2
 800d388:	2f78      	cmp	r7, #120	; 0x78
 800d38a:	4680      	mov	r8, r0
 800d38c:	460c      	mov	r4, r1
 800d38e:	469a      	mov	sl, r3
 800d390:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d396:	d807      	bhi.n	800d3a8 <_printf_i+0x28>
 800d398:	2f62      	cmp	r7, #98	; 0x62
 800d39a:	d80a      	bhi.n	800d3b2 <_printf_i+0x32>
 800d39c:	2f00      	cmp	r7, #0
 800d39e:	f000 80d5 	beq.w	800d54c <_printf_i+0x1cc>
 800d3a2:	2f58      	cmp	r7, #88	; 0x58
 800d3a4:	f000 80c1 	beq.w	800d52a <_printf_i+0x1aa>
 800d3a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3b0:	e03a      	b.n	800d428 <_printf_i+0xa8>
 800d3b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3b6:	2b15      	cmp	r3, #21
 800d3b8:	d8f6      	bhi.n	800d3a8 <_printf_i+0x28>
 800d3ba:	a101      	add	r1, pc, #4	; (adr r1, 800d3c0 <_printf_i+0x40>)
 800d3bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3c0:	0800d419 	.word	0x0800d419
 800d3c4:	0800d42d 	.word	0x0800d42d
 800d3c8:	0800d3a9 	.word	0x0800d3a9
 800d3cc:	0800d3a9 	.word	0x0800d3a9
 800d3d0:	0800d3a9 	.word	0x0800d3a9
 800d3d4:	0800d3a9 	.word	0x0800d3a9
 800d3d8:	0800d42d 	.word	0x0800d42d
 800d3dc:	0800d3a9 	.word	0x0800d3a9
 800d3e0:	0800d3a9 	.word	0x0800d3a9
 800d3e4:	0800d3a9 	.word	0x0800d3a9
 800d3e8:	0800d3a9 	.word	0x0800d3a9
 800d3ec:	0800d533 	.word	0x0800d533
 800d3f0:	0800d459 	.word	0x0800d459
 800d3f4:	0800d4ed 	.word	0x0800d4ed
 800d3f8:	0800d3a9 	.word	0x0800d3a9
 800d3fc:	0800d3a9 	.word	0x0800d3a9
 800d400:	0800d555 	.word	0x0800d555
 800d404:	0800d3a9 	.word	0x0800d3a9
 800d408:	0800d459 	.word	0x0800d459
 800d40c:	0800d3a9 	.word	0x0800d3a9
 800d410:	0800d3a9 	.word	0x0800d3a9
 800d414:	0800d4f5 	.word	0x0800d4f5
 800d418:	682b      	ldr	r3, [r5, #0]
 800d41a:	1d1a      	adds	r2, r3, #4
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	602a      	str	r2, [r5, #0]
 800d420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d428:	2301      	movs	r3, #1
 800d42a:	e0a0      	b.n	800d56e <_printf_i+0x1ee>
 800d42c:	6820      	ldr	r0, [r4, #0]
 800d42e:	682b      	ldr	r3, [r5, #0]
 800d430:	0607      	lsls	r7, r0, #24
 800d432:	f103 0104 	add.w	r1, r3, #4
 800d436:	6029      	str	r1, [r5, #0]
 800d438:	d501      	bpl.n	800d43e <_printf_i+0xbe>
 800d43a:	681e      	ldr	r6, [r3, #0]
 800d43c:	e003      	b.n	800d446 <_printf_i+0xc6>
 800d43e:	0646      	lsls	r6, r0, #25
 800d440:	d5fb      	bpl.n	800d43a <_printf_i+0xba>
 800d442:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d446:	2e00      	cmp	r6, #0
 800d448:	da03      	bge.n	800d452 <_printf_i+0xd2>
 800d44a:	232d      	movs	r3, #45	; 0x2d
 800d44c:	4276      	negs	r6, r6
 800d44e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d452:	230a      	movs	r3, #10
 800d454:	4859      	ldr	r0, [pc, #356]	; (800d5bc <_printf_i+0x23c>)
 800d456:	e012      	b.n	800d47e <_printf_i+0xfe>
 800d458:	682b      	ldr	r3, [r5, #0]
 800d45a:	6820      	ldr	r0, [r4, #0]
 800d45c:	1d19      	adds	r1, r3, #4
 800d45e:	6029      	str	r1, [r5, #0]
 800d460:	0605      	lsls	r5, r0, #24
 800d462:	d501      	bpl.n	800d468 <_printf_i+0xe8>
 800d464:	681e      	ldr	r6, [r3, #0]
 800d466:	e002      	b.n	800d46e <_printf_i+0xee>
 800d468:	0641      	lsls	r1, r0, #25
 800d46a:	d5fb      	bpl.n	800d464 <_printf_i+0xe4>
 800d46c:	881e      	ldrh	r6, [r3, #0]
 800d46e:	2f6f      	cmp	r7, #111	; 0x6f
 800d470:	bf0c      	ite	eq
 800d472:	2308      	moveq	r3, #8
 800d474:	230a      	movne	r3, #10
 800d476:	4851      	ldr	r0, [pc, #324]	; (800d5bc <_printf_i+0x23c>)
 800d478:	2100      	movs	r1, #0
 800d47a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d47e:	6865      	ldr	r5, [r4, #4]
 800d480:	2d00      	cmp	r5, #0
 800d482:	bfa8      	it	ge
 800d484:	6821      	ldrge	r1, [r4, #0]
 800d486:	60a5      	str	r5, [r4, #8]
 800d488:	bfa4      	itt	ge
 800d48a:	f021 0104 	bicge.w	r1, r1, #4
 800d48e:	6021      	strge	r1, [r4, #0]
 800d490:	b90e      	cbnz	r6, 800d496 <_printf_i+0x116>
 800d492:	2d00      	cmp	r5, #0
 800d494:	d04b      	beq.n	800d52e <_printf_i+0x1ae>
 800d496:	4615      	mov	r5, r2
 800d498:	fbb6 f1f3 	udiv	r1, r6, r3
 800d49c:	fb03 6711 	mls	r7, r3, r1, r6
 800d4a0:	5dc7      	ldrb	r7, [r0, r7]
 800d4a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4a6:	4637      	mov	r7, r6
 800d4a8:	42bb      	cmp	r3, r7
 800d4aa:	460e      	mov	r6, r1
 800d4ac:	d9f4      	bls.n	800d498 <_printf_i+0x118>
 800d4ae:	2b08      	cmp	r3, #8
 800d4b0:	d10b      	bne.n	800d4ca <_printf_i+0x14a>
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	07de      	lsls	r6, r3, #31
 800d4b6:	d508      	bpl.n	800d4ca <_printf_i+0x14a>
 800d4b8:	6923      	ldr	r3, [r4, #16]
 800d4ba:	6861      	ldr	r1, [r4, #4]
 800d4bc:	4299      	cmp	r1, r3
 800d4be:	bfde      	ittt	le
 800d4c0:	2330      	movle	r3, #48	; 0x30
 800d4c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d4c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d4ca:	1b52      	subs	r2, r2, r5
 800d4cc:	6122      	str	r2, [r4, #16]
 800d4ce:	464b      	mov	r3, r9
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	4640      	mov	r0, r8
 800d4d4:	f8cd a000 	str.w	sl, [sp]
 800d4d8:	aa03      	add	r2, sp, #12
 800d4da:	f7ff fedf 	bl	800d29c <_printf_common>
 800d4de:	3001      	adds	r0, #1
 800d4e0:	d14a      	bne.n	800d578 <_printf_i+0x1f8>
 800d4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e6:	b004      	add	sp, #16
 800d4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ec:	6823      	ldr	r3, [r4, #0]
 800d4ee:	f043 0320 	orr.w	r3, r3, #32
 800d4f2:	6023      	str	r3, [r4, #0]
 800d4f4:	2778      	movs	r7, #120	; 0x78
 800d4f6:	4832      	ldr	r0, [pc, #200]	; (800d5c0 <_printf_i+0x240>)
 800d4f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	6829      	ldr	r1, [r5, #0]
 800d500:	061f      	lsls	r7, r3, #24
 800d502:	f851 6b04 	ldr.w	r6, [r1], #4
 800d506:	d402      	bmi.n	800d50e <_printf_i+0x18e>
 800d508:	065f      	lsls	r7, r3, #25
 800d50a:	bf48      	it	mi
 800d50c:	b2b6      	uxthmi	r6, r6
 800d50e:	07df      	lsls	r7, r3, #31
 800d510:	bf48      	it	mi
 800d512:	f043 0320 	orrmi.w	r3, r3, #32
 800d516:	6029      	str	r1, [r5, #0]
 800d518:	bf48      	it	mi
 800d51a:	6023      	strmi	r3, [r4, #0]
 800d51c:	b91e      	cbnz	r6, 800d526 <_printf_i+0x1a6>
 800d51e:	6823      	ldr	r3, [r4, #0]
 800d520:	f023 0320 	bic.w	r3, r3, #32
 800d524:	6023      	str	r3, [r4, #0]
 800d526:	2310      	movs	r3, #16
 800d528:	e7a6      	b.n	800d478 <_printf_i+0xf8>
 800d52a:	4824      	ldr	r0, [pc, #144]	; (800d5bc <_printf_i+0x23c>)
 800d52c:	e7e4      	b.n	800d4f8 <_printf_i+0x178>
 800d52e:	4615      	mov	r5, r2
 800d530:	e7bd      	b.n	800d4ae <_printf_i+0x12e>
 800d532:	682b      	ldr	r3, [r5, #0]
 800d534:	6826      	ldr	r6, [r4, #0]
 800d536:	1d18      	adds	r0, r3, #4
 800d538:	6961      	ldr	r1, [r4, #20]
 800d53a:	6028      	str	r0, [r5, #0]
 800d53c:	0635      	lsls	r5, r6, #24
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	d501      	bpl.n	800d546 <_printf_i+0x1c6>
 800d542:	6019      	str	r1, [r3, #0]
 800d544:	e002      	b.n	800d54c <_printf_i+0x1cc>
 800d546:	0670      	lsls	r0, r6, #25
 800d548:	d5fb      	bpl.n	800d542 <_printf_i+0x1c2>
 800d54a:	8019      	strh	r1, [r3, #0]
 800d54c:	2300      	movs	r3, #0
 800d54e:	4615      	mov	r5, r2
 800d550:	6123      	str	r3, [r4, #16]
 800d552:	e7bc      	b.n	800d4ce <_printf_i+0x14e>
 800d554:	682b      	ldr	r3, [r5, #0]
 800d556:	2100      	movs	r1, #0
 800d558:	1d1a      	adds	r2, r3, #4
 800d55a:	602a      	str	r2, [r5, #0]
 800d55c:	681d      	ldr	r5, [r3, #0]
 800d55e:	6862      	ldr	r2, [r4, #4]
 800d560:	4628      	mov	r0, r5
 800d562:	f000 f849 	bl	800d5f8 <memchr>
 800d566:	b108      	cbz	r0, 800d56c <_printf_i+0x1ec>
 800d568:	1b40      	subs	r0, r0, r5
 800d56a:	6060      	str	r0, [r4, #4]
 800d56c:	6863      	ldr	r3, [r4, #4]
 800d56e:	6123      	str	r3, [r4, #16]
 800d570:	2300      	movs	r3, #0
 800d572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d576:	e7aa      	b.n	800d4ce <_printf_i+0x14e>
 800d578:	462a      	mov	r2, r5
 800d57a:	4649      	mov	r1, r9
 800d57c:	4640      	mov	r0, r8
 800d57e:	6923      	ldr	r3, [r4, #16]
 800d580:	47d0      	blx	sl
 800d582:	3001      	adds	r0, #1
 800d584:	d0ad      	beq.n	800d4e2 <_printf_i+0x162>
 800d586:	6823      	ldr	r3, [r4, #0]
 800d588:	079b      	lsls	r3, r3, #30
 800d58a:	d413      	bmi.n	800d5b4 <_printf_i+0x234>
 800d58c:	68e0      	ldr	r0, [r4, #12]
 800d58e:	9b03      	ldr	r3, [sp, #12]
 800d590:	4298      	cmp	r0, r3
 800d592:	bfb8      	it	lt
 800d594:	4618      	movlt	r0, r3
 800d596:	e7a6      	b.n	800d4e6 <_printf_i+0x166>
 800d598:	2301      	movs	r3, #1
 800d59a:	4632      	mov	r2, r6
 800d59c:	4649      	mov	r1, r9
 800d59e:	4640      	mov	r0, r8
 800d5a0:	47d0      	blx	sl
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	d09d      	beq.n	800d4e2 <_printf_i+0x162>
 800d5a6:	3501      	adds	r5, #1
 800d5a8:	68e3      	ldr	r3, [r4, #12]
 800d5aa:	9903      	ldr	r1, [sp, #12]
 800d5ac:	1a5b      	subs	r3, r3, r1
 800d5ae:	42ab      	cmp	r3, r5
 800d5b0:	dcf2      	bgt.n	800d598 <_printf_i+0x218>
 800d5b2:	e7eb      	b.n	800d58c <_printf_i+0x20c>
 800d5b4:	2500      	movs	r5, #0
 800d5b6:	f104 0619 	add.w	r6, r4, #25
 800d5ba:	e7f5      	b.n	800d5a8 <_printf_i+0x228>
 800d5bc:	0800e598 	.word	0x0800e598
 800d5c0:	0800e5a9 	.word	0x0800e5a9

0800d5c4 <memmove>:
 800d5c4:	4288      	cmp	r0, r1
 800d5c6:	b510      	push	{r4, lr}
 800d5c8:	eb01 0402 	add.w	r4, r1, r2
 800d5cc:	d902      	bls.n	800d5d4 <memmove+0x10>
 800d5ce:	4284      	cmp	r4, r0
 800d5d0:	4623      	mov	r3, r4
 800d5d2:	d807      	bhi.n	800d5e4 <memmove+0x20>
 800d5d4:	1e43      	subs	r3, r0, #1
 800d5d6:	42a1      	cmp	r1, r4
 800d5d8:	d008      	beq.n	800d5ec <memmove+0x28>
 800d5da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5e2:	e7f8      	b.n	800d5d6 <memmove+0x12>
 800d5e4:	4601      	mov	r1, r0
 800d5e6:	4402      	add	r2, r0
 800d5e8:	428a      	cmp	r2, r1
 800d5ea:	d100      	bne.n	800d5ee <memmove+0x2a>
 800d5ec:	bd10      	pop	{r4, pc}
 800d5ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5f6:	e7f7      	b.n	800d5e8 <memmove+0x24>

0800d5f8 <memchr>:
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	b510      	push	{r4, lr}
 800d5fc:	b2c9      	uxtb	r1, r1
 800d5fe:	4402      	add	r2, r0
 800d600:	4293      	cmp	r3, r2
 800d602:	4618      	mov	r0, r3
 800d604:	d101      	bne.n	800d60a <memchr+0x12>
 800d606:	2000      	movs	r0, #0
 800d608:	e003      	b.n	800d612 <memchr+0x1a>
 800d60a:	7804      	ldrb	r4, [r0, #0]
 800d60c:	3301      	adds	r3, #1
 800d60e:	428c      	cmp	r4, r1
 800d610:	d1f6      	bne.n	800d600 <memchr+0x8>
 800d612:	bd10      	pop	{r4, pc}

0800d614 <memcpy>:
 800d614:	440a      	add	r2, r1
 800d616:	4291      	cmp	r1, r2
 800d618:	f100 33ff 	add.w	r3, r0, #4294967295
 800d61c:	d100      	bne.n	800d620 <memcpy+0xc>
 800d61e:	4770      	bx	lr
 800d620:	b510      	push	{r4, lr}
 800d622:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d626:	4291      	cmp	r1, r2
 800d628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d62c:	d1f9      	bne.n	800d622 <memcpy+0xe>
 800d62e:	bd10      	pop	{r4, pc}

0800d630 <_realloc_r>:
 800d630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d634:	4680      	mov	r8, r0
 800d636:	4614      	mov	r4, r2
 800d638:	460e      	mov	r6, r1
 800d63a:	b921      	cbnz	r1, 800d646 <_realloc_r+0x16>
 800d63c:	4611      	mov	r1, r2
 800d63e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d642:	f7ff bb41 	b.w	800ccc8 <_malloc_r>
 800d646:	b92a      	cbnz	r2, 800d654 <_realloc_r+0x24>
 800d648:	f7ff fc88 	bl	800cf5c <_free_r>
 800d64c:	4625      	mov	r5, r4
 800d64e:	4628      	mov	r0, r5
 800d650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d654:	f000 f81b 	bl	800d68e <_malloc_usable_size_r>
 800d658:	4284      	cmp	r4, r0
 800d65a:	4607      	mov	r7, r0
 800d65c:	d802      	bhi.n	800d664 <_realloc_r+0x34>
 800d65e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d662:	d812      	bhi.n	800d68a <_realloc_r+0x5a>
 800d664:	4621      	mov	r1, r4
 800d666:	4640      	mov	r0, r8
 800d668:	f7ff fb2e 	bl	800ccc8 <_malloc_r>
 800d66c:	4605      	mov	r5, r0
 800d66e:	2800      	cmp	r0, #0
 800d670:	d0ed      	beq.n	800d64e <_realloc_r+0x1e>
 800d672:	42bc      	cmp	r4, r7
 800d674:	4622      	mov	r2, r4
 800d676:	4631      	mov	r1, r6
 800d678:	bf28      	it	cs
 800d67a:	463a      	movcs	r2, r7
 800d67c:	f7ff ffca 	bl	800d614 <memcpy>
 800d680:	4631      	mov	r1, r6
 800d682:	4640      	mov	r0, r8
 800d684:	f7ff fc6a 	bl	800cf5c <_free_r>
 800d688:	e7e1      	b.n	800d64e <_realloc_r+0x1e>
 800d68a:	4635      	mov	r5, r6
 800d68c:	e7df      	b.n	800d64e <_realloc_r+0x1e>

0800d68e <_malloc_usable_size_r>:
 800d68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d692:	1f18      	subs	r0, r3, #4
 800d694:	2b00      	cmp	r3, #0
 800d696:	bfbc      	itt	lt
 800d698:	580b      	ldrlt	r3, [r1, r0]
 800d69a:	18c0      	addlt	r0, r0, r3
 800d69c:	4770      	bx	lr
	...

0800d6a0 <_init>:
 800d6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a2:	bf00      	nop
 800d6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a6:	bc08      	pop	{r3}
 800d6a8:	469e      	mov	lr, r3
 800d6aa:	4770      	bx	lr

0800d6ac <_fini>:
 800d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ae:	bf00      	nop
 800d6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6b2:	bc08      	pop	{r3}
 800d6b4:	469e      	mov	lr, r3
 800d6b6:	4770      	bx	lr
